"use strict";var path=require("path"),acorn=require("acorn"),escodegen=require("escodegen"),estraverse=require("estraverse"),sourceMap=require("source-map"),mergeSourceMap=require("merge-source-map"),compile=require("./compile"),defaults=require("./defaults"),runtimePath=require.resolve("./runtime"),CONSTS=compile.Compiler.CONSTS,LOCAL_MODULE=/^\.+\//,getDefaults=function(e){var r={imports:runtimePath,bail:!0,cache:!1,debug:!1,sourceMap:!1,sourceRoot:e.sourceRoot};for(var t in e)r[t]=e[t];return defaults.$extend(r)},convertFilenameNode=function(e,r){var t,a,n;return"Literal"===e.type&&(t=r.resolveFilename(e.value,r),a=path.dirname(r.filename),n=path.relative(a,t),LOCAL_MODULE.test(n)?e.value=n:e.value="./"+n,delete e.raw),e},getOldSourceMap=function(e,r){var t=r.sourceRoot,a=r.source,n=r.file,o=new sourceMap.SourceMapGenerator({file:n,sourceRoot:t});return e.forEach(function(e){e.source=a,o.addMapping(e)}),o.toJSON()},precompile=function(e){var o=0<arguments.length&&void 0!==e?e:{};if("string"!=typeof o.filename)throw Error('template.precompile(): "options.filename" required');o=getDefaults(o);var r=null,t=null,a=null,n=o.imports,i=[CONSTS.INCLUDE,CONSTS.EXTEND];if("string"!=typeof n)throw Error('template.precompile(): "options.imports" is a file. Example:\noptions: { imports: require.resolve("art-template/lib/runtime") }\n');o.imports=require(n);var s=LOCAL_MODULE.test(n)?n:path.relative(path.dirname(o.filename),n),p=compile(o);r="("+p.toString()+")",a=acorn.parse(r,{locations:o.sourceMap});var l,u,c,m,f,d,S=null,a=estraverse.replace(a,{enter:function(e){if("VariableDeclarator"===e.type&&-1!==i.indexOf(e.id.name)){if(e.id.name===CONSTS.INCLUDE)return e.init={type:"FunctionExpression",params:[{type:"Identifier",name:"content"}],body:{type:"BlockStatement",body:[{type:"ExpressionStatement",expression:{type:"AssignmentExpression",operator:"+=",left:{type:"Identifier",name:CONSTS.OUT},right:{type:"Identifier",name:"content"}}},{type:"ReturnStatement",argument:{type:"Identifier",name:CONSTS.OUT}}]}},e;this.remove()}else if("CallExpression"===e.type&&"Identifier"===e.callee.type&&-1!==i.indexOf(e.callee.name)){var r=void 0;switch(e.callee.name){case CONSTS.EXTEND:S=convertFilenameNode(e.arguments[0],o),r={type:"AssignmentExpression",operator:"=",left:{type:"Identifier",name:CONSTS.FROM},right:{type:"Literal",value:!0}};break;case CONSTS.INCLUDE:var t=e.arguments.shift(),a=t.name===CONSTS.FROM?S:convertFilenameNode(t,o),n=e.arguments.length?e.arguments:[{type:"Identifier",name:CONSTS.DATA}];(r=e).arguments=[{type:"CallExpression",callee:{type:"CallExpression",callee:{type:"Identifier",name:"require"},arguments:[a]},arguments:n}]}return r}}});return o.sourceMap?(l=o.sourceRoot,u=path.relative(l,o.filename),c=path.basename(u),m=escodegen.generate(a,{sourceMap:u,file:c,sourceMapRoot:l,sourceMapWithCode:!0}),r=m.code,f=m.map.toJSON(),d=getOldSourceMap(p.mappings,{sourceRoot:l,source:u,file:c}),(t=mergeSourceMap(d,f)).file=c,t.sourcesContent=p.sourcesContent):r=escodegen.generate(a),r=r.replace(/^\(|\)[;\s]*?$/g,""),{code:r="var "+CONSTS.IMPORTS+" = require("+JSON.stringify(s)+");\nmodule.exports = "+r+";",ast:a,sourceMap:t,toString:function(){return r}}};module.exports=precompile;