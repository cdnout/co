import Dimensions from"../../exports/Dimensions";import findNodeHandle from"../../exports/findNodeHandle";import invariant from"fbjs/lib/invariant";import Platform from"../../exports/Platform";import TextInputState from"../TextInputState";import UIManager from"../../exports/UIManager";import warning from"fbjs/lib/warning";var emptyObject={},IS_ANIMATING_TOUCH_START_THRESHOLD_MS=16,ScrollResponderMixin={scrollResponderMixinGetInitialState:function(){return{isTouching:!1,lastMomentumScrollBeginTime:0,lastMomentumScrollEndTime:0,observedScrollSinceBecomingResponder:!1,becameResponderWhileAnimating:!1}},scrollResponderHandleScrollShouldSetResponder:function(){return this.state.isTouching},scrollResponderHandleStartShouldSetResponder:function(){return!1},scrollResponderHandleStartShouldSetResponderCapture:function(o){return this.scrollResponderIsAnimating()},scrollResponderHandleResponderReject:function(){warning(!1,"ScrollView doesn't take rejection well - scrolls anyway")},scrollResponderHandleTerminationRequest:function(){return!this.state.observedScrollSinceBecomingResponder},scrollResponderHandleTouchEnd:function(o){var e=o.nativeEvent;this.state.isTouching=0!==e.touches.length,this.props.onTouchEnd&&this.props.onTouchEnd(o)},scrollResponderHandleResponderRelease:function(o){this.props.onResponderRelease&&this.props.onResponderRelease(o);var e=TextInputState.currentlyFocusedField();this.props.keyboardShouldPersistTaps||null==e||o.target===e||this.state.observedScrollSinceBecomingResponder||this.state.becameResponderWhileAnimating||(this.props.onScrollResponderKeyboardDismissed&&this.props.onScrollResponderKeyboardDismissed(o),TextInputState.blurTextInput(e))},scrollResponderHandleScroll:function(o){this.state.observedScrollSinceBecomingResponder=!0,this.props.onScroll&&this.props.onScroll(o)},scrollResponderHandleResponderGrant:function(o){this.state.observedScrollSinceBecomingResponder=!1,this.props.onResponderGrant&&this.props.onResponderGrant(o),this.state.becameResponderWhileAnimating=this.scrollResponderIsAnimating()},scrollResponderHandleScrollBeginDrag:function(o){this.props.onScrollBeginDrag&&this.props.onScrollBeginDrag(o)},scrollResponderHandleScrollEndDrag:function(o){this.props.onScrollEndDrag&&this.props.onScrollEndDrag(o)},scrollResponderHandleMomentumScrollBegin:function(o){this.state.lastMomentumScrollBeginTime=Date.now(),this.props.onMomentumScrollBegin&&this.props.onMomentumScrollBegin(o)},scrollResponderHandleMomentumScrollEnd:function(o){this.state.lastMomentumScrollEndTime=Date.now(),this.props.onMomentumScrollEnd&&this.props.onMomentumScrollEnd(o)},scrollResponderHandleTouchStart:function(o){this.state.isTouching=!0,this.props.onTouchStart&&this.props.onTouchStart(o)},scrollResponderHandleTouchMove:function(o){this.props.onTouchMove&&this.props.onTouchMove(o)},scrollResponderIsAnimating:function(){return Date.now()-this.state.lastMomentumScrollEndTime<IS_ANIMATING_TOUCH_START_THRESHOLD_MS||this.state.lastMomentumScrollEndTime<this.state.lastMomentumScrollBeginTime},scrollResponderGetScrollableNode:function(){return this.getScrollableNode?this.getScrollableNode():findNodeHandle(this)},scrollResponderScrollTo:function(o,e,n){"number"==typeof o?console.warn("`scrollResponderScrollTo(x, y, animated)` is deprecated. Use `scrollResponderScrollTo({x: 5, y: 5, animated: true})` instead."):(o=(r=o||emptyObject).x,e=r.y,n=r.animated);var r=this.scrollResponderGetScrollableNode(),o=o||0,e=e||0;"function"==typeof r.scroll?r.scroll({top:e,left:o,behavior:n?"smooth":"auto"}):(r.scrollLeft=o,r.scrollTop=e)},scrollResponderZoomTo:function(o,e){"ios"!==Platform.OS&&invariant("zoomToRect is not implemented")},scrollResponderFlashScrollIndicators:function(){},scrollResponderScrollNativeHandleToKeyboard:function(o,e,n){this.additionalScrollOffset=e||0,this.preventNegativeScrollOffset=!!n,UIManager.measureLayout(o,findNodeHandle(this.getInnerViewNode()),this.scrollResponderTextInputFocusError,this.scrollResponderInputMeasureAndScrollToKeyboard)},scrollResponderInputMeasureAndScrollToKeyboard:function(o,e,n,r){var t=Dimensions.get("window").height,r=e-(t=this.keyboardWillOpenTo?this.keyboardWillOpenTo.endCoordinates.screenY:t)+r+this.additionalScrollOffset;this.preventNegativeScrollOffset&&(r=Math.max(0,r)),this.scrollResponderScrollTo({x:0,y:r,animated:!0}),this.additionalOffset=0,this.preventNegativeScrollOffset=!1},scrollResponderTextInputFocusError:function(o){console.error("Error measuring text field: ",o)},UNSAFE_componentWillMount:function(){this.keyboardWillOpenTo=null,this.additionalScrollOffset=0},scrollResponderKeyboardWillShow:function(o){this.keyboardWillOpenTo=o,this.props.onKeyboardWillShow&&this.props.onKeyboardWillShow(o)},scrollResponderKeyboardWillHide:function(o){this.keyboardWillOpenTo=null,this.props.onKeyboardWillHide&&this.props.onKeyboardWillHide(o)},scrollResponderKeyboardDidShow:function(o){o&&(this.keyboardWillOpenTo=o),this.props.onKeyboardDidShow&&this.props.onKeyboardDidShow(o)},scrollResponderKeyboardDidHide:function(o){this.keyboardWillOpenTo=null,this.props.onKeyboardDidHide&&this.props.onKeyboardDidHide(o)}},ScrollResponder={Mixin:ScrollResponderMixin};export default ScrollResponder;