"use strict";import EmitterSubscription from"./EmitterSubscription";import EventSubscriptionVendor from"./EventSubscriptionVendor";import invariant from"fbjs/lib/invariant";var sparseFilterPredicate=function(){return!0},EventEmitter=function(){function r(r){this._subscriber=r||new EventSubscriptionVendor}var t=r.prototype;return t.addListener=function(r,t,i){return this._subscriber.addSubscription(r,new EmitterSubscription(this,this._subscriber,t,i))},t.once=function(r,t,i){var e=this;return this.addListener(r,function(){e.removeCurrentListener();for(var r=arguments.length,n=new Array(r),s=0;s<r;s++)n[s]=arguments[s];t.apply(i,n)})},t.removeAllListeners=function(r){this._subscriber.removeAllSubscriptions(r)},t.removeCurrentListener=function(){invariant(!!this._currentSubscription,"Not in an emitting cycle; there is no current subscription"),this.removeSubscription(this._currentSubscription)},t.removeSubscription=function(r){invariant(r.emitter===this,"Subscription does not belong to this emitter."),this._subscriber.removeSubscription(r)},t.listeners=function(r){var t=this._subscriber.getSubscriptionsForType(r);return t?t.filter(sparseFilterPredicate).map(function(r){return r.listener}):[]},t.emit=function(r){var t=this._subscriber.getSubscriptionsForType(r);if(t){for(var i=0,e=t.length;i<e;i++){var n=t[i];n&&n.listener&&(this._currentSubscription=n,n.listener.apply(n.context,Array.prototype.slice.call(arguments,1)))}this._currentSubscription=null}},t.removeListener=function(r,t){var i=this._subscriber.getSubscriptionsForType(r);if(i)for(var e=0,n=i.length;e<n;e++){var s=i[e];s&&s.listener===t&&s.remove()}},r}();export default EventEmitter;