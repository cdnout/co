"use strict";import invariant from"fbjs/lib/invariant";function elementsThatOverlapOffsets(t,e,n){for(var r=[],a=0,i=0;i<e;i++)for(var s=n(i),f=s.offset+s.length,l=0;l<t.length;l++)if(null==r[l]&&f>=t[l]&&(r[l]=i,a++,l===t.length-1))return invariant(a===t.length,"bad offsets input, should be in increasing order: %s",JSON.stringify(t)),r;return r}function newRangeCount(t,e){return e.last-e.first+1-Math.max(0,1+Math.min(e.last,t.last)-Math.max(e.first,t.first))}function computeWindowedRenderLimits(t,e,n,r,a,i,s){var f=e(t);if(0===f)return a;var l=s.offset,e=s.velocity,t=s.visibleLength,s=Math.max(0,l),l=s+t,t=(r-1)*t,o=1<e?"after":e<-1?"before":"none",e=Math.max(0,s-.5*t),t=Math.max(0,l+.5*t);if(i(f-1).offset<e)return{first:Math.max(0,f-1-n),last:f-1};for(var i=elementsThatOverlapOffsets([e,s,l,t],f,i),u=i[0],h=i[1],m=i[2],u=null==u?0:u,v=null==(v=i[3])?f-1:v,i={first:h=null==h?Math.max(0,u):h,last:m=null==m?Math.min(v,h+n-1):m},c=newRangeCount(a,i);;){if(h<=u&&v<=m)break;var d=n<=c,b=h<=a.first||h>a.last,g=u<h&&(!d||!b),p=m>=a.last||m<a.first,x=m<v&&(!d||!p);if(d&&!g&&!x)break;!g||"after"==o&&x&&p||(b&&c++,h--),!x||"before"==o&&g&&b||(p&&c++,m++)}if(!(h<=m&&0<=h&&m<f&&u<=h&&m<=v&&h<=i.first&&i.last<=m))throw new Error("Bad window calculation "+JSON.stringify({first:h,last:m,itemCount:f,overscanFirst:u,overscanLast:v,visible:i}));return{first:h,last:m}}function keyExtractor(t,e){return"object"==typeof t&&null!=(null==t?void 0:t.key)?t.key:"object"==typeof t&&null!=(null==t?void 0:t.id)?t.id:String(e)}export{elementsThatOverlapOffsets,newRangeCount,computeWindowedRenderLimits,keyExtractor};