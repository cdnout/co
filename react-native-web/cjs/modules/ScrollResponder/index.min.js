"use strict";exports.__esModule=!0,exports.default=void 0;var _Dimensions=_interopRequireDefault(require("../../exports/Dimensions")),_findNodeHandle=_interopRequireDefault(require("../../exports/findNodeHandle")),_invariant=_interopRequireDefault(require("fbjs/lib/invariant")),_Platform=_interopRequireDefault(require("../../exports/Platform")),_TextInputState=_interopRequireDefault(require("../TextInputState")),_UIManager=_interopRequireDefault(require("../../exports/UIManager")),_warning=_interopRequireDefault(require("fbjs/lib/warning"));function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}var emptyObject={},IS_ANIMATING_TOUCH_START_THRESHOLD_MS=16,ScrollResponderMixin={scrollResponderMixinGetInitialState:function(){return{isTouching:!1,lastMomentumScrollBeginTime:0,lastMomentumScrollEndTime:0,observedScrollSinceBecomingResponder:!1,becameResponderWhileAnimating:!1}},scrollResponderHandleScrollShouldSetResponder:function(){return this.state.isTouching},scrollResponderHandleStartShouldSetResponder:function(){return!1},scrollResponderHandleStartShouldSetResponderCapture:function(e){return this.scrollResponderIsAnimating()},scrollResponderHandleResponderReject:function(){(0,_warning.default)(!1,"ScrollView doesn't take rejection well - scrolls anyway")},scrollResponderHandleTerminationRequest:function(){return!this.state.observedScrollSinceBecomingResponder},scrollResponderHandleTouchEnd:function(e){var o=e.nativeEvent;this.state.isTouching=0!==o.touches.length,this.props.onTouchEnd&&this.props.onTouchEnd(e)},scrollResponderHandleResponderRelease:function(e){this.props.onResponderRelease&&this.props.onResponderRelease(e);var o=_TextInputState.default.currentlyFocusedField();this.props.keyboardShouldPersistTaps||null==o||e.target===o||this.state.observedScrollSinceBecomingResponder||this.state.becameResponderWhileAnimating||(this.props.onScrollResponderKeyboardDismissed&&this.props.onScrollResponderKeyboardDismissed(e),_TextInputState.default.blurTextInput(o))},scrollResponderHandleScroll:function(e){this.state.observedScrollSinceBecomingResponder=!0,this.props.onScroll&&this.props.onScroll(e)},scrollResponderHandleResponderGrant:function(e){this.state.observedScrollSinceBecomingResponder=!1,this.props.onResponderGrant&&this.props.onResponderGrant(e),this.state.becameResponderWhileAnimating=this.scrollResponderIsAnimating()},scrollResponderHandleScrollBeginDrag:function(e){this.props.onScrollBeginDrag&&this.props.onScrollBeginDrag(e)},scrollResponderHandleScrollEndDrag:function(e){this.props.onScrollEndDrag&&this.props.onScrollEndDrag(e)},scrollResponderHandleMomentumScrollBegin:function(e){this.state.lastMomentumScrollBeginTime=Date.now(),this.props.onMomentumScrollBegin&&this.props.onMomentumScrollBegin(e)},scrollResponderHandleMomentumScrollEnd:function(e){this.state.lastMomentumScrollEndTime=Date.now(),this.props.onMomentumScrollEnd&&this.props.onMomentumScrollEnd(e)},scrollResponderHandleTouchStart:function(e){this.state.isTouching=!0,this.props.onTouchStart&&this.props.onTouchStart(e)},scrollResponderHandleTouchMove:function(e){this.props.onTouchMove&&this.props.onTouchMove(e)},scrollResponderIsAnimating:function(){return Date.now()-this.state.lastMomentumScrollEndTime<IS_ANIMATING_TOUCH_START_THRESHOLD_MS||this.state.lastMomentumScrollEndTime<this.state.lastMomentumScrollBeginTime},scrollResponderGetScrollableNode:function(){return this.getScrollableNode?this.getScrollableNode():(0,_findNodeHandle.default)(this)},scrollResponderScrollTo:function(e,o,n){"number"==typeof e?console.warn("`scrollResponderScrollTo(x, y, animated)` is deprecated. Use `scrollResponderScrollTo({x: 5, y: 5, animated: true})` instead."):(e=(r=e||emptyObject).x,o=r.y,n=r.animated);var r=this.scrollResponderGetScrollableNode(),e=e||0,o=o||0;"function"==typeof r.scroll?r.scroll({top:o,left:e,behavior:n?"smooth":"auto"}):(r.scrollLeft=e,r.scrollTop=o)},scrollResponderZoomTo:function(e,o){"ios"!==_Platform.default.OS&&(0,_invariant.default)("zoomToRect is not implemented")},scrollResponderFlashScrollIndicators:function(){},scrollResponderScrollNativeHandleToKeyboard:function(e,o,n){this.additionalScrollOffset=o||0,this.preventNegativeScrollOffset=!!n,_UIManager.default.measureLayout(e,(0,_findNodeHandle.default)(this.getInnerViewNode()),this.scrollResponderTextInputFocusError,this.scrollResponderInputMeasureAndScrollToKeyboard)},scrollResponderInputMeasureAndScrollToKeyboard:function(e,o,n,r){var t=_Dimensions.default.get("window").height,r=o-(t=this.keyboardWillOpenTo?this.keyboardWillOpenTo.endCoordinates.screenY:t)+r+this.additionalScrollOffset;this.preventNegativeScrollOffset&&(r=Math.max(0,r)),this.scrollResponderScrollTo({x:0,y:r,animated:!0}),this.additionalOffset=0,this.preventNegativeScrollOffset=!1},scrollResponderTextInputFocusError:function(e){console.error("Error measuring text field: ",e)},UNSAFE_componentWillMount:function(){this.keyboardWillOpenTo=null,this.additionalScrollOffset=0},scrollResponderKeyboardWillShow:function(e){this.keyboardWillOpenTo=e,this.props.onKeyboardWillShow&&this.props.onKeyboardWillShow(e)},scrollResponderKeyboardWillHide:function(e){this.keyboardWillOpenTo=null,this.props.onKeyboardWillHide&&this.props.onKeyboardWillHide(e)},scrollResponderKeyboardDidShow:function(e){e&&(this.keyboardWillOpenTo=e),this.props.onKeyboardDidShow&&this.props.onKeyboardDidShow(e)},scrollResponderKeyboardDidHide:function(e){this.keyboardWillOpenTo=null,this.props.onKeyboardDidHide&&this.props.onKeyboardDidHide(e)}},ScrollResponder={Mixin:ScrollResponderMixin},_default=ScrollResponder;exports.default=_default,module.exports=exports.default;