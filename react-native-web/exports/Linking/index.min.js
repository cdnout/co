import{canUseDOM}from"fbjs/lib/ExecutionEnvironment";import invariant from"fbjs/lib/invariant";var initialURL=canUseDOM?window.location.href:"",Linking=function(){function n(){var n=this;this._eventCallbacks={},this.addEventListener=function(t,e){n._eventCallbacks[t]?n._eventCallbacks[t].push(e):n._eventCallbacks[t]=[e]},this.removeEventListener=function(t,e){var i=n._eventCallbacks[t].filter(function(n){return n.toString()!==e.toString()});n._eventCallbacks[t]=i}}var t=n.prototype;return t._dispatchEvent=function(n){for(var t=arguments.length,e=new Array(t>1?t-1:0),i=1;i<t;i++)e[i-1]=arguments[i];var r=this._eventCallbacks[n];null!=r&&Array.isArray(r)&&r.map(function(n){n.apply(void 0,e)})},t.canOpenURL=function(){return Promise.resolve(!0)},t.getInitialURL=function(){return Promise.resolve(initialURL)},t.openURL=function(n){try{return open(n),this._dispatchEvent("onOpen",n),Promise.resolve()}catch(n){return Promise.reject(n)}},t._validateURL=function(n){invariant("string"==typeof n,"Invalid URL: should be a string. Was: "+n),invariant(n,"Invalid URL: cannot be empty")},n}(),open=function(n){if(canUseDOM){var t=new URL(n,window.location).toString();window.open(t,"_blank","noopener")}};export default new Linking;