{"version":3,"file":"agent.min.js","sources":["../src/utils.ts","../src/presets.ts","../src/userAgentData.ts","../src/userAgent.ts","../src/agent.ts","../src/index.umd.ts"],"sourcesContent":["import { PresetInfo, PresetResult, NavigatorUABrandVersion } from \"./types\";\n\nexport function some<T>(arr: T[], callback: (value: T, index: number) => any): boolean {\n    const length = arr.length;\n\n    for (let i = 0; i < length; ++i) {\n        if (callback(arr[i], i)) {\n            return true;\n        }\n    }\n\n    return false;\n}\nexport function find<T>(arr: T[], callback: (value: T, index: number) => any): T | null {\n    const length = arr.length;\n\n    for (let i = 0; i < length; ++i) {\n        if (callback(arr[i], i)) {\n            return arr[i];\n        }\n    }\n    return null;\n}\nexport function getUserAgent(agent?: string): string {\n    let userAgent = agent;\n    if (typeof userAgent === \"undefined\") {\n        if (typeof navigator === \"undefined\" || !navigator) {\n            return \"\";\n        }\n\n        userAgent = navigator.userAgent || \"\";\n    }\n    return userAgent!.toLowerCase();\n}\nexport function execRegExp(pattern: string, text: string): RegExpExecArray | null {\n    try {\n        return new RegExp(pattern, \"g\").exec(text);\n    } catch (e) {\n        return null;\n    }\n}\nexport function hasUserAgentData(): boolean {\n    if (typeof navigator === \"undefined\" || !navigator || !navigator.userAgentData) {\n        return false;\n    }\n    const userAgentData = navigator.userAgentData;\n    const brands = (userAgentData.brands || userAgentData.uaList);\n\n    return !!(brands && brands.length);\n}\nexport function findVersion(versionTest: string, userAgent: string): string {\n    const result = execRegExp(`(${versionTest})((?:\\\\/|\\\\s|:)([0-9|\\\\.|_]+))?`, userAgent);\n\n    return result ? result[3] : \"\";\n}\nexport function convertVersion(text: string): string {\n    return text.replace(/_/g, \".\");\n}\nexport function findPreset(presets: PresetInfo[], userAgent: string): PresetResult {\n    let userPreset: PresetInfo | null = null;\n    let version = \"-1\";\n\n    some(presets, preset => {\n        const result = execRegExp(`(${preset.test})((?:\\\\/|\\\\s|:)([0-9|\\\\.|_]+))?`, userAgent);\n\n        if (!result || preset.brand) {\n            return false;\n        }\n        userPreset = preset;\n        version = result[3] || \"-1\";\n\n        if (preset.versionAlias) {\n            version = preset.versionAlias;\n        } else if (preset.versionTest) {\n            version = findVersion(preset.versionTest.toLowerCase(), userAgent) || version;\n        }\n        version = convertVersion(version);\n        return true;\n    });\n\n    return {\n        preset: userPreset,\n        version,\n    };\n}\n\nexport function findBrand(brands: NavigatorUABrandVersion[], preset: PresetInfo): NavigatorUABrandVersion | null {\n    return find(brands, ({ brand }) => {\n        return execRegExp(`${preset.test}`, brand.toLowerCase());\n    });\n}\n","import { PresetInfo } from \"./types\";\n\nexport const BROWSER_PRESETS: PresetInfo[] = [\n    {\n        test: \"phantomjs\",\n        id: \"phantomjs\",\n    },\n    {\n        test: \"whale\",\n        id: \"whale\",\n    }, {\n        test: \"edgios|edge|edg\",\n        id: \"edge\",\n    },\n    {\n        test: \"msie|trident|windows phone\",\n        id: \"ie\",\n        versionTest: \"iemobile|msie|rv\",\n    },\n    {\n        test: \"miuibrowser\",\n        id: \"miui browser\",\n    },\n    {\n        test: \"samsungbrowser\",\n        id: \"samsung internet\",\n    },\n    {\n        test: \"samsung\",\n        id: \"samsung internet\",\n        versionTest: \"version\",\n    },\n    {\n        test: \"chrome|crios\",\n        id: \"chrome\",\n    },\n    {\n        test: \"firefox|fxios\",\n        id: \"firefox\",\n    },\n    {\n        test: \"android\",\n        id: \"android browser\",\n        versionTest: \"version\",\n    },\n    {\n        test: \"safari|iphone|ipad|ipod\",\n        id: \"safari\",\n        versionTest: \"version\",\n    },\n];\n\n// chromium's engine(blink) is based on applewebkit 537.36.\nexport const CHROMIUM_PRESETS: PresetInfo[] = [\n    {\n        test: \"(?=.*applewebkit/(53[0-7]|5[0-2]|[0-4]))(?=.*\\\\schrome)\",\n        id: \"chrome\",\n    },\n    {\n        test: \"chromium\",\n        id: \"chrome\",\n    },\n    {\n        test: \"whale\",\n        id: \"chrome\",\n        brand: true,\n    },\n];\nexport const WEBKIT_PRESETS: PresetInfo[] = [\n    {\n        test: \"applewebkit\",\n        id: \"webkit\",\n    },\n];\nexport const PLATFORM_PRESETS: PresetInfo[] = [\n    {\n        test: \"win\",\n        id: \"window\",\n    },\n    {\n        test: \"linux\",\n        id: \"linux\",\n    },\n    {\n        test: \"ipad|ipod|iphone\",\n        id: \"ios\",\n    },\n    {\n        test: \"android\",\n        id: \"android\",\n    },\n];\nexport const WEBVIEW_PRESETS: PresetInfo[] = [\n    {\n        test: \"(?=(iphone|ipad))(?!(.*version))\",\n        id: \"webview\",\n    },\n    {\n        test: \"(?=(android|iphone|ipad))(?=.*(naver|daum|; wv))\",\n        id: \"webview\",\n    },\n    {\n        // test webview\n        test: \"webview\",\n        id: \"webview\",\n    },\n];\nexport const OS_PRESETS: PresetInfo[] = [\n    {\n        test: \"windows phone\",\n        id: \"windows phone\",\n    },\n    {\n        test: \"windows 2000\",\n        id: \"window\",\n        versionAlias: \"5.0\",\n    },\n    {\n        test: \"windows nt\",\n        id: \"window\",\n    },\n    {\n        test: \"iphone|ipad|ipod\",\n        id: \"ios\",\n        versionTest: \"iphone os|cpu os\",\n    },\n    {\n        test: \"mac os x\",\n        id: \"mac\",\n    },\n    {\n        test: \"android\",\n        id: \"android\",\n    },\n    {\n        test: \"tizen\",\n        id: \"tizen\",\n    },\n    {\n        test: \"webos|web0s\",\n        id: \"webos\",\n    },\n    // {\n    //     test: \"linux|ubuntu|debian\",\n    //     id: \"linux\",\n    //     versionAlias: \"-1\",\n    // },\n];\n","import { UADataValues, AgentInfo, AgentBrowserInfo, AgentOSInfo } from \"./types\";\nimport { some, find, findBrand, convertVersion } from \"./utils\";\nimport { BROWSER_PRESETS, OS_PRESETS, CHROMIUM_PRESETS, WEBKIT_PRESETS, WEBVIEW_PRESETS } from \"./presets\";\n\nexport function parseUserAgentData(osData?: UADataValues): AgentInfo {\n    const userAgentData = navigator.userAgentData;\n    const brands = [...(userAgentData.uaList || userAgentData.brands)!];\n    const isMobile = userAgentData.mobile || false;\n    const firstBrand = brands[0];\n    const browser: AgentBrowserInfo = {\n        name: firstBrand.brand,\n        version: firstBrand.version,\n        majorVersion: -1,\n        webkit: false,\n        webview: some(WEBVIEW_PRESETS, preset => findBrand(brands, preset)),\n        chromium: some(CHROMIUM_PRESETS, preset => findBrand(brands, preset)),\n    };\n    const os: AgentOSInfo = {\n        name: \"unknown\",\n        version: \"-1\",\n        majorVersion: -1,\n    };\n    browser.webkit = !browser.chromium && some(WEBKIT_PRESETS, preset => findBrand(brands, preset));\n\n    if (osData) {\n        const platform = osData.platform.toLowerCase();\n\n        const result = find(OS_PRESETS, preset => {\n            return new RegExp(`${preset.test}`, \"g\").exec(platform);\n        });\n        os.name = result ? result.id : platform;\n        os.version = osData.platformVersion;\n    }\n    some(BROWSER_PRESETS, preset => {\n        const result = findBrand(brands, preset);\n\n        if (!result) {\n            return false;\n        }\n        browser.name = preset.id;\n        browser.version = osData ? osData.uaFullVersion : result.version;\n\n        return true;\n    });\n    if (navigator.platform === \"Linux armv8l\") {\n        os.name = \"android\";\n    } else if (browser.webkit) {\n        os.name = isMobile ? \"ios\" : \"mac\";\n    }\n    if (os.name === \"ios\" && browser.webview) {\n        browser.version = \"-1\";\n    }\n\n    os.version = convertVersion(os.version);\n    browser.version = convertVersion(browser.version);\n    os.majorVersion = parseInt(os.version, 10);\n    browser.majorVersion = parseInt(browser.version, 10);\n\n    return {\n        browser,\n        os,\n        isMobile,\n        isHints: true,\n    };\n}\n","import { AgentInfo } from \"./types\";\nimport { getUserAgent, findPreset } from \"./utils\";\nimport { WEBVIEW_PRESETS, CHROMIUM_PRESETS, BROWSER_PRESETS, OS_PRESETS, WEBKIT_PRESETS } from \"./presets\";\n\nexport function parseUserAgent(userAgent?: string): AgentInfo {\n    const nextAgent = getUserAgent(userAgent);\n    const isMobile = !!/mobi/g.exec(nextAgent);\n    const browser = {\n        name: \"unknown\",\n        version: \"-1\",\n        majorVersion: -1,\n        webview: !!findPreset(WEBVIEW_PRESETS, nextAgent).preset,\n        chromium: !!findPreset(CHROMIUM_PRESETS, nextAgent).preset,\n        webkit: false,\n    };\n    const os = {\n        name: \"unknown\",\n        version: \"-1\",\n        majorVersion: -1,\n    };\n    const {\n        preset: browserPreset,\n        version: browserVersion,\n    } = findPreset(BROWSER_PRESETS, nextAgent);\n\n    const {\n        preset: osPreset,\n        version: osVersion,\n    } = findPreset(OS_PRESETS, nextAgent);\n\n    browser.webkit = !browser.chromium && !!findPreset(WEBKIT_PRESETS, nextAgent).preset;\n\n    if (osPreset) {\n        os.name = osPreset.id;\n        os.version = osVersion;\n        os.majorVersion = parseInt(osVersion, 10);\n    }\n    if (browserPreset) {\n        browser.name = browserPreset.id;\n        browser.version = browserVersion;\n\n        if (browser.webview && os.name === \"ios\" && browser.name !== \"safari\") {\n            browser.webview = false;\n        }\n    }\n    browser.majorVersion = parseInt(browser.version, 10);\n\n    return {\n        browser,\n        os,\n        isMobile,\n        isHints: false,\n    };\n}\n","import { AgentInfo } from \"./types\";\nimport { hasUserAgentData } from \"./utils\";\nimport { parseUserAgentData } from \"./userAgentData\";\nimport { parseUserAgent } from \"./userAgent\";\n/**\n * @namespace eg.agent\n */\n\n/**\n* Extracts accuate browser and operating system information from the user agent string or client hints.\n* @ko 유저 에이전트 문자열 또는 client hints에서 정확한 브라우저와 운영체제 정보를 추출한다.\n* @function eg.agent#getAccurateAgent\n* @param - Callback function to get the accuate agent <ko>정확한 에이전트를 가져오기 위한 callback 함수</ko>\n* @return - get the accuate agent promise. If Promise are not supported, null is returned. <ko> 정확한 에이전트 promise를 가져온다. Promise를 지원 하지 않는 경우, null을 반환한다. </ko>\n* @example\nimport { getAccurateAgent } from \"@egjs/agent\";\n// eg.agent.getAccurateAgent()\ngetAccurateAgent().then(agent => {\n   const { os, browser, isMobile } = agent;\n});\ngetAccurateAgent(agent => {\n    const { os, browser, isMobile } = agent;\n});\n*/\nexport function getAccurateAgent(callback?: (result: AgentInfo) => void): Promise<AgentInfo> | null {\n    if (hasUserAgentData()) {\n        return navigator.userAgentData.getHighEntropyValues([\n            \"architecture\",\n            \"model\",\n            \"platform\",\n            \"platformVersion\",\n            \"uaFullVersion\",\n        ]).then(info => {\n            const agentInfo = parseUserAgentData(info);\n\n            callback && callback(agentInfo);\n            return agentInfo;\n        });\n    }\n    callback && callback(agent());\n    if (typeof Promise === \"undefined\" || !Promise) {\n        return null;\n    }\n    return Promise.resolve(agent());\n}\n\n\n/**\n * Extracts browser and operating system information from the user agent string.\n * @ko 유저 에이전트 문자열에서 브라우저와 운영체제 정보를 추출한다.\n * @function eg.agent#agent\n * @param - user agent string to parse <ko>파싱할 유저에이전트 문자열</ko>\n * @return - agent Info <ko> 에이전트 정보 </ko>\n * @example\nimport agent from \"@egjs/agent\";\n// eg.agent();\nconst { os, browser, isMobile } = agent();\n */\nfunction agent(userAgent?: string): AgentInfo {\n    if (typeof userAgent === \"undefined\" && hasUserAgentData()) {\n        return parseUserAgentData();\n    } else {\n        return parseUserAgent(userAgent);\n    }\n}\n\nexport default agent;\n","import agent, * as modules from \"./agent\";\n\nfor (const name in modules) {\n    (agent as any)[name] = (modules as any)[name];\n}\n\nexport default agent;\n"],"names":["some","arr","callback","length","i","find","execRegExp","pattern","text","RegExp","exec","e","hasUserAgentData","navigator","userAgentData","brands","uaList","convertVersion","replace","findPreset","presets","userAgent","userPreset","version","preset","result","test","brand","versionAlias","versionTest","findVersion","toLowerCase","findBrand","_a","BROWSER_PRESETS","id","CHROMIUM_PRESETS","WEBKIT_PRESETS","WEBVIEW_PRESETS","OS_PRESETS","parseUserAgentData","osData","isMobile","mobile","firstBrand","browser","name","majorVersion","webkit","webview","chromium","os","platform_1","platform","platformVersion","uaFullVersion","parseInt","isHints","parseUserAgent","nextAgent","agent","getUserAgent","browserPreset","browserVersion","_b","osPreset","osVersion","getHighEntropyValues","then","info","agentInfo","Promise","resolve","modules"],"mappings":"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"}