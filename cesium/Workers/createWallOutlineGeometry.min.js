define(["./defaultValue-81eec7ed","./Matrix2-37e55508","./Transforms-dca21951","./ComponentDatatype-a15c9a19","./RuntimeError-8952249c","./GeometryAttribute-cc3a5bc9","./GeometryAttributes-32b29525","./IndexDatatype-f1dcdf35","./WallGeometryLibrary-f43dc543","./_commonjsHelpers-3aae1032-26891ab7","./combine-3c023bda","./WebGLConstants-508b9636","./arrayRemoveDuplicates-dc2f4046","./PolylinePipeline-21ef0cd0","./EllipsoidGeodesic-cc3bace8","./EllipsoidRhumbLine-125a8b72","./IntersectionTests-ee135b8e","./Plane-6ee42cab"],function(p,c,f,h,e,g,y,_,E,i,t,n,a,o,r,s,l,m){"use strict";const b=new c.Cartesian3,H=new c.Cartesian3;function d(e){var i=(e=p.defaultValue(e,p.defaultValue.EMPTY_OBJECT)).positions,t=e.maximumHeights,n=e.minimumHeights,a=p.defaultValue(e.granularity,h.CesiumMath.RADIANS_PER_DEGREE),e=p.defaultValue(e.ellipsoid,c.Ellipsoid.WGS84);this._positions=i,this._minimumHeights=n,this._maximumHeights=t,this._granularity=a,this._ellipsoid=c.Ellipsoid.clone(e),this._workerName="createWallOutlineGeometry";let o=1+i.length*c.Cartesian3.packedLength+2;p.defined(n)&&(o+=n.length),p.defined(t)&&(o+=t.length),this.packedLength=o+c.Ellipsoid.packedLength+1}d.pack=function(e,i,t){let n;t=p.defaultValue(t,0);var a=e._positions;let o=a.length;for(i[t++]=o,n=0;n<o;++n,t+=c.Cartesian3.packedLength)c.Cartesian3.pack(a[n],i,t);var r=e._minimumHeights;if(o=p.defined(r)?r.length:0,i[t++]=o,p.defined(r))for(n=0;n<o;++n)i[t++]=r[n];var s=e._maximumHeights;if(o=p.defined(s)?s.length:0,i[t++]=o,p.defined(s))for(n=0;n<o;++n)i[t++]=s[n];return c.Ellipsoid.pack(e._ellipsoid,i,t),i[t+=c.Ellipsoid.packedLength]=e._granularity,i};const u=c.Ellipsoid.clone(c.Ellipsoid.UNIT_SPHERE),v={positions:void 0,minimumHeights:void 0,maximumHeights:void 0,ellipsoid:u,granularity:void 0};return d.unpack=function(e,i,t){let n;i=p.defaultValue(i,0);let a=e[i++];const o=new Array(a);for(n=0;n<a;++n,i+=c.Cartesian3.packedLength)o[n]=c.Cartesian3.unpack(e,i);let r,s;if(a=e[i++],0<a)for(r=new Array(a),n=0;n<a;++n)r[n]=e[i++];if(a=e[i++],0<a)for(s=new Array(a),n=0;n<a;++n)s[n]=e[i++];var l=c.Ellipsoid.unpack(e,i,u),m=e[i+=c.Ellipsoid.packedLength];return p.defined(t)?(t._positions=o,t._minimumHeights=r,t._maximumHeights=s,t._ellipsoid=c.Ellipsoid.clone(l,t._ellipsoid),t._granularity=m,t):(v.positions=o,v.minimumHeights=r,v.maximumHeights=s,v.granularity=m,new d(v))},d.fromConstantHeights=function(e){var i=(e=p.defaultValue(e,p.defaultValue.EMPTY_OBJECT)).positions;let t,n;var a=e.minimumHeight,o=e.maximumHeight,r=p.defined(a),s=p.defined(o);if(r||s){const p=i.length;t=r?new Array(p):void 0,n=s?new Array(p):void 0;for(let e=0;e<p;++e)r&&(t[e]=a),s&&(n[e]=o)}return new d({positions:i,maximumHeights:n,minimumHeights:t,ellipsoid:e.ellipsoid})},d.createGeometry=function(e){var i=e._positions,n=e._minimumHeights,t=e._maximumHeights,a=e._granularity,e=e._ellipsoid,n=E.WallGeometryLibrary.computePositions(e,i,t,n,a,!1);if(p.defined(n)){var o=n.bottomPositions,r=n.topPositions,s=r.length,a=2*s;const m=new Float64Array(a);let e,i=0;for(s/=3,e=0;e<s;++e){const p=3*e,f=c.Cartesian3.fromArray(r,p,b),h=c.Cartesian3.fromArray(o,p,H);m[i++]=h.x,m[i++]=h.y,m[i++]=h.z,m[i++]=f.x,m[i++]=f.y,m[i++]=f.z}var n=new y.GeometryAttributes({position:new g.GeometryAttribute({componentDatatype:h.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:m})}),l=a/3;const d=_.IndexDatatype.createTypedArray(l,a=2*l-4+l);let t=0;for(e=0;e<l-2;e+=2){const p=e,f=e+2,u=c.Cartesian3.fromArray(m,3*p,b),g=c.Cartesian3.fromArray(m,3*f,H);if(!c.Cartesian3.equalsEpsilon(u,g,h.CesiumMath.EPSILON10)){const y=e+1,_=e+3;d[t++]=y,d[t++]=p,d[t++]=y,d[t++]=_,d[t++]=p,d[t++]=f}}return d[t++]=l-2,d[t++]=l-1,new g.Geometry({attributes:n,indices:d,primitiveType:g.PrimitiveType.LINES,boundingSphere:new f.BoundingSphere.fromVertices(m)})}},function(e,i){return(e=p.defined(i)?d.unpack(e,i):e)._ellipsoid=c.Ellipsoid.clone(e._ellipsoid),d.createGeometry(e)}});