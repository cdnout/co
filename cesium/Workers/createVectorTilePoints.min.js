define(["./AttributeCompression-27507afe","./Matrix2-37e55508","./ComponentDatatype-a15c9a19","./createTaskProcessorWorker","./RuntimeError-8952249c","./defaultValue-81eec7ed","./WebGLConstants-508b9636"],function(e,h,C,a,t,r,n){"use strict";const d=32767,g=new h.Cartographic,b=new h.Cartesian3,w=new h.Rectangle,k=new h.Ellipsoid,y={min:void 0,max:void 0};return a(function(a,t){const r=new Uint16Array(a.positions);!function(e){e=new Float64Array(e);var a=0;y.min=e[a++],y.max=e[a++],h.Rectangle.unpack(e,2,w),a+=h.Rectangle.packedLength,h.Ellipsoid.unpack(e,a,k)}(a.packedBuffer);const n=w,o=k,i=y.min,s=y.max,c=r.length/3,u=r.subarray(0,c),p=r.subarray(c,2*c),l=r.subarray(2*c,3*c);e.AttributeCompression.zigZagDeltaDecode(u,p,l);var f=new Float64Array(r.length);for(let e=0;e<c;++e){const a=u[e],t=p[e],r=l[e],w=C.CesiumMath.lerp(n.west,n.east,a/d),k=C.CesiumMath.lerp(n.south,n.north,t/d),y=C.CesiumMath.lerp(i,s,r/d),c=h.Cartographic.fromRadians(w,k,y,g),m=o.cartographicToCartesian(c,b);h.Cartesian3.pack(m,f,3*e)}return t.push(f.buffer),{positions:f.buffer}})});