define(["./arrayRemoveDuplicates-dc2f4046","./Transforms-dca21951","./Matrix2-37e55508","./RuntimeError-8952249c","./ComponentDatatype-a15c9a19","./CoplanarPolygonGeometryLibrary-7a2e0bdd","./defaultValue-81eec7ed","./GeometryAttribute-cc3a5bc9","./GeometryAttributes-32b29525","./GeometryInstance-13e4ff38","./GeometryPipeline-20022973","./IndexDatatype-f1dcdf35","./PolygonGeometryLibrary-41822a76","./_commonjsHelpers-3aae1032-26891ab7","./combine-3c023bda","./WebGLConstants-508b9636","./OrientedBoundingBox-86a6888d","./EllipsoidTangentPlane-06e319ef","./AxisAlignedBoundingBox-0ddf9b79","./IntersectionTests-ee135b8e","./Plane-6ee42cab","./AttributeCompression-27507afe","./EncodedCartesian3-96fdc0ef","./ArcType-fc72c06c","./EllipsoidRhumbLine-125a8b72","./PolygonPipeline-b6cd7820"],function(r,i,a,e,y,c,l,s,p,u,d,m,f,t,n,o,g,b,h,P,G,L,T,E,H,v){"use strict";function A(e){e=(e=l.defaultValue(e,l.defaultValue.EMPTY_OBJECT)).polygonHierarchy;this._polygonHierarchy=e,this._workerName="createCoplanarPolygonOutlineGeometry",this.packedLength=f.PolygonGeometryLibrary.computeHierarchyPackedLength(e)+1}A.fromPositions=function(e){return new A({polygonHierarchy:{positions:(e=l.defaultValue(e,l.defaultValue.EMPTY_OBJECT)).positions}})},A.pack=function(e,t,n){return n=l.defaultValue(n,0),t[n=f.PolygonGeometryLibrary.packPolygonHierarchy(e._polygonHierarchy,t,n)]=e.packedLength,t};const C={polygonHierarchy:{}};return A.unpack=function(e,t,n){t=l.defaultValue(t,0);const o=f.PolygonGeometryLibrary.unpackPolygonHierarchy(e,t);t=o.startingIndex,delete o.startingIndex;t=e[t];return(n=!l.defined(n)?new A(C):n)._polygonHierarchy=o,n.packedLength=t,n},A.createGeometry=function(e){var t=e._polygonHierarchy,e=t.positions;if(!((e=r.arrayRemoveDuplicates(e,a.Cartesian3.equalsEpsilon,!0)).length<3)&&c.CoplanarPolygonGeometryLibrary.validOutline(e)){var n=f.PolygonGeometryLibrary.polygonOutlinesFromHierarchy(t,!1);if(0!==n.length){const o=[];for(let e=0;e<n.length;e++){const i=new u.GeometryInstance({geometry:function(t){const n=t.length,o=new Float64Array(3*n),r=m.IndexDatatype.createTypedArray(n,2*n);let i=0,a=0;for(let e=0;e<n;e++){const s=t[e];o[i++]=s.x,o[i++]=s.y,o[i++]=s.z,r[a++]=e,r[a++]=(e+1)%n}var e=new p.GeometryAttributes({position:new s.GeometryAttribute({componentDatatype:y.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:o})});return new s.Geometry({attributes:e,indices:r,primitiveType:s.PrimitiveType.LINES})}(n[e])});o.push(i)}e=d.GeometryPipeline.combineInstances(o)[0],t=i.BoundingSphere.fromPoints(t.positions);return new s.Geometry({attributes:e.attributes,indices:e.indices,primitiveType:e.primitiveType,boundingSphere:t})}}},function(e,t){return(e=l.defined(t)?A.unpack(e,t):e)._ellipsoid=a.Ellipsoid.clone(e._ellipsoid),A.createGeometry(e)}});