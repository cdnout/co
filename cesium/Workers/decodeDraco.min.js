define(["./ComponentDatatype-a15c9a19","./defaultValue-81eec7ed","./IndexDatatype-f1dcdf35","./RuntimeError-8952249c","./createTaskProcessorWorker","./WebGLConstants-508b9636"],function(s,u,d,f,e,t){"use strict";let y;function A(t,e,r){var n=t.num_points(),o=r.num_components();let a,i=new y.AttributeQuantizationTransform;if(i.InitFromAttribute(r)){const s=new Array(o);for(let t=0;t<o;++t)s[t]=i.min_value(t);a={quantizationBits:i.quantization_bits(),minValues:s,range:i.range(),octEncoded:!1}}y.destroy(i),i=new y.AttributeOctahedronTransform,i.InitFromAttribute(r)&&(a={quantizationBits:i.quantization_bits(),octEncoded:!0}),y.destroy(i);n*=o,e=u.defined(a)?function(t,e,r,n,o){let a,i;n.quantizationBits<=8?(i=new y.DracoUInt8Array,a=new Uint8Array(o),e.GetAttributeUInt8ForAllPoints(t,r,i)):(i=new y.DracoUInt16Array,a=new Uint16Array(o),e.GetAttributeUInt16ForAllPoints(t,r,i));for(let t=0;t<o;++t)a[t]=i.GetValue(t);return y.destroy(i),a}(t,e,r,a,n):function(t,e,r,n){let o,a;switch(r.data_type()){case 1:case 11:a=new y.DracoInt8Array,o=new Int8Array(n),e.GetAttributeInt8ForAllPoints(t,r,a);break;case 2:a=new y.DracoUInt8Array,o=new Uint8Array(n),e.GetAttributeUInt8ForAllPoints(t,r,a);break;case 3:a=new y.DracoInt16Array,o=new Int16Array(n),e.GetAttributeInt16ForAllPoints(t,r,a);break;case 4:a=new y.DracoUInt16Array,o=new Uint16Array(n),e.GetAttributeUInt16ForAllPoints(t,r,a);break;case 5:case 7:a=new y.DracoInt32Array,o=new Int32Array(n),e.GetAttributeInt32ForAllPoints(t,r,a);break;case 6:case 8:a=new y.DracoUInt32Array,o=new Uint32Array(n),e.GetAttributeUInt32ForAllPoints(t,r,a);break;case 9:case 10:a=new y.DracoFloat32Array,o=new Float32Array(n),e.GetAttributeFloatForAllPoints(t,r,a)}for(let t=0;t<n;++t)o[t]=a.GetValue(t);return y.destroy(a),o}(t,e,r,n),n=s.ComponentDatatype.fromTypedArray(e);return{array:e,data:{componentsPerAttribute:o,componentDatatype:n,byteOffset:r.byte_offset(),byteStride:s.ComponentDatatype.getSizeInBytes(n)*o,normalized:r.normalized(),quantization:a}}}function r(t){return(u.defined(t.bufferView)?function(t){const e=new y.Decoder,r=["POSITION","NORMAL","COLOR","TEX_COORD"];if(t.dequantizeInShader)for(let t=0;t<r.length;++t)e.SkipAttributeTransform(y[r[t]]);const n=t.bufferView,o=new y.DecoderBuffer;if(o.Init(t.array,n.byteLength),e.GetEncodedGeometryType(o)!==y.TRIANGULAR_MESH)throw new f.RuntimeError("Unsupported draco mesh geometry type.");const a=new y.Mesh,i=e.DecodeBufferToMesh(o,a);if(!i.ok()||0===a.ptr)throw new f.RuntimeError(`Error decoding draco mesh geometry: ${i.error_msg()}`);y.destroy(o);const s={},u=t.compressedAttributes;for(const c in u)if(u.hasOwnProperty(c)){const r=u[c],f=e.GetAttributeByUniqueId(a,r);s[c]=A(a,e,f)}t={indexArray:function(e,r){const t=e.num_points(),n=e.num_faces(),o=new y.DracoInt32Array,a=3*n,i=d.IndexDatatype.createTypedArray(t,a);let s=0;for(let t=0;t<n;++t)r.GetFaceFromMesh(e,t,o),i[s+0]=o.GetValue(0),i[s+1]=o.GetValue(1),i[s+2]=o.GetValue(2),s+=3;return y.destroy(o),{typedArray:i,numberOfIndices:a}}(a,e),attributeData:s};return y.destroy(a),y.destroy(e),t}:function(e){const r=new y.Decoder;e.dequantizeInShader&&(r.SkipAttributeTransform(y.POSITION),r.SkipAttributeTransform(y.NORMAL));const t=new y.DecoderBuffer;if(t.Init(e.buffer,e.buffer.length),r.GetEncodedGeometryType(t)!==y.POINT_CLOUD)throw new f.RuntimeError("Draco geometry type must be POINT_CLOUD.");const n=new y.PointCloud,o=r.DecodeBufferToPointCloud(t,n);if(!o.ok()||0===n.ptr)throw new f.RuntimeError(`Error decoding draco point cloud: ${o.error_msg()}`);y.destroy(t);const a={},i=e.properties;for(const e in i)if(i.hasOwnProperty(e)){let t;if("POSITION"===e||"NORMAL"===e){const f=r.GetAttributeId(n,y[e]);t=r.GetAttribute(n,f)}else{const f=i[e];t=r.GetAttributeByUniqueId(n,f)}a[e]=A(n,r,t)}return y.destroy(n),y.destroy(r),a})(t)}function n(t){y=t,self.onmessage=e(r),self.postMessage(!0)}return function(t){const e=t.data.webAssemblyConfig;if(u.defined(e))return require([e.modulePath],function(t){u.defined(e.wasmBinaryFile)?(t=!u.defined(t)?self.DracoDecoderModule:t)(e).then(function(t){n(t)}):n(t())})}});