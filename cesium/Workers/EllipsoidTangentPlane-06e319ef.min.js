define(["exports","./AxisAlignedBoundingBox-0ddf9b79","./Matrix2-37e55508","./RuntimeError-8952249c","./defaultValue-81eec7ed","./IntersectionTests-ee135b8e","./Plane-6ee42cab","./Transforms-dca21951"],function(t,n,a,e,l,o,i,r){"use strict";const s=new a.Cartesian4;function c(t,e){t=(e=l.defaultValue(e,a.Ellipsoid.WGS84)).scaleToGeodeticSurface(t);var n=r.Transforms.eastNorthUpToFixedFrame(t,e);this._ellipsoid=e,this._origin=t,this._xAxis=a.Cartesian3.fromCartesian4(a.Matrix4.getColumn(n,0,s)),this._yAxis=a.Cartesian3.fromCartesian4(a.Matrix4.getColumn(n,1,s));n=a.Cartesian3.fromCartesian4(a.Matrix4.getColumn(n,2,s));this._plane=i.Plane.fromPointNormal(t,n)}Object.defineProperties(c.prototype,{ellipsoid:{get:function(){return this._ellipsoid}},origin:{get:function(){return this._origin}},plane:{get:function(){return this._plane}},xAxis:{get:function(){return this._xAxis}},yAxis:{get:function(){return this._yAxis}},zAxis:{get:function(){return this._plane.normal}}});const d=new n.AxisAlignedBoundingBox;c.fromPoints=function(t,e){return new c(n.AxisAlignedBoundingBox.fromPoints(t,d).center,e)};const p=new o.Ray,u=new a.Cartesian3;c.prototype.projectPointOntoPlane=function(t,e){const n=p;n.origin=t,a.Cartesian3.normalize(t,n.direction);let i=o.IntersectionTests.rayPlane(n,this._plane,u);if(l.defined(i)||(a.Cartesian3.negate(n.direction,n.direction),i=o.IntersectionTests.rayPlane(n,this._plane,u)),l.defined(i)){const t=a.Cartesian3.subtract(i,this._origin,i),n=a.Cartesian3.dot(this._xAxis,t),o=a.Cartesian3.dot(this._yAxis,t);return l.defined(e)?(e.x=n,e.y=o,e):new a.Cartesian2(n,o)}},c.prototype.projectPointsOntoPlane=function(e,n){l.defined(n)||(n=[]);let i=0;const r=e.length;for(let t=0;t<r;t++){const r=this.projectPointOntoPlane(e[t],n[i]);l.defined(r)&&(n[i]=r,i++)}return n.length=i,n},c.prototype.projectPointToNearestOnPlane=function(t,e){l.defined(e)||(e=new a.Cartesian2);const n=p;n.origin=t,a.Cartesian3.clone(this._plane.normal,n.direction);let i=o.IntersectionTests.rayPlane(n,this._plane,u);l.defined(i)||(a.Cartesian3.negate(n.direction,n.direction),i=o.IntersectionTests.rayPlane(n,this._plane,u));var r=a.Cartesian3.subtract(i,this._origin,i),t=a.Cartesian3.dot(this._xAxis,r),r=a.Cartesian3.dot(this._yAxis,r);return e.x=t,e.y=r,e},c.prototype.projectPointsToNearestOnPlane=function(e,n){l.defined(n)||(n=[]);var i=e.length;n.length=i;for(let t=0;t<i;t++)n[t]=this.projectPointToNearestOnPlane(e[t],n[t]);return n};const f=new a.Cartesian3;c.prototype.projectPointOntoEllipsoid=function(t,e){l.defined(e)||(e=new a.Cartesian3);const n=this._ellipsoid,i=this._origin,r=this._xAxis,o=this._yAxis,s=f;return a.Cartesian3.multiplyByScalar(r,t.x,s),e=a.Cartesian3.add(i,s,e),a.Cartesian3.multiplyByScalar(o,t.y,s),a.Cartesian3.add(e,s,e),n.scaleToGeocentricSurface(e,e),e},c.prototype.projectPointsOntoEllipsoid=function(e,n){var i=e.length;l.defined(n)?n.length=i:n=new Array(i);for(let t=0;t<i;++t)n[t]=this.projectPointOntoEllipsoid(e[t],n[t]);return n},t.EllipsoidTangentPlane=c});