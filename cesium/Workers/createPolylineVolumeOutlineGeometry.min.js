define(["./defaultValue-81eec7ed","./Matrix2-37e55508","./arrayRemoveDuplicates-dc2f4046","./BoundingRectangle-aeed4004","./Transforms-dca21951","./ComponentDatatype-a15c9a19","./PolylineVolumeGeometryLibrary-996c2dbb","./RuntimeError-8952249c","./GeometryAttribute-cc3a5bc9","./GeometryAttributes-32b29525","./IndexDatatype-f1dcdf35","./PolygonPipeline-b6cd7820","./_commonjsHelpers-3aae1032-26891ab7","./combine-3c023bda","./WebGLConstants-508b9636","./EllipsoidTangentPlane-06e319ef","./AxisAlignedBoundingBox-0ddf9b79","./IntersectionTests-ee135b8e","./Plane-6ee42cab","./PolylinePipeline-21ef0cd0","./EllipsoidGeodesic-cc3bace8","./EllipsoidRhumbLine-125a8b72"],function(c,d,o,a,u,y,r,e,g,h,m,l,i,t,n,s,p,f,E,b,_,P){"use strict";function k(e){var i=(e=c.defaultValue(e,c.defaultValue.EMPTY_OBJECT)).polylinePositions,t=e.shapePositions;this._positions=i,this._shape=t,this._ellipsoid=d.Ellipsoid.clone(c.defaultValue(e.ellipsoid,d.Ellipsoid.WGS84)),this._cornerType=c.defaultValue(e.cornerType,r.CornerType.ROUNDED),this._granularity=c.defaultValue(e.granularity,y.CesiumMath.RADIANS_PER_DEGREE),this._workerName="createPolylineVolumeOutlineGeometry";i=1+i.length*d.Cartesian3.packedLength;i+=1+t.length*d.Cartesian2.packedLength,this.packedLength=i+d.Ellipsoid.packedLength+2}k.pack=function(e,i,t){let n;t=c.defaultValue(t,0);var o=e._positions;let a=o.length;for(i[t++]=a,n=0;n<a;++n,t+=d.Cartesian3.packedLength)d.Cartesian3.pack(o[n],i,t);var r=e._shape;for(a=r.length,i[t++]=a,n=0;n<a;++n,t+=d.Cartesian2.packedLength)d.Cartesian2.pack(r[n],i,t);return d.Ellipsoid.pack(e._ellipsoid,i,t),t+=d.Ellipsoid.packedLength,i[t++]=e._cornerType,i[t]=e._granularity,i};const v=d.Ellipsoid.clone(d.Ellipsoid.UNIT_SPHERE),C={polylinePositions:void 0,shapePositions:void 0,ellipsoid:v,height:void 0,cornerType:void 0,granularity:void 0};k.unpack=function(e,i,t){let n;i=c.defaultValue(i,0);let o=e[i++];const a=new Array(o);for(n=0;n<o;++n,i+=d.Cartesian3.packedLength)a[n]=d.Cartesian3.unpack(e,i);o=e[i++];const r=new Array(o);for(n=0;n<o;++n,i+=d.Cartesian2.packedLength)r[n]=d.Cartesian2.unpack(e,i);var l=d.Ellipsoid.unpack(e,i,v);i+=d.Ellipsoid.packedLength;var s=e[i++],p=e[i];return c.defined(t)?(t._positions=a,t._shape=r,t._ellipsoid=d.Ellipsoid.clone(l,t._ellipsoid),t._cornerType=s,t._granularity=p,t):(C.polylinePositions=a,C.shapePositions=r,C.cornerType=s,C.granularity=p,new k(C))};const L=new a.BoundingRectangle;return k.createGeometry=function(e){var i=e._positions,t=o.arrayRemoveDuplicates(i,d.Cartesian3.equalsEpsilon);let n=e._shape;if(n=r.PolylineVolumeGeometryLibrary.removeDuplicatesFromShape(n),!(t.length<2||n.length<3)){l.PolygonPipeline.computeWindingOrder2D(n)===l.WindingOrder.CLOCKWISE&&n.reverse();i=a.BoundingRectangle.fromPoints(n,L);return function(e,i){const t=new h.GeometryAttributes;t.position=new g.GeometryAttribute({componentDatatype:y.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:e});const n=i.length,o=t.position.values.length/3,a=e.length/3/n,r=m.IndexDatatype.createTypedArray(o,2*n*(1+a));let l,s,p=0;l=0;let c=l*n;for(s=0;s<n-1;s++)r[p++]=s+c,r[p++]=s+c+1;for(r[p++]=n-1+c,r[p++]=c,l=a-1,c=l*n,s=0;s<n-1;s++)r[p++]=s+c,r[p++]=s+c+1;for(r[p++]=n-1+c,r[p++]=c,l=0;l<a-1;l++){const e=n*l,i=e+n;for(s=0;s<n;s++)r[p++]=s+e,r[p++]=s+i}return new g.Geometry({attributes:t,indices:m.IndexDatatype.createTypedArray(o,r),boundingSphere:u.BoundingSphere.fromVertices(e),primitiveType:g.PrimitiveType.LINES})}(r.PolylineVolumeGeometryLibrary.computePositions(t,n,i,e,!1),n)}},function(e,i){return(e=c.defined(i)?k.unpack(e,i):e)._ellipsoid=d.Ellipsoid.clone(e._ellipsoid),k.createGeometry(e)}});