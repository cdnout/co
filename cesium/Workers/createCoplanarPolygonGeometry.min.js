define(["./arrayRemoveDuplicates-dc2f4046","./BoundingRectangle-aeed4004","./Transforms-dca21951","./Matrix2-37e55508","./RuntimeError-8952249c","./ComponentDatatype-a15c9a19","./CoplanarPolygonGeometryLibrary-7a2e0bdd","./defaultValue-81eec7ed","./GeometryAttribute-cc3a5bc9","./GeometryAttributes-32b29525","./GeometryInstance-13e4ff38","./GeometryPipeline-20022973","./IndexDatatype-f1dcdf35","./PolygonGeometryLibrary-41822a76","./PolygonPipeline-b6cd7820","./VertexFormat-a0b706b0","./_commonjsHelpers-3aae1032-26891ab7","./combine-3c023bda","./WebGLConstants-508b9636","./OrientedBoundingBox-86a6888d","./EllipsoidTangentPlane-06e319ef","./AxisAlignedBoundingBox-0ddf9b79","./IntersectionTests-ee135b8e","./Plane-6ee42cab","./AttributeCompression-27507afe","./EncodedCartesian3-96fdc0ef","./ArcType-fc72c06c","./EllipsoidRhumbLine-125a8b72"],function(h,e,L,E,t,T,x,s,D,_,C,P,V,A,k,l,n,a,o,r,i,c,p,y,m,u,d,g){"use strict";const R=new E.Cartesian3,v=new e.BoundingRectangle,I=new E.Cartesian2,M=new E.Cartesian2,w=new E.Cartesian3,F=new E.Cartesian3,G=new E.Cartesian3,B=new E.Cartesian3,H=new E.Cartesian3,O=new E.Cartesian3,z=new L.Quaternion,S=new E.Matrix3,N=new E.Matrix3,Q=new E.Cartesian3;function b(e){var t=(e=s.defaultValue(e,s.defaultValue.EMPTY_OBJECT)).polygonHierarchy,n=s.defaultValue(e.vertexFormat,l.VertexFormat.DEFAULT);this._vertexFormat=l.VertexFormat.clone(n),this._polygonHierarchy=t,this._stRotation=s.defaultValue(e.stRotation,0),this._ellipsoid=E.Ellipsoid.clone(s.defaultValue(e.ellipsoid,E.Ellipsoid.WGS84)),this._workerName="createCoplanarPolygonGeometry",this.packedLength=A.PolygonGeometryLibrary.computeHierarchyPackedLength(t)+l.VertexFormat.packedLength+E.Ellipsoid.packedLength+2}b.fromPositions=function(e){return new b({polygonHierarchy:{positions:(e=s.defaultValue(e,s.defaultValue.EMPTY_OBJECT)).positions},vertexFormat:e.vertexFormat,stRotation:e.stRotation,ellipsoid:e.ellipsoid})},b.pack=function(e,t,n){return n=s.defaultValue(n,0),n=A.PolygonGeometryLibrary.packPolygonHierarchy(e._polygonHierarchy,t,n),E.Ellipsoid.pack(e._ellipsoid,t,n),n+=E.Ellipsoid.packedLength,l.VertexFormat.pack(e._vertexFormat,t,n),n+=l.VertexFormat.packedLength,t[n++]=e._stRotation,t[n]=e.packedLength,t};const f=E.Ellipsoid.clone(E.Ellipsoid.UNIT_SPHERE),j=new l.VertexFormat,U={polygonHierarchy:{}};return b.unpack=function(e,t,n){t=s.defaultValue(t,0);const a=A.PolygonGeometryLibrary.unpackPolygonHierarchy(e,t);t=a.startingIndex,delete a.startingIndex;var o=E.Ellipsoid.unpack(e,t,f);t+=E.Ellipsoid.packedLength;var r=l.VertexFormat.unpack(e,t,j);t+=l.VertexFormat.packedLength;var i=e[t++],t=e[t];return(n=!s.defined(n)?new b(U):n)._polygonHierarchy=a,n._ellipsoid=E.Ellipsoid.clone(o,n._ellipsoid),n._vertexFormat=l.VertexFormat.clone(r,n._vertexFormat),n._stRotation=i,n.packedLength=t,n},b.createGeometry=function(o){var r=o._vertexFormat,i=o._polygonHierarchy,s=o._stRotation,l=i.positions;if(!((l=h.arrayRemoveDuplicates(l,E.Cartesian3.equalsEpsilon,!0)).length<3)){let t=w,n=F,a=G,e=H;var c=O;if(x.CoplanarPolygonGeometryLibrary.computeProjectTo2DArguments(l,B,e,c)){if(t=E.Cartesian3.cross(e,c,t),t=E.Cartesian3.normalize(t,t),!E.Cartesian3.equalsEpsilon(B,E.Cartesian3.ZERO,T.CesiumMath.EPSILON6)){const h=o._ellipsoid.geodeticSurfaceNormal(B,Q);E.Cartesian3.dot(t,h)<0&&(t=E.Cartesian3.negate(t,t),e=E.Cartesian3.negate(e,e))}var o=x.CoplanarPolygonGeometryLibrary.createProjectPointsTo2DFunction(B,e,c),p=x.CoplanarPolygonGeometryLibrary.createProjectPointTo2DFunction(B,e,c);r.tangent&&(n=E.Cartesian3.clone(e,n)),r.bitangent&&(a=E.Cartesian3.clone(c,a));var i=A.PolygonGeometryLibrary.polygonsFromHierarchy(i,o,!1),o=i.hierarchy,y=i.polygons;if(0!==o.length){l=o[0].outerRing;const m=L.BoundingSphere.fromPoints(l),u=A.PolygonGeometryLibrary.computeBoundingRectangle(t,p,l,s,v),d=[];for(let e=0;e<y.length;e++){const f=new C.GeometryInstance({geometry:function(e,t,n,a,o,r,i,s){var l=e.positions;let c=k.PolygonPipeline.triangulate(e.positions2D,e.holes);c.length<3&&(c=[0,1,2]);const p=V.IndexDatatype.createTypedArray(l.length,c.length);p.set(c);let y=S;if(0!==a){e=L.Quaternion.fromAxisAngle(r,a,z);if(y=E.Matrix3.fromQuaternion(e,y),t.tangent||t.bitangent){e=L.Quaternion.fromAxisAngle(r,-a,z);const n=E.Matrix3.fromQuaternion(e,N);i=E.Cartesian3.normalize(E.Matrix3.multiplyByVector(n,i,i),i),t.bitangent&&(s=E.Cartesian3.normalize(E.Cartesian3.cross(r,i,s),s))}}else y=E.Matrix3.clone(E.Matrix3.IDENTITY,y);const m=M;t.st&&(m.x=n.x,m.y=n.y);const u=l.length,d=3*u,g=new Float64Array(d),b=t.normal?new Float32Array(d):void 0,f=t.tangent?new Float32Array(d):void 0,h=t.bitangent?new Float32Array(d):void 0,x=t.st?new Float32Array(2*u):void 0;let C=0,P=0,A=0,v=0,w=0;for(let e=0;e<u;e++){const L=l[e];if(g[C++]=L.x,g[C++]=L.y,g[C++]=L.z,t.st){const G=o(E.Matrix3.multiplyByVector(y,L,R),I);E.Cartesian2.subtract(G,m,G);const t=T.CesiumMath.clamp(G.x/n.width,0,1),a=T.CesiumMath.clamp(G.y/n.height,0,1);x[w++]=t,x[w++]=a}t.normal&&(b[P++]=r.x,b[P++]=r.y,b[P++]=r.z),t.tangent&&(f[v++]=i.x,f[v++]=i.y,f[v++]=i.z),t.bitangent&&(h[A++]=s.x,h[A++]=s.y,h[A++]=s.z)}const F=new _.GeometryAttributes;return t.position&&(F.position=new D.GeometryAttribute({componentDatatype:T.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:g})),t.normal&&(F.normal=new D.GeometryAttribute({componentDatatype:T.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:b})),t.tangent&&(F.tangent=new D.GeometryAttribute({componentDatatype:T.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:f})),t.bitangent&&(F.bitangent=new D.GeometryAttribute({componentDatatype:T.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:h})),t.st&&(F.st=new D.GeometryAttribute({componentDatatype:T.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:x})),new D.Geometry({attributes:F,indices:p,primitiveType:D.PrimitiveType.TRIANGLES})}(y[e],r,u,s,p,t,n,a)});d.push(f)}const g=P.GeometryPipeline.combineInstances(d)[0];g.attributes.position.values=new Float64Array(g.attributes.position.values),g.indices=V.IndexDatatype.createTypedArray(g.attributes.position.values.length/3,g.indices);const b=g.attributes;return r.position||delete b.position,new D.Geometry({attributes:b,indices:g.indices,primitiveType:g.primitiveType,boundingSphere:m})}}}},function(e,t){return s.defined(t)&&(e=b.unpack(e,t)),b.createGeometry(e)}});