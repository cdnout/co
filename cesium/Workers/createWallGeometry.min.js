define(["./defaultValue-81eec7ed","./Matrix2-37e55508","./Transforms-dca21951","./ComponentDatatype-a15c9a19","./RuntimeError-8952249c","./GeometryAttribute-cc3a5bc9","./GeometryAttributes-32b29525","./IndexDatatype-f1dcdf35","./VertexFormat-a0b706b0","./WallGeometryLibrary-f43dc543","./_commonjsHelpers-3aae1032-26891ab7","./combine-3c023bda","./WebGLConstants-508b9636","./arrayRemoveDuplicates-dc2f4046","./PolylinePipeline-21ef0cd0","./EllipsoidGeodesic-cc3bace8","./EllipsoidRhumbLine-125a8b72","./IntersectionTests-ee135b8e","./Plane-6ee42cab"],function(k,G,D,P,e,T,z,O,p,n,t,a,i,r,o,s,l,m,u){"use strict";const R=new G.Cartesian3,S=new G.Cartesian3,I=new G.Cartesian3,N=new G.Cartesian3,M=new G.Cartesian3,W=new G.Cartesian3,B=new G.Cartesian3;function d(e){var t=(e=k.defaultValue(e,k.defaultValue.EMPTY_OBJECT)).positions,a=e.maximumHeights,i=e.minimumHeights,n=k.defaultValue(e.vertexFormat,p.VertexFormat.DEFAULT),r=k.defaultValue(e.granularity,P.CesiumMath.RADIANS_PER_DEGREE),e=k.defaultValue(e.ellipsoid,G.Ellipsoid.WGS84);this._positions=t,this._minimumHeights=i,this._maximumHeights=a,this._vertexFormat=p.VertexFormat.clone(n),this._granularity=r,this._ellipsoid=G.Ellipsoid.clone(e),this._workerName="createWallGeometry";let o=1+t.length*G.Cartesian3.packedLength+2;k.defined(i)&&(o+=i.length),k.defined(a)&&(o+=a.length),this.packedLength=o+G.Ellipsoid.packedLength+p.VertexFormat.packedLength+1}d.pack=function(e,t,a){let i;a=k.defaultValue(a,0);var n=e._positions;let r=n.length;for(t[a++]=r,i=0;i<r;++i,a+=G.Cartesian3.packedLength)G.Cartesian3.pack(n[i],t,a);var o=e._minimumHeights;if(r=k.defined(o)?o.length:0,t[a++]=r,k.defined(o))for(i=0;i<r;++i)t[a++]=o[i];var s=e._maximumHeights;if(r=k.defined(s)?s.length:0,t[a++]=r,k.defined(s))for(i=0;i<r;++i)t[a++]=s[i];return G.Ellipsoid.pack(e._ellipsoid,t,a),a+=G.Ellipsoid.packedLength,p.VertexFormat.pack(e._vertexFormat,t,a),t[a+=p.VertexFormat.packedLength]=e._granularity,t};const c=G.Ellipsoid.clone(G.Ellipsoid.UNIT_SPHERE),y=new p.VertexFormat,f={positions:void 0,minimumHeights:void 0,maximumHeights:void 0,ellipsoid:c,vertexFormat:y,granularity:void 0};return d.unpack=function(e,t,a){let i;t=k.defaultValue(t,0);let n=e[t++];const r=new Array(n);for(i=0;i<n;++i,t+=G.Cartesian3.packedLength)r[i]=G.Cartesian3.unpack(e,t);let o,s;if(n=e[t++],0<n)for(o=new Array(n),i=0;i<n;++i)o[i]=e[t++];if(n=e[t++],0<n)for(s=new Array(n),i=0;i<n;++i)s[i]=e[t++];var l=G.Ellipsoid.unpack(e,t,c);t+=G.Ellipsoid.packedLength;var m=p.VertexFormat.unpack(e,t,y),u=e[t+=p.VertexFormat.packedLength];return k.defined(a)?(a._positions=r,a._minimumHeights=o,a._maximumHeights=s,a._ellipsoid=G.Ellipsoid.clone(l,a._ellipsoid),a._vertexFormat=p.VertexFormat.clone(m,a._vertexFormat),a._granularity=u,a):(f.positions=r,f.minimumHeights=o,f.maximumHeights=s,f.granularity=u,new d(f))},d.fromConstantHeights=function(e){var t=(e=k.defaultValue(e,k.defaultValue.EMPTY_OBJECT)).positions;let a,i;var n=e.minimumHeight,r=e.maximumHeight,o=k.defined(n),s=k.defined(r);if(o||s){const k=t.length;a=o?new Array(k):void 0,i=s?new Array(k):void 0;for(let e=0;e<k;++e)o&&(a[e]=n),s&&(i[e]=r)}return new d({positions:t,maximumHeights:i,minimumHeights:a,ellipsoid:e.ellipsoid,vertexFormat:e.vertexFormat})},d.createGeometry=function(y){const e=y._positions,t=y._minimumHeights,a=y._maximumHeights,f=y._vertexFormat,i=y._granularity,g=y._ellipsoid,h=n.WallGeometryLibrary.computePositions(g,e,a,t,i,!0);if(k.defined(h)){var C=h.bottomPositions,b=h.topPositions,y=h.numCorners;let t=b.length,e=2*t;const A=f.position?new Float64Array(e):void 0,_=f.normal?new Float32Array(e):void 0,E=f.tangent?new Float32Array(e):void 0,w=f.bitangent?new Float32Array(e):void 0,F=f.st?new Float32Array(e/3*2):void 0;let a,i=0,n=0,r=0,o=0,s=0,l=B,m=W,u=M,p=!0,d=0;var v=1/((t/=3)-y-1);for(a=0;a<t;++a){const k=3*a,D=G.Cartesian3.fromArray(b,k,R),V=G.Cartesian3.fromArray(C,k,S);if(f.position&&(A[i++]=V.x,A[i++]=V.y,A[i++]=V.z,A[i++]=D.x,A[i++]=D.y,A[i++]=D.z),f.st&&(F[s++]=d,F[s++]=0,F[s++]=d,F[s++]=1),f.normal||f.tangent||f.bitangent){let e=G.Cartesian3.clone(G.Cartesian3.ZERO,N);const T=G.Cartesian3.subtract(D,g.geodeticSurfaceNormal(D,S),S);if(a+1<t&&(e=G.Cartesian3.fromArray(b,3+k,N)),p){const k=G.Cartesian3.subtract(e,D,I),P=G.Cartesian3.subtract(T,D,R);l=G.Cartesian3.normalize(G.Cartesian3.cross(P,k,l),l),p=!1}G.Cartesian3.equalsEpsilon(D,e,P.CesiumMath.EPSILON10)?p=!0:(d+=v,f.tangent&&(m=G.Cartesian3.normalize(G.Cartesian3.subtract(e,D,m),m)),f.bitangent&&(u=G.Cartesian3.normalize(G.Cartesian3.cross(l,m,u),u))),f.normal&&(_[n++]=l.x,_[n++]=l.y,_[n++]=l.z,_[n++]=l.x,_[n++]=l.y,_[n++]=l.z),f.tangent&&(E[o++]=m.x,E[o++]=m.y,E[o++]=m.z,E[o++]=m.x,E[o++]=m.y,E[o++]=m.z),f.bitangent&&(w[r++]=u.x,w[r++]=u.y,w[r++]=u.z,w[r++]=u.x,w[r++]=u.y,w[r++]=u.z)}}const L=new z.GeometryAttributes;f.position&&(L.position=new T.GeometryAttribute({componentDatatype:P.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:A})),f.normal&&(L.normal=new T.GeometryAttribute({componentDatatype:P.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:_})),f.tangent&&(L.tangent=new T.GeometryAttribute({componentDatatype:P.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:E})),f.bitangent&&(L.bitangent=new T.GeometryAttribute({componentDatatype:P.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:w})),f.st&&(L.st=new T.GeometryAttribute({componentDatatype:P.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:F}));var x=e/3;e-=6*(y+1);const H=O.IndexDatatype.createTypedArray(x,e);let c=0;for(a=0;a<x-2;a+=2){const k=a,D=a+2,V=G.Cartesian3.fromArray(A,3*k,R),T=G.Cartesian3.fromArray(A,3*D,S);if(!G.Cartesian3.equalsEpsilon(V,T,P.CesiumMath.EPSILON10)){const z=a+1,O=a+3;H[c++]=z,H[c++]=k,H[c++]=O,H[c++]=O,H[c++]=k,H[c++]=D}}return new T.Geometry({attributes:L,indices:H,primitiveType:T.PrimitiveType.TRIANGLES,boundingSphere:new D.BoundingSphere.fromVertices(A)})}},function(e,t){return(e=k.defined(t)?d.unpack(e,t):e)._ellipsoid=G.Ellipsoid.clone(e._ellipsoid),d.createGeometry(e)}});