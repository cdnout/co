{"version":3,"sources":["node_modules/browser-pack/_prelude.js","addon/adapters/firebase.js","addon/initializers/emberfire.js","addon/mixins/waitable.js","addon/serializers/firebase.js","addon/utils/to-promise.js","node_modules/ember-inflector/index.js","vendor/legacy/emberfire.js"],"names":[],"mappings":";;;;;;;;;AAAA;;;;;;;;;;qBCAkB,OAAO;;;;yBACV,YAAY;;;;8BACN,oBAAoB;;;;8BACnB,qBAAqB;;;;8BAKjB,iBAAiB;;IAHnC,MAAM,sBAAN,MAAM;IAAE,IAAI,sBAAJ,IAAI;IACZ,OAAO,GAAK,IAAI,CAAhB,OAAO;;AAIf,IAAI,IAAI,GAAG,SAAP,IAAI,CAAa,GAAG,EAAE;AACxB,MAAI,GAAG,GAAG,mBAAM,CAAC,EAAE,CAAC;;AAEpB,KAAG,CAAC,OAAO,CAAC,UAAS,CAAC,EAAE;AACtB,QAAI,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE;AACtB,SAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;KACb;GACF,CAAC,CAAC;;AAEH,SAAO,GAAG,CAAC;CACZ,CAAC;;AAEF,IAAI,SAAS,GAAG,MAAM,CAAC,SAAS,IAAI,UAAS,KAAK,EAAE;AAClD,SAAO,OAAO,KAAK,KAAK,QAAQ,IAC9B,QAAQ,CAAC,KAAK,CAAC,IACf,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,KAAK,CAAC;CAC/B,CAAC;;;;;;;;;;;;;qBAaa,uBAAG,OAAO,CAAC,MAAM,8BAAW;AACzC,UAAQ,EAAE,mBAAM,MAAM,CAAC,OAAO,EAAE;AAChC,OAAK,EAAE,mBAAM,MAAM,CAAC,OAAO,EAAE;AAC7B,mBAAiB,EAAE,WAAW;;;;;;;;;;;;;;;;;;AAmB9B,MAAI,EAAA,gBAAG;AACL,QAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;;AAEnC,QAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;AAC/B,QAAI,CAAC,GAAG,EAAE;AACR,YAAM,IAAI,KAAK,CAAC,+DAA+D,CAAC,CAAC;KAClF;;AAED,QAAI,CAAC,IAAI,GAAG,GAAG,CAAC;;AAEhB,QAAI,CAAC,kBAAkB,GAAG,EAAE,CAAC;;AAE7B,QAAI,CAAC,mBAAmB,GAAG,EAAE,CAAC;;AAE9B,QAAI,CAAC,MAAM,GAAG,EAAE,CAAC;;AAEjB,QAAI,CAAC,eAAe,GAAG,EAAE,CAAC;GAC3B;;;;;;;AAQD,qBAAmB,EAAA,+BAAG;AACpB,WAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;GACvC;;;;;;;;;AAUD,oBAAkB,EAAA,4BAAC,QAAQ,EAAE;AAC3B,QAAI,OAAO,GAAG,QAAQ,CAAC,GAAG,EAAE,CAAC;AAC7B,QAAI,OAAO,KAAK,IAAI,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,OAAO,CAAC,EAAE,KAAK,WAAW,EAAE;AACxF,aAAO,CAAC,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;KACrC;AACD,WAAO,OAAO,CAAC;GAChB;;;;;;;;;;AAWD,YAAU,EAAA,oBAAC,KAAK,EAAE,SAAS,EAAE,EAAE,EAAE;;;AAC/B,QAAI,GAAG,GAAG,IAAI,CAAC,iBAAiB,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;;AAEhD,QAAI,GAAG,uCAAqC,SAAS,CAAC,SAAS,YAAO,GAAG,CAAC,QAAQ,EAAE,AAAE,CAAC;;AAEvF,WAAO,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,UAAC,QAAQ,EAAK;AAC9C,UAAI,OAAO,GAAG,MAAK,kBAAkB,CAAC,QAAQ,CAAC,CAAC;AAChD,YAAK,yBAAyB,CAAC,SAAS,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;AAC1D,UAAI,OAAO,KAAK,IAAI,EAAE;AACpB,YAAI,KAAK,GAAG,IAAI,KAAK,6BAA2B,GAAG,CAAC,QAAQ,EAAE,CAAG,CAAC;AAC9D,aAAK,CAAC,QAAQ,GAAG,EAAE,CAAC;AACxB,cAAM,KAAK,CAAC;OACb;;AAED,aAAO,OAAO,CAAC;KAChB,CAAC,CAAC;GACJ;;;;;;;;;;AAWD,QAAM,EAAA,gBAAC,GAAG,EAAE,GAAG,EAAE;AACf,WAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,CAAC,CAAC;GAC7C;;AAGD,iBAAe,EAAA,yBAAC,KAAK,EAAE,SAAS,EAAE,MAAM,EAAE;AACxC,QAAI,CAAC,MAAM,CAAC,WAAW,EAAE;AACvB,UAAI,SAAS,GAAG,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;AAC1C,UAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;KACjD;GACF;;AAGD,kBAAgB,EAAA,0BAAC,KAAK,EAAE,MAAM,EAAE;AAC9B,QAAI,MAAM,CAAC,WAAW,EAAE;AACtB,UAAI,CAAC,aAAa,CAAC,KAAK,EAAE,MAAM,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;KACvD;GACF;;AAGD,kBAAgB,EAAA,0BAAC,KAAK,EAAE,MAAM,EAAE;;;AAC9B,UAAM,CAAC,gBAAgB,CAAC,UAAC,GAAG,EAAE,YAAY,EAAK;AAC7C,UAAI,YAAY,CAAC,IAAI,KAAK,WAAW,EAAE;AACrC,YAAI,YAAY,GAAG,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;AAChD,YAAI,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;AACrD,YAAI,UAAU,IAAI,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;AACxC,cAAI,SAAS,GAAG,OAAK,iBAAiB,CAAC,UAAU,CAAC,IAAI,EAAE,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;AAChF,iBAAK,oBAAoB,CAAC,KAAK,EAAE,SAAS,EAAE,UAAU,CAAC,IAAI,EAAE,MAAM,CAAC,WAAW,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC;SAC7F;OACF;KACF,CAAC,CAAC;GACJ;;AAGD,kBAAgB,EAAA,0BAAC,KAAK,EAAE,SAAS,EAAE,MAAM,EAAE;;;;AAEzC,QAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,EAAE;AAClC,YAAM,CAAC,WAAW,GAAG,IAAI,CAAC;AAC1B,UAAI,GAAG,GAAG,IAAI,CAAC,iBAAiB,CAAC,SAAS,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC;AACvD,UAAI,MAAM,GAAG,KAAK,CAAC;AACnB,SAAG,CAAC,EAAE,CAAC,OAAO,EAAE,UAAC,QAAQ,EAAK;AAC5B,YAAI,MAAM,EAAE;AACV,6BAAM,GAAG,CAAC,YAAM;AACd,mBAAK,iBAAiB,CAAC,KAAK,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;WACpD,CAAC,CAAC;SACJ;AACD,cAAM,GAAG,IAAI,CAAC;OACf,EAAE,UAAC,KAAK,EAAK;AACZ,2BAAM,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;OAC3B,CAAC,CAAC;KACJ;GACF;;AAGD,eAAa,EAAA,uBAAC,KAAK,EAAE,SAAS,EAAE,MAAM,EAAE;AACtC,QAAI,MAAM,CAAC,WAAW,EAAE;AACtB,UAAI,GAAG,GAAG,IAAI,CAAC,iBAAiB,CAAC,SAAS,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC;AACvD,SAAG,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AACjB,YAAM,CAAC,WAAW,GAAG,KAAK,CAAC;KAC5B;GACF;;;;;;;;;;;AAYD,SAAO,EAAA,iBAAC,KAAK,EAAE,SAAS,EAAE;;;AACxB,QAAI,GAAG,GAAG,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;;AAE5C,QAAI,GAAG,oCAAkC,SAAS,CAAC,SAAS,YAAO,GAAG,CAAC,QAAQ,EAAE,AAAE,CAAC;;AAEpF,WAAO,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,UAAC,QAAQ,EAAK;AAC9C,UAAI,CAAC,OAAK,wBAAwB,CAAC,SAAS,CAAC,EAAE;AAC7C,eAAK,yBAAyB,CAAC,KAAK,EAAE,SAAS,EAAE,GAAG,CAAC,CAAC;OACvD;AACD,UAAI,OAAO,GAAG,EAAE,CAAC;AACjB,cAAQ,CAAC,OAAO,CAAC,UAAC,aAAa,EAAK;AAClC,YAAI,OAAO,GAAG,OAAK,kBAAkB,CAAC,aAAa,CAAC,CAAC;AACrD,eAAK,yBAAyB,CAAC,SAAS,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;AAC1D,eAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;OACvB,CAAC,CAAC;;AAEH,aAAO,OAAO,CAAC;KAChB,CAAC,CAAC;GACJ;;AAGD,OAAK,EAAA,eAAC,KAAK,EAAE,SAAS,EAAE,MAAK,EAAE,WAAW,EAAE;;;AAC1C,QAAI,GAAG,GAAG,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;AAC5C,QAAI,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC;;AAEpC,OAAG,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,EAAE,MAAK,CAAC,CAAC;;AAEvC,OAAG,CAAC,EAAE,CAAC,aAAa,EAAE,mBAAM,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,QAAQ,EAAE;AAC7D,UAAI,MAAM,GAAG,KAAK,CAAC,UAAU,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;;AAEjE,UAAI,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE;AAClC,YAAI,OAAO,GAAG,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;AAChD,YAAI,cAAc,GAAG,KAAK,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;AACnE,YAAI,CAAC,yBAAyB,CAAC,SAAS,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;AAC1D,cAAM,GAAG,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;OACrC;;AAED,UAAI,MAAM,EAAE;AACV,mBAAW,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;OAC7D;KACF,CAAC,CAAC,CAAC;;;;;;AAMJ,OAAG,CAAC,EAAE,CAAC,eAAe,EAAE,mBAAM,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,QAAQ,EAAE;AAC/D,UAAI,MAAM,GAAG,KAAK,CAAC,UAAU,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;AACjE,UAAI,MAAM,EAAE;AACV,mBAAW,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;OAChE;KACF,CAAC,CAAC,CAAC;;;;;AAKJ,eAAW,CAAC,iBAAiB,GAAG,YAAY;AAC1C,SAAG,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;AACvB,SAAG,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;KAC1B,CAAC;;AAEF,QAAI,GAAG,kCAAgC,SAAS,cAAS,MAAK,AAAE,CAAC;;AAEjE,WAAO,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,UAAC,QAAQ,EAAK;AAC9C,UAAI,CAAC,OAAK,wBAAwB,CAAC,SAAS,CAAC,EAAE;AAC7C,eAAK,yBAAyB,CAAC,KAAK,EAAE,SAAS,EAAE,GAAG,CAAC,CAAC;OACvD;AACD,UAAI,OAAO,GAAG,EAAE,CAAC;AACjB,cAAQ,CAAC,OAAO,CAAC,UAAC,aAAa,EAAK;AAClC,YAAI,OAAO,GAAG,OAAK,kBAAkB,CAAC,aAAa,CAAC,CAAC;AACrD,eAAK,yBAAyB,CAAC,SAAS,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;AAC1D,eAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;OACvB,CAAC,CAAC;AACH,aAAO,OAAO,CAAC;KAChB,CAAC,CAAC;GACJ;;AAGD,iBAAe,EAAA,yBAAC,GAAG,EAAE,KAAK,EAAE;;AAE1B,QAAI,CAAC,KAAK,CAAC,OAAO,EAAE;AAClB,WAAK,CAAC,OAAO,GAAG,MAAM,CAAC;KACxB;;AAED,QAAI,KAAK,CAAC,OAAO,KAAK,MAAM,EAAC;AAC3B,SAAG,GAAG,GAAG,CAAC,UAAU,EAAE,CAAC;KACxB,MAAM,IAAI,KAAK,CAAC,OAAO,KAAK,QAAQ,EAAE;AACrC,SAAG,GAAG,GAAG,CAAC,YAAY,EAAE,CAAC;KAC1B,MAAM,IAAI,KAAK,CAAC,OAAO,KAAK,WAAW,EAAE;AACxC,SAAG,GAAG,GAAG,CAAC,eAAe,EAAE,CAAC;KAC7B,MAAM;AACL,SAAG,GAAG,GAAG,CAAC,YAAY,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;KACvC;;AAED,OAAG,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;AACzC,OAAG,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;;AAEzC,WAAO,GAAG,CAAC;GACZ;;AAED,mBAAiB,EAAA,2BAAC,GAAG,EAAE,KAAK,EAAE;AAC5B,QAAM,OAAO,GAAG,CAAC,SAAS,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;AAChD,WAAO,CAAC,OAAO,CAAC,UAAA,GAAG,EAAI;AACrB,UAAI,KAAK,CAAC,GAAG,CAAC,KAAK,SAAS,EAAE;AAC5B,WAAG,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;OAC5B;KACF,CAAC,CAAC;;AAEH,WAAO,GAAG,CAAC;GACZ;;AAED,mBAAiB,EAAA,2BAAC,GAAG,EAAE,KAAK,EAAE;AAC5B,QAAM,OAAO,GAAG,CAAC,cAAc,EAAE,aAAa,CAAC,CAAC;AAChD,WAAO,CAAC,OAAO,CAAC,UAAA,GAAG,EAAI;AACrB,UAAI,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE;AACzB,WAAG,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;OAC5B;KACF,CAAC,CAAC;;AAEH,WAAO,GAAG,CAAC;GACZ;;;;;;AAOD,oBAAkB,EAAE,SAAS;;;;;AAM7B,0BAAwB,EAAA,kCAAC,SAAS,EAAE;AAClC,WAAO,CAAC,mBAAM,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;GACpE;;;;;;AAOD,2BAAyB,EAAA,mCAAC,KAAK,EAAE,SAAS,EAAE,GAAG,EAAE;AAC/C,QAAI,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC;AACpC,QAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;;AAE1C,OAAG,CAAC,EAAE,CAAC,aAAa,EAAE,mBAAM,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,QAAQ,EAAE;AAC7D,UAAI,CAAC,KAAK,CAAC,cAAc,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,EAAE;AAC5D,YAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;OACpD;KACF,CAAC,CAAC,CAAC;GACL;;;;;AAMD,mBAAiB,EAAA,2BAAC,KAAK,EAAE,SAAS,EAAE,QAAQ,EAAE;;;AAG5C,QAAI,KAAK,CAAC,YAAY,EAAE;AACtB,aAAO;KACR;AACD,QAAI,KAAK,GAAG,QAAQ,CAAC,GAAG,EAAE,CAAC;AAC3B,QAAI,KAAK,KAAK,IAAI,EAAE;AAClB,UAAI,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AAChC,UAAI,MAAM,GAAG,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;;AAEvD,UAAI,CAAC,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE;AAC5B,cAAM,CAAC,YAAY,EAAE,CAAC;OACvB;KACF,MAAM;AACL,UAAM,OAAO,GAAG,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;AAClD,UAAI,CAAC,UAAU,CAAC,SAAS,CAAC,SAAS,EAAE,OAAO,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;KAC3D;GACF;;;;;;AAOD,cAAY,EAAA,sBAAC,KAAK,EAAE,SAAS,EAAE,QAAQ,EAAE;;;AACvC,WAAO,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,YAAM;AAC9D,aAAK,gBAAgB,CAAC,KAAK,EAAE,SAAS,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;KAC1D,CAAC,CAAC;GACJ;;;;;;;;;;;;;;AAeD,cAAY,EAAA,sBAAC,KAAK,EAAE,SAAS,EAAE,QAAQ,EAAE;;;AACvC,QAAI,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;AACtD,QAAI,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC;AAC/D,QAAI,UAAU,GAAG,SAAS,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACtD,QAAI,SAAS,GAAG,UAAU,CAAC,UAAU,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC;AAChD,QAAI,gBAAgB,GAAG,QAAQ,CAAC,SAAS,CAAC;AACxC,eAAS,EAAG,SAAS,KAAK,QAAQ,CAAC,EAAE,AAAC;KACvC,CAAC,CAAC;AACH,QAAM,UAAU,GAAG,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;;AAE5D,WAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAK;AACtC,UAAI,mBAAmB,GAAG,EAAE,CAAC;;;AAG7B,cAAQ,CAAC,MAAM,CAAC,gBAAgB,CAAC,UAAC,GAAG,EAAE,YAAY,EAAK;AACxD,YAAM,eAAe,GAAG,UAAU,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC;AAC3D,YAAM,IAAI,GAAG,gBAAgB,CAAC,eAAe,CAAC,CAAC;AAC/C,YAAM,UAAU,GAAG,OAAK,sBAAsB,CAAC,KAAK,EAAE,SAAS,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;AACzF,YAAM,OAAO,GAAG,YAAY,CAAC,IAAI,KAAK,SAAS,CAAC;AAChD,YAAI,OAAO,IAAI,UAAU,EAAE;AACvB,cAAI,CAAC,mBAAM,MAAM,CAAC,IAAI,CAAC,EAAE;AACvB,+BAAmB,CAAC,IAAI,CAAC;AACvB,kBAAI,EAAC,IAAI;AACT,0BAAY,EAAC,YAAY;AACzB,wBAAU,EAAC,UAAU;AACrB,qBAAO,EAAC,OAAO;aAChB,CAAC,CAAC;WACJ;AACD,iBAAO,gBAAgB,CAAC,eAAe,CAAC,CAAC;SAC1C;OACF,CAAC,CAAC;AACH,UAAI,WAAW,GAAG,SAAd,WAAW,CAAI,MAAM,EAAK;AAC5B,YAAI,KAAK,GAAG,IAAI,KAAK,gDAA8C,SAAS,SAAI,QAAQ,CAAC,EAAE,CAAG,CAAC;AAC/F,aAAK,CAAC,MAAM,GAAG,MAAM,CAAC;AACtB,cAAM,CAAC,KAAK,CAAC,CAAC;OACf,CAAC;AACF,aAAK,aAAa,CAAC,SAAS,EAAE,gBAAgB,CAAC,CAAC,IAAI,CAAC,YAAM;;AAEzD,YAAI,kBAAkB,GAAG,mBAAmB,CAAC,GAAG,CAAC,UAAC,kBAAkB,EAAK;AACrE,cAAM,IAAI,GAAG,kBAAkB,CAAC,IAAI,CAAC;AACrC,cAAM,YAAY,GAAG,kBAAkB,CAAC,YAAY,CAAC;AACrD,cAAI,kBAAkB,CAAC,OAAO,EAAE;AAC9B,mBAAO,OAAK,wBAAwB,CAAC,KAAK,EAAE,SAAS,EAAE,YAAY,EAAE,IAAI,EAAE,SAAS,EAAE,WAAW,CAAC,CAAC;WACpG,MAAM;;AAEL,gBAAI,kBAAkB,CAAC,UAAU,EAAE;AACjC,qBAAO,OAAK,4BAA4B,CAAC,KAAK,EAAE,SAAS,EAAE,YAAY,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC;aAC3F;WACF;SACF,CACF,CAAC;AACF,eAAO,mBAAM,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC;OAClD,CAAC,SAAM,CAAC,UAAC,CAAC,EAAK;AACd,mBAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;OAClB,CAAC,CAAC,IAAI,CAAC,UAAC,OAAO,EAAK;AACnB,YAAI,QAAQ,GAAG,mBAAM,CAAC,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;AAC9D,YAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;AACzB,qBAAW,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;SACjD,MAAM;AACL,iBAAO,EAAE,CAAC;SACX;OACF,CAAC,CAAC;KACJ,wCAAsC,SAAS,YAAO,SAAS,CAAC,QAAQ,EAAE,CAAG,CAAC;GAChF;;;;;;;;AASD,eAAa,EAAA,uBAAC,SAAS,EAAE,gBAAgB,EAAE;;;AACzC,QAAI,CAAC,iBAAiB,EAAE,CAAC;AACzB,WAAO,iCAAU,SAAS,CAAC,MAAM,EAAE,SAAS,EAAE,CAAC,gBAAgB,CAAC,CAAC,CAC9D,IAAI,CAAC,UAAC,MAAM,EAAK;AAChB,aAAK,iBAAiB,EAAE,CAAC;AACzB,aAAO,MAAM,CAAC;KACf,CAAC,SACI,CAAC,UAAC,CAAC,EAAK;AACZ,aAAK,iBAAiB,EAAE,CAAC;AACzB,aAAO,mBAAM,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;KAC7B,CAAC,CAAC;GACN;;;;;;AAOD,0BAAwB,EAAA,kCAAC,KAAK,EAAE,SAAS,EAAE,YAAY,EAAE,GAAG,EAAE,SAAS,EAAE,WAAW,EAAE;;;AACpF,QAAI,CAAC,mBAAM,OAAO,CAAC,GAAG,CAAC,EAAE;AACvB,YAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;KAChE;AACD,QAAI,QAAQ,GAAG,mBAAM,CAAC,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;AACtD,QAAI,YAAY,GAAG,EAAE,CAAC;;;AAGtB,QAAI,YAAY,GAAG,GAAG,CAAC,MAAM,CAAC,UAAC,EAAE,EAAK;AACpC,aAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;KAC/B,CAAC,CAAC;;;AAGH,gBAAY,GAAG,GAAG,CAAC,MAAM,CAAC,UAAC,EAAE,EAAK;AAChC,UAAI,gBAAgB,GAAG,YAAY,CAAC,IAAI,CAAC;AACzC,aAAO,KAAK,CAAC,cAAc,CAAC,gBAAgB,EAAE,EAAE,CAAC,IAAI,KAAK,CAAC,UAAU,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,oBAAoB,CAAC,KAAK,IAAI,CAAC;KAChI,CAAC,CAAC;;AAEH,gBAAY,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC,UAAC,EAAE,EAAK;AACjE,aAAO,OAAK,kBAAkB,CAAC,KAAK,EAAE,SAAS,EAAE,YAAY,EAAE,SAAS,EAAE,EAAE,CAAC,CAAC;KAC/E,CAAC,CAAC;;;AAGH,QAAI,cAAc,GAAG,QAAQ,CAAC,MAAM,CAAC,UAAC,EAAE,EAAK;AAC3C,aAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;KAC1B,CAAC,CAAC;;AAEH,kBAAc,GAAG,cAAc,CAAC,GAAG,CAAC,UAAC,EAAE,EAAK;AAC1C,aAAO,OAAK,oBAAoB,CAAC,KAAK,EAAE,SAAS,EAAE,YAAY,CAAC,GAAG,EAAE,SAAS,EAAE,EAAE,CAAC,CAAC;KACrF,CAAC,CAAC;;AAEH,QAAI,YAAY,GAAG,YAAY,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;;AAEvD,WAAO,mBAAM,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,UAAC,YAAY,EAAK;AAChE,UAAI,QAAQ,GAAG,mBAAM,CAAC,CAAC,mBAAM,CAAC,CAAC,YAAY,CAAC,CAAC,QAAQ,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC,CAAC;AAC5E,UAAI,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;;AAEhC,mBAAW,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;AACpC,eAAO,YAAY,CAAC;OACrB,MACI;AACH,YAAI,KAAK,GAAG,IAAI,KAAK,uEAAqE,YAAY,CAAC,UAAU,YAAO,YAAY,CAAC,IAAI,CAAG,CAAC;AACzI,aAAK,CAAC,MAAM,GAAG,mBAAM,CAAC,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;AACrD,cAAM,KAAK,CAAC;OACb;KACF,CAAC,CAAC;GACJ;;;;;;;;;AAWD,oBAAkB,EAAA,4BAAC,KAAK,EAAE,SAAS,EAAE,YAAY,EAAE,SAAS,EAAE,EAAE,EAAE;AAChE,QAAM,UAAU,GAAG,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;AAC5D,QAAI,GAAG,GAAG,IAAI,CAAC,mBAAmB,CAAC,SAAS,EAAE,UAAU,CAAC,kBAAkB,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC;AACnG,QAAI,MAAM,GAAG,KAAK,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;AACrD,QAAI,UAAU,GAAG,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,SAAS,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;AACvF,QAAI,UAAU,EAAE;AACd,aAAO,MAAM,CAAC,IAAI,EAAE,CAAC;KACtB;;AAED,WAAO,iCAAU,GAAG,CAAC,GAAG,EAAE,GAAG,EAAG,CAAC,IAAI,CAAC,CAAC,CAAC;GACzC;;;;;;;;AASD,wBAAsB,EAAA,gCAAC,KAAK,EAAE,SAAS,EAAE,YAAY,EAAE;AACrD,QAAI,UAAU,GAAG,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;AAChD,WAAO,UAAU,CAAC,2BAA2B,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;GACjE;;;;;;;AAQD,kBAAgB,EAAA,0BAAC,MAAM,EAAE;AACvB,QAAI,MAAM,CAAC,cAAc,EAAE;AACzB,YAAM,GAAG,MAAM,CAAC,cAAc,CAAC;KAChC;;AAED,QAAI,KAAK,GAAG,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,CAAC;;AAEjD,WAAO,CAAC,CAAC,KAAK,CAAC;GAChB;;;;;AAMD,sBAAoB,EAAA,8BAAC,KAAK,EAAE,SAAS,EAAE,GAAG,EAAE,SAAS,EAAE,EAAE,EAAE;AACzD,QAAM,eAAe,GAAG,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC;AACzF,QAAI,GAAG,GAAG,IAAI,CAAC,mBAAmB,CAAC,SAAS,EAAE,eAAe,EAAE,EAAE,CAAC,CAAC;AACnE,WAAO,iCAAU,GAAG,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;GACvD;;;;;;;AAQD,8BAA4B,EAAA,sCAAC,KAAK,EAAE,SAAS,EAAE,YAAY,EAAE,EAAE,EAAE,SAAS,EAAE;AAC1E,QAAI,MAAM,GAAG,KAAK,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;AACrD,QAAI,MAAM,EAAE;AACV,aAAO,MAAM,CAAC,IAAI,EAAE,CAAC;KACtB;AACD,WAAO,mBAAM,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,oCAAkC,EAAE,qCAAgC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAG,CAAC,CAAC;GAChJ;;;;;AAMD,cAAY,EAAA,sBAAC,KAAK,EAAE,SAAS,EAAE,QAAQ,EAAE;AACvC,QAAI,GAAG,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;AAChD,OAAG,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AACjB,WAAO,iCAAU,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;GACnC;;;;;AAMD,aAAW,EAAA,qBAAC,SAAS,EAAE;AACrB,QAAI,SAAS,GAAG,mBAAM,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;AACjD,WAAO,+BAAU,SAAS,CAAC,CAAC;GAC7B;;;;;AAMD,mBAAiB,EAAA,2BAAC,SAAS,EAAE,EAAE,EAAE;AAC/B,QAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC;AACpB,QAAI,SAAS,EAAE;AACb,SAAG,GAAG,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;KACxD;AACD,QAAI,EAAE,EAAE;AACN,SAAG,GAAG,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;KACrB;AACD,WAAO,GAAG,CAAC;GACZ;;;;;;;;AASD,iBAAe,EAAA,yBAAC,MAAM,EAAE;AACtB,QAAI,MAAM,CAAC,cAAc,EAAE;AACzB,YAAM,GAAG,MAAM,CAAC,cAAc,CAAC;KAChC;;AAED,QAAI,eAAe,GAAG,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,CAAC;;AAE3D,QAAI,eAAe,EAAE;UACL,MAAM,GAAmB,eAAe,CAAhD,MAAM;UAAU,YAAY,GAAK,eAAe,CAAhC,YAAY;;AAClC,UAAM,WAAW,GAAG,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,kBAAkB,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;AACtG,UAAI,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;;AAEhE,UAAI,YAAY,CAAC,IAAI,KAAK,SAAS,EAAE;AACnC,iBAAS,GAAG,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;OACxC;AACD,aAAO,SAAS,CAAC;KAClB;;AAED,WAAO,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC;GACvD;;;;;;;;AASD,yBAAuB,EAAA,iCAAC,aAAa,EAAE;AACrC,QAAI,aAAa,GAAG,MAAM,CACxB,EAAE,EACF,aAAa,CAAC,sBAAsB,EACpC,aAAa,CAAC,cAAc,CAAC,wBAAwB,CACtD,CAAC;;AAEF,QAAI,kBAAkB,YAAA,CAAC;AACvB,QAAI,gBAAgB,GAAG,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;;AAElD,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,gBAAgB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAChD,UAAI,GAAG,GAAG,aAAa,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7C,UAAI,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;AACpC,UAAI,OAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;;AAExB,UAAI,CAAC,OAAM,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE;AAC9B,iBAAS;OACV;;AAED,UAAI,UAAS,GAAG,OAAM,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;AAC1D,UAAI,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,KAAK,EAAE,OAAM,CAAC,IAAI,CAAC,SAAS,EAAE,UAAS,CAAC,gBAAgB,CAAC,EAAE;AAC9F,0BAAkB,GAAG,GAAG,CAAC;AACzB,cAAM;OACP;KACF;;AAED,QAAI,kBAAkB,EAAE;AACtB,UAAI,MAAM,GAAG,kBAAkB,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;AACrD,UAAI,SAAS,GAAG,kBAAkB,CAAC,UAAU,CAAC;AAC9C,UAAI,SAAS,GAAG,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,gBAAgB,CAAC;AACtE,aAAO,EAAE,MAAM,EAAE,MAAM,EAAE,YAAY,EAAE,SAAS,EAAE,CAAC;KACpD;GACF;;;;;AAMD,qBAAmB,EAAA,6BAAC,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE;AAChC,WAAO,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;GACjC;;;;;AAMD,kBAAgB,EAAG,IAAI,GAAC,EAAE,AAAC;;;;;;;AAQ3B,aAAW,EAAA,uBAAG;AACZ,uBAAM,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;GAChE;;;;;;;AAQD,aAAW,EAAA,uBAAG;;;AACZ,QAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AAChC,QAAI,KAAK,CAAC,YAAY,EAAE;AACtB,aAAO;KACR;;AAED,QAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,GAAG,EAAK;gCACI,QAAK,eAAe,CAAC,GAAG,CAAC;UAAhD,OAAO,uBAAP,OAAO;UAAE,SAAS,uBAAT,SAAS;;AAC1B,UAAM,cAAc,GAAG,KAAK,CAAC,SAAS,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;AAC3D,WAAK,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;KAC5B,CAAC,CAAC;AACH,QAAI,CAAC,eAAe,GAAG,EAAE,CAAC;AAC1B,QAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;GACxB;;;;;;;;;;;;AAaD,YAAU,EAAA,oBAAC,SAAS,EAAE,EAAE,EAAE,OAAO,EAAE;AACjC,QAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AAChC,QAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;AAC1B,UAAM,cAAc,GAAG,KAAK,CAAC,SAAS,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;AAC3D,WAAK,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;AAC3B,aAAO;KACR;;AAED,QAAM,GAAG,GAAM,SAAS,SAAI,EAAE,AAAE,CAAC;AACjC,QAAI,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,EAAE;;AAE7B,UAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;AAC7C,UAAI,CAAC,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;KACpC;AACD,QAAI,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,EAAE,OAAO,EAAP,OAAO,EAAE,SAAS,EAAT,SAAS,EAAE,CAAC;AACnD,QAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;;;AAGtB,QAAI,IAAI,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;AAC5B,UAAI,CAAC,WAAW,EAAE,CAAC;KACpB;GACF;;;;;;AAOD,qBAAmB,EAAE,SAAS;;;;;AAM9B,2BAAyB,EAAA,mCAAC,SAAS,EAAE,OAAO,EAAE,KAAK,EAAE;;;AACnD,QAAI,CAAC,OAAO,EAAE;AAAE,aAAO;KAAE;AACzB,QAAM,EAAE,GAAG,OAAO,CAAC,EAAE,CAAC;AACtB,QAAM,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;AAClD,QAAM,UAAU,GAAG,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;;;AAG5D,aAAS,CAAC,gBAAgB,CAAC,UAAC,GAAG,EAAE,YAAY,EAAK;AAChD,UAAI,YAAY,CAAC,IAAI,KAAK,SAAS,EAAE;AACnC,YAAM,mBAAmB,GAAG,OAAO,CAAC,UAAU,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC,CAAC;AACxE,YAAI,CAAC,mBAAmB,EAAE;AACxB,eAAK,CAAC,GAAG,CAAC,GAAG,mBAAM,CAAC,EAAE,CAAC;SACxB,MAAM;AACL,cAAM,UAAU,GAAG,QAAK,sBAAsB,CAAC,KAAK,EAAE,SAAS,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;AACzF,cAAI,UAAU,EAAE;AACd,gBAAM,qBAAqB,GAAG,KAAK,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;AAChE,iBAAK,IAAI,GAAE,IAAI,mBAAmB,EAAE;AAClC,kBAAI,GAAG,GAAG,mBAAmB,CAAC,GAAE,CAAC,CAAC;AAClC,iBAAG,CAAC,EAAE,GAAG,GAAE,CAAC;AACZ,sBAAK,yBAAyB,CAAC,qBAAqB,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;aACnE;WACF,MAAM;AACL,gBAAM,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;AAC7C,iBAAK,CAAC,GAAG,CAAC,GAAG,mBAAM,CAAC,CAAC,GAAG,CAAC,CAAC;WAC3B;SACF;OACF;KACF,CAAC,CAAC;GACJ;;;;;AAMD,iBAAe,EAAA,yBAAC,SAAS,EAAE,EAAE,EAAE;AAC7B,QAAI,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC;AACpC,QAAI,KAAK,GAAG,IAAI,CAAC,mBAAmB,CAAC;AACrC,SAAK,CAAC,SAAS,CAAC,GAAG,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;AAC1C,SAAK,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC;AAClD,WAAO,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;GAC7B;;;;;;;;;AAUD,SAAO,EAAA,iBAAC,aAAa,EAAE;AACrB,QAAI,GAAG,CAAC;AACR,QAAI,OAAO,aAAa,CAAC,GAAG,KAAK,UAAU,EAAE;AAC3C,SAAG,GAAG,aAAa,CAAC,GAAG,EAAE,CAAC;KAC3B,MAAM,IAAI,OAAO,aAAa,CAAC,GAAG,KAAK,QAAQ,EAAE;AAChD,SAAG,GAAG,aAAa,CAAC,GAAG,CAAC;KACzB,MAAM;AACL,SAAG,GAAG,aAAa,CAAC,IAAI,EAAE,CAAC;KAC5B;AACD,WAAO,GAAG,CAAC;GACZ;;;;;AAMD,8BAA4B,EAAA,wCAAG;AAC7B,WAAO,KAAK,CAAC;GACd;CACF,CAAC;;;;;;;;;;;;;;;qBCx3BgB,OAAO;;;;yBACV,YAAY;;;;wBACN,UAAU;;;;gCACH,sBAAsB;;;;mCACnB,yBAAyB;;;;AAExD,IAAI,OAAO,GAAG,OAAO,CAAC;;AAEtB,IAAI,mBAAM,SAAS,EAAE;AACnB,MAAI,sBAAS,WAAW,EAAE;AACxB,uBAAM,SAAS,CAAC,mBAAmB,CAAC,UAAU,EAAE,sBAAS,WAAW,CAAC,CAAC;GACvE;;AAED,qBAAM,SAAS,CAAC,mBAAmB,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;CAC3D;;qBAEc;AACb,MAAI,EAAE,WAAW;AACjB,QAAM,EAAE,YAAY;AACpB,YAAU,EAAA,sBAAG;;;;AAIX,QAAI,WAAW,GAAG,SAAS,CAAC,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC;;AAE/C,eAAW,CAAC,QAAQ,CAAC,mBAAmB,gCAAkB,CAAC;AAC3D,eAAW,CAAC,QAAQ,CAAC,sBAAsB,mCAAqB,CAAC;;AAEjE,QAAM,gBAAgB,GAAG,EAAC,WAAW,EAAE,KAAK,EAAE,SAAS,EAAE,KAAK,EAAC,CAAC;AAChE,eAAW,CAAC,QAAQ,CAAC,gCAAgC,EACjD,sBAAS,IAAI,CAAC,mBAAmB,EAAE,gBAAgB,CAAC,CAAC;AACzD,eAAW,CAAC,QAAQ,CAAC,iCAAiC,EAClD,sBAAS,IAAI,CAAC,oBAAoB,EAAE,gBAAgB,CAAC,CAAC;AAC1D,eAAW,CAAC,QAAQ,CAAC,+BAA+B,EAChD,sBAAS,IAAI,CAAC,kBAAkB,EAAE,gBAAgB,CAAC,CAAC;AACxD,eAAW,CAAC,QAAQ,CAAC,+BAA+B,EAChD,sBAAS,IAAI,CAAC,kBAAkB,EAAE,gBAAgB,CAAC,CAAC;;;AAGxD,QAAI,CAAC,uBAAG,KAAK,CAAC,SAAS,CAAC,iBAAiB,EAAE;AACzC,6BAAG,KAAK,CAAC,MAAM,CAAC;AACd,yBAAiB,EAAE,IAAI;;AAEvB,kCAA0B,EAAA,oCAAC,OAAO,EAAE;;;AAClC,cAAI,OAAO,OAAO,KAAK,WAAW,EAAE;AAClC,mBAAO,CAAC,OAAO,CAAC,UAAC,MAAM,EAAK;AAC1B,kBAAI,SAAS,GAAG,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC;AAC7C,kBAAI,OAAO,GAAG,MAAK,UAAU,CAAC,SAAS,CAAC,CAAC;AACzC,kBAAI,OAAO,CAAC,eAAe,EAAE;AAC3B,uBAAO,CAAC,eAAe,QAAO,SAAS,EAAE,MAAM,CAAC,CAAC;eAClD;aACF,CAAC,CAAC;WACJ;SACF;;AAED,YAAI,EAAA,gBAAG;AACL,cAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AAChD,cAAI,OAAO,GAAG,MAAM,CAAC;;AAErB,cAAI,OAAO,KAAK,IAAI,EAAE;AACpB,mBAAO,IAAI,CAAC;WACb;;AAED,cAAI,CAAC,mBAAM,OAAO,CAAC,MAAM,CAAC,EAAE;AAC1B,mBAAO,GAAG,CAAC,MAAM,CAAC,CAAC;WACpB;;AAED,cAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC;AACzC,iBAAO,MAAM,CAAC;SACf;;AAED,aAAK,EAAA,iBAAG;AACN,cAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AAChD,cAAI,OAAO,CAAC;AACZ,cAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;AACzB,mBAAO,GAAG,MAAM,CAAC,GAAG,CAAC,UAAS,aAAa,EAAE;AAC3C,qBAAO,aAAa,CAAC,SAAS,EAAE,CAAC;aAClC,CAAC,CAAC;WACJ,MAAM,IAAI,MAAM,EAAE;AACjB,mBAAO,GAAG,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC;WAChC;AACD,cAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC;AACzC,iBAAO,MAAM,CAAC;SACf;;AAED,wBAAgB,EAAA,0BAAC,MAAM,EAAE;AACvB,cAAI,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;AAC5D,cAAI,OAAO,CAAC,gBAAgB,EAAE;AAC5B,mBAAO,CAAC,gBAAgB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;WACxC;SACF;;AAED,wBAAgB,EAAA,0BAAC,MAAM,EAAE;AACvB,cAAI,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;AAC5D,cAAI,OAAO,CAAC,gBAAgB,EAAE;AAC5B,mBAAO,CAAC,gBAAgB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;WACxC;SACF;OACF,CAAC,CAAC;KACJ;;AAED,QAAI,CAAC,uBAAG,KAAK,CAAC,SAAS,CAAC,iBAAiB,EAAE;AACzC,6BAAG,KAAK,CAAC,MAAM,CAAC;AACd,yBAAiB,EAAE,IAAI;;AAEvB,oBAAY,EAAA,wBAAG;AACb,cAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;AAClC,iBAAO,IAAI,CAAC,MAAM,EAAE,CAAC;SACtB;;AAED,oBAAY,EAAA,wBAAG;AACb,cAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;AAClC,cAAI,CAAC,MAAM,EAAE,CAAC;SACf;;AAED,WAAG,EAAA,eAAG;AACJ,cAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;AAChE,cAAI,OAAO,CAAC,eAAe,EAAE;AAC3B,mBAAO,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;WACtC;SACF;OACF,CAAC,CAAC;KACJ;;AAED,QAAI,CAAC,uBAAG,2BAA2B,CAAC,SAAS,CAAC,iBAAiB,EAAE;AAC/D,6BAAG,2BAA2B,CAAC,MAAM,CAAC;AACpC,yBAAiB,EAAE,IAAI;;AAEvB,mBAAW,EAAA,uBAAG;AACZ,cAAI,IAAI,CAAC,iBAAiB,EAAE;AAC1B,gBAAI,CAAC,iBAAiB,EAAE,CAAC;WAC1B;AACD,iBAAO,IAAI,CAAC,MAAM,EAAE,CAAC;SACtB;OACF,CAAC,CAAC;KACJ;;AAED,2BAAG,eAAe,gCAAkB,CAAC;AACrC,2BAAG,kBAAkB,mCAAqB,CAAC;GAC5C;CACF;;;;;;;;;;;;;;;qBC5IiB,OAAO;;;;qBAEV,mBAAM,KAAK,CAAC,MAAM,CAAC;;AAEhC,MAAI,EAAA,gBAAG;AACL,QAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;;AAEnC,QAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;;AAElB,QAAI,mBAAM,OAAO,EAAE;AACjB,UAAI,CAAC,eAAe,EAAE,CAAC;KACxB;GACF;;AAGD,mBAAiB,EAAA,6BAAG;AAClB,QAAI,CAAC,QAAQ,EAAE,CAAC;GACjB;;AAGD,mBAAiB,EAAA,6BAAG;AAClB,QAAI,CAAC,QAAQ,EAAE,CAAC;GACjB;;;;;;;;;AAUD,aAAW,EAAA,uBAAG;AACZ,WAAO,IAAI,CAAC,QAAQ,KAAK,CAAC,CAAC;GAC5B;;;;;;;AAQD,iBAAe,EAAE,2BAAW;;;AAC1B,QAAI,CAAC,OAAO,GAAG,YAAM;AACnB,aAAO,MAAK,WAAW,EAAE,CAAC;KAC3B,CAAC;AACF,uBAAM,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;GACzC;;CAEF,CAAC;;;;;;;;;;;;;;;qBCjDgB,OAAO;;;;yBACV,YAAY;;;;wBACN,UAAU;;;;IAEvB,MAAM,sBAAN,MAAM;;;;;;qBAMC,uBAAG,cAAc,CAAC,MAAM,CAAC,uBAAG,oBAAoB,EAAE;AAC/D,oBAAkB,EAAE,IAAI;;;;;;;;;AASxB,oBAAkB,EAAA,4BAAC,QAAQ,EAAE,IAAI,EAAE,GAAG,EAAE,SAAS,EAAE;AACjD,QAAI,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC/B,QAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,EAAE,GAAG,EAAE,SAAS,CAAC,CAAC;AAC5C,QAAI,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,EAAE;AAC3B,UAAI,KAAK,KAAK,sBAAS,QAAQ,CAAC,WAAW,CAAC,SAAS,EAAE;;AAErD,YAAI,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC;;AAExD,YAAI,UAAU,KAAK,GAAG,IAAI,IAAI,CAAC,eAAe,EAAE;AAC9C,oBAAU,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;SACrD;;AAED,YAAI,CAAC,UAAU,CAAC,GAAG,KAAK,CAAC;OAC1B;KACF;GACF;;;;;;;;AASD,mBAAiB,EAAA,2BAAC,UAAU,EAAE,YAAY,EAAE;AAC1C,QAAI,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;;;AAGvD,cAAU,CAAC,aAAa,CAAC,UAAC,GAAG,EAAK;AAChC,UAAI,CAAC,UAAU,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;AACnC,kBAAU,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;OACxB;KACF,CAAC,CAAC;;AAEH,WAAO,UAAU,CAAC;GACnB;;;;;AAMD,sBAAoB,EAAA,8BAAC,UAAU,EAAE,OAAO,EAAE;AACxC,QAAI,CAAC,sBAAsB,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;AACjD,WAAO,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;GACzC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDD,wBAAsB,EAAA,gCAAC,UAAU,EAAE,OAAO,EAAE;;;AAC1C,cAAU,CAAC,gBAAgB,CAAC,UAAC,GAAG,EAAE,IAAI,EAAK;AACzC,UAAI,eAAe,GAAG,MAAK,kBAAkB,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;;AAE7E,UAAI,IAAI,CAAC,IAAI,KAAK,SAAS,EAAE;AAC3B,YAAI,OAAO,CAAC,cAAc,CAAC,eAAe,CAAC,EAAE;;AAC3C,gBAAI,mBAAmB,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;;AAEnD,gBAAI,MAAK,2BAA2B,CAAC,GAAG,CAAC,EAAE;AACzC,kBAAI,OAAO,mBAAmB,KAAK,QAAQ,IAAI,CAAC,mBAAM,OAAO,CAAC,mBAAmB,CAAC,EAAE;AAClF,mCAAmB,GAAG,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,GAAG,CAAC,UAAC,EAAE,EAAK;AACjE,yBAAO,MAAM,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,mBAAmB,CAAC,EAAE,CAAC,CAAC,CAAC;iBACpD,CAAC,CAAC;eACJ,MAAM,IAAI,mBAAM,OAAO,CAAC,mBAAmB,CAAC,EAAE;AAC7C,mCAAmB,GAAG,MAAK,6BAA6B,CAAC,mBAAmB,CAAC,CAAC;eAC/E,MAAM;AACL,sBAAM,IAAI,KAAK,CAAI,UAAU,CAAC,QAAQ,EAAE,sBAAiB,IAAI,CAAC,IAAI,WAAK,IAAI,CAAC,IAAI,oEAAgE,GAAG,cAAS,IAAI,CAAC,IAAI,sBAAiB,IAAI,CAAC,IAAI,+BAA0B,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAG,CAAC;eAC1P;aACF;;;iBAGI;AACH,oBAAI,OAAO,mBAAmB,KAAK,QAAQ,IAAI,CAAC,mBAAM,OAAO,CAAC,mBAAmB,CAAC,EAAE;AAClF,qCAAmB,GAAG,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;iBACxD,MAAM,IAAI,mBAAM,OAAO,CAAC,mBAAmB,CAAC,EAAE;AAC7C,qCAAmB,GAAG,MAAK,yBAAyB,CAAC,mBAAmB,CAAC,CAAC;iBAC3E,MAAM;AACL,wBAAM,IAAI,KAAK,CAAI,UAAU,CAAC,QAAQ,EAAE,sBAAiB,IAAI,CAAC,IAAI,WAAK,IAAI,CAAC,IAAI,iDAA2C,GAAG,cAAS,IAAI,CAAC,IAAI,mCAA8B,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAG,CAAC;iBAC/M;eACF;;AAED,mBAAO,CAAC,eAAe,CAAC,GAAG,mBAAmB,CAAC;;SAChD;;;;;;aAMI;AACH,mBAAO,CAAC,eAAe,CAAC,GAAG,EAAE,CAAC;WAC/B;OACF;;AAED,UAAI,IAAI,CAAC,IAAI,KAAK,WAAW,EAAE;AAC7B,YAAI,CAAC,OAAO,CAAC,cAAc,CAAC,eAAe,CAAC,EAAE;;AAE5C,iBAAO,CAAC,eAAe,CAAC,GAAG,IAAI,CAAC;SACjC;OACF;KACF,CAAC,CAAC;GACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCD,2BAAyB,EAAA,mCAAC,GAAG,EAAE;AAC7B,QAAI,MAAM,GAAG,EAAE,CAAC;AAChB,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAI,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACpC,UAAI,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;AACnB,cAAM,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;OACrB,MACI,IAAI,OAAO,GAAG,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;AACnC,cAAM,IAAI,KAAK,sHAAoH,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAG,CAAC;OAC3J;KACF;AACD,WAAO,MAAM,CAAC;GACf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCD,+BAA6B,EAAA,uCAAC,GAAG,EAAE;AACjC,QAAI,MAAM,GAAG,EAAE,CAAC;AAChB,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAI,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACpC,UAAI,GAAG,CAAC,CAAC,CAAC,EAAE;AACV,YAAI,OAAO,GAAG,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;AAC9B,gBAAM,IAAI,KAAK,+CAA6C,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAG,CAAC;SACvF;AACD,cAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;OAC7C;KACF;AACD,WAAO,MAAM,CAAC;GACf;;;;;;;;;;;;;;;AAgBD,kBAAgB,EAAA,0BAAC,QAAQ,EAAE,IAAI,EAAE,YAAY,EAAE;AAC7C,2BAAG,cAAc,CAAC,SAAS,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC;GACvF;;;;;;AAOD,oBAAkB,EAAA,4BAAC,QAAQ,EAAE,IAAI,EAAE,YAAY,EAAE;AAC/C,2BAAG,cAAc,CAAC,SAAS,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC;GACzF;;;;;AAMD,wBAAsB,EAAA,gCAAC,QAAQ,EAAE,GAAG,EAAE,YAAY,EAAE;AAClD,WAAO,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;GAChC;;;;;;AAMD,yBAAuB,EAAA,iCAAC,QAAQ,EAAE,GAAG,EAAE,YAAY,EAAE;AACnD,WAAO,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;GAChC;CACF,CAAC;;;;;;;;;;;;;;;qBCjTgB,OAAO;;;;qBAEV,UAAS,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE;AACpD,MAAI,IAAI,GAAG,KAAK,IAAI,EAAE,CAAC;AACvB,SAAO,IAAI,mBAAM,IAAI,CAAC,OAAO,CAAC,UAAS,OAAO,EAAE,MAAM,EAAE;AACtD,QAAI,QAAQ,GAAG,SAAX,QAAQ,CAAY,KAAK,EAAE;AAC7B,UAAI,KAAK,EAAE;AACT,YAAI,QAAQ,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;AACzC,eAAK,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC3B;AACD,2BAAM,GAAG,CAAC,IAAI,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;OAChC,MAAM;AACL,2BAAM,GAAG,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;OAC1B;KACF,CAAC;AACF,QAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACpB,MAAE,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;GACzB,CAAC,CAAC;CACJ;;;;;;;AClBD;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;qBCNkB,OAAO;;;;yBACV,YAAY;;;;qCACC,+BAA+B;;;;wCAC5B,kCAAkC;;;;0CAChC,oCAAoC;;;;AAErE,uBAAG,eAAe,qCAAkB,CAAC;AACrC,uBAAG,kBAAkB,wCAAqB,CAAC;;AAE3C,mBAAM,MAAM,CAAC,mBAAmB,EAAE,UAAS,WAAW,EAAE;AACtD,aAAW,CAAC,WAAW,yCAAsB,CAAC;CAC/C,CAAC,CAAC","file":"emberfire.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import Ember from 'ember';\nimport DS from 'ember-data';\nimport Waitable from '../mixins/waitable';\nimport toPromise from '../utils/to-promise';\n\nconst { assign, RSVP } = Ember;\nconst { Promise } = RSVP;\n\nimport { pluralize } from 'ember-inflector';\n\nvar uniq = function (arr) {\n  var ret = Ember.A();\n\n  arr.forEach(function(k) {\n    if (ret.indexOf(k) < 0) {\n      ret.push(k);\n    }\n  });\n\n  return ret;\n};\n\nvar isInteger = Number.isInteger || function(value) {\n  return typeof value === 'number' &&\n    isFinite(value) &&\n    Math.floor(value) === value;\n};\n\n/**\n * The Firebase adapter allows your store to communicate with the Firebase\n * realtime service. To use the adapter in your app, extend DS.FirebaseAdapter\n * and customize the endpoint to point to the Firebase URL where you want this\n * data to be stored.\n *\n * The adapter will automatically communicate with Firebase to persist your\n * records as neccessary. Importantly, the adapter will also update the store\n * in realtime when changes are made to the Firebase by other clients or\n * otherwise.\n */\nexport default DS.Adapter.extend(Waitable, {\n  firebase: Ember.inject.service(),\n  store: Ember.inject.service(),\n  defaultSerializer: '-firebase',\n\n\n  /**\n   * Endpoint paths can be customized by setting the Firebase property on the\n   * adapter:\n   *\n   * ```js\n   * DS.FirebaseAdapter.extend({\n   *   firebase: new Firebase('https://<my-firebase>.firebaseio.com/')\n   * });\n   * ```\n   *\n   * Requests for `App.Post` now target `https://<my-firebase>.firebaseio.com/posts`.\n   *\n   * @property firebase\n   * @type {Firebase}\n   * @constructor\n   */\n  init() {\n    this._super.apply(this, arguments);\n\n    var ref = this.get('firebase');\n    if (!ref) {\n      throw new Error('Please set the `firebase` property in the environment config.');\n    }\n    // If provided Firebase reference was a query (eg: limits), make it a ref.\n    this._ref = ref;\n    // Keep track of what types `.findAll()` has been called for\n    this._findAllMapForType = {};\n    // Keep a cache to check modified relationships against\n    this._recordCacheForType = {};\n    // Used to batch records into the store\n    this._queue = [];\n    // Payloads to push later\n    this._queuedPayloads = {};\n  },\n\n\n  /**\n   * Uses push() to generate chronologically ordered unique IDs.\n   *\n   * @return {String}\n   */\n  generateIdForRecord() {\n    return this._getKey(this._ref.push());\n  },\n\n\n  /**\n   * Use the Firebase DataSnapshot's key as the record id\n   *\n   * @param {Object} snapshot - A Firebase snapshot\n   * @param {Object} payload - The payload that will be pushed into the store\n   * @return {Object} payload\n   */\n  _assignIdToPayload(snapshot) {\n    var payload = snapshot.val();\n    if (payload !== null && typeof payload === 'object' && typeof payload.id === 'undefined') {\n      payload.id = this._getKey(snapshot);\n    }\n    return payload;\n  },\n\n\n  /**\n   * Called by the store to retrieve the JSON for a given type and ID. The\n   * method will return a promise which will resolve when the value is\n   * successfully fetched from Firebase.\n   *\n   * Additionally, from this point on, the object's value in the store will\n   * also be automatically updated whenever the remote value changes.\n   */\n  findRecord(store, typeClass, id) {\n    var ref = this._getCollectionRef(typeClass, id);\n\n    var log = `DS: FirebaseAdapter#findRecord ${typeClass.modelName} to ${ref.toString()}`;\n\n    return this._fetch(ref, log).then((snapshot) => {\n      var payload = this._assignIdToPayload(snapshot);\n      this._updateRecordCacheForType(typeClass, payload, store);\n      if (payload === null) {\n        var error = new Error(`no record was found at ${ref.toString()}`);\n            error.recordId = id;\n        throw error;\n      }\n\n      return payload;\n    });\n  },\n\n\n  /**\n   * Promise interface for once('value').\n   *\n   * @param  {Firebase} ref\n   * @param  {String} log\n   * @return {Promise<DataSnapshot>}\n   * @private\n   */\n  _fetch(ref, log) {\n    return RSVP.resolve(ref.once('value'), log);\n  },\n\n\n  recordWasPushed(store, modelName, record) {\n    if (!record.__listening) {\n      var typeClass = store.modelFor(modelName);\n      this.listenForChanges(store, typeClass, record);\n    }\n  },\n\n\n  recordWillUnload(store, record) {\n    if (record.__listening) {\n      this.stopListening(store, record.constructor, record);\n    }\n  },\n\n\n  recordWillDelete(store, record) {\n    record.eachRelationship((key, relationship) => {\n      if (relationship.kind === 'belongsTo') {\n        var parentRecord = record.get(relationship.key);\n        var inverseKey = record.inverseFor(relationship.key);\n        if (inverseKey && parentRecord.get('id')) {\n          var parentRef = this._getCollectionRef(inverseKey.type, parentRecord.get('id'));\n          this._removeHasManyRecord(store, parentRef, inverseKey.name, record.constructor, record.id);\n        }\n      }\n    });\n  },\n\n\n  listenForChanges(store, typeClass, record) {\n    // embedded records will get their changes from parent listeners\n    if (!this.isRecordEmbedded(record)) {\n      record.__listening = true;\n      var ref = this._getCollectionRef(typeClass, record.id);\n      var called = false;\n      ref.on('value', (snapshot) => {\n        if (called) {\n          Ember.run(() => {\n            this._handleChildValue(store, typeClass, snapshot);\n          });\n        }\n        called = true;\n      }, (error) => {\n        Ember.Logger.error(error);\n      });\n    }\n  },\n\n\n  stopListening(store, typeClass, record) {\n    if (record.__listening) {\n      var ref = this._getCollectionRef(typeClass, record.id);\n      ref.off('value');\n      record.__listening = false;\n    }\n  },\n\n\n  /**\n   * Called by the store to retrieve the JSON for all of the records for a\n   * given type. The method will return a promise which will resolve when the\n   * value is successfully fetched from Firebase.\n   *\n   * Additionally, from this point on, any records of this type that are added,\n   * removed or modified from Firebase will automatically be reflected in the\n   * store.\n   */\n  findAll(store, typeClass) {\n    var ref = this._getCollectionRef(typeClass);\n\n    var log = `DS: FirebaseAdapter#findAll ${typeClass.modelName} to ${ref.toString()}`;\n\n    return this._fetch(ref, log).then((snapshot) => {\n      if (!this._findAllHasEventsForType(typeClass)) {\n        this._findAllAddEventListeners(store, typeClass, ref);\n      }\n      var results = [];\n      snapshot.forEach((childSnapshot) => {\n        var payload = this._assignIdToPayload(childSnapshot);\n        this._updateRecordCacheForType(typeClass, payload, store);\n        results.push(payload);\n      });\n\n      return results;\n    });\n  },\n\n\n  query(store, typeClass, query, recordArray) {\n    var ref = this._getCollectionRef(typeClass);\n    var modelName = typeClass.modelName;\n\n    ref = this.applyQueryToRef(ref, query);\n\n    ref.on('child_added', Ember.run.bind(this, function (snapshot) {\n      var record = store.peekRecord(modelName, this._getKey(snapshot));\n\n      if (!record || !record.__listening) {\n        var payload = this._assignIdToPayload(snapshot);\n        var normalizedData = store.normalize(typeClass.modelName, payload);\n        this._updateRecordCacheForType(typeClass, payload, store);\n        record = store.push(normalizedData);\n      }\n\n      if (record) {\n        recordArray.get('content').addObject(record._internalModel);\n      }\n    }));\n\n    // `child_changed` is already handled by the record's\n    // value listener after a store.push. `child_moved` is\n    // a much less common case because it relates to priority\n\n    ref.on('child_removed', Ember.run.bind(this, function (snapshot) {\n      var record = store.peekRecord(modelName, this._getKey(snapshot));\n      if (record) {\n        recordArray.get('content').removeObject(record._internalModel);\n      }\n    }));\n\n    // clean up event handlers when the array is being destroyed\n    // so that future firebase events wont keep trying to use a\n    // destroyed store/serializer\n    recordArray.__firebaseCleanup = function () {\n      ref.off('child_added');\n      ref.off('child_removed');\n    };\n\n    var log = `DS: FirebaseAdapter#query ${modelName} with ${query}`;\n\n    return this._fetch(ref, log).then((snapshot) => {\n      if (!this._findAllHasEventsForType(typeClass)) {\n        this._findAllAddEventListeners(store, typeClass, ref);\n      }\n      var results = [];\n      snapshot.forEach((childSnapshot) => {\n        var payload = this._assignIdToPayload(childSnapshot);\n        this._updateRecordCacheForType(typeClass, payload, store);\n        results.push(payload);\n      });\n      return results;\n    });\n  },\n\n\n  applyQueryToRef(ref, query) {\n\n    if (!query.orderBy) {\n      query.orderBy = '_key';\n    }\n\n    if (query.orderBy === '_key'){\n      ref = ref.orderByKey();\n    } else if (query.orderBy === '_value') {\n      ref = ref.orderByValue();\n    } else if (query.orderBy === '_priority') {\n      ref = ref.orderByPriority();\n    } else {\n      ref = ref.orderByChild(query.orderBy);\n    }\n\n    ref = this._applyRangesToRef(ref, query);\n    ref = this._applyLimitsToRef(ref, query);\n\n    return ref;\n  },\n\n  _applyRangesToRef(ref, query) {\n    const methods = ['equalTo', 'startAt', 'endAt'];\n    methods.forEach(key => {\n      if (query[key] !== undefined) {\n        ref = ref[key](query[key]);\n      }\n    });\n\n    return ref;\n  },\n\n  _applyLimitsToRef(ref, query) {\n    const methods = ['limitToFirst', 'limitToLast'];\n    methods.forEach(key => {\n      if (isInteger(query[key])) {\n        ref = ref[key](query[key]);\n      }\n    });\n\n    return ref;\n  },\n\n\n  /**\n   * Keep track of what types `.findAll()` has been called for\n   * so duplicate listeners aren't added\n   */\n  _findAllMapForType: undefined,\n\n\n  /**\n   * Determine if the current type is already listening for children events\n   */\n  _findAllHasEventsForType(typeClass) {\n    return !Ember.isNone(this._findAllMapForType[typeClass.modelName]);\n  },\n\n\n  /**\n   * After `.findAll()` is called on a modelName, continue to listen for\n   * `child_added`, `child_removed`, and `child_changed`\n   */\n  _findAllAddEventListeners(store, typeClass, ref) {\n    var modelName = typeClass.modelName;\n    this._findAllMapForType[modelName] = true;\n\n    ref.on('child_added', Ember.run.bind(this, function (snapshot) {\n      if (!store.hasRecordForId(modelName, this._getKey(snapshot))) {\n        this._handleChildValue(store, typeClass, snapshot);\n      }\n    }));\n  },\n\n\n  /**\n   * Push a new child record into the store\n   */\n  _handleChildValue(store, typeClass, snapshot) {\n    // No idea why we need this, we are already turning off the callback by\n    // calling ref.off in recordWillUnload. Something is fishy here\n    if (store.isDestroying) {\n      return;\n    }\n    var value = snapshot.val();\n    if (value === null) {\n      var id = this._getKey(snapshot);\n      var record = store.peekRecord(typeClass.modelName, id);\n      // TODO: refactor using ED\n      if (!record.get('isDeleted')) {\n        record.deleteRecord();\n      }\n    } else {\n      const payload = this._assignIdToPayload(snapshot);\n      this._pushLater(typeClass.modelName, payload.id, payload);\n    }\n  },\n\n\n  /**\n   * `createRecord` is an alias for `updateRecord` because calling \\\n   * `ref.set()` would wipe out any existing relationships\n   */\n  createRecord(store, typeClass, snapshot) {\n    return this.updateRecord(store, typeClass, snapshot).then(() => {\n      this.listenForChanges(store, typeClass, snapshot.record);\n    });\n  },\n\n\n  /**\n   * Called by the store when a record is created/updated via the `save`\n   * method on a model record instance.\n   *\n   * The `updateRecord` method serializes the record and performs an `update()`\n   * at the the Firebase location and a `.set()` at any relationship locations\n   * The method will return a promise which will be resolved when the data and\n   * any relationships have been successfully saved to Firebase.\n   *\n   * We take an optional record reference, in order for this method to be usable\n   * for saving nested records as well.\n   */\n  updateRecord(store, typeClass, snapshot) {\n    var recordRef = this._getAbsoluteRef(snapshot.record);\n    var recordCache = this._getRecordCache(typeClass, snapshot.id);\n    var pathPieces = recordRef.path.toString().split('/');\n    var lastPiece = pathPieces[pathPieces.length-1];\n    var serializedRecord = snapshot.serialize({\n      includeId: (lastPiece !== snapshot.id) // record has no firebase `key` in path\n    });\n    const serializer = store.serializerFor(typeClass.modelName);\n\n    return new Promise((resolve, reject) => {\n      var relationshipsToSave = [];\n      // first we remove all relationships data from the serialized record, we backup the\n      // removed data so that we can save it at a later stage.\n      snapshot.record.eachRelationship((key, relationship) => {\n      const relationshipKey = serializer.keyForRelationship(key);\n      const data = serializedRecord[relationshipKey];\n      const isEmbedded = this.isRelationshipEmbedded(store, typeClass.modelName, relationship);\n      const hasMany = relationship.kind === 'hasMany';\n      if (hasMany || isEmbedded) {\n          if (!Ember.isNone(data)) {\n            relationshipsToSave.push({\n              data:data,\n              relationship:relationship,\n              isEmbedded:isEmbedded,\n              hasMany:hasMany\n            });\n          }\n          delete serializedRecord[relationshipKey];\n        }\n      });\n      var reportError = (errors) => {\n        var error = new Error(`Some errors were encountered while saving ${typeClass} ${snapshot.id}`);\n        error.errors = errors;\n        reject(error);\n      };\n      this._updateRecord(recordRef, serializedRecord).then(() => {\n        // and now we construct the list of promise to save relationships.\n        var savedRelationships = relationshipsToSave.map((relationshipToSave) => {\n            const data = relationshipToSave.data;\n            const relationship = relationshipToSave.relationship;\n            if (relationshipToSave.hasMany) {\n              return this._saveHasManyRelationship(store, typeClass, relationship, data, recordRef, recordCache);\n            } else {\n              // embedded belongsTo, we need to fill in the informations.\n              if (relationshipToSave.isEmbedded) {\n                return this._saveEmbeddedBelongsToRecord(store, typeClass, relationship, data, recordRef);\n              }\n            }\n          }\n        );\n        return Ember.RSVP.allSettled(savedRelationships);\n      }).catch((e) => {\n        reportError([e]);\n      }).then((results) => {\n        var rejected = Ember.A(results).filterBy('state', 'rejected');\n        if (rejected.length !== 0) {\n          reportError(rejected.mapBy('reason').toArray());\n        } else {\n          resolve();\n        }\n      });\n    }, `DS: FirebaseAdapter#updateRecord ${typeClass} to ${recordRef.toString()}`);\n  },\n\n\n  /**\n   * Update a single record without caring for the relationships\n   * @param  {Firebase} recordRef\n   * @param  {Object} serializedRecord\n   * @return {Promise}\n   */\n  _updateRecord(recordRef, serializedRecord) {\n    this._incrementWaiters();\n    return toPromise(recordRef.update, recordRef, [serializedRecord])\n      .then((result) => {\n        this._decrementWaiters();\n        return result;\n      })\n      .catch((e) => {\n        this._decrementWaiters();\n        return Ember.RSVP.reject(e);\n      });\n  },\n\n\n  /**\n   * Call _saveHasManyRelationshipRecord on each record in the relationship\n   * and then resolve once they have all settled\n   */\n  _saveHasManyRelationship(store, typeClass, relationship, ids, recordRef, recordCache) {\n    if (!Ember.isArray(ids)) {\n      throw new Error('hasMany relationships must must be an array');\n    }\n    var idsCache = Ember.A(recordCache[relationship.key]);\n    var dirtyRecords = [];\n\n    // Added\n    var addedRecords = ids.filter((id) => {\n      return !idsCache.includes(id);\n    });\n\n    // Dirty\n    dirtyRecords = ids.filter((id) => {\n      var relatedModelName = relationship.type;\n      return store.hasRecordForId(relatedModelName, id) && store.peekRecord(relatedModelName, id).get('hasDirtyAttributes') === true;\n    });\n\n    dirtyRecords = uniq(dirtyRecords.concat(addedRecords)).map((id) => {\n      return this._saveHasManyRecord(store, typeClass, relationship, recordRef, id);\n    });\n\n    // Removed\n    var removedRecords = idsCache.filter((id) => {\n      return !ids.includes(id);\n    });\n\n    removedRecords = removedRecords.map((id) => {\n      return this._removeHasManyRecord(store, recordRef, relationship.key, typeClass, id);\n    });\n    // Combine all the saved records\n    var savedRecords = dirtyRecords.concat(removedRecords);\n    // Wait for all the updates to finish\n    return Ember.RSVP.allSettled(savedRecords).then((savedRecords) => {\n      var rejected = Ember.A(Ember.A(savedRecords).filterBy('state', 'rejected'));\n      if (rejected.get('length') === 0) {\n        // Update the cache\n        recordCache[relationship.key] = ids;\n        return savedRecords;\n      }\n      else {\n        var error = new Error(`Some errors were encountered while saving a hasMany relationship ${relationship.parentType} -> ${relationship.type}`);\n            error.errors = Ember.A(rejected).mapBy('reason');\n        throw error;\n      }\n    });\n  },\n\n\n  /**\n   * If the relationship is `async: true`, create a child ref\n   * named with the record id and set the value to true\n\n   * If the relationship is `embedded: true`, create a child ref\n   * named with the record id and update the value to the serialized\n   * version of the record\n   */\n  _saveHasManyRecord(store, typeClass, relationship, parentRef, id) {\n    const serializer = store.serializerFor(typeClass.modelName);\n    var ref = this._getRelationshipRef(parentRef, serializer.keyForRelationship(relationship.key), id);\n    var record = store.peekRecord(relationship.type, id);\n    var isEmbedded = this.isRelationshipEmbedded(store, typeClass.modelName, relationship);\n    if (isEmbedded) {\n      return record.save();\n    }\n\n    return toPromise(ref.set, ref,  [true]);\n  },\n\n\n  /**\n   * Determine from the serializer if the relationship is embedded via the\n   * serializer's `attrs` hash.\n   *\n   * @return {Boolean}              Is the relationship embedded?\n   */\n  isRelationshipEmbedded(store, modelName, relationship) {\n    var serializer = store.serializerFor(modelName);\n    return serializer.hasDeserializeRecordsOption(relationship.key);\n  },\n\n\n  /**\n   * Determine from if the record is embedded via implicit relationships.\n   *\n   * @return {Boolean}              Is the relationship embedded?\n   */\n  isRecordEmbedded(record) {\n    if (record._internalModel) {\n      record = record._internalModel;\n    }\n\n    var found = this.getFirstEmbeddingParent(record);\n\n    return !!found;\n  },\n\n\n  /**\n   * Remove a relationship\n   */\n  _removeHasManyRecord(store, parentRef, key, typeClass, id) {\n    const relationshipKey = store.serializerFor(typeClass.modelName).keyForRelationship(key);\n    var ref = this._getRelationshipRef(parentRef, relationshipKey, id);\n    return toPromise(ref.remove, ref, [], ref.toString());\n  },\n\n\n  /**\n   * Save an embedded belongsTo record and set its internal firebase ref\n   *\n   * @return {Promise<DS.Model>}\n   */\n  _saveEmbeddedBelongsToRecord(store, typeClass, relationship, id, parentRef) {\n    var record = store.peekRecord(relationship.type, id);\n    if (record) {\n      return record.save();\n    }\n    return Ember.RSVP.Promise.reject(new Error(`Unable to find record with id ${id} from embedded relationship: ${JSON.stringify(relationship)}`));\n  },\n\n\n  /**\n   * Called by the store when a record is deleted.\n   */\n  deleteRecord(store, typeClass, snapshot) {\n    var ref = this._getAbsoluteRef(snapshot.record);\n    ref.off('value');\n    return toPromise(ref.remove, ref);\n  },\n\n\n  /**\n   * Determines a path fo a given type\n   */\n  pathForType(modelName) {\n    var camelized = Ember.String.camelize(modelName);\n    return pluralize(camelized);\n  },\n\n\n  /**\n   * Return a Firebase reference for a given modelName and optional ID.\n   */\n  _getCollectionRef(typeClass, id) {\n    var ref = this._ref;\n    if (typeClass) {\n      ref = ref.child(this.pathForType(typeClass.modelName));\n    }\n    if (id) {\n      ref = ref.child(id);\n    }\n    return ref;\n  },\n\n\n  /**\n   * Returns a Firebase reference for a record taking into account if the record is embedded\n   *\n   * @param  {DS.Model} record\n   * @return {Firebase}\n   */\n  _getAbsoluteRef(record) {\n    if (record._internalModel) {\n      record = record._internalModel;\n    }\n\n    var embeddingParent = this.getFirstEmbeddingParent(record);\n\n    if (embeddingParent) {\n      var { record: parent, relationship } = embeddingParent;\n      const embeddedKey = parent.store.serializerFor(parent.modelName).keyForRelationship(relationship.key);\n      var recordRef = this._getAbsoluteRef(parent).child(embeddedKey);\n\n      if (relationship.kind === 'hasMany') {\n        recordRef = recordRef.child(record.id);\n      }\n      return recordRef;\n    }\n\n    return this._getCollectionRef(record.type, record.id);\n  },\n\n\n  /**\n   * Returns the parent record and relationship where any embedding is detected\n   *\n   * @param  {DS.InternalModel} internalModel\n   * @return {Object}\n   */\n  getFirstEmbeddingParent(internalModel) {\n    let relationships = assign(\n      {},\n      internalModel._implicitRelationships,\n      internalModel._relationships.initializedRelationships\n    );\n\n    let embeddingParentRel;\n    let relationshipKeys = Object.keys(relationships);\n\n    for (let i = 0; i < relationshipKeys.length; i++) {\n      let rel = relationships[relationshipKeys[i]];\n      let members = rel.members.toArray();\n      let parent = members[0];\n\n      if (!parent || !rel.inverseKey) {\n        continue;\n      }\n\n      let parentRel = parent._relationships.get(rel.inverseKey);\n      if (this.isRelationshipEmbedded(this.store, parent.type.modelName, parentRel.relationshipMeta)) {\n        embeddingParentRel = rel;\n        break;\n      }\n    }\n\n    if (embeddingParentRel) {\n      var parent = embeddingParentRel.members.toArray()[0];\n      var parentKey = embeddingParentRel.inverseKey;\n      var parentRel = parent._relationships.get(parentKey).relationshipMeta;\n      return { record: parent, relationship: parentRel };\n    }\n  },\n\n\n  /**\n   * Return a Firebase reference based on a relationship key and record id\n   */\n  _getRelationshipRef(ref, key, id) {\n    return ref.child(key).child(id);\n  },\n\n\n  /**\n   * The amount of time (ms) before the _queue is flushed\n   */\n  _queueFlushDelay: (1000/60), // 60fps\n\n\n  /**\n   * Schedules a `_flushQueue` for later.\n   *\n   * @private\n   */\n  _flushLater() {\n    Ember.run.later(this, this._flushQueue, this._queueFlushDelay);\n  },\n\n\n  /**\n   * Flush all delayed `store.push` payloads in `this._queuedPayloads`.\n   *\n   * @private\n   */\n  _flushQueue() {\n    const store = this.get('store');\n    if (store.isDestroying) {\n      return;\n    }\n\n    this._queue.forEach((key) => {\n      const { payload, modelName } = this._queuedPayloads[key];\n      const normalizedData = store.normalize(modelName, payload);\n      store.push(normalizedData);\n    });\n    this._queuedPayloads = {};\n    this._queue.length = 0;\n  },\n\n\n  /**\n   * Schedule a payload push for later. This will only push at most one payload\n   * per record. When trying to push to the same record multiple times, only the\n   * last push will be kept.\n   *\n   * @param {string} modelName\n   * @param {string} id\n   * @param {!Object<string, *>} payload\n   * @private\n   */\n  _pushLater(modelName, id, payload) {\n    const store = this.get('store');\n    if (!this._queueFlushDelay) {\n      const normalizedData = store.normalize(modelName, payload);\n      store.push(normalizedData);\n      return;\n    }\n\n    const key = `${modelName}-${id}`;\n    if (this._queuedPayloads[key]) {\n      // remove from original place in queue (will be added to end)\n      const oldPosition = this._queue.indexOf(key);\n      this._queue.splice(oldPosition, 1);\n    }\n    this._queuedPayloads[key] = { payload, modelName };\n    this._queue.push(key);\n\n    // if this is the first item to be queued, schedule a flush\n    if (this._queue.length === 1) {\n      this._flushLater();\n    }\n  },\n\n\n  /**\n   * A cache of hasMany relationships that can be used to\n   * diff against new relationships when a model is saved\n   */\n  _recordCacheForType: undefined,\n\n\n  /**\n   * _updateHasManyCacheForType\n   */\n  _updateRecordCacheForType(typeClass, payload, store) {\n    if (!payload) { return; }\n    const id = payload.id;\n    const cache = this._getRecordCache(typeClass, id);\n    const serializer = store.serializerFor(typeClass.modelName);\n    // Only cache relationships for now\n    // and do the same for embedded records\n    typeClass.eachRelationship((key, relationship) => {\n      if (relationship.kind === 'hasMany') {\n        const relationshipPayload = payload[serializer.keyForRelationship(key)];\n        if (!relationshipPayload) {\n          cache[key] = Ember.A();\n        } else {\n          const isEmbedded = this.isRelationshipEmbedded(store, typeClass.modelName, relationship);\n          if (isEmbedded) {\n            const relationshipTypeClass = store.modelFor(relationship.type);\n            for (let id in relationshipPayload) {\n              let obj = relationshipPayload[id];\n              obj.id = id;\n              this._updateRecordCacheForType(relationshipTypeClass, obj, store);\n            }\n          } else {\n            const ids = Object.keys(relationshipPayload);\n            cache[key] = Ember.A(ids);\n          }\n        }\n      }\n    });\n  },\n\n\n  /**\n   * Get or create the cache for a record\n   */\n  _getRecordCache(typeClass, id) {\n    var modelName = typeClass.modelName;\n    var cache = this._recordCacheForType;\n    cache[modelName] = cache[modelName] || {};\n    cache[modelName][id] = cache[modelName][id] || {};\n    return cache[modelName][id];\n  },\n\n\n  /**\n   * A utility for retrieving the key name of a Firebase ref or\n   * DataSnapshot. This is backwards-compatible with `name()`\n   * from Firebase 1.x.x and `key()` from Firebase 2.0.0+. Once\n   * support for Firebase 1.x.x is dropped in EmberFire, this\n   * helper can be removed.\n   */\n  _getKey(refOrSnapshot) {\n    var key;\n    if (typeof refOrSnapshot.key === 'function') {\n      key = refOrSnapshot.key();\n    } else if (typeof refOrSnapshot.key === 'string') {\n      key = refOrSnapshot.key;\n    } else {\n      key = refOrSnapshot.name();\n    }\n    return key;\n  },\n\n\n  /**\n   * We don't need background reloading, because firebase!\n   */\n  shouldBackgroundReloadRecord() {\n    return false;\n  }\n});\n","import Ember from 'ember';\nimport DS from 'ember-data';\nimport firebase from 'firebase';\nimport FirebaseAdapter from '../adapters/firebase';\nimport FirebaseSerializer from '../serializers/firebase';\n\nvar VERSION = '0.0.0';\n\nif (Ember.libraries) {\n  if (firebase.SDK_VERSION) {\n    Ember.libraries.registerCoreLibrary('Firebase', firebase.SDK_VERSION);\n  }\n\n  Ember.libraries.registerCoreLibrary('EmberFire', VERSION);\n}\n\nexport default {\n  name: 'emberfire',\n  before: 'ember-data',\n  initialize() {\n\n    // To support Ember versions below 2.1.0 as well.\n    // See http://emberjs.com/deprecations/v2.x/#toc_initializer-arity\n    let application = arguments[1] || arguments[0];\n\n    application.register('adapter:-firebase', FirebaseAdapter);\n    application.register('serializer:-firebase', FirebaseSerializer);\n\n    const providerSettings = {instantiate: false, singleton: false};\n    application.register('firebase-auth-provider:twitter',\n        firebase.auth.TwitterAuthProvider, providerSettings);\n    application.register('firebase-auth-provider:facebook',\n        firebase.auth.FacebookAuthProvider, providerSettings);\n    application.register('firebase-auth-provider:github',\n        firebase.auth.GithubAuthProvider, providerSettings);\n    application.register('firebase-auth-provider:google',\n        firebase.auth.GoogleAuthProvider, providerSettings);\n\n    // Monkeypatch the store until ED gives us a good way to listen to push events\n    if (!DS.Store.prototype._emberfirePatched) {\n      DS.Store.reopen({\n        _emberfirePatched: true,\n\n        _emberfireHandleRecordPush(records) {\n          if (typeof records !== 'undefined') {\n            records.forEach((record) => {\n              var modelName = record.constructor.modelName;\n              var adapter = this.adapterFor(modelName);\n              if (adapter.recordWasPushed) {\n                adapter.recordWasPushed(this, modelName, record);\n              }\n            });\n          }\n        },\n\n        push() {\n          var result = this._super.apply(this, arguments);\n          var records = result;\n\n          if (records === null) {\n            return null;\n          }\n\n          if (!Ember.isArray(result)) {\n            records = [result];\n          }\n\n          this._emberfireHandleRecordPush(records);\n          return result;\n        },\n\n        _push() {\n          var pushed = this._super.apply(this, arguments);\n          var records;\n          if (Array.isArray(pushed)) {\n            records = pushed.map(function(internalModel) {\n              return internalModel.getRecord();\n            });\n          } else if (pushed) {\n            records = [pushed.getRecord()];\n          }\n          this._emberfireHandleRecordPush(records);\n          return pushed;\n        },\n\n        recordWillUnload(record) {\n          var adapter = this.adapterFor(record.constructor.modelName);\n          if (adapter.recordWillUnload) {\n            adapter.recordWillUnload(this, record);\n          }\n        },\n\n        recordWillDelete(record) {\n          var adapter = this.adapterFor(record.constructor.modelName);\n          if (adapter.recordWillDelete) {\n            adapter.recordWillDelete(this, record);\n          }\n        }\n      });\n    }\n\n    if (!DS.Model.prototype._emberfirePatched) {\n      DS.Model.reopen({\n        _emberfirePatched: true,\n\n        unloadRecord() {\n          this.store.recordWillUnload(this);\n          return this._super();\n        },\n\n        deleteRecord() {\n          this.store.recordWillDelete(this);\n          this._super();\n        },\n\n        ref() {\n          var adapter = this.store.adapterFor(this.constructor.modelName);\n          if (adapter._getAbsoluteRef) {\n            return adapter._getAbsoluteRef(this);\n          }\n        }\n      });\n    }\n\n    if (!DS.AdapterPopulatedRecordArray.prototype._emberfirePatched) {\n      DS.AdapterPopulatedRecordArray.reopen({\n        _emberfirePatched: true,\n\n        willDestroy() {\n          if (this.__firebaseCleanup) {\n            this.__firebaseCleanup();\n          }\n          return this._super();\n        }\n      });\n    }\n\n    DS.FirebaseAdapter = FirebaseAdapter;\n    DS.FirebaseSerializer = FirebaseSerializer;\n  }\n};\n","import Ember from 'ember';\n\nexport default Ember.Mixin.create({\n\n  init() {\n    this._super.apply(this, arguments);\n    // unresolved requests, used in testing\n    this._reasons = 0;\n\n    if (Ember.testing) {\n      this._registerWaiter();\n    }\n  },\n\n\n  _incrementWaiters() {\n    this._reasons++;\n  },\n\n\n  _decrementWaiters() {\n    this._reasons--;\n  },\n\n\n  /**\n   * The waiter calls this to determine if testing should wait. Override in\n   * the implementing class if needed.\n   *\n   * @return {Boolean}\n   * @private\n   */\n  _shouldWait() {\n    return this._reasons === 0;\n  },\n\n\n  /**\n   * Wire up a waiter for this instance.\n   *\n   * @private\n   */\n  _registerWaiter: function() {\n    this._waiter = () => {\n      return this._shouldWait();\n    };\n    Ember.Test.registerWaiter(this._waiter);\n  },\n\n});\n","import Ember from 'ember';\nimport DS from 'ember-data';\nimport firebase from 'firebase';\n\nconst { assign } = Ember;\n\n/**\n * The Firebase serializer helps normalize relationships and can be extended on\n * a per model basis.\n */\nexport default DS.JSONSerializer.extend(DS.EmbeddedRecordsMixin, {\n  isNewSerializerAPI: true,\n\n  /**\n   * Firebase have a special value for a date 'firebase.database.ServerValue.TIMESTAMP'\n   * that tells it to insert server time. We need to make sure the value is not scrapped\n   * by the data attribute transforms.\n   *\n   * @override\n   */\n  serializeAttribute(snapshot, json, key, attribute) {\n    var value = snapshot.attr(key);\n    this._super(snapshot, json, key, attribute);\n    if (this._canSerialize(key)) {\n      if (value === firebase.database.ServerValue.TIMESTAMP) {\n\n        var payloadKey = this._getMappedKey(key, snapshot.type);\n\n        if (payloadKey === key && this.keyForAttribute) {\n          payloadKey = this.keyForAttribute(key, 'serialize');\n        }\n        // do not transform\n        json[payloadKey] = value;\n      }\n    }\n  },\n\n\n  /**\n   * Firebase does not send null values, it omits the key altogether. This nullifies omitted\n   * properties so that property deletions sync correctly.\n   *\n   * @override\n   */\n  extractAttributes(modelClass, resourceHash) {\n    var attributes = this._super(modelClass, resourceHash);\n\n    // nullify omitted attributes\n    modelClass.eachAttribute((key) => {\n      if (!attributes.hasOwnProperty(key)) {\n        attributes[key] = null;\n      }\n    });\n\n    return attributes;\n  },\n\n\n  /**\n   * @override\n   */\n  extractRelationships(modelClass, payload) {\n    this.normalizeRelationships(modelClass, payload);\n    return this._super(modelClass, payload);\n  },\n\n\n  /**\n   * Normalizes `hasMany` relationship structure before passing\n   * to `JSONSerializer.extractRelationships`\n   *\n   * before:\n   *\n   * ```js\n   * {\n   *   comments: {\n   *     abc: true,\n   *     def: true,\n   *   }\n   * }\n   * ```\n   *\n   * after:\n   *\n   * ```js\n   * {\n   *   comments: [ 'abc', 'def' ]\n   * }\n   * ```\n   *\n   * Or for embedded objects:\n   *\n   * ```js\n   * {\n   *   comments: {\n   *     'abc': { body: 'a' },\n   *     'def': { body: 'd' )\n   *   }\n   * }\n   * ```\n   *\n   * these should become:\n   *\n   * ```js\n   * {\n   *   comments: [\n   *     {\n   *       id: 'abc',\n   *       body: 'a'\n   *     },\n   *     {\n   *       id: 'def',\n   *       body: 'd'\n   *     }\n   *   ]\n   * }\n   * ```\n   */\n  normalizeRelationships(modelClass, payload) {\n    modelClass.eachRelationship((key, meta) => {\n      let relationshipKey = this.keyForRelationship(key, meta.kind, 'deserialize');\n\n      if (meta.kind === 'hasMany') {\n        if (payload.hasOwnProperty(relationshipKey)) {\n          let relationshipPayload = payload[relationshipKey];\n          // embedded\n          if (this.hasDeserializeRecordsOption(key)) {\n            if (typeof relationshipPayload === 'object' && !Ember.isArray(relationshipPayload)) {\n              relationshipPayload = Object.keys(relationshipPayload).map((id) => {\n                return assign({ id: id }, relationshipPayload[id]);\n              });\n            } else if (Ember.isArray(relationshipPayload)) {\n              relationshipPayload = this._addNumericIdsToEmbeddedArray(relationshipPayload);\n            } else {\n              throw new Error(`${modelClass.toString()} relationship ${meta.kind}('${meta.type}') must contain embedded records with an \\`id\\`. Example: { \"${key}\": { \"${meta.type}_1\": { \"id\": \"${meta.type}_1\" } } } instead got: ${JSON.stringify(payload[key])}`);\n            }\n          }\n\n          // normalized\n          else {\n            if (typeof relationshipPayload === 'object' && !Ember.isArray(relationshipPayload)) {\n              relationshipPayload = Object.keys(relationshipPayload);\n            } else if (Ember.isArray(relationshipPayload)) {\n              relationshipPayload = this._convertBooleanArrayToIds(relationshipPayload);\n            } else {\n              throw new Error(`${modelClass.toString()} relationship ${meta.kind}('${meta.type}') must be a key/value map. Example: { \"${key}\": { \"${meta.type}_1\": true } } instead got: ${JSON.stringify(payload[key])}`);\n            }\n          }\n\n          payload[relationshipKey] = relationshipPayload;\n        }\n\n        // hasMany property is not present\n        // server will not send a property which has no content\n        // (i.e. it will never send `comments: null`) so we need to\n        // force the empty relationship\n        else {\n          payload[relationshipKey] = [];\n        }\n      }\n\n      if (meta.kind === 'belongsTo') {\n        if (!payload.hasOwnProperty(relationshipKey)) {\n          // server wont send property if it was made null elsewhere\n          payload[relationshipKey] = null;\n        }\n      }\n    });\n  },\n\n\n  /**\n   * Coerce arrays back into relationship arrays. When numeric ids are used\n   * the firebase server will send back arrays instead of object hashes in\n   * certain situations.\n   *\n   * See the conditions and reasoning here:\n   * https://www.firebase.com/docs/web/guide/understanding-data.html#section-arrays-in-firebase\n   *\n   * Stored in Firebase:\n   *\n   * ```json\n   * {\n   *   \"0\": true,\n   *   \"1\": true,\n   *   \"3\": true\n   * }\n   * ```\n   *\n   * Given back by the JS client:\n   *\n   * ```js\n   * [true, true, null, true]\n   * ```\n   *\n   * What we need:\n   *\n   * ```js\n   * [ \"0\", \"1\", \"3\" ]\n   * ```\n   *\n   * @param {Array} arr   Input array\n   * @return {Array}      Fixed array\n   * @private\n   */\n  _convertBooleanArrayToIds(arr) {\n    var result = [];\n    for (var i = 0; i <  arr.length; i++) {\n      if (arr[i] === true) {\n        result.push('' + i);\n      }\n      else if (typeof arr[i] === 'string') {\n        throw new Error(`hasMany relationship contains invalid data, should be in the form: { comment_1: true, comment_2: true } but was ${JSON.stringify(arr)}`);\n      }\n    }\n    return result;\n  },\n\n\n  /**\n   * Fix embedded array ids.\n   *\n   * Objects are stored in Firebase with their id in the key only:\n   *\n   * ```json\n   * {\n   *   \"0\": { obj0 },\n   *   \"1\": { obj1 },\n   *   \"3\": { obj3 }\n   * }\n   * ```\n   *\n   * Given back by the JS client:\n   *\n   * ```js\n   * [{ obj0 }, { obj1 }, null, { obj3 }]\n   * ```\n   *\n   * What we need:\n   *\n   * ```js\n   * [ { id: '0', ...obj0 }, { id: '1', ...obj1 }, { id: '3', ...obj3 } ]\n   * ```\n   *\n   * https://www.firebase.com/docs/web/guide/understanding-data.html#section-arrays-in-firebase\n   *\n   * @param {Array} arr   Input array\n   * @return {Array}      Fixed array\n   * @private\n   */\n  _addNumericIdsToEmbeddedArray(arr) {\n    var result = [];\n    for (var i = 0; i <  arr.length; i++) {\n      if (arr[i]) {\n        if (typeof arr[i] !== 'object') {\n          throw new Error(`expecting embedded object hash but found ${JSON.stringify(arr[i])}`);\n        }\n        result.push(assign({ id: '' + i }, arr[i]));\n      }\n    }\n    return result;\n  },\n\n\n  /**\n   * Even when records are embedded, bypass EmbeddedRecordsMixin\n   * and invoke JSONSerializer's method which serializes to ids only.\n   *\n   * The adapter handles saving the embedded records via `r.save()`\n   * and ensures that dirty states and rollback work.\n   *\n   * Will not be neccesary when this issue is resolved:\n   *\n   * https://github.com/emberjs/data/issues/2487\n   *\n   * @override\n   */\n  serializeHasMany(snapshot, json, relationship) {\n    DS.JSONSerializer.prototype.serializeHasMany.call(this, snapshot, json, relationship);\n  },\n\n\n  /**\n   * @see #serializeHasMany\n   * @override\n   */\n  serializeBelongsTo(snapshot, json, relationship) {\n    DS.JSONSerializer.prototype.serializeBelongsTo.call(this, snapshot, json, relationship);\n  },\n\n\n  /**\n   * @override\n   */\n  shouldSerializeHasMany(snapshot, key, relationship) {\n    return this._canSerialize(key);\n  },\n\n  /**\n   * @override\n   * @deprecated\n   */\n  _shouldSerializeHasMany(snapshot, key, relationship) {\n    return this._canSerialize(key);\n  }\n});\n","import Ember from 'ember';\n\nexport default function(fn, context, _args, errorMsg) {\n  var args = _args || [];\n  return new Ember.RSVP.Promise(function(resolve, reject) {\n    var callback = function(error) {\n      if (error) {\n        if (errorMsg && typeof error === 'object') {\n          error.location = errorMsg;\n        }\n        Ember.run(null, reject, error);\n      } else {\n        Ember.run(null, resolve);\n      }\n    };\n    args.push(callback);\n    fn.apply(context, args);\n  });\n}\n","/* jshint node: true */\n'use strict';\n\nmodule.exports = {\n  name: 'ember-inflector'\n};\n","import Ember from 'ember';\nimport DS from 'ember-data';\nimport FirebaseAdapter from '../../addon/adapters/firebase';\nimport FirebaseSerializer from '../../addon/serializers/firebase';\nimport EmberFireInitializer from '../../addon/initializers/emberfire';\n\nDS.FirebaseAdapter = FirebaseAdapter;\nDS.FirebaseSerializer = FirebaseSerializer;\n\nEmber.onLoad('Ember.Application', function(Application) {\n  Application.initializer(EmberFireInitializer);\n});\n"],"sourceRoot":"/source/"}