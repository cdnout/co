"use strict";var __importDefault=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(exports,"__esModule",{value:!0});const clamp_1=__importDefault(require("clamp")),utils_1=__importDefault(require("../utils")),eval_1=require("../helpers/eval");function checkAsymptote(t,e,n,l,s){if(!s)return{asymptote:!0,d0:t,d1:e};const r=t[0],u=e[0],a=utils_1.default.linspace(r,u,10);let o,i;for(let t=0;t<10;t+=1){const e=a[t],r=eval_1.builtIn(n,"fn",{x:e});if(t&&o){const t=r-o;if(utils_1.default.sgn(t)===l)return checkAsymptote([i,o],[e,r],n,l,s-1)}o=r,i=e}return{asymptote:!1,d0:t,d1:e}}function split(t,e,n){let l,s,r,u=[];const a=[],o=t.meta.yScale.domain(),i=o[0],f=o[1];function c(t){return t[1]=Math.min(t[1],f),t[1]=Math.max(t[1],i),t}for(n[0]&&(u.push(n[0]),r=n[1][0]-n[0][0],s=utils_1.default.sgn(n[1][1]-n[0][1])),l=1;l<n.length;){const t=n[l-1][1],o=n[l][1]-t,i=utils_1.default.sgn(o);if(s!==i&&Math.abs(o/r)>1){const t=checkAsymptote(n[l-1],n[l],e,i,3);t.asymptote&&(u.push(c(t.d0)),a.push(u),u=[c(t.d1)])}s=i,u.push(n[l]),++l}return u.length&&a.push(u),a}function linear(t,e,n,l){const s=utils_1.default.space(t,n,l),r=t.meta.yScale.domain(),u=r[1]-r[0],a=r[0]-1e5*u,o=r[1]+1e5*u;let i=[];for(let t=0;t<s.length;t+=1){const n=s[t],l=eval_1.builtIn(e,"fn",{x:n});utils_1.default.isValidNumber(n)&&utils_1.default.isValidNumber(l)&&i.push([n,clamp_1.default(l,a,o)])}return i=split(t,e,i)}function parametric(t,e,n,l){const s=e.range||[0,2*Math.PI],r=utils_1.default.space(t,s,l),u=[];for(let t=0;t<r.length;t+=1){const n=r[t],l=eval_1.builtIn(e,"x",{t:n}),s=eval_1.builtIn(e,"y",{t:n});u.push([l,s])}return[u]}function polar(t,e,n,l){const s=e.range||[-Math.PI,Math.PI],r=utils_1.default.space(t,s,l),u=[];for(let t=0;t<r.length;t+=1){const n=r[t],l=eval_1.builtIn(e,"r",{theta:n}),s=l*Math.cos(n),a=l*Math.sin(n);u.push([s,a])}return[u]}function points(t,e,n,l){return[e.points]}function vector(t,e,n,l){return e.offset=e.offset||[0,0],[[e.offset,[e.vector[0]+e.offset[0],e.vector[1]+e.offset[1]]]]}const sampler=function(t,e,n,l){const s={parametric:parametric,polar:polar,points:points,vector:vector,linear:linear};if(!(e.fnType in s))throw Error(e.fnType+" is not supported in the `builtIn` sampler");return s[e.fnType].apply(null,arguments)};exports.default=sampler;