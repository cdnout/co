function _defineProperty(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}const functionToObjectURL=require("./functionToObjectURL"),GeneralWorker=require("../GeneralWorker");class WebWorker extends GeneralWorker{constructor(t){super(...arguments),_defineProperty(this,"WORKER_SOURCE","function () {\n\t\tlet global = new Proxy(\n\t\t  {},\n\t\t  {\n\t\t    set: (obj, prop, newval) => (self[prop] = newval)\n\t\t  }\n\t\t);\n\n\t\tonmessage = function (event) {\n\t\t\tvar message = event.data;\n\n\t\t\tvar args = Object.keys(message).filter(function (key) {\n\t\t\t\treturn key.match(/^argument/);\n\t\t\t}).sort(function (a, b) {\n\t\t\t\treturn parseInt(a.slice(8), 10) - parseInt(b.slice(8), 10);\n\t\t\t}).map(function (key) {\n\t\t\t\treturn message[key];\n\t\t\t});\n\n\t\t\ttry {\n\t\t\t\tvar result = eval('(' + message.func + ')').apply(null, args);\n\n\t\t\t\tif (result && result.then && result.catch && result.finally) {\n\t\t\t\t\tresult.then(result => {\n\t\t\t\t\t\tself.postMessage({id: message.id, result: result});\n\t\t\t\t\t}).catch(error => {\n\t\t\t\t\t\tself.postMessage({id: message.id, error: error.stack});\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tself.postMessage({id: message.id, result: result});\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tself.postMessage({id: message.id, error: error.stack});\n\t\t\t}\n\t\t}\n\t}"),_defineProperty(this,"_onMessage",t=>{let e=t.data;this.handleWorkerMessage(e)}),_defineProperty(this,"postMessage",(t,e)=>{this._debug&&this._log({taskId:t.id,action:"send_task_to_actual_worker",message:`sending taskId(${t.id}) to worker process`}),this._worker.postMessage(t,e)}),_defineProperty(this,"terminate",()=>{this._debug&&this._log({message:"terminated"}),this._worker.terminate()}),this._worker=new Worker(functionToObjectURL(this.WORKER_SOURCE)),this._worker.addEventListener("message",this._onMessage),this._debug&&this._log({action:"initialized"})}}module.exports=WebWorker;