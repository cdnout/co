const{parentPort:parentPort,workerData:workerData}=require("worker_threads");parentPort.on("message",message=>{let args=Object.keys(message).filter(function(e){return e.match(/^argument/)}).sort(function(e,t){return parseInt(e.slice(8),10)-parseInt(t.slice(8),10)}).map(function(e){return message[e]});try{let result=eval("("+message.func+")").apply(null,args);"undefined"!=typeof Promise&&result instanceof Promise?result.then(function(e){parentPort.postMessage({id:message.id,result:e})}).catch(function(e){parentPort.postMessage({id:message.id,error:e.stack})}):parentPort.postMessage({id:message.id,result:result})}catch(e){parentPort.postMessage({id:message.id,error:e.stack})}});