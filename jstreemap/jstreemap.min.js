!function(t,e){if("object"==typeof exports&&"object"==typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var r=e();for(var i in r)("object"==typeof exports?exports:t)[i]=r[i]}}("undefined"!=typeof self?self:this,function(){return function(t){var e={};function r(i){if(e[i])return e[i].exports;var s=e[i]={i:i,l:!1,exports:{}};return t[i].call(s.exports,s,s.exports,r),s.l=!0,s.exports}return r.m=t,r.c=e,r.d=function(t,e,i){r.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:i})},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=5)}([function(t,e,r){"use strict";const i=1;t.exports={TreeNode:class{constructor(){this.left=null,this.right=null,this.parent=null,this.key=null,this.color=i}grandparent(){let t=this.parent;return null===t?null:t.parent}sibling(){let t=this.parent;return null===t?null:this===t.left?t.right:t.left}uncle(){let t=this.parent;return null===t?null:null===t.parent?null:t.sibling()}},BLACK:2,RED:i}},function(t,e){t.exports={KeyOnlyPolicy:class{fetch(t){return t.key}copy(t,e){t.key=e.key}toString(t){return String(t.key)}},ValueOnlyPolicy:class{fetch(t){return t.value}copy(t,e){t.value=e.value}toString(t){return String(t.value)}},KeyValuePolicy:class{fetch(t){return[t.key,t.value]}copy(t,e){t.key=e.key,t.value=e.value}toString(t){return String(t.key)+":"+String(t.value)}}}},function(t,e,r){"use strict";const{TreeNode:i,RED:s,BLACK:n}=r(0),{JsIterator:o,JsReverseIterator:h}=r(3),{Iterator:a,ReverseIterator:l}=r(4),{KeyOnlyPolicy:u,ValueOnlyPolicy:_,KeyValuePolicy:c}=r(1),{InsertionResult:f}=r(8),d=1,p=2,g=3;class y{constructor(){this.leftmost=this,this.rightmost=this,this.root=this,this.size=0,this.id="HEAD"}}function w(t,e){return t<e?-1:t===e?0:1}class m{constructor(){this.head=new y,this.compare=w,this.valuePolicy=new u}clear(){this.head=new y}size(){return this.head.size}compareNodes(t,e){return this.compare(t.key,e.key)}replaceNode(t,e){t!==e&&(null===t.parent?this.head.root=e:t===t.parent.left?t.parent.left=e:t.parent.right=e,this.isLeaf(e)||(e.parent=t.parent))}rotateLeft(t){let e=t.right;if(this.isLeaf(e))throw new Error("rotateLeft can't be performed. The tree is corrupted");this.replaceNode(t,e),t.right=e.left,null!==e.left&&(e.left.parent=t),e.left=t,t.parent=e}rotateRight(t){let e=t.left;if(this.isLeaf(e))throw new Error("rotateRight can't be performed. The tree is corrupted");this.replaceNode(t,e),t.left=e.right,null!==e.right&&(e.right.parent=t),e.right=t,t.parent=e}isLeaf(t){return null===t||t===this.head}fetchColor(t){return this.isLeaf(t)?n:t.color}isBlack(t){return this.fetchColor(t)===n}isRed(t){return this.fetchColor(t)===s}insertMulti(t){return this.insertNode(t,d)}insertUnique(t){return this.insertNode(t,p)}insertOrReplace(t){return this.insertNode(t,g)}insertNode(t,e=d){let r=this.insertNodeInternal(this.head.root,t,e);return r.wasAdded&&(0===this.head.size?(this.head.root=t,this.head.leftmost=t,this.head.rightmost=t,t.left=this.head,t.right=this.head):this.head.leftmost.left===t?(this.head.leftmost=t,t.left=this.head):this.head.rightmost.right===t&&(this.head.rightmost=t,t.right=this.head),this.insertRepairTree(t),this.head.size=this.head.size+1),r}insertNodeInternal(t,e,r){let i=t,s=null,n=-1;for(;!this.isLeaf(i);)if(s=i,(n=this.compareNodes(e,s))<0)i=s.left;else if(n>0)i=s.right;else switch(r){case p:return new f(!1,!1,void 0);case g:return this.valuePolicy.copy(s,e),new f(!1,!0,new a(s,this));default:i=s.right}return this.isLeaf(s)?(e.parent=null,e.left=this.head,e.right=this.head):(e.parent=s,n<0?s.left=e:s.right=e),new f(!0,!1,new a(e,this))}insertRepairTree(t){null===t.parent?this.repairCase1(t):this.isBlack(t.parent)||(this.isRed(t.uncle())?this.repairCase3(t):this.repairCase4(t))}repairCase1(t){t.color=n}repairCase3(t){t.parent.color=n,t.uncle().color=n,t.grandparent().color=s,this.insertRepairTree(t.grandparent())}repairCase4(t){let e=t.parent,r=t.grandparent();null!==r.left&&t===r.left.right?(this.rotateLeft(e),t=t.left):null!==r.right&&t===r.right.left&&(this.rotateRight(e),t=t.right),e=t.parent,r=t.grandparent(),t===e.left?this.rotateRight(r):this.rotateLeft(r),e.color=n,r.color=s}fetchMaximum(t){for(;!this.isLeaf(t.right);)t=t.right;return t}fetchMinimum(t){for(;!this.isLeaf(t.left);)t=t.left;return t}erase(t){if(this.isLeaf(t))return;this.eraseInternal(t);let e=this.head;e.size=e.size-1}eraseInternal(t){if(!this.isLeaf(t.left)&&!this.isLeaf(t.right)){let e=this.fetchMaximum(t.left);this.valuePolicy.copy(t,e),t=e}let e=this.isLeaf(t.right)?t.left:t.right;this.isBlack(t)&&this.eraseCase1(t),this.replaceNode(t,e),2===this.head.size&&(this.isLeaf(e)||(e.color=n));let r=this.head;if(this.isLeaf(e)){if(r.leftmost===t){let e=t.parent;null!==e?(r.leftmost=e,e.left=r):r.leftmost=r}if(r.rightmost===t){let e=t.parent;null!==e?(r.rightmost=e,e.right=r):r.rightmost=r}}else r.leftmost===t&&(r.leftmost=e,e.left=r),r.rightmost===t&&(r.rightmost=e,e.right=r)}eraseCase1(t){null!==t.parent&&this.eraseCase2(t)}eraseCase2(t){let e=t.sibling();this.isRed(e)&&(t.parent.color=s,e.color=n,t===t.parent.left?this.rotateLeft(t.parent):this.rotateRight(t.parent)),this.eraseCase3(t)}eraseCase3(t){let e=t.sibling(),r=t.parent;this.isBlack(r)&&this.isBlack(e)&&this.isBlack(e.left)&&this.isBlack(e.right)?(e.color=s,this.eraseCase1(r)):this.eraseCase4(t)}eraseCase4(t){let e=t.sibling(),r=t.parent;this.isRed(r)&&this.isBlack(e)&&this.isBlack(e.left)&&this.isBlack(e.right)?(e.color=s,r.color=n):this.eraseCase5(t)}eraseCase5(t){let e=t.sibling(),r=t.parent;t===r.left&&this.isRed(e.left)&&this.isBlack(e.right)?(e.color=s,e.left.color=n,this.rotateRight(e)):t===r.right&&this.isBlack(e.left)&&this.isRed(e.right)&&(e.color=s,e.right.color=n,this.rotateLeft(e)),this.eraseCase6(t)}eraseCase6(t){let e=t.sibling(),r=t.parent;e.color=this.fetchColor(r),r.color=n,t===r.left?(e.right.color=n,this.rotateLeft(r)):(e.left.color=n,this.rotateRight(r))}find(t){let e=this.head,r=e.root;for(;!this.isLeaf(r);){let i=this.compare(r.key,t);if(i>0)e=r,r=r.left;else{if(!(i<0))return new a(r,this);e=r,r=r.right}}return new a(this.head,this)}lowerBound(t){let e=this.head,r=e.root;for(;!this.isLeaf(r);){this.compare(r.key,t)>=0?(e=r,r=r.left):r=r.right}return new a(e,this)}upperBound(t){let e=this.head,r=e.root;for(;!this.isLeaf(r);){this.compare(r.key,t)>0?(e=r,r=r.left):r=r.right}return new a(e,this)}begin(){return new a(this.head.leftmost,this)}end(){return new a(this.head,this)}rbegin(){return new l(this.head.rightmost,this)}rend(){return new l(this.head,this)}jsBegin(){return this.head.leftmost}jsEnd(){return this.head}jsRbegin(){return this.head.rightmost}jsRend(){return this.head}next(t){if(t===this.head)return this.head.leftmost;if(t.right===this.head)return this.head;if(null!==t.right){return this.fetchMinimum(t.right)}for(;t.parent.left!==t;)t=t.parent;return t.parent}prev(t){if(t===this.head)return this.head.rightmost;if(t.left===this.head)return this.head;if(null!==t.left){return this.fetchMaximum(t.left)}for(;t.parent.right!==t;)t=t.parent;return t.parent}[Symbol.iterator](){return new o(this)}backward(){return new h(this)}entries(){return new o(this)}keys(){return new o(this,new u)}values(){return new o(this,new _)}first(){if(0!==this.size()){let t=this.begin();return this.valuePolicy.fetch(t.node)}}last(){if(0!==this.size()){let t=this.rbegin();return this.valuePolicy.fetch(t.node)}}toString(){let t=[];for(let e=this.begin();!e.equals(this.end());e.next())t.push(this.valuePolicy.toString(e.node));return"{"+t.join(",")+"}"}get[Symbol.toStringTag](){return"Tree"}static get[Symbol.species](){return m}}t.exports={Tree:m,compare:w}},function(t,e,r){"use strict";class i{constructor(t,e=t.valuePolicy){this.container=t,this.valuePolicy=e,this.node=t.jsBegin()}next(){let t={};return t.done=this.node===this.container.jsEnd(),t.done||(t.value=this.valuePolicy.fetch(this.node),this.node=this.container.next(this.node)),t}[Symbol.iterator](){return this}backwards(){return new s(this.container,this.valuePolicy)}}class s{constructor(t,e=t.valuePolicy){this.container=t,this.valuePolicy=e,this.node=t.jsRbegin()}next(){let t={};return t.done=this.node===this.container.jsRend(),t.done||(t.value=this.valuePolicy.fetch(this.node),this.node=this.container.prev(this.node)),t}[Symbol.iterator](){return this}backwards(){return new i(this.container,this.valuePolicy)}}t.exports={JsIterator:i,JsReverseIterator:s}},function(t,e,r){"use strict";class i{constructor(t,e){this.__n=t,this.__c=e}equals(t){let e=this.constructor.name,r=t.constructor.name;if(e!==r)throw new Error(`Can't compare an instance of ${e} with an instance of ${r}`);if(this.__c!==t.__c)throw new Error("Iterators belong to different containers");return this.__n===t.__n}get node(){return this.__n}get key(){return this.__n.key}get value(){return this.__n.value}get container(){return this.__c}}class s extends i{constructor(...t){if(2===t.length){let[e,r]=t;super(e,r)}else{if(1!==t.length)throw new Error("Can't create an Iterator with provided parameters");{let[e]=t,r=e.constructor.name;if(r===s.name)super(e.__n,e.__c);else{if(r!==n.name)throw new Error(`Can't create an Iterator from ${r}`);{let t=e.__c;super(t.next(e.__n),t)}}}}}next(){this.__n=this.__c.next(this.__n)}prev(){this.__n=this.__c.prev(this.__n)}}class n extends i{constructor(...t){if(2===t.length){let[e,r]=t;super(e,r)}else{if(1!==t.length)throw new Error("Can't create a Reverse Iterator with provided parameters");{let[e]=t,r=e.constructor.name;if(r===n.name)super(e.__n,e.__c);else{if(r!==s.name)throw new Error(`Can't create an ReverseIterator from ${r}`);{let t=e.__c;super(t.prev(e.__n),t)}}}}}next(){this.__n=this.__c.prev(this.__n)}prev(){this.__n=this.__c.next(this.__n)}}t.exports={Iterator:s,ReverseIterator:n}},function(t,e,r){t.exports=r(6)},function(t,e,r){const{TreeMap:i}=r(7),{TreeMultiMap:s}=r(9),{TreeSet:n}=r(10),{TreeMultiSet:o}=r(11),{Iterator:h,ReverseIterator:a}=r(4),{JsIterator:l,JsReverseIterator:u}=r(3);t.exports={Iterator:h,ReverseIterator:a,JsIterator:l,JsReverseIterator:u,TreeMap:i,TreeMultiMap:s,TreeSet:n,TreeMultiSet:o}},function(t,e,r){const{Tree:i}=r(2),{KeyValuePolicy:s}=r(1),{TreeNode:n}=r(0);class o{constructor(t){if(this.__t=new i,this.__t.valuePolicy=new s,null!=t){if(void 0===t[Symbol.iterator])throw new Error("TreeMap constructor accepts only iterable objects");for(let[e,r]of t)this.set(e,r)}}get[Symbol.toStringTag](){return"TreeMap"}static get[Symbol.species](){return o}clear(){this.__t.clear()}delete(t){let e=this.__t.find(t);e.equals(this.__t.end())||this.__t.erase(e.node)}entries(){return this.__t.entries()}forEach(t){for(let[e,r]of this.__t)t(r,e,this)}get(t){let e=this.__t.find(t);return e.equals(this.__t.end())?void 0:e.value}has(t){return!this.__t.find(t).equals(this.__t.end())}keys(){return this.__t.keys()}set(t,e){let r=new n;r.key=t,r.value=e,this.__t.insertOrReplace(r)}get size(){return this.__t.size()}values(){return this.__t.values()}[Symbol.iterator](){return this.__t[Symbol.iterator]()}backward(){return this.__t.backward()}set compareFunc(t){this.clear(),this.__t.compare=t}begin(){return this.__t.begin()}end(){return this.__t.end()}find(t){return this.__t.find(t)}insertUnique(t,e){let r=new n;return r.key=t,r.value=e,this.__t.insertUnique(r)}insertOrReplace(t,e){let r=new n;return r.key=t,r.value=e,this.__t.insertOrReplace(r)}erase(t){this.__t.erase(t.node)}lowerBound(t){return this.__t.lowerBound(t)}rbegin(){return this.__t.rbegin()}rend(){return this.__t.rend()}upperBound(t){return this.__t.upperBound(t)}first(){return this.__t.first()}last(){return this.__t.last()}toString(){return this.__t.toString()}}t.exports={TreeMap:o}},function(t,e){t.exports={InsertionResult:class{constructor(t,e,r){this.wasAdded=t,this.wasReplaced=e,this.iterator=r}}}},function(t,e,r){const{Tree:i}=r(2),{KeyValuePolicy:s}=r(1),{TreeNode:n}=r(0);class o{constructor(t){if(this.__t=new i,this.__t.valuePolicy=new s,null!=t){if(void 0===t[Symbol.iterator])throw new Error("TreeMultiMap constructor accepts only iterable objects");for(let[e,r]of t)this.set(e,r)}}get[Symbol.toStringTag](){return"TreeMultiMap"}static get[Symbol.species](){return o}clear(){this.__t.clear()}delete(t){let e=this.__t.find(t);e.equals(this.__t.end())||this.__t.erase(e.node)}entries(){return this.__t.entries()}forEach(t){for(let[e,r]of this.__t)t(r,e,this)}get(t){let e=this.__t.find(t);return e.equals(this.__t.end())?void 0:e.value}has(t){return!this.__t.find(t).equals(this.__t.end())}keys(){return this.__t.keys()}set(t,e){let r=new n;r.key=t,r.value=e,this.__t.insertMulti(r)}get size(){return this.__t.size()}values(){return this.__t.values()}[Symbol.iterator](){return this.__t[Symbol.iterator]()}backward(){return this.__t.backward()}set compareFunc(t){this.clear(),this.__t.compare=t}begin(){return this.__t.begin()}end(){return this.__t.end()}find(t){return this.__t.find(t)}insertUnique(t,e){let r=new n;return r.key=t,r.value=e,this.__t.insertUnique(r)}insertOrReplace(t,e){let r=new n;return r.key=t,r.value=e,this.__t.insertOrReplace(r)}insertMulti(t,e){let r=new n;return r.key=t,r.value=e,this.__t.insertMulti(r)}erase(t){this.__t.erase(t.node)}lowerBound(t){return this.__t.lowerBound(t)}rbegin(){return this.__t.rbegin()}rend(){return this.__t.rend()}upperBound(t){return this.__t.upperBound(t)}first(){return this.__t.first()}last(){return this.__t.last()}toString(){return this.__t.toString()}}t.exports={TreeMultiMap:o}},function(t,e,r){const{Tree:i}=r(2),{KeyOnlyPolicy:s}=r(1),{TreeNode:n}=r(0);class o{constructor(t){if(this.__t=new i,this.__t.valuePolicy=new s,null!=t){if(void 0===t[Symbol.iterator])throw new Error("TreeSet constructor accepts only iterable objects");for(let e of t)this.add(e)}}get[Symbol.toStringTag](){return"TreeSet"}static get[Symbol.species](){return o}clear(){this.__t.clear()}delete(t){let e=this.__t.find(t);e.equals(this.__t.end())||this.__t.erase(e.node)}entries(){return this.__t.entries()}forEach(t){for(let e of this.__t)t(e,e,this)}has(t){return!this.__t.find(t).equals(this.__t.end())}keys(){return this.__t.keys()}add(t){let e=new n;e.key=t,this.__t.insertUnique(e)}get size(){return this.__t.size()}values(){return this.__t.keys()}[Symbol.iterator](){return this.__t[Symbol.iterator]()}backward(){return this.__t.backward()}set compareFunc(t){this.clear(),this.__t.compare=t}begin(){return this.__t.begin()}end(){return this.__t.end()}find(t){return this.__t.find(t)}insertUnique(t){let e=new n;return e.key=t,this.__t.insertUnique(e)}insertOrReplace(t){let e=new n;return e.key=t,this.__t.insertOrReplace(e)}erase(t){this.__t.erase(t.node)}lowerBound(t){return this.__t.lowerBound(t)}rbegin(){return this.__t.rbegin()}rend(){return this.__t.rend()}upperBound(t){return this.__t.upperBound(t)}first(){return this.__t.first()}last(){return this.__t.last()}toString(){return this.__t.toString()}}t.exports={TreeSet:o}},function(t,e,r){const{Tree:i}=r(2),{KeyOnlyPolicy:s}=r(1),{TreeNode:n}=r(0);class o{constructor(t){if(this.__t=new i,this.__t.valuePolicy=new s,null!=t){if(void 0===t[Symbol.iterator])throw new Error("TreeMultiSet constructor accepts only iterable objects");for(let e of t)this.add(e)}}get[Symbol.toStringTag](){return"TreeMultiSet"}static get[Symbol.species](){return o}clear(){this.__t.clear()}delete(t){let e=this.__t.find(t);e.equals(this.__t.end())||this.__t.erase(e.node)}entries(){return this.__t.entries()}forEach(t){for(let e of this.__t)t(e,e,this)}has(t){return!this.__t.find(t).equals(this.__t.end())}keys(){return this.__t.keys()}add(t){let e=new n;e.key=t,this.__t.insertMulti(e)}get size(){return this.__t.size()}values(){return this.__t.keys()}[Symbol.iterator](){return this.__t[Symbol.iterator]()}backward(){return this.__t.backward()}set compareFunc(t){this.clear(),this.__t.compare=t}begin(){return this.__t.begin()}end(){return this.__t.end()}find(t){return this.__t.find(t)}insertUnique(t){let e=new n;return e.key=t,this.__t.insertUnique(e)}insertOrReplace(t){let e=new n;return e.key=t,this.__t.insertOrReplace(e)}insertMulti(t){let e=new n;return e.key=t,this.__t.insertMulti(e)}erase(t){this.__t.erase(t.node)}lowerBound(t){return this.__t.lowerBound(t)}rbegin(){return this.__t.rbegin()}rend(){return this.__t.rend()}upperBound(t){return this.__t.upperBound(t)}first(){return this.__t.first()}last(){return this.__t.last()}toString(){return this.__t.toString()}}t.exports={TreeMultiSet:o}}])});