(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["RxPlayer"] = factory();
	else
		root["RxPlayer"] = factory();
})(self, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 1506:
/***/ ((module) => {

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

module.exports = _assertThisInitialized;

/***/ }),

/***/ 8926:
/***/ ((module) => {

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

module.exports = _asyncToGenerator;

/***/ }),

/***/ 9100:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var setPrototypeOf = __webpack_require__(9489);

var isNativeReflectConstruct = __webpack_require__(7067);

function _construct(Parent, args, Class) {
  if (isNativeReflectConstruct()) {
    module.exports = _construct = Reflect.construct;
  } else {
    module.exports = _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

module.exports = _construct;

/***/ }),

/***/ 3913:
/***/ ((module) => {

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

module.exports = _createClass;

/***/ }),

/***/ 9754:
/***/ ((module) => {

function _getPrototypeOf(o) {
  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

module.exports = _getPrototypeOf;

/***/ }),

/***/ 5354:
/***/ ((module) => {

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

module.exports = _inheritsLoose;

/***/ }),

/***/ 430:
/***/ ((module) => {

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

module.exports = _isNativeFunction;

/***/ }),

/***/ 7067:
/***/ ((module) => {

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

module.exports = _isNativeReflectConstruct;

/***/ }),

/***/ 9489:
/***/ ((module) => {

function _setPrototypeOf(o, p) {
  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

module.exports = _setPrototypeOf;

/***/ }),

/***/ 5957:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getPrototypeOf = __webpack_require__(9754);

var setPrototypeOf = __webpack_require__(9489);

var isNativeFunction = __webpack_require__(430);

var construct = __webpack_require__(9100);

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return construct(Class, arguments, getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

module.exports = _wrapNativeSuper;

/***/ }),

/***/ 7757:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(5666);


/***/ }),

/***/ 3774:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DQ": () => /* binding */ HTMLElement_,
/* harmony export */   "JJ": () => /* binding */ MediaSource_,
/* harmony export */   "cX": () => /* binding */ READY_STATES,
/* harmony export */   "w": () => /* binding */ VTTCue_
/* harmony export */ });
/* harmony import */ var _utils_is_null_or_undefined__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1946);
/* harmony import */ var _is_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2203);
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/* eslint-disable @typescript-eslint/no-unsafe-assignment */

/* eslint-disable @typescript-eslint/no-unsafe-member-access */

/**
 * Shortcut to the global browser object `window`. Set to an empty object in
 * non-browser platforms
 */

var win = _is_node__WEBPACK_IMPORTED_MODULE_0__/* .default */ .Z ? {} : window;
/** Browser implementation of an HTMLElement. */

var HTMLElement_ = win.HTMLElement;
/** TextTrack cue constructor, as implemented by the browser. */

var VTTCue_ = !(0,_utils_is_null_or_undefined__WEBPACK_IMPORTED_MODULE_1__/* .default */ .Z)(win.VTTCue) ? win.VTTCue : win.TextTrackCue;
/** MediaSource implementation, including vendored implementations. */

var MediaSource_ = !(0,_utils_is_null_or_undefined__WEBPACK_IMPORTED_MODULE_1__/* .default */ .Z)(win.MediaSource) ? win.MediaSource : !(0,_utils_is_null_or_undefined__WEBPACK_IMPORTED_MODULE_1__/* .default */ .Z)(win.MozMediaSource) ? win.MozMediaSource : !(0,_utils_is_null_or_undefined__WEBPACK_IMPORTED_MODULE_1__/* .default */ .Z)(win.WebKitMediaSource) ? win.WebKitMediaSource : win.MSMediaSource;
/* eslint-enable @typescript-eslint/no-unsafe-assignment */

/* eslint-disable @typescript-eslint/no-unsafe-member-access */

/** List an HTMLMediaElement's possible values for its readyState property. */

var READY_STATES = {
  HAVE_NOTHING: 0,
  HAVE_METADATA: 1,
  HAVE_CURRENT_DATA: 2,
  HAVE_FUTURE_DATA: 3,
  HAVE_ENOUGH_DATA: 4
};


/***/ }),

/***/ 3666:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "kD": () => /* binding */ isEdgeChromium,
/* harmony export */   "fq": () => /* binding */ isIE11,
/* harmony export */   "YM": () => /* binding */ isIEOrEdge,
/* harmony export */   "vU": () => /* binding */ isFirefox,
/* harmony export */   "G6": () => /* binding */ isSafari,
/* harmony export */   "SB": () => /* binding */ isSafariMobile,
/* harmony export */   "op": () => /* binding */ isSamsungBrowser
/* harmony export */ });
/* harmony import */ var _is_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2203);
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var _a;

 // true on IE11
// false on Edge and other IEs/browsers.

/* eslint-disable @typescript-eslint/strict-boolean-expressions */

/* eslint-disable @typescript-eslint/no-unsafe-member-access */

var isIE11 = !_is_node__WEBPACK_IMPORTED_MODULE_0__/* .default */ .Z && !!window.MSInputMethodContext && !!document.documentMode;
/* eslint-enable @typescript-eslint/strict-boolean-expressions */

/* eslint-enable @typescript-eslint/no-unsafe-member-access */
// true for IE / Edge

var isIEOrEdge = _is_node__WEBPACK_IMPORTED_MODULE_0__/* .default */ .Z ? false : navigator.appName === "Microsoft Internet Explorer" || navigator.appName === "Netscape" && /(Trident|Edge)\//.test(navigator.userAgent);
var isEdgeChromium = !_is_node__WEBPACK_IMPORTED_MODULE_0__/* .default */ .Z && navigator.userAgent.toLowerCase().indexOf("edg/") !== -1;
var isFirefox = !_is_node__WEBPACK_IMPORTED_MODULE_0__/* .default */ .Z && navigator.userAgent.toLowerCase().indexOf("firefox") !== -1;
var isSamsungBrowser = !_is_node__WEBPACK_IMPORTED_MODULE_0__/* .default */ .Z && /SamsungBrowser/.test(navigator.userAgent);
/* eslint-disable @typescript-eslint/no-unsafe-member-access */

/* eslint-disable @typescript-eslint/no-unsafe-call */

var isSafari = !_is_node__WEBPACK_IMPORTED_MODULE_0__/* .default */ .Z && (Object.prototype.toString.call(window.HTMLElement).indexOf("Constructor") >= 0 || ((_a = window.safari) === null || _a === void 0 ? void 0 : _a.pushNotification.toString()) === "[object SafariRemoteNotification]");
/* eslint-enable @typescript-eslint/no-unsafe-member-access */

/* eslint-enable @typescript-eslint/no-unsafe-call */

var isSafariMobile = !_is_node__WEBPACK_IMPORTED_MODULE_0__/* .default */ .Z && typeof navigator.platform === "string" && /iPad|iPhone|iPod/.test(navigator.platform);


/***/ }),

/***/ 5767:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ clearElementSrc
/* harmony export */ });
/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3887);
/* harmony import */ var _browser_detection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3666);
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Clear element's src attribute.
 * @param {HTMLMediaElement} element
 */

function clearElementSrc(element) {
  // On Firefox, we also have to make sure the textTracks elements are both
  // disabled and removed from the DOM.
  // If we do not do that, we may be left with displayed text tracks on the
  // screen
  if (_browser_detection__WEBPACK_IMPORTED_MODULE_0__/* .isFirefox */ .vU) {
    var textTracks = element.textTracks;

    for (var i = 0; i < textTracks.length; i++) {
      textTracks[i].mode = "disabled";
    }

    if (element.hasChildNodes()) {
      var childNodes = element.childNodes;

      for (var j = childNodes.length - 1; j >= 0; j--) {
        if (childNodes[j].nodeName === "track") {
          try {
            element.removeChild(childNodes[j]);
          } catch (err) {
            _log__WEBPACK_IMPORTED_MODULE_1__/* .default.warn */ .Z.warn("Compat: Could not remove text track child from element.");
          }
        }
      }
    }
  }

  element.src = ""; // On IE11, element.src = "" is not sufficient as it
  // does not clear properly the current MediaKey Session.
  // Microsoft recommended to use element.removeAttr("src").

  element.removeAttribute("src");
}

/***/ }),

/***/ 6139:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "N": () => /* binding */ requestMediaKeySystemAccess,
  "Y": () => /* binding */ setMediaKeys
});

// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/throwError.js
var throwError = __webpack_require__(4944);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/of.js
var of = __webpack_require__(8170);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/defer.js
var defer = __webpack_require__(1410);
// EXTERNAL MODULE: ./src/errors/media_error.ts
var media_error = __webpack_require__(3714);
// EXTERNAL MODULE: ./src/utils/cast_to_observable.ts
var cast_to_observable = __webpack_require__(8117);
// EXTERNAL MODULE: ./src/compat/browser_detection.ts
var browser_detection = __webpack_require__(3666);
// EXTERNAL MODULE: ./src/compat/is_node.ts
var is_node = __webpack_require__(2203);
// EXTERNAL MODULE: ./src/compat/should_favour_custom_safari_EME.ts
var should_favour_custom_safari_EME = __webpack_require__(5059);
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/createClass.js
var createClass = __webpack_require__(3913);
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);
// EXTERNAL MODULE: ./src/utils/promise.ts
var promise = __webpack_require__(9589);
;// CONCATENATED MODULE: ./src/compat/eme/custom_key_system_access.ts


/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Simple implementation of the MediaKeySystemAccess EME API.
 *
 * All needed arguments are given to the constructor
 * @class CustomMediaKeySystemAccess
 */

var CustomMediaKeySystemAccess = /*#__PURE__*/function () {
  /**
   * @param {string} _keyType - type of key system (e.g. "widevine" or
   * "com.widevine.alpha").
   * @param {Object} _mediaKeys - MediaKeys implementation
   * @param {Object} _configuration - Configuration accepted for this
   * MediaKeySystemAccess.
   */
  function CustomMediaKeySystemAccess(_keyType, _mediaKeys, _configuration) {
    this._keyType = _keyType;
    this._mediaKeys = _mediaKeys;
    this._configuration = _configuration;
  }
  /**
   * @returns {string} - current key system type (e.g. "widevine" or
   * "com.widevine.alpha").
   */


  var _proto = CustomMediaKeySystemAccess.prototype;

  /**
   * @returns {Promise.<Object>} - Promise wrapping the MediaKeys for this
   * MediaKeySystemAccess. Never rejects.
   */
  _proto.createMediaKeys = function createMediaKeys() {
    var _this = this;

    return new promise/* default */.Z(function (res) {
      return res(_this._mediaKeys);
    });
  }
  /**
   * @returns {Object} - Configuration accepted for this MediaKeySystemAccess.
   */
  ;

  _proto.getConfiguration = function getConfiguration() {
    return this._configuration;
  };

  createClass_default()(CustomMediaKeySystemAccess, [{
    key: "keySystem",
    get: function get() {
      return this._keyType;
    }
  }]);

  return CustomMediaKeySystemAccess;
}();


// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/inheritsLoose.js
var inheritsLoose = __webpack_require__(5354);
var inheritsLoose_default = /*#__PURE__*/__webpack_require__.n(inheritsLoose);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/Subject.js
var Subject = __webpack_require__(211);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/merge.js
var merge = __webpack_require__(4370);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/takeUntil.js
var takeUntil = __webpack_require__(1558);
// EXTERNAL MODULE: ./src/utils/event_emitter.ts
var event_emitter = __webpack_require__(1959);
// EXTERNAL MODULE: ./src/compat/event_listeners.ts + 4 modules
var event_listeners = __webpack_require__(1473);
;// CONCATENATED MODULE: ./src/compat/eme/custom_media_keys/ms_media_keys_constructor.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var MSMediaKeysConstructor;

if (!is_node/* default */.Z) {
  /* eslint-disable @typescript-eslint/no-unsafe-assignment */

  /* eslint-disable @typescript-eslint/no-unsafe-member-access */
  var _window = window,
      MSMediaKeys = _window.MSMediaKeys;

  if (MSMediaKeys !== undefined && MSMediaKeys.prototype !== undefined && typeof MSMediaKeys.isTypeSupported === "function" && typeof MSMediaKeys.prototype.createSession === "function") {
    MSMediaKeysConstructor = MSMediaKeys;
  }
  /* eslint-enable @typescript-eslint/no-unsafe-assignment */

  /* eslint-enable @typescript-eslint/no-unsafe-member-access */

}


;// CONCATENATED MODULE: ./src/compat/eme/custom_media_keys/ie11_media_keys.ts



/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */







var IE11MediaKeySession = /*#__PURE__*/function (_EventEmitter) {
  inheritsLoose_default()(IE11MediaKeySession, _EventEmitter);

  function IE11MediaKeySession(mk) {
    var _this;

    _this = _EventEmitter.call(this) || this;
    _this.expiration = NaN;
    _this.keyStatuses = new Map();
    _this._mk = mk;
    _this._closeSession$ = new Subject/* Subject */.xQ();
    _this.closed = new promise/* default */.Z(function (resolve) {
      _this._closeSession$.subscribe(resolve);
    });

    _this.update = function (license) {
      return new promise/* default */.Z(function (resolve, reject) {
        if (_this._ss === undefined) {
          return reject("MediaKeySession not set.");
        }

        try {
          /* eslint-disable @typescript-eslint/no-unsafe-call */

          /* eslint-disable @typescript-eslint/no-unsafe-member-access */
          resolve(_this._ss.update(license,
          /* sessionId */
          ""));
          /* eslint-enable @typescript-eslint/no-unsafe-call */

          /* eslint-enable @typescript-eslint/no-unsafe-member-access */
        } catch (err) {
          reject(err);
        }
      });
    };

    return _this;
  }

  var _proto = IE11MediaKeySession.prototype;

  _proto.generateRequest = function generateRequest(_initDataType, initData) {
    var _this2 = this;

    return new promise/* default */.Z(function (resolve) {
      /* eslint-disable @typescript-eslint/no-unsafe-call */

      /* eslint-disable @typescript-eslint/no-unsafe-member-access */
      _this2._ss = _this2._mk.createSession("video/mp4", initData);
      /* eslint-enable @typescript-eslint/no-unsafe-call */

      /* eslint-enable @typescript-eslint/no-unsafe-member-access */

      (0,merge/* merge */.T)(event_listeners/* onKeyMessage$ */.GJ(_this2._ss), event_listeners/* onKeyAdded$ */.GV(_this2._ss), event_listeners/* onKeyError$ */.Xe(_this2._ss)).pipe((0,takeUntil/* takeUntil */.R)(_this2._closeSession$)).subscribe(function (evt) {
        return _this2.trigger(evt.type, evt);
      });
      resolve();
    });
  };

  _proto.close = function close() {
    var _this3 = this;

    return new promise/* default */.Z(function (resolve) {
      if (_this3._ss != null) {
        /* eslint-disable @typescript-eslint/no-floating-promises */
        _this3._ss.close();
        /* eslint-enable @typescript-eslint/no-floating-promises */


        _this3._ss = undefined;
      }

      _this3._closeSession$.next();

      _this3._closeSession$.complete();

      resolve();
    });
  };

  _proto.load = function load() {
    return promise/* default.resolve */.Z.resolve(false);
  };

  _proto.remove = function remove() {
    return promise/* default.resolve */.Z.resolve();
  };

  createClass_default()(IE11MediaKeySession, [{
    key: "sessionId",
    get: function get() {
      var _a, _b;

      return (_b = (_a = this._ss) === null || _a === void 0 ? void 0 : _a.sessionId) !== null && _b !== void 0 ? _b : "";
    }
  }]);

  return IE11MediaKeySession;
}(event_emitter/* default */.Z);

var IE11CustomMediaKeys = /*#__PURE__*/function () {
  function IE11CustomMediaKeys(keyType) {
    if (MSMediaKeysConstructor === undefined) {
      throw new Error("No MSMediaKeys API.");
    }

    this._mediaKeys = new MSMediaKeysConstructor(keyType);
  }

  var _proto2 = IE11CustomMediaKeys.prototype;

  _proto2._setVideo = function _setVideo(videoElement) {
    this._videoElement = videoElement;
    /* eslint-disable @typescript-eslint/no-unsafe-member-access */

    /* eslint-disable @typescript-eslint/no-unsafe-call */

    if (this._videoElement.msSetMediaKeys !== undefined) {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-return
      return this._videoElement.msSetMediaKeys(this._mediaKeys);
    }
    /* eslint-enable @typescript-eslint/no-unsafe-member-access */

    /* eslint-enable @typescript-eslint/no-unsafe-call */

  };

  _proto2.createSession = function createSession()
  /* sessionType */
  {
    if (this._videoElement === undefined || this._mediaKeys === undefined) {
      throw new Error("Video not attached to the MediaKeys");
    }

    return new IE11MediaKeySession(this._mediaKeys);
  };

  _proto2.setServerCertificate = function setServerCertificate() {
    throw new Error("Server certificate is not implemented in your browser");
  };

  return IE11CustomMediaKeys;
}();

function getIE11MediaKeysCallbacks() {
  var isTypeSupported = function isTypeSupported(keySystem, type) {
    if (MSMediaKeysConstructor === undefined) {
      throw new Error("No MSMediaKeys API.");
    }

    if (type !== undefined) {
      return MSMediaKeysConstructor.isTypeSupported(keySystem, type);
    }

    return MSMediaKeysConstructor.isTypeSupported(keySystem);
  };

  var createCustomMediaKeys = function createCustomMediaKeys(keyType) {
    return new IE11CustomMediaKeys(keyType);
  };

  var setMediaKeys = function setMediaKeys(elt, mediaKeys) {
    if (mediaKeys === null) {
      // msSetMediaKeys only accepts native MSMediaKeys as argument.
      // Calling it with null or undefined will raise an exception.
      // There is no way to unset the mediakeys in that case, so return here.
      return;
    }

    if (!(mediaKeys instanceof IE11CustomMediaKeys)) {
      throw new Error("Custom setMediaKeys is supposed to be called " + "with IE11 custom MediaKeys.");
    }

    return mediaKeys._setVideo(elt);
  };

  return {
    isTypeSupported: isTypeSupported,
    createCustomMediaKeys: createCustomMediaKeys,
    setMediaKeys: setMediaKeys
  };
}

;// CONCATENATED MODULE: ./src/compat/eme/custom_media_keys/moz_media_keys_constructor.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var MozMediaKeysConstructor;

if (!is_node/* default */.Z) {
  /* eslint-disable @typescript-eslint/no-unsafe-assignment */

  /* eslint-disable @typescript-eslint/no-unsafe-member-access */
  var moz_media_keys_constructor_window = window,
      MozMediaKeys = moz_media_keys_constructor_window.MozMediaKeys;

  if (MozMediaKeys !== undefined && MozMediaKeys.prototype !== undefined && typeof MozMediaKeys.isTypeSupported === "function" && typeof MozMediaKeys.prototype.createSession === "function") {
    MozMediaKeysConstructor = MozMediaKeys;
  }
  /* eslint-enable @typescript-eslint/no-unsafe-assignment */

  /* eslint-enable @typescript-eslint/no-unsafe-member-access */

}


function getMozMediaKeysCallbacks() {
  var isTypeSupported = function isTypeSupported(keySystem, type) {
    if (MozMediaKeysConstructor === undefined) {
      throw new Error("No MozMediaKeys API.");
    }

    if (type !== undefined) {
      return MozMediaKeysConstructor.isTypeSupported(keySystem, type);
    }

    return MozMediaKeysConstructor.isTypeSupported(keySystem);
  };

  var createCustomMediaKeys = function createCustomMediaKeys(keyType) {
    if (MozMediaKeysConstructor === undefined) {
      throw new Error("No MozMediaKeys API.");
    }

    return new MozMediaKeysConstructor(keyType);
  };

  var setMediaKeys = function setMediaKeys(elt, mediaKeys) {
    /* eslint-disable @typescript-eslint/no-unsafe-return */

    /* eslint-disable @typescript-eslint/no-unsafe-member-access */

    /* eslint-disable @typescript-eslint/no-unsafe-call */
    if (elt.mozSetMediaKeys === undefined || typeof elt.mozSetMediaKeys !== "function") {
      throw new Error("Can't set video on MozMediaKeys.");
    }

    return elt.mozSetMediaKeys(mediaKeys);
    /* eslint-enable @typescript-eslint/no-unsafe-return */

    /* eslint-enable @typescript-eslint/no-unsafe-member-access */

    /* eslint-enable @typescript-eslint/no-unsafe-call */
  };

  return {
    isTypeSupported: isTypeSupported,
    createCustomMediaKeys: createCustomMediaKeys,
    setMediaKeys: setMediaKeys
  };
}
// EXTERNAL MODULE: ./src/utils/base64.ts
var base64 = __webpack_require__(9689);
// EXTERNAL MODULE: ./src/utils/string_parsing.ts
var string_parsing = __webpack_require__(3635);
;// CONCATENATED MODULE: ./src/compat/eme/custom_media_keys/old_webkit_media_keys.ts


/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */







/**
 * Returns true if the given media element has old webkit methods
 * corresponding to the IOldWebkitHTMLMediaElement interface.
 * @param {HTMLMediaElement} element
 * @returns {Boolean}
 */

function isOldWebkitMediaElement(element) {
  return typeof element.webkitGenerateKeyRequest === "function";
}

var OldWebkitMediaKeySession = /*#__PURE__*/function (_EventEmitter) {
  inheritsLoose_default()(OldWebkitMediaKeySession, _EventEmitter);

  function OldWebkitMediaKeySession(mediaElement, keySystem) {
    var _this;

    _this = _EventEmitter.call(this) || this;
    _this._closeSession$ = new Subject/* Subject */.xQ();
    _this._vid = mediaElement;
    _this._key = keySystem;
    _this.sessionId = "";
    _this.closed = new promise/* default */.Z(function (resolve) {
      _this._closeSession$.subscribe(resolve);
    });
    _this.keyStatuses = new Map();
    _this.expiration = NaN;
    (0,merge/* merge */.T)(event_listeners/* onKeyMessage$ */.GJ(mediaElement), event_listeners/* onKeyAdded$ */.GV(mediaElement), event_listeners/* onKeyError$ */.Xe(mediaElement)).pipe((0,takeUntil/* takeUntil */.R)(_this._closeSession$)).subscribe(function (evt) {
      return _this.trigger(evt.type, evt);
    });

    _this.update = function (license) {
      return new promise/* default */.Z(function (resolve, reject) {
        try {
          if (_this._key.indexOf("clearkey") >= 0) {
            var licenseTypedArray = license instanceof ArrayBuffer ? new Uint8Array(license) : license; // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment

            var json = JSON.parse((0,string_parsing/* utf8ToStr */.uR)(licenseTypedArray));
            /* eslint-disable @typescript-eslint/no-unsafe-member-access */

            var key = (0,base64/* base64ToBytes */.K)(json.keys[0].k);
            var kid = (0,base64/* base64ToBytes */.K)(json.keys[0].kid);
            /* eslint-enable @typescript-eslint/no-unsafe-member-access */

            resolve(_this._vid.webkitAddKey(_this._key, key, kid,
            /* sessionId */
            ""));
          } else {
            resolve(_this._vid.webkitAddKey(_this._key, license, null,
            /* sessionId */
            ""));
          }
        } catch (err) {
          reject(err);
        }
      });
    };

    return _this;
  }

  var _proto = OldWebkitMediaKeySession.prototype;

  _proto.generateRequest = function generateRequest(_initDataType, initData) {
    var _this2 = this;

    return new promise/* default */.Z(function (resolve) {
      _this2._vid.webkitGenerateKeyRequest(_this2._key, initData);

      resolve();
    });
  };

  _proto.close = function close() {
    var _this3 = this;

    return new promise/* default */.Z(function (resolve) {
      _this3._closeSession$.next();

      _this3._closeSession$.complete();

      resolve();
    });
  };

  _proto.load = function load() {
    return promise/* default.resolve */.Z.resolve(false);
  };

  _proto.remove = function remove() {
    return promise/* default.resolve */.Z.resolve();
  };

  return OldWebkitMediaKeySession;
}(event_emitter/* default */.Z);

var OldWebKitCustomMediaKeys = /*#__PURE__*/function () {
  function OldWebKitCustomMediaKeys(keySystem) {
    this._keySystem = keySystem;
  }

  var _proto2 = OldWebKitCustomMediaKeys.prototype;

  _proto2._setVideo = function _setVideo(videoElement) {
    if (!isOldWebkitMediaElement(videoElement)) {
      throw new Error("Video not attached to the MediaKeys");
    }

    this._videoElement = videoElement;
  };

  _proto2.createSession = function createSession()
  /* sessionType */
  {
    if (this._videoElement == null) {
      throw new Error("Video not attached to the MediaKeys");
    }

    return new OldWebkitMediaKeySession(this._videoElement, this._keySystem);
  };

  _proto2.setServerCertificate = function setServerCertificate() {
    throw new Error("Server certificate is not implemented in your browser");
  };

  return OldWebKitCustomMediaKeys;
}();

function getOldWebKitMediaKeysCallbacks() {
  var isTypeSupported = function isTypeSupported(keyType) {
    // get any <video> element from the DOM or create one
    // and try the `canPlayType` method
    var videoElement = document.querySelector("video");

    if (videoElement == null) {
      videoElement = document.createElement("video");
    }
    /* eslint-disable @typescript-eslint/unbound-method */


    if (videoElement != null && typeof videoElement.canPlayType === "function") {
      /* eslint-enable @typescript-eslint/unbound-method */

      /* eslint-disable @typescript-eslint/no-unsafe-member-access */

      /* eslint-disable @typescript-eslint/strict-boolean-expressions */

      /* eslint-disable @typescript-eslint/no-unsafe-call */
      return !!videoElement.canPlayType("video/mp4", keyType);
      /* eslint-enable @typescript-eslint/no-unsafe-member-access */

      /* eslint-enable @typescript-eslint/strict-boolean-expressions */

      /* eslint-enable @typescript-eslint/no-unsafe-call */
    } else {
      return false;
    }
  };

  var createCustomMediaKeys = function createCustomMediaKeys(keyType) {
    return new OldWebKitCustomMediaKeys(keyType);
  };

  var setMediaKeys = function setMediaKeys(elt, mediaKeys) {
    if (mediaKeys === null) {
      return;
    }

    if (!(mediaKeys instanceof OldWebKitCustomMediaKeys)) {
      throw new Error("Custom setMediaKeys is supposed to be called " + "with old webkit custom MediaKeys.");
    }

    return mediaKeys._setVideo(elt);
  };

  return {
    isTypeSupported: isTypeSupported,
    createCustomMediaKeys: createCustomMediaKeys,
    setMediaKeys: setMediaKeys
  };
}
// EXTERNAL MODULE: ./src/utils/byte_parsing.ts
var byte_parsing = __webpack_require__(6968);
;// CONCATENATED MODULE: ./src/compat/eme/get_webkit_fairplay_initdata.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Create formatted fairplay initdata for WebKit createSession.
 * Layout is :
 * [initData][4 byte: idLength][idLength byte: id]
 * [4 byte:certLength][certLength byte: cert]
 * @param {Uint8Array} initData
 * @param {Uint8Array} serverCertificate
 * @returns {Uint8Array}
 */

function getWebKitFairPlayInitData(initDataBytes, serverCertificateBytes) {
  var initData = initDataBytes instanceof Uint8Array ? initDataBytes : new Uint8Array(initDataBytes);
  var serverCertificate = serverCertificateBytes instanceof Uint8Array ? serverCertificateBytes : new Uint8Array(serverCertificateBytes);
  var length = (0,byte_parsing/* le4toi */.dN)(initData, 0);

  if (length + 4 !== initData.length) {
    throw new Error("Unsupported WebKit initData.");
  }

  var initDataUri = (0,string_parsing/* utf16LEToStr */.wV)(initData);
  var skdIndexInInitData = initDataUri.indexOf("skd://");
  var contentIdStr = skdIndexInInitData > -1 ? initDataUri.substring(skdIndexInInitData + 6) : initDataUri;
  var id = (0,string_parsing/* strToUtf16LE */.TZ)(contentIdStr);
  var offset = 0;
  var res = new Uint8Array(initData.byteLength
  /* id length */
  + 4 + id.byteLength
  /* certificate length */
  + 4 + serverCertificate.byteLength);
  res.set(initData);
  offset += initData.length;
  res.set((0,byte_parsing/* itole4 */.O_)(id.byteLength), offset);
  offset += 4;
  res.set(id, offset);
  offset += id.byteLength;
  res.set((0,byte_parsing/* itole4 */.O_)(serverCertificate.byteLength), offset);
  offset += 4;
  res.set(serverCertificate, offset);
  return res;
}
// EXTERNAL MODULE: ./src/compat/eme/custom_media_keys/webkit_media_keys_constructor.ts
var webkit_media_keys_constructor = __webpack_require__(158);
;// CONCATENATED MODULE: ./src/compat/eme/custom_media_keys/webkit_media_keys.ts



/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */







/**
 * Check if keyType is for fairplay DRM
 * @param {string} keyType
 * @returns {boolean}
 */

function isFairplayKeyType(keyType) {
  return keyType === "com.apple.fps.1_0" || keyType === "com.apple.fps.2_0";
}
/**
 * Set media keys on video element using native HTMLMediaElement
 * setMediaKeys from WebKit.
 * @param {HTMLMediaElement} videoElement
 * @param {Object|null} mediaKeys
 */


function setWebKitMediaKeys(videoElement, mediaKeys) {
  /* eslint-disable @typescript-eslint/no-unsafe-member-access */
  if (videoElement.webkitSetMediaKeys === undefined) {
    throw new Error("No webKitMediaKeys API.");
  }
  /* eslint-disable @typescript-eslint/no-unsafe-return */
  // eslint-disable-next-line @typescript-eslint/no-unsafe-call


  return videoElement.webkitSetMediaKeys(mediaKeys);
  /* eslint-enable @typescript-eslint/no-unsafe-return */

  /* eslint-enable @typescript-eslint/no-unsafe-member-access */
}
/**
 * On Safari browsers (>= 9), there are specific webkit prefixed APIs for cyphered
 * content playback. Standard EME APIs are therefore available since Safari 12.1, but they
 * don't allow to play fairplay cyphered content.
 *
 * This class implements a standard EME API polyfill that wraps webkit prefixed Safari
 * EME custom APIs.
 */


var WebkitMediaKeySession = /*#__PURE__*/function (_EventEmitter) {
  inheritsLoose_default()(WebkitMediaKeySession, _EventEmitter);

  /**
   * @param {HTMLMediaElement} mediaElement
   * @param {string} keyType
   * @param {Uint8Array | undefined} serverCertificate
   */
  function WebkitMediaKeySession(mediaElement, keyType, serverCertificate) {
    var _this;

    _this = _EventEmitter.call(this) || this;
    _this._serverCertificate = serverCertificate;
    _this._closeSession$ = new Subject/* Subject */.xQ();
    _this._videoElement = mediaElement;
    _this._keyType = keyType;
    _this.closed = new promise/* default */.Z(function (resolve) {
      _this._closeSession$.subscribe(resolve);
    });
    _this.keyStatuses = new Map();
    _this.expiration = NaN;

    _this.update = function (license) {
      return new promise/* default */.Z(function (resolve, reject) {
        /* eslint-disable @typescript-eslint/no-unsafe-member-access */
        if (_this._nativeSession === undefined || _this._nativeSession.update === undefined || typeof _this._nativeSession.update !== "function") {
          return reject("Unavailable WebKit key session.");
        }

        try {
          /* eslint-disable @typescript-eslint/no-unsafe-member-access */
          // eslint-disable-next-line @typescript-eslint/no-unsafe-call
          resolve(_this._nativeSession.update(license));
          /* eslint-enable @typescript-eslint/no-unsafe-member-access */
        } catch (err) {
          reject(err);
        }
        /* eslint-enable @typescript-eslint/no-unsafe-member-access */

      });
    };

    return _this;
  }

  var _proto = WebkitMediaKeySession.prototype;

  _proto.listenEvent = function listenEvent(session) {
    var _this2 = this;

    (0,merge/* merge */.T)(event_listeners/* onKeyMessage$ */.GJ(session), event_listeners/* onKeyAdded$ */.GV(session), event_listeners/* onKeyError$ */.Xe(session)).pipe((0,takeUntil/* takeUntil */.R)(this._closeSession$)).subscribe(function (evt) {
      _this2.trigger(evt.type, evt);
    });
  };

  _proto.generateRequest = function generateRequest(_initDataType, initData) {
    var _this3 = this;

    return new promise/* default */.Z(function (resolve) {
      /* eslint-disable @typescript-eslint/no-unsafe-member-access */
      if (_this3._videoElement.webkitKeys === undefined || _this3._videoElement.webkitKeys.createSession === undefined) {
        throw new Error("No WebKitMediaKeys API.");
      }
      /* eslint-enable @typescript-eslint/no-unsafe-member-access */


      var formattedInitData;

      if (isFairplayKeyType(_this3._keyType)) {
        if (_this3._serverCertificate === undefined) {
          throw new Error("A server certificate is needed for creating fairplay session.");
        }

        formattedInitData = getWebKitFairPlayInitData(initData, _this3._serverCertificate);
      } else {
        formattedInitData = initData;
      }
      /* eslint-disable @typescript-eslint/no-unsafe-member-access */

      /* eslint-disable @typescript-eslint/no-unsafe-assignment */

      /* eslint-disable @typescript-eslint/no-unsafe-call */


      var keySession = _this3._videoElement.webkitKeys.createSession("video/mp4", formattedInitData);
      /* eslint-enable @typescript-eslint/no-unsafe-member-access */

      /* eslint-enable @typescript-eslint/no-unsafe-assignment */

      /* eslint-enable @typescript-eslint/no-unsafe-call */


      if (keySession === undefined || keySession === null) {
        throw new Error("Impossible to get the key sessions");
      }

      _this3.listenEvent(keySession); // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment


      _this3._nativeSession = keySession;
      resolve();
    });
  };

  _proto.close = function close() {
    var _this4 = this;

    return new promise/* default */.Z(function (resolve, reject) {
      _this4._closeSession$.next();

      _this4._closeSession$.complete();

      if (_this4._nativeSession === undefined) {
        reject("No session to close.");
      }
      /* eslint-disable @typescript-eslint/no-unsafe-member-access */

      /* eslint-disable @typescript-eslint/no-unsafe-call */


      _this4._nativeSession.close();
      /* eslint-enable @typescript-eslint/no-unsafe-member-access */

      /* eslint-enable @typescript-eslint/no-unsafe-call */


      resolve();
    });
  };

  _proto.load = function load() {
    return promise/* default.resolve */.Z.resolve(false);
  };

  _proto.remove = function remove() {
    return promise/* default.resolve */.Z.resolve();
  };

  createClass_default()(WebkitMediaKeySession, [{
    key: "sessionId",
    get: function get() {
      var _a, _b;
      /* eslint-disable @typescript-eslint/no-unsafe-member-access */

      /* eslint-disable @typescript-eslint/no-unsafe-return */


      return (_b = (_a = this._nativeSession) === null || _a === void 0 ? void 0 : _a.sessionId) !== null && _b !== void 0 ? _b : "";
      /* eslint-enable @typescript-eslint/no-unsafe-member-access */

      /* eslint-enable @typescript-eslint/no-unsafe-return */
    }
  }]);

  return WebkitMediaKeySession;
}(event_emitter/* default */.Z);

var WebKitCustomMediaKeys = /*#__PURE__*/function () {
  function WebKitCustomMediaKeys(keyType) {
    if (webkit_media_keys_constructor/* WebKitMediaKeysConstructor */.t === undefined) {
      throw new Error("No WebKitMediaKeys API.");
    }

    this._keyType = keyType;
    this._mediaKeys = new webkit_media_keys_constructor/* WebKitMediaKeysConstructor */.t(keyType);
  }

  var _proto2 = WebKitCustomMediaKeys.prototype;

  _proto2._setVideo = function _setVideo(videoElement) {
    this._videoElement = videoElement;

    if (this._videoElement === undefined) {
      throw new Error("Video not attached to the MediaKeys");
    }

    return setWebKitMediaKeys(this._videoElement, this._mediaKeys);
  };

  _proto2.createSession = function createSession()
  /* sessionType */
  {
    if (this._videoElement === undefined || this._mediaKeys === undefined) {
      throw new Error("Video not attached to the MediaKeys");
    }

    return new WebkitMediaKeySession(this._videoElement, this._keyType, this._serverCertificate);
  };

  _proto2.setServerCertificate = function setServerCertificate(serverCertificate) {
    this._serverCertificate = serverCertificate;
    return promise/* default.resolve */.Z.resolve();
  };

  return WebKitCustomMediaKeys;
}();

function getWebKitMediaKeysCallbacks() {
  if (webkit_media_keys_constructor/* WebKitMediaKeysConstructor */.t === undefined) {
    throw new Error("No WebKitMediaKeys API.");
  }

  var isTypeSupported = webkit_media_keys_constructor/* WebKitMediaKeysConstructor.isTypeSupported */.t.isTypeSupported;

  var createCustomMediaKeys = function createCustomMediaKeys(keyType) {
    return new WebKitCustomMediaKeys(keyType);
  };

  var setMediaKeys = function setMediaKeys(elt, mediaKeys) {
    if (mediaKeys === null) {
      return setWebKitMediaKeys(elt, mediaKeys);
    }

    if (!(mediaKeys instanceof WebKitCustomMediaKeys)) {
      throw new Error("Custom setMediaKeys is supposed to be called " + "with webkit custom MediaKeys.");
    }

    return mediaKeys._setVideo(elt);
  };

  return {
    isTypeSupported: isTypeSupported,
    createCustomMediaKeys: createCustomMediaKeys,
    setMediaKeys: setMediaKeys
  };
}
;// CONCATENATED MODULE: ./src/compat/eme/custom_media_keys/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */












var requestMediaKeySystemAccess = null;

var _setMediaKeys = function defaultSetMediaKeys(elt, mediaKeys) {
  /* eslint-disable @typescript-eslint/unbound-method */
  if (typeof elt.setMediaKeys === "function") {
    return elt.setMediaKeys(mediaKeys);
  }
  /* eslint-enable @typescript-eslint/unbound-method */

  /* eslint-disable @typescript-eslint/strict-boolean-expressions */

  /* eslint-disable @typescript-eslint/no-unsafe-member-access */

  /* eslint-disable @typescript-eslint/no-unsafe-return */

  /* eslint-disable @typescript-eslint/no-unsafe-call */
  // If we get in the following code, it means that no compat case has been
  // found and no standard setMediaKeys API exists. This case is particulary
  // rare. We will try to call each API with native media keys.


  if (elt.webkitSetMediaKeys) {
    return elt.webkitSetMediaKeys(mediaKeys);
  }

  if (elt.mozSetMediaKeys) {
    return elt.mozSetMediaKeys(mediaKeys);
  }

  if (elt.msSetMediaKeys && mediaKeys !== null) {
    return elt.msSetMediaKeys(mediaKeys);
  }
  /* eslint-enable @typescript-eslint/strict-boolean-expressions */

  /* eslint-enable @typescript-eslint/no-unsafe-member-access */

  /* eslint-enable @typescript-eslint/no-unsafe-return */

  /* eslint-enable @typescript-eslint/no-unsafe-call */

};
/**
 * Since Safari 12.1, EME APIs are available without webkit prefix.
 * However, it seems that since fairplay CDM implementation within the browser is not
 * standard with EME w3c current spec, the requestMediaKeySystemAccess API doesn't resolve
 * positively, even if the drm (fairplay in most cases) is supported.
 *
 * Therefore, we prefer not to use requestMediaKeySystemAccess on Safari when webkit API
 * is available.
 */


if (is_node/* default */.Z || navigator.requestMediaKeySystemAccess != null && !(0,should_favour_custom_safari_EME/* default */.Z)()) {
  requestMediaKeySystemAccess = function requestMediaKeySystemAccess(a, b) {
    return (0,cast_to_observable/* default */.Z)(navigator.requestMediaKeySystemAccess(a, b));
  };
} else {
  var isTypeSupported;
  var createCustomMediaKeys; // This is for Chrome with unprefixed EME api

  if (isOldWebkitMediaElement(HTMLVideoElement.prototype)) {
    var callbacks = getOldWebKitMediaKeysCallbacks();
    isTypeSupported = callbacks.isTypeSupported;
    createCustomMediaKeys = callbacks.createCustomMediaKeys;
    _setMediaKeys = callbacks.setMediaKeys; // This is for WebKit with prefixed EME api
  } else if (webkit_media_keys_constructor/* WebKitMediaKeysConstructor */.t !== undefined) {
    var _callbacks = getWebKitMediaKeysCallbacks();

    isTypeSupported = _callbacks.isTypeSupported;
    createCustomMediaKeys = _callbacks.createCustomMediaKeys;
    _setMediaKeys = _callbacks.setMediaKeys;
  } else if (browser_detection/* isIE11 */.fq && MSMediaKeysConstructor !== undefined) {
    var _callbacks2 = getIE11MediaKeysCallbacks();

    isTypeSupported = _callbacks2.isTypeSupported;
    createCustomMediaKeys = _callbacks2.createCustomMediaKeys;
    _setMediaKeys = _callbacks2.setMediaKeys;
  } else if (MozMediaKeysConstructor !== undefined) {
    var _callbacks3 = getMozMediaKeysCallbacks();

    isTypeSupported = _callbacks3.isTypeSupported;
    createCustomMediaKeys = _callbacks3.createCustomMediaKeys;
    _setMediaKeys = _callbacks3.setMediaKeys;
  } else {
    /* eslint-disable @typescript-eslint/no-unsafe-assignment */

    /* eslint-disable @typescript-eslint/no-unsafe-member-access */

    /* eslint-disable @typescript-eslint/no-unsafe-return */
    var custom_media_keys_window = window,
        MediaKeys = custom_media_keys_window.MediaKeys;

    var checkForStandardMediaKeys = function checkForStandardMediaKeys() {
      if (MediaKeys === undefined) {
        throw new media_error/* default */.Z("MEDIA_KEYS_NOT_SUPPORTED", "No `MediaKeys` implementation found " + "in the current browser.");
      }

      if (MediaKeys.isTypeSupported === undefined) {
        var message = "This browser seems to be unable to play encrypted contents " + "currently. Note: Some browsers do not allow decryption " + "in some situations, like when not using HTTPS.";
        throw new Error(message);
      }
    };

    isTypeSupported = function isTypeSupported(keyType) {
      checkForStandardMediaKeys();
      /* eslint-disable-next-line @typescript-eslint/no-unsafe-call */

      return MediaKeys.isTypeSupported(keyType);
    };

    createCustomMediaKeys = function createCustomMediaKeys(keyType) {
      checkForStandardMediaKeys();
      /* eslint-disable-next-line @typescript-eslint/no-unsafe-call */

      return new MediaKeys(keyType);
    };
    /* eslint-enable @typescript-eslint/no-unsafe-assignment */

    /* eslint-enable @typescript-eslint/no-unsafe-member-access */

    /* eslint-enable @typescript-eslint/no-unsafe-return */

  }

  requestMediaKeySystemAccess = function requestMediaKeySystemAccess(keyType, keySystemConfigurations) {
    // TODO Why TS Do not understand that isTypeSupported exists here?
    if (!isTypeSupported(keyType)) {
      return (0,throwError/* throwError */._)(undefined);
    }

    for (var i = 0; i < keySystemConfigurations.length; i++) {
      var keySystemConfiguration = keySystemConfigurations[i];
      var videoCapabilities = keySystemConfiguration.videoCapabilities,
          audioCapabilities = keySystemConfiguration.audioCapabilities,
          initDataTypes = keySystemConfiguration.initDataTypes,
          distinctiveIdentifier = keySystemConfiguration.distinctiveIdentifier;
      var supported = true;
      supported = supported && (initDataTypes == null || initDataTypes.some(function (idt) {
        return idt === "cenc";
      }));
      supported = supported && distinctiveIdentifier !== "required";

      if (supported) {
        var keySystemConfigurationResponse = {
          videoCapabilities: videoCapabilities,
          audioCapabilities: audioCapabilities,
          initDataTypes: ["cenc"],
          distinctiveIdentifier: "not-allowed",
          persistentState: "required",
          sessionTypes: ["temporary", "persistent-license"]
        }; // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment

        var customMediaKeys = createCustomMediaKeys(keyType);
        return (0,of.of)(new CustomMediaKeySystemAccess(keyType, customMediaKeys, keySystemConfigurationResponse));
      }
    }

    return (0,throwError/* throwError */._)(undefined);
  };
}
/**
 * Set the given MediaKeys on the given HTMLMediaElement.
 * Emits null when done then complete.
 * @param {HTMLMediaElement} elt
 * @param {Object} mediaKeys
 * @returns {Observable}
 */


function setMediaKeys(elt, mediaKeys) {
  return (0,defer/* defer */.P)(function () {
    return (0,cast_to_observable/* default */.Z)(_setMediaKeys(elt, mediaKeys));
  });
}



/***/ }),

/***/ 158:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "t": () => /* binding */ WebKitMediaKeysConstructor
/* harmony export */ });
/* harmony import */ var _is_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2203);
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var WebKitMediaKeysConstructor;

if (!_is_node__WEBPACK_IMPORTED_MODULE_0__/* .default */ .Z) {
  /* eslint-disable @typescript-eslint/no-unsafe-assignment */

  /* eslint-disable @typescript-eslint/no-unsafe-member-access */
  var _window = window,
      WebKitMediaKeys = _window.WebKitMediaKeys;

  if (WebKitMediaKeys !== undefined && typeof WebKitMediaKeys.isTypeSupported === "function" && typeof WebKitMediaKeys.prototype.createSession === "function" && typeof HTMLMediaElement.prototype.webkitSetMediaKeys === "function") {
    WebKitMediaKeysConstructor = WebKitMediaKeys;
  }
  /* eslint-enable @typescript-eslint/no-unsafe-assignment */

  /* eslint-enable @typescript-eslint/no-unsafe-member-access */

}



/***/ }),

/***/ 1473:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "zh": () => /* binding */ isActive,
  "_K": () => /* binding */ isVideoVisible,
  "Oh": () => /* binding */ onEncrypted$,
  "C1": () => /* binding */ onEnded$,
  "Q1": () => /* binding */ onFullscreenChange$,
  "GV": () => /* binding */ onKeyAdded$,
  "Xe": () => /* binding */ onKeyError$,
  "GJ": () => /* binding */ onKeyMessage$,
  "eX": () => /* binding */ onKeyStatusesChange$,
  "K4": () => /* binding */ onLoadedMetadata$,
  "yj": () => /* binding */ onPictureInPictureEvent$,
  "Qt": () => /* binding */ onPlayPause$,
  "gg": () => /* binding */ onRemoveSourceBuffers$,
  "ik": () => /* binding */ onSeeked$,
  "d5": () => /* binding */ onSeeking$,
  "ym": () => /* binding */ onSourceOpen$,
  "UA": () => /* binding */ onTextTrackChanges$,
  "_E": () => /* binding */ onUpdate$,
  "$x": () => /* binding */ videoWidth$
});

// UNUSED EXPORTS: onTimeUpdate$

// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/Observable.js + 3 modules
var Observable = __webpack_require__(4379);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/util/noop.js
var noop = __webpack_require__(3306);
;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/never.js
/** PURE_IMPORTS_START _Observable,_util_noop PURE_IMPORTS_END */


var NEVER = /*@__PURE__*/ new Observable/* Observable */.y(noop/* noop */.Z);
function never() {
    return NEVER;
}
//# sourceMappingURL=never.js.map

// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/fromEvent.js
var fromEvent = __webpack_require__(7027);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/merge.js
var merge = __webpack_require__(4370);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/defer.js
var defer = __webpack_require__(1410);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/of.js
var of = __webpack_require__(8170);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/combineLatest.js
var combineLatest = __webpack_require__(5142);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/interval.js
var interval = __webpack_require__(6564);
// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.js
var tslib_es6 = __webpack_require__(655);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/scheduler/async.js
var scheduler_async = __webpack_require__(964);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/util/isDate.js
var isDate = __webpack_require__(9914);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/Subscriber.js
var Subscriber = __webpack_require__(979);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/Notification.js
var Notification = __webpack_require__(2632);
;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/delay.js
/** PURE_IMPORTS_START tslib,_scheduler_async,_util_isDate,_Subscriber,_Notification PURE_IMPORTS_END */





function delay(delay, scheduler) {
    if (scheduler === void 0) {
        scheduler = scheduler_async/* async */.P;
    }
    var absoluteDelay = (0,isDate/* isDate */.J)(delay);
    var delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(delay);
    return function (source) { return source.lift(new DelayOperator(delayFor, scheduler)); };
}
var DelayOperator = /*@__PURE__*/ (function () {
    function DelayOperator(delay, scheduler) {
        this.delay = delay;
        this.scheduler = scheduler;
    }
    DelayOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));
    };
    return DelayOperator;
}());
var DelaySubscriber = /*@__PURE__*/ (function (_super) {
    tslib_es6/* __extends */.ZT(DelaySubscriber, _super);
    function DelaySubscriber(destination, delay, scheduler) {
        var _this = _super.call(this, destination) || this;
        _this.delay = delay;
        _this.scheduler = scheduler;
        _this.queue = [];
        _this.active = false;
        _this.errored = false;
        return _this;
    }
    DelaySubscriber.dispatch = function (state) {
        var source = state.source;
        var queue = source.queue;
        var scheduler = state.scheduler;
        var destination = state.destination;
        while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {
            queue.shift().notification.observe(destination);
        }
        if (queue.length > 0) {
            var delay_1 = Math.max(0, queue[0].time - scheduler.now());
            this.schedule(state, delay_1);
        }
        else {
            this.unsubscribe();
            source.active = false;
        }
    };
    DelaySubscriber.prototype._schedule = function (scheduler) {
        this.active = true;
        var destination = this.destination;
        destination.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {
            source: this, destination: this.destination, scheduler: scheduler
        }));
    };
    DelaySubscriber.prototype.scheduleNotification = function (notification) {
        if (this.errored === true) {
            return;
        }
        var scheduler = this.scheduler;
        var message = new DelayMessage(scheduler.now() + this.delay, notification);
        this.queue.push(message);
        if (this.active === false) {
            this._schedule(scheduler);
        }
    };
    DelaySubscriber.prototype._next = function (value) {
        this.scheduleNotification(Notification/* Notification.createNext */.P.createNext(value));
    };
    DelaySubscriber.prototype._error = function (err) {
        this.errored = true;
        this.queue = [];
        this.destination.error(err);
        this.unsubscribe();
    };
    DelaySubscriber.prototype._complete = function () {
        this.scheduleNotification(Notification/* Notification.createComplete */.P.createComplete());
        this.unsubscribe();
    };
    return DelaySubscriber;
}(Subscriber/* Subscriber */.L));
var DelayMessage = /*@__PURE__*/ (function () {
    function DelayMessage(time, notification) {
        this.time = time;
        this.notification = notification;
    }
    return DelayMessage;
}());
//# sourceMappingURL=delay.js.map

// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/innerSubscribe.js
var innerSubscribe = __webpack_require__(7604);
;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/throttle.js
/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */


var defaultThrottleConfig = {
    leading: true,
    trailing: false
};
function throttle(durationSelector, config) {
    if (config === void 0) {
        config = defaultThrottleConfig;
    }
    return function (source) { return source.lift(new ThrottleOperator(durationSelector, !!config.leading, !!config.trailing)); };
}
var ThrottleOperator = /*@__PURE__*/ ((/* unused pure expression or super */ null && (function () {
    function ThrottleOperator(durationSelector, leading, trailing) {
        this.durationSelector = durationSelector;
        this.leading = leading;
        this.trailing = trailing;
    }
    ThrottleOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));
    };
    return ThrottleOperator;
}())));
var ThrottleSubscriber = /*@__PURE__*/ (function (_super) {
    tslib_es6/* __extends */.ZT(ThrottleSubscriber, _super);
    function ThrottleSubscriber(destination, durationSelector, _leading, _trailing) {
        var _this = _super.call(this, destination) || this;
        _this.destination = destination;
        _this.durationSelector = durationSelector;
        _this._leading = _leading;
        _this._trailing = _trailing;
        _this._hasValue = false;
        return _this;
    }
    ThrottleSubscriber.prototype._next = function (value) {
        this._hasValue = true;
        this._sendValue = value;
        if (!this._throttled) {
            if (this._leading) {
                this.send();
            }
            else {
                this.throttle(value);
            }
        }
    };
    ThrottleSubscriber.prototype.send = function () {
        var _a = this, _hasValue = _a._hasValue, _sendValue = _a._sendValue;
        if (_hasValue) {
            this.destination.next(_sendValue);
            this.throttle(_sendValue);
        }
        this._hasValue = false;
        this._sendValue = undefined;
    };
    ThrottleSubscriber.prototype.throttle = function (value) {
        var duration = this.tryDurationSelector(value);
        if (!!duration) {
            this.add(this._throttled = (0,innerSubscribe/* innerSubscribe */.ft)(duration, new innerSubscribe/* SimpleInnerSubscriber */.IY(this)));
        }
    };
    ThrottleSubscriber.prototype.tryDurationSelector = function (value) {
        try {
            return this.durationSelector(value);
        }
        catch (err) {
            this.destination.error(err);
            return null;
        }
    };
    ThrottleSubscriber.prototype.throttlingDone = function () {
        var _a = this, _throttled = _a._throttled, _trailing = _a._trailing;
        if (_throttled) {
            _throttled.unsubscribe();
        }
        this._throttled = undefined;
        if (_trailing) {
            this.send();
        }
    };
    ThrottleSubscriber.prototype.notifyNext = function () {
        this.throttlingDone();
    };
    ThrottleSubscriber.prototype.notifyComplete = function () {
        this.throttlingDone();
    };
    return ThrottleSubscriber;
}(innerSubscribe/* SimpleOuterSubscriber */.Ds));
//# sourceMappingURL=throttle.js.map

;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/throttleTime.js
/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async,_throttle PURE_IMPORTS_END */




function throttleTime(duration, scheduler, config) {
    if (scheduler === void 0) {
        scheduler = scheduler_async/* async */.P;
    }
    if (config === void 0) {
        config = defaultThrottleConfig;
    }
    return function (source) { return source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing)); };
}
var ThrottleTimeOperator = /*@__PURE__*/ (function () {
    function ThrottleTimeOperator(duration, scheduler, leading, trailing) {
        this.duration = duration;
        this.scheduler = scheduler;
        this.leading = leading;
        this.trailing = trailing;
    }
    ThrottleTimeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));
    };
    return ThrottleTimeOperator;
}());
var ThrottleTimeSubscriber = /*@__PURE__*/ (function (_super) {
    tslib_es6/* __extends */.ZT(ThrottleTimeSubscriber, _super);
    function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) {
        var _this = _super.call(this, destination) || this;
        _this.duration = duration;
        _this.scheduler = scheduler;
        _this.leading = leading;
        _this.trailing = trailing;
        _this._hasTrailingValue = false;
        _this._trailingValue = null;
        return _this;
    }
    ThrottleTimeSubscriber.prototype._next = function (value) {
        if (this.throttled) {
            if (this.trailing) {
                this._trailingValue = value;
                this._hasTrailingValue = true;
            }
        }
        else {
            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));
            if (this.leading) {
                this.destination.next(value);
            }
            else if (this.trailing) {
                this._trailingValue = value;
                this._hasTrailingValue = true;
            }
        }
    };
    ThrottleTimeSubscriber.prototype._complete = function () {
        if (this._hasTrailingValue) {
            this.destination.next(this._trailingValue);
            this.destination.complete();
        }
        else {
            this.destination.complete();
        }
    };
    ThrottleTimeSubscriber.prototype.clearThrottle = function () {
        var throttled = this.throttled;
        if (throttled) {
            if (this.trailing && this._hasTrailingValue) {
                this.destination.next(this._trailingValue);
                this._trailingValue = null;
                this._hasTrailingValue = false;
            }
            throttled.unsubscribe();
            this.remove(throttled);
            this.throttled = null;
        }
    };
    return ThrottleTimeSubscriber;
}(Subscriber/* Subscriber */.L));
function dispatchNext(arg) {
    var subscriber = arg.subscriber;
    subscriber.clearThrottle();
}
//# sourceMappingURL=throttleTime.js.map

// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/map.js
var map = __webpack_require__(5709);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/startWith.js
var startWith = __webpack_require__(3485);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/distinctUntilChanged.js
var distinctUntilChanged = __webpack_require__(1931);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/switchMap.js
var switchMap = __webpack_require__(6381);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/mapTo.js
var mapTo = __webpack_require__(5602);
// EXTERNAL MODULE: ./src/config.ts
var config = __webpack_require__(944);
// EXTERNAL MODULE: ./src/utils/is_non_empty_string.ts
var is_non_empty_string = __webpack_require__(6923);
// EXTERNAL MODULE: ./src/compat/browser_compatibility_types.ts
var browser_compatibility_types = __webpack_require__(3774);
// EXTERNAL MODULE: ./src/compat/is_node.ts
var is_node = __webpack_require__(2203);
// EXTERNAL MODULE: ./src/compat/should_favour_custom_safari_EME.ts
var should_favour_custom_safari_EME = __webpack_require__(5059);
;// CONCATENATED MODULE: ./src/compat/event_listeners.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This file provides browser-agnostic event listeners under the form of
 * RxJS Observables
 */








var BROWSER_PREFIXES = ["", "webkit", "moz", "ms"];
var INACTIVITY_DELAY = config/* default.INACTIVITY_DELAY */.Z.INACTIVITY_DELAY;
var pixelRatio = is_node/* default */.Z || window.devicePixelRatio == null || window.devicePixelRatio === 0 ? 1 : window.devicePixelRatio;
/**
 * Find the first supported event from the list given.
 * @param {HTMLElement} element
 * @param {string} eventNameSuffix
 * @returns {Boolean}
 */

function isEventSupported(element, eventNameSuffix) {
  var clone = document.createElement(element.tagName);
  var eventName = "on" + eventNameSuffix;

  if (eventName in clone) {
    return true;
  } else {
    clone.setAttribute(eventName, "return;"); // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access

    return typeof clone[eventName] === "function";
  }
}
/**
 * Find the first supported event from the list given.
 * @param {HTMLElement} element
 * @param {Array.<string>} eventNames
 * @returns {string|undefined}
 */


function findSupportedEvent(element, eventNames) {
  return eventNames.filter(function (name) {
    return isEventSupported(element, name);
  })[0];
}
/**
 * @param {Array.<string>} eventNames
 * @param {Array.<string>|undefined} prefixes
 * @returns {Array.<string>}
 */


function eventPrefixed(eventNames, prefixes) {
  return eventNames.reduce(function (parent, name) {
    return parent.concat((prefixes == null ? BROWSER_PREFIXES : prefixes).map(function (p) {
      return p + name;
    }));
  }, []);
}
/**
 * @param {Array.<string>} eventNames
 * @param {Array.<string>|undefined} prefixes
 * @returns {Observable}
 */


function compatibleListener(eventNames, prefixes) {
  var mem;
  var prefixedEvents = eventPrefixed(eventNames, prefixes);
  return function (element) {
    // if the element is a HTMLElement we can detect
    // the supported event, and memoize it in `mem`
    if (element instanceof browser_compatibility_types/* HTMLElement_ */.DQ) {
      if (typeof mem === "undefined") {
        mem = findSupportedEvent(element, prefixedEvents);
      }

      if ((0,is_non_empty_string/* default */.Z)(mem)) {
        return (0,fromEvent/* fromEvent */.R)(element, mem);
      } else {
        if (false) {}

        return NEVER;
      }
    } // otherwise, we need to listen to all the events
    // and merge them into one observable sequence


    return merge/* merge.apply */.T.apply(void 0, prefixedEvents.map(function (eventName) {
      return (0,fromEvent/* fromEvent */.R)(element, eventName);
    }));
  };
}
/**
 * Returns an observable:
 *   - emitting true when the document is visible
 *   - emitting false when the document is hidden
 * @returns {Observable}
 */


function visibilityChange() {
  var prefix;
  var doc = document;

  if (doc.hidden != null) {
    prefix = "";
  } else if (doc.mozHidden != null) {
    prefix = "moz";
  } else if (doc.msHidden != null) {
    prefix = "ms";
  } else if (doc.webkitHidden != null) {
    prefix = "webkit";
  }

  var hidden = (0,is_non_empty_string/* default */.Z)(prefix) ? prefix + "Hidden" : "hidden";
  var visibilityChangeEvent = (0,is_non_empty_string/* default */.Z)(prefix) ? prefix + "visibilitychange" : "visibilitychange";
  return (0,defer/* defer */.P)(function () {
    var isHidden = document[hidden];
    return (0,fromEvent/* fromEvent */.R)(document, visibilityChangeEvent).pipe((0,map/* map */.U)(function () {
      return !document[hidden];
    }), (0,startWith/* startWith */.O)(!isHidden), (0,distinctUntilChanged/* distinctUntilChanged */.x)());
  });
}
/**
 * @returns {Observable}
 */


function videoSizeChange() {
  return (0,fromEvent/* fromEvent */.R)(window, "resize");
}
/**
 * Emit `true` if the page is considered active.
 * `false` when considered inactive.
 * Emit the original value on subscription.
 * @returns {Observable}
 */


function isActive() {
  return visibilityChange().pipe((0,switchMap/* switchMap */.w)(function (x) {
    if (!x) {
      return (0,of.of)(x).pipe(delay(INACTIVITY_DELAY));
    }

    return (0,of.of)(x);
  }));
}
/**
 * Get video width from Picture-in-Picture window
 * @param {HTMLMediaElement} mediaElement
 * @param {Object} pipWindow
 * @returns {number}
 */


function getVideoWidthFromPIPWindow(mediaElement, pipWindow) {
  var width = pipWindow.width,
      height = pipWindow.height;
  var videoRatio = mediaElement.clientHeight / mediaElement.clientWidth;
  var calcWidth = height / videoRatio;
  return Math.min(width, calcWidth);
}
/**
 * Emit when video enters and leaves Picture-In-Picture mode.
 * @param {HTMLMediaElement} mediaElement
 * @returns {Observable}
 */


function onPictureInPictureEvent$(mediaElement) {
  return (0,defer/* defer */.P)(function () {
    /* eslint-disable @typescript-eslint/strict-boolean-expressions */

    /* eslint-disable @typescript-eslint/no-unsafe-member-access */
    if (mediaElement.webkitSupportsPresentationMode && typeof mediaElement.webkitSetPresentationMode === "function") {
      var isWebKitPIPEnabled = mediaElement.webkitPresentationMode === "picture-in-picture";
      return (0,fromEvent/* fromEvent */.R)(mediaElement, "webkitpresentationmodechanged").pipe((0,map/* map */.U)(function () {
        return {
          isEnabled: mediaElement.webkitPresentationMode === "picture-in-picture",
          pipWindow: null
        };
      }), (0,startWith/* startWith */.O)({
        isEnabled: isWebKitPIPEnabled,
        pipWindow: null
      }));
    }
    /* eslint-disable @typescript-eslint/no-unsafe-assignment */


    var isPIPEnabled = document.pictureInPictureElement && document.pictureInPictureElement === mediaElement;
    var initialState = {
      isEnabled: isPIPEnabled,
      pipWindow: null
    };
    /* eslint-enable @typescript-eslint/no-unsafe-assignment */

    return (0,merge/* merge */.T)((0,fromEvent/* fromEvent */.R)(mediaElement, "enterpictureinpicture").pipe((0,map/* map */.U)(function (evt) {
      return {
        isEnabled: true,
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        pipWindow: evt.pictureInPictureWindow
      };
    })), (0,fromEvent/* fromEvent */.R)(mediaElement, "leavepictureinpicture").pipe((0,mapTo/* mapTo */.h)({
      isEnabled: false,
      pipWindow: null
    }))).pipe((0,startWith/* startWith */.O)(initialState));
    /* eslint-enable @typescript-eslint/strict-boolean-expressions */

    /* eslint-enable @typescript-eslint/no-unsafe-member-access */
  });
}
/**
 * Returns `true` when video is considered as visible (the page is visible and/or
 * the Picture-In-Picture is activated). Returns `false` otherwise.
 * @param {Observable} pip$
 * @returns {Observable}
 */


function isVideoVisible(pip$) {
  return (0,combineLatest/* combineLatest */.aj)([visibilityChange(), pip$]).pipe((0,switchMap/* switchMap */.w)(function (_ref) {
    var isVisible = _ref[0],
        pip = _ref[1];

    if (pip.isEnabled || isVisible) {
      return (0,of.of)(true);
    }

    return (0,of.of)(false).pipe(delay(INACTIVITY_DELAY));
  }), (0,distinctUntilChanged/* distinctUntilChanged */.x)());
}
/**
 * Get video width from HTML video element, or video estimated dimensions
 * when Picture-in-Picture is activated.
 * @param {HTMLMediaElement} mediaElement
 * @returns {Observable}
 */


function videoWidth$(mediaElement, pip$) {
  return (0,combineLatest/* combineLatest */.aj)([pip$, (0,interval/* interval */.F)(20000).pipe((0,startWith/* startWith */.O)(null)), videoSizeChange().pipe(throttleTime(500), (0,startWith/* startWith */.O)(null))]).pipe((0,switchMap/* switchMap */.w)(function (_ref2) {
    var pip = _ref2[0];

    if (!pip.isEnabled) {
      return (0,of.of)(mediaElement.clientWidth * pixelRatio);
    } else if (pip.pipWindow != null) {
      var pipWindow = pip.pipWindow;
      var firstWidth = getVideoWidthFromPIPWindow(mediaElement, pipWindow); // RxJS typing issue (for the "as any")

      return (0,fromEvent/* fromEvent */.R)(pipWindow, "resize").pipe((0,startWith/* startWith */.O)(firstWidth * pixelRatio), (0,map/* map */.U)(function () {
        return getVideoWidthFromPIPWindow(mediaElement, pipWindow) * pixelRatio;
      }));
    } else {
      return (0,of.of)(Infinity);
    }
  }), (0,distinctUntilChanged/* distinctUntilChanged */.x)());
}
/**
 * @param {HTMLMediaElement} mediaElement
 * @returns {Observable}
 */


var onLoadedMetadata$ = compatibleListener(["loadedmetadata"]);
/**
 * @param {HTMLMediaElement} mediaElement
 * @returns {Observable}
 */

var onSeeking$ = compatibleListener(["seeking"]);
/**
 * @param {HTMLMediaElement} mediaElement
 * @returns {Observable}
 */

var onSeeked$ = compatibleListener(["seeked"]);
/**
 * @param {HTMLMediaElement} mediaElement
 * @returns {Observable}
 */

var onEnded$ = compatibleListener(["ended"]);
/**
 * @param {HTMLMediaElement} mediaElement
 * @returns {Observable}
 */

var onTimeUpdate$ = compatibleListener(["timeupdate"]);
/**
 * @param {HTMLElement} element
 * @returns {Observable}
 */

var onFullscreenChange$ = compatibleListener(["fullscreenchange", "FullscreenChange"], // On IE11, fullscreen change events is called MSFullscreenChange
BROWSER_PREFIXES.concat("MS"));
/**
 * @param {HTMLMediaElement} mediaElement
 * @returns {Observable}
 */

var onPlayPause$ = function onPlayPause$(mediaElement) {
  return (0,merge/* merge */.T)(compatibleListener(["play"])(mediaElement), compatibleListener(["pause"])(mediaElement));
};
/**
 * @param {HTMLMediaElement} mediaElement
 * @returns {Observable}
 */


var onTextTrackChanges$ = function onTextTrackChanges$(textTrackList) {
  return (0,merge/* merge */.T)(compatibleListener(["addtrack"])(textTrackList), compatibleListener(["removetrack"])(textTrackList));
};
/**
 * @param {MediaSource} mediaSource
 * @returns {Observable}
 */


var onSourceOpen$ = compatibleListener(["sourceopen", "webkitsourceopen"]);
/**
 * @param {SourceBuffer} sourceBuffer
 * @returns {Observable}
 */

var onUpdate$ = compatibleListener(["update"]);
/**
 * @param {MediaSource} mediaSource
 * @returns {Observable}
 */

var onRemoveSourceBuffers$ = compatibleListener(["onremovesourcebuffer"]);
/**
 * @param {HTMLMediaElement} mediaElement
 * @returns {Observable}
 */

var onEncrypted$ = compatibleListener((0,should_favour_custom_safari_EME/* default */.Z)() ? ["needkey"] : ["encrypted", "needkey"]);
/**
 * @param {MediaKeySession} mediaKeySession
 * @returns {Observable}
 */

var onKeyMessage$ = compatibleListener(["keymessage", "message"]);
/**
 * @param {MediaKeySession} mediaKeySession
 * @returns {Observable}
 */

var onKeyAdded$ = compatibleListener(["keyadded", "ready"]);
/**
 * @param {MediaKeySession} mediaKeySession
 * @returns {Observable}
 */

var onKeyError$ = compatibleListener(["keyerror", "error"]);
/**
 * @param {MediaKeySession} mediaKeySession
 * @returns {Observable}
 */

var onKeyStatusesChange$ = compatibleListener(["keystatuseschange"]);


/***/ }),

/***/ 2203:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var isNode = typeof window === "undefined";
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isNode);

/***/ }),

/***/ 1988:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ isVTTCue
/* harmony export */ });
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns true if the given cue is an instance of a VTTCue.
 * @param {*} cue
 * @returns {boolean}
 */
function isVTTCue(cue) {
  /* eslint-disable @typescript-eslint/no-unsafe-member-access */
  return typeof window.VTTCue === "function" && cue instanceof window.VTTCue;
  /* eslint-enable @typescript-eslint/no-unsafe-member-access */
}

/***/ }),

/***/ 7253:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ makeCue
/* harmony export */ });
/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3887);
/* harmony import */ var _browser_compatibility_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3774);
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Creates a cue using the best platform-specific interface available.
 *
 * @param {Number} startTime
 * @param {Number} endTime
 * @param {string} payload
 * @returns {VTTCue|TextTrackCue|null} Text track cue or null if the parameters
 * were invalid.
 */

function makeCue(startTime, endTime, payload) {
  if (_browser_compatibility_types__WEBPACK_IMPORTED_MODULE_0__/* .VTTCue_ */ .w == null) {
    throw new Error("VTT cues not supported in your target");
  }

  if (startTime >= endTime) {
    // IE/Edge will throw in this case.
    // See issue #501
    _log__WEBPACK_IMPORTED_MODULE_1__/* .default.warn */ .Z.warn("Compat: Invalid cue times: " + startTime + " - " + endTime);
    return null;
  }

  return new _browser_compatibility_types__WEBPACK_IMPORTED_MODULE_0__/* .VTTCue_ */ .w(startTime, endTime, payload);
}

/***/ }),

/***/ 5059:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ shouldFavourCustomSafariEME
/* harmony export */ });
/* harmony import */ var _browser_detection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3666);
/* harmony import */ var _eme_custom_media_keys_webkit_media_keys_constructor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(158);
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * On Safari 12.1, it seems that since fairplay CDM implementation
 * within the browser is not standard with EME w3c current spec, the
 * requestMediaKeySystemAccess API doesn't resolve positively, even
 * if the drm (fairplay in most cases) is supported.
 * @returns {boolean}
 */

function shouldFavourCustomSafariEME() {
  return _browser_detection__WEBPACK_IMPORTED_MODULE_0__/* .isSafari */ .G6 && _eme_custom_media_keys_webkit_media_keys_constructor__WEBPACK_IMPORTED_MODULE_1__/* .WebKitMediaKeysConstructor */ .t !== undefined;
}

/***/ }),

/***/ 944:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Configuration file for the whole player.
 * Feel free to tweak those values if you know what you're doing.
 *
 * Please not that you will need to re-build the whole project to take these
 * modifications into account.
 *
 * @type {Object}
 */
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  /**
   * Volume set on unMute if the volume is set to 0 and either:
   *   - mute has never been called before
   *   - mute has last been called while the volume was already set to 0 (either
   *     via setVolume, or a previous mute call)
   * @type {Number}
   */
  DEFAULT_UNMUTED_VOLUME: 0.1,

  /**
   * Default time interval after which a request will timeout, in ms.
   * @type {Number}
   */
  DEFAULT_REQUEST_TIMEOUT: 30 * 1000,

  /**
   * Can be either:
   *   - "native": Subtitles are all displayed in a <track> element
   *   - "html": Subtitles are all displayed in a <div> separated from the video
   *     element. Can be useful to display richer TTML subtitles, for example.
   * @type {Object|null}
   */
  DEFAULT_TEXT_TRACK_MODE: "native",

  /**
   * Strategy to adopt when manually setting the current bitrate.
   * Can be either:
   *   - "seamless": transitions are very smooth but not immediate.
   *   - "direct": the quality switch happens immediately but to achieve that,
   *     the player will need to set a new MediaSource on the media element in
   *     some cases. This often leads to a black screen + unavailable APIs
   *     during a short moment.
   * @type {string}
   */
  DEFAULT_MANUAL_BITRATE_SWITCHING_MODE: "seamless",

  /**
   * Default behavior for the `enableFastSwitching` loadVideo options.
   *
   * Fast-switching allows to provide quicker transitions from lower quality
   * segments to higher quality segments but might be badly supported on some
   * devices.
   * When enabled, the RxPlayer might replace segments of a lower-quality
   * (with a lower bitrate) with segments of a higher quality (with a higher
   * bitrate). This allows to have a fast transition when network conditions
   * improve.
   * When disabled, segments of a lower-quality will not be replaced.
   */
  DEFAULT_ENABLE_FAST_SWITCHING: true,

  /**
   * Strategy to adopt when manually switching of audio adaptation.
   * Can be either:
   *    - "seamless": transitions are smooth but could be not immediate.
   *    - "direct": that strategy will be "smart", if the mimetype and the codec,
   *    change, we will perform a hard reload of the media source, however, if it
   *    doesn't change, we will just perform a small flush by removing buffered range,
   *    and perform, a small seek on the media element.
   *    Transitions are faster, but we could see appear a reloading or seeking state.
   */
  DEFAULT_AUDIO_TRACK_SWITCHING_MODE: "seamless",

  /**
   * In some cases after switching the current track or bitrate, the RxPlayer
   * could be led to go into the `"RELOADING"` state, which corresponds to
   * visually a black screen (with nothing audible) before restarting playback.
   *
   * We could want to seek back some milliseconds when doing that.
   * For example, when switching the current audio track, it might make sense
   * to restart some time before, so the beginning of the sentence can be heard
   * again in the new language.
   *
   * This config property allows to set the relative position the RxPlayer will
   * seek to after reloading, in seconds.
   *
   * For example: a value of `-0.7` means that will seek back 700 milliseconds
   * when reloading due to a track or bitrate switch with necessitated a
   * reloading.
   */
  DELTA_POSITION_AFTER_RELOAD: {
    /** Relative position when switching the bitrate */
    bitrateSwitch: -0.1,

    /**
     * Relative position when switching the track.
     *
     * From tests, I noticed that seeking back was only really "pleasant" when
     * switching the audio track.
     *
     * E.g. switching the video track often means changing the camera angle or
     * even totally changing what is being seen and rely much less on temporal
     * context than when an audio track is switched.
     * As such, I decided to only set a sensible seek-back behavior when
     * switching the audio track, and only a minimal one (to still ensure
     * nothing was missed) for video.
     *
     * "Other" mainly concern text track, where seeking back could even be
     * annoying, so that behavior has been disabled in that case.
     */
    trackSwitch: {
      audio: -0.7,
      video: -0.1,
      other: 0
    }
  },

  /**
   * Behavior of the RxPlayer when encountering a whole other codec on a already
   * existing audio or video SourceBuffer.
   *
   * Can be either:
   *
   *    - "continue": Segments linked to the new codec will continue to be
   *      pushed to that same SourceBuffer. The RxPlayer will still try to call
   *      the `changeType` API on the SourceBuffer before pushing those
   *      segments but continue even if this call failed.
   *
   *    - "reload": Every time a new incompatible codec is encountered on a
   *      given SourceBuffer, we will reload the MediaSource.
   */
  DEFAULT_CODEC_SWITCHING_BEHAVIOR: "continue",

  /**
   * If set to true, video through loadVideo will auto play by default
   * @type {Boolean}
   */
  DEFAULT_AUTO_PLAY: false,

  /**
   * If set to false, "native" subtitles (in a <track> element) will be hidden
   * by default.
   * @type {Boolean}
   */
  DEFAULT_SHOW_NATIVE_SUBTITLE: true,

  /**
   * If set to true, the player will by default stop immediately and unload the
   * content on reaching the end of the media.
   *
   * If set to false, it will not unload nor stop by default, leaving the user
   * free to seek in the already-loaded content.
   *
   * Set to `true` for legacy reasons.
   * @type {Boolean}
   */
  DEFAULT_STOP_AT_END: true,

  /**
   * Default buffer goal in seconds.
   * Once enough content has been downloaded to fill the buffer up to
   * ``current position + DEFAULT_WANTED_BUFFER_AHEAD", we will stop downloading
   * content.
   * @type {Number}
   */
  DEFAULT_WANTED_BUFFER_AHEAD: 30,

  /**
   * Default max buffer size ahead of the current position in seconds.
   * The buffer _after_ this limit will be garbage collected.
   * Set to Infinity for no limit.
   * @type {Number}
   */
  DEFAULT_MAX_BUFFER_AHEAD: Infinity,

  /**
   * Default max buffer size ahead of the current position in seconds.
   * The buffer _before_ this limit will be garbage collected.
   * Set to Infinity for no limit.
   * @type {Number}
   */
  DEFAULT_MAX_BUFFER_BEHIND: Infinity,

  /* eslint-disable @typescript-eslint/consistent-type-assertions */

  /**
   * Maximum possible buffer ahead for each type of buffer, to avoid too much
   * memory usage when playing for a long time.
   * Equal to Infinity if not defined here.
   * @type {Object}
   */
  MAXIMUM_MAX_BUFFER_AHEAD: {
    text: 5 * 60 * 60
  },

  /* eslint-enable @typescript-eslint/consistent-type-assertions */

  /* eslint-disable @typescript-eslint/consistent-type-assertions */

  /**
   * Maximum possible buffer behind for each type of buffer, to avoid too much
   * memory usage when playing for a long time.
   * Equal to Infinity if not defined here.
   * @type {Object}
   */
  MAXIMUM_MAX_BUFFER_BEHIND: {
    text: 5 * 60 * 60
  },

  /* eslint-enable @typescript-eslint/consistent-type-assertions */

  /**
   * Default bitrate ceils initially set as the first content begins.
   *
   * If no track is found with a bitrate inferior or equal to the
   * bitrate there, the one with the lowest bitrate will be taken instead.
   *
   * Set to 0 for the lowest bitrate, Infinity for the highest.
   *
   * These values are only useful for the first content played, as consecutive
   * play will always take the last set one.
   * @type {Object}
   */
  DEFAULT_INITIAL_BITRATES: {
    audio: 0,
    video: 0,
    other: 0
  },

  /* eslint-disable @typescript-eslint/consistent-type-assertions */

  /**
   * Default bitrate floor initially set to dictate the minimum bitrate the
   * ABR manager can automatically switch to.
   *
   * If no track is found with a quality superior or equal to the
   * bitrate there, the lowest bitrate will be taken instead.
   *
   * Set to Infinity to discard any limit in the ABR strategy.
   * @type {Object}
   */
  DEFAULT_MIN_BITRATES: {
    audio: 0,
    video: 0,
    other: 0
  },

  /* eslint-enable @typescript-eslint/consistent-type-assertions */

  /* eslint-disable @typescript-eslint/consistent-type-assertions */

  /**
   * Default bitrate ceil initially set to dictate the maximum bitrate the
   * ABR manager can automatically switch to.
   *
   * If no track is found with a quality inferior or equal to the
   * bitrate there, the lowest bitrate will be taken instead.
   *
   * Set to Infinity to discard any limit in the ABR strategy.
   * @type {Object}
   */
  DEFAULT_MAX_BITRATES: {
    audio: Infinity,
    video: Infinity,
    other: Infinity
  },

  /* eslint-enable @typescript-eslint/consistent-type-assertions */

  /**
   * Delay after which, if the page is hidden, the user is considered inactive
   * on the current video.
   *
   * Allow to enforce specific optimizations when the page is not shown.
   * @see DEFAULT_THROTTLE_WHEN_HIDDEN
   * @type {Number}
   */
  INACTIVITY_DELAY: 60 * 1000,

  /**
   * If true, if the player is in a "hidden" state for a delay specified by the
   * INACTIVITY DELAY config property, we throttle automatically to the video
   * representation with the lowest bitrate.
   * @type {Boolean}
   */
  DEFAULT_THROTTLE_WHEN_HIDDEN: false,

  /**
   * If true, if the video is considered in a "hidden" state for a delay specified by
   * the INACTIVITY DELAY config property, we throttle automatically to the video
   * representation with the lowest bitrate.
   * @type {Boolean}
   */
  DEFAULT_THROTTLE_VIDEO_BITRATE_WHEN_HIDDEN: false,

  /**
   * If true, the video representations you can switch to in adaptive mode
   * are limited by the video element's width.
   *
   * Basically in that case, we won't switch to a video Representation with
   * a width higher than the current width of the video HTMLElement.
   * @type {Boolean}
   */
  DEFAULT_LIMIT_VIDEO_WIDTH: false,

  /**
   * Default initial live gap considered if no presentation delay has been
   * suggested, in seconds.
   * @type {Number}
   */
  DEFAULT_LIVE_GAP: {
    DEFAULT: 10,
    LOW_LATENCY: 3
  },

  /**
   * Maximum time, in seconds, the player should automatically skip when stalled
   * because of a current hole in the buffer.
   * Bear in mind that this might seek over not-yet-downloaded/pushed segments.
   * @type {Number}
   */
  BUFFER_DISCONTINUITY_THRESHOLD: 0.2,

  /**
   * Ratio used to know if an already loaded segment should be re-buffered.
   * We re-load the given segment if the current one times that ratio is
   * inferior to the new one.
   * @type {Number}
   */
  BITRATE_REBUFFERING_RATIO: 1.5,

  /**
   * Those are used when a "QuotaExceededError" error is received after
   * appending a new segment in the SourceBuffer.
   *
   * This error can arise when the browser's buffer is considered full.
   * In this case, the player goes into manual garbage collection (GC) mode.
   * @type {Object}
   */
  BUFFER_GC_GAPS: {
    /**
     * _Low_ gap (from current position) from which the buffer will be _garbage
     * collected_ (read removed from the buffer) when a QuotaExceededError is
     * received.
     * In seconds.
     * @type {Number}
     */
    CALM: 240,

    /**
     * _High_ gap (from current position) from which the buffer will be _garbage
     * collected_ (read removed from the buffer) when a QuotaExceededError is
     * received, if the low one does not clean up any buffer.
     * In seconds.
     * @type {Number}
     */
    BEEFY: 30
  },

  /**
   * The default number of times a manifest request will be re-performed
   * when loaded/refreshed if the request finishes on an error which
   * justify an retry.
   *
   * Note that some errors do not use this counter:
   *   - if the error is not due to the xhr, no retry will be peformed
   *   - if the error is an HTTP error code, but not a 500-smthg or a 404, no
   *     retry will be performed.
   *   - if it has a high chance of being due to the user being offline, a
   *     separate counter is used (see DEFAULT_MAX_REQUESTS_RETRY_ON_OFFLINE).
   * @type Number
   */
  DEFAULT_MAX_MANIFEST_REQUEST_RETRY: 4,

  /**
   * The default number of times a segment request will be re-performed when
   * on error which justify a retry.
   *
   * Note that some errors do not use this counter:
   *   - if the error is not due to the xhr, no retry will be peformed
   *   - if the error is an HTTP error code, but not a 500-smthg or a 404, no
   *     retry will be performed.
   *   - if it has a high chance of being due to the user being offline, a
   *     separate counter is used (see DEFAULT_MAX_REQUESTS_RETRY_ON_OFFLINE).
   * @type Number
   */
  DEFAULT_MAX_REQUESTS_RETRY_ON_ERROR: 4,

  /**
   * Under some circonstances, we're able to tell that the user is offline (see
   * the compat files).
   * When this happens, and xhr requests fails due to an error event (you might
   * still be able to perform xhr offline, e.g. on localhost), you might want to
   * retry indefinitely or with a higher number of retry than if the error is
   * due to a CDN problem.
   *
   * A capped exponential backoff will still be used (like for an error code).
   * @type {Number}
   */
  DEFAULT_MAX_REQUESTS_RETRY_ON_OFFLINE: Infinity,

  /**
   * Initial backoff delay when a segment / manifest download fails, in
   * milliseconds.
   *
   * This delay will then grow exponentally by power of twos (200, 400, 800
   * etc.)
   *
   * Please note that this delay is not exact, as it will be fuzzed.
   * @type {Number}
   */
  INITIAL_BACKOFF_DELAY_BASE: {
    REGULAR: 200,
    LOW_LATENCY: 50
  },

  /**
   * Maximum backoff delay when a segment / manifest download fails, in
   * milliseconds.
   *
   * Please note that this delay is not exact, as it will be fuzzed.
   * @type {Number}
   */
  MAX_BACKOFF_DELAY_BASE: {
    REGULAR: 3000,
    LOW_LATENCY: 1000
  },

  /**
   * Minimum interval at which timeupdate events will be "constructed". This
   * variable is for the "regular" mediasource strategy (that is, not for the
   * directfile API.
   *
   * Those events are the base of various important mechanisms in the player:
   *   - set the clock used to regularly check which segments should be loaded
   *   - set the clock for the ABR strategy.
   *   - used to trigger positionUpdate events.
   *
   * This common logic is for performance reasons, as we call multiple browser's
   * APIs which are useful for most of these.
   *
   * Keep in mind this is the minimum interval. This logic will also be
   * triggered when various events of the media element are received.
   * @type {Number}
   */
  SAMPLING_INTERVAL_MEDIASOURCE: 1000,

  /**
   * Same than SAMPLING_INTERVAL_MEDIASOURCE but for lowLatency mode.
   * @type {Number}
   */
  SAMPLING_INTERVAL_LOW_LATENCY: 250,

  /**
   * Same than SAMPLING_INTERVAL_MEDIASOURCE but for the directfile API.
   * @type {Number}
   */
  SAMPLING_INTERVAL_NO_MEDIASOURCE: 500,

  /**
   * Minimum number of bytes sampled before we trust the estimate.
   * If we have not sampled much data, our estimate may not be accurate
   * enough to trust.
   * If the total of bytes sampled is less than this value, we use a
   * default estimate.
   * This specific value is based on experimentations.
   * @type {Number}
   */
  ABR_MINIMUM_TOTAL_BYTES: 150e3,

  /**
   * Minimum number of bytes, under which samples are discarded.
   * Our models do not include latency information, so connection startup time
   * (time to first byte) is considered part of the download time.
   * Because of this, we should ignore very small downloads which would cause
   * our estimate to be too low.
   * This specific value is based on experimentation.
   * @type {Number}
   */
  ABR_MINIMUM_CHUNK_SIZE: 16e3,

  /**
   * Factor with which is multiplied the bandwidth estimate when the ABR is in
   * starvation mode.
   * @type {Object}
   */
  ABR_STARVATION_FACTOR: {
    DEFAULT: 0.72,
    LOW_LATENCY: 0.72
  },

  /**
   * Factor with which is multiplied the bandwidth estimate when the ABR is not
   * in starvation mode.
   * @type {Object}
   */
  ABR_REGULAR_FACTOR: {
    DEFAULT: 0.8,
    LOW_LATENCY: 0.8
  },

  /**
   * If a media buffer has less than ABR_STARVATION_GAP in seconds ahead of the
   * current position in its buffer, the ABR manager will go into starvation
   * mode.
   *
   * It gets out of starvation mode when the OUT_OF_STARVATION_GAP value is
   * reached.
   *
   * Under this starvation mode:
   *
   *   - the bandwidth considered will be a little lower than the one estimated
   *
   *   - the time the next important request take will be checked
   *     multiple times to detect when/if it takes too much time.
   *     If the request is considered too long, the bitrate will be hastily
   *     re-calculated from this single request.
   *
   * @type {Object}
   */
  ABR_STARVATION_GAP: {
    DEFAULT: 5,
    LOW_LATENCY: 5
  },
  OUT_OF_STARVATION_GAP: {
    DEFAULT: 7,
    LOW_LATENCY: 7
  },

  /**
   * This is a security to avoid going into starvation mode when the content is
   * ending (@see ABR_STARVATION_GAP).
   * Basically, we subtract that value from the global duration of the content
   * and we never enter "starvation mode" if the currently available buffer
   * (which equals to the current position + the available buffer ahead of it)
   * is equal or higher than this value.
   * @type {Number}
   */
  ABR_STARVATION_DURATION_DELTA: 0.1,

  /**
   * Half-life, in seconds for a fastly-evolving exponential weighted moving
   * average.
   * The lower it is, the faster the ABR logic will react to the bandwidth
   * falling quickly.
   * Should be kept to a lower number than ABR_SLOW_EMA for coherency reasons.
   * @type {Number}
   */
  ABR_FAST_EMA: 2,

  /**
   * Half-life, in seconds for a slowly-evolving exponential weighted moving
   * average.
   * The lower it is, the faster the ABR logic is going to react to recent
   * bandwidth variation, on the higher and on the lower side.
   * Should be kept to a higher number than ABR_FAST_EMA for coherency reasons.
   * @type {Number}
   */
  ABR_SLOW_EMA: 10,

  /**
   * Number of seconds ahead in the buffer after which playback will resume when
   * seeking on an unbuffered part of the content.
   * @type {Number}
   */
  RESUME_GAP_AFTER_SEEKING: {
    DEFAULT: 1.5,
    LOW_LATENCY: 0.5
  },

  /**
   * Number of seconds ahead in the buffer after which playback will resume when
   * the player was stalled due to a low readyState.
   * @type {Number}
   */
  RESUME_GAP_AFTER_NOT_ENOUGH_DATA: {
    DEFAULT: 0.5,
    LOW_LATENCY: 0.5
  },

  /**
   * Number of seconds ahead in the buffer after which playback will resume
   * after the player went through a buffering step.
   * @type {Number}
   */
  RESUME_GAP_AFTER_BUFFERING: {
    DEFAULT: 5,
    LOW_LATENCY: 0.5
  },

  /**
   * Maximum number of seconds in the buffer based on which a "stalling"
   * strategy will be considered:
   * The player will pause playback to get enough time building a sufficient
   * buffer. This mostly happen when seeking in an unbuffered part or when
   * buffering.
   * @type {Number}
   */
  STALL_GAP: {
    DEFAULT: 0.5,
    LOW_LATENCY: 0.2
  },

  /**
   * Maximum authorized difference between what we calculated to be the
   * beginning or end of the segment in a media buffer and what we
   * actually are noticing now.
   *
   * If the segment seems to have removed more than this size in seconds, we
   * will infer that the segment has been garbage collected and we might try to
   * re-download it.
   * @type {Number}
   */
  MAX_TIME_MISSING_FROM_COMPLETE_SEGMENT: 0.15,

  /**
   * The maximum authorized difference, in seconds, between the real buffered
   * time of a given chunk and what the segment information of the Manifest
   * tells us.
   *
   * Setting a value too high can lead to parts of the media buffer being
   * linked to the wrong segments and to segments wrongly believed to be still
   * complete (instead of garbage collected).
   *
   * Setting a value too low can lead to parts of the media buffer not being
   * linked to the concerned segment and to segments wrongly believed to be
   * partly garbage collected (instead of complete segments).
   * @type {Number}
   */
  MAX_MANIFEST_BUFFERED_START_END_DIFFERENCE: 0.4,

  /**
   * The maximum authorized difference, in seconds, between the duration a
   * segment should have according to the Manifest and the actual duration it
   * seems to have once pushed to the media buffer.
   *
   * Setting a value too high can lead to parts of the media buffer being
   * linked to the wrong segments and to segments wrongly believed to be still
   * complete (instead of garbage collected).
   *
   * Setting a value too low can lead to parts of the media buffer not being
   * linked to the concerned segment and to segments wrongly believed to be
   * partly garbage collected (instead of complete segments). This last point
   * could lead to unnecessary segment re-downloading.
   * @type {Number}
   */
  MAX_MANIFEST_BUFFERED_DURATION_DIFFERENCE: 0.3,

  /**
   * Minimum duration in seconds a segment should be into a buffered range to be
   * considered as part of that range.
   * Segments which have less than this amount of time "linked" to a buffered
   * range will be deleted.
   *
   * Setting a value too low can lead in worst-case scenarios to segments being
   * wrongly linked to the next or previous range it is truly linked too (if
   * those ranges are too close).
   *
   * Setting a value too high can lead to part of the buffer not being assigned
   * any segment. It also limits the minimum duration a segment can be.
   *
   * TODO As of now, this limits the minimum size a complete segment can be. A
   * better logic would be to also consider the duration of a segment. Though
   * this logic could lead to bugs with the current code.
   * @type {Number}
   */
  MINIMUM_SEGMENT_SIZE: 0.005,

  /**
   * Append windows allow to filter media data from segments if they are outside
   * a given limit.
   * Coded frames with presentation timestamp within this range are allowed to
   * be appended to the media buffer while coded frames outside this range are
   * filtered out.
   *
   * Those are often set to be the start and end of the "Period" the segment is
   * in.
   * However, we noticed that some browsers were too aggressive when the exact
   * limits were set: more data than needed was removed, often leading to
   * discontinuities.
   *
   * Those securities are added to the set windows (substracted from the window
   * start and added to the window end) to avoid those problems.
   * @type {Object}
   */
  APPEND_WINDOW_SECURITIES: {
    START: 0.2,
    END: 0.1
  },

  /**
   * Maximum interval at which text tracks are refreshed in an "html"
   * textTrackMode.
   *
   * The text tracks are also refreshed on various video events, this interval
   * will only trigger a refresh if none of those events was received during
   * that timespan.
   *
   * Note that if the TextTrack cue did not change between two intervals or
   * events, the DOM won't be refreshed.
   * The TextTrack cues structure is also optimized for fast retrieval.
   * We should thus not have much of a performance impact here if we set a low
   * interval.
   *
   * @type {Number}
   */
  MAXIMUM_HTML_TEXT_TRACK_UPDATE_INTERVAL: 50,

  /**
   * On browsers with no ResizeObserver API, this will be the interval in
   * milliseconds at which we should check if the text track element has
   * changed its size, and updates proportional text-track data accordingly
   * (like a proportional font-size).
   *
   * This is only used:
   *   - in an "html" textTrackMode
   *   - when some styling is proportional in the text track data
   *
   * Putting a value too low will render faster but might use to much proc time.
   * Putting a value too high might provoke a re-render too late after the user
   * changed the element's size (e.g. when going to fullscreen mode).
   *
   * @type {Number}
   */
  TEXT_TRACK_SIZE_CHECKS_INTERVAL: 250,

  /**
   * The Buffer padding is a time offset from the current time that affects
   * the buffer.
   *
   * Basically, from a given time, if the current buffer gap number (time
   * between the current time and the end of the downloaded buffer) is above
   * the padding described here (of the corresponding type), we won't
   * reschedule segments for that range.
   *
   * This is to avoid excessive re-buffering.
   *
   * Keeping the padding too low would increase the risk of re-bufferings.
   *
   * Keeping the padding too high would delay visible quality increase.
   *
   * @type {Object}
   */
  BUFFER_PADDING: {
    audio: 1,
    video: 3,
    other: 1
  },

  /**
   * Segments of different types are downloaded by steps:
   *
   *   - first the audio/video/text Segments which are immediately needed
   *
   *   - then once every of those Segments have been downloaded, less-needed
   *     Segments
   *
   *   - then once every of those less-needed Segments have been downloaded,
   *     even less-needed Segments
   *
   *   - etc.
   *
   * This stepped download strategy allows to make a better use of network
   * ressources.
   *
   * For example, if more than sufficient audio buffer has been downloaded but
   * the immediately-needed video Segment is still pending its request, we might
   * be in a situation of rebuffering.
   * In that case, a better strategy would be to make sure every network
   * ressource is allocated for this video Segment before rebuffering happens.
   *
   * This is where those steps become useful.
   *
   * --
   *
   * The numbers defined in this Array describe what the steps are.
   *
   * Each number is linked to a distance from the current playing position, in
   * seconds.
   * Distances which will be used as limit points, from which a new step is
   * reached (see example).
   *
   * In the RxPlayer's code, each step is then translated in to a priority
   * number.
   * The lower is that number, the lower is the step and the lower is the step,
   * the higher is the priority.
   *
   * Note: You can set an empty array to deactivate the steps feature (every
   * Segments have the same priority).
   *
   * @example
   *
   * let's imagine the following SEGMENT_PRIORITIES_STEPS array:
   * [5, 11, 17, 25]
   *
   * To link each Segments to a corresponding priority number (and thus to a
   * specific step), we have to consider the distance between the current
   * position and the start time of the Segment.
   *
   * We have in our example 5 groups, which correspond to the following possible
   * distances:
   *   1. inferior to 5 => first step (priority number = 0)
   *   2. between 5 and 11 => second step (priority number = 1)
   *   3. between 11 and 17 => third step (priority number = 2)
   *   4. between 17 and 25 => fourth step (priority number = 3)
   *   5. superior to 25 => fifth step (priority number = 4)
   *
   * Segments corresponding to a lower-step will need to all be downloaded
   * before Segments of a newer step begin.
   *
   * @type {Array.<Number>}
   */
  SEGMENT_PRIORITIES_STEPS: [2, 4, 8, 12, 18, 25],
  // 7th Step (priority number = 6):  >= 25

  /**
   * Some segment requests are said to be "high priority".
   *
   * Requests in that category once done will cancel any segment request that
   * has a low priority number (see `SEGMENT_PRIORITIES_STEPS`) - meaning a
   * priority number equal to `MIN_CANCELABLE_PRIORITY` or more.
   *
   * Enter here the last priority number that is considered high priority
   * (beginning by the first step, which has the priority number `0`).
   * @type {number}
   */
  MAX_HIGH_PRIORITY_LEVEL: 1,

  /**
   * Enter here the first priority step (see `SEGMENT_PRIORITIES_STEPS`) that
   * will be considered as low priority.
   *
   * Segment requests with a low priority will be cancelled if a high priority
   * segment request (see MAX_HIGH_PRIORITY_LEVEL) is scheduled while they are
   * pending.
   *
   * This number should be strictly superior to the value indicated in
   * `MAX_HIGH_PRIORITY_LEVEL`.
   * @type {number}
   */
  MIN_CANCELABLE_PRIORITY: 3,

  /**
   * Robustnesses used in the {audio,video}Capabilities of the
   * MediaKeySystemConfiguration (EME).
   *
   * Only used for widevine keysystems.
   *
   * Defined in order of importance (first will be tested first etc.)
   * @type {Array.<string>}
   */
  EME_DEFAULT_WIDEVINE_ROBUSTNESSES: ["HW_SECURE_ALL", "HW_SECURE_DECODE", "HW_SECURE_CRYPTO", "SW_SECURE_DECODE", "SW_SECURE_CRYPTO"],

  /**
   * Link canonical key systems names to their respective reverse domain name,
   * used in the EME APIs.
   * This allows to have a simpler API, where users just need to set "widevine"
   * or "playready" as a keySystem.
   * @type {Object}
   */

  /* eslint-disable @typescript-eslint/consistent-type-assertions */
  EME_KEY_SYSTEMS: {
    clearkey: ["webkit-org.w3.clearkey", "org.w3.clearkey"],
    widevine: ["com.widevine.alpha"],
    playready: ["com.microsoft.playready", "com.chromecast.playready", "com.youtube.playready"],
    fairplay: ["com.apple.fps.1_0"]
  },

  /* eslint-enable @typescript-eslint/consistent-type-assertions */

  /**
   * The Manifest parsing logic has a notion of "unsafeMode" which allows to
   * speed-up this process a lot with a small risk of de-synchronization with
   * what actually is on the server.
   * Because using that mode is risky, and can lead to all sort of problems, we
   * regularly should fall back to a regular "safe" parsing every once in a
   * while.
   * This value defines how many consecutive time maximum the "unsafeMode"
   * parsing can be done.
   */
  MAX_CONSECUTIVE_MANIFEST_PARSING_IN_UNSAFE_MODE: 10,

  /**
   * Minimum time spent parsing the Manifest before we can authorize parsing
   * it in an "unsafeMode", to speed-up the process with a little risk.
   * Please note that this parsing time also sometimes includes idle time such
   * as when the parser is waiting for a request to finish.
   */
  MIN_MANIFEST_PARSING_TIME_TO_ENTER_UNSAFE_MODE: 200,

  /**
   * Minimum amount of <S> elements in a DASH MPD's <SegmentTimeline> element
   * necessary to begin parsing the current SegmentTimeline element in an
   * unsafe manner (meaning: with risks of de-synchronization).
   * This is only done when the "unsafeMode" parsing mode is enabled.
   */
  MIN_DASH_S_ELEMENTS_TO_PARSE_UNSAFELY: 300,

  /**
   * When we detect that the local Manifest might be out-of-sync with the
   * server's one, we schedule a Manifest refresh.
   * However, as this "unsynchronization" is only a theory and as we do not want
   * to send too many Manifest requests, we keep a delay between the last
   * Manifest refresh done and that one.
   * This value indicates which delay we want. Note that the Manifest could
   * still be refreshed before this delay for other reasons.
   * @type {Number}
   */
  OUT_OF_SYNC_MANIFEST_REFRESH_DELAY: 3000,

  /**
   * When a partial Manifest update (that is an update with a partial sub-set
   * of the Manifest) fails, we will perform an update with the whole Manifest
   * instead.
   * To not overload the client - as parsing a Manifest can be resource heavy -
   * we set a minimum delay to wait before doing the corresponding request.
   * @type {Number}
   */
  FAILED_PARTIAL_UPDATE_MANIFEST_REFRESH_DELAY: 3000,

  /**
   * DASH Manifest based on a SegmentTimeline should normally have an
   * MPD@minimumUpdatePeriod attribute which should be sufficient to
   * know when to refresh it.
   * However, there is a specific case, for when it is equal to 0.
   * As of DASH-IF IOP (valid in v4.3), when a DASH's MPD set a
   * MPD@minimumUpdatePeriod to `0`, a client should not refresh the MPD
   * unless told to do so through inband events, in the stream.
   * In reality however, we found it to not always be the case (even with
   * DASH-IF own streams) and moreover to not always be the best thing to do.
   * We prefer to refresh in average at a regular interval when we do not have
   * this information.
   * /!\ This value is expressed in seconds.
   */
  DASH_FALLBACK_LIFETIME_WHEN_MINIMUM_UPDATE_PERIOD_EQUAL_0: 3,

  /**
   * Max simultaneous MediaKeySessions that will be kept as a cache to avoid
   * doing superfluous license requests.
   * If this number is reached, any new session creation will close the oldest
   * one.
   * @type {Number}
   */
  EME_MAX_SIMULTANEOUS_MEDIA_KEY_SESSIONS: 50,

  /**
   * When playing contents with a persistent license, we will usually store some
   * information related to that MediaKeySession, to be able to play it at a
   * later time.
   *
   * Those information are removed once a MediaKeySession is not considered
   * as "usable" anymore. But to know that, the RxPlayer has to load it.
   *
   * But the RxPlayer does not re-load every persisted MediaKeySession every
   * time to check each one of them one by one, as this would not be a
   * performant thing to do.
   *
   * So this is only done when and if the corresponding content is encountered
   * again and only if it contains the same initialization data.
   *
   * We have to consider that those "information" contain binary data which can
   * be of arbitrary length. Size taken by an array of them can relatively
   * rapidly take a lot of space in JS memory.
   *
   * So to avoid this storage to take too much space (would it be in the chosen
   * browser's storage or in JS memory), we now set a higher bound for the
   * amount of MediaKeySession information that can be stored at the same time.
   *
   * I set the value of 1000 here, as it seems big enough to not be considered a
   * problem (though it can become one, when contents have a lot of keys per
   * content), and still low enough so it should not cause much problem (my
   * method to choose that number was to work with power of 10s and choosing the
   * amount which seemed the most sensible one).
   *
   * This wasn't battle-tested however.
   */
  EME_MAX_STORED_PERSISTENT_SESSION_INFORMATION: 1000,

  /**
   * The player relies on browser events and properties to update its status to
   * "ENDED".
   *
   * Sadly in some cases, like in Chrome 54, this event is never triggered on
   * some contents probably due to a browser bug.
   *
   * This threshold resolves this issue by forcing the status to "ENDED" when:
   *   1. the player is stalling
   *   2. the absolute difference between current playback time and duration is
   *      under this value
   *
   * If set to null, this workaround is disabled and the player only relies on
   * browser events.
   *
   * @type {Number|null}
   */
  FORCED_ENDED_THRESHOLD: 0.001,

  /**
   * Maximum duration from the current position we will let in the buffer when
   * switching an Adaptation of a given type.
   *
   * For example, if we have ``text: { before: 1, after: 4 }``, it means that
   * when switching subtitles, we will let 1 second before and 4 second after
   * the current position in the previous language (until the new segments
   * overwrite it).
   * This is to allow smooth transitions and avoid de-synchronization that
   * can happen when removing the content being decoded.
   * @type {Object}
   */
  ADAPTATION_SWITCH_BUFFER_PADDINGS: {
    video: {
      before: 2,
      after: 2.5
    },
    audio: {
      before: 2,
      after: 2.5
    },
    text: {
      before: 0,
      after: 0
    },
    image: {
      before: 0,
      after: 0
    }
  },

  /**
   * Interval, in milliseconds, at which we should manually flush
   * SourceBuffers.
   * Some browsers (happened with firefox 66) sometimes "forget" to send us
   * `update` or `updateend` events.
   * In that case, we're completely unable to continue the queue here and
   * stay locked in a waiting state.
   * This interval is here to check at regular intervals if the underlying
   * SourceBuffer is currently updating.
   * @type {Number}
   */
  SOURCE_BUFFER_FLUSHING_INTERVAL: 500,

  /**
   * Padding under which we should not buffer from the current time, on
   * Safari. To avoid some buffer appending issues on it, we decide not
   * to load a segment if it may be pushed during playback time.
   * @type {Number} - in seconds
   */
  CONTENT_REPLACEMENT_PADDING: 2,

  /**
   * For video and audio segments, determines two thresholds below which :
   * - The segment is considered as loaded from cache
   * - The segment may be loaded from cache depending on the previous request
   */
  CACHE_LOAD_DURATION_THRESHOLDS: {
    video: 50,
    audio: 10
  },

  /** Interval we will use to poll for checking if an event shall be emitted */
  STREAM_EVENT_EMITTER_POLL_INTERVAL: 250
});

/***/ }),

/***/ 7794:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ MediaElementTrackChoiceManager
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5354);
/* harmony import */ var _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils_event_emitter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1959);
/* harmony import */ var _utils_languages__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7829);


/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Check if track array is different from an other one
 * @param {Array.<Object>} oldTrackArray
 * @param {Array.<Object>} newTrackArray
 * @returns {boolean}
 */

function areTrackArraysDifferent(oldTrackArray, newTrackArray) {
  var _a;

  if (newTrackArray.length !== oldTrackArray.length) {
    return true;
  }

  for (var i = 0; i < newTrackArray.length; i++) {
    if (newTrackArray[i].nativeTrack !== ((_a = oldTrackArray[i]) === null || _a === void 0 ? void 0 : _a.nativeTrack)) {
      return true;
    }
  }

  return false;
}
/**
 * Create audio tracks from native audio tracks.
 * @param {AudioTrackList} audioTracks
 * @returns {Array.<Object>}
 */


function createAudioTracks(audioTracks) {
  var _a;

  var newAudioTracks = [];
  var languagesOccurences = {};

  for (var i = 0; i < audioTracks.length; i++) {
    var audioTrack = audioTracks[i];
    var language = audioTrack.language === "" ? "nolang" : audioTrack.language;
    var occurences = (_a = languagesOccurences[language]) !== null && _a !== void 0 ? _a : 1;
    var id = "gen_audio_" + language + "_" + occurences.toString();
    languagesOccurences[language] = occurences + 1;
    var track = {
      language: audioTrack.language,
      id: id,
      normalized: (0,_utils_languages__WEBPACK_IMPORTED_MODULE_1__/* .default */ .ZP)(audioTrack.language),
      audioDescription: false,
      representations: []
    };
    newAudioTracks.push({
      track: track,
      nativeTrack: audioTrack
    });
  }

  return newAudioTracks;
}
/**
 * Create text tracks from native text tracks.
 * @param {TextTrackList} textTracks
 * @returns {Array.<Object>}
 */


function createTextTracks(textTracks) {
  var _a;

  var newTextTracks = [];
  var languagesOccurences = {};

  for (var i = 0; i < textTracks.length; i++) {
    var textTrack = textTracks[i];
    var language = textTrack.language === "" ? "nolang" : textTrack.language;
    var occurences = (_a = languagesOccurences[language]) !== null && _a !== void 0 ? _a : 1;
    var id = "gen_text_" + language + "_" + occurences.toString();
    languagesOccurences[language] = occurences + 1;
    var track = {
      language: textTrack.language,
      id: id,
      normalized: (0,_utils_languages__WEBPACK_IMPORTED_MODULE_1__/* .default */ .ZP)(textTrack.language),
      closedCaption: textTrack.kind === "captions"
    };
    newTextTracks.push({
      track: track,
      nativeTrack: textTrack
    });
  }

  return newTextTracks;
}
/**
 * Create video tracks from native video tracks.
 * @param {VideoTrackList} videoTracks
 * @returns {Array.<Object>}
 */


function createVideoTracks(videoTracks) {
  var _a;

  var newVideoTracks = [];
  var languagesOccurences = {};

  for (var i = 0; i < videoTracks.length; i++) {
    var videoTrack = videoTracks[i];
    var language = videoTrack.language === "" ? "nolang" : videoTrack.language;
    var occurences = (_a = languagesOccurences[language]) !== null && _a !== void 0 ? _a : 1;
    var id = "gen_video_" + language + "_" + occurences.toString();
    languagesOccurences[language] = occurences + 1;
    newVideoTracks.push({
      track: {
        id: id,
        representations: []
      },
      nativeTrack: videoTrack
    });
  }

  return newVideoTracks;
}
/**
 * Manage video, audio and text tracks for current direct file content.
 * @class MediaElementTrackChoiceManager
 */


var MediaElementTrackChoiceManager = /*#__PURE__*/function (_EventEmitter) {
  _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_0___default()(MediaElementTrackChoiceManager, _EventEmitter);

  function MediaElementTrackChoiceManager(mediaElement) {
    var _this;

    var _a, _b, _c;

    _this = _EventEmitter.call(this) || this;
    _this._preferredAudioTracks = [];
    _this._preferredTextTracks = [];
    _this._preferredVideoTracks = []; // TODO In practice, the audio/video/text tracks API are not always implemented on
    // the media element, although Typescript HTMLMediaElement types tend to mean
    // that can't be undefined.

    _this._nativeAudioTracks = mediaElement.audioTracks;
    _this._nativeVideoTracks = mediaElement.videoTracks;
    _this._nativeTextTracks = mediaElement.textTracks;
    _this._audioTracks = _this._nativeAudioTracks !== undefined ? createAudioTracks(_this._nativeAudioTracks) : [];
    _this._videoTracks = _this._nativeVideoTracks !== undefined ? createVideoTracks(_this._nativeVideoTracks) : [];
    _this._textTracks = _this._nativeTextTracks !== undefined ? createTextTracks(_this._nativeTextTracks) : [];
    _this._lastEmittedNativeAudioTrack = (_a = _this._getPrivateChosenAudioTrack()) === null || _a === void 0 ? void 0 : _a.nativeTrack;
    _this._lastEmittedNativeVideoTrack = (_b = _this._getPrivateChosenVideoTrack()) === null || _b === void 0 ? void 0 : _b.nativeTrack;
    _this._lastEmittedNativeTextTrack = (_c = _this._getPrivateChosenTextTrack()) === null || _c === void 0 ? void 0 : _c.nativeTrack;

    _this._handleNativeTracksCallbacks();

    return _this;
  }
  /**
   * Set the list of preferred audio tracks, in preference order.
   * @param {Array.<Object>} preferredAudioTracks
   * @param {boolean} shouldApply - `true` if those preferences should be
   * applied on the currently loaded Period. `false` if it should only
   * be applied to new content.
   */


  var _proto = MediaElementTrackChoiceManager.prototype;

  _proto.setPreferredAudioTracks = function setPreferredAudioTracks(preferredAudioTracks, shouldApply) {
    this._preferredAudioTracks = preferredAudioTracks;

    if (shouldApply) {
      this._applyAudioPreferences();
    }
  }
  /**
   * Set the list of preferred text tracks, in preference order.
   * @param {Array.<Object>} preferredTextTracks
   * @param {boolean} shouldApply - `true` if those preferences should be
   * applied on the currently loaded Period. `false` if it should only
   * be applied to new content.
   */
  ;

  _proto.setPreferredTextTracks = function setPreferredTextTracks(preferredTextTracks, shouldApply) {
    this._preferredTextTracks = preferredTextTracks;

    if (shouldApply) {
      this._applyTextPreferences();
    }
  }
  /**
   * Set the list of preferred video tracks, in preference order.
   * @param {Array.<Object>} preferredVideoTracks
   * @param {boolean} shouldApply - `true` if those preferences should be
   * applied on the currently loaded Period. `false` if it should only
   * be applied to new content.
   */
  ;

  _proto.setPreferredVideoTracks = function setPreferredVideoTracks(preferredVideoTracks, shouldApply) {
    this._preferredVideoTracks = preferredVideoTracks;

    if (shouldApply) {
      this._applyVideoPreferences();
    }
  }
  /**
   * Update the currently active audio track by setting the wanted audio track's
   * ID property.
   * Throws if the wanted audio track is not found.
   * @param {string|number|undefined} id
   */
  ;

  _proto.setAudioTrackById = function setAudioTrackById(id) {
    for (var i = 0; i < this._audioTracks.length; i++) {
      var _this$_audioTracks$i = this._audioTracks[i],
          track = _this$_audioTracks$i.track,
          nativeTrack = _this$_audioTracks$i.nativeTrack;

      if (track.id === id) {
        nativeTrack.enabled = true;
        this._audioTrackLockedOn = nativeTrack;
        return;
      }
    }

    throw new Error("Audio track not found.");
  }
  /**
   * Disable the currently-active text track, if one.
   */
  ;

  _proto.disableTextTrack = function disableTextTrack() {
    disableTextTracks(this._textTracks);
    this._textTrackLockedOn = null;
  }
  /**
   * Update the currently active text track by setting the wanted text track's
   * ID property.
   * Throws if the wanted text track is not found.
   * @param {string|number|undefined} id
   */
  ;

  _proto.setTextTrackById = function setTextTrackById(id) {
    var hasSetTrack = false;

    for (var i = 0; i < this._textTracks.length; i++) {
      var _this$_textTracks$i = this._textTracks[i],
          track = _this$_textTracks$i.track,
          nativeTrack = _this$_textTracks$i.nativeTrack;

      if (track.id === id) {
        nativeTrack.mode = "showing";
        hasSetTrack = true;
        this._textTrackLockedOn = nativeTrack;
      } else if (nativeTrack.mode === "showing" || nativeTrack.mode === "hidden") {
        nativeTrack.mode = "disabled";
      }
    }

    if (!hasSetTrack) {
      throw new Error("Text track not found.");
    }
  }
  /**
   * Disable the currently-active video track, if one.
   */
  ;

  _proto.disableVideoTrack = function disableVideoTrack() {
    disableVideoTracks(this._videoTracks);
    this._videoTrackLockedOn = null;
  }
  /**
   * Update the currently active video track by setting the wanted video track's
   * ID property.
   * Throws if the wanted video track is not found.
   * @param {string|number|undefined} id
   */
  ;

  _proto.setVideoTrackById = function setVideoTrackById(id) {
    for (var i = 0; i < this._videoTracks.length; i++) {
      var _this$_videoTracks$i = this._videoTracks[i],
          track = _this$_videoTracks$i.track,
          nativeTrack = _this$_videoTracks$i.nativeTrack;

      if (track.id === id) {
        nativeTrack.selected = true;
        this._videoTrackLockedOn = nativeTrack;
        return;
      }
    }

    throw new Error("Video track not found.");
  }
  /**
   * Returns the currently active audio track.
   * Returns `null` if no audio track is active.
   * Returns `undefined` if we cannot know which audio track is active.
   * @returns {Object|null|undefined}
   */
  ;

  _proto.getChosenAudioTrack = function getChosenAudioTrack() {
    var chosenPrivateAudioTrack = this._getPrivateChosenAudioTrack();

    if (chosenPrivateAudioTrack != null) {
      return chosenPrivateAudioTrack.track;
    }

    return chosenPrivateAudioTrack;
  }
  /**
   * Returns the currently active text track.
   * Returns `null` if no text track is active.
   * Returns `undefined` if we cannot know which text track is active.
   * @returns {Object|null|undefined}
   */
  ;

  _proto.getChosenTextTrack = function getChosenTextTrack() {
    var chosenPrivateTextTrack = this._getPrivateChosenTextTrack();

    if (chosenPrivateTextTrack != null) {
      return chosenPrivateTextTrack.track;
    }

    return chosenPrivateTextTrack;
  }
  /**
   * Returns the currently active video track.
   * Returns `null` if no video track is active.
   * Returns `undefined` if we cannot know which video track is active.
   * @returns {Object|null|undefined}
   */
  ;

  _proto.getChosenVideoTrack = function getChosenVideoTrack() {
    var chosenPrivateVideoTrack = this._getPrivateChosenVideoTrack();

    if (chosenPrivateVideoTrack != null) {
      return chosenPrivateVideoTrack.track;
    }

    return chosenPrivateVideoTrack;
  }
  /**
   * Returns a description of every available audio tracks.
   * @returns {Array.<Object>}
   */
  ;

  _proto.getAvailableAudioTracks = function getAvailableAudioTracks() {
    return this._audioTracks.map(function (_ref) {
      var track = _ref.track,
          nativeTrack = _ref.nativeTrack;
      return {
        id: track.id,
        language: track.language,
        normalized: track.normalized,
        audioDescription: track.audioDescription,
        active: nativeTrack.enabled,
        representations: track.representations
      };
    });
  }
  /**
   * Returns a description of every available text tracks.
   * @returns {Array.<Object>}
   */
  ;

  _proto.getAvailableTextTracks = function getAvailableTextTracks() {
    return this._textTracks.map(function (_ref2) {
      var track = _ref2.track,
          nativeTrack = _ref2.nativeTrack;
      return {
        id: track.id,
        language: track.language,
        normalized: track.normalized,
        closedCaption: track.closedCaption,
        active: nativeTrack.mode === "showing"
      };
    });
  }
  /**
   * Returns a description of every available video tracks.
   * @returns {Array.<Object>}
   */
  ;

  _proto.getAvailableVideoTracks = function getAvailableVideoTracks() {
    return this._videoTracks.map(function (_ref3) {
      var track = _ref3.track,
          nativeTrack = _ref3.nativeTrack;
      return {
        id: track.id,
        representations: track.representations,
        active: nativeTrack.selected
      };
    });
  }
  /**
   * Free the resources used by the MediaElementTrackChoiceManager.
   */
  ;

  _proto.dispose = function dispose() {
    if (this._nativeVideoTracks !== undefined) {
      this._nativeVideoTracks.onchange = null;
      this._nativeVideoTracks.onaddtrack = null;
      this._nativeVideoTracks.onremovetrack = null;
    }

    if (this._nativeAudioTracks !== undefined) {
      this._nativeAudioTracks.onchange = null;
      this._nativeAudioTracks.onaddtrack = null;
      this._nativeAudioTracks.onremovetrack = null;
    }

    if (this._nativeTextTracks !== undefined) {
      this._nativeTextTracks.onchange = null;
      this._nativeTextTracks.onaddtrack = null;
      this._nativeTextTracks.onremovetrack = null;
    }

    this.removeEventListener();
  }
  /**
   * Get information about the currently chosen audio track.
   * `undefined` if we cannot know it.
   * `null` if no audio track is chosen.
   * @returns {Object|undefined|null}
   */
  ;

  _proto._getPrivateChosenAudioTrack = function _getPrivateChosenAudioTrack() {
    if (this._nativeAudioTracks === undefined) {
      return undefined;
    }

    for (var i = 0; i < this._audioTracks.length; i++) {
      var audioTrack = this._audioTracks[i];

      if (audioTrack.nativeTrack.enabled) {
        return audioTrack;
      }
    }

    return null;
  }
  /**
   * Get information about the currently chosen video track.
   * `undefined` if we cannot know it.
   * `null` if no video track is chosen.
   * @returns {Object|undefined|null}
   */
  ;

  _proto._getPrivateChosenVideoTrack = function _getPrivateChosenVideoTrack() {
    if (this._nativeVideoTracks === undefined) {
      return undefined;
    }

    for (var i = 0; i < this._videoTracks.length; i++) {
      var videoTrack = this._videoTracks[i];

      if (videoTrack.nativeTrack.selected) {
        return videoTrack;
      }
    }

    return null;
  }
  /**
   * Get information about the currently chosen text track.
   * `undefined` if we cannot know it.
   * `null` if no text track is chosen.
   * @returns {Object|undefined|null}
   */
  ;

  _proto._getPrivateChosenTextTrack = function _getPrivateChosenTextTrack() {
    if (this._nativeTextTracks === undefined) {
      return undefined;
    }

    for (var i = 0; i < this._textTracks.length; i++) {
      var textTrack = this._textTracks[i];

      if (textTrack.nativeTrack.mode === "showing") {
        return textTrack;
      }
    }

    return null;
  }
  /**
   * Iterate over every available audio tracks on the media element and either:
   *   - if the last manually set audio track is found, set that one.
   *   - if not, set the most preferred one
   *   - if we still do not find an optimal track, let the one chosen by default
   */
  ;

  _proto._setOptimalAudioTrack = function _setOptimalAudioTrack() {
    // First check if the last set track is available, set it if that's the case
    if (this._audioTrackLockedOn !== undefined) {
      for (var i = 0; i < this._audioTracks.length; i++) {
        var nativeTrack = this._audioTracks[i].nativeTrack;

        if (nativeTrack === this._audioTrackLockedOn) {
          nativeTrack.enabled = true;
          return;
        }
      }
    }

    this._applyAudioPreferences();
  }
  /**
   * Try to find a track corresponding to the audio track preferences:
   *   - if found, set it as the active track
   *   - if not found, let the chosen audio track by default
   */
  ;

  _proto._applyAudioPreferences = function _applyAudioPreferences() {
    // Re-set the last manually set audio track
    this._audioTrackLockedOn = undefined;
    var preferredAudioTracks = this._preferredAudioTracks;

    for (var i = 0; i < preferredAudioTracks.length; i++) {
      var track = preferredAudioTracks[i];

      if (track !== null && track.language !== undefined) {
        var normalized = (0,_utils_languages__WEBPACK_IMPORTED_MODULE_1__/* .default */ .ZP)(track.language);

        for (var j = 0; j < this._audioTracks.length; j++) {
          var audioTrack = this._audioTracks[j];

          if (audioTrack.track.normalized === normalized && audioTrack.track.audioDescription === track.audioDescription) {
            audioTrack.nativeTrack.enabled = true;
            return;
          }
        }
      }
    } // else just let the default one instead

  }
  /**
   * Iterate over every available text tracks on the media element and either:
   *   - if the last manually set text track is found, set that one.
   *   - if not, set the most preferred one
   *   - if we still do not find an optimal track, just disable it.
   */
  ;

  _proto._setOptimalTextTrack = function _setOptimalTextTrack() {
    // First check if the last set track is available, set it if that's the case
    if (this._textTrackLockedOn === null) {
      disableTextTracks(this._textTracks);
      return;
    } else if (this._textTrackLockedOn !== undefined) {
      for (var i = 0; i < this._textTracks.length; i++) {
        var nativeTrack = this._textTracks[i].nativeTrack;

        if (nativeTrack === this._textTrackLockedOn) {
          // disable the rest
          disableAllTextTracksBut(this._textTracks, nativeTrack);

          if (nativeTrack.mode !== "showing") {
            nativeTrack.mode = "showing";
          }

          return;
        }
      }
    } // Else set the preferred one


    this._applyTextPreferences();
  }
  /**
   * Try to find a track corresponding to the text track preferences:
   *   - if found, set it as the active track
   *   - if not found, let the chosen text track by default
   */
  ;

  _proto._applyTextPreferences = function _applyTextPreferences() {
    // Re-set the last manually set audio track
    this._textTrackLockedOn = undefined;
    var preferredTextTracks = this._preferredTextTracks;

    for (var i = 0; i < preferredTextTracks.length; i++) {
      var track = preferredTextTracks[i];

      if (track === null) {
        disableTextTracks(this._textTracks);
        return;
      }

      var normalized = (0,_utils_languages__WEBPACK_IMPORTED_MODULE_1__/* .default */ .ZP)(track.language);

      for (var j = 0; j < this._textTracks.length; j++) {
        var textTrack = this._textTracks[j];

        if (textTrack.track.normalized === normalized && textTrack.track.closedCaption === track.closedCaption) {
          // disable the rest
          disableAllTextTracksBut(this._textTracks, textTrack.nativeTrack);

          if (textTrack.nativeTrack.mode !== "showing") {
            textTrack.nativeTrack.mode = "showing";
          }

          return;
        }
      }
    } // Else just disable text tracks


    disableTextTracks(this._textTracks);
  }
  /**
   * Iterate over every available video tracks on the media element and either:
   *   - if the last manually set video track is found, set that one.
   *   - if not, set the most preferred one
   *   - if we still do not find an optimal track, let the one chosen by default
   */
  ;

  _proto._setOptimalVideoTrack = function _setOptimalVideoTrack() {
    // 1. first check if the last set track is available, set it if that's the case
    if (this._videoTrackLockedOn === null) {
      disableVideoTracks(this._videoTracks);
      return;
    } else if (this._videoTrackLockedOn !== undefined) {
      for (var i = 0; i < this._videoTracks.length; i++) {
        var nativeTrack = this._videoTracks[i].nativeTrack;

        if (nativeTrack === this._videoTrackLockedOn) {
          nativeTrack.selected = true;
          return;
        }
      }
    } // Else set the preferred one


    this._applyVideoPreferences();
  }
  /**
   * Try to find a track corresponding to the text track preferences:
   *   - if found, set it as the active track
   *   - if not found, let the chosen text track by default
   */
  ;

  _proto._applyVideoPreferences = function _applyVideoPreferences() {
    // Re-set the last manually set video track
    this._videoTrackLockedOn = undefined; // NOTE: As we cannot access either codec information or sign interpretation
    // information easily about the different codecs. It is the same case than
    // if we had only tracks where those were set to undefined.
    // Based on that, we should disable the video track as long as one of the
    // set preferrence is "no video track" (i.e. `null`) as this is the only
    // constraint that we know we can respect.
    // Else, just chose the first track.

    var preferredVideoTracks = this._preferredVideoTracks;
    var hasNullPreference = preferredVideoTracks.some(function (p) {
      return p === null;
    });

    if (hasNullPreference) {
      disableVideoTracks(this._videoTracks);
    } // else just let the default one instead

  }
  /**
   * Monitor native tracks add, remove and change callback and trigger the
   * change events.
   */
  ;

  _proto._handleNativeTracksCallbacks = function _handleNativeTracksCallbacks() {
    var _this2 = this;

    if (this._nativeAudioTracks !== undefined) {
      this._nativeAudioTracks.onaddtrack = function () {
        var _a, _b;

        if (_this2._nativeAudioTracks !== undefined) {
          var newAudioTracks = createAudioTracks(_this2._nativeAudioTracks);

          if (areTrackArraysDifferent(_this2._audioTracks, newAudioTracks)) {
            _this2._audioTracks = newAudioTracks;

            _this2._setOptimalAudioTrack();

            _this2.trigger("availableAudioTracksChange", _this2.getAvailableAudioTracks());

            var chosenAudioTrack = _this2._getPrivateChosenAudioTrack();

            if ((chosenAudioTrack === null || chosenAudioTrack === void 0 ? void 0 : chosenAudioTrack.nativeTrack) !== _this2._lastEmittedNativeAudioTrack) {
              _this2.trigger("audioTrackChange", (_a = chosenAudioTrack === null || chosenAudioTrack === void 0 ? void 0 : chosenAudioTrack.track) !== null && _a !== void 0 ? _a : null);

              _this2._lastEmittedNativeAudioTrack = (_b = chosenAudioTrack === null || chosenAudioTrack === void 0 ? void 0 : chosenAudioTrack.nativeTrack) !== null && _b !== void 0 ? _b : null;
            }
          }
        }
      };

      this._nativeAudioTracks.onremovetrack = function () {
        var _a, _b;

        if (_this2._nativeAudioTracks !== undefined) {
          var newAudioTracks = createAudioTracks(_this2._nativeAudioTracks);

          if (areTrackArraysDifferent(_this2._audioTracks, newAudioTracks)) {
            _this2._audioTracks = newAudioTracks;

            _this2.trigger("availableAudioTracksChange", _this2.getAvailableAudioTracks());

            var chosenAudioTrack = _this2._getPrivateChosenAudioTrack();

            if ((chosenAudioTrack === null || chosenAudioTrack === void 0 ? void 0 : chosenAudioTrack.nativeTrack) !== _this2._lastEmittedNativeAudioTrack) {
              _this2.trigger("audioTrackChange", (_a = chosenAudioTrack === null || chosenAudioTrack === void 0 ? void 0 : chosenAudioTrack.track) !== null && _a !== void 0 ? _a : null);

              _this2._lastEmittedNativeAudioTrack = (_b = chosenAudioTrack === null || chosenAudioTrack === void 0 ? void 0 : chosenAudioTrack.nativeTrack) !== null && _b !== void 0 ? _b : null;
            }
          }
        }
      };

      this._nativeAudioTracks.onchange = function () {
        if (_this2._audioTracks !== undefined) {
          for (var i = 0; i < _this2._audioTracks.length; i++) {
            var _this2$_audioTracks$i = _this2._audioTracks[i],
                track = _this2$_audioTracks$i.track,
                nativeTrack = _this2$_audioTracks$i.nativeTrack;

            if (nativeTrack.enabled) {
              if (nativeTrack !== _this2._lastEmittedNativeAudioTrack) {
                _this2.trigger("audioTrackChange", track);

                _this2._lastEmittedNativeAudioTrack = nativeTrack;
              }

              return;
            }
          }
        }

        if (_this2._lastEmittedNativeAudioTrack !== null) {
          _this2.trigger("audioTrackChange", null);

          _this2._lastEmittedNativeAudioTrack = null;
        }

        return;
      };
    }

    if (this._nativeTextTracks !== undefined) {
      this._nativeTextTracks.onaddtrack = function () {
        var _a, _b;

        if (_this2._nativeTextTracks !== undefined) {
          var newTextTracks = createTextTracks(_this2._nativeTextTracks);

          if (areTrackArraysDifferent(_this2._textTracks, newTextTracks)) {
            _this2._textTracks = newTextTracks;

            _this2._setOptimalTextTrack();

            _this2.trigger("availableTextTracksChange", _this2.getAvailableTextTracks());

            var chosenTextTrack = _this2._getPrivateChosenTextTrack();

            if ((chosenTextTrack === null || chosenTextTrack === void 0 ? void 0 : chosenTextTrack.nativeTrack) !== _this2._lastEmittedNativeTextTrack) {
              _this2.trigger("textTrackChange", (_a = chosenTextTrack === null || chosenTextTrack === void 0 ? void 0 : chosenTextTrack.track) !== null && _a !== void 0 ? _a : null);

              _this2._lastEmittedNativeTextTrack = (_b = chosenTextTrack === null || chosenTextTrack === void 0 ? void 0 : chosenTextTrack.nativeTrack) !== null && _b !== void 0 ? _b : null;
            }
          }
        }
      };

      this._nativeTextTracks.onremovetrack = function () {
        var _a, _b;

        if (_this2._nativeTextTracks !== undefined) {
          var newTextTracks = createTextTracks(_this2._nativeTextTracks);

          if (areTrackArraysDifferent(_this2._textTracks, newTextTracks)) {
            _this2._textTracks = newTextTracks;

            _this2._setOptimalTextTrack();

            _this2.trigger("availableTextTracksChange", _this2.getAvailableTextTracks());

            var chosenTextTrack = _this2._getPrivateChosenTextTrack();

            if ((chosenTextTrack === null || chosenTextTrack === void 0 ? void 0 : chosenTextTrack.nativeTrack) !== _this2._lastEmittedNativeTextTrack) {
              _this2.trigger("textTrackChange", (_a = chosenTextTrack === null || chosenTextTrack === void 0 ? void 0 : chosenTextTrack.track) !== null && _a !== void 0 ? _a : null);

              _this2._lastEmittedNativeTextTrack = (_b = chosenTextTrack === null || chosenTextTrack === void 0 ? void 0 : chosenTextTrack.nativeTrack) !== null && _b !== void 0 ? _b : null;
            }
          }
        }
      };

      this._nativeTextTracks.onchange = function () {
        if (_this2._textTracks !== undefined) {
          for (var i = 0; i < _this2._textTracks.length; i++) {
            var _this2$_textTracks$i = _this2._textTracks[i],
                track = _this2$_textTracks$i.track,
                nativeTrack = _this2$_textTracks$i.nativeTrack;

            if (nativeTrack.mode === "showing") {
              if (nativeTrack !== _this2._lastEmittedNativeTextTrack) {
                _this2.trigger("textTrackChange", track);

                _this2._lastEmittedNativeTextTrack = nativeTrack;
              }

              return;
            }
          }
        }

        if (_this2._lastEmittedNativeTextTrack !== null) {
          _this2.trigger("textTrackChange", null);

          _this2._lastEmittedNativeTextTrack = null;
        }

        return;
      };
    }

    if (this._nativeVideoTracks !== undefined) {
      this._nativeVideoTracks.onaddtrack = function () {
        var _a, _b;

        if (_this2._nativeVideoTracks !== undefined) {
          var newVideoTracks = createVideoTracks(_this2._nativeVideoTracks);

          if (areTrackArraysDifferent(_this2._videoTracks, newVideoTracks)) {
            _this2._videoTracks = newVideoTracks;

            _this2._setOptimalVideoTrack();

            _this2.trigger("availableVideoTracksChange", _this2.getAvailableVideoTracks());

            var chosenVideoTrack = _this2._getPrivateChosenVideoTrack();

            if ((chosenVideoTrack === null || chosenVideoTrack === void 0 ? void 0 : chosenVideoTrack.nativeTrack) !== _this2._lastEmittedNativeVideoTrack) {
              _this2.trigger("videoTrackChange", (_a = chosenVideoTrack === null || chosenVideoTrack === void 0 ? void 0 : chosenVideoTrack.track) !== null && _a !== void 0 ? _a : null);

              _this2._lastEmittedNativeVideoTrack = (_b = chosenVideoTrack === null || chosenVideoTrack === void 0 ? void 0 : chosenVideoTrack.nativeTrack) !== null && _b !== void 0 ? _b : null;
            }
          }
        }
      };

      this._nativeVideoTracks.onremovetrack = function () {
        var _a, _b;

        if (_this2._nativeVideoTracks !== undefined) {
          var newVideoTracks = createVideoTracks(_this2._nativeVideoTracks);

          if (areTrackArraysDifferent(_this2._videoTracks, newVideoTracks)) {
            _this2._videoTracks = newVideoTracks;

            _this2._setOptimalVideoTrack();

            _this2.trigger("availableVideoTracksChange", _this2.getAvailableVideoTracks());

            var chosenVideoTrack = _this2._getPrivateChosenVideoTrack();

            if ((chosenVideoTrack === null || chosenVideoTrack === void 0 ? void 0 : chosenVideoTrack.nativeTrack) !== _this2._lastEmittedNativeVideoTrack) {
              _this2.trigger("videoTrackChange", (_a = chosenVideoTrack === null || chosenVideoTrack === void 0 ? void 0 : chosenVideoTrack.track) !== null && _a !== void 0 ? _a : null);

              _this2._lastEmittedNativeVideoTrack = (_b = chosenVideoTrack === null || chosenVideoTrack === void 0 ? void 0 : chosenVideoTrack.nativeTrack) !== null && _b !== void 0 ? _b : null;
            }
          }
        }
      };

      this._nativeVideoTracks.onchange = function () {
        if (_this2._videoTracks !== undefined) {
          for (var i = 0; i < _this2._videoTracks.length; i++) {
            var _this2$_videoTracks$i = _this2._videoTracks[i],
                track = _this2$_videoTracks$i.track,
                nativeTrack = _this2$_videoTracks$i.nativeTrack;

            if (nativeTrack.selected) {
              if (nativeTrack !== _this2._lastEmittedNativeVideoTrack) {
                _this2.trigger("videoTrackChange", track);

                _this2._lastEmittedNativeVideoTrack = nativeTrack;
              }

              return;
            }
          }
        }

        if (_this2._lastEmittedNativeVideoTrack !== null) {
          _this2.trigger("videoTrackChange", null);

          _this2._lastEmittedNativeVideoTrack = null;
        }

        return;
      };
    }
  };

  return MediaElementTrackChoiceManager;
}(_utils_event_emitter__WEBPACK_IMPORTED_MODULE_2__/* .default */ .Z);
/**
 * Disable all text track elements in the given array from showing.
 * @param {Array.<Object>} textTracks
 */




function disableTextTracks(textTracks) {
  for (var i = 0; i < textTracks.length; i++) {
    var nativeTrack = textTracks[i].nativeTrack;
    nativeTrack.mode = "disabled";
  }
}
/**
 * Disable all text track elements in the given array from showing but one which
 * should stay in the same state it was before.
 * @param {Array.<Object>} textTracks
 * @param {TextTrack} track
 */


function disableAllTextTracksBut(textTracks, track) {
  for (var i = 0; i < textTracks.length; i++) {
    var nativeTrack = textTracks[i].nativeTrack;

    if (nativeTrack !== track && (nativeTrack.mode === "showing" || nativeTrack.mode === "hidden")) {
      nativeTrack.mode = "disabled";
    }
  }
}
/**
 * Disable all video track elements in the given array from showing.
 * Note that browser need to support that use case, which they often do not.
 * @param {Array.<Object>} videoTracks
 */


function disableVideoTracks(videoTracks) {
  for (var i = 0; i < videoTracks.length; i++) {
    var nativeTrack = videoTracks[i].nativeTrack;
    nativeTrack.selected = false;
  }
}

/***/ }),

/***/ 8745:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "ZP": () => /* binding */ eme
});

// UNUSED EXPORTS: clearEMESession, disposeEME, getCurrentKeySystem

// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/merge.js
var merge = __webpack_require__(4370);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/throwError.js
var throwError = __webpack_require__(4944);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/of.js
var of = __webpack_require__(8170);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/empty.js
var empty = __webpack_require__(5631);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/concat.js
var concat = __webpack_require__(9795);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/shareReplay.js
var shareReplay = __webpack_require__(7006);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/filter.js
var filter = __webpack_require__(6008);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/take.js
var take = __webpack_require__(1015);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/tap.js
var tap = __webpack_require__(3068);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/mergeMap.js
var mergeMap = __webpack_require__(7746);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/map.js
var map = __webpack_require__(5709);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/catchError.js
var catchError = __webpack_require__(486);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/ignoreElements.js
var ignoreElements = __webpack_require__(6738);
// EXTERNAL MODULE: ./src/compat/event_listeners.ts + 4 modules
var event_listeners = __webpack_require__(1473);
// EXTERNAL MODULE: ./src/log.ts + 1 modules
var log = __webpack_require__(3887);
// EXTERNAL MODULE: ./src/utils/are_arrays_of_numbers_equal.ts
var are_arrays_of_numbers_equal = __webpack_require__(4791);
// EXTERNAL MODULE: ./src/utils/byte_parsing.ts
var byte_parsing = __webpack_require__(6968);
// EXTERNAL MODULE: ./src/utils/string_parsing.ts
var string_parsing = __webpack_require__(3635);
;// CONCATENATED MODULE: ./src/compat/eme/constants.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

 // The way "pssh" will be written in ISOBMFF files

var PSSH_TO_INTEGER = (0,byte_parsing/* be4toi */.pX)((0,string_parsing/* strToUtf8 */.tG)("pssh"), 0);
;// CONCATENATED MODULE: ./src/compat/eme/get_init_data.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * As we observed on some browsers (IE and Edge), the initialization data on
 * some segments have sometimes duplicated PSSH when sent through an encrypted
 * event (but not when pushed to the SourceBuffer).
 *
 * This function tries to guess if the initialization data contains only PSSHs
 * concatenated (as it is usually the case).
 * If that's the case, it will filter duplicated PSSHs from it.
 *
 * @param {Uint8Array} initData - Raw initialization data
 * @returns {Uint8Array} - Initialization data, "cleaned"
 */

function cleanEncryptedEvent(initData) {
  var resInitData = new Uint8Array();
  var encounteredPSSHs = [];
  var offset = 0;

  while (offset < initData.length) {
    if (initData.length < offset + 8 || (0,byte_parsing/* be4toi */.pX)(initData, offset + 4) !== PSSH_TO_INTEGER) {
      log/* default.warn */.Z.warn("Compat: Unrecognized initialization data. Use as is.");
      return initData;
    }

    var len = (0,byte_parsing/* be4toi */.pX)(new Uint8Array(initData), offset);

    if (offset + len > initData.length) {
      log/* default.warn */.Z.warn("Compat: Unrecognized initialization data. Use as is.");
      return initData;
    }

    var currentPSSH = initData.subarray(offset, offset + len);

    if (isPSSHAlreadyEncountered(encounteredPSSHs, currentPSSH)) {
      log/* default.warn */.Z.warn("Compat: Duplicated PSSH found in initialization data, removing it.");
    } else {
      resInitData = (0,byte_parsing/* concat */.zo)(resInitData, currentPSSH);
      encounteredPSSHs.push(initData);
    }

    offset += len;
  }

  if (offset !== initData.length) {
    log/* default.warn */.Z.warn("Compat: Unrecognized initialization data. Use as is.");
    return initData;
  }

  return resInitData;
}
/**
 * Returns `true` if the given PSSH has already been stored in the
 * `encounteredPSSHs` cache given.
 * Returns `false` otherwise.
 * @param {Array.<Object>} encounteredPSSHs
 * @param {Uint8Array} pssh
 * @returns {boolean}
 */


function isPSSHAlreadyEncountered(encounteredPSSHs, pssh) {
  for (var i = 0; i < encounteredPSSHs.length; i++) {
    var item = encounteredPSSHs[i];

    if ((0,are_arrays_of_numbers_equal/* default */.Z)(pssh, item)) {
      return true;
    }
  }

  return false;
}
/**
 * Take out the two things we need on an encryptedEvent:
 *   - the initialization Data
 *   - the initialization Data type
 *
 * @param {MediaEncryptedEvent} encryptedEvent - Payload received with an
 * "encrypted" event.
 * @returns {Object} - Initialization data and Initialization data type.
 * @throws {EncryptedMediaError} - Throws if no initialization data is
 * encountered in the given event.
 */


function getInitData(encryptedEvent) {
  var initData = encryptedEvent.initData,
      initDataType = encryptedEvent.initDataType;

  if (initData == null) {
    log/* default.warn */.Z.warn("Compat: No init data found on media encrypted event.");
    return {
      initData: initData,
      initDataType: initDataType
    };
  }

  var initDataBytes = new Uint8Array(initData);
  return {
    initData: cleanEncryptedEvent(initDataBytes),
    initDataType: encryptedEvent.initDataType
  };
}
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/defer.js
var defer = __webpack_require__(1410);
// EXTERNAL MODULE: ./src/parsers/containers/isobmff/get_box.ts
var get_box = __webpack_require__(2297);
// EXTERNAL MODULE: ./src/utils/cast_to_observable.ts
var cast_to_observable = __webpack_require__(8117);
;// CONCATENATED MODULE: ./src/compat/eme/generate_key_request.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */







/**
 * Modify "initialization data" sent to a `generateKeyRequest` EME call to
 * improve the player's browser compatibility:
 *
 *   1. some browsers/CDM have problems when the CENC PSSH box is the first
 *      encountered PSSH box in the initialization data (for the moment just
 *      Edge was noted with this behavior).
 *      We found however that it works on every browser when the CENC pssh
 *      box(es) is/are the last box(es) encountered.
 *
 *      To that end, we move CENC pssh boxes at the end of the initialization
 *      data in this function.
 *
 *   2. Some poorly encoded/packaged contents communicate both a CENC with a
 *      pssh version of 0 and one with a version of 1. We found out that this is
 *      not always well handled on some devices/browsers (on Edge and some other
 *      embedded devices that shall remain nameless for now!).
 *
 *      Here this function will filter out CENC pssh with a version different to
 *      1 when one(s) with a version of 1 is/are already present.
 *
 * If the initData is unrecognized or if a CENC PSSH is not found, this function
 * throws.
 * @param {Uint8Array} initData - Initialization data you want to patch
 * @returns {Uint8Array} - Initialization data, patched
 */

function patchInitData(initData) {
  log/* default.info */.Z.info("Compat: Trying to move CENC PSSH from init data at the end of it.");
  var foundCencV1 = false;
  var concatenatedCencs = new Uint8Array();
  var resInitData = new Uint8Array();
  var offset = 0;

  while (offset < initData.length) {
    if (initData.length < offset + 8 || (0,byte_parsing/* be4toi */.pX)(initData, offset + 4) !== PSSH_TO_INTEGER) {
      log/* default.warn */.Z.warn("Compat: unrecognized initialization data. Cannot patch it.");
      throw new Error("Compat: unrecognized initialization data. Cannot patch it.");
    }

    var len = (0,byte_parsing/* be4toi */.pX)(new Uint8Array(initData), offset);

    if (offset + len > initData.length) {
      log/* default.warn */.Z.warn("Compat: unrecognized initialization data. Cannot patch it.");
      throw new Error("Compat: unrecognized initialization data. Cannot patch it.");
    }

    var currentPSSH = initData.subarray(offset, offset + len); // yep

    if (initData[offset + 12] === 0x10 && initData[offset + 13] === 0x77 && initData[offset + 14] === 0xEF && initData[offset + 15] === 0xEC && initData[offset + 16] === 0xC0 && initData[offset + 17] === 0xB2 && initData[offset + 18] === 0x4D && initData[offset + 19] === 0x02 && initData[offset + 20] === 0xAC && initData[offset + 21] === 0xE3 && initData[offset + 22] === 0x3C && initData[offset + 23] === 0x1E && initData[offset + 24] === 0x52 && initData[offset + 25] === 0xE2 && initData[offset + 26] === 0xFB && initData[offset + 27] === 0x4B) {
      var cencOffsets = (0,get_box/* getNextBoxOffsets */.Xj)(currentPSSH);
      var version = cencOffsets === null ? undefined : currentPSSH[cencOffsets[1]];
      log/* default.info */.Z.info("Compat: CENC PSSH found with version", version);

      if (version === undefined) {
        log/* default.warn */.Z.warn("Compat: could not read version of CENC PSSH");
      } else if (foundCencV1 === (version === 1)) {
        // Either `concatenatedCencs` only contains v1 or does not contain any
        concatenatedCencs = (0,byte_parsing/* concat */.zo)(concatenatedCencs, currentPSSH);
      } else if (version === 1) {
        log/* default.warn */.Z.warn("Compat: cenc version 1 encountered, " + "removing every other cenc pssh box.");
        concatenatedCencs = currentPSSH;
        foundCencV1 = true;
      } else {
        log/* default.warn */.Z.warn("Compat: filtering out cenc pssh box with wrong version", version);
      }
    } else {
      resInitData = (0,byte_parsing/* concat */.zo)(resInitData, currentPSSH);
    }

    offset += len;
  }

  if (offset !== initData.length) {
    log/* default.warn */.Z.warn("Compat: unrecognized initialization data. Cannot patch it.");
    throw new Error("Compat: unrecognized initialization data. Cannot patch it.");
  }

  return (0,byte_parsing/* concat */.zo)(resInitData, concatenatedCencs);
}
/**
 * Generate a request from session.
 * @param {MediaKeySession} session - MediaKeySession on which the request will
 * be done.
 * @param {Uint8Array} initData - Initialization data given e.g. by the
 * "encrypted" event for the corresponding request.
 * @param {string} initDataType - Initialization data type given e.g. by the
 * "encrypted" event for the corresponding request.
 * @param {string} sessionType - Type of session you want to generate. Consult
 * EME Specification for more information on session types.
 * @returns {Observable} - Emit when done. Errors if fails.
 */

function generateKeyRequest(session, initializationData) {
  return (0,defer/* defer */.P)(function () {
    var _a;

    log/* default.debug */.Z.debug("Compat: Calling generateRequest on the MediaKeySession");
    var patchedInit;

    try {
      patchedInit = patchInitData(initializationData.data);
    } catch (_e) {
      patchedInit = initializationData.data;
    }

    var initDataType = (_a = initializationData.type) !== null && _a !== void 0 ? _a : "";
    return (0,cast_to_observable/* default */.Z)(session.generateRequest(initDataType, patchedInit)).pipe((0,catchError/* catchError */.K)(function (error) {
      if (initDataType !== "" || !(error instanceof TypeError)) {
        throw error;
      } // On newer EME versions of the specification, the initialization data
      // type given to generateRequest cannot be an empty string (it returns
      // a rejected promise with a TypeError in that case).
      // Retry with a default "cenc" value for initialization data type if
      // we're in that condition.


      log/* default.warn */.Z.warn("Compat: error while calling `generateRequest` with an empty " + "initialization data type. Retrying with a default \"cenc\" value.", error);
      return (0,cast_to_observable/* default */.Z)(session.generateRequest("cenc", patchedInit));
    }));
  });
}
// EXTERNAL MODULE: ./src/config.ts
var config = __webpack_require__(944);
// EXTERNAL MODULE: ./src/errors/encrypted_media_error.ts
var encrypted_media_error = __webpack_require__(5157);
// EXTERNAL MODULE: ./src/utils/array_includes.ts
var array_includes = __webpack_require__(7714);
// EXTERNAL MODULE: ./src/utils/assert_unreachable.ts
var assert_unreachable = __webpack_require__(8418);
// EXTERNAL MODULE: ./src/utils/filter_map.ts
var filter_map = __webpack_require__(2793);
// EXTERNAL MODULE: ./src/utils/is_null_or_undefined.ts
var is_null_or_undefined = __webpack_require__(1946);
;// CONCATENATED MODULE: ./src/core/eme/clean_old_stored_persistent_info.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Remove old information from a PersistentSessionsStore so that it respects the
 * given `limit` as a maximum size. This can be used to prevent its size from
 * growing indefinitely.
 *
 * This is needed because our persistent session information storage is
 * un-bounded in size, adding more data will just add more data without removing
 * the old one - which can be valid or invalid.
 *
 * This is problematic for at least two reasons:
 *   - This data is loaded into JS memory which is finite (and which maximum
 *     bounds depends on the user environment).
 *   - The final storage used (as chosen by the application using the RxPlayer)
 *     will in most cases have a maximum storage size.
 */

function cleanOldStoredPersistentInfo(persistentSessionsStore, limit) {
  if (isNaN(limit) || limit < 0 || limit >= persistentSessionsStore.getLength()) {
    return;
  }

  var numberOfPersistentSessions = persistentSessionsStore.getLength();
  var toDelete = numberOfPersistentSessions - limit;
  log/* default.info */.Z.info("EME: Too many stored persistent sessions, removing some.", numberOfPersistentSessions, toDelete);
  persistentSessionsStore.deleteOldSessions(toDelete);
}
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/mapTo.js
var mapTo = __webpack_require__(5602);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/startWith.js
var startWith = __webpack_require__(3485);
;// CONCATENATED MODULE: ./src/core/eme/clean_old_loaded_sessions.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Close sessions from the loadedSessionsStore to allow at maximum `limit`
 * stored MediaKeySessions in it.
 *
 * Emit event when a MediaKeySession begin to be closed and another when the
 * MediaKeySession is closed.
 * @param {Object} loadedSessionsStore
 * @returns {Observable}
 */

function cleanOldLoadedSessions(loadedSessionsStore, limit) {
  if (limit < 0 || limit >= loadedSessionsStore.getLength()) {
    return empty/* EMPTY */.E;
  }

  var cleaningOldSessions$ = [];
  var entries = loadedSessionsStore.getAll().slice(); // clone

  var toDelete = entries.length - limit;

  for (var i = 0; i < toDelete; i++) {
    var entry = entries[i];
    var cleaning$ = loadedSessionsStore.closeSession(entry.initializationData).pipe((0,mapTo/* mapTo */.h)({
      type: "cleaned-old-session",
      value: entry
    }), (0,startWith/* startWith */.O)({
      type: "cleaning-old-session",
      value: entry
    }));
    cleaningOldSessions$.push(cleaning$);
  }

  return merge/* merge.apply */.T.apply(void 0, cleaningOldSessions$);
}
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/Observable.js + 3 modules
var Observable = __webpack_require__(4379);
// EXTERNAL MODULE: ./src/utils/rx-try_catch.ts
var rx_try_catch = __webpack_require__(5561);
;// CONCATENATED MODULE: ./src/compat/eme/load_session.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





/**
 * Load a persistent session, based on its `sessionId`, on the given
 * MediaKeySession.
 *
 * Returns an Observable which emits:
 *   - true if the persistent MediaKeySession was found and loaded
 *   - false if no persistent MediaKeySession was found with that `sessionId`.
 * Then completes.
 *
 * The Observable throws if anything goes wrong in the process.
 * @param {MediaKeySession} session
 * @param {string} sessionId
 * @returns {Observable}
 */

function loadSession(session, sessionId) {
  return (0,defer/* defer */.P)(function () {
    log/* default.info */.Z.info("Compat/EME: Load persisted session", sessionId);
    return (0,rx_try_catch/* default */.Z)(function () {
      return (0,cast_to_observable/* default */.Z)(session.load(sessionId));
    }, undefined);
  }).pipe((0,mergeMap/* mergeMap */.zg)(function (isLoaded) {
    if (!isLoaded || session.keyStatuses.size > 0) {
      return (0,of.of)(isLoaded);
    } // A browser race condition exists for example in some old Chromium/Chrome
    // versions where the `keyStatuses` property from a loaded MediaKeySession
    // would not be populated directly as the load answer but asynchronously
    // after.
    //
    // Even a delay of `0` millisecond is sufficient, letting us think that it
    // just happens just after and what is required is just to wait the next
    // event loop turn.
    // We found out that creating a micro-task (for example by calling
    // `Promise.resolve.then`) was not sufficient, that's why we're using the
    // somewhat less elegant `setTimeout` solution instead.
    // This is also the reason why I didn't use RxJS's `timer` function, as I'm
    // unsure of possible optimizations (or future optimizations), when the
    // delay to wait is set to `0`.


    return new Observable/* Observable */.y(function (subscriber) {
      var timer = setTimeout(function () {
        subscriber.next(isLoaded);
        subscriber.complete();
      }, 0);
      return function () {
        clearTimeout(timer);
      };
    });
  }));
}
;// CONCATENATED MODULE: ./src/core/eme/utils/is_session_usable.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * If all key statuses attached to session are valid (either not
 * "expired" or "internal-error"), return true.
 * If not, return false.
 * @param {Uint8Array} initData
 * @param {MediaKeySession} loadedSession
 * @returns {MediaKeySession}
 */

function isSessionUsable(loadedSession) {
  if (loadedSession.sessionId === "") {
    return false;
  }

  var keyStatusesMap = loadedSession.keyStatuses;
  var keyStatuses = [];
  keyStatusesMap.forEach(function (keyStatus) {
    keyStatuses.push(keyStatus);
  });

  if (keyStatuses.length <= 0) {
    log/* default.debug */.Z.debug("EME: isSessionUsable: MediaKeySession given has an empty keyStatuses", loadedSession);
    return false;
  }

  if ((0,array_includes/* default */.Z)(keyStatuses, "expired")) {
    log/* default.debug */.Z.debug("EME: isSessionUsable: MediaKeySession given has an expired key", loadedSession.sessionId);
    return false;
  }

  if ((0,array_includes/* default */.Z)(keyStatuses, "internal-error")) {
    log/* default.debug */.Z.debug("EME: isSessionUsable: MediaKeySession given has a key with an " + "internal-error", loadedSession.sessionId);
    return false;
  }

  log/* default.debug */.Z.debug("EME: isSessionUsable: MediaKeySession is usable", loadedSession.sessionId);
  return true;
}
;// CONCATENATED MODULE: ./src/core/eme/create_session.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





/**
 * Create a new Session on the given MediaKeys, corresponding to the given
 * initializationData.
 * If session creating fails, remove the oldest MediaKeySession loaded and
 * retry.
 *
 * /!\ This only creates new sessions.
 * It will fail if loadedSessionsStore already has a MediaKeySession with
 * the given initializationData.
 * @param {Uint8Array} initData
 * @param {string|undefined} initDataType
 * @param {Object} mediaKeysInfos
 * @returns {Observable}
 */

function createSession(stores, initializationData, wantedSessionType) {
  return (0,defer/* defer */.P)(function () {
    var loadedSessionsStore = stores.loadedSessionsStore,
        persistentSessionsStore = stores.persistentSessionsStore;

    if (wantedSessionType === "temporary") {
      return createTemporarySession(loadedSessionsStore, initializationData);
    } else if (persistentSessionsStore === null) {
      log/* default.warn */.Z.warn("EME: Cannot create persistent MediaKeySession, " + "PersistentSessionsStore not created.");
      return createTemporarySession(loadedSessionsStore, initializationData);
    }

    return createAndTryToRetrievePersistentSession(loadedSessionsStore, persistentSessionsStore, initializationData);
  });
}
/**
 * Create a new temporary MediaKeySession linked to the given initData and
 * initDataType.
 * @param {Object} loadedSessionsStore
 * @param {Object} initData
 * @returns {Observable}
 */

function createTemporarySession(loadedSessionsStore, initData) {
  return (0,defer/* defer */.P)(function () {
    log/* default.info */.Z.info("EME: Creating a new temporary session");
    var session = loadedSessionsStore.createSession(initData, "temporary");
    return (0,of.of)({
      type: "created-session",
      value: {
        mediaKeySession: session,
        sessionType: "temporary"
      }
    });
  });
}
/**
 * Create a persistent MediaKeySession and try to load on it a previous
 * MediaKeySession linked to the same initData and initDataType.
 * @param {Object} loadedSessionsStore
 * @param {Object} persistentSessionsStore
 * @param {Object} initData
 * @returns {Observable}
 */


function createAndTryToRetrievePersistentSession(loadedSessionsStore, persistentSessionsStore, initData) {
  return (0,defer/* defer */.P)(function () {
    log/* default.info */.Z.info("EME: Creating persistent MediaKeySession");
    var session = loadedSessionsStore.createSession(initData, "persistent-license");
    var storedEntry = persistentSessionsStore.getAndReuse(initData);

    if (storedEntry === null) {
      return (0,of.of)({
        type: "created-session",
        value: {
          mediaKeySession: session,
          sessionType: "persistent-license"
        }
      });
    }
    /**
     * Helper function to close and restart the current persistent session
     * considered, and re-create it from scratch.
     * @returns {Observable}
     */


    var recreatePersistentSession = function recreatePersistentSession() {
      log/* default.info */.Z.info("EME: Removing previous persistent session.");

      if (persistentSessionsStore.get(initData) !== null) {
        persistentSessionsStore["delete"](initData);
      }

      return loadedSessionsStore.closeSession(initData).pipe((0,map/* map */.U)(function () {
        var newSession = loadedSessionsStore.createSession(initData, "persistent-license");
        return {
          type: "created-session",
          value: {
            mediaKeySession: newSession,
            sessionType: "persistent-license"
          }
        };
      }));
    };

    return loadSession(session, storedEntry.sessionId).pipe((0,mergeMap/* mergeMap */.zg)(function (hasLoadedSession) {
      if (!hasLoadedSession) {
        log/* default.warn */.Z.warn("EME: No data stored for the loaded session");
        persistentSessionsStore["delete"](initData);
        return (0,of.of)({
          type: "created-session",
          value: {
            mediaKeySession: session,
            sessionType: "persistent-license"
          }
        });
      }

      if (hasLoadedSession && isSessionUsable(session)) {
        persistentSessionsStore.add(initData, session);
        log/* default.info */.Z.info("EME: Succeeded to load persistent session.");
        return (0,of.of)({
          type: "loaded-persistent-session",
          value: {
            mediaKeySession: session,
            sessionType: "persistent-license"
          }
        });
      } // Unusable persistent session: recreate a new session from scratch.


      log/* default.warn */.Z.warn("EME: Previous persistent session not usable anymore.");
      return recreatePersistentSession();
    }), (0,catchError/* catchError */.K)(function (err) {
      log/* default.warn */.Z.warn("EME: Unable to load persistent session: " + (err instanceof Error ? err.toString() : "Unknown Error"));
      return recreatePersistentSession();
    }));
  });
}
;// CONCATENATED MODULE: ./src/core/eme/get_session.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */







var EME_MAX_SIMULTANEOUS_MEDIA_KEY_SESSIONS = config/* default.EME_MAX_SIMULTANEOUS_MEDIA_KEY_SESSIONS */.Z.EME_MAX_SIMULTANEOUS_MEDIA_KEY_SESSIONS;
/**
 * Handle MediaEncryptedEvents sent by a HTMLMediaElement:
 * Either create a MediaKeySession, recuperate a previous MediaKeySession or
 * load a persistent session.
 *
 * Some previously created MediaKeySession can be closed in this process to
 * respect the maximum limit of concurrent MediaKeySession, as defined by the
 * `EME_MAX_SIMULTANEOUS_MEDIA_KEY_SESSIONS` config property.
 *
 * You can refer to the events emitted to know about the current situation.
 * @param {Event} initializationDataInfo
 * @param {Object} handledInitData
 * @param {Object} mediaKeysInfos
 * @returns {Observable}
 */

function getSession(initializationData, stores, wantedSessionType) {
  return (0,defer/* defer */.P)(function () {
    /**
     * Store previously-loaded MediaKeySession with the same initialization data, if one.
     */
    var previousLoadedSession = null;
    var loadedSessionsStore = stores.loadedSessionsStore,
        persistentSessionsStore = stores.persistentSessionsStore;
    var entry = loadedSessionsStore.getAndReuse(initializationData);

    if (entry !== null) {
      previousLoadedSession = entry.mediaKeySession;

      if (isSessionUsable(previousLoadedSession)) {
        log/* default.info */.Z.info("EME: Reuse loaded session", previousLoadedSession.sessionId);
        return (0,of.of)({
          type: "loaded-open-session",
          value: {
            mediaKeySession: previousLoadedSession,
            sessionType: entry.sessionType,
            initializationData: initializationData
          }
        });
      } else if (persistentSessionsStore !== null) {
        // If the session is not usable anymore, we can also remove it from the
        // PersistentSessionsStore.
        // TODO Are we sure this is always what we want?
        persistentSessionsStore["delete"](initializationData);
      }
    }

    return (previousLoadedSession != null ? loadedSessionsStore.closeSession(initializationData) : (0,of.of)(null)).pipe((0,mergeMap/* mergeMap */.zg)(function () {
      return (0,concat/* concat */.z)(cleanOldLoadedSessions(loadedSessionsStore, EME_MAX_SIMULTANEOUS_MEDIA_KEY_SESSIONS - 1), createSession(stores, initializationData, wantedSessionType).pipe((0,map/* map */.U)(function (evt) {
        return {
          type: evt.type,
          value: {
            mediaKeySession: evt.value.mediaKeySession,
            sessionType: evt.value.sessionType,
            initializationData: initializationData
          }
        };
      })));
    }));
  });
}
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/ReplaySubject.js + 4 modules
var ReplaySubject = __webpack_require__(2135);
// EXTERNAL MODULE: ./src/compat/eme/custom_media_keys/index.ts + 7 modules
var custom_media_keys = __webpack_require__(6139);
// EXTERNAL MODULE: ./src/core/eme/media_keys_infos_store.ts
var media_keys_infos_store = __webpack_require__(6033);
;// CONCATENATED MODULE: ./src/core/eme/attach_media_keys.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





/**
 * Dispose the media keys on media element.
 * @param {Object} mediaElement
 * @returns {Observable}
 */

function disableMediaKeys(mediaElement) {
  return (0,defer/* defer */.P)(function () {
    media_keys_infos_store/* default.setState */.Z.setState(mediaElement, null);
    return (0,custom_media_keys/* setMediaKeys */.Y)(mediaElement, null);
  });
}
/**
 * Attach MediaKeys and its associated state to an HTMLMediaElement.
 *
 * /!\ Mutates heavily MediaKeysInfosStore
 * @param {Object} mediaKeysInfos
 * @param {HTMLMediaElement} mediaElement
 * @returns {Observable}
 */

function attachMediaKeys(mediaElement, _ref) {
  var keySystemOptions = _ref.keySystemOptions,
      loadedSessionsStore = _ref.loadedSessionsStore,
      mediaKeySystemAccess = _ref.mediaKeySystemAccess,
      mediaKeys = _ref.mediaKeys;
  return (0,defer/* defer */.P)(function () {
    var previousState = media_keys_infos_store/* default.getState */.Z.getState(mediaElement);
    var closeAllSessions$ = previousState !== null && previousState.loadedSessionsStore !== loadedSessionsStore ? previousState.loadedSessionsStore.closeAllSessions() : (0,of.of)(null);
    return closeAllSessions$.pipe((0,mergeMap/* mergeMap */.zg)(function () {
      media_keys_infos_store/* default.setState */.Z.setState(mediaElement, {
        keySystemOptions: keySystemOptions,
        mediaKeySystemAccess: mediaKeySystemAccess,
        mediaKeys: mediaKeys,
        loadedSessionsStore: loadedSessionsStore
      });

      if (mediaElement.mediaKeys === mediaKeys) {
        return (0,of.of)(null);
      }

      log/* default.info */.Z.info("EME: Attaching MediaKeys to the media element");
      return (0,custom_media_keys/* setMediaKeys */.Y)(mediaElement, mediaKeys).pipe((0,tap/* tap */.b)(function () {
        log/* default.info */.Z.info("EME: MediaKeys attached with success");
      }));
    }));
  });
}
// EXTERNAL MODULE: ./src/compat/browser_detection.ts
var browser_detection = __webpack_require__(3666);
;// CONCATENATED MODULE: ./src/compat/should_renew_media_keys.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns true if the current target require the media keys to be renewed on
 * each content.
 * @returns {Boolean}
 */

function shouldRenewMediaKeys() {
  return browser_detection/* isIE11 */.fq;
}
// EXTERNAL MODULE: ./src/utils/flat_map.ts
var flat_map = __webpack_require__(9592);
;// CONCATENATED MODULE: ./src/core/eme/find_key_system.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */









var EME_DEFAULT_WIDEVINE_ROBUSTNESSES = config/* default.EME_DEFAULT_WIDEVINE_ROBUSTNESSES */.Z.EME_DEFAULT_WIDEVINE_ROBUSTNESSES,
    EME_KEY_SYSTEMS = config/* default.EME_KEY_SYSTEMS */.Z.EME_KEY_SYSTEMS;
/**
 * @param {Array.<Object>} keySystems
 * @param {MediaKeySystemAccess} currentKeySystemAccess
 * @param {Object} currentKeySystemOptions
 * @returns {null|Object}
 */

function checkCachedMediaKeySystemAccess(keySystems, currentKeySystemAccess, currentKeySystemOptions) {
  var mksConfiguration = currentKeySystemAccess.getConfiguration();

  if (shouldRenewMediaKeys() || mksConfiguration == null) {
    return null;
  }

  var firstCompatibleOption = keySystems.filter(function (ks) {
    // TODO Do it with MediaKeySystemAccess.prototype.keySystem instead
    if (ks.type !== currentKeySystemOptions.type) {
      return false;
    }

    if ((ks.persistentLicense === true || ks.persistentStateRequired === true) && mksConfiguration.persistentState !== "required") {
      return false;
    }

    if (ks.distinctiveIdentifierRequired === true && mksConfiguration.distinctiveIdentifier !== "required") {
      return false;
    }

    return true;
  })[0];

  if (firstCompatibleOption != null) {
    return {
      keySystemOptions: firstCompatibleOption,
      keySystemAccess: currentKeySystemAccess
    };
  }

  return null;
}
/**
 * Find key system canonical name from key system type.
 * @param {string} ksType - Obtained via inversion
 * @returns {string|undefined} - Either the canonical name, or undefined.
 */


function findKeySystemCanonicalName(ksType) {
  for (var _i = 0, _Object$keys = Object.keys(EME_KEY_SYSTEMS); _i < _Object$keys.length; _i++) {
    var ksName = _Object$keys[_i];

    if ((0,array_includes/* default */.Z)(EME_KEY_SYSTEMS[ksName], ksType)) {
      return ksName;
    }
  }

  return undefined;
}
/**
 * Build configuration for the requestMediaKeySystemAccess EME API, based
 * on the current keySystem object.
 * @param {string} [ksName] - Generic name for the key system. e.g. "clearkey",
 * "widevine", "playready". Can be used to make exceptions depending on it.
 * @param {Object} keySystem
 * @returns {Array.<Object>} - Configuration to give to the
 * requestMediaKeySystemAccess API.
 */


function buildKeySystemConfigurations(ksName, keySystem) {
  var sessionTypes = ["temporary"];
  var persistentState = "optional";
  var distinctiveIdentifier = "optional";

  if (keySystem.persistentLicense === true) {
    persistentState = "required";
    sessionTypes.push("persistent-license");
  }

  if (keySystem.persistentStateRequired === true) {
    persistentState = "required";
  }

  if (keySystem.distinctiveIdentifierRequired === true) {
    distinctiveIdentifier = "required";
  } // Set robustness, in order of consideration:
  //   1. the user specified its own robustnesses
  //   2. a "widevine" key system is used, in that case set the default widevine
  //      robustnesses as defined in the config
  //   3. set an undefined robustness


  var videoRobustnesses = keySystem.videoRobustnesses != null ? keySystem.videoRobustnesses : ksName === "widevine" ? EME_DEFAULT_WIDEVINE_ROBUSTNESSES : [];
  var audioRobustnesses = keySystem.audioRobustnesses != null ? keySystem.audioRobustnesses : ksName === "widevine" ? EME_DEFAULT_WIDEVINE_ROBUSTNESSES : [];

  if (videoRobustnesses.length === 0) {
    videoRobustnesses.push(undefined);
  }

  if (audioRobustnesses.length === 0) {
    audioRobustnesses.push(undefined);
  } // From the W3 EME spec, we have to provide videoCapabilities and
  // audioCapabilities.
  // These capabilities must specify a codec (even though you can use a
  // completely different codec afterward).
  // It is also strongly recommended to specify the required security
  // robustness. As we do not want to forbide any security level, we specify
  // every existing security level from highest to lowest so that the best
  // security level is selected.
  // More details here:
  // https://storage.googleapis.com/wvdocs/Chrome_EME_Changes_and_Best_Practices.pdf
  // https://www.w3.org/TR/encrypted-media/#get-supported-configuration-and-consent


  var videoCapabilities = (0,flat_map/* default */.Z)(videoRobustnesses, function (robustness) {
    return [{
      contentType: "video/mp4;codecs=\"avc1.4d401e\"",
      robustness: robustness
    }, {
      contentType: "video/mp4;codecs=\"avc1.42e01e\"",
      robustness: robustness
    }, {
      contentType: "video/webm;codecs=\"vp8\"",
      robustness: robustness
    }];
  });
  var audioCapabilities = (0,flat_map/* default */.Z)(audioRobustnesses, function (robustness) {
    return [{
      contentType: "audio/mp4;codecs=\"mp4a.40.2\"",
      robustness: robustness
    }, {
      contentType: "audio/webm;codecs=opus",
      robustness: robustness
    }];
  }); // TODO Re-test with a set contentType but an undefined robustness on the
  // STBs on which this problem was found.
  //
  // add another with no {audio,video}Capabilities for some legacy browsers.
  // As of today's spec, this should return NotSupported but the first
  // candidate configuration should be good, so we should have no downside
  // doing that.
  // initDataTypes: ["cenc"],
  // videoCapabilities: undefined,
  // audioCapabilities: undefined,
  // distinctiveIdentifier,
  // persistentState,
  // sessionTypes,

  return [{
    initDataTypes: ["cenc"],
    videoCapabilities: videoCapabilities,
    audioCapabilities: audioCapabilities,
    distinctiveIdentifier: distinctiveIdentifier,
    persistentState: persistentState,
    sessionTypes: sessionTypes
  }];
}
/**
 * Try to find a compatible key system from the keySystems array given.
 *
 * Returns an Observable which, when subscribed to, will request a
 * MediaKeySystemAccess based on the various keySystems provided. This
 * Observable will:
 *   - emit the MediaKeySystemAccess and the keySystems as an object, when
 *     found. The object is under this form:
 *     {
 *       keySystemAccess {MediaKeySystemAccess}
 *       keySystem {Object}
 *     }
 *   - complete immediately after emitting.
 *   - throw if no  compatible key system has been found.
 *
 * @param {HTMLMediaElement} mediaElement
 * @param {Array.<Object>} keySystems - The keySystems you want to test.
 * @returns {Observable}
 */


function getMediaKeySystemAccess(mediaElement, keySystemsConfigs) {
  return (0,defer/* defer */.P)(function () {
    log/* default.info */.Z.info("EME: Searching for compatible MediaKeySystemAccess");
    var currentState = media_keys_infos_store/* default.getState */.Z.getState(mediaElement);

    if (currentState != null) {
      // Fast way to find a compatible keySystem if the currently loaded
      // one as exactly the same compatibility options.
      var cachedKeySystemAccess = checkCachedMediaKeySystemAccess(keySystemsConfigs, currentState.mediaKeySystemAccess, currentState.keySystemOptions);

      if (cachedKeySystemAccess !== null) {
        log/* default.info */.Z.info("EME: Found cached compatible keySystem", cachedKeySystemAccess);
        return (0,of.of)({
          type: "reuse-media-key-system-access",
          value: {
            mediaKeySystemAccess: cachedKeySystemAccess.keySystemAccess,
            options: cachedKeySystemAccess.keySystemOptions
          }
        });
      }
    }
    /**
     * Array of set keySystems for this content.
     * Each item of this array is an object containing the following keys:
     *   - keyName {string}: keySystem canonical name (e.g. "widevine")
     *   - keyType {string}: keySystem type (e.g. "com.widevine.alpha")
     *   - keySystem {Object}: the original keySystem object
     * @type {Array.<Object>}
     */


    var keySystemsType = keySystemsConfigs.reduce(function (arr, keySystemOptions) {
      var managedRDNs = EME_KEY_SYSTEMS[keySystemOptions.type];
      var ksType;

      if (managedRDNs != null) {
        ksType = managedRDNs.map(function (keyType) {
          var keyName = keySystemOptions.type;
          return {
            keyName: keyName,
            keyType: keyType,
            keySystemOptions: keySystemOptions
          };
        });
      } else {
        var keyName = findKeySystemCanonicalName(keySystemOptions.type);
        var keyType = keySystemOptions.type;
        ksType = [{
          keyName: keyName,
          keyType: keyType,
          keySystemOptions: keySystemOptions
        }];
      }

      return arr.concat(ksType);
    }, []);
    return recursivelyTestKeySystems(0);
    /**
     * Test all key system configuration stored in `keySystemsType` one by one
     * recursively.
     * Returns an Observable which emit the MediaKeySystemAccess if one was
     * found compatible with one of the configurations or just throws if none
     * were found to be compatible.
     * @param {Number} index - The index in `keySystemsType` to start from.
     * Should be set to `0` when calling directly.
     * @returns {Observable}
     */

    function recursivelyTestKeySystems(index) {
      // if we iterated over the whole keySystemsType Array, quit on error
      if (index >= keySystemsType.length) {
        var error = new encrypted_media_error/* default */.Z("INCOMPATIBLE_KEYSYSTEMS", "No key system compatible with your " + "wanted configuration has been found " + "in the current browser.");
        return (0,throwError/* throwError */._)(error);
      }

      if (custom_media_keys/* requestMediaKeySystemAccess */.N == null) {
        var _error = Error("requestMediaKeySystemAccess is not " + "implemented in your browser.");

        return (0,throwError/* throwError */._)(_error);
      }

      var _keySystemsType$index = keySystemsType[index],
          keyName = _keySystemsType$index.keyName,
          keyType = _keySystemsType$index.keyType,
          keySystemOptions = _keySystemsType$index.keySystemOptions;
      var keySystemConfigurations = buildKeySystemConfigurations(keyName, keySystemOptions);
      log/* default.debug */.Z.debug("EME: Request keysystem access " + keyType + "," + (index + 1 + " of " + keySystemsType.length), keySystemConfigurations);
      return (0,custom_media_keys/* requestMediaKeySystemAccess */.N)(keyType, keySystemConfigurations).pipe((0,map/* map */.U)(function (keySystemAccess) {
        log/* default.info */.Z.info("EME: Found compatible keysystem", keyType, keySystemConfigurations);
        return {
          type: "create-media-key-system-access",
          value: {
            options: keySystemOptions,
            mediaKeySystemAccess: keySystemAccess
          }
        };
      }), (0,catchError/* catchError */.K)(function () {
        log/* default.debug */.Z.debug("EME: Rejected access to keysystem", keyType, keySystemConfigurations);
        return recursivelyTestKeySystems(index + 1);
      }));
    }
  });
}
// EXTERNAL MODULE: ./src/utils/hash_buffer.ts
var hash_buffer = __webpack_require__(2870);
;// CONCATENATED MODULE: ./src/core/eme/server_certificate_store.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Keep track of server certificate which have been set for a MediaKeys.
 * As it is impossible for a MediaKeys to have his server certificate reset
 * or updated, we consider that once it has been set, it will remain set until
 * the MediaKeys instance is killed.
 *
 * So, a WeakMap helps keeping a trace of which server certificate (identified
 * with a unique hash) is set on a MediaKeys.
 * `null` indicate that we don't know (and not `undefined`, because this is the
 * default value for when a WeakMap has no value for a key) which server
 * certificate is attached to a MediaKeys instance (most likely because related
 * EME APIs failed or had an unexpected behavior).
 */

var serverCertificateHashesMap = new WeakMap();
/** ServerCertificateStore */

/* harmony default export */ const server_certificate_store = ({
  /**
   * Tells the ServerCertificateStore that you begin to call the APIs to set a
   * ServerCertificate on `mediaKeys`.
   *
   * Calling this function is necessary due to how server certificate work
   * currently in EME APIs:
   * Because right now, it is impossible to tell if a MediaKeys instance has an
   * attached ServerCertificate or not when the corresponding API fails or if it
   * never answers, we prefer to announce through this function that the current
   * server certificate attached to this MediaKeys is for now invalid.
   * @param {MediaKeys | Object} mediaKeys
   */
  prepare: function prepare(mediaKeys) {
    serverCertificateHashesMap.set(mediaKeys, null);
  },

  /**
   * Attach a new server certificate to a MediaKeys in the
   * ServerCertificateStore.
   *
   * Only one server certificate should ever be attached to a MediaKeys
   * instance and the `prepare` function should have been called before any
   * action to update the server certificate took place (this function does not
   * enforce either of those behaviors).
   * @param {MediaKeys | Object} mediaKeys
   * @param {ArrayBufferView | BufferSource} serverCertificate
   */
  set: function set(mediaKeys, serverCertificate) {
    var formattedServerCertificate = serverCertificate instanceof Uint8Array ? serverCertificate : new Uint8Array(serverCertificate instanceof ArrayBuffer ? serverCertificate : serverCertificate.buffer);
    var hash = (0,hash_buffer/* default */.Z)(formattedServerCertificate);
    serverCertificateHashesMap.set(mediaKeys, {
      hash: hash,
      serverCertificate: formattedServerCertificate
    });
  },

  /**
   * Returns `true` if the MediaKeys instance has an attached ServerCertificate.
   * Returns `false` if it doesn't.
   *
   * Returns `undefined` if we cannot know, most likely because related EME APIs
   * failed or had an unexpected behavior.
   * @param {MediaKeys} mediaKeys
   * @returns {Boolean|undefined}
   */
  hasOne: function hasOne(mediaKeys) {
    var currentServerCertificate = serverCertificateHashesMap.get(mediaKeys);
    return currentServerCertificate === undefined ? false : currentServerCertificate === null ? undefined : true;
  },

  /**
   * Returns `true` if the given `mediaKeys` has `serverCertificate` attached to
   * it.
   * Returns `false` either if it doesn't of if we doesn't know if it does.
   * @param {MediaKeys | Object} mediaKeys
   * @param {ArrayBufferView | BufferSource} serverCertificate
   * @returns {boolean}
   */
  has: function has(mediaKeys, serverCertificate) {
    var serverCertificateHash = serverCertificateHashesMap.get(mediaKeys);

    if (serverCertificateHash === undefined || serverCertificateHash === null) {
      return false;
    }

    var oldHash = serverCertificateHash.hash,
        oldServerCertificate = serverCertificateHash.serverCertificate;
    var newServerCertificate = serverCertificate instanceof Uint8Array ? serverCertificate : new Uint8Array(serverCertificate instanceof ArrayBuffer ? serverCertificate : serverCertificate.buffer);
    var newHash = (0,hash_buffer/* default */.Z)(newServerCertificate);

    if (newHash !== oldHash || oldServerCertificate.length !== newServerCertificate.length) {
      return false;
    }

    for (var i = 0; i < oldServerCertificate.length; i++) {
      if (oldServerCertificate[i] !== newServerCertificate[i]) {
        return false;
      }
    }

    return true;
  }
});
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/race.js
var race = __webpack_require__(8821);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/timer.js
var timer = __webpack_require__(9604);
;// CONCATENATED MODULE: ./src/compat/eme/close_session.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Close session and returns and observable that emits when
 * the session is closed.
 * @param {MediaKeySession|Object} session
 * @returns {Observable}
 */

function closeSession$(session) {
  return (0,race/* race */.S3)((0,cast_to_observable/* default */.Z)(session.close()), // If the session is not closed after 1000ms, try
  // to call another method on session to guess if
  // session is closed or not.
  (0,timer/* timer */.H)(1000).pipe((0,mergeMap/* mergeMap */.zg)(function () {
    var tryToUpdateSession$ = (0,cast_to_observable/* default */.Z)(session.update(new Uint8Array(1)));
    return tryToUpdateSession$.pipe( // Update has resolved, so we can't know if session is closed
    (0,map/* map */.U)(function () {
      throw new Error("Compat: Couldn't know if session is " + "closed");
    }), (0,catchError/* catchError */.K)(function (err) {
      // The caught error can tell if session is closed
      // (Chrome may throw this error)
      if (err instanceof Error && err.message === "The session is already closed.") {
        return (0,of.of)(null);
      } // The `closed` promise may resolve, even if `close()` result has not
      // (it may happen on Firefox). Wait for it and timeout after 1 second.


      var sessionIsClosed$ = (0,cast_to_observable/* default */.Z)(session.closed);
      return (0,race/* race */.S3)(sessionIsClosed$, (0,timer/* timer */.H)(1000).pipe((0,map/* map */.U)(function () {
        throw new Error("Compat: Couldn't know if session is " + "closed");
      })));
    }));
  })));
}
;// CONCATENATED MODULE: ./src/core/eme/utils/init_data_store.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Store a unique value associated to an initData and initDataType.
 * @class InitDataStore
 */

var InitDataStore = /*#__PURE__*/function () {
  /** Construct a new InitDataStore.  */
  function InitDataStore() {
    this._storage = [];
  }
  /**
   * Returns all stored value, in the order in which they have been stored.
   * Note: it is possible to move a value to the end of this array by calling
   * the `getAndReuse` method.
   * @returns {Array}
   */


  var _proto = InitDataStore.prototype;

  _proto.getAll = function getAll() {
    return this._storage.map(function (item) {
      return item.value;
    });
  }
  /**
   * Returns the number of stored values.
   * @returns {number}
   */
  ;

  _proto.getLength = function getLength() {
    return this._storage.length;
  }
  /**
   * Returns the element associated with the given initData and initDataType.
   * Returns `undefined` if not found.
   * @param {Uint8Array} initData
   * @param {string|undefined} initDataType
   * @returns {*}
   */
  ;

  _proto.get = function get(initializationData) {
    var initDataHash = (0,hash_buffer/* default */.Z)(initializationData.data);

    var index = this._findIndex(initializationData, initDataHash);

    return index >= 0 ? this._storage[index].value : undefined;
  }
  /**
   * Like `get`, but also move the corresponding value at the end of the store
   * (as returned by `getAll`) if found.
   * This can be used for example to tell when a previously-stored value is
   * re-used to then be able to implement a caching replacement algorithm based
   * on the least-recently-used values by just evicting the first values
   * returned by `getAll`.
   * @param {Uint8Array} initData
   * @param {string|undefined} initDataType
   * @returns {*}
   */
  ;

  _proto.getAndReuse = function getAndReuse(initializationData) {
    var initDataHash = (0,hash_buffer/* default */.Z)(initializationData.data);

    var index = this._findIndex(initializationData, initDataHash);

    if (index === -1) {
      return undefined;
    }

    var item = this._storage.splice(index, 1)[0];

    this._storage.push(item);

    return item.value;
  }
  /**
   * Add to the store a value linked to the corresponding initData and
   * initDataType.
   * If a value was already stored linked to those, replace it.
   * @param {Uint8Array} initData
   * @param {string|undefined} initDataType
   * @returns {boolean}
   */
  ;

  _proto.store = function store(initializationData, value) {
    var initDataHash = (0,hash_buffer/* default */.Z)(initializationData.data);

    var indexOf = this._findIndex(initializationData, initDataHash);

    if (indexOf >= 0) {
      // this._storage contains the stored value in the same order they have
      // been put. So here we want to remove the previous element and re-push
      // it to the end.
      this._storage.splice(indexOf, 1);
    }

    this._storage.push({
      initData: initializationData.data,
      initDataType: initializationData.type,
      initDataHash: initDataHash,
      value: value
    });
  }
  /**
   * Add to the store a value linked to the corresponding initData and
   * initDataType.
   * If a value linked to those was already stored, do nothing and returns
   * `false`.
   * If not, add the value and return `true`.
   *
   * This can be used as a more performant version of doing both a `get` call -
   * to see if a value is stored linked to that data - and then if not doing a
   * store. `storeIfNone` is more performant as it will only perform hashing
   * and a look-up a single time.
   * @param {Uint8Array} initData
   * @param {string|undefined} initDataType
   * @returns {boolean}
   */
  ;

  _proto.storeIfNone = function storeIfNone(initializationData, value) {
    var initDataHash = (0,hash_buffer/* default */.Z)(initializationData.data);

    var indexOf = this._findIndex(initializationData, initDataHash);

    if (indexOf >= 0) {
      return false;
    }

    this._storage.push({
      initData: initializationData.data,
      initDataType: initializationData.type,
      initDataHash: initDataHash,
      value: value
    });

    return true;
  }
  /**
   * Remove an initDataType and initData combination from this store.
   * Returns the associated value if it has been found, `undefined` otherwise.
   * @param {Uint8Array} initData
   * @param {string|undefined} initDataType
   * @returns {*}
   */
  ;

  _proto.remove = function remove(initializationData) {
    var initDataHash = (0,hash_buffer/* default */.Z)(initializationData.data);

    var indexOf = this._findIndex(initializationData, initDataHash);

    if (indexOf === -1) {
      return undefined;
    }

    return this._storage.splice(indexOf, 1)[0].value;
  }
  /**
   * Find the index of the corresponding initData and initDataType in
   * `this._storage`. Returns `-1` if not found.
   * @param {Uint8Array} initData
   * @param {string|undefined} initDataType
   * @param {number} initDataHash
   * @returns {boolean}
   */
  ;

  _proto._findIndex = function _findIndex(initializationData, initDataHash) {
    var initDataType = initializationData.type,
        initData = initializationData.data; // Begin by the last element as we usually re-encounter the last stored
    // initData sooner than the first one.

    for (var i = this._storage.length - 1; i >= 0; i--) {
      var stored = this._storage[i];

      if (initDataHash === stored.initDataHash && initDataType === stored.initDataType) {
        if ((0,are_arrays_of_numbers_equal/* default */.Z)(initData, stored.initData)) {
          return i;
        }
      }
    }

    return -1;
  };

  return InitDataStore;
}();


;// CONCATENATED MODULE: ./src/core/eme/utils/loaded_sessions_store.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */







/**
 * Create and store MediaKeySessions linked to a single MediaKeys
 * instance.
 *
 * Keep track of sessionTypes and of the initialization data each
 * MediaKeySession is created for.
 * @class LoadedSessionsStore
 */

var LoadedSessionsStore = /*#__PURE__*/function () {
  /**
   * Create a new LoadedSessionsStore, which will store information about
   * loaded MediaKeySessions on the given MediaKeys instance.
   * @param {MediaKeys} mediaKeys
   */
  function LoadedSessionsStore(mediaKeys) {
    this._mediaKeys = mediaKeys;
    this._storage = new InitDataStore();
  }
  /**
   * Returns the stored MediaKeySession information related to the
   * given initDataType and initData if found.
   * Returns `null` if no such MediaKeySession is stored.
   * @param {Uint8Array} initData
   * @param {string|undefined} initDataType
   * @returns {Object|null}
   */


  var _proto = LoadedSessionsStore.prototype;

  _proto.get = function get(initializationData) {
    var entry = this._storage.get(initializationData);

    return entry === undefined ? null : {
      mediaKeySession: entry.mediaKeySession,
      sessionType: entry.sessionType
    };
  }
  /**
   * Like `get` but also moves the corresponding MediaKeySession to the end of
   * its internal storage, as returned by the `getAll` method.
   *
   * This can be used for example to tell when a previously-stored
   * MediaKeySession is re-used to then be able to implement a caching
   * replacement algorithm based on the least-recently-used values by just
   * evicting the first values returned by `getAll`.
   * @param {Uint8Array} initData
   * @param {string|undefined} initDataType
   * @returns {Object|null}
   */
  ;

  _proto.getAndReuse = function getAndReuse(initializationData) {
    var entry = this._storage.getAndReuse(initializationData);

    return entry === undefined ? null : {
      mediaKeySession: entry.mediaKeySession,
      sessionType: entry.sessionType
    };
  }
  /**
   * Create a new MediaKeySession and store it in this store.
   * @throws {EncryptedMediaError}
   * @param {Uint8Array} initData
   * @param {string|undefined} initDataType
   * @param {string} sessionType
   * @returns {MediaKeySession}
   */
  ;

  _proto.createSession = function createSession(initializationData, sessionType) {
    var _this = this;

    if (this._storage.get(initializationData) !== undefined) {
      throw new encrypted_media_error/* default */.Z("MULTIPLE_SESSIONS_SAME_INIT_DATA", "This initialization data was already stored.");
    }

    var mediaKeySession = this._mediaKeys.createSession(sessionType);

    var entry = {
      mediaKeySession: mediaKeySession,
      sessionType: sessionType,
      initializationData: initializationData
    };

    if (!(0,is_null_or_undefined/* default */.Z)(mediaKeySession.closed)) {
      mediaKeySession.closed.then(function () {
        var currentEntry = _this._storage.get(initializationData);

        if (currentEntry !== undefined && currentEntry.mediaKeySession === mediaKeySession) {
          _this._storage.remove(initializationData);
        }
      })["catch"](function (e) {
        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
        log/* default.warn */.Z.warn("EME-LSS: MediaKeySession.closed rejected: " + e);
      });
    }

    log/* default.debug */.Z.debug("EME-LSS: Add MediaKeySession", entry);

    this._storage.store(initializationData, entry);

    return mediaKeySession;
  }
  /**
   * Close a MediaKeySession corresponding to an initialization data and remove
   * its related stored information from the LoadedSessionsStore.
   * Emit when done.
   * @param {Uint8Array} initData
   * @param {string|undefined} initDataType
   * @returns {Observable}
   */
  ;

  _proto.closeSession = function closeSession(initializationData) {
    var _this2 = this;

    return (0,defer/* defer */.P)(function () {
      var entry = _this2._storage.remove(initializationData);

      if (entry === undefined) {
        log/* default.warn */.Z.warn("EME-LSS: No MediaKeySession found with " + "the given initData and initDataType");
        return empty/* EMPTY */.E;
      }

      return safelyCloseMediaKeySession(entry.mediaKeySession);
    });
  }
  /**
   * Returns the number of stored MediaKeySessions in this LoadedSessionsStore.
   * @returns {number}
   */
  ;

  _proto.getLength = function getLength() {
    return this._storage.getLength();
  }
  /**
   * Returns information about all stored MediaKeySession, in the order in which
   * the MediaKeySession have been created.
   * @returns {Array.<Object>}
   */
  ;

  _proto.getAll = function getAll() {
    return this._storage.getAll();
  }
  /**
   * Close all sessions in this store.
   * Emit `null` when done.
   * @returns {Observable}
   */
  ;

  _proto.closeAllSessions = function closeAllSessions() {
    var _this3 = this;

    return (0,defer/* defer */.P)(function () {
      var closing$ = _this3._storage.getAll().map(function (entry) {
        return safelyCloseMediaKeySession(entry.mediaKeySession);
      });

      log/* default.debug */.Z.debug("EME-LSS: Closing all current MediaKeySessions", closing$.length); // re-initialize the storage, so that new interactions with the
      // `LoadedSessionsStore` do not rely on MediaKeySessions we're in the
      // process of removing

      _this3._storage = new InitDataStore();
      return (0,concat/* concat */.z)(merge/* merge.apply */.T.apply(void 0, closing$).pipe((0,ignoreElements/* ignoreElements */.l)()), (0,of.of)(null));
    });
  };

  return LoadedSessionsStore;
}();
/**
 * Close a MediaKeySession and do not throw if this action throws an error.
 * @param {MediaKeySession} mediaKeySession
 * @returns {Observable}
 */




function safelyCloseMediaKeySession(mediaKeySession) {
  log/* default.debug */.Z.debug("EME-LSS: Close MediaKeySession", mediaKeySession);
  return closeSession$(mediaKeySession).pipe((0,catchError/* catchError */.K)(function (err) {
    log/* default.error */.Z.error("EME-LSS: Could not close MediaKeySession: " + (err instanceof Error ? err.toString() : "Unknown error"));
    return (0,of.of)(null);
  }));
}
// EXTERNAL MODULE: ./src/utils/assert.ts
var assert = __webpack_require__(811);
// EXTERNAL MODULE: ./src/utils/base64.ts
var utils_base64 = __webpack_require__(9689);
// EXTERNAL MODULE: ./src/utils/is_non_empty_string.ts
var is_non_empty_string = __webpack_require__(6923);
;// CONCATENATED MODULE: ./src/core/eme/utils/persistent_sessions_store.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */







/**
 * Throw if the given storage does not respect the right interface.
 * @param {Object} storage
 */

function checkStorage(storage) {
  (0,assert/* assertInterface */.u)(storage, {
    save: "function",
    load: "function"
  }, "licenseStorage");
}
/** Wrap initialization data and allow linearization of it into base64. */


var InitDataContainer = /*#__PURE__*/function () {
  /**
   * Create a new container, wrapping the initialization data given and allowing
   * linearization into base64.
   * @param {Uint8Array}
   */
  function InitDataContainer(initData) {
    this.initData = initData;
  }
  /**
   * Convert it to base64.
   * `toJSON` is specially interpreted by JavaScript engines to be able to rely
   * on it when calling `JSON.stringify` on it or any of its parent objects:
   * https://tc39.es/ecma262/#sec-serializejsonproperty
   * @returns {string}
   */


  var _proto = InitDataContainer.prototype;

  _proto.toJSON = function toJSON() {
    return (0,utils_base64/* bytesToBase64 */.J)(this.initData);
  }
  /**
   * Decode a base64 sequence representing an initialization data back to an
   * Uint8Array.
   * @param {string}
   * @returns {Uint8Array}
   */
  ;

  InitDataContainer.decode = function decode(base64) {
    return (0,utils_base64/* base64ToBytes */.K)(base64);
  };

  return InitDataContainer;
}();
/**
 * Set representing persisted licenses. Depends on a simple local-
 * storage implementation with a `save`/`load` synchronous interface
 * to persist information on persisted sessions.
 *
 * This set is used only for a cdm/keysystem with license persistency
 * supported.
 * @class PersistentSessionsStore
 */


var PersistentSessionsStore = /*#__PURE__*/function () {
  /**
   * Create a new PersistentSessionsStore.
   * @param {Object} storage
   */
  function PersistentSessionsStore(storage) {
    checkStorage(storage);
    this._entries = [];
    this._storage = storage;

    try {
      this._entries = this._storage.load();

      if (!Array.isArray(this._entries)) {
        this._entries = [];
      }
    } catch (e) {
      log/* default.warn */.Z.warn("EME-PSS: Could not get entries from license storage", e);
      this.dispose();
    }
  }
  /**
   * Returns the number of stored values.
   * @returns {number}
   */


  var _proto2 = PersistentSessionsStore.prototype;

  _proto2.getLength = function getLength() {
    return this._entries.length;
  }
  /**
   * Returns information about all stored MediaKeySession, in the order in which
   * the MediaKeySession have been created.
   * @returns {Array.<Object>}
   */
  ;

  _proto2.getAll = function getAll() {
    return this._entries;
  }
  /**
   * Retrieve an entry based on its initialization data.
   * @param {Uint8Array}  initData
   * @param {string|undefined} initDataType
   * @returns {Object|null}
   */
  ;

  _proto2.get = function get(initData) {
    var index = this._getIndex(initData);

    return index === -1 ? null : this._entries[index];
  }
  /**
   * Like `get`, but also move the corresponding value at the end of the store
   * (as returned by `getAll`) if found.
   * This can be used for example to tell when a previously-stored value is
   * re-used to then be able to implement a caching replacement algorithm based
   * on the least-recently-used values by just evicting the first values
   * returned by `getAll`.
   * @param {Uint8Array} initData
   * @param {string|undefined} initDataType
   * @returns {*}
   */
  ;

  _proto2.getAndReuse = function getAndReuse(initData) {
    var index = this._getIndex(initData);

    if (index === -1) {
      return null;
    }

    var item = this._entries.splice(index, 1)[0];

    this._entries.push(item);

    return item;
  }
  /**
   * Add a new entry in the PersistentSessionsStore.
   * @param {Uint8Array}  initData
   * @param {string|undefined} initDataType
   * @param {MediaKeySession} session
   */
  ;

  _proto2.add = function add(initData, session) {
    if ((0,is_null_or_undefined/* default */.Z)(session) || !(0,is_non_empty_string/* default */.Z)(session.sessionId)) {
      log/* default.warn */.Z.warn("EME-PSS: Invalid Persisten Session given.");
      return;
    }

    var sessionId = session.sessionId;
    var currentEntry = this.get(initData);

    if (currentEntry !== null && currentEntry.sessionId === sessionId) {
      return;
    } else if (currentEntry !== null) {
      // currentEntry has a different sessionId
      this["delete"](initData);
    }

    var hash = (0,hash_buffer/* default */.Z)(initData.data);
    log/* default.info */.Z.info("EME-PSS: Add new session", sessionId, session);

    this._entries.push({
      version: 2,
      sessionId: sessionId,
      initData: new InitDataContainer(initData.data),
      initDataHash: hash,
      initDataType: initData.type
    });

    this._save();
  }
  /**
   * Delete stored MediaKeySession information based on its initialization
   * data.
   * @param {Uint8Array}  initData
   * @param {string|undefined} initDataType
   */
  ;

  _proto2["delete"] = function _delete(initData) {
    var index = this._getIndex(initData);

    if (index === -1) {
      log/* default.warn */.Z.warn("EME-PSS: initData to delete not found.");
      return;
    }

    var entry = this._entries[index];
    log/* default.warn */.Z.warn("EME-PSS: Delete session from store", entry);

    this._entries.splice(index, 1);

    this._save();
  };

  _proto2.deleteOldSessions = function deleteOldSessions(sessionsToDelete) {
    log/* default.info */.Z.info("EME-PSS: Deleting last " + sessionsToDelete + " sessions.");

    if (sessionsToDelete <= 0) {
      return;
    }

    if (sessionsToDelete <= this._entries.length) {
      this._entries.splice(0, sessionsToDelete);
    } else {
      log/* default.warn */.Z.warn("EME-PSS: Asked to remove more information that it contains", sessionsToDelete, this._entries.length);
      this._entries = [];
    }

    this._save();
  }
  /**
   * Delete all saved entries.
   */
  ;

  _proto2.dispose = function dispose() {
    this._entries = [];

    this._save();
  }
  /**
   * Retrieve index of an entry.
   * Returns `-1` if not found.
   * @param {Uint8Array}  initData
   * @param {string|undefined} initDataType
   * @returns {number}
   */
  ;

  _proto2._getIndex = function _getIndex(initData) {
    var hash = (0,hash_buffer/* default */.Z)(initData.data);

    for (var i = 0; i < this._entries.length; i++) {
      var entry = this._entries[i];

      if (entry.initDataType === initData.type) {
        if (entry.version === 2) {
          if (entry.initDataHash === hash) {
            try {
              var decodedInitData = typeof entry.initData === "string" ? InitDataContainer.decode(entry.initData) : entry.initData.initData;

              if ((0,are_arrays_of_numbers_equal/* default */.Z)(decodedInitData, initData.data)) {
                return i;
              }
            } catch (e) {
              log/* default.warn */.Z.warn("EME-PSS: Could not decode initialization data.", e);
            }
          }
        } else if (entry.version === 1) {
          if (entry.initDataHash === hash) {
            if (typeof entry.initData.length === "undefined") {
              // If length is undefined, it has been linearized. We could still
              // convert it back to an Uint8Array but this would necessitate some
              // ugly unreadable logic for a very very minor possibility.
              // Just consider that it is a match based on the hash.
              return i;
            } else if ((0,are_arrays_of_numbers_equal/* default */.Z)(entry.initData, initData.data)) {
              return i;
            }
          }
        } else {
          if (entry.initData === hash) {
            return i;
          }
        }
      }
    }

    return -1;
  }
  /**
   * Use the given storage to store the current entries.
   */
  ;

  _proto2._save = function _save() {
    try {
      this._storage.save(this._entries);
    } catch (e) {
      log/* default.warn */.Z.warn("EME-PSS: Could not save licenses in localStorage");
    }
  };

  return PersistentSessionsStore;
}();


;// CONCATENATED MODULE: ./src/core/eme/get_media_keys.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */












/**
 * @throws {EncryptedMediaError}
 * @param {Object} keySystemOptions
 * @returns {Object|null}
 */

function createPersistentSessionsStorage(keySystemOptions) {
  if (keySystemOptions.persistentLicense !== true) {
    return null;
  }

  var licenseStorage = keySystemOptions.licenseStorage;

  if (licenseStorage == null) {
    throw new encrypted_media_error/* default */.Z("INVALID_KEY_SYSTEM", "No license storage found for persistent license.");
  }

  log/* default.debug */.Z.debug("EME: Set the given license storage");
  return new PersistentSessionsStore(licenseStorage);
}
/**
 * @param {HTMLMediaElement} mediaElement
 * @param {Array.<Object>} keySystemsConfigs
 * @returns {Observable}
 */


function getMediaKeysInfos(mediaElement, keySystemsConfigs) {
  return getMediaKeySystemAccess(mediaElement, keySystemsConfigs).pipe((0,mergeMap/* mergeMap */.zg)(function (evt) {
    var _evt$value = evt.value,
        options = _evt$value.options,
        mediaKeySystemAccess = _evt$value.mediaKeySystemAccess;
    var currentState = media_keys_infos_store/* default.getState */.Z.getState(mediaElement);
    var persistentSessionsStore = createPersistentSessionsStorage(options);

    if (currentState !== null && evt.type === "reuse-media-key-system-access") {
      var mediaKeys = currentState.mediaKeys,
          loadedSessionsStore = currentState.loadedSessionsStore; // We might just rely on the currently attached MediaKeys instance.
      // First check if server certificate parameters are the same than in the
      // current MediaKeys instance. If not, re-create MediaKeys from scratch.

      if (server_certificate_store.hasOne(mediaKeys) === false || !(0,is_null_or_undefined/* default */.Z)(options.serverCertificate) && server_certificate_store.has(mediaKeys, options.serverCertificate)) {
        return (0,of.of)({
          mediaKeys: mediaKeys,
          mediaKeySystemAccess: mediaKeySystemAccess,
          stores: {
            loadedSessionsStore: loadedSessionsStore,
            persistentSessionsStore: persistentSessionsStore
          },
          options: options
        });
      }
    }

    return createMediaKeys(mediaKeySystemAccess).pipe((0,map/* map */.U)(function (mediaKeys) {
      log/* default.info */.Z.info("EME: MediaKeys created with success", mediaKeys);
      var loadedSessionsStore = new LoadedSessionsStore(mediaKeys);
      return {
        mediaKeys: mediaKeys,
        mediaKeySystemAccess: mediaKeySystemAccess,
        stores: {
          loadedSessionsStore: loadedSessionsStore,
          persistentSessionsStore: persistentSessionsStore
        },
        options: options
      };
    }));
  }));
}
/**
 * Create `MediaKeys` from the `MediaKeySystemAccess` given.
 * Throws the right formatted error if it fails.
 * @param {MediaKeySystemAccess} mediaKeySystemAccess
 * @returns {Observable.<MediaKeys>}
 */

function createMediaKeys(mediaKeySystemAccess) {
  log/* default.info */.Z.info("EME: Calling createMediaKeys on the MediaKeySystemAccess");
  return (0,rx_try_catch/* default */.Z)(function () {
    return (0,cast_to_observable/* default */.Z)(mediaKeySystemAccess.createMediaKeys());
  }, undefined).pipe((0,catchError/* catchError */.K)(function (error) {
    var message = error instanceof Error ? error.message : "Unknown error when creating MediaKeys.";
    throw new encrypted_media_error/* default */.Z("CREATE_MEDIA_KEYS_ERROR", message);
  }));
}
;// CONCATENATED MODULE: ./src/core/eme/init_media_keys.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





/**
 * Get media keys infos from key system configs then attach media keys to media element.
 * @param {HTMLMediaElement} mediaElement
 * @param {Array.<Object>} keySystemsConfigs
 * @returns {Observable}
 */

function initMediaKeys(mediaElement, keySystemsConfigs) {
  return getMediaKeysInfos(mediaElement, keySystemsConfigs).pipe((0,mergeMap/* mergeMap */.zg)(function (_ref) {
    var mediaKeys = _ref.mediaKeys,
        mediaKeySystemAccess = _ref.mediaKeySystemAccess,
        stores = _ref.stores,
        options = _ref.options;
    var attachMediaKeys$ = new ReplaySubject/* ReplaySubject */.t(1);
    var shouldDisableOldMediaKeys = mediaElement.mediaKeys !== null && mediaElement.mediaKeys !== undefined && mediaKeys !== mediaElement.mediaKeys;
    var disableOldMediaKeys$ = shouldDisableOldMediaKeys ? disableMediaKeys(mediaElement) : (0,of.of)(null);
    log/* default.debug */.Z.debug("EME: Disabling old MediaKeys");
    return disableOldMediaKeys$.pipe((0,mergeMap/* mergeMap */.zg)(function () {
      log/* default.debug */.Z.debug("EME: Disabled old MediaKeys. Waiting to attach new MediaKeys");
      return attachMediaKeys$.pipe((0,mergeMap/* mergeMap */.zg)(function () {
        var stateToAttatch = {
          loadedSessionsStore: stores.loadedSessionsStore,
          mediaKeySystemAccess: mediaKeySystemAccess,
          mediaKeys: mediaKeys,
          keySystemOptions: options
        };
        return attachMediaKeys(mediaElement, stateToAttatch);
      }), (0,take/* take */.q)(1), (0,mapTo/* mapTo */.h)({
        type: "attached-media-keys",
        value: {
          mediaKeySystemAccess: mediaKeySystemAccess,
          mediaKeys: mediaKeys,
          stores: stores,
          options: options
        }
      }), (0,startWith/* startWith */.O)({
        type: "created-media-keys",
        value: {
          mediaKeySystemAccess: mediaKeySystemAccess,
          mediaKeys: mediaKeys,
          stores: stores,
          options: options,
          attachMediaKeys$: attachMediaKeys$
        }
      }));
    }));
  }));
}
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/assertThisInitialized.js
var assertThisInitialized = __webpack_require__(1506);
var assertThisInitialized_default = /*#__PURE__*/__webpack_require__.n(assertThisInitialized);
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/inheritsLoose.js
var inheritsLoose = __webpack_require__(5354);
var inheritsLoose_default = /*#__PURE__*/__webpack_require__.n(inheritsLoose);
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/wrapNativeSuper.js
var wrapNativeSuper = __webpack_require__(5957);
var wrapNativeSuper_default = /*#__PURE__*/__webpack_require__.n(wrapNativeSuper);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/Subject.js
var Subject = __webpack_require__(211);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/util/identity.js
var identity = __webpack_require__(3608);
;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/TimeoutError.js
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var TimeoutErrorImpl = /*@__PURE__*/ (function () {
    function TimeoutErrorImpl() {
        Error.call(this);
        this.message = 'Timeout has occurred';
        this.name = 'TimeoutError';
        return this;
    }
    TimeoutErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
    return TimeoutErrorImpl;
})();
var TimeoutError = TimeoutErrorImpl;
//# sourceMappingURL=TimeoutError.js.map

// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/scheduler/async.js
var scheduler_async = __webpack_require__(964);
// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.js
var tslib_es6 = __webpack_require__(655);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/util/isDate.js
var isDate = __webpack_require__(9914);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/innerSubscribe.js
var innerSubscribe = __webpack_require__(7604);
;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/timeoutWith.js
/** PURE_IMPORTS_START tslib,_scheduler_async,_util_isDate,_innerSubscribe PURE_IMPORTS_END */




function timeoutWith(due, withObservable, scheduler) {
    if (scheduler === void 0) {
        scheduler = scheduler_async/* async */.P;
    }
    return function (source) {
        var absoluteTimeout = (0,isDate/* isDate */.J)(due);
        var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);
        return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));
    };
}
var TimeoutWithOperator = /*@__PURE__*/ (function () {
    function TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler) {
        this.waitFor = waitFor;
        this.absoluteTimeout = absoluteTimeout;
        this.withObservable = withObservable;
        this.scheduler = scheduler;
    }
    TimeoutWithOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));
    };
    return TimeoutWithOperator;
}());
var TimeoutWithSubscriber = /*@__PURE__*/ (function (_super) {
    tslib_es6/* __extends */.ZT(TimeoutWithSubscriber, _super);
    function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {
        var _this = _super.call(this, destination) || this;
        _this.absoluteTimeout = absoluteTimeout;
        _this.waitFor = waitFor;
        _this.withObservable = withObservable;
        _this.scheduler = scheduler;
        _this.scheduleTimeout();
        return _this;
    }
    TimeoutWithSubscriber.dispatchTimeout = function (subscriber) {
        var withObservable = subscriber.withObservable;
        subscriber._unsubscribeAndRecycle();
        subscriber.add((0,innerSubscribe/* innerSubscribe */.ft)(withObservable, new innerSubscribe/* SimpleInnerSubscriber */.IY(subscriber)));
    };
    TimeoutWithSubscriber.prototype.scheduleTimeout = function () {
        var action = this.action;
        if (action) {
            this.action = action.schedule(this, this.waitFor);
        }
        else {
            this.add(this.action = this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this));
        }
    };
    TimeoutWithSubscriber.prototype._next = function (value) {
        if (!this.absoluteTimeout) {
            this.scheduleTimeout();
        }
        _super.prototype._next.call(this, value);
    };
    TimeoutWithSubscriber.prototype._unsubscribe = function () {
        this.action = undefined;
        this.scheduler = null;
        this.withObservable = null;
    };
    return TimeoutWithSubscriber;
}(innerSubscribe/* SimpleOuterSubscriber */.Ds));
//# sourceMappingURL=timeoutWith.js.map

;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/timeout.js
/** PURE_IMPORTS_START _scheduler_async,_util_TimeoutError,_timeoutWith,_observable_throwError PURE_IMPORTS_END */




function timeout(due, scheduler) {
    if (scheduler === void 0) {
        scheduler = scheduler_async/* async */.P;
    }
    return timeoutWith(due, (0,throwError/* throwError */._)(new TimeoutError()), scheduler);
}
//# sourceMappingURL=timeout.js.map

;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/concatMap.js
/** PURE_IMPORTS_START _mergeMap PURE_IMPORTS_END */

function concatMap(project, resultSelector) {
    return (0,mergeMap/* mergeMap */.zg)(project, resultSelector, 1);
}
//# sourceMappingURL=concatMap.js.map

// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/takeUntil.js
var takeUntil = __webpack_require__(1558);
// EXTERNAL MODULE: ./src/utils/get_fuzzed_delay.ts
var get_fuzzed_delay = __webpack_require__(2572);
;// CONCATENATED MODULE: ./src/utils/rx-retry_with_backoff.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * Retry the given observable (if it triggers an error) with an exponential
 * backoff.
 * The backoff behavior can be tweaked through the options given.
 *
 * @param {Observable} obs$
 * @param {Object} options - Configuration object.
 * This object contains the following properties:
 *
 *   - retryDelay {Number} - The initial delay, in ms.
 *     This delay will be fuzzed to fall under the range +-30% each time a new
 *     retry is done.
 *     Then, this delay will be multiplied by 2^(n-1), n being the counter of
 *     retry we performed (beginning at 1 for the first retry).
 *
 *   - totalRetry {Number} - The amount of time we should retry. 0
 *     means no retry, 1 means a single retry, Infinity means infinite retry
 *     etc.
 *     If the observable still fails after this number of retry, the error will
 *     be throwed through this observable.
 *
 *   - shouldRetry {Function|undefined} -  Function which will receive the
 *     observable error each time it fails, and should return a boolean. If this
 *     boolean is false, the error will be directly thrown (without anymore
 *     retry).
 *
 *   - onRetry {Function|undefined} - Function which will be triggered at
 *     each retry. Will receive two arguments:
 *       1. The observable error
 *       2. The current retry count, beginning at 1 for the first retry
 *
 * @returns {Observable}
 * TODO Take errorSelector out. Should probably be entirely managed in the
 * calling code via a catch (much simpler to use and to understand).
 */

function retryObsWithBackoff(obs$, options) {
  var baseDelay = options.baseDelay,
      maxDelay = options.maxDelay,
      totalRetry = options.totalRetry,
      shouldRetry = options.shouldRetry,
      onRetry = options.onRetry;
  var retryCount = 0;
  return obs$.pipe((0,catchError/* catchError */.K)(function (error, source) {
    if (!(0,is_null_or_undefined/* default */.Z)(shouldRetry) && !shouldRetry(error) || retryCount++ >= totalRetry) {
      throw error;
    }

    if (typeof onRetry === "function") {
      onRetry(error, retryCount);
    }

    var delay = Math.min(baseDelay * Math.pow(2, retryCount - 1), maxDelay);
    var fuzzedDelay = (0,get_fuzzed_delay/* default */.Z)(delay);
    return (0,timer/* timer */.H)(fuzzedDelay).pipe((0,mergeMap/* mergeMap */.zg)(function () {
      return source;
    }));
  }));
}
;// CONCATENATED MODULE: ./src/compat/eme/get_uuid_kid_from_keystatus_kid.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Get KID from MediaKeySession keyStatus, and convert it in usual big-endian kid
 * if necessary. On EDGE, Microsoft Playready KID are presented into little-endian GUID.
 * @param {String} keySystem
 * @param {Uint8Array} baseKeyId
 * @returns {Uint8Array}
 */

function getUUIDKIDFromKeyStatusKID(keySystem, baseKeyId) {
  if (keySystem.indexOf("playready") !== -1 && (browser_detection/* isIEOrEdge */.YM || browser_detection/* isEdgeChromium */.kD)) {
    return (0,string_parsing/* guidToUuid */.wO)(baseKeyId);
  }

  return baseKeyId;
}
;// CONCATENATED MODULE: ./src/core/eme/check_key_statuses.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var KEY_STATUSES = {
  EXPIRED: "expired",
  INTERNAL_ERROR: "internal-error",
  OUTPUT_RESTRICTED: "output-restricted"
};
/**
 * Look at the current key statuses in the sessions and construct the
 * appropriate warnings and blacklisted key ids.
 *
 * Throws if one of the keyID is on an error.
 * @param {MediaKeySession} session - The MediaKeySession from which the keys
 * will be checked.
 * @param {Object} options
 * @param {String} keySystem - The configuration keySystem used for deciphering
 * @returns {Array} - Warnings to send and blacklisted key ids.
 */

function checkKeyStatuses(session, options, keySystem) {
  var warnings = [];
  var blacklistedKeyIDs = [];
  var _options$fallbackOn = options.fallbackOn,
      fallbackOn = _options$fallbackOn === void 0 ? {} : _options$fallbackOn,
      throwOnLicenseExpiration = options.throwOnLicenseExpiration;
  /* eslint-disable @typescript-eslint/no-unsafe-member-access */

  /* eslint-disable @typescript-eslint/no-unsafe-call */

  session.keyStatuses.forEach(function (_arg1, _arg2) {
    /* eslint-enable @typescript-eslint/no-unsafe-member-access */

    /* eslint-enable @typescript-eslint/no-unsafe-call */
    // Hack present because the order of the arguments has changed in spec
    // and is not the same between some versions of Edge and Chrome.
    var _ref = function () {
      return typeof _arg1 === "string" ? [_arg1, _arg2] : [_arg2, _arg1];
    }(),
        keyStatus = _ref[0],
        keyStatusKeyId = _ref[1];

    var keyId = getUUIDKIDFromKeyStatusKID(keySystem, new Uint8Array(keyStatusKeyId));

    switch (keyStatus) {
      case KEY_STATUSES.EXPIRED:
        {
          var error = new encrypted_media_error/* default */.Z("KEY_STATUS_CHANGE_ERROR", "A decryption key expired");

          if (throwOnLicenseExpiration !== false) {
            throw error;
          }

          warnings.push({
            type: "warning",
            value: error
          });
          break;
        }

      case KEY_STATUSES.INTERNAL_ERROR:
        {
          var _error = new encrypted_media_error/* default */.Z("KEY_STATUS_CHANGE_ERROR", "An invalid key status has been " + "encountered: " + keyStatus);

          if (fallbackOn.keyInternalError !== true) {
            throw _error;
          }

          warnings.push({
            type: "warning",
            value: _error
          });
          blacklistedKeyIDs.push(keyId);
          break;
        }

      case KEY_STATUSES.OUTPUT_RESTRICTED:
        {
          var _error2 = new encrypted_media_error/* default */.Z("KEY_STATUS_CHANGE_ERROR", "An invalid key status has been " + "encountered: " + keyStatus);

          if (fallbackOn.keyOutputRestricted !== true) {
            throw _error2;
          }

          warnings.push({
            type: "warning",
            value: _error2
          });
          blacklistedKeyIDs.push(keyId);
          break;
        }
    }
  });
  return [warnings, blacklistedKeyIDs];
}
;// CONCATENATED MODULE: ./src/core/eme/session_events_listener.ts




/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */










var onKeyError$ = event_listeners/* onKeyError$ */.Xe,
    onKeyMessage$ = event_listeners/* onKeyMessage$ */.GJ,
    onKeyStatusesChange$ = event_listeners/* onKeyStatusesChange$ */.eX;
/**
 * Error thrown when the MediaKeySession is blacklisted.
 * Such MediaKeySession should not be re-used but other MediaKeySession for the
 * same content can still be used.
 * @class BlacklistedSessionError
 * @extends Error
 */

var BlacklistedSessionError = /*#__PURE__*/function (_Error) {
  inheritsLoose_default()(BlacklistedSessionError, _Error);

  function BlacklistedSessionError(sessionError) {
    var _this;

    _this = _Error.call(this) || this; // @see https://stackoverflow.com/questions/41102060/typescript-extending-error-class

    Object.setPrototypeOf(assertThisInitialized_default()(_this), BlacklistedSessionError.prototype);
    _this.sessionError = sessionError;
    return _this;
  }

  return BlacklistedSessionError;
}( /*#__PURE__*/wrapNativeSuper_default()(Error));
/**
 * listen to various events from a MediaKeySession and react accordingly
 * depending on the configuration given.
 * @param {MediaKeySession} session - The MediaKeySession concerned.
 * @param {Object} keySystemOptions - The key system options.
 * @param {String} keySystem - The configuration keySystem used for deciphering
 * @param {Object} initializationData - The initialization data linked to that
 * session.
 * @returns {Observable}
 */

function SessionEventsListener(session, keySystemOptions, keySystem, initializationData) {
  log/* default.info */.Z.info("EME: Binding session events", session);
  var sessionWarningSubject$ = new Subject/* Subject */.xQ();
  var _keySystemOptions$get = keySystemOptions.getLicenseConfig,
      getLicenseConfig = _keySystemOptions$get === void 0 ? {} : _keySystemOptions$get;
  var keyErrors = onKeyError$(session).pipe((0,map/* map */.U)(function (error) {
    throw new encrypted_media_error/* default */.Z("KEY_ERROR", error.type);
  }));
  var keyStatusesChange$ = onKeyStatusesChange$(session).pipe((0,mergeMap/* mergeMap */.zg)(function (keyStatusesEvent) {
    return handleKeyStatusesChangeEvent(session, keySystemOptions, keySystem, keyStatusesEvent);
  }));
  var keyMessages$ = onKeyMessage$(session).pipe((0,mergeMap/* mergeMap */.zg)(function (messageEvent) {
    var message = new Uint8Array(messageEvent.message);
    var messageType = (0,is_non_empty_string/* default */.Z)(messageEvent.messageType) ? messageEvent.messageType : "license-request";
    log/* default.info */.Z.info("EME: Received message event, type " + messageType, session, messageEvent);
    var getLicense$ = (0,defer/* defer */.P)(function () {
      var getLicense = keySystemOptions.getLicense(message, messageType);
      var getLicenseTimeout = (0,is_null_or_undefined/* default */.Z)(getLicenseConfig.timeout) ? 10 * 1000 : getLicenseConfig.timeout;
      return (0,cast_to_observable/* default */.Z)(getLicense).pipe(getLicenseTimeout >= 0 ? timeout(getLicenseTimeout) : identity/* identity */.y
      /* noop */
      );
    });
    var backoffOptions = getLicenseBackoffOptions(sessionWarningSubject$, getLicenseConfig.retry);
    return retryObsWithBackoff(getLicense$, backoffOptions).pipe((0,map/* map */.U)(function (licenseObject) {
      return {
        type: "key-message-handled",
        value: {
          session: session,
          license: licenseObject
        }
      };
    }), (0,catchError/* catchError */.K)(function (err) {
      var formattedError = formatGetLicenseError(err);

      if (!(0,is_null_or_undefined/* default */.Z)(err)) {
        var fallbackOnLastTry = err.fallbackOnLastTry;

        if (fallbackOnLastTry === true) {
          log/* default.warn */.Z.warn("EME: Last `getLicense` attempt failed. " + "Blacklisting the current session.");
          throw new BlacklistedSessionError(formattedError);
        }
      }

      throw formattedError;
    }), (0,startWith/* startWith */.O)({
      type: "session-message",
      value: {
        messageType: messageType,
        initializationData: initializationData
      }
    }));
  }));
  var sessionUpdates = (0,merge/* merge */.T)(keyMessages$, keyStatusesChange$).pipe(concatMap(function (evt) {
    switch (evt.type) {
      case "key-message-handled":
      case "key-status-change-handled":
        return updateSessionWithMessage(session, evt.value.license, initializationData);

      default:
        return (0,of.of)(evt);
    }
  }));
  var sessionEvents = (0,merge/* merge */.T)(getKeyStatusesEvents(session, keySystemOptions, keySystem), sessionUpdates, keyErrors, sessionWarningSubject$);
  return !(0,is_null_or_undefined/* default */.Z)(session.closed) ? sessionEvents.pipe((0,takeUntil/* takeUntil */.R)((0,cast_to_observable/* default */.Z)(session.closed))) : sessionEvents;
}
/**
 * Check current MediaKeyStatus for each key in the given MediaKeySession and
 * return an Observable which either:
 *    - throw if at least one status is a non-recoverable error
 *    - emit warning events for recoverable errors
 *    - emit blacklist-keys events for key IDs that are not decipherable
 * @param {MediaKeySession} session - The MediaKeySession concerned.
 * @param {Object} options - Options related to key statuses checks.
 * @param {String} keySystem - The name of the key system used for deciphering
 * @returns {Observable}
 */

function getKeyStatusesEvents(session, options, keySystem) {
  return (0,defer/* defer */.P)(function () {
    var _checkKeyStatuses = checkKeyStatuses(session, options, keySystem),
        warnings = _checkKeyStatuses[0],
        blacklistedKeyIDs = _checkKeyStatuses[1];

    var warnings$ = warnings.length > 0 ? of.of.apply(void 0, warnings) : empty/* EMPTY */.E;
    var blackListUpdate$ = blacklistedKeyIDs.length > 0 ? (0,of.of)({
      type: "blacklist-keys",
      value: blacklistedKeyIDs
    }) : empty/* EMPTY */.E;
    return (0,concat/* concat */.z)(warnings$, blackListUpdate$);
  });
}
/**
 * Format an error returned by a `getLicense` call to a proper form as defined
 * by the RxPlayer's API.
 * @param {*} error
 * @returns {Error}
 */


function formatGetLicenseError(error) {
  if (error instanceof TimeoutError) {
    return new encrypted_media_error/* default */.Z("KEY_LOAD_TIMEOUT", "The license server took too much time to " + "respond.");
  }

  var err = new encrypted_media_error/* default */.Z("KEY_LOAD_ERROR", "An error occured when calling `getLicense`.");

  if (!(0,is_null_or_undefined/* default */.Z)(error) && (0,is_non_empty_string/* default */.Z)(error.message)) {
    err.message = error.message;
  }

  return err;
}
/**
 * Call MediaKeySession.update with the given `message`, if defined.
 * Returns the right event depending on the action taken.
 * @param {MediaKeySession} session
 * @param {ArrayBuffer|TypedArray|null} message
 * @param {Object} initializationData
 * @returns {Observable}
 */


function updateSessionWithMessage(session, message, initializationData) {
  if ((0,is_null_or_undefined/* default */.Z)(message)) {
    log/* default.info */.Z.info("EME: No message given, skipping session.update");
    return (0,of.of)({
      type: "no-update",
      value: {
        initializationData: initializationData
      }
    });
  }

  log/* default.info */.Z.info("EME: Updating MediaKeySession with message");
  return (0,cast_to_observable/* default */.Z)(session.update(message)).pipe((0,catchError/* catchError */.K)(function (error) {
    var reason = error instanceof Error ? error.toString() : "`session.update` failed";
    throw new encrypted_media_error/* default */.Z("KEY_UPDATE_ERROR", reason);
  }), (0,tap/* tap */.b)(function () {
    log/* default.info */.Z.info("EME: MediaKeySession update succeeded.");
  }), (0,mapTo/* mapTo */.h)({
    type: "session-updated",
    value: {
      session: session,
      license: message,
      initializationData: initializationData
    }
  }));
}
/**
 * @param {MediaKeySession}
 * @param {Object} keySystem
 * @param {Event} keyStatusesEvent
 * @returns {Observable}
 */


function handleKeyStatusesChangeEvent(session, keySystemOptions, keySystem, keyStatusesEvent) {
  log/* default.info */.Z.info("EME: keystatuseschange event received", session, keyStatusesEvent);
  var callback$ = (0,defer/* defer */.P)(function () {
    if (typeof keySystemOptions.onKeyStatusesChange !== "function") {
      return empty/* EMPTY */.E;
    }

    return (0,cast_to_observable/* default */.Z)(keySystemOptions.onKeyStatusesChange(keyStatusesEvent, session));
  }).pipe((0,map/* map */.U)(function (licenseObject) {
    return {
      type: "key-status-change-handled",
      value: {
        session: session,
        license: licenseObject
      }
    };
  }), (0,catchError/* catchError */.K)(function (error) {
    var err = new encrypted_media_error/* default */.Z("KEY_STATUS_CHANGE_ERROR", "Unknown `onKeyStatusesChange` error");

    if (!(0,is_null_or_undefined/* default */.Z)(error) && (0,is_non_empty_string/* default */.Z)(error.message)) {
      err.message = error.message;
    }

    throw err;
  }));
  return (0,concat/* concat */.z)(getKeyStatusesEvents(session, keySystemOptions, keySystem), callback$);
}
/**
 * Construct backoff options for the getLicense call.
 * @param {Subject} sessionWarningSubject$ - Subject through which retry
 * warnings will be sent.
 * @param {number|undefined} numberOfRetry - Maximum of amount retried.
 * Equal to `2` if not defined.
 * @returns {Object}
 */


function getLicenseBackoffOptions(sessionWarningSubject$, numberOfRetry) {
  return {
    totalRetry: numberOfRetry !== null && numberOfRetry !== void 0 ? numberOfRetry : 2,
    baseDelay: 200,
    maxDelay: 3000,
    shouldRetry: function shouldRetry(error) {
      return error instanceof TimeoutError || (0,is_null_or_undefined/* default */.Z)(error) || error.noRetry !== true;
    },
    onRetry: function onRetry(error) {
      return sessionWarningSubject$.next({
        type: "warning",
        value: formatGetLicenseError(error)
      });
    }
  };
}
;// CONCATENATED MODULE: ./src/core/eme/set_server_certificate.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */







/**
 * Call the setServerCertificate API with the given certificate.
 * Complete observable on success, throw when failed.
 *
 * TODO Handle returned value?
 * From the spec:
 *   - setServerCertificate resolves with true if everything worked
 *   - it resolves with false if the CDM does not support server
 *     certificates.
 *
 * @param {MediaKeys} mediaKeys
 * @param {ArrayBuffer} serverCertificate
 * @returns {Observable}
 */

function setServerCertificate(mediaKeys, serverCertificate) {
  return (0,defer/* defer */.P)(function () {
    return (0,rx_try_catch/* default */.Z)(function () {
      return (0,cast_to_observable/* default */.Z)(mediaKeys.setServerCertificate(serverCertificate));
    }, undefined).pipe((0,catchError/* catchError */.K)(function (error) {
      log/* default.warn */.Z.warn("EME: mediaKeys.setServerCertificate returned an error", error);
      var reason = error instanceof Error ? error.toString() : "`setServerCertificate` error";
      throw new encrypted_media_error/* default */.Z("LICENSE_SERVER_CERTIFICATE_ERROR", reason);
    }));
  });
}
/**
 * Call the setCertificate API. If it fails just emit the error as warning
 * and complete.
 * @param {MediaKeys} mediaKeys
 * @param {ArrayBuffer} serverCertificate
 * @returns {Observable}
 */


function trySettingServerCertificate(mediaKeys, serverCertificate) {
  return (0,defer/* defer */.P)(function () {
    if (typeof mediaKeys.setServerCertificate !== "function") {
      log/* default.warn */.Z.warn("EME: Could not set the server certificate." + " mediaKeys.setServerCertificate is not a function");
      return empty/* EMPTY */.E;
    }

    if (server_certificate_store.hasOne(mediaKeys) === true) {
      log/* default.info */.Z.info("EME: The MediaKeys already has a server certificate, skipping...");
      return empty/* EMPTY */.E;
    }

    log/* default.info */.Z.info("EME: Setting server certificate on the MediaKeys"); // Because of browser errors, or a user action that can lead to interrupting
    // server certificate setting, we might be left in a status where we don't
    // know if we attached the server certificate or not.
    // Calling `prepare` allow to invalidate temporarily that status.

    server_certificate_store.prepare(mediaKeys);
    return setServerCertificate(mediaKeys, serverCertificate).pipe((0,tap/* tap */.b)(function () {
      server_certificate_store.set(mediaKeys, serverCertificate);
    }), (0,ignoreElements/* ignoreElements */.l)(), (0,catchError/* catchError */.K)(function (error) {
      return (0,of.of)({
        type: "warning",
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        value: error
      });
    }));
  });
}

;// CONCATENATED MODULE: ./src/core/eme/eme_manager.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
















var EME_MAX_STORED_PERSISTENT_SESSION_INFORMATION = config/* default.EME_MAX_STORED_PERSISTENT_SESSION_INFORMATION */.Z.EME_MAX_STORED_PERSISTENT_SESSION_INFORMATION;
var onEncrypted$ = event_listeners/* onEncrypted$ */.Oh;
/**
 * EME abstraction used to communicate with the Content Decryption Module (or
 * CDM) to be able to decrypt contents.
 *
 * The `EMEManager` can be given one or multiple key systems. It will choose the
 * appropriate one depending on user settings and browser support.
 * @param {HTMLMediaElement} mediaElement - The MediaElement which will be
 * associated to a MediaKeys object
 * @param {Array.<Object>} keySystemsConfigs - key system configuration
 * @param {Observable} contentProtections$ - Observable emitting external
 * initialization data.
 * @returns {Observable}
 */

function EMEManager(mediaElement, keySystemsConfigs, contentProtections$) {
  log/* default.debug */.Z.debug("EME: Starting EMEManager logic.");
  /**
   * Keep track of all initialization data handled for the current `EMEManager`
   * instance.
   * This allows to avoid handling multiple times the same encrypted events.
   */

  var handledInitData = new InitDataStore();
  /**
   * Keep track of which initialization data have been blacklisted (linked to
   * non-decypherable content).
   * If the same initialization data is encountered again, we can directly emit
   * the same `BlacklistedSessionError`.
   */

  var blacklistedInitData = new InitDataStore();
  /** Emit the MediaKeys instance and its related information when ready. */

  var mediaKeysInit$ = initMediaKeys(mediaElement, keySystemsConfigs).pipe((0,shareReplay/* shareReplay */.d)()); // Share side-effects and cache success

  /** Emit when the MediaKeys instance has been attached the HTMLMediaElement. */

  var attachedMediaKeys$ = mediaKeysInit$.pipe((0,filter/* filter */.h)(function (evt) {
    return evt.type === "attached-media-keys";
  }), (0,take/* take */.q)(1));
  /** Parsed `encrypted` events coming from the HTMLMediaElement. */

  var mediaEncryptedEvents$ = onEncrypted$(mediaElement).pipe((0,tap/* tap */.b)(function (evt) {
    log/* default.debug */.Z.debug("EME: Encrypted event received from media element.", evt);
  }), (0,filter_map/* default */.Z)(function (evt) {
    var _getInitData = getInitData(evt),
        initData = _getInitData.initData,
        initDataType = _getInitData.initDataType;

    return initData === null ? null : {
      type: initDataType,
      data: initData
    };
  }, null), (0,shareReplay/* shareReplay */.d)({
    refCount: true
  })); // multiple Observables listen to that one
  // as soon as the EMEManager is subscribed

  /** Encryption events coming from the `contentProtections$` argument. */

  var externalEvents$ = contentProtections$.pipe((0,tap/* tap */.b)(function (evt) {
    log/* default.debug */.Z.debug("EME: Encrypted event received from Player", evt);
  }));
  /** Emit events signaling that an encryption initialization data is encountered. */

  var initializationData$ = (0,merge/* merge */.T)(externalEvents$, mediaEncryptedEvents$);
  /** Create MediaKeySessions and handle the corresponding events. */

  var bindSession$ = initializationData$.pipe( // Add attached MediaKeys info once available
  (0,mergeMap/* mergeMap */.zg)(function (initializationData) {
    return attachedMediaKeys$.pipe((0,map/* map */.U)(function (mediaKeysEvt) {
      return [initializationData, mediaKeysEvt];
    }));
  }),
  /* Attach server certificate and create/reuse MediaKeySession */
  (0,mergeMap/* mergeMap */.zg)(function (_ref, i) {
    var initializationData = _ref[0],
        mediaKeysEvent = _ref[1];
    var _mediaKeysEvent$value = mediaKeysEvent.value,
        mediaKeys = _mediaKeysEvent$value.mediaKeys,
        mediaKeySystemAccess = _mediaKeysEvent$value.mediaKeySystemAccess,
        stores = _mediaKeysEvent$value.stores,
        options = _mediaKeysEvent$value.options;
    var blacklistError = blacklistedInitData.get(initializationData);

    if (blacklistError !== undefined) {
      if (initializationData.type === undefined) {
        log/* default.error */.Z.error("EME: The current session has already been blacklisted " + "but the current content is not known. Throwing.");
        var sessionError = blacklistError.sessionError;
        sessionError.fatal = true;
        return (0,throwError/* throwError */._)(sessionError);
      }

      log/* default.warn */.Z.warn("EME: The current session has already been blacklisted. " + "Blacklisting content.");
      return (0,of.of)({
        type: "blacklist-protection-data",
        value: initializationData
      });
    }

    if (!handledInitData.storeIfNone(initializationData, true)) {
      log/* default.debug */.Z.debug("EME: Init data already received. Skipping it.");
      return (0,of.of)({
        type: "init-data-ignored",
        value: {
          initializationData: initializationData
        }
      });
    }

    var serverCertificate = options.serverCertificate;
    var serverCertificate$ = i === 0 && !(0,is_null_or_undefined/* default */.Z)(serverCertificate) ? trySettingServerCertificate(mediaKeys, serverCertificate) : empty/* EMPTY */.E;
    var wantedSessionType;

    if (options.persistentLicense !== true) {
      wantedSessionType = "temporary";
    } else if (!canCreatePersistentSession(mediaKeySystemAccess)) {
      log/* default.warn */.Z.warn("EME: Cannot create \"persistent-license\" session: not supported");
      wantedSessionType = "temporary";
    } else {
      wantedSessionType = "persistent-license";
    }

    return (0,concat/* concat */.z)(serverCertificate$, getSession(initializationData, stores, wantedSessionType)).pipe((0,mergeMap/* mergeMap */.zg)(function (sessionEvt) {
      switch (sessionEvt.type) {
        case "warning":
          return (0,of.of)(sessionEvt);

        case "cleaning-old-session":
          handledInitData.remove(sessionEvt.value.initializationData);
          return empty/* EMPTY */.E;

        case "cleaned-old-session":
          return empty/* EMPTY */.E;

        case "created-session":
        case "loaded-open-session":
        case "loaded-persistent-session":
          // Do nothing, just to check every possibility is taken
          break;

        default:
          // Use TypeScript to check if all possibilities have been checked
          (0,assert_unreachable/* default */.Z)(sessionEvt);
      }

      var _sessionEvt$value = sessionEvt.value,
          mediaKeySession = _sessionEvt$value.mediaKeySession,
          sessionType = _sessionEvt$value.sessionType;
      var generateRequest$ = sessionEvt.type !== "created-session" ? empty/* EMPTY */.E : generateKeyRequest(mediaKeySession, initializationData).pipe((0,tap/* tap */.b)(function () {
        var persistentSessionsStore = stores.persistentSessionsStore;

        if (sessionType === "persistent-license" && persistentSessionsStore !== null) {
          cleanOldStoredPersistentInfo(persistentSessionsStore, EME_MAX_STORED_PERSISTENT_SESSION_INFORMATION - 1);
          persistentSessionsStore.add(initializationData, mediaKeySession);
        }
      }), (0,catchError/* catchError */.K)(function (error) {
        throw new encrypted_media_error/* default */.Z("KEY_GENERATE_REQUEST_ERROR", error instanceof Error ? error.toString() : "Unknown error");
      }), (0,ignoreElements/* ignoreElements */.l)());
      return (0,merge/* merge */.T)(SessionEventsListener(mediaKeySession, options, mediaKeySystemAccess.keySystem, initializationData), generateRequest$).pipe((0,catchError/* catchError */.K)(function (err) {
        if (!(err instanceof BlacklistedSessionError)) {
          throw err;
        }

        blacklistedInitData.store(initializationData, err);
        var sessionError = err.sessionError;

        if (initializationData.type === undefined) {
          log/* default.error */.Z.error("EME: Current session blacklisted and content not known. " + "Throwing.");
          sessionError.fatal = true;
          throw sessionError;
        }

        log/* default.warn */.Z.warn("EME: Current session blacklisted. Blacklisting content.");
        return (0,of.of)({
          type: "warning",
          value: sessionError
        }, {
          type: "blacklist-protection-data",
          value: initializationData
        });
      }));
    }));
  }));
  return (0,merge/* merge */.T)(mediaKeysInit$, mediaEncryptedEvents$.pipe((0,map/* map */.U)(function (evt) {
    return {
      type: "encrypted-event-received",
      value: evt
    };
  })), bindSession$);
}
/**
 * Returns `true` if the given MediaKeySystemAccess can create
 * "persistent-license" MediaKeySessions.
 * @param {MediaKeySystemAccess} mediaKeySystemAccess
 * @returns {Boolean}
 */

function canCreatePersistentSession(mediaKeySystemAccess) {
  var _mediaKeySystemAccess = mediaKeySystemAccess.getConfiguration(),
      sessionTypes = _mediaKeySystemAccess.sessionTypes;

  return sessionTypes !== undefined && (0,array_includes/* default */.Z)(sessionTypes, "persistent-license");
}
;// CONCATENATED MODULE: ./src/core/eme/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * /!\ This file is feature-switchable.
 * It always should be imported through the `features` object.
 */





/* harmony default export */ const eme = (EMEManager);


/***/ }),

/***/ 6033:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Store the MediaKeys infos attached to a media element.
var currentMediaState = new WeakMap();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  /**
   * Update MediaKeys infos set on a HMTLMediaElement
   * @param {HTMLMediaElement} mediaElement
   * @param {Object} state
   */
  setState: function setState(mediaElement, state) {
    currentMediaState.set(mediaElement, state);
  },

  /**
   * Get MediaKeys infos currently set on a HMTLMediaElement
   * @param {HTMLMediaElement} mediaElement
   * @returns {Object}
   */
  getState: function getState(mediaElement) {
    var currentState = currentMediaState.get(mediaElement);
    return currentState === undefined ? null : currentState;
  },

  /**
   * Remove MediaKeys infos currently set on a HMTLMediaElement
   * @param {HTMLMediaElement} mediaElement
   */
  clearState: function clearState(mediaElement) {
    currentMediaState.set(mediaElement, null);
  }
});

/***/ }),

/***/ 4507:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Z": () => /* binding */ createEMEManager
});

// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/merge.js
var merge = __webpack_require__(4370);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/of.js
var of = __webpack_require__(8170);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/map.js
var map = __webpack_require__(5709);
// EXTERNAL MODULE: ./src/compat/eme/custom_media_keys/index.ts + 7 modules
var custom_media_keys = __webpack_require__(6139);
;// CONCATENATED MODULE: ./src/compat/has_eme_apis.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns true if the browser has the minimum needed EME APIs to decrypt a
 * content.
 * @returns {Boolean}
 */

function hasEMEAPIs() {
  return typeof custom_media_keys/* requestMediaKeySystemAccess */.N === "function";
}
// EXTERNAL MODULE: ./src/compat/event_listeners.ts + 4 modules
var event_listeners = __webpack_require__(1473);
// EXTERNAL MODULE: ./src/errors/encrypted_media_error.ts
var encrypted_media_error = __webpack_require__(5157);
// EXTERNAL MODULE: ./src/features/index.ts
var features = __webpack_require__(7874);
// EXTERNAL MODULE: ./src/log.ts + 1 modules
var log = __webpack_require__(3887);
;// CONCATENATED MODULE: ./src/core/init/create_eme_manager.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */






var onEncrypted$ = event_listeners/* onEncrypted$ */.Oh;
/**
 * Create EMEManager if possible (has the APIs and configuration).
 * Else, return an Observable throwing at the next encrypted event encountered.
 * @param {HTMLMediaElement} mediaElement
 * @param {Array.<Object>} keySystems
 * @param {Observable<Object>} contentProtections$
 * @returns {Observable}
 */

function createEMEManager(mediaElement, keySystems, contentProtections$) {
  var encryptedEvents$ = (0,merge/* merge */.T)(onEncrypted$(mediaElement), contentProtections$);

  if (features/* default.emeManager */.Z.emeManager == null) {
    return (0,merge/* merge */.T)(encryptedEvents$.pipe((0,map/* map */.U)(function () {
      log/* default.error */.Z.error("Init: Encrypted event but EME feature not activated");
      throw new encrypted_media_error/* default */.Z("MEDIA_IS_ENCRYPTED_ERROR", "EME feature not activated.");
    })), (0,of.of)({
      type: "eme-disabled"
    }));
  }

  if (keySystems.length === 0) {
    return (0,merge/* merge */.T)(encryptedEvents$.pipe((0,map/* map */.U)(function () {
      log/* default.error */.Z.error("Init: Ciphered media and no keySystem passed");
      throw new encrypted_media_error/* default */.Z("MEDIA_IS_ENCRYPTED_ERROR", "Media is encrypted and no `keySystems` given");
    })), (0,of.of)({
      type: "eme-disabled"
    }));
  }

  if (!hasEMEAPIs()) {
    return (0,merge/* merge */.T)(encryptedEvents$.pipe((0,map/* map */.U)(function () {
      log/* default.error */.Z.error("Init: Encrypted event but no EME API available");
      throw new encrypted_media_error/* default */.Z("MEDIA_IS_ENCRYPTED_ERROR", "Encryption APIs not found.");
    })), (0,of.of)({
      type: "eme-disabled"
    }));
  }

  log/* default.debug */.Z.debug("Init: Creating EMEManager");
  return features/* default.emeManager */.Z.emeManager(mediaElement, keySystems, contentProtections$);
}

/***/ }),

/***/ 8343:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Construct a "loaded" event.
 * @returns {Object}
 */
function loaded(segmentBuffersStore) {
  return {
    type: "loaded",
    value: {
      segmentBuffersStore: segmentBuffersStore
    }
  };
}
/**
 * Construct a "stalled" event.
 * @param {Object|null} stalling
 * @returns {Object}
 */


function stalled(stalling) {
  return {
    type: "stalled",
    value: stalling
  };
}
/**
 * Construct a "stalled" event.
 * @param {Object|null} stalling
 * @returns {Object}
 */


function unstalled() {
  return {
    type: "unstalled",
    value: null
  };
}
/**
 * Construct a "decipherabilityUpdate" event.
 * @param {Array.<Object>} arg
 * @returns {Object}
 */


function decipherabilityUpdate(arg) {
  return {
    type: "decipherabilityUpdate",
    value: arg
  };
}
/**
 * Construct a "manifestReady" event.
 * @param {Object} manifest
 * @returns {Object}
 */


function manifestReady(manifest) {
  return {
    type: "manifestReady",
    value: {
      manifest: manifest
    }
  };
}
/**
 * Construct a "manifestUpdate" event.
 * @returns {Object}
 */


function manifestUpdate() {
  return {
    type: "manifestUpdate",
    value: null
  };
}
/**
 * Construct a "representationChange" event.
 * @param {string} type
 * @param {Object} period
 * @returns {Object}
 */


function nullRepresentation(type, period) {
  return {
    type: "representationChange",
    value: {
      type: type,
      representation: null,
      period: period
    }
  };
}
/**
 * construct a "warning" event.
 * @param {error} value
 * @returns {object}
 */


function warning(value) {
  return {
    type: "warning",
    value: value
  };
}
/**
 * construct a "reloading-media-source" event.
 * @returns {object}
 */


function reloadingMediaSource() {
  return {
    type: "reloading-media-source",
    value: undefined
  };
}

var INIT_EVENTS = {
  loaded: loaded,
  decipherabilityUpdate: decipherabilityUpdate,
  manifestReady: manifestReady,
  manifestUpdate: manifestUpdate,
  nullRepresentation: nullRepresentation,
  reloadingMediaSource: reloadingMediaSource,
  stalled: stalled,
  unstalled: unstalled,
  warning: warning
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (INIT_EVENTS);

/***/ }),

/***/ 2795:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Z": () => /* binding */ seekAndLoadOnMediaEvents
});

// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/concat.js
var concat = __webpack_require__(9795);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/of.js
var of = __webpack_require__(8170);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/filter.js
var filter = __webpack_require__(6008);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/take.js
var take = __webpack_require__(1015);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/mapTo.js
var mapTo = __webpack_require__(5602);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/catchError.js
var catchError = __webpack_require__(486);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/tap.js
var tap = __webpack_require__(3068);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/shareReplay.js
var shareReplay = __webpack_require__(7006);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/mergeMap.js
var mergeMap = __webpack_require__(7746);
// EXTERNAL MODULE: ./src/compat/browser_detection.ts
var browser_detection = __webpack_require__(3666);
;// CONCATENATED MODULE: ./src/compat/should_wait_for_data_before_loaded.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * On some browsers, the ready state might never go above `1` when autoplay is
 * blocked. On these cases, for now, we just advertise the content as "loaded".
 * We might go into BUFFERING just after that state, but that's a small price to
 * pay.
 * @param {Boolean} isDirectfile
 * @returns {Boolean}
 */

function shouldWaitForDataBeforeLoaded(isDirectfile, mustPlayInline) {
  if (isDirectfile && browser_detection/* isSafariMobile */.SB) {
    return mustPlayInline;
  }

  return true;
}
;// CONCATENATED MODULE: ./src/compat/should_validate_metadata.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns true if the metadata received after a "loadedmetadata" event has
 * to be validated in the current browser (which means that we do not trust
 * this event on these browsers).
 * @returns {boolean}
 */

function shouldValidateMetadata() {
  return browser_detection/* isSamsungBrowser */.op;
}
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/defer.js
var defer = __webpack_require__(1410);
// EXTERNAL MODULE: ./src/utils/cast_to_observable.ts
var cast_to_observable = __webpack_require__(8117);
// EXTERNAL MODULE: ./src/utils/rx-try_catch.ts
var rx_try_catch = __webpack_require__(5561);
;// CONCATENATED MODULE: ./src/compat/play.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Call play on the media element on subscription and return the response as an
 * observable.
 * @param {HTMLMediaElement} mediaElement
 * @returns {Observable}
 */

function play$(mediaElement) {
  return (0,defer/* defer */.P)(function () {
    return (// mediaElement.play is not always a Promise. In the improbable case it
      // throws, I prefer still to catch to return the error wrapped in an
      // Observable
      (0,rx_try_catch/* default */.Z)(function () {
        return (0,cast_to_observable/* default */.Z)(mediaElement.play());
      }, undefined)
    );
  });
}
// EXTERNAL MODULE: ./src/compat/browser_compatibility_types.ts
var browser_compatibility_types = __webpack_require__(3774);
// EXTERNAL MODULE: ./src/compat/event_listeners.ts + 4 modules
var event_listeners = __webpack_require__(1473);
;// CONCATENATED MODULE: ./src/compat/when_loaded_metadata.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * Returns an observable emitting a single time, as soon as a seek is possible
 * (the metadata are loaded).
 * @param {HTMLMediaElement} mediaElement
 * @returns {Observable}
 */

function whenLoadedMetadata$(mediaElement) {
  if (mediaElement.readyState >= browser_compatibility_types/* READY_STATES.HAVE_METADATA */.cX.HAVE_METADATA) {
    return (0,of.of)(null);
  } else {
    return (0,event_listeners/* onLoadedMetadata$ */.K4)(mediaElement).pipe((0,take/* take */.q)(1));
  }
}
// EXTERNAL MODULE: ./src/log.ts + 1 modules
var log = __webpack_require__(3887);
;// CONCATENATED MODULE: ./src/core/init/initial_seek_and_play.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * Emit once a "can-play" message as soon as the clock$ announce that the content
 * can begin to be played.
 *
 * Warn you if the metadata is not yet loaded metadata by emitting a
 * "not-loaded-metadata" message first.
 * @param {Observable} clock$
 * @returns {Observable}
 */

function canPlay(clock$, mediaElement, isDirectfile) {
  var isLoaded$ = clock$.pipe((0,filter/* filter */.h)(function (tick) {
    var seeking = tick.seeking,
        stalled = tick.stalled,
        readyState = tick.readyState,
        currentRange = tick.currentRange;

    if (seeking || stalled !== null) {
      return false;
    }

    if (!shouldWaitForDataBeforeLoaded(isDirectfile, mediaElement.hasAttribute("playsinline"))) {
      return readyState >= 1 && mediaElement.duration > 0;
    }

    if (readyState >= 4 || readyState === 3 && currentRange !== null) {
      return shouldValidateMetadata() ? mediaElement.duration > 0 : true;
    }

    return false;
  }), (0,take/* take */.q)(1), (0,mapTo/* mapTo */.h)("can-play"));

  if (shouldValidateMetadata() && mediaElement.duration === 0) {
    return (0,concat/* concat */.z)((0,of.of)("not-loaded-metadata"), isLoaded$);
  }

  return isLoaded$;
}
/**
 * Try to play content then handle autoplay errors.
 * @param {HTMLMediaElement} - mediaElement
 * @returns {Observable}
 */


function autoPlay$(mediaElement) {
  return play$(mediaElement).pipe((0,mapTo/* mapTo */.h)("autoplay"), (0,catchError/* catchError */.K)(function (error) {
    if (error instanceof Error && error.name === "NotAllowedError") {
      // auto-play was probably prevented.
      log/* default.warn */.Z.warn("Init: Media element can't play." + " It may be due to browser auto-play policies.");
      return (0,of.of)("autoplay-blocked");
    } else {
      throw error;
    }
  }));
}
/**
 * Returns two Observables:
 *
 *   - seek$: when subscribed, will seek to the wanted started time as soon as
 *     it can. Emit and complete when done.
 *
 *   - load$: when subscribed, will play if and only if the `mustAutoPlay`
 *     option is set as soon as it can. Emit and complete when done.
 *     When this observable emits, it also means that the content is `loaded`
 *     and can begin to play the current content.
 *
 * @param {Object} args
 * @returns {Object}
 */


function seekAndLoadOnMediaEvents(_ref) {
  var clock$ = _ref.clock$,
      mediaElement = _ref.mediaElement,
      startTime = _ref.startTime,
      mustAutoPlay = _ref.mustAutoPlay,
      isDirectfile = _ref.isDirectfile;
  var seek$ = whenLoadedMetadata$(mediaElement).pipe((0,take/* take */.q)(1), (0,tap/* tap */.b)(function () {
    log/* default.info */.Z.info("Init: Set initial time", startTime);
    mediaElement.currentTime = typeof startTime === "function" ? startTime() : startTime;
  }), (0,shareReplay/* shareReplay */.d)({
    refCount: true
  }));
  var load$ = seek$.pipe((0,mergeMap/* mergeMap */.zg)(function () {
    return canPlay(clock$, mediaElement, isDirectfile).pipe((0,tap/* tap */.b)(function () {
      return log/* default.info */.Z.info("Init: Can begin to play content");
    }), (0,mergeMap/* mergeMap */.zg)(function (evt) {
      if (evt === "can-play") {
        if (!mustAutoPlay) {
          return (0,of.of)("loaded");
        }

        return autoPlay$(mediaElement);
      }

      return (0,of.of)(evt);
    }));
  }), (0,shareReplay/* shareReplay */.d)({
    refCount: true
  }));
  return {
    seek$: seek$,
    load$: load$
  };
}

/***/ }),

/***/ 8969:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Z": () => /* binding */ initializeDirectfileContent
});

// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/empty.js
var empty = __webpack_require__(5631);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/of.js
var of = __webpack_require__(8170);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/merge.js
var merge = __webpack_require__(4370);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/mergeMap.js
var mergeMap = __webpack_require__(7746);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/share.js
var share = __webpack_require__(9095);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/ignoreElements.js
var ignoreElements = __webpack_require__(6738);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/map.js
var map = __webpack_require__(5709);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/filter.js
var filter = __webpack_require__(6008);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/take.js
var take = __webpack_require__(1015);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/mergeMapTo.js
var mergeMapTo = __webpack_require__(3756);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/Observable.js + 3 modules
var Observable = __webpack_require__(4379);
// EXTERNAL MODULE: ./src/log.ts + 1 modules
var log = __webpack_require__(3887);
// EXTERNAL MODULE: ./src/compat/clear_element_src.ts
var clear_element_src = __webpack_require__(5767);
;// CONCATENATED MODULE: ./src/compat/set_element_src.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Set an URL to the element's src.
 * Emit ``undefined`` when done.
 * Unlink src on unsubscription.
 *
 * @param {HTMLMediaElement} mediaElement
 * @param {string} url
 * @returns {Observable}
 */

function setElementSrc$(mediaElement, url) {
  return new Observable/* Observable */.y(function (observer) {
    log/* default.info */.Z.info("Setting URL to Element", url, mediaElement);
    mediaElement.src = url;
    observer.next(undefined);
    return function () {
      (0,clear_element_src/* default */.Z)(mediaElement);
    };
  });
}
// EXTERNAL MODULE: ./src/errors/media_error.ts
var media_error = __webpack_require__(3714);
// EXTERNAL MODULE: ./src/utils/defer_subscriptions.ts + 6 modules
var defer_subscriptions = __webpack_require__(8025);
// EXTERNAL MODULE: ./src/core/init/create_eme_manager.ts + 1 modules
var create_eme_manager = __webpack_require__(4507);
// EXTERNAL MODULE: ./src/core/init/events_generators.ts
var events_generators = __webpack_require__(8343);
// EXTERNAL MODULE: ./src/core/init/initial_seek_and_play.ts + 4 modules
var initial_seek_and_play = __webpack_require__(2795);
// EXTERNAL MODULE: ./src/core/init/throw_on_media_error.ts
var throw_on_media_error = __webpack_require__(2447);
// EXTERNAL MODULE: ./src/core/init/update_playback_rate.ts
var update_playback_rate = __webpack_require__(2983);
;// CONCATENATED MODULE: ./src/core/init/initialize_directfile.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * /!\ This file is feature-switchable.
 * It always should be imported through the `features` object.
 */











/**
 * calculate initial time as a position in seconds.
 * @param {HTMLMediaElement} mediaElement
 * @param {Object|undefined} startAt
 * @returns {number}
 */

function getDirectFileInitialTime(mediaElement, startAt) {
  if (startAt == null) {
    return 0;
  }

  if (startAt.position != null) {
    return startAt.position;
  } else if (startAt.wallClockTime != null) {
    return startAt.wallClockTime;
  } else if (startAt.fromFirstPosition != null) {
    return startAt.fromFirstPosition;
  }

  var duration = mediaElement.duration;

  if (duration == null || !isFinite(duration)) {
    log/* default.warn */.Z.warn("startAt.fromLastPosition set but no known duration, " + "beginning at 0.");
    return 0;
  }

  if (typeof startAt.fromLastPosition === "number") {
    return Math.max(0, duration + startAt.fromLastPosition);
  } else if (startAt.percentage != null) {
    var percentage = startAt.percentage;

    if (percentage >= 100) {
      return duration;
    } else if (percentage <= 0) {
      return 0;
    }

    var ratio = +percentage / 100;
    return duration * ratio;
  }

  return 0;
}
/**
 * Launch a content in "Directfile mode".
 * @param {Object} directfileOptions
 * @returns {Observable}
 */


function initializeDirectfileContent(_ref) {
  var autoPlay = _ref.autoPlay,
      clock$ = _ref.clock$,
      keySystems = _ref.keySystems,
      mediaElement = _ref.mediaElement,
      speed$ = _ref.speed$,
      startAt = _ref.startAt,
      url = _ref.url;
  (0,clear_element_src/* default */.Z)(mediaElement);

  if (url == null) {
    throw new Error("No URL for a DirectFile content");
  } // Start everything! (Just put the URL in the element's src).


  var linkURL$ = setElementSrc$(mediaElement, url);
  log/* default.debug */.Z.debug("Init: Calculating initial time");

  var initialTime = function initialTime() {
    return getDirectFileInitialTime(mediaElement, startAt);
  };

  log/* default.debug */.Z.debug("Init: Initial time calculated:", initialTime);

  var _seekAndLoadOnMediaEv = (0,initial_seek_and_play/* default */.Z)({
    clock$: clock$,
    mediaElement: mediaElement,
    startTime: initialTime,
    mustAutoPlay: autoPlay,
    isDirectfile: true
  }),
      seek$ = _seekAndLoadOnMediaEv.seek$,
      load$ = _seekAndLoadOnMediaEv.load$; // Create EME Manager, an observable which will manage every EME-related
  // issue.


  var emeManager$ = linkURL$.pipe((0,mergeMap/* mergeMap */.zg)(function () {
    return (0,create_eme_manager/* default */.Z)(mediaElement, keySystems, empty/* EMPTY */.E);
  }), (0,defer_subscriptions/* default */.Z)(), (0,share/* share */.B)()); // Translate errors coming from the media element into RxPlayer errors
  // through a throwing Observable.

  var mediaError$ = (0,throw_on_media_error/* default */.Z)(mediaElement); // Set the speed set by the user on the media element while pausing a
  // little longer while the buffer is empty.

  var playbackRate$ = (0,update_playback_rate/* default */.Z)(mediaElement, speed$, clock$, {
    pauseWhenStalled: true
  }).pipe((0,ignoreElements/* ignoreElements */.l)()); // Create Stalling Manager, an observable which will try to get out of
  // various infinite stalling issues

  var stalled$ = clock$.pipe((0,map/* map */.U)(function (tick) {
    return tick.stalled === null ? events_generators/* default.unstalled */.Z.unstalled() : events_generators/* default.stalled */.Z.stalled(tick.stalled);
  })); // Manage "loaded" event and warn if autoplay is blocked on the current browser

  var loadedEvent$ = emeManager$.pipe((0,filter/* filter */.h)(function isEMEReady(evt) {
    if (evt.type === "created-media-keys") {
      evt.value.attachMediaKeys$.next();
      return true;
    }

    return evt.type === "eme-disabled" || evt.type === "attached-media-keys";
  }), (0,take/* take */.q)(1), (0,mergeMapTo/* mergeMapTo */.j)(load$), (0,mergeMap/* mergeMap */.zg)(function (evt) {
    if (evt === "autoplay-blocked") {
      var error = new media_error/* default */.Z("MEDIA_ERR_BLOCKED_AUTOPLAY", "Cannot trigger auto-play automatically: " + "your browser does not allow it.");
      return (0,of.of)(events_generators/* default.warning */.Z.warning(error), events_generators/* default.loaded */.Z.loaded(null));
    } else if (evt === "not-loaded-metadata") {
      var _error = new media_error/* default */.Z("MEDIA_ERR_NOT_LOADED_METADATA", "Cannot load automatically: your browser " + "falsely announced having loaded the content.");

      return (0,of.of)(events_generators/* default.warning */.Z.warning(_error));
    }

    return (0,of.of)(events_generators/* default.loaded */.Z.loaded(null));
  }));
  var initialSeek$ = seek$.pipe((0,ignoreElements/* ignoreElements */.l)());
  return (0,merge/* merge */.T)(loadedEvent$, initialSeek$, emeManager$, mediaError$, playbackRate$, stalled$);
}

/***/ }),

/***/ 2447:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ throwOnMediaError
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7027);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7746);
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3714);
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Returns an observable which throws the right MediaError as soon an "error"
 * event is received through the media element.
 * @param {HTMLMediaElement} mediaElement
 * @returns {Observable}
 */

function throwOnMediaError(mediaElement) {
  return (0,rxjs__WEBPACK_IMPORTED_MODULE_0__/* .fromEvent */ .R)(mediaElement, "error").pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_1__/* .mergeMap */ .zg)(function () {
    var errorCode = mediaElement.error == null ? 0 : mediaElement.error.code;

    switch (errorCode) {
      case 1:
        throw new _errors__WEBPACK_IMPORTED_MODULE_2__/* .default */ .Z("MEDIA_ERR_ABORTED", "The fetching of the associated resource was aborted " + "by the user's request.");

      case 2:
        throw new _errors__WEBPACK_IMPORTED_MODULE_2__/* .default */ .Z("MEDIA_ERR_NETWORK", "A network error occurred which prevented the media " + "from being successfully fetched");

      case 3:
        throw new _errors__WEBPACK_IMPORTED_MODULE_2__/* .default */ .Z("MEDIA_ERR_DECODE", "An error occurred while trying to decode the media " + "resource");

      case 4:
        throw new _errors__WEBPACK_IMPORTED_MODULE_2__/* .default */ .Z("MEDIA_ERR_SRC_NOT_SUPPORTED", "The media resource has been found to be unsuitable.");

      default:
        throw new _errors__WEBPACK_IMPORTED_MODULE_2__/* .default */ .Z("MEDIA_ERR_UNKNOWN", "The HTMLMediaElement errored due to an unknown reason.");
    }
  }));
}

/***/ }),

/***/ 2983:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ updatePlaybackRate
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8170);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(1410);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5709);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3485);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(1931);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6381);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(3068);
/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(3887);
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Manage playback speed.
 * Set playback rate set by the user, pause playback when the player appear to
 * stall and restore the speed once it appears to un-stall.
 *
 * @param {HTMLMediaElement} mediaElement
 * @param {Observable} speed$ - emit speed set by the user
 * @param {Observable} clock$ - Current playback conditions
 * @param {Object} options - Contains the following properties:
 *   - pauseWhenStalled {Boolean|undefined} - true if the player
 *     stalling should lead to a pause until it un-stalls. True by default.
 * @returns {Observable}
 */

function updatePlaybackRate(mediaElement, speed$, clock$, _ref) {
  var _ref$pauseWhenStalled = _ref.pauseWhenStalled,
      pauseWhenStalled = _ref$pauseWhenStalled === void 0 ? true : _ref$pauseWhenStalled;
  var forcePause$;

  if (!pauseWhenStalled) {
    forcePause$ = (0,rxjs__WEBPACK_IMPORTED_MODULE_0__.of)(false);
  } else {
    forcePause$ = clock$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_1__/* .map */ .U)(function (timing) {
      return timing.stalled !== null;
    }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_2__/* .startWith */ .O)(false), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__/* .distinctUntilChanged */ .x)());
  }

  return forcePause$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__/* .switchMap */ .w)(function (shouldForcePause) {
    if (shouldForcePause) {
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__/* .defer */ .P)(function () {
        _log__WEBPACK_IMPORTED_MODULE_6__/* .default.info */ .Z.info("Init: Pause playback to build buffer");
        mediaElement.playbackRate = 0;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_0__.of)(0);
      });
    }

    return speed$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__/* .tap */ .b)(function (speed) {
      _log__WEBPACK_IMPORTED_MODULE_6__/* .default.info */ .Z.info("Init: Resume playback speed", speed);
      mediaElement.playbackRate = speed;
    }));
  }));
}

/***/ }),

/***/ 7127:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Z": () => /* binding */ implementations_image
});

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/inheritsLoose.js
var inheritsLoose = __webpack_require__(5354);
var inheritsLoose_default = /*#__PURE__*/__webpack_require__.n(inheritsLoose);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/defer.js
var defer = __webpack_require__(1410);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/of.js
var of = __webpack_require__(8170);
// EXTERNAL MODULE: ./src/log.ts + 1 modules
var log = __webpack_require__(3887);
// EXTERNAL MODULE: ./src/core/segment_buffers/implementations/types.ts + 1 modules
var types = __webpack_require__(4123);
// EXTERNAL MODULE: ./src/core/segment_buffers/implementations/utils/manual_time_ranges.ts
var manual_time_ranges = __webpack_require__(4309);
;// CONCATENATED MODULE: ./src/core/segment_buffers/implementations/image/image_segment_buffer.ts


/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * Image SegmentBuffer implementation.
 * @class ImageSegmentBuffer
 */

var ImageSegmentBuffer = /*#__PURE__*/function (_SegmentBuffer) {
  inheritsLoose_default()(ImageSegmentBuffer, _SegmentBuffer);

  function ImageSegmentBuffer() {
    var _this;

    log/* default.debug */.Z.debug("ISB: Creating ImageSegmentBuffer");
    _this = _SegmentBuffer.call(this) || this;
    _this.bufferType = "image";
    _this._buffered = new manual_time_ranges/* default */.Z();
    return _this;
  }
  /**
   * @param {Object} data
   */


  var _proto = ImageSegmentBuffer.prototype;

  _proto.pushChunk = function pushChunk(infos) {
    var _this2 = this;

    return (0,defer/* defer */.P)(function () {
      var _a, _b;

      log/* default.debug */.Z.debug("ISB: appending new data.");

      if (infos.data.chunk === null) {
        return (0,of.of)(undefined);
      }

      var _infos$data = infos.data,
          appendWindow = _infos$data.appendWindow,
          chunk = _infos$data.chunk;
      var start = chunk.start,
          end = chunk.end,
          timescale = chunk.timescale;
      var appendWindowStart = (_a = appendWindow[0]) !== null && _a !== void 0 ? _a : 0;
      var appendWindowEnd = (_b = appendWindow[1]) !== null && _b !== void 0 ? _b : Infinity;
      var timescaledStart = start / timescale;
      var timescaledEnd = end / timescale;
      var startTime = Math.max(appendWindowStart, timescaledStart);
      var endTime = Math.min(appendWindowEnd, timescaledEnd);

      _this2._buffered.insert(startTime, endTime);

      if (infos.inventoryInfos !== null) {
        _this2._segmentInventory.insertChunk(infos.inventoryInfos);
      }

      return (0,of.of)(undefined);
    });
  }
  /**
   * @param {Number} from
   * @param {Number} to
   */
  ;

  _proto.removeBuffer = function removeBuffer(start, end) {
    return (0,defer/* defer */.P)(function () {
      log/* default.info */.Z.info("ISB: ignored image data remove order", start, end); // Logic removed as it caused more problems than it resolved:
      // Image thumbnails are always downloaded as a single BIF file, meaning that
      // any removing might necessitate to re-load the whole file in the future
      // which seems pointless.
      // In any case, image handling through the regular RxPlayer APIs has been
      // completely deprecated now for several reasons, and should disappear in
      // the next major version.

      return (0,of.of)(undefined);
    });
  }
  /**
   * Indicate that every chunks from a Segment has been given to pushChunk so
   * far.
   * This will update our internal Segment inventory accordingly.
   * The returned Observable will emit and complete successively once the whole
   * segment has been pushed and this indication is acknowledged.
   * @param {Object} infos
   * @returns {Observable}
   */
  ;

  _proto.endOfSegment = function endOfSegment(_infos) {
    var _this3 = this;

    return (0,defer/* defer */.P)(function () {
      _this3._segmentInventory.completeSegment(_infos);

      return (0,of.of)(undefined);
    });
  }
  /**
   * Returns the currently buffered data, in a TimeRanges object.
   * @returns {TimeRanges}
   */
  ;

  _proto.getBufferedRanges = function getBufferedRanges() {
    return this._buffered;
  };

  _proto.dispose = function dispose() {
    log/* default.debug */.Z.debug("ISB: disposing image SegmentBuffer");

    this._buffered.remove(0, Infinity);
  };

  return ImageSegmentBuffer;
}(types/* SegmentBuffer */.C);


;// CONCATENATED MODULE: ./src/core/segment_buffers/implementations/image/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* harmony default export */ const implementations_image = (ImageSegmentBuffer);

/***/ }),

/***/ 5192:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Z": () => /* binding */ html
});

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/inheritsLoose.js
var inheritsLoose = __webpack_require__(5354);
var inheritsLoose_default = /*#__PURE__*/__webpack_require__.n(inheritsLoose);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/merge.js
var merge = __webpack_require__(4370);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/interval.js
var observable_interval = __webpack_require__(6564);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/concat.js
var concat = __webpack_require__(9795);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/of.js
var of = __webpack_require__(8170);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/Subject.js
var Subject = __webpack_require__(211);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/defer.js
var defer = __webpack_require__(1410);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/startWith.js
var startWith = __webpack_require__(3485);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/switchMapTo.js
var switchMapTo = __webpack_require__(1198);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/mapTo.js
var mapTo = __webpack_require__(5602);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/takeUntil.js
var takeUntil = __webpack_require__(1558);
// EXTERNAL MODULE: ./src/compat/event_listeners.ts + 4 modules
var event_listeners = __webpack_require__(1473);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/Observable.js + 3 modules
var Observable = __webpack_require__(4379);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/map.js
var map = __webpack_require__(5709);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/distinctUntilChanged.js
var distinctUntilChanged = __webpack_require__(1931);
// EXTERNAL MODULE: ./src/log.ts + 1 modules
var log = __webpack_require__(3887);
// EXTERNAL MODULE: ./src/compat/is_node.ts
var is_node = __webpack_require__(2203);
;// CONCATENATED MODULE: ./src/compat/on_height_width_change.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/* eslint-disable @typescript-eslint/no-unsafe-member-access */

/* eslint-disable @typescript-eslint/no-unsafe-assignment */

var _ResizeObserver = is_node/* default */.Z ? undefined : window.ResizeObserver;
/* eslint-enable @typescript-eslint/no-unsafe-member-access */

/* eslint-enable @typescript-eslint/no-unsafe-assignment */

/**
 * Emit the current height and width of the given `element` on subscribtion
 * and each time it changes.
 *
 * On some browsers, we might not be able to rely on a native API to know when
 * it changes, the `interval` argument allow us to provide us an inverval in
 * milliseconds at which we should query that element's size.
 * @param {HTMLElement} element
 * @param {number} interval
 * @returns {Observable}
 */


function onHeightWidthChange(element, interval) {
  return (0,defer/* defer */.P)(function () {
    if (_ResizeObserver !== undefined) {
      var lastHeight = -1;
      var lastWidth = -1;
      return new Observable/* Observable */.y(function (obs) {
        var resizeObserver = new _ResizeObserver(function (entries) {
          if (entries.length === 0) {
            log/* default.error */.Z.error("Compat: Resized but no observed element.");
            return;
          }

          var entry = entries[0];
          var _entry$contentRect = entry.contentRect,
              height = _entry$contentRect.height,
              width = _entry$contentRect.width;

          if (height !== lastHeight || width !== lastWidth) {
            lastHeight = height;
            lastWidth = width;
            obs.next({
              height: height,
              width: width
            });
          }
        });
        resizeObserver.observe(element);
        return function () {
          resizeObserver.disconnect();
        };
      });
    }

    return (0,observable_interval/* interval */.F)(interval).pipe((0,startWith/* startWith */.O)(null), (0,map/* map */.U)(function () {
      var _element$getBoundingC = element.getBoundingClientRect(),
          height = _element$getBoundingC.height,
          width = _element$getBoundingC.width;

      return {
        height: height,
        width: width
      };
    }), (0,distinctUntilChanged/* distinctUntilChanged */.x)(function (o, n) {
      return o.height === n.height && o.width === n.width;
    }));
  });
}
// EXTERNAL MODULE: ./src/config.ts
var config = __webpack_require__(944);
// EXTERNAL MODULE: ./src/core/segment_buffers/implementations/types.ts + 1 modules
var types = __webpack_require__(4123);
// EXTERNAL MODULE: ./src/core/segment_buffers/implementations/utils/manual_time_ranges.ts
var manual_time_ranges = __webpack_require__(4309);
// EXTERNAL MODULE: ./src/features/index.ts
var features = __webpack_require__(7874);
;// CONCATENATED MODULE: ./src/core/segment_buffers/implementations/text/html/parsers.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Convert text track data into timed HTML Cues.
 * @param {string} type - Text track format wanted
 * @param {string} data - Text track data
 * @param {Number} timestampOffset - offset to apply to every timed text
 * @param {string} [language] - language of the text tracks
 * @returns {Array.<Object>}
 * @throws Error - Throw if no parser is found for the given type
 */

function parseTextTrackToElements(type, data, timestampOffset, language) {
  log/* default.debug */.Z.debug("HTSB: Finding parser for html text tracks:", type);
  var parser = features/* default.htmlTextTracksParsers */.Z.htmlTextTracksParsers[type];

  if (typeof parser !== "function") {
    throw new Error("no parser found for the given text track");
  }

  log/* default.debug */.Z.debug("HTSB: Parser found, parsing...");
  var parsed = parser(data, timestampOffset, language);
  log/* default.debug */.Z.debug("HTTB: Parsed successfully!", parsed);
  return parsed;
}
;// CONCATENATED MODULE: ./src/core/segment_buffers/implementations/text/html/utils.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Maximum time difference, in seconds, between two text segment's start times
 * and/or end times for them to be considered the same in the
 * HTMLTextSegmentBuffer (used for the "html" textTrackMode).
 *
 * For example for two segments s1 and s2 which have a start time respectively
 * of st1 and st2 and end time of et1 and et2:
 *   - if both the absolute difference between st1 and st2 AND the one between
 *     et1 and et2 is inferior or equal to the MAX_DELTA_BUFFER_TIME, s1 and s2
 *     are considered to target the exact same time. As a consequence, if s2 is
 *     added after s1 in the buffer, s1 will be completely replaced by it and
 *     vice-versa.
 *   - if only one of the two (absolute difference between st1 and st2 OR et1
 *     and et2) is inferior to the MAX_DELTA_BUFFER_TIME then the last added
 *     is not completely considered the same. It WILL still replace - either
 *     partially or completely (depending on the sign of the other difference) -
 *     the previously added segment.
 *   - if both differences are strictly superior to the MAX_DELTA_BUFFER_TIME,
 *     then they are not considered to have the same start nor the same end.
 *     They can still overlap however, and MIGHT thus still replace partially
 *     or completely each other.
 *
 * Setting a value too low might lead to two segments targeting the same time,
 * both being present in the buffer. In worst case scenarios, this could lead
 * to indicate that an unwanted text track is still here (theorically though,
 * this is a case that should never happen for reasons that might be too long
 * to explain here).
 *
 * Setting a value too high might lead to two segments targeting different times
 * to be wrongly believed to target the same time. In worst case scenarios, this
 * could lead to wanted text tracks being removed.
 * @type Number
 */
var MAX_DELTA_BUFFER_TIME = 0.2;
/**
 * @see MAX_DELTA_BUFFER_TIME
 * @param {Number} a
 * @param {Number} b
 * @returns {Boolean}
 */

function areNearlyEqual(a, b) {
  return Math.abs(a - b) <= MAX_DELTA_BUFFER_TIME;
}
/**
 * Get all cues which have data before the given time.
 * @param {Object} cues
 * @param {Number} time
 * @returns {Array.<Object>}
 */

function getCuesBefore(cues, time) {
  for (var i = cues.length - 1; i >= 0; i--) {
    var cue = cues[i];

    if (cue.start < time) {
      return cues.slice(0, i + 1);
    }
  }

  return [];
}
/**
 * Get all cues which have data after the given time.
 * @param {Object} cues
 * @param {Number} time
 * @returns {Array.<Object>}
 */

function getCuesAfter(cues, time) {
  for (var i = 0; i < cues.length; i++) {
    var cue = cues[i];

    if (cue.end > time) {
      return cues.slice(i, cues.length);
    }
  }

  return [];
}
/**
 * @param {Object} cuesInfos
 * @param {Number} start
 * @param {Number} end
 * @returns {Array.<Object>}
 */

function removeCuesInfosBetween(cuesInfos, start, end) {
  var endCuesInfos1 = Math.max(cuesInfos.start, start);
  var cues1 = getCuesBefore(cuesInfos.cues, start);
  var cuesInfos1 = {
    start: cuesInfos.start,
    end: endCuesInfos1,
    cues: cues1
  };
  var startCuesInfos2 = Math.min(end, cuesInfos.end);
  var cues2 = getCuesAfter(cuesInfos.cues, end);
  var cuesInfos2 = {
    start: startCuesInfos2,
    end: cuesInfos.end,
    cues: cues2
  };
  return [cuesInfos1, cuesInfos2];
}
;// CONCATENATED MODULE: ./src/core/segment_buffers/implementations/text/html/text_track_cues_store.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Manage the buffer of the HTMLTextSegmentBuffer.
 * Allows to add, remove and recuperate cues at given times.
 * @class TextTrackCuesStore
 */

var TextTrackCuesStore = /*#__PURE__*/function () {
  function TextTrackCuesStore() {
    this._cuesBuffer = [];
  }
  /**
   * Get corresponding cue(s) for the given time.
   * A cue is an object with three properties:
   *   - start {Number}: start time for which the cue should be displayed.
   *   - end {Number}: end time for which the cue should be displayed.
   *   - element {HTMLElement}: The cue to diplay
   *
   * We do not mutate individual cue here.
   * That is, if the ``get`` method returns the same cue's reference than a
   * previous ``get`` call, its properties are guaranteed to have the exact same
   * values than before, if you did not mutate it on your side.
   * The inverse is true, if the values are the same than before, the reference
   * will stay the same (this is useful to easily check if the DOM should be
   * updated, for example).
   *
   * @param {Number} time
   * @returns {Array.<HTMLElement>} - The cues that need to be displayed at that
   * time.
   */


  var _proto = TextTrackCuesStore.prototype;

  _proto.get = function get(time) {
    var cuesBuffer = this._cuesBuffer;
    var ret = []; // begins at the end as most of the time the player will ask for the last
    // CuesGroup

    for (var i = cuesBuffer.length - 1; i >= 0; i--) {
      var segment = cuesBuffer[i];

      if (time < segment.end && time >= segment.start) {
        var cues = segment.cues;

        for (var j = 0; j < cues.length; j++) {
          if (time >= cues[j].start && time < cues[j].end) {
            ret.push(cues[j].element);
          }
        }

        return ret;
      }
    }

    return [];
  }
  /**
   * Remove cue from a certain range of time.
   * @param {Number} from
   * @param {Number} to
   */
  ;

  _proto.remove = function remove(from, _to) {
    if (false) {}

    var to = Math.max(from, _to);
    var cuesBuffer = this._cuesBuffer;

    for (var i = 0; i < cuesBuffer.length; i++) {
      if (cuesBuffer[i].end > from) {
        // this cuesInfos is concerned by the remove
        var startCuesInfos = cuesBuffer[i];

        if (startCuesInfos.start >= to) {
          // our cuesInfos is strictly after this interval, we have nothing to do
          return;
        }

        if (startCuesInfos.end >= to) {
          // our cuesInfos ends after `to`, we have to keep the end of it
          if (from <= startCuesInfos.start) {
            // from -> to only remove the start of startCuesInfos
            startCuesInfos.cues = getCuesAfter(startCuesInfos.cues, to);
            startCuesInfos.start = to;
          } else {
            // from -> to is in the middle part of startCuesInfos
            var _removeCuesInfosBetwe = removeCuesInfosBetween(startCuesInfos, from, to),
                cuesInfos1 = _removeCuesInfosBetwe[0],
                cuesInfos2 = _removeCuesInfosBetwe[1];

            this._cuesBuffer[i] = cuesInfos1;
            cuesBuffer.splice(i + 1, 0, cuesInfos2);
          } // No cuesInfos can be concerned after this one, we can quit


          return;
        } // Else remove all part after `from`


        if (startCuesInfos.start >= from) {
          // all the segment is concerned
          cuesBuffer.splice(i, 1);
          i--; // one less element, we have to decrement the loop
        } else {
          // only the end is concerned
          startCuesInfos.cues = getCuesBefore(startCuesInfos.cues, from);
          startCuesInfos.end = Math.max(from, startCuesInfos.start);
        }
      }
    }
  }
  /**
   * Insert new cues in our text buffer.
   * cues is an array of objects with three properties:
   *   - start {Number}: start time for which the cue should be displayed.
   *   - end {Number}: end time for which the cue should be displayed.
   *   - element {HTMLElement}: The cue to diplay
   *
   * @param {Array.<Object>} cues - CuesGroups, array of objects with the
   * following properties:
   *   - start {Number}: the time at which the cue will start to be displayed
   *   - end {Number}: the time at which the cue will end to be displayed
   *   - cue {HTMLElement}: The cue
   * @param {Number} start - Start time at which the CuesGroup applies.
   * This is different than the start of the first cue to display in it, this
   * has more to do with the time at which the _text segment_ starts.
   * @param {Number} end - End time at which the CuesGroup applies.
   * This is different than the end of the last cue to display in it, this
   * has more to do with the time at which the _text segment_ ends.
   *
   * TODO add securities to ensure that:
   *   - the start of a CuesGroup is inferior or equal to the start of the first
   *     cue in it
   *   - the end of a CuesGroup is superior or equal to the end of the last
   *     cue in it
   * If those requirements are not met, we could delete some cues when adding
   * a CuesGroup before/after. Find a solution.
   */
  ;

  _proto.insert = function insert(cues, start, end) {
    var cuesBuffer = this._cuesBuffer;
    var cuesInfosToInsert = {
      start: start,
      end: end,
      cues: cues
    };
    /**
     * Called when we found the index of the next cue relative to the cue we
     * want to insert (that is a cue starting after its start or at the same
     * time but ending strictly after its end).
     * Will insert the cue at the right place and update the next cue
     * accordingly.
     * @param {number} indexOfNextCue
     */

    function onIndexOfNextCueFound(indexOfNextCue) {
      var nextCue = cuesBuffer[indexOfNextCue];

      if (nextCue === undefined || // no cue
      areNearlyEqual(cuesInfosToInsert.end, nextCue.end)) // samey end
        {
          //   ours:            |AAAAA|
          //   the current one: |BBBBB|
          //   Result:          |AAAAA|
          cuesBuffer[indexOfNextCue] = cuesInfosToInsert;
        } else if (nextCue.start >= cuesInfosToInsert.end) {
        // Either
        //   ours:            |AAAAA|
        //   the current one:         |BBBBBB|
        //   Result:          |AAAAA| |BBBBBB|
        // Or:
        //   ours:            |AAAAA|
        //   the current one:       |BBBBBB|
        //   Result:          |AAAAA|BBBBBB|
        // Add ours before
        cuesBuffer.splice(indexOfNextCue, 0, cuesInfosToInsert);
      } else {
        // Either
        //   ours:            |AAAAA|
        //   the current one: |BBBBBBBB|
        //   Result:          |AAAAABBB|
        // Or:
        //   ours:            |AAAAA|
        //   the current one:    |BBBBB|
        //   Result:          |AAAAABBB|
        nextCue.cues = getCuesAfter(nextCue.cues, cuesInfosToInsert.end);
        nextCue.start = cuesInfosToInsert.end;
        cuesBuffer.splice(indexOfNextCue, 0, cuesInfosToInsert);
      }
    }

    for (var i = 0; i < cuesBuffer.length; i++) {
      var cuesInfos = cuesBuffer[i];

      if (start < cuesInfos.end) {
        if (areNearlyEqual(start, cuesInfos.start)) {
          if (areNearlyEqual(end, cuesInfos.end)) {
            // exact same segment
            //   ours:            |AAAAA|
            //   the current one: |BBBBB|
            //   Result:          |AAAAA|
            // Which means:
            //   1. replace the current cue with ours
            cuesBuffer[i] = cuesInfosToInsert;
            return;
          } else if (end < cuesInfos.end) {
            // our cue overlaps with the current one:
            //   ours:            |AAAAA|
            //   the current one: |BBBBBBBB|
            //   Result:          |AAAAABBB|
            // Which means:
            //   1. remove some cues at the start of the current one
            //   2. update start of current one
            //   3. add ours before the current one
            cuesInfos.cues = getCuesAfter(cuesInfos.cues, end);
            cuesInfos.start = end;
            cuesBuffer.splice(i, 0, cuesInfosToInsert);
            return;
          } // our cue goes beyond the current one:
          //   ours:            |AAAAAAA|
          //   the current one: |BBBB|...
          //   Result:          |AAAAAAA|
          // Here we have to delete any cuesInfos which end before ours end,
          // and see about the following one.


          do {
            cuesBuffer.splice(i, 1);
            cuesInfos = cuesBuffer[i];
          } while (cuesInfos !== undefined && end > cuesInfos.end);

          onIndexOfNextCueFound(i);
          return;
        } else if (start < cuesInfos.start) {
          if (end < cuesInfos.start) {
            // our cue goes strictly before the current one:
            //   ours:            |AAAAAAA|
            //   the current one:           |BBBB|
            //   Result:          |AAAAAAA| |BBBB|
            // Which means:
            //   - add ours before the current one
            cuesBuffer.splice(i, 0, cuesInfosToInsert);
            return;
          } else if (areNearlyEqual(end, cuesInfos.start)) {
            // our cue goes just before the current one:
            //   ours:            |AAAAAAA|
            //   the current one:         |BBBB|
            //   Result:          |AAAAAAA|BBBB|
            // Which means:
            //   - update start time of the current one to be sure
            //   - add ours before the current one
            cuesInfos.start = end;
            cuesBuffer.splice(i, 0, cuesInfosToInsert);
            return;
          } else if (areNearlyEqual(end, cuesInfos.end)) {
            //   ours:            |AAAAAAA|
            //   the current one:    |BBBB|
            //   Result:          |AAAAAAA|
            // Replace
            cuesBuffer.splice(i, 1, cuesInfosToInsert);
            return;
          } else if (end < cuesInfos.end) {
            //   ours:            |AAAAAAA|
            //   the current one:     |BBBBB|
            //   Result:          |AAAAAAABB|
            cuesInfos.cues = getCuesAfter(cuesInfos.cues, end);
            cuesInfos.start = end;
            cuesBuffer.splice(i, 0, cuesInfosToInsert);
            return;
          } //   ours:            |AAAAAAA|
          //   the current one:   |BBB|...
          //   Result:          |AAAAAAA|...


          do {
            cuesBuffer.splice(i, 1);
            cuesInfos = cuesBuffer[i];
          } while (cuesInfos !== undefined && end > cuesInfos.end);

          onIndexOfNextCueFound(i);
          return;
        } // else -> start > cuesInfos.start


        if (areNearlyEqual(cuesInfos.end, end)) {
          //   ours:              |AAAAAA|
          //   the current one: |BBBBBBBB|
          //   Result:          |BBAAAAAA|
          cuesInfos.cues = getCuesBefore(cuesInfos.cues, start);
          cuesInfos.end = start;
          cuesBuffer.splice(i + 1, 0, cuesInfosToInsert);
          return;
        } else if (cuesInfos.end > end) {
          //   ours:              |AAAAAA|
          //   the current one: |BBBBBBBBBBB|
          //   Result:          |BBAAAAAABBB|
          var _removeCuesInfosBetwe2 = removeCuesInfosBetween(cuesInfos, start, end),
              cuesInfos1 = _removeCuesInfosBetwe2[0],
              cuesInfos2 = _removeCuesInfosBetwe2[1];

          this._cuesBuffer[i] = cuesInfos1;
          cuesBuffer.splice(i + 1, 0, cuesInfosToInsert);
          cuesBuffer.splice(i + 2, 0, cuesInfos2);
          return;
        } else {
          //   ours:              |AAAAAA|
          //   the current one: |BBBBB|...
          //   Result:          |BBAAAAAA|...
          cuesInfos.cues = getCuesBefore(cuesInfos.cues, start);
          cuesInfos.end = start;
          cuesInfos = cuesBuffer[i + 1];

          while (cuesInfos !== undefined && end > cuesInfos.end) {
            cuesBuffer.splice(i, 1);
            cuesInfos = cuesBuffer[i];
          }

          onIndexOfNextCueFound(i);
          return;
        }
      }
    } // no cues group has the end after our current start.
    // These cues should be the last one


    cuesBuffer.push(cuesInfosToInsert);
  };

  return TextTrackCuesStore;
}();


;// CONCATENATED MODULE: ./src/core/segment_buffers/implementations/text/html/update_proportional_elements.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Update size of element which are proportional to the current text track
 * element.
 * Returns `true` if at least a single styling information is proportional,
 * `false` otherwise.
 * @param {number} currentHeight
 * @param {number} currentWidth
 * @param {Object} resolution
 * @param {HTMLElement} textTrackElement
 * @returns {boolean}
 */
function updateProportionalElements(currentHeight, currentWidth, resolution, textTrackElement) {
  var cellUnit = [currentWidth / resolution.columns, currentHeight / resolution.rows];
  var proportElts = textTrackElement.getElementsByClassName("proportional-style");

  for (var eltIdx = 0; eltIdx < proportElts.length; eltIdx++) {
    var elt = proportElts[eltIdx];

    if (elt instanceof HTMLElement) {
      var fontSizeVal = elt.getAttribute("data-proportional-font-size");

      if (fontSizeVal !== null && !isNaN(+fontSizeVal)) {
        elt.style.fontSize = String(+fontSizeVal * cellUnit[1]) + "px";
      }

      var widthVal = elt.getAttribute("data-proportional-width");

      if (widthVal !== null && !isNaN(+widthVal)) {
        elt.style.width = String(+widthVal * cellUnit[0]) + "px";
      }

      var heightVal = elt.getAttribute("data-proportional-height");

      if (heightVal !== null && !isNaN(+heightVal)) {
        elt.style.height = String(+heightVal * cellUnit[1]) + "px";
      }

      var lineHeightVal = elt.getAttribute("data-proportional-line-height");

      if (lineHeightVal !== null && !isNaN(+lineHeightVal)) {
        elt.style.lineHeight = String(+lineHeightVal * cellUnit[1]) + "px";
      }

      var leftVal = elt.getAttribute("data-proportional-left");

      if (leftVal !== null && !isNaN(+leftVal)) {
        elt.style.left = String(+leftVal * cellUnit[0]) + "px";
      }

      var topVal = elt.getAttribute("data-proportional-top");

      if (topVal !== null && !isNaN(+topVal)) {
        elt.style.top = String(+topVal * cellUnit[1]) + "px";
      }

      var paddingTopVal = elt.getAttribute("data-proportional-padding-top");

      if (paddingTopVal !== null && !isNaN(+paddingTopVal)) {
        elt.style.paddingTop = String(+paddingTopVal * cellUnit[1]) + "px";
      }

      var paddingBottomVal = elt.getAttribute("data-proportional-padding-bottom");

      if (paddingBottomVal !== null && !isNaN(+paddingBottomVal)) {
        elt.style.paddingBottom = String(+paddingBottomVal * cellUnit[1]) + "px";
      }

      var paddingLeftVal = elt.getAttribute("data-proportional-padding-left");

      if (paddingLeftVal !== null && !isNaN(+paddingLeftVal)) {
        elt.style.paddingLeft = String(+paddingLeftVal * cellUnit[0]) + "px";
      }

      var paddingRightVal = elt.getAttribute("data-proportional-padding-right");

      if (paddingRightVal !== null && !isNaN(+paddingRightVal)) {
        elt.style.paddingRight = String(+paddingRightVal * cellUnit[0]) + "px";
      }
    }
  }

  return proportElts.length > 0;
}
;// CONCATENATED MODULE: ./src/core/segment_buffers/implementations/text/html/html_text_segment_buffer.ts


/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */










var onEnded$ = event_listeners/* onEnded$ */.C1,
    onSeeked$ = event_listeners/* onSeeked$ */.ik,
    onSeeking$ = event_listeners/* onSeeking$ */.d5;
var MAXIMUM_HTML_TEXT_TRACK_UPDATE_INTERVAL = config/* default.MAXIMUM_HTML_TEXT_TRACK_UPDATE_INTERVAL */.Z.MAXIMUM_HTML_TEXT_TRACK_UPDATE_INTERVAL,
    TEXT_TRACK_SIZE_CHECKS_INTERVAL = config/* default.TEXT_TRACK_SIZE_CHECKS_INTERVAL */.Z.TEXT_TRACK_SIZE_CHECKS_INTERVAL;
/**
 * Generate the clock at which TextTrack HTML Cues should be refreshed.
 * @param {HTMLMediaElement} videoElement
 * @returns {Observable}
 */

function generateClock(videoElement) {
  var seeking$ = onSeeking$(videoElement);
  var seeked$ = onSeeked$(videoElement);
  var ended$ = onEnded$(videoElement);
  var manualRefresh$ = (0,merge/* merge */.T)(seeked$, ended$);
  var autoRefresh$ = (0,observable_interval/* interval */.F)(MAXIMUM_HTML_TEXT_TRACK_UPDATE_INTERVAL).pipe((0,startWith/* startWith */.O)(null));
  return manualRefresh$.pipe((0,startWith/* startWith */.O)(null), (0,switchMapTo/* switchMapTo */.c)((0,concat/* concat */.z)(autoRefresh$.pipe((0,mapTo/* mapTo */.h)(true), (0,takeUntil/* takeUntil */.R)(seeking$)), (0,of.of)(false))));
}
/**
 * @param {Element} element
 * @param {Element} child
 */


function safelyRemoveChild(element, child) {
  try {
    element.removeChild(child);
  } catch (_error) {
    log/* default.warn */.Z.warn("HTSB: Can't remove text track: not in the element.");
  }
}
/**
 * @param {HTMLElement} element
 * @returns {Object|null}
 */


function getElementResolution(element) {
  var strRows = element.getAttribute("data-resolution-rows");
  var strColumns = element.getAttribute("data-resolution-columns");

  if (strRows === null || strColumns === null) {
    return null;
  }

  var rows = parseInt(strRows, 10);
  var columns = parseInt(strColumns, 10);

  if (rows === null || columns === null) {
    return null;
  }

  return {
    rows: rows,
    columns: columns
  };
}
/**
 * SegmentBuffer implementation which display buffered TextTracks in the given
 * HTML element.
 * @class HTMLTextSegmentBuffer
 */


var HTMLTextSegmentBuffer = /*#__PURE__*/function (_SegmentBuffer) {
  inheritsLoose_default()(HTMLTextSegmentBuffer, _SegmentBuffer);

  /**
   * @param {HTMLMediaElement} videoElement
   * @param {HTMLElement} textTrackElement
   */
  function HTMLTextSegmentBuffer(videoElement, textTrackElement) {
    var _this;

    log/* default.debug */.Z.debug("HTSB: Creating HTMLTextSegmentBuffer");
    _this = _SegmentBuffer.call(this) || this;
    _this.bufferType = "text";
    _this._buffered = new manual_time_ranges/* default */.Z();
    _this._videoElement = videoElement;
    _this._textTrackElement = textTrackElement;
    _this._clearSizeUpdates$ = new Subject/* Subject */.xQ();
    _this._destroy$ = new Subject/* Subject */.xQ();
    _this._buffer = new TextTrackCuesStore();
    _this._currentCues = []; // update text tracks

    generateClock(_this._videoElement).pipe((0,takeUntil/* takeUntil */.R)(_this._destroy$)).subscribe(function (shouldDisplay) {
      if (!shouldDisplay) {
        _this._disableCurrentCues();

        return;
      } // to spread the time error, we divide the regular chosen interval.


      var time = Math.max(_this._videoElement.currentTime + MAXIMUM_HTML_TEXT_TRACK_UPDATE_INTERVAL / 1000 / 2, 0);

      var cues = _this._buffer.get(time);

      if (cues.length === 0) {
        _this._disableCurrentCues();
      } else {
        _this._displayCues(cues);
      }
    });
    return _this;
  }
  /**
   * Push segment on Subscription.
   * @param {Object} infos
   * @returns {Observable}
   */


  var _proto = HTMLTextSegmentBuffer.prototype;

  _proto.pushChunk = function pushChunk(infos) {
    var _this2 = this;

    return (0,defer/* defer */.P)(function () {
      _this2.pushChunkSync(infos);

      return (0,of.of)(undefined);
    });
  }
  /**
   * Remove buffered data.
   * @param {number} start - start position, in seconds
   * @param {number} end - end position, in seconds
   * @returns {Observable}
   */
  ;

  _proto.removeBuffer = function removeBuffer(start, end) {
    var _this3 = this;

    return (0,defer/* defer */.P)(function () {
      _this3.removeBufferSync(start, end);

      return (0,of.of)(undefined);
    });
  }
  /**
   * Indicate that every chunks from a Segment has been given to pushChunk so
   * far.
   * This will update our internal Segment inventory accordingly.
   * The returned Observable will emit and complete successively once the whole
   * segment has been pushed and this indication is acknowledged.
   * @param {Object} infos
   * @returns {Observable}
   */
  ;

  _proto.endOfSegment = function endOfSegment(_infos) {
    var _this4 = this;

    return (0,defer/* defer */.P)(function () {
      _this4._segmentInventory.completeSegment(_infos);

      return (0,of.of)(undefined);
    });
  }
  /**
   * Returns the currently buffered data, in a TimeRanges object.
   * @returns {TimeRanges}
   */
  ;

  _proto.getBufferedRanges = function getBufferedRanges() {
    return this._buffered;
  };

  _proto.dispose = function dispose() {
    log/* default.debug */.Z.debug("HTSB: Disposing HTMLTextSegmentBuffer");

    this._disableCurrentCues();

    this._buffer.remove(0, Infinity);

    this._buffered.remove(0, Infinity);

    this._destroy$.next();

    this._destroy$.complete();
  }
  /**
   * Push the text track contained in `data` to the HTMLTextSegmentBuffer
   * synchronously.
   * Returns a boolean:
   *   - `true` if text tracks have been added the the HTMLTextSegmentBuffer's
   *     buffer after that segment has been added.
   *   - `false` if no text tracks have been added the the
   *     HTMLTextSegmentBuffer's buffer (e.g. empty text-track, incoherent times
   *     etc.)
   *
   * /!\ This method won't add any data to the linked inventory.
   * Please use the `pushChunk` method for most use-cases.
   * @param {Object} data
   * @returns {boolean}
   */
  ;

  _proto.pushChunkSync = function pushChunkSync(infos) {
    var _a, _b;

    log/* default.debug */.Z.debug("HTSB: Appending new html text tracks");
    var _infos$data = infos.data,
        timestampOffset = _infos$data.timestampOffset,
        appendWindow = _infos$data.appendWindow,
        chunk = _infos$data.chunk;

    if (chunk === null) {
      return;
    }

    var startTime = chunk.start,
        endTime = chunk.end,
        dataString = chunk.data,
        type = chunk.type,
        language = chunk.language;
    var appendWindowStart = (_a = appendWindow[0]) !== null && _a !== void 0 ? _a : 0;
    var appendWindowEnd = (_b = appendWindow[1]) !== null && _b !== void 0 ? _b : Infinity;
    var cues = parseTextTrackToElements(type, dataString, timestampOffset, language);

    if (appendWindowStart !== 0 && appendWindowEnd !== Infinity) {
      // Removing before window start
      var i = 0;

      while (i < cues.length && cues[i].end <= appendWindowStart) {
        i++;
      }

      cues.splice(0, i);
      i = 0;

      while (i < cues.length && cues[i].start < appendWindowStart) {
        cues[i].start = appendWindowStart;
        i++;
      } // Removing after window end


      i = cues.length - 1;

      while (i >= 0 && cues[i].start >= appendWindowEnd) {
        i--;
      }

      cues.splice(i, cues.length);
      i = cues.length - 1;

      while (i >= 0 && cues[i].end > appendWindowEnd) {
        cues[i].end = appendWindowEnd;
        i--;
      }
    }

    var start;

    if (startTime !== undefined) {
      start = Math.max(appendWindowStart, startTime);
    } else {
      if (cues.length <= 0) {
        log/* default.warn */.Z.warn("HTSB: Current text tracks have no cues nor start time. Aborting");
        return;
      }

      log/* default.warn */.Z.warn("HTSB: No start time given. Guessing from cues.");
      start = cues[0].start;
    }

    var end;

    if (endTime !== undefined) {
      end = Math.min(appendWindowEnd, endTime);
    } else {
      if (cues.length <= 0) {
        log/* default.warn */.Z.warn("HTSB: Current text tracks have no cues nor end time. Aborting");
        return;
      }

      log/* default.warn */.Z.warn("HTSB: No end time given. Guessing from cues.");
      end = cues[cues.length - 1].end;
    }

    if (end <= start) {
      log/* default.warn */.Z.warn("HTSB: Invalid text track appended: ", "the start time is inferior or equal to the end time.");
      return;
    }

    if (infos.inventoryInfos !== null) {
      this._segmentInventory.insertChunk(infos.inventoryInfos);
    }

    this._buffer.insert(cues, start, end);

    this._buffered.insert(start, end);
  }
  /**
   * Remove buffer data between the given start and end, synchronously.
   * @param {number} start
   * @param {number} end
   */
  ;

  _proto.removeBufferSync = function removeBufferSync(start, end) {
    log/* default.debug */.Z.debug("HTSB: Removing html text track data", start, end);

    this._buffer.remove(start, end);

    this._buffered.remove(start, end);
  }
  /**
   * Remove the current cue from being displayed.
   */
  ;

  _proto._disableCurrentCues = function _disableCurrentCues() {
    this._clearSizeUpdates$.next();

    if (this._currentCues.length > 0) {
      for (var i = 0; i < this._currentCues.length; i++) {
        safelyRemoveChild(this._textTrackElement, this._currentCues[i].element);
      }

      this._currentCues = [];
    }
  }
  /**
   * Display a new Cue. If one was already present, it will be replaced.
   * @param {HTMLElement} element
   */
  ;

  _proto._displayCues = function _displayCues(elements) {
    var nothingChanged = this._currentCues.length === elements.length && this._currentCues.every(function (current, index) {
      return current.element === elements[index];
    });

    if (nothingChanged) {
      return;
    } // Remove and re-display everything
    // TODO More intelligent handling


    this._clearSizeUpdates$.next();

    for (var i = 0; i < this._currentCues.length; i++) {
      safelyRemoveChild(this._textTrackElement, this._currentCues[i].element);
    }

    this._currentCues = [];

    for (var _i = 0; _i < elements.length; _i++) {
      var element = elements[_i];
      var resolution = getElementResolution(element);

      this._currentCues.push({
        element: element,
        resolution: resolution
      });

      this._textTrackElement.appendChild(element);
    }

    var proportionalCues = this._currentCues.filter(function (cue) {
      return cue.resolution !== null;
    });

    if (proportionalCues.length > 0) {
      // update propertionally-sized elements periodically
      onHeightWidthChange(this._textTrackElement, TEXT_TRACK_SIZE_CHECKS_INTERVAL).pipe((0,takeUntil/* takeUntil */.R)(this._clearSizeUpdates$), (0,takeUntil/* takeUntil */.R)(this._destroy$)).subscribe(function (_ref) {
        var height = _ref.height,
            width = _ref.width;

        for (var _i2 = 0; _i2 < proportionalCues.length; _i2++) {
          var _proportionalCues$_i = proportionalCues[_i2],
              _resolution = _proportionalCues$_i.resolution,
              _element = _proportionalCues$_i.element;
          updateProportionalElements(height, width, _resolution, _element);
        }
      });
    }
  };

  return HTMLTextSegmentBuffer;
}(types/* SegmentBuffer */.C);


;// CONCATENATED MODULE: ./src/core/segment_buffers/implementations/text/html/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * /!\ This file is feature-switchable.
 * It always should be imported through the `features` object.
 */

/* harmony default export */ const html = (HTMLTextSegmentBuffer);

/***/ }),

/***/ 9059:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Z": () => /* binding */ text_native
});

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/inheritsLoose.js
var inheritsLoose = __webpack_require__(5354);
var inheritsLoose_default = /*#__PURE__*/__webpack_require__.n(inheritsLoose);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/defer.js
var defer = __webpack_require__(1410);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/of.js
var of = __webpack_require__(8170);
// EXTERNAL MODULE: ./src/compat/browser_detection.ts
var browser_detection = __webpack_require__(3666);
;// CONCATENATED MODULE: ./src/compat/add_text_track.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Add text track to the given media element.
 *
 * Returns an object with the following properties:
 *   - track {TextTrack}: the added text track
 *   - trackElement {HTMLElement|undefined}: the added <track> element.
 *     undefined if no trackElement was added.
 *
 * @param {HTMLMediaElement} mediaElement
 * @param {Boolean} hidden - If `true`, the text track will be hidden by
 * default. If `false`, the text track will be directly showing.
 * @returns {Object}
 */

function addTextTrack(mediaElement, hidden) {
  var _a, _b;

  var track;
  var trackElement;
  var kind = "subtitles";

  if (browser_detection/* isIEOrEdge */.YM) {
    var tracksLength = mediaElement.textTracks.length;
    track = tracksLength > 0 ? mediaElement.textTracks[tracksLength - 1] : mediaElement.addTextTrack(kind);
    track.mode = hidden ? (_a = track.HIDDEN) !== null && _a !== void 0 ? _a : "hidden" : (_b = track.SHOWING) !== null && _b !== void 0 ? _b : "showing";
  } else {
    trackElement = document.createElement("track");
    mediaElement.appendChild(trackElement);
    track = trackElement.track;
    trackElement.kind = kind;
    track.mode = hidden ? "hidden" : "showing";
  }

  return {
    track: track,
    trackElement: trackElement
  };
}
// EXTERNAL MODULE: ./src/log.ts + 1 modules
var log = __webpack_require__(3887);
;// CONCATENATED MODULE: ./src/compat/remove_cue.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Return true if given cue is active.
 * @param {TextTrack} track
 * @param {TextTrackCue} cue
 * @returns {boolean}
 */

function isActiveCue(track, cue) {
  var activeCues = track.activeCues;

  if (activeCues === null) {
    return false;
  }

  for (var i = 0; i < activeCues.length; i++) {
    if (activeCues[i] === cue) {
      return true;
    }
  }

  return false;
}
/**
 * Remove cue from text track.
 * @param {TextTrack} track
 * @param {TextTrackCue} cue
 */


function removeCue(track, cue) {
  // On Firefox, cue doesn't dissapear when it is removed from track. Track
  // should be hidden, and shown again after removing cue, in order to
  // definitely clean the cue.
  if (browser_detection/* isFirefox */.vU && isActiveCue(track, cue)) {
    var trackMode = track.mode;
    track.mode = "hidden";

    try {
      track.removeCue(cue);
    } catch (err) {
      log/* default.warn */.Z.warn("Compat: Could not remove cue from text track.");
    }

    track.mode = trackMode;
    return;
  }

  try {
    track.removeCue(cue);
  } catch (err) {
    log/* default.warn */.Z.warn("Compat: Could not remove cue from text track.");
  }
}
// EXTERNAL MODULE: ./src/core/segment_buffers/implementations/types.ts + 1 modules
var types = __webpack_require__(4123);
// EXTERNAL MODULE: ./src/core/segment_buffers/implementations/utils/manual_time_ranges.ts
var manual_time_ranges = __webpack_require__(4309);
// EXTERNAL MODULE: ./src/features/index.ts
var features = __webpack_require__(7874);
;// CONCATENATED MODULE: ./src/core/segment_buffers/implementations/text/native/parsers.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Convert text track data into timed VTT Cues.
 * @param {string} type - Text track format wanted
 * @param {string} data - Text track data
 * @param {Number} timestampOffset - offset to apply to every timed text
 * @param {string} [language] - language of the text tracks
 * @returns {Array.<VTTCue>}
 * @throws Error - Throw if no parser is found for the given type
 */

function parseTextTrackToCues(type, data, timestampOffset, language) {
  log/* default.debug */.Z.debug("NTSB: Finding parser for native text tracks:", type);
  var parser = features/* default.nativeTextTracksParsers */.Z.nativeTextTracksParsers[type];

  if (typeof parser !== "function") {
    throw new Error("no parser found for the given text track");
  }

  log/* default.debug */.Z.debug("NTSB: Parser found, parsing...");
  var parsed = parser(data, timestampOffset, language);
  log/* default.debug */.Z.debug("NTSB: Parsed successfully!", parsed);
  return parsed;
}
;// CONCATENATED MODULE: ./src/core/segment_buffers/implementations/text/native/native_text_segment_buffer.ts


/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */







/**
 * Implementation of an SegmentBuffer for "native" text tracks.
 * "Native" text tracks rely on a `<track>` HTMLElement and its associated
 * expected behavior to display subtitles synchronized to the video.
 * @class NativeTextSegmentBuffer
 */

var NativeTextSegmentBuffer = /*#__PURE__*/function (_SegmentBuffer) {
  inheritsLoose_default()(NativeTextSegmentBuffer, _SegmentBuffer);

  /**
   * @param {HTMLMediaElement} videoElement
   * @param {Boolean} hideNativeSubtitle
   */
  function NativeTextSegmentBuffer(videoElement, hideNativeSubtitle) {
    var _this;

    log/* default.debug */.Z.debug("NTSB: Creating NativeTextSegmentBuffer");
    _this = _SegmentBuffer.call(this) || this;

    var _addTextTrack = addTextTrack(videoElement, hideNativeSubtitle),
        track = _addTextTrack.track,
        trackElement = _addTextTrack.trackElement;

    _this.bufferType = "text";
    _this._buffered = new manual_time_ranges/* default */.Z();
    _this._videoElement = videoElement;
    _this._track = track;
    _this._trackElement = trackElement;
    return _this;
  }
  /**
   * @param {Object} infos
   * @returns {Observable}
   */


  var _proto = NativeTextSegmentBuffer.prototype;

  _proto.pushChunk = function pushChunk(infos) {
    var _this2 = this;

    return (0,defer/* defer */.P)(function () {
      var _a, _b;

      log/* default.debug */.Z.debug("NTSB: Appending new native text tracks");

      if (infos.data.chunk === null) {
        return (0,of.of)(undefined);
      }

      var _infos$data = infos.data,
          timestampOffset = _infos$data.timestampOffset,
          appendWindow = _infos$data.appendWindow,
          chunk = _infos$data.chunk;
      var startTime = chunk.start,
          endTime = chunk.end,
          dataString = chunk.data,
          type = chunk.type,
          language = chunk.language;
      var appendWindowStart = (_a = appendWindow[0]) !== null && _a !== void 0 ? _a : 0;
      var appendWindowEnd = (_b = appendWindow[1]) !== null && _b !== void 0 ? _b : Infinity;
      var cues = parseTextTrackToCues(type, dataString, timestampOffset, language);

      if (appendWindowStart !== 0 && appendWindowEnd !== Infinity) {
        // Removing before window start
        var i = 0;

        while (i < cues.length && cues[i].endTime <= appendWindowStart) {
          i++;
        }

        cues.splice(0, i);
        i = 0;

        while (i < cues.length && cues[i].startTime < appendWindowStart) {
          cues[i].startTime = appendWindowStart;
          i++;
        } // Removing after window end


        i = cues.length - 1;

        while (i >= 0 && cues[i].startTime >= appendWindowEnd) {
          i--;
        }

        cues.splice(i, cues.length);
        i = cues.length - 1;

        while (i >= 0 && cues[i].endTime > appendWindowEnd) {
          cues[i].endTime = appendWindowEnd;
          i--;
        }
      }

      var start;

      if (startTime !== undefined) {
        start = Math.max(appendWindowStart, startTime);
      } else {
        if (cues.length <= 0) {
          log/* default.warn */.Z.warn("NTSB: Current text tracks have no cues nor start time. Aborting");
          return (0,of.of)(undefined);
        }

        log/* default.warn */.Z.warn("NTSB: No start time given. Guessing from cues.");
        start = cues[0].startTime;
      }

      var end;

      if (endTime !== undefined) {
        end = Math.min(appendWindowEnd, endTime);
      } else {
        if (cues.length <= 0) {
          log/* default.warn */.Z.warn("NTSB: Current text tracks have no cues nor end time. Aborting");
          return (0,of.of)(undefined);
        }

        log/* default.warn */.Z.warn("NTSB: No end time given. Guessing from cues.");
        end = cues[cues.length - 1].endTime;
      }

      if (end <= start) {
        log/* default.warn */.Z.warn("NTSB: Invalid text track appended: ", "the start time is inferior or equal to the end time.");
        return (0,of.of)(undefined);
      }

      if (cues.length > 0) {
        var firstCue = cues[0]; // NOTE(compat): cleanup all current cues if the newly added
        // ones are in the past. this is supposed to fix an issue on
        // IE/Edge.
        // TODO Move to compat

        var currentCues = _this2._track.cues;

        if (currentCues !== null && currentCues.length > 0) {
          if (firstCue.startTime < currentCues[currentCues.length - 1].startTime) {
            _this2._removeData(firstCue.startTime, +Infinity);
          }
        }

        for (var _i = 0; _i < cues.length; _i++) {
          _this2._track.addCue(cues[_i]);
        }
      }

      _this2._buffered.insert(start, end);

      if (infos.inventoryInfos !== null) {
        _this2._segmentInventory.insertChunk(infos.inventoryInfos);
      }

      return (0,of.of)(undefined);
    });
  }
  /**
   * Remove buffered data.
   * @param {number} start - start position, in seconds
   * @param {number} end - end position, in seconds
   * @returns {Observable}
   */
  ;

  _proto.removeBuffer = function removeBuffer(start, end) {
    var _this3 = this;

    return (0,defer/* defer */.P)(function () {
      _this3._removeData(start, end);

      return (0,of.of)(undefined);
    });
  }
  /**
   * Indicate that every chunks from a Segment has been given to pushChunk so
   * far.
   * This will update our internal Segment inventory accordingly.
   * The returned Observable will emit and complete successively once the whole
   * segment has been pushed and this indication is acknowledged.
   * @param {Object} infos
   * @returns {Observable}
   */
  ;

  _proto.endOfSegment = function endOfSegment(_infos) {
    var _this4 = this;

    return (0,defer/* defer */.P)(function () {
      _this4._segmentInventory.completeSegment(_infos);

      return (0,of.of)(undefined);
    });
  }
  /**
   * Returns the currently buffered data, in a TimeRanges object.
   * @returns {TimeRanges}
   */
  ;

  _proto.getBufferedRanges = function getBufferedRanges() {
    return this._buffered;
  };

  _proto.dispose = function dispose() {
    log/* default.debug */.Z.debug("NTSB: Aborting NativeTextSegmentBuffer");

    this._removeData(0, Infinity);

    var _trackElement = this._trackElement,
        _videoElement = this._videoElement;

    if (_trackElement !== undefined && _videoElement.hasChildNodes()) {
      try {
        _videoElement.removeChild(_trackElement);
      } catch (e) {
        log/* default.warn */.Z.warn("NTSB: Can't remove track element from the video");
      }
    }

    this._track.mode = "disabled";

    if (this._trackElement !== undefined) {
      this._trackElement.innerHTML = "";
    }
  };

  _proto._removeData = function _removeData(start, end) {
    log/* default.debug */.Z.debug("NTSB: Removing native text track data", start, end);
    var track = this._track;
    var cues = track.cues;

    if (cues !== null) {
      for (var i = cues.length - 1; i >= 0; i--) {
        var cue = cues[i];
        var startTime = cue.startTime,
            endTime = cue.endTime;

        if (startTime >= start && startTime <= end && endTime <= end) {
          removeCue(track, cue);
        }
      }
    }

    this._buffered.remove(start, end);
  };

  return NativeTextSegmentBuffer;
}(types/* SegmentBuffer */.C);


;// CONCATENATED MODULE: ./src/core/segment_buffers/implementations/text/native/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* harmony default export */ const text_native = (NativeTextSegmentBuffer);

/***/ }),

/***/ 4123:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "C": () => /* binding */ SegmentBuffer,
  "f": () => /* binding */ SegmentBufferOperation
});

// EXTERNAL MODULE: ./src/config.ts
var config = __webpack_require__(944);
// EXTERNAL MODULE: ./src/log.ts + 1 modules
var log = __webpack_require__(3887);
// EXTERNAL MODULE: ./src/manifest/are_same_content.ts
var are_same_content = __webpack_require__(5952);
// EXTERNAL MODULE: ./src/utils/take_first_set.ts
var take_first_set = __webpack_require__(5278);
;// CONCATENATED MODULE: ./src/core/segment_buffers/segment_inventory.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




var MAX_MANIFEST_BUFFERED_START_END_DIFFERENCE = config/* default.MAX_MANIFEST_BUFFERED_START_END_DIFFERENCE */.Z.MAX_MANIFEST_BUFFERED_START_END_DIFFERENCE,
    MAX_MANIFEST_BUFFERED_DURATION_DIFFERENCE = config/* default.MAX_MANIFEST_BUFFERED_DURATION_DIFFERENCE */.Z.MAX_MANIFEST_BUFFERED_DURATION_DIFFERENCE,
    MINIMUM_SEGMENT_SIZE = config/* default.MINIMUM_SEGMENT_SIZE */.Z.MINIMUM_SEGMENT_SIZE;
/**
 * Keep track of every chunk downloaded and currently in the linked media
 * buffer.
 *
 * The main point of this class is to know which chunks are already pushed to
 * the corresponding media buffer, at which bitrate, and which have been garbage-collected
 * since by the browser (and thus may need to be re-loaded).
 * @class SegmentInventory
 */

var SegmentInventory = /*#__PURE__*/function () {
  function SegmentInventory() {
    this._inventory = [];
  }
  /**
   * Reset the whole inventory.
   */


  var _proto = SegmentInventory.prototype;

  _proto.reset = function reset() {
    this._inventory.length = 0;
  }
  /**
   * Infer each segment's bufferedStart and bufferedEnd from the TimeRanges
   * given.
   *
   * The TimeRanges object given should come from the media buffer linked to
   * that SegmentInventory.
   *
   * /!\ A SegmentInventory should not be associated to multiple media buffers
   * at a time, so each `synchronizeBuffered` call should be given a TimeRanges
   * coming from the same buffer.
   * @param {TimeRanges}
   */
  ;

  _proto.synchronizeBuffered = function synchronizeBuffered(buffered) {
    var inventory = this._inventory;
    var inventoryIndex = 0; // Current index considered.

    var thisSegment = inventory[0]; // Current segmentInfos considered

    /** Type of buffer considered, used for logs */

    var bufferType = thisSegment === null || thisSegment === void 0 ? void 0 : thisSegment.infos.adaptation.type;
    var rangesLength = buffered.length;

    for (var i = 0; i < rangesLength; i++) {
      if (thisSegment === undefined) {
        // we arrived at the end of our inventory
        return;
      } // take the i'nth contiguous buffered TimeRange


      var rangeStart = buffered.start(i);
      var rangeEnd = buffered.end(i);

      if (rangeEnd - rangeStart < MINIMUM_SEGMENT_SIZE) {
        log/* default.warn */.Z.warn("SI: skipped TimeRange when synchronizing because it was too small", bufferType, rangeStart, rangeEnd);
        continue;
      }

      var indexBefore = inventoryIndex; // keep track of that number
      // Find the first segment either within this TimeRange or completely past
      // it:
      // skip until first segment with at least `MINIMUM_SEGMENT_SIZE` past the
      // start of that range.

      while (thisSegment !== undefined && (0,take_first_set/* default */.Z)(thisSegment.bufferedEnd, thisSegment.end) - rangeStart < MINIMUM_SEGMENT_SIZE) {
        thisSegment = inventory[++inventoryIndex];
      } // Contains infos about the last garbage-collected segment before
      // `thisSegment`.


      var lastDeletedSegmentInfos = null; // remove garbage-collected segments
      // (not in that TimeRange nor in the previous one)

      var numberOfSegmentToDelete = inventoryIndex - indexBefore;

      if (numberOfSegmentToDelete > 0) {
        var lastDeletedSegment = // last garbage-collected segment
        inventory[indexBefore + numberOfSegmentToDelete - 1];
        lastDeletedSegmentInfos = {
          end: (0,take_first_set/* default */.Z)(lastDeletedSegment.bufferedEnd, lastDeletedSegment.end),
          precizeEnd: lastDeletedSegment.precizeEnd
        };
        log/* default.debug */.Z.debug("SI: " + numberOfSegmentToDelete + " segments GCed.", bufferType);
        inventory.splice(indexBefore, numberOfSegmentToDelete);
        inventoryIndex = indexBefore;
      }

      if (thisSegment === undefined) {
        return;
      } // If the current segment is actually completely outside that range (it
      // is contained in one of the next one), skip that part.


      if (rangeEnd - (0,take_first_set/* default */.Z)(thisSegment.bufferedStart, thisSegment.start) >= MINIMUM_SEGMENT_SIZE) {
        guessBufferedStartFromRangeStart(thisSegment, rangeStart, lastDeletedSegmentInfos, bufferType);

        if (inventoryIndex === inventory.length - 1) {
          guessBufferedEndFromRangeEnd(thisSegment, rangeEnd, bufferType);
          return;
        }

        thisSegment = inventory[++inventoryIndex]; // Make contiguous until first segment outside that range

        var thisSegmentStart = (0,take_first_set/* default */.Z)(thisSegment.bufferedStart, thisSegment.start);
        var thisSegmentEnd = (0,take_first_set/* default */.Z)(thisSegment.bufferedEnd, thisSegment.end);
        var nextRangeStart = i < rangesLength - 1 ? buffered.start(i + 1) : undefined;

        while (thisSegment !== undefined && rangeEnd - thisSegmentStart >= MINIMUM_SEGMENT_SIZE && (nextRangeStart === undefined || rangeEnd - thisSegmentStart >= thisSegmentEnd - nextRangeStart)) {
          var prevSegment = inventory[inventoryIndex - 1]; // those segments are contiguous, we have no way to infer their real
          // end

          if (prevSegment.bufferedEnd === undefined) {
            prevSegment.bufferedEnd = thisSegment.precizeStart ? thisSegment.start : prevSegment.end;
            log/* default.debug */.Z.debug("SI: calculating buffered end of contiguous segment", bufferType, prevSegment.bufferedEnd, prevSegment.end);
          }

          thisSegment.bufferedStart = prevSegment.bufferedEnd;
          thisSegment = inventory[++inventoryIndex];

          if (thisSegment !== undefined) {
            thisSegmentStart = (0,take_first_set/* default */.Z)(thisSegment.bufferedStart, thisSegment.start);
            thisSegmentEnd = (0,take_first_set/* default */.Z)(thisSegment.bufferedEnd, thisSegment.end);
          }
        }
      } // update the bufferedEnd of the last segment in that range


      var lastSegmentInRange = inventory[inventoryIndex - 1];

      if (lastSegmentInRange !== undefined) {
        guessBufferedEndFromRangeEnd(lastSegmentInRange, rangeEnd, bufferType);
      }
    } // if we still have segments left, they are not affiliated to any range.
    // They might have been garbage collected, delete them from here.


    if (thisSegment != null) {
      log/* default.debug */.Z.debug("SI: last segments have been GCed", bufferType, inventoryIndex, inventory.length);
      inventory.splice(inventoryIndex, inventory.length - inventoryIndex);
    }

    if (bufferType !== undefined && log/* default.getLevel */.Z.getLevel() === "DEBUG") {
      log/* default.debug */.Z.debug("SI: current " + bufferType + " inventory timeline:\n" + prettyPrintInventory(this._inventory));
    }
  }
  /**
   * Add a new chunk in the inventory.
   *
   * Chunks are decodable sub-parts of a whole segment. Once all chunks in a
   * segment have been inserted, you should call the `completeSegment` method.
   * @param {Object} chunkInformation
   */
  ;

  _proto.insertChunk = function insertChunk(_ref) {
    var period = _ref.period,
        adaptation = _ref.adaptation,
        representation = _ref.representation,
        segment = _ref.segment,
        start = _ref.start,
        end = _ref.end;

    if (segment.isInit) {
      return;
    }

    var bufferType = adaptation.type;

    if (start >= end) {
      log/* default.warn */.Z.warn("SI: Invalid chunked inserted: starts before it ends", bufferType, start, end);
      return;
    }

    var inventory = this._inventory;
    var newSegment = {
      partiallyPushed: true,
      estimatedStart: start,
      start: start,
      end: end,
      precizeStart: false,
      precizeEnd: false,
      bufferedStart: undefined,
      bufferedEnd: undefined,
      infos: {
        segment: segment,
        period: period,
        adaptation: adaptation,
        representation: representation
      }
    }; // begin by the end as in most use cases this will be faster

    for (var i = inventory.length - 1; i >= 0; i--) {
      var segmentI = inventory[i];

      if (segmentI.start <= start) {
        if (segmentI.end <= start) {
          // our segment is after, push it after this one
          //
          // Case 1:
          //   prevSegment  : |------|
          //   newSegment   :        |======|
          //   ===>         : |------|======|
          //
          // Case 2:
          //   prevSegment  : |------|
          //   newSegment   :          |======|
          //   ===>         : |------| |======|
          log/* default.debug */.Z.debug("SI: Pushing segment strictly after previous one.", bufferType, start, segmentI.end);

          this._inventory.splice(i + 1, 0, newSegment);

          i += 2; // Go to segment immediately after newSegment

          while (i < inventory.length && inventory[i].start < newSegment.end) {
            if (inventory[i].end > newSegment.end) {
              // The next segment ends after newSegment.
              // Mutate the next segment.
              //
              // Case 1:
              //   prevSegment  : |------|
              //   newSegment   :        |======|
              //   nextSegment  :            |----|
              //   ===>         : |------|======|-|
              log/* default.debug */.Z.debug("SI: Segment pushed updates the start of the next one", bufferType, newSegment.end, inventory[i].start);
              inventory[i].start = newSegment.end;
              inventory[i].bufferedStart = undefined;
              inventory[i].precizeStart = inventory[i].precizeStart && newSegment.precizeEnd;
              return;
            } // The next segment was completely contained in newSegment.
            // Remove it.
            //
            // Case 1:
            //   prevSegment  : |------|
            //   newSegment   :        |======|
            //   nextSegment  :          |---|
            //   ===>         : |------|======|
            //
            // Case 2:
            //   prevSegment  : |------|
            //   newSegment   :        |======|
            //   nextSegment  :          |----|
            //   ===>         : |------|======|


            log/* default.debug */.Z.debug("SI: Segment pushed removes the next one", bufferType, start, end, inventory[i].start, inventory[i].end);
            inventory.splice(i, 1);
          }

          return;
        } else {
          if (segmentI.start === start) {
            if (segmentI.end <= end) {
              // In those cases, replace
              //
              // Case 1:
              //  prevSegment  : |-------|
              //  newSegment   : |=======|
              //  ===>         : |=======|
              //
              // Case 2:
              //  prevSegment  : |-------|
              //  newSegment   : |==========|
              //  ===>         : |==========|
              log/* default.debug */.Z.debug("SI: Segment pushed replace another one", bufferType, start, end, segmentI.end);

              this._inventory.splice(i, 1, newSegment);

              i += 1; // Go to segment immediately after newSegment

              while (i < inventory.length && inventory[i].start < newSegment.end) {
                if (inventory[i].end > newSegment.end) {
                  // The next segment ends after newSegment.
                  // Mutate the next segment.
                  //
                  // Case 1:
                  //   newSegment   : |======|
                  //   nextSegment  :      |----|
                  //   ===>         : |======|--|
                  log/* default.debug */.Z.debug("SI: Segment pushed updates the start of the next one", bufferType, newSegment.end, inventory[i].start);
                  inventory[i].start = newSegment.end;
                  inventory[i].bufferedStart = undefined;
                  inventory[i].precizeStart = inventory[i].precizeStart && newSegment.precizeEnd;
                  return;
                } // The next segment was completely contained in newSegment.
                // Remove it.
                //
                // Case 1:
                //   newSegment   : |======|
                //   nextSegment  :   |---|
                //   ===>         : |======|
                //
                // Case 2:
                //   newSegment   : |======|
                //   nextSegment  :   |----|
                //   ===>         : |======|


                log/* default.debug */.Z.debug("SI: Segment pushed removes the next one", bufferType, start, end, inventory[i].start, inventory[i].end);
                inventory.splice(i, 1);
              }

              return;
            } else {
              // The previous segment starts at the same time and finishes
              // after the new segment.
              // Update the start of the previous segment and put the new
              // segment before.
              //
              // Case 1:
              //  prevSegment  : |------------|
              //  newSegment   : |==========|
              //  ===>         : |==========|-|
              log/* default.debug */.Z.debug("SI: Segment pushed ends before another with the same start", bufferType, start, end, segmentI.end);
              inventory.splice(i, 0, newSegment);
              segmentI.start = newSegment.end;
              segmentI.bufferedStart = undefined;
              segmentI.precizeStart = segmentI.precizeStart && newSegment.precizeEnd;
              return;
            }
          } else {
            if (segmentI.end <= newSegment.end) {
              // our segment has a "complex" relation with this one,
              // update the old one end and add this one after it.
              //
              // Case 1:
              //  prevSegment  : |-------|
              //  newSegment   :    |======|
              //  ===>         : |--|======|
              //
              // Case 2:
              //  prevSegment  : |-------|
              //  newSegment   :    |====|
              //  ===>         : |--|====|
              log/* default.debug */.Z.debug("SI: Segment pushed updates end of previous one", bufferType, start, end, segmentI.start, segmentI.end);

              this._inventory.splice(i + 1, 0, newSegment);

              segmentI.end = newSegment.start;
              segmentI.bufferedEnd = undefined;
              segmentI.precizeEnd = segmentI.precizeEnd && newSegment.precizeStart;
              i += 2; // Go to segment immediately after newSegment

              while (i < inventory.length && inventory[i].start < newSegment.end) {
                if (inventory[i].end > newSegment.end) {
                  // The next segment ends after newSegment.
                  // Mutate the next segment.
                  //
                  // Case 1:
                  //   newSegment   : |======|
                  //   nextSegment  :      |----|
                  //   ===>         : |======|--|
                  log/* default.debug */.Z.debug("SI: Segment pushed updates the start of the next one", bufferType, newSegment.end, inventory[i].start);
                  inventory[i].start = newSegment.end;
                  inventory[i].bufferedStart = undefined;
                  inventory[i].precizeStart = inventory[i].precizeStart && newSegment.precizeEnd;
                  return;
                } // The next segment was completely contained in newSegment.
                // Remove it.
                //
                // Case 1:
                //   newSegment   : |======|
                //   nextSegment  :   |---|
                //   ===>         : |======|
                //
                // Case 2:
                //   newSegment   : |======|
                //   nextSegment  :   |----|
                //   ===>         : |======|


                log/* default.debug */.Z.debug("SI: Segment pushed removes the next one", bufferType, start, end, inventory[i].start, inventory[i].end);
                inventory.splice(i, 1);
              }

              return;
            } else {
              // The previous segment completely recovers the new segment.
              // Split the previous segment into two segments, before and after
              // the new segment.
              //
              // Case 1:
              //  prevSegment  : |---------|
              //  newSegment   :    |====|
              //  ===>         : |--|====|-|
              log/* default.debug */.Z.debug("SI: Segment pushed is contained in a previous one", bufferType, start, end, segmentI.start, segmentI.end);
              var nextSegment = {
                partiallyPushed: segmentI.partiallyPushed,
                start: newSegment.end,
                end: segmentI.end,
                precizeStart: segmentI.precizeStart && segmentI.precizeEnd && newSegment.precizeEnd,
                precizeEnd: segmentI.precizeEnd,
                bufferedStart: undefined,
                bufferedEnd: segmentI.end,
                infos: segmentI.infos
              };
              segmentI.end = newSegment.start;
              segmentI.bufferedEnd = undefined;
              segmentI.precizeEnd = segmentI.precizeEnd && newSegment.precizeStart;
              inventory.splice(i + 1, 0, newSegment);
              inventory.splice(i + 2, 0, nextSegment);
              return;
            }
          }
        }
      }
    } // if we got here, we are at the first segment
    // check bounds of the previous first segment


    var firstSegment = this._inventory[0];

    if (firstSegment === undefined) {
      // we do not have any segment yet
      log/* default.debug */.Z.debug("SI: first segment pushed", bufferType, start, end);

      this._inventory.push(newSegment);

      return;
    }

    if (firstSegment.start >= end) {
      // our segment is before, put it before
      //
      // Case 1:
      //  firstSegment :      |----|
      //  newSegment   : |====|
      //  ===>         : |====|----|
      //
      // Case 2:
      //  firstSegment :        |----|
      //  newSegment   : |====|
      //  ===>         : |====| |----|
      log/* default.debug */.Z.debug("SI: Segment pushed comes before all previous ones", bufferType, start, end, firstSegment.start);

      this._inventory.splice(0, 0, newSegment);
    } else if (firstSegment.end <= end) {
      // Our segment is bigger, replace the first
      //
      // Case 1:
      //  firstSegment :   |---|
      //  newSegment   : |=======|
      //  ===>         : |=======|
      //
      // Case 2:
      //  firstSegment :   |-----|
      //  newSegment   : |=======|
      //  ===>         : |=======|
      log/* default.debug */.Z.debug("SI: Segment pushed starts before and completely " + "recovers the previous first one", bufferType, start, end, firstSegment.start, firstSegment.end);

      this._inventory.splice(0, 1, newSegment);

      while (inventory.length > 1 && inventory[1].start < newSegment.end) {
        if (inventory[1].end > newSegment.end) {
          // The next segment ends after newSegment.
          // Mutate the next segment.
          //
          // Case 1:
          //   newSegment   : |======|
          //   nextSegment  :      |----|
          //   ===>         : |======|--|
          log/* default.debug */.Z.debug("SI: Segment pushed updates the start of the next one", bufferType, newSegment.end, inventory[1].start);
          inventory[1].start = newSegment.end;
          inventory[1].bufferedStart = undefined;
          inventory[1].precizeStart = newSegment.precizeEnd;
          return;
        } // The next segment was completely contained in newSegment.
        // Remove it.
        //
        // Case 1:
        //   newSegment   : |======|
        //   nextSegment  :   |---|
        //   ===>         : |======|
        //
        // Case 2:
        //   newSegment   : |======|
        //   nextSegment  :   |----|
        //   ===>         : |======|


        log/* default.debug */.Z.debug("SI: Segment pushed removes the next one", bufferType, start, end, inventory[1].start, inventory[1].end);
        inventory.splice(1, 1);
      }

      return;
    } else {
      // our segment has a "complex" relation with the first one,
      // update the old one start and add this one before it.
      //
      // Case 1:
      //  firstSegment :    |------|
      //  newSegment   : |======|
      //  ===>         : |======|--|
      log/* default.debug */.Z.debug("SI: Segment pushed start of the next one", bufferType, start, end, firstSegment.start, firstSegment.end);
      firstSegment.start = end;
      firstSegment.bufferedStart = undefined;
      firstSegment.precizeStart = newSegment.precizeEnd;

      this._inventory.splice(0, 0, newSegment);

      return;
    }
  }
  /**
   * Indicate that inserted chunks can now be considered as a complete segment.
   * Take in argument the same content than what was given to `insertChunk` for
   * the corresponding chunks.
   * @param {Object} content
   */
  ;

  _proto.completeSegment = function completeSegment(content) {
    if (content.segment.isInit) {
      return;
    }

    var inventory = this._inventory;
    var foundIt = false;

    for (var i = 0; i < inventory.length; i++) {
      if ((0,are_same_content/* default */.Z)(inventory[i].infos, content)) {
        if (foundIt) {
          log/* default.warn */.Z.warn("SI: Completed Segment is splitted.", content);
        }

        foundIt = true;
        var firstI = i;
        i += 1;

        while (i < inventory.length && (0,are_same_content/* default */.Z)(inventory[i].infos, content)) {
          i++;
        }

        var lastI = i - 1;
        var length = lastI - firstI;
        var lastEnd = inventory[lastI].end;
        var lastBufferedEnd = inventory[lastI].bufferedEnd;

        if (length > 0) {
          this._inventory.splice(firstI + 1, length);

          i -= length;
        }

        this._inventory[firstI].partiallyPushed = false;
        this._inventory[firstI].end = lastEnd;
        this._inventory[firstI].bufferedEnd = lastBufferedEnd;
      }
    }

    if (!foundIt) {
      log/* default.warn */.Z.warn("SI: Completed Segment not found", content);
    }
  }
  /**
   * Returns the whole inventory.
   *
   * To get a list synchronized with what a media buffer actually has buffered
   * you might want to call `synchronizeBuffered` before calling this method.
   * @returns {Array.<Object>}
   */
  ;

  _proto.getInventory = function getInventory() {
    return this._inventory;
  };

  return SegmentInventory;
}();
/**
 * Returns `true` if the buffered start of the given chunk looks coherent enough
 * relatively to what is announced in the Manifest.
 * @param {Object} thisSegment
 * @returns {Boolean}
 */




function bufferedStartLooksCoherent(thisSegment) {
  if (thisSegment.bufferedStart === undefined || thisSegment.partiallyPushed) {
    return false;
  }

  var start = thisSegment.start,
      end = thisSegment.end;
  var duration = end - start;
  return Math.abs(start - thisSegment.bufferedStart) <= MAX_MANIFEST_BUFFERED_START_END_DIFFERENCE && (thisSegment.bufferedEnd === undefined || thisSegment.bufferedEnd > thisSegment.bufferedStart && Math.abs(thisSegment.bufferedEnd - thisSegment.bufferedStart - duration) <= Math.min(MAX_MANIFEST_BUFFERED_DURATION_DIFFERENCE, duration / 3));
}
/**
 * Returns `true` if the buffered end of the given chunk looks coherent enough
 * relatively to what is announced in the Manifest.
 * @param {Object} thisSegment
 * @returns {Boolean}
 */


function bufferedEndLooksCoherent(thisSegment) {
  if (thisSegment.bufferedEnd === undefined || thisSegment.partiallyPushed) {
    return false;
  }

  var start = thisSegment.start,
      end = thisSegment.end;
  var duration = end - start;
  return Math.abs(end - thisSegment.bufferedEnd) <= MAX_MANIFEST_BUFFERED_START_END_DIFFERENCE && thisSegment.bufferedStart != null && thisSegment.bufferedEnd > thisSegment.bufferedStart && Math.abs(thisSegment.bufferedEnd - thisSegment.bufferedStart - duration) <= Math.min(MAX_MANIFEST_BUFFERED_DURATION_DIFFERENCE, duration / 3);
}
/**
 * Evaluate the given buffered Chunk's buffered start from its range's start,
 * considering that this chunk is the first one in it.
 * @param {Object} firstSegmentInRange
 * @param {number} rangeStart
 * @param {Object} lastDeletedSegmentInfos
 */


function guessBufferedStartFromRangeStart(firstSegmentInRange, rangeStart, lastDeletedSegmentInfos, bufferType) {
  if (firstSegmentInRange.bufferedStart !== undefined) {
    if (firstSegmentInRange.bufferedStart < rangeStart) {
      log/* default.debug */.Z.debug("SI: Segment partially GCed at the start", bufferType, firstSegmentInRange.bufferedStart, rangeStart);
      firstSegmentInRange.bufferedStart = rangeStart;
    }

    if (!firstSegmentInRange.precizeStart && bufferedStartLooksCoherent(firstSegmentInRange)) {
      firstSegmentInRange.start = firstSegmentInRange.bufferedStart;
      firstSegmentInRange.precizeStart = true;
    }
  } else if (firstSegmentInRange.precizeStart) {
    log/* default.debug */.Z.debug("SI: buffered start is precize start", bufferType, firstSegmentInRange.start);
    firstSegmentInRange.bufferedStart = firstSegmentInRange.start;
  } else if (lastDeletedSegmentInfos !== null && lastDeletedSegmentInfos.end > rangeStart && (lastDeletedSegmentInfos.precizeEnd || firstSegmentInRange.start - lastDeletedSegmentInfos.end <= MAX_MANIFEST_BUFFERED_START_END_DIFFERENCE)) {
    log/* default.debug */.Z.debug("SI: buffered start is end of previous segment", bufferType, rangeStart, firstSegmentInRange.start, lastDeletedSegmentInfos.end);
    firstSegmentInRange.bufferedStart = lastDeletedSegmentInfos.end;

    if (bufferedStartLooksCoherent(firstSegmentInRange)) {
      firstSegmentInRange.start = lastDeletedSegmentInfos.end;
      firstSegmentInRange.precizeStart = true;
    }
  } else if (firstSegmentInRange.start - rangeStart <= MAX_MANIFEST_BUFFERED_START_END_DIFFERENCE) {
    log/* default.debug */.Z.debug("SI: found true buffered start", bufferType, rangeStart, firstSegmentInRange.start);
    firstSegmentInRange.bufferedStart = rangeStart;

    if (bufferedStartLooksCoherent(firstSegmentInRange)) {
      firstSegmentInRange.start = rangeStart;
      firstSegmentInRange.precizeStart = true;
    }
  } else if (rangeStart < firstSegmentInRange.start) {
    log/* default.debug */.Z.debug("SI: range start too far from expected start", bufferType, rangeStart, firstSegmentInRange.start);
  } else {
    log/* default.debug */.Z.debug("SI: Segment appears immediately garbage collected at the start", bufferType, firstSegmentInRange.bufferedStart, rangeStart);
    firstSegmentInRange.bufferedStart = rangeStart;
  }
}
/**
 * Evaluate the given buffered Chunk's buffered end from its range's end,
 * considering that this chunk is the last one in it.
 * @param {Object} firstSegmentInRange
 * @param {number} rangeStart
 * @param {Object} infos
 */


function guessBufferedEndFromRangeEnd(lastSegmentInRange, rangeEnd, bufferType) {
  if (lastSegmentInRange.bufferedEnd !== undefined) {
    if (lastSegmentInRange.bufferedEnd > rangeEnd) {
      log/* default.debug */.Z.debug("SI: Segment partially GCed at the end", bufferType, lastSegmentInRange.bufferedEnd, rangeEnd);
      lastSegmentInRange.bufferedEnd = rangeEnd;
    }

    if (!lastSegmentInRange.precizeEnd && rangeEnd - lastSegmentInRange.end <= MAX_MANIFEST_BUFFERED_START_END_DIFFERENCE && bufferedEndLooksCoherent(lastSegmentInRange)) {
      lastSegmentInRange.precizeEnd = true;
      lastSegmentInRange.end = rangeEnd;
    }
  } else if (lastSegmentInRange.precizeEnd) {
    log/* default.debug */.Z.debug("SI: buffered end is precize end", bufferType, lastSegmentInRange.end);
    lastSegmentInRange.bufferedEnd = lastSegmentInRange.end;
  } else if (rangeEnd - lastSegmentInRange.end <= MAX_MANIFEST_BUFFERED_START_END_DIFFERENCE) {
    log/* default.debug */.Z.debug("SI: found true buffered end", bufferType, rangeEnd, lastSegmentInRange.end);
    lastSegmentInRange.bufferedEnd = rangeEnd;

    if (bufferedEndLooksCoherent(lastSegmentInRange)) {
      lastSegmentInRange.end = rangeEnd;
      lastSegmentInRange.precizeEnd = true;
    }
  } else if (rangeEnd > lastSegmentInRange.end) {
    log/* default.debug */.Z.debug("SI: range end too far from expected end", bufferType, rangeEnd, lastSegmentInRange.end);
    lastSegmentInRange.bufferedEnd = lastSegmentInRange.end;
  } else {
    log/* default.debug */.Z.debug("SI: Segment appears immediately garbage collected at the end", bufferType, lastSegmentInRange.bufferedEnd, rangeEnd);
    lastSegmentInRange.bufferedEnd = rangeEnd;
  }
}
/**
 * Pretty print the inventory, to easily note which segments are where in the
 * current buffer.
 *
 * This is mostly useful when logging.
 *
 * @example
 * This function is called by giving it the inventory, such as:
 * ```js
 * prettyPrintInventory(inventory);
 * ```
 *
 * Let's consider this possible return:
 * ```
 * 0.00|A|9.00 ~ 9.00|B|45.08 ~ 282.08|B|318.08
 * [A] P: gen-dash-period-0 || R: video/5(2362822)
 * [B] P: gen-dash-period-0 || R: video/6(2470094)
 * ```
 * We have a first part, from 0 to 9 seconds, which contains segments for
 * the Representation with the id "video/5" and an associated bitrate of
 * 2362822 bits per seconds (in the Period with the id "gen-dash-period-0").
 *
 * Then from 9.00 seconds to 45.08 seconds, we have segments from another
 * Representation from the same Period (with the id "video/6" and a bitrate
 * of 2470094 bits per seconds).
 *
 * At last we have a long time between 45.08 and 282.08 with no segment followed
 * by a segment from that same Representation between 282.08 seconds and 318.08
 * seconds.
 * @param {Array.<Object>} inventory
 * @returns {string}
 */


function prettyPrintInventory(inventory) {
  var roundingError = 1 / 60;
  var encounteredReps = {};
  var letters = [];
  var lastChunk = null;
  var lastLetter = null;

  function generateNewLetter(infos) {
    var currentLetter = String.fromCharCode(letters.length + 65);
    letters.push({
      letter: currentLetter,
      periodId: infos.period.id,
      representationId: infos.representation.id,
      bitrate: infos.representation.bitrate
    });
    return currentLetter;
  }

  var str = "";

  for (var i = 0; i < inventory.length; i++) {
    var chunk = inventory[i];

    if (chunk.bufferedStart !== undefined && chunk.bufferedEnd !== undefined) {
      var periodId = chunk.infos.period.id;
      var representationId = chunk.infos.representation.id;
      var encounteredPeriod = encounteredReps[periodId];
      var currentLetter = void 0;

      if (encounteredPeriod === undefined) {
        var _encounteredReps$peri;

        currentLetter = generateNewLetter(chunk.infos);
        encounteredReps[periodId] = (_encounteredReps$peri = {}, _encounteredReps$peri[representationId] = currentLetter, _encounteredReps$peri);
      } else if (encounteredPeriod[representationId] === undefined) {
        currentLetter = generateNewLetter(chunk.infos);
        encounteredPeriod[representationId] = currentLetter;
      } else {
        currentLetter = encounteredPeriod[representationId];
      }

      if (lastChunk === null) {
        str += chunk.bufferedStart.toFixed(2) + "|" + currentLetter + "|";
      } else if (lastLetter === currentLetter) {
        if (lastChunk.bufferedEnd + roundingError < chunk.bufferedStart) {
          str += lastChunk.bufferedEnd.toFixed(2) + " ~ " + (chunk.bufferedStart.toFixed(2) + "|" + currentLetter + "|");
        }
      } else {
        str += lastChunk.bufferedEnd.toFixed(2) + " ~ " + (chunk.bufferedStart.toFixed(2) + "|" + currentLetter + "|");
      }

      lastChunk = chunk;
      lastLetter = currentLetter;
    }
  }

  if (lastChunk !== null) {
    str += String(lastChunk.end.toFixed(2));
  }

  letters.forEach(function (letterInfo) {
    var _a;

    str += "\n[" + letterInfo.letter + "] " + ("P: " + letterInfo.periodId + " || R: " + letterInfo.representationId) + ("(" + ((_a = letterInfo.bitrate) !== null && _a !== void 0 ? _a : "unknown bitrate") + ")");
  });
  return str;
}
;// CONCATENATED MODULE: ./src/core/segment_buffers/implementations/types.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Class allowing to push segments and remove data to a buffer to be able
 * to decode them in the future as well as retrieving information about which
 * segments have already been pushed.
 *
 * A `SegmentBuffer` can rely on a browser's SourceBuffer as well as being
 * entirely defined in the code.
 *
 * A SegmentBuffer is associated to a given "bufferType" (e.g. "audio",
 * "video", "text") and allows to push segments as well as removing part of
 * already-pushed segments for that type.
 *
 * Because a segment can be divided into multiple chunks, one should call the
 * `endOfSegment` method once all chunks of a given segment have been pushed
 * (through the `pushChunk` method) to validate that a segment has been
 * completely pushed.
 * It is expected to push chunks from only one segment at a time before calling
 * the `endOfSegment` function for that segment. Pushing chunks from multiple
 * segments in parallel could have unexpected result depending on the underlying
 * implementation.
 * TODO reflect that in the API?
 *
 * A SegmentBuffer also maintains an "inventory", which is the current
 * list of segments contained in the underlying buffer.
 * This inventory has to be manually "synchronized" (through the
 * `synchronizeInventory` method) before being retrieved (through the
 * `getInventory` method).
 *
 * Also depending on the underlying implementation, the various operations
 * performed on a `SegmentBuffer` (push/remove/endOfSegment) can happen
 * synchronously or asynchronously.
 * In the latter case, such operations are put in a FIFO Queue.
 * You can retrieve the current queue of operations by calling the
 * `getPendingOperations` method.
 * If operations happens synchronously, this method will just return an empty
 * array.
 */

var SegmentBuffer = /*#__PURE__*/function () {
  function SegmentBuffer() {
    // Use SegmentInventory by default for inventory purposes
    this._segmentInventory = new SegmentInventory();
  }
  /**
   * The maintained inventory can fall out of sync from garbage collection or
   * other events.
   *
   * This methods allow to manually trigger a synchronization. It should be
   * called before retrieving Segment information from it (e.g. with
   * `getInventory`).
   */


  var _proto = SegmentBuffer.prototype;

  _proto.synchronizeInventory = function synchronizeInventory() {
    // The default implementation just use the SegmentInventory
    this._segmentInventory.synchronizeBuffered(this.getBufferedRanges());
  }
  /**
   * Returns the currently buffered data for which the content is known with
   * the corresponding content information.
   * /!\ This data can fall out of sync with the real buffered ranges. Please
   * call `synchronizeInventory` before to make sure it is correctly
   * synchronized.
   * @returns {Array.<Object>}
   */
  ;

  _proto.getInventory = function getInventory() {
    // The default implementation just use the SegmentInventory
    return this._segmentInventory.getInventory();
  }
  /**
   * Returns the list of every operations that the `SegmentBuffer` is still
   * processing. From the one with the highest priority (like the one being
   * processed)
   * @returns {Array.<Object>}
   */
  ;

  _proto.getPendingOperations = function getPendingOperations() {
    // Return no pending operation by default (for synchronous SegmentBuffers)
    return [];
  };

  return SegmentBuffer;
}();
/**
 * Enum used by a SegmentBuffer as a discriminant in its queue of
 * "operations".
 */

var SegmentBufferOperation;

(function (SegmentBufferOperation) {
  SegmentBufferOperation[SegmentBufferOperation["Push"] = 0] = "Push";
  SegmentBufferOperation[SegmentBufferOperation["Remove"] = 1] = "Remove";
  SegmentBufferOperation[SegmentBufferOperation["EndOfSegment"] = 2] = "EndOfSegment";
})(SegmentBufferOperation || (SegmentBufferOperation = {}));

/***/ }),

/***/ 4309:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ ManualTimeRanges
/* harmony export */ });
/* harmony import */ var _utils_ranges__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2829);
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Simulate TimeRanges as returned by SourceBuffer.prototype.buffered.
 * Add an "insert" and "remove" methods to manually update it.
 * @class ManualTimeRanges
 */

var ManualTimeRanges = /*#__PURE__*/function () {
  function ManualTimeRanges() {
    this._ranges = [];
    this.length = 0;
  }

  var _proto = ManualTimeRanges.prototype;

  _proto.insert = function insert(start, end) {
    if (false) {}

    (0,_utils_ranges__WEBPACK_IMPORTED_MODULE_0__/* .insertInto */ .kR)(this._ranges, {
      start: start,
      end: end
    });
    this.length = this._ranges.length;
  };

  _proto.remove = function remove(start, end) {
    if (false) {}

    var rangesToIntersect = [];

    if (start > 0) {
      rangesToIntersect.push({
        start: 0,
        end: start
      });
    }

    if (end < Infinity) {
      rangesToIntersect.push({
        start: end,
        end: Infinity
      });
    }

    this._ranges = (0,_utils_ranges__WEBPACK_IMPORTED_MODULE_0__/* .keepRangeIntersection */ .tn)(this._ranges, rangesToIntersect);
    this.length = this._ranges.length;
  };

  _proto.start = function start(index) {
    if (index >= this._ranges.length) {
      throw new Error("INDEX_SIZE_ERROR");
    }

    return this._ranges[index].start;
  };

  _proto.end = function end(index) {
    if (index >= this._ranges.length) {
      throw new Error("INDEX_SIZE_ERROR");
    }

    return this._ranges[index].end;
  };

  return ManualTimeRanges;
}();



/***/ }),

/***/ 3801:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ AssertionError
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1506);
/* harmony import */ var _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5354);
/* harmony import */ var _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5957);
/* harmony import */ var _babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_2__);




/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Error due to an abnormal assertion fails.
 *
 * @class AssertionError
 * @extends Error
 */
var AssertionError = /*#__PURE__*/function (_Error) {
  _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1___default()(AssertionError, _Error);

  /**
   * @param {string} message
   */
  function AssertionError(message) {
    var _this;

    _this = _Error.call(this) || this; // @see https://stackoverflow.com/questions/41102060/typescript-extending-error-class

    Object.setPrototypeOf(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0___default()(_this), AssertionError.prototype);
    _this.name = "AssertionError";
    _this.message = message;
    return _this;
  }

  return AssertionError;
}( /*#__PURE__*/_babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_2___default()(Error));



/***/ }),

/***/ 5157:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ EncryptedMediaError
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1506);
/* harmony import */ var _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5354);
/* harmony import */ var _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5957);
/* harmony import */ var _babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _error_codes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5992);
/* harmony import */ var _error_message__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(7367);




/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Error linked to the encryption of the media.
 *
 * @class EncryptedMediaError
 * @extends Error
 */

var EncryptedMediaError = /*#__PURE__*/function (_Error) {
  _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1___default()(EncryptedMediaError, _Error);

  /**
   * @param {string} code
   * @param {string} reason
   * @Param {Boolean} fatal
   */
  function EncryptedMediaError(code, reason) {
    var _this;

    _this = _Error.call(this) || this; // @see https://stackoverflow.com/questions/41102060/typescript-extending-error-class

    Object.setPrototypeOf(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0___default()(_this), EncryptedMediaError.prototype);
    _this.name = "EncryptedMediaError";
    _this.type = _error_codes__WEBPACK_IMPORTED_MODULE_3__/* .ErrorTypes.ENCRYPTED_MEDIA_ERROR */ .ZB.ENCRYPTED_MEDIA_ERROR;
    _this.code = code;
    _this.message = (0,_error_message__WEBPACK_IMPORTED_MODULE_4__/* .default */ .Z)(_this.name, _this.code, reason);
    _this.fatal = false;
    return _this;
  }

  return EncryptedMediaError;
}( /*#__PURE__*/_babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_2___default()(Error));



/***/ }),

/***/ 5992:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ZB": () => /* binding */ ErrorTypes,
/* harmony export */   "br": () => /* binding */ NetworkErrorTypes,
/* harmony export */   "SM": () => /* binding */ ErrorCodes
/* harmony export */ });
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ErrorTypes = {
  NETWORK_ERROR: "NETWORK_ERROR",
  MEDIA_ERROR: "MEDIA_ERROR",
  ENCRYPTED_MEDIA_ERROR: "ENCRYPTED_MEDIA_ERROR",
  OTHER_ERROR: "OTHER_ERROR"
};
var NetworkErrorTypes = {
  TIMEOUT: "TIMEOUT",
  ERROR_EVENT: "ERROR_EVENT",
  ERROR_HTTP_CODE: "ERROR_HTTP_CODE",
  PARSE_ERROR: "PARSE_ERROR"
};
var ErrorCodes = {
  PIPELINE_LOAD_ERROR: "PIPELINE_LOAD_ERROR",
  PIPELINE_PARSE_ERROR: "PIPELINE_PARSE_ERROR",
  INTEGRITY_ERROR: "INTEGRITY_ERROR",
  MANIFEST_PARSE_ERROR: "MANIFEST_PARSE_ERROR",
  MANIFEST_INCOMPATIBLE_CODECS_ERROR: "MANIFEST_INCOMPATIBLE_CODECS_ERROR",
  MANIFEST_UPDATE_ERROR: "MANIFEST_UPDATE_ERROR",
  MANIFEST_UNSUPPORTED_ADAPTATION_TYPE: "MANIFEST_UNSUPPORTED_ADAPTATION_TYPE",
  MEDIA_STARTING_TIME_NOT_FOUND: "MEDIA_STARTING_TIME_NOT_FOUND",
  MEDIA_TIME_BEFORE_MANIFEST: "MEDIA_TIME_BEFORE_MANIFEST",
  MEDIA_TIME_AFTER_MANIFEST: "MEDIA_TIME_AFTER_MANIFEST",
  MEDIA_TIME_NOT_FOUND: "MEDIA_TIME_NOT_FOUND",
  NO_PLAYABLE_REPRESENTATION: "NO_PLAYABLE_REPRESENTATION",
  MEDIA_IS_ENCRYPTED_ERROR: "MEDIA_IS_ENCRYPTED_ERROR",
  CREATE_MEDIA_KEYS_ERROR: "CREATE_MEDIA_KEYS_ERROR",
  KEY_ERROR: "KEY_ERROR",
  KEY_STATUS_CHANGE_ERROR: "KEY_STATUS_CHANGE_ERROR",
  KEY_UPDATE_ERROR: "KEY_UPDATE_ERROR",
  KEY_LOAD_ERROR: "KEY_LOAD_ERROR",
  KEY_LOAD_TIMEOUT: "KEY_LOAD_TIMEOUT",
  KEY_GENERATE_REQUEST_ERROR: "KEY_GENERATE_REQUEST_ERROR",
  INCOMPATIBLE_KEYSYSTEMS: "INCOMPATIBLE_KEYSYSTEMS",
  INVALID_ENCRYPTED_EVENT: "INVALID_ENCRYPTED_EVENT",
  INVALID_KEY_SYSTEM: "INVALID_KEY_SYSTEM",
  LICENSE_SERVER_CERTIFICATE_ERROR: "LICENSE_SERVER_CERTIFICATE_ERROR",
  MULTIPLE_SESSIONS_SAME_INIT_DATA: "MULTIPLE_SESSIONS_SAME_INIT_DATA",
  BUFFER_APPEND_ERROR: "BUFFER_APPEND_ERROR",
  BUFFER_FULL_ERROR: "BUFFER_FULL_ERROR",
  BUFFER_TYPE_UNKNOWN: "BUFFER_TYPE_UNKNOWN",
  MEDIA_ERR_BLOCKED_AUTOPLAY: "MEDIA_ERR_BLOCKED_AUTOPLAY",
  MEDIA_ERR_PLAY_NOT_ALLOWED: "MEDIA_ERR_PLAY_NOT_ALLOWED",
  MEDIA_ERR_NOT_LOADED_METADATA: "MEDIA_ERR_NOT_LOADED_METADATA",
  MEDIA_ERR_ABORTED: "MEDIA_ERR_ABORTED",
  MEDIA_ERR_NETWORK: "MEDIA_ERR_NETWORK",
  MEDIA_ERR_DECODE: "MEDIA_ERR_DECODE",
  MEDIA_ERR_SRC_NOT_SUPPORTED: "MEDIA_ERR_SRC_NOT_SUPPORTED",
  MEDIA_ERR_UNKNOWN: "MEDIA_ERR_UNKNOWN",
  MEDIA_SOURCE_NOT_SUPPORTED: "MEDIA_SOURCE_NOT_SUPPORTED",
  MEDIA_KEYS_NOT_SUPPORTED: "MEDIA_KEYS_NOT_SUPPORTED",
  DISCONTINUITY_ENCOUNTERED: "DISCONTINUITY_ENCOUNTERED",
  NONE: "NONE"
};


/***/ }),

/***/ 7367:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ errorMessage
/* harmony export */ });
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Generate a normalized error message.
 * @param {string} name
 * @param {string} code
 * @param {Error|string|Event|null} [reason]
 * @returns {string}
 */
function errorMessage(name, code, reason) {
  return name + " (" + code + ") " + reason;
}

/***/ }),

/***/ 9822:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ isKnownError
/* harmony export */ });
/* harmony import */ var _encrypted_media_error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5157);
/* harmony import */ var _error_codes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5992);
/* harmony import */ var _media_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3714);
/* harmony import */ var _network_error__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9362);
/* harmony import */ var _other_error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5389);
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





/**
 * Whether the error given is a ICustomError.
 * @param {Error} error
 * @returns {Boolean}
 */

function isKnownError(error) {
  return (error instanceof _encrypted_media_error__WEBPACK_IMPORTED_MODULE_0__/* .default */ .Z || error instanceof _media_error__WEBPACK_IMPORTED_MODULE_1__/* .default */ .Z || error instanceof _other_error__WEBPACK_IMPORTED_MODULE_2__/* .default */ .Z || error instanceof _network_error__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z) && Object.keys(_error_codes__WEBPACK_IMPORTED_MODULE_4__/* .ErrorTypes */ .ZB).indexOf(error.type) >= 0;
}

/***/ }),

/***/ 3714:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ MediaError
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1506);
/* harmony import */ var _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5354);
/* harmony import */ var _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5957);
/* harmony import */ var _babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _error_codes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5992);
/* harmony import */ var _error_message__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(7367);




/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Error linked to the media Playback.
 *
 * @class MediaError
 * @extends Error
 */

var MediaError = /*#__PURE__*/function (_Error) {
  _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1___default()(MediaError, _Error);

  /**
   * @param {string} code
   * @param {string} reason
   * @param {Boolean} fatal
   */
  function MediaError(code, reason) {
    var _this;

    _this = _Error.call(this) || this; // @see https://stackoverflow.com/questions/41102060/typescript-extending-error-class

    Object.setPrototypeOf(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0___default()(_this), MediaError.prototype);
    _this.name = "MediaError";
    _this.type = _error_codes__WEBPACK_IMPORTED_MODULE_3__/* .ErrorTypes.MEDIA_ERROR */ .ZB.MEDIA_ERROR;
    _this.code = code;
    _this.message = (0,_error_message__WEBPACK_IMPORTED_MODULE_4__/* .default */ .Z)(_this.name, _this.code, reason);
    _this.fatal = false;
    return _this;
  }

  return MediaError;
}( /*#__PURE__*/_babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_2___default()(Error));



/***/ }),

/***/ 9362:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ NetworkError
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1506);
/* harmony import */ var _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5354);
/* harmony import */ var _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5957);
/* harmony import */ var _babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _error_codes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5992);
/* harmony import */ var _error_message__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(7367);




/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Error linked to network interactions (requests).
 *
 * @class NetworkError
 * @extends Error
 */

var NetworkError = /*#__PURE__*/function (_Error) {
  _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1___default()(NetworkError, _Error);

  /**
   * @param {string} code
   * @param {Error} options
   * @param {Boolean} fatal
   */
  function NetworkError(code, options) {
    var _this;

    _this = _Error.call(this) || this; // @see https://stackoverflow.com/questions/41102060/typescript-extending-error-class

    Object.setPrototypeOf(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0___default()(_this), NetworkError.prototype);
    _this.name = "NetworkError";
    _this.type = _error_codes__WEBPACK_IMPORTED_MODULE_3__/* .ErrorTypes.NETWORK_ERROR */ .ZB.NETWORK_ERROR;
    _this.xhr = options.xhr === undefined ? null : options.xhr;
    _this.url = options.url;
    _this.status = options.status;
    _this.errorType = options.type;
    _this.code = code;
    _this.message = (0,_error_message__WEBPACK_IMPORTED_MODULE_4__/* .default */ .Z)(_this.name, _this.code, options.message);
    _this.fatal = false;
    return _this;
  }
  /**
   * Returns true if the NetworkError is due to the given http error code
   * @param {number} httpErrorCode
   * @returns {Boolean}
   */


  var _proto = NetworkError.prototype;

  _proto.isHttpError = function isHttpError(httpErrorCode) {
    return this.errorType === _error_codes__WEBPACK_IMPORTED_MODULE_3__/* .NetworkErrorTypes.ERROR_HTTP_CODE */ .br.ERROR_HTTP_CODE && this.status === httpErrorCode;
  };

  return NetworkError;
}( /*#__PURE__*/_babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_2___default()(Error));



/***/ }),

/***/ 5389:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ OtherError
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1506);
/* harmony import */ var _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5354);
/* harmony import */ var _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5957);
/* harmony import */ var _babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _error_codes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5992);
/* harmony import */ var _error_message__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(7367);




/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * @class OtherError
 * @extends Error
 */

var OtherError = /*#__PURE__*/function (_Error) {
  _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1___default()(OtherError, _Error);

  /**
   * @param {string} code
   * @param {string} reason
   * @param {Boolean} fatal
   */
  function OtherError(code, reason) {
    var _this;

    _this = _Error.call(this) || this; // @see https://stackoverflow.com/questions/41102060/typescript-extending-error-class

    Object.setPrototypeOf(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0___default()(_this), OtherError.prototype);
    _this.name = "OtherError";
    _this.type = _error_codes__WEBPACK_IMPORTED_MODULE_3__/* .ErrorTypes.OTHER_ERROR */ .ZB.OTHER_ERROR;
    _this.code = code;
    _this.message = (0,_error_message__WEBPACK_IMPORTED_MODULE_4__/* .default */ .Z)(_this.name, _this.code, reason);
    _this.fatal = false;
    return _this;
  }

  return OtherError;
}( /*#__PURE__*/_babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_2___default()(Error));



/***/ }),

/***/ 9105:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ RequestError
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1506);
/* harmony import */ var _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5354);
/* harmony import */ var _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5957);
/* harmony import */ var _babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_2__);




/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Errors linked to the XHR implentation done in the RxPlayer.
 *
 * @class RequestError
 * @extends Error
 */
var RequestError = /*#__PURE__*/function (_Error) {
  _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1___default()(RequestError, _Error);

  /**
   * @param {XMLHttpRequest} xhr
   * @param {string} url
   * @param {string} type
   */
  function RequestError(url, status, type, xhr) {
    var _this;

    _this = _Error.call(this) || this; // @see https://stackoverflow.com/questions/41102060/typescript-extending-error-class

    Object.setPrototypeOf(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0___default()(_this), RequestError.prototype);
    _this.name = "RequestError";
    _this.url = url;
    _this.xhr = xhr;
    _this.status = status;
    _this.type = type;
    _this.message = type;
    return _this;
  }

  return RequestError;
}( /*#__PURE__*/_babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_2___default()(Error));



/***/ }),

/***/ 7273:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Initial features object, with no feature activated by default.
 * @type {Object}
 */
var features = {
  directfile: null,
  emeManager: null,
  htmlTextTracksBuffer: null,
  htmlTextTracksParsers: {},
  imageBuffer: null,
  imageParser: null,
  nativeTextTracksBuffer: null,
  nativeTextTracksParsers: {},
  transports: {}
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (features);

/***/ }),

/***/ 7874:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony import */ var _features_object__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7273);
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * File allowing feature-switching.
 *
 * Every optional feature is included here.
 * They all should subsequently be accessed in the code through the exported
 * `features` object.
 *
 * The then exported features object will be used dynamically to know which
 * features are activated.
 *
 * This also lazy-feature loading, where this exported object can be updated
 * at runtime, to allow some new features even if the player instance has
 * already have been instanciated.
 */


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_features_object__WEBPACK_IMPORTED_MODULE_0__/* .default */ .Z);


/***/ }),

/***/ 1452:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "default": () => /* binding */ src
});

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/createClass.js
var createClass = __webpack_require__(3913);
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/inheritsLoose.js
var inheritsLoose = __webpack_require__(5354);
var inheritsLoose_default = /*#__PURE__*/__webpack_require__.n(inheritsLoose);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/Subject.js
var Subject = __webpack_require__(211);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/ReplaySubject.js + 4 modules
var ReplaySubject = __webpack_require__(2135);
// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.js
var tslib_es6 = __webpack_require__(655);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/util/ObjectUnsubscribedError.js
var ObjectUnsubscribedError = __webpack_require__(1016);
;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/BehaviorSubject.js
/** PURE_IMPORTS_START tslib,_Subject,_util_ObjectUnsubscribedError PURE_IMPORTS_END */



var BehaviorSubject = /*@__PURE__*/ (function (_super) {
    tslib_es6/* __extends */.ZT(BehaviorSubject, _super);
    function BehaviorSubject(_value) {
        var _this = _super.call(this) || this;
        _this._value = _value;
        return _this;
    }
    Object.defineProperty(BehaviorSubject.prototype, "value", {
        get: function () {
            return this.getValue();
        },
        enumerable: true,
        configurable: true
    });
    BehaviorSubject.prototype._subscribe = function (subscriber) {
        var subscription = _super.prototype._subscribe.call(this, subscriber);
        if (subscription && !subscription.closed) {
            subscriber.next(this._value);
        }
        return subscription;
    };
    BehaviorSubject.prototype.getValue = function () {
        if (this.hasError) {
            throw this.thrownError;
        }
        else if (this.closed) {
            throw new ObjectUnsubscribedError/* ObjectUnsubscribedError */.N();
        }
        else {
            return this._value;
        }
    };
    BehaviorSubject.prototype.next = function (value) {
        _super.prototype.next.call(this, this._value = value);
    };
    return BehaviorSubject;
}(Subject/* Subject */.xQ));

//# sourceMappingURL=BehaviorSubject.js.map

// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/merge.js
var merge = __webpack_require__(4370);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/empty.js
var empty = __webpack_require__(5631);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/combineLatest.js
var combineLatest = __webpack_require__(5142);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/concat.js
var concat = __webpack_require__(9795);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/of.js
var of = __webpack_require__(8170);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/takeUntil.js
var takeUntil = __webpack_require__(1558);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/map.js
var map = __webpack_require__(5709);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/distinctUntilChanged.js
var distinctUntilChanged = __webpack_require__(1931);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/take.js
var take = __webpack_require__(1015);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/multicast.js + 1 modules
var multicast = __webpack_require__(1421);
;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/publish.js
/** PURE_IMPORTS_START _Subject,_multicast PURE_IMPORTS_END */


function publish(selector) {
    return selector ?
        (0,multicast/* multicast */.O)(function () { return new Subject/* Subject */.xQ(); }, selector) :
        (0,multicast/* multicast */.O)(new Subject/* Subject */.xQ());
}
//# sourceMappingURL=publish.js.map

// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/filter.js
var filter = __webpack_require__(6008);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/share.js
var share = __webpack_require__(9095);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/startWith.js
var startWith = __webpack_require__(3485);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/mapTo.js
var mapTo = __webpack_require__(5602);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/Subscriber.js
var Subscriber = __webpack_require__(979);
;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/skipWhile.js
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


function skipWhile(predicate) {
    return function (source) { return source.lift(new SkipWhileOperator(predicate)); };
}
var SkipWhileOperator = /*@__PURE__*/ (function () {
    function SkipWhileOperator(predicate) {
        this.predicate = predicate;
    }
    SkipWhileOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));
    };
    return SkipWhileOperator;
}());
var SkipWhileSubscriber = /*@__PURE__*/ (function (_super) {
    tslib_es6/* __extends */.ZT(SkipWhileSubscriber, _super);
    function SkipWhileSubscriber(destination, predicate) {
        var _this = _super.call(this, destination) || this;
        _this.predicate = predicate;
        _this.skipping = true;
        _this.index = 0;
        return _this;
    }
    SkipWhileSubscriber.prototype._next = function (value) {
        var destination = this.destination;
        if (this.skipping) {
            this.tryCallPredicate(value);
        }
        if (!this.skipping) {
            destination.next(value);
        }
    };
    SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {
        try {
            var result = this.predicate(value, this.index++);
            this.skipping = Boolean(result);
        }
        catch (err) {
            this.destination.error(err);
        }
    };
    return SkipWhileSubscriber;
}(Subscriber/* Subscriber */.L));
//# sourceMappingURL=skipWhile.js.map

// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/switchMapTo.js
var switchMapTo = __webpack_require__(1198);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/mergeMapTo.js
var mergeMapTo = __webpack_require__(3756);
// EXTERNAL MODULE: ./src/compat/event_listeners.ts + 4 modules
var event_listeners = __webpack_require__(1473);
;// CONCATENATED MODULE: ./src/compat/fullscreen.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Request fullScreen action on a given element.
 * @param {HTMLElement} elt
 */
function requestFullscreen(element) {
  if (!fullscreen_isFullscreen()) {
    var elt = element;
    /* eslint-disable @typescript-eslint/unbound-method */

    if (typeof elt.requestFullscreen === "function") {
      /* eslint-enable @typescript-eslint/unbound-method */

      /* eslint-disable @typescript-eslint/no-floating-promises */
      elt.requestFullscreen();
      /* eslint-enable @typescript-eslint/no-floating-promises */
    } else if (typeof elt.msRequestFullscreen === "function") {
      elt.msRequestFullscreen();
    } else if (typeof elt.mozRequestFullScreen === "function") {
      elt.mozRequestFullScreen();
    } else if (typeof elt.webkitRequestFullscreen === "function") {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-call
      elt.webkitRequestFullscreen // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
      (Element.ALLOW_KEYBOARD_INPUT);
    }
  }
}
/**
 * Exit fullscreen if an element is currently in fullscreen.
 */


function fullscreen_exitFullscreen() {
  if (fullscreen_isFullscreen()) {
    var doc = document;
    /* eslint-disable @typescript-eslint/unbound-method */

    if (typeof doc.exitFullscreen === "function") {
      /* eslint-enable @typescript-eslint/unbound-method */

      /* eslint-disable @typescript-eslint/no-floating-promises */
      doc.exitFullscreen();
      /* eslint-enable @typescript-eslint/no-floating-promises */
    } else if (typeof doc.msExitFullscreen === "function") {
      doc.msExitFullscreen();
    } else if (typeof doc.mozCancelFullScreen === "function") {
      doc.mozCancelFullScreen();
    } else if (typeof doc.webkitExitFullscreen === "function") {
      doc.webkitExitFullscreen();
    }
  }
}
/**
 * Returns true if an element in the document is being displayed in fullscreen
 * mode;
 * otherwise it's false.
 * @returns {boolean}
 */


function fullscreen_isFullscreen() {
  var doc = document;
  return doc.fullscreenElement != null || doc.mozFullScreenElement != null || doc.webkitFullscreenElement != null || doc.msFullscreenElement != null;
}


// EXTERNAL MODULE: ./src/compat/browser_detection.ts
var browser_detection = __webpack_require__(3666);
// EXTERNAL MODULE: ./src/log.ts + 1 modules
var log = __webpack_require__(3887);
;// CONCATENATED MODULE: ./src/compat/browser_version.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Returns either :
 * - 'null' when the current browser is not Firefox.
 * - '-1' when it is impossible to get the Firefox version
 * - A number above 0 that is the Firefox version number
 * @returns {number|null}
 */

function getFirefoxVersion() {
  if (!browser_detection/* isFirefox */.vU) {
    log/* default.warn */.Z.warn("Compat: Can't access Firefox version on no firefox browser.");
    return null;
  }

  var userAgent = navigator.userAgent;
  var match = /Firefox\/([0-9]+)\./.exec(userAgent);

  if (match === null) {
    return -1;
  }

  var result = parseInt(match[1], 10);

  if (isNaN(result)) {
    return -1;
  }

  return result;
}


;// CONCATENATED MODULE: ./src/compat/can_rely_on_video_visibility_and_size.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * This functions tells if the RxPlayer can trust on any browser data
 * about video element visibility and size.
 *
 * On Firefox (version >= 67) :
 * - The PIP feature exists but can be disabled by default according
 * to the OS and the channel used for updating / getting Firefox binaries.
 * - There is no API to know if the Picture-in-picture (PIP) is enabled
 * - There is no API to get the width of the PIP window
 *
 * The element clientWidth tells the width of the original video element, and
 * no PIP window API exists to determine its presence or width. Thus, there are
 * no way to determine the real width of the video window, as we can't know when
 * the PIP feature or window is enabled, and we can't have access to the windo
 * size information.
 *
 * Moreover, when the document is considered as hidden (e.g. in case of hidden
 * tab), as there is no way to know if the PIP feature or window is enabled,
 * we can't know if the video window is visible or not.
 * @returns {boolean}
 */

function canRelyOnVideoVisibilityAndSize() {
  var _a, _b;
  /* eslint-disable @typescript-eslint/no-unsafe-member-access */


  if (!browser_detection/* isFirefox */.vU) {
    return true;
  }

  var firefoxVersion = getFirefoxVersion();

  if (firefoxVersion === null || firefoxVersion < 67) {
    return true;
  }

  return ((_b = (_a = HTMLVideoElement) === null || _a === void 0 ? void 0 : _a.prototype) === null || _b === void 0 ? void 0 : _b.requirePictureInPicture) !== undefined;
  /* eslint-enable @typescript-eslint/no-unsafe-member-access */
}
// EXTERNAL MODULE: ./src/config.ts
var config = __webpack_require__(944);
// EXTERNAL MODULE: ./src/errors/media_error.ts
var media_error = __webpack_require__(3714);
// EXTERNAL MODULE: ./src/errors/is_known_error.ts
var is_known_error = __webpack_require__(9822);
// EXTERNAL MODULE: ./src/errors/other_error.ts
var other_error = __webpack_require__(5389);
;// CONCATENATED MODULE: ./src/errors/format_error.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/*
 * Format an unknown error into an API-defined error.
 * @param {*} error
 * @returns {Error}
 */

function formatError(error, _ref) {
  var defaultCode = _ref.defaultCode,
      defaultReason = _ref.defaultReason;

  if ((0,is_known_error/* default */.Z)(error)) {
    return error;
  }

  var reason = error instanceof Error ? error.toString() : defaultReason;
  return new other_error/* default */.Z(defaultCode, reason);
}
// EXTERNAL MODULE: ./src/errors/error_codes.ts
var error_codes = __webpack_require__(5992);
// EXTERNAL MODULE: ./src/features/index.ts
var features = __webpack_require__(7874);
// EXTERNAL MODULE: ./src/utils/are_arrays_of_numbers_equal.ts
var are_arrays_of_numbers_equal = __webpack_require__(4791);
// EXTERNAL MODULE: ./src/utils/event_emitter.ts
var event_emitter = __webpack_require__(1959);
// EXTERNAL MODULE: ./src/utils/is_null_or_undefined.ts
var is_null_or_undefined = __webpack_require__(1946);
// EXTERNAL MODULE: ./src/utils/noop.ts
var noop = __webpack_require__(8894);
// EXTERNAL MODULE: ./src/utils/object_assign.ts
var object_assign = __webpack_require__(8026);
// EXTERNAL MODULE: ./src/utils/promise.ts
var promise = __webpack_require__(9589);
// EXTERNAL MODULE: ./src/utils/ranges.ts
var ranges = __webpack_require__(2829);
// EXTERNAL MODULE: ./src/utils/warn_once.ts
var warn_once = __webpack_require__(8806);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/defer.js
var defer = __webpack_require__(1410);
// EXTERNAL MODULE: ./src/compat/eme/custom_media_keys/index.ts + 7 modules
var custom_media_keys = __webpack_require__(6139);
// EXTERNAL MODULE: ./src/core/eme/media_keys_infos_store.ts
var media_keys_infos_store = __webpack_require__(6033);
;// CONCATENATED MODULE: ./src/core/eme/dispose_media_keys.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





/**
 * @param {Object} mediaKeysInfos
 * @returns {Observable}
 */

function disposeMediaKeys(mediaElement) {
  return (0,defer/* defer */.P)(function () {
    var currentState = media_keys_infos_store/* default.getState */.Z.getState(mediaElement);

    if (currentState === null) {
      return (0,of.of)(null);
    }

    log/* default.info */.Z.info("EME: Disposing of the current MediaKeys");
    var loadedSessionsStore = currentState.loadedSessionsStore;
    media_keys_infos_store/* default.clearState */.Z.clearState(mediaElement);
    return loadedSessionsStore.closeAllSessions().pipe((0,mergeMapTo/* mergeMapTo */.j)((0,custom_media_keys/* setMediaKeys */.Y)(mediaElement, null)));
  });
}
;// CONCATENATED MODULE: ./src/core/eme/dispose_eme.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Free up all ressources taken by the EME management.
 */

function disposeEME(mediaElement) {
  disposeMediaKeys(mediaElement).subscribe(noop/* default */.Z);
}
;// CONCATENATED MODULE: ./src/core/eme/get_current_key_system.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns the name of the current key system used.
 * @param {HTMLMediaElement} mediaElement
 * @returns {string|null}
 */

function get_current_key_system_getCurrentKeySystem(mediaElement) {
  var currentState = media_keys_infos_store/* default.getState */.Z.getState(mediaElement);
  return currentState == null ? null : currentState.keySystemOptions.type;
}
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/ignoreElements.js
var ignoreElements = __webpack_require__(6738);
;// CONCATENATED MODULE: ./src/compat/should_unset_media_keys.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns true if the mediakeys associated to a media element should be
 * unset once the content is stopped.
 * Depends on the target.
 * @returns {Boolean}
 */

function shouldUnsetMediaKeys() {
  return browser_detection/* isIE11 */.fq;
}
;// CONCATENATED MODULE: ./src/core/eme/clear_eme_session.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */






/**
 * Clear EME ressources that should be cleared when the current content stops
 * its playback.
 * @param {HTMLMediaElement} mediaElement
 * @returns {Observable}
 */

function clearEMESession(mediaElement) {
  return (0,defer/* defer */.P)(function () {
    log/* default.info */.Z.info("EME: Clearing-up EME session.");

    if (shouldUnsetMediaKeys()) {
      log/* default.info */.Z.info("EME: disposing current MediaKeys.");
      return disposeMediaKeys(mediaElement).pipe((0,ignoreElements/* ignoreElements */.l)());
    }

    var currentState = media_keys_infos_store/* default.getState */.Z.getState(mediaElement);

    if (currentState !== null && currentState.keySystemOptions.closeSessionsOnStop === true) {
      log/* default.info */.Z.info("EME: closing all current sessions.");
      return currentState.loadedSessionsStore.closeAllSessions().pipe((0,ignoreElements/* ignoreElements */.l)());
    }

    log/* default.info */.Z.info("EME: Nothing to clear. Returning right away. No state =", currentState === null);
    return empty/* EMPTY */.E;
  });
}
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/mergeMap.js
var mergeMap = __webpack_require__(7746);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/shareReplay.js
var shareReplay = __webpack_require__(7006);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/from.js + 6 modules
var from = __webpack_require__(4072);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/innerSubscribe.js
var innerSubscribe = __webpack_require__(7604);
;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/exhaustMap.js
/** PURE_IMPORTS_START tslib,_map,_observable_from,_innerSubscribe PURE_IMPORTS_END */




function exhaustMap(project, resultSelector) {
    if (resultSelector) {
        return function (source) { return source.pipe(exhaustMap(function (a, i) { return (0,from/* from */.D)(project(a, i)).pipe((0,map/* map */.U)(function (b, ii) { return resultSelector(a, b, i, ii); })); })); };
    }
    return function (source) {
        return source.lift(new ExhaustMapOperator(project));
    };
}
var ExhaustMapOperator = /*@__PURE__*/ (function () {
    function ExhaustMapOperator(project) {
        this.project = project;
    }
    ExhaustMapOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ExhaustMapSubscriber(subscriber, this.project));
    };
    return ExhaustMapOperator;
}());
var ExhaustMapSubscriber = /*@__PURE__*/ (function (_super) {
    tslib_es6/* __extends */.ZT(ExhaustMapSubscriber, _super);
    function ExhaustMapSubscriber(destination, project) {
        var _this = _super.call(this, destination) || this;
        _this.project = project;
        _this.hasSubscription = false;
        _this.hasCompleted = false;
        _this.index = 0;
        return _this;
    }
    ExhaustMapSubscriber.prototype._next = function (value) {
        if (!this.hasSubscription) {
            this.tryNext(value);
        }
    };
    ExhaustMapSubscriber.prototype.tryNext = function (value) {
        var result;
        var index = this.index++;
        try {
            result = this.project(value, index);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.hasSubscription = true;
        this._innerSub(result);
    };
    ExhaustMapSubscriber.prototype._innerSub = function (result) {
        var innerSubscriber = new innerSubscribe/* SimpleInnerSubscriber */.IY(this);
        var destination = this.destination;
        destination.add(innerSubscriber);
        var innerSubscription = (0,innerSubscribe/* innerSubscribe */.ft)(result, innerSubscriber);
        if (innerSubscription !== innerSubscriber) {
            destination.add(innerSubscription);
        }
    };
    ExhaustMapSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (!this.hasSubscription) {
            this.destination.complete();
        }
        this.unsubscribe();
    };
    ExhaustMapSubscriber.prototype.notifyNext = function (innerValue) {
        this.destination.next(innerValue);
    };
    ExhaustMapSubscriber.prototype.notifyError = function (err) {
        this.destination.error(err);
    };
    ExhaustMapSubscriber.prototype.notifyComplete = function () {
        this.hasSubscription = false;
        if (this.hasCompleted) {
            this.destination.complete();
        }
    };
    return ExhaustMapSubscriber;
}(innerSubscribe/* SimpleOuterSubscriber */.Ds));
//# sourceMappingURL=exhaustMap.js.map

// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/tap.js
var tap = __webpack_require__(3068);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/Subscription.js + 1 modules
var Subscription = __webpack_require__(3884);
;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/finalize.js
/** PURE_IMPORTS_START tslib,_Subscriber,_Subscription PURE_IMPORTS_END */



function finalize(callback) {
    return function (source) { return source.lift(new FinallyOperator(callback)); };
}
var FinallyOperator = /*@__PURE__*/ (function () {
    function FinallyOperator(callback) {
        this.callback = callback;
    }
    FinallyOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new FinallySubscriber(subscriber, this.callback));
    };
    return FinallyOperator;
}());
var FinallySubscriber = /*@__PURE__*/ (function (_super) {
    tslib_es6/* __extends */.ZT(FinallySubscriber, _super);
    function FinallySubscriber(destination, callback) {
        var _this = _super.call(this, destination) || this;
        _this.add(new Subscription/* Subscription */.w(callback));
        return _this;
    }
    return FinallySubscriber;
}(Subscriber/* Subscriber */.L));
//# sourceMappingURL=finalize.js.map

// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/switchMap.js
var switchMap = __webpack_require__(6381);
;// CONCATENATED MODULE: ./src/compat/should_reload_media_source_on_decipherability_update.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns true if we have to reload the MediaSource due to an update in the
 * decipherability status of some segments based on the current key sytem.
 *
 * We found that on all Widevine targets tested, a simple seek is sufficient.
 * As widevine clients make a good chunk of users, we can make a difference
 * between them and others as it is for the better.
 * @param {string|null} currentKeySystem
 * @returns {Boolean}
 */
function shouldReloadMediaSourceOnDecipherabilityUpdate(currentKeySystem) {
  return currentKeySystem === null || currentKeySystem.indexOf("widevine") < 0;
}
// EXTERNAL MODULE: ./src/manifest/index.ts + 10 modules
var manifest = __webpack_require__(1966);
// EXTERNAL MODULE: ./src/utils/defer_subscriptions.ts + 6 modules
var defer_subscriptions = __webpack_require__(8025);
// EXTERNAL MODULE: ./src/utils/filter_map.ts
var filter_map = __webpack_require__(2793);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/Observable.js + 3 modules
var Observable = __webpack_require__(4379);
;// CONCATENATED MODULE: ./src/utils/rx-throttle.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function throttle(func) {
  var isPending = false;
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return new Observable/* Observable */.y(function (obs) {
      if (isPending) {
        obs.complete();
        return undefined;
      }

      isPending = true;
      var funcSubscription = func.apply(void 0, args).subscribe(function (i) {
        obs.next(i);
      }, function (e) {
        isPending = false;
        obs.error(e);
      }, function () {
        isPending = false;
        obs.complete();
      });
      return function () {
        funcSubscription.unsubscribe();
        isPending = false;
      };
    });
  };
}
// EXTERNAL MODULE: ./src/utils/take_first_set.ts
var take_first_set = __webpack_require__(5278);
;// CONCATENATED MODULE: ./src/core/abr/ewma.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Tweaked implementation of an exponential weighted Moving Average.
 * Heavily "inspired" from the shaka-player one (Ewma).
 * @class EWMA
 */
var EWMA = /*#__PURE__*/function () {
  /**
   * @param {number} halfLife
   */
  function EWMA(halfLife) {
    // (half-life = log(1/2) / log(Decay Factor)
    this._alpha = Math.exp(Math.log(0.5) / halfLife);
    this._lastEstimate = 0;
    this._totalWeight = 0;
  }
  /**
   * @param {number} weight
   * @param {number} value
   */


  var _proto = EWMA.prototype;

  _proto.addSample = function addSample(weight, value) {
    var adjAlpha = Math.pow(this._alpha, weight);
    var newEstimate = value * (1 - adjAlpha) + adjAlpha * this._lastEstimate;

    if (!isNaN(newEstimate)) {
      this._lastEstimate = newEstimate;
      this._totalWeight += weight;
    }
  }
  /**
   * @returns {number} value
   */
  ;

  _proto.getEstimate = function getEstimate() {
    var zeroFactor = 1 - Math.pow(this._alpha, this._totalWeight);
    return this._lastEstimate / zeroFactor;
  };

  return EWMA;
}();


;// CONCATENATED MODULE: ./src/core/abr/bandwidth_estimator.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var ABR_MINIMUM_TOTAL_BYTES = config/* default.ABR_MINIMUM_TOTAL_BYTES */.Z.ABR_MINIMUM_TOTAL_BYTES,
    ABR_MINIMUM_CHUNK_SIZE = config/* default.ABR_MINIMUM_CHUNK_SIZE */.Z.ABR_MINIMUM_CHUNK_SIZE,
    ABR_FAST_EMA = config/* default.ABR_FAST_EMA */.Z.ABR_FAST_EMA,
    ABR_SLOW_EMA = config/* default.ABR_SLOW_EMA */.Z.ABR_SLOW_EMA;
/**
 * Calculate a mean bandwidth based on the bytes downloaded and the amount
 * of time needed to do so.
 *
 * Heavily "inspired" from the Shaka-Player's "ewma bandwidth estimator".
 * @class BandwidthEstimator
 */

var BandwidthEstimator = /*#__PURE__*/function () {
  function BandwidthEstimator() {
    /**
     * A fast-moving average.
     * @private
     */
    this._fastEWMA = new EWMA(ABR_FAST_EMA);
    /**
     * A slow-moving average.
     * @private
     */

    this._slowEWMA = new EWMA(ABR_SLOW_EMA);
    /**
     * Number of bytes sampled.
     * @private
     */

    this._bytesSampled = 0;
  }
  /**
   * Takes a bandwidth sample.
   * @param {number} durationMs - The amount of time, in milliseconds, for a
   *   particular request.
   * @param {number} numBytes - The total number of bytes transferred in that
   *   request.
   */


  var _proto = BandwidthEstimator.prototype;

  _proto.addSample = function addSample(durationInMs, numberOfBytes) {
    if (numberOfBytes < ABR_MINIMUM_CHUNK_SIZE) {
      return;
    }

    var bandwidth = numberOfBytes * 8000 / durationInMs;
    var weight = durationInMs / 1000;
    this._bytesSampled += numberOfBytes;

    this._fastEWMA.addSample(weight, bandwidth);

    this._slowEWMA.addSample(weight, bandwidth);
  }
  /**
   * Get estimate of the bandwidth, in bits per seconds.
   * @returns {Number|undefined}
   */
  ;

  _proto.getEstimate = function getEstimate() {
    if (this._bytesSampled < ABR_MINIMUM_TOTAL_BYTES) {
      return undefined;
    } // Take the minimum of these two estimates.  This should have the effect of
    // adapting down quickly, but up more slowly.


    return Math.min(this._fastEWMA.getEstimate(), this._slowEWMA.getEstimate());
  }
  /**
   * Reset the bandwidth estimation.
   */
  ;

  _proto.reset = function reset() {
    this._fastEWMA = new EWMA(ABR_FAST_EMA);
    this._slowEWMA = new EWMA(ABR_SLOW_EMA);
    this._bytesSampled = 0;
  };

  return BandwidthEstimator;
}();


;// CONCATENATED MODULE: ./src/core/abr/create_filters.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Create Observable that merge several throttling Observables into one.
 * @param {Observable} limitWidth$ - Emit the width at which the chosen
 * Representation should be limited.
 * @param {Observable} throttleBitrate$ - Emit the maximum bitrate authorized.
 * @param {Observable} throttle$ - Also emit the maximum bitrate authorized.
 * Here for legacy reasons.
 * @returns {Observable}
 */

function createFilters(limitWidth$, throttleBitrate$, throttle$) {
  var deviceEventsArray = [];

  if (limitWidth$ != null) {
    deviceEventsArray.push(limitWidth$.pipe((0,map/* map */.U)(function (width) {
      return {
        width: width
      };
    })));
  }

  if (throttle$ != null) {
    deviceEventsArray.push(throttle$.pipe((0,map/* map */.U)(function (bitrate) {
      return {
        bitrate: bitrate
      };
    })));
  }

  if (throttleBitrate$ != null) {
    deviceEventsArray.push(throttleBitrate$.pipe((0,map/* map */.U)(function (bitrate) {
      return {
        bitrate: bitrate
      };
    })));
  } // Emit restrictions on the pools of available representations to choose
  // from.


  return deviceEventsArray.length > 0 ? (0,combineLatest/* combineLatest */.aj)(deviceEventsArray).pipe((0,map/* map */.U)(function (args) {
    return object_assign/* default.apply */.Z.apply(void 0, [{}].concat(args));
  })) : (0,of.of)({});
}
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/OuterSubscriber.js
var OuterSubscriber = __webpack_require__(2039);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/util/subscribeToResult.js + 1 modules
var subscribeToResult = __webpack_require__(2080);
;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/withLatestFrom.js
/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */



function withLatestFrom() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return function (source) {
        var project;
        if (typeof args[args.length - 1] === 'function') {
            project = args.pop();
        }
        var observables = args;
        return source.lift(new WithLatestFromOperator(observables, project));
    };
}
var WithLatestFromOperator = /*@__PURE__*/ (function () {
    function WithLatestFromOperator(observables, project) {
        this.observables = observables;
        this.project = project;
    }
    WithLatestFromOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));
    };
    return WithLatestFromOperator;
}());
var WithLatestFromSubscriber = /*@__PURE__*/ (function (_super) {
    tslib_es6/* __extends */.ZT(WithLatestFromSubscriber, _super);
    function WithLatestFromSubscriber(destination, observables, project) {
        var _this = _super.call(this, destination) || this;
        _this.observables = observables;
        _this.project = project;
        _this.toRespond = [];
        var len = observables.length;
        _this.values = new Array(len);
        for (var i = 0; i < len; i++) {
            _this.toRespond.push(i);
        }
        for (var i = 0; i < len; i++) {
            var observable = observables[i];
            _this.add((0,subscribeToResult/* subscribeToResult */.D)(_this, observable, undefined, i));
        }
        return _this;
    }
    WithLatestFromSubscriber.prototype.notifyNext = function (_outerValue, innerValue, outerIndex) {
        this.values[outerIndex] = innerValue;
        var toRespond = this.toRespond;
        if (toRespond.length > 0) {
            var found = toRespond.indexOf(outerIndex);
            if (found !== -1) {
                toRespond.splice(found, 1);
            }
        }
    };
    WithLatestFromSubscriber.prototype.notifyComplete = function () {
    };
    WithLatestFromSubscriber.prototype._next = function (value) {
        if (this.toRespond.length === 0) {
            var args = [value].concat(this.values);
            if (this.project) {
                this._tryProject(args);
            }
            else {
                this.destination.next(args);
            }
        }
    };
    WithLatestFromSubscriber.prototype._tryProject = function (args) {
        var result;
        try {
            result = this.project.apply(this, args);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return WithLatestFromSubscriber;
}(OuterSubscriber/* OuterSubscriber */.L));
//# sourceMappingURL=withLatestFrom.js.map

;// CONCATENATED MODULE: ./src/core/abr/get_buffer_levels.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Return "Buffer Levels" which are steps of available buffers from which we
 * are normally able switch safely to the next available bitrate.
 * (Following an algorithm close to BOLA)
 * @param {Array.<number>} bitrates - All available bitrates, __sorted__ in
 * ascending order.
 * @returns {Array.<number>}
 */
function getBufferLevels(bitrates) {
  var logs = bitrates.map(function (b) {
    return Math.log(b / bitrates[0]);
  });
  var utilities = logs.map(function (l) {
    return l - logs[0] + 1;
  }); // normalize

  var gp = (utilities[utilities.length - 1] - 1) / (bitrates.length * 2 + 10);
  var Vp = 1 / gp;
  return bitrates.map(function (_, i) {
    return minBufferLevelForBitrate(i);
  });
  /**
   * Get minimum buffer we should keep ahead to pick this bitrate.
   * @param {number} index
   * @returns {number}
   */

  function minBufferLevelForBitrate(index) {
    if (index === 0) {
      return 0;
    }

    var boundedIndex = Math.min(Math.max(1, index), bitrates.length - 1);
    return Vp * (gp + (bitrates[boundedIndex] * utilities[boundedIndex - 1] - bitrates[boundedIndex - 1] * utilities[boundedIndex]) / (bitrates[boundedIndex] - bitrates[boundedIndex - 1])) + 4;
  }
}
// EXTERNAL MODULE: ./src/utils/array_find_index.ts
var array_find_index = __webpack_require__(5138);
;// CONCATENATED MODULE: ./src/core/abr/get_estimate_from_buffer_levels.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * From the buffer gap, choose a representation.
 * @param {Object} clockTick
 * @param {Array.<Number>} bitrates
 * @param {Array.<Number>} bufferLevels
 * @returns {Object|undefined}
 */

function getEstimateFromBufferLevels(clockTick, bitrates, bufferLevels) {
  var bufferGap = clockTick.bufferGap,
      currentBitrate = clockTick.currentBitrate,
      currentScore = clockTick.currentScore,
      speed = clockTick.speed;

  if (currentBitrate == null) {
    return bitrates[0];
  }

  var currentBitrateIndex = (0,array_find_index/* default */.Z)(bitrates, function (b) {
    return b === currentBitrate;
  });

  if (currentBitrateIndex < 0 || bitrates.length !== bufferLevels.length) {
    log/* default.error */.Z.error("ABR: Current Bitrate not found in the calculated levels");
    return bitrates[0];
  }

  var scaledScore;

  if (currentScore != null) {
    scaledScore = speed === 0 ? currentScore : currentScore / speed;
  }

  if (scaledScore != null && scaledScore > 1) {
    var currentBufferLevel = bufferLevels[currentBitrateIndex];

    var nextIndex = function () {
      for (var i = currentBitrateIndex + 1; i < bufferLevels.length; i++) {
        if (bufferLevels[i] > currentBufferLevel) {
          return i;
        }
      }
    }();

    if (nextIndex != null) {
      var nextBufferLevel = bufferLevels[nextIndex];

      if (bufferGap >= nextBufferLevel) {
        return bitrates[nextIndex];
      }
    }
  }

  if (scaledScore == null || scaledScore < 1.15) {
    var _currentBufferLevel = bufferLevels[currentBitrateIndex];

    if (bufferGap < _currentBufferLevel) {
      for (var i = currentBitrateIndex - 1; i >= 0; i--) {
        if (bitrates[i] < currentBitrate) {
          return bitrates[i];
        }
      }

      return currentBitrate;
    }
  }

  return currentBitrate;
}
;// CONCATENATED MODULE: ./src/core/abr/buffer_based_chooser.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * Choose a bitrate based on the currently available buffer.
 *
 * This algorithm is based on the deviation of the BOLA algorithm.
 * It is a hybrid solution that also relies on a given bitrate's
 * "maintainability".
 * Each time a chunk is downloaded, from the ratio between the chunk duration
 * and chunk's request time, we can assume that the representation is
 * "maintanable" or not.
 * If so, we may switch to a better quality, or conversely to a worse quality.
 *
 * @param {Observable} update$
 * @param {Array.<number>} bitrates
 * @returns {Observable}
 */

function BufferBasedChooser(update$, bitrates) {
  var levelsMap = getBufferLevels(bitrates);
  log/* default.debug */.Z.debug("ABR: Steps for buffer based chooser.", levelsMap.map(function (l, i) {
    return {
      bufferLevel: l,
      bitrate: bitrates[i]
    };
  }));
  return update$.pipe((0,map/* map */.U)(function (clockTick) {
    return getEstimateFromBufferLevels(clockTick, bitrates, levelsMap);
  }));
}
;// CONCATENATED MODULE: ./src/core/abr/cached_segment_detector.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var CACHE_LOAD_DURATION_THRESHOLDS = config/* default.CACHE_LOAD_DURATION_THRESHOLDS */.Z.CACHE_LOAD_DURATION_THRESHOLDS;
/**
 * From segment download duration, tells if a segment
 * may have been loaded from cache.
 * @param {string} contentType
 * @param {number} downloadDuration
 */

function mayBeFromCache(contentType, downloadDuration) {
  var cacheLoadDurationThreshold = CACHE_LOAD_DURATION_THRESHOLDS[contentType];
  return downloadDuration < cacheLoadDurationThreshold;
}
/**
 * Returns a function used to determine if a segment was loaded
 * from cache or not.
 * @returns {function}
 */


function generateCachedSegmentDetector() {
  var hasAlreadyLoadedNonCachedContent = false;
  /**
   * Determines with request duration if a loaded chunk may have been loaded
   * from cache, and return true if should ignore the metrics for representation
   * chooser.
   * @param {Object} content
   * @param {number} duration
   * @returns {boolean}
   */

  return function shouldIgnoreMetrics(content, downloadDuration) {
    var contentType = content.adaptation.type;

    if (contentType === "text" || contentType === "image") {
      return false;
    }

    var segmentMayBeFromCache = mayBeFromCache(contentType, downloadDuration);

    if (segmentMayBeFromCache && hasAlreadyLoadedNonCachedContent) {
      // We already loaded not cached segments.
      // Do not consider cached segments anymore.
      return true;
    }

    if (!segmentMayBeFromCache && !hasAlreadyLoadedNonCachedContent) {
      // First segment not loaded from cache.
      hasAlreadyLoadedNonCachedContent = true;
    }

    return false;
  };
}
;// CONCATENATED MODULE: ./src/core/abr/filter_by_bitrate.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Get only representations lower or equal to a given bitrate.
 * If no representation is lower than the given bitrate, returns an array containing
 * all Representation(s) with the lowest available bitrate.
 * @param {Array.<Object>} representations - All Representations available
 * @param {Number} bitrate
 * @returns {Array.<Object>}
 */

function filterByBitrate(representations, bitrate) {
  if (representations.length === 0) {
    return [];
  }

  representations.sort(function (ra, rb) {
    return ra.bitrate - rb.bitrate;
  });
  var minimumBitrate = representations[0].bitrate;
  var bitrateCeil = Math.max(bitrate, minimumBitrate);
  var firstSuperiorBitrateIndex = (0,array_find_index/* default */.Z)(representations, function (representation) {
    return representation.bitrate > bitrateCeil;
  });

  if (firstSuperiorBitrateIndex === -1) {
    return representations; // All representations have lower bitrates.
  }

  return representations.slice(0, firstSuperiorBitrateIndex);
}
// EXTERNAL MODULE: ./src/utils/array_find.ts
var array_find = __webpack_require__(3274);
;// CONCATENATED MODULE: ./src/core/abr/filter_by_width.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Filter representations based on their width:
 *   - the highest width considered will be the one linked to the first
 *     representation which has a superior width to the one given.
 * @param {Array.<Object>} representations - The representations array
 * @param {Number} width
 * @returns {Array.<Object>}
 */

function filterByWidth(representations, width) {
  var sortedRepsByWidth = representations.slice() // clone
  .sort(function (a, b) {
    return (0,take_first_set/* default */.Z)(a.width, 0) - (0,take_first_set/* default */.Z)(b.width, 0);
  });
  var repWithMaxWidth = (0,array_find/* default */.Z)(sortedRepsByWidth, function (representation) {
    return typeof representation.width === "number" && representation.width >= width;
  });

  if (repWithMaxWidth === undefined) {
    return representations;
  }

  var maxWidth = typeof repWithMaxWidth.width === "number" ? repWithMaxWidth.width : 0;
  return representations.filter(function (representation) {
    return typeof representation.width === "number" ? representation.width <= maxWidth : true;
  });
}
;// CONCATENATED MODULE: ./src/core/abr/network_analyzer.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





var ABR_REGULAR_FACTOR = config/* default.ABR_REGULAR_FACTOR */.Z.ABR_REGULAR_FACTOR,
    ABR_STARVATION_DURATION_DELTA = config/* default.ABR_STARVATION_DURATION_DELTA */.Z.ABR_STARVATION_DURATION_DELTA,
    ABR_STARVATION_FACTOR = config/* default.ABR_STARVATION_FACTOR */.Z.ABR_STARVATION_FACTOR,
    ABR_STARVATION_GAP = config/* default.ABR_STARVATION_GAP */.Z.ABR_STARVATION_GAP,
    OUT_OF_STARVATION_GAP = config/* default.OUT_OF_STARVATION_GAP */.Z.OUT_OF_STARVATION_GAP;
/**
 * Get pending segment request(s) starting with the asked segment position.
 * @param {Object} requests
 * @param {number} position
 * @returns {Array.<Object>}
 */

function getConcernedRequests(requests, neededPosition) {
  /** Index of the request for the next needed segment, in `requests`. */
  var nextSegmentIndex = (0,array_find_index/* default */.Z)(requests, function (request) {
    if (request.duration <= 0) {
      return false;
    }

    var segmentEnd = request.time + request.duration;
    return segmentEnd > neededPosition && Math.abs(neededPosition - request.time) < -0.3;
  });

  if (nextSegmentIndex < 0) {
    // Not found
    return [];
  }

  var nextRequest = requests[nextSegmentIndex];
  var segmentTime = nextRequest.time;
  var filteredRequests = [nextRequest]; // Get the possibly multiple requests for that segment's position

  for (var i = nextSegmentIndex + 1; i < requests.length; i++) {
    if (requests[i].time === segmentTime) {
      filteredRequests.push(requests[i]);
    } else {
      break;
    }
  }

  return filteredRequests;
}
/**
 * Estimate the __VERY__ recent bandwidth based on a single unfinished request.
 * Useful when the current bandwidth seemed to have fallen quickly.
 *
 * @param {Object} request
 * @returns {number|undefined}
 */


function estimateRequestBandwidth(request) {
  if (request.progress.length < 5) {
    // threshold from which we can consider
    // progress events reliably
    return undefined;
  } // try to infer quickly the current bitrate based on the
  // progress events


  var ewma1 = new EWMA(2);
  var progress = request.progress;

  for (var i = 1; i < progress.length; i++) {
    var bytesDownloaded = progress[i].size - progress[i - 1].size;
    var timeElapsed = progress[i].timestamp - progress[i - 1].timestamp;
    var reqBitrate = bytesDownloaded * 8 / (timeElapsed / 1000);
    ewma1.addSample(timeElapsed / 1000, reqBitrate);
  }

  return ewma1.getEstimate();
}
/**
 * Estimate remaining time for a pending request from a progress event.
 * @param {Object} lastProgressEvent
 * @param {number} bandwidthEstimate
 * @returns {number}
 */


function estimateRemainingTime(lastProgressEvent, bandwidthEstimate) {
  var remainingData = (lastProgressEvent.totalSize - lastProgressEvent.size) * 8;
  return Math.max(remainingData / bandwidthEstimate, 0);
}
/**
 * Check if the request for the most needed segment is too slow.
 * If that's the case, re-calculate the bandwidth urgently based on
 * this single request.
 * @param {Object} pendingRequests - Current pending requests.
 * @param {Object} playbackInfo - Information on the current playback.
 * @param {Object|null} currentRepresentation - The Representation being
 * presently being loaded.
 * @param {Number} lastEstimatedBitrate - Last bitrate estimate emitted.
 * @returns {Number|undefined}
 */


function estimateStarvationModeBitrate(pendingRequests, playbackInfo, currentRepresentation, lastEstimatedBitrate) {
  var nextNeededPosition = playbackInfo.position + playbackInfo.bufferGap;
  var concernedRequests = getConcernedRequests(pendingRequests, nextNeededPosition);

  if (concernedRequests.length !== 1) {
    // 0  == no request
    // 2+ == too complicated to calculate
    return undefined;
  }

  var concernedRequest = concernedRequests[0];
  var chunkDuration = concernedRequest.duration;
  var now = performance.now();
  var lastProgressEvent = concernedRequest.progress.length > 0 ? concernedRequest.progress[concernedRequest.progress.length - 1] : undefined; // first, try to do a quick estimate from progress events

  var bandwidthEstimate = estimateRequestBandwidth(concernedRequest);

  if (lastProgressEvent !== undefined && bandwidthEstimate !== undefined) {
    var remainingTime = estimateRemainingTime(lastProgressEvent, bandwidthEstimate); // if the remaining time does seem reliable

    if ((now - lastProgressEvent.timestamp) / 1000 <= remainingTime) {
      // Calculate estimated time spent rebuffering if we continue doing that request.
      var expectedRebufferingTime = remainingTime - playbackInfo.bufferGap / playbackInfo.speed;

      if (expectedRebufferingTime > 2000) {
        return bandwidthEstimate;
      }
    }
  }

  var requestElapsedTime = (now - concernedRequest.requestTimestamp) / 1000;
  var reasonableElapsedTime = requestElapsedTime <= (chunkDuration * 1.5 + 2) / playbackInfo.speed;

  if (currentRepresentation == null || reasonableElapsedTime) {
    return undefined;
  } // calculate a reduced bitrate from the current one


  var factor = chunkDuration / requestElapsedTime;
  var reducedBitrate = currentRepresentation.bitrate * Math.min(0.7, factor);

  if (lastEstimatedBitrate === undefined || reducedBitrate < lastEstimatedBitrate) {
    return reducedBitrate;
  }
}
/**
 * Returns true if, based on the current requests, it seems that the ABR should
 * switch immediately if a lower bitrate is more adapted.
 * Returns false if it estimates that you have time before switching to a lower
 * bitrate.
 * @param {Object} playbackInfo
 * @param {Object} requests - Every requests pending, in a chronological
 * order in terms of segment time.
 * @param {number} abrStarvationGap - "Buffer gap" from which we enter a
 * "starvation mode".
 * @returns {boolean}
 */


function shouldDirectlySwitchToLowBitrate(playbackInfo, requests) {
  var nextNeededPosition = playbackInfo.position + playbackInfo.bufferGap;
  var nextRequest = (0,array_find/* default */.Z)(requests, function (r) {
    return r.duration > 0 && r.time + r.duration > nextNeededPosition;
  });

  if (nextRequest === undefined) {
    return true;
  }

  var now = performance.now();
  var lastProgressEvent = nextRequest.progress.length > 0 ? nextRequest.progress[nextRequest.progress.length - 1] : undefined; // first, try to do a quick estimate from progress events

  var bandwidthEstimate = estimateRequestBandwidth(nextRequest);

  if (lastProgressEvent === undefined || bandwidthEstimate === undefined) {
    return true;
  }

  var remainingTime = estimateRemainingTime(lastProgressEvent, bandwidthEstimate);

  if ((now - lastProgressEvent.timestamp) / 1000 > remainingTime * 1.2) {
    return true;
  }

  var expectedRebufferingTime = remainingTime - playbackInfo.bufferGap / playbackInfo.speed;
  return expectedRebufferingTime > -1.5;
}
/**
 * Analyze the current network conditions and give a bandwidth estimate as well
 * as a maximum bitrate a Representation should be.
 * @class NetworkAnalyzer
 */


var NetworkAnalyzer = /*#__PURE__*/function () {
  function NetworkAnalyzer(initialBitrate, lowLatencyMode) {
    this._initialBitrate = initialBitrate;
    this._inStarvationMode = false;

    if (lowLatencyMode) {
      this._config = {
        starvationGap: ABR_STARVATION_GAP.LOW_LATENCY,
        outOfStarvationGap: OUT_OF_STARVATION_GAP.LOW_LATENCY,
        starvationBitrateFactor: ABR_STARVATION_FACTOR.LOW_LATENCY,
        regularBitrateFactor: ABR_REGULAR_FACTOR.LOW_LATENCY
      };
    } else {
      this._config = {
        starvationGap: ABR_STARVATION_GAP.DEFAULT,
        outOfStarvationGap: OUT_OF_STARVATION_GAP.DEFAULT,
        starvationBitrateFactor: ABR_STARVATION_FACTOR.DEFAULT,
        regularBitrateFactor: ABR_REGULAR_FACTOR.DEFAULT
      };
    }
  }
  /**
   * Gives an estimate of the current bandwidth and of the bitrate that should
   * be considered for chosing a `representation`.
   * This estimate is only based on network metrics.
   * @param {Object} playbackInfo - Gives current information about playback
   * @param {Object} bandwidthEstimator
   * @param {Object|null} currentRepresentation
   * @param {Array.<Object>} currentRequests
   * @param {number|undefined} lastEstimatedBitrate
   * @returns {Object}
   */


  var _proto = NetworkAnalyzer.prototype;

  _proto.getBandwidthEstimate = function getBandwidthEstimate(playbackInfo, bandwidthEstimator, currentRepresentation, currentRequests, lastEstimatedBitrate) {
    var newBitrateCeil; // bitrate ceil for the chosen Representation

    var bandwidthEstimate;
    var localConf = this._config;
    var bufferGap = playbackInfo.bufferGap,
        position = playbackInfo.position,
        duration = playbackInfo.duration; // check if should get in/out of starvation mode

    if (isNaN(duration) || bufferGap + position < duration - ABR_STARVATION_DURATION_DELTA) {
      if (!this._inStarvationMode && bufferGap <= localConf.starvationGap) {
        log/* default.info */.Z.info("ABR: enter starvation mode.");
        this._inStarvationMode = true;
      } else if (this._inStarvationMode && bufferGap >= localConf.outOfStarvationGap) {
        log/* default.info */.Z.info("ABR: exit starvation mode.");
        this._inStarvationMode = false;
      }
    } else if (this._inStarvationMode) {
      log/* default.info */.Z.info("ABR: exit starvation mode.");
      this._inStarvationMode = false;
    } // If in starvation mode, check if a quick new estimate can be done
    // from the last requests.
    // If so, cancel previous estimates and replace it by the new one


    if (this._inStarvationMode) {
      bandwidthEstimate = estimateStarvationModeBitrate(currentRequests, playbackInfo, currentRepresentation, lastEstimatedBitrate);

      if (bandwidthEstimate != null) {
        log/* default.info */.Z.info("ABR: starvation mode emergency estimate:", bandwidthEstimate);
        bandwidthEstimator.reset();
        newBitrateCeil = currentRepresentation == null ? bandwidthEstimate : Math.min(bandwidthEstimate, currentRepresentation.bitrate);
      }
    } // if newBitrateCeil is not yet defined, do the normal estimation


    if (newBitrateCeil == null) {
      bandwidthEstimate = bandwidthEstimator.getEstimate();

      if (bandwidthEstimate != null) {
        newBitrateCeil = bandwidthEstimate * (this._inStarvationMode ? localConf.starvationBitrateFactor : localConf.regularBitrateFactor);
      } else if (lastEstimatedBitrate != null) {
        newBitrateCeil = lastEstimatedBitrate * (this._inStarvationMode ? localConf.starvationBitrateFactor : localConf.regularBitrateFactor);
      } else {
        newBitrateCeil = this._initialBitrate;
      }
    }

    if (playbackInfo.speed > 1) {
      newBitrateCeil /= playbackInfo.speed;
    }

    return {
      bandwidthEstimate: bandwidthEstimate,
      bitrateChosen: newBitrateCeil
    };
  }
  /**
   * For a given wanted bitrate, tells if should switch urgently.
   * @param {number} bitrate
   * @param {Object} playbackInfo
   * @returns {boolean}
   */
  ;

  _proto.isUrgent = function isUrgent(bitrate, currentRepresentation, currentRequests, playbackInfo) {
    if (currentRepresentation === null) {
      return true;
    } else if (bitrate === currentRepresentation.bitrate) {
      return false;
    } else if (bitrate > currentRepresentation.bitrate) {
      return !this._inStarvationMode;
    }

    return shouldDirectlySwitchToLowBitrate(playbackInfo, currentRequests);
  };

  return NetworkAnalyzer;
}();


// EXTERNAL MODULE: ./src/utils/object_values.ts
var object_values = __webpack_require__(1679);
;// CONCATENATED MODULE: ./src/core/abr/pending_requests_store.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Store information about pending requests, like information about:
 *   - for which segments they are
 *   - how the request's progress goes
 * @class PendingRequestsStore
 */

var PendingRequestsStore = /*#__PURE__*/function () {
  function PendingRequestsStore() {
    this._currentRequests = {};
  }
  /**
   * Add information about a new pending request.
   * @param {string} id
   * @param {Object} payload
   */


  var _proto = PendingRequestsStore.prototype;

  _proto.add = function add(payload) {
    var id = payload.id,
        time = payload.time,
        duration = payload.duration,
        requestTimestamp = payload.requestTimestamp;
    this._currentRequests[id] = {
      time: time,
      duration: duration,
      requestTimestamp: requestTimestamp,
      progress: []
    };
  }
  /**
   * Notify of the progress of a currently pending request.
   * @param {Object} progress
   */
  ;

  _proto.addProgress = function addProgress(progress) {
    var request = this._currentRequests[progress.id];

    if (request == null) {
      if (false) {}

      log/* default.warn */.Z.warn("ABR: progress for a request not added");
      return;
    }

    request.progress.push(progress);
  }
  /**
   * Remove a request previously set as pending.
   * @param {string} id
   */
  ;

  _proto.remove = function remove(id) {
    if (this._currentRequests[id] == null) {
      if (false) {}

      log/* default.warn */.Z.warn("ABR: can't remove unknown request");
    }

    delete this._currentRequests[id];
  }
  /**
   * Returns information about all pending requests, in segment's chronological
   * order.
   * @returns {Array.<Object>}
   */
  ;

  _proto.getRequests = function getRequests() {
    return (0,object_values/* default */.Z)(this._currentRequests).filter(function (x) {
      return x != null;
    }).sort(function (reqA, reqB) {
      return reqA.time - reqB.time;
    });
  };

  return PendingRequestsStore;
}();


;// CONCATENATED MODULE: ./src/core/abr/representation_score_calculator.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Calculate the "maintainability score" of a given Representation:
 *   - A score higher than 1 means that the Representation can theorically
 *     be downloaded faster than the duration of the media it represents.
 *     (e.g. a segment representing 4 seconds can be downloaded in less than 4
 *     seconds).
 *   - A score lower or equal to 1 means that the Representation cannot be
 *     downloaded
 *
 * The score follows a simple linear relation to both variables it is based
 * on:
 *   - if n seconds of content can be downloaded in 2*n seconds, the score will
 *     be `0.5`.
 *   - if n seconds of content can be downloaded in n seconds, the score will be
 *     `1`.
 *   - if n seconds of content can be downloaded in n/2 seconds, the score will
 *     be `2`.
 *   - ...
 *
 * The score is mainly here to tell you when your buffer-based guesses are
 * actually higher than the quality you should normally reach.
 *
 * /!\ Please bear in mind that we don't consider the playback rate in those
 * operations.
 * Still, integrating the playback rate a posteriori should not be difficult
 * (e.g. you can just divide the score by that rate).
 *
 * @class RepresentationScoreCalculator
 */

var RepresentationScoreCalculator = /*#__PURE__*/function () {
  function RepresentationScoreCalculator() {
    this._currentRepresentationData = null;
    this._lastRepresentationWithGoodScore = null;
  }
  /**
   * Add new sample data.
   * @param {Representation} representation
   * @param {number} requestDuration - duration taken for doing the request for
   * the whole segment.
   * @param {number} segmentDuration - media duration of the whole segment, in
   * seconds.
   */


  var _proto = RepresentationScoreCalculator.prototype;

  _proto.addSample = function addSample(representation, requestDuration, segmentDuration) {
    var ratio = segmentDuration / requestDuration;

    var oldEwma = this._getEWMA(representation);

    var currentEWMA;

    if (oldEwma != null) {
      currentEWMA = oldEwma;
      oldEwma.addSample(requestDuration, ratio);
    } else {
      currentEWMA = new EWMA(5);
      currentEWMA.addSample(requestDuration, ratio);
      this._currentRepresentationData = {
        representation: representation,
        ewma: currentEWMA
      };
    }

    if (currentEWMA.getEstimate() > 1 && this._lastRepresentationWithGoodScore !== representation) {
      log/* default.debug */.Z.debug("ABR: New last stable representation", representation);
      this._lastRepresentationWithGoodScore = representation;
    }
  }
  /**
   * Get score estimate for the given Representation.
   * undefined if no estimate is available.
   * @param {Representation} representation
   * @returns {number|undefined}
   */
  ;

  _proto.getEstimate = function getEstimate(representation) {
    var ewma = this._getEWMA(representation);

    if (ewma != null) {
      return ewma.getEstimate();
    }
  }
  /**
   * Returns last Representation which had reached a score superior to 1.
   * This Representation is the last known one which could be maintained.
   * Useful to know if a current guess is higher than what you should
   * normally be able to play.
   * `null` if no Representation ever reach that score.
   * @returns {Representation|null}
   */
  ;

  _proto.getLastStableRepresentation = function getLastStableRepresentation() {
    return this._lastRepresentationWithGoodScore;
  }
  /**
   * Returns EWMA for the given Representation.
   * null if no EWMA is currently stored for it.
   * @param {Representation} representation
   * @returns {EWMA|null}
   */
  ;

  _proto._getEWMA = function _getEWMA(representation) {
    if (this._currentRepresentationData != null && this._currentRepresentationData.representation.id === representation.id) {
      return this._currentRepresentationData.ewma;
    }

    return null;
  };

  return RepresentationScoreCalculator;
}();


;// CONCATENATED MODULE: ./src/core/abr/select_optimal_representation.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * From the given array of Representations (sorted by bitrate order ascending),
 * returns the one corresponding to the given optimal, minimum and maximum
 * bitrates.
 * @param {Array.<Representation>} representations - The representations array,
 * sorted in bitrate ascending order.
 * @param {Number} optimalBitrate - The optimal bitrate the Representation
 * should have under the current condition.
 * @param {Number} minBitrate - The minimum bitrate the chosen Representation
 * should have. We will take the Representation with the maximum bitrate if none
 * is found.
 * @param {Number} maxBitrate - The maximum bitrate the chosen Representation
 * should have. We will take the Representation with the minimum bitrate if none
 * is found.
 * @returns {Representation|undefined}
 */

function selectOptimalRepresentation(representations, optimalBitrate, minBitrate, maxBitrate) {
  var wantedBitrate = optimalBitrate <= minBitrate ? minBitrate : optimalBitrate >= maxBitrate ? maxBitrate : optimalBitrate;
  var firstIndexTooHigh = (0,array_find_index/* default */.Z)(representations, function (representation) {
    return representation.bitrate > wantedBitrate;
  });

  if (firstIndexTooHigh === -1) {
    return representations[representations.length - 1];
  } else if (firstIndexTooHigh === 0) {
    return representations[0];
  }

  return representations[firstIndexTooHigh - 1];
}
;// CONCATENATED MODULE: ./src/core/abr/representation_estimator.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */












/**
 * Filter representations given through filters options.
 * @param {Array.<Representation>} representations
 * @param {Object} filters - Filter Object.
 * @returns {Array.<Representation>}
 */

function getFilteredRepresentations(representations, filters) {
  var _representations = representations;

  if (filters.bitrate != null) {
    _representations = filterByBitrate(_representations, filters.bitrate);
  }

  if (filters.width != null) {
    _representations = filterByWidth(_representations, filters.width);
  }

  return _representations;
}
/**
 * Estimate regularly the current network bandwidth and the best Representation
 * that can be played according to the current network and playback conditions.
 *
 * A `RepresentationEstimator` only does estimations for a given type (e.g.
 * "audio", "video" etc.) and Period.
 *
 * If estimates for multiple types and/or Periods are needed, you should
 * create as many `RepresentationEstimator`.
 * @param {Object} args
 * @returns {Observable}
 */


function RepresentationEstimator(_ref) {
  var bandwidthEstimator = _ref.bandwidthEstimator,
      clock$ = _ref.clock$,
      filters$ = _ref.filters$,
      initialBitrate = _ref.initialBitrate,
      lowLatencyMode = _ref.lowLatencyMode,
      manualBitrate$ = _ref.manualBitrate$,
      minAutoBitrate$ = _ref.minAutoBitrate$,
      maxAutoBitrate$ = _ref.maxAutoBitrate$,
      representations = _ref.representations,
      streamEvents$ = _ref.streamEvents$;
  var scoreCalculator = new RepresentationScoreCalculator();
  var networkAnalyzer = new NetworkAnalyzer(initialBitrate == null ? 0 : initialBitrate, lowLatencyMode);
  var requestsStore = new PendingRequestsStore();
  var shouldIgnoreMetrics = generateCachedSegmentDetector();
  /**
   * Callback to call when new metrics are available
   * @param {Object} value
   */

  function onMetric(value) {
    var duration = value.duration,
        size = value.size,
        content = value.content;

    if (shouldIgnoreMetrics(content, duration)) {
      // We already loaded not cached segments.
      // Do not consider cached segments anymore.
      return;
    } // calculate bandwidth


    bandwidthEstimator.addSample(duration, size); // calculate "maintainability score"

    var segment = content.segment;
    var requestDuration = duration / 1000;
    var segmentDuration = segment.duration;
    var representation = content.representation;
    scoreCalculator.addSample(representation, requestDuration, segmentDuration);
  }

  var metrics$ = streamEvents$.pipe((0,filter/* filter */.h)(function (e) {
    return e.type === "metrics";
  }), (0,tap/* tap */.b)(function (_ref2) {
    var value = _ref2.value;
    return onMetric(value);
  }), (0,ignoreElements/* ignoreElements */.l)());
  var requests$ = streamEvents$.pipe((0,tap/* tap */.b)(function (evt) {
    switch (evt.type) {
      case "requestBegin":
        requestsStore.add(evt.value);
        break;

      case "requestEnd":
        requestsStore.remove(evt.value.id);
        break;

      case "progress":
        requestsStore.addProgress(evt.value);
        break;
    }
  }), (0,ignoreElements/* ignoreElements */.l)());
  var currentRepresentation$ = streamEvents$.pipe((0,filter/* filter */.h)(function (e) {
    return e.type === "representationChange";
  }), (0,map/* map */.U)(function (e) {
    return e.value.representation;
  }), (0,startWith/* startWith */.O)(null));
  var estimate$ = (0,defer/* defer */.P)(function () {
    if (representations.length === 0) {
      throw new Error("ABRManager: no representation choice given");
    }

    if (representations.length === 1) {
      return (0,of.of)({
        bitrate: undefined,
        representation: representations[0],
        manual: false,
        urgent: true,
        knownStableBitrate: undefined
      });
    }

    return manualBitrate$.pipe((0,switchMap/* switchMap */.w)(function (manualBitrate) {
      if (manualBitrate >= 0) {
        // -- MANUAL mode --
        var manualRepresentation = selectOptimalRepresentation(representations, manualBitrate, 0, Infinity);
        return (0,of.of)({
          representation: manualRepresentation,
          bitrate: undefined,
          knownStableBitrate: undefined,
          manual: true,
          urgent: true
        });
      } // -- AUTO mode --


      var lastEstimatedBitrate;
      var forceBandwidthMode = true; // Emit each time a buffer-based estimation should be actualized (each
      // time a segment is added).

      var bufferBasedClock$ = streamEvents$.pipe((0,filter/* filter */.h)(function (e) {
        return e.type === "added-segment";
      }), withLatestFrom(clock$), (0,map/* map */.U)(function (_ref3) {
        var evtValue = _ref3[0].value,
            _ref3$ = _ref3[1],
            speed = _ref3$.speed,
            position = _ref3$.position;
        var timeRanges = evtValue.buffered;
        var bufferGap = (0,ranges/* getLeftSizeOfRange */.L7)(timeRanges, position);
        var representation = evtValue.content.representation;
        var currentScore = scoreCalculator.getEstimate(representation);
        var currentBitrate = representation.bitrate;
        return {
          bufferGap: bufferGap,
          currentBitrate: currentBitrate,
          currentScore: currentScore,
          speed: speed
        };
      }));
      var bitrates = representations.map(function (r) {
        return r.bitrate;
      });
      var bufferBasedEstimation$ = BufferBasedChooser(bufferBasedClock$, bitrates).pipe((0,startWith/* startWith */.O)(undefined));
      return (0,combineLatest/* combineLatest */.aj)([clock$, minAutoBitrate$, maxAutoBitrate$, filters$, bufferBasedEstimation$]).pipe(withLatestFrom(currentRepresentation$), (0,map/* map */.U)(function (_ref4) {
        var _ref4$ = _ref4[0],
            clock = _ref4$[0],
            minAutoBitrate = _ref4$[1],
            maxAutoBitrate = _ref4$[2],
            filters = _ref4$[3],
            bufferBasedBitrate = _ref4$[4],
            currentRepresentation = _ref4[1];

        var _representations = getFilteredRepresentations(representations, filters);

        var requests = requestsStore.getRequests();

        var _networkAnalyzer$getB = networkAnalyzer.getBandwidthEstimate(clock, bandwidthEstimator, currentRepresentation, requests, lastEstimatedBitrate),
            bandwidthEstimate = _networkAnalyzer$getB.bandwidthEstimate,
            bitrateChosen = _networkAnalyzer$getB.bitrateChosen;

        lastEstimatedBitrate = bandwidthEstimate;
        var stableRepresentation = scoreCalculator.getLastStableRepresentation();
        var knownStableBitrate = stableRepresentation == null ? undefined : stableRepresentation.bitrate / (clock.speed > 0 ? clock.speed : 1);
        var bufferGap = clock.bufferGap;

        if (!forceBandwidthMode && bufferGap <= 5) {
          forceBandwidthMode = true;
        } else if (forceBandwidthMode && isFinite(bufferGap) && bufferGap > 10) {
          forceBandwidthMode = false;
        }

        var chosenRepFromBandwidth = selectOptimalRepresentation(_representations, bitrateChosen, minAutoBitrate, maxAutoBitrate);

        if (forceBandwidthMode) {
          log/* default.debug */.Z.debug("ABR: Choosing representation with bandwidth estimation.", chosenRepFromBandwidth);
          return {
            bitrate: bandwidthEstimate,
            representation: chosenRepFromBandwidth,
            urgent: networkAnalyzer.isUrgent(chosenRepFromBandwidth.bitrate, currentRepresentation, requests, clock),
            manual: false,
            knownStableBitrate: knownStableBitrate
          };
        }

        if (bufferBasedBitrate == null || chosenRepFromBandwidth.bitrate >= bufferBasedBitrate) {
          log/* default.debug */.Z.debug("ABR: Choosing representation with bandwidth estimation.", chosenRepFromBandwidth);
          return {
            bitrate: bandwidthEstimate,
            representation: chosenRepFromBandwidth,
            urgent: networkAnalyzer.isUrgent(chosenRepFromBandwidth.bitrate, currentRepresentation, requests, clock),
            manual: false,
            knownStableBitrate: knownStableBitrate
          };
        }

        var chosenRepresentation = selectOptimalRepresentation(_representations, bufferBasedBitrate, minAutoBitrate, maxAutoBitrate);

        if (bufferBasedBitrate <= maxAutoBitrate) {
          log/* default.debug */.Z.debug("ABR: Choosing representation with buffer based bitrate ceiling.", chosenRepresentation);
        }

        return {
          bitrate: bandwidthEstimate,
          representation: chosenRepresentation,
          urgent: networkAnalyzer.isUrgent(bufferBasedBitrate, currentRepresentation, requests, clock),
          manual: false,
          knownStableBitrate: knownStableBitrate
        };
      }));
    }));
  });
  return (0,merge/* merge */.T)(metrics$, requests$, estimate$);
}
;// CONCATENATED MODULE: ./src/core/abr/abr_manager.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */






/**
 * Adaptive BitRate Manager.
 *
 * Select the right Representation from the network and buffer infos it
 * receives.
 * @class ABRManager
 */

var ABRManager = /*#__PURE__*/function () {
  /**
   * @param {Object} options
   */
  function ABRManager(options) {
    this._manualBitrates = options.manualBitrates;
    this._minAutoBitrates = options.minAutoBitrates;
    this._maxAutoBitrates = options.maxAutoBitrates;
    this._initialBitrates = options.initialBitrates;
    this._throttlers = options.throttlers;
    this._bandwidthEstimators = {};
    this._lowLatencyMode = options.lowLatencyMode;
  }
  /**
   * Take type and an array of the available representations, spit out an
   * observable emitting the best representation (given the network/buffer
   * state).
   * @param {string} type
   * @param {Array.<Representation>} representations
   * @param {Observable<Object>} clock$
   * @param {Observable<Object>} streamEvents$
   * @returns {Observable}
   */


  var _proto = ABRManager.prototype;

  _proto.get$ = function get$(type, representations, clock$, streamEvents$) {
    var bandwidthEstimator = this._getBandwidthEstimator(type);

    var manualBitrate$ = (0,take_first_set/* default */.Z)(this._manualBitrates[type], (0,of.of)(-1));
    var minAutoBitrate$ = (0,take_first_set/* default */.Z)(this._minAutoBitrates[type], (0,of.of)(0));
    var maxAutoBitrate$ = (0,take_first_set/* default */.Z)(this._maxAutoBitrates[type], (0,of.of)(Infinity));
    var initialBitrate = (0,take_first_set/* default */.Z)(this._initialBitrates[type], 0);
    var filters$ = createFilters(this._throttlers.limitWidth[type], this._throttlers.throttleBitrate[type], this._throttlers.throttle[type]);
    return RepresentationEstimator({
      bandwidthEstimator: bandwidthEstimator,
      streamEvents$: streamEvents$,
      clock$: clock$,
      filters$: filters$,
      initialBitrate: initialBitrate,
      manualBitrate$: manualBitrate$,
      minAutoBitrate$: minAutoBitrate$,
      maxAutoBitrate$: maxAutoBitrate$,
      representations: representations,
      lowLatencyMode: this._lowLatencyMode
    });
  }
  /**
   * @param {string} bufferType
   * @returns {Object}
   */
  ;

  _proto._getBandwidthEstimator = function _getBandwidthEstimator(bufferType) {
    var originalBandwidthEstimator = this._bandwidthEstimators[bufferType];

    if (originalBandwidthEstimator == null) {
      log/* default.debug */.Z.debug("ABR: Creating new BandwidthEstimator for ", bufferType);
      var bandwidthEstimator = new BandwidthEstimator();
      this._bandwidthEstimators[bufferType] = bandwidthEstimator;
      return bandwidthEstimator;
    }

    return originalBandwidthEstimator;
  };

  return ABRManager;
}();


;// CONCATENATED MODULE: ./src/core/abr/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* harmony default export */ const abr = (ABRManager);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/catchError.js
var catchError = __webpack_require__(486);
// EXTERNAL MODULE: ./src/utils/rx-try_catch.ts
var rx_try_catch = __webpack_require__(5561);
// EXTERNAL MODULE: ./src/errors/request_error.ts
var request_error = __webpack_require__(9105);
// EXTERNAL MODULE: ./src/errors/network_error.ts
var network_error = __webpack_require__(9362);
;// CONCATENATED MODULE: ./src/core/fetchers/utils/error_selector.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Generate a new error from the infos given.
 * @param {string} code
 * @param {Error} error
 * @returns {Error}
 */

function errorSelector(error) {
  if (error instanceof request_error/* default */.Z) {
    return new network_error/* default */.Z("PIPELINE_LOAD_ERROR", error);
  }

  return formatError(error, {
    defaultCode: "PIPELINE_LOAD_ERROR",
    defaultReason: "Unknown error when fetching the Manifest"
  });
}
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/timer.js
var timer = __webpack_require__(9604);
;// CONCATENATED MODULE: ./src/compat/is_offline.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Some browsers have a builtin API to know if it's connected at least to a
 * LAN network, at most to the internet.
 *
 * /!\ This feature can be dangerous as you can both have false positives and
 * false negatives.
 *
 * False positives:
 *   - you can still play local contents (on localhost) if isOffline == true
 *   - on some browsers isOffline might be true even if we're connected to a LAN
 *     or a router (it would mean we're just not able to connect to the
 *     Internet). So we can eventually play LAN contents if isOffline == true
 *
 * False negatives:
 *   - in some cases, we even might have isOffline at false when we do not have
 *     any connection:
 *       - in browsers that do not support the feature
 *       - in browsers running in some virtualization softwares where the
 *         network adapters are always connected.
 *
 * Use with these cases in mind.
 * @returns {Boolean}
 */
function isOffline() {
  /* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */
  return navigator.onLine === false;
  /* eslint-enable @typescript-eslint/no-unnecessary-boolean-literal-compare */
}
// EXTERNAL MODULE: ./src/utils/get_fuzzed_delay.ts
var get_fuzzed_delay = __webpack_require__(2572);
;// CONCATENATED MODULE: ./src/core/fetchers/utils/try_urls_with_backoff.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */






/**
 * Called on a loader error.
 * Returns whether the loader request should be retried.
 * @param {Error} error
 * @returns {Boolean} - If true, the request can be retried.
 */

function shouldRetry(error) {
  if (error instanceof request_error/* default */.Z) {
    if (error.type === error_codes/* NetworkErrorTypes.ERROR_HTTP_CODE */.br.ERROR_HTTP_CODE) {
      return error.status >= 500 || error.status === 404 || error.status === 415 || // some CDN seems to use that code when
      // requesting low-latency segments too much
      // in advance
      error.status === 412;
    }

    return error.type === error_codes/* NetworkErrorTypes.TIMEOUT */.br.TIMEOUT || error.type === error_codes/* NetworkErrorTypes.ERROR_EVENT */.br.ERROR_EVENT;
  }

  return (0,is_known_error/* default */.Z)(error) && error.code === "INTEGRITY_ERROR";
}
/**
 * Returns true if we're pretty sure that the current error is due to the
 * user being offline.
 * @param {Error} error
 * @returns {Boolean}
 */


function isOfflineRequestError(error) {
  return error.type === error_codes/* NetworkErrorTypes.ERROR_EVENT */.br.ERROR_EVENT && isOffline();
}

var REQUEST_ERROR_TYPES;

(function (REQUEST_ERROR_TYPES) {
  REQUEST_ERROR_TYPES[REQUEST_ERROR_TYPES["None"] = 0] = "None";
  REQUEST_ERROR_TYPES[REQUEST_ERROR_TYPES["Regular"] = 1] = "Regular";
  REQUEST_ERROR_TYPES[REQUEST_ERROR_TYPES["Offline"] = 2] = "Offline";
})(REQUEST_ERROR_TYPES || (REQUEST_ERROR_TYPES = {}));
/**
 * Guess the type of error obtained.
 * @param {*} error
 * @returns {number}
 */


function getRequestErrorType(error) {
  return error instanceof request_error/* default */.Z && isOfflineRequestError(error) ? REQUEST_ERROR_TYPES.Offline : REQUEST_ERROR_TYPES.Regular;
}
/**
 * Specific algorithm used to perform segment and manifest requests.
 *
 * Here how it works:
 *
 *   1. we give it one or multiple URLs available for the element we want to
 *      request, the request callback and some options
 *
 *   2. it tries to call the request callback with the first URL:
 *        - if it works as expected, it wrap the response in a `response` event.
 *        - if it fails, it emits a `retry` event and try with the next one.
 *
 *   3. When all URLs have been tested (and failed), it decides - according to
 *      the error counters, configuration and errors received - if it can retry
 *      at least one of them, in the same order:
 *        - If it can, it increments the corresponding error counter, wait a
 *          delay (based on an exponential backoff) and restart the same logic
 *          for all retry-able URL.
 *        - If it can't it just throws the error.
 *
 * Note that there are in fact two separate counters:
 *   - one for "offline" errors
 *   - one for other xhr errors
 * Both counters are resetted if the error type changes from an error to the
 * next.
 * @param {Array.<string} obs$
 * @param {Function} request$
 * @param {Object} options - Configuration options.
 * @returns {Observable}
 */


function tryURLsWithBackoff(urls, request$, options) {
  var baseDelay = options.baseDelay,
      maxDelay = options.maxDelay,
      maxRetryRegular = options.maxRetryRegular,
      maxRetryOffline = options.maxRetryOffline;
  var retryCount = 0;
  var lastError = REQUEST_ERROR_TYPES.None;
  var urlsToTry = urls.slice();

  if (urlsToTry.length === 0) {
    log/* default.warn */.Z.warn("Fetchers: no URL given to `tryURLsWithBackoff`.");
    return empty/* EMPTY */.E;
  }

  return tryURLsRecursively(urlsToTry[0], 0);
  /**
   * Try to do the request of a given `url` which corresponds to the `index`
   * argument in the `urlsToTry` Array.
   *
   * If it fails try the next one.
   *
   * If all URLs fail, start a timer and retry the first element in that array
   * by following the configuration.
   *
   * @param {string|null} url
   * @param {number} index
   * @returns {Observable}
   */

  function tryURLsRecursively(url, index) {
    return request$(url).pipe((0,map/* map */.U)(function (res) {
      return {
        type: "response",
        value: res
      };
    }), (0,catchError/* catchError */.K)(function (error) {
      if (!shouldRetry(error)) {
        // ban this URL
        if (urlsToTry.length <= 1) {
          // This was the last one, throw
          throw error;
        } // else, remove that element from the array and go the next URL


        urlsToTry.splice(index, 1);
        var newIndex = index >= urlsToTry.length - 1 ? 0 : index;
        return tryURLsRecursively(urlsToTry[newIndex], newIndex).pipe((0,startWith/* startWith */.O)({
          type: "retry",
          value: error
        }));
      }

      var currentError = getRequestErrorType(error);
      var maxRetry = currentError === REQUEST_ERROR_TYPES.Offline ? maxRetryOffline : maxRetryRegular;

      if (currentError !== lastError) {
        retryCount = 0;
        lastError = currentError;
      }

      if (index < urlsToTry.length - 1) {
        // there is still URLs to test
        var _newIndex = index + 1;

        return tryURLsRecursively(urlsToTry[_newIndex], _newIndex).pipe((0,startWith/* startWith */.O)({
          type: "retry",
          value: error
        }));
      } // Here, we were using the last element of the `urlsToTry` array.
      // Increment counter and restart with the first URL


      retryCount++;

      if (retryCount > maxRetry) {
        throw error;
      }

      var delay = Math.min(baseDelay * Math.pow(2, retryCount - 1), maxDelay);
      var fuzzedDelay = (0,get_fuzzed_delay/* default */.Z)(delay);
      var nextURL = urlsToTry[0];
      return (0,timer/* timer */.H)(fuzzedDelay).pipe((0,mergeMap/* mergeMap */.zg)(function () {
        return tryURLsRecursively(nextURL, 0);
      }), (0,startWith/* startWith */.O)({
        type: "retry",
        value: error
      }));
    }));
  }
}
/**
 * Lightweight version of the request algorithm, this time with only a simple
 * Observable given.
 * @param {Function} request$
 * @param {Object} options
 * @returns {Observable}
 */

function tryRequestObservableWithBackoff(request$, options) {
  // same than for a single unknown URL
  return tryURLsWithBackoff([null], function () {
    return request$;
  }, options);
}
;// CONCATENATED MODULE: ./src/core/fetchers/utils/create_request_scheduler.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





function createRequestScheduler(backoffOptions, warning$) {
  /**
   * Allow the parser to schedule a new request.
   * @param {Function} request - Function performing the request.
   * @returns {Function}
   */
  return function scheduleRequest(request) {
    return tryRequestObservableWithBackoff((0,rx_try_catch/* default */.Z)(request, undefined), backoffOptions).pipe((0,filter_map/* default */.Z)(function (evt) {
      if (evt.type === "retry") {
        warning$.next(errorSelector(evt.value));
        return null;
      }

      return evt.value;
    }, null), (0,catchError/* catchError */.K)(function (error) {
      throw errorSelector(error);
    }));
  };
}
;// CONCATENATED MODULE: ./src/core/fetchers/manifest/get_manifest_backoff_options.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var DEFAULT_MAX_MANIFEST_REQUEST_RETRY = config/* default.DEFAULT_MAX_MANIFEST_REQUEST_RETRY */.Z.DEFAULT_MAX_MANIFEST_REQUEST_RETRY,
    DEFAULT_MAX_REQUESTS_RETRY_ON_OFFLINE = config/* default.DEFAULT_MAX_REQUESTS_RETRY_ON_OFFLINE */.Z.DEFAULT_MAX_REQUESTS_RETRY_ON_OFFLINE,
    INITIAL_BACKOFF_DELAY_BASE = config/* default.INITIAL_BACKOFF_DELAY_BASE */.Z.INITIAL_BACKOFF_DELAY_BASE,
    MAX_BACKOFF_DELAY_BASE = config/* default.MAX_BACKOFF_DELAY_BASE */.Z.MAX_BACKOFF_DELAY_BASE;
/**
 * Parse config to replace missing manifest backoff options.
 * @param {Object} backoffOptions
 * @returns {Object}
 */

function getManifestBackoffOptions(_ref) {
  var maxRetryRegular = _ref.maxRetryRegular,
      maxRetryOffline = _ref.maxRetryOffline,
      lowLatencyMode = _ref.lowLatencyMode;
  var baseDelay = lowLatencyMode ? INITIAL_BACKOFF_DELAY_BASE.LOW_LATENCY : INITIAL_BACKOFF_DELAY_BASE.REGULAR;
  var maxDelay = lowLatencyMode ? MAX_BACKOFF_DELAY_BASE.LOW_LATENCY : MAX_BACKOFF_DELAY_BASE.REGULAR;
  return {
    baseDelay: baseDelay,
    maxDelay: maxDelay,
    maxRetryRegular: maxRetryRegular !== undefined ? maxRetryRegular : DEFAULT_MAX_MANIFEST_REQUEST_RETRY,
    maxRetryOffline: maxRetryOffline !== undefined ? maxRetryOffline : DEFAULT_MAX_REQUESTS_RETRY_ON_OFFLINE
  };
}
;// CONCATENATED MODULE: ./src/core/fetchers/manifest/manifest_fetcher.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */








/**
 * Class allowing to facilitate the task of loading and parsing a Manifest.
 * @class ManifestFetcher
 * @example
 * ```js
 * const manifestFetcher = new ManifestFetcher(manifestUrl, pipelines, options);
 * manifestFetcher.fetch().pipe(
 *   // Filter only responses (might also receive warning events)
 *   filter((evt) => evt.type === "response");
 *   // Parse the Manifest
 *   mergeMap(res => res.parse({ externalClockOffset }))
 *   // (again)
 *   filter((evt) => evt.type === "parsed");
 * ).subscribe(({ value }) => {
 *   console.log("Manifest:", value.manifest);
 * });
 * ```
 */

var ManifestFetcher = /*#__PURE__*/function () {
  /**
   * @param {string | undefined} url
   * @param {Object} pipelines
   * @param {Object} backoffOptions
   */
  function ManifestFetcher(url, pipelines, backoffOptions) {
    this._manifestUrl = url;
    this._pipelines = pipelines.manifest;
    this._backoffOptions = getManifestBackoffOptions(backoffOptions);
  }
  /**
   * (re-)Load the Manifest without yet parsing it.
   *
   * You can set an `url` on which that Manifest will be requested.
   * If not set, the regular Manifest url - defined on the
   * `ManifestFetcher` instanciation - will be used instead.
   * @param {string} [url]
   * @returns {Observable}
   */


  var _proto = ManifestFetcher.prototype;

  _proto.fetch = function fetch(url) {
    var _this = this;

    var _a;

    var requestUrl = url !== null && url !== void 0 ? url : this._manifestUrl; // TODO Remove the resolver completely in the next major version

    var resolver = (_a = this._pipelines.resolver) !== null && _a !== void 0 ? _a : of.of;
    var loader = this._pipelines.loader;
    return (0,rx_try_catch/* default */.Z)(resolver, {
      url: requestUrl
    }).pipe((0,catchError/* catchError */.K)(function (error) {
      throw errorSelector(error);
    }), (0,mergeMap/* mergeMap */.zg)(function (loaderArgument) {
      var loader$ = (0,rx_try_catch/* default */.Z)(loader, loaderArgument);
      return tryRequestObservableWithBackoff(loader$, _this._backoffOptions).pipe((0,catchError/* catchError */.K)(function (error) {
        throw errorSelector(error);
      }), (0,map/* map */.U)(function (evt) {
        return evt.type === "retry" ? {
          type: "warning",
          value: errorSelector(evt.value)
        } : {
          type: "response",
          parse: function parse(parserOptions) {
            return _this._parseLoadedManifest(evt.value.value, parserOptions);
          }
        };
      }));
    }));
  }
  /**
   * Parse an already loaded Manifest.
   *
   * This method should be reserved for Manifests for which no request has been
   * done.
   * In other cases, it's preferable to go through the `fetch` method, so
   * information on the request can be used by the parsing process.
   * @param {*} manifest
   * @param {Object} parserOptions
   * @returns {Observable}
   */
  ;

  _proto.parse = function parse(manifest, parserOptions) {
    return this._parseLoadedManifest({
      responseData: manifest,
      size: undefined,
      duration: undefined
    }, parserOptions);
  }
  /**
   * Parse a Manifest.
   *
   * @param {Object} loaded - Information about the loaded Manifest as well as
   * about the corresponding request.
   * @param {Object} parserOptions - Options used when parsing the Manifest.
   * @returns {Observable}
   */
  ;

  _proto._parseLoadedManifest = function _parseLoadedManifest(loaded, parserOptions) {
    var sendingTime = loaded.sendingTime,
        receivedTime = loaded.receivedTime;
    var parsingTimeStart = performance.now();
    var schedulerWarnings$ = new Subject/* Subject */.xQ();
    var scheduleRequest = createRequestScheduler(this._backoffOptions, schedulerWarnings$);
    return (0,merge/* merge */.T)(schedulerWarnings$.pipe((0,map/* map */.U)(function (err) {
      return {
        type: "warning",
        value: err
      };
    })), this._pipelines.parser({
      response: loaded,
      url: this._manifestUrl,
      externalClockOffset: parserOptions.externalClockOffset,
      previousManifest: parserOptions.previousManifest,
      scheduleRequest: scheduleRequest,
      unsafeMode: parserOptions.unsafeMode
    }).pipe((0,catchError/* catchError */.K)(function (error) {
      throw formatError(error, {
        defaultCode: "PIPELINE_PARSE_ERROR",
        defaultReason: "Unknown error when parsing the Manifest"
      });
    }), (0,map/* map */.U)(function (parsingEvt) {
      if (parsingEvt.type === "warning") {
        var formatted = formatError(parsingEvt.value, {
          defaultCode: "PIPELINE_PARSE_ERROR",
          defaultReason: "Unknown error when parsing the Manifest"
        });
        return {
          type: "warning",
          value: formatted
        };
      } // 2 - send response


      var parsingTime = performance.now() - parsingTimeStart;
      return {
        type: "parsed",
        manifest: parsingEvt.value.manifest,
        sendingTime: sendingTime,
        receivedTime: receivedTime,
        parsingTime: parsingTime
      };
    }), finalize(function () {
      schedulerWarnings$.complete();
    })));
  };

  return ManifestFetcher;
}();


;// CONCATENATED MODULE: ./src/core/fetchers/manifest/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* harmony default export */ const fetchers_manifest = (ManifestFetcher);
;// CONCATENATED MODULE: ./src/core/fetchers/segment/get_segment_backoff_options.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var DEFAULT_MAX_REQUESTS_RETRY_ON_ERROR = config/* default.DEFAULT_MAX_REQUESTS_RETRY_ON_ERROR */.Z.DEFAULT_MAX_REQUESTS_RETRY_ON_ERROR,
    get_segment_backoff_options_DEFAULT_MAX_REQUESTS_RETRY_ON_OFFLINE = config/* default.DEFAULT_MAX_REQUESTS_RETRY_ON_OFFLINE */.Z.DEFAULT_MAX_REQUESTS_RETRY_ON_OFFLINE,
    get_segment_backoff_options_INITIAL_BACKOFF_DELAY_BASE = config/* default.INITIAL_BACKOFF_DELAY_BASE */.Z.INITIAL_BACKOFF_DELAY_BASE,
    get_segment_backoff_options_MAX_BACKOFF_DELAY_BASE = config/* default.MAX_BACKOFF_DELAY_BASE */.Z.MAX_BACKOFF_DELAY_BASE;
/**
 * @param {string} bufferType
 * @param {Object}
 * @returns {Object}
 */

function getSegmentBackoffOptions(bufferType, _ref) {
  var maxRetryRegular = _ref.maxRetryRegular,
      maxRetryOffline = _ref.maxRetryOffline,
      lowLatencyMode = _ref.lowLatencyMode;
  return {
    maxRetryRegular: bufferType === "image" ? 0 : maxRetryRegular !== null && maxRetryRegular !== void 0 ? maxRetryRegular : DEFAULT_MAX_REQUESTS_RETRY_ON_ERROR,
    maxRetryOffline: maxRetryOffline !== null && maxRetryOffline !== void 0 ? maxRetryOffline : get_segment_backoff_options_DEFAULT_MAX_REQUESTS_RETRY_ON_OFFLINE,
    baseDelay: lowLatencyMode ? get_segment_backoff_options_INITIAL_BACKOFF_DELAY_BASE.LOW_LATENCY : get_segment_backoff_options_INITIAL_BACKOFF_DELAY_BASE.REGULAR,
    maxDelay: lowLatencyMode ? get_segment_backoff_options_MAX_BACKOFF_DELAY_BASE.LOW_LATENCY : get_segment_backoff_options_MAX_BACKOFF_DELAY_BASE.REGULAR
  };
}
;// CONCATENATED MODULE: ./src/core/fetchers/segment/prioritized_segment_fetcher.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * This function basically put in relation:
 *   - a SegmentFetcher, which will be used to perform the segment request
 *   - a prioritizer, which will handle the priority of a segment request
 *
 * and returns functions to fetch segments with a given priority.
 * @param {Object} prioritizer
 * @param {Object} fetcher
 * @returns {Object}
 */

function applyPrioritizerToSegmentFetcher(prioritizer, fetcher) {
  /**
   * The Observables returned by `createRequest` are not exactly the same than
   * the one created by the `ObservablePrioritizer`. Because we still have to
   * keep a handle on that value.
   */
  var taskHandlers = new WeakMap();
  return {
    /**
     * Create a Segment request with a given priority.
     * @param {Object} content - content to request
     * @param {Number} priority - priority at which the content should be requested.
     * Lower number == higher priority.
     * @returns {Observable}
     */
    createRequest: function createRequest(content, priority) {
      if (priority === void 0) {
        priority = 0;
      }

      var task = prioritizer.create(fetcher(content), priority);
      var flattenTask = task.pipe((0,map/* map */.U)(function (evt) {
        return evt.type === "data" ? evt.value : evt;
      }));
      taskHandlers.set(flattenTask, task);
      return flattenTask;
    },

    /**
     * Update the priority of a pending request, created through
     * `createRequest`.
     * @param {Observable} observable - The Observable returned by `createRequest`.
     * @param {Number} priority - The new priority value.
     */
    updatePriority: function updatePriority(observable, priority) {
      var correspondingTask = taskHandlers.get(observable);

      if (correspondingTask === undefined) {
        log/* default.warn */.Z.warn("Fetchers: Cannot update the priority of a request: task not found.");
        return;
      }

      prioritizer.updatePriority(correspondingTask, priority);
    }
  };
}
;// CONCATENATED MODULE: ./src/core/fetchers/segment/prioritizer.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Create Observables which can be priorized between one another.
 *
 * With this class, you can link an Observables to a priority number.
 * The lower this number is, the more priority the resulting Observable will
 * have.
 *
 * Such returned Observables - called "tasks" - will then basically wait for
 * pending task with more priority (i.e. a lower priority number) to finish
 * before "starting".
 *
 * This only applies for non-pending tasks. For pending tasks, those are usually
 * not interrupted except in the following case:
 *
 * When a task with a "high priority" (which is a configurable priority
 * value) is created, pending tasks with a "low priority" (also configurable)
 * will be interrupted. Those tasks will be restarted when all tasks with a
 * higher priority are finished.
 *
 * You can also update the priority of an already-created task.
 *
 * ```js
 * const observable1 = Observable.timer(100).pipe(mapTo(1));
 * const observable2 = Observable.timer(100).pipe(mapTo(2));
 * const observable3 = Observable.timer(100).pipe(mapTo(3));
 * const observable4 = Observable.timer(100).pipe(mapTo(4));
 * const observable5 = Observable.timer(100).pipe(mapTo(5));
 *
 * // Instanciate ObservablePrioritizer.
 * // Also provide a `high` priority step - the maximum priority number a "high
 * // priority task" has and a `low` priority step - the minimum priority number
 * // a "low priority task" has.
 * const prioritizer = new ObservablePrioritizer({
 *   prioritySteps: { high: 0, low: 20 }
 * });
 *
 * const pObservable1 = prioritizer.create(observable1, 4);
 * const pObservable2 = prioritizer.create(observable2, 2);
 * const pObservable3 = prioritizer.create(observable3, 1);
 * const pObservable4 = prioritizer.create(observable4, 3);
 * const pObservable5 = prioritizer.create(observable5, 2);
 *
 * // start every Observables at the same time
 * observableMerge(
 *   pObservable1,
 *   pObservable2,
 *   pObservable3,
 *   pObservable4,
 *   pObservable5
 * ).subscribe((evt) => {
 *   if (evt.type === "data") {
 *     console.log(i);
 *
 *     // To spice things up, update pObservable1 priority to go before
 *     // pObservable4
 *     if (i === 5) { // if pObservable5 is currently emitting
 *       prioritizer.updatePriority(pObservable1, 1);
 *     }
 *   }
 * });
 *
 * // Result:
 * // 3
 * // 2
 * // 5
 * // 1
 * // 4
 *
 * // Note: here "1" goes before "4" only because the former's priority has been
 * // updated before the latter was started.
 * // It would be the other way around if not.
 * ```
 *
 * @class ObservablePrioritizer
 */

var ObservablePrioritizer = /*#__PURE__*/function () {
  /**
   * @param {Options} prioritizerOptions
   */
  function ObservablePrioritizer(_ref) {
    var prioritySteps = _ref.prioritySteps;
    this._minPendingPriority = null;
    this._waitingQueue = [];
    this._pendingTasks = [];
    this._prioritySteps = prioritySteps;

    if (this._prioritySteps.high >= this._prioritySteps.low) {
      throw new Error("FP Error: the max high level priority should be given a lower" + "priority number than the min low priority.");
    }
  }
  /**
   * Create a priorized Observable from a base Observable.
   *
   * When subscribed to, this Observable will have its priority compared to
   * all the already-running Observables created from this class.
   *
   * Only if this number is inferior or equal to the priority of the
   * currently-running Observables will it be immediately started.
   * In the opposite case, we will wait for higher-priority Observables to
   * finish before starting it.
   *
   * Note that while this Observable is waiting for its turn, it is possible
   * to update its property through the updatePriority method, by providing
   * the Observable returned by this function and its new priority number.
   *
   * @param {Observable} obs
   * @param {number} priority
   * @returns {Observable}
   */


  var _proto = ObservablePrioritizer.prototype;

  _proto.create = function create(obs, priority) {
    var _this = this;

    var pObs$ = new Observable/* Observable */.y(function (subscriber) {
      var isStillSubscribed = true; // eslint-disable-next-line prefer-const

      var newTask;
      /**
       * Function allowing to start / interrupt the underlying Observable.
       * @param {Boolean} shouldRun - If `true`, the observable can run. If
       * `false` it means that it just needs to be interrupted if already
       * starte.
       */

      var trigger = function trigger(shouldRun) {
        if (newTask.subscription !== null) {
          newTask.subscription.unsubscribe();
          newTask.subscription = null;

          if (isStillSubscribed) {
            subscriber.next({
              type: "interrupted"
            });
          }
        }

        if (!shouldRun) {
          return;
        }

        _this._minPendingPriority = _this._minPendingPriority === null ? newTask.priority : Math.min(_this._minPendingPriority, newTask.priority);

        _this._pendingTasks.push(newTask);

        newTask.subscription = obs.subscribe(function (evt) {
          return subscriber.next({
            type: "data",
            value: evt
          });
        }, function (error) {
          subscriber.error(error);
          newTask.subscription = null;
          newTask.finished = true;

          _this._onTaskEnd(newTask);
        }, function () {
          subscriber.next({
            type: "ended"
          });

          if (isStillSubscribed) {
            subscriber.complete();
          }

          newTask.subscription = null;
          newTask.finished = true;

          _this._onTaskEnd(newTask);
        });
      };

      newTask = {
        observable: pObs$,
        priority: priority,
        trigger: trigger,
        subscription: null,
        finished: false
      };

      if (!_this._canBeStartedNow(newTask)) {
        _this._waitingQueue.push(newTask);
      } else {
        newTask.trigger(true);

        if (_this._isRunningHighPriorityTasks()) {
          // Note: we want to begin interrupting low-priority tasks just
          // after starting the current one because the interrupting
          // logic can call external code.
          // This would mean re-entrancy, itself meaning that some weird
          // half-state could be reached unless we're very careful.
          // To be sure no harm is done, we put that code at the last
          // possible position (the previous Observable sould be
          // performing all its initialization synchronously).
          _this._interruptCancellableTasks();
        }
      }
      /** Callback called when this Observable is unsubscribed to. */


      return function () {
        isStillSubscribed = false;

        if (newTask.subscription !== null) {
          newTask.subscription.unsubscribe();
          newTask.subscription = null;
        }

        if (newTask.finished) {
          // Task already finished, we're good
          return;
        } // remove it from waiting queue if in it


        var waitingQueueIndex = (0,array_find_index/* default */.Z)(_this._waitingQueue, function (elt) {
          return elt.observable === pObs$;
        });

        if (waitingQueueIndex >= 0) {
          // If it was still waiting for its turn
          _this._waitingQueue.splice(waitingQueueIndex, 1);
        } else {
          // remove it from pending queue if in it
          var pendingTasksIndex = (0,array_find_index/* default */.Z)(_this._pendingTasks, function (elt) {
            return elt.observable === pObs$;
          });

          if (pendingTasksIndex < 0) {
            log/* default.warn */.Z.warn("FP: unsubscribing non-existent task");
            return;
          }

          var pendingTask = _this._pendingTasks.splice(pendingTasksIndex, 1)[0];

          if (_this._pendingTasks.length === 0) {
            _this._minPendingPriority = null;

            _this._loopThroughWaitingQueue();
          } else if (_this._minPendingPriority === pendingTask.priority) {
            _this._minPendingPriority = Math.min.apply(Math, _this._pendingTasks.map(function (t) {
              return t.priority;
            }));

            _this._loopThroughWaitingQueue();
          }
        }
      };
    });
    return pObs$;
  }
  /**
   * Update the priority of an Observable created through the `create` method.
   * @param {Observable} obs
   * @param {number} priority
   */
  ;

  _proto.updatePriority = function updatePriority(obs, priority) {
    var waitingQueueIndex = (0,array_find_index/* default */.Z)(this._waitingQueue, function (elt) {
      return elt.observable === obs;
    });

    if (waitingQueueIndex >= 0) {
      // If it was still waiting for its turn
      var waitingQueueElt = this._waitingQueue[waitingQueueIndex];

      if (waitingQueueElt.priority === priority) {
        return;
      }

      waitingQueueElt.priority = priority;

      if (!this._canBeStartedNow(waitingQueueElt)) {
        return;
      }

      this._startWaitingQueueTask(waitingQueueIndex);

      if (this._isRunningHighPriorityTasks()) {
        // Re-check to cancel every "cancellable" pending task
        //
        // Note: We start the task before interrupting cancellable tasks on
        // purpose.
        // Because both `_startWaitingQueueTask` and
        // `_interruptCancellableTasks` can emit events and thus call external
        // code, we could retrieve ourselves in a very weird state at this point
        // (for example, the different Observable priorities could all be
        // shuffled up, new Observables could have been started in the
        // meantime, etc.).
        //
        // By starting the task first, we ensure that this is manageable:
        // `_minPendingPriority` has already been updated to the right value at
        // the time we reached external code, the priority of the current
        // Observable has just been updated, and `_interruptCancellableTasks`
        // will ensure that we're basing ourselves on the last `priority` value
        // each time.
        // Doing it in the reverse order is an order of magnitude more difficult
        // to write and to reason about.
        this._interruptCancellableTasks();
      }

      return;
    }

    var pendingTasksIndex = (0,array_find_index/* default */.Z)(this._pendingTasks, function (elt) {
      return elt.observable === obs;
    });

    if (pendingTasksIndex < 0) {
      log/* default.warn */.Z.warn("FP: request to update the priority of a non-existent task");
      return;
    }

    var task = this._pendingTasks[pendingTasksIndex];

    if (task.priority === priority) {
      return;
    }

    var prevPriority = task.priority;
    task.priority = priority;

    if (this._minPendingPriority === null || priority < this._minPendingPriority) {
      this._minPendingPriority = priority;
    } else if (this._minPendingPriority === prevPriority) {
      // was highest priority
      if (this._pendingTasks.length === 1) {
        this._minPendingPriority = priority;
      } else {
        this._minPendingPriority = Math.min.apply(Math, this._pendingTasks.map(function (t) {
          return t.priority;
        }));
      }

      this._loopThroughWaitingQueue();
    } else {
      // We updated a task which already had a priority value higher than the
      // minimum to a value still superior to the minimum. Nothing can happen.
      return;
    }

    if (this._isRunningHighPriorityTasks()) {
      // Always interrupt cancellable tasks after all other side-effects, to
      // avoid re-entrancy issues
      this._interruptCancellableTasks();
    }
  }
  /**
   * Browse the current waiting queue and start all task in it that needs to be
   * started: start the ones with the lowest priority value below
   * `_minPendingPriority`.
   *
   * Private properties, such as `_minPendingPriority` are updated accordingly
   * while this method is called.
   */
  ;

  _proto._loopThroughWaitingQueue = function _loopThroughWaitingQueue() {
    var minWaitingPriority = this._waitingQueue.reduce(function (acc, elt) {
      return acc === null || acc > elt.priority ? elt.priority : acc;
    }, null);

    if (minWaitingPriority === null || this._minPendingPriority !== null && this._minPendingPriority < minWaitingPriority) {
      return;
    }

    for (var i = 0; i < this._waitingQueue.length; i++) {
      var priorityToCheck = this._minPendingPriority === null ? minWaitingPriority : Math.min(this._minPendingPriority, minWaitingPriority);
      var elt = this._waitingQueue[i];

      if (elt.priority <= priorityToCheck) {
        this._startWaitingQueueTask(i);

        i--; // previous operation should have removed that element from the
        // the waiting queue
      }
    }
  }
  /**
   * Interrupt and move back to the waiting queue all pending tasks that are
   * low priority (having a higher priority number than
   * `this._prioritySteps.low`).
   */
  ;

  _proto._interruptCancellableTasks = function _interruptCancellableTasks() {
    for (var i = 0; i < this._pendingTasks.length; i++) {
      var pendingObj = this._pendingTasks[i];

      if (pendingObj.priority >= this._prioritySteps.low) {
        this._interruptPendingTask(pendingObj); // The previous call could have a lot of potential side-effects.
        // It is safer to re-start the function to not miss any pending
        // task that needs to be cancelled.


        return this._interruptCancellableTasks();
      }
    }
  }
  /**
   * Start task which is at the given index in the waiting queue.
   * The task will be removed from the waiting queue in the process.
   * @param {number} index
   */
  ;

  _proto._startWaitingQueueTask = function _startWaitingQueueTask(index) {
    var task = this._waitingQueue.splice(index, 1)[0];

    task.trigger(true);
  }
  /**
   * Move back pending task to the waiting queue and interrupt it.
   * @param {object} task
   */
  ;

  _proto._interruptPendingTask = function _interruptPendingTask(task) {
    var pendingTasksIndex = (0,array_find_index/* default */.Z)(this._pendingTasks, function (elt) {
      return elt.observable === task.observable;
    });

    if (pendingTasksIndex < 0) {
      log/* default.warn */.Z.warn("FP: Interrupting a non-existent pending task. Aborting...");
      return;
    } // Stop task and put it back in the waiting queue


    this._pendingTasks.splice(pendingTasksIndex, 1);

    this._waitingQueue.push(task);

    if (this._pendingTasks.length === 0) {
      this._minPendingPriority = null;
    } else if (this._minPendingPriority === task.priority) {
      this._minPendingPriority = Math.min.apply(Math, this._pendingTasks.map(function (t) {
        return t.priority;
      }));
    }

    task.trigger(false); // Interrupt at last step because it calls external code
  }
  /**
   * Logic ran when a task has ended (either errored or completed).
   * @param {Object} task
   */
  ;

  _proto._onTaskEnd = function _onTaskEnd(task) {
    var pendingTasksIndex = (0,array_find_index/* default */.Z)(this._pendingTasks, function (elt) {
      return elt.observable === task.observable;
    });

    if (pendingTasksIndex < 0) {
      return; // Happen for example when the task has been interrupted
    }

    this._pendingTasks.splice(pendingTasksIndex, 1);

    if (this._pendingTasks.length > 0) {
      if (this._minPendingPriority === task.priority) {
        this._minPendingPriority = Math.min.apply(Math, this._pendingTasks.map(function (t) {
          return t.priority;
        }));
      }

      return; // still waiting for Observables to finish
    }

    this._minPendingPriority = null;

    this._loopThroughWaitingQueue();
  }
  /**
   * Return `true` if the given task can be started immediately based on its
   * priority.
   * @param {Object} task
   * @returns {boolean}
   */
  ;

  _proto._canBeStartedNow = function _canBeStartedNow(task) {
    return this._minPendingPriority === null || task.priority <= this._minPendingPriority;
  }
  /**
   * Returns `true` if any running task is considered "high priority".
   * returns `false` otherwise.
   * @param {Object} task
   * @returns {boolean}
   */
  ;

  _proto._isRunningHighPriorityTasks = function _isRunningHighPriorityTasks() {
    return this._minPendingPriority !== null && this._minPendingPriority <= this._prioritySteps.high;
  };

  return ObservablePrioritizer;
}();


// EXTERNAL MODULE: ./src/utils/array_includes.ts
var array_includes = __webpack_require__(7714);
// EXTERNAL MODULE: ./src/utils/assert_unreachable.ts
var assert_unreachable = __webpack_require__(8418);
// EXTERNAL MODULE: ./src/utils/id_generator.ts
var id_generator = __webpack_require__(908);
;// CONCATENATED MODULE: ./src/utils/initialization_segment_cache.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Caching object used to cache initialization segments.
 * This allow to have a faster representation switch and faster seeking.
 * @class InitializationSegmentCache
 */
var InitializationSegmentCache = /*#__PURE__*/function () {
  function InitializationSegmentCache() {
    this._cache = new WeakMap();
  }
  /**
   * @param {Object} obj
   * @param {*} response
   */


  var _proto = InitializationSegmentCache.prototype;

  _proto.add = function add(_ref, response) {
    var representation = _ref.representation,
        segment = _ref.segment;

    if (segment.isInit) {
      this._cache.set(representation, response);
    }
  }
  /**
   * @param {Object} obj
   * @returns {*} response
   */
  ;

  _proto.get = function get(_ref2) {
    var representation = _ref2.representation,
        segment = _ref2.segment;

    if (segment.isInit) {
      var value = this._cache.get(representation);

      if (value !== undefined) {
        return value;
      }
    }

    return null;
  };

  return InitializationSegmentCache;
}();

/* harmony default export */ const initialization_segment_cache = (InitializationSegmentCache);
// EXTERNAL MODULE: ./src/utils/cast_to_observable.ts
var cast_to_observable = __webpack_require__(8117);
;// CONCATENATED MODULE: ./src/core/fetchers/segment/create_segment_loader.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */








/**
 * Returns a function allowing to load any wanted segment.
 *
 * The function returned takes in argument information about the wanted segment
 * and returns an Observable which will emit various events related to the
 * segment request (see ISegmentLoaderEvent).
 *
 * This observable will throw if, following the options given, the request and
 * possible retry all failed.
 *
 * This observable will complete after emitting all the segment's data.
 *
 * Type parameters:
 *   - T: type of the data emitted
 *
 * @param {Function} loader
 * @param {Object | undefined} cache
 * @param {Object} options
 * @returns {Function}
 */

function createSegmentLoader(loader, cache, backoffOptions) {
  /**
   * Try to retrieve the segment from the cache and if not found call the
   * pipeline's loader (with possible retries) to load it.
   * @param {Object} loaderArgument - Context for the wanted segment.
   * @returns {Observable}
   */
  function loadData(wantedContent) {
    /**
     * Call the Pipeline's loader with an exponential Backoff.
     * @returns {Observable}
     */
    function startLoaderWithBackoff() {
      var _a;

      var request$ = function request$(url) {
        var loaderArgument = (0,object_assign/* default */.Z)({
          url: url
        }, wantedContent);
        return (0,concat/* concat */.z)((0,of.of)({
          type: "request",
          value: loaderArgument
        }), (0,rx_try_catch/* default */.Z)(loader, loaderArgument));
      };

      return tryURLsWithBackoff((_a = wantedContent.segment.mediaURLs) !== null && _a !== void 0 ? _a : [null], request$, backoffOptions).pipe((0,catchError/* catchError */.K)(function (error) {
        throw errorSelector(error);
      }), (0,map/* map */.U)(function (evt) {
        if (evt.type === "retry") {
          return {
            type: "warning",
            value: errorSelector(evt.value)
          };
        } else if (evt.value.type === "request") {
          return evt.value;
        }

        var response = evt.value;

        if (response.type === "data-loaded" && cache != null) {
          cache.add(wantedContent, response.value);
        }

        return evt.value;
      }));
    }

    var dataFromCache = cache != null ? cache.get(wantedContent) : null;

    if (dataFromCache != null) {
      return (0,cast_to_observable/* default */.Z)(dataFromCache).pipe((0,map/* map */.U)(function (response) {
        return {
          type: "cache",
          value: response
        };
      }), (0,catchError/* catchError */.K)(startLoaderWithBackoff));
    }

    return startLoaderWithBackoff();
  }
  /**
   * Load the corresponding segment.
   * @param {Object} content
   * @returns {Observable}
   */


  return function loadSegment(content) {
    return loadData(content).pipe((0,mergeMap/* mergeMap */.zg)(function (arg) {
      var metrics$;

      if ((arg.type === "data-chunk-complete" || arg.type === "data-loaded") && arg.value.size !== undefined && arg.value.duration !== undefined) {
        metrics$ = (0,of.of)({
          type: "metrics",
          value: {
            size: arg.value.size,
            duration: arg.value.duration,
            content: content
          }
        });
      } else {
        metrics$ = empty/* EMPTY */.E;
      }

      switch (arg.type) {
        case "warning":
        case "request":
        case "progress":
          return (0,of.of)(arg);

        case "cache":
        case "data-created":
        case "data-loaded":
          return (0,concat/* concat */.z)((0,of.of)({
            type: "data",
            value: arg.value
          }), metrics$);

        case "data-chunk":
          return (0,of.of)({
            type: "chunk",
            value: arg.value
          });

        case "data-chunk-complete":
          return (0,concat/* concat */.z)((0,of.of)({
            type: "chunk-complete",
            value: null
          }), metrics$);

        default:
          (0,assert_unreachable/* default */.Z)(arg);
      }
    }));
  };
}
;// CONCATENATED MODULE: ./src/core/fetchers/segment/segment_fetcher.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */








var generateRequestID = (0,id_generator/* default */.Z)();
/**
 * Create a function which will fetch and parse segments.
 * @param {string} bufferType
 * @param {Object} transport
 * @param {Subject} requests$
 * @param {Object} options
 * @returns {Function}
 */

function segment_fetcher_createSegmentFetcher(bufferType, transport, requests$, options) {
  var cache = (0,array_includes/* default */.Z)(["audio", "video"], bufferType) ? new initialization_segment_cache() : undefined;
  var segmentLoader = createSegmentLoader(transport[bufferType].loader, cache, options); // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment

  var segmentParser = transport[bufferType].parser; // deal with it

  /**
   * Process the segmentLoader observable to adapt it to the the rest of the
   * code:
   *   - use the requests subject for network requests and their progress
   *   - use the warning$ subject for retries' error messages
   *   - only emit the data
   * @param {Object} content
   * @returns {Observable}
   */

  return function fetchSegment(content) {
    var id = generateRequestID();
    var requestBeginSent = false;
    return segmentLoader(content).pipe((0,tap/* tap */.b)(function (arg) {
      switch (arg.type) {
        case "metrics":
          {
            requests$.next(arg);
            break;
          }

        case "request":
          {
            var value = arg.value; // format it for ABR Handling

            var segment = value.segment;

            if (segment === undefined) {
              return;
            }

            requestBeginSent = true;
            requests$.next({
              type: "requestBegin",
              value: {
                duration: segment.duration,
                time: segment.time,
                requestTimestamp: performance.now(),
                id: id
              }
            });
            break;
          }

        case "progress":
          {
            var _value = arg.value;

            if (_value.totalSize != null && _value.size < _value.totalSize) {
              requests$.next({
                type: "progress",
                value: {
                  duration: _value.duration,
                  size: _value.size,
                  totalSize: _value.totalSize,
                  timestamp: performance.now(),
                  id: id
                }
              });
            }

            break;
          }
      }
    }), finalize(function () {
      if (requestBeginSent) {
        requests$.next({
          type: "requestEnd",
          value: {
            id: id
          }
        });
      }
    }), (0,filter/* filter */.h)(function (e) {
      switch (e.type) {
        case "warning":
        case "chunk":
        case "chunk-complete":
        case "data":
          return true;

        case "progress":
        case "metrics":
        case "request":
          return false;

        default:
          (0,assert_unreachable/* default */.Z)(e);
      }
    }), (0,mergeMap/* mergeMap */.zg)(function (evt) {
      if (evt.type === "warning") {
        return (0,of.of)(evt);
      }

      if (evt.type === "chunk-complete") {
        return (0,of.of)({
          type: "chunk-complete"
        });
      }

      var isChunked = evt.type === "chunk";
      var data = {
        type: "chunk",

        /**
         * Parse the loaded data.
         * @param {Object} [initTimescale]
         * @returns {Observable}
         */
        parse: function parse(initTimescale) {
          var response = {
            data: evt.value.responseData,
            isChunked: isChunked
          };
          /* eslint-disable @typescript-eslint/no-unsafe-call */

          /* eslint-disable @typescript-eslint/no-unsafe-member-access */

          /* eslint-disable @typescript-eslint/no-unsafe-return */

          return segmentParser({
            response: response,
            initTimescale: initTimescale,
            content: content
          })
          /* eslint-enable @typescript-eslint/no-unsafe-call */

          /* eslint-enable @typescript-eslint/no-unsafe-member-access */

          /* eslint-enable @typescript-eslint/no-unsafe-return */
          .pipe((0,catchError/* catchError */.K)(function (error) {
            throw formatError(error, {
              defaultCode: "PIPELINE_PARSE_ERROR",
              defaultReason: "Unknown parsing error"
            });
          }));
        }
      };

      if (isChunked) {
        return (0,of.of)(data);
      }

      return (0,concat/* concat */.z)((0,of.of)(data), (0,of.of)({
        type: "chunk-complete"
      }));
    }), (0,share/* share */.B)() // avoid multiple side effects if multiple subs
    );
  };
}
;// CONCATENATED MODULE: ./src/core/fetchers/segment/segment_fetcher_creator.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





var MIN_CANCELABLE_PRIORITY = config/* default.MIN_CANCELABLE_PRIORITY */.Z.MIN_CANCELABLE_PRIORITY,
    MAX_HIGH_PRIORITY_LEVEL = config/* default.MAX_HIGH_PRIORITY_LEVEL */.Z.MAX_HIGH_PRIORITY_LEVEL;
/**
 * Interact with the transport pipelines to download segments with the right
 * priority.
 *
 * @class SegmentFetcherCreator
 *
 * @example
 * ```js
 * const creator = new SegmentFetcherCreator(transport);
 *
 * // 2 - create a new fetcher with its backoff options
 * const fetcher = creator.createSegmentFetcher("audio", {
 *   maxRetryRegular: Infinity,
 *   maxRetryOffline: Infinity,
 * });
 *
 * // 3 - load a segment with a given priority
 * fetcher.createRequest(myContent, 1)
 *   // 4 - parse it
 *   .pipe(
 *     filter(evt => evt.type === "chunk"),
 *     mergeMap(response => response.parse());
 *   )
 *   // 5 - use it
 *   .subscribe((res) => console.log("audio chunk downloaded:", res));
 * ```
 */

var SegmentFetcherCreator = /*#__PURE__*/function () {
  /**
   * @param {Object} transport
   */
  function SegmentFetcherCreator(transport, options) {
    this._transport = transport;
    this._prioritizer = new ObservablePrioritizer({
      prioritySteps: {
        high: MAX_HIGH_PRIORITY_LEVEL,
        low: MIN_CANCELABLE_PRIORITY
      }
    });
    this._backoffOptions = options;
  }
  /**
   * Create a segment fetcher, allowing to easily perform segment requests.
   * @param {string} bufferType - The type of buffer concerned (e.g. "audio",
   * "video", etc.)
   * @param {Subject} requests$ - Subject through which request-related events
   * (such as those needed by the ABRManager) will be sent.
   * @returns {Object}
   */


  var _proto = SegmentFetcherCreator.prototype;

  _proto.createSegmentFetcher = function createSegmentFetcher(bufferType, requests$) {
    var backoffOptions = getSegmentBackoffOptions(bufferType, this._backoffOptions);

    var segmentFetcher = segment_fetcher_createSegmentFetcher(bufferType, this._transport, requests$, backoffOptions);

    return applyPrioritizerToSegmentFetcher(this._prioritizer, segmentFetcher);
  };

  return SegmentFetcherCreator;
}();


;// CONCATENATED MODULE: ./src/core/fetchers/segment/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* harmony default export */ const segment = (SegmentFetcherCreator);
// EXTERNAL MODULE: ./src/core/init/create_eme_manager.ts + 1 modules
var create_eme_manager = __webpack_require__(4507);
// EXTERNAL MODULE: ./src/compat/clear_element_src.ts
var clear_element_src = __webpack_require__(5767);
// EXTERNAL MODULE: ./src/compat/browser_compatibility_types.ts
var browser_compatibility_types = __webpack_require__(3774);
// EXTERNAL MODULE: ./src/utils/is_non_empty_string.ts
var is_non_empty_string = __webpack_require__(6923);
;// CONCATENATED MODULE: ./src/core/init/create_media_source.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */






var onSourceOpen$ = event_listeners/* onSourceOpen$ */.ym;
/**
 * Set the media duration in the mediaSource.
 * @param {MediaSource} mediaSource
 * @param {number} duration
 */

function setDurationToMediaSource(mediaSource, duration) {
  var newDuration = duration === Infinity ? Number.MAX_VALUE : duration;

  if (mediaSource.duration !== newDuration) {
    log/* default.info */.Z.info("Init: Setting duration", newDuration);
    mediaSource.duration = newDuration;
  }
}
/**
 * Dispose of ressources taken by the MediaSource:
 *   - Clear the MediaSource' SourceBuffers
 *   - Clear the mediaElement's src (stop the mediaElement)
 *   - Revoke MediaSource' URL
 * @param {HTMLMediaElement} mediaElement
 * @param {MediaSource|null} mediaSource
 * @param {string|null} mediaSourceURL
 */

function resetMediaSource(mediaElement, mediaSource, mediaSourceURL) {
  if (mediaSource !== null && mediaSource.readyState !== "closed") {
    var readyState = mediaSource.readyState,
        sourceBuffers = mediaSource.sourceBuffers;

    for (var i = sourceBuffers.length - 1; i >= 0; i--) {
      var sourceBuffer = sourceBuffers[i];

      try {
        if (readyState === "open") {
          log/* default.info */.Z.info("Init: Removing SourceBuffer from mediaSource", sourceBuffer);
          sourceBuffer.abort();
        }

        mediaSource.removeSourceBuffer(sourceBuffer);
      } catch (e) {
        log/* default.warn */.Z.warn("Init: Error while disposing SourceBuffer", e);
      }
    }

    if (sourceBuffers.length > 0) {
      log/* default.warn */.Z.warn("Init: Not all SourceBuffers could have been removed.");
    }
  }

  (0,clear_element_src/* default */.Z)(mediaElement);

  if (mediaSourceURL !== null) {
    try {
      log/* default.debug */.Z.debug("Init: Revoking previous URL");
      URL.revokeObjectURL(mediaSourceURL);
    } catch (e) {
      log/* default.warn */.Z.warn("Init: Error while revoking the media source URL", e);
    }
  }
}
/**
 * Create, on subscription, a MediaSource instance and attach it to the given
 * mediaElement element's src attribute.
 *
 * Returns an Observable which emits the MediaSource when created and attached
 * to the mediaElement element.
 * This Observable never completes. It can throw if MediaSource is not
 * available in the current environment.
 *
 * On unsubscription, the mediaElement.src is cleaned, MediaSource SourceBuffers
 * are aborted and some minor cleaning is done.
 *
 * @param {HTMLMediaElement} mediaElement
 * @returns {Observable}
 */


function createMediaSource(mediaElement) {
  return new Observable/* Observable */.y(function (observer) {
    if (browser_compatibility_types/* MediaSource_ */.JJ == null) {
      throw new media_error/* default */.Z("MEDIA_SOURCE_NOT_SUPPORTED", "No MediaSource Object was found in the current browser.");
    } // make sure the media has been correctly reset


    var oldSrc = (0,is_non_empty_string/* default */.Z)(mediaElement.src) ? mediaElement.src : null;
    resetMediaSource(mediaElement, null, oldSrc);
    log/* default.info */.Z.info("Init: Creating MediaSource");
    var mediaSource = new browser_compatibility_types/* MediaSource_ */.JJ();
    var objectURL = URL.createObjectURL(mediaSource);
    log/* default.info */.Z.info("Init: Attaching MediaSource URL to the media element", objectURL);
    mediaElement.src = objectURL;
    observer.next(mediaSource);
    return function () {
      resetMediaSource(mediaElement, mediaSource, objectURL);
    };
  });
}
/**
 * Create and open a new MediaSource object on the given media element.
 * Emit the MediaSource when done.
 * @param {HTMLMediaElement} mediaElement
 * @returns {Observable}
 */


function openMediaSource(mediaElement) {
  return createMediaSource(mediaElement).pipe((0,mergeMap/* mergeMap */.zg)(function (mediaSource) {
    return onSourceOpen$(mediaSource).pipe((0,take/* take */.q)(1), (0,mapTo/* mapTo */.h)(mediaSource));
  }));
}
// EXTERNAL MODULE: ./src/core/init/events_generators.ts
var events_generators = __webpack_require__(8343);
;// CONCATENATED MODULE: ./src/core/init/get_initial_time.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var DEFAULT_LIVE_GAP = config/* default.DEFAULT_LIVE_GAP */.Z.DEFAULT_LIVE_GAP;
/**
 * Returns the calculated initial time for the content described by the given
 * Manifest:
 *   1. if a start time is defined by user, calculate starting time from the
 *      manifest information
 *   2. else if the media is live, use the live edge and suggested delays from
 *      it
 *   3. else returns the minimum time announced in the manifest
 * @param {Manifest} manifest
 * @param {boolean} lowLatencyMode
 * @param {Object} startAt
 * @returns {Number}
 */

function getInitialTime(manifest, lowLatencyMode, startAt) {
  log/* default.debug */.Z.debug("Init: calculating initial time");

  if (startAt != null) {
    var min = manifest.getMinimumPosition();
    var max = manifest.getMaximumPosition();

    if (startAt.position != null) {
      log/* default.debug */.Z.debug("Init: using startAt.minimumPosition");
      return Math.max(Math.min(startAt.position, max), min);
    } else if (startAt.wallClockTime != null) {
      log/* default.debug */.Z.debug("Init: using startAt.wallClockTime");
      var ast = manifest.availabilityStartTime == null ? 0 : manifest.availabilityStartTime;
      var position = startAt.wallClockTime - ast;
      return Math.max(Math.min(position, max), min);
    } else if (startAt.fromFirstPosition != null) {
      log/* default.debug */.Z.debug("Init: using startAt.fromFirstPosition");
      var fromFirstPosition = startAt.fromFirstPosition;
      return fromFirstPosition <= 0 ? min : Math.min(max, min + fromFirstPosition);
    } else if (startAt.fromLastPosition != null) {
      log/* default.debug */.Z.debug("Init: using startAt.fromLastPosition");
      var fromLastPosition = startAt.fromLastPosition;
      return fromLastPosition >= 0 ? max : Math.max(min, max + fromLastPosition);
    } else if (startAt.percentage != null) {
      log/* default.debug */.Z.debug("Init: using startAt.percentage");
      var percentage = startAt.percentage;

      if (percentage > 100) {
        return max;
      } else if (percentage < 0) {
        return min;
      }

      var ratio = +percentage / 100;
      var extent = max - min;
      return min + extent * ratio;
    }
  }

  var minimumPosition = manifest.getMinimumPosition();

  if (manifest.isLive) {
    var suggestedPresentationDelay = manifest.suggestedPresentationDelay,
        clockOffset = manifest.clockOffset;
    var maximumPosition = manifest.getMaximumPosition();
    var liveTime;

    if (clockOffset == null) {
      log/* default.info */.Z.info("Init: no clock offset found for a live content, " + "starting close to maximum available position");
      liveTime = maximumPosition;
    } else {
      log/* default.info */.Z.info("Init: clock offset found for a live content, " + "checking if we can start close to it");

      var _ast = manifest.availabilityStartTime == null ? 0 : manifest.availabilityStartTime;

      var clockRelativeLiveTime = (performance.now() + clockOffset) / 1000 - _ast;

      liveTime = Math.min(maximumPosition, clockRelativeLiveTime);
    }

    var diffFromLiveTime = suggestedPresentationDelay !== undefined ? suggestedPresentationDelay : lowLatencyMode ? DEFAULT_LIVE_GAP.LOW_LATENCY : DEFAULT_LIVE_GAP.DEFAULT;
    log/* default.debug */.Z.debug("Init: " + liveTime + " defined as the live time, applying a live gap" + (" of " + diffFromLiveTime));
    return Math.max(liveTime - diffFromLiveTime, minimumPosition);
  }

  log/* default.info */.Z.info("Init: starting at the minimum available position:", minimumPosition);
  return minimumPosition;
}
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/throwError.js
var throwError = __webpack_require__(4944);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/interval.js
var observable_interval = __webpack_require__(6564);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/fromEvent.js
var fromEvent = __webpack_require__(7027);
;// CONCATENATED MODULE: ./src/compat/change_source_buffer_type.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * If the changeType MSE API is implemented, update the current codec of the
 * SourceBuffer and return true if it succeeded.
 * In any other cases, return false.
 * @param {Object} sourceBuffer
 * @param {string} codec
 * @returns {boolean}
 */

function tryToChangeSourceBufferType(sourceBuffer, codec) {
  if (typeof sourceBuffer.changeType === "function") {
    try {
      sourceBuffer.changeType(codec);
    } catch (e) {
      log/* default.warn */.Z.warn("Could not call 'changeType' on the given SourceBuffer:", e);
      return false;
    }

    return true;
  }

  return false;
}
// EXTERNAL MODULE: ./src/utils/byte_parsing.ts
var byte_parsing = __webpack_require__(6968);
// EXTERNAL MODULE: ./src/utils/hash_buffer.ts
var hash_buffer = __webpack_require__(2870);
// EXTERNAL MODULE: ./src/core/segment_buffers/implementations/types.ts + 1 modules
var types = __webpack_require__(4123);
;// CONCATENATED MODULE: ./src/core/segment_buffers/implementations/audio_video/audio_video_segment_buffer.ts


/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */











var SOURCE_BUFFER_FLUSHING_INTERVAL = config/* default.SOURCE_BUFFER_FLUSHING_INTERVAL */.Z.SOURCE_BUFFER_FLUSHING_INTERVAL;
/**
 * Allows to push and remove new segments to a SourceBuffer in a FIFO queue (not
 * doing so can lead to browser Errors) while keeping an inventory of what has
 * been pushed and what is being pushed.
 *
 * To work correctly, only a single AudioVideoSegmentBuffer per SourceBuffer
 * should be created.
 *
 * @class AudioVideoSegmentBuffer
 */

var AudioVideoSegmentBuffer = /*#__PURE__*/function (_SegmentBuffer) {
  inheritsLoose_default()(AudioVideoSegmentBuffer, _SegmentBuffer);

  /**
   * @constructor
   * @param {string} bufferType
   * @param {string} codec
   * @param {SourceBuffer} sourceBuffer
   */
  function AudioVideoSegmentBuffer(bufferType, codec, mediaSource) {
    var _this;

    _this = _SegmentBuffer.call(this) || this;
    var sourceBuffer = mediaSource.addSourceBuffer(codec);
    _this._destroy$ = new Subject/* Subject */.xQ();
    _this.bufferType = bufferType;
    _this._mediaSource = mediaSource;
    _this._sourceBuffer = sourceBuffer;
    _this._queue = [];
    _this._pendingTask = null;
    _this._lastInitSegment = null;
    _this.codec = codec; // Some browsers (happened with firefox 66) sometimes "forget" to send us
    // `update` or `updateend` events.
    // In that case, we're completely unable to continue the queue here and
    // stay locked in a waiting state.
    // This interval is here to check at regular intervals if the underlying
    // SourceBuffer is currently updating.

    (0,observable_interval/* interval */.F)(SOURCE_BUFFER_FLUSHING_INTERVAL).pipe((0,tap/* tap */.b)(function () {
      return _this._flush();
    }), (0,takeUntil/* takeUntil */.R)(_this._destroy$)).subscribe();
    (0,fromEvent/* fromEvent */.R)(_this._sourceBuffer, "error").pipe((0,tap/* tap */.b)(function (err) {
      return _this._onPendingTaskError(err);
    }), (0,takeUntil/* takeUntil */.R)(_this._destroy$)).subscribe();
    (0,fromEvent/* fromEvent */.R)(_this._sourceBuffer, "updateend").pipe((0,tap/* tap */.b)(function () {
      return _this._flush();
    }), (0,takeUntil/* takeUntil */.R)(_this._destroy$)).subscribe();
    return _this;
  }
  /**
   * Push a chunk of the media segment given to the attached SourceBuffer, in a
   * FIFO queue.
   *
   * Once all chunks of a single Segment have been given to `pushChunk`, you
   * should call `endOfSegment` to indicate that the whole Segment has been
   * pushed.
   *
   * Depending on the type of data appended, the pushed chunk might rely on an
   * initialization segment, given through the `data.initSegment` property.
   *
   * Such initialization segment will be first pushed to the SourceBuffer if the
   * last pushed segment was associated to another initialization segment.
   * This detection rely on the initialization segment's reference so you need
   * to avoid mutating in-place a initialization segment given to that function
   * (to avoid having two different values which have the same reference).
   *
   * If you don't need any initialization segment to push the wanted chunk, you
   * can just set `data.initSegment` to `null`.
   *
   * You can also only push an initialization segment by setting the
   * `data.chunk` argument to null.
   *
   * @param {Object} infos
   * @returns {Observable}
   */


  var _proto = AudioVideoSegmentBuffer.prototype;

  _proto.pushChunk = function pushChunk(infos) {
    log/* default.debug */.Z.debug("AVSB: receiving order to push data to the SourceBuffer", this.bufferType, infos);
    return this._addToQueue({
      type: types/* SegmentBufferOperation.Push */.f.Push,
      value: infos
    });
  }
  /**
   * Remove buffered data (added to the same FIFO queue than `pushChunk`).
   * @param {number} start - start position, in seconds
   * @param {number} end - end position, in seconds
   * @returns {Observable}
   */
  ;

  _proto.removeBuffer = function removeBuffer(start, end) {
    log/* default.debug */.Z.debug("AVSB: receiving order to remove data from the SourceBuffer", this.bufferType, start, end);
    return this._addToQueue({
      type: types/* SegmentBufferOperation.Remove */.f.Remove,
      value: {
        start: start,
        end: end
      }
    });
  }
  /**
   * Indicate that every chunks from a Segment has been given to pushChunk so
   * far.
   * This will update our internal Segment inventory accordingly.
   * The returned Observable will emit and complete successively once the whole
   * segment has been pushed and this indication is acknowledged.
   * @param {Object} infos
   * @returns {Observable}
   */
  ;

  _proto.endOfSegment = function endOfSegment(infos) {
    log/* default.debug */.Z.debug("AVSB: receiving order for validating end of segment", this.bufferType, infos.segment);
    return this._addToQueue({
      type: types/* SegmentBufferOperation.EndOfSegment */.f.EndOfSegment,
      value: infos
    });
  }
  /**
   * Returns the currently buffered data, in a TimeRanges object.
   * @returns {TimeRanges}
   */
  ;

  _proto.getBufferedRanges = function getBufferedRanges() {
    return this._sourceBuffer.buffered;
  }
  /**
   * Returns the list of every operations that the `AudioVideoSegmentBuffer` is
   * still processing. From the one with the highest priority (like the one
   * being processed)
   * @returns {Array.<Object>}
   */
  ;

  _proto.getPendingOperations = function getPendingOperations() {
    var parseQueuedOperation = function parseQueuedOperation(op) {
      // Had to be written that way for TypeScrypt
      switch (op.type) {
        case types/* SegmentBufferOperation.Push */.f.Push:
          return {
            type: op.type,
            value: op.value
          };

        case types/* SegmentBufferOperation.Remove */.f.Remove:
          return {
            type: op.type,
            value: op.value
          };

        case types/* SegmentBufferOperation.EndOfSegment */.f.EndOfSegment:
          return {
            type: op.type,
            value: op.value
          };
      }
    };

    var queued = this._queue.map(parseQueuedOperation);

    return this._pendingTask === null ? queued : [parseQueuedOperation(this._pendingTask)].concat(queued);
  }
  /**
   * Dispose of the resources used by this AudioVideoSegmentBuffer.
   *
   * /!\ You won't be able to use the AudioVideoSegmentBuffer after calling this
   * function.
   * @private
   */
  ;

  _proto.dispose = function dispose() {
    this._destroy$.next();

    this._destroy$.complete();

    if (this._pendingTask !== null) {
      this._pendingTask.subject.complete();

      this._pendingTask = null;
    }

    while (this._queue.length > 0) {
      var nextElement = this._queue.shift();

      if (nextElement !== undefined) {
        nextElement.subject.complete();
      }
    }

    if (this._mediaSource.readyState === "open") {
      try {
        this._sourceBuffer.abort();
      } catch (e) {
        log/* default.warn */.Z.warn("AVSB: Failed to abort a " + this.bufferType + " SourceBuffer:", e);
      }
    }
  }
  /**
   * Called when an error arised that made the current task fail.
   * @param {Event} error
   */
  ;

  _proto._onPendingTaskError = function _onPendingTaskError(err) {
    this._lastInitSegment = null; // initialize init segment as a security

    if (this._pendingTask !== null) {
      var error = err instanceof Error ? err : new Error("An unknown error occured when doing operations " + "on the SourceBuffer");

      this._pendingTask.subject.error(error);
    }
  }
  /**
   * When the returned observable is subscribed:
   *   1. Add your operation to the queue.
   *   2. Begin the queue if not pending.
   *
   * Cancel queued operation on unsubscription.
   * @private
   * @param {Object} operation
   * @returns {Observable}
   */
  ;

  _proto._addToQueue = function _addToQueue(operation) {
    var _this2 = this;

    return new Observable/* Observable */.y(function (obs) {
      var shouldRestartQueue = _this2._queue.length === 0 && _this2._pendingTask === null;
      var subject = new Subject/* Subject */.xQ();
      var queueItem = (0,object_assign/* default */.Z)({
        subject: subject
      }, operation);

      _this2._queue.push(queueItem);

      var subscription = subject.subscribe(obs);

      if (shouldRestartQueue) {
        _this2._flush();
      }

      return function () {
        subscription.unsubscribe(); // Remove the corresponding element from the AudioVideoSegmentBuffer's
        // queue.
        // If the operation was a pending task, it should still continue to not
        // let the AudioVideoSegmentBuffer in a weird state.

        var index = _this2._queue.indexOf(queueItem);

        if (index >= 0) {
          _this2._queue.splice(index, 1);
        }
      };
    });
  }
  /**
   * Perform next task if one.
   * @private
   */
  ;

  _proto._flush = function _flush() {
    if (this._sourceBuffer.updating) {
      return; // still processing `this._pendingTask`
    }

    if (this._pendingTask !== null) {
      var task = this._pendingTask;

      if (task.type !== types/* SegmentBufferOperation.Push */.f.Push || task.data.length === 0) {
        // If we're here, we've finished processing the task
        switch (task.type) {
          case types/* SegmentBufferOperation.Push */.f.Push:
            if (task.inventoryData !== null) {
              this._segmentInventory.insertChunk(task.inventoryData);
            }

            break;

          case types/* SegmentBufferOperation.EndOfSegment */.f.EndOfSegment:
            this._segmentInventory.completeSegment(task.value);

            break;

          case types/* SegmentBufferOperation.Remove */.f.Remove:
            this.synchronizeInventory();
            break;

          default:
            (0,assert_unreachable/* default */.Z)(task);
        }

        var subject = task.subject;
        this._pendingTask = null;
        subject.next();
        subject.complete();

        this._flush(); // Go to next item in queue


        return;
      }
    } else {
      // if this._pendingTask is null, go to next item in queue
      var nextItem = this._queue.shift();

      if (nextItem === undefined) {
        return; // we have nothing left to do
      } else if (nextItem.type !== types/* SegmentBufferOperation.Push */.f.Push) {
        this._pendingTask = nextItem;
      } else {
        var itemValue = nextItem.value;
        var dataToPush;

        try {
          dataToPush = this._preparePushOperation(itemValue.data);
        } catch (e) {
          this._pendingTask = (0,object_assign/* default */.Z)({
            data: [],
            inventoryData: itemValue.inventoryInfos
          }, nextItem);
          var error = e instanceof Error ? e : new Error("An unknown error occured when preparing a push operation");
          this._lastInitSegment = null; // initialize init segment as a security

          nextItem.subject.error(error);
          return;
        }

        this._pendingTask = (0,object_assign/* default */.Z)({
          data: dataToPush,
          inventoryData: itemValue.inventoryInfos
        }, nextItem);
      }
    }

    try {
      switch (this._pendingTask.type) {
        case types/* SegmentBufferOperation.EndOfSegment */.f.EndOfSegment:
          // nothing to do, we will just acknowledge the segment.
          log/* default.debug */.Z.debug("AVSB: Acknowledging complete segment", this._pendingTask.value);

          this._flush();

          return;

        case types/* SegmentBufferOperation.Push */.f.Push:
          var segmentData = this._pendingTask.data.shift();

          if (segmentData === undefined) {
            this._flush();

            return;
          }

          this._sourceBuffer.appendBuffer(segmentData);

          break;

        case types/* SegmentBufferOperation.Remove */.f.Remove:
          var _this$_pendingTask$va = this._pendingTask.value,
              start = _this$_pendingTask$va.start,
              end = _this$_pendingTask$va.end;
          log/* default.debug */.Z.debug("AVSB: removing data from SourceBuffer", this.bufferType, start, end);

          this._sourceBuffer.remove(start, end);

          break;

        default:
          (0,assert_unreachable/* default */.Z)(this._pendingTask);
      }
    } catch (e) {
      this._onPendingTaskError(e);
    }
  }
  /**
   * A push Operation might necessitate to mutate some `SourceBuffer` and/or
   * `AudioVideoSegmentBuffer` properties and also might need to be divided into
   * multiple segments to push (exemple: when first pushing the initialization
   * data before the segment data).
   *
   * This method allows to "prepare" that push operation so that all is left is
   * to push the returned segment data one after the other (from first to last).
   * @param {Object} item
   * @returns {Object}
   */
  ;

  _proto._preparePushOperation = function _preparePushOperation(data) {
    // Push operation with both an init segment and a regular segment might
    // need to be separated into two steps
    var dataToPush = [];
    var codec = data.codec,
        timestampOffset = data.timestampOffset,
        appendWindow = data.appendWindow;
    var hasUpdatedSourceBufferType = false;

    if (codec !== this.codec) {
      log/* default.debug */.Z.debug("AVSB: updating codec", codec);
      hasUpdatedSourceBufferType = tryToChangeSourceBufferType(this._sourceBuffer, codec);

      if (hasUpdatedSourceBufferType) {
        this.codec = codec;
      } else {
        log/* default.debug */.Z.debug("AVSB: could not update codec", codec, this.codec);
      }
    }

    if (this._sourceBuffer.timestampOffset !== timestampOffset) {
      var newTimestampOffset = timestampOffset;
      log/* default.debug */.Z.debug("AVSB: updating timestampOffset", this.bufferType, this._sourceBuffer.timestampOffset, newTimestampOffset);
      this._sourceBuffer.timestampOffset = newTimestampOffset;
    }

    if (appendWindow[0] === undefined) {
      if (this._sourceBuffer.appendWindowStart > 0) {
        this._sourceBuffer.appendWindowStart = 0;
      }
    } else if (appendWindow[0] !== this._sourceBuffer.appendWindowStart) {
      if (appendWindow[0] >= this._sourceBuffer.appendWindowEnd) {
        this._sourceBuffer.appendWindowEnd = appendWindow[0] + 1;
      }

      this._sourceBuffer.appendWindowStart = appendWindow[0];
    }

    if (appendWindow[1] === undefined) {
      if (this._sourceBuffer.appendWindowEnd !== Infinity) {
        this._sourceBuffer.appendWindowEnd = Infinity;
      }
    } else if (appendWindow[1] !== this._sourceBuffer.appendWindowEnd) {
      this._sourceBuffer.appendWindowEnd = appendWindow[1];
    }

    if (data.initSegment !== null && (hasUpdatedSourceBufferType || !this._isLastInitSegment(data.initSegment))) {
      // Push initialization segment before the media segment
      var segmentData = data.initSegment;
      dataToPush.push(segmentData);
      var initU8 = (0,byte_parsing/* toUint8Array */._f)(segmentData);
      this._lastInitSegment = {
        data: initU8,
        hash: (0,hash_buffer/* default */.Z)(initU8)
      };
    }

    if (data.chunk !== null) {
      dataToPush.push(data.chunk);
    }

    return dataToPush;
  }
  /**
   * Return `true` if the given `segmentData` is the same segment than the last
   * initialization segment pushed to the `AudioVideoSegmentBuffer`.
   * @param {BufferSource} segmentData
   * @returns {boolean}
   */
  ;

  _proto._isLastInitSegment = function _isLastInitSegment(segmentData) {
    if (this._lastInitSegment === null) {
      return false;
    }

    if (this._lastInitSegment.data === segmentData) {
      return true;
    }

    var oldInit = this._lastInitSegment.data;

    if (oldInit.byteLength === segmentData.byteLength) {
      var newInitU8 = (0,byte_parsing/* toUint8Array */._f)(segmentData);

      if ((0,hash_buffer/* default */.Z)(newInitU8) === this._lastInitSegment.hash && (0,are_arrays_of_numbers_equal/* default */.Z)(oldInit, newInitU8)) {
        return true;
      }
    }

    return false;
  };

  return AudioVideoSegmentBuffer;
}(types/* SegmentBuffer */.C);


;// CONCATENATED MODULE: ./src/core/segment_buffers/implementations/audio_video/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* harmony default export */ const audio_video = (AudioVideoSegmentBuffer);
;// CONCATENATED MODULE: ./src/core/segment_buffers/segment_buffers_store.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





var POSSIBLE_BUFFER_TYPES = ["audio", "video", "text", "image"];
/**
 * Allows to easily create and dispose SegmentBuffers, which are interfaces to
 * push and remove segments.
 *
 * Only one SegmentBuffer per type is allowed at the same time:
 *
 *   - SegmentBuffers linked to a "native" media buffer (relying on a
 *     SourceBuffer: "audio" and "video" here) are reused if one is
 *     re-created.
 *
 *   - SegmentBuffers for custom types (the other types of media) are aborted
 *     each time a new one of the same type is created.
 *
 * To be able to use a SegmentBuffer linked to a native media buffer, you
 * will first need to create it, but also wait until the other one is either
 * created or explicitely disabled through the `disableSegmentBuffer` method.
 * The Observable returned by `waitForUsableBuffers` will emit when
 * that is the case.
 *
 * @class SegmentBuffersStore
 */

var SegmentBuffersStore = /*#__PURE__*/function () {
  /**
   * @param {HTMLMediaElement} mediaElement
   * @param {MediaSource} mediaSource
   * @constructor
   */
  function SegmentBuffersStore(mediaElement, mediaSource) {
    this._mediaElement = mediaElement;
    this._mediaSource = mediaSource;
    this._initializedSegmentBuffers = {};
    this._onNativeBufferAddedOrDisabled = [];
  }
  /**
   * Returns true if the type is linked to a "native" media buffer (i.e. relying
   * on a SourceBuffer object, native to the browser).
   * Native media buffers needed for the current content must all be created
   * before the content begins to be played and cannot be disposed during
   * playback.
   * @param {string} bufferType
   * @returns {Boolean}
   */


  SegmentBuffersStore.isNative = function isNative(bufferType) {
    return shouldHaveNativeBuffer(bufferType);
  }
  /**
   * Get all currently available buffer types.
   * /!\ This list can evolve at runtime depending on feature switching.
   * @returns {Array.<string>}
   */
  ;

  var _proto = SegmentBuffersStore.prototype;

  _proto.getBufferTypes = function getBufferTypes() {
    var bufferTypes = this.getNativeBufferTypes();

    if (features/* default.nativeTextTracksBuffer */.Z.nativeTextTracksBuffer != null || features/* default.htmlTextTracksBuffer */.Z.htmlTextTracksBuffer != null) {
      bufferTypes.push("text");
    }

    if (features/* default.imageBuffer */.Z.imageBuffer != null) {
      bufferTypes.push("image");
    }

    return bufferTypes;
  }
  /**
   * Get all "native" buffer types that should be created before beginning to
   * push contents.
   * @returns {Array.<string>}
   */
  ;

  _proto.getNativeBufferTypes = function getNativeBufferTypes() {
    return this._mediaElement.nodeName === "AUDIO" ? ["audio"] : ["video", "audio"];
  }
  /**
   * Returns the current "status" of the SegmentBuffer linked to the buffer
   * type given.
   *
   * This function will return  an object containing a key named `type` which
   * can be equal to either one of those three value:
   *
   *   - "initialized": A SegmentBuffer has been created for that type.
   *     You will in this case also have a second key, `value`, which will
   *     contain the related SegmentBuffer instance.
   *     Please note that you will need to wait until
   *     `this.waitForUsableBuffers()` has emitted before pushing segment
   *     data to a SegmentBuffer relying on a SourceBuffer.
   *
   *   - "disabled": The SegmentBuffer has been explicitely disabled for this
   *     type.
   *
   *   - "uninitialized": No action has yet been yet for that SegmentBuffer.
   *
   * @param {string} bufferType
   * @returns {Object|null}
   */
  ;

  _proto.getStatus = function getStatus(bufferType) {
    var initializedBuffer = this._initializedSegmentBuffers[bufferType];
    return initializedBuffer === undefined ? {
      type: "uninitialized"
    } : initializedBuffer === null ? {
      type: "disabled"
    } : {
      type: "initialized",
      value: initializedBuffer
    };
  }
  /**
   * Native media buffers (audio and video) needed for playing the current
   * content need to all be created (by creating SegmentBuffers linked to them)
   * before any one can be used.
   *
   * This function will return an Observable emitting when any and all native
   * SourceBuffers can be used.
   *
   * From https://w3c.github.io/media-source/#methods
   *   For example, a user agent may throw a QuotaExceededError
   *   exception if the media element has reached the HAVE_METADATA
   *   readyState. This can occur if the user agent's media engine
   *   does not support adding more tracks during playback.
   * @return {Observable}
   */
  ;

  _proto.waitForUsableBuffers = function waitForUsableBuffers() {
    var _this = this;

    if (this._areNativeBuffersUsable()) {
      return (0,of.of)(undefined);
    }

    return new Observable/* Observable */.y(function (obs) {
      _this._onNativeBufferAddedOrDisabled.push(function () {
        if (_this._areNativeBuffersUsable()) {
          obs.next(undefined);
          obs.complete();
        }
      });
    });
  }
  /**
   * Explicitely disable the SegmentBuffer for a given buffer type.
   * A call to this function is needed at least for unused native buffer types
   * (usually "audio" and "video"), to be able to emit through
   * `waitForUsableBuffers` when conditions are met.
   * @param {string}
   */
  ;

  _proto.disableSegmentBuffer = function disableSegmentBuffer(bufferType) {
    var currentValue = this._initializedSegmentBuffers[bufferType];

    if (currentValue === null) {
      log/* default.warn */.Z.warn("SBS: The " + bufferType + " SegmentBuffer was already disabled.");
      return;
    }

    if (currentValue !== undefined) {
      throw new Error("Cannot disable an active SegmentBuffer.");
    }

    this._initializedSegmentBuffers[bufferType] = null;

    if (SegmentBuffersStore.isNative(bufferType)) {
      this._onNativeBufferAddedOrDisabled.forEach(function (cb) {
        return cb();
      });
    }
  }
  /**
   * Creates a new SegmentBuffer associated to a type.
   * Reuse an already created one if a SegmentBuffer for the given type
   * already exists.
   *
   * Please note that you will need to wait until `this.waitForUsableBuffers()`
   * has emitted before pushing segment data to a SegmentBuffer of a native
   * type.
   * @param {string} bufferType
   * @param {string} codec
   * @param {Object|undefined} options
   * @returns {Object}
   */
  ;

  _proto.createSegmentBuffer = function createSegmentBuffer(bufferType, codec, options) {
    if (options === void 0) {
      options = {};
    }

    var memorizedSegmentBuffer = this._initializedSegmentBuffers[bufferType];

    if (shouldHaveNativeBuffer(bufferType)) {
      if (memorizedSegmentBuffer != null) {
        if (memorizedSegmentBuffer instanceof audio_video && memorizedSegmentBuffer.codec !== codec) {
          log/* default.warn */.Z.warn("SB: Reusing native SegmentBuffer with codec", memorizedSegmentBuffer.codec, "for codec", codec);
        } else {
          log/* default.info */.Z.info("SB: Reusing native SegmentBuffer with codec", codec);
        }

        return memorizedSegmentBuffer;
      }

      log/* default.info */.Z.info("SB: Adding native SegmentBuffer with codec", codec);
      var nativeSegmentBuffer = new audio_video(bufferType, codec, this._mediaSource);
      this._initializedSegmentBuffers[bufferType] = nativeSegmentBuffer;

      this._onNativeBufferAddedOrDisabled.forEach(function (cb) {
        return cb();
      });

      return nativeSegmentBuffer;
    }

    if (memorizedSegmentBuffer != null) {
      log/* default.info */.Z.info("SB: Reusing a previous custom SegmentBuffer for the type", bufferType);
      return memorizedSegmentBuffer;
    }

    var segmentBuffer;

    if (bufferType === "text") {
      log/* default.info */.Z.info("SB: Creating a new text SegmentBuffer");

      if (options.textTrackMode === "html") {
        if (features/* default.htmlTextTracksBuffer */.Z.htmlTextTracksBuffer == null) {
          throw new Error("HTML Text track feature not activated");
        }

        segmentBuffer = new features/* default.htmlTextTracksBuffer */.Z.htmlTextTracksBuffer(this._mediaElement, options.textTrackElement);
      } else {
        if (features/* default.nativeTextTracksBuffer */.Z.nativeTextTracksBuffer == null) {
          throw new Error("Native Text track feature not activated");
        }

        segmentBuffer = new features/* default.nativeTextTracksBuffer */.Z.nativeTextTracksBuffer(this._mediaElement, options.hideNativeSubtitle === true);
      }

      this._initializedSegmentBuffers.text = segmentBuffer;
      return segmentBuffer;
    } else if (bufferType === "image") {
      if (features/* default.imageBuffer */.Z.imageBuffer == null) {
        throw new Error("Image buffer feature not activated");
      }

      log/* default.info */.Z.info("SB: Creating a new image SegmentBuffer");
      segmentBuffer = new features/* default.imageBuffer */.Z.imageBuffer();
      this._initializedSegmentBuffers.image = segmentBuffer;
      return segmentBuffer;
    }

    log/* default.error */.Z.error("SB: Unknown buffer type:", bufferType);
    throw new media_error/* default */.Z("BUFFER_TYPE_UNKNOWN", "The player wants to create a SegmentBuffer " + "of an unknown type.");
  }
  /**
   * Dispose of the active SegmentBuffer for the given type.
   * @param {string} bufferType
   */
  ;

  _proto.disposeSegmentBuffer = function disposeSegmentBuffer(bufferType) {
    var memorizedSegmentBuffer = this._initializedSegmentBuffers[bufferType];

    if (memorizedSegmentBuffer == null) {
      log/* default.warn */.Z.warn("SB: Trying to dispose a SegmentBuffer that does not exist");
      return;
    }

    log/* default.info */.Z.info("SB: Aborting SegmentBuffer", bufferType);
    memorizedSegmentBuffer.dispose();
    delete this._initializedSegmentBuffers[bufferType];
  }
  /**
   * Dispose of all SegmentBuffer created on this SegmentBuffersStore.
   */
  ;

  _proto.disposeAll = function disposeAll() {
    var _this2 = this;

    POSSIBLE_BUFFER_TYPES.forEach(function (bufferType) {
      if (_this2.getStatus(bufferType).type === "initialized") {
        _this2.disposeSegmentBuffer(bufferType);
      }
    });
  }
  /**
   * Returns `true` when we're ready to push and decode contents to
   * SourceBuffers created by SegmentBuffers of a native buffer type.
   */
  ;

  _proto._areNativeBuffersUsable = function _areNativeBuffersUsable() {
    var _this3 = this;

    var nativeBufferTypes = this.getNativeBufferTypes();
    var hasUnitializedBuffers = nativeBufferTypes.some(function (sbType) {
      return _this3._initializedSegmentBuffers[sbType] === undefined;
    });

    if (hasUnitializedBuffers) {
      // one is not yet initialized/disabled
      return false;
    }

    var areAllDisabled = nativeBufferTypes.every(function (sbType) {
      return _this3._initializedSegmentBuffers[sbType] === null;
    });

    if (areAllDisabled) {
      // they all are disabled: we can't play the content
      return false;
    }

    return true;
  };

  return SegmentBuffersStore;
}();
/**
 * Returns true if the given buffeType has a linked SourceBuffer implementation,
 * false otherwise.
 * SourceBuffers are directly added to the MediaSource.
 * @param {string} bufferType
 * @returns {Boolean}
 */




function shouldHaveNativeBuffer(bufferType) {
  return bufferType === "audio" || bufferType === "video";
}
;// CONCATENATED MODULE: ./src/core/segment_buffers/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/* harmony default export */ const segment_buffers = (SegmentBuffersStore);

;// CONCATENATED MODULE: ./src/utils/sorted_list.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Creates an Array automatically sorted with the sorting function given to the
 * constructor when the add method is called.
 *
 * @example
 * ```js
 * const sortedList = new SortedList((a, b) => a.start - b.start);
 * const element1 = { start: 20 };
 * const element2 = { start: 10 };
 * const element3 = { start: 15 };
 *
 * sortedList.add(element1, element2);
 * console.log(sortedList.unwrap());
 * // -> [{ start: 10 }, { start : 20 }]
 *
 * sortedList.add(element3);
 * console.log(sortedList.unwrap());
 * // -> [{ start: 10 }, { start : 15 }, { start: 20 }]
 *
 * sortedList.removeElement(element2);
 * // -> [{ start: 10 }, { start: 15 }]
 * ```
 * @class SortedList
 */

var SortedList = /*#__PURE__*/function () {
  /**
   * @param {Function} sortingFunction
   */
  function SortedList(sortingFunction) {
    this._array = [];
    this._sortingFn = sortingFunction;
  }
  /**
   * Add a new element to the List at the right place for the List to stay
   * sorted.
   *
   * /!\ The added Element will share the same reference than the given
   * argument, any mutation on your part can lead to an un-sorted SortedList.
   * You can still re-force the sorting to happen by calling forceSort.
   * @param {...*} elements
   */


  var _proto = SortedList.prototype;

  _proto.add = function add() {
    for (var _len = arguments.length, elements = new Array(_len), _key = 0; _key < _len; _key++) {
      elements[_key] = arguments[_key];
    }

    elements.sort(this._sortingFn);
    var j = 0;

    for (var i = 0; i < elements.length; i++) {
      var element = elements[i];
      var inserted = false;

      while (!inserted && j < this._array.length) {
        if (this._sortingFn(element, this._array[j]) < 0) {
          this._array.splice(j, 0, element);

          inserted = true;
        } else {
          j++;
        }
      }

      if (!inserted) {
        this._array.push(element);
      }
    }
  }
  /**
   * Returns the current length of the list.
   * @returns {number}
   */
  ;

  _proto.length = function length() {
    return this._array.length;
  }
  /**
   * Returns the nth element. Throws if the index does not exist.
   *
   * /!\ The returned Element shares the same reference with what is used
   * internally, any mutation on your part can lead to an un-sorted SortedList.
   * You can still re-force the sorting to happen by calling forceSort.
   * @throws Error - Throws if the given index is negative or superior to the
   * array's length.
   * @param {number} index
   * @returns {*}
   */
  ;

  _proto.get = function get(index) {
    if (index < 0 || index >= this._array.length) {
      throw new Error("Invalid index.");
    }

    return this._array[index];
  }
  /**
   * Find the first element corresponding to the given predicate.
   *
   * /!\ The returned element shares the same reference with what is used
   * internally, any mutation on your part can lead to an un-sorted SortedList.
   * You can still re-force the sorting to happen by calling forceSort.
   * @param {Function} fn
   * @returns {*}
   */
  ;

  _proto.findFirst = function findFirst(fn) {
    return (0,array_find/* default */.Z)(this._array, fn);
  }
  /**
   * Returns true if the List contains the given element.
   * @param {*} element
   * @returns {Boolean}
   */
  ;

  _proto.has = function has(element) {
    return (0,array_includes/* default */.Z)(this._array, element);
  }
  /**
   * Remove the first occurence of the given element.
   * Returns the index of the removed element. Undefined if not found.
   * @returns {number|undefined}
   */
  ;

  _proto.removeElement = function removeElement(element) {
    var indexOf = this._array.indexOf(element);

    if (indexOf >= 0) {
      this._array.splice(indexOf, 1);

      return indexOf;
    }

    return undefined;
  }
  /**
   * Returns the first element.
   *
   * /!\ The returned Element shares the same reference with what is used
   * internally, any mutation on your part can lead to an un-sorted SortedList.
   * You can still re-force the sorting to happen by calling forceSort.
   * @returns {*}
   */
  ;

  _proto.head = function head() {
    return this._array[0];
  }
  /**
   * Returns the last element.
   *
   * /!\ The returned Element shares the same reference with what is used
   * internally, any mutation on your part can lead to an un-sorted SortedList.
   * You can still re-force the sorting to happen by calling forceSort.
   * @returns {*}
   */
  ;

  _proto.last = function last() {
    return this._array[this._array.length - 1];
  }
  /**
   * Remove the first element.
   * Returns the element removed or undefined if no element were removed.
   * @returns {*}
   */
  ;

  _proto.shift = function shift() {
    return this._array.shift();
  }
  /**
   * Remove the last element.
   * Returns the element removed or undefined if no element were removed.
   * @returns {*}
   */
  ;

  _proto.pop = function pop() {
    return this._array.pop();
  };

  return SortedList;
}();


;// CONCATENATED MODULE: ./src/utils/weak_map_memory.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Memoize Function results linked to an object, through a WeakMap.
 *
 * @example
 * ```js
 * // Initialize the WeakMapMemory with its logic:
 * const memory = new WeakMapMemory(arg => {
 *   console.log("side-effect");
 *   return [arg.a, arg.b];
 * });
 *
 * const obj = { a: 1, b: 2 };
 *
 * // first time obj is given: call the function, save the result and return it:
 * const arr1 = memory.get(obj);
 * // >  "side-effect"
 * // <- [1, 2]
 *
 * // nth time obj is given, returns the saved result without calling the
 * // function:
 * const arr2 = memory.get(obj);
 * // <- [1, 2]
 *
 * // both of these use the same object, so the result is also the exact same
 * // one
 * console.log(arr1 === arr2); // => true
 *
 * // /!\ with a new object however:
 * const obj2 = { a: 1, b: 2 };
 *
 * const arr3 = memory.get(obj2);
 * // >  "side-effect"
 * // <- [1, 2]
 *
 * console.log(arr1 === arr3); // => false
 * ```
 * @class WeakMapMemory
 */
// eslint-disable-next-line @typescript-eslint/ban-types
var WeakMapMemory = /*#__PURE__*/function () {
  /**
   * @param {Function}
   */
  function WeakMapMemory(fn) {
    this._weakMap = new WeakMap();
    this._fn = fn;
  }
  /**
   * @param {Object} obj
   * @returns {*}
   */


  var _proto = WeakMapMemory.prototype;

  _proto.get = function get(obj) {
    var fromMemory = this._weakMap.get(obj);

    if (fromMemory === undefined) {
      var newElement = this._fn(obj);

      this._weakMap.set(obj, newElement);

      return newElement;
    } else {
      return fromMemory;
    }
  }
  /**
   * @param {Object} obj
   */
  ;

  _proto.destroy = function destroy(obj) {
    this._weakMap["delete"](obj);
  };

  return WeakMapMemory;
}();


// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/concatAll.js
var concatAll = __webpack_require__(2257);
;// CONCATENATED MODULE: ./src/core/segment_buffers/garbage_collector.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * Perform cleaning of the buffer according to the values set by the user
 * at each clock tick and each times the maxBufferBehind/maxBufferAhead values
 * change.
 *
 * @param {Object} opt
 * @returns {Observable}
 */

function BufferGarbageCollector(_ref) {
  var segmentBuffer = _ref.segmentBuffer,
      clock$ = _ref.clock$,
      maxBufferBehind$ = _ref.maxBufferBehind$,
      maxBufferAhead$ = _ref.maxBufferAhead$;
  return (0,combineLatest/* combineLatest */.aj)([clock$, maxBufferBehind$, maxBufferAhead$]).pipe((0,mergeMap/* mergeMap */.zg)(function (_ref2) {
    var currentTime = _ref2[0],
        maxBufferBehind = _ref2[1],
        maxBufferAhead = _ref2[2];
    return clearBuffer(segmentBuffer, currentTime, maxBufferBehind, maxBufferAhead);
  }));
}
/**
 * Remove buffer from the browser's memory based on the user's
 * maxBufferAhead / maxBufferBehind settings.
 *
 * Normally, the browser garbage-collect automatically old-added chunks of
 * buffer data when memory is scarce. However, you might want to control
 * the size of memory allocated. This function takes the current position
 * and a "depth" behind and ahead wanted for the buffer, in seconds.
 *
 * Anything older than the depth will be removed from the buffer.
 * @param {Object} segmentBuffer
 * @param {Number} position - The current position
 * @param {Number} maxBufferBehind
 * @param {Number} maxBufferAhead
 * @returns {Observable}
 */

function clearBuffer(segmentBuffer, position, maxBufferBehind, maxBufferAhead) {
  if (!isFinite(maxBufferBehind) && !isFinite(maxBufferAhead)) {
    return empty/* EMPTY */.E;
  }

  var cleanedupRanges = [];

  var _getInnerAndOuterTime = (0,ranges/* getInnerAndOuterTimeRanges */.F_)(segmentBuffer.getBufferedRanges(), position),
      innerRange = _getInnerAndOuterTime.innerRange,
      outerRanges = _getInnerAndOuterTime.outerRanges;

  var collectBufferBehind = function collectBufferBehind() {
    if (!isFinite(maxBufferBehind)) {
      return;
    } // begin from the oldest


    for (var i = 0; i < outerRanges.length; i++) {
      var outerRange = outerRanges[i];

      if (position - maxBufferBehind >= outerRange.end) {
        cleanedupRanges.push(outerRange);
      } else if (position >= outerRange.end && position - maxBufferBehind > outerRange.start && position - maxBufferBehind < outerRange.end) {
        cleanedupRanges.push({
          start: outerRange.start,
          end: position - maxBufferBehind
        });
      }
    }

    if (innerRange != null) {
      if (position - maxBufferBehind > innerRange.start) {
        cleanedupRanges.push({
          start: innerRange.start,
          end: position - maxBufferBehind
        });
      }
    }
  };

  var collectBufferAhead = function collectBufferAhead() {
    if (!isFinite(maxBufferAhead)) {
      return;
    } // begin from the oldest


    for (var i = 0; i < outerRanges.length; i++) {
      var outerRange = outerRanges[i];

      if (position + maxBufferAhead <= outerRange.start) {
        cleanedupRanges.push(outerRange);
      } else if (position <= outerRange.start && position + maxBufferAhead < outerRange.end && position + maxBufferAhead > outerRange.start) {
        cleanedupRanges.push({
          start: position + maxBufferAhead,
          end: outerRange.end
        });
      }
    }

    if (innerRange != null) {
      if (position + maxBufferAhead < innerRange.end) {
        cleanedupRanges.push({
          start: position + maxBufferAhead,
          end: innerRange.end
        });
      }
    }
  };

  collectBufferBehind();
  collectBufferAhead();
  var clean$ = (0,from/* from */.D)(cleanedupRanges.map(function (range) {
    log/* default.debug */.Z.debug("GC: cleaning range from SegmentBuffer", range);
    return segmentBuffer.removeBuffer(range.start, range.end);
  })).pipe((0,concatAll/* concatAll */.u)(), (0,ignoreElements/* ignoreElements */.l)());
  return clean$;
}
;// CONCATENATED MODULE: ./src/core/stream/events_generators.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var EVENTS = {
  activePeriodChanged: function activePeriodChanged(period) {
    return {
      type: "activePeriodChanged",
      value: {
        period: period
      }
    };
  },
  adaptationChange: function adaptationChange(bufferType, adaptation, period) {
    return {
      type: "adaptationChange",
      value: {
        type: bufferType,
        adaptation: adaptation,
        period: period
      }
    };
  },
  addedSegment: function addedSegment(content, segment, buffered, segmentData) {
    return {
      type: "added-segment",
      value: {
        content: content,
        segment: segment,
        segmentData: segmentData,
        buffered: buffered
      }
    };
  },
  bitrateEstimationChange: function bitrateEstimationChange(type, bitrate) {
    return {
      type: "bitrateEstimationChange",
      value: {
        type: type,
        bitrate: bitrate
      }
    };
  },
  streamComplete: function streamComplete(bufferType) {
    return {
      type: "complete-stream",
      value: {
        type: bufferType
      }
    };
  },
  endOfStream: function endOfStream() {
    return {
      type: "end-of-stream",
      value: undefined
    };
  },
  needsManifestRefresh: function needsManifestRefresh() {
    return {
      type: "needs-manifest-refresh",
      value: undefined
    };
  },
  manifestMightBeOufOfSync: function manifestMightBeOufOfSync() {
    return {
      type: "manifest-might-be-out-of-sync",
      value: undefined
    };
  },

  /**
   * @param {Object} period - The Period to which the stream logic asking for a
   * media source reload is linked.
   * @param {number} reloadAt - Position at which we should reload
   * @param {boolean} reloadOnPause - If `false`, stay on pause after reloading.
   * if `true`, automatically play once reloaded.
   * @returns {Object}
   */
  needsMediaSourceReload: function needsMediaSourceReload(period, reloadAt, reloadOnPause) {
    return {
      type: "needs-media-source-reload",
      value: {
        position: reloadAt,
        autoPlay: reloadOnPause,
        period: period
      }
    };
  },
  needsDecipherabilityFlush: function needsDecipherabilityFlush(position, autoPlay, duration) {
    return {
      type: "needs-decipherability-flush",
      value: {
        position: position,
        autoPlay: autoPlay,
        duration: duration
      }
    };
  },
  periodStreamReady: function periodStreamReady(type, period, adaptation$) {
    return {
      type: "periodStreamReady",
      value: {
        type: type,
        period: period,
        adaptation$: adaptation$
      }
    };
  },
  periodStreamCleared: function periodStreamCleared(type, period) {
    return {
      type: "periodStreamCleared",
      value: {
        type: type,
        period: period
      }
    };
  },
  protectedSegment: function protectedSegment(initDataInfo) {
    return {
      type: "protected-segment",
      value: initDataInfo
    };
  },
  representationChange: function representationChange(type, period, representation) {
    return {
      type: "representationChange",
      value: {
        type: type,
        period: period,
        representation: representation
      }
    };
  },
  streamTerminating: function streamTerminating() {
    return {
      type: "stream-terminating",
      value: undefined
    };
  },
  resumeStream: function resumeStream() {
    return {
      type: "resume-stream",
      value: undefined
    };
  },
  warning: function warning(value) {
    return {
      type: "warning",
      value: value
    };
  }
};
/* harmony default export */ const stream_events_generators = (EVENTS);
// EXTERNAL MODULE: ./node_modules/next-tick/index.js
var next_tick = __webpack_require__(7473);
var next_tick_default = /*#__PURE__*/__webpack_require__.n(next_tick);
;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/takeWhile.js
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


function takeWhile(predicate, inclusive) {
    if (inclusive === void 0) {
        inclusive = false;
    }
    return function (source) {
        return source.lift(new TakeWhileOperator(predicate, inclusive));
    };
}
var TakeWhileOperator = /*@__PURE__*/ (function () {
    function TakeWhileOperator(predicate, inclusive) {
        this.predicate = predicate;
        this.inclusive = inclusive;
    }
    TakeWhileOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate, this.inclusive));
    };
    return TakeWhileOperator;
}());
var TakeWhileSubscriber = /*@__PURE__*/ (function (_super) {
    tslib_es6/* __extends */.ZT(TakeWhileSubscriber, _super);
    function TakeWhileSubscriber(destination, predicate, inclusive) {
        var _this = _super.call(this, destination) || this;
        _this.predicate = predicate;
        _this.inclusive = inclusive;
        _this.index = 0;
        return _this;
    }
    TakeWhileSubscriber.prototype._next = function (value) {
        var destination = this.destination;
        var result;
        try {
            result = this.predicate(value, this.index++);
        }
        catch (err) {
            destination.error(err);
            return;
        }
        this.nextOrComplete(value, result);
    };
    TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {
        var destination = this.destination;
        if (Boolean(predicateResult)) {
            destination.next(value);
        }
        else {
            if (this.inclusive) {
                destination.next(value);
            }
            destination.complete();
        }
    };
    return TakeWhileSubscriber;
}(Subscriber/* Subscriber */.L));
//# sourceMappingURL=takeWhile.js.map

;// CONCATENATED MODULE: ./src/core/stream/representation/check_for_discontinuity.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Check if there is a soon-to-be-encountered discontinuity in the buffer that
 * won't be filled by any future segment.
 * This function will only check discontinuities for the given `checkedRange`.
 *
 * @param {Object} content - The content we are currently loading.
 * @param {Object} checkedRange - The time range that will be checked for
 * discontinuities.
 * Both `nextSegmentStart` and `bufferedSegments` arguments can only refer to
 * that range.
 * @param {number|null} nextSegmentStart - The start time in seconds of the next
 * not-yet-pushed segment that can be pushed, in the limits of `checkedRange`.
 * This includes segments which have not been loaded or pushed yet, but also
 * segments which might be re-downloaded because currently incomplete in the
 * buffer, the point being to know what is the earliest time in the buffer where
 * a segment might be pushed in the future.
 * `null` if no segment in `checkedRange` will be pushed under current buffer's
 * conditions.
 * @param {boolean} hasFinishedLoading - if `true`, all segments for the current
 * Period have been loaded and none will be loaded in the future under the
 * current buffer's state.
 * @param {Array.<Object>} bufferedSegments - Information about every segments
 * currently in the buffer, in chronological order.
 * Only segments overlapping with the given `checkedRange` will be looked at,
 * though the array given can be larger.
 */

function checkForDiscontinuity(content, checkedRange, nextSegmentStart, hasFinishedLoading, bufferedSegments) {
  var period = content.period,
      adaptation = content.adaptation,
      representation = content.representation; // `bufferedSegments` might also contains segments which are before
  // `checkedRange`.
  // Here we want the first one that goes over `checkedRange.start`, to  see
  // if there's a discontinuity at the beginning in the buffer

  var nextBufferedInRangeIdx = getIndexOfFirstChunkInRange(bufferedSegments, checkedRange);

  if (nextBufferedInRangeIdx === null) {
    // There's no segment currently buffered for the current range.
    if (nextSegmentStart === null) {
      // No segment to load in that range
      // Check if we are in a discontinuity at the end of the current Period
      if (hasFinishedLoading && period.end !== undefined && checkedRange.end >= period.end) {
        return {
          start: undefined,
          end: null
        }; // discontinuity to Period's end
      } // Check that there is a discontinuity announced in the Manifest there


      var discontinuityEnd = representation.index.checkDiscontinuity(checkedRange.start);

      if (discontinuityEnd !== null) {
        return {
          start: undefined,
          end: discontinuityEnd
        };
      }
    }

    return null;
  }

  var nextBufferedSegment = bufferedSegments[nextBufferedInRangeIdx]; // Check if there is a hole that won't be filled before `nextSegmentStart`

  if ( // Next buffered segment starts after the start of the current range
  nextBufferedSegment.bufferedStart !== undefined && nextBufferedSegment.bufferedStart > checkedRange.start && ( // and no segment will fill in that hole
  nextSegmentStart === null || nextBufferedSegment.infos.segment.end <= nextSegmentStart)) {
    log/* default.debug */.Z.debug("RS: current discontinuity encountered", adaptation.type, nextBufferedSegment.bufferedStart);
    return {
      start: undefined,
      end: nextBufferedSegment.bufferedStart
    };
  } // Check if there's a discontinuity BETWEEN segments of the current range


  var nextHoleIdx = getIndexOfFirstDiscontinuityBetweenChunks(bufferedSegments, checkedRange, nextBufferedInRangeIdx + 1); // If there was a hole between two consecutives segments, and if this hole
  // comes before the next segment to load, there is a discontinuity (that hole!)

  if (nextHoleIdx !== null && (nextSegmentStart === null || bufferedSegments[nextHoleIdx].infos.segment.end <= nextSegmentStart)) {
    var start = bufferedSegments[nextHoleIdx - 1].bufferedEnd;
    var end = bufferedSegments[nextHoleIdx].bufferedStart;
    log/* default.debug */.Z.debug("RS: future discontinuity encountered", adaptation.type, start, end);
    return {
      start: start,
      end: end
    };
  } else if (nextSegmentStart === null) {
    // If no hole between segments and no segment to load, check for a
    // discontinuity at the end of the Period
    if (hasFinishedLoading && period.end !== undefined) {
      // Period is finished
      if (checkedRange.end < period.end) {
        // We've not reached the Period's end yet
        return null;
      } // Check if the last buffered segment ends before this Period's end
      // In which case there is a discontinuity between those


      var lastBufferedInPeriodIdx = getIndexOfLastChunkInPeriod(bufferedSegments, period.end);

      if (lastBufferedInPeriodIdx !== null) {
        var lastSegment = bufferedSegments[lastBufferedInPeriodIdx];

        if (lastSegment.bufferedEnd !== undefined && lastSegment.bufferedEnd < period.end) {
          log/* default.debug */.Z.debug("RS: discontinuity encountered at the end of the current period", adaptation.type, lastSegment.bufferedEnd, period.end);
          return {
            start: lastSegment.bufferedEnd,
            end: null
          };
        }
      }
    } // At last, check if we don't have a discontinuity at the end of the current
    // range, announced in the Manifest, that is too big to be detected through
    // the previous checks.


    if (period.end !== undefined && checkedRange.end >= period.end) {
      return null; // The previous checks should have taken care of those
    }

    for (var bufIdx = bufferedSegments.length - 1; bufIdx >= 0; bufIdx--) {
      var bufSeg = bufferedSegments[bufIdx];

      if (bufSeg.bufferedStart === undefined) {
        break;
      }

      if (bufSeg.bufferedStart < checkedRange.end) {
        if (bufSeg.bufferedEnd !== undefined && bufSeg.bufferedEnd < checkedRange.end) {
          var _discontinuityEnd = representation.index.checkDiscontinuity(checkedRange.end);

          if (_discontinuityEnd !== null) {
            return {
              start: bufSeg.bufferedEnd,
              end: _discontinuityEnd
            };
          }
        }

        return null;
      }
    }
  }

  return null;
}
/**
 * Returns the index of the first element in `bufferedChunks` that is part of
 * `range` (starts before it ends and ends after it starts).
 *
 * Returns `null` if no element is found in that range or if we cannot know the
 * index of the first element in it.
 * @param {Array.<Object>} bufferedChunks
 * @param {Object} range
 * @returns {number|null}
 */

function getIndexOfFirstChunkInRange(bufferedChunks, range) {
  for (var bufIdx = 0; bufIdx < bufferedChunks.length; bufIdx++) {
    var bufSeg = bufferedChunks[bufIdx];

    if (bufSeg.bufferedStart === undefined || bufSeg.bufferedEnd === undefined || bufSeg.bufferedStart >= range.end) {
      return null;
    }

    if (bufSeg.bufferedEnd > range.start) {
      return bufIdx;
    }
  }

  return null;
}
/**
 * Returns the index of the first element in `bufferedChunks` which is not
 * immediately consecutive to the one before it.
 *
 * `startFromIndex` is the index of the first segment that will be checked with
 * the element coming before it. As such, it has to be superior to 0.
 *
 * If the element at `startFromIndex` comes immediately after the one before it,
 * the element at `startFromIndex + 1` will be checked instead and so on until a
 * segment completely out of `checkedRange` (which starts after it) is detected.
 *
 * If no hole between elements is found, `null` is returned.
 * @param {Array.<Object>} bufferedChunks
 * @param {Object} range
 * @param {number} startFromIndex
 * @returns {number|null}
 */


function getIndexOfFirstDiscontinuityBetweenChunks(bufferedChunks, range, startFromIndex) {
  if (startFromIndex <= 0) {
    log/* default.error */.Z.error("RS: Asked to check a discontinuity before the first chunk.");
    return null;
  }

  for (var bufIdx = startFromIndex; bufIdx < bufferedChunks.length; bufIdx++) {
    var currSegment = bufferedChunks[bufIdx];
    var prevSegment = bufferedChunks[bufIdx - 1]; // Exit as soon we miss information or when we go further than `checkedRange`

    if (currSegment.bufferedStart === undefined || prevSegment.bufferedEnd === undefined || currSegment.bufferedStart >= range.end) {
      return null;
    } // If there is a hole between two consecutive buffered segment


    if (currSegment.bufferedStart - prevSegment.bufferedEnd > 0) {
      return bufIdx;
    }
  }

  return null;
}
/**
 * Returns the index of the last element in `bufferedChunks` that is part of
 * `range` (starts before it ends and ends after it starts).
 *
 * Returns `null` if no element is found in that range or if we cannot know the
 * index of the last element in it.
 * @param {Array.<Object>} bufferedChunks
 * @param {number} periodEnd
 * @returns {number|null}
 */


function getIndexOfLastChunkInPeriod(bufferedChunks, periodEnd) {
  for (var bufIdx = bufferedChunks.length - 1; bufIdx >= 0; bufIdx--) {
    var bufSeg = bufferedChunks[bufIdx];

    if (bufSeg.bufferedStart === undefined) {
      return null;
    }

    if (bufSeg.bufferedStart < periodEnd) {
      return bufIdx;
    }
  }

  return null;
}
;// CONCATENATED MODULE: ./src/compat/should_append_buffer_after_padding.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * When the player decides to load another quality and replace
 * currently buffered one, it may append buffer on current playback time.
 *
 * On Safari, with HSS contents, this provoques green macro-block screens
 * during the transition. To avoid this situation, we decide not to load a
 * segment if it may be pushed during playback time. We should not buffer
 * under a certain padding from the current time.
 */

var shouldAppendBufferAfterPadding = browser_detection/* isSafari */.G6;
/* harmony default export */ const should_append_buffer_after_padding = (shouldAppendBufferAfterPadding);
// EXTERNAL MODULE: ./src/manifest/are_same_content.ts
var are_same_content = __webpack_require__(5952);
;// CONCATENATED MODULE: ./src/core/stream/representation/get_needed_segments.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// eslint-disable-next-line max-len





var CONTENT_REPLACEMENT_PADDING = config/* default.CONTENT_REPLACEMENT_PADDING */.Z.CONTENT_REPLACEMENT_PADDING,
    BITRATE_REBUFFERING_RATIO = config/* default.BITRATE_REBUFFERING_RATIO */.Z.BITRATE_REBUFFERING_RATIO,
    MAX_TIME_MISSING_FROM_COMPLETE_SEGMENT = config/* default.MAX_TIME_MISSING_FROM_COMPLETE_SEGMENT */.Z.MAX_TIME_MISSING_FROM_COMPLETE_SEGMENT,
    MINIMUM_SEGMENT_SIZE = config/* default.MINIMUM_SEGMENT_SIZE */.Z.MINIMUM_SEGMENT_SIZE;
/**
 * Epsilon compensating for rounding errors when comparing the start and end
 * time of multiple segments.
 */

var ROUNDING_ERROR = Math.min(1 / 60, MINIMUM_SEGMENT_SIZE);
/**
 * Return the list of segments that can currently be downloaded to fill holes
 * in the buffer in the given range, including already-pushed segments currently
 * incomplete in the buffer.
 * This list might also include already-loaded segments in a higher bitrate,
 * according to the given configuration.
 * Excludes segment that are already being pushed.
 * @param {Object} args
 * @returns {Array.<Object>}
 */

function getNeededSegments(_ref) {
  var content = _ref.content,
      currentPlaybackTime = _ref.currentPlaybackTime,
      fastSwitchThreshold = _ref.fastSwitchThreshold,
      neededRange = _ref.neededRange,
      segmentsBeingPushed = _ref.segmentsBeingPushed,
      bufferedSegments = _ref.bufferedSegments;
  var representation = content.representation;
  var availableSegmentsForRange = representation.index.getSegments(neededRange.start, neededRange.end - neededRange.start); // Remove from `bufferedSegments` any segments we would prefer to replace:
  //   - segments in the wrong track / bad quality
  //   - garbage-collected segments

  var segmentsToKeep = bufferedSegments.filter(function (bufferedSegment) {
    return !shouldContentBeReplaced(bufferedSegment.infos, content, currentPlaybackTime, fastSwitchThreshold);
  }).filter(function (currentSeg, i, consideredSegments) {
    var prevSeg = i === 0 ? null : consideredSegments[i - 1];
    var nextSeg = i >= consideredSegments.length - 1 ? null : consideredSegments[i + 1];
    return !isStartGarbageCollected(currentSeg, prevSeg, neededRange.start) && !isEndGarbageCollected(currentSeg, nextSeg, neededRange.end);
  });
  var segmentsToDownload = availableSegmentsForRange.filter(function (segment) {
    var contentObject = (0,object_assign/* default */.Z)({
      segment: segment
    }, content); // First, check that the segment is not already being pushed

    if (segmentsBeingPushed.length > 0) {
      var isAlreadyBeingPushed = segmentsBeingPushed.some(function (pendingSegment) {
        return (0,are_same_content/* default */.Z)(contentObject, pendingSegment);
      });

      if (isAlreadyBeingPushed) {
        return false;
      }
    }

    var duration = segment.duration,
        time = segment.time,
        end = segment.end;

    if (segment.isInit) {
      return true; // never skip initialization segments
    }

    if (duration < MINIMUM_SEGMENT_SIZE) {
      return false; // too small, don't download
    } // Check if the same segment from another Representation is not already
    // being pushed.


    if (segmentsBeingPushed.length > 0) {
      var waitForPushedSegment = segmentsBeingPushed.some(function (pendingSegment) {
        if (pendingSegment.period.id !== content.period.id || pendingSegment.adaptation.id !== content.adaptation.id) {
          return false;
        }

        var oldSegment = pendingSegment.segment;

        if (oldSegment.time - ROUNDING_ERROR > time) {
          return false;
        }

        if (oldSegment.end + ROUNDING_ERROR < end) {
          return false;
        }

        return !shouldContentBeReplaced(pendingSegment, contentObject, currentPlaybackTime, fastSwitchThreshold);
      });

      if (waitForPushedSegment) {
        return false;
      }
    } // check if the segment is already downloaded


    for (var i = 0; i < segmentsToKeep.length; i++) {
      var completeSeg = segmentsToKeep[i];
      var areFromSamePeriod = completeSeg.infos.period.id === content.period.id; // Check if content are from same period, as there can't be overlapping
      // periods, we should consider a segment as already downloaded if
      // it is from same period (but can be from different adaptation or
      // representation)

      if (areFromSamePeriod) {
        var completeSegInfos = completeSeg.infos.segment;

        if (time - completeSegInfos.time > -ROUNDING_ERROR && completeSegInfos.end - end > -ROUNDING_ERROR) {
          return false; // already downloaded
        }
      }
    } // check if there is an hole in place of the segment currently


    for (var _i = 0; _i < segmentsToKeep.length; _i++) {
      var _completeSeg = segmentsToKeep[_i];

      if (_completeSeg.end > time) {
        // `true` if `completeSeg` starts too far after `time`
        return _completeSeg.start > time + ROUNDING_ERROR || // `true` if `completeSeg` ends too soon before `end`
        getLastContiguousSegment(segmentsToKeep, _i).end < end - ROUNDING_ERROR;
      }
    }

    return true;
  });
  return segmentsToDownload;
}
/**
 * From the given array of buffered chunks (`bufferedSegments`) returns the last
 * buffered chunk contiguous with the one at the `startIndex` index given.
 * @param {Array.<Object>}
 * @param {number} startIndex
 * @returns {Object}
 */

function getLastContiguousSegment(bufferedSegments, startIndex) {
  var j = startIndex + 1; // go through all contiguous segments and take the last one

  while (j < bufferedSegments.length - 1 && bufferedSegments[j - 1].end + ROUNDING_ERROR > bufferedSegments[j].start) {
    j++;
  }

  j--; // index of last contiguous segment

  return bufferedSegments[j];
}
/**
 * Returns `true` if segments linked to the given `oldContent` currently present
 * in the buffer should be replaced by segments coming from `currentContent`.
 * @param {Object} oldContent
 * @param {Object} currentContent
 * @param {number} currentPlaybackTime
 * @param {number} [fastSwitchThreshold]
 * @returns {boolean}
 */


function shouldContentBeReplaced(oldContent, currentContent, currentPlaybackTime, fastSwitchThreshold) {
  if (oldContent.period.id !== currentContent.period.id) {
    return false; // keep segments from another Period by default.
  }

  var segment = oldContent.segment;

  if (should_append_buffer_after_padding && segment.time < currentPlaybackTime + CONTENT_REPLACEMENT_PADDING) {
    return false;
  }

  if (oldContent.adaptation.id !== currentContent.adaptation.id) {
    return true; // replace segments from another Adaptation
  }

  return canFastSwitch(oldContent.representation, currentContent.representation, fastSwitchThreshold);
}
/**
 * Returns `true` if segments from the new Representation can replace
 * previously-loaded segments from the old Representation given.
 *
 * This behavior is called "fast-switching".
 * @param {Object} oldSegmentRepresentation
 * @param {Object} newSegmentRepresentation
 * @param {number|undefined} fastSwitchThreshold
 * @returns {boolean}
 */


function canFastSwitch(oldSegmentRepresentation, newSegmentRepresentation, fastSwitchThreshold) {
  var oldContentBitrate = oldSegmentRepresentation.bitrate;

  if (fastSwitchThreshold === undefined) {
    // only re-load comparatively-poor bitrates for the same Adaptation.
    var bitrateCeil = oldContentBitrate * BITRATE_REBUFFERING_RATIO;
    return newSegmentRepresentation.bitrate > bitrateCeil;
  }

  return oldContentBitrate < fastSwitchThreshold && newSegmentRepresentation.bitrate > oldContentBitrate;
}
/**
 * From buffered segment information, return `true` if the given `currentSeg`
 * might have been garbage collected at the start.
 * Return `false` if the segment is complete at least from `maximumStartTime`.
 * @param {Object} currentSeg - The segment information for the segment in
 * question.
 * @param {Object|null} prevSeg - The segment information for the previous
 * buffered segment, if one (`null` if none).
 * @param {number} maximumStartTime - Only consider the data after that time.
 * If `currentSeg` has only been garbage collected for some data which is before
 * that time, we will return `false`.
 */


function isStartGarbageCollected(currentSeg, prevSeg, maximumStartTime) {
  if (currentSeg.bufferedStart === undefined) {
    log/* default.warn */.Z.warn("Stream: Start of a segment unknown. " + "Assuming it is garbage collected by default.", currentSeg);
    return true;
  }

  if (prevSeg !== null && prevSeg.bufferedEnd !== undefined && currentSeg.bufferedStart - prevSeg.bufferedEnd < 0.1) {
    return false;
  }

  if (maximumStartTime < currentSeg.bufferedStart && currentSeg.bufferedStart - currentSeg.start > MAX_TIME_MISSING_FROM_COMPLETE_SEGMENT) {
    log/* default.info */.Z.info("Stream: The start of the wanted segment has been garbage collected", currentSeg);
    return true;
  }

  return false;
}
/**
 * From buffered segment information, return `true` if the given `currentSeg`
 * might have been garbage collected at the end.
 * Return `false` if the segment is complete at least until `minimumEndTime`.
 * @param {Object} currentSeg - The segment information for the segment in
 * question.
 * @param {Object|null} nextSeg - The segment information for the next buffered
 * segment, if one (`null` if none).
 * @param {number} minimumEndTime - Only consider the data before that time.
 * If `currentSeg` has only been garbage collected for some data which is after
 * that time, we will return `false`.
 */


function isEndGarbageCollected(currentSeg, nextSeg, minimumEndTime) {
  if (currentSeg.bufferedEnd === undefined) {
    log/* default.warn */.Z.warn("Stream: End of a segment unknown. " + "Assuming it is garbage collected by default.", currentSeg);
    return true;
  }

  if (nextSeg !== null && nextSeg.bufferedStart !== undefined && nextSeg.bufferedStart - currentSeg.bufferedEnd < 0.1) {
    return false;
  }

  if (minimumEndTime > currentSeg.bufferedEnd && currentSeg.end - currentSeg.bufferedEnd > MAX_TIME_MISSING_FROM_COMPLETE_SEGMENT) {
    log/* default.info */.Z.info("Stream: The end of the wanted segment has been garbage collected", currentSeg);
    return true;
  }

  return false;
}
;// CONCATENATED MODULE: ./src/core/stream/representation/get_segment_priority.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var SEGMENT_PRIORITIES_STEPS = config/* default.SEGMENT_PRIORITIES_STEPS */.Z.SEGMENT_PRIORITIES_STEPS;
/**
 * Calculate the priority number for a given time, in function of the distance
 * with the current time.
 *
 * The lower is this number, the higher should be the priority of the request.
 *
 * Note that a `timeWanted` given behind the current time will always have the
 * highest priority.
 * @param {number} timeWanted
 * @param {Object} clockTick
 * @returns {number}
 */

function getSegmentPriority(timeWanted, clockTick) {
  var currentTime = clockTick.position + clockTick.wantedTimeOffset;
  var distance = timeWanted - currentTime;

  for (var priority = 0; priority < SEGMENT_PRIORITIES_STEPS.length; priority++) {
    if (distance < SEGMENT_PRIORITIES_STEPS[priority]) {
      return priority;
    }
  }

  return SEGMENT_PRIORITIES_STEPS.length;
}
;// CONCATENATED MODULE: ./src/core/stream/representation/get_buffer_status.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





var get_buffer_status_MINIMUM_SEGMENT_SIZE = config/* default.MINIMUM_SEGMENT_SIZE */.Z.MINIMUM_SEGMENT_SIZE;
/**
 * Checks on the current buffered data for the given type and Period
 * and returns what should be done to fill the buffer according to the buffer
 * goal, the Representation chosen, etc.
 * Also emits discontinuities if found, which are parts of the buffer that won't
 * be filled by any segment, even in the future.
 *
 * @param {Object} content
 * @param {Object} tick
 * @param {number|undefined} fastSwitchThreshold
 * @param {number} bufferGoal
 * @param {Object} segmentBuffer
 * @returns {Object}
 */

function getBufferStatus(content, tick, fastSwitchThreshold, bufferGoal, segmentBuffer) {
  var _a;

  var period = content.period,
      representation = content.representation;
  segmentBuffer.synchronizeInventory();
  var wantedStartPosition = tick.position + tick.wantedTimeOffset;
  var wantedEndPosition = wantedStartPosition + bufferGoal;
  var neededRange = {
    start: Math.max(wantedStartPosition, period.start),
    end: Math.min(wantedEndPosition, (_a = period.end) !== null && _a !== void 0 ? _a : Infinity)
  };
  var shouldRefreshManifest = representation.index.shouldRefresh(wantedStartPosition, wantedEndPosition);
  /**
   * Every segment awaiting an "EndOfSegment" operation, which indicates that a
   * completely-loaded segment is still being pushed to the SegmentBuffer.
   */

  var segmentsBeingPushed = segmentBuffer.getPendingOperations().filter(function (operation) {
    return operation.type === types/* SegmentBufferOperation.EndOfSegment */.f.EndOfSegment;
  }).map(function (operation) {
    return operation.value;
  });
  /** Data on every segments buffered around `neededRange`. */

  var bufferedSegments = getPlayableBufferedSegments({
    start: Math.max(neededRange.start - 0.5, 0),
    end: neededRange.end + 0.5
  }, segmentBuffer.getInventory());
  /** List of segments we will need to download. */

  var neededSegments = getNeededSegments({
    content: content,
    currentPlaybackTime: tick.getCurrentTime(),
    fastSwitchThreshold: fastSwitchThreshold,
    neededRange: neededRange,
    bufferedSegments: bufferedSegments,
    segmentsBeingPushed: segmentsBeingPushed
  }).map(function (segment) {
    return {
      priority: getSegmentPriority(segment.time, tick),
      segment: segment
    };
  });
  /**
   * `true` if the current `RepresentationStream` has loaded all the
   * needed segments for this Representation until the end of the Period.
   */

  var hasFinishedLoading;
  var lastPosition = representation.index.getLastPosition();

  if (!representation.index.isInitialized() || period.end === undefined || neededSegments.length > 0) {
    hasFinishedLoading = false;
  } else {
    if (lastPosition === undefined) {
      // We do not know the end of this index.
      // If we reached the end of the period, check that all segments are
      // available.
      hasFinishedLoading = neededRange.end >= period.end && representation.index.isFinished();
    } else if (lastPosition === null) {
      // There is no available segment in the index currently. If the index
      // tells us it has finished generating new segments, we're done.
      hasFinishedLoading = representation.index.isFinished();
    } else {
      // We have a declared end. Check that our range went until the last
      // position available in the index. If that's the case and we're left
      // with no segments after filtering them, it means we already have
      // downloaded the last segments and have nothing left to do: full.
      var endOfRange = period.end !== undefined ? Math.min(period.end, lastPosition) : lastPosition;
      hasFinishedLoading = neededRange.end >= endOfRange && representation.index.isFinished();
    }
  }

  var imminentDiscontinuity;

  if (!representation.index.isInitialized() || // TODO better handle contents not chronologically generated
  !representation.index.areSegmentsChronologicallyGenerated() && !hasFinishedLoading) {
    // We might be missing information about future segments
    imminentDiscontinuity = null;
  } else {
    /**
     * Start time in seconds of the next available not-yet pushed segment.
     * `null` if no segment is wanted for the current wanted range.
     */
    var nextSegmentStart = null;

    if (segmentsBeingPushed.length > 0) {
      nextSegmentStart = Math.min.apply(Math, segmentsBeingPushed.map(function (info) {
        return info.segment.time;
      }));
    }

    if (neededSegments.length > 0) {
      nextSegmentStart = nextSegmentStart !== null ? Math.min(nextSegmentStart, neededSegments[0].segment.time) : neededSegments[0].segment.time;
    }

    imminentDiscontinuity = checkForDiscontinuity(content, neededRange, nextSegmentStart, hasFinishedLoading, bufferedSegments);
  }

  return {
    imminentDiscontinuity: imminentDiscontinuity,
    hasFinishedLoading: hasFinishedLoading,
    neededSegments: neededSegments,
    shouldRefreshManifest: shouldRefreshManifest
  };
}
/**
 * From the given SegmentInventory, filters the "playable" (in a supported codec
 * and not known to be undecipherable) buffered Segment Objects which overlap
 * with the given range.
 * @param {Object} neededRange
 * @param {Array.<Object>} segmentInventory
 * @returns {Array.<Object>}
 */

function getPlayableBufferedSegments(neededRange, segmentInventory) {
  var segmentRoundingError = Math.max(1 / 60, get_buffer_status_MINIMUM_SEGMENT_SIZE);
  var minEnd = neededRange.start + segmentRoundingError;
  var maxStart = neededRange.end - segmentRoundingError;
  var overlappingChunks = [];

  for (var i = segmentInventory.length - 1; i >= 0; i--) {
    var eltInventory = segmentInventory[i];
    var representation = eltInventory.infos.representation;

    if (!eltInventory.partiallyPushed && representation.decipherable !== false && representation.isSupported) {
      var inventorySegment = eltInventory.infos.segment;
      var eltInventoryStart = inventorySegment.time / inventorySegment.timescale;
      var eltInventoryEnd = inventorySegment.duration == null ? eltInventory.end : eltInventoryStart + inventorySegment.duration / inventorySegment.timescale;

      if (eltInventoryEnd > minEnd && eltInventoryStart < maxStart || eltInventory.end > minEnd && eltInventory.start < maxStart) {
        overlappingChunks.unshift(eltInventory);
      }
    }
  }

  return overlappingChunks;
}
;// CONCATENATED MODULE: ./src/core/stream/representation/force_garbage_collection.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





var GC_GAP_CALM = config/* default.BUFFER_GC_GAPS.CALM */.Z.BUFFER_GC_GAPS.CALM;
var GC_GAP_BEEFY = config/* default.BUFFER_GC_GAPS.BEEFY */.Z.BUFFER_GC_GAPS.BEEFY;
/**
 * Run the garbage collector.
 *
 * Try to clean up buffered ranges from a low gcGap at first.
 * If it does not succeed to clean up space, use a higher gcCap.
 *
 * @param {Observable} timings$
 * @param {Object} bufferingQueue
 * @returns {Observable}
 */

function forceGarbageCollection(timings$, bufferingQueue) {
  // wait for next timing event
  return timings$.pipe((0,take/* take */.q)(1), (0,mergeMap/* mergeMap */.zg)(function (timing) {
    log/* default.warn */.Z.warn("Stream: Running garbage collector");
    var buffered = bufferingQueue.getBufferedRanges();
    var cleanedupRanges = selectGCedRanges(timing.position, buffered, GC_GAP_CALM); // more aggressive GC if we could not find any range to clean

    if (cleanedupRanges.length === 0) {
      cleanedupRanges = selectGCedRanges(timing.position, buffered, GC_GAP_BEEFY);
    }

    log/* default.debug */.Z.debug("Stream: GC cleaning", cleanedupRanges);
    return (0,from/* from */.D)(cleanedupRanges.map(function (_ref) {
      var start = _ref.start,
          end = _ref.end;
      return bufferingQueue.removeBuffer(start, end);
    })).pipe((0,concatAll/* concatAll */.u)());
  }));
}
/**
 * Buffer garbage collector algorithm.
 *
 * Tries to free up some part of the ranges that are distant from the current
 * playing time.
 * See: https://w3c.github.io/media-source/#sourcebuffer-prepare-append
 *
 * @param {Number} position
 * @param {TimeRanges} buffered - current buffered ranges
 * @param {Number} gcGap - delta gap from current timestamp from which we
 * should consider cleaning up.
 * @returns {Array.<Object>} - Ranges selected for clean up
 */

function selectGCedRanges(position, buffered, gcGap) {
  var _getInnerAndOuterTime = (0,ranges/* getInnerAndOuterTimeRanges */.F_)(buffered, position),
      innerRange = _getInnerAndOuterTime.innerRange,
      outerRanges = _getInnerAndOuterTime.outerRanges;

  var cleanedupRanges = []; // start by trying to remove all ranges that do not contain the
  // current time and respect the gcGap
  // respect the gcGap? FIXME?

  for (var i = 0; i < outerRanges.length; i++) {
    var outerRange = outerRanges[i];

    if (position - gcGap < outerRange.end) {
      cleanedupRanges.push(outerRange);
    } else if (position + gcGap > outerRange.start) {
      cleanedupRanges.push(outerRange);
    }
  } // try to clean up some space in the current range


  if (innerRange != null) {
    log/* default.debug */.Z.debug("Stream: GC removing part of inner range", cleanedupRanges);

    if (position - gcGap > innerRange.start) {
      cleanedupRanges.push({
        start: innerRange.start,
        end: position - gcGap
      });
    }

    if (position + gcGap < innerRange.end) {
      cleanedupRanges.push({
        start: position + gcGap,
        end: innerRange.end
      });
    }
  }

  return cleanedupRanges;
}
;// CONCATENATED MODULE: ./src/core/stream/representation/append_segment_to_buffer.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This file allows any Stream to push data to a SegmentBuffer.
 */




/**
 * Append a segment to the given segmentBuffer.
 * If it leads to a QuotaExceededError, try to run our custom range
 * _garbage collector_ then retry.
 *
 * @param {Observable} clock$
 * @param {Object} segmentBuffer
 * @param {Object} dataInfos
 * @returns {Observable}
 */

function appendSegmentToBuffer(clock$, segmentBuffer, dataInfos) {
  var append$ = segmentBuffer.pushChunk(dataInfos);
  return append$.pipe((0,catchError/* catchError */.K)(function (appendError) {
    if (!(appendError instanceof Error) || appendError.name !== "QuotaExceededError") {
      var reason = appendError instanceof Error ? appendError.toString() : "An unknown error happened when pushing content";
      throw new media_error/* default */.Z("BUFFER_APPEND_ERROR", reason);
    }

    return (0,concat/* concat */.z)(forceGarbageCollection(clock$, segmentBuffer).pipe((0,ignoreElements/* ignoreElements */.l)()), append$).pipe((0,catchError/* catchError */.K)(function (forcedGCError) {
      var reason = forcedGCError instanceof Error ? forcedGCError.toString() : "Could not clean the buffer";
      throw new media_error/* default */.Z("BUFFER_FULL_ERROR", reason);
    }));
  }));
}
;// CONCATENATED MODULE: ./src/core/stream/representation/push_init_segment.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * Push the initialization segment to the SegmentBuffer.
 * The Observable returned:
 *   - emit an event once the segment has been pushed.
 *   - throws on Error.
 * @param {Object} args
 * @returns {Observable}
 */

function pushInitSegment(_ref) {
  var clock$ = _ref.clock$,
      content = _ref.content,
      segment = _ref.segment,
      segmentData = _ref.segmentData,
      segmentBuffer = _ref.segmentBuffer;
  return (0,defer/* defer */.P)(function () {
    if (segmentData === null) {
      return empty/* EMPTY */.E;
    }

    var codec = content.representation.getMimeTypeString();
    var data = {
      initSegment: segmentData,
      chunk: null,
      timestampOffset: 0,
      appendWindow: [undefined, undefined],
      codec: codec
    };
    return appendSegmentToBuffer(clock$, segmentBuffer, {
      data: data,
      inventoryInfos: null
    }).pipe((0,map/* map */.U)(function () {
      var buffered = segmentBuffer.getBufferedRanges();
      return stream_events_generators.addedSegment(content, segment, buffered, segmentData);
    }));
  });
}
;// CONCATENATED MODULE: ./src/core/stream/representation/push_media_segment.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */






var APPEND_WINDOW_SECURITIES = config/* default.APPEND_WINDOW_SECURITIES */.Z.APPEND_WINDOW_SECURITIES;
/**
 * Push a given media segment (non-init segment) to a SegmentBuffer.
 * The Observable returned:
 *   - emit an event once the segment has been pushed.
 *   - throws on Error.
 * @param {Object} args
 * @returns {Observable}
 */

function pushMediaSegment(_ref) {
  var clock$ = _ref.clock$,
      content = _ref.content,
      initSegmentData = _ref.initSegmentData,
      parsedSegment = _ref.parsedSegment,
      segment = _ref.segment,
      segmentBuffer = _ref.segmentBuffer;
  return (0,defer/* defer */.P)(function () {
    var _a, _b;

    if (parsedSegment.chunkData === null) {
      return empty/* EMPTY */.E;
    }

    var chunkData = parsedSegment.chunkData,
        chunkInfos = parsedSegment.chunkInfos,
        chunkOffset = parsedSegment.chunkOffset,
        appendWindow = parsedSegment.appendWindow;
    var codec = content.representation.getMimeTypeString(); // Cutting exactly at the start or end of the appendWindow can lead to
    // cases of infinite rebuffering due to how browser handle such windows.
    // To work-around that, we add a small offset before and after those.

    var safeAppendWindow = [appendWindow[0] !== undefined ? Math.max(0, appendWindow[0] - APPEND_WINDOW_SECURITIES.START) : undefined, appendWindow[1] !== undefined ? appendWindow[1] + APPEND_WINDOW_SECURITIES.END : undefined];
    var data = {
      initSegment: initSegmentData,
      chunk: chunkData,
      timestampOffset: chunkOffset,
      appendWindow: safeAppendWindow,
      codec: codec
    };
    var estimatedStart = (_a = chunkInfos === null || chunkInfos === void 0 ? void 0 : chunkInfos.time) !== null && _a !== void 0 ? _a : segment.time;
    var estimatedDuration = (_b = chunkInfos === null || chunkInfos === void 0 ? void 0 : chunkInfos.duration) !== null && _b !== void 0 ? _b : segment.duration;
    var estimatedEnd = estimatedStart + estimatedDuration;

    if (safeAppendWindow[0] !== undefined) {
      estimatedStart = Math.max(estimatedStart, safeAppendWindow[0]);
    }

    if (safeAppendWindow[1] !== undefined) {
      estimatedEnd = Math.min(estimatedEnd, safeAppendWindow[1]);
    }

    var inventoryInfos = (0,object_assign/* default */.Z)({
      segment: segment,
      start: estimatedStart,
      end: estimatedEnd
    }, content);
    return appendSegmentToBuffer(clock$, segmentBuffer, {
      data: data,
      inventoryInfos: inventoryInfos
    }).pipe((0,map/* map */.U)(function () {
      var buffered = segmentBuffer.getBufferedRanges();
      return stream_events_generators.addedSegment(content, segment, buffered, chunkData);
    }));
  });
}
;// CONCATENATED MODULE: ./src/core/stream/representation/representation_stream.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This file allows to create RepresentationStreams.
 *
 * A RepresentationStream downloads and push segment for a single
 * Representation (e.g. a single video stream of a given quality).
 * It chooses which segments should be downloaded according to the current
 * position and what is currently buffered.
 */











/**
 * Build up buffer for a single Representation.
 *
 * Download and push segments linked to the given Representation according
 * to what is already in the SegmentBuffer and where the playback currently is.
 *
 * Multiple RepresentationStream observables can run on the same SegmentBuffer.
 * This allows for example smooth transitions between multiple periods.
 *
 * @param {Object} args
 * @returns {Observable}
 */

function RepresentationStream(_ref) {
  var bufferGoal$ = _ref.bufferGoal$,
      clock$ = _ref.clock$,
      content = _ref.content,
      fastSwitchThreshold$ = _ref.fastSwitchThreshold$,
      segmentBuffer = _ref.segmentBuffer,
      segmentFetcher = _ref.segmentFetcher,
      terminate$ = _ref.terminate$;
  var manifest = content.manifest,
      period = content.period,
      adaptation = content.adaptation,
      representation = content.representation;
  var bufferType = adaptation.type;
  var initSegment = representation.index.getInitSegment();
  /**
   * Saved initialization segment state for this representation.
   * `null` if the initialization segment hasn't been loaded yet.
   */

  var initSegmentObject = initSegment === null ? {
    initializationData: null,
    segmentProtections: [],
    initTimescale: undefined
  } : null;
  /** Segments queued for download in this RepresentationStream. */

  var downloadQueue = [];
  /** Emit to start/restart a downloading Queue. */

  var startDownloadingQueue$ = new ReplaySubject/* ReplaySubject */.t(1);
  /** Emit when the RepresentationStream asks to re-check which segments are needed. */

  var reCheckNeededSegments$ = new Subject/* Subject */.xQ();
  /**
   * Keep track of the information about the pending segment request.
   * `null` if no segment request is pending in that RepresentationStream.
   */

  var currentSegmentRequest = null;
  var status$ = (0,combineLatest/* combineLatest */.aj)([clock$, bufferGoal$, terminate$.pipe((0,take/* take */.q)(1), (0,startWith/* startWith */.O)(null)), reCheckNeededSegments$.pipe((0,startWith/* startWith */.O)(undefined))]).pipe(withLatestFrom(fastSwitchThreshold$), (0,mergeMap/* mergeMap */.zg)(function (_ref2) {
    var _ref2$ = _ref2[0],
        tick = _ref2$[0],
        bufferGoal = _ref2$[1],
        terminate = _ref2$[2],
        fastSwitchThreshold = _ref2[1];
    var status = getBufferStatus(content, tick, fastSwitchThreshold, bufferGoal, segmentBuffer);
    var neededSegments = status.neededSegments; // Add initialization segment if required

    if (!representation.index.isInitialized()) {
      if (initSegment === null) {
        log/* default.warn */.Z.warn("Stream: Uninitialized index without an initialization segment");
      } else if (initSegmentObject !== null) {
        log/* default.warn */.Z.warn("Stream: Uninitialized index with an already loaded " + "initialization segment");
      } else {
        neededSegments.unshift({
          segment: initSegment,
          priority: getSegmentPriority(period.start, tick)
        });
      }
    } else if (neededSegments.length > 0 && initSegment !== null && initSegmentObject === null) {
      // prepend initialization segment
      var initSegmentPriority = neededSegments[0].priority;
      neededSegments.unshift({
        segment: initSegment,
        priority: initSegmentPriority
      });
    }

    var mostNeededSegment = neededSegments[0];

    if (terminate !== null) {
      downloadQueue = [];

      if (terminate.urgent) {
        log/* default.debug */.Z.debug("Stream: urgent termination request, terminate.", bufferType);
        startDownloadingQueue$.complete(); // complete the downloading queue

        return (0,of.of)(stream_events_generators.streamTerminating());
      } else if (currentSegmentRequest === null) {
        log/* default.debug */.Z.debug("Stream: no request, terminate.", bufferType);
        startDownloadingQueue$.complete(); // complete the downloading queue

        return (0,of.of)(stream_events_generators.streamTerminating());
      } else if (mostNeededSegment === undefined || currentSegmentRequest.segment.id !== mostNeededSegment.segment.id) {
        log/* default.debug */.Z.debug("Stream: cancel request and terminate.", bufferType);
        startDownloadingQueue$.next(); // interrupt the current request

        startDownloadingQueue$.complete(); // complete the downloading queue

        return (0,of.of)(stream_events_generators.streamTerminating());
      } else if (currentSegmentRequest.priority !== mostNeededSegment.priority) {
        var _currentSegmentReques = currentSegmentRequest,
            request$ = _currentSegmentReques.request$;
        currentSegmentRequest.priority = mostNeededSegment.priority;
        segmentFetcher.updatePriority(request$, mostNeededSegment.priority);
      }

      log/* default.debug */.Z.debug("Stream: terminate after request.", bufferType);
    } else if (mostNeededSegment === undefined) {
      if (currentSegmentRequest !== null) {
        log/* default.debug */.Z.debug("Stream: interrupt segment request.", bufferType);
      }

      downloadQueue = [];
      startDownloadingQueue$.next(); // (re-)start with an empty queue
    } else if (currentSegmentRequest === null) {
      log/* default.debug */.Z.debug("Stream: start downloading queue.", bufferType);
      downloadQueue = neededSegments;
      startDownloadingQueue$.next(); // restart the queue
    } else if (currentSegmentRequest.segment.id !== mostNeededSegment.segment.id) {
      log/* default.debug */.Z.debug("Stream: restart download queue.", bufferType);
      downloadQueue = neededSegments;
      startDownloadingQueue$.next(); // restart the queue
    } else if (currentSegmentRequest.priority !== mostNeededSegment.priority) {
      log/* default.debug */.Z.debug("Stream: update request priority.", bufferType);
      var _currentSegmentReques2 = currentSegmentRequest,
          _request$ = _currentSegmentReques2.request$;
      currentSegmentRequest.priority = mostNeededSegment.priority;
      segmentFetcher.updatePriority(_request$, mostNeededSegment.priority);
    } else {
      log/* default.debug */.Z.debug("Stream: update downloading queue", bufferType); // Update the previous queue to be all needed segments but the first one,
      // for which a request is already pending

      downloadQueue = neededSegments.slice().splice(1, neededSegments.length);
    }

    var bufferStatusEvt = (0,of.of)({
      type: "stream-status",
      value: {
        period: period,
        position: tick.position,
        bufferType: bufferType,
        imminentDiscontinuity: status.imminentDiscontinuity,
        hasFinishedLoading: status.hasFinishedLoading,
        neededSegments: status.neededSegments
      }
    });
    return status.shouldRefreshManifest ? (0,concat/* concat */.z)((0,of.of)(stream_events_generators.needsManifestRefresh()), bufferStatusEvt) : bufferStatusEvt;
  }), takeWhile(function (e) {
    return e.type !== "stream-terminating";
  }, true));
  /**
   * Stream Queue:
   *   - download every segments queued sequentially
   *   - when a segment is loaded, append it to the SegmentBuffer
   */

  var streamQueue$ = startDownloadingQueue$.pipe((0,switchMap/* switchMap */.w)(function () {
    return downloadQueue.length > 0 ? loadSegmentsFromQueue() : empty/* EMPTY */.E;
  }), (0,mergeMap/* mergeMap */.zg)(onLoaderEvent));
  return (0,merge/* merge */.T)(status$, streamQueue$).pipe((0,share/* share */.B)());
  /**
   * Request every Segment in the ``downloadQueue`` on subscription.
   * Emit the data of a segment when a request succeeded.
   *
   * Important side-effects:
   *   - Mutates `currentSegmentRequest` when doing and finishing a request.
   *   - Will emit from reCheckNeededSegments$ Subject when it's done.
   *
   * Might emit warnings when a request is retried.
   *
   * Throws when the request will not be retried (configuration or un-retryable
   * error).
   * @returns {Observable}
   */

  function loadSegmentsFromQueue() {
    var requestNextSegment$ = (0,defer/* defer */.P)(function () {
      var currentNeededSegment = downloadQueue.shift();

      if (currentNeededSegment === undefined) {
        next_tick_default()(function () {
          reCheckNeededSegments$.next();
        });
        return empty/* EMPTY */.E;
      }

      var segment = currentNeededSegment.segment,
          priority = currentNeededSegment.priority;
      var context = {
        manifest: manifest,
        period: period,
        adaptation: adaptation,
        representation: representation,
        segment: segment
      };
      var request$ = segmentFetcher.createRequest(context, priority);
      currentSegmentRequest = {
        segment: segment,
        priority: priority,
        request$: request$
      };
      return request$.pipe((0,mergeMap/* mergeMap */.zg)(function (evt) {
        switch (evt.type) {
          case "warning":
            return (0,of.of)({
              type: "retry",
              value: {
                segment: segment,
                error: evt.value
              }
            });

          case "chunk-complete":
            currentSegmentRequest = null;
            return (0,of.of)({
              type: "end-of-segment",
              value: {
                segment: segment
              }
            });

          case "interrupted":
            log/* default.info */.Z.info("Stream: segment request interrupted temporarly.", segment);
            return empty/* EMPTY */.E;

          case "chunk":
            var initTimescale = initSegmentObject === null || initSegmentObject === void 0 ? void 0 : initSegmentObject.initTimescale;
            return evt.parse(initTimescale).pipe((0,map/* map */.U)(function (parserResponse) {
              return (0,object_assign/* default */.Z)({
                segment: segment
              }, parserResponse);
            }));

          case "ended":
            return requestNextSegment$;

          default:
            (0,assert_unreachable/* default */.Z)(evt);
        }
      }));
    });
    return requestNextSegment$.pipe(finalize(function () {
      currentSegmentRequest = null;
    }));
  }
  /**
   * React to event from `loadSegmentsFromQueue`.
   * @param {Object} evt
   * @returns {Observable}
   */


  function onLoaderEvent(evt) {
    var _a;

    switch (evt.type) {
      case "retry":
        return (0,concat/* concat */.z)((0,of.of)({
          type: "warning",
          value: evt.value.error
        }), (0,defer/* defer */.P)(function () {
          var retriedSegment = evt.value.segment;
          var index = representation.index;

          if (index.isSegmentStillAvailable(retriedSegment) === false) {
            reCheckNeededSegments$.next();
          } else if (index.canBeOutOfSyncError(evt.value.error, retriedSegment)) {
            return (0,of.of)(stream_events_generators.manifestMightBeOufOfSync());
          }

          return empty/* EMPTY */.E; // else, ignore.
        }));

      case "parsed-init-segment":
        initSegmentObject = evt.value;
        var protectedEvents$ = of.of.apply(void 0, evt.value.segmentProtections.map(function (segmentProt) {
          return stream_events_generators.protectedSegment(segmentProt);
        }));
        var pushEvent$ = pushInitSegment({
          clock$: clock$,
          content: content,
          segment: evt.segment,
          segmentData: evt.value.initializationData,
          segmentBuffer: segmentBuffer
        });
        return (0,merge/* merge */.T)(protectedEvents$, pushEvent$);

      case "parsed-segment":
        var initSegmentData = (_a = initSegmentObject === null || initSegmentObject === void 0 ? void 0 : initSegmentObject.initializationData) !== null && _a !== void 0 ? _a : null;
        return pushMediaSegment({
          clock$: clock$,
          content: content,
          initSegmentData: initSegmentData,
          parsedSegment: evt.value,
          segment: evt.segment,
          segmentBuffer: segmentBuffer
        });

      case "end-of-segment":
        {
          var segment = evt.value.segment;
          return segmentBuffer.endOfSegment((0,object_assign/* default */.Z)({
            segment: segment
          }, content)).pipe((0,ignoreElements/* ignoreElements */.l)());
        }

      default:
        (0,assert_unreachable/* default */.Z)(evt);
    }
  }
}
;// CONCATENATED MODULE: ./src/core/stream/representation/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* harmony default export */ const stream_representation = (RepresentationStream);
;// CONCATENATED MODULE: ./src/core/stream/utils.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Switching to another `Adaptation` and or `Representation` can necessitate a
 * complete reload of the MediaSource.
 *
 * This is done through the `INeedsMediaSourceReload` event which among other
 * things indicate the position the player should seek to after "reloading".
 * That position depends on the playback conditions at the time of the switch.
 *
 * When you already know you have to reload, you can call this function to take
 * care of that complex behavior:
 *
 *   - If `period` is not being played when that function is called, this
 *     function will emit regularly the `INeedsMediaSourceReload` event after
 *     applying the given `deltaPos` value to the reloading position.
 *
 *   - If `period` is not being when that function is called, it emits regularly
 *     the `INeedsMediaSourceReload` without applying the given `deltaPos` value
 *     to the reloading position.
 *     This is because that value is only applied when the previous Adaptation
 *     or Representation for the current Period was being played and should not
 *     be for cases like entering the current Period, or seeking _into_ th
 *     current Period.
 *     The main point of that configuration variable being to give back some
 *     context, there is no context to give back on those cases (as the Period
 *     was not already playing).
 *
 * @param {Object} period - The Period linked to the Adaptation or
 * Representation that you want to switch to.
 * @param {Observable} clock$ - Observable emitting playback conditions.
 * Has to emit last playback conditions immediately on subscribe.
 * @param {number} deltaPos - If the concerned Period is playing at the time
 * this function is called, we will add this value, in seconds, to the current
 * position to indicate the position we should reload at.
 * This value allows to give back context (by replaying some media data) after
 * a switch.
 * @returns {Observable}
 */

function reloadAfterSwitch(period, clock$, deltaPos) {
  return clock$.pipe((0,take/* take */.q)(1), // only the first (current) event interests us here
  (0,mergeMap/* mergeMap */.zg)(function (initialTick) {
    var _a;

    if (period.start <= initialTick.position && (period.end === undefined || period.end > initialTick.position)) {
      // if the Period was playing at the time of the switch
      var pos = initialTick.getCurrentTime() + deltaPos;
      var reloadAt = Math.min(Math.max(period.start, pos), (_a = period.end) !== null && _a !== void 0 ? _a : Infinity);
      return (0,of.of)(stream_events_generators.needsMediaSourceReload(period, reloadAt, !initialTick.isPaused));
    } // If the Period was not playing, just ask to reload to the exact same position


    return clock$.pipe((0,map/* map */.U)(function (tick) {
      return stream_events_generators.needsMediaSourceReload(period, tick.getCurrentTime(), !tick.isPaused);
    }));
  }));
}
;// CONCATENATED MODULE: ./src/core/stream/adaptation/create_representation_estimator.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Create an "estimator$" Observable which will emit which Representation (from
 * the given `Adaptation`) is the best fit (see `IABREstimate` type definition)
 * corresponding to the current network and playback conditions.
 *
 * This function also returns two subjects that should be used to add feedback
 * helping the estimator to make its choices:
 *
 *   - `requestFeedback$`: Subject through which information about new requests
 *     and network metrics should be emitted.
 *
 *   - `streamFeedback$`: Subject through which stream-related events should be
 *      emitted.
 *
 * You can look at the types defined for both of those Subjects to have more
 * information on what data is expected. The idea is to provide as much data as
 * possible so the estimation is as adapted as possible.
 *
 * @param {Object} adaptation
 * @param {Object} abrManager
 * @param {Observable} clock$
 * @returns {Object}
 */

function createRepresentationEstimator(adaptation, abrManager, clock$) {
  var streamFeedback$ = new Subject/* Subject */.xQ();
  var requestFeedback$ = new Subject/* Subject */.xQ();
  var abrEvents$ = (0,merge/* merge */.T)(streamFeedback$, requestFeedback$);
  /** Representations for which a `RepresentationStream` can be created. */

  var playableRepresentations = adaptation.getPlayableRepresentations();

  if (playableRepresentations.length <= 0) {
    var noRepErr = new media_error/* default */.Z("NO_PLAYABLE_REPRESENTATION", "No Representation in the chosen " + "Adaptation can be played");
    throw noRepErr;
  }

  var estimator$ = abrManager.get$(adaptation.type, playableRepresentations, clock$, abrEvents$);
  return {
    estimator$: estimator$,
    streamFeedback$: streamFeedback$,
    requestFeedback$: requestFeedback$
  };
}
;// CONCATENATED MODULE: ./src/core/stream/adaptation/adaptation_stream.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This file allows to create `AdaptationStream`s.
 *
 * An `AdaptationStream` downloads and push segment for a single Adaptation
 * (e.g.  a single audio, video or text track).
 * It chooses which Representation to download mainly thanks to the
 * ABRManager, and orchestrates a RepresentationStream, which will download and
 * push segments corresponding to a chosen Representation.
 */










var DELTA_POSITION_AFTER_RELOAD = config/* default.DELTA_POSITION_AFTER_RELOAD */.Z.DELTA_POSITION_AFTER_RELOAD;
/**
 * Create new AdaptationStream Observable, which task will be to download the
 * media data for a given Adaptation (i.e. "track").
 *
 * It will rely on the ABRManager to choose at any time the best Representation
 * for this Adaptation and then run the logic to download and push the
 * corresponding segments in the SegmentBuffer.
 *
 * After being subscribed to, it will start running and will emit various events
 * to report its current status.
 *
 * @param {Object} args
 * @returns {Observable}
 */

function AdaptationStream(_ref) {
  var abrManager = _ref.abrManager,
      clock$ = _ref.clock$,
      content = _ref.content,
      options = _ref.options,
      segmentBuffer = _ref.segmentBuffer,
      segmentFetcherCreator = _ref.segmentFetcherCreator,
      wantedBufferAhead$ = _ref.wantedBufferAhead$;
  var directManualBitrateSwitching = options.manualBitrateSwitchingMode === "direct";
  var manifest = content.manifest,
      period = content.period,
      adaptation = content.adaptation;
  /**
   * The buffer goal ratio base itself on the value given by `wantedBufferAhead`
   * to determine a more dynamic buffer goal for a given Representation.
   *
   * It can help in cases such as : the current browser has issues with
   * buffering and tells us that we should try to bufferize less data :
   * https://developers.google.com/web/updates/2017/10/quotaexceedederror
   */

  var bufferGoalRatioMap = {};

  var _createRepresentation = createRepresentationEstimator(adaptation, abrManager, clock$),
      estimator$ = _createRepresentation.estimator$,
      requestFeedback$ = _createRepresentation.requestFeedback$,
      streamFeedback$ = _createRepresentation.streamFeedback$;
  /** Allows the `RepresentationStream` to easily fetch media segments. */


  var segmentFetcher = segmentFetcherCreator.createSegmentFetcher(adaptation.type, requestFeedback$);
  /**
   * Emits each time an estimate is made through the `abrEstimate$` Observable,
   * starting with the last one.
   * This allows to easily rely on that value in inner Observables which might also
   * need the last already-considered value.
   */

  var lastEstimate$ = new BehaviorSubject(null);
  /** Emits abr estimates on Subscription. */

  var abrEstimate$ = estimator$.pipe((0,tap/* tap */.b)(function (estimate) {
    lastEstimate$.next(estimate);
  }), (0,defer_subscriptions/* default */.Z)(), (0,share/* share */.B)());
  /** Emit at each bitrate estimate done by the ABRManager. */

  var bitrateEstimate$ = abrEstimate$.pipe((0,filter/* filter */.h)(function (_ref2) {
    var bitrate = _ref2.bitrate;
    return bitrate != null;
  }), (0,distinctUntilChanged/* distinctUntilChanged */.x)(function (old, current) {
    return old.bitrate === current.bitrate;
  }), (0,map/* map */.U)(function (_ref3) {
    var bitrate = _ref3.bitrate;
    log/* default.debug */.Z.debug("Stream: new " + adaptation.type + " bitrate estimate", bitrate);
    return stream_events_generators.bitrateEstimationChange(adaptation.type, bitrate);
  }));
  /** Recursively create `RepresentationStream`s according to the last estimate. */

  var representationStreams$ = abrEstimate$.pipe(exhaustMap(function (estimate, i) {
    return recursivelyCreateRepresentationStreams(estimate, i === 0);
  }));
  return (0,merge/* merge */.T)(representationStreams$, bitrateEstimate$);
  /**
   * Create `RepresentationStream`s starting with the Representation indicated in
   * `fromEstimate` argument.
   * Each time a new estimate is made, this function will create a new
   * `RepresentationStream` corresponding to that new estimate.
   * @param {Object} fromEstimate - The first estimate we should start with
   * @param {boolean} isFirstEstimate - Whether this is the first time we're
   * creating a RepresentationStream in the corresponding `AdaptationStream`.
   * This is important because manual quality switches might need a full reload
   * of the MediaSource _except_ if we are talking about the first quality chosen.
   * @returns {Observable}
   */

  function recursivelyCreateRepresentationStreams(fromEstimate, isFirstEstimate) {
    var representation = fromEstimate.representation; // A manual bitrate switch might need an immediate feedback.
    // To do that properly, we need to reload the MediaSource

    if (directManualBitrateSwitching && fromEstimate.manual && !isFirstEstimate) {
      return reloadAfterSwitch(period, clock$, DELTA_POSITION_AFTER_RELOAD.bitrateSwitch);
    }
    /**
     * Emit when the current RepresentationStream should be terminated to make
     * place for a new one (e.g. when switching quality).
     */


    var terminateCurrentStream$ = lastEstimate$.pipe((0,filter/* filter */.h)(function (newEstimate) {
      return newEstimate === null || newEstimate.representation.id !== representation.id || newEstimate.manual && !fromEstimate.manual;
    }), (0,take/* take */.q)(1), (0,map/* map */.U)(function (newEstimate) {
      if (newEstimate === null) {
        log/* default.info */.Z.info("Stream: urgent Representation termination", adaptation.type);
        return {
          urgent: true
        };
      }

      if (newEstimate.urgent) {
        log/* default.info */.Z.info("Stream: urgent Representation switch", adaptation.type);
        return {
          urgent: true
        };
      } else {
        log/* default.info */.Z.info("Stream: slow Representation switch", adaptation.type);
        return {
          urgent: false
        };
      }
    }));
    /**
     * "Fast-switching" is a behavior allowing to replace low-quality segments
     * (i.e. with a low bitrate) with higher-quality segments (higher bitrate) in
     * the buffer.
     * This threshold defines a bitrate from which "fast-switching" is disabled.
     * For example with a fastSwitchThreshold set to `100`, segments with a
     * bitrate of `90` can be replaced. But segments with a bitrate of `100`
     * onward won't be replaced by higher quality segments.
     * Set to `undefined` to indicate that there's no threshold (anything can be
     * replaced by higher-quality segments).
     */

    var fastSwitchThreshold$ = !options.enableFastSwitching ? (0,of.of)(0) : // Do not fast-switch anything
    lastEstimate$.pipe((0,map/* map */.U)(function (estimate) {
      return estimate === null ? undefined : estimate.knownStableBitrate;
    }), (0,distinctUntilChanged/* distinctUntilChanged */.x)());
    var representationChange$ = (0,of.of)(stream_events_generators.representationChange(adaptation.type, period, representation));
    return (0,concat/* concat */.z)(representationChange$, createRepresentationStream(representation, terminateCurrentStream$, fastSwitchThreshold$)).pipe((0,tap/* tap */.b)(function (evt) {
      if (evt.type === "representationChange" || evt.type === "added-segment") {
        return streamFeedback$.next(evt);
      }
    }), (0,mergeMap/* mergeMap */.zg)(function (evt) {
      if (evt.type === "stream-terminating") {
        var lastEstimate = lastEstimate$.getValue();

        if (lastEstimate === null) {
          return empty/* EMPTY */.E;
        }

        return recursivelyCreateRepresentationStreams(lastEstimate, false);
      }

      return (0,of.of)(evt);
    }));
  }
  /**
   * Create and returns a new RepresentationStream Observable, linked to the
   * given Representation.
   * @param {Representation} representation
   * @returns {Observable}
   */


  function createRepresentationStream(representation, terminateCurrentStream$, fastSwitchThreshold$) {
    return (0,defer/* defer */.P)(function () {
      var oldBufferGoalRatio = bufferGoalRatioMap[representation.id];
      var bufferGoalRatio = oldBufferGoalRatio != null ? oldBufferGoalRatio : 1;
      bufferGoalRatioMap[representation.id] = bufferGoalRatio;
      var bufferGoal$ = wantedBufferAhead$.pipe((0,map/* map */.U)(function (wba) {
        return wba * bufferGoalRatio;
      }));
      log/* default.info */.Z.info("Stream: changing representation", adaptation.type, representation);
      return stream_representation({
        clock$: clock$,
        content: {
          representation: representation,
          adaptation: adaptation,
          period: period,
          manifest: manifest
        },
        segmentBuffer: segmentBuffer,
        segmentFetcher: segmentFetcher,
        terminate$: terminateCurrentStream$,
        bufferGoal$: bufferGoal$,
        fastSwitchThreshold$: fastSwitchThreshold$
      }).pipe((0,catchError/* catchError */.K)(function (err) {
        var formattedError = formatError(err, {
          defaultCode: "NONE",
          defaultReason: "Unknown `RepresentationStream` error"
        });

        if (formattedError.code === "BUFFER_FULL_ERROR") {
          var wantedBufferAhead = wantedBufferAhead$.getValue();
          var lastBufferGoalRatio = bufferGoalRatio;

          if (lastBufferGoalRatio <= 0.25 || wantedBufferAhead * lastBufferGoalRatio <= 2) {
            throw formattedError;
          }

          bufferGoalRatioMap[representation.id] = lastBufferGoalRatio - 0.25;
          return createRepresentationStream(representation, terminateCurrentStream$, fastSwitchThreshold$);
        }

        throw formattedError;
      }));
    });
  }
}
;// CONCATENATED MODULE: ./src/core/stream/adaptation/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* harmony default export */ const stream_adaptation = (AdaptationStream);
;// CONCATENATED MODULE: ./src/core/stream/period/create_empty_adaptation_stream.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Create empty AdaptationStream Observable, linked to a Period.
 *
 * This observable will never download any segment and just emit a "full"
 * event when reaching the end.
 * @param {Observable} streamClock$
 * @param {Observable} wantedBufferAhead$
 * @param {string} bufferType
 * @param {Object} content
 * @returns {Observable}
 */

function createEmptyAdaptationStream(streamClock$, wantedBufferAhead$, bufferType, content) {
  var period = content.period;
  var hasFinishedLoading = false;
  return (0,combineLatest/* combineLatest */.aj)([streamClock$, wantedBufferAhead$]).pipe((0,mergeMap/* mergeMap */.zg)(function (_ref) {
    var clockTick = _ref[0],
        wantedBufferAhead = _ref[1];
    var position = clockTick.position;

    if (period.end !== undefined && position + wantedBufferAhead >= period.end) {
      log/* default.debug */.Z.debug("Stream: full \"empty\" AdaptationStream", bufferType);
      hasFinishedLoading = true;
    }

    return (0,of.of)({
      type: "stream-status",
      value: {
        period: period,
        bufferType: bufferType,
        position: clockTick.position,
        imminentDiscontinuity: null,
        hasFinishedLoading: hasFinishedLoading,
        neededSegments: [],
        shouldRefreshManifest: false
      }
    });
  }));
}
// EXTERNAL MODULE: ./src/utils/starts_with.ts
var starts_with = __webpack_require__(9252);
;// CONCATENATED MODULE: ./src/utils/are_codecs_compatible.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * This function is a shortcut that helps differentiate two codecs
 * of the form "audio/mp4;codecs=\"av1.40.2\"".
 *
 * @param codecA
 * @param codecB
 * @returns A boolean that tell whether or not those two codecs provided are even.
 */

function areCodecsCompatible(a, b) {
  var _a$split = a.split(";"),
      mimeTypeA = _a$split[0],
      propsA = _a$split.slice(1);

  var _b$split = b.split(";"),
      mimeTypeB = _b$split[0],
      propsB = _b$split.slice(1);

  if (mimeTypeA !== mimeTypeB) {
    return false;
  }

  var codecsA = (0,array_find/* default */.Z)(propsA, function (prop) {
    return (0,starts_with/* default */.Z)(prop, "codecs=");
  });
  var codecsB = (0,array_find/* default */.Z)(propsB, function (prop) {
    return (0,starts_with/* default */.Z)(prop, "codecs=");
  });

  if (codecsA === undefined || codecsB === undefined) {
    return false;
  }

  var codecA = codecsA.substring(7);
  var codecB = codecsB.substring(7);

  if (codecA.split(".")[0] !== codecB.split(".")[0]) {
    return false;
  }

  return true;
}

/* harmony default export */ const are_codecs_compatible = (areCodecsCompatible);
;// CONCATENATED MODULE: ./src/core/stream/period/get_adaptation_switch_strategy.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



var ADAPTATION_SWITCH_BUFFER_PADDINGS = config/* default.ADAPTATION_SWITCH_BUFFER_PADDINGS */.Z.ADAPTATION_SWITCH_BUFFER_PADDINGS;
/**
 * Find out what to do when switching Adaptation, based on the current
 * situation.
 * @param {Object} segmentBuffer
 * @param {Object} period
 * @param {Object} adaptation
 * @param {Object} playbackInfo
 * @returns {Object}
 */

function getAdaptationSwitchStrategy(segmentBuffer, period, adaptation, playbackInfo, options) {
  if (segmentBuffer.codec !== undefined && options.onCodecSwitch === "reload" && !hasCompatibleCodec(adaptation, segmentBuffer.codec)) {
    return {
      type: "needs-reload",
      value: undefined
    };
  }

  var buffered = segmentBuffer.getBufferedRanges();

  if (buffered.length === 0) {
    return {
      type: "continue",
      value: undefined
    };
  }

  var bufferedRanges = (0,ranges/* convertToRanges */.JN)(buffered);
  var start = period.start;
  var end = period.end == null ? Infinity : period.end;
  var intersection = (0,ranges/* keepRangeIntersection */.tn)(bufferedRanges, [{
    start: start,
    end: end
  }]);

  if (intersection.length === 0) {
    return {
      type: "continue",
      value: undefined
    };
  }

  segmentBuffer.synchronizeInventory();
  var inventory = segmentBuffer.getInventory(); // Continue if we have no other Adaptation buffered in the current Period

  if (!inventory.some(function (buf) {
    return buf.infos.period.id === period.id && buf.infos.adaptation.id !== adaptation.id;
  })) {
    return {
      type: "continue",
      value: undefined
    };
  }
  /** Data already in the right Adaptation */


  var adaptationInBuffer = getBufferedRangesFromAdaptation(inventory, period, adaptation);
  /**
   * Data different from the wanted Adaptation in the Period's range.
   * /!\ Could contain some data at the end of the previous Period or at the
   * beginning of the next one.
   */

  var unwantedRange = (0,ranges/* excludeFromRanges */.uH)(intersection, adaptationInBuffer);

  if (unwantedRange.length === 0) {
    return {
      type: "continue",
      value: undefined
    };
  }

  var currentTime = playbackInfo.currentTime;

  if (adaptation.type === "video" && // We're playing the current Period
  (0,ranges/* isTimeInRange */.Ti)({
    start: start,
    end: end
  }, currentTime) && ( // There is data for the current position or the codecs are differents
  playbackInfo.readyState > 1 || !adaptation.getPlayableRepresentations().some(function (rep) {
    var _a;

    return are_codecs_compatible(rep.getMimeTypeString(), (_a = segmentBuffer.codec) !== null && _a !== void 0 ? _a : "");
  })) && // We're not playing the current wanted video Adaptation
  !(0,ranges/* isTimeInRanges */.A1)(adaptationInBuffer, currentTime)) {
    return {
      type: "needs-reload",
      value: undefined
    };
  }

  if (adaptation.type === "audio" && segmentBuffer.codec !== undefined && // We have been explicitly asked to reload
  options.audioTrackSwitchingMode === "direct" && // We're playing the current Period
  (0,ranges/* isTimeInRange */.Ti)({
    start: start,
    end: end
  }, currentTime) && ( // There is data for the current position or the codecs are differents
  playbackInfo.readyState > 1 || !hasCompatibleCodec(adaptation, segmentBuffer.codec)) && // We're not playing the current wanted audio Adaptation yet
  !(0,ranges/* isTimeInRanges */.A1)(adaptationInBuffer, currentTime)) {
    return {
      type: "needs-reload",
      value: undefined
    };
  } // From here, clean-up data from the previous Adaptation, if one


  var rangesToExclude = []; // First, we don't want to accidentally remove some segments from the previous
  // Period (which overlap a little with this one)

  /** Last segment before one for the current period. */

  var lastSegmentBefore = getLastSegmentBeforePeriod(inventory, period);

  if (lastSegmentBefore !== null && (lastSegmentBefore.bufferedEnd === undefined || period.start - lastSegmentBefore.bufferedEnd < 1)) // Close to Period's start
    {
      // Exclude data close to the period's start to avoid cleaning
      // to much
      rangesToExclude.push({
        start: 0,
        end: period.start + 1
      });
    } // Next, exclude data around current position to avoid decoding issues


  var bufferType = adaptation.type;
  /** Ranges that won't be cleaned from the current buffer. */

  var paddingBefore = ADAPTATION_SWITCH_BUFFER_PADDINGS[bufferType].before;

  if (paddingBefore == null) {
    paddingBefore = 0;
  }

  var paddingAfter = ADAPTATION_SWITCH_BUFFER_PADDINGS[bufferType].after;

  if (paddingAfter == null) {
    paddingAfter = 0;
  }

  rangesToExclude.push({
    start: currentTime - paddingBefore,
    end: currentTime + paddingAfter
  }); // Now remove possible small range from the end if there is a segment from the
  // next Period

  if (period.end !== undefined) {
    /** first segment after for the current period. */
    var firstSegmentAfter = getFirstSegmentAfterPeriod(inventory, period);

    if (firstSegmentAfter !== null && (firstSegmentAfter.bufferedStart === undefined || firstSegmentAfter.bufferedStart - period.end < 1)) // Close to Period's end
      {
        rangesToExclude.push({
          start: period.end - 1,
          end: Number.MAX_VALUE
        });
      }
  }

  var toRemove = (0,ranges/* excludeFromRanges */.uH)(unwantedRange, rangesToExclude);
  return toRemove.length > 0 ? {
    type: "clean-buffer",
    value: toRemove
  } : {
    type: "continue",
    value: undefined
  };
}
/**
 * Returns `true` if at least one codec of the Representations in the given
 * Adaptation has a codec compatible with the given SegmentBuffer's codec.
 * @param {Object} adaptation
 * @param {string} segmentBufferCodec
 * @returns {boolean}
 */

function hasCompatibleCodec(adaptation, segmentBufferCodec) {
  return adaptation.getPlayableRepresentations().some(function (rep) {
    return are_codecs_compatible(rep.getMimeTypeString(), segmentBufferCodec);
  });
}
/**
 * Returns buffered ranges of what we know correspond to the given `adaptation`
 * in the SegmentBuffer.
 * @param {Object} segmentBuffer
 * @param {Object} period
 * @param {Object} adaptation
 * @returns {Array.<Object>}
 */


function getBufferedRangesFromAdaptation(inventory, period, adaptation) {
  return inventory.reduce(function (acc, chunk) {
    if (chunk.infos.period.id !== period.id || chunk.infos.adaptation.id !== adaptation.id) {
      return acc;
    }

    var bufferedStart = chunk.bufferedStart,
        bufferedEnd = chunk.bufferedEnd;

    if (bufferedStart === undefined || bufferedEnd === undefined) {
      return acc;
    }

    acc.push({
      start: bufferedStart,
      end: bufferedEnd
    });
    return acc;
  }, []);
}
/**
 * Returns the last segment in the `inventory` which is linked to a Period
 * before `period`.
 * @param {Array.<Object>} inventory
 * @param {Object} period
 * @returns {Object|null}
 */


function getLastSegmentBeforePeriod(inventory, period) {
  for (var i = 0; i < inventory.length; i++) {
    if (inventory[i].infos.period.start >= period.start) {
      if (i > 0) {
        return inventory[i - 1];
      }

      return null;
    }
  }

  return inventory.length > 0 ? inventory[inventory.length - 1] : null;
}
/**
 * Returns the first segment in the `inventory` which is linked to a Period
 * after `period`.
 * @param {Array.<Object>} inventory
 * @param {Object} period
 * @returns {Object|null}
 */


function getFirstSegmentAfterPeriod(inventory, period) {
  for (var i = 0; i < inventory.length; i++) {
    if (inventory[i].infos.period.start > period.start) {
      return inventory[i];
    }
  }

  return null;
}
;// CONCATENATED MODULE: ./src/core/stream/period/period_stream.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */













var period_stream_DELTA_POSITION_AFTER_RELOAD = config/* default.DELTA_POSITION_AFTER_RELOAD */.Z.DELTA_POSITION_AFTER_RELOAD;
/**
 * Create single PeriodStream Observable:
 *   - Lazily create (or reuse) a SegmentBuffer for the given type.
 *   - Create a Stream linked to an Adaptation each time it changes, to
 *     download and append the corresponding segments to the SegmentBuffer.
 *   - Announce when the Stream is full or is awaiting new Segments through
 *     events
 * @param {Object} args
 * @returns {Observable}
 */

function PeriodStream(_ref) {
  var abrManager = _ref.abrManager,
      bufferType = _ref.bufferType,
      clock$ = _ref.clock$,
      content = _ref.content,
      garbageCollectors = _ref.garbageCollectors,
      segmentFetcherCreator = _ref.segmentFetcherCreator,
      segmentBuffersStore = _ref.segmentBuffersStore,
      options = _ref.options,
      wantedBufferAhead$ = _ref.wantedBufferAhead$;
  var period = content.period; // Emits the chosen Adaptation for the current type.
  // `null` when no Adaptation is chosen (e.g. no subtitles)

  var adaptation$ = new ReplaySubject/* ReplaySubject */.t(1);
  return adaptation$.pipe((0,switchMap/* switchMap */.w)(function (adaptation, switchNb) {
    /**
     * If this is not the first Adaptation choice, we might want to apply a
     * delta to the current position so we can re-play back some media in the
     * new Adaptation to give some context back.
     * This value contains this relative position, in seconds.
     * @see reloadAfterSwitch
     */
    var relativePosAfterSwitch = switchNb === 0 ? 0 : bufferType === "audio" ? period_stream_DELTA_POSITION_AFTER_RELOAD.trackSwitch.audio : bufferType === "video" ? period_stream_DELTA_POSITION_AFTER_RELOAD.trackSwitch.video : period_stream_DELTA_POSITION_AFTER_RELOAD.trackSwitch.other;

    if (adaptation === null) {
      // Current type is disabled for that Period
      log/* default.info */.Z.info("Stream: Set no " + bufferType + " Adaptation", period);
      var segmentBufferStatus = segmentBuffersStore.getStatus(bufferType);
      var cleanBuffer$;

      if (segmentBufferStatus.type === "initialized") {
        log/* default.info */.Z.info("Stream: Clearing previous " + bufferType + " SegmentBuffer");

        if (segment_buffers.isNative(bufferType)) {
          return reloadAfterSwitch(period, clock$, relativePosAfterSwitch);
        }

        cleanBuffer$ = segmentBufferStatus.value.removeBuffer(period.start, period.end == null ? Infinity : period.end);
      } else {
        if (segmentBufferStatus.type === "uninitialized") {
          segmentBuffersStore.disableSegmentBuffer(bufferType);
        }

        cleanBuffer$ = (0,of.of)(null);
      }

      return (0,concat/* concat */.z)(cleanBuffer$.pipe((0,mapTo/* mapTo */.h)(stream_events_generators.adaptationChange(bufferType, null, period))), createEmptyAdaptationStream(clock$, wantedBufferAhead$, bufferType, {
        period: period
      }));
    }

    if (segment_buffers.isNative(bufferType) && segmentBuffersStore.getStatus(bufferType).type === "disabled") {
      return reloadAfterSwitch(period, clock$, relativePosAfterSwitch);
    }

    log/* default.info */.Z.info("Stream: Updating " + bufferType + " adaptation", adaptation, period);
    var newStream$ = clock$.pipe((0,take/* take */.q)(1), (0,mergeMap/* mergeMap */.zg)(function (tick) {
      var segmentBuffer = createOrReuseSegmentBuffer(segmentBuffersStore, bufferType, adaptation, options);
      var playbackInfos = {
        currentTime: tick.getCurrentTime(),
        readyState: tick.readyState
      };
      var strategy = getAdaptationSwitchStrategy(segmentBuffer, period, adaptation, playbackInfos, options);

      if (strategy.type === "needs-reload") {
        return reloadAfterSwitch(period, clock$, relativePosAfterSwitch);
      }

      var cleanBuffer$ = strategy.type === "clean-buffer" ? concat/* concat.apply */.z.apply(void 0, strategy.value.map(function (_ref2) {
        var start = _ref2.start,
            end = _ref2.end;
        return segmentBuffer.removeBuffer(start, end);
      })).pipe((0,ignoreElements/* ignoreElements */.l)()) : empty/* EMPTY */.E;
      var bufferGarbageCollector$ = garbageCollectors.get(segmentBuffer);
      var adaptationStream$ = createAdaptationStream(adaptation, segmentBuffer);
      return segmentBuffersStore.waitForUsableBuffers().pipe((0,mergeMap/* mergeMap */.zg)(function () {
        return (0,concat/* concat */.z)(cleanBuffer$, (0,merge/* merge */.T)(adaptationStream$, bufferGarbageCollector$));
      }));
    }));
    return (0,concat/* concat */.z)((0,of.of)(stream_events_generators.adaptationChange(bufferType, adaptation, period)), newStream$);
  }), (0,startWith/* startWith */.O)(stream_events_generators.periodStreamReady(bufferType, period, adaptation$)));
  /**
   * @param {Object} adaptation
   * @param {Object} segmentBuffer
   * @returns {Observable}
   */

  function createAdaptationStream(adaptation, segmentBuffer) {
    var manifest = content.manifest;
    var adaptationStreamClock$ = clock$.pipe((0,map/* map */.U)(function (tick) {
      var buffered = segmentBuffer.getBufferedRanges();
      return (0,object_assign/* default */.Z)({}, tick, {
        bufferGap: (0,ranges/* getLeftSizeOfRange */.L7)(buffered, tick.position)
      });
    }));
    return stream_adaptation({
      abrManager: abrManager,
      clock$: adaptationStreamClock$,
      content: {
        manifest: manifest,
        period: period,
        adaptation: adaptation
      },
      options: options,
      segmentBuffer: segmentBuffer,
      segmentFetcherCreator: segmentFetcherCreator,
      wantedBufferAhead$: wantedBufferAhead$
    }).pipe((0,catchError/* catchError */.K)(function (error) {
      // Stream linked to a non-native media buffer should not impact the
      // stability of the player. ie: if a text buffer sends an error, we want
      // to continue playing without any subtitles
      if (!segment_buffers.isNative(bufferType)) {
        log/* default.error */.Z.error("Stream: " + bufferType + " Stream crashed. Aborting it.", error);
        segmentBuffersStore.disposeSegmentBuffer(bufferType);
        var formattedError = formatError(error, {
          defaultCode: "NONE",
          defaultReason: "Unknown `AdaptationStream` error"
        });
        return (0,concat/* concat */.z)((0,of.of)(stream_events_generators.warning(formattedError)), createEmptyAdaptationStream(clock$, wantedBufferAhead$, bufferType, {
          period: period
        }));
      }

      log/* default.error */.Z.error("Stream: " + bufferType + " Stream crashed. Stopping playback.", error);
      throw error;
    }));
  }
}
/**
 * @param {string} bufferType
 * @param {Object} adaptation
 * @returns {Object}
 */

function createOrReuseSegmentBuffer(segmentBuffersStore, bufferType, adaptation, options) {
  var segmentBufferStatus = segmentBuffersStore.getStatus(bufferType);

  if (segmentBufferStatus.type === "initialized") {
    log/* default.info */.Z.info("Stream: Reusing a previous SegmentBuffer for the type", bufferType); // eslint-disable-next-line @typescript-eslint/no-unsafe-return

    return segmentBufferStatus.value;
  }

  var codec = getFirstDeclaredMimeType(adaptation);
  var sbOptions = bufferType === "text" ? options.textTrackOptions : undefined; // eslint-disable-next-line @typescript-eslint/no-unsafe-return

  return segmentBuffersStore.createSegmentBuffer(bufferType, codec, sbOptions);
}
/**
 * Get mime-type string of the first representation declared in the given
 * adaptation.
 * @param {Adaptation} adaptation
 * @returns {string}
 */


function getFirstDeclaredMimeType(adaptation) {
  var representations = adaptation.representations;

  if (representations[0] == null) {
    return "";
  }

  return representations[0].getMimeTypeString();
}
;// CONCATENATED MODULE: ./src/core/stream/period/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* harmony default export */ const period = (PeriodStream);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/scan.js
var scan = __webpack_require__(2807);
;// CONCATENATED MODULE: ./src/core/stream/orchestrator/active_period_emitter.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Emit the active Period each times it changes.
 *
 * The active Period is the first Period (in chronological order) which has
 * a RepresentationStream associated for every defined BUFFER_TYPES.
 *
 * Emit null if no Period can be considered active currently.
 *
 * @example
 * For 4 BUFFER_TYPES: "AUDIO", "VIDEO", "TEXT" and "IMAGE":
 * ```
 *                     +-------------+
 *         Period 1    | Period 2    | Period 3
 * AUDIO   |=========| | |===      | |
 * VIDEO               | |=====    | |
 * TEXT    |(NO TEXT)| | |(NO TEXT)| | |====    |
 * IMAGE   |=========| | |=        | |
 *                     +-------------+
 *
 * The active Period here is Period 2 as Period 1 has no video
 * RepresentationStream.
 *
 * If we are missing a or multiple PeriodStreams in the first chronological
 * Period, like that is the case here, it generally means that we are
 * currently switching between Periods.
 *
 * For here we are surely switching from Period 1 to Period 2 beginning by the
 * video PeriodStream. As every PeriodStream is ready for Period 2, we can
 * already inform that it is the current Period.
 * ```
 *
 * @param {Array.<string>} bufferTypes - Every buffer types in the content.
 * @param {Observable} addPeriodStream$ - Emit PeriodStream information when
 * one is added.
 * @param {Observable} removePeriodStream$ - Emit PeriodStream information when
 * one is removed.
 * @returns {Observable}
 */

function ActivePeriodEmitter(buffers$) {
  var numberOfStreams = buffers$.length;
  return merge/* merge.apply */.T.apply(void 0, buffers$).pipe( // not needed to filter, this is an optim
  (0,filter/* filter */.h)(function (_ref) {
    var type = _ref.type;
    return type === "periodStreamCleared" || type === "adaptationChange" || type === "representationChange";
  }), (0,scan/* scan */.R)(function (acc, evt) {
    switch (evt.type) {
      case "periodStreamCleared":
        {
          var _evt$value = evt.value,
              period = _evt$value.period,
              type = _evt$value.type;
          var currentInfos = acc[period.id];

          if (currentInfos !== undefined && currentInfos.buffers.has(type)) {
            currentInfos.buffers["delete"](type);

            if (currentInfos.buffers.size === 0) {
              delete acc[period.id];
            }
          }
        }
        break;

      case "adaptationChange":
        {
          // For Adaptations that are not null, we will receive a
          // `representationChange` event. We can thus skip this event and only
          // listen to the latter.
          if (evt.value.adaptation !== null) {
            return acc;
          }
        }
      // /!\ fallthrough done on purpose
      // Note that we fall-through only when the Adaptation sent through the
      // `adaptationChange` event is `null`. This is because in those cases,
      // we won't receive any "representationChange" event. We however still
      // need to register that Period as active for the current type.
      // eslint-disable-next-line no-fallthrough

      case "representationChange":
        {
          var _evt$value2 = evt.value,
              _period = _evt$value2.period,
              _type = _evt$value2.type;
          var _currentInfos = acc[_period.id];

          if (_currentInfos !== undefined && !_currentInfos.buffers.has(_type)) {
            _currentInfos.buffers.add(_type);
          } else {
            var bufferSet = new Set();
            bufferSet.add(_type);
            acc[_period.id] = {
              period: _period,
              buffers: bufferSet
            };
          }
        }
        break;
    }

    return acc;
  }, {}), (0,map/* map */.U)(function (list) {
    var activePeriodIDs = Object.keys(list);
    var completePeriods = [];

    for (var i = 0; i < activePeriodIDs.length; i++) {
      var periodInfos = list[activePeriodIDs[i]];

      if (periodInfos !== undefined && periodInfos.buffers.size === numberOfStreams) {
        completePeriods.push(periodInfos.period);
      }
    }

    return completePeriods.reduce(function (acc, period) {
      if (acc === null) {
        return period;
      }

      return period.start < acc.start ? period : acc;
    }, null);
  }), (0,distinctUntilChanged/* distinctUntilChanged */.x)(function (a, b) {
    return a === null && b === null || a !== null && b !== null && a.id === b.id;
  }));
}
;// CONCATENATED MODULE: ./src/core/stream/orchestrator/are_streams_complete.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Returns an Observable which emits ``true`` when all PeriodStreams given are
 * _complete_.
 * Returns false otherwise.
 *
 * A PeriodStream for a given type is considered _complete_ when both of these
 * conditions are true:
 *   - it is the last PeriodStream in the content for the given type
 *   - it has finished downloading segments (it is _full_)
 *
 * Simply put a _complete_ PeriodStream for a given type means that every
 * segments needed for this Stream have been downloaded.
 *
 * When the Observable returned here emits, every Stream are finished.
 * @param {...Observable} streams
 * @returns {Observable}
 */

function areStreamsComplete() {
  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
    streams[_key] = arguments[_key];
  }

  /**
   * Array of Observables linked to the Array of Streams which emit:
   *   - true when the corresponding Stream is considered _complete_.
   *   - false when the corresponding Stream is considered _active_.
   * @type {Array.<Observable>}
   */
  var isCompleteArray = streams.map(function (stream) {
    return stream.pipe((0,filter/* filter */.h)(function (evt) {
      return evt.type === "complete-stream" || evt.type === "stream-status" && !evt.value.hasFinishedLoading;
    }), (0,map/* map */.U)(function (evt) {
      return evt.type === "complete-stream";
    }), (0,startWith/* startWith */.O)(false), (0,distinctUntilChanged/* distinctUntilChanged */.x)());
  });
  return (0,combineLatest/* combineLatest */.aj)(isCompleteArray).pipe((0,map/* map */.U)(function (areComplete) {
    return areComplete.every(function (isComplete) {
      return isComplete;
    });
  }), (0,distinctUntilChanged/* distinctUntilChanged */.x)());
}
;// CONCATENATED MODULE: ./src/core/stream/orchestrator/get_blacklisted_ranges.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns the buffered ranges which hold the given content.
 * Returns the whole buffered ranges if some of it is unknown.
 * @param {Object} segmentBuffer
 * @param {Array.<Object>} contents
 * @returns {Array.<Object>}
 */

function getBlacklistedRanges(segmentBuffer, contents) {
  segmentBuffer.synchronizeInventory();
  var accumulator = [];
  var inventory = segmentBuffer.getInventory();

  var _loop = function _loop(i) {
    var chunk = inventory[i];
    var hasContent = contents.some(function (content) {
      return chunk.infos.period.id === content.period.id && chunk.infos.adaptation.id === content.adaptation.id && chunk.infos.representation.id === content.representation.id;
    });

    if (hasContent) {
      var bufferedStart = chunk.bufferedStart,
          bufferedEnd = chunk.bufferedEnd;

      if (bufferedStart === undefined || bufferedEnd === undefined) {
        log/* default.warn */.Z.warn("SO: No buffered start or end found from a segment.");
        var buffered = segmentBuffer.getBufferedRanges();
        var len = buffered.length;

        if (len === 0) {
          return {
            v: []
          };
        }

        return {
          v: [{
            start: buffered.start(0),
            end: buffered.end(len - 1)
          }]
        };
      }

      var previousLastElement = accumulator[accumulator.length - 1];

      if (previousLastElement !== undefined && previousLastElement.end === bufferedStart) {
        previousLastElement.end = bufferedEnd;
      } else {
        accumulator.push({
          start: bufferedStart,
          end: bufferedEnd
        });
      }
    }
  };

  for (var i = 0; i < inventory.length; i++) {
    var _ret = _loop(i);

    if (typeof _ret === "object") return _ret.v;
  }

  return accumulator;
}
;// CONCATENATED MODULE: ./src/core/stream/orchestrator/stream_orchestrator.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
















var MAXIMUM_MAX_BUFFER_AHEAD = config/* default.MAXIMUM_MAX_BUFFER_AHEAD */.Z.MAXIMUM_MAX_BUFFER_AHEAD,
    MAXIMUM_MAX_BUFFER_BEHIND = config/* default.MAXIMUM_MAX_BUFFER_BEHIND */.Z.MAXIMUM_MAX_BUFFER_BEHIND;
/**
 * Create and manage the various Stream Observables needed for the content to
 * play:
 *
 *   - Create or dispose SegmentBuffers depending on the chosen Adaptations.
 *
 *   - Push the right segments to those SegmentBuffers depending on the user's
 *     preferences, the current position, the bandwidth, the decryption
 *     conditions...
 *
 *   - Concatenate Streams for adaptation from separate Periods at the right
 *     time, to allow smooth transitions between periods.
 *
 *   - Emit various events to notify of its health and issues
 *
 * @param {Object} content
 * @param {Observable} clock$ - Emit position information
 * @param {Object} abrManager - Emit bitrate estimates and best Representation
 * to play.
 * @param {Object} segmentBuffersStore - Will be used to lazily create
 * SegmentBuffer instances associated with the current content.
 * @param {Object} segmentFetcherCreator - Allow to download segments.
 * @param {Object} options
 * @returns {Observable}
 */

function StreamOrchestrator(content, clock$, abrManager, segmentBuffersStore, segmentFetcherCreator, options) {
  var manifest = content.manifest,
      initialPeriod = content.initialPeriod;
  var maxBufferAhead$ = options.maxBufferAhead$,
      maxBufferBehind$ = options.maxBufferBehind$,
      wantedBufferAhead$ = options.wantedBufferAhead$; // Keep track of a unique BufferGarbageCollector created per
  // SegmentBuffer.

  var garbageCollectors = new WeakMapMemory(function (segmentBuffer) {
    var bufferType = segmentBuffer.bufferType;
    var defaultMaxBehind = MAXIMUM_MAX_BUFFER_BEHIND[bufferType] != null ? MAXIMUM_MAX_BUFFER_BEHIND[bufferType] : Infinity;
    var defaultMaxAhead = MAXIMUM_MAX_BUFFER_AHEAD[bufferType] != null ? MAXIMUM_MAX_BUFFER_AHEAD[bufferType] : Infinity;
    return BufferGarbageCollector({
      segmentBuffer: segmentBuffer,
      clock$: clock$.pipe((0,map/* map */.U)(function (tick) {
        return tick.position;
      })),
      maxBufferBehind$: maxBufferBehind$.pipe((0,map/* map */.U)(function (val) {
        return Math.min(val, defaultMaxBehind);
      })),
      maxBufferAhead$: maxBufferAhead$.pipe((0,map/* map */.U)(function (val) {
        return Math.min(val, defaultMaxAhead);
      }))
    });
  }); // trigger warnings when the wanted time is before or after the manifest's
  // segments

  var outOfManifest$ = clock$.pipe((0,filter_map/* default */.Z)(function (_ref) {
    var position = _ref.position,
        wantedTimeOffset = _ref.wantedTimeOffset;
    var offsetedPosition = wantedTimeOffset + position;

    if (offsetedPosition < manifest.getMinimumPosition()) {
      var warning = new media_error/* default */.Z("MEDIA_TIME_BEFORE_MANIFEST", "The current position is behind the " + "earliest time announced in the Manifest.");
      return stream_events_generators.warning(warning);
    } else if (offsetedPosition > manifest.getMaximumPosition()) {
      var _warning = new media_error/* default */.Z("MEDIA_TIME_AFTER_MANIFEST", "The current position is after the latest " + "time announced in the Manifest.");

      return stream_events_generators.warning(_warning);
    }

    return null;
  }, null));
  var bufferTypes = segmentBuffersStore.getBufferTypes(); // Every PeriodStreams for every possible types

  var streamsArray = bufferTypes.map(function (bufferType) {
    return manageEveryStreams(bufferType, initialPeriod).pipe((0,defer_subscriptions/* default */.Z)(), (0,share/* share */.B)());
  }); // Emits the activePeriodChanged events every time the active Period changes.

  var activePeriodChanged$ = ActivePeriodEmitter(streamsArray).pipe((0,filter/* filter */.h)(function (period) {
    return period !== null;
  }), (0,map/* map */.U)(function (period) {
    log/* default.info */.Z.info("Stream: New active period", period);
    return stream_events_generators.activePeriodChanged(period);
  })); // Emits an "end-of-stream" event once every PeriodStream are complete.
  // Emits a 'resume-stream" when it's not

  var endOfStream$ = areStreamsComplete.apply(void 0, streamsArray).pipe((0,map/* map */.U)(function (areComplete) {
    return areComplete ? stream_events_generators.endOfStream() : stream_events_generators.resumeStream();
  }));
  return merge/* merge.apply */.T.apply(void 0, streamsArray.concat([activePeriodChanged$, endOfStream$, outOfManifest$]));
  /**
   * Manage creation and removal of Streams for every Periods for a given type.
   *
   * Works by creating consecutive Streams through the
   * `manageConsecutivePeriodStreams` function, and restarting it when the clock
   * goes out of the bounds of these Streams.
   * @param {string} bufferType - e.g. "audio" or "video"
   * @param {Period} basePeriod - Initial Period downloaded.
   * @returns {Observable}
   */

  function manageEveryStreams(bufferType, basePeriod) {
    // Each Period for which there is currently a Stream, chronologically
    var periodList = new SortedList(function (a, b) {
      return a.start - b.start;
    });
    var destroyStreams$ = new Subject/* Subject */.xQ(); // When set to `true`, all the currently active PeriodStream will be destroyed
    // and re-created from the new current position if we detect it to be out of
    // their bounds.
    // This is set to false when we're in the process of creating the first
    // PeriodStream, to avoid interferences while no PeriodStream is available.

    var enableOutOfBoundsCheck = false;
    /**
     * @param {Object} period
     * @returns {Observable}
     */

    function launchConsecutiveStreamsForPeriod(period) {
      return manageConsecutivePeriodStreams(bufferType, period, destroyStreams$).pipe((0,filter_map/* default */.Z)(function (message) {
        switch (message.type) {
          case "needs-media-source-reload":
            // Only reload the MediaSource when the more immediately required
            // Period is the one asking for it
            var firstPeriod = periodList.head();

            if (firstPeriod === undefined || firstPeriod.id !== message.value.period.id) {
              return null;
            }

            break;

          case "periodStreamReady":
            enableOutOfBoundsCheck = true;
            periodList.add(message.value.period);
            break;

          case "periodStreamCleared":
            periodList.removeElement(message.value.period);
            break;
        }

        return message;
      }, null), (0,share/* share */.B)());
    }
    /**
     * Returns true if the given time is either:
     *   - less than the start of the chronologically first Period
     *   - more than the end of the chronologically last Period
     * @param {number} time
     * @returns {boolean}
     */


    function isOutOfPeriodList(time) {
      var head = periodList.head();
      var last = periodList.last();

      if (head == null || last == null) {
        // if no period
        return true;
      }

      return head.start > time || (last.end == null ? Infinity : last.end) < time;
    } // Restart the current Stream when the wanted time is in another period
    // than the ones already considered


    var restartStreamsWhenOutOfBounds$ = clock$.pipe((0,filter_map/* default */.Z)(function (_ref2) {
      var position = _ref2.position,
          wantedTimeOffset = _ref2.wantedTimeOffset;

      var _a;

      var time = wantedTimeOffset + position;

      if (!enableOutOfBoundsCheck || !isOutOfPeriodList(time)) {
        return null;
      }

      var nextPeriod = (_a = manifest.getPeriodForTime(time)) !== null && _a !== void 0 ? _a : manifest.getNextPeriod(time);

      if (nextPeriod === undefined) {
        return null;
      }

      log/* default.info */.Z.info("SO: Current position out of the bounds of the active periods," + "re-creating Streams.", bufferType, position + wantedTimeOffset);
      enableOutOfBoundsCheck = false;
      destroyStreams$.next();
      return nextPeriod;
    }, null), (0,mergeMap/* mergeMap */.zg)(function (newInitialPeriod) {
      if (newInitialPeriod == null) {
        throw new media_error/* default */.Z("MEDIA_TIME_NOT_FOUND", "The wanted position is not found in the Manifest.");
      }

      return launchConsecutiveStreamsForPeriod(newInitialPeriod);
    }));
    var handleDecipherabilityUpdate$ = (0,event_emitter/* fromEvent */.R)(manifest, "decipherabilityUpdate").pipe((0,mergeMap/* mergeMap */.zg)(function (updates) {
      var segmentBufferStatus = segmentBuffersStore.getStatus(bufferType);
      var hasType = updates.some(function (update) {
        return update.adaptation.type === bufferType;
      });

      if (!hasType || segmentBufferStatus.type !== "initialized") {
        return empty/* EMPTY */.E; // no need to stop the current Streams.
      }

      var segmentBuffer = segmentBufferStatus.value;
      var rangesToClean = getBlacklistedRanges(segmentBuffer, updates);
      enableOutOfBoundsCheck = false;
      destroyStreams$.next();
      return concat/* concat.apply */.z.apply(void 0, rangesToClean.map(function (_ref3) {
        var start = _ref3.start,
            end = _ref3.end;
        return segmentBuffer.removeBuffer(start, end).pipe((0,ignoreElements/* ignoreElements */.l)());
      }).concat([clock$.pipe((0,take/* take */.q)(1), (0,mergeMap/* mergeMap */.zg)(function (lastTick) {
        return (0,concat/* concat */.z)((0,of.of)(stream_events_generators.needsDecipherabilityFlush(lastTick.position, !lastTick.isPaused, lastTick.duration)), (0,defer/* defer */.P)(function () {
          var lastPosition = lastTick.position + lastTick.wantedTimeOffset;
          var newInitialPeriod = manifest.getPeriodForTime(lastPosition);

          if (newInitialPeriod == null) {
            throw new media_error/* default */.Z("MEDIA_TIME_NOT_FOUND", "The wanted position is not found in the Manifest.");
          }

          return launchConsecutiveStreamsForPeriod(newInitialPeriod);
        }));
      }))]));
    }));
    return (0,merge/* merge */.T)(restartStreamsWhenOutOfBounds$, handleDecipherabilityUpdate$, launchConsecutiveStreamsForPeriod(basePeriod));
  }
  /**
   * Create lazily consecutive PeriodStreams:
   *
   * It first creates the PeriodStream for `basePeriod` and - once it becomes
   * full - automatically creates the next chronological one.
   * This process repeats until the PeriodStream linked to the last Period is
   * full.
   *
   * If an "old" PeriodStream becomes active again, it destroys all PeriodStream
   * coming after it (from the last chronological one to the first).
   *
   * To clean-up PeriodStreams, each one of them are also automatically
   * destroyed once the clock announces a time superior or equal to the end of
   * the concerned Period.
   *
   * A "periodStreamReady" event is sent each times a new PeriodStream is
   * created. The first one (for `basePeriod`) should be sent synchronously on
   * subscription.
   *
   * A "periodStreamCleared" event is sent each times a PeriodStream is
   * destroyed.
   * @param {string} bufferType - e.g. "audio" or "video"
   * @param {Period} basePeriod - Initial Period downloaded.
   * @param {Observable} destroy$ - Emit when/if all created Streams from this
   * point should be destroyed.
   * @returns {Observable}
   */


  function manageConsecutivePeriodStreams(bufferType, basePeriod, destroy$) {
    log/* default.info */.Z.info("SO: Creating new Stream for", bufferType, basePeriod); // Emits the Period of the next Period Stream when it can be created.

    var createNextPeriodStream$ = new Subject/* Subject */.xQ(); // Emits when the Streams for the next Periods should be destroyed, if
    // created.

    var destroyNextStreams$ = new Subject/* Subject */.xQ(); // Emits when the current position goes over the end of the current Stream.

    var endOfCurrentStream$ = clock$.pipe((0,filter/* filter */.h)(function (_ref4) {
      var position = _ref4.position,
          wantedTimeOffset = _ref4.wantedTimeOffset;
      return basePeriod.end != null && position + wantedTimeOffset >= basePeriod.end;
    })); // Create Period Stream for the next Period.

    var nextPeriodStream$ = createNextPeriodStream$.pipe(exhaustMap(function (nextPeriod) {
      return manageConsecutivePeriodStreams(bufferType, nextPeriod, destroyNextStreams$);
    })); // Allows to destroy each created Stream, from the newest to the oldest,
    // once destroy$ emits.

    var destroyAll$ = destroy$.pipe((0,take/* take */.q)(1), (0,tap/* tap */.b)(function () {
      // first complete createNextStream$ to allow completion of the
      // nextPeriodStream$ observable once every further Streams have been
      // cleared.
      createNextPeriodStream$.complete(); // emit destruction signal to the next Stream first

      destroyNextStreams$.next();
      destroyNextStreams$.complete(); // we do not need it anymore
    }), (0,share/* share */.B)() // share side-effects
    ); // Will emit when the current Stream should be destroyed.

    var killCurrentStream$ = (0,merge/* merge */.T)(endOfCurrentStream$, destroyAll$);
    var periodStream$ = period({
      abrManager: abrManager,
      bufferType: bufferType,
      clock$: clock$,
      content: {
        manifest: manifest,
        period: basePeriod
      },
      garbageCollectors: garbageCollectors,
      segmentFetcherCreator: segmentFetcherCreator,
      segmentBuffersStore: segmentBuffersStore,
      options: options,
      wantedBufferAhead$: wantedBufferAhead$
    }).pipe((0,mergeMap/* mergeMap */.zg)(function (evt) {
      if (evt.type === "stream-status") {
        if (evt.value.hasFinishedLoading) {
          var nextPeriod = manifest.getPeriodAfter(basePeriod);

          if (nextPeriod === null) {
            return (0,concat/* concat */.z)((0,of.of)(evt), (0,of.of)(stream_events_generators.streamComplete(bufferType)));
          } // current Stream is full, create the next one if not


          createNextPeriodStream$.next(nextPeriod);
        } else {
          // current Stream is active, destroy next Stream if created
          destroyNextStreams$.next();
        }
      }

      return (0,of.of)(evt);
    }), (0,share/* share */.B)()); // Stream for the current Period.

    var currentStream$ = (0,concat/* concat */.z)(periodStream$.pipe((0,takeUntil/* takeUntil */.R)(killCurrentStream$)), (0,of.of)(stream_events_generators.periodStreamCleared(bufferType, basePeriod)).pipe((0,tap/* tap */.b)(function () {
      log/* default.info */.Z.info("SO: Destroying Stream for", bufferType, basePeriod);
    })));
    return (0,merge/* merge */.T)(currentStream$, nextPeriodStream$, destroyAll$.pipe((0,ignoreElements/* ignoreElements */.l)()));
  }
}
;// CONCATENATED MODULE: ./src/core/stream/orchestrator/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* harmony default export */ const orchestrator = (StreamOrchestrator);
;// CONCATENATED MODULE: ./src/core/stream/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/* harmony default export */ const stream = (orchestrator);
;// CONCATENATED MODULE: ./src/core/init/create_stream_clock.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Create clock Observable for the `Stream` part of the code.
 * @param {Observable} initClock$
 * @param {Object} streamClockArgument
 * @returns {Observable}
 */

function createStreamClock(initClock$, _ref) {
  var autoPlay = _ref.autoPlay,
      initialPlay$ = _ref.initialPlay$,
      initialSeek$ = _ref.initialSeek$,
      manifest = _ref.manifest,
      speed$ = _ref.speed$,
      startTime = _ref.startTime;
  var initialPlayPerformed = false;
  var initialSeekPerformed = false;
  var updateIsPaused$ = initialPlay$.pipe((0,tap/* tap */.b)(function () {
    initialPlayPerformed = true;
  }), (0,ignoreElements/* ignoreElements */.l)());
  var updateTimeOffset$ = initialSeek$.pipe((0,tap/* tap */.b)(function () {
    initialSeekPerformed = true;
  }), (0,ignoreElements/* ignoreElements */.l)());
  var clock$ = (0,combineLatest/* combineLatest */.aj)([initClock$, speed$]).pipe((0,map/* map */.U)(function (_ref2) {
    var tick = _ref2[0],
        speed = _ref2[1];
    var isLive = manifest.isLive;
    return {
      position: tick.position,
      getCurrentTime: tick.getCurrentTime,
      duration: tick.duration,
      isPaused: initialPlayPerformed ? tick.paused : !autoPlay,
      liveGap: isLive ? manifest.getMaximumPosition() - tick.position : Infinity,
      readyState: tick.readyState,
      speed: speed,
      stalled: tick.stalled,
      // wantedTimeOffset is an offset to add to the timing's current time to have
      // the "real" wanted position.
      // For now, this is seen when the media element has not yet seeked to its
      // initial position, the currentTime will most probably be 0 where the
      // effective starting position will be _startTime_.
      // Thus we initially set a wantedTimeOffset equal to startTime.
      wantedTimeOffset: initialSeekPerformed ? 0 : startTime - tick.position
    };
  }));
  return (0,merge/* merge */.T)(updateIsPaused$, updateTimeOffset$, clock$);
}
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/race.js
var race = __webpack_require__(8821);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/util/ArgumentOutOfRangeError.js
var ArgumentOutOfRangeError = __webpack_require__(6565);
;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/takeLast.js
/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */




function takeLast(count) {
    return function takeLastOperatorFunction(source) {
        if (count === 0) {
            return (0,empty/* empty */.c)();
        }
        else {
            return source.lift(new TakeLastOperator(count));
        }
    };
}
var TakeLastOperator = /*@__PURE__*/ (function () {
    function TakeLastOperator(total) {
        this.total = total;
        if (this.total < 0) {
            throw new ArgumentOutOfRangeError/* ArgumentOutOfRangeError */.W;
        }
    }
    TakeLastOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new TakeLastSubscriber(subscriber, this.total));
    };
    return TakeLastOperator;
}());
var TakeLastSubscriber = /*@__PURE__*/ (function (_super) {
    tslib_es6/* __extends */.ZT(TakeLastSubscriber, _super);
    function TakeLastSubscriber(destination, total) {
        var _this = _super.call(this, destination) || this;
        _this.total = total;
        _this.ring = new Array();
        _this.count = 0;
        return _this;
    }
    TakeLastSubscriber.prototype._next = function (value) {
        var ring = this.ring;
        var total = this.total;
        var count = this.count++;
        if (ring.length < total) {
            ring.push(value);
        }
        else {
            var index = count % total;
            ring[index] = value;
        }
    };
    TakeLastSubscriber.prototype._complete = function () {
        var destination = this.destination;
        var count = this.count;
        if (count > 0) {
            var total = this.count >= this.total ? this.total : this.count;
            var ring = this.ring;
            for (var i = 0; i < total; i++) {
                var idx = (count++) % total;
                destination.next(ring[idx]);
            }
        }
        destination.complete();
    };
    return TakeLastSubscriber;
}(Subscriber/* Subscriber */.L));
//# sourceMappingURL=takeLast.js.map

;// CONCATENATED MODULE: ./src/core/init/end_of_stream.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




var onRemoveSourceBuffers$ = event_listeners/* onRemoveSourceBuffers$ */.gg,
    end_of_stream_onSourceOpen$ = event_listeners/* onSourceOpen$ */.ym,
    onUpdate$ = event_listeners/* onUpdate$ */._E;
/**
 * Get "updating" SourceBuffers from a SourceBufferList.
 * @param {SourceBufferList} sourceBuffers
 * @returns {Array.<SourceBuffer>}
 */

function getUpdatingSourceBuffers(sourceBuffers) {
  var updatingSourceBuffers = [];

  for (var i = 0; i < sourceBuffers.length; i++) {
    var SourceBuffer = sourceBuffers[i];

    if (SourceBuffer.updating) {
      updatingSourceBuffers.push(SourceBuffer);
    }
  }

  return updatingSourceBuffers;
}
/**
 * Trigger the `endOfStream` method of a MediaSource.
 *
 * If the MediaSource is ended/closed, do not call this method.
 * If SourceBuffers are updating, wait for them to be updated before closing
 * it.
 * @param {MediaSource} mediaSource
 * @returns {Observable}
 */


function triggerEndOfStream(mediaSource) {
  return (0,defer/* defer */.P)(function () {
    log/* default.debug */.Z.debug("Init: Trying to call endOfStream");

    if (mediaSource.readyState !== "open") {
      log/* default.debug */.Z.debug("Init: MediaSource not open, cancel endOfStream");
      return (0,of.of)(null);
    }

    var sourceBuffers = mediaSource.sourceBuffers;
    var updatingSourceBuffers = getUpdatingSourceBuffers(sourceBuffers);

    if (updatingSourceBuffers.length === 0) {
      log/* default.info */.Z.info("Init: Triggering end of stream");
      mediaSource.endOfStream();
      return (0,of.of)(null);
    }

    log/* default.debug */.Z.debug("Init: Waiting SourceBuffers to be updated before calling endOfStream.");
    var updatedSourceBuffers$ = updatingSourceBuffers.map(function (sourceBuffer) {
      return onUpdate$(sourceBuffer).pipe((0,take/* take */.q)(1));
    });
    return (0,race/* race */.S3)(merge/* merge.apply */.T.apply(void 0, updatedSourceBuffers$).pipe(takeLast(1)), onRemoveSourceBuffers$(sourceBuffers).pipe((0,take/* take */.q)(1))).pipe((0,mergeMap/* mergeMap */.zg)(function () {
      return triggerEndOfStream(mediaSource);
    }));
  });
}
/**
 * Trigger the `endOfStream` method of a MediaSource each times it opens.
 * @see triggerEndOfStream
 * @param {MediaSource} mediaSource
 * @returns {Observable}
 */

function maintainEndOfStream(mediaSource) {
  return end_of_stream_onSourceOpen$(mediaSource).pipe((0,startWith/* startWith */.O)(null), (0,switchMap/* switchMap */.w)(function () {
    return triggerEndOfStream(mediaSource);
  }));
}
// EXTERNAL MODULE: ./src/core/init/initial_seek_and_play.ts + 4 modules
var initial_seek_and_play = __webpack_require__(2795);
;// CONCATENATED MODULE: ./src/compat/is_playback_stuck.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * firefox fix: sometimes playback can be stalled, even if we are in a buffer.
 * TODO This seems to be about an old Firefox version. Delete it?
 * @param {number} time
 * @param {Object|null} currentRange
 * @param {string} state
 * @param {Boolean} isStalled
 * @returns {Boolean}
 */

function isPlaybackStuck(time, currentRange, state, isStalled) {
  var FREEZE_THRESHOLD = 10; // freeze threshold in seconds

  return browser_detection/* isFirefox */.vU && isStalled && state === "timeupdate" && currentRange != null && currentRange.end - time > FREEZE_THRESHOLD;
}
;// CONCATENATED MODULE: ./src/core/init/stall_avoider.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */







var BUFFER_DISCONTINUITY_THRESHOLD = config/* default.BUFFER_DISCONTINUITY_THRESHOLD */.Z.BUFFER_DISCONTINUITY_THRESHOLD;
/**
 * Work-around rounding errors with floating points by setting an acceptable,
 * very short, deviation when checking equalities.
 */

var EPSILON = 1 / 60;
/**
 * Monitor situations where playback is stalled and try to get out of those.
 * Emit "stalled" then "unstalled" respectably when an unavoidable stall is
 * encountered and exited.
 * @param {Observable} clock$ - Observable emitting the current playback
 * conditions.
 * @param {HTMLMediaElement} mediaElement - The HTMLMediaElement on which the
 * media is played.
 * @param {Object} manifest - The Manifest of the currently-played content.
 * @param {Observable} discontinuityUpdate$ - Observable emitting encountered
 * discontinuities for loaded Period and buffer types.
 * @returns {Observable}
 */

function StallAvoider(clock$, mediaElement, manifest, discontinuityUpdate$) {
  var initialDiscontinuitiesStore = [];
  /**
   * Emit every known audio and video buffer discontinuities in chronological
   * order (first ordered by Period's start, then by bufferType in any order.
   */

  var discontinuitiesStore$ = discontinuityUpdate$.pipe(withLatestFrom(clock$), // listen to clock to clean-up old discontinuities
  (0,scan/* scan */.R)(function (discontinuitiesStore, _ref) {
    var evt = _ref[0],
        tick = _ref[1];
    return updateDiscontinuitiesStore(discontinuitiesStore, evt, tick);
  }, initialDiscontinuitiesStore));
  return clock$.pipe(withLatestFrom(discontinuitiesStore$), (0,map/* map */.U)(function (_ref2) {
    var tick = _ref2[0],
        discontinuitiesStore = _ref2[1];
    var buffered = tick.buffered,
        currentRange = tick.currentRange,
        position = tick.position,
        state = tick.state,
        stalled = tick.stalled;

    if (stalled === null) {
      return {
        type: "unstalled",
        value: null
      };
    }
    /** Position at which data is awaited. */


    var stalledPosition = stalled.position;

    if (stalledPosition !== null) {
      var skippableDiscontinuity = findSeekableDiscontinuity(discontinuitiesStore, manifest, stalledPosition);

      if (skippableDiscontinuity !== null) {
        var realSeekTime = skippableDiscontinuity + 0.001;

        if (realSeekTime <= mediaElement.currentTime) {
          log/* default.info */.Z.info("Init: position to seek already reached, no seeking", mediaElement.currentTime, realSeekTime);
        } else {
          log/* default.warn */.Z.warn("SA: skippable discontinuity found in the stream", position, realSeekTime);
          mediaElement.currentTime = realSeekTime;
          return stream_events_generators.warning(generateDiscontinuityError(stalledPosition, realSeekTime));
        }
      }
    } // Is it a browser bug? -> force seek at the same current time


    if (isPlaybackStuck(position, currentRange, state, stalled !== null)) {
      log/* default.warn */.Z.warn("Init: After freeze seek", position, currentRange);
      mediaElement.currentTime = position;
      return stream_events_generators.warning(generateDiscontinuityError(position, position));
    }

    var freezePosition = stalledPosition !== null && stalledPosition !== void 0 ? stalledPosition : position; // Is it a very short discontinuity in buffer ? -> Seek at the beginning of the
    //                                                 next range
    //
    // Discontinuity check in case we are close a buffered range but still
    // calculate a stalled state. This is useful for some
    // implementation that might drop an injected segment, or in
    // case of small discontinuity in the content.

    var nextBufferRangeGap = (0,ranges/* getNextRangeGap */.XS)(buffered, freezePosition);

    if (nextBufferRangeGap < BUFFER_DISCONTINUITY_THRESHOLD) {
      var seekTo = freezePosition + nextBufferRangeGap + EPSILON;

      if (mediaElement.currentTime < seekTo) {
        log/* default.warn */.Z.warn("Init: discontinuity encountered inferior to the threshold", freezePosition, seekTo, BUFFER_DISCONTINUITY_THRESHOLD);
        mediaElement.currentTime = seekTo;
        return stream_events_generators.warning(generateDiscontinuityError(freezePosition, seekTo));
      }
    } // Are we in a discontinuity between periods ? -> Seek at the beginning of the
    //                                                next period


    for (var i = manifest.periods.length - 2; i >= 0; i--) {
      var period = manifest.periods[i];

      if (period.end !== undefined && period.end <= freezePosition) {
        if (manifest.periods[i + 1].start > freezePosition && manifest.periods[i + 1].start > mediaElement.currentTime) {
          var nextPeriod = manifest.periods[i + 1];
          mediaElement.currentTime = nextPeriod.start;
          return stream_events_generators.warning(generateDiscontinuityError(freezePosition, nextPeriod.start));
        }

        break;
      }
    }

    return {
      type: "stalled",
      value: stalled
    };
  }));
}
/**
 * @param {Array.<Object>} discontinuitiesStore
 * @param {Object} manifest
 * @param {number} stalledPosition
 * @returns {number|null}
 */

function findSeekableDiscontinuity(discontinuitiesStore, manifest, stalledPosition) {
  if (discontinuitiesStore.length === 0) {
    return null;
  }

  var maxDiscontinuityEnd = null;

  for (var i = 0; i < discontinuitiesStore.length; i++) {
    var period = discontinuitiesStore[i].period;

    if (period.start > stalledPosition) {
      return maxDiscontinuityEnd;
    }

    var discontinuityEnd = void 0;

    if (period.end === undefined || period.end > stalledPosition) {
      var _discontinuitiesStore = discontinuitiesStore[i],
          discontinuity = _discontinuitiesStore.discontinuity,
          position = _discontinuitiesStore.position;
      var start = discontinuity.start,
          end = discontinuity.end;
      var discontinuityLowerLimit = start !== null && start !== void 0 ? start : position;

      if (stalledPosition >= discontinuityLowerLimit - EPSILON) {
        if (end === null) {
          var nextPeriod = manifest.getPeriodAfter(period);

          if (nextPeriod !== null) {
            discontinuityEnd = nextPeriod.start + EPSILON;
          } else {
            log/* default.warn */.Z.warn("Init: discontinuity at Period's end but no next Period");
          }
        } else if (stalledPosition < end + EPSILON) {
          discontinuityEnd = end + EPSILON;
        }
      }

      if (discontinuityEnd !== undefined) {
        log/* default.info */.Z.info("Init: discontinuity found", stalledPosition, discontinuityEnd);
        maxDiscontinuityEnd = maxDiscontinuityEnd !== null && maxDiscontinuityEnd > discontinuityEnd ? maxDiscontinuityEnd : discontinuityEnd;
      }
    }
  }

  return maxDiscontinuityEnd;
}
/**
 * Return `true` if the given event indicates that a discontinuity is present.
 * @param {Object} evt
 * @returns {Array.<Object>}
 */


function eventContainsDiscontinuity(evt) {
  return evt.discontinuity !== null;
}
/**
 * Update the `discontinuitiesStore` Object with the given event information:
 *
 *   - If that event indicates than no discontinuity is found for a Period
 *     and buffer type, remove a possible existing discontinuity for that
 *     combination.
 *
 *   - If that event indicates that a discontinuity can be found for a Period
 *     and buffer type, replace previous occurences for that combination and
 *     store it in Period's chronological order in the Array.
 * @param {Array.<Object>} discontinuitiesStore
 * @param {Object} evt
 * @param {Object} tick
 * @returns {Array.<Object>}
 */


function updateDiscontinuitiesStore(discontinuitiesStore, evt, tick) {
  // First, perform clean-up of old discontinuities
  while (discontinuitiesStore.length > 0 && discontinuitiesStore[0].period.end !== undefined && discontinuitiesStore[0].period.end + 10 < tick.position) {
    discontinuitiesStore.shift();
  }

  var period = evt.period,
      bufferType = evt.bufferType;

  if (bufferType !== "audio" && bufferType !== "video") {
    return discontinuitiesStore;
  }

  for (var i = 0; i < discontinuitiesStore.length; i++) {
    if (discontinuitiesStore[i].period.id === period.id) {
      if (discontinuitiesStore[i].bufferType === bufferType) {
        if (!eventContainsDiscontinuity(evt)) {
          discontinuitiesStore.splice(i, 1);
        } else {
          discontinuitiesStore[i] = evt;
        }

        return discontinuitiesStore;
      }
    } else if (discontinuitiesStore[i].period.start > period.start) {
      if (eventContainsDiscontinuity(evt)) {
        discontinuitiesStore.splice(i, 0, evt);
      }

      return discontinuitiesStore;
    }
  }

  if (eventContainsDiscontinuity(evt)) {
    discontinuitiesStore.push(evt);
  }

  return discontinuitiesStore;
}
/**
 * Generate error emitted when a discontinuity has been encountered.
 * @param {number} stalledPosition
 * @param {number} seekTo
 * @returns {Error}
 */


function generateDiscontinuityError(stalledPosition, seekTo) {
  return new media_error/* default */.Z("DISCONTINUITY_ENCOUNTERED", "A discontinuity has been encountered at position " + String(stalledPosition) + ", seeked at position " + String(seekTo));
}
;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/pairwise.js
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


function pairwise() {
    return function (source) { return source.lift(new PairwiseOperator()); };
}
var PairwiseOperator = /*@__PURE__*/ (function () {
    function PairwiseOperator() {
    }
    PairwiseOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new PairwiseSubscriber(subscriber));
    };
    return PairwiseOperator;
}());
var PairwiseSubscriber = /*@__PURE__*/ (function (_super) {
    tslib_es6/* __extends */.ZT(PairwiseSubscriber, _super);
    function PairwiseSubscriber(destination) {
        var _this = _super.call(this, destination) || this;
        _this.hasPrev = false;
        return _this;
    }
    PairwiseSubscriber.prototype._next = function (value) {
        var pair;
        if (this.hasPrev) {
            pair = [this.prev, value];
        }
        else {
            this.hasPrev = true;
        }
        this.prev = value;
        if (pair) {
            this.destination.next(pair);
        }
    };
    return PairwiseSubscriber;
}(Subscriber/* Subscriber */.L));
//# sourceMappingURL=pairwise.js.map

;// CONCATENATED MODULE: ./src/core/init/stream_events_emitter/are_same_stream_events.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Compare 2 events.
 * As the payload of two events may be the same, but the JS objects may not
 * have the same references, it may be difficult to compare them.
 * If two events start and end at the same moment, and possess the same id,
 * we consider the two to be the same.
 * /!\ However, the DASH-if spec does not say that the event payload
 * may be the same if these conditions are met. Thus, there are high chances
 * that it may be the case.
 * TODO See if we can compare payloads
 * @param {Object} evt1
 * @param {Object} evt2
 * @returns {Boolean}
 */
function areSameStreamEvents(evt1, evt2) {
  return evt1.id === evt2.id && evt1.start === evt2.start && evt1.end === evt2.end;
}

/* harmony default export */ const are_same_stream_events = (areSameStreamEvents);
;// CONCATENATED MODULE: ./src/core/init/stream_events_emitter/refresh_scheduled_events_list.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Refresh local scheduled events list
 * @param {Array.<Object>} oldScheduledEvents
 * @param {Object} manifest
 * @returns {Array.<Object>}
 */

function refreshScheduledEventsList(oldScheduledEvents, manifest) {
  var scheduledEvents = [];
  var periods = manifest.periods;

  for (var i = 0; i < periods.length; i++) {
    var period = periods[i];
    var streamEvents = period.streamEvents;
    streamEvents.forEach(function (_ref) {
      var start = _ref.start,
          end = _ref.end,
          id = _ref.id,
          data = _ref.data;

      for (var j = 0; j < oldScheduledEvents.length; j++) {
        var currentScheduledEvent = oldScheduledEvents[j];

        if (are_same_stream_events(currentScheduledEvent, {
          id: id,
          start: start,
          end: end
        })) {
          scheduledEvents.push(currentScheduledEvent);
          return;
        }
      }

      if (end === undefined) {
        var newScheduledEvent = {
          start: start,
          id: id,
          data: data,
          publicEvent: {
            start: start,
            data: data
          }
        };
        scheduledEvents.push(newScheduledEvent);
      } else {
        var _newScheduledEvent = {
          start: start,
          end: end,
          id: id,
          data: data,
          publicEvent: {
            start: start,
            end: end,
            data: data
          }
        };
        scheduledEvents.push(_newScheduledEvent);
      }
    });
  }

  return scheduledEvents;
}

/* harmony default export */ const refresh_scheduled_events_list = (refreshScheduledEventsList);
;// CONCATENATED MODULE: ./src/core/init/stream_events_emitter/stream_events_emitter.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





var STREAM_EVENT_EMITTER_POLL_INTERVAL = config/* default.STREAM_EVENT_EMITTER_POLL_INTERVAL */.Z.STREAM_EVENT_EMITTER_POLL_INTERVAL;
/**
 * Tells if a stream event has a duration
 * @param {Object} evt
 * @returns {Boolean}
 */

function isFiniteStreamEvent(evt) {
  return evt.end !== undefined;
}
/**
 * Get events from manifest and emit each time an event has to be emitted
 * @param {Object} manifest
 * @param {HTMLMediaElement} mediaElement
 * @returns {Observable}
 */


function streamEventsEmitter(manifest, mediaElement, clock$) {
  var eventsBeingPlayed = new WeakMap();
  var lastScheduledEvents = [];
  var scheduledEvents$ = (0,event_emitter/* fromEvent */.R)(manifest, "manifestUpdate").pipe((0,startWith/* startWith */.O)(null), (0,scan/* scan */.R)(function (oldScheduledEvents) {
    return refresh_scheduled_events_list(oldScheduledEvents, manifest);
  }, []));
  /**
   * Examine playback situation from clock ticks to emit stream events and
   * prepare set onExit callbacks if needed.
   * @param {Array.<Object>} scheduledEvents
   * @param {Object} oldTick
   * @param {Object} newTick
   * @returns {Observable}
   */

  function emitStreamEvents$(scheduledEvents, oldClockTick, newClockTick) {
    var previousTime = oldClockTick.currentTime;
    var isSeeking = newClockTick.isSeeking,
        currentTime = newClockTick.currentTime;
    var eventsToSend = [];
    var eventsToExit = [];

    for (var i = 0; i < scheduledEvents.length; i++) {
      var event = scheduledEvents[i];
      var start = event.start;
      var end = isFiniteStreamEvent(event) ? event.end : undefined;
      var isBeingPlayed = eventsBeingPlayed.has(event);

      if (isBeingPlayed) {
        if (start > currentTime || end !== undefined && currentTime >= end) {
          if (isFiniteStreamEvent(event)) {
            eventsToExit.push(event.publicEvent);
          }

          eventsBeingPlayed["delete"](event);
        }
      } else if (start <= currentTime && end !== undefined && currentTime < end) {
        eventsToSend.push({
          type: "stream-event",
          value: event.publicEvent
        });
        eventsBeingPlayed.set(event, true);
      } else if (previousTime < start && currentTime >= (end !== null && end !== void 0 ? end : start)) {
        if (isSeeking) {
          eventsToSend.push({
            type: "stream-event-skip",
            value: event.publicEvent
          });
        } else {
          eventsToSend.push({
            type: "stream-event",
            value: event.publicEvent
          });

          if (isFiniteStreamEvent(event)) {
            eventsToExit.push(event.publicEvent);
          }
        }
      }
    }

    return (0,concat/* concat */.z)(eventsToSend.length > 0 ? of.of.apply(void 0, eventsToSend) : empty/* EMPTY */.E, eventsToExit.length > 0 ? of.of.apply(void 0, eventsToExit).pipe((0,tap/* tap */.b)(function (evt) {
      if (typeof evt.onExit === "function") {
        evt.onExit();
      }
    }), (0,ignoreElements/* ignoreElements */.l)()) : empty/* EMPTY */.E);
  }
  /**
   * This pipe allows to control wether the polling should occur, if there
   * are scheduledEvents, or not.
   */


  return scheduledEvents$.pipe((0,tap/* tap */.b)(function (scheduledEvents) {
    return lastScheduledEvents = scheduledEvents;
  }), (0,map/* map */.U)(function (evt) {
    return evt.length > 0;
  }), (0,distinctUntilChanged/* distinctUntilChanged */.x)(), (0,switchMap/* switchMap */.w)(function (hasEvents) {
    if (!hasEvents) {
      return empty/* EMPTY */.E;
    }

    return (0,combineLatest/* combineLatest */.aj)([(0,observable_interval/* interval */.F)(STREAM_EVENT_EMITTER_POLL_INTERVAL).pipe((0,startWith/* startWith */.O)(null)), clock$]).pipe((0,map/* map */.U)(function (_ref) {
      var _ = _ref[0],
          clockTick = _ref[1];
      var seeking = clockTick.seeking;
      return {
        isSeeking: seeking,
        currentTime: mediaElement.currentTime
      };
    }), pairwise(), (0,mergeMap/* mergeMap */.zg)(function (_ref2) {
      var oldTick = _ref2[0],
          newTick = _ref2[1];
      return emitStreamEvents$(lastScheduledEvents, oldTick, newTick);
    }));
  }));
}

/* harmony default export */ const stream_events_emitter = (streamEventsEmitter);
;// CONCATENATED MODULE: ./src/core/init/stream_events_emitter/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* harmony default export */ const init_stream_events_emitter = (stream_events_emitter);
// EXTERNAL MODULE: ./src/core/init/update_playback_rate.ts
var update_playback_rate = __webpack_require__(2983);
;// CONCATENATED MODULE: ./src/core/init/load_on_media_source.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */














/**
 * Returns a function allowing to load or reload the content in arguments into
 * a single or multiple MediaSources.
 * @param {Object} args
 * @returns {Function}
 */

function createMediaSourceLoader(_ref) {
  var mediaElement = _ref.mediaElement,
      manifest = _ref.manifest,
      clock$ = _ref.clock$,
      speed$ = _ref.speed$,
      bufferOptions = _ref.bufferOptions,
      abrManager = _ref.abrManager,
      segmentFetcherCreator = _ref.segmentFetcherCreator;

  /**
   * Load the content on the given MediaSource.
   * @param {MediaSource} mediaSource
   * @param {number} initialTime
   * @param {boolean} autoPlay
   */
  return function loadContentOnMediaSource(mediaSource, initialTime, autoPlay) {
    var _a; // TODO Update the duration if it evolves?


    var duration = manifest.isLive ? Infinity : manifest.getMaximumPosition();
    setDurationToMediaSource(mediaSource, duration);
    var initialPeriod = (_a = manifest.getPeriodForTime(initialTime)) !== null && _a !== void 0 ? _a : manifest.getNextPeriod(initialTime);

    if (initialPeriod === undefined) {
      var error = new media_error/* default */.Z("MEDIA_STARTING_TIME_NOT_FOUND", "Wanted starting time not found in the Manifest.");
      return (0,throwError/* throwError */._)(error);
    }
    /** Interface to create media buffers for loaded segments. */


    var segmentBuffersStore = new segment_buffers(mediaElement, mediaSource);

    var _seekAndLoadOnMediaEv = (0,initial_seek_and_play/* default */.Z)({
      clock$: clock$,
      mediaElement: mediaElement,
      startTime: initialTime,
      mustAutoPlay: autoPlay,
      isDirectfile: false
    }),
        seek$ = _seekAndLoadOnMediaEv.seek$,
        load$ = _seekAndLoadOnMediaEv.load$;

    var initialPlay$ = load$.pipe((0,filter/* filter */.h)(function (evt) {
      return evt !== "not-loaded-metadata";
    }));
    var streamEvents$ = initialPlay$.pipe((0,mergeMap/* mergeMap */.zg)(function () {
      return init_stream_events_emitter(manifest, mediaElement, clock$);
    }));
    var streamClock$ = createStreamClock(clock$, {
      autoPlay: autoPlay,
      initialPlay$: initialPlay$,
      initialSeek$: seek$,
      manifest: manifest,
      speed$: speed$,
      startTime: initialTime
    });
    /** Cancel endOfStream calls when streams become active again. */

    var cancelEndOfStream$ = new Subject/* Subject */.xQ();
    /** Emits discontinuities detected by the StreamOrchestrator. */

    var discontinuityUpdate$ = new Subject/* Subject */.xQ(); // Creates Observable which will manage every Stream for the given Content.

    var streams$ = stream({
      manifest: manifest,
      initialPeriod: initialPeriod
    }, streamClock$, abrManager, segmentBuffersStore, segmentFetcherCreator, bufferOptions).pipe((0,mergeMap/* mergeMap */.zg)(function (evt) {
      switch (evt.type) {
        case "end-of-stream":
          log/* default.debug */.Z.debug("Init: end-of-stream order received.");
          return maintainEndOfStream(mediaSource).pipe((0,ignoreElements/* ignoreElements */.l)(), (0,takeUntil/* takeUntil */.R)(cancelEndOfStream$));

        case "resume-stream":
          log/* default.debug */.Z.debug("Init: resume-stream order received.");
          cancelEndOfStream$.next(null);
          return empty/* EMPTY */.E;

        case "stream-status":
          var _evt$value = evt.value,
              period = _evt$value.period,
              bufferType = _evt$value.bufferType,
              imminentDiscontinuity = _evt$value.imminentDiscontinuity,
              position = _evt$value.position;
          discontinuityUpdate$.next({
            period: period,
            bufferType: bufferType,
            discontinuity: imminentDiscontinuity,
            position: position
          });
          return empty/* EMPTY */.E;

        default:
          return (0,of.of)(evt);
      }
    }));
    /**
     * On subscription, keep the playback speed synchronized to the speed set by
     * the user on the media element and force a speed of `0` when the buffer is
     * empty, so it can build back buffer.
     */

    var playbackRate$ = (0,update_playback_rate/* default */.Z)(mediaElement, speed$, clock$, {
      pauseWhenStalled: true
    }).pipe((0,ignoreElements/* ignoreElements */.l)());
    /**
     * Observable trying to avoid various stalling situations, emitting "stalled"
     * events when it cannot, as well as "unstalled" events when it get out of one.
     */

    var stallAvoider$ = StallAvoider(clock$, mediaElement, manifest, discontinuityUpdate$);
    var loadedEvent$ = load$.pipe((0,mergeMap/* mergeMap */.zg)(function (evt) {
      if (evt === "autoplay-blocked") {
        var _error = new media_error/* default */.Z("MEDIA_ERR_BLOCKED_AUTOPLAY", "Cannot trigger auto-play automatically: " + "your browser does not allow it.");

        return (0,of.of)(events_generators/* default.warning */.Z.warning(_error), events_generators/* default.loaded */.Z.loaded(segmentBuffersStore));
      } else if (evt === "not-loaded-metadata") {
        var _error2 = new media_error/* default */.Z("MEDIA_ERR_NOT_LOADED_METADATA", "Cannot load automatically: your browser " + "falsely announced having loaded the content.");

        return (0,of.of)(events_generators/* default.warning */.Z.warning(_error2));
      }

      log/* default.debug */.Z.debug("Init: The current content is loaded.");
      return (0,of.of)(events_generators/* default.loaded */.Z.loaded(segmentBuffersStore));
    }));
    return (0,merge/* merge */.T)(loadedEvent$, playbackRate$, stallAvoider$, streams$, streamEvents$).pipe(finalize(function () {
      // clean-up every created SegmentBuffers
      segmentBuffersStore.disposeAll();
    }));
  };
}
;// CONCATENATED MODULE: ./src/core/init/manifest_update_scheduler.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




var FAILED_PARTIAL_UPDATE_MANIFEST_REFRESH_DELAY = config/* default.FAILED_PARTIAL_UPDATE_MANIFEST_REFRESH_DELAY */.Z.FAILED_PARTIAL_UPDATE_MANIFEST_REFRESH_DELAY,
    MAX_CONSECUTIVE_MANIFEST_PARSING_IN_UNSAFE_MODE = config/* default.MAX_CONSECUTIVE_MANIFEST_PARSING_IN_UNSAFE_MODE */.Z.MAX_CONSECUTIVE_MANIFEST_PARSING_IN_UNSAFE_MODE,
    MIN_MANIFEST_PARSING_TIME_TO_ENTER_UNSAFE_MODE = config/* default.MIN_MANIFEST_PARSING_TIME_TO_ENTER_UNSAFE_MODE */.Z.MIN_MANIFEST_PARSING_TIME_TO_ENTER_UNSAFE_MODE;
/**
 * Refresh the Manifest at the right time.
 * @param {Object} manifestUpdateSchedulerArguments
 * @returns {Observable}
 */

function manifestUpdateScheduler(_ref) {
  var fetchManifest = _ref.fetchManifest,
      initialManifest = _ref.initialManifest,
      manifestUpdateUrl = _ref.manifestUpdateUrl,
      minimumManifestUpdateInterval = _ref.minimumManifestUpdateInterval,
      scheduleRefresh$ = _ref.scheduleRefresh$;
  // The Manifest always keeps the same Manifest
  var manifest = initialManifest.manifest;
  /** Number of consecutive times the parsing has been done in `unsafeMode`. */

  var consecutiveUnsafeMode = 0;

  function handleManifestRefresh$(manifestInfos) {
    var sendingTime = manifestInfos.sendingTime,
        parsingTime = manifestInfos.parsingTime,
        updatingTime = manifestInfos.updatingTime;
    /**
     * Total time taken to fully update the last Manifest.
     * Note: this time also includes possible requests done by the parsers.
     */

    var totalUpdateTime = parsingTime !== undefined ? parsingTime + (updatingTime !== null && updatingTime !== void 0 ? updatingTime : 0) : undefined; // Only perform parsing in `unsafeMode` when the last full parsing took a
    // lot of time and do not go higher than the maximum consecutive time.

    var unsafeModeEnabled = consecutiveUnsafeMode > 0 ? consecutiveUnsafeMode < MAX_CONSECUTIVE_MANIFEST_PARSING_IN_UNSAFE_MODE : totalUpdateTime !== undefined ? totalUpdateTime >= MIN_MANIFEST_PARSING_TIME_TO_ENTER_UNSAFE_MODE : false;
    var internalRefresh$ = scheduleRefresh$.pipe((0,mergeMap/* mergeMap */.zg)(function (_ref2) {
      var completeRefresh = _ref2.completeRefresh,
          delay = _ref2.delay,
          canUseUnsafeMode = _ref2.canUseUnsafeMode;
      var unsafeMode = canUseUnsafeMode && unsafeModeEnabled;
      return startManualRefreshTimer(delay !== null && delay !== void 0 ? delay : 0, minimumManifestUpdateInterval, sendingTime).pipe((0,mapTo/* mapTo */.h)({
        completeRefresh: completeRefresh,
        unsafeMode: unsafeMode
      }));
    }));
    var timeSinceRequest = sendingTime === undefined ? 0 : performance.now() - sendingTime;
    var minInterval = Math.max(minimumManifestUpdateInterval - timeSinceRequest, 0);
    var autoRefresh$;

    if (manifest.lifetime === undefined || manifest.lifetime < 0) {
      autoRefresh$ = empty/* EMPTY */.E;
    } else {
      var autoRefreshInterval = manifest.lifetime * 1000 - timeSinceRequest;

      if (totalUpdateTime !== undefined) {
        if (manifest.lifetime < 3 && totalUpdateTime >= 100) {
          var defaultDelay = (3 - manifest.lifetime) * 1000 + autoRefreshInterval;
          var newInterval = Math.max(defaultDelay, Math.max(autoRefreshInterval, 0) + totalUpdateTime);
          log/* default.info */.Z.info("MUS: Manifest update rythm is too frequent. Postponing next request.", autoRefreshInterval, newInterval);
          autoRefreshInterval = newInterval;
        } else if (totalUpdateTime >= manifest.lifetime * 1000 / 10) {
          var _newInterval = Math.max(autoRefreshInterval, 0) + totalUpdateTime;

          log/* default.info */.Z.info("MUS: Manifest took too long to parse. Postponing next request", autoRefreshInterval, _newInterval);
          autoRefreshInterval = _newInterval;
        }
      }

      autoRefresh$ = (0,timer/* timer */.H)(Math.max(autoRefreshInterval, minInterval)).pipe((0,mapTo/* mapTo */.h)({
        completeRefresh: false,
        unsafeMode: unsafeModeEnabled
      }));
    }

    var expired$ = manifest.expired === null ? empty/* EMPTY */.E : (0,timer/* timer */.H)(minInterval).pipe((0,mergeMapTo/* mergeMapTo */.j)((0,from/* from */.D)(manifest.expired)), (0,mapTo/* mapTo */.h)({
      completeRefresh: true,
      unsafeMode: unsafeModeEnabled
    })); // Emit when the manifest should be refreshed. Either when:
    //   - A Stream asks for it to be refreshed
    //   - its lifetime expired.

    return (0,merge/* merge */.T)(autoRefresh$, internalRefresh$, expired$).pipe((0,take/* take */.q)(1), (0,mergeMap/* mergeMap */.zg)(function (_ref3) {
      var completeRefresh = _ref3.completeRefresh,
          unsafeMode = _ref3.unsafeMode;
      return refreshManifest({
        completeRefresh: completeRefresh,
        unsafeMode: unsafeMode
      });
    }), (0,mergeMap/* mergeMap */.zg)(function (evt) {
      if (evt.type === "warning") {
        return (0,of.of)(evt);
      }

      return handleManifestRefresh$(evt);
    }));
  }

  return (0,defer/* defer */.P)(function () {
    return handleManifestRefresh$(initialManifest);
  });
  /**
   * Refresh the Manifest.
   * Perform a full update if a partial update failed.
   * @param {boolean} completeRefresh
   * @returns {Observable}
   */

  function refreshManifest(_ref4) {
    var completeRefresh = _ref4.completeRefresh,
        unsafeMode = _ref4.unsafeMode;
    var fullRefresh = completeRefresh || manifestUpdateUrl === undefined;
    var refreshURL = fullRefresh ? manifest.getUrl() : manifestUpdateUrl;
    var externalClockOffset = manifest.clockOffset;

    if (unsafeMode) {
      consecutiveUnsafeMode += 1;
      log/* default.info */.Z.info("Init: Refreshing the Manifest in \"unsafeMode\" for the " + String(consecutiveUnsafeMode) + " consecutive time.");
    } else if (consecutiveUnsafeMode > 0) {
      log/* default.info */.Z.info("Init: Not parsing the Manifest in \"unsafeMode\" anymore after " + String(consecutiveUnsafeMode) + " consecutive times.");
      consecutiveUnsafeMode = 0;
    }

    return fetchManifest(refreshURL, {
      externalClockOffset: externalClockOffset,
      previousManifest: manifest,
      unsafeMode: unsafeMode
    }).pipe((0,mergeMap/* mergeMap */.zg)(function (value) {
      if (value.type === "warning") {
        return (0,of.of)(value);
      }

      var newManifest = value.manifest,
          newSendingTime = value.sendingTime,
          receivedTime = value.receivedTime,
          parsingTime = value.parsingTime;
      var updateTimeStart = performance.now();

      if (fullRefresh) {
        manifest.replace(newManifest);
      } else {
        try {
          manifest.update(newManifest);
        } catch (e) {
          var message = e instanceof Error ? e.message : "unknown error";
          log/* default.warn */.Z.warn("MUS: Attempt to update Manifest failed: " + message, "Re-downloading the Manifest fully");
          return startManualRefreshTimer(FAILED_PARTIAL_UPDATE_MANIFEST_REFRESH_DELAY, minimumManifestUpdateInterval, newSendingTime).pipe((0,mergeMap/* mergeMap */.zg)(function () {
            return refreshManifest({
              completeRefresh: true,
              unsafeMode: false
            });
          }));
        }
      }

      return (0,of.of)({
        type: "parsed",
        manifest: manifest,
        sendingTime: newSendingTime,
        receivedTime: receivedTime,
        parsingTime: parsingTime,
        updatingTime: performance.now() - updateTimeStart
      });
    }));
  }
}
/**
 * Launch a timer Observable which will emit when it is time to refresh the
 * Manifest.
 * The timer's delay is calculated from:
 *   - a target delay (`wantedDelay`), which is the minimum time we want to wait
 *     in the best scenario
 *   - the minimum set possible interval between manifest updates
 *     (`minimumManifestUpdateInterval`)
 *   - the time at which was done the last Manifest refresh
 *     (`lastManifestRequestTime`)
 * @param {number} wantedDelay
 * @param {number} minimumManifestUpdateInterval
 * @param {number|undefined} lastManifestRequestTime
 * @returns {Observable}
 */

function startManualRefreshTimer(wantedDelay, minimumManifestUpdateInterval, lastManifestRequestTime) {
  return (0,defer/* defer */.P)(function () {
    // The value allows to set a delay relatively to the last Manifest refresh
    // (to avoid asking for it too often).
    var timeSinceLastRefresh = lastManifestRequestTime === undefined ? 0 : performance.now() - lastManifestRequestTime;

    var _minInterval = Math.max(minimumManifestUpdateInterval - timeSinceLastRefresh, 0);

    return (0,timer/* timer */.H)(Math.max(wantedDelay - timeSinceLastRefresh, _minInterval));
  });
}
// EXTERNAL MODULE: ./src/core/init/throw_on_media_error.ts
var throw_on_media_error = __webpack_require__(2447);
;// CONCATENATED MODULE: ./src/core/init/initialize_media_source.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





















var OUT_OF_SYNC_MANIFEST_REFRESH_DELAY = config/* default.OUT_OF_SYNC_MANIFEST_REFRESH_DELAY */.Z.OUT_OF_SYNC_MANIFEST_REFRESH_DELAY;
/**
 * Begin content playback.
 *
 * Returns an Observable emitting notifications about the content lifecycle.
 * On subscription, it will perform every necessary tasks so the content can
 * play. Among them:
 *
 *   - Creates a MediaSource on the given `mediaElement` and attach to it the
 *     necessary SourceBuffer instances.
 *
 *   - download the content's Manifest and handle its refresh logic
 *
 *   - Perform EME management if needed
 *
 *   - ask for the choice of the wanted Adaptation through events (e.g. to
 *     choose a language)
 *
 *   - requests and push the right segments (according to the Adaptation choice,
 *     the current position, the network conditions etc.)
 *
 * This Observable will throw in the case where a fatal error (i.e. which has
 * stopped content playback) is encountered, with the corresponding error as a
 * payload.
 *
 * This Observable will never complete, it will always run until it is
 * unsubscribed from.
 * Unsubscription will stop playback and reset the corresponding state.
 *
 * @param {Object} args
 * @returns {Observable}
 */

function InitializeOnMediaSource(_ref) {
  var adaptiveOptions = _ref.adaptiveOptions,
      autoPlay = _ref.autoPlay,
      bufferOptions = _ref.bufferOptions,
      clock$ = _ref.clock$,
      content = _ref.content,
      keySystems = _ref.keySystems,
      lowLatencyMode = _ref.lowLatencyMode,
      mediaElement = _ref.mediaElement,
      minimumManifestUpdateInterval = _ref.minimumManifestUpdateInterval,
      networkConfig = _ref.networkConfig,
      speed$ = _ref.speed$,
      startAt = _ref.startAt,
      textTrackOptions = _ref.textTrackOptions,
      transportPipelines = _ref.transportPipelines;
  var url = content.url,
      initialManifest = content.initialManifest,
      manifestUpdateUrl = content.manifestUpdateUrl;
  var offlineRetry = networkConfig.offlineRetry,
      segmentRetry = networkConfig.segmentRetry,
      manifestRetry = networkConfig.manifestRetry;
  var manifestFetcher = new fetchers_manifest(url, transportPipelines, {
    lowLatencyMode: lowLatencyMode,
    maxRetryRegular: manifestRetry,
    maxRetryOffline: offlineRetry
  });
  /**
   * Fetch and parse the manifest from the URL given.
   * Throttled to avoid doing multiple simultaneous requests.
   */

  var fetchManifest = throttle(function (manifestURL, options) {
    return manifestFetcher.fetch(manifestURL).pipe((0,mergeMap/* mergeMap */.zg)(function (response) {
      return response.type === "warning" ? (0,of.of)(response) : // bubble-up warnings
      response.parse(options);
    }), (0,share/* share */.B)());
  });
  /** Interface used to download segments. */

  var segmentFetcherCreator = new segment(transportPipelines, {
    lowLatencyMode: lowLatencyMode,
    maxRetryOffline: offlineRetry,
    maxRetryRegular: segmentRetry
  });
  /** Choose the right "Representation" for a given "Adaptation". */

  var abrManager = new abr(adaptiveOptions);
  /**
   * Create and open a new MediaSource object on the given media element on
   * subscription.
   * Multiple concurrent subscriptions on this Observable will obtain the same
   * created MediaSource.
   * The MediaSource will be closed when subscriptions are down to 0.
   */

  var openMediaSource$ = openMediaSource(mediaElement).pipe((0,shareReplay/* shareReplay */.d)({
    refCount: true
  }));
  /** Send content protection data to the `EMEManager`. */

  var protectedSegments$ = new Subject/* Subject */.xQ();
  /** Create `EMEManager`, an observable which will handle content DRM. */

  var emeManager$ = (0,create_eme_manager/* default */.Z)(mediaElement, keySystems, protectedSegments$).pipe( // Because multiple Observables here depend on this Observable as a source,
  // we prefer deferring Subscription until those Observables are themselves
  // all subscribed to.
  // This is needed because `emeManager$` might send events synchronously
  // on subscription. In that case, it might communicate those events directly
  // after the first Subscription is done, making the next subscription miss
  // out on those events, even if that second subscription is done
  // synchronously after the first one.
  // By calling `deferSubscriptions`, we ensure that subscription to
  // `emeManager$` effectively starts after a very short delay, thus
  // ensuring that no such race condition can occur.
  (0,defer_subscriptions/* default */.Z)(), (0,share/* share */.B)());
  /**
   * Translate errors coming from the media element into RxPlayer errors
   * through a throwing Observable.
   */

  var mediaError$ = (0,throw_on_media_error/* default */.Z)(mediaElement);
  var initialManifestRequest$;

  if (initialManifest instanceof manifest/* default */.ZP) {
    initialManifestRequest$ = (0,of.of)({
      type: "parsed",
      manifest: initialManifest
    });
  } else if (initialManifest !== undefined) {
    initialManifestRequest$ = manifestFetcher.parse(initialManifest, {
      previousManifest: null,
      unsafeMode: false
    });
  } else {
    initialManifestRequest$ = fetchManifest(url, {
      previousManifest: null,
      unsafeMode: false
    });
  }
  /**
   * Wait for the MediaKeys to have been created before
   * opening MediaSource, and ask EME to attach MediaKeys.
   */


  var prepareMediaSource$ = emeManager$.pipe((0,mergeMap/* mergeMap */.zg)(function (evt) {
    switch (evt.type) {
      case "eme-disabled":
      case "attached-media-keys":
        return (0,of.of)(undefined);

      case "created-media-keys":
        return openMediaSource$.pipe((0,mergeMap/* mergeMap */.zg)(function () {
          evt.value.attachMediaKeys$.next();
          var shouldDisableLock = evt.value.options.disableMediaKeysAttachmentLock === true;

          if (shouldDisableLock) {
            return (0,of.of)(undefined);
          } // wait for "attached-media-keys"


          return empty/* EMPTY */.E;
        }));

      default:
        return empty/* EMPTY */.E;
    }
  }), (0,take/* take */.q)(1), exhaustMap(function () {
    return openMediaSource$;
  }));
  /** Load and play the content asked. */

  var loadContent$ = (0,combineLatest/* combineLatest */.aj)([initialManifestRequest$, prepareMediaSource$]).pipe((0,mergeMap/* mergeMap */.zg)(function (_ref2) {
    var manifestEvt = _ref2[0],
        initialMediaSource = _ref2[1];

    if (manifestEvt.type === "warning") {
      return (0,of.of)(manifestEvt);
    }

    var manifest = manifestEvt.manifest;
    log/* default.debug */.Z.debug("Init: Calculating initial time");
    var initialTime = getInitialTime(manifest, lowLatencyMode, startAt);
    log/* default.debug */.Z.debug("Init: Initial time calculated:", initialTime);
    var mediaSourceLoader = createMediaSourceLoader({
      abrManager: abrManager,
      bufferOptions: (0,object_assign/* default */.Z)({
        textTrackOptions: textTrackOptions
      }, bufferOptions),
      clock$: clock$,
      manifest: manifest,
      mediaElement: mediaElement,
      segmentFetcherCreator: segmentFetcherCreator,
      speed$: speed$
    }); // handle initial load and reloads

    var recursiveLoad$ = recursivelyLoadOnMediaSource(initialMediaSource, initialTime, autoPlay); // Emit when we want to manually update the manifest.

    var scheduleRefresh$ = new Subject/* Subject */.xQ();
    var manifestUpdate$ = manifestUpdateScheduler({
      fetchManifest: fetchManifest,
      initialManifest: manifestEvt,
      manifestUpdateUrl: manifestUpdateUrl,
      minimumManifestUpdateInterval: minimumManifestUpdateInterval,
      scheduleRefresh$: scheduleRefresh$
    });
    var manifestEvents$ = (0,merge/* merge */.T)((0,event_emitter/* fromEvent */.R)(manifest, "manifestUpdate").pipe((0,mapTo/* mapTo */.h)(events_generators/* default.manifestUpdate */.Z.manifestUpdate())), (0,event_emitter/* fromEvent */.R)(manifest, "decipherabilityUpdate").pipe((0,map/* map */.U)(events_generators/* default.decipherabilityUpdate */.Z.decipherabilityUpdate)));
    var setUndecipherableRepresentations$ = emeManager$.pipe((0,tap/* tap */.b)(function (evt) {
      if (evt.type === "blacklist-keys") {
        log/* default.info */.Z.info("Init: blacklisting Representations based on keyIDs");
        manifest.addUndecipherableKIDs(evt.value);
      } else if (evt.type === "blacklist-protection-data") {
        log/* default.info */.Z.info("Init: blacklisting Representations based on protection data.");

        if (evt.value.type !== undefined) {
          manifest.addUndecipherableProtectionData(evt.value.type, evt.value.data);
        }
      }
    }), (0,ignoreElements/* ignoreElements */.l)());
    return (0,merge/* merge */.T)(manifestEvents$, manifestUpdate$, setUndecipherableRepresentations$, recursiveLoad$).pipe((0,startWith/* startWith */.O)(events_generators/* default.manifestReady */.Z.manifestReady(manifest)), finalize(function () {
      scheduleRefresh$.complete();
    }));
    /**
     * Load the content defined by the Manifest in the mediaSource given at the
     * given position and playing status.
     * This function recursively re-call itself when a MediaSource reload is
     * wanted.
     * @param {MediaSource} mediaSource
     * @param {number} startingPos
     * @param {boolean} shouldPlay
     * @returns {Observable}
     */

    function recursivelyLoadOnMediaSource(mediaSource, startingPos, shouldPlay) {
      var reloadMediaSource$ = new Subject/* Subject */.xQ();
      var mediaSourceLoader$ = mediaSourceLoader(mediaSource, startingPos, shouldPlay).pipe((0,filter_map/* default */.Z)(function (evt) {
        switch (evt.type) {
          case "needs-manifest-refresh":
            scheduleRefresh$.next({
              completeRefresh: false,
              canUseUnsafeMode: true
            });
            return null;

          case "manifest-might-be-out-of-sync":
            scheduleRefresh$.next({
              completeRefresh: true,
              canUseUnsafeMode: false,
              delay: OUT_OF_SYNC_MANIFEST_REFRESH_DELAY
            });
            return null;

          case "needs-media-source-reload":
            reloadMediaSource$.next(evt.value);
            return null;

          case "needs-decipherability-flush":
            var keySystem = get_current_key_system_getCurrentKeySystem(mediaElement);

            if (shouldReloadMediaSourceOnDecipherabilityUpdate(keySystem)) {
              reloadMediaSource$.next(evt.value);
              return null;
            } // simple seek close to the current position
            // to flush the buffers


            var position = evt.value.position;

            if (position + 0.001 < evt.value.duration) {
              mediaElement.currentTime += 0.001;
            } else {
              mediaElement.currentTime = position;
            }

            return null;

          case "protected-segment":
            protectedSegments$.next(evt.value);
            return null;
        }

        return evt;
      }, null));
      var currentLoad$ = mediaSourceLoader$.pipe((0,takeUntil/* takeUntil */.R)(reloadMediaSource$));
      var handleReloads$ = reloadMediaSource$.pipe((0,switchMap/* switchMap */.w)(function (reloadOrder) {
        return openMediaSource(mediaElement).pipe((0,mergeMap/* mergeMap */.zg)(function (newMS) {
          return recursivelyLoadOnMediaSource(newMS, reloadOrder.position, reloadOrder.autoPlay);
        }), (0,startWith/* startWith */.O)(events_generators/* default.reloadingMediaSource */.Z.reloadingMediaSource()));
      }));
      return (0,merge/* merge */.T)(handleReloads$, currentLoad$);
    }
  }));
  return (0,merge/* merge */.T)(loadContent$, mediaError$, emeManager$);
}
;// CONCATENATED MODULE: ./src/core/init/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/* harmony default export */ const init = (InitializeOnMediaSource);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/refCount.js
var refCount = __webpack_require__(3018);
;// CONCATENATED MODULE: ./src/core/api/clock.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This file defines a global clock for the RxPlayer.
 *
 * Each clock tick also pass information about the current state of the
 * media element to sub-parts of the player.
 */






var SAMPLING_INTERVAL_MEDIASOURCE = config/* default.SAMPLING_INTERVAL_MEDIASOURCE */.Z.SAMPLING_INTERVAL_MEDIASOURCE,
    SAMPLING_INTERVAL_LOW_LATENCY = config/* default.SAMPLING_INTERVAL_LOW_LATENCY */.Z.SAMPLING_INTERVAL_LOW_LATENCY,
    SAMPLING_INTERVAL_NO_MEDIASOURCE = config/* default.SAMPLING_INTERVAL_NO_MEDIASOURCE */.Z.SAMPLING_INTERVAL_NO_MEDIASOURCE,
    RESUME_GAP_AFTER_SEEKING = config/* default.RESUME_GAP_AFTER_SEEKING */.Z.RESUME_GAP_AFTER_SEEKING,
    RESUME_GAP_AFTER_NOT_ENOUGH_DATA = config/* default.RESUME_GAP_AFTER_NOT_ENOUGH_DATA */.Z.RESUME_GAP_AFTER_NOT_ENOUGH_DATA,
    RESUME_GAP_AFTER_BUFFERING = config/* default.RESUME_GAP_AFTER_BUFFERING */.Z.RESUME_GAP_AFTER_BUFFERING,
    STALL_GAP = config/* default.STALL_GAP */.Z.STALL_GAP;
/**
 * HTMLMediaElement Events for which timings are calculated and emitted.
 * @type {Array.<string>}
 */

var SCANNED_MEDIA_ELEMENTS_EVENTS = ["canplay", "play", "progress", "seeking", "seeked", "loadedmetadata", "ratechange"];
/**
 * Returns the amount of time in seconds the buffer should have ahead of the
 * current position before resuming playback. Based on the infos of the stall.
 * Waiting time differs between a "seeking" stall and a buffering stall.
 * @param {Object|null} stalled
 * @param {Boolean} lowLatencyMode
 * @returns {Number}
 */

function getResumeGap(stalled, lowLatencyMode) {
  if (stalled === null) {
    return 0;
  }

  var suffix = lowLatencyMode ? "LOW_LATENCY" : "DEFAULT";

  switch (stalled.reason) {
    case "seeking":
      return RESUME_GAP_AFTER_SEEKING[suffix];

    case "not-ready":
      return RESUME_GAP_AFTER_NOT_ENOUGH_DATA[suffix];

    case "buffering":
      return RESUME_GAP_AFTER_BUFFERING[suffix];
  }
}
/**
 * @param {Object} currentRange
 * @param {Number} duration
 * @param {Boolean} lowLatencyMode
 * @returns {Boolean}
 */


function hasLoadedUntilTheEnd(currentRange, duration, lowLatencyMode) {
  var suffix = lowLatencyMode ? "LOW_LATENCY" : "DEFAULT";
  return currentRange !== null && duration - currentRange.end <= STALL_GAP[suffix];
}
/**
 * Generate a basic timings object from the media element and the eventName
 * which triggered the request.
 * @param {HTMLMediaElement} mediaElement
 * @param {string} currentState
 * @returns {Object}
 */


function getMediaInfos(mediaElement, currentState) {
  var buffered = mediaElement.buffered,
      currentTime = mediaElement.currentTime,
      duration = mediaElement.duration,
      ended = mediaElement.ended,
      paused = mediaElement.paused,
      playbackRate = mediaElement.playbackRate,
      readyState = mediaElement.readyState,
      seeking = mediaElement.seeking;
  var currentRange = (0,ranges/* getRange */.rx)(buffered, currentTime);
  return {
    bufferGap: currentRange !== null ? currentRange.end - currentTime : // TODO null/0 would probably be
    // more appropriate
    Infinity,
    buffered: buffered,
    currentRange: currentRange,
    position: currentTime,
    duration: duration,
    ended: ended,
    paused: paused,
    playbackRate: playbackRate,
    readyState: readyState,
    seeking: seeking,
    state: currentState
  };
}
/**
 * Infer stalled status of the media based on:
 *   - the return of the function getMediaInfos
 *   - the previous timings object.
 *
 * @param {Object} prevTimings - Previous timings object. See function to know
 * the different properties needed.
 * @param {Object} currentTimings - Current timings object. This does not need
 * to have every single infos, see function to know which properties are needed.
 * @param {Object} options
 * @returns {Object|null}
 */


function getStalledStatus(prevTimings, currentTimings, _ref) {
  var withMediaSource = _ref.withMediaSource,
      lowLatencyMode = _ref.lowLatencyMode;
  var currentState = currentTimings.state,
      currentTime = currentTimings.position,
      bufferGap = currentTimings.bufferGap,
      currentRange = currentTimings.currentRange,
      duration = currentTimings.duration,
      paused = currentTimings.paused,
      readyState = currentTimings.readyState,
      ended = currentTimings.ended;
  var prevStalled = prevTimings.stalled,
      prevState = prevTimings.state,
      prevTime = prevTimings.position;
  var fullyLoaded = hasLoadedUntilTheEnd(currentRange, duration, lowLatencyMode);
  var canStall = readyState >= 1 && currentState !== "loadedmetadata" && prevStalled === null && !(fullyLoaded || ended);
  var stalledPosition = null;
  var shouldStall;
  var shouldUnstall;
  var stallGap = lowLatencyMode ? STALL_GAP.LOW_LATENCY : STALL_GAP.DEFAULT;

  if (withMediaSource) {
    if (canStall) {
      if (bufferGap <= stallGap) {
        shouldStall = true;
        stalledPosition = currentTime + bufferGap;
      } else if (bufferGap === Infinity) {
        shouldStall = true;
        stalledPosition = currentTime;
      } else if (readyState === 1) {
        shouldStall = true;
      }
    } else if (prevStalled !== null) {
      var resumeGap = getResumeGap(prevStalled, lowLatencyMode);

      if (shouldStall !== true && prevStalled !== null && readyState > 1 && (fullyLoaded || ended || bufferGap < Infinity && bufferGap > resumeGap)) {
        shouldUnstall = true;
      } else if (bufferGap === Infinity || bufferGap <= resumeGap) {
        stalledPosition = bufferGap === Infinity ? currentTime : currentTime + bufferGap;
      }
    }
  } // when using a direct file, the media will stall and unstall on its
  // own, so we only try to detect when the media timestamp has not changed
  // between two consecutive timeupdates
  else {
      if (canStall && (!paused && currentState === "timeupdate" && prevState === "timeupdate" && currentTime === prevTime || currentState === "seeking" && bufferGap === Infinity)) {
        shouldStall = true;
      } else if (prevStalled !== null && (currentState !== "seeking" && currentTime !== prevTime || currentState === "canplay" || bufferGap < Infinity && (bufferGap > getResumeGap(prevStalled, lowLatencyMode) || fullyLoaded || ended))) {
        shouldUnstall = true;
      }
    }

  if (shouldUnstall === true) {
    return null;
  } else if (shouldStall === true || prevStalled !== null) {
    var reason;

    if (currentState === "seeking" || currentTimings.seeking || prevStalled !== null && prevStalled.reason === "seeking") {
      reason = "seeking";
    } else if (readyState === 1) {
      reason = "not-ready";
    } else {
      reason = "buffering";
    }

    if (prevStalled !== null && prevStalled.reason === reason) {
      return {
        reason: prevStalled.reason,
        timestamp: prevStalled.timestamp,
        position: stalledPosition
      };
    }

    return {
      reason: reason,
      timestamp: performance.now(),
      position: stalledPosition
    };
  }

  return null;
}
/**
 * Timings observable.
 *
 * This Observable samples snapshots of player's current state:
 *   * time position
 *   * playback rate
 *   * current buffered range
 *   * gap with current buffered range ending
 *   * media duration
 *
 * In addition to sampling, this Observable also reacts to "seeking" and "play"
 * events.
 *
 * Observable is shared for performance reason: reduces the number of event
 * listeners and intervals/timeouts but also limit access to the media element
 * properties and gap calculations.
 *
 * The sampling is manual instead of based on "timeupdate" to reduce the
 * number of events.
 * @param {HTMLMediaElement} mediaElement
 * @param {Object} options
 * @returns {Observable}
 */


function createClock(mediaElement, options) {
  return (0,defer/* defer */.P)(function () {
    var lastTimings = (0,object_assign/* default */.Z)(getMediaInfos(mediaElement, "init"), {
      stalled: null,
      getCurrentTime: function getCurrentTime() {
        return mediaElement.currentTime;
      }
    });

    function getCurrentClockTick(state) {
      var mediaTimings = getMediaInfos(mediaElement, state);
      var stalledState = getStalledStatus(lastTimings, mediaTimings, options);
      var timings = (0,object_assign/* default */.Z)({}, {
        stalled: stalledState,
        getCurrentTime: function getCurrentTime() {
          return mediaElement.currentTime;
        }
      }, mediaTimings);
      log/* default.debug */.Z.debug("API: current media element state", timings);
      return timings;
    }

    var eventObs = SCANNED_MEDIA_ELEMENTS_EVENTS.map(function (eventName) {
      return (0,fromEvent/* fromEvent */.R)(mediaElement, eventName).pipe((0,mapTo/* mapTo */.h)(eventName));
    });
    var interval = options.lowLatencyMode ? SAMPLING_INTERVAL_LOW_LATENCY : options.withMediaSource ? SAMPLING_INTERVAL_MEDIASOURCE : SAMPLING_INTERVAL_NO_MEDIASOURCE;
    var interval$ = (0,observable_interval/* interval */.F)(interval).pipe((0,mapTo/* mapTo */.h)("timeupdate"));
    return merge/* merge.apply */.T.apply(void 0, [interval$].concat(eventObs)).pipe((0,map/* map */.U)(function (state) {
      lastTimings = getCurrentClockTick(state);

      if (log/* default.getLevel */.Z.getLevel() === "DEBUG") {
        log/* default.debug */.Z.debug("API: current playback timeline:\n" + prettyPrintBuffered(lastTimings.buffered, lastTimings.position), "\n" + state);
      }

      return lastTimings;
    }), (0,startWith/* startWith */.O)(lastTimings));
  }).pipe((0,multicast/* multicast */.O)(function () {
    return new ReplaySubject/* ReplaySubject */.t(1);
  }), // Always emit the last
  (0,refCount/* refCount */.x)());
}
/**
 * Pretty print a TimeRanges Object, to see the current content of it in a
 * one-liner string.
 *
 * @example
 * This function is called by giving it directly the TimeRanges, such as:
 * ```js
 * prettyPrintBuffered(document.getElementsByTagName("video")[0].buffered);
 * ```
 *
 * Let's consider this possible return:
 *
 * ```
 * 0.00|==29.95==|29.95 ~30.05~ 60.00|==29.86==|89.86
 *          ^14
 * ```
 * This means that our video element has 29.95 seconds of buffer between 0 and
 * 29.95 seconds.
 * Then 30.05 seconds where no buffer is found.
 * Then 29.86 seconds of buffer between 60.00 and 89.86 seconds.
 *
 * A caret on the second line indicates the current time we're at.
 * The number coming after it is the current time.
 * @param {TimeRanges} buffered
 * @param {number} currentTime
 * @returns {string}
 */


function prettyPrintBuffered(buffered, currentTime) {
  var str = "";
  var currentTimeStr = "";

  for (var i = 0; i < buffered.length; i++) {
    var start = buffered.start(i);
    var end = buffered.end(i);
    var fixedStart = start.toFixed(2);
    var fixedEnd = end.toFixed(2);
    var fixedDuration = (end - start).toFixed(2);
    var newIntervalStr = fixedStart + "|==" + fixedDuration + "==|" + fixedEnd;
    str += newIntervalStr;

    if (currentTimeStr.length === 0 && end > currentTime) {
      var padBefore = str.length - Math.floor(newIntervalStr.length / 2);
      currentTimeStr = " ".repeat(padBefore) + ("^" + currentTime);
    }

    if (i < buffered.length - 1) {
      var nextStart = buffered.start(i + 1);
      var fixedDiff = (nextStart - end).toFixed(2);
      var holeStr = " ~" + fixedDiff + "~ ";
      str += holeStr;

      if (currentTimeStr.length === 0 && currentTime < nextStart) {
        var _padBefore = str.length - Math.floor(holeStr.length / 2);

        currentTimeStr = " ".repeat(_padBefore) + ("^" + currentTime);
      }
    }
  }

  if (currentTimeStr.length === 0) {
    currentTimeStr = " ".repeat(str.length) + ("^" + currentTime);
  }

  return str + "\n" + currentTimeStr;
}

/* harmony default export */ const clock = (createClock);
;// CONCATENATED MODULE: ./src/core/api/emit_seek_events.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Returns Observable which will emit:
 *   - `"seeking"` when we are seeking in the given mediaElement
 *   - `"seeked"` when a seek is considered as finished by the given clock$
 *     Observable.
 * @param {HTMLMediaElement} mediaElement
 * @param {Observable} clock$
 * @returns {Observable}
 */

function emitSeekEvents(mediaElement, clock$) {
  return (0,defer/* defer */.P)(function () {
    if (mediaElement === null) {
      return empty/* EMPTY */.E;
    }

    var isSeeking$ = (0,fromEvent/* fromEvent */.R)(mediaElement, "seeking").pipe((0,mapTo/* mapTo */.h)("seeking"));
    var hasSeeked$ = (0,fromEvent/* fromEvent */.R)(mediaElement, "seeked").pipe((0,switchMapTo/* switchMapTo */.c)(clock$.pipe((0,mergeMap/* mergeMap */.zg)(function (tick) {
      return tick.stalled === null || tick.stalled.reason !== "seeking" ? (0,of.of)("seeked") : empty/* EMPTY */.E;
    }), (0,take/* take */.q)(1))));
    var seekingEvents$ = (0,merge/* merge */.T)(isSeeking$, hasSeeked$);
    return mediaElement.seeking ? seekingEvents$.pipe((0,startWith/* startWith */.O)("seeking")) : seekingEvents$;
  });
}
;// CONCATENATED MODULE: ./src/core/api/get_player_state.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var FORCED_ENDED_THRESHOLD = config/* default.FORCED_ENDED_THRESHOLD */.Z.FORCED_ENDED_THRESHOLD;
/** Player state dictionnary. */

var PLAYER_STATES = {
  STOPPED: "STOPPED",
  LOADED: "LOADED",
  LOADING: "LOADING",
  PLAYING: "PLAYING",
  PAUSED: "PAUSED",
  ENDED: "ENDED",
  BUFFERING: "BUFFERING",
  SEEKING: "SEEKING",
  RELOADING: "RELOADING"
};
/**
 * Get state string for a _loaded_ content.
 * @param {HTMLMediaElement} mediaElement
 * @param {boolean} isPlaying - false when the player is paused. true otherwise.
 * @param {Object} stalledStatus - Current stalled state:
 *   - null when not stalled
 *   - an object with a description of the situation if stalled.
 * @returns {string}
 */

function getLoadedContentState(mediaElement, isPlaying, stalledStatus) {
  if (mediaElement.ended) {
    return PLAYER_STATES.ENDED;
  }

  if (stalledStatus !== null) {
    // On some old browsers (e.g. Chrome 54), the browser does not
    // emit an 'ended' event in some conditions. Detect if we
    // reached the end by comparing the current position and the
    // duration instead.
    var gapBetweenDurationAndCurrentTime = Math.abs(mediaElement.duration - mediaElement.currentTime);

    if (FORCED_ENDED_THRESHOLD != null && gapBetweenDurationAndCurrentTime < FORCED_ENDED_THRESHOLD) {
      return PLAYER_STATES.ENDED;
    }

    return stalledStatus.reason === "seeking" ? PLAYER_STATES.SEEKING : PLAYER_STATES.BUFFERING;
  }

  return isPlaying ? PLAYER_STATES.PLAYING : PLAYER_STATES.PAUSED;
}
// EXTERNAL MODULE: ./src/utils/languages/normalize.ts + 2 modules
var normalize = __webpack_require__(5553);
;// CONCATENATED MODULE: ./src/core/api/option_utils.ts
function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This file exports various helpers to parse options given to various APIs,
 * throw if something is wrong, and return a normalized option object.
 */







var DEFAULT_AUDIO_TRACK_SWITCHING_MODE = config/* default.DEFAULT_AUDIO_TRACK_SWITCHING_MODE */.Z.DEFAULT_AUDIO_TRACK_SWITCHING_MODE,
    DEFAULT_AUTO_PLAY = config/* default.DEFAULT_AUTO_PLAY */.Z.DEFAULT_AUTO_PLAY,
    DEFAULT_CODEC_SWITCHING_BEHAVIOR = config/* default.DEFAULT_CODEC_SWITCHING_BEHAVIOR */.Z.DEFAULT_CODEC_SWITCHING_BEHAVIOR,
    DEFAULT_ENABLE_FAST_SWITCHING = config/* default.DEFAULT_ENABLE_FAST_SWITCHING */.Z.DEFAULT_ENABLE_FAST_SWITCHING,
    DEFAULT_INITIAL_BITRATES = config/* default.DEFAULT_INITIAL_BITRATES */.Z.DEFAULT_INITIAL_BITRATES,
    DEFAULT_LIMIT_VIDEO_WIDTH = config/* default.DEFAULT_LIMIT_VIDEO_WIDTH */.Z.DEFAULT_LIMIT_VIDEO_WIDTH,
    DEFAULT_MANUAL_BITRATE_SWITCHING_MODE = config/* default.DEFAULT_MANUAL_BITRATE_SWITCHING_MODE */.Z.DEFAULT_MANUAL_BITRATE_SWITCHING_MODE,
    DEFAULT_MIN_BITRATES = config/* default.DEFAULT_MIN_BITRATES */.Z.DEFAULT_MIN_BITRATES,
    DEFAULT_MAX_BITRATES = config/* default.DEFAULT_MAX_BITRATES */.Z.DEFAULT_MAX_BITRATES,
    DEFAULT_MAX_BUFFER_AHEAD = config/* default.DEFAULT_MAX_BUFFER_AHEAD */.Z.DEFAULT_MAX_BUFFER_AHEAD,
    DEFAULT_MAX_BUFFER_BEHIND = config/* default.DEFAULT_MAX_BUFFER_BEHIND */.Z.DEFAULT_MAX_BUFFER_BEHIND,
    DEFAULT_SHOW_NATIVE_SUBTITLE = config/* default.DEFAULT_SHOW_NATIVE_SUBTITLE */.Z.DEFAULT_SHOW_NATIVE_SUBTITLE,
    DEFAULT_STOP_AT_END = config/* default.DEFAULT_STOP_AT_END */.Z.DEFAULT_STOP_AT_END,
    DEFAULT_TEXT_TRACK_MODE = config/* default.DEFAULT_TEXT_TRACK_MODE */.Z.DEFAULT_TEXT_TRACK_MODE,
    DEFAULT_THROTTLE_WHEN_HIDDEN = config/* default.DEFAULT_THROTTLE_WHEN_HIDDEN */.Z.DEFAULT_THROTTLE_WHEN_HIDDEN,
    DEFAULT_THROTTLE_VIDEO_BITRATE_WHEN_HIDDEN = config/* default.DEFAULT_THROTTLE_VIDEO_BITRATE_WHEN_HIDDEN */.Z.DEFAULT_THROTTLE_VIDEO_BITRATE_WHEN_HIDDEN,
    DEFAULT_WANTED_BUFFER_AHEAD = config/* default.DEFAULT_WANTED_BUFFER_AHEAD */.Z.DEFAULT_WANTED_BUFFER_AHEAD;
/**
 * Parse options given to the API constructor and set default options as found
 * in the config.
 *
 * Do not mutate anything, only cross the given options and sane default options
 * (most coming from the config).
 * @param {Object|undefined} options
 * @returns {Object}
 */

function parseConstructorOptions(options) {
  var maxBufferAhead;
  var maxBufferBehind;
  var wantedBufferAhead;
  var throttleWhenHidden;
  var throttleVideoBitrateWhenHidden;
  var preferredAudioTracks;
  var preferredTextTracks;
  var preferredVideoTracks;
  var videoElement;
  var initialVideoBitrate;
  var initialAudioBitrate;
  var minAudioBitrate;
  var minVideoBitrate;
  var maxAudioBitrate;
  var maxVideoBitrate;

  if ((0,is_null_or_undefined/* default */.Z)(options.maxBufferAhead)) {
    maxBufferAhead = DEFAULT_MAX_BUFFER_AHEAD;
  } else {
    maxBufferAhead = Number(options.maxBufferAhead);

    if (isNaN(maxBufferAhead)) {
      throw new Error("Invalid maxBufferAhead parameter. Should be a number.");
    }
  }

  if ((0,is_null_or_undefined/* default */.Z)(options.maxBufferBehind)) {
    maxBufferBehind = DEFAULT_MAX_BUFFER_BEHIND;
  } else {
    maxBufferBehind = Number(options.maxBufferBehind);

    if (isNaN(maxBufferBehind)) {
      throw new Error("Invalid maxBufferBehind parameter. Should be a number.");
    }
  }

  if ((0,is_null_or_undefined/* default */.Z)(options.wantedBufferAhead)) {
    wantedBufferAhead = DEFAULT_WANTED_BUFFER_AHEAD;
  } else {
    wantedBufferAhead = Number(options.wantedBufferAhead);

    if (isNaN(wantedBufferAhead)) {
      /* eslint-disable max-len */
      throw new Error("Invalid wantedBufferAhead parameter. Should be a number.");
      /* eslint-enable max-len */
    }
  }

  var limitVideoWidth = (0,is_null_or_undefined/* default */.Z)(options.limitVideoWidth) ? DEFAULT_LIMIT_VIDEO_WIDTH : !!options.limitVideoWidth;

  if (!(0,is_null_or_undefined/* default */.Z)(options.throttleWhenHidden)) {
    (0,warn_once/* default */.Z)("`throttleWhenHidden` API is deprecated. Consider using " + "`throttleVideoBitrateWhenHidden` instead.");
    throttleWhenHidden = !!options.throttleWhenHidden;
  } else {
    throttleWhenHidden = DEFAULT_THROTTLE_WHEN_HIDDEN;
  } // `throttleWhenHidden` and `throttleVideoBitrateWhenHidden` can be in conflict
  // Do not activate the latter if the former is


  if (throttleWhenHidden) {
    throttleVideoBitrateWhenHidden = false;
  } else {
    throttleVideoBitrateWhenHidden = (0,is_null_or_undefined/* default */.Z)(options.throttleVideoBitrateWhenHidden) ? DEFAULT_THROTTLE_VIDEO_BITRATE_WHEN_HIDDEN : !!options.throttleVideoBitrateWhenHidden;
  }

  if (options.preferredTextTracks !== undefined) {
    if (!Array.isArray(options.preferredTextTracks)) {
      (0,warn_once/* default */.Z)("Invalid `preferredTextTracks` option, it should be an Array");
      preferredTextTracks = [];
    } else {
      preferredTextTracks = options.preferredTextTracks;
    }
  } else {
    preferredTextTracks = [];
  }

  if (options.preferredAudioTracks !== undefined) {
    if (!Array.isArray(options.preferredAudioTracks)) {
      (0,warn_once/* default */.Z)("Invalid `preferredAudioTracks` option, it should be an Array");
      preferredAudioTracks = [];
    } else {
      preferredAudioTracks = options.preferredAudioTracks;
    }
  } else {
    preferredAudioTracks = [];
  }

  if (options.preferredVideoTracks !== undefined) {
    if (!Array.isArray(options.preferredVideoTracks)) {
      (0,warn_once/* default */.Z)("Invalid `preferredVideoTracks` option, it should be an Array");
      preferredVideoTracks = [];
    } else {
      preferredVideoTracks = options.preferredVideoTracks;
    }
  } else {
    preferredVideoTracks = [];
  }

  if ((0,is_null_or_undefined/* default */.Z)(options.videoElement)) {
    videoElement = document.createElement("video");
  } else if (options.videoElement instanceof HTMLMediaElement) {
    videoElement = options.videoElement;
  } else {
    /* eslint-disable max-len */
    throw new Error("Invalid videoElement parameter. Should be a HTMLMediaElement.");
    /* eslint-enable max-len */
  }

  if ((0,is_null_or_undefined/* default */.Z)(options.initialVideoBitrate)) {
    initialVideoBitrate = DEFAULT_INITIAL_BITRATES.video;
  } else {
    initialVideoBitrate = Number(options.initialVideoBitrate);

    if (isNaN(initialVideoBitrate)) {
      /* eslint-disable max-len */
      throw new Error("Invalid initialVideoBitrate parameter. Should be a number.");
      /* eslint-enable max-len */
    }
  }

  if ((0,is_null_or_undefined/* default */.Z)(options.initialAudioBitrate)) {
    initialAudioBitrate = DEFAULT_INITIAL_BITRATES.audio;
  } else {
    initialAudioBitrate = Number(options.initialAudioBitrate);

    if (isNaN(initialAudioBitrate)) {
      /* eslint-disable max-len */
      throw new Error("Invalid initialAudioBitrate parameter. Should be a number.");
      /* eslint-enable max-len */
    }
  }

  if ((0,is_null_or_undefined/* default */.Z)(options.minVideoBitrate)) {
    minVideoBitrate = DEFAULT_MIN_BITRATES.video;
  } else {
    minVideoBitrate = Number(options.minVideoBitrate);

    if (isNaN(minVideoBitrate)) {
      throw new Error("Invalid maxVideoBitrate parameter. Should be a number.");
    }
  }

  if ((0,is_null_or_undefined/* default */.Z)(options.minAudioBitrate)) {
    minAudioBitrate = DEFAULT_MIN_BITRATES.audio;
  } else {
    minAudioBitrate = Number(options.minAudioBitrate);

    if (isNaN(minAudioBitrate)) {
      throw new Error("Invalid minAudioBitrate parameter. Should be a number.");
    }
  }

  if ((0,is_null_or_undefined/* default */.Z)(options.maxVideoBitrate)) {
    maxVideoBitrate = DEFAULT_MAX_BITRATES.video;
  } else {
    maxVideoBitrate = Number(options.maxVideoBitrate);

    if (isNaN(maxVideoBitrate)) {
      throw new Error("Invalid maxVideoBitrate parameter. Should be a number.");
    } else if (minVideoBitrate > maxVideoBitrate) {
      throw new Error("Invalid maxVideoBitrate parameter. Its value, \"" + (maxVideoBitrate + "\", is inferior to the set minVideoBitrate, \"") + (minVideoBitrate + "\""));
    }
  }

  if ((0,is_null_or_undefined/* default */.Z)(options.maxAudioBitrate)) {
    maxAudioBitrate = DEFAULT_MAX_BITRATES.audio;
  } else {
    maxAudioBitrate = Number(options.maxAudioBitrate);

    if (isNaN(maxAudioBitrate)) {
      throw new Error("Invalid maxAudioBitrate parameter. Should be a number.");
    } else if (minAudioBitrate > maxAudioBitrate) {
      throw new Error("Invalid maxAudioBitrate parameter. Its value, \"" + (maxAudioBitrate + "\", is inferior to the set minAudioBitrate, \"") + (minAudioBitrate + "\""));
    }
  }

  var stopAtEnd = (0,is_null_or_undefined/* default */.Z)(options.stopAtEnd) ? DEFAULT_STOP_AT_END : !!options.stopAtEnd;
  return {
    maxBufferAhead: maxBufferAhead,
    maxBufferBehind: maxBufferBehind,
    limitVideoWidth: limitVideoWidth,
    videoElement: videoElement,
    wantedBufferAhead: wantedBufferAhead,
    throttleWhenHidden: throttleWhenHidden,
    throttleVideoBitrateWhenHidden: throttleVideoBitrateWhenHidden,
    preferredAudioTracks: preferredAudioTracks,
    preferredTextTracks: preferredTextTracks,
    preferredVideoTracks: preferredVideoTracks,
    initialAudioBitrate: initialAudioBitrate,
    initialVideoBitrate: initialVideoBitrate,
    minAudioBitrate: minAudioBitrate,
    minVideoBitrate: minVideoBitrate,
    maxAudioBitrate: maxAudioBitrate,
    maxVideoBitrate: maxVideoBitrate,
    stopAtEnd: stopAtEnd
  };
}
/**
 * Check the format of given reload options.
 * Throw if format in invalid.
 * @param {object | undefined} options
 */


function checkReloadOptions(options) {
  var _a, _b, _c, _d;

  if (options === null || typeof options !== "object" && options !== undefined) {
    throw new Error("API: reload - Invalid options format.");
  }

  if ((options === null || options === void 0 ? void 0 : options.reloadAt) === null || typeof (options === null || options === void 0 ? void 0 : options.reloadAt) !== "object" && (options === null || options === void 0 ? void 0 : options.reloadAt) !== undefined) {
    throw new Error("API: reload - Invalid 'reloadAt' option format.");
  }

  if (typeof ((_a = options === null || options === void 0 ? void 0 : options.reloadAt) === null || _a === void 0 ? void 0 : _a.position) !== "number" && ((_b = options === null || options === void 0 ? void 0 : options.reloadAt) === null || _b === void 0 ? void 0 : _b.position) !== undefined) {
    throw new Error("API: reload - Invalid 'reloadAt.position' option format.");
  }

  if (typeof ((_c = options === null || options === void 0 ? void 0 : options.reloadAt) === null || _c === void 0 ? void 0 : _c.relative) !== "number" && ((_d = options === null || options === void 0 ? void 0 : options.reloadAt) === null || _d === void 0 ? void 0 : _d.relative) !== undefined) {
    throw new Error("API: reload - Invalid 'reloadAt.relative' option format.");
  }
}
/**
 * Parse options given to loadVideo and set default options as found
 * in the config.
 *
 * Do not mutate anything, only cross the given options and sane default options
 * (most coming from the config).
 *
 * Throws if any mandatory option is not set.
 * @param {Object|undefined} options
 * @param {Object} ctx - The player context, needed for some default values.
 * @returns {Object}
 */


function parseLoadVideoOptions(options) {
  var _a, _b, _c, _d, _e, _f, _g;

  var url;
  var transport;
  var keySystems;
  var textTrackMode;
  var textTrackElement;
  var startAt;

  if ((0,is_null_or_undefined/* default */.Z)(options)) {
    throw new Error("No option set on loadVideo");
  }

  if (!(0,is_null_or_undefined/* default */.Z)(options.url)) {
    url = String(options.url);
  } else if ((0,is_null_or_undefined/* default */.Z)((_a = options.transportOptions) === null || _a === void 0 ? void 0 : _a.initialManifest) && (0,is_null_or_undefined/* default */.Z)((_b = options.transportOptions) === null || _b === void 0 ? void 0 : _b.manifestLoader)) {
    throw new Error("Unable to load a content: no url set on loadVideo.\n" + "Please provide at least either an `url` argument, a " + "`transportOptions.initialManifest` option or a " + "`transportOptions.manifestLoader` option so the RxPlayer " + "can load the content.");
  }

  if ((0,is_null_or_undefined/* default */.Z)(options.transport)) {
    throw new Error("No transport set on loadVideo");
  } else {
    transport = String(options.transport);
  }

  var autoPlay = (0,is_null_or_undefined/* default */.Z)(options.autoPlay) ? DEFAULT_AUTO_PLAY : !!options.autoPlay;

  if ((0,is_null_or_undefined/* default */.Z)(options.keySystems)) {
    keySystems = [];
  } else {
    keySystems = Array.isArray(options.keySystems) ? options.keySystems : [options.keySystems];

    for (var _iterator = _createForOfIteratorHelperLoose(keySystems), _step; !(_step = _iterator()).done;) {
      var keySystem = _step.value;

      if (typeof keySystem.type !== "string" || typeof keySystem.getLicense !== "function") {
        throw new Error("Invalid key system given: Missing type string or " + "getLicense callback");
      }
    }
  }

  var lowLatencyMode = options.lowLatencyMode === undefined ? false : !!options.lowLatencyMode;
  var transportOptsArg = typeof options.transportOptions === "object" && options.transportOptions !== null ? options.transportOptions : {};
  var initialManifest = (_c = options.transportOptions) === null || _c === void 0 ? void 0 : _c.initialManifest;
  var manifestUpdateUrl = (_d = options.transportOptions) === null || _d === void 0 ? void 0 : _d.manifestUpdateUrl;
  var minimumManifestUpdateInterval = (_f = (_e = options.transportOptions) === null || _e === void 0 ? void 0 : _e.minimumManifestUpdateInterval) !== null && _f !== void 0 ? _f : 0;
  var audioTrackSwitchingMode = (0,is_null_or_undefined/* default */.Z)(options.audioTrackSwitchingMode) ? DEFAULT_AUDIO_TRACK_SWITCHING_MODE : options.audioTrackSwitchingMode;

  if (!(0,array_includes/* default */.Z)(["seamless", "direct"], audioTrackSwitchingMode)) {
    log/* default.warn */.Z.warn("The `audioTrackSwitchingMode` loadVideo option must match one of " + "the following strategy name:\n" + "- `seamless`\n" + "- `direct`\n" + "If badly set, " + DEFAULT_AUDIO_TRACK_SWITCHING_MODE + " strategy will be used as default");
    audioTrackSwitchingMode = DEFAULT_AUDIO_TRACK_SWITCHING_MODE;
  }

  var onCodecSwitch = (0,is_null_or_undefined/* default */.Z)(options.onCodecSwitch) ? DEFAULT_CODEC_SWITCHING_BEHAVIOR : options.onCodecSwitch;

  if (!(0,array_includes/* default */.Z)(["continue", "reload"], onCodecSwitch)) {
    log/* default.warn */.Z.warn("The `onCodecSwitch` loadVideo option must match one of " + "the following string:\n" + "- `continue`\n" + "- `reload`\n" + "If badly set, " + DEFAULT_CODEC_SWITCHING_BEHAVIOR + " will be used as default");
    onCodecSwitch = DEFAULT_CODEC_SWITCHING_BEHAVIOR;
  }

  var transportOptions = (0,object_assign/* default */.Z)({}, transportOptsArg, {
    /* eslint-disable import/no-deprecated */
    supplementaryImageTracks: [],
    supplementaryTextTracks: [],

    /* eslint-enable import/no-deprecated */
    lowLatencyMode: lowLatencyMode
  }); // remove already parsed data to simplify the `transportOptions` object

  delete transportOptions.initialManifest;
  delete transportOptions.manifestUpdateUrl;
  delete transportOptions.minimumManifestUpdateInterval;

  if (options.supplementaryTextTracks !== undefined) {
    (0,warn_once/* default */.Z)("The `supplementaryTextTracks` loadVideo option is deprecated.\n" + "Please use the `TextTrackRenderer` tool instead.");
    var supplementaryTextTracks = Array.isArray(options.supplementaryTextTracks) ? options.supplementaryTextTracks : [options.supplementaryTextTracks];

    for (var _iterator2 = _createForOfIteratorHelperLoose(supplementaryTextTracks), _step2; !(_step2 = _iterator2()).done;) {
      var supplementaryTextTrack = _step2.value;

      if (typeof supplementaryTextTrack.language !== "string" || typeof supplementaryTextTrack.mimeType !== "string" || typeof supplementaryTextTrack.url !== "string") {
        throw new Error("Invalid supplementary text track given. " + "Missing either language, mimetype or url");
      }
    }

    transportOptions.supplementaryTextTracks = supplementaryTextTracks;
  }

  if (options.supplementaryImageTracks !== undefined) {
    (0,warn_once/* default */.Z)("The `supplementaryImageTracks` loadVideo option is deprecated.\n" + "Please use the `parseBifThumbnails` tool instead.");
    var supplementaryImageTracks = Array.isArray(options.supplementaryImageTracks) ? options.supplementaryImageTracks : [options.supplementaryImageTracks];

    for (var _iterator3 = _createForOfIteratorHelperLoose(supplementaryImageTracks), _step3; !(_step3 = _iterator3()).done;) {
      var supplementaryImageTrack = _step3.value;

      if (typeof supplementaryImageTrack.mimeType !== "string" || typeof supplementaryImageTrack.url !== "string") {
        throw new Error("Invalid supplementary image track given. " + "Missing either mimetype or url");
      }
    }

    transportOptions.supplementaryImageTracks = supplementaryImageTracks;
  }

  if ((0,is_null_or_undefined/* default */.Z)(options.textTrackMode)) {
    textTrackMode = DEFAULT_TEXT_TRACK_MODE;
  } else {
    if (options.textTrackMode !== "native" && options.textTrackMode !== "html") {
      throw new Error("Invalid textTrackMode.");
    }

    textTrackMode = options.textTrackMode;
  }

  if (!(0,is_null_or_undefined/* default */.Z)(options.defaultAudioTrack)) {
    (0,warn_once/* default */.Z)("The `defaultAudioTrack` loadVideo option is deprecated.\n" + "Please use the `preferredAudioTracks` constructor option or the" + "`setPreferredAudioTracks` method instead");
  }

  var defaultAudioTrack = (0,normalize/* normalizeAudioTrack */.iH)(options.defaultAudioTrack);

  if (!(0,is_null_or_undefined/* default */.Z)(options.defaultTextTrack)) {
    (0,warn_once/* default */.Z)("The `defaultTextTrack` loadVideo option is deprecated.\n" + "Please use the `preferredTextTracks` constructor option or the" + "`setPreferredTextTracks` method instead");
  }

  var defaultTextTrack = (0,normalize/* normalizeTextTrack */.Y1)(options.defaultTextTrack);
  var hideNativeSubtitle = !DEFAULT_SHOW_NATIVE_SUBTITLE;

  if (!(0,is_null_or_undefined/* default */.Z)(options.hideNativeSubtitle)) {
    (0,warn_once/* default */.Z)("The `hideNativeSubtitle` loadVideo option is deprecated");
    hideNativeSubtitle = !!options.hideNativeSubtitle;
  }

  var manualBitrateSwitchingMode = (_g = options.manualBitrateSwitchingMode) !== null && _g !== void 0 ? _g : DEFAULT_MANUAL_BITRATE_SWITCHING_MODE;
  var enableFastSwitching = (0,is_null_or_undefined/* default */.Z)(options.enableFastSwitching) ? DEFAULT_ENABLE_FAST_SWITCHING : options.enableFastSwitching;

  if (textTrackMode === "html") {
    // TODO Better way to express that in TypeScript?
    if ((0,is_null_or_undefined/* default */.Z)(options.textTrackElement)) {
      throw new Error("You have to provide a textTrackElement " + "in \"html\" textTrackMode.");
    } else if (!(options.textTrackElement instanceof HTMLElement)) {
      throw new Error("textTrackElement should be an HTMLElement.");
    } else {
      textTrackElement = options.textTrackElement;
    }
  } else if (!(0,is_null_or_undefined/* default */.Z)(options.textTrackElement)) {
    log/* default.warn */.Z.warn("API: You have set a textTrackElement without being in " + "an \"html\" textTrackMode. It will be ignored.");
  }

  if (!(0,is_null_or_undefined/* default */.Z)(options.startAt)) {
    // TODO Better way to express that in TypeScript?
    if (options.startAt.wallClockTime instanceof Date) {
      var wallClockTime = options.startAt.wallClockTime.getTime() / 1000;
      startAt = (0,object_assign/* default */.Z)({}, options.startAt, {
        wallClockTime: wallClockTime
      });
    } else {
      startAt = options.startAt;
    }
  }

  var networkConfig = (0,is_null_or_undefined/* default */.Z)(options.networkConfig) ? {} : {
    manifestRetry: options.networkConfig.manifestRetry,
    offlineRetry: options.networkConfig.offlineRetry,
    segmentRetry: options.networkConfig.segmentRetry
  }; // TODO without cast

  /* eslint-disable @typescript-eslint/consistent-type-assertions */

  return {
    autoPlay: autoPlay,
    defaultAudioTrack: defaultAudioTrack,
    defaultTextTrack: defaultTextTrack,
    enableFastSwitching: enableFastSwitching,
    hideNativeSubtitle: hideNativeSubtitle,
    keySystems: keySystems,
    initialManifest: initialManifest,
    lowLatencyMode: lowLatencyMode,
    manualBitrateSwitchingMode: manualBitrateSwitchingMode,
    audioTrackSwitchingMode: audioTrackSwitchingMode,
    manifestUpdateUrl: manifestUpdateUrl,
    minimumManifestUpdateInterval: minimumManifestUpdateInterval,
    networkConfig: networkConfig,
    onCodecSwitch: onCodecSwitch,
    startAt: startAt,
    textTrackElement: textTrackElement,
    textTrackMode: textTrackMode,
    transport: transport,
    transportOptions: transportOptions,
    url: url
  };
  /* eslint-enable @typescript-eslint/consistent-type-assertions */
}


// EXTERNAL MODULE: ./src/utils/languages/index.ts
var languages = __webpack_require__(7829);
;// CONCATENATED MODULE: ./src/core/api/track_choice_manager.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */






/**
 * Transform an array of IAudioTrackPreference into an array of
 * INormalizedPreferredAudioTrack to be exploited by the TrackChoiceManager.
 * @param {Array.<Object|null>}
 * @returns {Array.<Object|null>}
 */

function normalizeAudioTracks(tracks) {
  return tracks.map(function (t) {
    return t == null ? t : {
      normalized: t.language === undefined ? undefined : (0,languages/* default */.ZP)(t.language),
      audioDescription: t.audioDescription,
      codec: t.codec
    };
  });
}
/**
 * Transform an array of ITextTrackPreference into an array of
 * INormalizedPreferredTextTrack to be exploited by the TrackChoiceManager.
 * @param {Array.<Object|null>} tracks
 * @returns {Array.<Object|null>}
 */


function normalizeTextTracks(tracks) {
  return tracks.map(function (t) {
    return t == null ? t : {
      normalized: (0,languages/* default */.ZP)(t.language),
      closedCaption: t.closedCaption
    };
  });
}
/**
 * Manage audio and text tracks for all active periods.
 * Choose the audio and text tracks for each period and record this choice.
 * @class TrackChoiceManager
 */


var TrackChoiceManager = /*#__PURE__*/function () {
  function TrackChoiceManager() {
    this._periods = new SortedList(function (a, b) {
      return a.period.start - b.period.start;
    });
    this._audioChoiceMemory = new WeakMap();
    this._textChoiceMemory = new WeakMap();
    this._videoChoiceMemory = new WeakMap();
    this._preferredAudioTracks = [];
    this._preferredTextTracks = [];
    this._preferredVideoTracks = [];
  }
  /**
   * Set the list of preferred audio tracks, in preference order.
   * @param {Array.<Object>} preferredAudioTracks
   * @param {boolean} shouldApply - `true` if those preferences should be
   * applied on the currently loaded Period. `false` if it should only
   * be applied to new content.
   */


  var _proto = TrackChoiceManager.prototype;

  _proto.setPreferredAudioTracks = function setPreferredAudioTracks(preferredAudioTracks, shouldApply) {
    this._preferredAudioTracks = preferredAudioTracks;

    if (shouldApply) {
      this._applyAudioPreferences();
    }
  }
  /**
   * Set the list of preferred text tracks, in preference order.
   * @param {Array.<Object>} preferredTextTracks
   * @param {boolean} shouldApply - `true` if those preferences should be
   * applied on the currently loaded Periods. `false` if it should only
   * be applied to new content.
   */
  ;

  _proto.setPreferredTextTracks = function setPreferredTextTracks(preferredTextTracks, shouldApply) {
    this._preferredTextTracks = preferredTextTracks;

    if (shouldApply) {
      this._applyTextPreferences();
    }
  }
  /**
   * Set the list of preferred text tracks, in preference order.
   * @param {Array.<Object>} tracks
   * @param {boolean} shouldApply - `true` if those preferences should be
   * applied on the currently loaded Period. `false` if it should only
   * be applied to new content.
   */
  ;

  _proto.setPreferredVideoTracks = function setPreferredVideoTracks(preferredVideoTracks, shouldApply) {
    this._preferredVideoTracks = preferredVideoTracks;

    if (shouldApply) {
      this._applyVideoPreferences();
    }
  }
  /**
   * Add Subject to choose Adaptation for new "audio" or "text" Period.
   * @param {string} bufferType - The concerned buffer type
   * @param {Period} period - The concerned Period.
   * @param {Subject.<Object|null>} adaptation$ - A subject through which the
   * choice will be given
   */
  ;

  _proto.addPeriod = function addPeriod(bufferType, period, adaptation$) {
    var periodItem = getPeriodItem(this._periods, period);
    var adaptations = period.getPlayableAdaptations(bufferType);

    if (periodItem != null) {
      if (periodItem[bufferType] != null) {
        log/* default.warn */.Z.warn("TrackChoiceManager: " + bufferType + " already added for period", period);
        return;
      } else {
        periodItem[bufferType] = {
          adaptations: adaptations,
          adaptation$: adaptation$
        };
      }
    } else {
      var _this$_periods$add;

      this._periods.add((_this$_periods$add = {
        period: period
      }, _this$_periods$add[bufferType] = {
        adaptations: adaptations,
        adaptation$: adaptation$
      }, _this$_periods$add));
    }
  }
  /**
   * Remove Subject to choose an "audio", "video" or "text" Adaptation for a
   * Period.
   * @param {string} bufferType - The concerned buffer type
   * @param {Period} period - The concerned Period.
   */
  ;

  _proto.removePeriod = function removePeriod(bufferType, period) {
    var periodIndex = findPeriodIndex(this._periods, period);

    if (periodIndex == null) {
      log/* default.warn */.Z.warn("TrackChoiceManager: " + bufferType + " not found for period", period);
      return;
    }

    var periodItem = this._periods.get(periodIndex);

    if (periodItem[bufferType] == null) {
      log/* default.warn */.Z.warn("TrackChoiceManager: " + bufferType + " already removed for period", period);
      return;
    }

    delete periodItem[bufferType];

    if (periodItem.audio == null && periodItem.text == null && periodItem.video == null) {
      this._periods.removeElement(periodItem);
    }
  };

  _proto.resetPeriods = function resetPeriods() {
    while (this._periods.length() > 0) {
      this._periods.pop();
    }
  }
  /**
   * Update the choice of all added Periods based on:
   *   1. What was the last chosen adaptation
   *   2. If not found, the preferences
   */
  ;

  _proto.update = function update() {
    this._resetChosenAudioTracks();

    this._resetChosenTextTracks();

    this._resetChosenVideoTracks();
  }
  /**
   * Emit initial audio Adaptation through the given Subject based on:
   *   - the preferred audio tracks
   *   - the last choice for this period, if one
   * @param {Period} period - The concerned Period.
   */
  ;

  _proto.setInitialAudioTrack = function setInitialAudioTrack(period) {
    var periodItem = getPeriodItem(this._periods, period);
    var audioInfos = periodItem != null ? periodItem.audio : null;

    if (audioInfos == null || periodItem == null) {
      throw new Error("TrackChoiceManager: Given Period not found.");
    }

    var audioAdaptations = period.getPlayableAdaptations("audio");

    var chosenAudioAdaptation = this._audioChoiceMemory.get(period);

    if (chosenAudioAdaptation === null) {
      // If the Period was previously without audio, keep it that way
      audioInfos.adaptation$.next(null);
    } else if (chosenAudioAdaptation === undefined || !(0,array_includes/* default */.Z)(audioAdaptations, chosenAudioAdaptation)) {
      // Find the optimal audio Adaptation
      var preferredAudioTracks = this._preferredAudioTracks;
      var normalizedPref = normalizeAudioTracks(preferredAudioTracks);
      var optimalAdaptation = findFirstOptimalAudioAdaptation(audioAdaptations, normalizedPref);

      this._audioChoiceMemory.set(period, optimalAdaptation);

      audioInfos.adaptation$.next(optimalAdaptation);
    } else {
      audioInfos.adaptation$.next(chosenAudioAdaptation); // set last one
    }
  }
  /**
   * Emit initial text Adaptation through the given Subject based on:
   *   - the preferred text tracks
   *   - the last choice for this period, if one
   * @param {Period} period - The concerned Period.
   */
  ;

  _proto.setInitialTextTrack = function setInitialTextTrack(period) {
    var periodItem = getPeriodItem(this._periods, period);
    var textInfos = periodItem != null ? periodItem.text : null;

    if (textInfos == null || periodItem == null) {
      throw new Error("TrackChoiceManager: Given Period not found.");
    }

    var textAdaptations = period.getPlayableAdaptations("text");

    var chosenTextAdaptation = this._textChoiceMemory.get(period);

    if (chosenTextAdaptation === null) {
      // If the Period was previously without text, keep it that way
      textInfos.adaptation$.next(null);
    } else if (chosenTextAdaptation === undefined || !(0,array_includes/* default */.Z)(textAdaptations, chosenTextAdaptation)) {
      // Find the optimal text Adaptation
      var preferredTextTracks = this._preferredTextTracks;
      var normalizedPref = normalizeTextTracks(preferredTextTracks);
      var optimalAdaptation = findFirstOptimalTextAdaptation(textAdaptations, normalizedPref);

      this._textChoiceMemory.set(period, optimalAdaptation);

      textInfos.adaptation$.next(optimalAdaptation);
    } else {
      textInfos.adaptation$.next(chosenTextAdaptation); // set last one
    }
  }
  /**
   * Emit initial video Adaptation through the given Subject based on:
   *   - the preferred video tracks
   *   - the last choice for this period, if one
   * @param {Period} period - The concerned Period.
   */
  ;

  _proto.setInitialVideoTrack = function setInitialVideoTrack(period) {
    var periodItem = getPeriodItem(this._periods, period);
    var videoInfos = periodItem != null ? periodItem.video : null;

    if (videoInfos == null || periodItem == null) {
      throw new Error("TrackChoiceManager: Given Period not found.");
    }

    var videoAdaptations = period.getPlayableAdaptations("video");

    var chosenVideoAdaptation = this._videoChoiceMemory.get(period);

    if (chosenVideoAdaptation === null) {
      // If the Period was previously without video, keep it that way
      videoInfos.adaptation$.next(null);
    } else if (chosenVideoAdaptation === undefined || !(0,array_includes/* default */.Z)(videoAdaptations, chosenVideoAdaptation)) {
      var preferredVideoTracks = this._preferredVideoTracks;
      var optimalAdaptation = findFirstOptimalVideoAdaptation(videoAdaptations, preferredVideoTracks);

      this._videoChoiceMemory.set(period, optimalAdaptation);

      videoInfos.adaptation$.next(optimalAdaptation);
    } else {
      videoInfos.adaptation$.next(chosenVideoAdaptation); // set last one
    }
  }
  /**
   * Set audio track based on the ID of its adaptation for a given added Period.
   * @param {Period} period - The concerned Period.
   * @param {string} wantedId - adaptation id of the wanted track
   */
  ;

  _proto.setAudioTrackByID = function setAudioTrackByID(period, wantedId) {
    var periodItem = getPeriodItem(this._periods, period);
    var audioInfos = periodItem != null ? periodItem.audio : null;

    if (audioInfos == null) {
      throw new Error("TrackChoiceManager: Given Period not found.");
    }

    var wantedAdaptation = (0,array_find/* default */.Z)(audioInfos.adaptations, function (_ref) {
      var id = _ref.id;
      return id === wantedId;
    });

    if (wantedAdaptation === undefined) {
      throw new Error("Audio Track not found.");
    }

    var chosenAudioAdaptation = this._audioChoiceMemory.get(period);

    if (chosenAudioAdaptation === wantedAdaptation) {
      return;
    }

    this._audioChoiceMemory.set(period, wantedAdaptation);

    audioInfos.adaptation$.next(wantedAdaptation);
  }
  /**
   * Set text track based on the ID of its adaptation for a given added Period.
   * @param {Period} period - The concerned Period.
   * @param {string} wantedId - adaptation id of the wanted track
   */
  ;

  _proto.setTextTrackByID = function setTextTrackByID(period, wantedId) {
    var periodItem = getPeriodItem(this._periods, period);
    var textInfos = periodItem != null ? periodItem.text : null;

    if (textInfos == null) {
      throw new Error("TrackChoiceManager: Given Period not found.");
    }

    var wantedAdaptation = (0,array_find/* default */.Z)(textInfos.adaptations, function (_ref2) {
      var id = _ref2.id;
      return id === wantedId;
    });

    if (wantedAdaptation === undefined) {
      throw new Error("Text Track not found.");
    }

    var chosenTextAdaptation = this._textChoiceMemory.get(period);

    if (chosenTextAdaptation === wantedAdaptation) {
      return;
    }

    this._textChoiceMemory.set(period, wantedAdaptation);

    textInfos.adaptation$.next(wantedAdaptation);
  }
  /**
   * Set video track based on the ID of its adaptation for a given added Period.
   * @param {Period} period - The concerned Period.
   * @param {string} wantedId - adaptation id of the wanted track
   *
   * @throws Error - Throws if the period given has not been added
   * @throws Error - Throws if the given id is not found in any video adaptation
   * of the given Period.
   */
  ;

  _proto.setVideoTrackByID = function setVideoTrackByID(period, wantedId) {
    var periodItem = getPeriodItem(this._periods, period);
    var videoInfos = periodItem != null ? periodItem.video : null;

    if (videoInfos == null) {
      throw new Error("LanguageManager: Given Period not found.");
    }

    var wantedAdaptation = (0,array_find/* default */.Z)(videoInfos.adaptations, function (_ref3) {
      var id = _ref3.id;
      return id === wantedId;
    });

    if (wantedAdaptation === undefined) {
      throw new Error("Video Track not found.");
    }

    var chosenVideoAdaptation = this._videoChoiceMemory.get(period);

    if (chosenVideoAdaptation === wantedAdaptation) {
      return;
    }

    this._videoChoiceMemory.set(period, wantedAdaptation);

    videoInfos.adaptation$.next(wantedAdaptation);
  }
  /**
   * Disable the current text track for a given period.
   *
   * @param {Period} period - The concerned Period.
   *
   * @throws Error - Throws if the period given has not been added
   */
  ;

  _proto.disableTextTrack = function disableTextTrack(period) {
    var periodItem = getPeriodItem(this._periods, period);
    var textInfos = periodItem != null ? periodItem.text : null;

    if (textInfos == null) {
      throw new Error("TrackChoiceManager: Given Period not found.");
    }

    var chosenTextAdaptation = this._textChoiceMemory.get(period);

    if (chosenTextAdaptation === null) {
      return;
    }

    this._textChoiceMemory.set(period, null);

    textInfos.adaptation$.next(null);
  }
  /**
   * Disable the current video track for a given period.
   * @param {Object} period
   * @throws Error - Throws if the period given has not been added
   */
  ;

  _proto.disableVideoTrack = function disableVideoTrack(period) {
    var periodItem = getPeriodItem(this._periods, period);
    var videoInfos = periodItem === null || periodItem === void 0 ? void 0 : periodItem.video;

    if (videoInfos === undefined) {
      throw new Error("TrackManager: Given Period not found.");
    }

    var chosenVideoAdaptation = this._videoChoiceMemory.get(period);

    if (chosenVideoAdaptation === null) {
      return;
    }

    this._videoChoiceMemory.set(period, null);

    videoInfos.adaptation$.next(null);
  }
  /**
   * Returns an object describing the chosen audio track for the given audio
   * Period.
   *
   * Returns null is the the current audio track is disabled or not
   * set yet.
   *
   * @param {Period} period - The concerned Period.
   * @returns {Object|null} - The audio track chosen for this Period
   */
  ;

  _proto.getChosenAudioTrack = function getChosenAudioTrack(period) {
    var periodItem = getPeriodItem(this._periods, period);
    var audioInfos = periodItem != null ? periodItem.audio : null;

    if (audioInfos == null) {
      return null;
    }

    var chosenTrack = this._audioChoiceMemory.get(period);

    if (chosenTrack == null) {
      return null;
    }

    var audioTrack = {
      language: (0,take_first_set/* default */.Z)(chosenTrack.language, ""),
      normalized: (0,take_first_set/* default */.Z)(chosenTrack.normalizedLanguage, ""),
      audioDescription: chosenTrack.isAudioDescription === true,
      id: chosenTrack.id,
      representations: chosenTrack.representations.map(parseAudioRepresentation)
    };

    if (chosenTrack.isDub === true) {
      audioTrack.dub = true;
    }

    return audioTrack;
  }
  /**
   * Returns an object describing the chosen text track for the given text
   * Period.
   *
   * Returns null is the the current text track is disabled or not
   * set yet.
   *
   * @param {Period} period - The concerned Period.
   * @returns {Object|null} - The text track chosen for this Period
   */
  ;

  _proto.getChosenTextTrack = function getChosenTextTrack(period) {
    var periodItem = getPeriodItem(this._periods, period);
    var textInfos = periodItem != null ? periodItem.text : null;

    if (textInfos == null) {
      return null;
    }

    var chosenTextAdaptation = this._textChoiceMemory.get(period);

    if (chosenTextAdaptation == null) {
      return null;
    }

    return {
      language: (0,take_first_set/* default */.Z)(chosenTextAdaptation.language, ""),
      normalized: (0,take_first_set/* default */.Z)(chosenTextAdaptation.normalizedLanguage, ""),
      closedCaption: chosenTextAdaptation.isClosedCaption === true,
      id: chosenTextAdaptation.id
    };
  }
  /**
   * Returns an object describing the chosen video track for the given video
   * Period.
   *
   * Returns null is the the current video track is disabled or not
   * set yet.
   *
   * @param {Period} period - The concerned Period.
   * @returns {Object|null} - The video track chosen for this Period
   */
  ;

  _proto.getChosenVideoTrack = function getChosenVideoTrack(period) {
    var periodItem = getPeriodItem(this._periods, period);
    var videoInfos = periodItem != null ? periodItem.video : null;

    if (videoInfos == null) {
      return null;
    }

    var chosenVideoAdaptation = this._videoChoiceMemory.get(period);

    if (chosenVideoAdaptation == null) {
      return null;
    }

    var videoTrack = {
      id: chosenVideoAdaptation.id,
      representations: chosenVideoAdaptation.representations.map(parseVideoRepresentation)
    };

    if (chosenVideoAdaptation.isSignInterpreted === true) {
      videoTrack.signInterpreted = true;
    }

    return videoTrack;
  }
  /**
   * Returns all available audio tracks for a given Period, as an array of
   * objects.
   *
   * @returns {Array.<Object>}
   */
  ;

  _proto.getAvailableAudioTracks = function getAvailableAudioTracks(period) {
    var periodItem = getPeriodItem(this._periods, period);
    var audioInfos = periodItem != null ? periodItem.audio : null;

    if (audioInfos == null) {
      return [];
    }

    var chosenAudioAdaptation = this._audioChoiceMemory.get(period);

    var currentId = chosenAudioAdaptation != null ? chosenAudioAdaptation.id : null;
    return audioInfos.adaptations.map(function (adaptation) {
      var formatted = {
        language: (0,take_first_set/* default */.Z)(adaptation.language, ""),
        normalized: (0,take_first_set/* default */.Z)(adaptation.normalizedLanguage, ""),
        audioDescription: adaptation.isAudioDescription === true,
        id: adaptation.id,
        active: currentId == null ? false : currentId === adaptation.id,
        representations: adaptation.representations.map(parseAudioRepresentation)
      };

      if (adaptation.isDub === true) {
        formatted.dub = true;
      }

      return formatted;
    });
  }
  /**
   * Returns all available text tracks for a given Period, as an array of
   * objects.
   *
   * @param {Period} period
   * @returns {Array.<Object>}
   */
  ;

  _proto.getAvailableTextTracks = function getAvailableTextTracks(period) {
    var periodItem = getPeriodItem(this._periods, period);
    var textInfos = periodItem != null ? periodItem.text : null;

    if (textInfos == null) {
      return [];
    }

    var chosenTextAdaptation = this._textChoiceMemory.get(period);

    var currentId = chosenTextAdaptation != null ? chosenTextAdaptation.id : null;
    return textInfos.adaptations.map(function (adaptation) {
      return {
        language: (0,take_first_set/* default */.Z)(adaptation.language, ""),
        normalized: (0,take_first_set/* default */.Z)(adaptation.normalizedLanguage, ""),
        closedCaption: adaptation.isClosedCaption === true,
        id: adaptation.id,
        active: currentId == null ? false : currentId === adaptation.id
      };
    });
  }
  /**
   * Returns all available video tracks for a given Period, as an array of
   * objects.
   *
   * @returns {Array.<Object>}
   */
  ;

  _proto.getAvailableVideoTracks = function getAvailableVideoTracks(period) {
    var periodItem = getPeriodItem(this._periods, period);
    var videoInfos = periodItem != null ? periodItem.video : null;

    if (videoInfos == null) {
      return [];
    }

    var chosenVideoAdaptation = this._videoChoiceMemory.get(period);

    var currentId = chosenVideoAdaptation != null ? chosenVideoAdaptation.id : null;
    return videoInfos.adaptations.map(function (adaptation) {
      var formatted = {
        id: adaptation.id,
        active: currentId === null ? false : currentId === adaptation.id,
        representations: adaptation.representations.map(parseVideoRepresentation)
      };

      if (adaptation.isSignInterpreted === true) {
        formatted.signInterpreted = true;
      }

      return formatted;
    });
  }
  /**
   * Reset all audio tracks choices to corresponds to the current preferences.
   */
  ;

  _proto._applyAudioPreferences = function _applyAudioPreferences() {
    // Remove all memorized choices and start over
    this._audioChoiceMemory = new WeakMap();

    this._resetChosenAudioTracks();
  }
  /**
   * Reset all text tracks choices to corresponds to the current preferences.
   */
  ;

  _proto._applyTextPreferences = function _applyTextPreferences() {
    // Remove all memorized choices and start over
    this._textChoiceMemory = new WeakMap();

    this._resetChosenTextTracks();
  }
  /**
   * Reset all video tracks choices to corresponds to the current preferences.
   */
  ;

  _proto._applyVideoPreferences = function _applyVideoPreferences() {
    // Remove all memorized choices and start over
    this._videoChoiceMemory = new WeakMap();

    this._resetChosenVideoTracks();
  }
  /**
   * Choose again the best audio tracks for all current Periods.
   * This is based on two things:
   *   1. what was the track previously chosen for that Period (by checking
   *      `this._audioChoiceMemory`).
   *   2. If no track were previously chosen or if it is not available anymore
   *      we check the audio preferences.
   */
  ;

  _proto._resetChosenAudioTracks = function _resetChosenAudioTracks() {
    var _this = this;

    var preferredAudioTracks = this._preferredAudioTracks;
    var normalizedPref = normalizeAudioTracks(preferredAudioTracks);

    var recursiveUpdateAudioTrack = function recursiveUpdateAudioTrack(index) {
      if (index >= _this._periods.length()) {
        // we did all audio Periods, exit
        return;
      }

      var periodItem = _this._periods.get(index);

      if (periodItem.audio == null) {
        // No audio choice for this period, check next one
        recursiveUpdateAudioTrack(index + 1);
        return;
      }

      var period = periodItem.period,
          audioItem = periodItem.audio;
      var audioAdaptations = period.getPlayableAdaptations("audio");

      var chosenAudioAdaptation = _this._audioChoiceMemory.get(period);

      if (chosenAudioAdaptation === null || chosenAudioAdaptation !== undefined && (0,array_includes/* default */.Z)(audioAdaptations, chosenAudioAdaptation)) {
        // Already best audio for this Period, check next one
        recursiveUpdateAudioTrack(index + 1);
        return;
      }

      var optimalAdaptation = findFirstOptimalAudioAdaptation(audioAdaptations, normalizedPref);

      _this._audioChoiceMemory.set(period, optimalAdaptation);

      audioItem.adaptation$.next(optimalAdaptation); // previous "next" call could have changed everything, start over

      recursiveUpdateAudioTrack(0);
    };

    recursiveUpdateAudioTrack(0);
  }
  /**
   * Choose again the best text tracks for all current Periods.
   * This is based on two things:
   *   1. what was the track previously chosen for that Period (by checking
   *      `this._textChoiceMemory`).
   *   2. If no track were previously chosen or if it is not available anymore
   *      we check the text preferences.
   */
  ;

  _proto._resetChosenTextTracks = function _resetChosenTextTracks() {
    var _this2 = this;

    var preferredTextTracks = this._preferredTextTracks;
    var normalizedPref = normalizeTextTracks(preferredTextTracks);

    var recursiveUpdateTextTrack = function recursiveUpdateTextTrack(index) {
      if (index >= _this2._periods.length()) {
        // we did all text Periods, exit
        return;
      }

      var periodItem = _this2._periods.get(index);

      if (periodItem.text == null) {
        // No text choice for this period, check next one
        recursiveUpdateTextTrack(index + 1);
        return;
      }

      var period = periodItem.period,
          textItem = periodItem.text;
      var textAdaptations = period.getPlayableAdaptations("text");

      var chosenTextAdaptation = _this2._textChoiceMemory.get(period);

      if (chosenTextAdaptation === null || chosenTextAdaptation !== undefined && (0,array_includes/* default */.Z)(textAdaptations, chosenTextAdaptation)) {
        // Already best text for this Period, check next one
        recursiveUpdateTextTrack(index + 1);
        return;
      }

      var optimalAdaptation = findFirstOptimalTextAdaptation(textAdaptations, normalizedPref);

      _this2._textChoiceMemory.set(period, optimalAdaptation);

      textItem.adaptation$.next(optimalAdaptation); // previous "next" call could have changed everything, start over

      recursiveUpdateTextTrack(0);
    };

    recursiveUpdateTextTrack(0);
  }
  /**
   * Choose again the best video tracks for all current Periods.
   * This is based on two things:
   *   1. what was the track previously chosen for that Period (by checking
   *      `this._videoChoiceMemory`).
   *   2. If no track were previously chosen or if it is not available anymore
   *      we check the video preferences.
   */
  ;

  _proto._resetChosenVideoTracks = function _resetChosenVideoTracks() {
    var _this3 = this;

    var preferredVideoTracks = this._preferredVideoTracks;

    var recursiveUpdateVideoTrack = function recursiveUpdateVideoTrack(index) {
      if (index >= _this3._periods.length()) {
        // we did all video Periods, exit
        return;
      }

      var periodItem = _this3._periods.get(index);

      if (periodItem.video == null) {
        // No video choice for this period, check next one
        recursiveUpdateVideoTrack(index + 1);
        return;
      }

      var period = periodItem.period,
          videoItem = periodItem.video;
      var videoAdaptations = period.getPlayableAdaptations("video");

      var chosenVideoAdaptation = _this3._videoChoiceMemory.get(period);

      if (chosenVideoAdaptation === null || chosenVideoAdaptation !== undefined && (0,array_includes/* default */.Z)(videoAdaptations, chosenVideoAdaptation)) {
        // Already best video for this Period, check next one
        recursiveUpdateVideoTrack(index + 1);
        return;
      }

      var optimalAdaptation = findFirstOptimalVideoAdaptation(videoAdaptations, preferredVideoTracks);

      _this3._videoChoiceMemory.set(period, optimalAdaptation);

      videoItem.adaptation$.next(optimalAdaptation); // previous "next" call could have changed everything, start over

      recursiveUpdateVideoTrack(0);
    };

    recursiveUpdateVideoTrack(0);
  };

  return TrackChoiceManager;
}();
/**
 * Create a function allowing to compare audio Adaptations with a given
 * `preferredAudioTrack` preference to see if they match.
 *
 * This function is curried to be easily and optimally used in a loop context.
 *
 * @param {Object} preferredAudioTrack - The audio track preference you want to
 * compare audio Adaptations to.
 * @returns {Function} - Function taking in argument an audio Adaptation and
 * returning `true` if it matches the `preferredAudioTrack` preference (and
 * `false` otherwise.
 */




function createAudioPreferenceMatcher(preferredAudioTrack) {
  /**
   * Compares an audio Adaptation to the given `preferredAudioTrack` preference.
   * Returns `true` if it matches, false otherwise.
   * @param {Object} audioAdaptation
   * @returns {boolean}
   */
  return function matchAudioPreference(audioAdaptation) {
    var _a;

    if (preferredAudioTrack.normalized !== undefined) {
      var language = (_a = audioAdaptation.normalizedLanguage) !== null && _a !== void 0 ? _a : "";

      if (language !== preferredAudioTrack.normalized) {
        return false;
      }
    }

    if (preferredAudioTrack.audioDescription !== undefined) {
      if (preferredAudioTrack.audioDescription) {
        if (audioAdaptation.isAudioDescription !== true) {
          return false;
        }
      } else if (audioAdaptation.isAudioDescription === true) {
        return false;
      }
    }

    if (preferredAudioTrack.codec === undefined) {
      return true;
    }

    var regxp = preferredAudioTrack.codec.test;

    var codecTestingFn = function codecTestingFn(rep) {
      return rep.codec !== undefined && regxp.test(rep.codec);
    };

    if (preferredAudioTrack.codec.all) {
      return audioAdaptation.representations.every(codecTestingFn);
    }

    return audioAdaptation.representations.some(codecTestingFn);
  };
}
/**
 * Find an optimal audio adaptation given their list and the array of preferred
 * audio tracks sorted from the most preferred to the least preferred.
 *
 * `null` if the most optimal audio adaptation is no audio adaptation.
 * @param {Array.<Adaptation>} audioAdaptations
 * @param {Array.<Object|null>} preferredAudioTracks
 * @returns {Adaptation|null}
 */


function findFirstOptimalAudioAdaptation(audioAdaptations, preferredAudioTracks) {
  if (audioAdaptations.length === 0) {
    return null;
  }

  for (var i = 0; i < preferredAudioTracks.length; i++) {
    var preferredAudioTrack = preferredAudioTracks[i];

    if (preferredAudioTrack === null) {
      return null;
    }

    var matchPreferredAudio = createAudioPreferenceMatcher(preferredAudioTrack);
    var foundAdaptation = (0,array_find/* default */.Z)(audioAdaptations, matchPreferredAudio);

    if (foundAdaptation !== undefined) {
      return foundAdaptation;
    }
  } // no optimal adaptation, just return the first one


  return audioAdaptations[0];
}
/**
 * Create a function allowing to compare text Adaptations with a given
 * `preferredTextTrack` preference to see if they match.
 *
 * This function is curried to be easily and optimally used in a loop context.
 *
 * @param {Object} preferredTextTrack - The text track preference you want to
 * compare text Adaptations to.
 * @returns {Function} - Function taking in argument a text Adaptation and
 * returning `true` if it matches the `preferredTextTrack` preference (and
 * `false` otherwise.
 */


function createTextPreferenceMatcher(preferredTextTrack) {
  /**
   * Compares a text Adaptation to the given `preferredTextTrack` preference.
   * Returns `true` if it matches, false otherwise.
   * @param {Object} textAdaptation
   * @returns {boolean}
   */
  return function matchTextPreference(textAdaptation) {
    return (0,take_first_set/* default */.Z)(textAdaptation.normalizedLanguage, "") === preferredTextTrack.normalized && (preferredTextTrack.closedCaption ? textAdaptation.isClosedCaption === true : textAdaptation.isClosedCaption !== true);
  };
}
/**
 * Find an optimal text adaptation given their list and the array of preferred
 * text tracks sorted from the most preferred to the least preferred.
 *
 * `null` if the most optimal text adaptation is no text adaptation.
 * @param {Array.<Object>} textAdaptations
 * @param {Array.<Object|null>} preferredTextTracks
 * @returns {Adaptation|null}
 */


function findFirstOptimalTextAdaptation(textAdaptations, preferredTextTracks) {
  if (textAdaptations.length === 0) {
    return null;
  }

  for (var i = 0; i < preferredTextTracks.length; i++) {
    var preferredTextTrack = preferredTextTracks[i];

    if (preferredTextTrack === null) {
      return null;
    }

    var matchPreferredText = createTextPreferenceMatcher(preferredTextTrack);
    var foundAdaptation = (0,array_find/* default */.Z)(textAdaptations, matchPreferredText);

    if (foundAdaptation !== undefined) {
      return foundAdaptation;
    }
  } // no optimal adaptation


  return null;
}
/**
 * Create a function allowing to compare video Adaptations with a given
 * `preferredVideoTrack` preference to see if they match.
 *
 * This function is curried to be easily and optimally used in a loop context.
 *
 * @param {Object} preferredVideoTrack - The video track preference you want to
 * compare video Adaptations to.
 * @returns {Function} - Function taking in argument a video Adaptation and
 * returning `true` if it matches the `preferredVideoTrack` preference (and
 * `false` otherwise.
 */


function createVideoPreferenceMatcher(preferredVideoTrack) {
  /**
   * Compares a video Adaptation to the given `preferredVideoTrack` preference.
   * Returns `true` if it matches, false otherwise.
   * @param {Object} videoAdaptation
   * @returns {boolean}
   */
  return function matchVideoPreference(videoAdaptation) {
    if (preferredVideoTrack.signInterpreted !== undefined && preferredVideoTrack.signInterpreted !== videoAdaptation.isSignInterpreted) {
      return false;
    }

    if (preferredVideoTrack.codec === undefined) {
      return true;
    }

    var regxp = preferredVideoTrack.codec.test;

    var codecTestingFn = function codecTestingFn(rep) {
      return rep.codec !== undefined && regxp.test(rep.codec);
    };

    if (preferredVideoTrack.codec.all) {
      return videoAdaptation.representations.every(codecTestingFn);
    }

    return videoAdaptation.representations.some(codecTestingFn);
  };
}
/**
 * Find an optimal video adaptation given their list and the array of preferred
 * video tracks sorted from the most preferred to the least preferred.
 *
 * `null` if the most optimal video adaptation is no video adaptation.
 * @param {Array.<Adaptation>} videoAdaptations
 * @param {Array.<Object|null>} preferredvideoTracks
 * @returns {Adaptation|null}
 */


function findFirstOptimalVideoAdaptation(videoAdaptations, preferredVideoTracks) {
  if (videoAdaptations.length === 0) {
    return null;
  }

  for (var i = 0; i < preferredVideoTracks.length; i++) {
    var preferredVideoTrack = preferredVideoTracks[i];

    if (preferredVideoTrack === null) {
      return null;
    }

    var matchPreferredVideo = createVideoPreferenceMatcher(preferredVideoTrack);
    var foundAdaptation = (0,array_find/* default */.Z)(videoAdaptations, matchPreferredVideo);

    if (foundAdaptation !== undefined) {
      return foundAdaptation;
    }
  } // no optimal adaptation, just return the first one


  return videoAdaptations[0];
}
/**
 * Returns the index of the given `period` in the given `periods`
 * SortedList.
 * Returns `undefined` if that `period` is not found.
 * @param {Object} periods
 * @param {Object} period
 * @returns {number|undefined}
 */


function findPeriodIndex(periods, period) {
  for (var i = 0; i < periods.length(); i++) {
    var periodI = periods.get(i);

    if (periodI.period.id === period.id) {
      return i;
    }
  }
}
/**
 * Returns element in the given `periods` SortedList that corresponds to the
 * `period` given.
 * Returns `undefined` if that `period` is not found.
 * @param {Object} periods
 * @param {Object} period
 * @returns {Object|undefined}
 */


function getPeriodItem(periods, period) {
  for (var i = 0; i < periods.length(); i++) {
    var periodI = periods.get(i);

    if (periodI.period.id === period.id) {
      return periodI;
    }
  }
}
/**
 * Parse video Representation into a ITMVideoRepresentation.
 * @param {Object} representation
 * @returns {Object}
 */


function parseVideoRepresentation(_ref4) {
  var id = _ref4.id,
      bitrate = _ref4.bitrate,
      frameRate = _ref4.frameRate,
      width = _ref4.width,
      height = _ref4.height,
      codec = _ref4.codec;
  return {
    id: id,
    bitrate: bitrate,
    frameRate: frameRate,
    width: width,
    height: height,
    codec: codec
  };
}
/**
 * Parse audio Representation into a ITMAudioRepresentation.
 * @param {Object} representation
 * @returns {Object}
 */


function parseAudioRepresentation(_ref5) {
  var id = _ref5.id,
      bitrate = _ref5.bitrate,
      codec = _ref5.codec;
  return {
    id: id,
    bitrate: bitrate,
    codec: codec
  };
}
;// CONCATENATED MODULE: ./src/core/api/public_api.ts



/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This file defines the public API for the RxPlayer.
 * It also starts the different sub-parts of the player on various API calls.
 */



/* eslint-disable-next-line max-len */





















/* eslint-disable @typescript-eslint/naming-convention */

var DEFAULT_UNMUTED_VOLUME = config/* default.DEFAULT_UNMUTED_VOLUME */.Z.DEFAULT_UNMUTED_VOLUME;
var isActive = event_listeners/* isActive */.zh,
    isVideoVisible = event_listeners/* isVideoVisible */._K,
    onEnded$ = event_listeners/* onEnded$ */.C1,
    onFullscreenChange$ = event_listeners/* onFullscreenChange$ */.Q1,
    onPlayPause$ = event_listeners/* onPlayPause$ */.Qt,
    onPictureInPictureEvent$ = event_listeners/* onPictureInPictureEvent$ */.yj,
    onSeeking$ = event_listeners/* onSeeking$ */.d5,
    onTextTrackChanges$ = event_listeners/* onTextTrackChanges$ */.UA,
    videoWidth$ = event_listeners/* videoWidth$ */.$x;
/**
 * @class Player
 * @extends EventEmitter
 */

var Player = /*#__PURE__*/function (_EventEmitter) {
  inheritsLoose_default()(Player, _EventEmitter);

  /**
   * @constructor
   * @param {Object} options
   */
  function Player(options) {
    var _this;

    if (options === void 0) {
      options = {};
    }

    _this = _EventEmitter.call(this) || this;

    var _parseConstructorOpti = parseConstructorOptions(options),
        initialAudioBitrate = _parseConstructorOpti.initialAudioBitrate,
        initialVideoBitrate = _parseConstructorOpti.initialVideoBitrate,
        limitVideoWidth = _parseConstructorOpti.limitVideoWidth,
        minAudioBitrate = _parseConstructorOpti.minAudioBitrate,
        minVideoBitrate = _parseConstructorOpti.minVideoBitrate,
        maxAudioBitrate = _parseConstructorOpti.maxAudioBitrate,
        maxBufferAhead = _parseConstructorOpti.maxBufferAhead,
        maxBufferBehind = _parseConstructorOpti.maxBufferBehind,
        maxVideoBitrate = _parseConstructorOpti.maxVideoBitrate,
        preferredAudioTracks = _parseConstructorOpti.preferredAudioTracks,
        preferredTextTracks = _parseConstructorOpti.preferredTextTracks,
        preferredVideoTracks = _parseConstructorOpti.preferredVideoTracks,
        throttleWhenHidden = _parseConstructorOpti.throttleWhenHidden,
        throttleVideoBitrateWhenHidden = _parseConstructorOpti.throttleVideoBitrateWhenHidden,
        videoElement = _parseConstructorOpti.videoElement,
        wantedBufferAhead = _parseConstructorOpti.wantedBufferAhead,
        stopAtEnd = _parseConstructorOpti.stopAtEnd; // Workaround to support Firefox autoplay on FF 42.
    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1194624


    videoElement.preload = "auto";
    _this.version =
    /* PLAYER_VERSION */
    "3.23.1";
    _this.log = log/* default */.Z;
    _this.state = "STOPPED";
    _this.videoElement = videoElement;
    _this._priv_destroy$ = new Subject/* Subject */.xQ();
    _this._priv_pictureInPictureEvent$ = new ReplaySubject/* ReplaySubject */.t(1);
    onPictureInPictureEvent$(videoElement).pipe((0,takeUntil/* takeUntil */.R)(_this._priv_destroy$)).subscribe(_this._priv_pictureInPictureEvent$);
    /** @deprecated */

    onFullscreenChange$(videoElement).pipe((0,takeUntil/* takeUntil */.R)(_this._priv_destroy$))
    /* eslint-disable import/no-deprecated */
    .subscribe(function () {
      return _this.trigger("fullscreenChange", _this.isFullscreen());
    });
    /* eslint-enable import/no-deprecated */

    /** @deprecated */

    onTextTrackChanges$(videoElement.textTracks).pipe((0,takeUntil/* takeUntil */.R)(_this._priv_destroy$), (0,map/* map */.U)(function (evt) {
      var target = evt.target;
      var arr = [];

      for (var i = 0; i < target.length; i++) {
        var textTrack = target[i];
        arr.push(textTrack);
      }

      return arr;
    }), // We can have two consecutive textTrackChanges with the exact same
    // payload when we perform multiple texttrack operations before the event
    // loop is freed.
    // In that case we only want to fire one time the observable.
    (0,distinctUntilChanged/* distinctUntilChanged */.x)(function (textTracksA, textTracksB) {
      if (textTracksA.length !== textTracksB.length) {
        return false;
      }

      for (var i = 0; i < textTracksA.length; i++) {
        if (textTracksA[i] !== textTracksB[i]) {
          return false;
        }
      }

      return true;
    })).subscribe(function (x) {
      return _this._priv_onNativeTextTracksNext(x);
    });
    _this._priv_playing$ = new ReplaySubject/* ReplaySubject */.t(1);
    _this._priv_speed$ = new BehaviorSubject(videoElement.playbackRate);
    _this._priv_stopCurrentContent$ = new Subject/* Subject */.xQ();
    _this._priv_contentLock$ = new BehaviorSubject(false);
    _this._priv_bufferOptions = {
      wantedBufferAhead$: new BehaviorSubject(wantedBufferAhead),
      maxBufferAhead$: new BehaviorSubject(maxBufferAhead),
      maxBufferBehind$: new BehaviorSubject(maxBufferBehind)
    };
    _this._priv_bitrateInfos = {
      lastBitrates: {
        audio: initialAudioBitrate,
        video: initialVideoBitrate
      },
      minAutoBitrates: {
        audio: new BehaviorSubject(minAudioBitrate),
        video: new BehaviorSubject(minVideoBitrate)
      },
      maxAutoBitrates: {
        audio: new BehaviorSubject(maxAudioBitrate),
        video: new BehaviorSubject(maxVideoBitrate)
      },
      manualBitrates: {
        audio: new BehaviorSubject(-1),
        video: new BehaviorSubject(-1)
      }
    };
    _this._priv_throttleWhenHidden = throttleWhenHidden;
    _this._priv_throttleVideoBitrateWhenHidden = throttleVideoBitrateWhenHidden;
    _this._priv_limitVideoWidth = limitVideoWidth;
    _this._priv_mutedMemory = DEFAULT_UNMUTED_VOLUME;
    _this._priv_trackChoiceManager = null;
    _this._priv_mediaElementTrackChoiceManager = null;
    _this._priv_currentError = null;
    _this._priv_contentInfos = null;
    _this._priv_contentEventsMemory = {};
    _this._priv_stopAtEnd = stopAtEnd;

    _this._priv_setPlayerState(PLAYER_STATES.STOPPED);

    _this._priv_preferredAudioTracks = preferredAudioTracks;
    _this._priv_preferredTextTracks = preferredTextTracks;
    _this._priv_preferredVideoTracks = preferredVideoTracks;
    _this._priv_lastContentPlaybackInfos = {};
    return _this;
  }
  /** All possible Error types emitted by the RxPlayer. */


  var _proto = Player.prototype;

  /**
   * Stop the playback for the current content.
   */
  _proto.stop = function stop() {
    if (this.state !== PLAYER_STATES.STOPPED) {
      this._priv_stopCurrentContent$.next();

      this._priv_cleanUpCurrentContentState();

      this._priv_setPlayerState(PLAYER_STATES.STOPPED);
    }
  }
  /**
   * Free the resources used by the player.
   * /!\ The player cannot be "used" anymore after this method has been called.
   */
  ;

  _proto.dispose = function dispose() {
    // free resources linked to the loaded content
    this.stop();

    if (this.videoElement !== null) {
      // free resources used for EME management
      disposeEME(this.videoElement);
    } // free Observables linked to the Player instance


    this._priv_destroy$.next();

    this._priv_destroy$.complete(); // Complete all subjects


    this._priv_stopCurrentContent$.complete();

    this._priv_playing$.complete();

    this._priv_speed$.complete();

    this._priv_contentLock$.complete();

    this._priv_bufferOptions.wantedBufferAhead$.complete();

    this._priv_bufferOptions.maxBufferAhead$.complete();

    this._priv_bufferOptions.maxBufferBehind$.complete();

    this._priv_pictureInPictureEvent$.complete();

    this._priv_bitrateInfos.manualBitrates.video.complete();

    this._priv_bitrateInfos.manualBitrates.audio.complete();

    this._priv_bitrateInfos.minAutoBitrates.video.complete();

    this._priv_bitrateInfos.minAutoBitrates.audio.complete();

    this._priv_bitrateInfos.maxAutoBitrates.video.complete();

    this._priv_bitrateInfos.maxAutoBitrates.audio.complete();

    this._priv_lastContentPlaybackInfos = {}; // un-attach video element

    this.videoElement = null;
  }
  /**
   * Load a new video.
   * @param {Object} opts
   */
  ;

  _proto.loadVideo = function loadVideo(opts) {
    var options = parseLoadVideoOptions(opts);
    log/* default.info */.Z.info("API: Calling loadvideo", options);
    this._priv_lastContentPlaybackInfos = {
      options: options
    };

    this._priv_initializeContentPlayback(options);
  }
  /**
   * Reload last content. Init media playback without fetching again
   * the manifest.
   * @param {Object} reloadOpts
   */
  ;

  _proto.reload = function reload(reloadOpts) {
    var _this$_priv_lastConte = this._priv_lastContentPlaybackInfos,
        options = _this$_priv_lastConte.options,
        manifest = _this$_priv_lastConte.manifest,
        lastPlaybackPosition = _this$_priv_lastConte.lastPlaybackPosition;

    if (options === undefined || manifest === undefined || lastPlaybackPosition === undefined) {
      throw new Error("API: Can't reload without having previously loaded a content.");
    }

    checkReloadOptions(reloadOpts);
    var startAtPositon;

    if (reloadOpts !== undefined && reloadOpts.reloadAt !== undefined && reloadOpts.reloadAt.position !== undefined) {
      startAtPositon = reloadOpts.reloadAt.position;
    } else {
      var playbackPosition;

      if (this.state === "STOPPED" || this.state === "ENDED") {
        playbackPosition = lastPlaybackPosition;
      } else {
        if (this.videoElement === null) {
          throw new Error("Can't reload when video element does not exist.");
        }

        playbackPosition = this.videoElement.currentTime;
      }

      if (reloadOpts !== undefined && reloadOpts.reloadAt !== undefined && reloadOpts.reloadAt.relative !== undefined) {
        startAtPositon = reloadOpts.reloadAt.relative + playbackPosition;
      } else {
        startAtPositon = playbackPosition;
      }
    }

    var newOptions = Object.assign(Object.assign({}, options), {
      initialManifest: manifest
    });
    newOptions.startAt = {
      position: startAtPositon
    };

    this._priv_initializeContentPlayback(newOptions);
  }
  /**
   * From given options, initialize content playback.
   * @param {Object} options
   */
  ;

  _proto._priv_initializeContentPlayback = function _priv_initializeContentPlayback(options) {
    var _this2 = this;

    var _a, _b, _c;

    var autoPlay = options.autoPlay,
        audioTrackSwitchingMode = options.audioTrackSwitchingMode,
        defaultAudioTrack = options.defaultAudioTrack,
        defaultTextTrack = options.defaultTextTrack,
        enableFastSwitching = options.enableFastSwitching,
        initialManifest = options.initialManifest,
        keySystems = options.keySystems,
        lowLatencyMode = options.lowLatencyMode,
        manualBitrateSwitchingMode = options.manualBitrateSwitchingMode,
        manifestUpdateUrl = options.manifestUpdateUrl,
        minimumManifestUpdateInterval = options.minimumManifestUpdateInterval,
        networkConfig = options.networkConfig,
        onCodecSwitch = options.onCodecSwitch,
        startAt = options.startAt,
        transport = options.transport,
        transportOptions = options.transportOptions,
        url = options.url; // Perform multiple checks on the given options

    if (this.videoElement === null) {
      throw new Error("the attached video element is disposed");
    } // now that every checks have passed, stop previous content


    this.stop();
    var isDirectFile = transport === "directfile";
    this._priv_currentError = null;
    this._priv_contentInfos = {
      url: url,
      isDirectFile: isDirectFile,
      segmentBuffersStore: null,
      thumbnails: null,
      manifest: null,
      currentPeriod: null,
      activeAdaptations: null,
      activeRepresentations: null,
      initialAudioTrack: defaultAudioTrack,
      initialTextTrack: defaultTextTrack
    }; // inilialize `_priv_playing$` to false (meaning the content is not playing yet)

    this._priv_playing$.next(false);

    var videoElement = this.videoElement;
    /** Global "clock" used for content playback */

    var clock$ = clock(videoElement, {
      withMediaSource: !isDirectFile,
      lowLatencyMode: lowLatencyMode
    });
    /** Emit when the current content has been stopped. */

    var contentIsStopped$ = (0,merge/* merge */.T)(this._priv_stopCurrentContent$, this._priv_stopAtEnd ? onEnded$(videoElement) : empty/* EMPTY */.E).pipe((0,take/* take */.q)(1));
    /** Emit playback events. */

    var playback$;

    if (!isDirectFile) {
      var transportFn = features/* default.transports */.Z.transports[transport];

      if (typeof transportFn !== "function") {
        throw new Error("transport \"" + transport + "\" not supported");
      }

      var transportPipelines = transportFn(transportOptions);
      var relyOnVideoVisibilityAndSize = canRelyOnVideoVisibilityAndSize();
      var throttlers = {
        throttle: {},
        throttleBitrate: {},
        limitWidth: {}
      };

      if (this._priv_throttleWhenHidden) {
        if (!relyOnVideoVisibilityAndSize) {
          log/* default.warn */.Z.warn("API: Can't apply throttleWhenHidden because " + "browser can't be trusted for visibility.");
        } else {
          throttlers.throttle = {
            video: isActive().pipe((0,map/* map */.U)(function (active) {
              return active ? Infinity : 0;
            }), (0,takeUntil/* takeUntil */.R)(this._priv_stopCurrentContent$))
          };
        }
      }

      if (this._priv_throttleVideoBitrateWhenHidden) {
        if (!relyOnVideoVisibilityAndSize) {
          log/* default.warn */.Z.warn("API: Can't apply throttleVideoBitrateWhenHidden because " + "browser can't be trusted for visibility.");
        } else {
          throttlers.throttleBitrate = {
            video: isVideoVisible(this._priv_pictureInPictureEvent$).pipe((0,map/* map */.U)(function (active) {
              return active ? Infinity : 0;
            }), (0,takeUntil/* takeUntil */.R)(this._priv_stopCurrentContent$))
          };
        }
      }

      if (this._priv_limitVideoWidth) {
        if (!relyOnVideoVisibilityAndSize) {
          log/* default.warn */.Z.warn("API: Can't apply limitVideoWidth because browser can't be " + "trusted for video size.");
        } else {
          throttlers.limitWidth = {
            video: videoWidth$(videoElement, this._priv_pictureInPictureEvent$).pipe((0,takeUntil/* takeUntil */.R)(this._priv_stopCurrentContent$))
          };
        }
      }
      /** Options used by the ABR Manager. */


      var adaptiveOptions = {
        initialBitrates: this._priv_bitrateInfos.lastBitrates,
        lowLatencyMode: lowLatencyMode,
        manualBitrates: this._priv_bitrateInfos.manualBitrates,
        minAutoBitrates: this._priv_bitrateInfos.minAutoBitrates,
        maxAutoBitrates: this._priv_bitrateInfos.maxAutoBitrates,
        throttlers: throttlers
      };
      /** Options used by the TextTrack SegmentBuffer. */

      var textTrackOptions = options.textTrackMode === "native" ? {
        textTrackMode: "native",
        hideNativeSubtitle: options.hideNativeSubtitle
      } : {
        textTrackMode: "html",
        textTrackElement: options.textTrackElement
      };
      var bufferOptions = (0,object_assign/* default */.Z)({
        audioTrackSwitchingMode: audioTrackSwitchingMode,
        enableFastSwitching: enableFastSwitching,
        manualBitrateSwitchingMode: manualBitrateSwitchingMode,
        onCodecSwitch: onCodecSwitch
      }, this._priv_bufferOptions); // We've every options set up. Start everything now

      var init$ = init({
        adaptiveOptions: adaptiveOptions,
        autoPlay: autoPlay,
        bufferOptions: bufferOptions,
        clock$: clock$,
        content: {
          initialManifest: initialManifest,
          manifestUpdateUrl: manifestUpdateUrl,
          url: url
        },
        keySystems: keySystems,
        lowLatencyMode: lowLatencyMode,
        mediaElement: videoElement,
        minimumManifestUpdateInterval: minimumManifestUpdateInterval,
        networkConfig: networkConfig,
        transportPipelines: transportPipelines,
        speed$: this._priv_speed$,
        startAt: startAt,
        textTrackOptions: textTrackOptions
      }).pipe((0,takeUntil/* takeUntil */.R)(contentIsStopped$));
      playback$ = publish()(init$);
    } else {
      if (features/* default.directfile */.Z.directfile === null) {
        throw new Error("DirectFile feature not activated in your build.");
      }

      this._priv_mediaElementTrackChoiceManager = new features/* default.directfile.mediaElementTrackChoiceManager */.Z.directfile.mediaElementTrackChoiceManager(this.videoElement);
      var preferredAudioTracks = defaultAudioTrack === undefined ? this._priv_preferredAudioTracks : [defaultAudioTrack];

      this._priv_mediaElementTrackChoiceManager.setPreferredAudioTracks(preferredAudioTracks, true);

      var preferredTextTracks = defaultTextTrack === undefined ? this._priv_preferredTextTracks : [defaultTextTrack];

      this._priv_mediaElementTrackChoiceManager.setPreferredTextTracks(preferredTextTracks, true);

      this._priv_mediaElementTrackChoiceManager.setPreferredVideoTracks(this._priv_preferredVideoTracks, true);

      this.trigger("availableAudioTracksChange", this._priv_mediaElementTrackChoiceManager.getAvailableAudioTracks());
      this.trigger("availableVideoTracksChange", this._priv_mediaElementTrackChoiceManager.getAvailableVideoTracks());
      this.trigger("availableTextTracksChange", this._priv_mediaElementTrackChoiceManager.getAvailableTextTracks());
      this.trigger("audioTrackChange", (_a = this._priv_mediaElementTrackChoiceManager.getChosenAudioTrack()) !== null && _a !== void 0 ? _a : null);
      this.trigger("textTrackChange", (_b = this._priv_mediaElementTrackChoiceManager.getChosenTextTrack()) !== null && _b !== void 0 ? _b : null);
      this.trigger("videoTrackChange", (_c = this._priv_mediaElementTrackChoiceManager.getChosenVideoTrack()) !== null && _c !== void 0 ? _c : null);

      this._priv_mediaElementTrackChoiceManager.addEventListener("availableVideoTracksChange", function (val) {
        return _this2.trigger("availableVideoTracksChange", val);
      });

      this._priv_mediaElementTrackChoiceManager.addEventListener("availableAudioTracksChange", function (val) {
        return _this2.trigger("availableAudioTracksChange", val);
      });

      this._priv_mediaElementTrackChoiceManager.addEventListener("availableTextTracksChange", function (val) {
        return _this2.trigger("availableTextTracksChange", val);
      });

      this._priv_mediaElementTrackChoiceManager.addEventListener("audioTrackChange", function (val) {
        return _this2.trigger("audioTrackChange", val);
      });

      this._priv_mediaElementTrackChoiceManager.addEventListener("videoTrackChange", function (val) {
        return _this2.trigger("videoTrackChange", val);
      });

      this._priv_mediaElementTrackChoiceManager.addEventListener("textTrackChange", function (val) {
        return _this2.trigger("textTrackChange", val);
      });

      var directfileInit$ = features/* default.directfile.initDirectFile */.Z.directfile.initDirectFile({
        autoPlay: autoPlay,
        clock$: clock$,
        keySystems: keySystems,
        mediaElement: videoElement,
        speed$: this._priv_speed$,
        startAt: startAt,
        url: url
      }).pipe((0,takeUntil/* takeUntil */.R)(contentIsStopped$));
      playback$ = publish()(directfileInit$);
    }
    /** Emit an object when the player "stalls" and null when it un-stalls */


    var stalled$ = playback$.pipe((0,filter/* filter */.h)(function (evt) {
      return evt.type === "stalled" || evt.type === "unstalled";
    }), (0,map/* map */.U)(function (x) {
      return x.value;
    }), (0,distinctUntilChanged/* distinctUntilChanged */.x)(function (wasStalled, isStalled) {
      return wasStalled === null && isStalled === null || wasStalled !== null && isStalled !== null && wasStalled.reason === isStalled.reason;
    }));
    /** Emit when the content is considered "loaded". */

    var loaded$ = playback$.pipe((0,filter/* filter */.h)(function (evt) {
      return evt.type === "loaded";
    }), (0,share/* share */.B)());
    /** Emit when we will "reload" the MediaSource. */

    var reloading$ = playback$.pipe((0,filter/* filter */.h)(function (evt) {
      return evt.type === "reloading-media-source";
    }), (0,share/* share */.B)());
    /** Emit when the media element emits an "ended" event. */

    var endedEvent$ = onEnded$(videoElement);
    /** Emit when the media element emits a "seeking" event. */

    var seekingEvent$ = onSeeking$(videoElement);
    /** Emit state updates once the content is considered "loaded". */

    var loadedStateUpdates$ = (0,combineLatest/* combineLatest */.aj)([this._priv_playing$, stalled$.pipe((0,startWith/* startWith */.O)(null)), endedEvent$.pipe((0,startWith/* startWith */.O)(null)), seekingEvent$.pipe((0,startWith/* startWith */.O)(null))]).pipe((0,takeUntil/* takeUntil */.R)(this._priv_stopCurrentContent$), (0,map/* map */.U)(function (_ref) {
      var isPlaying = _ref[0],
          stalledStatus = _ref[1];
      return getLoadedContentState(videoElement, isPlaying, stalledStatus);
    }));
    /** Emit all player "state" updates. */

    var playerState$ = (0,concat/* concat */.z)((0,of.of)(PLAYER_STATES.LOADING), // Begin with LOADING
    // LOADED as soon as the first "loaded" event is sent
    loaded$.pipe((0,take/* take */.q)(1), (0,mapTo/* mapTo */.h)(PLAYER_STATES.LOADED)), (0,merge/* merge */.T)(loadedStateUpdates$.pipe( // From the first reload onward, we enter another dynamic (below)
    (0,takeUntil/* takeUntil */.R)(reloading$), skipWhile(function (state) {
      return state === PLAYER_STATES.PAUSED;
    })), // when reloading
    reloading$.pipe((0,switchMapTo/* switchMapTo */.c)(loaded$.pipe((0,take/* take */.q)(1), // wait for the next loaded event
    (0,mergeMapTo/* mergeMapTo */.j)(loadedStateUpdates$), // to update the state as usual
    (0,startWith/* startWith */.O)(PLAYER_STATES.RELOADING) // Starts with "RELOADING" state
    ))))).pipe((0,distinctUntilChanged/* distinctUntilChanged */.x)());
    var playbackSubscription;

    this._priv_stopCurrentContent$.pipe((0,take/* take */.q)(1)).subscribe(function () {
      if (playbackSubscription !== undefined) {
        playbackSubscription.unsubscribe();
      }
    }); // Link `_priv_onPlayPauseNext` Observable to "play"/"pause" events


    onPlayPause$(videoElement).pipe((0,takeUntil/* takeUntil */.R)(this._priv_stopCurrentContent$)).subscribe(function (e) {
      return _this2._priv_onPlayPauseNext(e.type === "play");
    }, noop/* default */.Z); // Link "positionUpdate" events to the clock

    clock$.pipe((0,takeUntil/* takeUntil */.R)(this._priv_stopCurrentContent$)).subscribe(function (x) {
      return _this2._priv_triggerPositionUpdate(x);
    }, noop/* default */.Z); // Link "seeking" and "seeked" events (once the content is loaded)

    loaded$.pipe((0,switchMapTo/* switchMapTo */.c)(emitSeekEvents(this.videoElement, clock$)), (0,takeUntil/* takeUntil */.R)(this._priv_stopCurrentContent$)).subscribe(function (evt) {
      log/* default.info */.Z.info("API: Triggering \"" + evt + "\" event");

      _this2.trigger(evt, null);
    }); // Handle state updates

    playerState$.pipe((0,takeUntil/* takeUntil */.R)(this._priv_stopCurrentContent$)).subscribe(function (x) {
      return _this2._priv_setPlayerState(x);
    }, noop/* default */.Z); // Link playback events to the corresponding callbacks

    playback$.subscribe(function (x) {
      return _this2._priv_onPlaybackEvent(x);
    }, function (err) {
      return _this2._priv_onPlaybackError(err);
    }, function () {
      return _this2._priv_onPlaybackFinished();
    }); // initialize the content only when the lock is inactive

    this._priv_contentLock$.pipe((0,filter/* filter */.h)(function (isLocked) {
      return !isLocked;
    }), (0,take/* take */.q)(1), (0,takeUntil/* takeUntil */.R)(this._priv_stopCurrentContent$)).subscribe(function () {
      // start playback!
      playbackSubscription = playback$.connect();
    });
  }
  /**
   * Returns fatal error if one for the current content.
   * null otherwise.
   * @returns {Object|null} - The current Error (`null` when no error).
   */
  ;

  _proto.getError = function getError() {
    return this._priv_currentError;
  }
  /**
   * Returns manifest/playlist object.
   * null if the player is STOPPED.
   * @deprecated
   * @returns {Manifest|null} - The current Manifest (`null` when not known).
   */
  ;

  _proto.getManifest = function getManifest() {
    (0,warn_once/* default */.Z)("getManifest is deprecated." + " Please open an issue if you used this API.");

    if (this._priv_contentInfos === null) {
      return null;
    }

    return this._priv_contentInfos.manifest;
  }
  /**
   * Returns Adaptations (tracks) for every currently playing type
   * (audio/video/text...).
   * @deprecated
   * @returns {Object|null} - The current Adaptation objects, per type (`null`
   * when none is known for now.
   */
  ;

  _proto.getCurrentAdaptations = function getCurrentAdaptations() {
    (0,warn_once/* default */.Z)("getCurrentAdaptations is deprecated." + " Please open an issue if you used this API.");

    if (this._priv_contentInfos === null) {
      return null;
    }

    var _this$_priv_contentIn = this._priv_contentInfos,
        currentPeriod = _this$_priv_contentIn.currentPeriod,
        activeAdaptations = _this$_priv_contentIn.activeAdaptations;

    if (currentPeriod === null || activeAdaptations === null || (0,is_null_or_undefined/* default */.Z)(activeAdaptations[currentPeriod.id])) {
      return null;
    }

    return activeAdaptations[currentPeriod.id];
  }
  /**
   * Returns representations (qualities) for every currently playing type
   * (audio/video/text...).
   * @deprecated
   * @returns {Object|null} - The current Representation objects, per type
   * (`null` when none is known for now.
   */
  ;

  _proto.getCurrentRepresentations = function getCurrentRepresentations() {
    (0,warn_once/* default */.Z)("getCurrentRepresentations is deprecated." + " Please open an issue if you used this API.");
    return this._priv_getCurrentRepresentations();
  }
  /**
   * Returns the media DOM element used by the player.
   * You should not its HTML5 API directly and use the player's method instead,
   * to ensure a well-behaved player.
   * @returns {HTMLMediaElement|null} - The HTMLMediaElement used (`null` when
   * disposed)
   */
  ;

  _proto.getVideoElement = function getVideoElement() {
    return this.videoElement;
  }
  /**
   * If one returns the first native text-track element attached to the media element.
   * @deprecated
   * @returns {TextTrack} - The native TextTrack attached (`null` when none)
   */
  ;

  _proto.getNativeTextTrack = function getNativeTextTrack() {
    (0,warn_once/* default */.Z)("getNativeTextTrack is deprecated." + " Please open an issue if you used this API.");

    if (this.videoElement === null) {
      throw new Error("Disposed player");
    }

    var videoElement = this.videoElement;
    var textTracks = videoElement.textTracks;

    if (textTracks.length > 0) {
      return videoElement.textTracks[0];
    } else {
      return null;
    }
  }
  /**
   * Returns the player's current state.
   * @returns {string} - The current Player's state
   */
  ;

  _proto.getPlayerState = function getPlayerState() {
    return this.state;
  }
  /**
   * Returns true if both:
   *   - a content is loaded
   *   - the content loaded is a live content
   * @returns {Boolean} - `true` if we're playing a live content, `false` otherwise.
   */
  ;

  _proto.isLive = function isLive() {
    if (this._priv_contentInfos === null) {
      return false;
    }

    var _this$_priv_contentIn2 = this._priv_contentInfos,
        isDirectFile = _this$_priv_contentIn2.isDirectFile,
        manifest = _this$_priv_contentIn2.manifest;

    if (isDirectFile || manifest === null) {
      return false;
    }

    return manifest.isLive;
  }
  /**
   * Returns the url of the content's manifest
   * @returns {string|undefined} - Current URL. `undefined` if not known or no
   * URL yet.
   */
  ;

  _proto.getUrl = function getUrl() {
    if (this._priv_contentInfos === null) {
      return undefined;
    }

    var _this$_priv_contentIn3 = this._priv_contentInfos,
        isDirectFile = _this$_priv_contentIn3.isDirectFile,
        manifest = _this$_priv_contentIn3.manifest,
        url = _this$_priv_contentIn3.url;

    if (isDirectFile) {
      return url;
    }

    if (manifest !== null) {
      return manifest.getUrl();
    }

    return undefined;
  }
  /**
   * Returns the video duration, in seconds.
   * NaN if no video is playing.
   * @returns {Number}
   */
  ;

  _proto.getVideoDuration = function getVideoDuration() {
    if (this.videoElement === null) {
      throw new Error("Disposed player");
    }

    return this.videoElement.duration;
  }
  /**
   * Returns in seconds the difference between:
   *   - the end of the current contiguous loaded range.
   *   - the current time
   * @returns {Number}
   */
  ;

  _proto.getVideoBufferGap = function getVideoBufferGap() {
    if (this.videoElement === null) {
      throw new Error("Disposed player");
    }

    var videoElement = this.videoElement;
    return (0,ranges/* getLeftSizeOfRange */.L7)(videoElement.buffered, videoElement.currentTime);
  }
  /**
   * Returns in seconds the difference between:
   *   - the end of the current contiguous loaded range.
   *   - the start of the current contiguous loaded range.
   * @returns {Number}
   */
  ;

  _proto.getVideoLoadedTime = function getVideoLoadedTime() {
    if (this.videoElement === null) {
      throw new Error("Disposed player");
    }

    var videoElement = this.videoElement;
    return (0,ranges/* getSizeOfRange */.at)(videoElement.buffered, videoElement.currentTime);
  }
  /**
   * Returns in seconds the difference between:
   *   - the current time.
   *   - the start of the current contiguous loaded range.
   * @returns {Number}
   */
  ;

  _proto.getVideoPlayedTime = function getVideoPlayedTime() {
    if (this.videoElement === null) {
      throw new Error("Disposed player");
    }

    var videoElement = this.videoElement;
    return (0,ranges/* getPlayedSizeOfRange */.DD)(videoElement.buffered, videoElement.currentTime);
  }
  /**
   * Get the current position, in s, in wall-clock time.
   * That is:
   *   - for live content, get a timestamp, in s, of the current played content.
   *   - for static content, returns the position from beginning in s.
   *
   * If you do not know if you want to use this method or getPosition:
   *   - If what you want is to display the current time to the user, use this
   *     one.
   *   - If what you want is to interact with the player's API or perform other
   *     actions (like statistics) with the real player data, use getPosition.
   *
   * @returns {Number}
   */
  ;

  _proto.getWallClockTime = function getWallClockTime() {
    if (this.videoElement === null) {
      throw new Error("Disposed player");
    }

    if (this._priv_contentInfos === null) {
      return this.videoElement.currentTime;
    }

    var _this$_priv_contentIn4 = this._priv_contentInfos,
        isDirectFile = _this$_priv_contentIn4.isDirectFile,
        manifest = _this$_priv_contentIn4.manifest;

    if (isDirectFile) {
      return this.videoElement.currentTime;
    }

    if (manifest !== null) {
      var currentTime = this.videoElement.currentTime;
      var ast = manifest.availabilityStartTime !== undefined ? manifest.availabilityStartTime : 0;
      return currentTime + ast;
    }

    return 0;
  }
  /**
   * Get the current position, in seconds, of the video element.
   *
   * If you do not know if you want to use this method or getWallClockTime:
   *   - If what you want is to display the current time to the user, use
   *     getWallClockTime.
   *   - If what you want is to interact with the player's API or perform other
   *     actions (like statistics) with the real player data, use this one.
   *
   * @returns {Number}
   */
  ;

  _proto.getPosition = function getPosition() {
    if (this.videoElement === null) {
      throw new Error("Disposed player");
    }

    return this.videoElement.currentTime;
  }
  /**
   * Returns the current speed at which the video plays.
   * @returns {Number}
   */
  ;

  _proto.getPlaybackRate = function getPlaybackRate() {
    return this._priv_speed$.getValue();
  }
  /**
   * Update the playback rate of the video.
   * @param {Number} rate
   */
  ;

  _proto.setPlaybackRate = function setPlaybackRate(rate) {
    this._priv_speed$.next(rate);
  }
  /**
   * Returns all available bitrates for the current video Adaptation.
   * @returns {Array.<Number>}
   */
  ;

  _proto.getAvailableVideoBitrates = function getAvailableVideoBitrates() {
    if (this._priv_contentInfos === null) {
      return [];
    }

    var _this$_priv_contentIn5 = this._priv_contentInfos,
        currentPeriod = _this$_priv_contentIn5.currentPeriod,
        activeAdaptations = _this$_priv_contentIn5.activeAdaptations;

    if (currentPeriod === null || activeAdaptations === null) {
      return [];
    }

    var adaptations = activeAdaptations[currentPeriod.id];

    if (adaptations === undefined || (0,is_null_or_undefined/* default */.Z)(adaptations.video)) {
      return [];
    }

    return adaptations.video.getAvailableBitrates();
  }
  /**
   * Returns all available bitrates for the current audio Adaptation.
   * @returns {Array.<Number>}
   */
  ;

  _proto.getAvailableAudioBitrates = function getAvailableAudioBitrates() {
    if (this._priv_contentInfos === null) {
      return [];
    }

    var _this$_priv_contentIn6 = this._priv_contentInfos,
        currentPeriod = _this$_priv_contentIn6.currentPeriod,
        activeAdaptations = _this$_priv_contentIn6.activeAdaptations;

    if (currentPeriod === null || activeAdaptations === null) {
      return [];
    }

    var adaptations = activeAdaptations[currentPeriod.id];

    if (adaptations === undefined || (0,is_null_or_undefined/* default */.Z)(adaptations.audio)) {
      return [];
    }

    return adaptations.audio.getAvailableBitrates();
  }
  /**
   * Returns the manual audio bitrate set. -1 if in AUTO mode.
   * @returns {Number}
   */
  ;

  _proto.getManualAudioBitrate = function getManualAudioBitrate() {
    return this._priv_bitrateInfos.manualBitrates.audio.getValue();
  }
  /**
   * Returns the manual video bitrate set. -1 if in AUTO mode.
   * @returns {Number}
   */
  ;

  _proto.getManualVideoBitrate = function getManualVideoBitrate() {
    return this._priv_bitrateInfos.manualBitrates.video.getValue();
  }
  /**
   * Returns currently considered bitrate for video segments.
   * @returns {Number|undefined}
   */
  ;

  _proto.getVideoBitrate = function getVideoBitrate() {
    var representations = this._priv_getCurrentRepresentations();

    if (representations === null || (0,is_null_or_undefined/* default */.Z)(representations.video)) {
      return undefined;
    }

    return representations.video.bitrate;
  }
  /**
   * Returns currently considered bitrate for audio segments.
   * @returns {Number|undefined}
   */
  ;

  _proto.getAudioBitrate = function getAudioBitrate() {
    var representations = this._priv_getCurrentRepresentations();

    if (representations === null || (0,is_null_or_undefined/* default */.Z)(representations.audio)) {
      return undefined;
    }

    return representations.audio.bitrate;
  }
  /**
   * Returns minimum wanted video bitrate currently set.
   * @returns {Number}
   */
  ;

  _proto.getMinVideoBitrate = function getMinVideoBitrate() {
    return this._priv_bitrateInfos.minAutoBitrates.video.getValue();
  }
  /**
   * Returns minimum wanted audio bitrate currently set.
   * @returns {Number}
   */
  ;

  _proto.getMinAudioBitrate = function getMinAudioBitrate() {
    return this._priv_bitrateInfos.minAutoBitrates.audio.getValue();
  }
  /**
   * Returns maximum wanted video bitrate currently set.
   * @returns {Number}
   */
  ;

  _proto.getMaxVideoBitrate = function getMaxVideoBitrate() {
    return this._priv_bitrateInfos.maxAutoBitrates.video.getValue();
  }
  /**
   * Returns maximum wanted audio bitrate currently set.
   * @returns {Number}
   */
  ;

  _proto.getMaxAudioBitrate = function getMaxAudioBitrate() {
    return this._priv_bitrateInfos.maxAutoBitrates.audio.getValue();
  }
  /**
   * Play/Resume the current video.
   * @returns {Promise}
   */
  ;

  _proto.play = function play() {
    var _this3 = this;

    if (this.videoElement === null) {
      throw new Error("Disposed player");
    }

    var playPromise = this.videoElement.play();
    /* eslint-disable @typescript-eslint/unbound-method */

    if ((0,is_null_or_undefined/* default */.Z)(playPromise) || typeof playPromise["catch"] !== "function") {
      /* eslint-enable @typescript-eslint/unbound-method */
      return promise/* default.resolve */.Z.resolve();
    }

    return playPromise["catch"](function (error) {
      if (error.name === "NotAllowedError") {
        var warning = new media_error/* default */.Z("MEDIA_ERR_PLAY_NOT_ALLOWED", error.toString());

        _this3.trigger("warning", warning);
      }

      throw error;
    });
  }
  /**
   * Pause the current video.
   */
  ;

  _proto.pause = function pause() {
    if (this.videoElement === null) {
      throw new Error("Disposed player");
    }

    this.videoElement.pause();
  }
  /**
   * Seek to a given absolute position.
   * @param {Number|Object} time
   * @returns {Number} - The time the player has seek to
   */
  ;

  _proto.seekTo = function seekTo(time) {
    if (this.videoElement === null) {
      throw new Error("Disposed player");
    }

    if (this._priv_contentInfos === null) {
      throw new Error("player: no content loaded");
    }

    var _this$_priv_contentIn7 = this._priv_contentInfos,
        isDirectFile = _this$_priv_contentIn7.isDirectFile,
        manifest = _this$_priv_contentIn7.manifest;

    if (!isDirectFile && manifest === null) {
      throw new Error("player: the content did not load yet");
    }

    var positionWanted;

    if (typeof time === "number") {
      positionWanted = time;
    } else if (typeof time === "object") {
      var timeObj = time;
      var currentTs = this.videoElement.currentTime;

      if (!(0,is_null_or_undefined/* default */.Z)(timeObj.relative)) {
        positionWanted = currentTs + timeObj.relative;
      } else if (!(0,is_null_or_undefined/* default */.Z)(timeObj.position)) {
        positionWanted = timeObj.position;
      } else if (!(0,is_null_or_undefined/* default */.Z)(timeObj.wallClockTime)) {
        positionWanted = isDirectFile || manifest === null ? timeObj.wallClockTime : timeObj.wallClockTime - (manifest.availabilityStartTime !== undefined ? manifest.availabilityStartTime : 0);
      } else {
        throw new Error("invalid time object. You must set one of the " + "following properties: \"relative\", \"position\" or " + "\"wallClockTime\"");
      }
    }

    if (positionWanted === undefined) {
      throw new Error("invalid time given");
    }

    this.videoElement.currentTime = positionWanted;
    return positionWanted;
  }
  /**
   * Returns true if the media element is full screen.
   * @deprecated
   * @returns {Boolean}
   */
  ;

  _proto.isFullscreen = function isFullscreen() {
    (0,warn_once/* default */.Z)("isFullscreen is deprecated." + " Fullscreen management should now be managed by the application");
    return fullscreen_isFullscreen();
  }
  /**
   * Set/exit fullScreen.
   * @deprecated
   * @param {Boolean} [goFull=true] - if false, exit full screen.
   */
  ;

  _proto.setFullscreen = function setFullscreen(goFull) {
    if (goFull === void 0) {
      goFull = true;
    }

    (0,warn_once/* default */.Z)("setFullscreen is deprecated." + " Fullscreen management should now be managed by the application");

    if (this.videoElement === null) {
      throw new Error("Disposed player");
    }

    if (goFull) {
      requestFullscreen(this.videoElement);
    } else {
      fullscreen_exitFullscreen();
    }
  }
  /**
   * Exit from full screen mode.
   * @deprecated
   */
  ;

  _proto.exitFullscreen = function exitFullscreen() {
    (0,warn_once/* default */.Z)("exitFullscreen is deprecated." + " Fullscreen management should now be managed by the application");

    fullscreen_exitFullscreen();
  }
  /**
   * Returns the current player's audio volume on the media element.
   * From 0 (no audio) to 1 (maximum volume).
   * @returns {Number}
   */
  ;

  _proto.getVolume = function getVolume() {
    if (this.videoElement === null) {
      throw new Error("Disposed player");
    }

    return this.videoElement.volume;
  }
  /**
   * Set the player's audio volume. From 0 (no volume) to 1 (maximum volume).
   * @param {Number} volume
   */
  ;

  _proto.setVolume = function setVolume(volume) {
    if (this.videoElement === null) {
      throw new Error("Disposed player");
    }

    var videoElement = this.videoElement;

    if (volume !== videoElement.volume) {
      videoElement.volume = volume;
      this.trigger("volumeChange", volume);
    }
  }
  /**
   * Returns true if the volume is set to 0. false otherwise.
   * @returns {Boolean}
   */
  ;

  _proto.isMute = function isMute() {
    return this.getVolume() === 0;
  }
  /**
   * Set the volume to 0 and save current one for when unmuted.
   */
  ;

  _proto.mute = function mute() {
    this._priv_mutedMemory = this.getVolume();
    this.setVolume(0);
  }
  /**
   * Set the volume back to when it was when mute was last called.
   * If the volume was set to 0, set a default volume instead (see config).
   */
  ;

  _proto.unMute = function unMute() {
    var vol = this.getVolume();

    if (vol === 0) {
      this.setVolume(this._priv_mutedMemory === 0 ? DEFAULT_UNMUTED_VOLUME : this._priv_mutedMemory);
    }
  }
  /**
   * Force the video bitrate to a given value. Act as a ceil.
   * -1 to set it on AUTO Mode
   * @param {Number} btr
   */
  ;

  _proto.setVideoBitrate = function setVideoBitrate(btr) {
    this._priv_bitrateInfos.manualBitrates.video.next(btr);
  }
  /**
   * Force the audio bitrate to a given value. Act as a ceil.
   * -1 to set it on AUTO Mode
   * @param {Number} btr
   */
  ;

  _proto.setAudioBitrate = function setAudioBitrate(btr) {
    this._priv_bitrateInfos.manualBitrates.audio.next(btr);
  }
  /**
   * Update the minimum video bitrate the user can switch to.
   * @param {Number} btr
   */
  ;

  _proto.setMinVideoBitrate = function setMinVideoBitrate(btr) {
    var maxVideoBitrate = this._priv_bitrateInfos.maxAutoBitrates.video.getValue();

    if (btr > maxVideoBitrate) {
      throw new Error("Invalid minimum video bitrate given. " + ("Its value, \"" + btr + "\" is superior the current maximum ") + ("video birate, \"" + maxVideoBitrate + "\"."));
    }

    this._priv_bitrateInfos.minAutoBitrates.video.next(btr);
  }
  /**
   * Update the minimum audio bitrate the user can switch to.
   * @param {Number} btr
   */
  ;

  _proto.setMinAudioBitrate = function setMinAudioBitrate(btr) {
    var maxAudioBitrate = this._priv_bitrateInfos.maxAutoBitrates.audio.getValue();

    if (btr > maxAudioBitrate) {
      throw new Error("Invalid minimum audio bitrate given. " + ("Its value, \"" + btr + "\" is superior the current maximum ") + ("audio birate, \"" + maxAudioBitrate + "\"."));
    }

    this._priv_bitrateInfos.minAutoBitrates.audio.next(btr);
  }
  /**
   * Update the maximum video bitrate the user can switch to.
   * @param {Number} btr
   */
  ;

  _proto.setMaxVideoBitrate = function setMaxVideoBitrate(btr) {
    var minVideoBitrate = this._priv_bitrateInfos.minAutoBitrates.video.getValue();

    if (btr < minVideoBitrate) {
      throw new Error("Invalid maximum video bitrate given. " + ("Its value, \"" + btr + "\" is inferior the current minimum ") + ("video birate, \"" + minVideoBitrate + "\"."));
    }

    this._priv_bitrateInfos.maxAutoBitrates.video.next(btr);
  }
  /**
   * Update the maximum audio bitrate the user can switch to.
   * @param {Number} btr
   */
  ;

  _proto.setMaxAudioBitrate = function setMaxAudioBitrate(btr) {
    var minAudioBitrate = this._priv_bitrateInfos.minAutoBitrates.audio.getValue();

    if (btr < minAudioBitrate) {
      throw new Error("Invalid maximum audio bitrate given. " + ("Its value, \"" + btr + "\" is inferior the current minimum ") + ("audio birate, \"" + minAudioBitrate + "\"."));
    }

    this._priv_bitrateInfos.maxAutoBitrates.audio.next(btr);
  }
  /**
   * Set the max buffer size for the buffer behind the current position.
   * Every buffer data before will be removed.
   * @param {Number} depthInSeconds
   */
  ;

  _proto.setMaxBufferBehind = function setMaxBufferBehind(depthInSeconds) {
    this._priv_bufferOptions.maxBufferBehind$.next(depthInSeconds);
  }
  /**
   * Set the max buffer size for the buffer behind the current position.
   * Every buffer data before will be removed.
   * @param {Number} depthInSeconds
   */
  ;

  _proto.setMaxBufferAhead = function setMaxBufferAhead(depthInSeconds) {
    this._priv_bufferOptions.maxBufferAhead$.next(depthInSeconds);
  }
  /**
   * Set the max buffer size for the buffer ahead of the current position.
   * The player will stop downloading chunks when this size is reached.
   * @param {Number} sizeInSeconds
   */
  ;

  _proto.setWantedBufferAhead = function setWantedBufferAhead(sizeInSeconds) {
    this._priv_bufferOptions.wantedBufferAhead$.next(sizeInSeconds);
  }
  /**
   * Returns the max buffer size for the buffer behind the current position.
   * @returns {Number}
   */
  ;

  _proto.getMaxBufferBehind = function getMaxBufferBehind() {
    return this._priv_bufferOptions.maxBufferBehind$.getValue();
  }
  /**
   * Returns the max buffer size for the buffer behind the current position.
   * @returns {Number}
   */
  ;

  _proto.getMaxBufferAhead = function getMaxBufferAhead() {
    return this._priv_bufferOptions.maxBufferAhead$.getValue();
  }
  /**
   * Returns the max buffer size for the buffer ahead of the current position.
   * @returns {Number}
   */
  ;

  _proto.getWantedBufferAhead = function getWantedBufferAhead() {
    return this._priv_bufferOptions.wantedBufferAhead$.getValue();
  }
  /**
   * Returns type of current keysystem (e.g. playready, widevine) if the content
   * is encrypted. null otherwise.
   * @returns {string|null}
   */
  ;

  _proto.getCurrentKeySystem = function getCurrentKeySystem() {
    if (this.videoElement === null) {
      throw new Error("Disposed player");
    }

    return get_current_key_system_getCurrentKeySystem(this.videoElement);
  }
  /**
   * Returns every available audio tracks for the current Period.
   * @returns {Array.<Object>|null}
   */
  ;

  _proto.getAvailableAudioTracks = function getAvailableAudioTracks() {
    var _a, _b;

    if (this._priv_contentInfos === null) {
      return [];
    }

    var _this$_priv_contentIn8 = this._priv_contentInfos,
        currentPeriod = _this$_priv_contentIn8.currentPeriod,
        isDirectFile = _this$_priv_contentIn8.isDirectFile;

    if (isDirectFile) {
      return (_b = (_a = this._priv_mediaElementTrackChoiceManager) === null || _a === void 0 ? void 0 : _a.getAvailableAudioTracks()) !== null && _b !== void 0 ? _b : [];
    }

    if (this._priv_trackChoiceManager === null || currentPeriod === null) {
      return [];
    }

    return this._priv_trackChoiceManager.getAvailableAudioTracks(currentPeriod);
  }
  /**
   * Returns every available text tracks for the current Period.
   * @returns {Array.<Object>|null}
   */
  ;

  _proto.getAvailableTextTracks = function getAvailableTextTracks() {
    var _a, _b;

    if (this._priv_contentInfos === null) {
      return [];
    }

    var _this$_priv_contentIn9 = this._priv_contentInfos,
        currentPeriod = _this$_priv_contentIn9.currentPeriod,
        isDirectFile = _this$_priv_contentIn9.isDirectFile;

    if (isDirectFile) {
      return (_b = (_a = this._priv_mediaElementTrackChoiceManager) === null || _a === void 0 ? void 0 : _a.getAvailableTextTracks()) !== null && _b !== void 0 ? _b : [];
    }

    if (this._priv_trackChoiceManager === null || currentPeriod === null) {
      return [];
    }

    return this._priv_trackChoiceManager.getAvailableTextTracks(currentPeriod);
  }
  /**
   * Returns every available video tracks for the current Period.
   * @returns {Array.<Object>|null}
   */
  ;

  _proto.getAvailableVideoTracks = function getAvailableVideoTracks() {
    var _a, _b;

    if (this._priv_contentInfos === null) {
      return [];
    }

    var _this$_priv_contentIn10 = this._priv_contentInfos,
        currentPeriod = _this$_priv_contentIn10.currentPeriod,
        isDirectFile = _this$_priv_contentIn10.isDirectFile;

    if (isDirectFile) {
      return (_b = (_a = this._priv_mediaElementTrackChoiceManager) === null || _a === void 0 ? void 0 : _a.getAvailableVideoTracks()) !== null && _b !== void 0 ? _b : [];
    }

    if (this._priv_trackChoiceManager === null || currentPeriod === null) {
      return [];
    }

    return this._priv_trackChoiceManager.getAvailableVideoTracks(currentPeriod);
  }
  /**
   * Returns currently chosen audio language for the current Period.
   * @returns {string}
   */
  ;

  _proto.getAudioTrack = function getAudioTrack() {
    if (this._priv_contentInfos === null) {
      return undefined;
    }

    var _this$_priv_contentIn11 = this._priv_contentInfos,
        currentPeriod = _this$_priv_contentIn11.currentPeriod,
        isDirectFile = _this$_priv_contentIn11.isDirectFile;

    if (isDirectFile) {
      if (this._priv_mediaElementTrackChoiceManager === null) {
        return undefined;
      }

      return this._priv_mediaElementTrackChoiceManager.getChosenAudioTrack();
    }

    if (this._priv_trackChoiceManager === null || currentPeriod === null) {
      return undefined;
    }

    return this._priv_trackChoiceManager.getChosenAudioTrack(currentPeriod);
  }
  /**
   * Returns currently chosen subtitle for the current Period.
   * @returns {string}
   */
  ;

  _proto.getTextTrack = function getTextTrack() {
    if (this._priv_contentInfos === null) {
      return undefined;
    }

    var _this$_priv_contentIn12 = this._priv_contentInfos,
        currentPeriod = _this$_priv_contentIn12.currentPeriod,
        isDirectFile = _this$_priv_contentIn12.isDirectFile;

    if (isDirectFile) {
      if (this._priv_mediaElementTrackChoiceManager === null) {
        return undefined;
      }

      return this._priv_mediaElementTrackChoiceManager.getChosenTextTrack();
    }

    if (this._priv_trackChoiceManager === null || currentPeriod === null) {
      return undefined;
    }

    return this._priv_trackChoiceManager.getChosenTextTrack(currentPeriod);
  }
  /**
   * Returns currently chosen video track for the current Period.
   * @returns {string}
   */
  ;

  _proto.getVideoTrack = function getVideoTrack() {
    if (this._priv_contentInfos === null) {
      return undefined;
    }

    var _this$_priv_contentIn13 = this._priv_contentInfos,
        currentPeriod = _this$_priv_contentIn13.currentPeriod,
        isDirectFile = _this$_priv_contentIn13.isDirectFile;

    if (isDirectFile) {
      if (this._priv_mediaElementTrackChoiceManager === null) {
        return undefined;
      }

      return this._priv_mediaElementTrackChoiceManager.getChosenVideoTrack();
    }

    if (this._priv_trackChoiceManager === null || currentPeriod === null) {
      return undefined;
    }

    return this._priv_trackChoiceManager.getChosenVideoTrack(currentPeriod);
  }
  /**
   * Update the audio language for the current Period.
   * @param {string} audioId
   * @throws Error - the current content has no TrackChoiceManager.
   * @throws Error - the given id is linked to no audio track.
   */
  ;

  _proto.setAudioTrack = function setAudioTrack(audioId) {
    var _a;

    if (this._priv_contentInfos === null) {
      throw new Error("No content loaded");
    }

    var _this$_priv_contentIn14 = this._priv_contentInfos,
        currentPeriod = _this$_priv_contentIn14.currentPeriod,
        isDirectFile = _this$_priv_contentIn14.isDirectFile;

    if (isDirectFile) {
      try {
        (_a = this._priv_mediaElementTrackChoiceManager) === null || _a === void 0 ? void 0 : _a.setAudioTrackById(audioId);
        return;
      } catch (e) {
        throw new Error("player: unknown audio track");
      }
    }

    if (this._priv_trackChoiceManager === null || currentPeriod === null) {
      throw new Error("No compatible content launched.");
    }

    try {
      this._priv_trackChoiceManager.setAudioTrackByID(currentPeriod, audioId);
    } catch (e) {
      throw new Error("player: unknown audio track");
    }
  }
  /**
   * Update the text language for the current Period.
   * @param {string} sub
   * @throws Error - the current content has no TrackChoiceManager.
   * @throws Error - the given id is linked to no text track.
   */
  ;

  _proto.setTextTrack = function setTextTrack(textId) {
    var _a;

    if (this._priv_contentInfos === null) {
      throw new Error("No content loaded");
    }

    var _this$_priv_contentIn15 = this._priv_contentInfos,
        currentPeriod = _this$_priv_contentIn15.currentPeriod,
        isDirectFile = _this$_priv_contentIn15.isDirectFile;

    if (isDirectFile) {
      try {
        (_a = this._priv_mediaElementTrackChoiceManager) === null || _a === void 0 ? void 0 : _a.setTextTrackById(textId);
        return;
      } catch (e) {
        throw new Error("player: unknown text track");
      }
    }

    if (this._priv_trackChoiceManager === null || currentPeriod === null) {
      throw new Error("No compatible content launched.");
    }

    try {
      this._priv_trackChoiceManager.setTextTrackByID(currentPeriod, textId);
    } catch (e) {
      throw new Error("player: unknown text track");
    }
  }
  /**
   * Disable subtitles for the current content.
   */
  ;

  _proto.disableTextTrack = function disableTextTrack() {
    var _a;

    if (this._priv_contentInfos === null) {
      return;
    }

    var _this$_priv_contentIn16 = this._priv_contentInfos,
        currentPeriod = _this$_priv_contentIn16.currentPeriod,
        isDirectFile = _this$_priv_contentIn16.isDirectFile;

    if (isDirectFile) {
      (_a = this._priv_mediaElementTrackChoiceManager) === null || _a === void 0 ? void 0 : _a.disableTextTrack();
      return;
    }

    if (this._priv_trackChoiceManager === null || currentPeriod === null) {
      return;
    }

    return this._priv_trackChoiceManager.disableTextTrack(currentPeriod);
  }
  /**
   * Update the video track for the current Period.
   * @param {string} videoId
   * @throws Error - the current content has no TrackChoiceManager.
   * @throws Error - the given id is linked to no video track.
   */
  ;

  _proto.setVideoTrack = function setVideoTrack(videoId) {
    var _a;

    if (this._priv_contentInfos === null) {
      throw new Error("No content loaded");
    }

    var _this$_priv_contentIn17 = this._priv_contentInfos,
        currentPeriod = _this$_priv_contentIn17.currentPeriod,
        isDirectFile = _this$_priv_contentIn17.isDirectFile;

    if (isDirectFile) {
      try {
        (_a = this._priv_mediaElementTrackChoiceManager) === null || _a === void 0 ? void 0 : _a.setVideoTrackById(videoId);
        return;
      } catch (e) {
        throw new Error("player: unknown video track");
      }
    }

    if (this._priv_trackChoiceManager === null || currentPeriod === null) {
      throw new Error("No compatible content launched.");
    }

    try {
      this._priv_trackChoiceManager.setVideoTrackByID(currentPeriod, videoId);
    } catch (e) {
      throw new Error("player: unknown video track");
    }
  }
  /**
   * Disable video track for the current content.
   */
  ;

  _proto.disableVideoTrack = function disableVideoTrack() {
    if (this._priv_contentInfos === null) {
      return;
    }

    var _this$_priv_contentIn18 = this._priv_contentInfos,
        currentPeriod = _this$_priv_contentIn18.currentPeriod,
        isDirectFile = _this$_priv_contentIn18.isDirectFile;

    if (isDirectFile && this._priv_mediaElementTrackChoiceManager !== null) {
      return this._priv_mediaElementTrackChoiceManager.disableVideoTrack();
    }

    if (this._priv_trackChoiceManager === null || currentPeriod === null) {
      return;
    }

    return this._priv_trackChoiceManager.disableVideoTrack(currentPeriod);
  }
  /**
   * Returns the current list of preferred audio tracks, in preference order.
   * @returns {Array.<Object>}
   */
  ;

  _proto.getPreferredAudioTracks = function getPreferredAudioTracks() {
    return this._priv_preferredAudioTracks;
  }
  /**
   * Returns the current list of preferred text tracks, in preference order.
   * @returns {Array.<Object>}
   */
  ;

  _proto.getPreferredTextTracks = function getPreferredTextTracks() {
    return this._priv_preferredTextTracks;
  }
  /**
   * Returns the current list of preferred text tracks, in preference order.
   * @returns {Array.<Object>}
   */
  ;

  _proto.getPreferredVideoTracks = function getPreferredVideoTracks() {
    return this._priv_preferredVideoTracks;
  }
  /**
   * Set the list of preferred audio tracks, in preference order.
   * @param {Array.<Object>} tracks
   * @param {boolean} shouldApply - `true` if those preferences should be
   * applied on the currently loaded Period. `false` if it should only
   * be applied to new content.
   */
  ;

  _proto.setPreferredAudioTracks = function setPreferredAudioTracks(tracks, shouldApply) {
    if (shouldApply === void 0) {
      shouldApply = false;
    }

    if (!Array.isArray(tracks)) {
      throw new Error("Invalid `setPreferredAudioTracks` argument. " + "Should have been an Array.");
    }

    this._priv_preferredAudioTracks = tracks;

    if (this._priv_trackChoiceManager !== null) {
      this._priv_trackChoiceManager.setPreferredAudioTracks(tracks, shouldApply);
    } else if (this._priv_mediaElementTrackChoiceManager !== null) {
      this._priv_mediaElementTrackChoiceManager.setPreferredAudioTracks(tracks, shouldApply);
    }
  }
  /**
   * Set the list of preferred text tracks, in preference order.
   * @param {Array.<Object>} tracks
   * @param {boolean} shouldApply - `true` if those preferences should be
   * applied on the currently loaded Periods. `false` if it should only
   * be applied to new content.
   */
  ;

  _proto.setPreferredTextTracks = function setPreferredTextTracks(tracks, shouldApply) {
    if (shouldApply === void 0) {
      shouldApply = false;
    }

    if (!Array.isArray(tracks)) {
      throw new Error("Invalid `setPreferredTextTracks` argument. " + "Should have been an Array.");
    }

    this._priv_preferredTextTracks = tracks;

    if (this._priv_trackChoiceManager !== null) {
      this._priv_trackChoiceManager.setPreferredTextTracks(tracks, shouldApply);
    } else if (this._priv_mediaElementTrackChoiceManager !== null) {
      this._priv_mediaElementTrackChoiceManager.setPreferredTextTracks(tracks, shouldApply);
    }
  }
  /**
   * Set the list of preferred text tracks, in preference order.
   * @param {Array.<Object>} tracks
   * @param {boolean} shouldApply - `true` if those preferences should be
   * applied on the currently loaded Period. `false` if it should only
   * be applied to new content.
   */
  ;

  _proto.setPreferredVideoTracks = function setPreferredVideoTracks(tracks, shouldApply) {
    if (shouldApply === void 0) {
      shouldApply = false;
    }

    if (!Array.isArray(tracks)) {
      throw new Error("Invalid `setPreferredVideoTracks` argument. " + "Should have been an Array.");
    }

    this._priv_preferredVideoTracks = tracks;

    if (this._priv_trackChoiceManager !== null) {
      this._priv_trackChoiceManager.setPreferredVideoTracks(tracks, shouldApply);
    } else if (this._priv_mediaElementTrackChoiceManager !== null) {
      this._priv_mediaElementTrackChoiceManager.setPreferredVideoTracks(tracks, shouldApply);
    }
  }
  /**
   * @returns {Array.<Object>|null}
   * @deprecated
   */
  ;

  _proto.getImageTrackData = function getImageTrackData() {
    (0,warn_once/* default */.Z)("`getImageTrackData` is deprecated." + "Please use the `parseBifThumbnails` tool instead.");

    if (this._priv_contentInfos === null) {
      return null;
    }
    /* eslint-disable import/no-deprecated */


    return this._priv_contentInfos.thumbnails;
    /* eslint-enable import/no-deprecated */
  }
  /**
   * Get minimum seek-able position.
   * @returns {number}
   */
  ;

  _proto.getMinimumPosition = function getMinimumPosition() {
    if (this._priv_contentInfos === null) {
      return null;
    }

    if (this._priv_contentInfos.isDirectFile) {
      return 0;
    }

    var manifest = this._priv_contentInfos.manifest;

    if (manifest !== null) {
      return manifest.getMinimumPosition();
    }

    return null;
  }
  /**
   * Get maximum seek-able position.
   * @returns {number}
   */
  ;

  _proto.getMaximumPosition = function getMaximumPosition() {
    if (this._priv_contentInfos === null) {
      return null;
    }

    var _this$_priv_contentIn19 = this._priv_contentInfos,
        isDirectFile = _this$_priv_contentIn19.isDirectFile,
        manifest = _this$_priv_contentIn19.manifest;

    if (isDirectFile) {
      if (this.videoElement === null) {
        throw new Error("Disposed player");
      }

      return this.videoElement.duration;
    }

    if (manifest !== null) {
      return manifest.getMaximumPosition();
    }

    return null;
  }
  /**
   * /!\ For demo use only! Do not touch!
   *
   * Returns every chunk buffered for a given buffer type.
   * Returns `null` if no SegmentBuffer was created for this type of buffer.
   * @param {string} bufferType
   * @returns {Array.<Object>|null}
   */
  ;

  _proto.__priv_getSegmentBufferContent = function __priv_getSegmentBufferContent(bufferType) {
    if (this._priv_contentInfos === null || this._priv_contentInfos.segmentBuffersStore === null) {
      return null;
    }

    var segmentBufferStatus = this._priv_contentInfos.segmentBuffersStore.getStatus(bufferType);

    return segmentBufferStatus.type === "initialized" ? segmentBufferStatus.value.getInventory() : null;
  }
  /**
   * Reset all state properties relative to a playing content.
   */
  ;

  _proto._priv_cleanUpCurrentContentState = function _priv_cleanUpCurrentContentState() {
    var _this4 = this;

    var _a;

    log/* default.debug */.Z.debug("Locking `contentLock` to clean-up the current content."); // lock playback of new contents while cleaning up is pending

    this._priv_contentLock$.next(true);

    this._priv_contentInfos = null;
    this._priv_trackChoiceManager = null;
    (_a = this._priv_mediaElementTrackChoiceManager) === null || _a === void 0 ? void 0 : _a.dispose();
    this._priv_mediaElementTrackChoiceManager = null;
    this._priv_contentEventsMemory = {}; // EME cleaning

    var freeUpContentLock = function freeUpContentLock() {
      log/* default.debug */.Z.debug("Unlocking `contentLock`. Next content can begin.");

      _this4._priv_contentLock$.next(false);
    };

    if (!(0,is_null_or_undefined/* default */.Z)(this.videoElement)) {
      clearEMESession(this.videoElement).subscribe(noop/* default */.Z, function (err) {
        log/* default.error */.Z.error("API: An error arised when trying to clean-up the EME session:" + (err instanceof Error ? err.toString() : "Unknown Error"));
        freeUpContentLock();
      }, function () {
        log/* default.debug */.Z.debug("API: EME session cleaned-up with success!");
        freeUpContentLock();
      });
    } else {
      freeUpContentLock();
    }
  }
  /**
   * Triggered each time the playback Observable emits.
   *
   * React to various events.
   *
   * @param {Object} event - payload emitted
   */
  ;

  _proto._priv_onPlaybackEvent = function _priv_onPlaybackEvent(event) {
    switch (event.type) {
      case "stream-event":
        this.trigger("streamEvent", event.value);
        break;

      case "stream-event-skip":
        this.trigger("streamEventSkip", event.value);
        break;

      case "activePeriodChanged":
        this._priv_onActivePeriodChanged(event.value);

        break;

      case "periodStreamReady":
        this._priv_onPeriodStreamReady(event.value);

        break;

      case "periodStreamCleared":
        this._priv_onPeriodStreamCleared(event.value);

        break;

      case "reloading-media-source":
        this._priv_onReloadingMediaSource();

        break;

      case "representationChange":
        this._priv_onRepresentationChange(event.value);

        break;

      case "adaptationChange":
        this._priv_onAdaptationChange(event.value);

        break;

      case "bitrateEstimationChange":
        this._priv_onBitrateEstimationChange(event.value);

        break;

      case "manifestReady":
        this._priv_onManifestReady(event.value);

        break;

      case "warning":
        this._priv_onPlaybackWarning(event.value);

        break;

      case "loaded":
        if (this._priv_contentInfos === null) {
          log/* default.error */.Z.error("API: Loaded event while no content is loaded");
          return;
        }

        this._priv_contentInfos.segmentBuffersStore = event.value.segmentBuffersStore;
        break;

      case "decipherabilityUpdate":
        this.trigger("decipherabilityUpdate", event.value);
        break;

      case "added-segment":
        if (this._priv_contentInfos === null) {
          log/* default.error */.Z.error("API: Added segment while no content is loaded");
          return;
        } // Manage image tracks
        // @deprecated


        var _event$value = event.value,
            content = _event$value.content,
            segmentData = _event$value.segmentData;

        if (content.adaptation.type === "image") {
          if (!(0,is_null_or_undefined/* default */.Z)(segmentData) && segmentData.type === "bif") {
            var imageData = segmentData.data;
            /* eslint-disable import/no-deprecated */

            this._priv_contentInfos.thumbnails = imageData;
            this.trigger("imageTrackUpdate", {
              data: this._priv_contentInfos.thumbnails
            });
            /* eslint-enable import/no-deprecated */
          }
        }

    }
  }
  /**
   * Triggered when we received a fatal error.
   * Clean-up ressources and signal that the content has stopped on error.
   * @param {Error} error
   */
  ;

  _proto._priv_onPlaybackError = function _priv_onPlaybackError(error) {
    var formattedError = formatError(error, {
      defaultCode: "NONE",
      defaultReason: "An unknown error stopped content playback."
    });
    formattedError.fatal = true;

    this._priv_stopCurrentContent$.next();

    this._priv_cleanUpCurrentContentState();

    this._priv_currentError = formattedError;
    log/* default.error */.Z.error("API: The player stopped because of an error:", error);

    this._priv_setPlayerState(PLAYER_STATES.STOPPED); // TODO This condition is here because the eventual callback called when the
    // player state is updated can launch a new content, thus the error will not
    // be here anymore, in which case triggering the "error" event is unwanted.
    // This is very ugly though, and we should probable have a better solution


    if (this._priv_currentError === formattedError) {
      this.trigger("error", formattedError);
    }
  }
  /**
   * Triggered when the playback Observable completes.
   * Clean-up ressources and signal that the content has ended.
   */
  ;

  _proto._priv_onPlaybackFinished = function _priv_onPlaybackFinished() {
    log/* default.info */.Z.info("API: Previous playback finished. Stopping and cleaning-up...");

    this._priv_stopCurrentContent$.next();

    this._priv_cleanUpCurrentContentState();

    this._priv_setPlayerState(PLAYER_STATES.ENDED);
  }
  /**
   * Triggered when we received a warning event during playback.
   * Trigger the right API event.
   * @param {Error} error
   */
  ;

  _proto._priv_onPlaybackWarning = function _priv_onPlaybackWarning(error) {
    var formattedError = formatError(error, {
      defaultCode: "NONE",
      defaultReason: "An unknown error happened."
    });
    log/* default.warn */.Z.warn("API: Sending warning:", formattedError);
    this.trigger("warning", formattedError);
  }
  /**
   * Triggered when the Manifest has been loaded for the current content.
   * Initialize various private properties and emit initial event.
   * @param {Object} value
   */
  ;

  _proto._priv_onManifestReady = function _priv_onManifestReady(_ref2) {
    var _this5 = this;

    var manifest = _ref2.manifest;

    if (this._priv_contentInfos === null) {
      log/* default.error */.Z.error("API: The manifest is loaded but no content is.");
      return;
    }

    this._priv_contentInfos.manifest = manifest;
    this._priv_lastContentPlaybackInfos.manifest = manifest;
    var _this$_priv_contentIn20 = this._priv_contentInfos,
        initialAudioTrack = _this$_priv_contentIn20.initialAudioTrack,
        initialTextTrack = _this$_priv_contentIn20.initialTextTrack;
    this._priv_trackChoiceManager = new TrackChoiceManager();
    var preferredAudioTracks = initialAudioTrack === undefined ? this._priv_preferredAudioTracks : [initialAudioTrack];

    this._priv_trackChoiceManager.setPreferredAudioTracks(preferredAudioTracks, true);

    var preferredTextTracks = initialTextTrack === undefined ? this._priv_preferredTextTracks : [initialTextTrack];

    this._priv_trackChoiceManager.setPreferredTextTracks(preferredTextTracks, true);

    this._priv_trackChoiceManager.setPreferredVideoTracks(this._priv_preferredVideoTracks, true);

    (0,event_emitter/* fromEvent */.R)(manifest, "manifestUpdate").pipe((0,takeUntil/* takeUntil */.R)(this._priv_stopCurrentContent$)).subscribe(function () {
      // Update the tracks chosen if it changed
      if (_this5._priv_trackChoiceManager !== null) {
        _this5._priv_trackChoiceManager.update();
      }
    });
  }
  /**
   * Triggered each times the current Period Changed.
   * Store and emit initial state for the Period.
   *
   * @param {Object} value
   */
  ;

  _proto._priv_onActivePeriodChanged = function _priv_onActivePeriodChanged(_ref3) {
    var period = _ref3.period;

    var _a, _b, _c, _d, _e, _f;

    if (this._priv_contentInfos === null) {
      log/* default.error */.Z.error("API: The active period changed but no content is loaded");
      return;
    }

    this._priv_contentInfos.currentPeriod = period;

    if (this._priv_contentEventsMemory.periodChange !== period) {
      this._priv_contentEventsMemory.periodChange = period;
      this.trigger("periodChange", period);
    }

    this.trigger("availableAudioTracksChange", this.getAvailableAudioTracks());
    this.trigger("availableTextTracksChange", this.getAvailableTextTracks());
    this.trigger("availableVideoTracksChange", this.getAvailableVideoTracks()); // Emit intial events for the Period

    if (this._priv_trackChoiceManager !== null) {
      var audioTrack = this._priv_trackChoiceManager.getChosenAudioTrack(period);

      var textTrack = this._priv_trackChoiceManager.getChosenTextTrack(period);

      var videoTrack = this._priv_trackChoiceManager.getChosenVideoTrack(period);

      this.trigger("audioTrackChange", audioTrack);
      this.trigger("textTrackChange", textTrack);
      this.trigger("videoTrackChange", videoTrack);
    } else {
      this.trigger("audioTrackChange", null);
      this.trigger("textTrackChange", null);
      this.trigger("videoTrackChange", null);
    }

    this._priv_triggerAvailableBitratesChangeEvent("availableAudioBitratesChange", this.getAvailableAudioBitrates());

    this._priv_triggerAvailableBitratesChangeEvent("availableVideoBitratesChange", this.getAvailableVideoBitrates());

    var audioBitrate = (_c = (_b = (_a = this._priv_getCurrentRepresentations()) === null || _a === void 0 ? void 0 : _a.audio) === null || _b === void 0 ? void 0 : _b.bitrate) !== null && _c !== void 0 ? _c : -1;

    this._priv_triggerCurrentBitrateChangeEvent("audioBitrateChange", audioBitrate);

    var videoBitrate = (_f = (_e = (_d = this._priv_getCurrentRepresentations()) === null || _d === void 0 ? void 0 : _d.video) === null || _e === void 0 ? void 0 : _e.bitrate) !== null && _f !== void 0 ? _f : -1;

    this._priv_triggerCurrentBitrateChangeEvent("videoBitrateChange", videoBitrate);
  }
  /**
   * Triggered each times a new "PeriodStream" is ready.
   * Choose the right Adaptation for the Period and emit it.
   * @param {Object} value
   */
  ;

  _proto._priv_onPeriodStreamReady = function _priv_onPeriodStreamReady(value) {
    var type = value.type,
        period = value.period,
        adaptation$ = value.adaptation$;

    switch (type) {
      case "video":
        if (this._priv_trackChoiceManager === null) {
          log/* default.error */.Z.error("API: TrackChoiceManager not instanciated for a new video period");
          adaptation$.next(null);
        } else {
          this._priv_trackChoiceManager.addPeriod(type, period, adaptation$);

          this._priv_trackChoiceManager.setInitialVideoTrack(period);
        }

        break;

      case "audio":
        if (this._priv_trackChoiceManager === null) {
          log/* default.error */.Z.error("API: TrackChoiceManager not instanciated for a new " + type + " period");
          adaptation$.next(null);
        } else {
          this._priv_trackChoiceManager.addPeriod(type, period, adaptation$);

          this._priv_trackChoiceManager.setInitialAudioTrack(period);
        }

        break;

      case "text":
        if (this._priv_trackChoiceManager === null) {
          log/* default.error */.Z.error("API: TrackChoiceManager not instanciated for a new " + type + " period");
          adaptation$.next(null);
        } else {
          this._priv_trackChoiceManager.addPeriod(type, period, adaptation$);

          this._priv_trackChoiceManager.setInitialTextTrack(period);
        }

        break;

      default:
        var adaptations = period.adaptations[type];

        if (!(0,is_null_or_undefined/* default */.Z)(adaptations) && adaptations.length > 0) {
          adaptation$.next(adaptations[0]);
        } else {
          adaptation$.next(null);
        }

        break;
    }
  }
  /**
   * Triggered each times we "remove" a PeriodStream.
   * @param {Object} value
   */
  ;

  _proto._priv_onPeriodStreamCleared = function _priv_onPeriodStreamCleared(value) {
    var type = value.type,
        period = value.period; // Clean-up track choice from TrackChoiceManager

    switch (type) {
      case "audio":
      case "text":
      case "video":
        if (this._priv_trackChoiceManager !== null) {
          this._priv_trackChoiceManager.removePeriod(type, period);
        }

        break;
    } // Clean-up stored Representation and Adaptation information


    if (this._priv_contentInfos === null) {
      return;
    }

    var _this$_priv_contentIn21 = this._priv_contentInfos,
        activeAdaptations = _this$_priv_contentIn21.activeAdaptations,
        activeRepresentations = _this$_priv_contentIn21.activeRepresentations;

    if (!(0,is_null_or_undefined/* default */.Z)(activeAdaptations) && !(0,is_null_or_undefined/* default */.Z)(activeAdaptations[period.id])) {
      var activePeriodAdaptations = activeAdaptations[period.id];
      delete activePeriodAdaptations[type];

      if (Object.keys(activePeriodAdaptations).length === 0) {
        delete activeAdaptations[period.id];
      }
    }

    if (!(0,is_null_or_undefined/* default */.Z)(activeRepresentations) && !(0,is_null_or_undefined/* default */.Z)(activeRepresentations[period.id])) {
      var activePeriodRepresentations = activeRepresentations[period.id];
      delete activePeriodRepresentations[type];

      if (Object.keys(activePeriodRepresentations).length === 0) {
        delete activeRepresentations[period.id];
      }
    }
  }
  /**
   * Triggered each time the content is re-loaded on the MediaSource.
   */
  ;

  _proto._priv_onReloadingMediaSource = function _priv_onReloadingMediaSource() {
    if (this._priv_contentInfos !== null) {
      this._priv_contentInfos.segmentBuffersStore = null;
    }

    if (this._priv_trackChoiceManager !== null) {
      this._priv_trackChoiceManager.resetPeriods();
    }
  }
  /**
   * Triggered each times a new Adaptation is considered for the current
   * content.
   * Store given Adaptation and emit it if from the current Period.
   * @param {Object} value
   */
  ;

  _proto._priv_onAdaptationChange = function _priv_onAdaptationChange(_ref4) {
    var type = _ref4.type,
        adaptation = _ref4.adaptation,
        period = _ref4.period;

    if (this._priv_contentInfos === null) {
      log/* default.error */.Z.error("API: The adaptations changed but no content is loaded");
      return;
    } // lazily create this._priv_contentInfos.activeAdaptations


    if (this._priv_contentInfos.activeAdaptations === null) {
      this._priv_contentInfos.activeAdaptations = {};
    }

    var _this$_priv_contentIn22 = this._priv_contentInfos,
        activeAdaptations = _this$_priv_contentIn22.activeAdaptations,
        currentPeriod = _this$_priv_contentIn22.currentPeriod;
    var activePeriodAdaptations = activeAdaptations[period.id];

    if ((0,is_null_or_undefined/* default */.Z)(activePeriodAdaptations)) {
      var _activeAdaptations$pe;

      activeAdaptations[period.id] = (_activeAdaptations$pe = {}, _activeAdaptations$pe[type] = adaptation, _activeAdaptations$pe);
    } else {
      activePeriodAdaptations[type] = adaptation;
    }

    if (this._priv_trackChoiceManager !== null && currentPeriod !== null && !(0,is_null_or_undefined/* default */.Z)(period) && period.id === currentPeriod.id) {
      switch (type) {
        case "audio":
          var audioTrack = this._priv_trackChoiceManager.getChosenAudioTrack(currentPeriod);

          this.trigger("audioTrackChange", audioTrack);
          var availableAudioBitrates = this.getAvailableAudioBitrates();

          this._priv_triggerAvailableBitratesChangeEvent("availableAudioBitratesChange", availableAudioBitrates);

          break;

        case "text":
          var textTrack = this._priv_trackChoiceManager.getChosenTextTrack(currentPeriod);

          this.trigger("textTrackChange", textTrack);
          break;

        case "video":
          var videoTrack = this._priv_trackChoiceManager.getChosenVideoTrack(currentPeriod);

          this.trigger("videoTrackChange", videoTrack);
          var availableVideoBitrates = this.getAvailableVideoBitrates();

          this._priv_triggerAvailableBitratesChangeEvent("availableVideoBitratesChange", availableVideoBitrates);

          break;
      }
    }
  }
  /**
   * Triggered each times a new Representation is considered during playback.
   *
   * Store given Representation and emit it if from the current Period.
   *
   * @param {Object} obj
   */
  ;

  _proto._priv_onRepresentationChange = function _priv_onRepresentationChange(_ref5) {
    var type = _ref5.type,
        period = _ref5.period,
        representation = _ref5.representation;

    var _a;

    if (this._priv_contentInfos === null) {
      log/* default.error */.Z.error("API: The representations changed but no content is loaded");
      return;
    } // lazily create this._priv_contentInfos.activeRepresentations


    if (this._priv_contentInfos.activeRepresentations === null) {
      this._priv_contentInfos.activeRepresentations = {};
    }

    var _this$_priv_contentIn23 = this._priv_contentInfos,
        activeRepresentations = _this$_priv_contentIn23.activeRepresentations,
        currentPeriod = _this$_priv_contentIn23.currentPeriod;
    var activePeriodRepresentations = activeRepresentations[period.id];

    if ((0,is_null_or_undefined/* default */.Z)(activePeriodRepresentations)) {
      var _activeRepresentation;

      activeRepresentations[period.id] = (_activeRepresentation = {}, _activeRepresentation[type] = representation, _activeRepresentation);
    } else {
      activePeriodRepresentations[type] = representation;
    }

    var bitrate = (_a = representation === null || representation === void 0 ? void 0 : representation.bitrate) !== null && _a !== void 0 ? _a : -1;

    if (!(0,is_null_or_undefined/* default */.Z)(period) && currentPeriod !== null && currentPeriod.id === period.id) {
      if (type === "video") {
        this._priv_triggerCurrentBitrateChangeEvent("videoBitrateChange", bitrate);
      } else if (type === "audio") {
        this._priv_triggerCurrentBitrateChangeEvent("audioBitrateChange", bitrate);
      }
    }
  }
  /**
   * Triggered each time a bitrate estimate is calculated.
   *
   * Emit it.
   *
   * @param {Object} value
   */
  ;

  _proto._priv_onBitrateEstimationChange = function _priv_onBitrateEstimationChange(_ref6) {
    var type = _ref6.type,
        bitrate = _ref6.bitrate;

    if (bitrate !== undefined) {
      this._priv_bitrateInfos.lastBitrates[type] = bitrate;
    }

    this.trigger("bitrateEstimationChange", {
      type: type,
      bitrate: bitrate
    });
  }
  /**
   * Triggered each time the videoElement alternates between play and pause.
   *
   * Emit the info through the right Subject.
   *
   * @param {Boolean} isPlaying
   */
  ;

  _proto._priv_onPlayPauseNext = function _priv_onPlayPauseNext(isPlaying) {
    if (this.videoElement === null) {
      throw new Error("Disposed player");
    }

    this._priv_playing$.next(isPlaying);
  }
  /**
   * Triggered each time a textTrack is added to the video DOM Element.
   *
   * Trigger the right Player Event.
   *
   * @param {Array.<TextTrackElement>} tracks
   */
  ;

  _proto._priv_onNativeTextTracksNext = function _priv_onNativeTextTracksNext(tracks) {
    this.trigger("nativeTextTracksChange", tracks);
  }
  /**
   * Triggered each time the player state updates.
   *
   * Trigger the right Player Event.
   *
   * @param {string} newState
   */
  ;

  _proto._priv_setPlayerState = function _priv_setPlayerState(newState) {
    if (this.state !== newState) {
      this.state = newState;
      log/* default.info */.Z.info("API: playerStateChange event", newState);
      this.trigger("playerStateChange", newState);
    }
  }
  /**
   * Triggered each time a new clock tick object is emitted.
   *
   * Trigger the right Player Event
   *
   * @param {Object} clockTick
   */
  ;

  _proto._priv_triggerPositionUpdate = function _priv_triggerPositionUpdate(clockTick) {
    var _a;

    if (this._priv_contentInfos === null) {
      log/* default.warn */.Z.warn("API: Cannot perform time update: no content loaded.");
      return;
    }

    if (this.state === PLAYER_STATES.RELOADING) {
      return;
    }

    var _this$_priv_contentIn24 = this._priv_contentInfos,
        isDirectFile = _this$_priv_contentIn24.isDirectFile,
        manifest = _this$_priv_contentIn24.manifest;

    if (!isDirectFile && manifest === null || (0,is_null_or_undefined/* default */.Z)(clockTick)) {
      return;
    }

    this._priv_lastContentPlaybackInfos.lastPlaybackPosition = clockTick.position;
    var maximumPosition = manifest !== null ? manifest.getMaximumPosition() : undefined;
    var positionData = {
      position: clockTick.position,
      duration: clockTick.duration,
      playbackRate: clockTick.playbackRate,
      maximumBufferTime: maximumPosition,
      // TODO fix higher up?
      bufferGap: isFinite(clockTick.bufferGap) ? clockTick.bufferGap : 0
    };

    if (manifest !== null && maximumPosition !== undefined && manifest.isLive && clockTick.position > 0) {
      var ast = (_a = manifest.availabilityStartTime) !== null && _a !== void 0 ? _a : 0;
      positionData.wallClockTime = clockTick.position + ast;
      positionData.liveGap = maximumPosition - clockTick.position;
    }

    this.trigger("positionUpdate", positionData);
  }
  /**
   * Trigger one of the "availableBitratesChange" event only if it changed from
   * the previously stored value.
   * @param {string} event
   * @param {Array.<number>} newVal
   */
  ;

  _proto._priv_triggerAvailableBitratesChangeEvent = function _priv_triggerAvailableBitratesChangeEvent(event, newVal) {
    var prevVal = this._priv_contentEventsMemory[event];

    if (prevVal === undefined || (0,are_arrays_of_numbers_equal/* default */.Z)(newVal, prevVal)) {
      this._priv_contentEventsMemory[event] = newVal;
      this.trigger(event, newVal);
    }
  }
  /**
   * Trigger one of the "bitrateChange" event only if it changed from the
   * previously stored value.
   * @param {string} event
   * @param {number} newVal
   */
  ;

  _proto._priv_triggerCurrentBitrateChangeEvent = function _priv_triggerCurrentBitrateChangeEvent(event, newVal) {
    if (newVal !== this._priv_contentEventsMemory[event]) {
      this._priv_contentEventsMemory[event] = newVal;
      this.trigger(event, newVal);
    }
  };

  _proto._priv_getCurrentRepresentations = function _priv_getCurrentRepresentations() {
    if (this._priv_contentInfos === null) {
      return null;
    }

    var _this$_priv_contentIn25 = this._priv_contentInfos,
        currentPeriod = _this$_priv_contentIn25.currentPeriod,
        activeRepresentations = _this$_priv_contentIn25.activeRepresentations;

    if (currentPeriod === null || activeRepresentations === null || (0,is_null_or_undefined/* default */.Z)(activeRepresentations[currentPeriod.id])) {
      return null;
    }

    return activeRepresentations[currentPeriod.id];
  };

  createClass_default()(Player, null, [{
    key: "ErrorTypes",
    get: function get() {
      return error_codes/* ErrorTypes */.ZB;
    }
    /** All possible Error codes emitted by the RxPlayer. */

  }, {
    key: "ErrorCodes",
    get: function get() {
      return error_codes/* ErrorCodes */.SM;
    }
    /**
     * Current log level.
     * Update current log level.
     * Should be either (by verbosity ascending):
     *   - "NONE"
     *   - "ERROR"
     *   - "WARNING"
     *   - "INFO"
     *   - "DEBUG"
     * Any other value will be translated to "NONE".
     */

  }, {
    key: "LogLevel",
    get: function get() {
      return log/* default.getLevel */.Z.getLevel();
    },
    set: function set(logLevel) {
      log/* default.setLevel */.Z.setLevel(logLevel);
    }
  }]);

  return Player;
}(event_emitter/* default */.Z);

Player.version =
/* PLAYER_VERSION */
"3.23.1";
/* harmony default export */ const public_api = (Player);
;// CONCATENATED MODULE: ./src/core/api/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* harmony default export */ const api = (public_api);
// EXTERNAL MODULE: ./src/features/features_object.ts
var features_object = __webpack_require__(7273);
;// CONCATENATED MODULE: ./src/features/initialize_features.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint-disable @typescript-eslint/no-unsafe-assignment */

/* eslint-disable @typescript-eslint/no-unsafe-member-access */

/* eslint-disable @typescript-eslint/no-var-requires */

/**
 * Selects the features to include based on environment variables.
 *
 * @param {Object} features
 */

function initializeFeaturesObject() {
  if (true) {
    features_object/* default.emeManager */.Z.emeManager = __webpack_require__(8745)/* .default */ .ZP;
  }

  if (true) {
    features_object/* default.imageBuffer */.Z.imageBuffer = __webpack_require__(7127)/* .default */ .Z;
    features_object/* default.imageParser */.Z.imageParser = __webpack_require__(3203)/* .default */ .Z;
  } // Feature switching the Native TextTrack implementation


  var HAS_NATIVE_MODE =  true || 0;

  if (true) {
    features_object/* default.transports.smooth */.Z.transports.smooth = __webpack_require__(2339)/* .default */ .Z;
  }

  if (true) {
    features_object/* default.transports.dash */.Z.transports.dash = __webpack_require__(1459)/* .default */ .Z;
  }

  if (false) {}

  if (false) {}

  if (HAS_NATIVE_MODE) {
    features_object/* default.nativeTextTracksBuffer */.Z.nativeTextTracksBuffer = __webpack_require__(9059)/* .default */ .Z;

    if (true) {
      features_object/* default.nativeTextTracksParsers.vtt */.Z.nativeTextTracksParsers.vtt = __webpack_require__(9405)/* .default */ .Z;
    }

    if (true) {
      features_object/* default.nativeTextTracksParsers.ttml */.Z.nativeTextTracksParsers.ttml = __webpack_require__(1570)/* .default */ .Z;
    }

    if (true) {
      features_object/* default.nativeTextTracksParsers.sami */.Z.nativeTextTracksParsers.sami = __webpack_require__(1812)/* .default */ .Z;
    }

    if (true) {
      features_object/* default.nativeTextTracksParsers.srt */.Z.nativeTextTracksParsers.srt = __webpack_require__(8057)/* .default */ .Z;
    }
  } // Feature switching the HTML TextTrack implementation


  var HAS_HTML_MODE =  true || 0;

  if (HAS_HTML_MODE) {
    features_object/* default.htmlTextTracksBuffer */.Z.htmlTextTracksBuffer = __webpack_require__(5192)/* .default */ .Z;

    if (true) {
      features_object/* default.htmlTextTracksParsers.sami */.Z.htmlTextTracksParsers.sami = __webpack_require__(5734)/* .default */ .Z;
    }

    if (true) {
      features_object/* default.htmlTextTracksParsers.ttml */.Z.htmlTextTracksParsers.ttml = __webpack_require__(7439)/* .default */ .Z;
    }

    if (true) {
      features_object/* default.htmlTextTracksParsers.srt */.Z.htmlTextTracksParsers.srt = __webpack_require__(8675)/* .default */ .Z;
    }

    if (true) {
      features_object/* default.htmlTextTracksParsers.vtt */.Z.htmlTextTracksParsers.vtt = __webpack_require__(4099)/* .default */ .Z;
    }
  }

  if (true) {
    var initDirectFile = __webpack_require__(8969)/* .default */ .Z;

    var mediaElementTrackChoiceManager = __webpack_require__(7794)/* .default */ .Z;

    features_object/* default.directfile */.Z.directfile = {
      initDirectFile: initDirectFile,
      mediaElementTrackChoiceManager: mediaElementTrackChoiceManager
    };
  }
}
;// CONCATENATED MODULE: ./src/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This file exports a Player class with a default feature set (depends on the
 * environment variables set at build).
 *
 * This is the class used from a regular build.
 */


 // set initial features according to environment variables

initializeFeaturesObject();

if (false) {}

/* harmony default export */ const src = (api);

/***/ }),

/***/ 3887:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Z": () => /* binding */ log
});

// EXTERNAL MODULE: ./src/utils/noop.ts
var noop = __webpack_require__(8894);
;// CONCATENATED MODULE: ./src/utils/logger.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var DEFAULT_LOG_LEVEL = "NONE";
/**
 * Logger implementation.
 * @class Logger
 */

var Logger = /*#__PURE__*/function () {
  function Logger() {
    this.error = noop/* default */.Z;
    this.warn = noop/* default */.Z;
    this.info = noop/* default */.Z;
    this.debug = noop/* default */.Z;
    this._levels = {
      NONE: 0,
      ERROR: 1,
      WARNING: 2,
      INFO: 3,
      DEBUG: 4
    };
    this._currentLevel = DEFAULT_LOG_LEVEL;
  }
  /**
   * @param {string} levelStr
   */


  var _proto = Logger.prototype;

  _proto.setLevel = function setLevel(levelStr) {
    var level;
    var foundLevel = this._levels[levelStr];

    if (typeof foundLevel === "number") {
      level = foundLevel;
      this._currentLevel = levelStr;
    } else {
      // not found
      level = 0;
      this._currentLevel = "NONE";
    }
    /* eslint-disable no-invalid-this */

    /* eslint-disable no-console */


    this.error = level >= this._levels.ERROR ? console.error.bind(console) : noop/* default */.Z;
    this.warn = level >= this._levels.WARNING ? console.warn.bind(console) : noop/* default */.Z;
    this.info = level >= this._levels.INFO ? console.info.bind(console) : noop/* default */.Z;
    this.debug = level >= this._levels.DEBUG ? console.log.bind(console) : noop/* default */.Z;
    /* eslint-enable no-console */

    /* eslint-enable no-invalid-this */
  }
  /**
   * @returns {string}
   */
  ;

  _proto.getLevel = function getLevel() {
    return this._currentLevel;
  };

  return Logger;
}();


;// CONCATENATED MODULE: ./src/log.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 // create a logger specifically for the RxPlayer.

var logger = new Logger();
/* harmony default export */ const log = (logger);

/***/ }),

/***/ 5952:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ areSameContent
/* harmony export */ });
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Check if two contents are the same
 * @param {Object} content1
 * @param {Object} content2
 * @returns {boolean}
 */
function areSameContent(content1, content2) {
  return content1.segment.id === content2.segment.id && content1.representation.id === content2.representation.id && content1.adaptation.id === content2.adaptation.id && content1.period.id === content2.period.id;
}

/***/ }),

/***/ 1966:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "ZP": () => /* binding */ manifest
});

// UNUSED EXPORTS: Adaptation, Period, Representation, SUPPORTED_ADAPTATIONS_TYPE, StaticRepresentationIndex, areSameContent

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/inheritsLoose.js
var inheritsLoose = __webpack_require__(5354);
var inheritsLoose_default = /*#__PURE__*/__webpack_require__.n(inheritsLoose);
// EXTERNAL MODULE: ./src/utils/are_arrays_of_numbers_equal.ts
var are_arrays_of_numbers_equal = __webpack_require__(4791);
// EXTERNAL MODULE: ./src/utils/array_find.ts
var array_find = __webpack_require__(3274);
// EXTERNAL MODULE: ./src/utils/event_emitter.ts
var event_emitter = __webpack_require__(1959);
// EXTERNAL MODULE: ./src/utils/id_generator.ts
var id_generator = __webpack_require__(908);
// EXTERNAL MODULE: ./src/utils/warn_once.ts
var warn_once = __webpack_require__(8806);
// EXTERNAL MODULE: ./src/errors/media_error.ts
var media_error = __webpack_require__(3714);
// EXTERNAL MODULE: ./src/log.ts + 1 modules
var log = __webpack_require__(3887);
// EXTERNAL MODULE: ./src/utils/array_includes.ts
var array_includes = __webpack_require__(7714);
// EXTERNAL MODULE: ./src/utils/is_null_or_undefined.ts
var is_null_or_undefined = __webpack_require__(1946);
// EXTERNAL MODULE: ./src/utils/languages/index.ts
var languages = __webpack_require__(7829);
;// CONCATENATED MODULE: ./src/utils/uniq.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Uniq implementation by combining a filter and an indexOf.
 * @param {Array.<*>} arr
 * @returns {Array.<*>}
 */
function uniqFromFilter(arr) {
  return arr.filter(function (val, i, self) {
    return self.indexOf(val) === i;
  });
}
/**
 * Uniq implementation by using the Set browser API.
 * @param {Array.<*>} arr
 * @returns {Array.<*>}
 */


function uniqFromSet(arr) {
  return Array.from(new Set(arr));
}
/**
 * Returns the input array without duplicates values.
 * All values are unique.
 * @param {Array.<*>} arr
 * @returns {Array.<*>}
 */


/* harmony default export */ const uniq = (typeof window !== "undefined" && // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
typeof window.Set === "function" && typeof Array.from === "function" ? uniqFromSet : uniqFromFilter);

// EXTERNAL MODULE: ./src/compat/browser_compatibility_types.ts
var browser_compatibility_types = __webpack_require__(3774);
;// CONCATENATED MODULE: ./src/compat/is_codec_supported.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns true if the given codec is supported by the browser's MediaSource
 * implementation.
 * @param {string} mimeType - The MIME media type that you want to test support
 * for in the current browser.
 * This may include the codecs parameter to provide added details about the
 * codecs used within the file.
 * @returns {Boolean}
 */

function isCodecSupported(mimeType) {
  if (browser_compatibility_types/* MediaSource_ */.JJ == null) {
    return false;
  }
  /* eslint-disable @typescript-eslint/unbound-method */


  if (typeof browser_compatibility_types/* MediaSource_.isTypeSupported */.JJ.isTypeSupported === "function") {
    /* eslint-enable @typescript-eslint/unbound-method */
    return browser_compatibility_types/* MediaSource_.isTypeSupported */.JJ.isTypeSupported(mimeType);
  }

  return true;
}
// EXTERNAL MODULE: ./src/utils/byte_parsing.ts
var byte_parsing = __webpack_require__(6968);
;// CONCATENATED MODULE: ./src/manifest/representation.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * Normalized Representation structure.
 * @class Representation
 */

var Representation = /*#__PURE__*/function () {
  /**
   * @param {Object} args
   */
  function Representation(args, opts) {
    this.id = args.id;
    this.bitrate = args.bitrate;
    this.codec = args.codecs;

    if (args.height != null) {
      this.height = args.height;
    }

    if (args.width != null) {
      this.width = args.width;
    }

    if (args.mimeType != null) {
      this.mimeType = args.mimeType;
    }

    if (args.contentProtections !== undefined) {
      this.contentProtections = args.contentProtections;
    }

    if (args.frameRate != null) {
      this.frameRate = args.frameRate;
    }

    this.index = args.index;
    this.isSupported = opts.type === "audio" || opts.type === "video" ? isCodecSupported(this.getMimeTypeString()) : true; // TODO for other types
  }
  /**
   * Returns "mime-type string" which includes both the mime-type and the codec,
   * which is often needed when interacting with the browser's APIs.
   * @returns {string}
   */


  var _proto = Representation.prototype;

  _proto.getMimeTypeString = function getMimeTypeString() {
    var _a, _b;

    return ((_a = this.mimeType) !== null && _a !== void 0 ? _a : "") + ";codecs=\"" + ((_b = this.codec) !== null && _b !== void 0 ? _b : "") + "\"";
  }
  /**
   * Returns every protection initialization data concatenated.
   * This data can then be used through the usual EME APIs.
   * `null` if this Representation has no detected protection initialization
   * data.
   * @returns {Array.<Object>|null}
   */
  ;

  _proto.getProtectionsInitializationData = function getProtectionsInitializationData() {
    var contentProtections = this.contentProtections;

    if (contentProtections === undefined) {
      return [];
    }

    return Object.keys(contentProtections.initData).reduce(function (acc, initDataType) {
      var initDataArr = contentProtections.initData[initDataType];

      if (initDataArr === undefined || initDataArr.length === 0) {
        return acc;
      }

      var initData = byte_parsing/* concat.apply */.zo.apply(void 0, initDataArr.map(function (_ref) {
        var data = _ref.data;
        return data;
      }));
      acc.push({
        type: initDataType,
        data: initData
      });
      return acc;
    }, []);
  }
  /**
   * Add protection data to the Representation to be able to properly blacklist
   * it if that data is.
   * /!\ Mutates the current Representation
   * @param {string} initDataArr
   * @param {string} systemId
   * @param {Uint8Array} data
   */
  ;

  _proto._addProtectionData = function _addProtectionData(initDataType, systemId, data) {
    var newElement = {
      systemId: systemId,
      data: data
    };

    if (this.contentProtections === undefined) {
      var _initData;

      this.contentProtections = {
        keyIds: [],
        initData: (_initData = {}, _initData[initDataType] = [newElement], _initData)
      };
      return;
    }

    var initDataArr = this.contentProtections.initData[initDataType];

    if (initDataArr === undefined) {
      this.contentProtections.initData[initDataType] = [newElement];
      return;
    }

    for (var i = initDataArr.length - 1; i >= 0; i--) {
      if (initDataArr[i].systemId === systemId) {
        if ((0,are_arrays_of_numbers_equal/* default */.Z)(initDataArr[i].data, data)) {
          return;
        }

        log/* default.warn */.Z.warn("Manifest: Two PSSH for the same system ID");
      }
    }

    initDataArr.push(newElement);
  };

  return Representation;
}();

/* harmony default export */ const manifest_representation = (Representation);
;// CONCATENATED MODULE: ./src/manifest/adaptation.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */








/** List in an array every possible value for the Adaptation's `type` property. */

var SUPPORTED_ADAPTATIONS_TYPE = ["audio", "video", "text", "image"];
/**
 * Returns true if the given Adaptation's `type` is a valid `type` property.
 * @param {string} adaptationType
 * @returns {boolean}
 */

function isSupportedAdaptationType(adaptationType) {
  return (0,array_includes/* default */.Z)(SUPPORTED_ADAPTATIONS_TYPE, adaptationType);
}
/**
 * Normalized Adaptation structure.
 * An Adaptation describes a single `Track`. For example a specific audio
 * track (in a given language) or a specific video track.
 * It istelf can be represented in different qualities, which we call here
 * `Representation`.
 * @class Adaptation
 */


var Adaptation = /*#__PURE__*/function () {
  /**
   * @constructor
   * @param {Object} parsedAdaptation
   * @param {Object|undefined} [options]
   */
  function Adaptation(parsedAdaptation, options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        representationFilter = _options.representationFilter,
        isManuallyAdded = _options.isManuallyAdded;
    this.parsingErrors = [];
    this.id = parsedAdaptation.id;

    if (!isSupportedAdaptationType(parsedAdaptation.type)) {
      log/* default.info */.Z.info("Manifest: Not supported adaptation type", parsedAdaptation.type);
      /* eslint-disable @typescript-eslint/restrict-template-expressions */

      throw new media_error/* default */.Z("MANIFEST_UNSUPPORTED_ADAPTATION_TYPE", "\"" + parsedAdaptation.type + "\" is not a valid " + "Adaptation type.");
      /* eslint-enable @typescript-eslint/restrict-template-expressions */
    }

    this.type = parsedAdaptation.type;

    if (parsedAdaptation.language !== undefined) {
      this.language = parsedAdaptation.language;
      this.normalizedLanguage = (0,languages/* default */.ZP)(parsedAdaptation.language);
    }

    if (parsedAdaptation.closedCaption !== undefined) {
      this.isClosedCaption = parsedAdaptation.closedCaption;
    }

    if (parsedAdaptation.audioDescription !== undefined) {
      this.isAudioDescription = parsedAdaptation.audioDescription;
    }

    if (parsedAdaptation.isDub !== undefined) {
      this.isDub = parsedAdaptation.isDub;
    }

    if (parsedAdaptation.isSignInterpreted !== undefined) {
      this.isSignInterpreted = parsedAdaptation.isSignInterpreted;
    }

    var argsRepresentations = parsedAdaptation.representations;
    var representations = [];
    var decipherable = false;
    var isSupported = false;

    for (var i = 0; i < argsRepresentations.length; i++) {
      var representation = new manifest_representation(argsRepresentations[i], {
        type: this.type
      });
      var shouldAdd = (0,is_null_or_undefined/* default */.Z)(representationFilter) || representationFilter(representation, {
        bufferType: this.type,
        language: this.language,
        normalizedLanguage: this.normalizedLanguage,
        isClosedCaption: this.isClosedCaption,
        isDub: this.isDub,
        isAudioDescription: this.isAudioDescription,
        isSignInterpreted: this.isSignInterpreted
      });

      if (shouldAdd) {
        representations.push(representation);

        if (decipherable === false && representation.decipherable !== false) {
          decipherable = representation.decipherable;
        }

        if (!isSupported && representation.isSupported) {
          isSupported = true;
        }
      }
    }

    representations.sort(function (a, b) {
      return a.bitrate - b.bitrate;
    });
    this.representations = representations;
    this.decipherable = decipherable;
    this.isSupported = isSupported; // for manuallyAdded adaptations (not in the manifest)

    this.manuallyAdded = isManuallyAdded === true;

    if (this.representations.length > 0 && !isSupported) {
      log/* default.warn */.Z.warn("Incompatible codecs for adaptation", parsedAdaptation);
      var error = new media_error/* default */.Z("MANIFEST_INCOMPATIBLE_CODECS_ERROR", "An Adaptation contains only incompatible codecs.");
      this.parsingErrors.push(error);
    }
  }
  /**
   * Returns unique bitrate for every Representation in this Adaptation.
   * @returns {Array.<Number>}
   */


  var _proto = Adaptation.prototype;

  _proto.getAvailableBitrates = function getAvailableBitrates() {
    var bitrates = [];

    for (var i = 0; i < this.representations.length; i++) {
      var representation = this.representations[i];

      if (representation.decipherable !== false) {
        bitrates.push(representation.bitrate);
      }
    }

    return uniq(bitrates);
  }
  /**
   * Returns all Representation in this Adaptation that can be played (that is:
   * not undecipherable and with a supported codec).
   * @returns {Array.<Representation>}
   */
  ;

  _proto.getPlayableRepresentations = function getPlayableRepresentations() {
    return this.representations.filter(function (rep) {
      return rep.isSupported && rep.decipherable !== false;
    });
  }
  /**
   * Returns the Representation linked to the given ID.
   * @param {number|string} wantedId
   * @returns {Object|undefined}
   */
  ;

  _proto.getRepresentation = function getRepresentation(wantedId) {
    return (0,array_find/* default */.Z)(this.representations, function (_ref) {
      var id = _ref.id;
      return wantedId === id;
    });
  };

  return Adaptation;
}();


// EXTERNAL MODULE: ./src/errors/is_known_error.ts
var is_known_error = __webpack_require__(9822);
// EXTERNAL MODULE: ./src/utils/object_values.ts
var object_values = __webpack_require__(1679);
;// CONCATENATED MODULE: ./src/manifest/period.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * Class representing the tracks and qualities available from a given time
 * period in the the Manifest.
 * @class Period
 */

var Period = /*#__PURE__*/function () {
  /**
   * @constructor
   * @param {Object} args
   * @param {function|undefined} [representationFilter]
   */
  function Period(args, representationFilter) {
    var _this = this;

    this.parsingErrors = [];
    this.id = args.id;
    this.adaptations = Object.keys(args.adaptations).reduce(function (acc, type) {
      var adaptationsForType = args.adaptations[type];

      if (adaptationsForType == null) {
        return acc;
      }

      var filteredAdaptations = adaptationsForType.map(function (adaptation) {
        var _this$parsingErrors;

        var newAdaptation = null;

        try {
          newAdaptation = new Adaptation(adaptation, {
            representationFilter: representationFilter
          });
        } catch (err) {
          if ((0,is_known_error/* default */.Z)(err) && err.code === "MANIFEST_UNSUPPORTED_ADAPTATION_TYPE") {
            _this.parsingErrors.push(err);

            return null;
          }

          throw err;
        }

        (_this$parsingErrors = _this.parsingErrors).push.apply(_this$parsingErrors, newAdaptation.parsingErrors);

        return newAdaptation;
      }).filter(function (adaptation) {
        return adaptation !== null && adaptation.representations.length > 0;
      });

      if (filteredAdaptations.every(function (adaptation) {
        return !adaptation.isSupported;
      }) && adaptationsForType.length > 0 && (type === "video" || type === "audio")) {
        throw new media_error/* default */.Z("MANIFEST_PARSE_ERROR", "No supported " + type + " adaptations");
      }

      if (filteredAdaptations.length > 0) {
        acc[type] = filteredAdaptations;
      }

      return acc;
    }, {});

    if (!Array.isArray(this.adaptations.video) && !Array.isArray(this.adaptations.audio)) {
      throw new media_error/* default */.Z("MANIFEST_PARSE_ERROR", "No supported audio and video tracks.");
    }

    this.duration = args.duration;
    this.start = args.start;

    if (this.duration != null && this.start != null) {
      this.end = this.start + this.duration;
    }

    this.streamEvents = args.streamEvents === undefined ? [] : args.streamEvents;
  }
  /**
   * Returns every `Adaptations` (or `tracks`) linked to that Period, in an
   * Array.
   * @returns {Array.<Object>}
   */


  var _proto = Period.prototype;

  _proto.getAdaptations = function getAdaptations() {
    var adaptationsByType = this.adaptations;
    return (0,object_values/* default */.Z)(adaptationsByType).reduce( // Note: the second case cannot happen. TS is just being dumb here
    function (acc, adaptations) {
      return adaptations != null ? acc.concat(adaptations) : acc;
    }, []);
  }
  /**
   * Returns every `Adaptations` (or `tracks`) linked to that Period for a
   * given type.
   * @param {string} adaptationType
   * @returns {Array.<Object>}
   */
  ;

  _proto.getAdaptationsForType = function getAdaptationsForType(adaptationType) {
    var adaptationsForType = this.adaptations[adaptationType];
    return adaptationsForType == null ? [] : adaptationsForType;
  }
  /**
   * Returns the Adaptation linked to the given ID.
   * @param {number|string} wantedId
   * @returns {Object|undefined}
   */
  ;

  _proto.getAdaptation = function getAdaptation(wantedId) {
    return (0,array_find/* default */.Z)(this.getAdaptations(), function (_ref) {
      var id = _ref.id;
      return wantedId === id;
    });
  };

  _proto.getPlayableAdaptations = function getPlayableAdaptations(type) {
    if (type === undefined) {
      return this.getAdaptations().filter(function (ada) {
        return ada.isSupported && ada.decipherable !== false;
      });
    }

    var adaptationsForType = this.adaptations[type];

    if (adaptationsForType === undefined) {
      return [];
    }

    return adaptationsForType.filter(function (ada) {
      return ada.isSupported && ada.decipherable !== false;
    });
  };

  return Period;
}();


;// CONCATENATED MODULE: ./src/manifest/representation_index/static.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Simple RepresentationIndex implementation for static files.
 * @class StaticRepresentationIndex
 */

var StaticRepresentationIndex = /*#__PURE__*/function () {
  /**
   * @param {Object} infos
   */
  function StaticRepresentationIndex(infos) {
    this._mediaURLs = infos.media;
  }
  /**
   * Static contents do not have any initialization segments.
   * Just return null.
   * @returns {null}
   */


  var _proto = StaticRepresentationIndex.prototype;

  _proto.getInitSegment = function getInitSegment() {
    return null;
  }
  /**
   * Returns the only Segment available here.
   * @returns {Array.<Object>}
   */
  ;

  _proto.getSegments = function getSegments() {
    return [{
      id: "0",
      isInit: false,
      number: 0,
      mediaURLs: [this._mediaURLs],
      time: 0,
      end: Number.MAX_VALUE,
      duration: Number.MAX_VALUE,
      timescale: 1
    }];
  }
  /**
   * Returns first position in index.
   * @returns {undefined}
   */
  ;

  _proto.getFirstPosition = function getFirstPosition() {
    return;
  }
  /**
   * Returns last position in index.
   * @returns {undefined}
   */
  ;

  _proto.getLastPosition = function getLastPosition() {
    return;
  }
  /**
   * Returns false as a static file never need to be refreshed.
   * @returns {Boolean}
   */
  ;

  _proto.shouldRefresh = function shouldRefresh() {
    return false;
  }
  /**
   * @returns {null}
   */
  ;

  _proto.checkDiscontinuity = function checkDiscontinuity() {
    return null;
  }
  /**
   * @returns {boolean}
   */
  ;

  _proto.areSegmentsChronologicallyGenerated = function areSegmentsChronologicallyGenerated() {
    return true;
  }
  /**
   * Returns true as a static file should never need lose availability.
   * @returns {Boolean}
   */
  ;

  _proto.isSegmentStillAvailable = function isSegmentStillAvailable() {
    return true;
  }
  /**
   * @returns {Boolean}
   */
  ;

  _proto.canBeOutOfSyncError = function canBeOutOfSyncError() {
    return false;
  }
  /**
   * @returns {Boolean}
   */
  ;

  _proto.isFinished = function isFinished() {
    return true;
  }
  /**
   * @returns {Boolean}
   */
  ;

  _proto.isInitialized = function isInitialized() {
    return true;
  };

  _proto._replace = function _replace() {
    log/* default.warn */.Z.warn("Tried to replace a static RepresentationIndex");
  };

  _proto._update = function _update() {
    log/* default.warn */.Z.warn("Tried to update a static RepresentationIndex");
  };

  return StaticRepresentationIndex;
}();


;// CONCATENATED MODULE: ./src/manifest/types.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Enumerate the different ways a Manifest update can be done. */
var MANIFEST_UPDATE_TYPE;

(function (MANIFEST_UPDATE_TYPE) {
  /** The full version of the Manifest has been re-downloaded. */
  MANIFEST_UPDATE_TYPE[MANIFEST_UPDATE_TYPE["Full"] = 0] = "Full";
  /** Only a shortened version of the Manifest has been downloaded. */

  MANIFEST_UPDATE_TYPE[MANIFEST_UPDATE_TYPE["Partial"] = 1] = "Partial";
})(MANIFEST_UPDATE_TYPE || (MANIFEST_UPDATE_TYPE = {}));
// EXTERNAL MODULE: ./src/utils/array_find_index.ts
var array_find_index = __webpack_require__(5138);
;// CONCATENATED MODULE: ./src/manifest/update_period_in_place.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Update oldPeriod attributes with the one from newPeriod (e.g. when updating
 * the Manifest).
 * @param {Object} oldPeriod
 * @param {Object} newPeriod
 */

function updatePeriodInPlace(oldPeriod, newPeriod, updateType) {
  oldPeriod.start = newPeriod.start;
  oldPeriod.end = newPeriod.end;
  oldPeriod.duration = newPeriod.duration;
  var oldAdaptations = oldPeriod.getAdaptations();
  var newAdaptations = newPeriod.getAdaptations();

  var _loop = function _loop(j) {
    var oldAdaptation = oldAdaptations[j];
    var newAdaptation = (0,array_find/* default */.Z)(newAdaptations, function (a) {
      return a.id === oldAdaptation.id;
    });

    if (newAdaptation === undefined) {
      log/* default.warn */.Z.warn("Manifest: Adaptation \"" + oldAdaptations[j].id + "\" not found when merging.");
    } else {
      var oldRepresentations = oldAdaptations[j].representations;
      var newRepresentations = newAdaptation.representations;

      var _loop2 = function _loop2(k) {
        var oldRepresentation = oldRepresentations[k];
        var newRepresentation = (0,array_find/* default */.Z)(newRepresentations, function (representation) {
          return representation.id === oldRepresentation.id;
        });

        if (newRepresentation === undefined) {
          log/* default.warn */.Z.warn("Manifest: Representation \"" + oldRepresentations[k].id + "\" " + "not found when merging.");
        } else {
          if (updateType === MANIFEST_UPDATE_TYPE.Full) {
            oldRepresentation.index._replace(newRepresentation.index);
          } else {
            oldRepresentation.index._update(newRepresentation.index);
          }
        }
      };

      for (var k = 0; k < oldRepresentations.length; k++) {
        _loop2(k);
      }
    }
  };

  for (var j = 0; j < oldAdaptations.length; j++) {
    _loop(j);
  }
}
;// CONCATENATED MODULE: ./src/manifest/update_periods.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





/**
 * Update old periods by adding new periods and removing
 * not available ones.
 * @param {Array.<Object>} oldPeriods
 * @param {Array.<Object>} newPeriods
 */

function replacePeriods(oldPeriods, newPeriods) {
  var firstUnhandledPeriodIdx = 0;

  for (var i = 0; i < newPeriods.length; i++) {
    var newPeriod = newPeriods[i];
    var j = firstUnhandledPeriodIdx;
    var oldPeriod = oldPeriods[j];

    while (oldPeriod != null && oldPeriod.id !== newPeriod.id) {
      j++;
      oldPeriod = oldPeriods[j];
    }

    if (oldPeriod != null) {
      updatePeriodInPlace(oldPeriod, newPeriod, MANIFEST_UPDATE_TYPE.Full);
      var periodsToInclude = newPeriods.slice(firstUnhandledPeriodIdx, i);
      var nbrOfPeriodsToRemove = j - firstUnhandledPeriodIdx;
      oldPeriods.splice.apply(oldPeriods, [firstUnhandledPeriodIdx, nbrOfPeriodsToRemove].concat(periodsToInclude));
      firstUnhandledPeriodIdx = i + 1;
    }
  }

  if (firstUnhandledPeriodIdx > oldPeriods.length) {
    log/* default.error */.Z.error("Manifest: error when updating Periods");
    return;
  }

  if (firstUnhandledPeriodIdx < oldPeriods.length) {
    oldPeriods.splice(firstUnhandledPeriodIdx, oldPeriods.length - firstUnhandledPeriodIdx);
  }

  var remainingNewPeriods = newPeriods.slice(firstUnhandledPeriodIdx, newPeriods.length);

  if (remainingNewPeriods.length > 0) {
    oldPeriods.push.apply(oldPeriods, remainingNewPeriods);
  }
}
/**
 * Update old periods by adding new periods and removing
 * not available ones.
 * @param {Array.<Object>} oldPeriods
 * @param {Array.<Object>} newPeriods
 */

function updatePeriods(oldPeriods, newPeriods) {
  if (oldPeriods.length === 0) {
    oldPeriods.splice.apply(oldPeriods, [0, 0].concat(newPeriods));
    return;
  }

  if (newPeriods.length === 0) {
    return;
  }

  var oldLastPeriod = oldPeriods[oldPeriods.length - 1];

  if (oldLastPeriod.start < newPeriods[0].start) {
    if (oldLastPeriod.end !== newPeriods[0].start) {
      throw new media_error/* default */.Z("MANIFEST_UPDATE_ERROR", "Cannot perform partial update: not enough data");
    }

    oldPeriods.push.apply(oldPeriods, newPeriods);
    return;
  }

  var indexOfNewFirstPeriod = (0,array_find_index/* default */.Z)(oldPeriods, function (_ref) {
    var id = _ref.id;
    return id === newPeriods[0].id;
  });

  if (indexOfNewFirstPeriod < 0) {
    throw new media_error/* default */.Z("MANIFEST_UPDATE_ERROR", "Cannot perform partial update: incoherent data");
  } // The first updated Period can only be a partial part


  updatePeriodInPlace(oldPeriods[indexOfNewFirstPeriod], newPeriods[0], MANIFEST_UPDATE_TYPE.Partial);
  var prevIndexOfNewPeriod = indexOfNewFirstPeriod + 1;

  for (var i = 1; i < newPeriods.length; i++) {
    var newPeriod = newPeriods[i];
    var indexOfNewPeriod = -1;

    for (var j = prevIndexOfNewPeriod; j < oldPeriods.length; j++) {
      if (newPeriod.id === oldPeriods[j].id) {
        indexOfNewPeriod = j;
        break; // end the loop
      }
    }

    if (indexOfNewPeriod < 0) {
      oldPeriods.splice.apply(oldPeriods, [prevIndexOfNewPeriod, oldPeriods.length - prevIndexOfNewPeriod].concat(newPeriods.slice(i, newPeriods.length)));
      return;
    }

    if (indexOfNewPeriod > prevIndexOfNewPeriod) {
      oldPeriods.splice(prevIndexOfNewPeriod, indexOfNewPeriod - prevIndexOfNewPeriod);
      indexOfNewPeriod = prevIndexOfNewPeriod;
    } // Later Periods can be fully replaced


    updatePeriodInPlace(oldPeriods[indexOfNewPeriod], newPeriod, MANIFEST_UPDATE_TYPE.Full);
    prevIndexOfNewPeriod++;
  }

  if (prevIndexOfNewPeriod < oldPeriods.length) {
    oldPeriods.splice(prevIndexOfNewPeriod, oldPeriods.length - prevIndexOfNewPeriod);
  }
}
;// CONCATENATED MODULE: ./src/manifest/manifest.ts


/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */










var generateSupplementaryTrackID = (0,id_generator/* default */.Z)();
var generateNewManifestId = (0,id_generator/* default */.Z)();
/**
 * Normalized Manifest structure.
 *
 * Details the current content being played:
 *   - the duration of the content
 *   - the available tracks
 *   - the available qualities
 *   - the segments defined in those qualities
 *   - ...
 * while staying agnostic of the transport protocol used (Smooth, DASH etc.).
 *
 * The Manifest and its contained information can evolve over time (like when
 * updating a dynamic manifest or when right management forbid some tracks from
 * being played).
 * To perform actions on those changes, any module using this Manifest can
 * listen to its sent events and react accordingly.
 *
 * @class Manifest
 */

var Manifest = /*#__PURE__*/function (_EventEmitter) {
  inheritsLoose_default()(Manifest, _EventEmitter);

  /**
   * Construct a Manifest instance from a parsed Manifest object (as returned by
   * Manifest parsers) and options.
   *
   * Some minor errors can arise during that construction. `this.parsingErrors`
   * will contain all such errors, in the order they have been encountered.
   * @param {Object} parsedManifest
   * @param {Object} options
   */
  function Manifest(parsedManifest, options) {
    var _this;

    var _a;

    _this = _EventEmitter.call(this) || this;
    var _options$supplementar = options.supplementaryTextTracks,
        supplementaryTextTracks = _options$supplementar === void 0 ? [] : _options$supplementar,
        _options$supplementar2 = options.supplementaryImageTracks,
        supplementaryImageTracks = _options$supplementar2 === void 0 ? [] : _options$supplementar2,
        representationFilter = options.representationFilter;
    _this.parsingErrors = [];
    _this.id = generateNewManifestId();
    _this.expired = (_a = parsedManifest.expired) !== null && _a !== void 0 ? _a : null;
    _this.transport = parsedManifest.transportType;
    _this.clockOffset = parsedManifest.clockOffset;
    _this.periods = parsedManifest.periods.map(function (parsedPeriod) {
      var _this$parsingErrors;

      var period = new Period(parsedPeriod, representationFilter);

      (_this$parsingErrors = _this.parsingErrors).push.apply(_this$parsingErrors, period.parsingErrors);

      return period;
    }).sort(function (a, b) {
      return a.start - b.start;
    });
    /**
     * @deprecated It is here to ensure compatibility with the way the
     * v3.x.x manages adaptations at the Manifest level
     */

    /* eslint-disable import/no-deprecated */

    _this.adaptations = _this.periods[0] === undefined ? {} : _this.periods[0].adaptations;
    /* eslint-enable import/no-deprecated */

    _this._timeBounds = parsedManifest.timeBounds;
    _this.isDynamic = parsedManifest.isDynamic;
    _this.isLive = parsedManifest.isLive;
    _this.uris = parsedManifest.uris === undefined ? [] : parsedManifest.uris;
    _this.lifetime = parsedManifest.lifetime;
    _this.suggestedPresentationDelay = parsedManifest.suggestedPresentationDelay;
    _this.availabilityStartTime = parsedManifest.availabilityStartTime;

    if (supplementaryImageTracks.length > 0) {
      _this._addSupplementaryImageAdaptations(supplementaryImageTracks);
    }

    if (supplementaryTextTracks.length > 0) {
      _this._addSupplementaryTextAdaptations(supplementaryTextTracks);
    }

    return _this;
  }
  /**
   * Returns the Period corresponding to the given `id`.
   * Returns `undefined` if there is none.
   * @param {string} id
   * @returns {Object|undefined}
   */


  var _proto = Manifest.prototype;

  _proto.getPeriod = function getPeriod(id) {
    return (0,array_find/* default */.Z)(this.periods, function (period) {
      return id === period.id;
    });
  }
  /**
   * Returns the Period encountered at the given time.
   * Returns `undefined` if there is no Period exactly at the given time.
   * @param {number} time
   * @returns {Object|undefined}
   */
  ;

  _proto.getPeriodForTime = function getPeriodForTime(time) {
    return (0,array_find/* default */.Z)(this.periods, function (period) {
      return time >= period.start && (period.end === undefined || period.end > time);
    });
  }
  /**
   * Returns the first Period starting strictly after the given time.
   * Returns `undefined` if there is no Period starting after that time.
   * @param {number} time
   * @returns {Object|undefined}
   */
  ;

  _proto.getNextPeriod = function getNextPeriod(time) {
    return (0,array_find/* default */.Z)(this.periods, function (period) {
      return period.start > time;
    });
  }
  /**
   * Returns the Period coming chronologically just after another given Period.
   * Returns `undefined` if not found.
   * @param {Object} period
   * @returns {Object|null}
   */
  ;

  _proto.getPeriodAfter = function getPeriodAfter(period) {
    var endOfPeriod = period.end;

    if (endOfPeriod === undefined) {
      return null;
    }

    var nextPeriod = (0,array_find/* default */.Z)(this.periods, function (_period) {
      return _period.end === undefined || endOfPeriod < _period.end;
    });
    return nextPeriod === undefined ? null : nextPeriod;
  }
  /**
   * Returns the most important URL from which the Manifest can be refreshed.
   * `undefined` if no URL is found.
   * @returns {string|undefined}
   */
  ;

  _proto.getUrl = function getUrl() {
    return this.uris[0];
  }
  /**
   * Update the current Manifest properties by giving a new updated version.
   * This instance will be updated with the new information coming from it.
   * @param {Object} newManifest
   */
  ;

  _proto.replace = function replace(newManifest) {
    this._performUpdate(newManifest, MANIFEST_UPDATE_TYPE.Full);
  }
  /**
   * Update the current Manifest properties by giving a new but shorter version
   * of it.
   * This instance will add the new information coming from it and will
   * automatically clean old Periods that shouldn't be available anymore.
   *
   * /!\ Throws if the given Manifest cannot be used or is not sufficient to
   * update the Manifest.
   * @param {Object} newManifest
   */
  ;

  _proto.update = function update(newManifest) {
    this._performUpdate(newManifest, MANIFEST_UPDATE_TYPE.Partial);
  }
  /**
   * Get the minimum position currently defined by the Manifest, in seconds.
   * @returns {number}
   */
  ;

  _proto.getMinimumPosition = function getMinimumPosition() {
    var _a, _b;

    var windowData = this._timeBounds;

    if (windowData.timeshiftDepth === null) {
      return (_a = windowData.absoluteMinimumTime) !== null && _a !== void 0 ? _a : 0;
    }

    var maximumTimeData = windowData.maximumTimeData;
    var maximumTime;

    if (!windowData.maximumTimeData.isLinear) {
      maximumTime = maximumTimeData.value;
    } else {
      var timeDiff = performance.now() - maximumTimeData.time;
      maximumTime = maximumTimeData.value + timeDiff / 1000;
    }

    var theoricalMinimum = maximumTime - windowData.timeshiftDepth;
    return Math.max((_b = windowData.absoluteMinimumTime) !== null && _b !== void 0 ? _b : 0, theoricalMinimum);
  }
  /**
   * Get the maximum position currently defined by the Manifest, in seconds.
   * @returns {number}
   */
  ;

  _proto.getMaximumPosition = function getMaximumPosition() {
    var maximumTimeData = this._timeBounds.maximumTimeData;

    if (!maximumTimeData.isLinear) {
      return maximumTimeData.value;
    }

    var timeDiff = performance.now() - maximumTimeData.time;
    return maximumTimeData.value + timeDiff / 1000;
  }
  /**
   * Look in the Manifest for Representations linked to the given key ID,
   * and mark them as being impossible to decrypt.
   * Then trigger a "blacklist-update" event to notify everyone of the changes
   * performed.
   * @param {Array.<ArrayBuffer>} keyIDs
   */
  ;

  _proto.addUndecipherableKIDs = function addUndecipherableKIDs(keyIDs) {
    var updates = updateDeciperability(this, function (representation) {
      if (representation.decipherable === false || representation.contentProtections === undefined) {
        return true;
      }

      var contentKIDs = representation.contentProtections.keyIds;

      for (var i = 0; i < contentKIDs.length; i++) {
        var elt = contentKIDs[i];

        for (var j = 0; j < keyIDs.length; j++) {
          if ((0,are_arrays_of_numbers_equal/* default */.Z)(keyIDs[j], elt.keyId)) {
            return false;
          }
        }
      }

      return true;
    });

    if (updates.length > 0) {
      this.trigger("decipherabilityUpdate", updates);
    }
  }
  /**
   * Look in the Manifest for Representations linked to the given content
   * protection initialization data and mark them as being impossible to
   * decrypt.
   * Then trigger a "blacklist-update" event to notify everyone of the changes
   * performed.
   * @param {Array.<ArrayBuffer>} keyIDs
   */
  ;

  _proto.addUndecipherableProtectionData = function addUndecipherableProtectionData(initDataType, initData) {
    var updates = updateDeciperability(this, function (representation) {
      if (representation.decipherable === false) {
        return true;
      }

      var segmentProtections = representation.getProtectionsInitializationData();

      for (var i = 0; i < segmentProtections.length; i++) {
        if (segmentProtections[i].type === initDataType) {
          if ((0,are_arrays_of_numbers_equal/* default */.Z)(initData, segmentProtections[i].data)) {
            return false;
          }
        }
      }

      return true;
    });

    if (updates.length > 0) {
      this.trigger("decipherabilityUpdate", updates);
    }
  }
  /**
   * @deprecated only returns adaptations for the first period
   * @returns {Array.<Object>}
   */
  ;

  _proto.getAdaptations = function getAdaptations() {
    (0,warn_once/* default */.Z)("manifest.getAdaptations() is deprecated." + " Please use manifest.period[].getAdaptations() instead");
    var firstPeriod = this.periods[0];

    if (firstPeriod === undefined) {
      return [];
    }

    var adaptationsByType = firstPeriod.adaptations;
    var adaptationsList = [];

    for (var adaptationType in adaptationsByType) {
      if (adaptationsByType.hasOwnProperty(adaptationType)) {
        var adaptations = adaptationsByType[adaptationType];
        adaptationsList.push.apply(adaptationsList, adaptations);
      }
    }

    return adaptationsList;
  }
  /**
   * @deprecated only returns adaptations for the first period
   * @returns {Array.<Object>}
   */
  ;

  _proto.getAdaptationsForType = function getAdaptationsForType(adaptationType) {
    (0,warn_once/* default */.Z)("manifest.getAdaptationsForType(type) is deprecated." + " Please use manifest.period[].getAdaptationsForType(type) instead");
    var firstPeriod = this.periods[0];

    if (firstPeriod === undefined) {
      return [];
    }

    var adaptationsForType = firstPeriod.adaptations[adaptationType];
    return adaptationsForType === undefined ? [] : adaptationsForType;
  }
  /**
   * @deprecated only returns adaptations for the first period
   * @returns {Array.<Object>}
   */
  ;

  _proto.getAdaptation = function getAdaptation(wantedId) {
    (0,warn_once/* default */.Z)("manifest.getAdaptation(id) is deprecated." + " Please use manifest.period[].getAdaptation(id) instead");
    /* eslint-disable import/no-deprecated */

    return (0,array_find/* default */.Z)(this.getAdaptations(), function (_ref) {
      var id = _ref.id;
      return wantedId === id;
    });
    /* eslint-enable import/no-deprecated */
  }
  /**
   * Add supplementary image Adaptation(s) to the manifest.
   * @private
   * @param {Object|Array.<Object>} imageTracks
   */
  ;

  _proto._addSupplementaryImageAdaptations = function _addSupplementaryImageAdaptations(
  /* eslint-disable import/no-deprecated */
  imageTracks) {
    var _this2 = this;

    var _imageTracks = Array.isArray(imageTracks) ? imageTracks : [imageTracks];

    var newImageTracks = _imageTracks.map(function (_ref2) {
      var _this2$parsingErrors;

      var mimeType = _ref2.mimeType,
          url = _ref2.url;
      var adaptationID = "gen-image-ada-" + generateSupplementaryTrackID();
      var representationID = "gen-image-rep-" + generateSupplementaryTrackID();
      var newAdaptation = new Adaptation({
        id: adaptationID,
        type: "image",
        representations: [{
          bitrate: 0,
          id: representationID,
          mimeType: mimeType,
          index: new StaticRepresentationIndex({
            media: url
          })
        }]
      }, {
        isManuallyAdded: true
      });

      (_this2$parsingErrors = _this2.parsingErrors).push.apply(_this2$parsingErrors, newAdaptation.parsingErrors);

      return newAdaptation;
    });

    if (newImageTracks.length > 0 && this.periods.length > 0) {
      var adaptations = this.periods[0].adaptations;
      adaptations.image = adaptations.image != null ? adaptations.image.concat(newImageTracks) : newImageTracks;
    }
  }
  /**
   * Add supplementary text Adaptation(s) to the manifest.
   * @private
   * @param {Object|Array.<Object>} textTracks
   */
  ;

  _proto._addSupplementaryTextAdaptations = function _addSupplementaryTextAdaptations(
  /* eslint-disable import/no-deprecated */
  textTracks
  /* eslint-enable import/no-deprecated */
  ) {
    var _this3 = this;

    var _textTracks = Array.isArray(textTracks) ? textTracks : [textTracks];

    var newTextAdaptations = _textTracks.reduce(function (allSubs, _ref3) {
      var mimeType = _ref3.mimeType,
          codecs = _ref3.codecs,
          url = _ref3.url,
          language = _ref3.language,
          languages = _ref3.languages,
          closedCaption = _ref3.closedCaption;
      var langsToMapOn = language != null ? [language] : languages != null ? languages : [];
      return allSubs.concat(langsToMapOn.map(function (_language) {
        var _this3$parsingErrors;

        var adaptationID = "gen-text-ada-" + generateSupplementaryTrackID();
        var representationID = "gen-text-rep-" + generateSupplementaryTrackID();
        var newAdaptation = new Adaptation({
          id: adaptationID,
          type: "text",
          language: _language,
          closedCaption: closedCaption,
          representations: [{
            bitrate: 0,
            id: representationID,
            mimeType: mimeType,
            codecs: codecs,
            index: new StaticRepresentationIndex({
              media: url
            })
          }]
        }, {
          isManuallyAdded: true
        });

        (_this3$parsingErrors = _this3.parsingErrors).push.apply(_this3$parsingErrors, newAdaptation.parsingErrors);

        return newAdaptation;
      }));
    }, []);

    if (newTextAdaptations.length > 0 && this.periods.length > 0) {
      var adaptations = this.periods[0].adaptations;
      adaptations.text = adaptations.text != null ? adaptations.text.concat(newTextAdaptations) : newTextAdaptations;
    }
  }
  /**
   * @param {Object} newManifest
   * @param {number} type
   */
  ;

  _proto._performUpdate = function _performUpdate(newManifest, updateType) {
    this.availabilityStartTime = newManifest.availabilityStartTime;
    this.expired = newManifest.expired;
    this.isDynamic = newManifest.isDynamic;
    this.isLive = newManifest.isLive;
    this.lifetime = newManifest.lifetime;
    this.parsingErrors = newManifest.parsingErrors;
    this.suggestedPresentationDelay = newManifest.suggestedPresentationDelay;
    this.transport = newManifest.transport;

    if (updateType === MANIFEST_UPDATE_TYPE.Full) {
      this._timeBounds = newManifest._timeBounds;
      this.uris = newManifest.uris;
      replacePeriods(this.periods, newManifest.periods);
    } else {
      this._timeBounds.maximumTimeData = newManifest._timeBounds.maximumTimeData;
      updatePeriods(this.periods, newManifest.periods); // Partial updates do not remove old Periods.
      // This can become a memory problem when playing a content long enough.
      // Let's clean manually Periods behind the minimum possible position.

      var min = this.getMinimumPosition();

      while (this.periods.length > 0) {
        var period = this.periods[0];

        if (period.end === undefined || period.end > min) {
          break;
        }

        this.periods.shift();
      }
    } // Re-set this.adaptations for retro-compatibility in v3.x.x

    /* eslint-disable import/no-deprecated */


    this.adaptations = this.periods[0] === undefined ? {} : this.periods[0].adaptations;
    /* eslint-enable import/no-deprecated */
    // Let's trigger events at the end, as those can trigger side-effects.
    // We do not want the current Manifest object to be incomplete when those
    // happen.

    this.trigger("manifestUpdate", null);
  };

  return Manifest;
}(event_emitter/* default */.Z);
/**
 * Update decipherability based on a predicate given.
 * Do nothing for a Representation when the predicate returns false, mark as
 * undecipherable when the predicate returns false. Returns every updates in
 * an array.
 * @param {Manifest} manifest
 * @param {Function} predicate
 * @returns {Array.<Object>}
 */




function updateDeciperability(manifest, predicate) {
  var updates = [];

  for (var i = 0; i < manifest.periods.length; i++) {
    var period = manifest.periods[i];
    var adaptations = period.getAdaptations();

    for (var j = 0; j < adaptations.length; j++) {
      var adaptation = adaptations[j];
      var representations = adaptation.representations;

      for (var k = 0; k < representations.length; k++) {
        var representation = representations[k];

        if (!predicate(representation)) {
          updates.push({
            manifest: manifest,
            period: period,
            adaptation: adaptation,
            representation: representation
          });
          representation.decipherable = false;
        }
      }
    }
  }

  return updates;
}
;// CONCATENATED MODULE: ./src/manifest/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */






/* harmony default export */ const manifest = (Manifest);


/***/ }),

/***/ 2689:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "s": () => /* binding */ MAX_32_BIT_INT
/* harmony export */ });
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Maximum integer that can be stored on 32 bits.
 *
 * This can be used for example to know what is the maximum ISOBMFF box size
 * that can be stored on the first four bytes of a box. Any value higher than
 * that will need 8 bytes (64 bits) to be stored.
 */
var MAX_32_BIT_INT = Math.pow(2, 32) - 1;

/***/ }),

/***/ 2297:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "iz": () => /* binding */ getBox,
/* harmony export */   "t_": () => /* binding */ getBoxContent,
/* harmony export */   "Qy": () => /* binding */ getBoxOffsets,
/* harmony export */   "Xj": () => /* binding */ getNextBoxOffsets,
/* harmony export */   "nR": () => /* binding */ getUuidContent
/* harmony export */ });
/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3887);
/* harmony import */ var _utils_byte_parsing__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6968);
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Returns the content of a box based on its name.
 * `null` if not found.
 * @param {Uint8Array} buf - the isobmff structure
 * @param {Number} boxName - the 4-letter 'name' of the box as a 4 bit integer
 * generated from encoding the corresponding ASCII in big endian.
 * @returns {UInt8Array|null}
 */

function getBoxContent(buf, boxName) {
  var offsets = getBoxOffsets(buf, boxName);
  return offsets !== null ? buf.subarray(offsets[1], offsets[2]) : null;
}
/**
 * Returns an ISOBMFF box - size and name included - based on its name.
 * `null` if not found.
 * @param {Uint8Array} buf - the isobmff structure
 * @param {Number} boxName - the 4-letter 'name' of the box as a 4 bit integer
 * generated from encoding the corresponding ASCII in big endian.
 * @returns {UInt8Array|null}
 */


function getBox(buf, boxName) {
  var offsets = getBoxOffsets(buf, boxName);
  return offsets !== null ? buf.subarray(offsets[0], offsets[2]) : null;
}
/**
 * Returns byte offsets for the start of the box, the start of its content and
 * the end of the box (not inclusive).
 *
 * `null` if not found.
 *
 * If found, the tuple returned has three elements, all numbers:
 *   1. The starting byte corresponding to the start of the box (from its size)
 *   2. The beginning of the box content - meaning the first byte after the
 *      size and the name of the box.
 *   3. The first byte after the end of the box, might be equal to `buf`'s
 *      length if we're considering the last box.
 * @param {Uint8Array} buf - the isobmff structure
 * @param {Number} boxName - the 4-letter 'name' of the box as a 4 bit integer
 * generated from encoding the corresponding ASCII in big endian.
 * @returns {Array.<number>|null}
 */


function getBoxOffsets(buf, boxName) {
  var len = buf.length;
  var boxBaseOffset = 0;
  var name;
  var lastBoxSize = 0;
  var lastOffset;

  while (boxBaseOffset + 8 <= len) {
    lastOffset = boxBaseOffset;
    lastBoxSize = (0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_0__/* .be4toi */ .pX)(buf, lastOffset);
    lastOffset += 4;
    name = (0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_0__/* .be4toi */ .pX)(buf, lastOffset);
    lastOffset += 4;

    if (lastBoxSize === 0) {
      lastBoxSize = len - boxBaseOffset;
    } else if (lastBoxSize === 1) {
      if (lastOffset + 8 > len) {
        return null;
      }

      lastBoxSize = (0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_0__/* .be8toi */ .pV)(buf, lastOffset);
      lastOffset += 8;
    }

    if (lastBoxSize < 0) {
      throw new Error("ISOBMFF: Size out of range");
    }

    if (name === boxName) {
      if (boxName === 0x75756964
      /* === "uuid" */
      ) {
          lastOffset += 16; // Skip uuid name
        }

      return [boxBaseOffset, lastOffset, boxBaseOffset + lastBoxSize];
    } else {
      boxBaseOffset += lastBoxSize;
    }
  }

  return null;
}
/**
 * Gives the content of a specific UUID box.
 * `undefined` if that box is not found.
 *
 * If found, the returned Uint8Array contains just the box's content: the box
 * without its name and size.
 * @param {Uint8Array} buf
 * @param {Number} id1
 * @param {Number} id2
 * @param {Number} id3
 * @param {Number} id4
 * @returns {Uint8Array|undefined}
 */


function getUuidContent(buf, id1, id2, id3, id4) {
  var len = buf.length;
  var boxSize;

  for (var boxBaseOffset = 0; boxBaseOffset < len; boxBaseOffset += boxSize) {
    var currentOffset = boxBaseOffset;
    boxSize = (0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_0__/* .be4toi */ .pX)(buf, currentOffset);
    currentOffset += 4;
    var boxName = (0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_0__/* .be4toi */ .pX)(buf, currentOffset);
    currentOffset += 4;

    if (boxSize === 0) {
      boxSize = len - boxBaseOffset;
    } else if (boxSize === 1) {
      if (currentOffset + 8 > len) {
        return undefined;
      }

      boxSize = (0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_0__/* .be8toi */ .pV)(buf, currentOffset);
      currentOffset += 8;
    }

    if (boxName === 0x75756964
    /* === "uuid" */
    && currentOffset + 16 <= len && (0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_0__/* .be4toi */ .pX)(buf, currentOffset) === id1 && (0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_0__/* .be4toi */ .pX)(buf, currentOffset + 4) === id2 && (0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_0__/* .be4toi */ .pX)(buf, currentOffset + 8) === id3 && (0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_0__/* .be4toi */ .pX)(buf, currentOffset + 12) === id4) {
      currentOffset += 16;
      return buf.subarray(currentOffset, boxBaseOffset + boxSize);
    }
  }
}
/**
 * For the next encountered box, return byte offsets corresponding to:
 *   1. the starting byte offset for the next box (should always be equal to
 *       `0`).
 *   2. The beginning of the box content - meaning the first byte after the
 *      size and the name of the box.
 *   3. The first byte after the end of the box, might be equal to `buf`'s
 *      length if we're considering the last box.
 *
 * `null` if no box is found.
 * @param {Uint8Array} buf - the isobmff structure
 * @param {Number} boxName - the 4-letter 'name' of the box as a 4 bit integer
 * generated from encoding the corresponding ASCII in big endian.
 */


function getNextBoxOffsets(buf) {
  var len = buf.length;

  if (len < 8) {
    _log__WEBPACK_IMPORTED_MODULE_1__/* .default.warn */ .Z.warn("ISOBMFF: box inferior to 8 bytes, cannot find offsets");
    return null;
  }

  var lastOffset = 0;
  var boxSize = (0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_0__/* .be4toi */ .pX)(buf, lastOffset);
  lastOffset += 4;
  var name = (0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_0__/* .be4toi */ .pX)(buf, lastOffset);
  lastOffset += 4;

  if (boxSize === 0) {
    boxSize = len;
  } else if (boxSize === 1) {
    if (lastOffset + 8 > len) {
      _log__WEBPACK_IMPORTED_MODULE_1__/* .default.warn */ .Z.warn("ISOBMFF: box too short, cannot find offsets");
      return null;
    }

    boxSize = (0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_0__/* .be8toi */ .pV)(buf, lastOffset);
    lastOffset += 8;
  }

  if (boxSize < 0) {
    throw new Error("ISOBMFF: Size out of range");
  }

  if (name === 0x75756964
  /* === "uuid" */
  ) {
      lastOffset += 16; // Skip uuid name
    }

  return [0, lastOffset, boxSize];
}



/***/ }),

/***/ 6807:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "XA": () => /* binding */ getTRAF,
/* harmony export */   "Le": () => /* binding */ getMDAT,
/* harmony export */   "fs": () => /* binding */ getMDIA
/* harmony export */ });
/* harmony import */ var _get_box__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2297);
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns TRAF Box from the whole ISOBMFF File.
 * Returns null if not found.
 * @param {Uint8Array} buffer
 * @returns {Uint8Array|null}
 */

function getTRAF(buffer) {
  var moof = (0,_get_box__WEBPACK_IMPORTED_MODULE_0__/* .getBoxContent */ .t_)(buffer, 0x6D6F6F66
  /* moof */
  );

  if (moof === null) {
    return null;
  }

  return (0,_get_box__WEBPACK_IMPORTED_MODULE_0__/* .getBoxContent */ .t_)(moof, 0x74726166
  /* traf */
  );
}
/**
 * Returns MDAT Box from the whole ISOBMFF File.
 * Returns null if not found.
 * @param {Uint8Array} buffer
 * @returns {Uint8Array|null}
 */


function getMDAT(buf) {
  return (0,_get_box__WEBPACK_IMPORTED_MODULE_0__/* .getBoxContent */ .t_)(buf, 0x6D646174
  /* "mdat" */
  );
}
/**
 * Returns MDIA Box from the whole ISOBMFF File.
 * Returns null if not found.
 * @param {Uint8Array} buffer
 * @returns {Uint8Array|null}
 */


function getMDIA(buf) {
  var moov = (0,_get_box__WEBPACK_IMPORTED_MODULE_0__/* .getBoxContent */ .t_)(buf, 0x6D6F6F76
  /* moov */
  );

  if (moov === null) {
    return null;
  }

  var trak = (0,_get_box__WEBPACK_IMPORTED_MODULE_0__/* .getBoxContent */ .t_)(moov, 0x7472616B
  /* "trak" */
  );

  if (trak === null) {
    return null;
  }

  return (0,_get_box__WEBPACK_IMPORTED_MODULE_0__/* .getBoxContent */ .t_)(trak, 0x6D646961
  /* "mdia" */
  );
}



/***/ }),

/***/ 6490:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Z": () => /* binding */ takePSSHOut
});

// EXTERNAL MODULE: ./src/log.ts + 1 modules
var log = __webpack_require__(3887);
;// CONCATENATED MODULE: ./src/utils/slice_uint8array.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @param {Uint8Array} arr - The Uint8Array you want to slice
 * @param {number} start - The starting byte index from the beginning
 * @param {number} end -     Byte index before which to end slicing.
 * If end is unspecified, the new ArrayBuffer contains all bytes from begin to
 * the end of this ArrayBuffer. If negative, it will make the Byte index begin
 * from the last Byte.
 * @returns {Uint8Array}
 */
function arraySlice(arr, start, end) {
  return new Uint8Array(Array.prototype.slice.call(arr, start, end));
}
/**
 * @param {Uint8Array} arr - The Uint8Array you want to slice
 * @param {number} start - The starting byte index from the beginning
 * @param {number} end -     Byte index before which to end slicing.
 * If end is unspecified, the new ArrayBuffer contains all bytes from begin to
 * the end of this ArrayBuffer. If negative, it will make the Byte index begin
 * from the last Byte.
 * @returns {Uint8Array}
 */


function uint8ArraySlice(arr, start, end) {
  return arr.slice(start, end);
}

/* harmony default export */ const slice_uint8array = (typeof Uint8Array.prototype.slice === "function" ? uint8ArraySlice : arraySlice);
// EXTERNAL MODULE: ./src/utils/string_parsing.ts
var string_parsing = __webpack_require__(3635);
// EXTERNAL MODULE: ./src/parsers/containers/isobmff/get_box.ts
var get_box = __webpack_require__(2297);
;// CONCATENATED MODULE: ./src/parsers/containers/isobmff/take_pssh_out.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * Replace every PSSH box from an ISOBMFF segment by FREE boxes and returns the
 * removed PSSH in an array.
 * Useful to manually manage encryption while avoiding the round-trip with the
 * browser's encrypted event.
 * @param {Uint8Array} data - the ISOBMFF segment
 * @returns {Array.<Uint8Array>} - The extracted PSSH boxes. In the order they
 * are encountered.
 */

function takePSSHOut(data) {
  var i = 0;
  var moov = (0,get_box/* getBoxContent */.t_)(data, 0x6D6F6F76
  /* moov */
  );

  if (moov === null) {
    return [];
  }

  var psshBoxes = [];

  while (i < moov.length) {
    var psshOffsets = void 0;

    try {
      psshOffsets = (0,get_box/* getBoxOffsets */.Qy)(moov, 0x70737368
      /* pssh */
      );
    } catch (e) {
      log/* default.warn */.Z.warn("ISOBMFF:", e);
      return psshBoxes;
    }

    if (psshOffsets == null) {
      return psshBoxes;
    }

    var pssh = slice_uint8array(moov, psshOffsets[0], psshOffsets[2]);
    var systemID = getSystemID(pssh, psshOffsets[1] - psshOffsets[0]);

    if (systemID !== null) {
      psshBoxes.push({
        systemID: systemID,
        data: pssh
      });
    } // replace by `free` box.


    moov[psshOffsets[0] + 4] = 0x66;
    moov[psshOffsets[0] + 5] = 0x72;
    moov[psshOffsets[0] + 6] = 0x65;
    moov[psshOffsets[0] + 7] = 0x65;
    i = psshOffsets[2];
  }

  return psshBoxes;
}
/**
 * Parse systemID from a "pssh" box into an hexadecimal string.
 * @param {Uint8Array} buff - The pssh box
 * @param {number} initialDataOffset - offset of the first byte after the size
 * and name in this pssh box.
 * @returns {string|null}
 */

function getSystemID(buff, initialDataOffset) {
  if (buff[initialDataOffset] > 1) {
    log/* default.warn */.Z.warn("ISOBMFF: un-handled PSSH version");
    return null;
  }

  var offset = initialDataOffset + 4;
  /* version + flags */

  if (offset + 16 > buff.length) {
    return null;
  }

  var systemIDBytes = slice_uint8array(buff, offset + 16);
  return (0,string_parsing/* bytesToHex */.ci)(systemIDBytes);
}

/***/ }),

/***/ 4644:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LD": () => /* binding */ getMDHDTimescale,
/* harmony export */   "Qx": () => /* binding */ getTrackFragmentDecodeTime,
/* harmony export */   "MM": () => /* binding */ getDurationFromTrun,
/* harmony export */   "Wf": () => /* binding */ getSegmentsFromSidx,
/* harmony export */   "J6": () => /* binding */ updateBoxLength
/* harmony export */ });
/* unused harmony export patchPssh */
/* harmony import */ var _utils_byte_parsing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6968);
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(2689);
/* harmony import */ var _get_box__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2297);
/* harmony import */ var _read__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(6807);
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */








/**
 * Parse the sidx part (segment index) of an ISOBMFF buffer and construct a
 * corresponding Array of available segments.
 *
 * Returns `null` if not found.
 * @param {Uint8Array} buf
 * @param {Number} sidxOffsetInWholeSegment
 * @returns {Object|null} {Array.<Object>} - Information about each subsegment.
 */

function getSegmentsFromSidx(buf, sidxOffsetInWholeSegment) {
  var sidxOffsets = (0,_get_box__WEBPACK_IMPORTED_MODULE_0__/* .getBoxOffsets */ .Qy)(buf, 0x73696478
  /* "sidx" */
  );

  if (sidxOffsets === null) {
    return null;
  }

  var offset = sidxOffsetInWholeSegment;
  var boxSize = sidxOffsets[2] - sidxOffsets[0];
  var cursor = sidxOffsets[1];
  /* version(8) */

  /* flags(24) */

  /* reference_ID(32); */

  /* timescale(32); */

  var version = buf[cursor];
  cursor += 4 + 4;
  var timescale = (0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_1__/* .be4toi */ .pX)(buf, cursor);
  cursor += 4;
  /* earliest_presentation_time(32 / 64) */

  /* first_offset(32 / 64) */

  var time;

  if (version === 0) {
    time = (0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_1__/* .be4toi */ .pX)(buf, cursor);
    cursor += 4;
    offset += (0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_1__/* .be4toi */ .pX)(buf, cursor) + boxSize;
    cursor += 4;
  } else if (version === 1) {
    time = (0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_1__/* .be8toi */ .pV)(buf, cursor);
    cursor += 8;
    offset += (0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_1__/* .be8toi */ .pV)(buf, cursor) + boxSize;
    cursor += 8;
  } else {
    return null;
  }

  var segments = [];
  /* reserved(16) */

  /* reference_count(16) */

  cursor += 2;
  var count = (0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_1__/* .be2toi */ .zK)(buf, cursor);
  cursor += 2;

  while (--count >= 0) {
    /* reference_type(1) */

    /* reference_size(31) */

    /* segment_duration(32) */

    /* sap..(32) */
    var refChunk = (0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_1__/* .be4toi */ .pX)(buf, cursor);
    cursor += 4;
    var refType = (refChunk & 0x80000000) >>> 31;
    var refSize = refChunk & 0x7FFFFFFF; // when set to 1 indicates that the reference is to a sidx, else to media

    if (refType === 1) {
      throw new Error("sidx with reference_type `1` not yet implemented");
    }

    var duration = (0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_1__/* .be4toi */ .pX)(buf, cursor);
    cursor += 4; // let sapChunk = be4toi(buf, cursor + 8);

    cursor += 4; // TODO(pierre): handle sap
    // let startsWithSap = (sapChunk & 0x80000000) >>> 31;
    // let sapType = (sapChunk & 0x70000000) >>> 28;
    // let sapDelta = sapChunk & 0x0FFFFFFF;

    segments.push({
      time: time,
      duration: duration,
      count: 0,
      timescale: timescale,
      range: [offset, offset + refSize - 1]
    });
    time += duration;
    offset += refSize;
  }

  return segments;
}
/**
 * Parse track Fragment Decode Time to get a precize initial time for this
 * segment (in the media timescale).
 *
 * Stops at the first tfdt encountered from the beginning of the file.
 * Returns this time.
 * `undefined` if not found.
 * @param {Uint8Array} buffer
 * @returns {Number | undefined}
 */


function getTrackFragmentDecodeTime(buffer) {
  var traf = (0,_read__WEBPACK_IMPORTED_MODULE_2__/* .getTRAF */ .XA)(buffer);

  if (traf === null) {
    return undefined;
  }

  var tfdt = (0,_get_box__WEBPACK_IMPORTED_MODULE_0__/* .getBoxContent */ .t_)(traf, 0x74666474
  /* tfdt */
  );

  if (tfdt === null) {
    return undefined;
  }

  var version = tfdt[0];
  return version === 1 ? (0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_1__/* .be8toi */ .pV)(tfdt, 4) : version === 0 ? (0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_1__/* .be4toi */ .pX)(tfdt, 4) : undefined;
}
/**
 * Returns the "default sample duration" which is the default value for duration
 * of samples found in a "traf" ISOBMFF box.
 *
 * Returns `undefined` if no "default sample duration" has been found.
 * @param {Uint8Array} traf
 * @returns {number|undefined}
 */


function getDefaultDurationFromTFHDInTRAF(traf) {
  var tfhd = (0,_get_box__WEBPACK_IMPORTED_MODULE_0__/* .getBoxContent */ .t_)(traf, 0x74666864
  /* tfhd */
  );

  if (tfhd === null) {
    return undefined;
  }

  var cursor =
  /* version */
  1;
  var flags = (0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_1__/* .be3toi */ .QI)(tfhd, cursor);
  cursor += 3;
  var hasBaseDataOffset = (flags & 0x000001) > 0;
  var hasSampleDescriptionIndex = (flags & 0x000002) > 0;
  var hasDefaultSampleDuration = (flags & 0x000008) > 0;

  if (!hasDefaultSampleDuration) {
    return undefined;
  }

  cursor += 4;

  if (hasBaseDataOffset) {
    cursor += 8;
  }

  if (hasSampleDescriptionIndex) {
    cursor += 4;
  }

  var defaultDuration = (0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_1__/* .be4toi */ .pX)(tfhd, cursor);
  return defaultDuration;
}
/**
 * Calculate segment duration approximation by additioning the duration from
 * every samples in a trun ISOBMFF box.
 *
 * Returns `undefined` if we could not parse the duration.
 * @param {Uint8Array} buffer
 * @returns {number | undefined}
 */


function getDurationFromTrun(buffer) {
  var traf = (0,_read__WEBPACK_IMPORTED_MODULE_2__/* .getTRAF */ .XA)(buffer);

  if (traf === null) {
    return undefined;
  }

  var trun = (0,_get_box__WEBPACK_IMPORTED_MODULE_0__/* .getBoxContent */ .t_)(traf, 0x7472756E
  /* trun */
  );

  if (trun === null) {
    return undefined;
  }

  var cursor = 0;
  var version = trun[cursor];
  cursor += 1;

  if (version > 1) {
    return undefined;
  }

  var flags = (0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_1__/* .be3toi */ .QI)(trun, cursor);
  cursor += 3;
  var hasSampleDuration = (flags & 0x000100) > 0;
  var defaultDuration = 0;

  if (!hasSampleDuration) {
    defaultDuration = getDefaultDurationFromTFHDInTRAF(traf);

    if (defaultDuration === undefined) {
      return undefined;
    }
  }

  var hasDataOffset = (flags & 0x000001) > 0;
  var hasFirstSampleFlags = (flags & 0x000004) > 0;
  var hasSampleSize = (flags & 0x000200) > 0;
  var hasSampleFlags = (flags & 0x000400) > 0;
  var hasSampleCompositionOffset = (flags & 0x000800) > 0;
  var sampleCounts = (0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_1__/* .be4toi */ .pX)(trun, cursor);
  cursor += 4;

  if (hasDataOffset) {
    cursor += 4;
  }

  if (hasFirstSampleFlags) {
    cursor += 4;
  }

  var i = sampleCounts;
  var duration = 0;

  while (i-- > 0) {
    if (hasSampleDuration) {
      duration += (0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_1__/* .be4toi */ .pX)(trun, cursor);
      cursor += 4;
    } else {
      duration += defaultDuration;
    }

    if (hasSampleSize) {
      cursor += 4;
    }

    if (hasSampleFlags) {
      cursor += 4;
    }

    if (hasSampleCompositionOffset) {
      cursor += 4;
    }
  }

  return duration;
}
/**
 * Get timescale information from a movie header box. Found in init segments.
 * `undefined` if not found or not parsed.
 *
 * This timescale is the default timescale used for segments.
 * @param {Uint8Array} buffer
 * @returns {Number | undefined}
 */


function getMDHDTimescale(buffer) {
  var mdia = (0,_read__WEBPACK_IMPORTED_MODULE_2__/* .getMDIA */ .fs)(buffer);

  if (mdia === null) {
    return undefined;
  }

  var mdhd = (0,_get_box__WEBPACK_IMPORTED_MODULE_0__/* .getBoxContent */ .t_)(mdia, 0x6D646864
  /* "mdhd" */
  );

  if (mdhd === null) {
    return undefined;
  }

  var cursor = 0;
  var version = mdhd[cursor];
  cursor += 4;
  return version === 1 ? (0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_1__/* .be4toi */ .pX)(mdhd, cursor + 16) : version === 0 ? (0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_1__/* .be4toi */ .pX)(mdhd, cursor + 8) : undefined;
}
/**
 * Creates a PSSH box with the given systemId and data.
 * @param {Array.<Object>} psshInfo
 * @returns {Uint8Array}
 */


function createPssh(_ref) {
  var systemId = _ref.systemId,
      privateData = _ref.privateData;

  var _systemId = systemId.replace(/-/g, "");

  assert(_systemId.length === 32);
  return createBox("pssh", concat(4, // 4 initial zeroed bytes
  hexToBytes(_systemId), itobe4(privateData.length), privateData));
}
/**
 * Update ISOBMFF given to add a "pssh" box in the "moov" box for every content
 * protection in the psshList array given.
 * @param {Uint8Array} buf - the ISOBMFF file
 * @param {Array.<Object>} psshList
 * @returns {Uint8Array} - The new ISOBMFF generated.
 */


function patchPssh(buf, psshList) {
  if (psshList == null || psshList.length === 0) {
    return buf;
  }

  var moovOffsets = getBoxOffsets(buf, 0x6D6F6F76
  /* = "moov" */
  );

  if (moovOffsets === null) {
    return buf;
  }

  var moov = buf.subarray(moovOffsets[0], moovOffsets[2]);
  var moovArr = [moov];

  for (var i = 0; i < psshList.length; i++) {
    moovArr.push(createPssh(psshList[i]));
  }

  var newmoov = updateBoxLength(concat.apply(void 0, moovArr));
  return concat(buf.subarray(0, moovOffsets[0]), newmoov, buf.subarray(moovOffsets[2]));
}
/**
 * Returns a new version of the given box with the size updated
 * so it reflects its actual size.
 *
 * You can use this function after modifying a ISOBMFF box so its size is
 * updated.
 *
 * /!\ Please consider that this function might mutate the given Uint8Array
 * in place or might create a new one, depending on the current conditions.
 * @param {Uint8Array} buf - The ISOBMFF box
 * @returns {Uint8Array}
 */


function updateBoxLength(buf) {
  var newLen = buf.length;

  if (newLen < 4) {
    throw new Error("Cannot update box length: box too short");
  }

  var oldSize = (0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_1__/* .be4toi */ .pX)(buf, 0);

  if (oldSize === 0) {
    if (newLen > _constants__WEBPACK_IMPORTED_MODULE_3__/* .MAX_32_BIT_INT */ .s) {
      var newBox = new Uint8Array(newLen + 8);
      newBox.set((0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_1__/* .itobe4 */ .kh)(1), 0);
      newBox.set(buf.subarray(4, 8), 4);
      newBox.set((0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_1__/* .itobe8 */ .el)(newLen + 8), 8);
      newBox.set(buf.subarray(8, newLen), 16);
      return newBox;
    } else {
      buf.set((0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_1__/* .itobe4 */ .kh)(newLen), 0);
      return buf;
    }
  } else if (oldSize === 1) {
    if (newLen < 16) {
      throw new Error("Cannot update box length: box too short");
    }

    buf.set((0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_1__/* .itobe8 */ .el)(newLen), 8);
    return buf;
  } else if (newLen <= _constants__WEBPACK_IMPORTED_MODULE_3__/* .MAX_32_BIT_INT */ .s) {
    buf.set((0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_1__/* .itobe4 */ .kh)(newLen), 0);
    return buf;
  } else {
    var _newBox = new Uint8Array(newLen + 8);

    _newBox.set((0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_1__/* .itobe4 */ .kh)(1), 0);

    _newBox.set(buf.subarray(4, 8), 4);

    _newBox.set((0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_1__/* .itobe8 */ .el)(newLen + 8), 8);

    _newBox.set(buf.subarray(8, newLen), 16);

    return _newBox;
  }
}



/***/ }),

/***/ 3203:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony import */ var _utils_byte_parsing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6968);
/* harmony import */ var _utils_string_parsing__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3635);
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * /!\ This file is feature-switchable.
 * It always should be imported through the `features` object.
 */


/**
 * @param {UInt8Array} buf
 * @returns {Object}
 */

function parseBif(buf) {
  var pos = 0;
  var length = buf.length;
  var fileFormat = (0,_utils_string_parsing__WEBPACK_IMPORTED_MODULE_0__/* .utf8ToStr */ .uR)(buf.subarray(pos + 1, pos + 8));
  pos += 8;

  if (buf[0] !== 0x89 || fileFormat !== "BIF\r\n\x1A\n") {
    throw new Error("Invalid BIF file");
  }

  var minorVersion = buf[pos];
  pos += 1;
  var majorVersion = buf[pos];
  pos += 1;
  var patchVersion = buf[pos];
  pos += 1;
  var increVersion = buf[pos];
  pos += 1;
  var version = [minorVersion, majorVersion, patchVersion, increVersion].join(".");

  if (majorVersion > 0) {
    throw new Error("Unhandled version: " + majorVersion);
  }

  var imageCount = (0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_1__/* .le4toi */ .dN)(buf, pos);
  pos += 4;
  var framewiseSeparation = (0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_1__/* .le4toi */ .dN)(buf, pos);
  pos += 4;
  var format = (0,_utils_string_parsing__WEBPACK_IMPORTED_MODULE_0__/* .utf8ToStr */ .uR)(buf.subarray(pos, pos + 4));
  pos += 4;
  var width = (0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_1__/* .le2toi */ .qb)(buf, pos);
  pos += 2;
  var height = (0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_1__/* .le2toi */ .qb)(buf, pos);
  pos += 2;
  var aspectRatio = [buf[pos], buf[pos + 1]].join(":");
  pos += 2;
  var isVod = buf[pos] === 1; // bytes 0x1F to 0x40 is unused data for now

  pos = 0x40;
  var thumbs = [];

  if (imageCount === 0) {
    throw new Error("bif: no images to parse");
  }

  var index = 0;
  var previousImageInfo = null;

  while (pos < length) {
    var currentImageTimestamp = (0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_1__/* .le4toi */ .dN)(buf, pos);
    pos += 4;
    var currentImageOffset = (0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_1__/* .le4toi */ .dN)(buf, pos);
    pos += 4;

    if (previousImageInfo !== null) {
      // calculate for index-1
      var ts = previousImageInfo.timestamp * framewiseSeparation;
      var duration = framewiseSeparation;
      var data = buf.slice(previousImageInfo.offset, currentImageOffset);
      thumbs.push({
        index: index,
        duration: duration,
        ts: ts,
        data: data
      });
      index++;
    }

    if (currentImageTimestamp === 0xFFFFFFFF) {
      break;
    }

    previousImageInfo = {
      timestamp: currentImageTimestamp,
      offset: currentImageOffset
    };
  }

  return {
    fileFormat: "BIF",
    version: version,
    imageCount: imageCount,
    timescale: 1000,
    format: format,
    width: width,
    height: height,
    aspectRatio: aspectRatio,
    isVod: isVod,
    thumbs: thumbs
  };
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (parseBif);

/***/ }),

/***/ 8232:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ clearTimelineFromPosition
/* harmony export */ });
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Remove segments which starts before the given `firstAvailablePosition` from
 * the timeline. `firstAvailablePosition` has to be time scaled.
 * @param {Array.<Object>}
 * @returns {number}
 */
function clearTimelineFromPosition(timeline, firstAvailablePosition) {
  while (timeline.length > 0) {
    var firstElt = timeline[0];

    if (firstElt.start >= firstAvailablePosition) {
      return; // all clear
    }

    if (firstElt.repeatCount <= 0) {
      timeline.shift();
    } else {
      // we have a segment repetition
      var nextElt = timeline[1];

      if (nextElt != null && nextElt.start <= firstAvailablePosition) {
        timeline.shift();
      } else {
        // no next segment or next segment is available
        if (firstElt.duration <= 0) {
          return;
        }

        var nextStart = firstElt.start + firstElt.duration;
        var nextRepeat = 1;

        while (nextStart < firstAvailablePosition && nextRepeat <= firstElt.repeatCount) {
          nextStart += firstElt.duration;
          nextRepeat++;
        }

        if (nextRepeat > firstElt.repeatCount) {
          // every start is before
          timeline.shift();
        } else {
          // some repetitions start after and some before
          var newRepeat = firstElt.repeatCount - nextRepeat;
          firstElt.start = nextStart;
          firstElt.repeatCount = newRepeat;
          return;
        }
      }
    }
  }
}

/***/ }),

/***/ 3911:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "KF": () => /* binding */ calculateRepeat,
/* harmony export */   "jH": () => /* binding */ getIndexSegmentEnd,
/* harmony export */   "gT": () => /* binding */ toIndexTime,
/* harmony export */   "zG": () => /* binding */ fromIndexTime,
/* harmony export */   "PZ": () => /* binding */ getTimescaledRange,
/* harmony export */   "_j": () => /* binding */ checkDiscontinuity
/* harmony export */ });
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// byte-range

/**
 * Calculate the number of times a timeline element repeats based on the next
 * element.
 * @param {Object} element
 * @param {Object} nextElement
 * @param {number} maxPosition
 * @returns {Number}
 */
function calculateRepeat(element, nextElement, maxPosition) {
  var repeatCount = element.repeatCount;

  if (repeatCount >= 0) {
    return repeatCount;
  } // A negative value of the @r attribute of the S element indicates
  // that the duration indicated in @d attribute repeats until the
  // start of the next S element, the end of the Period or until the
  // next MPD update.


  var segmentEnd;

  if (nextElement != null) {
    segmentEnd = nextElement.start;
  } else if (maxPosition != null) {
    segmentEnd = maxPosition;
  } else {
    segmentEnd = Number.MAX_VALUE;
  }

  return Math.ceil((segmentEnd - element.start) / element.duration) - 1;
}
/**
 * Returns end of the segment given, in index time.
 * @param {Object} segment
 * @param {Object|null} [nextSegment]
 * @param {number} maxPosition
 * @returns {Number}
 */

function getIndexSegmentEnd(segment, nextSegment, maxPosition) {
  var start = segment.start,
      duration = segment.duration;

  if (duration <= 0) {
    return start;
  }

  var repeat = calculateRepeat(segment, nextSegment, maxPosition);
  return start + (repeat + 1) * duration;
}
/**
 * Convert from `presentationTime`, the time of the segment at the moment it
 * is decoded to `mediaTime`, the original time the segments point at.
 * @param {number} time
 * @param {Object} indexOptions
 * @returns {number}
 */

function toIndexTime(time, indexOptions) {
  var _a;

  return time * indexOptions.timescale + ((_a = indexOptions.indexTimeOffset) !== null && _a !== void 0 ? _a : 0);
}
/**
 * Convert from `mediaTime`, the original time the segments point at to
 * `presentationTime`, the time of the segment at the moment it is decoded.
 * @param {number} time
 * @param {Object} indexOptions
 * @returns {number}
 */

function fromIndexTime(time, indexOptions) {
  var _a;

  return (time - ((_a = indexOptions.indexTimeOffset) !== null && _a !== void 0 ? _a : 0)) / indexOptions.timescale;
}
/**
 * @param {Number} start
 * @param {Number} duration
 * @param {Number} timescale
 * @returns {Object} - Object with two properties:
 *   - up {Number}: timescaled timestamp of the beginning time
 *   - to {Number}: timescaled timestamp of the end time (start time + duration)
 */

function getTimescaledRange(start, duration, timescale) {
  return [start * timescale, (start + duration) * timescale];
}
/**
 * Get index of the last segment in the timeline starting before/at the given
 * timescaled time.
 * Returns -1 if the given time is lower than the start of the first available
 * segment.
 * @param {Object} index
 * @param {Number} timeTScaled
 * @returns {Number}
 */

function getIndexOfLastObjectBefore(timeline, timeTScaled) {
  var low = 0;
  var high = timeline.length;

  while (low < high) {
    var mid = low + high >>> 1; // Divide by two + floor

    if (timeline[mid].start <= timeTScaled) {
      low = mid + 1;
    } else {
      high = mid;
    }
  }

  return low - 1;
}
/**
 * @param {Object} index
 * @param {number} timeSec
 * @param {number} [maxPosition]
 * @returns {number|null}
 */


function checkDiscontinuity(index, timeSec, maxPosition) {
  var timeline = index.timeline;
  var scaledTime = toIndexTime(timeSec, index);

  if (scaledTime < 0) {
    return null;
  }

  var segmentIndex = getIndexOfLastObjectBefore(timeline, scaledTime);

  if (segmentIndex < 0 || segmentIndex >= timeline.length - 1) {
    return null;
  }

  var timelineItem = timeline[segmentIndex];

  if (timelineItem.duration <= 0) {
    return null;
  }

  var nextTimelineItem = timeline[segmentIndex + 1];

  if (nextTimelineItem === undefined) {
    return null;
  }

  var nextStart = nextTimelineItem.start;
  var segmentEnd = getIndexSegmentEnd(timelineItem, nextTimelineItem, maxPosition);
  return scaledTime >= segmentEnd && scaledTime < nextStart ? fromIndexTime(nextStart, index) : null;
}

/***/ }),

/***/ 1091:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ isSegmentStillAvailable
/* harmony export */ });
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns true if a Segment returned by the corresponding index is still
 * considered available.
 * Returns false if it is not available anymore.
 * Returns undefined if we cannot know whether it is still available or not.
 * /!\ We do not check the mediaURLs of the segment.
 * @param {Object} segment
 * @param {Array.<Object>} timescale
 * @param {number} timeline
 * @returns {Boolean|undefined}
 */
function isSegmentStillAvailable(segment, timeline, timescale, indexTimeOffset) {
  for (var i = 0; i < timeline.length; i++) {
    var tSegment = timeline[i];
    var tSegmentTime = (tSegment.start - indexTimeOffset) / timescale;

    if (tSegmentTime > segment.time) {
      return false;
    } else if (tSegmentTime === segment.time) {
      if (tSegment.duration / timescale !== segment.duration) {
        return false;
      }

      if (tSegment.range == null) {
        return segment.range == null;
      }

      return segment.range != null && tSegment.range[0] === segment.range[0] && tSegment.range[1] === segment.range[1];
    } else {
      // tSegment.start < segment.time
      if (tSegment.repeatCount >= 0 && tSegment.duration != null) {
        var timeDiff = tSegmentTime - tSegment.start;
        var repeat = timeDiff / tSegment.duration - 1;
        return repeat % 1 === 0 && repeat <= tSegment.repeatCount;
      }
    }
  }

  return false;
}

/***/ }),

/***/ 5505:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ updateSegmentTimeline
/* harmony export */ });
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3714);
/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3887);
/* harmony import */ var _index_helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3911);
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Update a complete array of segments in a given timeline with a [generally]
 * smaller but [generally] newer set of segments.
 * @param {Array.<Object>} oldTimeline
 * @param {Array.<Object>} newTimeline
 */

function updateSegmentTimeline(oldTimeline, newTimeline) {
  var prevTimelineLength = oldTimeline.length;

  if (oldTimeline.length === 0) {
    oldTimeline.splice.apply(oldTimeline, [0, prevTimelineLength].concat(newTimeline));
    return;
  }

  if (newTimeline.length === 0) {
    return;
  }

  var newIndexStart = newTimeline[0].start;
  var oldLastElt = oldTimeline[prevTimelineLength - 1];
  var oldIndexEnd = (0,_index_helpers__WEBPACK_IMPORTED_MODULE_0__/* .getIndexSegmentEnd */ .jH)(oldLastElt, newTimeline[0]);

  if (oldIndexEnd < newIndexStart) {
    throw new _errors__WEBPACK_IMPORTED_MODULE_1__/* .default */ .Z("MANIFEST_UPDATE_ERROR", "Cannot perform partial update: not enough data");
  }

  for (var i = prevTimelineLength - 1; i >= 0; i--) {
    var currStart = oldTimeline[i].start;

    if (currStart === newIndexStart) {
      // replace that one and those after it
      oldTimeline.splice.apply(oldTimeline, [i, prevTimelineLength - i].concat(newTimeline));
      return;
    } else if (currStart < newIndexStart) {
      // first to be before
      var currElt = oldTimeline[i];

      if (currElt.start + currElt.duration > newIndexStart) {
        // the new Manifest overlaps a previous segment (weird). Remove the latter.
        _log__WEBPACK_IMPORTED_MODULE_2__/* .default.warn */ .Z.warn("RepresentationIndex: Manifest update removed previous segments");
        oldTimeline.splice.apply(oldTimeline, [i, prevTimelineLength - i].concat(newTimeline));
        return;
      } else if (currElt.repeatCount === undefined || currElt.repeatCount <= 0) {
        if (currElt.repeatCount < 0) {
          currElt.repeatCount = Math.floor((newIndexStart - currElt.start) / currElt.duration) - 1;
        }

        oldTimeline.splice.apply(oldTimeline, [i + 1, prevTimelineLength - (i + 1)].concat(newTimeline));
        return;
      } // else, there is a positive repeat we might want to update


      var eltLastTime = currElt.start + currElt.duration * (currElt.repeatCount + 1);

      if (eltLastTime <= newIndexStart) {
        // our new index comes directly after
        // put it after this one
        oldTimeline.splice.apply(oldTimeline, [i + 1, prevTimelineLength - (i + 1)].concat(newTimeline));
        return;
      }

      var newCurrRepeat = (newIndexStart - currElt.start) / currElt.duration - 1;

      if (newCurrRepeat % 1 === 0 && currElt.duration === newTimeline[0].duration) {
        var newRepeatCount = newTimeline[0].repeatCount < 0 ? -1 : // === maximum possible repeat
        newTimeline[0].repeatCount + newCurrRepeat + 1; // replace that one and those after it

        oldTimeline.splice.apply(oldTimeline, [i, prevTimelineLength - i].concat(newTimeline));
        oldTimeline[i].start = currElt.start;
        oldTimeline[i].repeatCount = newRepeatCount;
        return;
      }

      _log__WEBPACK_IMPORTED_MODULE_2__/* .default.warn */ .Z.warn("RepresentationIndex: Manifest update removed previous segments");
      oldTimeline[i].repeatCount = Math.floor(newCurrRepeat); // put it after this one

      oldTimeline.splice.apply(oldTimeline, [i + 1, prevTimelineLength - (i + 1)].concat(newTimeline));
      return;
    }
  } // if we got here, it means that every segments in the previous manifest are
  // after the new one. This is unusual.
  // Either the new one has more depth or it's an older one.


  var prevLastElt = oldTimeline[oldTimeline.length - 1];
  var newLastElt = newTimeline[newTimeline.length - 1];

  if (prevLastElt.repeatCount !== undefined && prevLastElt.repeatCount < 0) {
    if (prevLastElt.start > newLastElt.start) {
      _log__WEBPACK_IMPORTED_MODULE_2__/* .default.warn */ .Z.warn("RepresentationIndex: The new index is older than the previous one");
      return; // the old comes after
    } else {
      // the new has more depth
      _log__WEBPACK_IMPORTED_MODULE_2__/* .default.warn */ .Z.warn("RepresentationIndex: The new index is \"bigger\" than the previous one");
      oldTimeline.splice.apply(oldTimeline, [0, prevTimelineLength].concat(newTimeline));
      return;
    }
  }

  var prevLastTime = prevLastElt.start + prevLastElt.duration * (prevLastElt.repeatCount + 1);
  var newLastTime = newLastElt.start + newLastElt.duration * (newLastElt.repeatCount + 1);

  if (prevLastTime >= newLastTime) {
    _log__WEBPACK_IMPORTED_MODULE_2__/* .default.warn */ .Z.warn("RepresentationIndex: The new index is older than the previous one");
    return; // the old comes after
  } // the new one has more depth. full update


  _log__WEBPACK_IMPORTED_MODULE_2__/* .default.warn */ .Z.warn("RepresentationIndex: The new index is \"bigger\" than the previous one");
  oldTimeline.splice.apply(oldTimeline, [0, prevTimelineLength].concat(newTimeline));
  return;
}

/***/ }),

/***/ 5734:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony import */ var _utils_is_non_empty_string__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6923);
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// __VERY__ simple SAMI parser, based on ugly-but-working REGEXP:
//   - the text, start and end times are correctly parsed.
//   - only text for the given language is parsed.
//   - only the CSS style associated to the P element is set.
//   - we should be safe for any XSS.
// The language indicated to the parser should be present in the CSS and the
// corresponding Class should be on the P elements. If we fail to find the
// language in a "lang" property of a CSS class, the parser will throw.

/**
 * /!\ This file is feature-switchable.
 * It always should be imported through the `features` object.
 */

var HTML_ENTITIES = /&#([0-9]+);/g;
var BR = /<br>/gi;
var STYLE = /<style[^>]*>([\s\S]*?)<\/style[^>]*>/i;
var PARAG = /\s*<p (?:class=([^>]+))?>(.*)/i;
var START = /<sync[^>]+?start="?([0-9]*)"?[^0-9]/i;
/**
 * Returns classnames for every languages.
 * @param {string} str
 * @returns {Object}
 */

function getClassNameByLang(str) {
  var ruleRe = /\.(\S+)\s*{([^}]*)}/gi;
  var langs = {};
  var m = ruleRe.exec(str);

  while (m !== null) {
    var name = m[1];
    var lang = getCSSProperty(m[2], "lang");

    if (name != null && lang != null) {
      langs[lang] = name;
    }

    m = ruleRe.exec(str);
  }

  return langs;
}
/**
 * Returns the rules defined for the P element.
 * Empty string if not found.
 * @param {string} str - The entire styling part.
 * @returns {string}
 */


function getPCSSRules(str) {
  var pRuleRegex = /p\s*{([^}]*)}/gi;
  var rule = pRuleRegex.exec(str);

  if (rule === null) {
    return "";
  }

  return rule[1];
}
/**
 * @param {string} str - entire CSS rule
 * @param {string} name - name of the property
 * @returns {string|null} - value of the property. Null if not found.
 */


function getCSSProperty(str, name) {
  var matches = new RegExp("\\s*" + name + ":\\s*(\\S+);", "i").exec(str);
  return Array.isArray(matches) ? matches[1] : null;
}
/**
 * @param {string} text
 * @returns {string}
 */


function decodeEntities(text) {
  return text.replace(HTML_ENTITIES, function (_, $1) {
    return String.fromCharCode($1);
  });
}
/**
 * Because sami is not really html... we have to use
 * some kind of regular expressions to parse it...
 * the cthulhu way :)
 * The specification being quite clunky, this parser
 * may not work for every sami input.
 *
 * @param {string} smi
 * @param {Number} timeOffset
 * @param {string} lang
 */


function parseSami(smi, timeOffset, lang) {
  var syncOpen = /<sync[ >]/ig;
  var syncClose = /<sync[ >]|<\/body>/ig;
  var subs = [];
  var styleMatches = STYLE.exec(smi);
  var css = Array.isArray(styleMatches) ? styleMatches[1] : "";
  var up;
  var to; // FIXME Is that wanted?
  // previously written as let to = SyncClose.exec(smi); but never used

  syncClose.exec(smi);
  var langs = getClassNameByLang(css);
  var pCSS = getPCSSRules(css);
  var klass;

  if ((0,_utils_is_non_empty_string__WEBPACK_IMPORTED_MODULE_0__/* .default */ .Z)(lang)) {
    klass = langs[lang];

    if (klass === undefined) {
      throw new Error("sami: could not find lang " + lang + " in CSS");
    }
  }

  while (true) {
    up = syncOpen.exec(smi);
    to = syncClose.exec(smi);

    if (up === null && to === null) {
      break;
    }

    if (up === null || to === null || up.index >= to.index) {
      throw new Error("parse error");
    }

    var str = smi.slice(up.index, to.index);
    var tim = START.exec(str);

    if (!Array.isArray(tim)) {
      throw new Error("parse error (sync time attribute)");
    }

    var start = +tim[1];

    if (isNaN(start)) {
      throw new Error("parse error (sync time attribute NaN)");
    }

    appendToSubs(str.split("\n"), start / 1000);
  }

  return subs;

  function appendToSubs(lines, start) {
    var i = lines.length;

    while (--i >= 0) {
      var paragraphInfos = PARAG.exec(lines[i]);

      if (!Array.isArray(paragraphInfos)) {
        continue;
      }

      var className = paragraphInfos[1],
          txt = paragraphInfos[2];

      if (klass !== className) {
        continue;
      }

      if (txt === "&nbsp;") {
        subs[subs.length - 1].end = start;
      } else {
        var wrapperEl = document.createElement("DIV");
        wrapperEl.className = "rxp-texttrack-region";
        var divEl = document.createElement("DIV");
        divEl.className = "rxp-texttrack-div";
        divEl.style.position = "absolute";
        divEl.style.bottom = "0";
        divEl.style.width = "100%";
        divEl.style.color = "#fff";
        divEl.style.textShadow = "-1px -1px 0 #000," + "1px -1px 0 #000," + "-1px 1px 0 #000," + "1px 1px 0 #000";
        var pEl = document.createElement("div");
        pEl.className = "rxp-texttrack-p";

        if ((0,_utils_is_non_empty_string__WEBPACK_IMPORTED_MODULE_0__/* .default */ .Z)(pCSS)) {
          pEl.style.cssText = pCSS;
        }

        var textEls = txt.split(BR);

        for (var j = 0; j < textEls.length; j++) {
          if (j !== 0) {
            pEl.appendChild(document.createElement("BR"));
          }

          var spanEl = document.createElement("SPAN");
          spanEl.className = "rxp-texttrack-span";
          spanEl.textContent = decodeEntities(textEls[j]);
          pEl.appendChild(spanEl);
        }

        divEl.appendChild(pEl);
        wrapperEl.appendChild(divEl);
        subs.push({
          element: wrapperEl,
          start: start + timeOffset,
          end: -1
          /* Will be updated on a following iteration */

        });
      }
    }
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (parseSami);

/***/ }),

/***/ 1812:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony import */ var _compat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7253);
/* harmony import */ var _utils_is_non_empty_string__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6923);
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * /!\ This file is feature-switchable.
 * It always should be imported through the `features` object.
 */


var HTML_ENTITIES = /&#([0-9]+);/g;
var BR = /<br>/gi;
var STYLE = /<style[^>]*>([\s\S]*?)<\/style[^>]*>/i;
var PARAG = /\s*<p (?:class=([^>]+))?>(.*)/i;
var START = /<sync[^>]+?start="?([0-9]*)"?[^0-9]/i;
/**
 * Creates an array of VTTCue/TextTrackCue from a given array of cue objects.
 * @param {Array.<Object>} cuesArray - Objects containing the start, end and
 * text.
 * @returns {Array.<VTTCue>}
 */

function createCuesFromArray(cuesArray) {
  var nativeCues = [];

  for (var i = 0; i < cuesArray.length; i++) {
    var _cuesArray$i = cuesArray[i],
        start = _cuesArray$i.start,
        end = _cuesArray$i.end,
        text = _cuesArray$i.text;

    if ((0,_utils_is_non_empty_string__WEBPACK_IMPORTED_MODULE_0__/* .default */ .Z)(text) && end != null) {
      var cue = (0,_compat__WEBPACK_IMPORTED_MODULE_1__/* .default */ .Z)(start, end, text);

      if (cue != null) {
        nativeCues.push(cue);
      }
    }
  }

  return nativeCues;
}
/**
 * Returns classnames for every languages.
 * @param {string} str
 * @returns {Object}
 */


function getClassNameByLang(str) {
  var ruleRe = /\.(\S+)\s*{([^}]*)}/gi;
  var langs = {};
  var m = ruleRe.exec(str);

  while (Array.isArray(m)) {
    var name = m[1];
    var lang = getCSSProperty(m[2], "lang");

    if (name != null && lang != null) {
      langs[lang] = name;
    }

    m = ruleRe.exec(str);
  }

  return langs;
}
/**
 * @param {string} str - entire CSS rule
 * @param {string} name - name of the property
 * @returns {string|null} - value of the property. Null if not found.
 */


function getCSSProperty(str, name) {
  var matches = new RegExp("\\s*" + name + ":\\s*(\\S+);", "i").exec(str);
  return Array.isArray(matches) ? matches[1] : null;
}
/**
 * Decode HMTL formatting into a string.
 * @param {string} text
 * @returns {string}
 */


function decodeEntities(text) {
  return text.replace(BR, "\n").replace(HTML_ENTITIES, function (_, $1) {
    return String.fromCharCode($1);
  });
}
/**
 * Because sami is not really html... we have to use
 * some kind of regular expressions to parse it...
 * the cthulhu way :)
 * The specification being quite clunky, this parser
 * may not work for every sami input.
 *
 * @param {string} smi
 * @param {Number} timeOffset
 * @param {string} lang
 * @returns {Array.<VTTCue|TextTrackCue>}
 */


function parseSami(smi, timeOffset, lang) {
  var syncOpen = /<sync[ >]/ig;
  var syncClose = /<sync[ >]|<\/body>/ig;
  var subs = [];
  var styleMatches = STYLE.exec(smi);
  var css = styleMatches !== null ? styleMatches[1] : "";
  var up;
  var to; // FIXME Is that wanted?
  // previously written as let to = SyncClose.exec(smi); but never used

  syncClose.exec(smi);
  var langs = getClassNameByLang(css);
  var klass;

  if ((0,_utils_is_non_empty_string__WEBPACK_IMPORTED_MODULE_0__/* .default */ .Z)(lang)) {
    klass = langs[lang];

    if (klass === undefined) {
      throw new Error("sami: could not find lang " + lang + " in CSS");
    }
  }

  while (true) {
    up = syncOpen.exec(smi);
    to = syncClose.exec(smi);

    if (up === null && to === null) {
      break;
    }

    if (up === null || to === null || up.index >= to.index) {
      throw new Error("parse error");
    }

    var str = smi.slice(up.index, to.index);
    var tim = START.exec(str);

    if (tim === null) {
      throw new Error("parse error (sync time attribute)");
    }

    var start = +tim[1];

    if (isNaN(start)) {
      throw new Error("parse error (sync time attribute NaN)");
    }

    appendToSubs(str.split("\n"), start / 1000);
  }

  return createCuesFromArray(subs);

  function appendToSubs(lines, start) {
    var i = lines.length;
    var m;

    while (--i >= 0) {
      m = PARAG.exec(lines[i]);

      if (m === null) {
        continue;
      }

      var _m = m,
          kl = _m[1],
          txt = _m[2];

      if (klass !== kl) {
        continue;
      }

      if (txt === "&nbsp;") {
        subs[subs.length - 1].end = start;
      } else {
        subs.push({
          text: decodeEntities(txt),
          start: start + timeOffset
        });
      }
    }
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (parseSami);

/***/ }),

/***/ 2061:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Z": () => /* binding */ getCueBlocks
});

// EXTERNAL MODULE: ./src/utils/is_non_empty_string.ts
var is_non_empty_string = __webpack_require__(6923);
;// CONCATENATED MODULE: ./src/parsers/texttracks/srt/find_end_of_cue_block.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns the first line that is not apart of the given cue block.
 * The index given can be anywhere in a known cue block.
 *
 * This function is extra-resilient due to observed real-life malformed
 * subtitles.
 * Basically, it allows some deviation from the specification as long as the
 * intent is pretty clear.
 * @param {Array<string>} linified - Whole srt. Line by line.
 * @param {number} startIndex - Index in `linified` of the first line within the
 * block.
 * @returns {number}
 */

function findEndOfCueBlock(linified, startIndex) {
  var firstEmptyLineIndex = startIndex + 1; // continue incrementing i until either:
  //   - an empty line
  //   - the end

  while ((0,is_non_empty_string/* default */.Z)(linified[firstEmptyLineIndex])) {
    firstEmptyLineIndex++;
  }

  return firstEmptyLineIndex;
}
;// CONCATENATED MODULE: ./src/parsers/texttracks/srt/get_cue_blocks.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Get cue blocks from a srt file.
 * @param {Array.<string>} linified - Whole srt file. Each new element in this
 * array is a new line.
 * @returns {Array.<Array.<string>>}
 */

function getCueBlocks(linified) {
  var cueBlocks = [];

  for (var i = 0; i < linified.length; i++) {
    if ((0,is_non_empty_string/* default */.Z)(linified[i])) {
      var endOfCue = findEndOfCueBlock(linified, i);
      var cueBlockCandidate = linified.slice(i, endOfCue);

      if (cueBlockCandidate.length > 0) {
        if (cueBlockCandidate.length === 1) {
          if (cueBlockCandidate[0].indexOf("-->") >= 0) {
            cueBlocks.push(cueBlockCandidate);
          }
        } else {
          if (cueBlockCandidate[1].indexOf("-->") >= 0 || cueBlockCandidate[0].indexOf("-->") >= 0) {
            cueBlocks.push(cueBlockCandidate);
          }
        }
      }

      i = endOfCue;
    }
  }

  return cueBlocks;
}

/***/ }),

/***/ 8675:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ parseSRTStringToHTML
/* harmony export */ });
/* harmony import */ var _get_cue_blocks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2061);
/* harmony import */ var _parse_cue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(788);
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * /!\ This file is feature-switchable.
 * It always should be imported through the `features` object.
 */
// Parse SRT subtitles into HTML.
// Done for fun. Understand <b>, <i>, <u> and <font color="#ff0000" /> type
// of tags.


/**
 * @param {string} srtStr
 * @param {Number} timeOffset
 * @returns {Array.<Object>}
 */

function parseSRTStringToHTML(srtStr, timeOffset) {
  // Even if srt only authorize CRLF, we will also take LF or CR as line
  // terminators for resilience
  var lines = srtStr.split(/\r\n|\n|\r/);
  var cueBlocks = (0,_get_cue_blocks__WEBPACK_IMPORTED_MODULE_0__/* .default */ .Z)(lines);
  var cues = [];

  for (var i = 0; i < cueBlocks.length; i++) {
    var cueObject = (0,_parse_cue__WEBPACK_IMPORTED_MODULE_1__/* .default */ .Z)(cueBlocks[i], timeOffset);

    if (cueObject != null) {
      var htmlCue = toHTML(cueObject);

      if (htmlCue != null) {
        cues.push(htmlCue);
      }
    }
  }

  return cues;
}
/**
 * @param {Array.<string>} cueLines
 * @param {Number} timeOffset
 * @returns {Object|null}
 */

function toHTML(cueObj) {
  var start = cueObj.start,
      end = cueObj.end,
      payload = cueObj.payload;
  var pEl = document.createElement("div");
  pEl.className = "rxp-texttrack-p";
  pEl.style.fontSize = "28px";
  pEl.style.position = "absolute";
  pEl.style.bottom = "5%";
  pEl.style.width = "100%";
  pEl.style.textAlign = "center";
  pEl.style.color = "#fff";
  pEl.style.textShadow = "-1px -1px 2px #000," + "1px -1px 2px #000," + "-1px 1px 2px #000," + "1px 1px 2px #000";

  for (var i = 0; i < payload.length; i++) {
    if (i !== 0) {
      pEl.appendChild(document.createElement("br"));
    }

    var span = generateSpansFromSRTText(payload[i]);
    pEl.appendChild(span);
  }

  return {
    start: start,
    end: end,
    element: pEl
  };
}
/**
 * Take a single srt line and convert it into a span with the right style while
 * avoiding XSS.
 * What we do is set a whitelist of authorized tags, and recreate the
 * corresponding tag from scratch.
 * Supported tags:
 *   - <b>: make content bold
 *   - <i>: make content italic
 *   - <u>: draw underline on content
 *   - <font color="x">: add color x to the content
 * @param {string} text
 * @returns {HTMLElement}
 */


function generateSpansFromSRTText(text) {
  var secureDiv = document.createElement("div");
  secureDiv.innerHTML = text;

  var _loop = function _loop(node) {
    var childNodes = node.childNodes;
    var span = document.createElement("span");
    span.className = "rxp-texttrack-span";

    for (var i = 0; i < childNodes.length; i++) {
      var currentNode = childNodes[i];

      if (currentNode.nodeName === "#text") {
        var linifiedText = currentNode.wholeText.split("\n");

        for (var line = 0; line < linifiedText.length; line++) {
          if (line !== 0) {
            span.appendChild(document.createElement("br"));
          }

          if (linifiedText[line].length > 0) {
            var textNode = document.createTextNode(linifiedText[line]);
            span.appendChild(textNode);
          }
        }
      } else if (currentNode.nodeName === "B") {
        var spanChild = _loop(currentNode);

        spanChild.style.fontWeight = "bold";
        span.appendChild(spanChild);
      } else if (currentNode.nodeName === "I") {
        var _spanChild = _loop(currentNode);

        _spanChild.style.fontStyle = "italic";
        span.appendChild(_spanChild);
      } else if (currentNode.nodeName === "U") {
        var _spanChild2 = _loop(currentNode);

        _spanChild2.style.textDecoration = "underline";
        span.appendChild(_spanChild2);
      } else if (currentNode.nodeName === "FONT" && // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
      currentNode.color != null) {
        // TODO loop through attributes to find color?

        /* eslint-disable @typescript-eslint/no-unsafe-assignment */

        /* eslint-disable @typescript-eslint/no-unsafe-member-access */
        var _spanChild3 = _loop(currentNode);

        _spanChild3.style.color = currentNode.color;
        /* eslint-enable @typescript-eslint/no-unsafe-assignment */

        /* eslint-enable @typescript-eslint/no-unsafe-member-access */

        span.appendChild(_spanChild3);
      } else {
        var _spanChild4 = _loop(currentNode);

        span.appendChild(_spanChild4);
      }
    }

    return span;
  };

  return _loop(secureDiv);
}

/***/ }),

/***/ 8057:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ parseSRTStringToVTTCues
/* harmony export */ });
/* harmony import */ var _compat_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(7253);
/* harmony import */ var _get_cue_blocks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2061);
/* harmony import */ var _parse_cue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(788);
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * /!\ This file is feature-switchable.
 * It always should be imported through the `features` object.
 */
// srt to VTTCue parser, Done for fun.
// Heavily inspired from the WebVTT implementation



/**
 * Parse whole srt file into an array of cues, to be inserted in a video's
 * TrackElement.
 * @param {string} srtStr
 * @param {Number} timeOffset
 * @returns {Array.<VTTCue|TextTrackCue>}
 */

function parseSRTStringToVTTCues(srtStr, timeOffset) {
  // Even if srt only authorize CRLF, we will also take LF or CR as line
  // terminators for resilience
  var lines = srtStr.split(/\r\n|\n|\r/);
  var cueBlocks = (0,_get_cue_blocks__WEBPACK_IMPORTED_MODULE_0__/* .default */ .Z)(lines);
  var cues = [];

  for (var i = 0; i < cueBlocks.length; i++) {
    var cueObject = (0,_parse_cue__WEBPACK_IMPORTED_MODULE_1__/* .default */ .Z)(cueBlocks[i], timeOffset);

    if (cueObject !== null) {
      var nativeCue = toNativeCue(cueObject);

      if (nativeCue !== null) {
        cues.push(nativeCue);
      }
    }
  }

  return cues;
}
/**
 * @param {Object} cue Object
 * @returns {TextTrackCue|VTTCue|null}
 */

function toNativeCue(cueObj) {
  var start = cueObj.start,
      end = cueObj.end,
      payload = cueObj.payload;
  var text = payload.join("\n");
  return (0,_compat_index__WEBPACK_IMPORTED_MODULE_2__/* .default */ .Z)(start, end, text);
}

/***/ }),

/***/ 788:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Z": () => /* binding */ parseCueBlock
});

// EXTERNAL MODULE: ./src/utils/is_non_empty_string.ts
var is_non_empty_string = __webpack_require__(6923);
;// CONCATENATED MODULE: ./src/parsers/texttracks/srt/parse_timestamp.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Parse a single srt timestamp into seconds
 * @param {string} timestampString
 * @returns {Number|undefined}
 */

function parseTimestamp(timestampString) {
  var splittedTS = timestampString.split(":");

  if ((0,is_non_empty_string/* default */.Z)(splittedTS[2])) {
    var hours = parseInt(splittedTS[0], 10);
    var minutes = parseInt(splittedTS[1], 10);
    var seconds = parseFloat(splittedTS[2].replace(",", "."));

    if (isNaN(hours) || isNaN(minutes) || isNaN(seconds)) {
      return undefined;
    }

    return hours * 60 * 60 + minutes * 60 + seconds;
  }
}
;// CONCATENATED MODULE: ./src/parsers/texttracks/srt/parse_cue.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Parse cue block into a cue object which contains:
 *   - start {number}: the start of the cue as a timestamp in seconds
 *   - end {number}: the end of the cue as a timestamp in seconds
 *   - payload {Array.<string>}: the payload of the cue
 * @param {Array.<string>} cueLines
 * @param {Number} timeOffset
 * @returns {Object}
 */

function parseCueBlock(cueLines, timeOffset) {
  if (cueLines.length === 0) {
    return null;
  }

  var startTimeString;
  var endTimeString;
  var payload = []; // normally in srt, the timing is at second position.
  // We still authorize to put it in the first position for resilience

  if ((0,is_non_empty_string/* default */.Z)(cueLines[1]) && cueLines[1].indexOf("-->") !== -1) {
    var _cueLines$1$split$map = cueLines[1].split("-->").map(function (s) {
      return s.trim();
    });

    startTimeString = _cueLines$1$split$map[0];
    endTimeString = _cueLines$1$split$map[1];
    payload = cueLines.slice(2, cueLines.length);
  }

  if (!(0,is_non_empty_string/* default */.Z)(startTimeString) || !(0,is_non_empty_string/* default */.Z)(endTimeString)) {
    // Try to see if we find them in the first position
    var _cueLines$0$split$map = cueLines[0].split("-->").map(function (s) {
      return s.trim();
    });

    startTimeString = _cueLines$0$split$map[0];
    endTimeString = _cueLines$0$split$map[1];
    payload = cueLines.slice(1, cueLines.length);
  }

  if (!(0,is_non_empty_string/* default */.Z)(startTimeString) || !(0,is_non_empty_string/* default */.Z)(endTimeString)) {
    // if the time is still not found, exit
    return null;
  }

  var start = parseTimestamp(startTimeString);
  var end = parseTimestamp(endTimeString);

  if (start === undefined || end === undefined) {
    return null;
  }

  return {
    start: start + timeOffset,
    end: end + timeOffset,
    payload: payload
  };
}

/***/ }),

/***/ 2967:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ getParentElementsByTagName
/* harmony export */ });
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns the parent elements which have the given tagName, by order of
 * closeness relative to our element.
 * @param {Element|Node} element
 * @param {string} tagName
 * @returns {Array.<Element>}
 */
function getParentElementsByTagName(element, tagName) {
  if (!(element.parentNode instanceof Element)) {
    return [];
  }

  function constructArray(_element) {
    var elements = [];

    if (_element.tagName.toLowerCase() === tagName.toLowerCase()) {
      elements.push(_element);
    }

    var parentNode = _element.parentNode;

    if (parentNode instanceof Element) {
      elements.push.apply(elements, constructArray(parentNode));
    }

    return elements;
  }

  return constructArray(element.parentNode);
}

/***/ }),

/***/ 3791:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "U": () => /* binding */ getStylingAttributes,
/* harmony export */   "b": () => /* binding */ getStylingFromElement
/* harmony export */ });
/* harmony import */ var _utils_array_find__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3274);
/* harmony import */ var _utils_array_includes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7714);
/* harmony import */ var _utils_is_non_empty_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6923);
/* harmony import */ var _utils_starts_with__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9252);
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * Retrieve the attributes given in arguments in the given nodes and their
 * associated style(s)/region.
 * The first notion of the attribute encountered will be taken (by looping
 * through the given nodes in order).
 *
 * TODO manage IDREFS (plural) for styles and regions, that is, multiple one
 * @param {Array.<string>} attributes
 * @param {Array.<Node>} nodes
 * @param {Array.<Object>} styles
 * @param {Array.<Object>} regions
 * @returns {Object}
 */

function getStylingAttributes(attributes, nodes, styles, regions) {
  var currentStyle = {};
  var leftAttributes = attributes.slice();

  for (var i = 0; i <= nodes.length - 1; i++) {
    var node = nodes[i];

    if (node !== undefined) {
      var _ret = function () {
        var styleID = void 0;
        var regionID = void 0; // 1. the style is directly set on a "tts:" attribute

        if (node.nodeType === Node.ELEMENT_NODE) {
          var element = node;

          for (var j = 0; j <= element.attributes.length - 1; j++) {
            var attribute = element.attributes[j];
            var name = attribute.name;

            if (name === "style") {
              styleID = attribute.value;
            } else if (name === "region") {
              regionID = attribute.value;
            } else {
              var nameWithoutTTS = name.substring(4);

              if ((0,_utils_array_includes__WEBPACK_IMPORTED_MODULE_0__/* .default */ .Z)(leftAttributes, nameWithoutTTS)) {
                currentStyle[nameWithoutTTS] = attribute.value;
                leftAttributes.splice(j, 1);

                if (leftAttributes.length === 0) {
                  return {
                    v: currentStyle
                  };
                }
              }
            }
          }
        } // 2. the style is referenced on a "style" attribute


        if ((0,_utils_is_non_empty_string__WEBPACK_IMPORTED_MODULE_1__/* .default */ .Z)(styleID)) {
          var style = (0,_utils_array_find__WEBPACK_IMPORTED_MODULE_2__/* .default */ .Z)(styles, function (x) {
            return x.id === styleID;
          });

          if (style !== undefined) {
            for (var _j = 0; _j <= leftAttributes.length - 1; _j++) {
              var _attribute = leftAttributes[_j];

              if (!(0,_utils_is_non_empty_string__WEBPACK_IMPORTED_MODULE_1__/* .default */ .Z)(currentStyle[_attribute])) {
                if ((0,_utils_is_non_empty_string__WEBPACK_IMPORTED_MODULE_1__/* .default */ .Z)(style.style[_attribute])) {
                  currentStyle[_attribute] = style.style[_attribute];
                  leftAttributes.splice(_j, 1);

                  if (leftAttributes.length === 0) {
                    return {
                      v: currentStyle
                    };
                  }

                  _j--;
                }
              }
            }
          }
        } // 3. the node reference a region (which can have a value for the
        //    corresponding style)


        if ((0,_utils_is_non_empty_string__WEBPACK_IMPORTED_MODULE_1__/* .default */ .Z)(regionID)) {
          var region = (0,_utils_array_find__WEBPACK_IMPORTED_MODULE_2__/* .default */ .Z)(regions, function (x) {
            return x.id === regionID;
          });

          if (region !== undefined) {
            for (var _j2 = 0; _j2 <= leftAttributes.length - 1; _j2++) {
              var _attribute2 = leftAttributes[_j2];

              if (!(0,_utils_is_non_empty_string__WEBPACK_IMPORTED_MODULE_1__/* .default */ .Z)(currentStyle[_attribute2])) {
                if ((0,_utils_is_non_empty_string__WEBPACK_IMPORTED_MODULE_1__/* .default */ .Z)(region.style[_attribute2])) {
                  currentStyle[_attribute2] = region.style[_attribute2];
                  leftAttributes.splice(_j2, 1);

                  if (leftAttributes.length === 0) {
                    return {
                      v: currentStyle
                    };
                  }

                  _j2--;
                }
              }
            }
          }
        }
      }();

      if (typeof _ret === "object") return _ret.v;
    }
  }

  return currentStyle;
}
/**
 * Returns the styling directly linked to an element.
 * @param {Node} node
 * @returns {Object}
 */

function getStylingFromElement(node) {
  if (node.nodeType !== Node.ELEMENT_NODE) {
    return {};
  }

  var element = node;
  var currentStyle = {};

  for (var i = 0; i <= element.attributes.length - 1; i++) {
    var styleAttribute = element.attributes[i];

    if ((0,_utils_starts_with__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z)(styleAttribute.name, "tts")) {
      var nameWithoutTTS = styleAttribute.name.substring(4);
      currentStyle[nameWithoutTTS] = styleAttribute.value;
    }
  }

  return currentStyle;
}

/***/ }),

/***/ 6177:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Z": () => /* binding */ getTimeDelimiters
});

// EXTERNAL MODULE: ./src/utils/is_non_empty_string.ts
var is_non_empty_string = __webpack_require__(6923);
// EXTERNAL MODULE: ./src/parsers/texttracks/ttml/regexps.ts
var regexps = __webpack_require__(5336);
;// CONCATENATED MODULE: ./src/parsers/texttracks/ttml/time_parsing.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Parses a TTML time into seconds.
 * @param {string} text
 * @param {Object} ttParams
 * @returns {Number|undefined}
 */

function parseTime(text, ttParams) {
  if (regexps/* REGXP_TIME_COLON_FRAMES.test */.gu.test(text)) {
    return parseColonTimeWithFrames(ttParams, text);
  } else if (regexps/* REGXP_TIME_COLON.test */.KO.test(text)) {
    return parseTimeFromRegExp(regexps/* REGXP_TIME_COLON */.KO, text);
  } else if (regexps/* REGXP_TIME_COLON_MS.test */.wf.test(text)) {
    return parseTimeFromRegExp(regexps/* REGXP_TIME_COLON_MS */.wf, text);
  } else if (regexps/* REGXP_TIME_FRAMES.test */.jb.test(text)) {
    return parseFramesTime(ttParams, text);
  } else if (regexps/* REGXP_TIME_TICK.test */.Du.test(text)) {
    return parseTickTime(ttParams, text);
  } else if (regexps/* REGXP_TIME_HMS.test */.te.test(text)) {
    return parseTimeFromRegExp(regexps/* REGXP_TIME_HMS */.te, text);
  }
}
/**
 * Parses a TTML time in frame format
 * @param {Object} ttParams
 * @param {string} text
 * @returns {Number}
 */


function parseFramesTime(ttParams, text) {
  // 75f or 75.5f
  // (We cast as we're sure the regexp is respected here)
  var results = regexps/* REGXP_TIME_FRAMES.exec */.jb.exec(text);
  var frames = Number(results[1]);
  return frames / ttParams.frameRate;
}
/**
 * Parses a TTML time in tick format
 * @param {Object} ttParams
 * @param {string} text
 * @returns {Number}
 */


function parseTickTime(ttParams, text) {
  // 50t or 50.5t
  // (We cast as we're sure the regexp is respected here)
  var results = regexps/* REGXP_TIME_TICK.exec */.Du.exec(text);
  var ticks = Number(results[1]);
  return ticks / ttParams.tickRate;
}
/**
 * Parses a TTML colon formatted time containing frames
 * @param {Object} ttParams
 * @param {string} text
 * @returns {Number}
 */


function parseColonTimeWithFrames(ttParams, text) {
  // 01:02:43:07 ("07" is frames) or 01:02:43:07.1 (subframes)
  // (We cast as we're sure the regexp is respected here)
  var results = regexps/* REGXP_TIME_COLON_FRAMES.exec */.gu.exec(text);
  var hours = Number(results[1]);
  var minutes = Number(results[2]);
  var seconds = Number(results[3]);
  var frames = Number(results[4]);
  var subframes = Number(results[5]);

  if (isNaN(subframes)) {
    subframes = 0;
  }

  frames += subframes / ttParams.subFrameRate;
  seconds += frames / ttParams.frameRate;
  return seconds + minutes * 60 + hours * 3600;
}
/**
 * Parses a TTML time with a given regex. Expects regex to be some
 * sort of a time-matcher to match hours, minutes, seconds and milliseconds
 *
 * @param {RegExp} regex
 * @param {string} text
 * @returns {number|null}
 */


function parseTimeFromRegExp(regex, text) {
  var results = regex.exec(text);

  if (results === null || results[0] === "") {
    return null;
  } // This capture is optional, but will still be in the array as undefined,
  // default to 0.


  var hours = Number(results[1]);

  if (isNaN(hours)) {
    hours = 0;
  }

  var minutes = Number(results[2]);

  if (isNaN(minutes)) {
    minutes = 0;
  }

  var seconds = Number(results[3]);

  if (isNaN(seconds)) {
    seconds = 0;
  }

  var milliseconds = Number(results[4]);

  if (isNaN(milliseconds)) {
    milliseconds = 0;
  }

  return milliseconds / 1000 + seconds + minutes * 60 + hours * 3600;
}

/* harmony default export */ const time_parsing = (parseTime);
;// CONCATENATED MODULE: ./src/parsers/texttracks/ttml/get_time_delimiters.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Get start and end time of an element.
 * @param {Element} element
 * @param {Object} ttParams
 * @returns {Object}
 */

function getTimeDelimiters(element, ttParams) {
  var beginAttr = element.getAttribute("begin");
  var durationAttr = element.getAttribute("dur");
  var endAttr = element.getAttribute("end");
  var start = (0,is_non_empty_string/* default */.Z)(beginAttr) ? time_parsing(beginAttr, ttParams) : null;
  var duration = (0,is_non_empty_string/* default */.Z)(durationAttr) ? time_parsing(durationAttr, ttParams) : null;
  var parsedEnd = (0,is_non_empty_string/* default */.Z)(endAttr) ? time_parsing(endAttr, ttParams) : null;

  if (start == null || parsedEnd == null && duration == null) {
    throw new Error("Invalid text cue");
  } // Huh? Is TypeScript that dumb here?


  var end = parsedEnd == null ? start + duration : parsedEnd;
  return {
    start: start,
    end: end
  };
}

/***/ }),

/***/ 7439:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Z": () => /* binding */ html
});

// EXTERNAL MODULE: ./src/parsers/texttracks/ttml/parse_ttml.ts + 3 modules
var parse_ttml = __webpack_require__(5403);
;// CONCATENATED MODULE: ./src/parsers/texttracks/ttml/html/apply_default_ttml_paragraph_style.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Return true if no style has been already declared and no conflict is
 * detected with current cue style.
 *
 * No position, orientation and dimension style should have been set to
 * avoid any conflict.
 * @param {object} paragraphStyle
 * @returns {boolean}
 */
function shouldApplyDefaultTTMLStyle(paragraphStyle) {
  return paragraphStyle.extent === undefined && paragraphStyle.origin === undefined && paragraphStyle.displayAlign === undefined && paragraphStyle.display === undefined && paragraphStyle.textAlign === undefined && paragraphStyle.fontSize === undefined;
}
/**
 * Apply a default style to TTML cue.
 *
 * The default style propose to set the cue at the bottom, centered
 * and lightly spaced apart from the edges :
 *
 *        -----------------------------------------------
 *        |                                             |
 *        |                                             |
 *        |                                             |
 *        |                                             |
 *        |                                             |
 *        |                                             |
 *        |            subtitle is displayed            |
 *        |                    here                     |
 *        -----------------------------------------------
 *
 * @param {Object} cue
 * TODO This code can be seen as risky because we might not predict every
 * possible styles that can enter in conflict.
 * A better solution should be found in the future
 */

function applyDefaultTTMLStyle(paragraphStyle) {
  paragraphStyle.extent = "70% 20%";
  paragraphStyle.fontSize = "1c";
  paragraphStyle.origin = "15% 80%";
  paragraphStyle.displayAlign = "before";
  paragraphStyle.textAlign = "center";
}
// EXTERNAL MODULE: ./src/parsers/texttracks/ttml/get_time_delimiters.ts + 1 modules
var get_time_delimiters = __webpack_require__(6177);
;// CONCATENATED MODULE: ./src/compat/add_class_name.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var hasClassList;
/**
 * Add className to an HTMLElement. Do nothing if the className was already
 * added.
 * @param {HTMLElement} elt
 * @param {string} className
 */

function addClassName(elt, className) {
  if (hasClassList === undefined) {
    hasClassList = elt.classList !== undefined &&
    /* eslint-disable @typescript-eslint/unbound-method */
    typeof elt.classList.add === "function";
    /* eslint-enable @typescript-eslint/unbound-method */
  }

  if (hasClassList) {
    elt.classList.add(className);
  } else {
    var classNamesWithSpaces = " " + elt.className + " ";

    if (classNamesWithSpaces.indexOf(" " + className + " ") < 0) {
      elt.className += " " + className;
    }
  }
}
// EXTERNAL MODULE: ./src/utils/is_non_empty_string.ts
var is_non_empty_string = __webpack_require__(6923);
// EXTERNAL MODULE: ./src/utils/object_assign.ts
var object_assign = __webpack_require__(8026);
// EXTERNAL MODULE: ./src/parsers/texttracks/ttml/get_parent_elements_by_tag_name.ts
var get_parent_elements_by_tag_name = __webpack_require__(2967);
// EXTERNAL MODULE: ./src/parsers/texttracks/ttml/get_styling.ts
var get_styling = __webpack_require__(3791);
// EXTERNAL MODULE: ./src/log.ts + 1 modules
var log = __webpack_require__(3887);
// EXTERNAL MODULE: ./src/parsers/texttracks/ttml/regexps.ts
var regexps = __webpack_require__(5336);
;// CONCATENATED MODULE: ./src/parsers/texttracks/ttml/html/apply_extent.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Apply `tts:extent` styling to an HTML element.
 * @param {HTMLElement} element
 * @param {string} extent
 */

function applyExtent(element, extent) {
  var trimmedExtent = extent.trim();

  if (trimmedExtent === "auto") {
    return;
  }

  var splittedExtent = trimmedExtent.split(" ");

  if (splittedExtent.length !== 2) {
    return;
  }

  var firstExtent = regexps/* REGXP_LENGTH.exec */.eT.exec(splittedExtent[0]);
  var secondExtent = regexps/* REGXP_LENGTH.exec */.eT.exec(splittedExtent[1]);

  if (firstExtent !== null && secondExtent !== null) {
    if (firstExtent[2] === "px" || firstExtent[2] === "%" || firstExtent[2] === "em") {
      element.style.width = firstExtent[1] + firstExtent[2];
    } else if (firstExtent[2] === "c") {
      addClassName(element, "proportional-style");
      element.setAttribute("data-proportional-width", firstExtent[1]);
    } else {
      log/* default.warn */.Z.warn("TTML Parser: unhandled extent unit:", firstExtent[2]);
    }

    if (secondExtent[2] === "px" || secondExtent[2] === "%" || secondExtent[2] === "em") {
      element.style.height = secondExtent[1] + secondExtent[2];
    } else if (secondExtent[2] === "c") {
      addClassName(element, "proportional-style");
      element.setAttribute("data-proportional-height", secondExtent[1]);
    } else {
      log/* default.warn */.Z.warn("TTML Parser: unhandled extent unit:", secondExtent[2]);
    }
  }
}
;// CONCATENATED MODULE: ./src/parsers/texttracks/ttml/html/apply_font_size.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Apply `tts:fontSize` styling to an HTML element.
 * @param {HTMLElement} element
 * @param {string} fontSize
 */

function applyFontSize(element, fontSize) {
  var trimmedFontSize = fontSize.trim();
  var splittedFontSize = trimmedFontSize.split(" ");

  if (splittedFontSize.length === 0) {
    return;
  }

  var firstFontSize = regexps/* REGXP_LENGTH.exec */.eT.exec(splittedFontSize[0]);

  if (firstFontSize === null) {
    return;
  }

  if (firstFontSize[2] === "px" || firstFontSize[2] === "%" || firstFontSize[2] === "em") {
    element.style.fontSize = firstFontSize[1] + firstFontSize[2];
  } else if (firstFontSize[2] === "c") {
    element.style.position = "relative";
    addClassName(element, "proportional-style");
    element.setAttribute("data-proportional-font-size", firstFontSize[1]);
  } else {
    log/* default.warn */.Z.warn("TTML Parser: unhandled fontSize unit:", firstFontSize[2]);
  }
}
;// CONCATENATED MODULE: ./src/parsers/texttracks/ttml/html/apply_line_height.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * @param {HTMLElement} element
 * @param {string} lineHeight
 */

function applyLineHeight(element, lineHeight) {
  var trimmedLineHeight = lineHeight.trim();

  if (trimmedLineHeight === "auto") {
    return;
  }

  var firstLineHeight = regexps/* REGXP_LENGTH.exec */.eT.exec(trimmedLineHeight[0]);

  if (firstLineHeight === null) {
    return;
  }

  if (firstLineHeight[2] === "px" || firstLineHeight[2] === "%" || firstLineHeight[2] === "em") {
    element.style.lineHeight = firstLineHeight[1] + firstLineHeight[2];
  } else if (firstLineHeight[2] === "c") {
    addClassName(element, "proportional-style");
    element.setAttribute("data-proportional-line-height", firstLineHeight[1]);
  } else {
    log/* default.warn */.Z.warn("TTML Parser: unhandled lineHeight unit:", firstLineHeight[2]);
  }
}
;// CONCATENATED MODULE: ./src/parsers/texttracks/ttml/html/apply_origin.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * @param {HTMLElement} element
 * @param {string} origin
 */

function applyOrigin(element, origin) {
  var trimmedOrigin = origin.trim();

  if (trimmedOrigin === "auto") {
    return;
  }

  var splittedOrigin = trimmedOrigin.split(" ");

  if (splittedOrigin.length !== 2) {
    return;
  }

  var firstOrigin = regexps/* REGXP_LENGTH.exec */.eT.exec(splittedOrigin[0]);
  var secondOrigin = regexps/* REGXP_LENGTH.exec */.eT.exec(splittedOrigin[1]);

  if (firstOrigin !== null && secondOrigin !== null) {
    if (firstOrigin[2] === "px" || firstOrigin[2] === "%" || firstOrigin[2] === "em") {
      element.style.left = firstOrigin[1] + firstOrigin[2];
    } else if (firstOrigin[2] === "c") {
      addClassName(element, "proportional-style");
      element.setAttribute("data-proportional-left", firstOrigin[1]);
    } else {
      log/* default.warn */.Z.warn("TTML Parser: unhandled origin unit:", firstOrigin[2]);
    }

    if (secondOrigin[2] === "px" || secondOrigin[2] === "%" || secondOrigin[2] === "em") {
      element.style.top = secondOrigin[1] + secondOrigin[2];
    } else if (secondOrigin[2] === "c") {
      addClassName(element, "proportional-style");
      element.setAttribute("data-proportional-top", secondOrigin[1]);
    } else {
      log/* default.warn */.Z.warn("TTML Parser: unhandled origin unit:", secondOrigin[2]);
    }
  }
}
;// CONCATENATED MODULE: ./src/parsers/texttracks/ttml/html/apply_padding.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * @param {HTMLElement} element
 * @param {string} padding
 */

function applyPadding(element, padding) {
  var trimmedPadding = padding.trim();
  var splittedPadding = trimmedPadding.split(" ");

  if (splittedPadding.length < 1) {
    return;
  }

  var firstPadding = regexps/* REGXP_LENGTH.exec */.eT.exec(splittedPadding[0]);

  if (firstPadding === null) {
    return;
  }

  if (firstPadding[2] === "px" || firstPadding[2] === "%" || firstPadding[2] === "em") {
    var firstPaddingValue = firstPadding[1] + firstPadding[2];

    if (splittedPadding.length === 1) {
      element.style.padding = firstPaddingValue;
    } else if (splittedPadding.length === 2) {
      element.style.paddingTop = firstPaddingValue;
      element.style.paddingBottom = firstPaddingValue;
    } else {
      element.style.paddingTop = firstPaddingValue;
    }
  } else if (firstPadding[2] === "c") {
    addClassName(element, "proportional-style");

    if (splittedPadding.length === 1) {
      element.setAttribute("data-proportional-padding-top", firstPadding[1]);
      element.setAttribute("data-proportional-padding-bottom", firstPadding[1]);
      element.setAttribute("data-proportional-padding-left", firstPadding[1]);
      element.setAttribute("data-proportional-padding-right", firstPadding[1]);
    } else if (splittedPadding.length === 2) {
      element.setAttribute("data-proportional-padding-top", firstPadding[1]);
      element.setAttribute("data-proportional-padding-bottom", firstPadding[1]);
    } else {
      element.setAttribute("data-proportional-padding-top", firstPadding[1]);
    }
  } else {
    log/* default.warn */.Z.warn("TTML Parser: unhandled padding unit:", firstPadding[2]);
  }

  if (splittedPadding.length === 1) {
    return;
  }

  var secondPadding = regexps/* REGXP_LENGTH.exec */.eT.exec(splittedPadding[1]);

  if (secondPadding === null) {
    return;
  }

  if (secondPadding[2] === "px" || secondPadding[2] === "%" || secondPadding[2] === "em") {
    var secondPaddingValue = secondPadding[1] + secondPadding[2];

    if (splittedPadding.length < 4) {
      element.style.paddingLeft = secondPaddingValue;
      element.style.paddingRight = secondPaddingValue;
    } else {
      element.style.paddingRight = secondPaddingValue;
    }
  } else if (secondPadding[2] === "c") {
    addClassName(element, "proportional-style");

    if (splittedPadding.length < 4) {
      element.setAttribute("data-proportional-padding-left", secondPadding[1]);
      element.setAttribute("data-proportional-padding-right", secondPadding[1]);
    } else {
      element.setAttribute("data-proportional-padding-right", secondPadding[1]);
    }
  } else {
    log/* default.warn */.Z.warn("TTML Parser: unhandled padding unit:", secondPadding[2]);
  }

  if (splittedPadding.length === 2) {
    return;
  }

  var thirdPadding = regexps/* REGXP_LENGTH.exec */.eT.exec(splittedPadding[2]);

  if (thirdPadding === null) {
    return;
  }

  if (thirdPadding[2] === "px" || thirdPadding[2] === "%" || thirdPadding[2] === "em") {
    var thirdPaddingValue = thirdPadding[1] + thirdPadding[2];
    element.style.paddingBottom = thirdPaddingValue;
  } else if (thirdPadding[2] === "c") {
    addClassName(element, "proportional-style");
    element.setAttribute("data-proportional-padding-bottom", thirdPadding[1]);
  } else {
    log/* default.warn */.Z.warn("TTML Parser: unhandled padding unit:", thirdPadding[2]);
  }

  if (splittedPadding.length === 3) {
    return;
  }

  var fourthPadding = regexps/* REGXP_LENGTH.exec */.eT.exec(splittedPadding[3]);

  if (fourthPadding === null) {
    return;
  }

  if (fourthPadding[2] === "px" || fourthPadding[2] === "%" || fourthPadding[2] === "em") {
    var fourthPaddingValue = fourthPadding[1] + fourthPadding[2];
    element.style.paddingLeft = fourthPaddingValue;
  } else if (fourthPadding[2] === "c") {
    addClassName(element, "proportional-style");
    element.setAttribute("data-proportional-padding-left", fourthPadding[1]);
  } else {
    log/* default.warn */.Z.warn("TTML Parser: unhandled padding unit:", fourthPadding[2]);
  }
}
;// CONCATENATED MODULE: ./src/parsers/texttracks/ttml/html/generate_css_test_outline.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Try to replicate the textOutline TTML style property into CSS.
 *
 * We mock it throught the text-shadow property, translating the TTML thickness
 * into blur radius and the blur-radius into... nothing.
 *
 * @param {string} color
 * @param {string|number} thickness
 * @returns {string}
 */
function generateCSSTextOutline(color, thickness) {
  return "-1px -1px " + thickness + " " + color + "," + ("1px -1px " + thickness + " " + color + ",") + ("-1px 1px " + thickness + " " + color + ",") + ("1px 1px " + thickness + " " + color);
}
;// CONCATENATED MODULE: ./src/parsers/texttracks/ttml/html/ttml_color_to_css_color.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Translate a color indicated in TTML-style to a CSS-style color.
 * @param {string} color
 * @returns {string} color
 */

function ttmlColorToCSSColor(color) {
  // TODO check all possible color fomats
  var regRes;
  regRes = regexps/* REGXP_8_HEX_COLOR.exec */.Dq.exec(color);

  if (regRes != null) {
    return "rgba(" + String(parseInt(regRes[1], 16)) + "," + String(parseInt(regRes[2], 16)) + "," + String(parseInt(regRes[3], 16)) + "," + String(parseInt(regRes[4], 16) / 255) + ")";
  }

  regRes = regexps/* REGXP_4_HEX_COLOR.exec */.YU.exec(color);

  if (regRes != null) {
    return "rgba(" + String(parseInt(regRes[1] + regRes[1], 16)) + "," + String(parseInt(regRes[2] + regRes[2], 16)) + "," + String(parseInt(regRes[3] + regRes[3], 16)) + "," + String(parseInt(regRes[4] + regRes[4], 16) / 255) + ")";
  }

  regRes = regexps/* REGXP_RGB_COLOR.exec */.GK.exec(color);

  if (regRes != null) {
    return "rgb(" + String(+regRes[1]) + "," + String(+regRes[2]) + "," + String(+regRes[3]) + ")";
  }

  regRes = regexps/* REGXP_RGBA_COLOR.exec */.ev.exec(color);

  if (regRes != null) {
    return "rgba(" + String(+regRes[1]) + "," + String(+regRes[2]) + "," + String(+regRes[3]) + "," + String(+regRes[4] / 255) + ")";
  }

  return color;
}
;// CONCATENATED MODULE: ./src/parsers/texttracks/ttml/html/create_element.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */











 // Styling which can be applied to <span> from any level upper.
// Added here as an optimization

var SPAN_LEVEL_ATTRIBUTES = ["color", "direction", "display", "fontFamily", "fontSize", "fontStyle", "fontWeight", "textDecoration", "textOutline", "unicodeBidi", "visibility", "wrapOption"]; // TODO
// tts:showBackground (applies to region)
// tts:zIndex (applies to region)

/**
 * Apply style set for a singular text span of the current cue.
 * @param {HTMLElement} element - The text span
 * @param {Object} style - The style to apply
 */

function applyTextStyle(element, style, shouldTrimWhiteSpace) {
  // applies to span
  var color = style.color;

  if ((0,is_non_empty_string/* default */.Z)(color)) {
    element.style.color = ttmlColorToCSSColor(color);
  } // applies to body, div, p, region, span


  var backgroundColor = style.backgroundColor;

  if ((0,is_non_empty_string/* default */.Z)(backgroundColor)) {
    element.style.backgroundColor = ttmlColorToCSSColor(backgroundColor);
  } // applies to span


  var textOutline = style.textOutline;

  if ((0,is_non_empty_string/* default */.Z)(textOutline)) {
    var outlineData = textOutline.trim().replace(/\s+/g, " ").split(" ");
    var len = outlineData.length;

    if (len === 3) {
      var outlineColor = ttmlColorToCSSColor(outlineData[0]);
      var thickness = outlineData[1];
      element.style.textShadow = generateCSSTextOutline(outlineColor, thickness);
    } else if ((0,is_non_empty_string/* default */.Z)(color) && len === 1) {
      var _thickness = outlineData[0];
      element.style.textShadow = generateCSSTextOutline(color, _thickness);
    } else if (len === 2) {
      var isFirstArgAColor = /^[#A-Z]/i.test(outlineData[0]);
      var isFirstArgANumber = /^[0-9]/.test(outlineData[0]); // XOR-ing to be sure we get what we have

      if (isFirstArgAColor !== isFirstArgANumber) {
        if (isFirstArgAColor) {
          var _outlineColor = ttmlColorToCSSColor(outlineData[0]);

          var _thickness2 = outlineData[1];
          element.style.textShadow = generateCSSTextOutline(_outlineColor, _thickness2);
        } else if ((0,is_non_empty_string/* default */.Z)(color)) {
          var _thickness3 = outlineData[0];
          element.style.textShadow = generateCSSTextOutline(color, _thickness3);
        }
      }
    }
  } // applies to span


  var textDecoration = style.textDecoration;

  if ((0,is_non_empty_string/* default */.Z)(textDecoration)) {
    switch (textDecoration) {
      case "noUnderline":
      case "noLineThrough":
      case "noOverline":
        element.style.textDecoration = "none";
        break;

      case "lineThrough":
        element.style.textDecoration = "line-through";
        break;

      default:
        element.style.textDecoration = textDecoration;
        break;
    }
  } // applies to span


  var fontFamily = style.fontFamily;

  if ((0,is_non_empty_string/* default */.Z)(fontFamily)) {
    switch (fontFamily) {
      case "proportionalSansSerif":
        element.style.fontFamily = "Arial, Helvetica, Liberation Sans, sans-serif";
        break;
      // TODO monospace or sans-serif or font with both?

      case "monospaceSansSerif":
      case "sansSerif":
        element.style.fontFamily = "sans-serif";
        break;

      case "monospaceSerif":
      case "default":
        element.style.fontFamily = "Courier New, Liberation Mono, monospace";
        break;
      // TODO font with both?

      case "proportionalSerif":
        element.style.fontFamily = "serif";
        break;

      default:
        element.style.fontFamily = fontFamily;
    }
  } // applies to span


  var fontStyle = style.fontStyle;

  if ((0,is_non_empty_string/* default */.Z)(fontStyle)) {
    element.style.fontStyle = fontStyle;
  } // applies to span


  var fontWeight = style.fontWeight;

  if ((0,is_non_empty_string/* default */.Z)(fontWeight)) {
    element.style.fontWeight = fontWeight;
  } // applies to span


  var fontSize = style.fontSize;

  if ((0,is_non_empty_string/* default */.Z)(fontSize)) {
    applyFontSize(element, fontSize);
  } else {
    addClassName(element, "proportional-style");
    element.setAttribute("data-proportional-font-size", "1");
  } // applies to p, span


  var direction = style.direction;

  if ((0,is_non_empty_string/* default */.Z)(direction)) {
    element.style.direction = direction;
  } // applies to p, span


  var unicodeBidi = style.unicodeBidi;

  if ((0,is_non_empty_string/* default */.Z)(unicodeBidi)) {
    switch (unicodeBidi) {
      case "bidiOverride":
        element.style.unicodeBidi = "bidi-override";
        break;

      case "embed":
        element.style.unicodeBidi = "embed";
        break;

      default:
        element.style.unicodeBidi = "normal";
    }
  } // applies to body, div, p, region, span


  var visibility = style.visibility;

  if ((0,is_non_empty_string/* default */.Z)(visibility)) {
    element.style.visibility = visibility;
  } // applies to body, div, p, region, span


  var display = style.display;

  if (display === "none") {
    element.style.display = "none";
  } // applies to body, div, p, region, span


  var wrapOption = style.wrapOption;
  element.style.whiteSpace = wrapOption === "noWrap" ? shouldTrimWhiteSpace ? "nowrap" : "pre" : shouldTrimWhiteSpace ? "normal" : "pre-wrap";
}
/**
 * Apply style for the general text track div.
 * @param {HTMLElement} element - The <div> the style will be applied on.
 * @param {Object} style - The general style object of the paragraph.
 */


function applyGeneralStyle(element, style) {
  // Set default text color. It can be overrided by text element color.
  element.style.color = "white";
  element.style.position = "absolute"; // applies to tt, region

  var extent = style.extent;

  if ((0,is_non_empty_string/* default */.Z)(extent)) {
    applyExtent(element, extent);
  } // applies to region


  var writingMode = style.writingMode;

  if ((0,is_non_empty_string/* default */.Z)(writingMode)) {// TODO
  } // applies to region


  var overflow = style.overflow;
  element.style.overflow = (0,is_non_empty_string/* default */.Z)(overflow) ? overflow : "hidden"; // applies to region

  var padding = style.padding;

  if ((0,is_non_empty_string/* default */.Z)(padding)) {
    applyPadding(element, padding);
  } // applies to region


  var origin = style.origin;

  if ((0,is_non_empty_string/* default */.Z)(origin)) {
    applyOrigin(element, origin);
  } // applies to region


  var displayAlign = style.displayAlign;

  if ((0,is_non_empty_string/* default */.Z)(displayAlign)) {
    element.style.display = "flex";
    element.style.flexDirection = "column";

    switch (displayAlign) {
      case "before":
        element.style.justifyContent = "flex-start";
        break;

      case "center":
        element.style.justifyContent = "center";
        break;

      case "after":
        element.style.justifyContent = "flex-end";
        break;
    }
  } // applies to region


  var opacity = style.opacity;

  if ((0,is_non_empty_string/* default */.Z)(opacity)) {
    element.style.opacity = opacity;
  } // applies to body, div, p, region, span


  var visibility = style.visibility;

  if ((0,is_non_empty_string/* default */.Z)(visibility)) {
    element.style.visibility = visibility;
  } // applies to body, div, p, region, span


  var display = style.display;

  if (display === "none") {
    element.style.display = "none";
  }
}
/**
 * Apply style set for a <p> element
 * @param {HTMLElement} element - The <p> element
 * @param {Object} style - The general style object of the paragraph.
 */


function applyPStyle(element, style) {
  element.style.margin = "0px"; // applies to body, div, p, region, span

  var paragraphBackgroundColor = style.backgroundColor;

  if ((0,is_non_empty_string/* default */.Z)(paragraphBackgroundColor)) {
    element.style.backgroundColor = ttmlColorToCSSColor(paragraphBackgroundColor);
  } // applies to p


  var lineHeight = style.lineHeight;

  if ((0,is_non_empty_string/* default */.Z)(lineHeight)) {
    applyLineHeight(element, lineHeight);
  } // applies to p


  var textAlign = style.textAlign;

  if ((0,is_non_empty_string/* default */.Z)(textAlign)) {
    switch (textAlign) {
      case "center":
        element.style.textAlign = "center";
        break;

      case "left":
      case "start":
        // TODO check what start means (difference with left, writing direction?)
        element.style.textAlign = "left";
        break;

      case "right":
      case "end":
        // TODO check what end means (difference with right, writing direction?)
        element.style.textAlign = "right";
        break;
    }
  }
}
/**
 * Creates span of text for the given #text element, with the right style.
 *
 * TODO create text elements as string? Might help performances.
 * @param {Element} el - the #text element, which text content should be
 * displayed
 * @param {Object} style - the style object for the given text
 * @param {Boolean} shouldTrimWhiteSpace - True if the space should be
 * trimmed.
 * @returns {HTMLElement}
 */


function createTextElement(el, style, shouldTrimWhiteSpace) {
  var textElement = document.createElement("span");
  var textContent = el.textContent === null ? "" : el.textContent;

  if (shouldTrimWhiteSpace) {
    // 1. Trim leading and trailing whitespace.
    // 2. Collapse multiple spaces into one.
    var trimmed = textContent.trim();
    trimmed = trimmed.replace(/\s+/g, " ");
    textContent = trimmed;
  }

  textElement.innerHTML = textContent;
  textElement.className = "rxp-texttrack-span";
  applyTextStyle(textElement, style, shouldTrimWhiteSpace);
  return textElement;
}
/**
 * Generate every text elements to display in a given paragraph.
 * @param {Element} paragraph - The <p> tag.
 * @param {Array.<Object>} regions
 * @param {Array.<Object>} styles
 * @param {Object} paragraphStyle - The general style object of the paragraph.
 * @param {Boolean} shouldTrimWhiteSpace
 * @returns {Array.<HTMLElement>}
 */


function generateTextContent(paragraph, regions, styles, paragraphStyle, shouldTrimWhiteSpace) {
  /**
   * Recursive function, taking a node in argument and returning the
   * corresponding array of HTMLElement in order.
   * @param {Node} node - the node in question
   * @param {Object} style - the current state of the style for the node.
   * /!\ The style object can be mutated, provide a copy of it.
   * @param {Array.<Element>} spans - The spans parent of this node.
   * @param {Boolean} shouldTrimWhiteSpaceFromParent - True if the space should be
   * trimmed by default. From the parent xml:space parameter.
   * @returns {Array.<HTMLElement>}
   */
  function loop(node, style, spans, shouldTrimWhiteSpaceFromParent) {
    var childNodes = node.childNodes;
    var elements = [];

    for (var i = 0; i < childNodes.length; i++) {
      var currentNode = childNodes[i];

      if (currentNode.nodeName === "#text") {
        var _getStylingAttributes = (0,get_styling/* getStylingAttributes */.U)(["backgroundColor"], spans, styles, regions),
            backgroundColor = _getStylingAttributes.backgroundColor;

        if ((0,is_non_empty_string/* default */.Z)(backgroundColor)) {
          style.backgroundColor = backgroundColor;
        } else {
          delete style.backgroundColor;
        }

        var el = createTextElement(currentNode, style, shouldTrimWhiteSpaceFromParent);
        elements.push(el);
      } else if (currentNode.nodeName === "br") {
        var br = document.createElement("BR");
        elements.push(br);
      } else if (currentNode.nodeName === "span" && currentNode.nodeType === Node.ELEMENT_NODE && currentNode.childNodes.length > 0) {
        var spaceAttribute = currentNode.getAttribute("xml:space");
        var shouldTrimWhiteSpaceOnSpan = (0,is_non_empty_string/* default */.Z)(spaceAttribute) ? spaceAttribute === "default" : shouldTrimWhiteSpaceFromParent; // compute the new applyable style

        var newStyle = (0,object_assign/* default */.Z)({}, style, (0,get_styling/* getStylingAttributes */.U)(SPAN_LEVEL_ATTRIBUTES, [currentNode], styles, regions));
        elements.push.apply(elements, loop(currentNode, newStyle, [currentNode].concat(spans), shouldTrimWhiteSpaceOnSpan));
      }
    }

    return elements;
  }

  return loop(paragraph, (0,object_assign/* default */.Z)({}, paragraphStyle), [], shouldTrimWhiteSpace);
}
/**
 * @param {Element} paragraph
 * @param {Element} body
 * @param {Array.<Object>} regions
 * @param {Array.<Object>} styles
 * @param {Object} paragraphStyle
 * @param {Object}
 * @returns {HTMLElement}
 */


function createElement(paragraph, body, regions, styles, paragraphStyle, _ref) {
  var cellResolution = _ref.cellResolution,
      shouldTrimWhiteSpace = _ref.shouldTrimWhiteSpace;
  var divs = (0,get_parent_elements_by_tag_name/* default */.Z)(paragraph, "div");
  var parentElement = document.createElement("DIV");
  parentElement.className = "rxp-texttrack-region";
  parentElement.setAttribute("data-resolution-columns", String(cellResolution.columns));
  parentElement.setAttribute("data-resolution-rows", String(cellResolution.rows));
  applyGeneralStyle(parentElement, paragraphStyle);

  if (body !== null) {
    // applies to body, div, p, region, span
    var _getStylingAttributes2 = (0,get_styling/* getStylingAttributes */.U)(["backgroundColor"], [].concat(divs, [body]), styles, regions),
        bodyBackgroundColor = _getStylingAttributes2.bodyBackgroundColor;

    if ((0,is_non_empty_string/* default */.Z)(bodyBackgroundColor)) {
      parentElement.style.backgroundColor = ttmlColorToCSSColor(bodyBackgroundColor);
    }
  }

  var pElement = document.createElement("p");
  pElement.className = "rxp-texttrack-p";
  applyPStyle(pElement, paragraphStyle);
  var textContent = generateTextContent(paragraph, regions, styles, paragraphStyle, shouldTrimWhiteSpace);

  for (var i = 0; i < textContent.length; i++) {
    pElement.appendChild(textContent[i]);
  } // NOTE:
  // The following code is for the inclusion of div elements. This has no
  // advantage for now, and might only with future evolutions.
  // (This is only an indication of what the base of the code could look like).
  // if (divs.length) {
  //   let container = parentElement;
  //   for (let i = divs.length - 1; i >= 0; i--) {
  //     // TODO manage style at div level?
  //     // They are: visibility, display and backgroundColor
  //     // All these do not have any difference if applied to the <p> element
  //     // instead of the div.
  //     // The advantage might only be for multiple <p> elements dispatched
  //     // in multiple div Which we do not manage anyway for now.
  //     const divEl = document.createElement("DIV");
  //     divEl.className = "rxp-texttrack-div";
  //     container.appendChild(divEl);
  //     container = divEl;
  //   }
  //   container.appendChild(pElement);
  //   parentElement.appendChild(container);
  // } else {
  //   parentElement.appendChild(pElement);
  // }


  parentElement.appendChild(pElement);
  return parentElement;
}
;// CONCATENATED MODULE: ./src/parsers/texttracks/ttml/html/parse_cue.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * @param {Object} parsedCue
 * @returns {Object|null}
 */

function parseCue(parsedCue) {
  var paragraph = parsedCue.paragraph,
      ttParams = parsedCue.ttParams,
      body = parsedCue.body,
      regionStyles = parsedCue.regionStyles,
      idStyles = parsedCue.idStyles,
      paragraphStyle = parsedCue.paragraphStyle,
      timeOffset = parsedCue.timeOffset,
      shouldTrimWhiteSpace = parsedCue.shouldTrimWhiteSpace; // Disregard empty elements:
  // TTML allows for empty elements like <div></div>.
  // If paragraph has neither time attributes, nor
  // non-whitespace text, don't try to make a cue out of it.

  if (!paragraph.hasAttribute("begin") && !paragraph.hasAttribute("end") && /^\s*$/.test(paragraph.textContent === null ? "" : paragraph.textContent)) {
    return null;
  }

  var cellResolution = ttParams.cellResolution;

  var _getTimeDelimiters = (0,get_time_delimiters/* default */.Z)(paragraph, ttParams),
      start = _getTimeDelimiters.start,
      end = _getTimeDelimiters.end;

  var element = createElement(paragraph, body, regionStyles, idStyles, paragraphStyle, {
    cellResolution: cellResolution,
    shouldTrimWhiteSpace: shouldTrimWhiteSpace
  });
  return {
    start: start + timeOffset,
    end: end + timeOffset,
    element: element
  };
}
;// CONCATENATED MODULE: ./src/parsers/texttracks/ttml/html/parse_ttml_to_div.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Create array of objects which should represent the given TTML text track.
 * These objects have the following structure
 *   - start {Number}: start time, in seconds, at which the cue should
 *     be displayed
 *   - end {Number}: end time, in seconds, at which the cue should
 *     be displayed
 *   - element {HTMLElement}: <div> element representing the cue, with the
 *     right style. This div should then be appended to an element having
 *     the exact size of the wanted region the text track provide cues for.
 *
 * TODO TTML parsing is still pretty heavy on the CPU.
 * Optimizations have been done, principally to avoid using too much XML APIs,
 * but we can still do better.
 * @param {string} str
 * @param {number} timeOffset
 */

function parseTTMLToDiv(str, timeOffset) {
  var parsedCues = (0,parse_ttml/* default */.Z)(str, timeOffset);
  var cues = [];

  for (var i = 0; i < parsedCues.length; i++) {
    var paragraphStyle = parsedCues[i].paragraphStyle;

    if (shouldApplyDefaultTTMLStyle(paragraphStyle)) {
      applyDefaultTTMLStyle(paragraphStyle);
    }

    var cue = parseCue(parsedCues[i]);

    if (cue !== null) {
      cues.push(cue);
    }
  }

  return cues;
}
;// CONCATENATED MODULE: ./src/parsers/texttracks/ttml/html/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * /!\ This file is feature-switchable.
 * It always should be imported through the `features` object.
 */

/* harmony default export */ const html = (parseTTMLToDiv);

/***/ }),

/***/ 1570:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Z": () => /* binding */ ttml_native
});

// EXTERNAL MODULE: ./src/parsers/texttracks/ttml/parse_ttml.ts + 3 modules
var parse_ttml = __webpack_require__(5403);
// EXTERNAL MODULE: ./src/compat/make_vtt_cue.ts
var make_vtt_cue = __webpack_require__(7253);
// EXTERNAL MODULE: ./src/compat/is_vtt_cue.ts
var is_vtt_cue = __webpack_require__(1988);
// EXTERNAL MODULE: ./src/utils/is_non_empty_string.ts
var is_non_empty_string = __webpack_require__(6923);
// EXTERNAL MODULE: ./src/parsers/texttracks/ttml/get_time_delimiters.ts + 1 modules
var get_time_delimiters = __webpack_require__(6177);
// EXTERNAL MODULE: ./src/parsers/texttracks/ttml/regexps.ts
var regexps = __webpack_require__(5336);
;// CONCATENATED MODULE: ./src/parsers/texttracks/ttml/native/parse_cue.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




var TEXT_ALIGN_TO_LIGN_ALIGN = {
  left: "start",
  center: "center",
  right: "end",
  start: "start",
  end: "end"
};
/**
 * @type {Object}
 */

var TEXT_ALIGN_TO_POSITION_ALIGN = {
  left: "line-left",
  center: "center",
  right: "line-right"
};
/**
 * Parses an Element into a TextTrackCue or VTTCue.
 * /!\ Mutates the given cueElement Element
 * @param {Element} paragraph
 * @param {Number} offset
 * @param {Array.<Object>} styles
 * @param {Array.<Object>} regions
 * @param {Object} paragraphStyle
 * @param {Object} ttParams
 * @param {Boolean} shouldTrimWhiteSpace
 * @returns {TextTrackCue|null}
 */

function parseCue(parsedCue) {
  var paragraph = parsedCue.paragraph,
      timeOffset = parsedCue.timeOffset,
      paragraphStyle = parsedCue.paragraphStyle,
      ttParams = parsedCue.ttParams,
      shouldTrimWhiteSpace = parsedCue.shouldTrimWhiteSpace; // Disregard empty elements:
  // TTML allows for empty elements like <div></div>.
  // If paragraph has neither time attributes, nor
  // non-whitespace text, don't try to make a cue out of it.

  if (!paragraph.hasAttribute("begin") && !paragraph.hasAttribute("end") && /^\s*$/.test(paragraph.textContent === null ? "" : paragraph.textContent)) {
    return null;
  }

  var _getTimeDelimiters = (0,get_time_delimiters/* default */.Z)(paragraph, ttParams),
      start = _getTimeDelimiters.start,
      end = _getTimeDelimiters.end;

  var text = generateTextContent(paragraph, shouldTrimWhiteSpace);
  var cue = (0,make_vtt_cue/* default */.Z)(start + timeOffset, end + timeOffset, text);

  if (cue === null) {
    return null;
  }

  if ((0,is_vtt_cue/* default */.Z)(cue)) {
    addStyle(cue, paragraphStyle);
  }

  return cue;
}
/**
 * Generate text to display for a given paragraph.
 * @param {Element} paragraph - The <p> tag.
 * @param {Boolean} shouldTrimWhiteSpaceForParagraph
 * @returns {string}
 */

function generateTextContent(paragraph, shouldTrimWhiteSpaceForParagraph) {
  /**
   * Recursive function, taking a node in argument and returning the
   * corresponding string.
   * @param {Node} node - the node in question
   * @returns {string}
   */
  function loop(node, shouldTrimWhiteSpaceFromParent) {
    var childNodes = node.childNodes;
    var text = "";

    for (var i = 0; i < childNodes.length; i++) {
      var currentNode = childNodes[i];

      if (currentNode.nodeName === "#text") {
        var textContent = currentNode.textContent;

        if (textContent === null) {
          textContent = "";
        }

        if (shouldTrimWhiteSpaceFromParent) {
          // 1. Trim leading and trailing whitespace.
          // 2. Collapse multiple spaces into one.
          var trimmed = textContent.trim();
          trimmed = trimmed.replace(/\s+/g, " ");
          textContent = trimmed;
        } // DOM Parser turns HTML escape caracters into caracters,
        // that may be misinterpreted by VTTCue API (typically, less-than sign
        // and greater-than sign can be interpreted as HTML tags signs).
        // Original escaped caracters must be conserved.


        var escapedTextContent = textContent.replace(/&|\u0026/g, "&amp;").replace(/<|\u003C/g, "&lt;").replace(/>|\u2265/g, "&gt;").replace(/\u200E/g, "&lrm;").replace(/\u200F/g, "&rlm;").replace(/\u00A0/g, "&nbsp;");
        text += escapedTextContent;
      } else if (currentNode.nodeName === "br") {
        text += "\n";
      } else if (currentNode.nodeName === "span" && currentNode.nodeType === Node.ELEMENT_NODE && currentNode.childNodes.length > 0) {
        var spaceAttribute = currentNode.getAttribute("xml:space");
        var shouldTrimWhiteSpaceForSpan = (0,is_non_empty_string/* default */.Z)(spaceAttribute) ? spaceAttribute === "default" : shouldTrimWhiteSpaceFromParent;
        text += loop(currentNode, shouldTrimWhiteSpaceForSpan);
      }
    }

    return text;
  }

  return loop(paragraph, shouldTrimWhiteSpaceForParagraph);
}
/**
 * Adds applicable style properties to a cue.
 * /!\ Mutates cue argument.
 * @param {VTTCue} cue
 * @param {Object} style
 */


function addStyle(cue, style) {
  var extent = style.extent;

  if ((0,is_non_empty_string/* default */.Z)(extent)) {
    var results = regexps/* REGXP_PERCENT_VALUES.exec */._0.exec(extent);

    if (results != null) {
      // Use width value of the extent attribute for size.
      // Height value is ignored.
      cue.size = Number(results[1]);
    }
  }

  var writingMode = style.writingMode; // let isVerticalText = true;

  switch (writingMode) {
    case "tb":
    case "tblr":
      cue.vertical = "lr";
      break;

    case "tbrl":
      cue.vertical = "rl";
      break;

    default:
      // isVerticalText = false;
      break;
  }

  var origin = style.origin;

  if ((0,is_non_empty_string/* default */.Z)(origin)) {
    var _results = regexps/* REGXP_PERCENT_VALUES.exec */._0.exec(origin);

    if (_results != null) {// for vertical text use first coordinate of tts:origin
      // to represent line of the cue and second - for position.
      // Otherwise (horizontal), use them the other way around.
      // if (isVerticalText) {
      // TODO check and uncomment
      // cue.position = Number(results[2]);
      // cue.line = Number(results[1]);
      // } else {
      // TODO check and uncomment
      // cue.position = Number(results[1]);
      // cue.line = Number(results[2]);
      // }
      // A boolean indicating whether the line is an integer
      // number of lines (using the line dimensions of the first
      // line of the cue), or whether it is a percentage of the
      // dimension of the video. The flag is set to true when lines
      // are counted, and false otherwise.
      // TODO check and uncomment
      // cue.snapToLines = false;
    }
  }

  var align = style.align;

  if ((0,is_non_empty_string/* default */.Z)(align)) {
    cue.align = align;

    if (align === "center") {
      if (cue.align !== "center") {
        // Workaround for a Chrome bug http://crbug.com/663797
        // Chrome does not support align = "center"
        cue.align = "middle";
      }

      cue.position = "auto";
    }

    var positionAlign = TEXT_ALIGN_TO_POSITION_ALIGN[align];
    cue.positionAlign = positionAlign === undefined ? "" : positionAlign;
    var lineAlign = TEXT_ALIGN_TO_LIGN_ALIGN[align];
    cue.lineAlign = lineAlign === undefined ? "" : lineAlign;
  }
}
;// CONCATENATED MODULE: ./src/parsers/texttracks/ttml/native/parse_ttml_to_vtt.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * @param str
 * @param timeOffset
 */

function parseTtmlToNative(str, timeOffset) {
  var parsedCues = (0,parse_ttml/* default */.Z)(str, timeOffset);
  var cues = [];

  for (var i = 0; i < parsedCues.length; i++) {
    var parsedCue = parsedCues[i];
    var cue = parseCue(parsedCue);

    if (cue !== null) {
      cues.push(cue);
    }
  }

  return cues;
}
;// CONCATENATED MODULE: ./src/parsers/texttracks/ttml/native/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * /!\ This file is feature-switchable.
 * It always should be imported through the `features` object.
 */

/* harmony default export */ const ttml_native = (parseTtmlToNative);

/***/ }),

/***/ 5403:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Z": () => /* binding */ parseTTMLString
});

// EXTERNAL MODULE: ./src/utils/array_find.ts
var array_find = __webpack_require__(3274);
// EXTERNAL MODULE: ./src/utils/is_non_empty_string.ts
var is_non_empty_string = __webpack_require__(6923);
// EXTERNAL MODULE: ./src/utils/object_assign.ts
var object_assign = __webpack_require__(8026);
// EXTERNAL MODULE: ./src/log.ts + 1 modules
var log = __webpack_require__(3887);
;// CONCATENATED MODULE: ./src/parsers/texttracks/ttml/get_parameters.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var CELL_RESOLUTION_REGEXP = /(\d+) (\d+)/;
/**
 * Returns global parameters from a TTML Document
 * @param {Element} tt - <tt> node
 * @throws Error - Throws if the spacing style is invalid.
 * @returns {Object}
 */

function getParameters(tt) {
  var parsedFrameRate = tt.getAttribute("ttp:frameRate");
  var parsedSubFrameRate = tt.getAttribute("ttp:subFramRate");
  var parsedTickRate = tt.getAttribute("ttp:tickRate");
  var parsedFrameRateMultiplier = tt.getAttribute("ttp:frameRateMultiplier");
  var parsedSpaceStyle = tt.getAttribute("xml:space");
  var parsedCellResolution = tt.getAttribute("ttp:cellResolution");
  var cellResolution = {
    columns: 32,
    rows: 15
  };

  if (parsedCellResolution !== null) {
    var extractedData = CELL_RESOLUTION_REGEXP.exec(parsedCellResolution);

    if (extractedData === null || extractedData.length < 3) {
      log/* default.warn */.Z.warn("TTML Parser: Invalid cellResolution");
    } else {
      var columns = parseInt(extractedData[1], 10);
      var rows = parseInt(extractedData[2], 10);

      if (isNaN(columns) || isNaN(rows)) {
        log/* default.warn */.Z.warn("TTML Parser: Invalid cellResolution");
      } else {
        cellResolution = {
          columns: columns,
          rows: rows
        };
      }
    }
  }

  if ((0,is_non_empty_string/* default */.Z)(parsedSpaceStyle) && parsedSpaceStyle !== "default" && parsedSpaceStyle !== "preserve") {
    throw new Error("Invalid spacing style");
  }

  var nbFrameRate = Number(parsedFrameRate);

  if (isNaN(nbFrameRate) || nbFrameRate <= 0) {
    nbFrameRate = 30;
  }

  var nbSubFrameRate = Number(parsedSubFrameRate);

  if (isNaN(nbSubFrameRate) || nbSubFrameRate <= 0) {
    nbSubFrameRate = 1;
  }

  var nbTickRate = Number(parsedTickRate);

  if (isNaN(nbTickRate) || nbTickRate <= 0) {
    nbTickRate = undefined;
  }

  var frameRate = nbFrameRate;
  var subFrameRate = nbSubFrameRate != null ? nbSubFrameRate : 1;
  var spaceStyle = parsedSpaceStyle !== null ? parsedSpaceStyle : "default";
  var tickRate = nbTickRate !== undefined ? nbTickRate : nbFrameRate * nbSubFrameRate;

  if (parsedFrameRateMultiplier !== null) {
    var multiplierResults = /^(\d+) (\d+)$/g.exec(parsedFrameRateMultiplier);

    if (multiplierResults !== null) {
      var numerator = Number(multiplierResults[1]);
      var denominator = Number(multiplierResults[2]);
      var multiplierNum = numerator / denominator;
      frameRate = nbFrameRate * multiplierNum;
    }
  }

  return {
    cellResolution: cellResolution,
    tickRate: tickRate,
    frameRate: frameRate,
    subFrameRate: subFrameRate,
    spaceStyle: spaceStyle
  };
}
// EXTERNAL MODULE: ./src/parsers/texttracks/ttml/get_parent_elements_by_tag_name.ts
var get_parent_elements_by_tag_name = __webpack_require__(2967);
// EXTERNAL MODULE: ./src/parsers/texttracks/ttml/get_styling.ts
var get_styling = __webpack_require__(3791);
;// CONCATENATED MODULE: ./src/parsers/texttracks/ttml/nodes.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @param {Element} tt
 * @returns {Element}
 */
function getBodyNode(tt) {
  return tt.getElementsByTagName("body")[0];
}
/**
 * @param {Element} tt - <tt> node
 * @returns {Array.<Element>}
 */


function getStyleNodes(tt) {
  return tt.getElementsByTagName("style");
}
/**
 * @param {Element} tt - <tt> node
 * @returns {Array.<Element>}
 */


function getRegionNodes(tt) {
  return tt.getElementsByTagName("region");
}
/**
 * @param {Element} tt - <tt> node
 * @returns {Array.<Element>}
 */


function getTextNodes(tt) {
  return tt.getElementsByTagName("p");
}


// EXTERNAL MODULE: ./src/utils/array_find_index.ts
var array_find_index = __webpack_require__(5138);
// EXTERNAL MODULE: ./src/utils/array_includes.ts
var array_includes = __webpack_require__(7714);
;// CONCATENATED MODULE: ./src/parsers/texttracks/ttml/resolve_styles_inheritance.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * Transform all styles inheriting from other styles to the same styles but with
 * the inheritance removed (by resolving those inheritance here).
 *
 * Note that the original style object is directly mutated with every
 * inheritance they had resolved and removed.
 *
 * To make a pseudo-code analogy this would be equivalent to transform those
 * two classes:
 * ```
 * class A {
 *   methodA() {}
 * }
 *
 * class B extends A {
 *   method B() {}
 * }
 * ```
 * into the same two classes without inheritance:
 * ```
 * class A {
 *   methodA() {}
 * }
 * class B {
 *   methodA() {} // inherited from class A
 *   methodB() {}
 * }
 * ```
 *
 * Doing this here allows to simplify further treatment of those styles.
 * @param {Array.<Object>} styles
 */

function resolveStylesInheritance(styles) {
  // keep track of all the indexes parsed to avoid infinite loops
  var recursivelyBrowsedIndexes = [];

  function resolveStyleInheritance(styleElt, index) {
    recursivelyBrowsedIndexes.push(index);

    var _loop = function _loop(j) {
      var extendedStyleID = styleElt.extendsStyles[j];
      var extendedStyleIndex = (0,array_find_index/* default */.Z)(styles, function (x) {
        return x.id === extendedStyleID;
      });

      if (extendedStyleIndex < 0) {
        log/* default.warn */.Z.warn("TTML Parser: unknown style inheritance: " + extendedStyleID);
      } else {
        var extendedStyle = styles[extendedStyleIndex];

        if ((0,array_includes/* default */.Z)(recursivelyBrowsedIndexes, extendedStyleIndex)) {
          log/* default.warn */.Z.warn("TTML Parser: infinite style inheritance loop avoided");
        } else {
          resolveStyleInheritance(extendedStyle, extendedStyleIndex);
        }

        styleElt.style = (0,object_assign/* default */.Z)({}, extendedStyle.style, styleElt.style);
      }
    };

    for (var j = 0; j < styleElt.extendsStyles.length; j++) {
      _loop(j);
    }

    styleElt.extendsStyles.length = 0;
  }

  for (var i = 0; i < styles.length; i++) {
    resolveStyleInheritance(styles[i], i);
    recursivelyBrowsedIndexes.length = 0; // reset
  }
}
;// CONCATENATED MODULE: ./src/parsers/texttracks/ttml/parse_ttml.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */








var STYLE_ATTRIBUTES = ["align", "backgroundColor", "color", "direction", "display", "displayAlign", "extent", "fontFamily", "fontSize", "fontStyle", "fontWeight", "lineHeight", "opacity", "origin", "overflow", "padding", "textAlign", "textDecoration", "textOutline", "unicodeBidi", "visibility", "wrapOption", "writingMode"];
/**
 * Create array of objects which should represent the given TTML text track.
 * TODO TTML parsing is still pretty heavy on the CPU.
 * Optimizations have been done, principally to avoid using too much XML APIs,
 * but we can still do better.
 * @param {string} str
 * @param {Number} timeOffset
 * @returns {Array.<Object>}
 */

function parseTTMLString(str, timeOffset) {
  var cues = [];
  var xml = new DOMParser().parseFromString(str, "text/xml");

  if (xml !== null && xml !== undefined) {
    var tts = xml.getElementsByTagName("tt");
    var tt = tts[0];

    if (tt === undefined) {
      throw new Error("invalid XML");
    }

    var body = getBodyNode(tt);
    var styleNodes = getStyleNodes(tt);
    var regionNodes = getRegionNodes(tt);
    var paragraphNodes = getTextNodes(tt);
    var ttParams = getParameters(tt); // construct idStyles array based on the xml as an optimization

    var idStyles = [];

    for (var i = 0; i <= styleNodes.length - 1; i++) {
      var styleNode = styleNodes[i];

      if (styleNode instanceof Element) {
        var styleID = styleNode.getAttribute("xml:id");

        if (styleID !== null) {
          var subStyles = styleNode.getAttribute("style");
          var extendsStyles = subStyles === null ? [] : subStyles.split(" ");
          idStyles.push({
            id: styleID,
            style: (0,get_styling/* getStylingFromElement */.b)(styleNode),
            extendsStyles: extendsStyles
          });
        }
      }
    }

    resolveStylesInheritance(idStyles); // construct regionStyles array based on the xml as an optimization

    var regionStyles = [];

    for (var _i = 0; _i <= regionNodes.length - 1; _i++) {
      var regionNode = regionNodes[_i];

      if (regionNode instanceof Element) {
        var regionID = regionNode.getAttribute("xml:id");

        if (regionID !== null) {
          (function () {
            var regionStyle = (0,get_styling/* getStylingFromElement */.b)(regionNode);
            var associatedStyleID = regionNode.getAttribute("style");

            if ((0,is_non_empty_string/* default */.Z)(associatedStyleID)) {
              var style = (0,array_find/* default */.Z)(idStyles, function (x) {
                return x.id === associatedStyleID;
              });

              if (style !== undefined) {
                regionStyle = (0,object_assign/* default */.Z)({}, style.style, regionStyle);
              }
            }

            regionStyles.push({
              id: regionID,
              style: regionStyle,
              // already handled
              extendsStyles: []
            });
          })();
        }
      }
    } // Computing the style takes a lot of ressources.
    // To avoid too much re-computation, let's compute the body style right
    // now and do the rest progressively.
    // TODO Compute corresponding CSS style here (as soon as we now the TTML
    // style) to speed up the process even more.


    var bodyStyle = (0,get_styling/* getStylingAttributes */.U)(STYLE_ATTRIBUTES, body !== null ? [body] : [], idStyles, regionStyles);
    var bodySpaceAttribute = body !== null ? body.getAttribute("xml:space") : undefined;
    var shouldTrimWhiteSpaceOnBody = bodySpaceAttribute === "default" || ttParams.spaceStyle === "default";

    for (var _i2 = 0; _i2 < paragraphNodes.length; _i2++) {
      var paragraph = paragraphNodes[_i2];

      if (paragraph instanceof Element) {
        var divs = (0,get_parent_elements_by_tag_name/* default */.Z)(paragraph, "div");
        var paragraphStyle = (0,object_assign/* default */.Z)({}, bodyStyle, (0,get_styling/* getStylingAttributes */.U)(STYLE_ATTRIBUTES, [paragraph].concat(divs), idStyles, regionStyles));
        var paragraphSpaceAttribute = paragraph.getAttribute("xml:space");
        var shouldTrimWhiteSpace = (0,is_non_empty_string/* default */.Z)(paragraphSpaceAttribute) ? paragraphSpaceAttribute === "default" : shouldTrimWhiteSpaceOnBody;
        var cue = {
          paragraph: paragraph,
          timeOffset: timeOffset,
          idStyles: idStyles,
          regionStyles: regionStyles,
          body: body,
          paragraphStyle: paragraphStyle,
          ttParams: ttParams,
          shouldTrimWhiteSpace: shouldTrimWhiteSpace
        };

        if (cue !== null) {
          cues.push(cue);
        }
      }
    }
  }

  return cues;
}

/***/ }),

/***/ 5336:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "YU": () => /* binding */ REGXP_4_HEX_COLOR,
/* harmony export */   "Dq": () => /* binding */ REGXP_8_HEX_COLOR,
/* harmony export */   "GK": () => /* binding */ REGXP_RGB_COLOR,
/* harmony export */   "ev": () => /* binding */ REGXP_RGBA_COLOR,
/* harmony export */   "eT": () => /* binding */ REGXP_LENGTH,
/* harmony export */   "_0": () => /* binding */ REGXP_PERCENT_VALUES,
/* harmony export */   "KO": () => /* binding */ REGXP_TIME_COLON,
/* harmony export */   "gu": () => /* binding */ REGXP_TIME_COLON_FRAMES,
/* harmony export */   "wf": () => /* binding */ REGXP_TIME_COLON_MS,
/* harmony export */   "jb": () => /* binding */ REGXP_TIME_FRAMES,
/* harmony export */   "te": () => /* binding */ REGXP_TIME_HMS,
/* harmony export */   "Du": () => /* binding */ REGXP_TIME_TICK
/* harmony export */ });
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// examples: 00:00:40:07 (7 frames) or 00:00:40:07.1 (7 frames, 1 subframe)
var REGXP_TIME_COLON_FRAMES = /^(\d{2,}):(\d{2}):(\d{2}):(\d{2})\.?(\d+)?$/; // examples: 00:00:40:07 (7 frames) or 00:00:40:07.1 (7 frames, 1 subframe)

var REGXP_TIME_COLON = /^(?:(\d{2,}):)?(\d{2}):(\d{2})$/; // examples: 01:02:43.0345555 or 02:43.03

var REGXP_TIME_COLON_MS = /^(?:(\d{2,}):)?(\d{2}):(\d{2}\.\d{2,})$/; // examples: 75f or 75.5f

var REGXP_TIME_FRAMES = /^(\d*\.?\d*)f$/; // examples: 50t or 50.5t

var REGXP_TIME_TICK = /^(\d*\.?\d*)t$/; // examples: 3.45h, 3m or 4.20s

var REGXP_TIME_HMS = /^(?:(\d*\.?\d*)h)?(?:(\d*\.?\d*)m)?(?:(\d*\.?\d*)s)?(?:(\d*\.?\d*)ms)?$/; // examples: 50% 10%

var REGXP_PERCENT_VALUES = /^(\d{1,2}|100)% (\d{1,2}|100)%$/;
var REGXP_LENGTH = /^((?:\+|\-)?\d*(?:\.\d+)?)(px|em|c|%|rh|rw)$/;
var REGXP_8_HEX_COLOR = /^#([0-9A-f]{2})([0-9A-f]{2})([0-9A-f]{2})([0-9A-f]{2})$/;
var REGXP_4_HEX_COLOR = /^#([0-9A-f])([0-9A-f])([0-9A-f])([0-9A-f])$/;
var REGXP_RGB_COLOR = /^rgb\( *(\d+) *, *(\d+) *, *(\d+) *\)/;
var REGXP_RGBA_COLOR = /^rgba\( *(\d+) *, *(\d+) *, *(\d+) *, *(\d+) *\)/;


/***/ }),

/***/ 1138:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ getCueBlocks
/* harmony export */ });
/* harmony import */ var _utils_is_non_empty_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6923);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(360);
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Get cue blocks from a WebVTT file.
 * @param {Array.<string>} linified - Whole WebVTT file. Each new element in
 * this array is a new line.
 * @param {number} headerOffset - index of the first line after the header.
 * Used to avoid taking the header into consideration.
 * @returns {Array.<Array.<string>>}
 */

function getCueBlocks(linified, headerOffset) {
  var cueBlocks = [];

  for (var i = headerOffset; i < linified.length; i++) {
    if ((0,_utils__WEBPACK_IMPORTED_MODULE_0__/* .isStartOfCueBlock */ .tq)(linified, i)) {
      var endOfCue = (0,_utils__WEBPACK_IMPORTED_MODULE_0__/* .findEndOfCueBlock */ .$4)(linified, i);
      cueBlocks.push(linified.slice(i, endOfCue));
      i = endOfCue;
    } else if ((0,_utils_is_non_empty_string__WEBPACK_IMPORTED_MODULE_1__/* .default */ .Z)(linified[i])) {
      // continue incrementing i until either:
      //   - empty line
      //   - end
      while ((0,_utils_is_non_empty_string__WEBPACK_IMPORTED_MODULE_1__/* .default */ .Z)(linified[i])) {
        i++;
      }
    }
  }

  return cueBlocks;
}

/***/ }),

/***/ 4099:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Z": () => /* binding */ html
});

// EXTERNAL MODULE: ./src/parsers/texttracks/webvtt/get_cue_blocks.ts
var get_cue_blocks = __webpack_require__(1138);
// EXTERNAL MODULE: ./src/utils/is_non_empty_string.ts
var is_non_empty_string = __webpack_require__(6923);
// EXTERNAL MODULE: ./src/parsers/texttracks/webvtt/utils.ts
var utils = __webpack_require__(360);
;// CONCATENATED MODULE: ./src/parsers/texttracks/webvtt/get_style_blocks.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Get cue blocks from a WebVTT file.
 * @param {Array.<string>} linified - Whole WebVTT file. Each new element in
 * this array is a new line.
 * @param {number} headerOffset - index of the first line after the header.
 * Used to avoid taking the header into consideration.
 * @returns {Array.<Array.<string>>}
 */

function getStyleBlocks(linified, headerOffset) {
  var styleBlocks = [];

  for (var i = headerOffset; i < linified.length; i++) {
    //
    if ((0,utils/* isStartOfStyleBlock */.JF)(linified, i)) {
      var startOfStyleBlock = i;
      i++; // continue incrementing i until either:
      //   - empty line
      //   - end of file

      while ((0,is_non_empty_string/* default */.Z)(linified[i])) {
        i++;
      }

      var styleBlock = linified.slice(startOfStyleBlock, i);
      styleBlocks.push(styleBlock);
    } else if ((0,is_non_empty_string/* default */.Z)(linified[i])) {
      // continue incrementing i until either:
      //   - empty line
      //   - end
      while ((0,is_non_empty_string/* default */.Z)(linified[i])) {
        i++;
      }
    }
  }

  return styleBlocks;
}
// EXTERNAL MODULE: ./src/parsers/texttracks/webvtt/parse_cue_block.ts + 1 modules
var parse_cue_block = __webpack_require__(9525);
;// CONCATENATED MODULE: ./src/parsers/texttracks/webvtt/html/create_default_style_elements.ts
/**
 * Creates default classes defined in the W3 specification
 *
 * https://www.w3.org/TR/webvtt1/#default-classes
 */
var colorMap = {
  white: "#ffffff",
  lime: "#00ff00",
  cyan: "#00ffff",
  red: "#ff0000",
  yellow: "#ffff00",
  magenta: "#ff00ff",
  blue: "#0000ff",
  black: "#000000"
};
function createDefaultStyleElements() {
  return Object.keys(colorMap).reduce(function (result, key) {
    result[key] = "color: " + colorMap[key] + ";";
    result["bg_" + key] = "background-color: " + colorMap[key] + ";";
    return result;
  }, {});
}
;// CONCATENATED MODULE: ./src/parsers/texttracks/webvtt/html/parse_style_block.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Parse style element from WebVTT.
 * @param {Array.<Array.<string>>} styleBlocks
 * @return {Object}
 */

function parseStyleBlocks(styleBlocks) {
  var classes = createDefaultStyleElements();
  var global = "";
  styleBlocks.forEach(function (styleBlock) {
    if (styleBlock.length >= 2) {
      for (var index = 1; index < styleBlock.length; index++) {
        var line = styleBlock[index];

        if (Array.isArray(/::cue {/.exec(line))) {
          line = styleBlock[++index];

          while ((0,is_non_empty_string/* default */.Z)(line) && !(Array.isArray(/}/.exec(line)) || line.length === 0)) {
            global += line;
            line = styleBlock[++index];
          }
        } else {
          (function () {
            var classNames = [];
            var cueClassLine = /::cue\(\.?(.*?)\)(?:,| {)/.exec(line);

            while ((0,is_non_empty_string/* default */.Z)(line) && Array.isArray(cueClassLine)) {
              classNames.push(cueClassLine[1]);
              line = styleBlock[++index];
              cueClassLine = /::cue\(\.?(.*?)\)(?:,| {)/.exec(line);
            }

            var styleContent = "";

            while ((0,is_non_empty_string/* default */.Z)(line) && !(Array.isArray(/}/.exec(line)) || line.length === 0)) {
              styleContent += line;
              line = styleBlock[++index];
            }

            classNames.forEach(function (className) {
              var styleElement = classes[className];

              if (styleElement === undefined) {
                classes[className] = styleContent;
              } else {
                classes[className] += styleContent;
              }
            });
          })();
        }
      }
    }
  });
  return {
    classes: classes,
    global: global
  };
}
// EXTERNAL MODULE: ./src/utils/array_includes.ts
var array_includes = __webpack_require__(7714);
;// CONCATENATED MODULE: ./src/parsers/texttracks/webvtt/html/create_styled_element.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Construct an HTMLElement/TextNode representing the given node and apply
 * the right styling on it.
 * @param {Node} baseNode
 * @param {Array.<Object>} styleElements
 * @param {Array.<string>} styleClasses
 * @returns {Node}
 */

function createStyledElement(baseNode, styleElements) {
  var HTMLTags = ["u", "i", "b"];
  var authorizedNodeNames = ["u", "i", "b", "c", "#text"];
  var mainNodeName = baseNode.nodeName.toLowerCase().split(".")[0];
  var nodeWithStyle;

  if ((0,array_includes/* default */.Z)(authorizedNodeNames, mainNodeName)) {
    if (mainNodeName === "#text") {
      var linifiedText = baseNode.wholeText.split("\n");
      nodeWithStyle = document.createElement("span");

      for (var i = 0; i < linifiedText.length; i++) {
        if (i > 0) {
          nodeWithStyle.appendChild(document.createElement("br"));
        }

        if (linifiedText[i].length > 0) {
          var textNode = document.createTextNode(linifiedText[i]);
          nodeWithStyle.appendChild(textNode);
        }
      }
    } else {
      var nodeClasses = baseNode.nodeName.toLowerCase().split(".");
      var styleContents = [];
      nodeClasses.forEach(function (nodeClass) {
        if ((0,is_non_empty_string/* default */.Z)(styleElements[nodeClass])) {
          styleContents.push(styleElements[nodeClass]);
        }
      });

      if (styleContents.length !== 0) {
        // If style must be applied
        var attr = document.createAttribute("style");
        styleContents.forEach(function (styleContent) {
          attr.value += styleContent;
        });
        var nameClass = (0,array_includes/* default */.Z)(HTMLTags, mainNodeName) ? mainNodeName : "span";
        nodeWithStyle = document.createElement(nameClass);
        nodeWithStyle.setAttributeNode(attr);
      } else {
        // If style mustn't be applied. Rebuild element with tag name
        var elementTag = !(0,array_includes/* default */.Z)(HTMLTags, mainNodeName) ? "span" : mainNodeName;
        nodeWithStyle = document.createElement(elementTag);
      }

      for (var j = 0; j < baseNode.childNodes.length; j++) {
        var child = createStyledElement(baseNode.childNodes[j], styleElements);
        nodeWithStyle.appendChild(child);
      }
    }
  } else {
    nodeWithStyle = document.createElement("span");

    for (var _j = 0; _j < baseNode.childNodes.length; _j++) {
      var _child = createStyledElement(baseNode.childNodes[_j], styleElements);

      nodeWithStyle.appendChild(_child);
    }
  }

  return nodeWithStyle;
}
;// CONCATENATED MODULE: ./src/parsers/texttracks/webvtt/html/convert_payload_to_html.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @param {string} text
 * @param {Array.<Object>} styleElements
 * @returns {Array.<HTMLElement>}
 */

function convertPayloadToHTML(text, styleElements) {
  var filteredText = text // Remove timestamp tags
  .replace(/<[0-9]{2}:[0-9]{2}.[0-9]{3}>/, "") // Remove tag content or attributes (e.g. <b dfgfdg> => <b>)
  .replace(/<([u,i,b,c])(\..*?)?(?: .*?)?>(.*?)<\/\1>/g, "<$1$2>$3</$1$2>");
  var parsedWebVTT = new DOMParser().parseFromString(filteredText, "text/html");
  var nodes = parsedWebVTT.body.childNodes;
  var styledElements = [];

  for (var i = 0; i < nodes.length; i++) {
    styledElements.push(createStyledElement(nodes[i], styleElements));
  }

  return styledElements;
}
// EXTERNAL MODULE: ./src/utils/object_values.ts
var object_values = __webpack_require__(1679);
;// CONCATENATED MODULE: ./src/parsers/texttracks/webvtt/html/create_style_attribute.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Construct a DOM attribute reflecting given cue settings
 * @param {Partial<Record<string, string>>} settings
 * @returns {Attr}
 */

function createStyleAttribute(settings) {
  var pAttr = document.createAttribute("style");
  pAttr.value = getAttrValue(settings);
  return pAttr;
}

var getAttrValue = function getAttrValue(settings) {
  var hasSettings = settings !== undefined && (0,object_values/* default */.Z)(settings).length !== 0;

  if (!hasSettings) {
    return "text-align:center";
  }

  var xPositioning = getPositioningX(settings);
  var yPositioning = getPositioningY(settings);
  return "position: absolute;" + "margin: 0;" + ("transform: translate(" + xPositioning.offset + "%," + yPositioning.offset + "%);") + ("width: " + getSizePercentage(settings.size) + "%;") + ("left: " + xPositioning.position + "%;") + ("top: " + (yPositioning.position !== null ? yPositioning.position + "%" : "auto") + ";") + ("text-align: " + getAlignValue(settings.align) + ";");
};

var PositionAlignment;

(function (PositionAlignment) {
  PositionAlignment["LINE_LEFT"] = "line-left";
  PositionAlignment["CENTER"] = "center";
  PositionAlignment["LINE_RIGHT"] = "line-right";
})(PositionAlignment || (PositionAlignment = {}));

var Align;

(function (Align) {
  Align["LEFT"] = "left";
  Align["CENTER"] = "center";
  Align["RIGHT"] = "right";
})(Align || (Align = {}));

var LineAlignment;

(function (LineAlignment) {
  LineAlignment["START"] = "start";
  LineAlignment["CENTER"] = "center";
  LineAlignment["END"] = "end";
})(LineAlignment || (LineAlignment = {}));

var getPositioningX = function getPositioningX(settings) {
  return {
    position: getXPositionPercentage(settings),
    offset: getXOffsetPercentage(settings)
  };
};

var getXPositionPercentage = function getXPositionPercentage(settings) {
  var _alignMap;

  var positionPercentage = getPercentageValue(settings.position);

  if (positionPercentage !== null) {
    return positionPercentage;
  }

  var align = getAlignValue(settings.align);
  var alignMap = (_alignMap = {}, _alignMap[Align.LEFT] = 0, _alignMap[Align.CENTER] = 50, _alignMap[Align.RIGHT] = 100, _alignMap);
  return alignMap[align];
};

var getXOffsetPercentage = function getXOffsetPercentage(settings) {
  var _positionAlignmentMap, _alignMap2;

  var getPositionAlignment = function getPositionAlignment(positionSetting) {
    var positionRegex = /,(line-left|line-right|center)/;
    var matches = positionRegex.exec(positionSetting);

    if (!Array.isArray(matches) || matches.length < 2) {
      return null;
    }

    return matches[1];
  };

  var positionAlignmentMap = (_positionAlignmentMap = {}, _positionAlignmentMap[PositionAlignment.LINE_LEFT] = 0, _positionAlignmentMap[PositionAlignment.CENTER] = -50, _positionAlignmentMap[PositionAlignment.LINE_RIGHT] = -100, _positionAlignmentMap);
  var positionAlignment = settings.position !== undefined ? getPositionAlignment(settings.position) : null;

  if (positionAlignment !== null) {
    return positionAlignmentMap[positionAlignment];
  }

  var alignMap = (_alignMap2 = {}, _alignMap2[Align.LEFT] = 0, _alignMap2[Align.CENTER] = -50, _alignMap2[Align.RIGHT] = -100, _alignMap2);
  var align = settings.align !== undefined ? getAlignValue(settings.align) : Align.CENTER;
  return alignMap[align];
};

var getPositioningY = function getPositioningY(settings) {
  return {
    position: getYPositionPercentage(settings.line),
    offset: getYOffsetPercentage(settings.line)
  };
};

var getYPositionPercentage = function getYPositionPercentage(lineSetting) {
  return getPercentageValue(lineSetting);
};

var getYOffsetPercentage = function getYOffsetPercentage(lineSetting) {
  var _lineAlignmentMap;

  var getLineAlignment = function getLineAlignment(line) {
    var positionRegex = /,(start|center|end)/;
    var matches = positionRegex.exec(line);

    if (!Array.isArray(matches) || matches.length < 2) {
      return null;
    }

    return matches[1];
  };

  var lineAlignmentMap = (_lineAlignmentMap = {}, _lineAlignmentMap[LineAlignment.START] = 0, _lineAlignmentMap[LineAlignment.CENTER] = -50, _lineAlignmentMap[LineAlignment.END] = -100, _lineAlignmentMap);

  if (lineSetting === undefined) {
    return lineAlignmentMap[LineAlignment.START];
  }

  var lineAlignment = getLineAlignment(lineSetting);
  return lineAlignment !== null ? lineAlignmentMap[lineAlignment] : lineAlignmentMap[LineAlignment.START];
};

var getAlignValue = function getAlignValue(alignSetting) {
  switch (alignSetting) {
    case "left":
    case "start":
      return "left";

    case "right":
    case "end":
      return "right";

    default:
      return "center";
  }
};

var getSizePercentage = function getSizePercentage(sizeSetting) {
  var defaultSize = 100;
  return getPercentageValueOrDefault(sizeSetting, defaultSize);
};

var getPercentageValueOrDefault = function getPercentageValueOrDefault(percentageString, defaultValue) {
  var value = getPercentageValue(percentageString);
  return value !== null ? value : defaultValue;
};

var getPercentageValue = function getPercentageValue(percentageString) {
  if (percentageString === undefined) {
    return null;
  }

  var percentageValueRegex = /^([\d.]+)%/;
  var matches = percentageValueRegex.exec(percentageString);

  if (!Array.isArray(matches) || matches.length < 2) {
    return null;
  }

  return parseInt(matches[1], 10);
};
;// CONCATENATED MODULE: ./src/parsers/texttracks/webvtt/html/to_html.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Parse cue block into an object with the following properties:
 *   - start {number}: start time at which the cue should be displayed
 *   - end {number}: end time at which the cue should be displayed
 *   - element {HTMLElement}: the cue text, translated into an HTMLElement
 *
 * Returns undefined if the cue block could not be parsed.
 * @param {Array.<string>} cueBlock
 * @param {Number} timeOffset
 * @param {Array.<Object>} classes
 * @returns {Object|undefined}
 */

function toHTML(cueObj, styling) {
  var start = cueObj.start,
      end = cueObj.end,
      settings = cueObj.settings,
      header = cueObj.header,
      payload = cueObj.payload;
  var region = document.createElement("div");
  var regionAttr = document.createAttribute("style");
  regionAttr.value = "width:100%;" + "height:100%;" + "display:flex;" + "flex-direction:column;" + "justify-content:flex-end;" + "align-items:center;";
  region.setAttributeNode(regionAttr); // Get content, format and apply style.

  var pElement = document.createElement("p");
  var pAttr = createStyleAttribute(settings);
  pElement.setAttributeNode(pAttr);
  var spanElement = document.createElement("span");
  var attr = document.createAttribute("style"); // set color and background-color default values, as indicated in:
  // https://www.w3.org/TR/webvtt1/#applying-css-properties

  attr.value = "background-color:rgba(0,0,0,0.8);" + "color:white;";
  spanElement.setAttributeNode(attr);
  var global = styling.global,
      classes = styling.classes;
  var localStyle = (0,is_non_empty_string/* default */.Z)(header) ? classes[header] : undefined;
  var styles = [global, localStyle].filter(function (s) {
    return s !== undefined;
  }).join("");
  attr.value += styles;
  spanElement.setAttributeNode(attr);
  convertPayloadToHTML(payload.join("\n"), classes).forEach(function (element) {
    spanElement.appendChild(element);
  });
  region.appendChild(pElement);
  pElement.appendChild(spanElement);
  return {
    start: start,
    end: end,
    element: region
  };
}
;// CONCATENATED MODULE: ./src/parsers/texttracks/webvtt/html/parse_webvtt_to_div.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */






/**
 * Parse WebVTT from text. Returns an array with:
 * - start : start of current cue, in seconds
 * - end : end of current cue, in seconds
 * - content : HTML formatted cue.
 *
 * Global style is parsed and applied to div element.
 * Specific style is parsed and applied to class element.
 *
 * @throws Error - Throws if the given WebVTT string is invalid.
 * @param {string} text - The whole webvtt subtitles to parse
 * @param {Number} timeOffset - Offset to add to start and end times, in seconds
 * @return {Array.<Object>}
 */

function parseWebVTT(text, timeOffset) {
  var newLineChar = /\r\n|\n|\r/g; // CRLF|LF|CR

  var linified = text.split(newLineChar);
  var cuesArray = [];

  if (/^WEBVTT( |\t|\n|\r|$)/.exec(linified[0]) === null) {
    throw new Error("Can't parse WebVTT: Invalid File.");
  }

  var firstLineAfterHeader = (0,utils/* getFirstLineAfterHeader */.yE)(linified);
  var styleBlocks = getStyleBlocks(linified, firstLineAfterHeader);
  var cueBlocks = (0,get_cue_blocks/* default */.Z)(linified, firstLineAfterHeader);
  var styles = parseStyleBlocks(styleBlocks);

  for (var i = 0; i < cueBlocks.length; i++) {
    var cueObject = (0,parse_cue_block/* default */.Z)(cueBlocks[i], timeOffset);

    if (cueObject != null) {
      var htmlCue = toHTML(cueObject, styles);
      cuesArray.push(htmlCue);
    }
  }

  return cuesArray;
}
;// CONCATENATED MODULE: ./src/parsers/texttracks/webvtt/html/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * /!\ This file is feature-switchable.
 * It always should be imported through the `features` object.
 */

/* harmony default export */ const html = (parseWebVTT);

/***/ }),

/***/ 9405:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Z": () => /* binding */ webvtt_native
});

// EXTERNAL MODULE: ./src/compat/is_vtt_cue.ts
var is_vtt_cue = __webpack_require__(1988);
// EXTERNAL MODULE: ./src/parsers/texttracks/webvtt/get_cue_blocks.ts
var get_cue_blocks = __webpack_require__(1138);
// EXTERNAL MODULE: ./src/parsers/texttracks/webvtt/parse_cue_block.ts + 1 modules
var parse_cue_block = __webpack_require__(9525);
// EXTERNAL MODULE: ./src/parsers/texttracks/webvtt/utils.ts
var utils = __webpack_require__(360);
// EXTERNAL MODULE: ./src/utils/array_includes.ts
var array_includes = __webpack_require__(7714);
// EXTERNAL MODULE: ./src/utils/is_non_empty_string.ts
var is_non_empty_string = __webpack_require__(6923);
;// CONCATENATED MODULE: ./src/parsers/texttracks/webvtt/native/set_settings_on_cue.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Add the corresponding settings on the given cue.
 * /!\ Mutates the cue given.
 * @param {Object} settings - settings for the cue, as a key-value object.
 * @param {ICompatVTTCue|TextTrackCue} cue
 */

function setSettingsOnCue(settings, cue) {
  if ((0,is_non_empty_string/* default */.Z)(settings.vertical) && (settings.vertical === "rl" || settings.vertical === "lr")) {
    cue.vertical = settings.vertical;
  }

  if ((0,is_non_empty_string/* default */.Z)(settings.line)) {
    // Capture groups:
    //   1 -> percentage position
    //   2 -> optional decimals from percentage position
    //   3 -> optional follow-up of the string indicating alignment value
    //   4 -> alignment value
    var percentagePosition = /^(\d+(\.\d+)?)%(,([a-z]+))?/;
    var percentageMatches = percentagePosition.exec(settings.line);

    if (Array.isArray(percentageMatches)) {
      cue.line = Number(percentageMatches[1]);
      cue.snapToLines = false;

      if ((0,array_includes/* default */.Z)(["start", "center", "end"], percentageMatches[4])) {
        cue.lineAlign = percentageMatches[4];
      }
    } else {
      // Capture groups:
      //   1 -> line number
      //   2 -> optional follow-up of the string indicating alignment value
      //   3 -> alignment value
      var linePosition = /^(-?\d+)(,([a-z]+))?/;
      var lineMatches = linePosition.exec(settings.line);

      if (Array.isArray(lineMatches)) {
        cue.line = Number(lineMatches[1]);
        cue.snapToLines = true;

        if ((0,array_includes/* default */.Z)(["start", "center", "end"], lineMatches[3])) {
          cue.lineAlign = lineMatches[3];
        }
      }
    }
  }

  if ((0,is_non_empty_string/* default */.Z)(settings.position)) {
    var positionRegex = /^([\d\.]+)%(?:,(line-left|line-right|center))?$/;
    var positionArr = positionRegex.exec(settings.position);

    if (Array.isArray(positionArr) && positionArr.length >= 2) {
      var position = parseInt(positionArr[1], 10);

      if (!isNaN(position)) {
        cue.position = position;

        if (positionArr[2] !== undefined) {
          cue.positionAlign = positionArr[2];
        }
      }
    }
  }

  if ((0,is_non_empty_string/* default */.Z)(settings.size)) {
    cue.size = settings.size;
  }

  if (typeof settings.align === "string" && (0,array_includes/* default */.Z)(["start", "center", "end", "left"], settings.align)) {
    cue.align = settings.align;
  }
}
// EXTERNAL MODULE: ./src/compat/make_vtt_cue.ts
var make_vtt_cue = __webpack_require__(7253);
;// CONCATENATED MODULE: ./src/parsers/texttracks/webvtt/native/to_native_cue.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @param {Object} cue Object
 * @returns {TextTrackCue|ICompatVTTCue|null}
 */

function toNativeCue(cueObj) {
  var start = cueObj.start,
      end = cueObj.end,
      payload = cueObj.payload;
  var text = payload.join("\n");
  return (0,make_vtt_cue/* default */.Z)(start, end, text);
}
;// CONCATENATED MODULE: ./src/parsers/texttracks/webvtt/native/parse_vtt_to_cues.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * /!\ This file is feature-switchable.
 * It always should be imported through the `features` object.
 */





 // Simple VTT to ICompatVTTCue parser:
// Just parse cues and associated settings.
// Does not take into consideration STYLE and REGION blocks.

/**
 * Parse whole WEBVTT file into an array of cues, to be inserted in a video's
 * TrackElement.
 * @param {string} vttStr
 * @param {Number} timeOffset
 * @returns {Array.<ICompatVTTCue|TextTrackCue>}
 */

function parseVTTStringToVTTCues(vttStr, timeOffset) {
  // WEBVTT authorize CRLF, LF or CR as line terminators
  var lines = vttStr.split(/\r\n|\n|\r/);

  if (!/^WEBVTT($| |\t)/.test(lines[0])) {
    throw new Error("Can't parse WebVTT: Invalid file.");
  }

  var firstLineAfterHeader = (0,utils/* getFirstLineAfterHeader */.yE)(lines);
  var cueBlocks = (0,get_cue_blocks/* default */.Z)(lines, firstLineAfterHeader);
  var cues = [];

  for (var i = 0; i < cueBlocks.length; i++) {
    var cueObject = (0,parse_cue_block/* default */.Z)(cueBlocks[i], timeOffset);

    if (cueObject != null) {
      var nativeCue = toNativeCue(cueObject);

      if (nativeCue != null) {
        if ((0,is_vtt_cue/* default */.Z)(nativeCue)) {
          setSettingsOnCue(cueObject.settings, nativeCue);
        }

        cues.push(nativeCue);
      }
    }
  }

  return cues;
}
;// CONCATENATED MODULE: ./src/parsers/texttracks/webvtt/native/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * /!\ This file is feature-switchable.
 * It always should be imported through the `features` object.
 */

/* harmony default export */ const webvtt_native = (parseVTTStringToVTTCues);

/***/ }),

/***/ 9525:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Z": () => /* binding */ parseCueBlock
});

// EXTERNAL MODULE: ./src/utils/is_non_empty_string.ts
var is_non_empty_string = __webpack_require__(6923);
;// CONCATENATED MODULE: ./src/parsers/texttracks/webvtt/parse_timestamp.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Parse a single webvtt timestamp into seconds
 * @param {string} timestampString
 * @returns {Number|undefined}
 */

function parseTimestamp(timestampString) {
  var splittedTS = timestampString.split(":").reverse();

  if ((0,is_non_empty_string/* default */.Z)(splittedTS[2]) || (0,is_non_empty_string/* default */.Z)(splittedTS[1])) {
    var hours = (0,is_non_empty_string/* default */.Z)(splittedTS[2]) ? parseInt(splittedTS[2], 10) : 0;
    var minutes = parseInt(splittedTS[1], 10);
    var seconds = parseFloat(splittedTS[0].replace(",", "."));

    if (isNaN(hours) || isNaN(minutes) || isNaN(seconds)) {
      return undefined;
    }

    return hours * 60 * 60 + minutes * 60 + seconds;
  }
}
;// CONCATENATED MODULE: ./src/parsers/texttracks/webvtt/parse_cue_block.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Parse the settings part of a cue, into key-value object.
 * @param {string} settingsString
 * @returns {Object}
 */

function parseSettings(settingsString) {
  var splittedSettings = settingsString.split(/ |\t/);
  return splittedSettings.reduce(function (acc, setting) {
    var splittedSetting = setting.split(":");

    if (splittedSetting.length === 2) {
      acc[splittedSetting[0]] = splittedSetting[1];
    }

    return acc;
  }, {});
}
/**
 * Parse the line containing the timestamp and settings in a cue.
 * The returned object has the following properties:
 *   - start {Number}: start of the cue, in seconds
 *   - end {Number}: end of the cue, in seconds
 *   - settings {Object}: settings for the cue as a key-value object.
 * @param {string} timeString
 * @returns {Object|null}
 */


function parseTimeAndSettings(timeString) {
  // RegExp for the timestamps + settings line.
  // Capture groups:
  //   1 -> start timestamp
  //   2 -> end timestamp
  //   3 - settings
  var lineRegex = /^([\d:.]+)[ |\t]+-->[ |\t]+([\d:.]+)[ |\t]*(.*)$/;
  var matches = lineRegex.exec(timeString);

  if (matches === null) {
    return null;
  }

  var start = parseTimestamp(matches[1]);
  var end = parseTimestamp(matches[2]);

  if (start == null || end == null) {
    return null;
  }

  var settings = parseSettings(matches[3]);
  return {
    start: start,
    end: end,
    settings: settings
  };
}
/**
 * Parse cue block into a cue object which contains:
 *   - start {number}: the start of the cue as a timestamp in seconds
 *   - end {number}: the end of the cue as a timestamp in seconds
 *   - header {string|undefined}: The optional cue identifier
 *   - payload {Array.<string>}: the payload of the cue
 * @param {Array.<string>} cueLines
 * @param {Number} timeOffset
 * @returns {Object}
 */


function parseCueBlock(cueLines, timeOffset) {
  var timingRegexp = /-->/;
  var timeString;
  var payload;
  var header;

  if (!timingRegexp.test(cueLines[0])) {
    if (!timingRegexp.test(cueLines[1])) {
      // not a cue
      return null;
    }

    header = cueLines[0];
    timeString = cueLines[1];
    payload = cueLines.slice(2, cueLines.length);
  } else {
    timeString = cueLines[0];
    payload = cueLines.slice(1, cueLines.length);
  }

  var timeAndSettings = parseTimeAndSettings(timeString);

  if (timeAndSettings === null) {
    return null;
  }

  var start = timeAndSettings.start,
      end = timeAndSettings.end,
      settings = timeAndSettings.settings;
  return {
    start: start + timeOffset,
    end: end + timeOffset,
    settings: settings,
    payload: payload,
    header: header
  };
}

/***/ }),

/***/ 360:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "yE": () => /* binding */ getFirstLineAfterHeader,
/* harmony export */   "tq": () => /* binding */ isStartOfCueBlock,
/* harmony export */   "JF": () => /* binding */ isStartOfStyleBlock,
/* harmony export */   "$4": () => /* binding */ findEndOfCueBlock
/* harmony export */ });
/* unused harmony exports isStartOfNoteBlock, isStartOfRegionBlock */
/* harmony import */ var _utils_is_non_empty_string__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6923);
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns first line after the WEBVTT header.
 * That is, the line after the first blank line after the first line!
 * @param {Array.<string>} linified
 * @returns {Number}
 */

function getFirstLineAfterHeader(linified) {
  var i = 0;

  while (i < linified.length) {
    if (linified[i] === "") {
      return i + 1;
    }

    i++;
  }

  return i;
}
/**
 * Returns true if the given line looks like the beginning of a Style block.
 * @param {string} text
 * @returns {Boolean}
 */


function isStartOfStyleBlock(lines, index) {
  return typeof lines[index] === "string" && /^STYLE( .*)?$/g.test(lines[index]) && ( // A cue identifer can also contain "STYLE". Check that we have no timings
  // on the second line
  lines[index + 1] === undefined || lines[index + 1].indexOf("-->") < 0);
}
/**
 * Returns true if the given line looks like the beginning of a comment block.
 * @param {string} text
 * @returns {Boolean}
 */


function isStartOfNoteBlock(lines, index) {
  return typeof lines[index] === "string" && /^NOTE( .*)?$/g.test(lines[index]) && ( // A cue identifer can also contain "NOTE". Check that we have no timings
  // on the second line
  lines[index + 1] === undefined || lines[index + 1].indexOf("-->") < 0);
}
/**
 * Returns true if the given line looks like the beginning of a region block.
 * @param {string} text
 * @returns {Boolean}
 */


function isStartOfRegionBlock(lines, index) {
  return typeof lines[index] === "string" && /^REGION( .*)?$/g.test(lines[index]) && ( // A cue identifer can also contain "REGION". Check that we have no timings
  // on the second line
  lines[index + 1] === undefined || lines[index + 1].indexOf("-->") < 0);
}
/**
 * Returns true if the line given looks like the beginning of a cue.
 * You should provide to this function only lines following "empty" lines.
 * @param {Array.<string>} lines
 * @param {number} index
 * @returns {Boolean}
 */


function isStartOfCueBlock(lines, index) {
  // checked cases:
  //   - empty lines
  //   - start of a comment
  //   - start of a region
  //   - start of a style
  // Anything else whose first or second line is a timestamp line is a cue.
  var firstLine = lines[index];

  if (firstLine === undefined || firstLine === "" || isStartOfStyleBlock(lines, index) || isStartOfRegionBlock(lines, index) || isStartOfNoteBlock(lines, index)) {
    return false;
  }

  if (firstLine.indexOf("-->") >= 0) {
    return true;
  }

  var secondLine = lines[index + 1];
  return secondLine !== undefined && secondLine.indexOf("-->") >= 0;
}
/**
 * Find end of current WebVTT cue block.
 * @param {Array<string>} linified
 * @param {number} startOfCueBlock
 * @returns {number}
 */


function findEndOfCueBlock(linified, startOfCueBlock) {
  var firstEmptyLineIndex = startOfCueBlock + 1; // continue incrementing i until either:
  //   - empty line
  //   - end

  while ((0,_utils_is_non_empty_string__WEBPACK_IMPORTED_MODULE_0__/* .default */ .Z)(linified[firstEmptyLineIndex])) {
    firstEmptyLineIndex++;
  }

  return firstEmptyLineIndex;
}



/***/ }),

/***/ 1459:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Z": () => /* binding */ transports_dash
});

// EXTERNAL MODULE: ./src/transports/utils/text_manifest_loader.ts + 1 modules
var text_manifest_loader = __webpack_require__(7278);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/of.js
var of = __webpack_require__(8170);
// EXTERNAL MODULE: ./src/features/index.ts
var features = __webpack_require__(7874);
// EXTERNAL MODULE: ./src/utils/request/index.ts + 1 modules
var request = __webpack_require__(4597);
// EXTERNAL MODULE: ./src/utils/take_first_set.ts
var take_first_set = __webpack_require__(5278);
;// CONCATENATED MODULE: ./src/transports/dash/image_pipelines.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * @param {Object} args
 * @returns {Observable}
 */

function imageLoader(_ref) {
  var segment = _ref.segment,
      url = _ref.url;

  if (segment.isInit || url === null) {
    return (0,of.of)({
      type: "data-created",
      value: {
        responseData: null
      }
    });
  }

  return (0,request/* default */.ZP)({
    url: url,
    responseType: "arraybuffer",
    sendProgressEvents: true
  });
}
/**
 * @param {Object} args
 * @returns {Observable}
 */

function imageParser(_ref2) {
  var response = _ref2.response,
      content = _ref2.content;
  var segment = content.segment,
      period = content.period;
  var data = response.data,
      isChunked = response.isChunked;

  if (content.segment.isInit) {
    // image init segment has no use
    return (0,of.of)({
      type: "parsed-init-segment",
      value: {
        initializationData: null,
        segmentProtections: [],
        initTimescale: undefined
      }
    });
  }

  if (isChunked) {
    throw new Error("Image data should not be downloaded in chunks");
  }

  var chunkOffset = (0,take_first_set/* default */.Z)(segment.timestampOffset, 0); // TODO image Parsing should be more on the buffer side, no?

  if (data === null || features/* default.imageParser */.Z.imageParser === null) {
    return (0,of.of)({
      type: "parsed-segment",
      value: {
        chunkData: null,
        chunkInfos: {
          duration: segment.duration,
          time: segment.time
        },
        chunkOffset: chunkOffset,
        appendWindow: [period.start, period.end]
      }
    });
  }

  var bifObject = features/* default.imageParser */.Z.imageParser(new Uint8Array(data));
  var thumbsData = bifObject.thumbs;
  return (0,of.of)({
    type: "parsed-segment",
    value: {
      chunkData: {
        data: thumbsData,
        start: 0,
        end: Number.MAX_VALUE,
        timescale: 1,
        type: "bif"
      },
      chunkInfos: {
        time: 0,
        duration: Number.MAX_VALUE,
        timescale: bifObject.timescale
      },
      chunkOffset: chunkOffset,
      appendWindow: [period.start, period.end]
    }
  });
}
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/concat.js
var concat = __webpack_require__(9795);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/combineLatest.js
var combineLatest = __webpack_require__(5142);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/filter.js
var filter = __webpack_require__(6008);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/map.js
var map = __webpack_require__(5709);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/mergeMap.js
var mergeMap = __webpack_require__(7746);
// EXTERNAL MODULE: ./src/manifest/index.ts + 10 modules
var src_manifest = __webpack_require__(1966);
// EXTERNAL MODULE: ./src/config.ts
var config = __webpack_require__(944);
// EXTERNAL MODULE: ./src/log.ts + 1 modules
var log = __webpack_require__(3887);
// EXTERNAL MODULE: ./src/utils/array_find.ts
var array_find = __webpack_require__(3274);
// EXTERNAL MODULE: ./src/utils/resolve_url.ts
var resolve_url = __webpack_require__(9829);
;// CONCATENATED MODULE: ./src/parsers/manifest/dash/extract_minimum_availability_time_offset.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * From 0 to N baseURL elements takes the minimum availabilityTimeOffset
 * possible.
 *
 * `0` if no baseURL was given (which means `no delay added`: coherent with how
 * this value is used).
 *
 * Taking the minimum time allow to simplify its processing:
 * Instead of having multiple URL each with a different pool of available
 * segment at a given instant, let's always consider every URLs by aligning with
 * the one with the most segment.
 *
 * @param {Array.<Object>} baseURLs
 */
function extractMinimumAvailabilityTimeOffset(baseURLs) {
  return baseURLs.length === 0 ? 0 : baseURLs.reduce(function (acc, baseURL) {
    var _a;

    return Math.min((_a = baseURL.attributes.availabilityTimeOffset) !== null && _a !== void 0 ? _a : 0, acc);
  }, Infinity);
}
;// CONCATENATED MODULE: ./src/parsers/manifest/dash/get_clock_offset.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Get difference between the server's clock, in milliseconds and the return of
 * the JS function `performance.now`.
 * This property allows to calculate the server time at any moment.
 *
 * `undefined` if we could not define such offset (in which case, you could have
 * to rely on the user's clock instead).
 *
 * For example, a response of 1000 would mean that performance.now() is 1 second
 * behind the server's time.
 * @param {string} serverClock
 * @returns {number|undefined}
 */

function getClockOffset(serverClock) {
  var httpOffset = Date.parse(serverClock) - performance.now();

  if (isNaN(httpOffset)) {
    log/* default.warn */.Z.warn("DASH Parser: Invalid clock received: ", serverClock);
    return undefined;
  }

  return httpOffset;
}
;// CONCATENATED MODULE: ./src/parsers/manifest/dash/get_http_utc-timing_url.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @param {Object} mpdIR
 * @returns {string|undefined}
 */
function getHTTPUTCTimingURL(mpdIR) {
  var UTCTimingHTTP = mpdIR.children.utcTimings.filter(function (utcTiming) {
    return utcTiming.schemeIdUri === "urn:mpeg:dash:utc:http-iso:2014" && utcTiming.value !== undefined;
  });
  return UTCTimingHTTP.length > 0 ? UTCTimingHTTP[0].value : undefined;
}
;// CONCATENATED MODULE: ./src/parsers/manifest/utils/get_last_time_from_adaptation.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns "last time of reference" from the adaptation given, considering a
 * dynamic content.
 * Undefined if a time could not be found.
 * Null if the Adaptation has no segments (it could be that it didn't started or
 * that it already finished for example).
 *
 * We consider the earliest last time from every representations in the given
 * adaptation.
 * @param {Object} adaptation
 * @returns {Number|undefined|null}
 */
function getLastPositionFromAdaptation(adaptation) {
  var representations = adaptation.representations;
  var min = null;

  for (var i = 0; i < representations.length; i++) {
    var lastPosition = representations[i].index.getLastPosition();

    if (lastPosition === undefined) {
      // we cannot tell
      return undefined;
    }

    if (lastPosition !== null) {
      min = min == null ? lastPosition : Math.min(min, lastPosition);
    }
  }

  if (min === null) {
    // It means that all positions were null === no segments (yet?)
    return null;
  }

  return min;
}
;// CONCATENATED MODULE: ./src/parsers/manifest/utils/get_maximum_position.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * @param {Object} manifest
 * @returns {number | undefined}
 */

function getMaximumPosition(periods) {
  for (var i = periods.length - 1; i >= 0; i--) {
    var periodAdaptations = periods[i].adaptations;
    var firstAudioAdaptationFromPeriod = periodAdaptations.audio === undefined ? undefined : periodAdaptations.audio[0];
    var firstVideoAdaptationFromPeriod = periodAdaptations.video === undefined ? undefined : periodAdaptations.video[0];

    if (firstAudioAdaptationFromPeriod !== undefined || firstVideoAdaptationFromPeriod !== undefined) {
      // null == no segment
      var maximumAudioPosition = null;
      var maximumVideoPosition = null;

      if (firstAudioAdaptationFromPeriod !== undefined) {
        var lastPosition = getLastPositionFromAdaptation(firstAudioAdaptationFromPeriod);

        if (lastPosition === undefined) {
          return undefined;
        }

        maximumAudioPosition = lastPosition;
      }

      if (firstVideoAdaptationFromPeriod !== undefined) {
        var _lastPosition = getLastPositionFromAdaptation(firstVideoAdaptationFromPeriod);

        if (_lastPosition === undefined) {
          return undefined;
        }

        maximumVideoPosition = _lastPosition;
      }

      if (firstAudioAdaptationFromPeriod !== undefined && maximumAudioPosition === null || firstVideoAdaptationFromPeriod !== undefined && maximumVideoPosition === null) {
        log/* default.info */.Z.info("Parser utils: found Period with no segment. ", "Going to previous one to calculate last position");
        return undefined;
      }

      if (maximumVideoPosition !== null) {
        if (maximumAudioPosition !== null) {
          return Math.min(maximumAudioPosition, maximumVideoPosition);
        }

        return maximumVideoPosition;
      }

      if (maximumAudioPosition !== null) {
        return maximumAudioPosition;
      }
    }
  }
}
;// CONCATENATED MODULE: ./src/parsers/manifest/utils/get_first_time_from_adaptation.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns "first time of reference" from the adaptation given, considering a
 * dynamic content.
 * Undefined if a time could not be found.
 *
 * We consider the latest first time from every representations in the given
 * adaptation.
 * @param {Object} adaptation
 * @returns {Number|undefined}
 */
function getFirstPositionFromAdaptation(adaptation) {
  var representations = adaptation.representations;
  var max = null;

  for (var i = 0; i < representations.length; i++) {
    var firstPosition = representations[i].index.getFirstPosition();

    if (firstPosition === undefined) {
      // we cannot tell
      return undefined;
    }

    if (firstPosition !== null) {
      max = max == null ? firstPosition : Math.max(max, firstPosition);
    }
  }

  if (max === null) {
    // It means that all positions were null === no segments (yet?)
    return null;
  }

  return max;
}
;// CONCATENATED MODULE: ./src/parsers/manifest/utils/get_minimum_position.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * @param {Object} manifest
 * @returns {number | undefined}
 */

function getMinimumPosition(periods) {
  for (var i = 0; i <= periods.length - 1; i++) {
    var periodAdaptations = periods[i].adaptations;
    var firstAudioAdaptationFromPeriod = periodAdaptations.audio === undefined ? undefined : periodAdaptations.audio[0];
    var firstVideoAdaptationFromPeriod = periodAdaptations.video === undefined ? undefined : periodAdaptations.video[0];

    if (firstAudioAdaptationFromPeriod !== undefined || firstVideoAdaptationFromPeriod !== undefined) {
      // null == no segment
      var minimumAudioPosition = null;
      var minimumVideoPosition = null;

      if (firstAudioAdaptationFromPeriod !== undefined) {
        var firstPosition = getFirstPositionFromAdaptation(firstAudioAdaptationFromPeriod);

        if (firstPosition === undefined) {
          return undefined;
        }

        minimumAudioPosition = firstPosition;
      }

      if (firstVideoAdaptationFromPeriod !== undefined) {
        var _firstPosition = getFirstPositionFromAdaptation(firstVideoAdaptationFromPeriod);

        if (_firstPosition === undefined) {
          return undefined;
        }

        minimumVideoPosition = _firstPosition;
      }

      if (firstAudioAdaptationFromPeriod !== undefined && minimumAudioPosition === null || firstVideoAdaptationFromPeriod !== undefined && minimumVideoPosition === null) {
        log/* default.info */.Z.info("Parser utils: found Period with no segment. ", "Going to next one to calculate first position");
        return undefined;
      }

      if (minimumVideoPosition !== null) {
        if (minimumAudioPosition !== null) {
          return Math.max(minimumAudioPosition, minimumVideoPosition);
        }

        return minimumVideoPosition;
      }

      if (minimumAudioPosition !== null) {
        return minimumAudioPosition;
      }
    }
  }
}
;// CONCATENATED MODULE: ./src/parsers/manifest/dash/get_minimum_and_maximum_positions.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * @param {Object} periods
 * @returns {Array.<number>}
 */

function getMinimumAndMaximumPosition(periods) {
  if (periods.length === 0) {
    throw new Error("DASH Parser: no period available for a dynamic content");
  }

  return [getMinimumPosition(periods), getMaximumPosition(periods)];
}
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/assertThisInitialized.js
var assertThisInitialized = __webpack_require__(1506);
var assertThisInitialized_default = /*#__PURE__*/__webpack_require__.n(assertThisInitialized);
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/inheritsLoose.js
var inheritsLoose = __webpack_require__(5354);
var inheritsLoose_default = /*#__PURE__*/__webpack_require__.n(inheritsLoose);
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/wrapNativeSuper.js
var wrapNativeSuper = __webpack_require__(5957);
var wrapNativeSuper_default = /*#__PURE__*/__webpack_require__.n(wrapNativeSuper);
// EXTERNAL MODULE: ./src/utils/base64.ts
var base64 = __webpack_require__(9689);
// EXTERNAL MODULE: ./src/utils/is_non_empty_string.ts
var is_non_empty_string = __webpack_require__(6923);
;// CONCATENATED MODULE: ./src/parsers/manifest/dash/node_parsers/utils.ts




/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// XML-Schema

/* eslint-disable max-len */
// <http://standards.iso.org/ittf/PubliclyAvailableStandards/MPEG-DASH_schema_files/DASH-MPD.xsd>

/* eslint-enable max-len */



var iso8601Duration = /^P(([\d.]*)Y)?(([\d.]*)M)?(([\d.]*)D)?T?(([\d.]*)H)?(([\d.]*)M)?(([\d.]*)S)?/;
var rangeRe = /([0-9]+)-([0-9]+)/;
/**
 * Parse MPD boolean attributes.
 *
 * The returned value is a tuple of two elements where:
 *   1. the first value is the parsed boolean - or `null` if we could not parse
 *      it
 *   2. the second value is a possible error encountered while parsing this
 *      value - set to `null` if no error was encountered.
 * @param {string} val - The value to parse
 * @param {string} displayName - The name of the property. Used for error
 * formatting.
 * @returns {Array.<Boolean | Error | null>}
 */

function parseBoolean(val, displayName) {
  if (val === "true") {
    return [true, null];
  }

  if (val === "false") {
    return [false, null];
  }

  var error = new MPDError("`" + displayName + "` property is not a boolean value but \"" + val + "\"");
  return [false, error];
}
/**
 * Parse MPD integer attributes.
 *
 * The returned value is a tuple of two elements where:
 *   1. the first value is the parsed boolean - or `null` if we could not parse
 *      it
 *   2. the second value is a possible error encountered while parsing this
 *      value - set to `null` if no error was encountered.
 * @param {string} val - The value to parse
 * @param {string} displayName - The name of the property. Used for error
 * formatting.
 * @returns {Array.<number | Error | null>}
 */


function parseMPDInteger(val, displayName) {
  var toInt = parseInt(val, 10);

  if (isNaN(toInt)) {
    var error = new MPDError("`" + displayName + "` property is not an integer value but \"" + val + "\"");
    return [null, error];
  }

  return [toInt, null];
}
/**
 * Parse MPD float attributes.
 *
 * The returned value is a tuple of two elements where:
 *   1. the first value is the parsed boolean - or `null` if we could not parse
 *      it
 *   2. the second value is a possible error encountered while parsing this
 *      value - set to `null` if no error was encountered.
 * @param {string} val - The value to parse
 * @param {string} displayName - The name of the property. Used for error
 * formatting.
 * @returns {Array.<number | Error | null>}
 */


function parseMPDFloat(val, displayName) {
  var toInt = parseFloat(val);

  if (isNaN(toInt)) {
    var error = new MPDError("`" + displayName + "` property is not an integer value but \"" + val + "\"");
    return [null, error];
  }

  return [toInt, null];
}
/**
 * Parse MPD attributes which are either integer or boolean values.
 *
 * The returned value is a tuple of two elements where:
 *   1. the first value is the parsed value - or `null` if we could not parse
 *      it
 *   2. the second value is a possible error encountered while parsing this
 *      value - set to `null` if no error was encountered.
 * @param {string} val - The value to parse
 * @param {string} displayName - The name of the property. Used for error
 * formatting.
 * @returns {Array.<Boolean | number | Error | null>}
 */


function parseIntOrBoolean(val, displayName) {
  if (val === "true") {
    return [true, null];
  }

  if (val === "false") {
    return [false, null];
  }

  var toInt = parseInt(val, 10);

  if (isNaN(toInt)) {
    var error = new MPDError("`" + displayName + "` property is not a boolean nor an integer but \"" + val + "\"");
    return [null, error];
  }

  return [toInt, null];
}
/**
 * Parse MPD date attributes.
 *
 * The returned value is a tuple of two elements where:
 *   1. the first value is the parsed value - or `null` if we could not parse
 *      it
 *   2. the second value is a possible error encountered while parsing this
 *      value - set to `null` if no error was encountered.
 * @param {string} val - The value to parse
 * @param {string} displayName - The name of the property. Used for error
 * formatting.
 * @returns {Array.<Date | null | Error>}
 */


function parseDateTime(val, displayName) {
  var parsed = Date.parse(val);

  if (isNaN(parsed)) {
    var error = new MPDError("`" + displayName + "` is in an invalid date format: \"" + val + "\"");
    return [null, error];
  }

  return [new Date(Date.parse(val)).getTime() / 1000, null];
}
/**
 * Parse MPD ISO8601 duration attributes into seconds.
 *
 * The returned value is a tuple of two elements where:
 *   1. the first value is the parsed value - or `null` if we could not parse
 *      it
 *   2. the second value is a possible error encountered while parsing this
 *      value - set to `null` if no error was encountered.
 * @param {string} val - The value to parse
 * @param {string} displayName - The name of the property. Used for error
 * formatting.
 * @returns {Array.<number | Error | null>}
 */


function parseDuration(val, displayName) {
  if (!(0,is_non_empty_string/* default */.Z)(val)) {
    var error = new MPDError("`" + displayName + "` property is empty");
    return [0, error];
  }

  var match = iso8601Duration.exec(val);

  if (match === null) {
    var _error = new MPDError("`" + displayName + "` property has an unrecognized format \"" + val + "\"");

    return [null, _error];
  }

  var duration = parseFloat((0,is_non_empty_string/* default */.Z)(match[2]) ? match[2] : "0") * 365 * 24 * 60 * 60 + parseFloat((0,is_non_empty_string/* default */.Z)(match[4]) ? match[4] : "0") * 30 * 24 * 60 * 60 + parseFloat((0,is_non_empty_string/* default */.Z)(match[6]) ? match[6] : "0") * 24 * 60 * 60 + parseFloat((0,is_non_empty_string/* default */.Z)(match[8]) ? match[8] : "0") * 60 * 60 + parseFloat((0,is_non_empty_string/* default */.Z)(match[10]) ? match[10] : "0") * 60 + parseFloat((0,is_non_empty_string/* default */.Z)(match[12]) ? match[12] : "0");
  return [duration, null];
}
/**
 * Parse MPD byterange attributes into arrays of two elements: the start and
 * the end.
 *
 * The returned value is a tuple of two elements where:
 *   1. the first value is the parsed value - or `null` if we could not parse
 *      it
 *   2. the second value is a possible error encountered while parsing this
 *      value - set to `null` if no error was encountered.
 * @param {string} val
 * @param {string} displayName
 * @returns {Array.<Array.<number> | Error | null>}
 */


function parseByteRange(val, displayName) {
  var match = rangeRe.exec(val);

  if (match === null) {
    var error = new MPDError("`" + displayName + "` property has an unrecognized format \"" + val + "\"");
    return [null, error];
  } else {
    return [[+match[1], +match[2]], null];
  }
}
/**
 * Parse MPD base64 attribute into an Uint8Array.
 * the end.
 *
 * The returned value is a tuple of two elements where:
 *   1. the first value is the parsed value - or `null` if we could not parse
 *      it
 *   2. the second value is a possible error encountered while parsing this
 *      value - set to `null` if no error was encountered.
 * @param {string} val
 * @param {string} displayName
 * @returns {Uint8Array | Error | null>}
 */


function parseBase64(val, displayName) {
  try {
    return [(0,base64/* base64ToBytes */.K)(val), null];
  } catch (_) {
    var error = new MPDError("`" + displayName + "` is not a valid base64 string: \"" + val + "\"");
    return [null, error];
  }
}
/**
 * @param {Element} root
 * @returns {Object}
 */


function parseScheme(root) {
  var schemeIdUri;
  var value;

  for (var i = 0; i < root.attributes.length; i++) {
    var attribute = root.attributes[i];

    switch (attribute.name) {
      case "schemeIdUri":
        schemeIdUri = attribute.value;
        break;

      case "value":
        value = attribute.value;
        break;
    }
  }

  return {
    schemeIdUri: schemeIdUri,
    value: value
  };
}
/**
 * Create a function to factorize the MPD parsing logic.
 * @param {Object} dest - The destination object which will contain the parsed
 * values.
 * @param {Array.<Error>} warnings - An array which will contain every parsing
 * error encountered.
 * @return {Function}
 */


function ValueParser(dest, warnings) {
  /**
   * Parse a single value and add it to the `dest` objects.
   * If an error arised while parsing, add it at the end of the `warnings` array.
   * @param {string} objKey - The key which will be added to the `dest` object.
   * @param {string} val - The value found in the MPD which we should parse.
   * @param {Function} parsingFn - The parsing function adapted for this value.
   * @param {string} displayName - The name of the key as it appears in the MPD.
   * This is used only in error formatting,
   */
  return function (val, _ref) {
    var asKey = _ref.asKey,
        parser = _ref.parser,
        dashName = _ref.dashName;

    var _parser = parser(val, dashName),
        parsingResult = _parser[0],
        parsingError = _parser[1];

    if (parsingError !== null) {
      log/* default.warn */.Z.warn(parsingError.message);
      warnings.push(parsingError);
    }

    if (parsingResult !== null) {
      dest[asKey] = parsingResult;
    }
  };
}
/**
 * Error arising when parsing the MPD.
 * @class MPDError
 * @extends Error
 */


var MPDError = /*#__PURE__*/function (_Error) {
  inheritsLoose_default()(MPDError, _Error);

  /**
   * @param {string} message
   */
  function MPDError(message) {
    var _this;

    _this = _Error.call(this) || this; // @see https://stackoverflow.com/questions/41102060/typescript-extending-error-class

    Object.setPrototypeOf(assertThisInitialized_default()(_this), MPDError.prototype);
    _this.name = "MPDError";
    _this.message = message;
    return _this;
  }

  return MPDError;
}( /*#__PURE__*/wrapNativeSuper_default()(Error));


;// CONCATENATED MODULE: ./src/parsers/manifest/dash/node_parsers/BaseURL.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Parse an BaseURL element into an BaseURL intermediate
 * representation.
 * @param {Element} adaptationSetElement - The BaseURL root element.
 * @returns {Array.<Object|undefined>}
 */

function parseBaseURL(root) {
  var attributes = {};
  var value = root.textContent;
  var warnings = [];
  var parseValue = ValueParser(attributes, warnings);

  if (value === null || value.length === 0) {
    return [undefined, warnings];
  }

  for (var i = 0; i < root.attributes.length; i++) {
    var attribute = root.attributes[i];

    switch (attribute.name) {
      case "availabilityTimeOffset":
        if (attribute.value === "INF") {
          attributes.availabilityTimeOffset = Infinity;
        } else {
          parseValue(attribute.value, {
            asKey: "availabilityTimeOffset",
            parser: parseMPDInteger,
            dashName: "availabilityTimeOffset"
          });
        }

        break;
    }
  }

  return [{
    value: value,
    attributes: attributes
  }, warnings];
}
;// CONCATENATED MODULE: ./src/parsers/manifest/dash/node_parsers/ContentComponent.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Parse a "ContentComponent" Element in a DASH MPD.
 * @param {Element} root
 * @returns {Object}
 */
function parseContentComponent(root) {
  var ret = {};

  for (var i = 0; i < root.attributes.length; i++) {
    var attribute = root.attributes[i];

    switch (attribute.name) {
      case "id":
        ret.id = attribute.value;
        break;

      case "lang":
        ret.language = attribute.value;
        break;

      case "contentType":
        ret.contentType = attribute.value;
        break;

      case "par":
        ret.par = attribute.value;
        break;
    }
  }

  return ret;
}
// EXTERNAL MODULE: ./src/utils/string_parsing.ts
var string_parsing = __webpack_require__(3635);
;// CONCATENATED MODULE: ./src/parsers/manifest/dash/node_parsers/ContentProtection.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * @param {NodeList} contentProtectionChildren
 * @Returns {Object}
 */

function parseContentProtectionChildren(contentProtectionChildren) {
  var warnings = [];
  var cencPssh = [];

  for (var i = 0; i < contentProtectionChildren.length; i++) {
    if (contentProtectionChildren[i].nodeType === Node.ELEMENT_NODE) {
      var currentElement = contentProtectionChildren[i];

      if (currentElement.nodeName === "cenc:pssh") {
        var content = currentElement.textContent;

        if (content !== null && content.length > 0) {
          var _parseBase = parseBase64(content, "cenc:pssh"),
              toUint8Array = _parseBase[0],
              error = _parseBase[1];

          if (error !== null) {
            log/* default.warn */.Z.warn(error.message);
            warnings.push(error);
          }

          if (toUint8Array !== null) {
            cencPssh.push(toUint8Array);
          }
        }
      }
    }
  }

  return [{
    cencPssh: cencPssh
  }, warnings];
}
/**
 * @param {Element} root
 * @returns {Object}
 */


function parseContentProtectionAttributes(root) {
  var ret = {};

  for (var i = 0; i < root.attributes.length; i++) {
    var attribute = root.attributes[i];

    switch (attribute.name) {
      case "schemeIdUri":
        ret.schemeIdUri = attribute.value;
        break;

      case "value":
        ret.value = attribute.value;
        break;

      case "cenc:default_KID":
        ret.keyId = (0,string_parsing/* hexToBytes */.nr)(attribute.value.replace(/-/g, ""));
    }
  }

  return ret;
}
/**
 * @param {Element} contentProtectionElement
 * @returns {Object}
 */


function parseContentProtection(contentProtectionElement) {
  var _parseContentProtecti = parseContentProtectionChildren(contentProtectionElement.childNodes),
      children = _parseContentProtecti[0],
      childrenWarnings = _parseContentProtecti[1];

  var attributes = parseContentProtectionAttributes(contentProtectionElement);
  return [{
    children: children,
    attributes: attributes
  }, childrenWarnings];
}
;// CONCATENATED MODULE: ./src/parsers/manifest/dash/node_parsers/Initialization.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @param {Element} root
 * @returns {Array.<Object>}
 */

function parseInitialization(root) {
  var parsedInitialization = {};
  var warnings = [];
  var parseValue = ValueParser(parsedInitialization, warnings);

  for (var i = 0; i < root.attributes.length; i++) {
    var attribute = root.attributes[i];

    switch (attribute.name) {
      case "range":
        parseValue(attribute.value, {
          asKey: "range",
          parser: parseByteRange,
          dashName: "range"
        });
        break;

      case "sourceURL":
        parsedInitialization.media = attribute.value;
        break;
    }
  }

  return [parsedInitialization, warnings];
}
;// CONCATENATED MODULE: ./src/parsers/manifest/dash/node_parsers/SegmentBase.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Parse a SegmentBase element into a SegmentBase intermediate representation.
 * @param {Element} root - The SegmentBase root element.
 * @returns {Array}
 */

function parseSegmentBase(root) {
  var attributes = {};
  var warnings = [];
  var parseValue = ValueParser(attributes, warnings);
  var segmentBaseChildren = root.childNodes;

  for (var i = 0; i < segmentBaseChildren.length; i++) {
    if (segmentBaseChildren[i].nodeType === Node.ELEMENT_NODE) {
      var currentNode = segmentBaseChildren[i];

      if (currentNode.nodeName === "Initialization") {
        var _parseInitialization = parseInitialization(currentNode),
            initialization = _parseInitialization[0],
            initializationWarnings = _parseInitialization[1];

        attributes.initialization = initialization;
        warnings = warnings.concat(initializationWarnings);
      }
    }
  }

  for (var _i = 0; _i < root.attributes.length; _i++) {
    var attr = root.attributes[_i];

    switch (attr.name) {
      case "timescale":
        parseValue(attr.value, {
          asKey: "timescale",
          parser: parseMPDInteger,
          dashName: "timescale"
        });
        break;

      case "presentationTimeOffset":
        parseValue(attr.value, {
          asKey: "presentationTimeOffset",
          parser: parseMPDFloat,
          dashName: "presentationTimeOffset"
        });
        break;

      case "indexRange":
        parseValue(attr.value, {
          asKey: "indexRange",
          parser: parseByteRange,
          dashName: "indexRange"
        });
        break;

      case "indexRangeExact":
        parseValue(attr.value, {
          asKey: "indexRangeExact",
          parser: parseBoolean,
          dashName: "indexRangeExact"
        });
        break;

      case "availabilityTimeOffset":
        parseValue(attr.value, {
          asKey: "availabilityTimeOffset",
          parser: parseMPDFloat,
          dashName: "availabilityTimeOffset"
        });
        break;

      case "availabilityTimeComplete":
        parseValue(attr.value, {
          asKey: "availabilityTimeComplete",
          parser: parseBoolean,
          dashName: "availabilityTimeComplete"
        });
        break;

      case "duration":
        parseValue(attr.value, {
          asKey: "duration",
          parser: parseMPDInteger,
          dashName: "duration"
        });
        break;

      case "startNumber":
        parseValue(attr.value, {
          asKey: "startNumber",
          parser: parseMPDInteger,
          dashName: "startNumber"
        });
        break;
    }
  }

  return [attributes, warnings];
}
// EXTERNAL MODULE: ./src/utils/object_assign.ts
var object_assign = __webpack_require__(8026);
;// CONCATENATED MODULE: ./src/parsers/manifest/dash/node_parsers/SegmentURL.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Parse a SegmentURL element into a SegmentURL intermediate
 * representation.
 * @param {Element} root - The SegmentURL root element.
 * @returns {Array}
 */

function parseSegmentURL(root) {
  var parsedSegmentURL = {};
  var warnings = [];
  var parseValue = ValueParser(parsedSegmentURL, warnings);

  for (var i = 0; i < root.attributes.length; i++) {
    var attribute = root.attributes[i];

    switch (attribute.name) {
      case "media":
        parsedSegmentURL.media = attribute.value;
        break;

      case "indexRange":
        parseValue(attribute.value, {
          asKey: "indexRange",
          parser: parseByteRange,
          dashName: "indexRange"
        });
        break;

      case "index":
        parsedSegmentURL.index = attribute.value;
        break;

      case "mediaRange":
        parseValue(attribute.value, {
          asKey: "mediaRange",
          parser: parseByteRange,
          dashName: "mediaRange"
        });
        break;
    }
  }

  return [parsedSegmentURL, warnings];
}
;// CONCATENATED MODULE: ./src/parsers/manifest/dash/node_parsers/SegmentList.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * @param {Element} root
 * @returns {Array}
 */

function parseSegmentList(root) {
  var _parseSegmentBase = parseSegmentBase(root),
      base = _parseSegmentBase[0],
      baseWarnings = _parseSegmentBase[1];

  var warnings = baseWarnings;
  var list = [];
  var segmentListChildren = root.childNodes;

  for (var i = 0; i < segmentListChildren.length; i++) {
    if (segmentListChildren[i].nodeType === Node.ELEMENT_NODE) {
      var currentNode = segmentListChildren[i];

      if (currentNode.nodeName === "SegmentURL") {
        var _parseSegmentURL = parseSegmentURL(currentNode),
            segmentURL = _parseSegmentURL[0],
            segmentURLWarnings = _parseSegmentURL[1];

        list.push(segmentURL);
        warnings = warnings.concat(segmentURLWarnings);
      }
    }
  }

  var baseDuration = base.duration;

  if (baseDuration == null) {
    throw new Error("Invalid SegmentList: no duration");
  }

  var ret = (0,object_assign/* default */.Z)(base, {
    list: list,
    // Ugly but TS is too dumb there
    duration: baseDuration
  });
  return [ret, warnings];
}
;// CONCATENATED MODULE: ./src/parsers/manifest/dash/node_parsers/SegmentTimeline.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @param {Element} root
 * @returns {Function}
 */
function createSegmentTimelineParser(root) {
  var result = null;
  return function () {
    if (result === null) {
      var elements = root.getElementsByTagName("S");
      result = elements;
      return elements;
    }

    return result;
  };
}
;// CONCATENATED MODULE: ./src/parsers/manifest/dash/node_parsers/SegmentTemplate.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * Parse initialization attribute found in SegmentTemplateTemplate to
 * correspond to the initialization found in a regular segmentBase.
 * @param {string} attrValue
 * @returns {Object}
 */

function parseInitializationAttribute(attrValue) {
  return {
    media: attrValue
  };
}
/**
 * Parse a SegmentTemplate element into a SegmentTemplate intermediate
 * representation.
 * @param {Element} root - The SegmentTemplate root element.
 * @returns {Array}
 */


function parseSegmentTemplate(root) {
  var _parseSegmentBase = parseSegmentBase(root),
      base = _parseSegmentBase[0],
      segmentBaseWarnings = _parseSegmentBase[1];

  var warnings = segmentBaseWarnings;
  var timelineParser; // First look for a possible SegmentTimeline

  for (var i = 0; i < root.childNodes.length; i++) {
    if (root.childNodes[i].nodeType === Node.ELEMENT_NODE) {
      var currentNode = root.childNodes[i];

      if (currentNode.nodeName === "SegmentTimeline") {
        timelineParser = createSegmentTimelineParser(currentNode);
      }
    }
  }

  var ret = (0,object_assign/* default */.Z)({}, base, {
    duration: base.duration,
    timelineParser: timelineParser
  });
  var parseValue = ValueParser(ret, warnings);

  for (var _i = 0; _i < root.attributes.length; _i++) {
    var attribute = root.attributes[_i];

    switch (attribute.nodeName) {
      case "initialization":
        if (ret.initialization == null) {
          ret.initialization = parseInitializationAttribute(attribute.value);
        }

        break;

      case "index":
        ret.index = attribute.value;
        break;

      case "availabilityTimeOffset":
        if (attribute.value === "INF") {
          ret.availabilityTimeOffset = Infinity;
        }

        parseValue(attribute.value, {
          asKey: "availabilityTimeOffset",
          parser: parseMPDInteger,
          dashName: "availabilityTimeOffset"
        });
        break;

      case "media":
        ret.media = attribute.value;
        break;

      case "bitstreamSwitching":
        parseValue(attribute.value, {
          asKey: "bitstreamSwitching",
          parser: parseBoolean,
          dashName: "bitstreamSwitching"
        });
        break;
    }
  }

  return [ret, warnings];
}
;// CONCATENATED MODULE: ./src/parsers/manifest/dash/node_parsers/Representation.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





/**
 * @param {NodeList} representationChildren
 * @returns {Object}
 */

function parseRepresentationChildren(representationChildren) {
  var children = {
    baseURLs: []
  };
  var warnings = [];

  for (var i = 0; i < representationChildren.length; i++) {
    if (representationChildren[i].nodeType === Node.ELEMENT_NODE) {
      var currentElement = representationChildren[i];

      switch (currentElement.nodeName) {
        case "BaseURL":
          var _parseBaseURL = parseBaseURL(currentElement),
              baseURLObj = _parseBaseURL[0],
              baseURLWarnings = _parseBaseURL[1];

          if (baseURLObj !== undefined) {
            children.baseURLs.push(baseURLObj);
          }

          warnings = warnings.concat(baseURLWarnings);
          break;

        case "SegmentBase":
          var _parseSegmentBase = parseSegmentBase(currentElement),
              segmentBase = _parseSegmentBase[0],
              segmentBaseWarnings = _parseSegmentBase[1];

          children.segmentBase = segmentBase;

          if (segmentBaseWarnings.length > 0) {
            warnings = warnings.concat(segmentBaseWarnings);
          }

          break;

        case "SegmentList":
          var _parseSegmentList = parseSegmentList(currentElement),
              segmentList = _parseSegmentList[0],
              segmentListWarnings = _parseSegmentList[1];

          warnings = warnings.concat(segmentListWarnings);
          children.segmentList = segmentList;
          break;

        case "SegmentTemplate":
          var _parseSegmentTemplate = parseSegmentTemplate(currentElement),
              segmentTemplate = _parseSegmentTemplate[0],
              segmentTemplateWarnings = _parseSegmentTemplate[1];

          warnings = warnings.concat(segmentTemplateWarnings);
          children.segmentTemplate = segmentTemplate;
          break;
      }
    }
  }

  return [children, warnings];
}
/**
 * @param {Element} representationElement
 * @returns {Array}
 */


function parseRepresentationAttributes(representationElement) {
  var attributes = {};
  var warnings = [];
  var parseValue = ValueParser(attributes, warnings);

  for (var i = 0; i < representationElement.attributes.length; i++) {
    var attr = representationElement.attributes[i];

    switch (attr.name) {
      case "audioSamplingRate":
        attributes.audioSamplingRate = attr.value;
        break;

      case "bandwidth":
        parseValue(attr.value, {
          asKey: "bitrate",
          parser: parseMPDInteger,
          dashName: "bandwidth"
        });
        break;

      case "codecs":
        attributes.codecs = attr.value;
        break;

      case "codingDependency":
        parseValue(attr.value, {
          asKey: "codingDependency",
          parser: parseBoolean,
          dashName: "codingDependency"
        });
        break;

      case "frameRate":
        attributes.frameRate = attr.value;
        break;

      case "height":
        parseValue(attr.value, {
          asKey: "height",
          parser: parseMPDInteger,
          dashName: "height"
        });
        break;

      case "id":
        attributes.id = attr.value;
        break;

      case "maxPlayoutRate":
        parseValue(attr.value, {
          asKey: "maxPlayoutRate",
          parser: parseMPDFloat,
          dashName: "maxPlayoutRate"
        });
        break;

      case "maximumSAPPeriod":
        parseValue(attr.value, {
          asKey: "maximumSAPPeriod",
          parser: parseMPDFloat,
          dashName: "maximumSAPPeriod"
        });
        break;

      case "mimeType":
        attributes.mimeType = attr.value;
        break;

      case "profiles":
        attributes.profiles = attr.value;
        break;

      case "qualityRanking":
        parseValue(attr.value, {
          asKey: "qualityRanking",
          parser: parseMPDInteger,
          dashName: "qualityRanking"
        });
        break;

      case "segmentProfiles":
        attributes.segmentProfiles = attr.value;
        break;

      case "width":
        parseValue(attr.value, {
          asKey: "width",
          parser: parseMPDInteger,
          dashName: "width"
        });
        break;
    }
  }

  if (attributes.bitrate === undefined) {
    warnings.push(new MPDError("No bitrate found on a Representation"));
  }

  return [attributes, warnings];
}
/**
 * @param {Element} representationElement
 * @returns {Array}
 */


function createRepresentationIntermediateRepresentation(representationElement) {
  var _parseRepresentationC = parseRepresentationChildren(representationElement.childNodes),
      children = _parseRepresentationC[0],
      childrenWarnings = _parseRepresentationC[1];

  var _parseRepresentationA = parseRepresentationAttributes(representationElement),
      attributes = _parseRepresentationA[0],
      attrsWarnings = _parseRepresentationA[1];

  var warnings = childrenWarnings.concat(attrsWarnings);
  return [{
    children: children,
    attributes: attributes
  }, warnings];
}
;// CONCATENATED MODULE: ./src/parsers/manifest/dash/node_parsers/AdaptationSet.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */








/**
 * Parse child nodes from an AdaptationSet.
 * @param {NodeList} adaptationSetChildren - The AdaptationSet child nodes.
 * @returns {Array.<Object>}
 */

function parseAdaptationSetChildren(adaptationSetChildren) {
  var children = {
    baseURLs: [],
    representations: []
  };
  var contentProtections = [];
  var warnings = [];

  for (var i = 0; i < adaptationSetChildren.length; i++) {
    if (adaptationSetChildren[i].nodeType === Node.ELEMENT_NODE) {
      var currentElement = adaptationSetChildren[i];

      switch (currentElement.nodeName) {
        case "Accessibility":
          children.accessibility = parseScheme(currentElement);
          break;

        case "BaseURL":
          var _parseBaseURL = parseBaseURL(currentElement),
              baseURLObj = _parseBaseURL[0],
              baseURLWarnings = _parseBaseURL[1];

          if (baseURLObj !== undefined) {
            children.baseURLs.push(baseURLObj);
          }

          if (baseURLWarnings.length > 0) {
            warnings = warnings.concat(baseURLWarnings);
          }

          break;

        case "ContentComponent":
          children.contentComponent = parseContentComponent(currentElement);
          break;

        case "EssentialProperty":
          if (children.essentialProperties == null) {
            children.essentialProperties = [parseScheme(currentElement)];
          } else {
            children.essentialProperties.push(parseScheme(currentElement));
          }

          break;

        case "Representation":
          var _createRepresentation = createRepresentationIntermediateRepresentation(currentElement),
              representation = _createRepresentation[0],
              representationWarnings = _createRepresentation[1];

          children.representations.push(representation);

          if (representationWarnings.length > 0) {
            warnings = warnings.concat(representationWarnings);
          }

          break;

        case "Role":
          if (children.roles == null) {
            children.roles = [parseScheme(currentElement)];
          } else {
            children.roles.push(parseScheme(currentElement));
          }

          break;

        case "SupplementalProperty":
          if (children.supplementalProperties == null) {
            children.supplementalProperties = [parseScheme(currentElement)];
          } else {
            children.supplementalProperties.push(parseScheme(currentElement));
          }

          break;

        case "SegmentBase":
          var _parseSegmentBase = parseSegmentBase(currentElement),
              segmentBase = _parseSegmentBase[0],
              segmentBaseWarnings = _parseSegmentBase[1];

          children.segmentBase = segmentBase;

          if (segmentBaseWarnings.length > 0) {
            warnings = warnings.concat(segmentBaseWarnings);
          }

          break;

        case "SegmentList":
          var _parseSegmentList = parseSegmentList(currentElement),
              segmentList = _parseSegmentList[0],
              segmentListWarnings = _parseSegmentList[1];

          children.segmentList = segmentList;

          if (segmentListWarnings.length > 0) {
            warnings = warnings.concat(segmentListWarnings);
          }

          break;

        case "SegmentTemplate":
          var _parseSegmentTemplate = parseSegmentTemplate(currentElement),
              segmentTemplate = _parseSegmentTemplate[0],
              segmentTemplateWarnings = _parseSegmentTemplate[1];

          children.segmentTemplate = segmentTemplate;

          if (segmentTemplateWarnings.length > 0) {
            warnings = warnings.concat(segmentTemplateWarnings);
          }

          break;

        case "ContentProtection":
          var _parseContentProtecti = parseContentProtection(currentElement),
              contentProtection = _parseContentProtecti[0],
              contentProtectionWarnings = _parseContentProtecti[1];

          if (contentProtectionWarnings.length > 0) {
            warnings = warnings.concat(contentProtectionWarnings);
          }

          if (contentProtection !== undefined) {
            contentProtections.push(contentProtection);
          }

          break;
        // case "Rating":
        //   children.rating = currentElement;
        //   break;
        // case "Viewpoint":
        //   children.viewpoint = currentElement;
        //   break;
      }
    }
  }

  if (contentProtections.length > 0) {
    children.contentProtections = contentProtections;
  }

  return [children, warnings];
}
/**
 * Parse every attributes from an AdaptationSet root element into a simple JS
 * object.
 * @param {Element} root - The AdaptationSet root element.
 * @returns {Array.<Object>}
 */


function parseAdaptationSetAttributes(root) {
  var parsedAdaptation = {};
  var warnings = [];
  var parseValue = ValueParser(parsedAdaptation, warnings);

  for (var i = 0; i < root.attributes.length; i++) {
    var attribute = root.attributes[i];

    switch (attribute.name) {
      case "id":
        parsedAdaptation.id = attribute.value;
        break;

      case "group":
        parseValue(attribute.value, {
          asKey: "group",
          parser: parseMPDInteger,
          dashName: "group"
        });
        break;

      case "lang":
        parsedAdaptation.language = attribute.value;
        break;

      case "contentType":
        parsedAdaptation.contentType = attribute.value;
        break;

      case "par":
        parsedAdaptation.par = attribute.value;
        break;

      case "minBandwidth":
        parseValue(attribute.value, {
          asKey: "minBitrate",
          parser: parseMPDInteger,
          dashName: "minBandwidth"
        });
        break;

      case "maxBandwidth":
        parseValue(attribute.value, {
          asKey: "maxBitrate",
          parser: parseMPDInteger,
          dashName: "maxBandwidth"
        });
        break;

      case "minWidth":
        parseValue(attribute.value, {
          asKey: "minWidth",
          parser: parseMPDInteger,
          dashName: "minWidth"
        });
        break;

      case "maxWidth":
        parseValue(attribute.value, {
          asKey: "maxWidth",
          parser: parseMPDInteger,
          dashName: "maxWidth"
        });
        break;

      case "minHeight":
        parseValue(attribute.value, {
          asKey: "minHeight",
          parser: parseMPDInteger,
          dashName: "minHeight"
        });
        break;

      case "maxHeight":
        parseValue(attribute.value, {
          asKey: "maxHeight",
          parser: parseMPDInteger,
          dashName: "maxHeight"
        });
        break;

      case "minFrameRate":
        {
          parsedAdaptation.minFrameRate = attribute.value;
        }
        break;

      case "maxFrameRate":
        parsedAdaptation.maxFrameRate = attribute.value;
        break;

      case "selectionPriority":
        parseValue(attribute.value, {
          asKey: "selectionPriority",
          parser: parseMPDInteger,
          dashName: "selectionPriority"
        });
        break;

      case "segmentAlignment":
        parseValue(attribute.value, {
          asKey: "segmentAlignment",
          parser: parseIntOrBoolean,
          dashName: "segmentAlignment"
        });
        break;

      case "subsegmentAlignment":
        parseValue(attribute.value, {
          asKey: "subsegmentAlignment",
          parser: parseIntOrBoolean,
          dashName: "subsegmentAlignment"
        });
        break;

      case "bitstreamSwitching":
        parseValue(attribute.value, {
          asKey: "bitstreamSwitching",
          parser: parseBoolean,
          dashName: "bitstreamSwitching"
        });
        break;

      case "audioSamplingRate":
        parsedAdaptation.audioSamplingRate = attribute.value;
        break;

      case "codecs":
        parsedAdaptation.codecs = attribute.value;
        break;

      case "codingDependency":
        parseValue(attribute.value, {
          asKey: "codingDependency",
          parser: parseBoolean,
          dashName: "codingDependency"
        });
        break;

      case "frameRate":
        parsedAdaptation.frameRate = attribute.value;
        break;

      case "height":
        parseValue(attribute.value, {
          asKey: "height",
          parser: parseMPDInteger,
          dashName: "height"
        });
        break;

      case "maxPlayoutRate":
        parseValue(attribute.value, {
          asKey: "maxPlayoutRate",
          parser: parseMPDFloat,
          dashName: "maxPlayoutRate"
        });
        break;

      case "maximumSAPPeriod":
        parseValue(attribute.value, {
          asKey: "maximumSAPPeriod",
          parser: parseMPDFloat,
          dashName: "maximumSAPPeriod"
        });
        break;

      case "mimeType":
        parsedAdaptation.mimeType = attribute.value;
        break;

      case "profiles":
        parsedAdaptation.profiles = attribute.value;
        break;

      case "segmentProfiles":
        parsedAdaptation.segmentProfiles = attribute.value;
        break;

      case "width":
        parseValue(attribute.value, {
          asKey: "width",
          parser: parseMPDInteger,
          dashName: "width"
        });
        break;
    }
  }

  return [parsedAdaptation, warnings];
}
/**
 * Parse an AdaptationSet element into an AdaptationSet intermediate
 * representation.
 * @param {Element} adaptationSetElement - The AdaptationSet root element.
 * @returns {Array.<Object>}
 */


function createAdaptationSetIntermediateRepresentation(adaptationSetElement) {
  var childNodes = adaptationSetElement.childNodes;

  var _parseAdaptationSetCh = parseAdaptationSetChildren(childNodes),
      children = _parseAdaptationSetCh[0],
      childrenWarnings = _parseAdaptationSetCh[1];

  var _parseAdaptationSetAt = parseAdaptationSetAttributes(adaptationSetElement),
      attributes = _parseAdaptationSetAt[0],
      attrsWarnings = _parseAdaptationSetAt[1];

  var warnings = childrenWarnings.concat(attrsWarnings);
  return [{
    children: children,
    attributes: attributes
  }, warnings];
}
;// CONCATENATED MODULE: ./src/parsers/manifest/dash/node_parsers/EventStream.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Parse the EventStream node to extract Event nodes and their
 * content.
 * @param {Element} element
 */

function parseEventStream(element) {
  var _a;

  var streamEvents = [];
  var attributes = {
    timescale: 1
  };
  var warnings = [];
  var parseValue = ValueParser(attributes, warnings);

  for (var i = 0; i < element.attributes.length; i++) {
    var attribute = element.attributes[i];

    switch (attribute.name) {
      case "schemeIdUri":
        attributes.schemeId = attribute.value;
        break;

      case "timescale":
        parseValue(attribute.value, {
          asKey: "timescale",
          parser: parseMPDInteger,
          dashName: "timescale"
        });
        break;

      case "value":
        attributes.value = attribute.value;
        break;

      default:
        break;
    }
  }

  for (var k = 0; k < element.childNodes.length; k++) {
    var node = element.childNodes[k];
    var streamEvent = {
      id: undefined,
      eventPresentationTime: 0,
      duration: undefined,
      timescale: attributes.timescale,
      data: {
        type: "dash-event-stream",
        value: {
          schemeIdUri: (_a = attributes.schemeId) !== null && _a !== void 0 ? _a : "",
          timescale: attributes.timescale,
          element: node
        }
      }
    };
    var parseEventValue = ValueParser(streamEvent, warnings);

    if (node.nodeName === "Event" && node.nodeType === Node.ELEMENT_NODE) {
      var eventAttributes = node.attributes;

      for (var j = 0; j < eventAttributes.length; j++) {
        var _attribute = eventAttributes[j];

        switch (_attribute.name) {
          case "presentationTime":
            parseEventValue(_attribute.value, {
              asKey: "eventPresentationTime",
              parser: parseMPDInteger,
              dashName: "presentationTime"
            });
            break;

          case "duration":
            parseEventValue(_attribute.value, {
              asKey: "duration",
              parser: parseMPDInteger,
              dashName: "duration"
            });
            break;

          case "id":
            streamEvent.id = _attribute.value;
            break;

          default:
            break;
        }
      }

      streamEvents.push(streamEvent);
    }
  }

  return [streamEvents, warnings];
}

/* harmony default export */ const EventStream = (parseEventStream);
;// CONCATENATED MODULE: ./src/parsers/manifest/dash/node_parsers/Period.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





/**
 * @param {NodeList} periodChildren
 * @returns {Array}
 */

function parsePeriodChildren(periodChildren) {
  var baseURLs = [];
  var adaptations = [];
  var segmentTemplate;
  var warnings = [];
  var streamEvents = [];

  for (var i = 0; i < periodChildren.length; i++) {
    if (periodChildren[i].nodeType === Node.ELEMENT_NODE) {
      var currentElement = periodChildren[i];

      switch (currentElement.nodeName) {
        case "BaseURL":
          var _parseBaseURL = parseBaseURL(currentElement),
              baseURLObj = _parseBaseURL[0],
              baseURLWarnings = _parseBaseURL[1];

          if (baseURLObj !== undefined) {
            baseURLs.push(baseURLObj);
          }

          warnings = warnings.concat(baseURLWarnings);
          break;

        case "AdaptationSet":
          var _createAdaptationSetI = createAdaptationSetIntermediateRepresentation(currentElement),
              adaptation = _createAdaptationSetI[0],
              adaptationWarnings = _createAdaptationSetI[1];

          adaptations.push(adaptation);
          warnings = warnings.concat(adaptationWarnings);
          break;

        case "EventStream":
          var _parseEventStream = EventStream(currentElement),
              newStreamEvents = _parseEventStream[0],
              eventStreamWarnings = _parseEventStream[1];

          streamEvents.push.apply(streamEvents, newStreamEvents);
          warnings = warnings.concat(eventStreamWarnings);
          break;

        case "SegmentTemplate":
          var _parseSegmentTemplate = parseSegmentTemplate(currentElement),
              parsedSegmentTemplate = _parseSegmentTemplate[0],
              segmentTemplateWarnings = _parseSegmentTemplate[1];

          segmentTemplate = parsedSegmentTemplate;

          if (segmentTemplateWarnings.length > 0) {
            warnings = warnings.concat(segmentTemplateWarnings);
          }

          break;
      }
    }
  }

  return [{
    baseURLs: baseURLs,
    adaptations: adaptations,
    streamEvents: streamEvents,
    segmentTemplate: segmentTemplate
  }, warnings];
}
/**
 * @param {Element} periodElement
 * @returns {Array}
 */


function parsePeriodAttributes(periodElement) {
  var res = {};
  var warnings = [];
  var parseValue = ValueParser(res, warnings);

  for (var i = 0; i < periodElement.attributes.length; i++) {
    var attr = periodElement.attributes[i];

    switch (attr.name) {
      case "id":
        res.id = attr.value;
        break;

      case "start":
        parseValue(attr.value, {
          asKey: "start",
          parser: parseDuration,
          dashName: "start"
        });
        break;

      case "duration":
        parseValue(attr.value, {
          asKey: "duration",
          parser: parseDuration,
          dashName: "duration"
        });
        break;

      case "bitstreamSwitching":
        parseValue(attr.value, {
          asKey: "bitstreamSwitching",
          parser: parseBoolean,
          dashName: "bitstreamSwitching"
        });
        break;

      case "xlink:href":
        res.xlinkHref = attr.value;
        break;

      case "xlink:actuate":
        res.xlinkActuate = attr.value;
        break;
    }
  }

  return [res, warnings];
}
/**
 * @param {Element} periodElement
 * @returns {Array}
 */


function createPeriodIntermediateRepresentation(periodElement) {
  var _parsePeriodChildren = parsePeriodChildren(periodElement.childNodes),
      children = _parsePeriodChildren[0],
      childrenWarnings = _parsePeriodChildren[1];

  var _parsePeriodAttribute = parsePeriodAttributes(periodElement),
      attributes = _parsePeriodAttribute[0],
      attrsWarnings = _parsePeriodAttribute[1];

  var warnings = childrenWarnings.concat(attrsWarnings);
  return [{
    children: children,
    attributes: attributes
  }, warnings];
}
;// CONCATENATED MODULE: ./src/parsers/manifest/dash/node_parsers/MPD.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Parse children of the MPD's root into a simple object.
 * @param {NodeList} mpdChildren
 * @returns {Array.<Object>}
 */

function parseMPDChildren(mpdChildren) {
  var baseURLs = [];
  var locations = [];
  var periods = [];
  var utcTimings = [];
  var warnings = [];

  for (var i = 0; i < mpdChildren.length; i++) {
    if (mpdChildren[i].nodeType === Node.ELEMENT_NODE) {
      var currentNode = mpdChildren[i];

      switch (currentNode.nodeName) {
        case "BaseURL":
          var _parseBaseURL = parseBaseURL(currentNode),
              baseURLObj = _parseBaseURL[0],
              baseURLWarnings = _parseBaseURL[1];

          if (baseURLObj !== undefined) {
            baseURLs.push(baseURLObj);
          }

          warnings = warnings.concat(baseURLWarnings);
          break;

        case "Location":
          locations.push(currentNode.textContent === null ? "" : currentNode.textContent);
          break;

        case "Period":
          var _createPeriodIntermed = createPeriodIntermediateRepresentation(currentNode),
              period = _createPeriodIntermed[0],
              periodWarnings = _createPeriodIntermed[1];

          periods.push(period);
          warnings = warnings.concat(periodWarnings);
          break;

        case "UTCTiming":
          var utcTiming = parseScheme(currentNode);
          utcTimings.push(utcTiming);
          break;
      }
    }
  }

  return [{
    baseURLs: baseURLs,
    locations: locations,
    periods: periods,
    utcTimings: utcTimings
  }, warnings];
}
/**
 * @param {Element} root
 * @returns {Array.<Object>}
 */


function parseMPDAttributes(root) {
  var res = {};
  var warnings = [];
  var parseValue = ValueParser(res, warnings);

  for (var i = 0; i < root.attributes.length; i++) {
    var attribute = root.attributes[i];

    switch (attribute.name) {
      case "id":
        res.id = attribute.value;
        break;

      case "profiles":
        res.profiles = attribute.value;
        break;

      case "type":
        res.type = attribute.value;
        break;

      case "availabilityStartTime":
        parseValue(attribute.value, {
          asKey: "availabilityStartTime",
          parser: parseDateTime,
          dashName: "availabilityStartTime"
        });
        break;

      case "availabilityEndTime":
        parseValue(attribute.value, {
          asKey: "availabilityEndTime",
          parser: parseDateTime,
          dashName: "availabilityEndTime"
        });
        break;

      case "publishTime":
        parseValue(attribute.value, {
          asKey: "publishTime",
          parser: parseDateTime,
          dashName: "publishTime"
        });
        break;

      case "mediaPresentationDuration":
        parseValue(attribute.value, {
          asKey: "duration",
          parser: parseDuration,
          dashName: "mediaPresentationDuration"
        });
        break;

      case "minimumUpdatePeriod":
        parseValue(attribute.value, {
          asKey: "minimumUpdatePeriod",
          parser: parseDuration,
          dashName: "minimumUpdatePeriod"
        });
        break;

      case "minBufferTime":
        parseValue(attribute.value, {
          asKey: "minBufferTime",
          parser: parseDuration,
          dashName: "minBufferTime"
        });
        break;

      case "timeShiftBufferDepth":
        parseValue(attribute.value, {
          asKey: "timeShiftBufferDepth",
          parser: parseDuration,
          dashName: "timeShiftBufferDepth"
        });
        break;

      case "suggestedPresentationDelay":
        parseValue(attribute.value, {
          asKey: "suggestedPresentationDelay",
          parser: parseDuration,
          dashName: "suggestedPresentationDelay"
        });
        break;

      case "maxSegmentDuration":
        parseValue(attribute.value, {
          asKey: "maxSegmentDuration",
          parser: parseDuration,
          dashName: "maxSegmentDuration"
        });
        break;

      case "maxSubsegmentDuration":
        parseValue(attribute.value, {
          asKey: "maxSubsegmentDuration",
          parser: parseDuration,
          dashName: "maxSubsegmentDuration"
        });
        break;
    }
  }

  return [res, warnings];
}
/**
 * @param {Element} root
 * @returns {Array.<Object>}
 */


function createMPDIntermediateRepresentation(root) {
  var _parseMPDChildren = parseMPDChildren(root.childNodes),
      children = _parseMPDChildren[0],
      childrenWarnings = _parseMPDChildren[1];

  var _parseMPDAttributes = parseMPDAttributes(root),
      attributes = _parseMPDAttributes[0],
      attrsWarnings = _parseMPDAttributes[1];

  var warnings = childrenWarnings.concat(attrsWarnings);
  return [{
    children: children,
    attributes: attributes
  }, warnings];
}
;// CONCATENATED MODULE: ./src/parsers/manifest/dash/parse_availability_start_time.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns the base time of the Manifest.
 * @param {Object} rootAttributes
 * @param {number|undefined}
 */
function parseAvailabilityStartTime(rootAttributes, referenceDateTime) {
  if (rootAttributes.type !== "dynamic") {
    return 0;
  }

  if (rootAttributes.availabilityStartTime == null) {
    return referenceDateTime == null ? 0 : referenceDateTime;
  }

  return rootAttributes.availabilityStartTime;
}
// EXTERNAL MODULE: ./src/utils/flat_map.ts
var flat_map = __webpack_require__(9592);
// EXTERNAL MODULE: ./src/utils/id_generator.ts
var id_generator = __webpack_require__(908);
// EXTERNAL MODULE: ./src/utils/object_values.ts
var object_values = __webpack_require__(1679);
;// CONCATENATED MODULE: ./src/parsers/manifest/dash/flatten_overlapping_periods.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Avoid periods to overlap.
 *
 * According to DASH guidelines, if a period has media duration longer than
 * the distance between the start of this period and the start of the next period,
 * use of start times implies that the client will start the playout of the next
 * period at the time stated, rather than finishing the playout of the last period.
 *
 * Even if that case if defined when period last(s) segment(s) is/are a bit longer,
 * it can be meaningful when two periods are overlapping. We will always shorten
 * the first period, and even erase it if its duration is equal to zero.
 *
 * Example (Periods are numbered under their manifest order) :
 *
 * [ Period 1 ][ Period 2 ]       ------>  [ Period 1 ][ Period 3 ]
 *             [ Period 3 ]
 *
 * [ Period 1 ][ Period 2 ]       ------>  [ Period 1 ][  2  ][ Period 3 ]
 *                  [ Period 3 ]
 *
 * [ Period 1 ][ Period 2 ]       ------>  [  1  ][      Period 3     ]
 *        [      Period 3     ]
 *
 * @param {Array.<Object>} parsedPeriods
 * @return {Array.<Object>}
 */

function flattenOverlappingPeriods(parsedPeriods) {
  if (parsedPeriods.length === 0) {
    return [];
  }

  var flattenedPeriods = [parsedPeriods[0]];

  for (var i = 1; i < parsedPeriods.length; i++) {
    var parsedPeriod = parsedPeriods[i];
    var lastFlattenedPeriod = flattenedPeriods[flattenedPeriods.length - 1];

    while (lastFlattenedPeriod.duration == null || lastFlattenedPeriod.start + lastFlattenedPeriod.duration > parsedPeriod.start) {
      log/* default.warn */.Z.warn("DASH: Updating overlapping Periods.", lastFlattenedPeriod, parsedPeriod);
      lastFlattenedPeriod.duration = parsedPeriod.start - lastFlattenedPeriod.start;
      lastFlattenedPeriod.end = parsedPeriod.start;

      if (lastFlattenedPeriod.duration <= 0) {
        flattenedPeriods.pop();
        lastFlattenedPeriod = flattenedPeriods[flattenedPeriods.length - 1];
      }
    }

    flattenedPeriods.push(parsedPeriod);
  }

  return flattenedPeriods;
}
;// CONCATENATED MODULE: ./src/parsers/manifest/dash/get_periods_time_infos.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Get periods time information from current, next and previous
 * periods.
 * @param {Array.<Object>} periodsIR
 * @param {Object} manifestInfos
 * @return {Array.<Object>}
 */
function getPeriodsTimeInformation(periodsIR, manifestInfos) {
  var periodsTimeInformation = [];
  periodsIR.forEach(function (currentPeriod, i) {
    var periodStart;

    if (currentPeriod.attributes.start != null) {
      periodStart = currentPeriod.attributes.start;
    } else {
      if (i === 0) {
        periodStart = !manifestInfos.isDynamic || manifestInfos.availabilityStartTime == null ? 0 : manifestInfos.availabilityStartTime;
      } else {
        // take time information from previous period
        var prevPeriodInfos = periodsTimeInformation[periodsTimeInformation.length - 1];

        if (prevPeriodInfos != null && prevPeriodInfos.periodEnd != null) {
          periodStart = prevPeriodInfos.periodEnd;
        } else {
          throw new Error("Missing start time when parsing periods.");
        }
      }
    }

    var periodDuration;
    var nextPeriod = periodsIR[i + 1];

    if (currentPeriod.attributes.duration != null) {
      periodDuration = currentPeriod.attributes.duration;
    } else if (i === periodsIR.length - 1) {
      periodDuration = manifestInfos.duration;
    } else if (nextPeriod.attributes.start != null) {
      periodDuration = nextPeriod.attributes.start - periodStart;
    }

    var periodEnd = periodDuration != null ? periodStart + periodDuration : undefined;
    periodsTimeInformation.push({
      periodStart: periodStart,
      periodDuration: periodDuration,
      periodEnd: periodEnd
    });
  });
  return periodsTimeInformation;
}
;// CONCATENATED MODULE: ./src/parsers/manifest/dash/manifest_bounds_calculator.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This class allows to easily calculate the first and last available positions
 * in a content at any time.
 *
 * That task can be an hard for dynamic DASH contents: it depends on a
 * `timeShiftBufferDepth` defined in the MPD and on the maximum possible
 * position.
 *
 * The latter can come from either a clock synchronization mechanism or the
 * indexing schemes (e.g. SegmentTemplate, SegmentTimeline etc.) of the last
 * Periods.
 * As such, it might only be known once a large chunk of the MPD has already
 * been parsed.
 *
 * By centralizing the manifest bounds calculation in this class and by giving
 * an instance of it to each parsed elements which might depend on it, we
 * ensure that we can provide it once it is known to every one of those
 * elements without needing to parse a second time the MPD.
 * @class ManifestBoundsCalculator
 */
var ManifestBoundsCalculator = /*#__PURE__*/function () {
  /**
   * @param {Object} args
   */
  function ManifestBoundsCalculator(args) {
    this._isDynamic = args.isDynamic;
    this._timeShiftBufferDepth = !args.isDynamic || args.timeShiftBufferDepth === undefined ? null : args.timeShiftBufferDepth;
  }
  /**
   * Set the last position and the position time (the value of `performance.now()`
   * at the time that position was true converted into seconds).
   *
   * @example
   * Example if you trust `Date.now()` to give you a reliable offset:
   * ```js
   * const lastPosition = Date.now();
   * const positionTime = performance.now() / 1000;
   * manifestBoundsCalculator.setLastPosition(lastPosition, positionTime);
   * ```
   *
   * @param {number} lastPosition
   * @param {number|undefined} positionTime
   */


  var _proto = ManifestBoundsCalculator.prototype;

  _proto.setLastPosition = function setLastPosition(lastPosition, positionTime) {
    this._lastPosition = lastPosition;
    this._positionTime = positionTime;
  }
  /**
   * Returns `true` if the last position and the position time
   * (for dynamic content only) have been comunicated.
   * `false` otherwise.
   * @returns {boolean}
   */
  ;

  _proto.lastPositionIsKnown = function lastPositionIsKnown() {
    if (this._isDynamic) {
      return this._positionTime != null && this._lastPosition != null;
    }

    return this._lastPosition != null;
  }
  /**
   * Estimate a minimum bound for the content from the last set segment time
   * and buffer depth.
   * Consider that it is only an estimation, not the real value.
   * @return {number|undefined}
   */
  ;

  _proto.estimateMinimumBound = function estimateMinimumBound() {
    if (!this._isDynamic || this._timeShiftBufferDepth === null) {
      return 0;
    }

    var maximumBound = this.estimateMaximumBound();

    if (maximumBound === undefined) {
      return undefined;
    }

    var minimumBound = maximumBound - this._timeShiftBufferDepth;
    return minimumBound;
  }
  /**
   * Estimate a maximum bound for the content from the last set segment time.
   * Consider that it is only an estimation, not the real value.
   * @return {number|undefined}
   */
  ;

  _proto.estimateMaximumBound = function estimateMaximumBound() {
    if (this._isDynamic && this._positionTime != null && this._lastPosition != null) {
      return Math.max(this._lastPosition - this._positionTime + performance.now() / 1000, 0);
    }

    return this._lastPosition;
  };

  return ManifestBoundsCalculator;
}();


// EXTERNAL MODULE: ./src/utils/array_includes.ts
var array_includes = __webpack_require__(7714);
;// CONCATENATED MODULE: ./src/parsers/manifest/dash/infer_adaptation_type.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/** Array grouping every possible type a parsed Adaptation can be. */

var KNOWN_ADAPTATION_TYPES = ["audio", "video", "text", "image"];
/** Different `role`s a text Adaptation can be. */

var SUPPORTED_TEXT_TYPES = ["subtitle", "caption"];
/**
 * Infers the type of adaptation from codec and mimetypes found in it.
 *
 * This follows the guidelines defined by the DASH-IF IOP:
 *   - one adaptation set contains a single media type
 *   - The order of verifications are:
 *       1. mimeType
 *       2. Role
 *       3. codec
 *
 * Note: This is based on DASH-IF-IOP-v4.0 with some more freedom.
 * @param {Array.<Object>} representations
 * @param {string|null} adaptationMimeType
 * @param {string|null} adaptationCodecs
 * @param {Array.<Object>|null} adaptationRoles
 * @returns {string} - "audio"|"video"|"text"|"image"|"metadata"|"unknown"
 */

function inferAdaptationType(representations, adaptationMimeType, adaptationCodecs, adaptationRoles) {
  function fromMimeType(mimeType, roles) {
    var topLevel = mimeType.split("/")[0];

    if ((0,array_includes/* default */.Z)(KNOWN_ADAPTATION_TYPES, topLevel)) {
      return topLevel;
    }

    if (mimeType === "application/bif") {
      return "image";
    }

    if (mimeType === "application/ttml+xml") {
      return "text";
    } // manage DASH-IF mp4-embedded subtitles and metadata


    if (mimeType === "application/mp4") {
      if (roles != null) {
        if ((0,array_find/* default */.Z)(roles, function (role) {
          return role.schemeIdUri === "urn:mpeg:dash:role:2011" && (0,array_includes/* default */.Z)(SUPPORTED_TEXT_TYPES, role.value);
        }) != null) {
          return "text";
        }
      }

      return undefined;
    }
  }

  function fromCodecs(codecs) {
    switch (codecs.substring(0, 3)) {
      case "avc":
      case "hev":
      case "hvc":
      case "vp8":
      case "vp9":
      case "av1":
        return "video";

      case "vtt":
        return "text";

      case "bif":
        return "image";
    }

    switch (codecs.substring(0, 4)) {
      case "mp4a":
        return "audio";

      case "wvtt":
      case "stpp":
        return "text";
    }
  }

  if (adaptationMimeType !== null) {
    var typeFromMimeType = fromMimeType(adaptationMimeType, adaptationRoles);

    if (typeFromMimeType !== undefined) {
      return typeFromMimeType;
    }
  }

  if (adaptationCodecs !== null) {
    var typeFromCodecs = fromCodecs(adaptationCodecs);

    if (typeFromCodecs !== undefined) {
      return typeFromCodecs;
    }
  }

  for (var i = 0; i < representations.length; i++) {
    var representation = representations[i];
    var _representation$attri = representation.attributes,
        mimeType = _representation$attri.mimeType,
        codecs = _representation$attri.codecs;

    if (mimeType !== undefined) {
      var _typeFromMimeType = fromMimeType(mimeType, adaptationRoles);

      if (_typeFromMimeType !== undefined) {
        return _typeFromMimeType;
      }
    }

    if (codecs !== undefined) {
      var _typeFromCodecs = fromCodecs(codecs);

      if (_typeFromCodecs !== undefined) {
        return _typeFromCodecs;
      }
    }
  }

  return undefined;
}
// EXTERNAL MODULE: ./src/parsers/manifest/utils/index_helpers.ts
var index_helpers = __webpack_require__(3911);
;// CONCATENATED MODULE: ./src/parsers/manifest/dash/indexes/get_init_segment.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Construct init segment for the given index.
 * @param {Object} index
 * @returns {Object}
 */
function get_init_segment_getInitSegment(index) {
  var _a;

  var initialization = index.initialization;
  return {
    id: "init",
    isInit: true,
    time: 0,
    end: 0,
    duration: 0,
    timescale: 1,
    range: initialization != null ? initialization.range : undefined,
    indexRange: index.indexRange,
    mediaURLs: (_a = initialization === null || initialization === void 0 ? void 0 : initialization.mediaURLs) !== null && _a !== void 0 ? _a : null,
    timestampOffset: -(index.indexTimeOffset / index.timescale)
  };
}
;// CONCATENATED MODULE: ./src/parsers/manifest/dash/indexes/tokens.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Pad with 0 in the left of the given n argument to reach l length
 * @param {Number|string} n
 * @param {Number} l
 * @returns {string}
 */

function padLeftWithZeros(n, l) {
  var nToString = n.toString();

  if (nToString.length >= l) {
    return nToString;
  }

  var arr = new Array(l + 1).join("0") + nToString;
  return arr.slice(-l);
}
/**
 * @param {string|number} replacer
 * @returns {Function}
 */


function processFormatedToken(replacer) {
  return function (_match, _format, widthStr) {
    var width = (0,is_non_empty_string/* default */.Z)(widthStr) ? parseInt(widthStr, 10) : 1;
    return padLeftWithZeros(String(replacer), width);
  };
}
/**
 * @param {string} representationURL
 * @param {string|undefined} media
 * @param {string|undefined} id
 * @param {number|undefined} bitrate
 * @returns {string}
 */


function createIndexURLs(baseURLs, media, id, bitrate) {
  if (baseURLs.length === 0) {
    return media !== undefined ? [replaceRepresentationDASHTokens(media, id, bitrate)] : null;
  }

  return baseURLs.map(function (baseURL) {
    return replaceRepresentationDASHTokens((0,resolve_url/* default */.Z)(baseURL, media), id, bitrate);
  });
}
/**
 * Replace "tokens" written in a given path (e.g. $RepresentationID$) by the corresponding
 * infos, taken from the given segment.
 * @param {string} path
 * @param {string|undefined} id
 * @param {number|undefined} bitrate
 * @returns {string}
 */

function replaceRepresentationDASHTokens(path, id, bitrate) {
  if (path.indexOf("$") === -1) {
    return path;
  } else {
    return path.replace(/\$\$/g, "$").replace(/\$RepresentationID\$/g, String(id)).replace(/\$Bandwidth(|\%0(\d+)d)\$/g, processFormatedToken(bitrate === undefined ? 0 : bitrate));
  }
}
/**
 * Create function allowing to replace "tokens" in a given DASH segment URL
 * (e.g. $Time$, which has to be replaced by the segment's start time) by the
 * right information.
 * @param {number|undefined} time
 * @param {number|undefined} nb
 * @returns {Function}
 */

function createDashUrlDetokenizer(time, nb) {
  /**
   * Replace the tokens in the given `url` by the segment information defined
   * by the outer function.
   * @param {string} url
   * @returns {string}
   *
   * @throws Error - Throws if we do not have enough data to construct the URL
   */
  return function replaceTokensInUrl(url) {
    if (url.indexOf("$") === -1) {
      return url;
    } else {
      return url.replace(/\$\$/g, "$").replace(/\$Number(|\%0(\d+)d)\$/g, function (_x, _y, widthStr) {
        if (nb === undefined) {
          throw new Error("Segment number not defined in a $Number$ scheme");
        }

        return processFormatedToken(nb)(_x, _y, widthStr);
      }).replace(/\$Time(|\%0(\d+)d)\$/g, function (_x, _y, widthStr) {
        if (time === undefined) {
          throw new Error("Segment time not defined in a $Time$ scheme");
        }

        return processFormatedToken(time)(_x, _y, widthStr);
      });
    }
  };
}
;// CONCATENATED MODULE: ./src/parsers/manifest/dash/indexes/get_segments_from_timeline.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * For the given start time and duration of a timeline element, calculate how
 * much this element should be repeated to contain the time given.
 * 0 being the same element, 1 being the next one etc.
 * @param {Number} segmentStartTime
 * @param {Number} segmentDuration
 * @param {Number} wantedTime
 * @returns {Number}
 */

function getWantedRepeatIndex(segmentStartTime, segmentDuration, wantedTime) {
  var diff = wantedTime - segmentStartTime;
  return diff > 0 ? Math.floor(diff / segmentDuration) : 0;
}
/**
 * Get a list of Segments for the time range wanted.
 * @param {Object} index - index object, constructed by parsing the manifest.
 * @param {number} from - starting timestamp wanted, in seconds
 * @param {number} durationWanted - duration wanted, in seconds
 * @param {number|undefined} maximumTime
 * @returns {Array.<Object>}
 */


function getSegmentsFromTimeline(index, from, durationWanted, maximumTime) {
  var scaledUp = (0,index_helpers/* toIndexTime */.gT)(from, index);
  var scaledTo = (0,index_helpers/* toIndexTime */.gT)(from + durationWanted, index);
  var timeline = index.timeline,
      timescale = index.timescale,
      mediaURLs = index.mediaURLs,
      startNumber = index.startNumber;
  var currentNumber = startNumber != null ? startNumber : undefined;
  var segments = [];
  var timelineLength = timeline.length; // TODO(pierre): use @maxSegmentDuration if possible

  var maxEncounteredDuration = timeline.length > 0 && timeline[0].duration != null ? timeline[0].duration : 0;

  for (var i = 0; i < timelineLength; i++) {
    var timelineItem = timeline[i];
    var duration = timelineItem.duration,
        start = timelineItem.start,
        range = timelineItem.range;
    maxEncounteredDuration = Math.max(maxEncounteredDuration, duration);
    var repeat = (0,index_helpers/* calculateRepeat */.KF)(timelineItem, timeline[i + 1], maximumTime);
    var segmentNumberInCurrentRange = getWantedRepeatIndex(start, duration, scaledUp);
    var segmentTime = start + segmentNumberInCurrentRange * duration;

    while (segmentTime < scaledTo && segmentNumberInCurrentRange <= repeat) {
      var segmentNumber = currentNumber != null ? currentNumber + segmentNumberInCurrentRange : undefined;
      var detokenizedURLs = mediaURLs === null ? null : mediaURLs.map(createDashUrlDetokenizer(segmentTime, segmentNumber));
      var time = segmentTime - index.indexTimeOffset;
      var segment = {
        id: String(segmentTime),
        time: time / timescale,
        end: (time + duration) / timescale,
        duration: duration / timescale,
        isInit: false,
        range: range,
        timescale: 1,
        mediaURLs: detokenizedURLs,
        number: segmentNumber,
        timestampOffset: -(index.indexTimeOffset / timescale)
      };
      segments.push(segment); // update segment number and segment time for the next segment

      segmentNumberInCurrentRange++;
      segmentTime = start + segmentNumberInCurrentRange * duration;
    }

    if (segmentTime >= scaledTo) {
      // we reached ``scaledTo``, we're done
      return segments;
    }

    if (currentNumber != null) {
      currentNumber += repeat + 1;
    }
  }

  return segments;
}
;// CONCATENATED MODULE: ./src/parsers/manifest/dash/indexes/base.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





/**
 * Add a new segment to the index.
 *
 * /!\ Mutate the given index
 * @param {Object} index
 * @param {Object} segmentInfos
 * @returns {Boolean} - true if the segment has been added
 */

function _addSegmentInfos(index, segmentInfos) {
  if (segmentInfos.timescale !== index.timescale) {
    var timescale = index.timescale;
    index.timeline.push({
      start: segmentInfos.time / segmentInfos.timescale * timescale,
      duration: segmentInfos.duration / segmentInfos.timescale * timescale,
      repeatCount: segmentInfos.count === undefined ? 0 : segmentInfos.count,
      range: segmentInfos.range
    });
  } else {
    index.timeline.push({
      start: segmentInfos.time,
      duration: segmentInfos.duration,
      repeatCount: segmentInfos.count === undefined ? 0 : segmentInfos.count,
      range: segmentInfos.range
    });
  }

  return true;
}

var BaseRepresentationIndex = /*#__PURE__*/function () {
  /**
   * @param {Object} index
   * @param {Object} context
   */
  function BaseRepresentationIndex(index, context) {
    var _a, _b;

    var periodStart = context.periodStart,
        periodEnd = context.periodEnd,
        representationBaseURLs = context.representationBaseURLs,
        representationId = context.representationId,
        representationBitrate = context.representationBitrate;
    var timescale = (_a = index.timescale) !== null && _a !== void 0 ? _a : 1;
    var presentationTimeOffset = index.presentationTimeOffset != null ? index.presentationTimeOffset : 0;
    var indexTimeOffset = presentationTimeOffset - periodStart * timescale;
    var mediaURLs = createIndexURLs(representationBaseURLs, index.initialization !== undefined ? index.initialization.media : undefined, representationId, representationBitrate); // TODO If indexRange is either undefined or behind the initialization segment
    // the following logic will not work.
    // However taking the nth first bytes like `dash.js` does (where n = 1500) is
    // not straightforward as we would need to clean-up the segment after that.
    // The following logic corresponds to 100% of tested cases, so good enough for
    // now.

    var range = index.initialization !== undefined ? index.initialization.range : index.indexRange !== undefined ? [0, index.indexRange[0] - 1] : undefined;
    this._index = {
      indexRange: index.indexRange,
      indexTimeOffset: indexTimeOffset,
      initialization: {
        mediaURLs: mediaURLs,
        range: range
      },
      mediaURLs: createIndexURLs(representationBaseURLs, index.media, representationId, representationBitrate),
      startNumber: index.startNumber,
      timeline: (_b = index.timeline) !== null && _b !== void 0 ? _b : [],
      timescale: timescale
    };
    this._scaledPeriodEnd = periodEnd == null ? undefined : (0,index_helpers/* toIndexTime */.gT)(periodEnd, this._index);
    this._isInitialized = this._index.timeline.length > 0;
  }
  /**
   * Construct init Segment.
   * @returns {Object}
   */


  var _proto = BaseRepresentationIndex.prototype;

  _proto.getInitSegment = function getInitSegment() {
    return get_init_segment_getInitSegment(this._index);
  }
  /**
   * @param {Number} _up
   * @param {Number} _to
   * @returns {Array.<Object>}
   */
  ;

  _proto.getSegments = function getSegments(_up, _to) {
    return getSegmentsFromTimeline(this._index, _up, _to, this._scaledPeriodEnd);
  }
  /**
   * Returns false as no Segment-Base based index should need to be refreshed.
   * @returns {Boolean}
   */
  ;

  _proto.shouldRefresh = function shouldRefresh() {
    return false;
  }
  /**
   * Returns first position in index.
   * @returns {Number|null}
   */
  ;

  _proto.getFirstPosition = function getFirstPosition() {
    var index = this._index;

    if (index.timeline.length === 0) {
      return null;
    }

    return (0,index_helpers/* fromIndexTime */.zG)(index.timeline[0].start, index);
  }
  /**
   * Returns last position in index.
   * @returns {Number|null}
   */
  ;

  _proto.getLastPosition = function getLastPosition() {
    var timeline = this._index.timeline;

    if (timeline.length === 0) {
      return null;
    }

    var lastTimelineElement = timeline[timeline.length - 1];
    var lastTime = (0,index_helpers/* getIndexSegmentEnd */.jH)(lastTimelineElement, null, this._scaledPeriodEnd);
    return (0,index_helpers/* fromIndexTime */.zG)(lastTime, this._index);
  }
  /**
   * Segments in a segmentBase scheme should stay available.
   * @returns {Boolean|undefined}
   */
  ;

  _proto.isSegmentStillAvailable = function isSegmentStillAvailable() {
    return true;
  }
  /**
   * We do not check for discontinuity in SegmentBase-based indexes.
   * @returns {null}
   */
  ;

  _proto.checkDiscontinuity = function checkDiscontinuity() {
    return null;
  }
  /**
   * @returns {boolean}
   */
  ;

  _proto.areSegmentsChronologicallyGenerated = function areSegmentsChronologicallyGenerated() {
    return true;
  }
  /**
   * @param {Array.<Object>} nextSegments
   * @returns {Array.<Object>}
   */
  ;

  _proto._addSegments = function _addSegments(nextSegments) {
    for (var i = 0; i < nextSegments.length; i++) {
      _addSegmentInfos(this._index, nextSegments[i]);
    }

    if (!this._isInitialized && this._index.timeline.length > 0) {
      this._isInitialized = true;
    }
  }
  /**
   * Returns true as SegmentBase does not get updated.
   * @returns {Boolean}
   */
  ;

  _proto.canBeOutOfSyncError = function canBeOutOfSyncError() {
    return false;
  }
  /**
   * Returns true as SegmentBase does not get updated.
   * @returns {Boolean}
   */
  ;

  _proto.isFinished = function isFinished() {
    return true;
  }
  /**
   * @returns {Boolean}
   */
  ;

  _proto.isInitialized = function isInitialized() {
    return this._isInitialized;
  }
  /**
   * @param {Object} newIndex
   */
  ;

  _proto._replace = function _replace(newIndex) {
    this._index = newIndex._index;
  };

  _proto._update = function _update() {
    log/* default.error */.Z.error("Base RepresentationIndex: Cannot update a SegmentList");
  };

  return BaseRepresentationIndex;
}();


;// CONCATENATED MODULE: ./src/parsers/manifest/dash/indexes/list.ts
/*
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





var ListRepresentationIndex = /*#__PURE__*/function () {
  /**
   * @param {Object} index
   * @param {Object} context
   */
  function ListRepresentationIndex(index, context) {
    var _a;

    var periodStart = context.periodStart,
        representationBaseURLs = context.representationBaseURLs,
        representationId = context.representationId,
        representationBitrate = context.representationBitrate;
    this._periodStart = periodStart;
    var presentationTimeOffset = index.presentationTimeOffset != null ? index.presentationTimeOffset : 0;
    var timescale = (_a = index.timescale) !== null && _a !== void 0 ? _a : 1;
    var indexTimeOffset = presentationTimeOffset - periodStart * timescale;
    var list = index.list.map(function (lItem) {
      return {
        mediaURLs: createIndexURLs(representationBaseURLs, lItem.media, representationId, representationBitrate),
        mediaRange: lItem.mediaRange
      };
    });
    this._index = {
      list: list,
      timescale: timescale,
      duration: index.duration,
      indexTimeOffset: indexTimeOffset,
      indexRange: index.indexRange,
      initialization: index.initialization == null ? undefined : {
        mediaURLs: createIndexURLs(representationBaseURLs, index.initialization.media, representationId, representationBitrate),
        range: index.initialization.range
      }
    };
  }
  /**
   * Construct init Segment.
   * @returns {Object}
   */


  var _proto = ListRepresentationIndex.prototype;

  _proto.getInitSegment = function getInitSegment() {
    return get_init_segment_getInitSegment(this._index);
  }
  /**
   * @param {Number} fromTime
   * @param {Number} duration
   * @returns {Array.<Object>}
   */
  ;

  _proto.getSegments = function getSegments(fromTime, dur) {
    var index = this._index;
    var duration = index.duration,
        list = index.list,
        timescale = index.timescale;
    var durationInSeconds = duration / timescale;
    var fromTimeInPeriod = fromTime - this._periodStart;

    var _getTimescaledRange = (0,index_helpers/* getTimescaledRange */.PZ)(fromTimeInPeriod, dur, timescale),
        up = _getTimescaledRange[0],
        to = _getTimescaledRange[1];

    var length = Math.min(list.length - 1, Math.floor(to / duration));
    var segments = [];
    var i = Math.floor(up / duration);

    while (i <= length) {
      var range = list[i].mediaRange;
      var mediaURLs = list[i].mediaURLs;
      var time = i * durationInSeconds + this._periodStart;
      var args = {
        id: String(i),
        time: time,
        isInit: false,
        range: range,
        duration: durationInSeconds,
        timescale: 1,
        end: time + durationInSeconds,
        mediaURLs: mediaURLs,
        timestampOffset: -(index.indexTimeOffset / timescale)
      };
      segments.push(args);
      i++;
    }

    return segments;
  }
  /**
   * Returns true if, based on the arguments, the index should be refreshed.
   * (If we should re-fetch the manifest)
   * @param {Number} _fromTime
   * @param {Number} toTime
   * @returns {Boolean}
   */
  ;

  _proto.shouldRefresh = function shouldRefresh(_fromTime, toTime) {
    var _this$_index = this._index,
        timescale = _this$_index.timescale,
        duration = _this$_index.duration,
        list = _this$_index.list;
    var scaledTo = toTime * timescale;
    var i = Math.floor(scaledTo / duration);
    return i < 0 || i >= list.length;
  }
  /**
   * Returns first position in this index, in seconds.
   * @returns {Number}
   */
  ;

  _proto.getFirstPosition = function getFirstPosition() {
    return this._periodStart;
  }
  /**
   * Returns last position in this index, in seconds.
   * @returns {Number}
   */
  ;

  _proto.getLastPosition = function getLastPosition() {
    var index = this._index;
    var duration = index.duration,
        list = index.list;
    return list.length * duration / index.timescale + this._periodStart;
  }
  /**
   * Returns true if a Segment returned by this index is still considered
   * available.
   * @param {Object} segment
   * @returns {Boolean}
   */
  ;

  _proto.isSegmentStillAvailable = function isSegmentStillAvailable() {
    return true;
  }
  /**
   * We do not check for discontinuity in SegmentList-based indexes.
   * @returns {null}
   */
  ;

  _proto.checkDiscontinuity = function checkDiscontinuity() {
    return null;
  }
  /**
   * @returns {boolean}
   */
  ;

  _proto.areSegmentsChronologicallyGenerated = function areSegmentsChronologicallyGenerated() {
    return true;
  }
  /**
   * SegmentList should not be updated.
   * @returns {Boolean}
   */
  ;

  _proto.canBeOutOfSyncError = function canBeOutOfSyncError() {
    return false;
  }
  /**
   * @returns {Boolean}
   */
  ;

  _proto.isFinished = function isFinished() {
    return true;
  }
  /**
   * @returns {Boolean}
   */
  ;

  _proto.isInitialized = function isInitialized() {
    return true;
  }
  /**
   * @param {Object} newIndex
   */
  ;

  _proto._replace = function _replace(newIndex) {
    this._index = newIndex._index;
  }
  /**
   * @param {Object} newIndex
   */
  ;

  _proto._update = function _update() {
    log/* default.error */.Z.error("List RepresentationIndex: Cannot update a SegmentList");
  };

  return ListRepresentationIndex;
}();


// EXTERNAL MODULE: ./src/errors/network_error.ts
var network_error = __webpack_require__(9362);
// EXTERNAL MODULE: ./src/parsers/manifest/utils/clear_timeline_from_position.ts
var clear_timeline_from_position = __webpack_require__(8232);
// EXTERNAL MODULE: ./src/parsers/manifest/utils/is_segment_still_available.ts
var is_segment_still_available = __webpack_require__(1091);
// EXTERNAL MODULE: ./src/parsers/manifest/utils/update_segment_timeline.ts
var update_segment_timeline = __webpack_require__(5505);
;// CONCATENATED MODULE: ./src/parsers/manifest/dash/indexes/timeline/convert_element_to_index_segment.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Translate parsed `S` node into Segment compatible with this index:
 * Find out the start, repeatCount and duration of each of these.
 *
 * @param {Object} item - parsed `S` node
 * @param {Object|null} previousItem - the previously parsed Segment (related
 * to the `S` node coming just before). If `null`, we're talking about the first
 * segment.
 * @param {Object|null} nextItem - the `S` node coming next. If `null`, we're
 * talking about the last segment.
 * @param {number} timelineStart - Absolute start for the timeline. In the same
 * timescale than the given `S` nodes.
 * @returns {Object|null}
 */

function convertElementsToIndexSegment(item, previousItem, nextItem, timelineStart) {
  var start = item.start;
  var duration = item.duration;
  var repeatCount = item.repeatCount;

  if (start == null) {
    if (previousItem == null) {
      start = timelineStart;
    } else if (previousItem.duration != null) {
      start = previousItem.start + previousItem.duration * (previousItem.repeatCount + 1);
    }
  }

  if ((duration == null || isNaN(duration)) && nextItem != null && nextItem.start != null && !isNaN(nextItem.start) && start != null && !isNaN(start)) {
    duration = nextItem.start - start;
  }

  if (start != null && !isNaN(start) && duration != null && !isNaN(duration) && (repeatCount == null || !isNaN(repeatCount))) {
    return {
      start: start,
      duration: duration,
      repeatCount: repeatCount === undefined ? 0 : repeatCount
    };
  }

  log/* default.warn */.Z.warn("DASH: A \"S\" Element could not have been parsed.");
  return null;
}
;// CONCATENATED MODULE: ./src/parsers/manifest/dash/indexes/timeline/parse_s_element.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Parse a given <S> element in the MPD into a JS Object.
 * @param {Element} root
 * @returns {Object}
 */

function parseSElement(root) {
  var parsedS = {};

  for (var j = 0; j < root.attributes.length; j++) {
    var attribute = root.attributes[j];

    switch (attribute.name) {
      case "t":
        var start = parseInt(attribute.value, 10);

        if (isNaN(start)) {
          log/* default.warn */.Z.warn("DASH: invalid t (\"" + attribute.value + "\")");
        } else {
          parsedS.start = start;
        }

        break;

      case "d":
        var duration = parseInt(attribute.value, 10);

        if (isNaN(duration)) {
          log/* default.warn */.Z.warn("DASH: invalid d (\"" + attribute.value + "\")");
        } else {
          parsedS.duration = duration;
        }

        break;

      case "r":
        var repeatCount = parseInt(attribute.value, 10);

        if (isNaN(repeatCount)) {
          log/* default.warn */.Z.warn("DASH: invalid r (\"" + attribute.value + "\")");
        } else {
          parsedS.repeatCount = repeatCount;
        }

        break;
    }
  }

  return parsedS;
}
;// CONCATENATED MODULE: ./src/parsers/manifest/dash/indexes/timeline/construct_timeline_from_elements.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Allows to generate the "timeline" for the "Timeline" RepresentationIndex.
 * Call this function when the timeline is unknown.
 * This function was added to only perform that task lazily, i.e. only when
 * first needed.
 * @param {HTMLCollection} elements - All S nodes constituting the corresponding
 * SegmentTimeline node.
 * @param {number} scaledPeriodStart - Absolute start of the concerned Period,
 * in the same scale than the segments found in `elements`.
 * @returns {Array.<Object>}
 */

function constructTimelineFromElements(elements, scaledPeriodStart) {
  var initialTimeline = [];

  for (var i = 0; i < elements.length; i++) {
    initialTimeline.push(parseSElement(elements[i]));
  }

  var timeline = [];

  for (var _i = 0; _i < initialTimeline.length; _i++) {
    var item = initialTimeline[_i];
    var previousItem = timeline[timeline.length - 1] === undefined ? null : timeline[timeline.length - 1];
    var nextItem = initialTimeline[_i + 1] === undefined ? null : initialTimeline[_i + 1];
    var timelineElement = convertElementsToIndexSegment(item, previousItem, nextItem, scaledPeriodStart);

    if (timelineElement != null) {
      timeline.push(timelineElement);
    }
  }

  return timeline;
}
;// CONCATENATED MODULE: ./src/parsers/manifest/dash/indexes/timeline/find_first_common_start_time.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * By comparing two timelines for the same content at different points in time,
 * retrieve the index in both timelines of the first segment having the same
 * starting time.
 * Returns `null` if not found.
 * @param {Array.<Object>} prevTimeline
 * @param {HTMLCollection} newElements
 * @returns {Object|null}
 */
function findFirstCommonStartTime(prevTimeline, newElements) {
  if (prevTimeline.length === 0 || newElements.length === 0) {
    return null;
  }

  var prevInitialStart = prevTimeline[0].start;
  var newFirstTAttr = newElements[0].getAttribute("t");
  var newInitialStart = newFirstTAttr === null ? null : parseInt(newFirstTAttr, 10);

  if (newInitialStart === null || Number.isNaN(newInitialStart)) {
    return null;
  }

  if (prevInitialStart === newInitialStart) {
    return {
      prevSegmentsIdx: 0,
      newElementsIdx: 0,
      repeatNumberInPrevSegments: 0,
      repeatNumberInNewElements: 0
    };
  } else if (prevInitialStart < newInitialStart) {
    var prevElt = prevTimeline[0];
    var prevElementIndex = 0;

    while (true) {
      if (prevElt.repeatCount > 0) {
        var diff = newInitialStart - prevElt.start;

        if (diff % prevElt.duration === 0 && diff / prevElt.duration <= prevElt.repeatCount) {
          var repeatNumberInPrevSegments = diff / prevElt.duration;
          return {
            repeatNumberInPrevSegments: repeatNumberInPrevSegments,
            prevSegmentsIdx: prevElementIndex,
            newElementsIdx: 0,
            repeatNumberInNewElements: 0
          };
        }
      }

      prevElementIndex++;

      if (prevElementIndex >= prevTimeline.length) {
        return null;
      }

      prevElt = prevTimeline[prevElementIndex];

      if (prevElt.start === newInitialStart) {
        return {
          prevSegmentsIdx: prevElementIndex,
          newElementsIdx: 0,
          repeatNumberInPrevSegments: 0,
          repeatNumberInNewElements: 0
        };
      } else if (prevElt.start > newInitialStart) {
        return null;
      }
    }
  } else {
    var newElementsIdx = 0;
    var newElt = newElements[0];
    var currentTimeOffset = newInitialStart;

    while (true) {
      var dAttr = newElt.getAttribute("d");
      var duration = dAttr === null ? null : parseInt(dAttr, 10);

      if (duration === null || Number.isNaN(duration)) {
        return null;
      }

      var rAttr = newElt.getAttribute("r");
      var repeatCount = rAttr === null ? null : parseInt(rAttr, 10);

      if (repeatCount !== null) {
        if (Number.isNaN(repeatCount) || repeatCount < 0) {
          return null;
        }

        if (repeatCount > 0) {
          var _diff = prevInitialStart - currentTimeOffset;

          if (_diff % duration === 0 && _diff / duration <= repeatCount) {
            var repeatNumberInNewElements = _diff / duration;
            return {
              repeatNumberInPrevSegments: 0,
              repeatNumberInNewElements: repeatNumberInNewElements,
              prevSegmentsIdx: 0,
              newElementsIdx: newElementsIdx
            };
          }
        }

        currentTimeOffset += duration * (repeatCount + 1);
      } else {
        currentTimeOffset += duration;
      }

      newElementsIdx++;

      if (newElementsIdx >= newElements.length) {
        return null;
      }

      newElt = newElements[newElementsIdx];
      var tAttr = newElt.getAttribute("t");
      var time = tAttr === null ? null : parseInt(tAttr, 10);

      if (time !== null) {
        if (Number.isNaN(time)) {
          return null;
        }

        currentTimeOffset = time;
      }

      if (currentTimeOffset === prevInitialStart) {
        return {
          newElementsIdx: newElementsIdx,
          prevSegmentsIdx: 0,
          repeatNumberInPrevSegments: 0,
          repeatNumberInNewElements: 0
        };
      } else if (currentTimeOffset > newInitialStart) {
        return null;
      }
    }
  }
}
;// CONCATENATED MODULE: ./src/parsers/manifest/dash/indexes/timeline/construct_timeline_from_previous_timeline.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





function constructTimelineFromPreviousTimeline(newElements, prevTimeline, scaledPeriodStart) {
  var _a; // Find first index in both timeline where a common segment is found.


  var commonStartInfo = findFirstCommonStartTime(prevTimeline, newElements);

  if (commonStartInfo === null) {
    log/* default.warn */.Z.warn("DASH: Cannot perform \"based\" update. Common segment not found.");
    return constructTimelineFromElements(newElements, scaledPeriodStart);
  }

  var prevSegmentsIdx = commonStartInfo.prevSegmentsIdx,
      newElementsIdx = commonStartInfo.newElementsIdx,
      repeatNumberInPrevSegments = commonStartInfo.repeatNumberInPrevSegments,
      repeatNumberInNewElements = commonStartInfo.repeatNumberInNewElements;
  /** Guess of the number of elements in common. */

  var numberCommonEltGuess = prevTimeline.length - prevSegmentsIdx;
  var lastCommonEltNewEltsIdx = numberCommonEltGuess + newElementsIdx - 1;

  if (lastCommonEltNewEltsIdx >= newElements.length) {
    log/* default.info */.Z.info("DASH: Cannot perform \"based\" update. New timeline too short");
    return constructTimelineFromElements(newElements, scaledPeriodStart);
  } // Remove elements which are not available anymore


  var newTimeline = prevTimeline.slice(prevSegmentsIdx);

  if (repeatNumberInPrevSegments > 0) {
    var commonEltInOldTimeline = newTimeline[0];
    commonEltInOldTimeline.start += commonEltInOldTimeline.duration * repeatNumberInPrevSegments;
    newTimeline[0].repeatCount -= repeatNumberInPrevSegments;
  }

  if (repeatNumberInNewElements > 0 && newElementsIdx !== 0) {
    log/* default.info */.Z.info("DASH: Cannot perform \"based\" update. " + "The new timeline has a different form.");
    return constructTimelineFromElements(newElements, scaledPeriodStart);
  }

  var prevLastElement = newTimeline[newTimeline.length - 1];
  var newCommonElt = parseSElement(newElements[lastCommonEltNewEltsIdx]);
  var newRepeatCountOffseted = ((_a = newCommonElt.repeatCount) !== null && _a !== void 0 ? _a : 0) - repeatNumberInNewElements;

  if (newCommonElt.duration !== prevLastElement.duration || prevLastElement.repeatCount > newRepeatCountOffseted) {
    log/* default.info */.Z.info("DASH: Cannot perform \"based\" update. " + "The new timeline has a different form at the beginning.");
    return constructTimelineFromElements(newElements, scaledPeriodStart);
  }

  if (newCommonElt.repeatCount !== undefined && newCommonElt.repeatCount > prevLastElement.repeatCount) {
    prevLastElement.repeatCount = newCommonElt.repeatCount;
  }

  var newEltsToPush = [];
  var items = [];

  for (var i = lastCommonEltNewEltsIdx + 1; i < newElements.length; i++) {
    items.push(parseSElement(newElements[i]));
  }

  for (var _i = 0; _i < items.length; _i++) {
    var item = items[_i];
    var previousItem = newEltsToPush[newEltsToPush.length - 1] === undefined ? prevLastElement : newEltsToPush[newEltsToPush.length - 1];
    var nextItem = items[_i + 1] === undefined ? null : items[_i + 1];
    var timelineElement = convertElementsToIndexSegment(item, previousItem, nextItem, scaledPeriodStart);

    if (timelineElement !== null) {
      newEltsToPush.push(timelineElement);
    }
  }

  return newTimeline.concat(newEltsToPush);
}
;// CONCATENATED MODULE: ./src/parsers/manifest/dash/indexes/timeline/timeline_representation_index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */










 // eslint-disable-next-line max-len


var MIN_DASH_S_ELEMENTS_TO_PARSE_UNSAFELY = config/* default.MIN_DASH_S_ELEMENTS_TO_PARSE_UNSAFELY */.Z.MIN_DASH_S_ELEMENTS_TO_PARSE_UNSAFELY;

var TimelineRepresentationIndex = /*#__PURE__*/function () {
  /**
   * @param {Object} index
   * @param {Object} context
   */
  function TimelineRepresentationIndex(index, timelineParser, context) {
    var _a;

    var manifestBoundsCalculator = context.manifestBoundsCalculator,
        isDynamic = context.isDynamic,
        representationBaseURLs = context.representationBaseURLs,
        representationId = context.representationId,
        representationBitrate = context.representationBitrate,
        periodStart = context.periodStart,
        periodEnd = context.periodEnd;
    var timescale = (_a = index.timescale) !== null && _a !== void 0 ? _a : 1;
    var presentationTimeOffset = index.presentationTimeOffset != null ? index.presentationTimeOffset : 0;
    var scaledStart = periodStart * timescale;
    var indexTimeOffset = presentationTimeOffset - scaledStart;
    this._manifestBoundsCalculator = manifestBoundsCalculator;
    this._lastUpdate = context.receivedTime == null ? performance.now() : context.receivedTime;
    this._unsafelyBaseOnPreviousIndex = null;

    if (context.unsafelyBaseOnPreviousRepresentation !== null && context.unsafelyBaseOnPreviousRepresentation.index instanceof TimelineRepresentationIndex) {
      // avoid too much nested references, to keep memory down
      context.unsafelyBaseOnPreviousRepresentation.index._unsafelyBaseOnPreviousIndex = null;
      this._unsafelyBaseOnPreviousIndex = context.unsafelyBaseOnPreviousRepresentation.index;
    }

    this._isDynamic = isDynamic;
    this._parseTimeline = timelineParser;
    this._index = {
      indexRange: index.indexRange,
      indexTimeOffset: indexTimeOffset,
      initialization: index.initialization == null ? undefined : {
        mediaURLs: createIndexURLs(representationBaseURLs, index.initialization.media, representationId, representationBitrate),
        range: index.initialization.range
      },
      mediaURLs: createIndexURLs(representationBaseURLs, index.media, representationId, representationBitrate),
      startNumber: index.startNumber,
      timeline: null,
      timescale: timescale
    };
    this._scaledPeriodStart = (0,index_helpers/* toIndexTime */.gT)(periodStart, this._index);
    this._scaledPeriodEnd = periodEnd == null ? undefined : (0,index_helpers/* toIndexTime */.gT)(periodEnd, this._index);
  }
  /**
   * Construct init Segment.
   * @returns {Object}
   */


  var _proto = TimelineRepresentationIndex.prototype;

  _proto.getInitSegment = function getInitSegment() {
    return get_init_segment_getInitSegment(this._index);
  }
  /**
   * Asks for segments to download for a given time range.
   * @param {Number} from - Beginning of the time wanted, in seconds
   * @param {Number} duration - duration wanted, in seconds
   * @returns {Array.<Object>}
   */
  ;

  _proto.getSegments = function getSegments(from, duration) {
    this._refreshTimeline(); // clear timeline if needed


    if (this._index.timeline === null) {
      this._index.timeline = this._getTimeline();
    } // destructuring to please TypeScript


    var _this$_index = this._index,
        mediaURLs = _this$_index.mediaURLs,
        startNumber = _this$_index.startNumber,
        timeline = _this$_index.timeline,
        timescale = _this$_index.timescale,
        indexTimeOffset = _this$_index.indexTimeOffset;
    return getSegmentsFromTimeline({
      mediaURLs: mediaURLs,
      startNumber: startNumber,
      timeline: timeline,
      timescale: timescale,
      indexTimeOffset: indexTimeOffset
    }, from, duration, this._scaledPeriodEnd);
  }
  /**
   * Returns true if the index should be refreshed.
   * @param {Number} _up
   * @param {Number} to
   * @returns {Boolean}
   */
  ;

  _proto.shouldRefresh = function shouldRefresh() {
    // DASH Manifest based on a SegmentTimeline should have minimumUpdatePeriod
    // attribute which should be sufficient to know when to refresh it.
    return false;
  }
  /**
   * Returns the starting time, in seconds, of the earliest segment currently
   * available.
   * Returns null if nothing is in the index
   * @returns {Number|null}
   */
  ;

  _proto.getFirstPosition = function getFirstPosition() {
    this._refreshTimeline();

    if (this._index.timeline === null) {
      this._index.timeline = this._getTimeline();
    }

    var timeline = this._index.timeline;
    return timeline.length === 0 ? null : (0,index_helpers/* fromIndexTime */.zG)(timeline[0].start, this._index);
  }
  /**
   * Returns the ending time, in seconds, of the last segment currently
   * available.
   * Returns null if nothing is in the index
   * @returns {Number|null}
   */
  ;

  _proto.getLastPosition = function getLastPosition() {
    this._refreshTimeline();

    if (this._index.timeline === null) {
      this._index.timeline = this._getTimeline();
    }

    var lastTime = TimelineRepresentationIndex.getIndexEnd(this._index.timeline, this._scaledPeriodStart);
    return lastTime === null ? null : (0,index_helpers/* fromIndexTime */.zG)(lastTime, this._index);
  }
  /**
   * Returns true if a Segment returned by this index is still considered
   * available.
   * Returns false if it is not available anymore.
   * Returns undefined if we cannot know whether it is still available or not.
   * @param {Object} segment
   * @returns {Boolean|undefined}
   */
  ;

  _proto.isSegmentStillAvailable = function isSegmentStillAvailable(segment) {
    if (segment.isInit) {
      return true;
    }

    this._refreshTimeline();

    if (this._index.timeline === null) {
      this._index.timeline = this._getTimeline();
    }

    var _this$_index2 = this._index,
        timeline = _this$_index2.timeline,
        timescale = _this$_index2.timescale,
        indexTimeOffset = _this$_index2.indexTimeOffset;
    return (0,is_segment_still_available/* default */.Z)(segment, timeline, timescale, indexTimeOffset);
  }
  /**
   * Checks if the time given is in a discontinuity. That is:
   *   - We're on the upper bound of the current range (end of the range - time
   *     is inferior to the timescale)
   *   - The next range starts after the end of the current range.
   * @param {Number} time
   * @returns {Number|null}
   */
  ;

  _proto.checkDiscontinuity = function checkDiscontinuity(time) {
    this._refreshTimeline();

    var timeline = this._index.timeline;

    if (timeline === null) {
      timeline = this._getTimeline();
      this._index.timeline = timeline;
    }

    return (0,index_helpers/* checkDiscontinuity */._j)({
      timeline: timeline,
      timescale: this._index.timescale,
      indexTimeOffset: this._index.indexTimeOffset
    }, time, this._scaledPeriodEnd);
  }
  /**
   * @param {Error} error
   * @returns {Boolean}
   */
  ;

  _proto.canBeOutOfSyncError = function canBeOutOfSyncError(error) {
    if (!this._isDynamic) {
      return false;
    }

    return error instanceof network_error/* default */.Z && error.isHttpError(404);
  };

  _proto.areSegmentsChronologicallyGenerated = function areSegmentsChronologicallyGenerated() {
    return true;
  }
  /**
   * Replace this RepresentationIndex with one from a new version of the
   * Manifest.
   * @param {Object} newIndex
   */
  ;

  _proto._replace = function _replace(newIndex) {
    this._parseTimeline = newIndex._parseTimeline;
    this._index = newIndex._index;
    this._isDynamic = newIndex._isDynamic;
    this._scaledPeriodStart = newIndex._scaledPeriodStart;
    this._scaledPeriodEnd = newIndex._scaledPeriodEnd;
    this._lastUpdate = newIndex._lastUpdate;
    this._manifestBoundsCalculator = newIndex._manifestBoundsCalculator;
  }
  /**
   * Update this RepresentationIndex with a shorter version of it coming from a
   * new version of the MPD.
   * @param {Object} newIndex
   */
  ;

  _proto._update = function _update(newIndex) {
    if (this._index.timeline === null) {
      this._index.timeline = this._getTimeline();
    }

    if (newIndex._index.timeline === null) {
      newIndex._index.timeline = newIndex._getTimeline();
    }

    (0,update_segment_timeline/* default */.Z)(this._index.timeline, newIndex._index.timeline);
    this._isDynamic = newIndex._isDynamic;
    this._scaledPeriodStart = newIndex._scaledPeriodStart;
    this._scaledPeriodEnd = newIndex._scaledPeriodEnd;
    this._lastUpdate = newIndex._lastUpdate;
  }
  /**
   * Returns `true` if this RepresentationIndex currently contains its last
   * segment.
   * Returns `false` if it's still pending.
   * @returns {Boolean}
   */
  ;

  _proto.isFinished = function isFinished() {
    if (!this._isDynamic) {
      return true;
    }

    if (this._index.timeline === null) {
      this._index.timeline = this._getTimeline();
    }

    var timeline = this._index.timeline;

    if (this._scaledPeriodEnd === undefined || timeline.length === 0) {
      return false;
    }

    var lastTimelineElement = timeline[timeline.length - 1];
    var lastTime = (0,index_helpers/* getIndexSegmentEnd */.jH)(lastTimelineElement, null, this._scaledPeriodEnd); // We can never be truly sure if a SegmentTimeline-based index is finished
    // or not (1 / 60 for possible rounding errors)

    return lastTime + 1 / 60 >= this._scaledPeriodEnd;
  }
  /**
   * @returns {Boolean}
   */
  ;

  _proto.isInitialized = function isInitialized() {
    return true;
  }
  /**
   * Clean-up timeline to remove segment information which should not be
   * available due to timeshifting.
   */
  ;

  _proto._refreshTimeline = function _refreshTimeline() {
    if (this._index.timeline === null) {
      this._index.timeline = this._getTimeline();
    }

    var firstPosition = this._manifestBoundsCalculator.estimateMinimumBound();

    if (firstPosition == null) {
      return; // we don't know yet
    }

    var scaledFirstPosition = (0,index_helpers/* toIndexTime */.gT)(firstPosition, this._index);
    (0,clear_timeline_from_position/* default */.Z)(this._index.timeline, scaledFirstPosition);
  };

  TimelineRepresentationIndex.getIndexEnd = function getIndexEnd(timeline, scaledPeriodEnd) {
    if (timeline.length <= 0) {
      return null;
    }

    return (0,index_helpers/* getIndexSegmentEnd */.jH)(timeline[timeline.length - 1], null, scaledPeriodEnd);
  }
  /**
   * Allows to generate the "timeline" for this RepresentationIndex.
   * Call this function when the timeline is unknown.
   * This function was added to only perform that task lazily, i.e. only when
   * first needed.
   * After calling it, every now unneeded variable will be freed from memory.
   * This means that calling _getTimeline more than once will just return an
   * empty array.
   *
   * /!\ Please note that this structure should follow the exact same structure
   * than a SegmentTimeline element in the corresponding MPD.
   * This means:
   *   - It should have the same amount of elements in its array than there was
   *     `<S>` elements in the SegmentTimeline.
   *   - Each of those same elements should have the same start time, the same
   *     duration and the same repeat counter than what could be deduced from
   *     the SegmentTimeline.
   * This is needed to be able to run parsing optimization when refreshing the
   * MPD. Not doing so could lead to the RxPlayer not being able to play the
   * stream anymore.
   * @returns {Array.<Object>}
   */
  ;

  _proto._getTimeline = function _getTimeline() {
    if (this._parseTimeline === null) {
      if (this._index.timeline !== null) {
        return this._index.timeline;
      }

      log/* default.error */.Z.error("DASH: Timeline already lazily parsed.");
      return [];
    }

    var newElements = this._parseTimeline();

    this._parseTimeline = null; // Free memory

    if (this._unsafelyBaseOnPreviousIndex === null || newElements.length < MIN_DASH_S_ELEMENTS_TO_PARSE_UNSAFELY) {
      // Just completely parse the current timeline
      return constructTimelineFromElements(newElements, this._scaledPeriodStart);
    } // Construct previously parsed timeline if not already done


    var prevTimeline;

    if (this._unsafelyBaseOnPreviousIndex._index.timeline === null) {
      prevTimeline = this._unsafelyBaseOnPreviousIndex._getTimeline();
      this._unsafelyBaseOnPreviousIndex._index.timeline = prevTimeline;
    } else {
      prevTimeline = this._unsafelyBaseOnPreviousIndex._index.timeline;
    }

    this._unsafelyBaseOnPreviousIndex = null; // Free memory

    return constructTimelineFromPreviousTimeline(newElements, prevTimeline, this._scaledPeriodStart);
  };

  return TimelineRepresentationIndex;
}();


;// CONCATENATED MODULE: ./src/parsers/manifest/dash/indexes/timeline/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* harmony default export */ const timeline = (TimelineRepresentationIndex);
;// CONCATENATED MODULE: ./src/parsers/manifest/dash/indexes/template.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



var MINIMUM_SEGMENT_SIZE = config/* default.MINIMUM_SEGMENT_SIZE */.Z.MINIMUM_SEGMENT_SIZE;
/**
 * IRepresentationIndex implementation for DASH' SegmentTemplate without a
 * SegmentTimeline.
 * @class TemplateRepresentationIndex
 */

var TemplateRepresentationIndex = /*#__PURE__*/function () {
  /**
   * @param {Object} index
   * @param {Object} context
   */
  function TemplateRepresentationIndex(index, context) {
    var _a;

    var aggressiveMode = context.aggressiveMode,
        availabilityTimeOffset = context.availabilityTimeOffset,
        manifestBoundsCalculator = context.manifestBoundsCalculator,
        isDynamic = context.isDynamic,
        periodEnd = context.periodEnd,
        periodStart = context.periodStart,
        representationBaseURLs = context.representationBaseURLs,
        representationId = context.representationId,
        representationBitrate = context.representationBitrate;
    var timescale = (_a = index.timescale) !== null && _a !== void 0 ? _a : 1;
    this._availabilityTimeOffset = availabilityTimeOffset;
    this._manifestBoundsCalculator = manifestBoundsCalculator;
    this._aggressiveMode = aggressiveMode;
    var presentationTimeOffset = index.presentationTimeOffset != null ? index.presentationTimeOffset : 0;
    var scaledStart = periodStart * timescale;
    var indexTimeOffset = presentationTimeOffset - scaledStart;

    if (index.duration === undefined) {
      throw new Error("Invalid SegmentTemplate: no duration");
    }

    this._index = {
      duration: index.duration,
      timescale: timescale,
      indexRange: index.indexRange,
      indexTimeOffset: indexTimeOffset,
      initialization: index.initialization == null ? undefined : {
        mediaURLs: createIndexURLs(representationBaseURLs, index.initialization.media, representationId, representationBitrate),
        range: index.initialization.range
      },
      mediaURLs: createIndexURLs(representationBaseURLs, index.media, representationId, representationBitrate),
      presentationTimeOffset: presentationTimeOffset,
      startNumber: index.startNumber
    };
    this._isDynamic = isDynamic;
    this._periodStart = periodStart;
    this._relativePeriodEnd = periodEnd == null ? undefined : periodEnd - periodStart;
  }
  /**
   * Construct init Segment.
   * @returns {Object}
   */


  var _proto = TemplateRepresentationIndex.prototype;

  _proto.getInitSegment = function getInitSegment() {
    return get_init_segment_getInitSegment(this._index);
  }
  /**
   * @param {Number} fromTime
   * @param {Number} dur
   * @returns {Array.<Object>}
   */
  ;

  _proto.getSegments = function getSegments(fromTime, dur) {
    var index = this._index;
    var duration = index.duration,
        startNumber = index.startNumber,
        timescale = index.timescale,
        mediaURLs = index.mediaURLs;
    var scaledStart = this._periodStart * timescale;
    var scaledEnd = this._relativePeriodEnd == null ? undefined : this._relativePeriodEnd * timescale; // Convert the asked position to the right timescales, and consider them
    // relatively to the Period's start.

    var upFromPeriodStart = fromTime * timescale - scaledStart;
    var toFromPeriodStart = (fromTime + dur) * timescale - scaledStart;

    var firstSegmentStart = this._getFirstSegmentStart();

    var lastSegmentStart = this._getLastSegmentStart();

    if (firstSegmentStart == null || lastSegmentStart == null) {
      return [];
    }

    var startPosition = Math.max(firstSegmentStart, upFromPeriodStart);
    var lastWantedStartPosition = Math.min(lastSegmentStart, toFromPeriodStart);

    if (lastWantedStartPosition + duration <= startPosition) {
      return [];
    }

    var segments = []; // number corresponding to the Period's start

    var numberOffset = startNumber == null ? 1 : startNumber; // calcul initial time from Period start, where the first segment would have
    // the `0` number

    var numberIndexedToZero = Math.floor(startPosition / duration);

    for (var timeFromPeriodStart = numberIndexedToZero * duration; timeFromPeriodStart <= lastWantedStartPosition; timeFromPeriodStart += duration) {
      // To obtain the real number, adds the real number from the Period's start
      var realNumber = numberIndexedToZero + numberOffset;
      var realDuration = scaledEnd != null && timeFromPeriodStart + duration > scaledEnd ? scaledEnd - timeFromPeriodStart : duration;
      var realTime = timeFromPeriodStart + scaledStart;
      var manifestTime = timeFromPeriodStart + this._index.presentationTimeOffset;
      var detokenizedURLs = mediaURLs === null ? null : mediaURLs.map(createDashUrlDetokenizer(manifestTime, realNumber));
      var args = {
        id: String(realNumber),
        number: realNumber,
        time: realTime / timescale,
        end: (realTime + realDuration) / timescale,
        duration: realDuration / timescale,
        timescale: 1,
        isInit: false,
        scaledDuration: realDuration / timescale,
        mediaURLs: detokenizedURLs,
        timestampOffset: -(index.indexTimeOffset / timescale)
      };
      segments.push(args);
      numberIndexedToZero++;
    }

    return segments;
  }
  /**
   * Returns first possible position in the index, in seconds.
   * @returns {number|null|undefined}
   */
  ;

  _proto.getFirstPosition = function getFirstPosition() {
    var firstSegmentStart = this._getFirstSegmentStart();

    if (firstSegmentStart == null) {
      return firstSegmentStart; // return undefined or null
    }

    return firstSegmentStart / this._index.timescale + this._periodStart;
  }
  /**
   * Returns last possible position in the index, in seconds.
   * @returns {number|null}
   */
  ;

  _proto.getLastPosition = function getLastPosition() {
    var lastSegmentStart = this._getLastSegmentStart();

    if (lastSegmentStart == null) {
      // In that case (null or undefined), getLastPosition should reflect
      // the result of getLastSegmentStart, as the meaning is the same for
      // the two functions. So, we return the result of the latter.
      return lastSegmentStart;
    }

    var lastSegmentEnd = lastSegmentStart + this._index.duration;
    return lastSegmentEnd / this._index.timescale + this._periodStart;
  }
  /**
   * Returns true if, based on the arguments, the index should be refreshed.
   * We never have to refresh a SegmentTemplate-based manifest.
   * @returns {Boolean}
   */
  ;

  _proto.shouldRefresh = function shouldRefresh() {
    return false;
  }
  /**
   * We cannot check for discontinuity in SegmentTemplate-based indexes.
   * @returns {null}
   */
  ;

  _proto.checkDiscontinuity = function checkDiscontinuity() {
    return null;
  }
  /**
   * @returns {Boolean}
   */
  ;

  _proto.areSegmentsChronologicallyGenerated = function areSegmentsChronologicallyGenerated() {
    return true;
  }
  /**
   * Returns `true` if the given segment should still be available as of now
   * (not removed since and still request-able).
   * Returns `false` if that's not the case.
   * Returns `undefined` if we do not know whether that's the case or not.
   * @param {Object} segment
   * @returns {boolean|undefined}
   */
  ;

  _proto.isSegmentStillAvailable = function isSegmentStillAvailable(segment) {
    if (segment.isInit) {
      return true;
    }

    var segmentsForTime = this.getSegments(segment.time, 0.1);

    if (segmentsForTime.length === 0) {
      return false;
    }

    return segmentsForTime[0].time === segment.time && segmentsForTime[0].end === segment.end && segmentsForTime[0].number === segment.number;
  }
  /**
   * SegmentTemplate without a SegmentTimeline should not be updated.
   * @returns {Boolean}
   */
  ;

  _proto.canBeOutOfSyncError = function canBeOutOfSyncError() {
    return false;
  }
  /**
   * @returns {Boolean}
   */
  ;

  _proto.isFinished = function isFinished() {
    if (!this._isDynamic) {
      return true;
    }

    if (this._relativePeriodEnd == null) {
      return false;
    }

    var timescale = this._index.timescale;

    var lastSegmentStart = this._getLastSegmentStart(); // As last segment start is null if live time is before
    // current period, consider the index not to be finished.


    if (lastSegmentStart == null) {
      return false;
    }

    var lastSegmentEnd = lastSegmentStart + this._index.duration; // (1 / 60 for possible rounding errors)

    var roundingError = 1 / 60 * timescale;
    return lastSegmentEnd + roundingError >= this._relativePeriodEnd * timescale;
  }
  /**
   * @returns {Boolean}
   */
  ;

  _proto.isInitialized = function isInitialized() {
    return true;
  }
  /**
   * @param {Object} newIndex
   */
  ;

  _proto._replace = function _replace(newIndex) {
    this._index = newIndex._index;
    this._aggressiveMode = newIndex._aggressiveMode;
    this._isDynamic = newIndex._isDynamic;
    this._periodStart = newIndex._periodStart;
    this._relativePeriodEnd = newIndex._relativePeriodEnd;
    this._manifestBoundsCalculator = newIndex._manifestBoundsCalculator;
  }
  /**
   * @param {Object} newIndex
   */
  ;

  _proto._update = function _update(newIndex) {
    // As segments are not declared individually, as long as this Representation
    // is present, we have every information we need
    this._replace(newIndex);
  }
  /**
   * Returns the timescaled start of the first segment that should be available,
   * relatively to the start of the Period.
   * @returns {number | null | undefined}
   */
  ;

  _proto._getFirstSegmentStart = function _getFirstSegmentStart() {
    if (!this._isDynamic) {
      return 0; // it is the start of the Period
    } // 1 - check that this index is already available


    if (this._relativePeriodEnd === 0 || this._relativePeriodEnd == null) {
      // /!\ The scaled max position augments continuously and might not
      // reflect exactly the real server-side value. As segments are
      // generated discretely.
      var maximumBound = this._manifestBoundsCalculator.estimateMaximumBound();

      if (maximumBound !== undefined && maximumBound < this._periodStart) {
        // Maximum position is before this period.
        // No segment is yet available here
        return null;
      }
    }

    var _this$_index = this._index,
        duration = _this$_index.duration,
        timescale = _this$_index.timescale;

    var firstPosition = this._manifestBoundsCalculator.estimateMinimumBound();

    if (firstPosition === undefined) {
      return undefined;
    }

    var segmentTime = firstPosition > this._periodStart ? (firstPosition - this._periodStart) * timescale : 0;
    var numberIndexedToZero = Math.floor(segmentTime / duration);
    return numberIndexedToZero * duration;
  }
  /**
   * Returns the timescaled start of the last segment that should be available,
   * relatively to the start of the Period.
   * Returns null if live time is before current period.
   * @returns {number|null|undefined}
   */
  ;

  _proto._getLastSegmentStart = function _getLastSegmentStart() {
    var _this$_index2 = this._index,
        duration = _this$_index2.duration,
        timescale = _this$_index2.timescale;

    if (this._isDynamic) {
      var lastPos = this._manifestBoundsCalculator.estimateMaximumBound();

      if (lastPos === undefined) {
        return undefined;
      }

      var agressiveModeOffset = this._aggressiveMode ? duration / timescale : 0;

      if (this._relativePeriodEnd != null && this._relativePeriodEnd < lastPos + agressiveModeOffset - this._periodStart) {
        var scaledRelativePeriodEnd = this._relativePeriodEnd * timescale;

        if (scaledRelativePeriodEnd < duration) {
          return null;
        }

        return (Math.floor(scaledRelativePeriodEnd / duration) - 1) * duration;
      } // /!\ The scaled last position augments continuously and might not
      // reflect exactly the real server-side value. As segments are
      // generated discretely.


      var scaledLastPosition = (lastPos - this._periodStart) * timescale; // Maximum position is before this period.
      // No segment is yet available here

      if (scaledLastPosition < 0) {
        return null;
      }

      var availabilityTimeOffset = ((this._availabilityTimeOffset !== undefined ? this._availabilityTimeOffset : 0) + agressiveModeOffset) * timescale;
      var numberOfSegmentsAvailable = Math.floor((scaledLastPosition + availabilityTimeOffset) / duration);
      return numberOfSegmentsAvailable <= 0 ? null : (numberOfSegmentsAvailable - 1) * duration;
    } else {
      var maximumTime = (this._relativePeriodEnd === undefined ? 0 : this._relativePeriodEnd) * timescale;
      var numberIndexedToZero = Math.ceil(maximumTime / duration) - 1;
      var regularLastSegmentStart = numberIndexedToZero * duration; // In some SegmentTemplate, we could think that there is one more
      // segment that there actually is due to a very little difference between
      // the period's duration and a multiple of a segment's duration.
      // Check that we're within a good margin

      var minimumDuration = MINIMUM_SEGMENT_SIZE * timescale;

      if (maximumTime - regularLastSegmentStart > minimumDuration || numberIndexedToZero === 0) {
        return regularLastSegmentStart;
      }

      return (numberIndexedToZero - 1) * duration;
    }
  };

  return TemplateRepresentationIndex;
}();


;// CONCATENATED MODULE: ./src/parsers/manifest/dash/resolve_base_urls.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * @param {Array.<string>} currentBaseURLs
 * @param {Array.<Object>} newBaseURLs
 * @returns {Array.<string>}
 */

function resolveBaseURLs(currentBaseURLs, newBaseURLs) {
  var result = [];

  if (newBaseURLs.length === 0) {
    return currentBaseURLs;
  } else if (currentBaseURLs.length === 0) {
    for (var i = 0; i < newBaseURLs.length; i++) {
      if (!(0,array_includes/* default */.Z)(result, newBaseURLs[i].value)) {
        result.push(newBaseURLs[i].value);
      }
    }

    return result;
  } else {
    for (var _i = 0; _i < currentBaseURLs.length; _i++) {
      var rootURL = currentBaseURLs[_i];

      for (var j = 0; j < newBaseURLs.length; j++) {
        var newURL = (0,resolve_url/* default */.Z)(rootURL, newBaseURLs[j].value);

        if (!(0,array_includes/* default */.Z)(result, newURL)) {
          result.push(newURL);
        }
      }
    }
  }

  return result;
}
;// CONCATENATED MODULE: ./src/parsers/manifest/dash/parse_representation_index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 // eslint-disable-next-line max-len




/**
 * Parse the specific segment indexing information found in a representation
 * into a IRepresentationIndex implementation.
 * @param {Array.<Object>} representation
 * @param {Object} representationInfos
 * @returns {Array.<Object>}
 */

function parseRepresentationIndex(representation, representationInfos) {
  var _a, _b;

  var representationBaseURLs = resolveBaseURLs(representationInfos.baseURLs, representation.children.baseURLs);
  var aggressiveMode = representationInfos.aggressiveMode,
      availabilityTimeOffset = representationInfos.availabilityTimeOffset,
      manifestBoundsCalculator = representationInfos.manifestBoundsCalculator,
      isDynamic = representationInfos.isDynamic,
      periodEnd = representationInfos.end,
      periodStart = representationInfos.start,
      receivedTime = representationInfos.receivedTime,
      timeShiftBufferDepth = representationInfos.timeShiftBufferDepth,
      unsafelyBaseOnPreviousRepresentation = representationInfos.unsafelyBaseOnPreviousRepresentation;
  var context = {
    aggressiveMode: aggressiveMode,
    availabilityTimeOffset: availabilityTimeOffset,
    unsafelyBaseOnPreviousRepresentation: unsafelyBaseOnPreviousRepresentation,
    manifestBoundsCalculator: manifestBoundsCalculator,
    isDynamic: isDynamic,
    periodEnd: periodEnd,
    periodStart: periodStart,
    receivedTime: receivedTime,
    representationBaseURLs: representationBaseURLs,
    representationBitrate: representation.attributes.bitrate,
    representationId: representation.attributes.id,
    timeShiftBufferDepth: timeShiftBufferDepth
  };
  var representationIndex;

  if (representation.children.segmentBase !== undefined) {
    var segmentBase = representation.children.segmentBase;
    context.availabilityTimeOffset = representationInfos.availabilityTimeOffset + extractMinimumAvailabilityTimeOffset(representation.children.baseURLs) + ((_a = segmentBase.availabilityTimeOffset) !== null && _a !== void 0 ? _a : 0);
    representationIndex = new BaseRepresentationIndex(segmentBase, context);
  } else if (representation.children.segmentList !== undefined) {
    var segmentList = representation.children.segmentList;
    representationIndex = new ListRepresentationIndex(segmentList, context);
  } else if (representation.children.segmentTemplate !== undefined || representationInfos.parentSegmentTemplates.length > 0) {
    var segmentTemplates = representationInfos.parentSegmentTemplates.slice();
    var childSegmentTemplate = representation.children.segmentTemplate;

    if (childSegmentTemplate !== undefined) {
      segmentTemplates.push(childSegmentTemplate);
    }

    var segmentTemplate = object_assign/* default.apply */.Z.apply(void 0, [{}].concat(segmentTemplates));
    context.availabilityTimeOffset = representationInfos.availabilityTimeOffset + extractMinimumAvailabilityTimeOffset(representation.children.baseURLs) + ((_b = segmentTemplate.availabilityTimeOffset) !== null && _b !== void 0 ? _b : 0);
    var timelineParser = segmentTemplate.timelineParser;
    representationIndex = timelineParser !== undefined ? new timeline(segmentTemplate, timelineParser, context) : new TemplateRepresentationIndex(segmentTemplate, context);
  } else {
    var adaptationChildren = representationInfos.adaptation.children;

    if (adaptationChildren.segmentBase !== undefined) {
      var _segmentBase = adaptationChildren.segmentBase;
      representationIndex = new BaseRepresentationIndex(_segmentBase, context);
    } else if (adaptationChildren.segmentList !== undefined) {
      var _segmentList = adaptationChildren.segmentList;
      representationIndex = new ListRepresentationIndex(_segmentList, context);
    } else {
      representationIndex = new TemplateRepresentationIndex({
        duration: Number.MAX_VALUE,
        timescale: 1,
        startNumber: 0,
        initialization: {
          media: ""
        },
        media: ""
      }, context);
    }
  }

  return representationIndex;
}
;// CONCATENATED MODULE: ./src/parsers/manifest/dash/parse_representations.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Process intermediate representations to create final parsed representations.
 * @param {Array.<Object>} representationsIR
 * @param {Object} adaptationInfos
 * @returns {Array.<Object>}
 */

function parseRepresentations(representationsIR, adaptation, adaptationInfos) {
  var _a, _b;

  var parsedRepresentations = [];

  var _loop = function _loop(reprIdx) {
    var representation = representationsIR[reprIdx]; // Compute Representation ID

    var representationID = representation.attributes.id != null ? representation.attributes.id : String(representation.attributes.bitrate) + (representation.attributes.height != null ? "-" + representation.attributes.height : "") + (representation.attributes.width != null ? "-" + representation.attributes.width : "") + (representation.attributes.mimeType != null ? "-" + representation.attributes.mimeType : "") + (representation.attributes.codecs != null ? "-" + representation.attributes.codecs : ""); // Avoid duplicate IDs

    while (parsedRepresentations.some(function (r) {
      return r.id === representationID;
    })) {
      representationID += "-dup";
    } // Retrieve previous version of the Representation, if one.


    var unsafelyBaseOnPreviousRepresentation = (_b = (_a = adaptationInfos.unsafelyBaseOnPreviousAdaptation) === null || _a === void 0 ? void 0 : _a.getRepresentation(representationID)) !== null && _b !== void 0 ? _b : null;
    var representationInfos = (0,object_assign/* default */.Z)({}, adaptationInfos, {
      unsafelyBaseOnPreviousRepresentation: unsafelyBaseOnPreviousRepresentation,
      adaptation: adaptation
    });
    var representationIndex = parseRepresentationIndex(representation, representationInfos); // Find bitrate

    var representationBitrate = void 0;

    if (representation.attributes.bitrate == null) {
      log/* default.warn */.Z.warn("DASH: No usable bitrate found in the Representation.");
      representationBitrate = 0;
    } else {
      representationBitrate = representation.attributes.bitrate;
    } // Construct Representation Base


    var parsedRepresentation = {
      bitrate: representationBitrate,
      index: representationIndex,
      id: representationID
    }; // Add optional attributes

    var codecs = void 0;

    if (representation.attributes.codecs != null) {
      codecs = representation.attributes.codecs;
    } else if (adaptation.attributes.codecs != null) {
      codecs = adaptation.attributes.codecs;
    }

    if (codecs != null) {
      codecs = codecs === "mp4a.40.02" ? "mp4a.40.2" : codecs;
      parsedRepresentation.codecs = codecs;
    }

    if (representation.attributes.frameRate != null) {
      parsedRepresentation.frameRate = representation.attributes.frameRate;
    } else if (adaptation.attributes.frameRate != null) {
      parsedRepresentation.frameRate = adaptation.attributes.frameRate;
    }

    if (representation.attributes.height != null) {
      parsedRepresentation.height = representation.attributes.height;
    } else if (adaptation.attributes.height != null) {
      parsedRepresentation.height = adaptation.attributes.height;
    }

    if (representation.attributes.mimeType != null) {
      parsedRepresentation.mimeType = representation.attributes.mimeType;
    } else if (adaptation.attributes.mimeType != null) {
      parsedRepresentation.mimeType = adaptation.attributes.mimeType;
    }

    if (representation.attributes.width != null) {
      parsedRepresentation.width = representation.attributes.width;
    } else if (adaptation.attributes.width != null) {
      parsedRepresentation.width = adaptation.attributes.width;
    }

    if (adaptation.children.contentProtections != null) {
      var contentProtections = adaptation.children.contentProtections.reduce(function (acc, cp) {
        var systemId;

        if (cp.attributes.schemeIdUri !== undefined && cp.attributes.schemeIdUri.substring(0, 9) === "urn:uuid:") {
          systemId = cp.attributes.schemeIdUri.substring(9).replace(/-/g, "").toLowerCase();
        }

        if (cp.attributes.keyId !== undefined && cp.attributes.keyId.length > 0) {
          acc.keyIds.push({
            keyId: cp.attributes.keyId,
            systemId: systemId
          });
        }

        if (systemId !== undefined) {
          var cencPssh = cp.children.cencPssh;

          for (var i = 0; i < cencPssh.length; i++) {
            var data = cencPssh[i];

            if (acc.initData.cenc === undefined) {
              acc.initData.cenc = [];
            }

            acc.initData.cenc.push({
              systemId: systemId,
              data: data
            });
          }
        }

        return acc;
      }, {
        keyIds: [],
        initData: {}
      });

      if (Object.keys(contentProtections.initData).length > 0 || contentProtections.keyIds.length > 0) {
        parsedRepresentation.contentProtections = contentProtections;
      }
    }

    parsedRepresentations.push(parsedRepresentation);
  };

  for (var reprIdx = 0; reprIdx < representationsIR.length; reprIdx++) {
    _loop(reprIdx);
  }

  return parsedRepresentations;
}
;// CONCATENATED MODULE: ./src/parsers/manifest/dash/parse_adaptation_sets.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



 // eslint-disable-next-line max-len





/**
 * Detect if the accessibility given defines an adaptation for the visually
 * impaired.
 * Based on DVB Document A168 (DVB-DASH).
 * @param {Object} accessibility
 * @returns {Boolean}
 */

function isVisuallyImpaired(accessibility) {
  if (accessibility == null) {
    return false;
  }

  return accessibility.schemeIdUri === "urn:tva:metadata:cs:AudioPurposeCS:2007" && accessibility.value === "1";
}
/**
 * Detect if the accessibility given defines an adaptation for the hard of
 * hearing.
 * Based on DVB Document A168 (DVB-DASH).
 * @param {Object} accessibility
 * @returns {Boolean}
 */


function isHardOfHearing(accessibility) {
  if (accessibility == null) {
    return false;
  }

  return accessibility.schemeIdUri === "urn:tva:metadata:cs:AudioPurposeCS:2007" && accessibility.value === "2";
}
/**
 * Detect if the accessibility given defines an AdaptationSet containing a sign
 * language interpretation.
 * Based on DASH-IF 4.3.
 * @param {Object} accessibility
 * @returns {Boolean}
 */


function hasSignLanguageInterpretation(accessibility) {
  if (accessibility == null) {
    return false;
  }

  return accessibility.schemeIdUri === "urn:mpeg:dash:role:2011" && accessibility.value === "sign";
}
/**
 * Contruct Adaptation ID from the information we have.
 * @param {Object} adaptation
 * @param {Array.<Object>} representations
 * @param {Object} infos
 * @returns {string}
 */


function getAdaptationID(adaptation, infos) {
  if ((0,is_non_empty_string/* default */.Z)(adaptation.attributes.id)) {
    return adaptation.attributes.id;
  }

  var idString = infos.type;

  if ((0,is_non_empty_string/* default */.Z)(adaptation.attributes.language)) {
    idString += "-" + adaptation.attributes.language;
  }

  if (infos.isClosedCaption === true) {
    idString += "-cc";
  }

  if (infos.isAudioDescription === true) {
    idString += "-ad";
  }

  if (infos.isSignInterpreted === true) {
    idString += "-si";
  }

  if ((0,is_non_empty_string/* default */.Z)(adaptation.attributes.contentType)) {
    idString += "-" + adaptation.attributes.contentType;
  }

  if ((0,is_non_empty_string/* default */.Z)(adaptation.attributes.codecs)) {
    idString += "-" + adaptation.attributes.codecs;
  }

  if ((0,is_non_empty_string/* default */.Z)(adaptation.attributes.mimeType)) {
    idString += "-" + adaptation.attributes.mimeType;
  }

  if ((0,is_non_empty_string/* default */.Z)(adaptation.attributes.frameRate)) {
    idString += "-" + adaptation.attributes.frameRate;
  }

  return idString;
}
/**
 * Returns a list of ID this adaptation can be seamlessly switched to
 * @param {Object} adaptation
 * @returns {Array.<string>}
 */


function getAdaptationSetSwitchingIDs(adaptation) {
  if (adaptation.children.supplementalProperties != null) {
    var supplementalProperties = adaptation.children.supplementalProperties;

    for (var j = 0; j < supplementalProperties.length; j++) {
      var supplementalProperty = supplementalProperties[j];

      if (supplementalProperty.schemeIdUri === "urn:mpeg:dash:adaptation-set-switching:2016" && supplementalProperty.value != null) {
        return supplementalProperty.value.split(",").map(function (id) {
          return id.trim();
        }).filter(function (id) {
          return id;
        });
      }
    }
  }

  return [];
}
/**
 * Process AdaptationSets intermediate representations to return under its final
 * form.
 * Note that the AdaptationSets returned are sorted by priority (from the most
 * priority to the least one).
 * @param {Array.<Object>} adaptationsIR
 * @param {Object} periodInfos
 * @returns {Array.<Object>}
 */


function parseAdaptationSets(adaptationsIR, periodInfos) {
  var _a, _b, _c, _d;

  var parsedAdaptations = {};
  var adaptationSwitchingInfos = {};
  var parsedAdaptationsIDs = [];
  /**
   * Index of the last parsed AdaptationSet with a Role set as "main" in
   * `parsedAdaptations` for a given type.
   * Not defined for a type with no main Adaptation inside.
   * This is used to put main AdaptationSet first in the resulting array of
   * Adaptation while still preserving the MPD order among them.
   */

  var lastMainAdaptationIndex = {}; // first sort AdaptationSets by absolute priority.

  adaptationsIR.sort(function (a, b) {
    var _a, _b;
    /* As of DASH-IF 4.3, `1` is the default value. */


    var priority1 = (_a = a.attributes.selectionPriority) !== null && _a !== void 0 ? _a : 1;
    var priority2 = (_b = b.attributes.selectionPriority) !== null && _b !== void 0 ? _b : 1;
    return priority2 - priority1;
  });

  for (var i = 0; i < adaptationsIR.length; i++) {
    var adaptation = adaptationsIR[i];
    var adaptationChildren = adaptation.children;
    var essentialProperties = adaptationChildren.essentialProperties,
        roles = adaptationChildren.roles;
    var isExclusivelyTrickModeTrack = Array.isArray(essentialProperties) && essentialProperties.some(function (ep) {
      return ep.schemeIdUri === "http://dashif.org/guidelines/trickmode";
    });

    if (isExclusivelyTrickModeTrack) {
      // We do not for the moment parse trickmode tracks
      continue;
    }

    var isMainAdaptation = Array.isArray(roles) && roles.some(function (role) {
      return role.value === "main";
    }) && roles.some(function (role) {
      return role.schemeIdUri === "urn:mpeg:dash:role:2011";
    });
    var representationsIR = adaptation.children.representations;
    var availabilityTimeOffset = extractMinimumAvailabilityTimeOffset(adaptation.children.baseURLs) + periodInfos.availabilityTimeOffset;
    var adaptationMimeType = adaptation.attributes.mimeType;
    var adaptationCodecs = adaptation.attributes.codecs;
    var type = inferAdaptationType(representationsIR, (0,is_non_empty_string/* default */.Z)(adaptationMimeType) ? adaptationMimeType : null, (0,is_non_empty_string/* default */.Z)(adaptationCodecs) ? adaptationCodecs : null, adaptationChildren.roles != null ? adaptationChildren.roles : null);

    if (type === undefined) {
      continue;
    }

    var originalID = adaptation.attributes.id;
    var newID = void 0;
    var adaptationSetSwitchingIDs = getAdaptationSetSwitchingIDs(adaptation);
    var parentSegmentTemplates = [];

    if (periodInfos.segmentTemplate !== undefined) {
      parentSegmentTemplates.push(periodInfos.segmentTemplate);
    }

    if (adaptation.children.segmentTemplate !== undefined) {
      parentSegmentTemplates.push(adaptation.children.segmentTemplate);
    }

    var adaptationInfos = {
      aggressiveMode: periodInfos.aggressiveMode,
      availabilityTimeOffset: availabilityTimeOffset,
      baseURLs: resolveBaseURLs(periodInfos.baseURLs, adaptationChildren.baseURLs),
      manifestBoundsCalculator: periodInfos.manifestBoundsCalculator,
      end: periodInfos.end,
      isDynamic: periodInfos.isDynamic,
      parentSegmentTemplates: parentSegmentTemplates,
      receivedTime: periodInfos.receivedTime,
      start: periodInfos.start,
      timeShiftBufferDepth: periodInfos.timeShiftBufferDepth,
      unsafelyBaseOnPreviousAdaptation: null
    };

    if (type === "video" && isMainAdaptation && parsedAdaptations.video !== undefined && parsedAdaptations.video.length > 0 && lastMainAdaptationIndex.video !== undefined) {
      var _videoMainAdaptation$;

      // Add to the already existing main video adaptation
      // TODO remove that ugly custom logic?
      var videoMainAdaptation = parsedAdaptations.video[lastMainAdaptationIndex.video];
      adaptationInfos.unsafelyBaseOnPreviousAdaptation = (_b = (_a = periodInfos.unsafelyBaseOnPreviousPeriod) === null || _a === void 0 ? void 0 : _a.getAdaptation(videoMainAdaptation.id)) !== null && _b !== void 0 ? _b : null;
      var representations = parseRepresentations(representationsIR, adaptation, adaptationInfos);

      (_videoMainAdaptation$ = videoMainAdaptation.representations).push.apply(_videoMainAdaptation$, representations);

      newID = videoMainAdaptation.id;
    } else {
      var accessibility = adaptationChildren.accessibility;
      var isDub = void 0;

      if (roles !== undefined && roles.some(function (role) {
        return role.value === "dub";
      })) {
        isDub = true;
      }

      var isClosedCaption = type === "text" && accessibility != null && isHardOfHearing(accessibility) ? true : undefined;
      var isAudioDescription = type === "audio" && accessibility != null && isVisuallyImpaired(accessibility) ? true : undefined;
      var isSignInterpreted = type === "video" && accessibility != null && hasSignLanguageInterpretation(accessibility) ? true : undefined;
      var adaptationID = getAdaptationID(adaptation, {
        isAudioDescription: isAudioDescription,
        isClosedCaption: isClosedCaption,
        isSignInterpreted: isSignInterpreted,
        type: type
      }); // Avoid duplicate IDs

      while ((0,array_includes/* default */.Z)(parsedAdaptationsIDs, adaptationID)) {
        adaptationID += "-dup";
      }

      newID = adaptationID;
      parsedAdaptationsIDs.push(adaptationID);
      adaptationInfos.unsafelyBaseOnPreviousAdaptation = (_d = (_c = periodInfos.unsafelyBaseOnPreviousPeriod) === null || _c === void 0 ? void 0 : _c.getAdaptation(adaptationID)) !== null && _d !== void 0 ? _d : null;

      var _representations = parseRepresentations(representationsIR, adaptation, adaptationInfos);

      var parsedAdaptationSet = {
        id: adaptationID,
        representations: _representations,
        type: type
      };

      if (adaptation.attributes.language != null) {
        parsedAdaptationSet.language = adaptation.attributes.language;
      }

      if (isClosedCaption != null) {
        parsedAdaptationSet.closedCaption = isClosedCaption;
      }

      if (isAudioDescription != null) {
        parsedAdaptationSet.audioDescription = isAudioDescription;
      }

      if (isDub === true) {
        parsedAdaptationSet.isDub = true;
      }

      if (isSignInterpreted === true) {
        parsedAdaptationSet.isSignInterpreted = true;
      }

      var adaptationsOfTheSameType = parsedAdaptations[type];

      if (adaptationsOfTheSameType === undefined) {
        parsedAdaptations[type] = [parsedAdaptationSet];

        if (isMainAdaptation) {
          lastMainAdaptationIndex[type] = 0;
        }
      } else {
        var mergedInto = null; // look if we have to merge this into another Adaptation

        var _loop = function _loop(k) {
          var id = adaptationSetSwitchingIDs[k];
          var switchingInfos = adaptationSwitchingInfos[id];

          if (switchingInfos != null && switchingInfos.newID !== newID && (0,array_includes/* default */.Z)(switchingInfos.adaptationSetSwitchingIDs, originalID)) {
            var adaptationToMergeInto = (0,array_find/* default */.Z)(adaptationsOfTheSameType, function (a) {
              return a.id === id;
            });

            if (adaptationToMergeInto != null && adaptationToMergeInto.audioDescription === parsedAdaptationSet.audioDescription && adaptationToMergeInto.closedCaption === parsedAdaptationSet.closedCaption && adaptationToMergeInto.language === parsedAdaptationSet.language) {
              var _adaptationToMergeInt;

              log/* default.info */.Z.info("DASH Parser: merging \"switchable\" AdaptationSets", originalID, id);

              (_adaptationToMergeInt = adaptationToMergeInto.representations).push.apply(_adaptationToMergeInt, parsedAdaptationSet.representations);

              mergedInto = adaptationToMergeInto;
            }
          }
        };

        for (var k = 0; k < adaptationSetSwitchingIDs.length; k++) {
          _loop(k);
        }

        if (isMainAdaptation) {
          var oldLastMainIdx = lastMainAdaptationIndex[type];
          var newLastMainIdx = oldLastMainIdx === undefined ? 0 : oldLastMainIdx + 1;

          if (mergedInto === null) {
            // put "main" Adaptation after all other Main Adaptations
            adaptationsOfTheSameType.splice(newLastMainIdx, 0, parsedAdaptationSet);
            lastMainAdaptationIndex[type] = newLastMainIdx;
          } else {
            var indexOf = adaptationsOfTheSameType.indexOf(mergedInto);

            if (indexOf < 0) {
              // Weird, not found
              adaptationsOfTheSameType.splice(newLastMainIdx, 0, parsedAdaptationSet);
              lastMainAdaptationIndex[type] = newLastMainIdx;
            } else if (oldLastMainIdx === undefined || indexOf > oldLastMainIdx) {
              // Found but was not main
              adaptationsOfTheSameType.splice(indexOf, 1);
              adaptationsOfTheSameType.splice(newLastMainIdx, 0, mergedInto);
              lastMainAdaptationIndex[type] = newLastMainIdx;
            }
          }
        } else if (mergedInto === null) {
          adaptationsOfTheSameType.push(parsedAdaptationSet);
        }
      }
    }

    if (originalID != null && adaptationSwitchingInfos[originalID] == null) {
      adaptationSwitchingInfos[originalID] = {
        newID: newID,
        adaptationSetSwitchingIDs: adaptationSetSwitchingIDs
      };
    }
  }

  return parsedAdaptations;
}
;// CONCATENATED MODULE: ./src/parsers/manifest/dash/parse_periods.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



 // eslint-disable-next-line max-len







var generatePeriodID = (0,id_generator/* default */.Z)();
/**
 * Process intermediate periods to create final parsed periods.
 * @param {Array.<Object>} periodsIR
 * @param {Object} contextInfos
 * @returns {Array.<Object>}
 */

function parsePeriods(periodsIR, contextInfos) {
  var _a, _b, _c;

  var parsedPeriods = [];
  var periodsTimeInformation = getPeriodsTimeInformation(periodsIR, contextInfos);

  if (periodsTimeInformation.length !== periodsIR.length) {
    throw new Error("MPD parsing error: the time information are incoherent.");
  }

  var isDynamic = contextInfos.isDynamic,
      timeShiftBufferDepth = contextInfos.timeShiftBufferDepth;
  var manifestBoundsCalculator = new ManifestBoundsCalculator({
    isDynamic: isDynamic,
    timeShiftBufferDepth: timeShiftBufferDepth
  });

  if (!isDynamic && contextInfos.duration != null) {
    manifestBoundsCalculator.setLastPosition(contextInfos.duration);
  } // We parse it in reverse because we might need to deduce the buffer depth from
  // the last Periods' indexes


  var _loop = function _loop(i) {
    var periodIR = periodsIR[i];
    var xlinkInfos = contextInfos.xlinkInfos.get(periodIR);
    var periodBaseURLs = resolveBaseURLs(contextInfos.baseURLs, periodIR.children.baseURLs);
    var _periodsTimeInformati = periodsTimeInformation[i],
        periodStart = _periodsTimeInformati.periodStart,
        periodDuration = _periodsTimeInformati.periodDuration,
        periodEnd = _periodsTimeInformati.periodEnd;
    var periodID = void 0;

    if (periodIR.attributes.id == null) {
      log/* default.warn */.Z.warn("DASH: No usable id found in the Period. Generating one.");
      periodID = "gen-dash-period-" + generatePeriodID();
    } else {
      periodID = periodIR.attributes.id;
    } // Avoid duplicate IDs


    while (parsedPeriods.some(function (p) {
      return p.id === periodID;
    })) {
      periodID += "-dup";
    }

    var receivedTime = xlinkInfos !== undefined ? xlinkInfos.receivedTime : contextInfos.receivedTime;
    var availabilityTimeOffset = extractMinimumAvailabilityTimeOffset(periodIR.children.baseURLs) + contextInfos.availabilityTimeOffset;
    var unsafelyBaseOnPreviousPeriod = (_b = (_a = contextInfos.unsafelyBaseOnPreviousManifest) === null || _a === void 0 ? void 0 : _a.getPeriod(periodID)) !== null && _b !== void 0 ? _b : null;
    var periodInfos = {
      aggressiveMode: contextInfos.aggressiveMode,
      availabilityTimeOffset: availabilityTimeOffset,
      baseURLs: periodBaseURLs,
      manifestBoundsCalculator: manifestBoundsCalculator,
      end: periodEnd,
      isDynamic: isDynamic,
      receivedTime: receivedTime,
      segmentTemplate: periodIR.children.segmentTemplate,
      start: periodStart,
      timeShiftBufferDepth: timeShiftBufferDepth,
      unsafelyBaseOnPreviousPeriod: unsafelyBaseOnPreviousPeriod
    };
    var adaptations = parseAdaptationSets(periodIR.children.adaptations, periodInfos);
    var streamEvents = (_c = periodIR.children.streamEvents) === null || _c === void 0 ? void 0 : _c.map(function (event) {
      var _a;

      var start = ((_a = event.eventPresentationTime) !== null && _a !== void 0 ? _a : 0) / event.timescale + periodStart;
      var end = event.duration !== undefined ? start + event.duration / event.timescale : undefined;
      return {
        start: start,
        end: end,
        data: event.data,
        id: event.id
      };
    });
    var parsedPeriod = {
      id: periodID,
      start: periodStart,
      end: periodEnd,
      duration: periodDuration,
      adaptations: adaptations,
      streamEvents: streamEvents
    };
    parsedPeriods.unshift(parsedPeriod);

    if (!manifestBoundsCalculator.lastPositionIsKnown()) {
      var _lastPosition = getMaximumLastPosition(adaptations);

      if (!isDynamic) {
        if (typeof _lastPosition === "number") {
          manifestBoundsCalculator.setLastPosition(_lastPosition);
        }
      } else {
        if (typeof _lastPosition === "number") {
          var _positionTime = performance.now() / 1000;

          manifestBoundsCalculator.setLastPosition(_lastPosition, _positionTime);
        } else {
          var _guessedLastPositionFromClock = guessLastPositionFromClock(contextInfos, periodStart);

          if (_guessedLastPositionFromClock !== undefined) {
            var guessedLastPosition = _guessedLastPositionFromClock[0],
                guessedPositionTime = _guessedLastPositionFromClock[1];
            manifestBoundsCalculator.setLastPosition(guessedLastPosition, guessedPositionTime);
          }
        }
      }
    }
  };

  for (var i = periodsIR.length - 1; i >= 0; i--) {
    _loop(i);
  }

  if (contextInfos.isDynamic && !manifestBoundsCalculator.lastPositionIsKnown()) {
    // Guess a last time the last position
    var guessedLastPositionFromClock = guessLastPositionFromClock(contextInfos, 0);

    if (guessedLastPositionFromClock !== undefined) {
      var lastPosition = guessedLastPositionFromClock[0],
          positionTime = guessedLastPositionFromClock[1];
      manifestBoundsCalculator.setLastPosition(lastPosition, positionTime);
    }
  }

  return flattenOverlappingPeriods(parsedPeriods);
}
/**
 * Try to guess the "last position", which is the last position
 * available in the manifest in seconds, and the "position time", the time
 * (`performance.now()`) in which the last position was collected.
 *
 * These values allows to retrieve at any time in the future the new last
 * position, by substracting the position time to the last position, and
 * adding to it the new value returned by `performance.now`.
 *
 * The last position and position time are returned by this function if and only if
 * it would indicate a last position superior to the `minimumTime` given.
 *
 * This last part allows for example to detect which Period is likely to be the
 * "current" one in multi-periods contents. By giving the Period's start as a
 * `minimumTime`, you ensure that you will get a value only if the current time
 * is in that period.
 *
 * This is useful as guessing the live time from the clock can be seen as a last
 * resort. By detecting that the current time is before the currently considered
 * Period, we can just parse and look at the previous Period. If we can guess
 * the live time more directly from that previous one, we might be better off
 * than just using the clock.
 *
 * @param {Object} contextInfos
 * @param {number} minimumTime
 * @returns {Array.<number|undefined>}
 */

function guessLastPositionFromClock(contextInfos, minimumTime) {
  if (contextInfos.clockOffset != null) {
    var lastPosition = contextInfos.clockOffset / 1000 - contextInfos.availabilityStartTime;
    var positionTime = performance.now() / 1000;
    var timeInSec = positionTime + lastPosition;

    if (timeInSec >= minimumTime) {
      return [timeInSec, positionTime];
    }
  } else {
    var now = Date.now() / 1000;

    if (now >= minimumTime) {
      log/* default.warn */.Z.warn("DASH Parser: no clock synchronization mechanism found." + " Using the system clock instead.");

      var _lastPosition2 = now - contextInfos.availabilityStartTime;

      var _positionTime2 = performance.now() / 1000;

      return [_lastPosition2, _positionTime2];
    }
  }

  return undefined;
}
/**
 * Try to extract the last position declared for any segments in a Period:
 *   - If at least a single index' last position is defined, take the maximum
 *     among them.
 *   - If segments are available but we cannot define the last position
 *     return undefined.
 *   - If no segment are available in that period, return null
 * @param {Object} adaptationsPerType
 * @returns {number|null|undefined}
 */


function getMaximumLastPosition(adaptationsPerType) {
  var maxEncounteredPosition = null;
  var allIndexAreEmpty = true;
  var adaptationsVal = (0,object_values/* default */.Z)(adaptationsPerType).filter(function (ada) {
    return ada != null;
  });
  var allAdaptations = (0,flat_map/* default */.Z)(adaptationsVal, function (adaptationsForType) {
    return adaptationsForType;
  });

  for (var adapIndex = 0; adapIndex < allAdaptations.length; adapIndex++) {
    var representations = allAdaptations[adapIndex].representations;

    for (var repIndex = 0; repIndex < representations.length; repIndex++) {
      var representation = representations[repIndex];
      var position = representation.index.getLastPosition();

      if (position !== null) {
        allIndexAreEmpty = false;

        if (typeof position === "number") {
          maxEncounteredPosition = maxEncounteredPosition == null ? position : Math.max(maxEncounteredPosition, position);
        }
      }
    }
  }

  if (maxEncounteredPosition != null) {
    return maxEncounteredPosition;
  } else if (allIndexAreEmpty) {
    return null;
  }

  return undefined;
}
;// CONCATENATED MODULE: ./src/parsers/manifest/dash/parse_mpd.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



 // eslint-disable-next-line max-len










var DASH_FALLBACK_LIFETIME_WHEN_MINIMUM_UPDATE_PERIOD_EQUAL_0 = config/* default.DASH_FALLBACK_LIFETIME_WHEN_MINIMUM_UPDATE_PERIOD_EQUAL_0 */.Z.DASH_FALLBACK_LIFETIME_WHEN_MINIMUM_UPDATE_PERIOD_EQUAL_0;
/**
 * @param {Element} root - The MPD root.
 * @param {Object} args
 * @returns {Object}
 */

function parseMPD(root, args) {
  // Transform whole MPD into a parsed JS object representation
  var _createMPDIntermediat = createMPDIntermediateRepresentation(root),
      mpdIR = _createMPDIntermediat[0],
      warnings = _createMPDIntermediat[1];

  return loadExternalRessourcesAndParse(mpdIR, args, warnings);
}
/**
 * Checks if xlinks needs to be loaded before actually parsing the manifest.
 * @param {Object} mpdIR
 * @param {Object} args
 * @param {Array.<Object>} warnings
 * @returns {Object}
 */

function loadExternalRessourcesAndParse(mpdIR, args, warnings, hasLoadedClock) {
  var rootChildren = mpdIR.children,
      rootAttributes = mpdIR.attributes;
  var xlinkInfos = new WeakMap();

  if (args.externalClockOffset == null) {
    var isDynamic = rootAttributes.type === "dynamic";
    var directTiming = (0,array_find/* default */.Z)(rootChildren.utcTimings, function (utcTiming) {
      return utcTiming.schemeIdUri === "urn:mpeg:dash:utc:direct:2014" && utcTiming.value != null;
    });
    var clockOffsetFromDirectUTCTiming = directTiming != null && directTiming.value != null ? getClockOffset(directTiming.value) : undefined;
    var clockOffset = clockOffsetFromDirectUTCTiming != null && !isNaN(clockOffsetFromDirectUTCTiming) ? clockOffsetFromDirectUTCTiming : undefined;

    if (clockOffset != null) {
      args.externalClockOffset = clockOffset;
    } else if (isDynamic && hasLoadedClock !== true) {
      var UTCTimingHTTPURL = getHTTPUTCTimingURL(mpdIR);

      if (UTCTimingHTTPURL != null && UTCTimingHTTPURL.length > 0) {
        // TODO fetch UTCTiming and XLinks at the same time
        return {
          type: "needs-ressources",
          value: {
            ressources: [UTCTimingHTTPURL],
            "continue": function continueParsingMPD(loadedRessources) {
              if (loadedRessources.length !== 1) {
                throw new Error("DASH parser: wrong number of loaded ressources.");
              }

              clockOffset = getClockOffset(loadedRessources[0].responseData);
              args.externalClockOffset = clockOffset;
              return loadExternalRessourcesAndParse(mpdIR, args, warnings, true);
            }
          }
        };
      }
    }
  }

  var xlinksToLoad = [];

  for (var i = 0; i < rootChildren.periods.length; i++) {
    var _rootChildren$periods = rootChildren.periods[i].attributes,
        xlinkHref = _rootChildren$periods.xlinkHref,
        xlinkActuate = _rootChildren$periods.xlinkActuate;

    if (xlinkHref != null && xlinkActuate === "onLoad") {
      xlinksToLoad.push({
        index: i,
        ressource: xlinkHref
      });
    }
  }

  if (xlinksToLoad.length === 0) {
    return parseCompleteIntermediateRepresentation(mpdIR, args, warnings, xlinkInfos);
  }

  return {
    type: "needs-ressources",
    value: {
      ressources: xlinksToLoad.map(function (_ref) {
        var ressource = _ref.ressource;
        return ressource;
      }),
      "continue": function continueParsingMPD(loadedRessources) {
        if (loadedRessources.length !== xlinksToLoad.length) {
          throw new Error("DASH parser: wrong number of loaded ressources.");
        } // Note: It is important to go from the last index to the first index in
        // the resulting array, as we will potentially add elements to the array


        for (var _i = loadedRessources.length - 1; _i >= 0; _i--) {
          var _rootChildren$periods2;

          var index = xlinksToLoad[_i].index;
          var _loadedRessources$_i = loadedRessources[_i],
              xlinkData = _loadedRessources$_i.responseData,
              receivedTime = _loadedRessources$_i.receivedTime,
              sendingTime = _loadedRessources$_i.sendingTime,
              url = _loadedRessources$_i.url;
          var wrappedData = "<root>" + xlinkData + "</root>";
          var dataAsXML = new DOMParser().parseFromString(wrappedData, "text/xml");

          if (dataAsXML == null || dataAsXML.children.length === 0) {
            throw new Error("DASH parser: Invalid external ressources");
          }

          var periods = dataAsXML.children[0].children;
          var periodsIR = [];

          for (var j = 0; j < periods.length; j++) {
            if (periods[j].nodeType === Node.ELEMENT_NODE) {
              var _createPeriodIntermed = createPeriodIntermediateRepresentation(periods[j]),
                  periodIR = _createPeriodIntermed[0],
                  periodWarnings = _createPeriodIntermed[1];

              xlinkInfos.set(periodIR, {
                receivedTime: receivedTime,
                sendingTime: sendingTime,
                url: url
              });
              periodsIR.push(periodIR);

              if (periodWarnings.length > 0) {
                warnings.push.apply(warnings, periodWarnings);
              }
            }
          } // replace original "xlinked" periods by the real deal


          (_rootChildren$periods2 = rootChildren.periods).splice.apply(_rootChildren$periods2, [index, 1].concat(periodsIR));
        }

        return loadExternalRessourcesAndParse(mpdIR, args, warnings);
      }
    }
  };
}
/**
 * Parse the MPD intermediate representation into a regular Manifest.
 * @param {Object} mpdIR
 * @param {Object} args
 * @param {Array.<Object>} warnings
 * @param {Object} xlinkInfos
 * @returns {Object}
 */


function parseCompleteIntermediateRepresentation(mpdIR, args, warnings, xlinkInfos) {
  var _a, _b;

  var rootChildren = mpdIR.children,
      rootAttributes = mpdIR.attributes;
  var isDynamic = rootAttributes.type === "dynamic";
  var baseURLs = resolveBaseURLs(args.url === undefined ? [] : [(0,resolve_url/* normalizeBaseURL */.f)(args.url)], rootChildren.baseURLs);
  var availabilityStartTime = parseAvailabilityStartTime(rootAttributes, args.referenceDateTime);
  var timeShiftBufferDepth = rootAttributes.timeShiftBufferDepth;
  var clockOffset = args.externalClockOffset,
      unsafelyBaseOnPreviousManifest = args.unsafelyBaseOnPreviousManifest;
  var availabilityTimeOffset = extractMinimumAvailabilityTimeOffset(rootChildren.baseURLs);
  var manifestInfos = {
    aggressiveMode: args.aggressiveMode,
    availabilityStartTime: availabilityStartTime,
    availabilityTimeOffset: availabilityTimeOffset,
    baseURLs: baseURLs,
    clockOffset: clockOffset,
    duration: rootAttributes.duration,
    isDynamic: isDynamic,
    receivedTime: args.manifestReceivedTime,
    timeShiftBufferDepth: timeShiftBufferDepth,
    unsafelyBaseOnPreviousManifest: unsafelyBaseOnPreviousManifest,
    xlinkInfos: xlinkInfos
  };
  var parsedPeriods = parsePeriods(rootChildren.periods, manifestInfos);
  var mediaPresentationDuration = rootAttributes.duration;
  var lifetime;
  var minimumTime;
  var timeshiftDepth = null;
  var maximumTimeData;

  if (rootAttributes.minimumUpdatePeriod !== undefined && rootAttributes.minimumUpdatePeriod >= 0) {
    lifetime = rootAttributes.minimumUpdatePeriod === 0 ? DASH_FALLBACK_LIFETIME_WHEN_MINIMUM_UPDATE_PERIOD_EQUAL_0 : rootAttributes.minimumUpdatePeriod;
  }

  var _getMinimumAndMaximum = getMinimumAndMaximumPosition(parsedPeriods),
      contentStart = _getMinimumAndMaximum[0],
      contentEnd = _getMinimumAndMaximum[1];

  var now = performance.now();

  if (!isDynamic) {
    minimumTime = contentStart !== undefined ? contentStart : ((_a = parsedPeriods[0]) === null || _a === void 0 ? void 0 : _a.start) !== undefined ? parsedPeriods[0].start : 0;
    var maximumTime;

    if (contentEnd !== undefined) {
      maximumTime = contentEnd;
    } else if (mediaPresentationDuration !== undefined) {
      maximumTime = mediaPresentationDuration;
    } else if (parsedPeriods[parsedPeriods.length - 1] !== undefined) {
      var lastPeriod = parsedPeriods[parsedPeriods.length - 1];
      maximumTime = (_b = lastPeriod.end) !== null && _b !== void 0 ? _b : lastPeriod.duration !== undefined ? lastPeriod.start + lastPeriod.duration : undefined;
    }

    maximumTimeData = {
      isLinear: false,
      value: maximumTime !== null && maximumTime !== void 0 ? maximumTime : Infinity,
      time: now
    };
  } else {
    minimumTime = contentStart;
    timeshiftDepth = timeShiftBufferDepth !== null && timeShiftBufferDepth !== void 0 ? timeShiftBufferDepth : null;

    var _maximumTime;

    if (contentEnd !== undefined) {
      _maximumTime = contentEnd;
    } else {
      var ast = availabilityStartTime !== null && availabilityStartTime !== void 0 ? availabilityStartTime : 0;
      var externalClockOffset = args.externalClockOffset;

      if (externalClockOffset === undefined) {
        log/* default.warn */.Z.warn("DASH Parser: use system clock to define maximum position");
        _maximumTime = Date.now() / 1000 - ast;
      } else {
        var serverTime = performance.now() + externalClockOffset;
        _maximumTime = serverTime / 1000 - ast;
      }
    }

    maximumTimeData = {
      isLinear: true,
      value: _maximumTime,
      time: now
    }; // if the minimum calculated time is even below the buffer depth, perhaps we
    // can go even lower in terms of depth

    if (timeshiftDepth !== null && minimumTime !== undefined && _maximumTime - minimumTime > timeshiftDepth) {
      timeshiftDepth = _maximumTime - minimumTime;
    }
  }

  var parsedMPD = {
    availabilityStartTime: availabilityStartTime,
    clockOffset: args.externalClockOffset,
    isDynamic: isDynamic,
    isLive: isDynamic,
    periods: parsedPeriods,
    suggestedPresentationDelay: rootAttributes.suggestedPresentationDelay,
    transportType: "dash",
    timeBounds: {
      absoluteMinimumTime: minimumTime,
      timeshiftDepth: timeshiftDepth,
      maximumTimeData: maximumTimeData
    },
    lifetime: lifetime,
    uris: args.url == null ? rootChildren.locations : [args.url].concat(rootChildren.locations)
  };
  return {
    type: "done",
    value: {
      parsed: parsedMPD,
      warnings: warnings
    }
  };
}
;// CONCATENATED MODULE: ./src/parsers/manifest/dash/parse_from_document.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @param {Document} manifest - Original manifest as returned by the server
 * @param {Object} args
 * @returns {Object} - parsed manifest
 */

function parseFromDocument(document, args) {
  var root = document.documentElement;

  if (root == null || root.nodeName !== "MPD") {
    throw new Error("DASH Parser: document root should be MPD");
  }

  return parseMPD(root, args);
}
;// CONCATENATED MODULE: ./src/parsers/manifest/dash/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/* harmony default export */ const dash = (parseFromDocument);

// EXTERNAL MODULE: ./src/transports/utils/return_parsed_manifest.ts
var return_parsed_manifest = __webpack_require__(7445);
;// CONCATENATED MODULE: ./src/transports/dash/manifest_parser.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */







/**
 * Request external "xlink" ressource from a MPD.
 * @param {string} xlinkURL
 * @returns {Observable}
 */

function requestStringResource(url) {
  return (0,request/* default */.ZP)({
    url: url,
    responseType: "text"
  }).pipe((0,filter/* filter */.h)(function (e) {
    return e.type === "data-loaded";
  }), (0,map/* map */.U)(function (e) {
    return e.value;
  }));
}
/**
 * @param {Object} options
 * @returns {Function}
 */


function generateManifestParser(options) {
  var aggressiveMode = options.aggressiveMode,
      referenceDateTime = options.referenceDateTime;
  var serverTimeOffset = options.serverSyncInfos !== undefined ? options.serverSyncInfos.serverTimestamp - options.serverSyncInfos.clientTime : undefined;
  return function manifestParser(args) {
    var _a;

    var response = args.response,
        scheduleRequest = args.scheduleRequest;
    var argClockOffset = args.externalClockOffset;
    var loaderURL = args.url;
    var url = (_a = response.url) !== null && _a !== void 0 ? _a : loaderURL;
    var data = typeof response.responseData === "string" ? new DOMParser().parseFromString(response.responseData, "text/xml") : // TODO find a way to check if Document?
    response.responseData;
    var externalClockOffset = serverTimeOffset !== null && serverTimeOffset !== void 0 ? serverTimeOffset : argClockOffset;
    var unsafelyBaseOnPreviousManifest = args.unsafeMode ? args.previousManifest : null;
    var parsedManifest = dash(data, {
      aggressiveMode: aggressiveMode === true,
      unsafelyBaseOnPreviousManifest: unsafelyBaseOnPreviousManifest,
      url: url,
      referenceDateTime: referenceDateTime,
      externalClockOffset: externalClockOffset
    });
    return loadExternalResources(parsedManifest);

    function loadExternalResources(parserResponse) {
      if (parserResponse.type === "done") {
        var _parserResponse$value = parserResponse.value,
            warnings = _parserResponse$value.warnings,
            parsed = _parserResponse$value.parsed;
        var warningEvents = warnings.map(function (warning) {
          return {
            type: "warning",
            value: warning
          };
        });
        var manifest = new src_manifest/* default */.ZP(parsed, options);
        return (0,concat/* concat */.z)(of.of.apply(void 0, warningEvents), (0,return_parsed_manifest/* default */.Z)(manifest, url));
      }

      var _parserResponse$value2 = parserResponse.value,
          ressources = _parserResponse$value2.ressources,
          continueParsing = _parserResponse$value2["continue"];
      var externalResources$ = ressources.map(function (resource) {
        return scheduleRequest(function () {
          return requestStringResource(resource);
        });
      });
      return (0,combineLatest/* combineLatest */.aj)(externalResources$).pipe((0,mergeMap/* mergeMap */.zg)(function (loadedResources) {
        var resources = [];

        for (var i = 0; i < loadedResources.length; i++) {
          var resource = loadedResources[i];

          if (typeof resource.responseData !== "string") {
            throw new Error("External DASH resources should only be strings");
          } // Normally not needed but TypeScript is just dumb here


          resources.push((0,object_assign/* default */.Z)(resource, {
            responseData: resource.responseData
          }));
        }

        return loadExternalResources(continueParsing(resources));
      }));
    }
  };
}
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/Observable.js + 3 modules
var Observable = __webpack_require__(4379);
// EXTERNAL MODULE: ./node_modules/@babel/runtime/regenerator/index.js
var regenerator = __webpack_require__(7757);
var regenerator_default = /*#__PURE__*/__webpack_require__.n(regenerator);
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/asyncToGenerator.js
var asyncToGenerator = __webpack_require__(8926);
var asyncToGenerator_default = /*#__PURE__*/__webpack_require__.n(asyncToGenerator);
// EXTERNAL MODULE: ./src/errors/request_error.ts
var request_error = __webpack_require__(9105);
// EXTERNAL MODULE: ./src/errors/error_codes.ts
var error_codes = __webpack_require__(5992);
// EXTERNAL MODULE: ./src/utils/is_null_or_undefined.ts
var is_null_or_undefined = __webpack_require__(1946);
;// CONCATENATED MODULE: ./src/utils/request/fetch.ts



/*
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





var DEFAULT_REQUEST_TIMEOUT = config/* default.DEFAULT_REQUEST_TIMEOUT */.Z.DEFAULT_REQUEST_TIMEOUT;

var _Headers = typeof Headers === "function" ? Headers : null;

var _AbortController = typeof AbortController === "function" ? AbortController : null;

function fetchRequest(options) {
  var headers;

  if (!(0,is_null_or_undefined/* default */.Z)(options.headers)) {
    if ((0,is_null_or_undefined/* default */.Z)(_Headers)) {
      headers = options.headers;
    } else {
      headers = new _Headers();
      var headerNames = Object.keys(options.headers);

      for (var i = 0; i < headerNames.length; i++) {
        var headerName = headerNames[i];
        headers.append(headerName, options.headers[headerName]);
      }
    }
  }

  return new Observable/* Observable */.y(function (obs) {
    log/* default.debug */.Z.debug("Fetch: Called with URL", options.url);
    var hasAborted = false;
    var timeouted = false;
    var isDone = false;
    var sendingTime = performance.now();
    var abortController = !(0,is_null_or_undefined/* default */.Z)(_AbortController) ? new _AbortController() : null;
    /**
     * Abort current fetchRequest by triggering AbortController signal.
     * @returns {void}
     */

    function abortRequest() {
      if (!isDone) {
        if (!(0,is_null_or_undefined/* default */.Z)(abortController)) {
          abortController.abort();
          return;
        }

        log/* default.warn */.Z.warn("Fetch: AbortController API not available.");
      }
    }

    var requestTimeout = (0,is_null_or_undefined/* default */.Z)(options.timeout) ? DEFAULT_REQUEST_TIMEOUT : options.timeout;
    var timeout = window.setTimeout(function () {
      timeouted = true;
      abortRequest();
    }, requestTimeout);
    fetch(options.url, {
      headers: headers,
      method: "GET",
      signal: !(0,is_null_or_undefined/* default */.Z)(abortController) ? abortController.signal : undefined
    }).then(function (response) {
      if (!(0,is_null_or_undefined/* default */.Z)(timeout)) {
        clearTimeout(timeout);
      }

      if (response.status >= 300) {
        log/* default.warn */.Z.warn("Fetch: Request HTTP Error", response);
        obs.error(new request_error/* default */.Z(response.url, response.status, error_codes/* NetworkErrorTypes.ERROR_HTTP_CODE */.br.ERROR_HTTP_CODE));
        return undefined;
      }

      if ((0,is_null_or_undefined/* default */.Z)(response.body)) {
        obs.error(new request_error/* default */.Z(response.url, response.status, error_codes/* NetworkErrorTypes.PARSE_ERROR */.br.PARSE_ERROR));
        return undefined;
      }

      var contentLengthHeader = response.headers.get("Content-Length");
      var contentLength = !(0,is_null_or_undefined/* default */.Z)(contentLengthHeader) && !isNaN(+contentLengthHeader) ? +contentLengthHeader : undefined;
      var reader = response.body.getReader();
      var size = 0;
      return readBufferAndSendEvents();

      function readBufferAndSendEvents() {
        return _readBufferAndSendEvents.apply(this, arguments);
      }

      function _readBufferAndSendEvents() {
        _readBufferAndSendEvents = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee() {
          var data, currentTime, dataChunk, receivedTime, duration;
          return regenerator_default().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return reader.read();

                case 2:
                  data = _context.sent;

                  if (!(!data.done && !(0,is_null_or_undefined/* default */.Z)(data.value))) {
                    _context.next = 11;
                    break;
                  }

                  size += data.value.byteLength;
                  currentTime = performance.now();
                  dataChunk = {
                    type: "data-chunk",
                    value: {
                      url: response.url,
                      currentTime: currentTime,
                      duration: currentTime - sendingTime,
                      sendingTime: sendingTime,
                      chunkSize: data.value.byteLength,
                      chunk: data.value.buffer,
                      size: size,
                      totalSize: contentLength
                    }
                  };
                  obs.next(dataChunk);
                  return _context.abrupt("return", readBufferAndSendEvents());

                case 11:
                  if (data.done) {
                    receivedTime = performance.now();
                    duration = receivedTime - sendingTime;
                    isDone = true;
                    obs.next({
                      type: "data-complete",
                      value: {
                        duration: duration,
                        receivedTime: receivedTime,
                        sendingTime: sendingTime,
                        size: size,
                        status: response.status,
                        url: response.url
                      }
                    });
                    obs.complete();
                  }

                case 12:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));
        return _readBufferAndSendEvents.apply(this, arguments);
      }
    })["catch"](function (err) {
      if (hasAborted) {
        log/* default.debug */.Z.debug("Fetch: Request aborted.");
        return;
      }

      if (timeouted) {
        log/* default.warn */.Z.warn("Fetch: Request timeouted.");
        obs.error(new request_error/* default */.Z(options.url, 0, error_codes/* NetworkErrorTypes.TIMEOUT */.br.TIMEOUT));
        return;
      }

      log/* default.warn */.Z.warn("Fetch: Request Error", err instanceof Error ? err.toString() : "");
      obs.error(new request_error/* default */.Z(options.url, 0, error_codes/* NetworkErrorTypes.ERROR_EVENT */.br.ERROR_EVENT));
      return;
    });
    return function () {
      hasAborted = true;
      abortRequest();
    };
  });
}
/**
 * Returns true if fetch should be supported in the current browser.
 * @return {boolean}
 */


function fetchIsSupported() {
  return typeof window.fetch === "function" && !(0,is_null_or_undefined/* default */.Z)(_AbortController) && !(0,is_null_or_undefined/* default */.Z)(_Headers);
}
/* harmony default export */ const request_fetch = (fetchRequest);
// EXTERNAL MODULE: ./src/utils/warn_once.ts
var warn_once = __webpack_require__(8806);
// EXTERNAL MODULE: ./src/transports/utils/byte_range.ts
var byte_range = __webpack_require__(281);
;// CONCATENATED MODULE: ./src/transports/utils/is_webm_embedded_track.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @param {Object} representation
 * @returns {boolean}
 */
function isWEBMEmbeddedTrack(representation) {
  return representation.mimeType === "video/webm" || representation.mimeType === "audio/webm";
}
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/tap.js
var tap = __webpack_require__(3068);
// EXTERNAL MODULE: ./src/transports/utils/check_isobmff_integrity.ts
var check_isobmff_integrity = __webpack_require__(4460);
;// CONCATENATED MODULE: ./src/transports/dash/add_segment_integrity_checks_to_loader.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



function addSegmentIntegrityChecks(segmentLoader) {
  return function (content) {
    return segmentLoader(content).pipe((0,tap/* tap */.b)(function (res) {
      if ((res.type === "data-loaded" || res.type === "data-chunk") && res.value.responseData !== null && typeof res.value.responseData !== "string" && !isWEBMEmbeddedTrack(content.representation)) {
        (0,check_isobmff_integrity/* default */.Z)(new Uint8Array(res.value.responseData), content.segment.isInit);
      }
    }));
  };
}
// EXTERNAL MODULE: ./src/utils/byte_parsing.ts
var byte_parsing = __webpack_require__(6968);
;// CONCATENATED MODULE: ./src/transports/dash/init_segment_loader.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





/**
 * Perform a request for an initialization segment, agnostic to the container.
 * @param {string} url
 * @param {Object} content
 */

function initSegmentLoader(url, _ref) {
  var segment = _ref.segment;

  if (segment.range === undefined) {
    return (0,request/* default */.ZP)({
      url: url,
      responseType: "arraybuffer",
      sendProgressEvents: true
    });
  }

  if (segment.indexRange === undefined) {
    return (0,request/* default */.ZP)({
      url: url,
      headers: {
        Range: (0,byte_range/* default */.Z)(segment.range)
      },
      responseType: "arraybuffer",
      sendProgressEvents: true
    });
  } // range and indexRange are contiguous (99% of the cases)


  if (segment.range[1] + 1 === segment.indexRange[0]) {
    return (0,request/* default */.ZP)({
      url: url,
      headers: {
        Range: (0,byte_range/* default */.Z)([segment.range[0], segment.indexRange[1]])
      },
      responseType: "arraybuffer",
      sendProgressEvents: true
    });
  }

  var rangeRequest$ = (0,request/* default */.ZP)({
    url: url,
    headers: {
      Range: (0,byte_range/* default */.Z)(segment.range)
    },
    responseType: "arraybuffer",
    sendProgressEvents: false
  });
  var indexRequest$ = (0,request/* default */.ZP)({
    url: url,
    headers: {
      Range: (0,byte_range/* default */.Z)(segment.indexRange)
    },
    responseType: "arraybuffer",
    sendProgressEvents: false
  });
  return (0,combineLatest/* combineLatest */.aj)([rangeRequest$, indexRequest$]).pipe((0,map/* map */.U)(function (_ref2) {
    var initData = _ref2[0],
        indexData = _ref2[1];
    var data = (0,byte_parsing/* concat */.zo)(new Uint8Array(initData.value.responseData), new Uint8Array(indexData.value.responseData));
    var sendingTime = Math.min(initData.value.sendingTime, indexData.value.sendingTime);
    var receivedTime = Math.max(initData.value.receivedTime, indexData.value.receivedTime);
    return {
      type: "data-loaded",
      value: {
        url: url,
        responseData: data,
        size: initData.value.size + indexData.value.size,
        duration: receivedTime - sendingTime,
        sendingTime: sendingTime,
        receivedTime: receivedTime
      }
    };
  }));
}
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/scan.js
var scan = __webpack_require__(2807);
// EXTERNAL MODULE: ./src/transports/utils/find_complete_box.ts
var find_complete_box = __webpack_require__(8766);
;// CONCATENATED MODULE: ./src/transports/dash/extract_complete_chunks.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Take a chunk of ISOBMFF data and extract complete `moof`+`mdat` subsegments
 * which are ready to be decoded.
 * Returns a tuple of two containing first an array of those subsegments
 * followed by tha last un-decodable part.
 * @param {Uint8Array} buffer
 * @returns {Array}
 */

function extractCompleteChunks(buffer) {
  var _position = 0;
  var chunks = [];

  while (_position < buffer.length) {
    var currentBuffer = buffer.subarray(_position, Infinity);
    var moofIndex = (0,find_complete_box/* default */.Z)(currentBuffer, 0x6D6F6F66
    /* moof */
    );

    if (moofIndex < 0) {
      // no moof, not a segment.
      return [chunks, currentBuffer];
    }

    var moofLen = (0,byte_parsing/* be4toi */.pX)(buffer, moofIndex + _position);
    var moofEnd = _position + moofIndex + moofLen;

    if (moofEnd > buffer.length) {
      // not a complete moof segment
      return [chunks, currentBuffer];
    }

    var mdatIndex = (0,find_complete_box/* default */.Z)(currentBuffer, 0x6D646174
    /* mdat */
    );

    if (mdatIndex < 0) {
      // no mdat, not a segment.
      return [chunks, currentBuffer];
    }

    var mdatLen = (0,byte_parsing/* be4toi */.pX)(buffer, mdatIndex + _position);
    var mdatEnd = _position + mdatIndex + mdatLen;

    if (mdatEnd > buffer.length) {
      // not a complete mdat segment
      return [chunks, currentBuffer];
    }

    var maxEnd = Math.max(moofEnd, mdatEnd);
    var chunk = buffer.subarray(_position, maxEnd);
    chunks.push(chunk);
    _position = maxEnd;
  }

  return [chunks, null];
}
;// CONCATENATED MODULE: ./src/transports/dash/low_latency_segment_loader.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */







function lowLatencySegmentLoader(url, args) {
  var segment = args.segment;
  var headers = segment.range !== undefined ? {
    Range: (0,byte_range/* default */.Z)(segment.range)
  } : undefined;
  return request_fetch({
    url: url,
    headers: headers
  }).pipe((0,scan/* scan */.R)(function (acc, evt) {
    if (evt.type === "data-complete") {
      if (acc.partialChunk !== null) {
        log/* default.warn */.Z.warn("DASH Pipelines: remaining chunk does not belong to any segment");
      }

      return {
        event: evt,
        completeChunks: [],
        partialChunk: null
      };
    }

    var data = new Uint8Array(evt.value.chunk);
    var concatenated = acc.partialChunk !== null ? (0,byte_parsing/* concat */.zo)(acc.partialChunk, data) : data;

    var _extractCompleteChunk = extractCompleteChunks(concatenated),
        completeChunks = _extractCompleteChunk[0],
        partialChunk = _extractCompleteChunk[1];

    return {
      event: evt,
      completeChunks: completeChunks,
      partialChunk: partialChunk
    };
  }, {
    event: null,
    completeChunks: [],
    partialChunk: null
  }), (0,mergeMap/* mergeMap */.zg)(function (evt) {
    var emitted = [];

    for (var i = 0; i < evt.completeChunks.length; i++) {
      emitted.push({
        type: "data-chunk",
        value: {
          responseData: evt.completeChunks[i]
        }
      });
    }

    var event = evt.event;

    if (event !== null && event.type === "data-chunk") {
      var value = event.value;
      emitted.push({
        type: "progress",
        value: {
          duration: value.duration,
          size: value.size,
          totalSize: value.totalSize
        }
      });
    } else if (event !== null && event.type === "data-complete") {
      var _value = event.value;
      emitted.push({
        type: "data-chunk-complete",
        value: {
          duration: _value.duration,
          receivedTime: _value.receivedTime,
          sendingTime: _value.sendingTime,
          size: _value.size,
          url: _value.url
        }
      });
    }

    return of.of.apply(void 0, emitted);
  }));
}
;// CONCATENATED MODULE: ./src/transports/dash/segment_loader.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */








/**
 * Segment loader triggered if there was no custom-defined one in the API.
 * @param {Object} opt
 * @returns {Observable}
 */

function regularSegmentLoader(url, args, lowLatencyMode) {
  if (args.segment.isInit) {
    return initSegmentLoader(url, args);
  }

  var isWEBM = isWEBMEmbeddedTrack(args.representation);

  if (lowLatencyMode && !isWEBM) {
    if (fetchIsSupported()) {
      return lowLatencySegmentLoader(url, args);
    } else {
      (0,warn_once/* default */.Z)("DASH: Your browser does not have the fetch API. You will have " + "a higher chance of rebuffering when playing close to the live edge");
    }
  }

  var segment = args.segment;
  return (0,request/* default */.ZP)({
    url: url,
    responseType: "arraybuffer",
    sendProgressEvents: true,
    headers: segment.range !== undefined ? {
      Range: (0,byte_range/* default */.Z)(segment.range)
    } : undefined
  });
}
/**
 * @param {Object} config
 * @returns {Function}
 */


function generateSegmentLoader(_ref) {
  var lowLatencyMode = _ref.lowLatencyMode,
      customSegmentLoader = _ref.segmentLoader,
      checkMediaSegmentIntegrity = _ref.checkMediaSegmentIntegrity;
  return checkMediaSegmentIntegrity !== true ? segmentLoader : addSegmentIntegrityChecks(segmentLoader);
  /**
   * @param {Object} content
   * @returns {Observable}
   */

  function segmentLoader(content) {
    var url = content.url;

    if (url == null) {
      return (0,of.of)({
        type: "data-created",
        value: {
          responseData: null
        }
      });
    }

    if (lowLatencyMode || customSegmentLoader === undefined) {
      return regularSegmentLoader(url, content, lowLatencyMode);
    }

    var args = {
      adaptation: content.adaptation,
      manifest: content.manifest,
      period: content.period,
      representation: content.representation,
      segment: content.segment,
      transport: "dash",
      url: url
    };
    return new Observable/* Observable */.y(function (obs) {
      var hasFinished = false;
      var hasFallbacked = false;
      /**
       * Callback triggered when the custom segment loader has a response.
       * @param {Object} args
       */

      var resolve = function resolve(_args) {
        if (!hasFallbacked) {
          hasFinished = true;
          obs.next({
            type: "data-loaded",
            value: {
              responseData: _args.data,
              size: _args.size,
              duration: _args.duration
            }
          });
          obs.complete();
        }
      };
      /**
       * Callback triggered when the custom segment loader fails
       * @param {*} err - The corresponding error encountered
       */


      var reject = function reject(err) {
        if (err === void 0) {
          err = {};
        }

        if (!hasFallbacked) {
          hasFinished = true;
          obs.error(err);
        }
      };

      var progress = function progress(_args) {
        if (!hasFallbacked) {
          obs.next({
            type: "progress",
            value: {
              duration: _args.duration,
              size: _args.size,
              totalSize: _args.totalSize
            }
          });
        }
      };
      /**
       * Callback triggered when the custom segment loader wants to fallback to
       * the "regular" implementation
       */


      var fallback = function fallback() {
        hasFallbacked = true;
        var regular$ = regularSegmentLoader(url, content, lowLatencyMode); // HACK What is TypeScript/RxJS doing here??????

        /* eslint-disable import/no-deprecated */

        /* eslint-disable @typescript-eslint/ban-ts-comment */
        // @ts-ignore

        regular$.subscribe(obs);
        /* eslint-enable import/no-deprecated */

        /* eslint-enable @typescript-eslint/ban-ts-comment */
      };

      var callbacks = {
        reject: reject,
        resolve: resolve,
        progress: progress,
        fallback: fallback
      };
      var abort = customSegmentLoader(args, callbacks);
      return function () {
        if (!hasFinished && !hasFallbacked && typeof abort === "function") {
          abort();
        }
      };
    });
  }
}
// EXTERNAL MODULE: ./src/parsers/containers/isobmff/utils.ts
var utils = __webpack_require__(4644);
// EXTERNAL MODULE: ./src/parsers/containers/isobmff/take_pssh_out.ts + 1 modules
var take_pssh_out = __webpack_require__(6490);
;// CONCATENATED MODULE: ./src/parsers/containers/matroska/utils.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var SEGMENT_ID = 0x18538067;
var INFO_ID = 0x1549A966;
var TIMECODESCALE_ID = 0x2AD7B1;
var DURATION_ID = 0x4489;
var CUES_ID = 0x1C53BB6B;
var CUE_POINT_ID = 0xBB;
var CUE_TIME_ID = 0xB3;
var CUE_TRACK_POSITIONS_ID = 0xB7;
var CUE_CLUSTER_POSITIONS_ID = 0xF1;
/**
 * Find the offsets of the value linked to the given element ID.
 * @param {number} elementID - ID for the searched element.
 * @param {Array.<number>} parents - eventual IDs of the parent elements. From
 * top level to lower level (from the furthest to the closest).
 * @param {Uint8Array} buffer - buffer where the ID will be searched
 * @param {Array.<number>} range - start and end offsets in the buffer where the
 * ID will be searched.
 * @returns {Array.<number>|null}
 */

function findNextElement(elementID, parents, buffer, _ref) {
  var initialOffset = _ref[0],
      maxOffset = _ref[1];
  var currentOffset = initialOffset;

  while (currentOffset < maxOffset) {
    var parsedID = getEBMLID(buffer, currentOffset);

    if (parsedID == null) {
      return null;
    }

    var ebmlTagID = parsedID.value,
        ebmlTagLength = parsedID.length;
    var sizeOffset = currentOffset + ebmlTagLength;
    var parsedValue = getEBMLValue(buffer, sizeOffset);

    if (parsedValue == null) {
      return null;
    }

    var valueLengthLength = parsedValue.length,
        valueLength = parsedValue.value;
    var valueOffset = sizeOffset + valueLengthLength;
    var valueEndOffset = valueOffset + valueLength;

    if (ebmlTagID === elementID) {
      return [valueOffset, valueEndOffset];
    } else if (parents.length > 0) {
      for (var i = 0; i < parents.length; i++) {
        if (ebmlTagID === parents[i]) {
          var newParents = parents.slice(i + 1, parents.length);
          return findNextElement(elementID, newParents, buffer, [valueOffset, valueEndOffset]);
        }
      }
    }

    currentOffset = valueEndOffset;
  }

  return null;
}
/**
 * Return the timecode scale (basically timescale) of the whole file.
 * @param {Uint8Array} buffer
 * @param {number} initialOffset
 * @returns {number|null}
 */


function getTimeCodeScale(buffer, initialOffset) {
  var timeCodeScaleOffsets = findNextElement(TIMECODESCALE_ID, [SEGMENT_ID, INFO_ID], buffer, [initialOffset, buffer.length]);

  if (timeCodeScaleOffsets == null) {
    return null;
  }

  var length = timeCodeScaleOffsets[1] - timeCodeScaleOffsets[0];
  return 1e9 / bytesToNumber(buffer, timeCodeScaleOffsets[0], length);
}
/**
 * Return the duration of the concerned media.
 * @param {Uint8Array} buffer
 * @param {number} initialOffset
 * @returns {number|null}
 */

function getDuration(buffer, initialOffset) {
  var timeCodeScaleOffsets = findNextElement(DURATION_ID, [SEGMENT_ID, INFO_ID], buffer, [initialOffset, buffer.length]);

  if (timeCodeScaleOffsets == null) {
    return null;
  }

  var length = timeCodeScaleOffsets[1] - timeCodeScaleOffsets[0];

  if (length === 4) {
    return get_IEEE754_32Bits(buffer, timeCodeScaleOffsets[0]);
  } else if (length === 8) {
    return get_IEEE754_64Bits(buffer, timeCodeScaleOffsets[0]);
  }

  return null;
}
/**
 * @param {Uint8Array} buffer
 * @param {number} initialOffset
 * @returns {Array.<Object>|null}
 */


function getSegmentsFromCues(buffer, initialOffset) {
  var segmentRange = findNextElement(SEGMENT_ID, [], buffer, [initialOffset, buffer.length]);

  if (segmentRange == null) {
    return null;
  }

  var segmentRangeStart = segmentRange[0],
      segmentRangeEnd = segmentRange[1];
  var timescale = getTimeCodeScale(buffer, segmentRangeStart);

  if (timescale == null) {
    return null;
  }

  var duration = getDuration(buffer, segmentRangeStart);

  if (duration == null) {
    return null;
  }

  var cuesRange = findNextElement(CUES_ID, [], buffer, [segmentRangeStart, segmentRangeEnd]);

  if (cuesRange == null) {
    return null;
  }

  var rawInfos = [];
  var currentOffset = cuesRange[0];

  while (currentOffset < cuesRange[1]) {
    var cuePointRange = findNextElement(CUE_POINT_ID, [], buffer, [currentOffset, cuesRange[1]]);

    if (cuePointRange == null) {
      break;
    }

    var cueTimeRange = findNextElement(CUE_TIME_ID, [], buffer, [cuePointRange[0], cuePointRange[1]]);

    if (cueTimeRange == null) {
      return null;
    }

    var time = bytesToNumber(buffer, cueTimeRange[0], cueTimeRange[1] - cueTimeRange[0]);
    var cueOffsetRange = findNextElement(CUE_CLUSTER_POSITIONS_ID, [CUE_TRACK_POSITIONS_ID], buffer, [cuePointRange[0], cuePointRange[1]]);

    if (cueOffsetRange == null) {
      return null;
    }

    var rangeStart = bytesToNumber(buffer, cueOffsetRange[0], cueOffsetRange[1] - cueOffsetRange[0]) + segmentRangeStart;
    rawInfos.push({
      time: time,
      rangeStart: rangeStart
    });
    currentOffset = cuePointRange[1];
  }

  var segments = [];

  for (var i = 0; i < rawInfos.length; i++) {
    var currentSegment = rawInfos[i];

    if (i === rawInfos.length - 1) {
      segments.push({
        time: currentSegment.time,
        count: 0,
        timescale: timescale,
        duration: i === 0 ? duration : duration - currentSegment.time,
        range: [currentSegment.rangeStart, Infinity]
      });
    } else {
      segments.push({
        time: currentSegment.time,
        count: 0,
        timescale: timescale,
        duration: rawInfos[i + 1].time - currentSegment.time,
        range: [currentSegment.rangeStart, rawInfos[i + 1].rangeStart - 1]
      });
    }
  }

  return segments;
}

function getLength(buffer, offset) {
  for (var length = 1; length <= 8; length++) {
    if (buffer[offset] >= Math.pow(2, 8 - length)) {
      return length;
    }
  }

  return undefined;
}

function getEBMLID(buffer, offset) {
  var length = getLength(buffer, offset);

  if (length == null) {
    log/* default.warn */.Z.warn("webm: unrepresentable length");
    return null;
  }

  if (offset + length > buffer.length) {
    log/* default.warn */.Z.warn("webm: impossible length");
    return null;
  }

  var value = 0;

  for (var i = 0; i < length; i++) {
    value = buffer[offset + i] * Math.pow(2, (length - i - 1) * 8) + value;
  }

  return {
    length: length,
    value: value
  };
}

function getEBMLValue(buffer, offset) {
  var length = getLength(buffer, offset);

  if (length == null) {
    log/* default.warn */.Z.warn("webm: unrepresentable length");
    return null;
  }

  if (offset + length > buffer.length) {
    log/* default.warn */.Z.warn("webm: impossible length");
    return null;
  }

  var value = (buffer[offset] & (1 << 8 - length) - 1) * Math.pow(2, (length - 1) * 8);

  for (var i = 1; i < length; i++) {
    value = buffer[offset + i] * Math.pow(2, (length - i - 1) * 8) + value;
  }

  return {
    length: length,
    value: value
  };
}
/**
 * Convert a IEEE754 32 bits floating number as an Uint8Array into its
 * corresponding Number.
 * @param {Uint8Array} buffer
 * @param {number} offset
 * @returns {number}
 */


function get_IEEE754_32Bits(buffer, offset) {
  return new DataView(buffer.buffer).getFloat32(offset);
}
/**
 * Convert a IEEE754 64 bits floating number as an Uint8Array into its
 * corresponding Number.
 * @param {Uint8Array} buffer
 * @param {number} offset
 * @returns {number}
 */


function get_IEEE754_64Bits(buffer, offset) {
  return new DataView(buffer.buffer).getFloat64(offset);
}

function bytesToNumber(buffer, offset, length) {
  var value = 0;

  for (var i = 0; i < length; i++) {
    value = buffer[offset + i] * Math.pow(2, (length - i - 1) * 8) + value;
  }

  return value;
}
;// CONCATENATED MODULE: ./src/transports/utils/get_isobmff_timing_infos.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Get precize start and duration of a chunk.
 * @param {UInt8Array} buffer - An ISOBMFF container (at least a `moof` + a
 * `mdat` box.
 * @param {Boolean} isChunked - If true, the whole segment was chunked into
 * multiple parts and buffer is one of them. If false, buffer is the whole
 * segment.
 * @param {Object} segment
 * @param {Array.<Object>|undefined} sidxSegments - Segments from sidx. Here
 * pre-parsed for performance reasons as it is usually available when
 * this function is called.
 * @param {number|undefined} initTimescale
 * @returns {Object}
 */

function getISOBMFFTimingInfos(buffer, isChunked, segment, initTimescale) {
  var baseDecodeTime = (0,utils/* getTrackFragmentDecodeTime */.Qx)(buffer);

  if (baseDecodeTime === undefined || initTimescale === undefined) {
    return null;
  }

  var startTime = segment.timestampOffset !== undefined ? baseDecodeTime + segment.timestampOffset * initTimescale : baseDecodeTime;
  var trunDuration = (0,utils/* getDurationFromTrun */.MM)(buffer);

  if (isChunked) {
    // when chunked, no mean to know the duration for now
    return {
      time: startTime / initTimescale,
      duration: trunDuration !== undefined ? trunDuration / initTimescale : undefined
    };
  }

  var duration;
  var segmentDuration = segment.duration * initTimescale; // we could always make a mistake when reading a container.
  // If the estimate is too far from what the segment seems to imply, take
  // the segment infos instead.

  var maxDecodeTimeDelta = Math.min(initTimescale * 0.9, segmentDuration / 4);

  if (trunDuration !== undefined && Math.abs(trunDuration - segmentDuration) <= maxDecodeTimeDelta) {
    duration = trunDuration;
  }

  return {
    time: startTime / initTimescale,
    duration: duration !== undefined ? duration / initTimescale : duration
  };
}
;// CONCATENATED MODULE: ./src/transports/dash/segment_parser.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */








/**
 * @param {Object} config
 * @returns {Function}
 */

function generateAudioVideoSegmentParser(_ref) {
  var __priv_patchLastSegmentInSidx = _ref.__priv_patchLastSegmentInSidx;
  return function audioVideoSegmentParser(_ref2) {
    var content = _ref2.content,
        response = _ref2.response,
        initTimescale = _ref2.initTimescale;
    var period = content.period,
        representation = content.representation,
        segment = content.segment;
    var data = response.data,
        isChunked = response.isChunked;
    var appendWindow = [period.start, period.end];

    if (data === null) {
      if (segment.isInit) {
        var _segmentProtections = representation.getProtectionsInitializationData();

        return (0,of.of)({
          type: "parsed-init-segment",
          value: {
            initializationData: null,
            segmentProtections: _segmentProtections,
            initTimescale: undefined
          }
        });
      }

      return (0,of.of)({
        type: "parsed-segment",
        value: {
          chunkData: null,
          chunkInfos: null,
          chunkOffset: 0,
          appendWindow: appendWindow
        }
      });
    }

    var chunkData = data instanceof Uint8Array ? data : new Uint8Array(data);
    var isWEBM = isWEBMEmbeddedTrack(representation);

    if (!segment.isInit) {
      var chunkInfos = isWEBM ? null : // TODO extract time info from webm
      getISOBMFFTimingInfos(chunkData, isChunked, segment, initTimescale);
      var chunkOffset = (0,take_first_set/* default */.Z)(segment.timestampOffset, 0);
      return (0,of.of)({
        type: "parsed-segment",
        value: {
          chunkData: chunkData,
          chunkInfos: chunkInfos,
          chunkOffset: chunkOffset,
          appendWindow: appendWindow
        }
      });
    } // we're handling an initialization segment


    var indexRange = segment.indexRange;
    var nextSegments;

    if (isWEBM) {
      nextSegments = getSegmentsFromCues(chunkData, 0);
    } else {
      nextSegments = (0,utils/* getSegmentsFromSidx */.Wf)(chunkData, Array.isArray(indexRange) ? indexRange[0] : 0); // This is a very specific handling for streams we know have a very
      // specific problem at Canal+: The last reference gives a truncated
      // segment.
      // Sadly, people on the packaging side could not fix all legacy contents.
      // This is an easy-but-ugly fix for those.
      // TODO Cleaner way? I tried to always check the obtained segment after
      // a byte-range request but it leads to a lot of code.

      if (__priv_patchLastSegmentInSidx === true && nextSegments !== null && nextSegments.length > 0) {
        var lastSegment = nextSegments[nextSegments.length - 1];

        if (Array.isArray(lastSegment.range)) {
          lastSegment.range[1] = Infinity;
        }
      }
    }

    if (representation.index instanceof BaseRepresentationIndex && nextSegments !== null && nextSegments.length > 0) {
      representation.index._addSegments(nextSegments);
    }

    var timescale = isWEBM ? getTimeCodeScale(chunkData, 0) : (0,utils/* getMDHDTimescale */.LD)(chunkData);
    var parsedTimescale = (0,is_null_or_undefined/* default */.Z)(timescale) ? undefined : timescale;

    if (!isWEBM) {
      // TODO extract webm protection information
      var psshInfo = (0,take_pssh_out/* default */.Z)(chunkData);

      for (var i = 0; i < psshInfo.length; i++) {
        var _psshInfo$i = psshInfo[i],
            systemID = _psshInfo$i.systemID,
            psshData = _psshInfo$i.data;

        representation._addProtectionData("cenc", systemID, psshData);
      }
    }

    var segmentProtections = representation.getProtectionsInitializationData();
    return (0,of.of)({
      type: "parsed-init-segment",
      value: {
        initializationData: chunkData,
        segmentProtections: segmentProtections,
        initTimescale: parsedTimescale
      }
    });
  };
}
;// CONCATENATED MODULE: ./src/transports/utils/is_mp4_embedded_text_track.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns true if the given texttrack segment represents a textrack embedded
 * in a mp4 file.
 * @param {Representation} representation
 * @returns {Boolean}
 */
function isMP4EmbeddedTextTrack(representation) {
  return representation.mimeType === "application/mp4";
}
;// CONCATENATED MODULE: ./src/transports/dash/text_loader.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */








/**
 * Perform requests for "text" segments
 * @param {boolean} lowLatencyMode
 * @returns {Function}
 */

function generateTextTrackLoader(_ref) {
  var lowLatencyMode = _ref.lowLatencyMode,
      checkMediaSegmentIntegrity = _ref.checkMediaSegmentIntegrity;
  return checkMediaSegmentIntegrity !== true ? textTrackLoader : addSegmentIntegrityChecks(textTrackLoader);
  /**
   * @param {Object} args
   * @returns {Observable}
   */

  function textTrackLoader(args) {
    var range = args.segment.range;
    var url = args.url;

    if (url === null) {
      return (0,of.of)({
        type: "data-created",
        value: {
          responseData: null
        }
      });
    }

    if (args.segment.isInit) {
      return initSegmentLoader(url, args);
    }

    var isMP4Embedded = isMP4EmbeddedTextTrack(args.representation);

    if (lowLatencyMode && isMP4Embedded) {
      if (fetchIsSupported()) {
        return lowLatencySegmentLoader(url, args);
      } else {
        (0,warn_once/* default */.Z)("DASH: Your browser does not have the fetch API. You will have " + "a higher chance of rebuffering when playing close to the live edge");
      }
    } // ArrayBuffer when in mp4 to parse isobmff manually, text otherwise


    var responseType = isMP4Embedded ? "arraybuffer" : "text";
    return (0,request/* default */.ZP)({
      url: url,
      responseType: responseType,
      headers: Array.isArray(range) ? {
        Range: (0,byte_range/* default */.Z)(range)
      } : null,
      sendProgressEvents: true
    });
  }
}
// EXTERNAL MODULE: ./src/parsers/containers/isobmff/read.ts
var read = __webpack_require__(6807);
;// CONCATENATED MODULE: ./src/transports/utils/parse_text_track.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Return plain text text track from the given ISOBMFF.
 * @param {Uint8Array} chunkBytes
 * @returns {string}
 */

function extractTextTrackFromISOBMFF(chunkBytes) {
  var mdat = (0,read/* getMDAT */.Le)(chunkBytes);
  return mdat === null ? "" : (0,string_parsing/* utf8ToStr */.uR)(mdat);
}
/**
 * Returns the a string expliciting the format of a text track when that text
 * track is embedded into a ISOBMFF file.
 * @param {Object} representation
 * @returns {string}
 */

function getISOBMFFTextTrackFormat(representation) {
  var codec = representation.codec;

  if (codec === undefined) {
    throw new Error("Cannot parse subtitles: unknown format");
  }

  switch (codec.toLowerCase()) {
    case "stpp": // stpp === TTML in MP4

    case "stpp.ttml.im1t":
      return "ttml";

    case "wvtt":
      // wvtt === WebVTT in MP4
      return "vtt";
  }

  throw new Error("The codec used for the subtitles " + ("\"" + codec + "\" is not managed yet."));
}
/**
 * Returns the a string expliciting the format of a text track in plain text.
 * @param {Object} representation
 * @returns {string}
 */

function getPlainTextTrackFormat(representation) {
  var _representation$mimeT = representation.mimeType,
      mimeType = _representation$mimeT === void 0 ? "" : _representation$mimeT;

  switch (representation.mimeType) {
    case "application/ttml+xml":
      return "ttml";

    case "application/x-sami":
    case "application/smil":
      return "sami";

    case "text/vtt":
      return "vtt";
  }

  var _representation$codec = representation.codec,
      codec = _representation$codec === void 0 ? "" : _representation$codec;
  var codeLC = codec.toLowerCase();

  if (codeLC === "srt") {
    return "srt";
  }

  throw new Error("could not find a text-track parser for the type " + mimeType);
}
/**
 * @param {Object} content
 * @param {ArrayBuffer|UInt8Array|null} chunkData
 * @param {Object|null} chunkInfos
 * @param {boolean} isChunked
 * @returns {Object|null}
 */

function getISOBMFFEmbeddedTextTrackData(_ref, chunkBytes, chunkInfos, isChunked) {
  var segment = _ref.segment,
      adaptation = _ref.adaptation,
      representation = _ref.representation;

  if (segment.isInit) {
    return null;
  }

  var startTime;
  var endTime;

  if (chunkInfos === null) {
    if (!isChunked) {
      log/* default.warn */.Z.warn("Transport: Unavailable time data for current text track.");
    } else {
      startTime = segment.time;
      endTime = segment.end;
    }
  } else {
    startTime = chunkInfos.time;

    if (chunkInfos.duration !== undefined) {
      endTime = startTime + chunkInfos.duration;
    } else if (!isChunked) {
      endTime = startTime + segment.duration;
    }
  }

  var type = getISOBMFFTextTrackFormat(representation);
  var textData = extractTextTrackFromISOBMFF(chunkBytes);
  return {
    data: textData,
    type: type,
    language: adaptation.language,
    start: startTime,
    end: endTime
  };
}
/**
 * @param {Object} content
 * @param {ArrayBuffer|UInt8Array|null} chunkData
 * @param {Object|null} chunkInfos
 * @param {boolean} isChunked
 * @returns {Object|null}
 */

function getPlainTextTrackData(_ref2, textTrackData, isChunked) {
  var segment = _ref2.segment,
      adaptation = _ref2.adaptation,
      representation = _ref2.representation;

  if (segment.isInit) {
    return null;
  }

  if (isChunked) {
    log/* default.warn */.Z.warn("Transport: Unavailable time data for current text track.");
  }

  var type = getPlainTextTrackFormat(representation);
  return {
    data: textTrackData,
    type: type,
    language: adaptation.language
  };
}
;// CONCATENATED MODULE: ./src/transports/dash/text_parser.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */








/**
 * Parse TextTrack data when it is embedded in an ISOBMFF file.
 * @param {Object} infos
 * @returns {Observable.<Object>}
 */

function parseISOBMFFEmbeddedTextTrack(_ref, __priv_patchLastSegmentInSidx) {
  var response = _ref.response,
      content = _ref.content,
      initTimescale = _ref.initTimescale;
  var period = content.period,
      representation = content.representation,
      segment = content.segment;
  var isInit = segment.isInit,
      indexRange = segment.indexRange;
  var data = response.data,
      isChunked = response.isChunked;
  var chunkBytes = typeof data === "string" ? (0,string_parsing/* strToUtf8 */.tG)(data) : data instanceof Uint8Array ? data : new Uint8Array(data);

  if (isInit) {
    var sidxSegments = (0,utils/* getSegmentsFromSidx */.Wf)(chunkBytes, Array.isArray(indexRange) ? indexRange[0] : 0); // This is a very specific handling for streams we know have a very
    // specific problem at Canal+: The last reference gives a truncated
    // segment.
    // Sadly, people on the packaging side could not fix all legacy contents.
    // This is an easy-but-ugly fix for those.
    // TODO Cleaner way? I tried to always check the obtained segment after
    // a byte-range request but it leads to a lot of code.

    if (__priv_patchLastSegmentInSidx === true && sidxSegments !== null && sidxSegments.length > 0) {
      var lastSegment = sidxSegments[sidxSegments.length - 1];

      if (Array.isArray(lastSegment.range)) {
        lastSegment.range[1] = Infinity;
      }
    }

    var mdhdTimescale = (0,utils/* getMDHDTimescale */.LD)(chunkBytes);

    if (representation.index instanceof BaseRepresentationIndex && sidxSegments !== null && sidxSegments.length > 0) {
      representation.index._addSegments(sidxSegments);
    }

    return (0,of.of)({
      type: "parsed-init-segment",
      value: {
        initializationData: null,
        segmentProtections: [],
        initTimescale: mdhdTimescale
      }
    });
  }

  var chunkInfos = getISOBMFFTimingInfos(chunkBytes, isChunked, segment, initTimescale);
  var chunkData = getISOBMFFEmbeddedTextTrackData(content, chunkBytes, chunkInfos, isChunked);
  var chunkOffset = (0,take_first_set/* default */.Z)(segment.timestampOffset, 0);
  return (0,of.of)({
    type: "parsed-segment",
    value: {
      chunkData: chunkData,
      chunkInfos: chunkInfos,
      chunkOffset: chunkOffset,
      appendWindow: [period.start, period.end]
    }
  });
}
/**
 * Parse TextTrack data in plain text form.
 * @param {Object} infos
 * @returns {Observable.<Object>}
 */


function parsePlainTextTrack(_ref2) {
  var response = _ref2.response,
      content = _ref2.content;
  var period = content.period,
      segment = content.segment;
  var _segment$timestampOff = segment.timestampOffset,
      timestampOffset = _segment$timestampOff === void 0 ? 0 : _segment$timestampOff;

  if (segment.isInit) {
    return (0,of.of)({
      type: "parsed-init-segment",
      value: {
        initializationData: null,
        segmentProtections: [],
        initTimescale: undefined
      }
    });
  }

  var data = response.data,
      isChunked = response.isChunked;
  var textTrackData;

  if (typeof data !== "string") {
    var bytesData = data instanceof Uint8Array ? data : new Uint8Array(data);
    textTrackData = (0,string_parsing/* utf8ToStr */.uR)(bytesData);
  } else {
    textTrackData = data;
  }

  var chunkData = getPlainTextTrackData(content, textTrackData, isChunked);
  return (0,of.of)({
    type: "parsed-segment",
    value: {
      chunkData: chunkData,
      chunkInfos: null,
      chunkOffset: timestampOffset,
      appendWindow: [period.start, period.end]
    }
  });
}
/**
 * @param {Object} config
 * @returns {Function}
 */


function generateTextTrackParser(_ref3) {
  var __priv_patchLastSegmentInSidx = _ref3.__priv_patchLastSegmentInSidx;

  /**
   * Parse TextTrack data.
   * @param {Object} infos
   * @returns {Observable.<Object>}
   */
  return function textTrackParser(_ref4) {
    var response = _ref4.response,
        content = _ref4.content,
        initTimescale = _ref4.initTimescale;
    var period = content.period,
        representation = content.representation,
        segment = content.segment;
    var _segment$timestampOff2 = segment.timestampOffset,
        timestampOffset = _segment$timestampOff2 === void 0 ? 0 : _segment$timestampOff2;
    var data = response.data,
        isChunked = response.isChunked;

    if (data === null) {
      // No data, just return empty infos
      if (segment.isInit) {
        return (0,of.of)({
          type: "parsed-init-segment",
          value: {
            initializationData: null,
            segmentProtections: [],
            initTimescale: undefined
          }
        });
      }

      return (0,of.of)({
        type: "parsed-segment",
        value: {
          chunkData: null,
          chunkInfos: null,
          chunkOffset: timestampOffset,
          appendWindow: [period.start, period.end]
        }
      });
    }

    var isMP4 = isMP4EmbeddedTextTrack(representation);

    if (isMP4) {
      return parseISOBMFFEmbeddedTextTrack({
        response: {
          data: data,
          isChunked: isChunked
        },
        content: content,
        initTimescale: initTimescale
      }, __priv_patchLastSegmentInSidx);
    } else {
      return parsePlainTextTrack({
        response: {
          data: data,
          isChunked: isChunked
        },
        content: content
      });
    }
  };
}
;// CONCATENATED MODULE: ./src/transports/dash/pipelines.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */







/**
 * Returns pipelines used for DASH streaming.
 * @param {Object} options
 * implementation. Used for each generated http request.
 * @returns {Object}
 */

/* harmony default export */ function pipelines(options) {
  var manifestLoader = (0,text_manifest_loader/* default */.Z)({
    customManifestLoader: options.manifestLoader
  });
  var manifestParser = generateManifestParser(options);
  var segmentLoader = generateSegmentLoader(options);
  var audioVideoSegmentParser = generateAudioVideoSegmentParser(options);
  var textTrackLoader = generateTextTrackLoader(options);
  var textTrackParser = generateTextTrackParser(options);
  return {
    manifest: {
      loader: manifestLoader,
      parser: manifestParser
    },
    audio: {
      loader: segmentLoader,
      parser: audioVideoSegmentParser
    },
    video: {
      loader: segmentLoader,
      parser: audioVideoSegmentParser
    },
    text: {
      loader: textTrackLoader,
      parser: textTrackParser
    },
    image: {
      loader: imageLoader,
      parser: imageParser
    }
  };
}
;// CONCATENATED MODULE: ./src/transports/dash/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * /!\ This file is feature-switchable.
 * It always should be imported through the `features` object.
 */

/* harmony default export */ const transports_dash = (pipelines);

/***/ }),

/***/ 2339:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Z": () => /* binding */ transports_smooth
});

// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/of.js
var of = __webpack_require__(8170);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/map.js
var map = __webpack_require__(5709);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/tap.js
var tap = __webpack_require__(3068);
// EXTERNAL MODULE: ./src/features/index.ts
var features = __webpack_require__(7874);
// EXTERNAL MODULE: ./src/log.ts + 1 modules
var log = __webpack_require__(3887);
// EXTERNAL MODULE: ./src/manifest/index.ts + 10 modules
var src_manifest = __webpack_require__(1966);
// EXTERNAL MODULE: ./src/parsers/containers/isobmff/take_pssh_out.ts + 1 modules
var take_pssh_out = __webpack_require__(6490);
// EXTERNAL MODULE: ./src/parsers/containers/isobmff/read.ts
var read = __webpack_require__(6807);
// EXTERNAL MODULE: ./src/utils/array_includes.ts
var array_includes = __webpack_require__(7714);
// EXTERNAL MODULE: ./src/utils/assert.ts
var assert = __webpack_require__(811);
// EXTERNAL MODULE: ./src/utils/is_non_empty_string.ts
var is_non_empty_string = __webpack_require__(6923);
// EXTERNAL MODULE: ./src/utils/object_assign.ts
var object_assign = __webpack_require__(8026);
// EXTERNAL MODULE: ./src/utils/resolve_url.ts
var resolve_url = __webpack_require__(9829);
// EXTERNAL MODULE: ./src/utils/take_first_set.ts
var take_first_set = __webpack_require__(5278);
;// CONCATENATED MODULE: ./src/parsers/manifest/utils/check_manifest_ids.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Ensure that no two periods, adaptations from the same period and
 * representations from the same adaptation, have the same ID.
 *
 * Log and mutate their ID if not until this is verified.
 *
 * @param {Object} manifest
 */

function checkManifestIDs(manifest) {
  var periodIDS = [];
  manifest.periods.forEach(function (period) {
    var periodID = period.id;

    if ((0,array_includes/* default */.Z)(periodIDS, periodID)) {
      log/* default.warn */.Z.warn("Two periods with the same ID found. Updating.");
      var newID = periodID + "-dup";
      period.id = newID;
      checkManifestIDs(manifest);
      periodIDS.push(newID);
    } else {
      periodIDS.push(periodID);
    }

    var adaptations = period.adaptations;
    var adaptationIDs = [];
    Object.keys(adaptations).forEach(function (type) {
      var adaptationsForType = adaptations[type];

      if (adaptationsForType === undefined) {
        return;
      }

      adaptationsForType.forEach(function (adaptation) {
        var adaptationID = adaptation.id;

        if ((0,array_includes/* default */.Z)(adaptationIDs, adaptationID)) {
          log/* default.warn */.Z.warn("Two adaptations with the same ID found. Updating.", adaptationID);

          var _newID = adaptationID + "-dup";

          adaptation.id = _newID;
          checkManifestIDs(manifest);
          adaptationIDs.push(_newID);
        } else {
          adaptationIDs.push(adaptationID);
        }

        var representationIDs = [];
        adaptation.representations.forEach(function (representation) {
          var representationID = representation.id;

          if ((0,array_includes/* default */.Z)(representationIDs, representationID)) {
            log/* default.warn */.Z.warn("Two representations with the same ID found. Updating.", representationID);

            var _newID2 = representationID + "-dup";

            representation.id = _newID2;
            checkManifestIDs(manifest);
            representationIDs.push(_newID2);
          } else {
            representationIDs.push(representationID);
          }
        });
      });
    });
  });
}
;// CONCATENATED MODULE: ./src/parsers/manifest/smooth/get_codecs.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @param {string} codecPrivateData
 * @param {string|undefined} fourCC
 * @returns {string}
 */

function getAudioCodecs(codecPrivateData, fourCC) {
  var mpProfile;

  if (fourCC === "AACH") {
    mpProfile = 5; // High Efficiency AAC Profile
  } else {
    mpProfile = (0,is_non_empty_string/* default */.Z)(codecPrivateData) ? (parseInt(codecPrivateData.substring(0, 2), 16) & 0xF8) >> 3 : 2;
  }

  if (mpProfile === 0) {
    // Return default audio codec
    return "mp4a.40.2";
  }

  return "mp4a.40." + mpProfile;
}
/**
 * @param {string} codecPrivateData
 * @returns {string}
 */

function getVideoCodecs(codecPrivateData) {
  // we can extract codes only if fourCC is on of "H264", "X264", "DAVC", "AVC1"
  var arr = /00000001\d7([0-9a-fA-F]{6})/.exec(codecPrivateData);

  if (arr === null || !(0,is_non_empty_string/* default */.Z)(arr[1])) {
    // Return default video codec
    return "avc1.4D401E";
  }

  return "avc1." + arr[1];
}
;// CONCATENATED MODULE: ./src/parsers/manifest/smooth/parse_C_nodes.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Parse C nodes to build index timeline.
 * @param {Element} nodes
 */

function parseCNodes(nodes) {
  return nodes.reduce(function (timeline, node, i) {
    var dAttr = node.getAttribute("d");
    var tAttr = node.getAttribute("t");
    var rAttr = node.getAttribute("r");
    var repeatCount = rAttr !== null ? +rAttr - 1 : 0;
    var start = tAttr !== null ? +tAttr : undefined;
    var duration = dAttr !== null ? +dAttr : undefined;

    if (i === 0) {
      // first node
      start = start === undefined || isNaN(start) ? 0 : start;
    } else {
      // from second node to the end
      var prev = timeline[i - 1];

      if (start == null || isNaN(start)) {
        if (prev.duration == null || isNaN(prev.duration)) {
          throw new Error("Smooth: Invalid CNodes. Missing timestamp.");
        }

        start = prev.start + prev.duration * (prev.repeatCount + 1);
      }
    }

    if (duration == null || isNaN(duration)) {
      var nextNode = nodes[i + 1];

      if (nextNode !== undefined) {
        var nextTAttr = nextNode.getAttribute("t");
        var nextStart = (0,is_non_empty_string/* default */.Z)(nextTAttr) ? +nextTAttr : null;

        if (nextStart === null) {
          throw new Error("Can't build index timeline from Smooth Manifest.");
        }

        duration = nextStart - start;
      } else {
        return timeline;
      }
    }

    timeline.push({
      duration: duration,
      start: start,
      repeatCount: repeatCount
    });
    return timeline;
  }, []);
}
// EXTERNAL MODULE: ./src/utils/base64.ts
var base64 = __webpack_require__(9689);
// EXTERNAL MODULE: ./src/utils/byte_parsing.ts
var byte_parsing = __webpack_require__(6968);
// EXTERNAL MODULE: ./src/utils/string_parsing.ts
var string_parsing = __webpack_require__(3635);
;// CONCATENATED MODULE: ./src/parsers/containers/isobmff/drm/playready.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Parse PlayReady privateData to get its Hexa-coded KeyID.
 * @param {Uint8Array} privateData
 * @returns {string}
 */

function getPlayReadyKIDFromPrivateData(data) {
  var xmlLength = (0,byte_parsing/* le2toi */.qb)(data, 8);
  var xml = (0,string_parsing/* utf16LEToStr */.wV)(data.subarray(10, xmlLength + 10));
  var doc = new DOMParser().parseFromString(xml, "application/xml");
  var kidElement = doc.querySelector("KID");

  if (kidElement === null) {
    throw new Error("Cannot parse PlayReady private data: invalid XML");
  }

  var b64guidKid = kidElement.textContent === null ? "" : kidElement.textContent;
  var uuidKid = (0,string_parsing/* guidToUuid */.wO)((0,base64/* base64ToBytes */.K)(b64guidKid));
  return (0,string_parsing/* bytesToHex */.ci)(uuidKid).toLowerCase();
}
;// CONCATENATED MODULE: ./src/parsers/manifest/smooth/parse_protection_node.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * @param {Uint8Array} keyIdBytes
 * @returns {Array.<Object>}
 */

function createWidevineKeySystem(keyIdBytes) {
  return [{
    systemId: "edef8ba9-79d6-4ace-a3c8-27dcd51d21ed",
    privateData: (0,byte_parsing/* concat */.zo)([0x08, 0x01, 0x12, 0x10], keyIdBytes)
  }];
}
/**
 * Parse "Protection" Node, which contains DRM information
 * @param {Element} protectionNode
 * @returns {Object}
 */


function parseProtectionNode(protectionNode, keySystemCreator) {
  if (keySystemCreator === void 0) {
    keySystemCreator = createWidevineKeySystem;
  }

  if (protectionNode.firstElementChild === null || protectionNode.firstElementChild.nodeName !== "ProtectionHeader") {
    throw new Error("Protection should have ProtectionHeader child");
  }

  var header = protectionNode.firstElementChild;
  var privateData = (0,base64/* base64ToBytes */.K)(header.textContent === null ? "" : header.textContent);
  var keyIdHex = getPlayReadyKIDFromPrivateData(privateData);
  var keyIdBytes = (0,string_parsing/* hexToBytes */.nr)(keyIdHex); // remove possible braces

  var systemIdAttr = header.getAttribute("SystemID");
  var systemId = (systemIdAttr !== null ? systemIdAttr : "").toLowerCase().replace(/\{|\}/g, "");
  return {
    keyId: keyIdBytes,
    keySystems: [{
      systemId: systemId,
      privateData: privateData
    }].concat(keySystemCreator(keyIdBytes))
  };
}
// EXTERNAL MODULE: ./src/errors/network_error.ts
var network_error = __webpack_require__(9362);
// EXTERNAL MODULE: ./src/parsers/manifest/utils/clear_timeline_from_position.ts
var clear_timeline_from_position = __webpack_require__(8232);
// EXTERNAL MODULE: ./src/parsers/manifest/utils/index_helpers.ts
var index_helpers = __webpack_require__(3911);
// EXTERNAL MODULE: ./src/parsers/manifest/utils/is_segment_still_available.ts
var is_segment_still_available = __webpack_require__(1091);
// EXTERNAL MODULE: ./src/parsers/manifest/utils/update_segment_timeline.ts
var update_segment_timeline = __webpack_require__(5505);
;// CONCATENATED MODULE: ./src/parsers/manifest/smooth/utils/add_segment_infos.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Add a new segment to the index.
 *
 * /!\ Mutate the given index
 * @param {Object} index
 * @param {Object} newSegment
 * @param {Object} currentSegment
 * @returns {Boolean} - true if the segment has been added
 */

function _addSegmentInfos(index, newSegment, currentSegment) {
  var timeline = index.timeline,
      timescale = index.timescale;
  var timelineLength = timeline.length;
  var last = timeline[timelineLength - 1];
  var scaledNewSegment = newSegment.timescale === timescale ? {
    time: newSegment.time,
    duration: newSegment.duration
  } : {
    time: newSegment.time / newSegment.timescale * timescale,
    duration: newSegment.duration / newSegment.timescale * timescale
  }; // in some circumstances, the new segment information are only duration
  // information that we could use to deduct the start of the next segment.
  // This is the case where the new segment are associated to a current
  // segment and have the same start.
  // However, we prefer to be sure of the duration of the new segments
  // before adding such segments.

  var shouldDeductNextSegment = currentSegment.time === scaledNewSegment.time;

  if (shouldDeductNextSegment) {
    return false;
  } else if (scaledNewSegment.time >= (0,index_helpers/* getIndexSegmentEnd */.jH)(last, null)) {
    // if the given timing has a timestamp after the timeline end we
    // just need to push a new element in the timeline, or increase
    // the @r attribute of the last element.
    if (last.duration === scaledNewSegment.duration) {
      last.repeatCount++;
    } else {
      index.timeline.push({
        duration: scaledNewSegment.duration,
        start: scaledNewSegment.time,
        repeatCount: 0
      });
    }

    return true;
  }

  return false;
}
;// CONCATENATED MODULE: ./src/parsers/manifest/smooth/utils/tokens.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @param {string} url
 * @param {string|number} bitrate
 * @returns {string}
 */
function replaceRepresentationSmoothTokens(url, bitrate, customAttributes) {
  return url.replace(/\{bitrate\}/g, String(bitrate)).replace(/{CustomAttributes}/g, customAttributes.length > 0 ? customAttributes[0] : "");
}
/**
 * @param {string} url
 * @param {number} time
 * @returns {string}
 */


function replaceSegmentSmoothTokens(url, time) {
  return url.replace(/\{start time\}/g, String(time));
}


;// CONCATENATED MODULE: ./src/parsers/manifest/smooth/representation_index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */








/**
 * @param {Number} start
 * @param {Number} up
 * @param {Number} duration
 * @returns {Number}
 */

function getSegmentNumber(start, up, duration) {
  var diff = up - start;
  return diff > 0 ? Math.floor(diff / duration) : 0;
}
/**
 * Convert second-based start time and duration to the timescale of the
 * manifest's index.
 * @param {Object} index
 * @param {Number} start
 * @param {Number} duration
 * @returns {Object} - Object with two properties:
 *   - up {Number}: timescaled timestamp of the beginning time
 *   - to {Number}: timescaled timestamp of the end time (start time + duration)
 */


function normalizeRange(index, start, duration) {
  var timescale = index.timescale === undefined || index.timescale === 0 ? 1 : index.timescale;
  return {
    up: start * timescale,
    to: (start + duration) * timescale
  };
}
/**
 * Calculate the number of times a segment repeat based on the next segment.
 * @param {Object} segment
 * @param {Object} nextSegment
 * @returns {Number}
 */


function calculateRepeat(segment, nextSegment) {
  var repeatCount = segment.repeatCount; // A negative value of the @r attribute of the S element indicates
  // that the duration indicated in @d attribute repeats until the
  // start of the next S element, the end of the Period or until the
  // next MPD update.
  // TODO Also for SMOOTH????

  if (segment.duration != null && repeatCount < 0) {
    var repeatEnd = nextSegment !== undefined ? nextSegment.start : Infinity;
    repeatCount = Math.ceil((repeatEnd - segment.start) / segment.duration) - 1;
  }

  return repeatCount;
}
/**
 * RepresentationIndex implementation for Smooth Manifests.
 *
 * Allows to interact with the index to create new Segments.
 *
 * @class SmoothRepresentationIndex
 */


var SmoothRepresentationIndex = /*#__PURE__*/function () {
  function SmoothRepresentationIndex(index, options) {
    var aggressiveMode = options.aggressiveMode,
        isLive = options.isLive,
        segmentPrivateInfos = options.segmentPrivateInfos;
    var estimatedReceivedTime = index.manifestReceivedTime == null ? performance.now() : index.manifestReceivedTime;
    this._index = index;
    this._indexValidityTime = estimatedReceivedTime;
    this._initSegmentInfos = {
      bitsPerSample: segmentPrivateInfos.bitsPerSample,
      channels: segmentPrivateInfos.channels,
      codecPrivateData: segmentPrivateInfos.codecPrivateData,
      packetSize: segmentPrivateInfos.packetSize,
      samplingRate: segmentPrivateInfos.samplingRate,
      timescale: index.timescale,
      protection: segmentPrivateInfos.protection
    };
    this._isAggressiveMode = aggressiveMode;
    this._isLive = isLive;

    if (index.timeline.length !== 0) {
      var lastItem = index.timeline[index.timeline.length - 1];
      var scaledEnd = (0,index_helpers/* getIndexSegmentEnd */.jH)(lastItem, null);
      this._initialScaledLastPosition = scaledEnd;

      if (index.isLive) {
        var scaledReceivedTime = estimatedReceivedTime / 1000 * index.timescale;
        this._scaledLiveGap = scaledReceivedTime - scaledEnd;
      }
    }
  }
  /**
   * Construct init Segment compatible with a Smooth Manifest.
   * @returns {Object}
   */


  var _proto = SmoothRepresentationIndex.prototype;

  _proto.getInitSegment = function getInitSegment() {
    return {
      id: "init",
      isInit: true,
      privateInfos: {
        smoothInitSegment: this._initSegmentInfos
      },
      mediaURLs: null,
      time: 0,
      end: 0,
      duration: 0,
      timescale: 1
    };
  }
  /**
   * Generate a list of Segments for a particular period of time.
   *
   * @param {Number} _up
   * @param {Number} _to
   * @returns {Array.<Object>}
   */
  ;

  _proto.getSegments = function getSegments(_up, _to) {
    this._refreshTimeline();

    var _normalizeRange = normalizeRange(this._index, _up, _to),
        up = _normalizeRange.up,
        to = _normalizeRange.to;

    var _this$_index = this._index,
        timeline = _this$_index.timeline,
        timescale = _this$_index.timescale,
        media = _this$_index.media;
    var isAggressive = this._isAggressiveMode;
    var currentNumber;
    var segments = [];
    var timelineLength = timeline.length;
    var maxPosition = this._scaledLiveGap == null ? undefined : performance.now() / 1000 * timescale - this._scaledLiveGap;

    for (var i = 0; i < timelineLength; i++) {
      var segmentRange = timeline[i];
      var duration = segmentRange.duration,
          start = segmentRange.start;
      var repeat = calculateRepeat(segmentRange, timeline[i + 1]);
      var segmentNumberInCurrentRange = getSegmentNumber(start, up, duration);
      var segmentTime = start + segmentNumberInCurrentRange * duration;
      var timeToAddToCheckMaxPosition = isAggressive ? 0 : duration;

      while (segmentTime < to && segmentNumberInCurrentRange <= repeat && (maxPosition == null || segmentTime + timeToAddToCheckMaxPosition <= maxPosition)) {
        var time = segmentTime;
        var number = currentNumber != null ? currentNumber + segmentNumberInCurrentRange : undefined;
        var segment = {
          id: String(segmentTime),
          isInit: false,
          time: time / timescale,
          end: (time + duration) / timescale,
          duration: duration / timescale,
          timescale: 1,
          number: number,
          mediaURLs: [replaceSegmentSmoothTokens(media, time)],
          privateInfos: {
            smoothMediaSegment: {
              time: time,
              duration: duration
            }
          }
        };
        segments.push(segment); // update segment number and segment time for the next segment

        segmentNumberInCurrentRange++;
        segmentTime = start + segmentNumberInCurrentRange * duration;
      }

      if (segmentTime >= to) {
        // we reached ``to``, we're done
        return segments;
      }

      if (currentNumber != null) {
        currentNumber += repeat + 1;
      }
    }

    return segments;
  }
  /**
   * Returns true if, based on the arguments, the index should be refreshed.
   * (If we should re-fetch the manifest)
   * @param {Number} up
   * @param {Number} to
   * @returns {Boolean}
   */
  ;

  _proto.shouldRefresh = function shouldRefresh(up, to) {
    this._refreshTimeline();

    if (!this._index.isLive) {
      return false;
    }

    var _this$_index2 = this._index,
        timeline = _this$_index2.timeline,
        timescale = _this$_index2.timescale;
    var lastSegmentInCurrentTimeline = timeline[timeline.length - 1];

    if (lastSegmentInCurrentTimeline === undefined) {
      return false;
    }

    var repeat = lastSegmentInCurrentTimeline.repeatCount;
    var endOfLastSegmentInCurrentTimeline = lastSegmentInCurrentTimeline.start + (repeat + 1) * lastSegmentInCurrentTimeline.duration;

    if (to * timescale < endOfLastSegmentInCurrentTimeline) {
      return false;
    }

    if (up * timescale >= endOfLastSegmentInCurrentTimeline) {
      return true;
    } // ----


    var startOfLastSegmentInCurrentTimeline = lastSegmentInCurrentTimeline.start + repeat * lastSegmentInCurrentTimeline.duration;
    return up * timescale > startOfLastSegmentInCurrentTimeline;
  }
  /**
   * Returns first position available in the index.
   *
   * @param {Object} index
   * @returns {Number|null}
   */
  ;

  _proto.getFirstPosition = function getFirstPosition() {
    this._refreshTimeline();

    var index = this._index;

    if (index.timeline.length === 0) {
      return null;
    }

    return index.timeline[0].start / index.timescale;
  }
  /**
   * Returns last position available in the index.
   * @param {Object} index
   * @returns {Number}
   */
  ;

  _proto.getLastPosition = function getLastPosition() {
    this._refreshTimeline();

    var index = this._index;

    if (this._scaledLiveGap == null) {
      var lastTimelineElement = index.timeline[index.timeline.length - 1];
      return (0,index_helpers/* getIndexSegmentEnd */.jH)(lastTimelineElement, null) / index.timescale;
    }

    for (var i = index.timeline.length - 1; i >= 0; i--) {
      var timelineElt = index.timeline[i];
      var timescaledNow = performance.now() / 1000 * index.timescale;
      var start = timelineElt.start,
          duration = timelineElt.duration,
          repeatCount = timelineElt.repeatCount;

      for (var j = repeatCount; j >= 0; j--) {
        var end = start + duration * (j + 1);
        var positionToReach = this._isAggressiveMode ? end - duration : end;

        if (positionToReach <= timescaledNow - this._scaledLiveGap) {
          return end / index.timescale;
        }
      }
    }

    return undefined;
  }
  /**
   * @param {number} timeSec
   * @returns {number|null}
   */
  ;

  _proto.checkDiscontinuity = function checkDiscontinuity(timeSec) {
    this._refreshTimeline();

    return (0,index_helpers/* checkDiscontinuity */._j)(this._index, timeSec, undefined);
  }
  /**
   * @returns {boolean}
   */
  ;

  _proto.areSegmentsChronologicallyGenerated = function areSegmentsChronologicallyGenerated() {
    return true;
  };

  _proto.isSegmentStillAvailable = function isSegmentStillAvailable(segment) {
    if (segment.isInit) {
      return true;
    }

    this._refreshTimeline();

    var _this$_index3 = this._index,
        timeline = _this$_index3.timeline,
        timescale = _this$_index3.timescale;
    return (0,is_segment_still_available/* default */.Z)(segment, timeline, timescale, 0);
  }
  /**
   * @param {Error} error
   * @returns {Boolean}
   */
  ;

  _proto.canBeOutOfSyncError = function canBeOutOfSyncError(error) {
    if (!this._isLive) {
      return false;
    }

    return error instanceof network_error/* default */.Z && (error.isHttpError(404) || error.isHttpError(412));
  }
  /**
   * Replace this RepresentationIndex by a newly downloaded one.
   * Check if the old index had more information about new segments and re-add
   * them if that's the case.
   * @param {Object} newIndex
   */
  ;

  _proto._replace = function _replace(newIndex) {
    var oldTimeline = this._index.timeline;
    var newTimeline = newIndex._index.timeline;
    var oldTimescale = this._index.timescale;
    var newTimescale = newIndex._index.timescale;
    this._index = newIndex._index;
    this._initialScaledLastPosition = newIndex._initialScaledLastPosition;
    this._indexValidityTime = newIndex._indexValidityTime;
    this._scaledLiveGap = newIndex._scaledLiveGap;

    if (oldTimeline.length === 0 || newTimeline.length === 0 || oldTimescale !== newTimescale) {
      return; // don't take risk, if something is off, take the new one
    }

    var lastOldTimelineElement = oldTimeline[oldTimeline.length - 1];
    var lastNewTimelineElement = newTimeline[newTimeline.length - 1];
    var newEnd = (0,index_helpers/* getIndexSegmentEnd */.jH)(lastNewTimelineElement, null);

    if ((0,index_helpers/* getIndexSegmentEnd */.jH)(lastOldTimelineElement, null) <= newEnd) {
      return;
    }

    for (var i = 0; i < oldTimeline.length; i++) {
      var oldTimelineRange = oldTimeline[i];
      var oldEnd = (0,index_helpers/* getIndexSegmentEnd */.jH)(oldTimelineRange, null);

      if (oldEnd === newEnd) {
        // just add the supplementary segments
        this._index.timeline = this._index.timeline.concat(oldTimeline.slice(i + 1));
        return;
      }

      if (oldEnd > newEnd) {
        // adjust repeatCount + add supplementary segments
        if (oldTimelineRange.duration !== lastNewTimelineElement.duration) {
          return;
        }

        var rangeDuration = newEnd - oldTimelineRange.start;

        if (rangeDuration === 0) {
          log/* default.warn */.Z.warn("Smooth Parser: a discontinuity detected in the previous manifest" + " has been resolved.");
          this._index.timeline = this._index.timeline.concat(oldTimeline.slice(i));
          return;
        }

        if (rangeDuration < 0 || rangeDuration % oldTimelineRange.duration !== 0) {
          return;
        }

        var repeatWithOld = rangeDuration / oldTimelineRange.duration - 1;
        var relativeRepeat = oldTimelineRange.repeatCount - repeatWithOld;

        if (relativeRepeat < 0) {
          return;
        }

        lastNewTimelineElement.repeatCount += relativeRepeat;
        var supplementarySegments = oldTimeline.slice(i + 1);
        this._index.timeline = this._index.timeline.concat(supplementarySegments);
        return;
      }
    }
  };

  _proto._update = function _update(newIndex) {
    (0,update_segment_timeline/* default */.Z)(this._index.timeline, newIndex._index.timeline);
    this._initialScaledLastPosition = newIndex._initialScaledLastPosition;
    this._indexValidityTime = newIndex._indexValidityTime;
    this._scaledLiveGap = newIndex._scaledLiveGap;
  }
  /**
   * @returns {Boolean}
   */
  ;

  _proto.isFinished = function isFinished() {
    return !this._isLive;
  }
  /**
   * @returns {Boolean}
   */
  ;

  _proto.isInitialized = function isInitialized() {
    return true;
  };

  _proto._addSegments = function _addSegments(nextSegments, currentSegment) {
    this._refreshTimeline();

    for (var i = 0; i < nextSegments.length; i++) {
      _addSegmentInfos(this._index, nextSegments[i], currentSegment);
    }
  }
  /**
   * Clean-up timeline to remove segment information which should not be
   * available due to the timeshift window
   */
  ;

  _proto._refreshTimeline = function _refreshTimeline() {
    // clean segments before time shift buffer depth
    if (this._initialScaledLastPosition == null) {
      return;
    }

    var index = this._index;
    var timeShiftBufferDepth = index.timeShiftBufferDepth;
    var timeSinceLastRealUpdate = (performance.now() - this._indexValidityTime) / 1000;
    var lastPositionEstimate = timeSinceLastRealUpdate + this._initialScaledLastPosition / index.timescale;

    if (timeShiftBufferDepth != null) {
      var minimumPosition = (lastPositionEstimate - timeShiftBufferDepth) * index.timescale;
      (0,clear_timeline_from_position/* default */.Z)(index.timeline, minimumPosition);
    }
  };

  return SmoothRepresentationIndex;
}();


;// CONCATENATED MODULE: ./src/parsers/manifest/smooth/utils/parseBoolean.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @param {*} parseBoolean
 * @returns {Boolean}
 */
function parseBoolean(val) {
  if (typeof val === "boolean") {
    return val;
  } else if (typeof val === "string") {
    return val.toUpperCase() === "TRUE";
  } else {
    return false;
  }
}
;// CONCATENATED MODULE: ./src/parsers/manifest/smooth/utils/reduceChildren.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Reduce implementation for the children of the given element.
 * @param {Element} root
 * @param {Function} fn
 * @param {*} init
 * @returns {*}
 */
function reduceChildren(root, fn, init) {
  var node = root.firstElementChild;
  var accumulator = init;

  while (node !== null) {
    accumulator = fn(accumulator, node.nodeName, node);
    node = node.nextElementSibling;
  }

  return accumulator;
}
;// CONCATENATED MODULE: ./src/parsers/manifest/smooth/create_parser.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */















/**
 * Default value for the aggressive `mode`.
 * In this mode, segments will be returned even if we're not sure those had time
 * to be generated.
 */

var DEFAULT_AGGRESSIVE_MODE = false;
var KNOWN_ADAPTATION_TYPES = ["audio", "video", "text", "image"];
var DEFAULT_MIME_TYPES = {
  audio: "audio/mp4",
  video: "video/mp4",
  text: "application/ttml+xml"
};
var MIME_TYPES = {
  AACL: "audio/mp4",
  AVC1: "video/mp4",
  H264: "video/mp4",
  TTML: "application/ttml+xml+mp4"
};
/**
 * @param {Object|undefined} parserOptions
 * @returns {Function}
 */

function createSmoothStreamingParser(parserOptions) {
  if (parserOptions === void 0) {
    parserOptions = {};
  }

  var referenceDateTime = parserOptions.referenceDateTime === undefined ? Date.UTC(1970, 0, 1, 0, 0, 0, 0) / 1000 : parserOptions.referenceDateTime;
  var minRepresentationBitrate = parserOptions.minRepresentationBitrate === undefined ? 0 : parserOptions.minRepresentationBitrate;
  var _parserOptions = parserOptions,
      serverSyncInfos = _parserOptions.serverSyncInfos;
  var serverTimeOffset = serverSyncInfos !== undefined ? serverSyncInfos.serverTimestamp - serverSyncInfos.clientTime : undefined;
  /**
   * @param {Element} q
   * @param {string} streamType
   * @return {Object}
   */

  function parseQualityLevel(q, streamType) {
    var customAttributes = reduceChildren(q, function (acc, qName, qNode) {
      if (qName === "CustomAttributes") {
        acc.push.apply(acc, reduceChildren(qNode, function (cAttrs, cName, cNode) {
          if (cName === "Attribute") {
            var name = cNode.getAttribute("Name");
            var value = cNode.getAttribute("Value");

            if (name !== null && value !== null) {
              cAttrs.push(name + "=" + value);
            }
          }

          return cAttrs;
        }, []));
      }

      return acc;
    }, []);
    /**
     * @param {string} name
     * @returns {string|undefined}
     */

    function getAttribute(name) {
      var attr = q.getAttribute(name);
      return attr == null ? undefined : attr;
    }

    switch (streamType) {
      case "audio":
        {
          var audiotag = getAttribute("AudioTag");
          var bitsPerSample = getAttribute("BitsPerSample");
          var channels = getAttribute("Channels");
          var codecPrivateData = getAttribute("CodecPrivateData");
          var fourCC = getAttribute("FourCC");
          var packetSize = getAttribute("PacketSize");
          var samplingRate = getAttribute("SamplingRate");
          var bitrateAttr = getAttribute("Bitrate");
          var bitrate = bitrateAttr === undefined ? 0 : isNaN(parseInt(bitrateAttr, 10)) ? 0 : parseInt(bitrateAttr, 10);

          if (fourCC !== undefined && MIME_TYPES[fourCC] === undefined || codecPrivateData === undefined) {
            log/* default.warn */.Z.warn("Smooth parser: Unsupported audio codec. Ignoring quality level.");
            return null;
          }

          var codecs = getAudioCodecs(codecPrivateData, fourCC);
          return {
            audiotag: audiotag !== undefined ? parseInt(audiotag, 10) : audiotag,
            bitrate: bitrate,
            bitsPerSample: bitsPerSample !== undefined ? parseInt(bitsPerSample, 10) : bitsPerSample,
            channels: channels !== undefined ? parseInt(channels, 10) : channels,
            codecPrivateData: codecPrivateData,
            codecs: codecs,
            customAttributes: customAttributes,
            mimeType: fourCC !== undefined ? MIME_TYPES[fourCC] : fourCC,
            packetSize: packetSize !== undefined ? parseInt(packetSize, 10) : packetSize,
            samplingRate: samplingRate !== undefined ? parseInt(samplingRate, 10) : samplingRate
          };
        }

      case "video":
        {
          var _codecPrivateData = getAttribute("CodecPrivateData");

          var _fourCC = getAttribute("FourCC");

          var width = getAttribute("MaxWidth");
          var height = getAttribute("MaxHeight");

          var _bitrateAttr = getAttribute("Bitrate");

          var _bitrate = _bitrateAttr === undefined ? 0 : isNaN(parseInt(_bitrateAttr, 10)) ? 0 : parseInt(_bitrateAttr, 10);

          if (_fourCC !== undefined && MIME_TYPES[_fourCC] === undefined || _codecPrivateData === undefined) {
            log/* default.warn */.Z.warn("Smooth parser: Unsupported video codec. Ignoring quality level.");
            return null;
          }

          var _codecs = getVideoCodecs(_codecPrivateData);

          return {
            bitrate: _bitrate,
            customAttributes: customAttributes,
            mimeType: _fourCC !== undefined ? MIME_TYPES[_fourCC] : _fourCC,
            codecPrivateData: _codecPrivateData,
            codecs: _codecs,
            width: width !== undefined ? parseInt(width, 10) : undefined,
            height: height !== undefined ? parseInt(height, 10) : undefined
          };
        }

      case "text":
        {
          var _codecPrivateData2 = getAttribute("CodecPrivateData");

          var _fourCC2 = getAttribute("FourCC");

          var _bitrateAttr2 = getAttribute("Bitrate");

          var _bitrate2 = _bitrateAttr2 === undefined ? 0 : isNaN(parseInt(_bitrateAttr2, 10)) ? 0 : parseInt(_bitrateAttr2, 10);

          return {
            bitrate: _bitrate2,
            customAttributes: customAttributes,
            mimeType: _fourCC2 !== undefined ? MIME_TYPES[_fourCC2] : _fourCC2,
            codecPrivateData: (0,take_first_set/* default */.Z)(_codecPrivateData2, "")
          };
        }

      default:
        log/* default.error */.Z.error("Smooth Parser: Unrecognized StreamIndex type: " + streamType);
        return null;
    }
  }
  /**
   * Parse the adaptations (<StreamIndex>) tree containing
   * representations (<QualityLevels>) and timestamp indexes (<c>).
   * Indexes can be quite huge, and this function needs to
   * to be optimized.
   * @param {Object} args
   * @returns {Object}
   */


  function parseAdaptation(args) {
    var root = args.root,
        timescale = args.timescale,
        rootURL = args.rootURL,
        protections = args.protections,
        timeShiftBufferDepth = args.timeShiftBufferDepth,
        manifestReceivedTime = args.manifestReceivedTime,
        isLive = args.isLive;
    var timescaleAttr = root.getAttribute("Timescale");

    var _timescale = timescaleAttr === null ? timescale : isNaN(+timescaleAttr) ? timescale : +timescaleAttr;

    var typeAttribute = root.getAttribute("Type");

    if (typeAttribute === null) {
      throw new Error("StreamIndex without type.");
    }

    if (!(0,array_includes/* default */.Z)(KNOWN_ADAPTATION_TYPES, typeAttribute)) {
      log/* default.warn */.Z.warn("Smooth Parser: Unrecognized adaptation type:", typeAttribute);
    }

    var adaptationType = typeAttribute;
    var subType = root.getAttribute("Subtype");
    var language = root.getAttribute("Language");
    var baseURLAttr = root.getAttribute("Url");
    var baseURL = baseURLAttr === null ? "" : baseURLAttr;

    if (false) {}

    var _reduceChildren = reduceChildren(root, function (res, _name, node) {
      switch (_name) {
        case "QualityLevel":
          var qualityLevel = parseQualityLevel(node, adaptationType);

          if (qualityLevel === null) {
            return res;
          } // filter out video qualityLevels with small bitrates


          if (adaptationType !== "video" || qualityLevel.bitrate > minRepresentationBitrate) {
            res.qualityLevels.push(qualityLevel);
          }

          break;

        case "c":
          res.cNodes.push(node);
          break;
      }

      return res;
    }, {
      qualityLevels: [],
      cNodes: []
    }),
        qualityLevels = _reduceChildren.qualityLevels,
        cNodes = _reduceChildren.cNodes;

    var index = {
      timeline: parseCNodes(cNodes),
      timescale: _timescale
    }; // we assume that all qualityLevels have the same
    // codec and mimeType

    (0,assert/* default */.Z)(qualityLevels.length !== 0, "Adaptation should have at least one playable representation.");
    var adaptationID = adaptationType + ((0,is_non_empty_string/* default */.Z)(language) ? "_" + language : "");
    var representations = qualityLevels.map(function (qualityLevel) {
      var path = (0,resolve_url/* default */.Z)(rootURL, baseURL);
      var repIndex = {
        timeline: index.timeline,
        timescale: index.timescale,
        media: replaceRepresentationSmoothTokens(path, qualityLevel.bitrate, qualityLevel.customAttributes),
        isLive: isLive,
        timeShiftBufferDepth: timeShiftBufferDepth,
        manifestReceivedTime: manifestReceivedTime
      };
      var mimeType = (0,is_non_empty_string/* default */.Z)(qualityLevel.mimeType) ? qualityLevel.mimeType : DEFAULT_MIME_TYPES[adaptationType];
      var codecs = qualityLevel.codecs;
      var id = adaptationID + "_" + (adaptationType != null ? adaptationType + "-" : "") + (mimeType != null ? mimeType + "-" : "") + (codecs != null ? codecs + "-" : "") + String(qualityLevel.bitrate);
      var keyIDs = [];
      var firstProtection;

      if (protections.length > 0) {
        firstProtection = protections[0];
        protections.forEach(function (protection) {
          var keyId = protection.keyId;
          protection.keySystems.forEach(function (keySystem) {
            keyIDs.push({
              keyId: keyId,
              systemId: keySystem.systemId
            });
          });
        });
      }

      var segmentPrivateInfos = {
        bitsPerSample: qualityLevel.bitsPerSample,
        channels: qualityLevel.channels,
        codecPrivateData: qualityLevel.codecPrivateData,
        packetSize: qualityLevel.packetSize,
        samplingRate: qualityLevel.samplingRate,
        // TODO set multiple protections here
        // instead of the first one
        protection: firstProtection != null ? {
          keyId: firstProtection.keyId,
          keySystems: firstProtection.keySystems
        } : undefined
      };
      var aggressiveMode = parserOptions.aggressiveMode == null ? DEFAULT_AGGRESSIVE_MODE : parserOptions.aggressiveMode;
      var reprIndex = new SmoothRepresentationIndex(repIndex, {
        aggressiveMode: aggressiveMode,
        isLive: isLive,
        segmentPrivateInfos: segmentPrivateInfos
      });
      var representation = (0,object_assign/* default */.Z)({}, qualityLevel, {
        index: reprIndex,
        mimeType: mimeType,
        codecs: codecs,
        id: id
      });

      if (keyIDs.length > 0) {
        representation.contentProtections = {
          keyIds: keyIDs,
          initData: {}
        };
      }

      return representation;
    }); // TODO(pierre): real ad-insert support

    if (subType === "ADVT") {
      return null;
    }

    var parsedAdaptation = {
      id: adaptationID,
      type: adaptationType,
      representations: representations,
      language: language == null ? undefined : language
    };

    if (adaptationType === "text" && subType === "DESC") {
      parsedAdaptation.closedCaption = true;
    }

    return parsedAdaptation;
  }

  function parseFromDocument(doc, url, manifestReceivedTime) {
    var rootURL = (0,resolve_url/* normalizeBaseURL */.f)(url == null ? "" : url);
    var root = doc.documentElement;

    if (root == null || root.nodeName !== "SmoothStreamingMedia") {
      throw new Error("document root should be SmoothStreamingMedia");
    }

    var majorVersionAttr = root.getAttribute("MajorVersion");
    var minorVersionAttr = root.getAttribute("MinorVersion");

    if (majorVersionAttr === null || minorVersionAttr === null || !/^[2]-[0-2]$/.test(majorVersionAttr + "-" + minorVersionAttr)) {
      throw new Error("Version should be 2.0, 2.1 or 2.2");
    }

    var timescaleAttr = root.getAttribute("Timescale");
    var timescale = !(0,is_non_empty_string/* default */.Z)(timescaleAttr) ? 10000000 : isNaN(+timescaleAttr) ? 10000000 : +timescaleAttr;

    var _reduceChildren2 = reduceChildren(root, function (res, name, node) {
      switch (name) {
        case "Protection":
          {
            res.protections.push(parseProtectionNode(node, parserOptions.keySystems));
            break;
          }

        case "StreamIndex":
          res.adaptationNodes.push(node);
          break;
      }

      return res;
    }, {
      adaptationNodes: [],
      protections: []
    }),
        protections = _reduceChildren2.protections,
        adaptationNodes = _reduceChildren2.adaptationNodes;

    var initialAdaptations = {};
    var isLive = parseBoolean(root.getAttribute("IsLive"));
    var timeShiftBufferDepth;

    if (isLive) {
      var dvrWindowLength = root.getAttribute("DVRWindowLength");

      if (dvrWindowLength != null && !isNaN(+dvrWindowLength) && +dvrWindowLength !== 0) {
        timeShiftBufferDepth = +dvrWindowLength / timescale;
      }
    }

    var adaptations = adaptationNodes.reduce(function (acc, node) {
      var adaptation = parseAdaptation({
        root: node,
        rootURL: rootURL,
        timescale: timescale,
        protections: protections,
        isLive: isLive,
        timeShiftBufferDepth: timeShiftBufferDepth,
        manifestReceivedTime: manifestReceivedTime
      });

      if (adaptation === null) {
        return acc;
      }

      var type = adaptation.type;
      var adaps = acc[type];

      if (adaps === undefined) {
        acc[type] = [adaptation];
      } else {
        adaps.push(adaptation);
      }

      return acc;
    }, initialAdaptations);
    var suggestedPresentationDelay;
    var availabilityStartTime;
    var minimumTime;
    var timeshiftDepth = null;
    var maximumTimeData;
    var firstVideoAdaptation = adaptations.video !== undefined ? adaptations.video[0] : undefined;
    var firstAudioAdaptation = adaptations.audio !== undefined ? adaptations.audio[0] : undefined;
    var firstTimeReference;
    var lastTimeReference;

    if (firstVideoAdaptation !== undefined || firstAudioAdaptation !== undefined) {
      var firstTimeReferences = [];
      var lastTimeReferences = [];

      if (firstVideoAdaptation !== undefined) {
        var firstVideoRepresentation = firstVideoAdaptation.representations[0];

        if (firstVideoRepresentation !== undefined) {
          var firstVideoTimeReference = firstVideoRepresentation.index.getFirstPosition();
          var lastVideoTimeReference = firstVideoRepresentation.index.getLastPosition();

          if (firstVideoTimeReference != null) {
            firstTimeReferences.push(firstVideoTimeReference);
          }

          if (lastVideoTimeReference != null) {
            lastTimeReferences.push(lastVideoTimeReference);
          }
        }
      }

      if (firstAudioAdaptation !== undefined) {
        var firstAudioRepresentation = firstAudioAdaptation.representations[0];

        if (firstAudioRepresentation !== undefined) {
          var firstAudioTimeReference = firstAudioRepresentation.index.getFirstPosition();
          var lastAudioTimeReference = firstAudioRepresentation.index.getLastPosition();

          if (firstAudioTimeReference != null) {
            firstTimeReferences.push(firstAudioTimeReference);
          }

          if (lastAudioTimeReference != null) {
            lastTimeReferences.push(lastAudioTimeReference);
          }
        }
      }

      if (firstTimeReferences.length > 0) {
        firstTimeReference = Math.max.apply(Math, firstTimeReferences);
      }

      if (lastTimeReferences.length > 0) {
        lastTimeReference = Math.min.apply(Math, lastTimeReferences);
      }
    }

    var manifestDuration = root.getAttribute("Duration");
    var duration = manifestDuration != null && +manifestDuration !== 0 ? +manifestDuration / timescale : undefined;

    if (isLive) {
      suggestedPresentationDelay = parserOptions.suggestedPresentationDelay;
      availabilityStartTime = referenceDateTime;
      minimumTime = firstTimeReference !== null && firstTimeReference !== void 0 ? firstTimeReference : availabilityStartTime;
      var maximumTime = lastTimeReference != null ? lastTimeReference : Date.now() / 1000 - availabilityStartTime;
      maximumTimeData = {
        isLinear: true,
        value: maximumTime,
        time: performance.now()
      };
      timeshiftDepth = timeShiftBufferDepth !== null && timeShiftBufferDepth !== void 0 ? timeShiftBufferDepth : null;
    } else {
      minimumTime = firstTimeReference !== null && firstTimeReference !== void 0 ? firstTimeReference : 0;

      var _maximumTime = lastTimeReference !== undefined ? lastTimeReference : duration !== undefined ? minimumTime + duration : Infinity;

      maximumTimeData = {
        isLinear: false,
        value: _maximumTime,
        time: performance.now()
      };
    }

    var periodStart = isLive ? 0 : minimumTime;
    var periodEnd = isLive ? undefined : maximumTimeData.value;
    var manifest = {
      availabilityStartTime: availabilityStartTime === undefined ? 0 : availabilityStartTime,
      clockOffset: serverTimeOffset,
      isLive: isLive,
      isDynamic: isLive,
      timeBounds: {
        absoluteMinimumTime: minimumTime,
        timeshiftDepth: timeshiftDepth,
        maximumTimeData: maximumTimeData
      },
      periods: [{
        adaptations: adaptations,
        duration: periodEnd !== undefined ? periodEnd - periodStart : duration,
        end: periodEnd,
        id: "gen-smooth-period-0",
        start: periodStart
      }],
      suggestedPresentationDelay: suggestedPresentationDelay,
      transportType: "smooth",
      uris: url == null ? [] : [url]
    };
    checkManifestIDs(manifest);
    return manifest;
  }

  return parseFromDocument;
}

/* harmony default export */ const create_parser = (createSmoothStreamingParser);
;// CONCATENATED MODULE: ./src/parsers/manifest/smooth/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/* harmony default export */ const smooth = (create_parser);

// EXTERNAL MODULE: ./src/utils/request/index.ts + 1 modules
var request = __webpack_require__(4597);
// EXTERNAL MODULE: ./src/utils/warn_once.ts
var warn_once = __webpack_require__(8806);
// EXTERNAL MODULE: ./src/transports/utils/check_isobmff_integrity.ts
var check_isobmff_integrity = __webpack_require__(4460);
// EXTERNAL MODULE: ./src/transports/utils/return_parsed_manifest.ts
var return_parsed_manifest = __webpack_require__(7445);
// EXTERNAL MODULE: ./src/transports/utils/text_manifest_loader.ts + 1 modules
var text_manifest_loader = __webpack_require__(7278);
// EXTERNAL MODULE: ./src/parsers/containers/isobmff/utils.ts
var utils = __webpack_require__(4644);
// EXTERNAL MODULE: ./src/parsers/containers/isobmff/get_box.ts
var get_box = __webpack_require__(2297);
;// CONCATENATED MODULE: ./src/transports/smooth/isobmff/parse_tfrf.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * @param {Uint8Array} traf
 * @returns {Array.<Object>}
 */

function parseTfrf(traf) {
  var tfrf = (0,get_box/* getUuidContent */.nR)(traf, 0xD4807EF2, 0xCA394695, 0x8E5426CB, 0x9E46A79F);

  if (tfrf === undefined) {
    return [];
  }

  var frags = [];
  var version = tfrf[0];
  var fragCount = tfrf[4];

  for (var i = 0; i < fragCount; i++) {
    var duration = void 0;
    var time = void 0;

    if (version === 1) {
      time = (0,byte_parsing/* be8toi */.pV)(tfrf, i * 16 + 5);
      duration = (0,byte_parsing/* be8toi */.pV)(tfrf, i * 16 + 5 + 8);
    } else {
      time = (0,byte_parsing/* be4toi */.pX)(tfrf, i * 8 + 5);
      duration = (0,byte_parsing/* be4toi */.pX)(tfrf, i * 8 + 5 + 4);
    }

    frags.push({
      time: time,
      duration: duration
    });
  }

  return frags;
}
;// CONCATENATED MODULE: ./src/transports/smooth/isobmff/parse_tfxd.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * @param {Uint8Array} traf
 * @returns {Object|undefined}
 */

function parseTfxd(traf) {
  var tfxd = (0,get_box/* getUuidContent */.nR)(traf, 0x6D1D9B05, 0x42D544E6, 0x80E2141D, 0xAFF757B2);

  if (tfxd === undefined) {
    return undefined;
  }

  return {
    duration: (0,byte_parsing/* be8toi */.pV)(tfxd, 12),
    time: (0,byte_parsing/* be8toi */.pV)(tfxd, 4)
  };
}
;// CONCATENATED MODULE: ./src/transports/smooth/extract_timings_infos.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Try to obtain time information from the given data.
 * @param {Uint8Array} data
 * @param {boolean} isChunked
 * @param {Object} segment
 * @param {boolean} isLive
 * @returns {Object}
 */

function extractTimingsInfos(data, isChunked, initTimescale, segment, isLive) {
  var _a;

  var nextSegments = [];
  var chunkInfos;
  var tfxdSegment;
  var tfrfSegments;

  if (isLive) {
    var traf = (0,read/* getTRAF */.XA)(data);

    if (traf !== null) {
      tfrfSegments = parseTfrf(traf);
      tfxdSegment = parseTfxd(traf);
    } else {
      log/* default.warn */.Z.warn("smooth: could not find traf atom");
    }
  }

  if (tfrfSegments !== undefined) {
    for (var i = 0; i < tfrfSegments.length; i++) {
      nextSegments.push({
        time: tfrfSegments[i].time,
        duration: tfrfSegments[i].duration,
        timescale: initTimescale
      });
    }
  }

  if (tfxdSegment !== undefined) {
    chunkInfos = {
      time: tfxdSegment.time / initTimescale,
      duration: tfxdSegment.duration / initTimescale
    };
    return {
      nextSegments: nextSegments,
      chunkInfos: chunkInfos,
      scaledSegmentTime: tfxdSegment.time
    };
  }

  if (isChunked) {
    return {
      nextSegments: nextSegments,
      chunkInfos: null,
      scaledSegmentTime: undefined
    };
  }

  var segmentDuration = segment.duration * initTimescale; // we could always make a mistake when reading a container.
  // If the estimate is too far from what the segment seems to imply, take
  // the segment infos instead.

  var maxDecodeTimeDelta = Math.min(initTimescale * 0.9, segmentDuration / 4);
  var trunDuration = (0,utils/* getDurationFromTrun */.MM)(data);
  var scaledSegmentTime = ((_a = segment.privateInfos) === null || _a === void 0 ? void 0 : _a.smoothMediaSegment) !== undefined ? segment.privateInfos.smoothMediaSegment.time : Math.round(segment.time * initTimescale);

  if (trunDuration !== undefined && Math.abs(trunDuration - segmentDuration) <= maxDecodeTimeDelta) {
    chunkInfos = {
      time: segment.time,
      duration: trunDuration / initTimescale
    };
  } else {
    chunkInfos = {
      time: segment.time,
      duration: segment.duration
    };
  }

  return {
    nextSegments: nextSegments,
    chunkInfos: chunkInfos,
    scaledSegmentTime: scaledSegmentTime
  };
}
// EXTERNAL MODULE: ./src/compat/browser_detection.ts
var browser_detection = __webpack_require__(3666);
;// CONCATENATED MODULE: ./src/compat/can_patch_isobmff.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * TODO(pierre): fix patchSegmentInPlace to work with IE11. Maybe
 * try to put free atom inside traf children
 *
 * Returns true if the current target is tolerant enough for us to
 * simply be able to "patch" an ISOBMFF segment or if we have to create a
 * new one from scratch instead.
 * @returns {Boolean}
 */

function canPatchISOBMFFSegment() {
  return !browser_detection/* isIEOrEdge */.YM;
}
// EXTERNAL MODULE: ./src/parsers/containers/isobmff/constants.ts
var constants = __webpack_require__(2689);
;// CONCATENATED MODULE: ./src/parsers/containers/isobmff/create_box.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Speed up string to bytes conversion by memorizing the result
 *
 * The keys here are ISOBMFF box names. The values are the corresponding
 * bytes conversion for putting as an ISOBMFF boxes.
 *
 * Used by the boxName method.
 * @type {Object}
 */

var boxNamesMem = {};
/**
 * Convert the string name of an ISOBMFF box into the corresponding bytes.
 * Has a memorization mechanism to speed-up if you want to translate the
 * same string multiple times.
 * @param {string} str
 * @returns {Uint8Array}
 */

function boxName(str) {
  if (boxNamesMem[str] != null) {
    return boxNamesMem[str];
  }

  var nameInBytes = (0,string_parsing/* strToUtf8 */.tG)(str);
  boxNamesMem[str] = nameInBytes;
  return nameInBytes;
}
/**
 * Create a new ISOBMFF "box" with the given name.
 * @param {string} name - name of the box you want to create, must always
 * be 4 characters (uuid boxes not supported)
 * @param {Uint8Array} buff - content of the box
 * @returns {Uint8Array} - The entire ISOBMFF box (length+name+content)
 */


function createBox(name, buff) {
  var len = buff.length + 8;
  return len <= constants/* MAX_32_BIT_INT */.s ? (0,byte_parsing/* concat */.zo)((0,byte_parsing/* itobe4 */.kh)(len), boxName(name), buff) : (0,byte_parsing/* concat */.zo)((0,byte_parsing/* itobe4 */.kh)(1), boxName(name), (0,byte_parsing/* itobe8 */.el)(len + 8), buff);
}
/**
 * @param {string} name
 * @param {Array.<Uint8Array>} children
 * @returns {Uint8Array}
 */


function createBoxWithChildren(name, children) {
  return createBox(name, byte_parsing/* concat.apply */.zo.apply(void 0, children));
}


;// CONCATENATED MODULE: ./src/transports/smooth/isobmff/create_boxes.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * @param {Number} width
 * @param {Number} height
 * @param {Number} hRes - horizontal resolution, eg 72
 * @param {Number} vRes - vertical resolution, eg 72
 * @param {string} encDepth
 * @param {Number} colorDepth - eg 24
 * @param {Uint8Array} avcc - Uint8Array representing the avcC atom
 * @returns {Uint8Array}
 */

function createAVC1Box(width, height, hRes, vRes, encName, colorDepth, avcc) {
  return createBox("avc1", (0,byte_parsing/* concat */.zo)(6, // 6 bytes reserved
  (0,byte_parsing/* itobe2 */.XT)(1), 16, // drefIdx + QuickTime reserved, zeroes
  (0,byte_parsing/* itobe2 */.XT)(width), // size 2 w
  (0,byte_parsing/* itobe2 */.XT)(height), // size 2 h
  (0,byte_parsing/* itobe2 */.XT)(hRes), 2, // reso 4 h
  (0,byte_parsing/* itobe2 */.XT)(vRes), 2 + 4, // reso 4 v + QuickTime reserved, zeroes
  [0, 1, encName.length], // frame count (default 1)
  (0,string_parsing/* strToUtf8 */.tG)(encName), // 1byte len + encoder name str
  31 - encName.length, // + padding
  (0,byte_parsing/* itobe2 */.XT)(colorDepth), // color depth
  [0xFF, 0xFF], // reserved ones
  avcc // avcc atom,
  ));
}
/**
 * @param {Number} width
 * @param {Number} height
 * @param {Number} hRes - horizontal resolution, eg 72
 * @param {Number} vRes - vertical resolution, eg 72
 * @param {string} encDepth
 * @param {Number} colorDepth - eg 24
 * @param {Uint8Array} avcc - Uint8Array representing the avcC atom
 * @param {Uint8Array} sinf - Uint8Array representing the sinf atom
 * @returns {Uint8Array}
 */


function createENCVBox(width, height, hRes, vRes, encName, colorDepth, avcc, sinf) {
  return createBox("encv", (0,byte_parsing/* concat */.zo)(6, // 6 bytes reserved
  (0,byte_parsing/* itobe2 */.XT)(1), 16, // drefIdx + QuickTime reserved, zeroes
  (0,byte_parsing/* itobe2 */.XT)(width), // size 2 w
  (0,byte_parsing/* itobe2 */.XT)(height), // size 2 h
  (0,byte_parsing/* itobe2 */.XT)(hRes), 2, // reso 4 h
  (0,byte_parsing/* itobe2 */.XT)(vRes), 2 + 4, // reso 4 v + QuickTime reserved, zeroes
  [0, 1, encName.length], // frame count (default 1)
  (0,string_parsing/* strToUtf8 */.tG)(encName), // 1byte len + encoder name str
  31 - encName.length, // + padding
  (0,byte_parsing/* itobe2 */.XT)(colorDepth), // color depth
  [0xFF, 0xFF], // reserved ones
  avcc, // avcc atom,
  sinf));
}
/**
 * @param {Number} drefIdx
 * @param {Number} channelsCount
 * @param {Number} sampleSize
 * @param {Number} packetSize
 * @param {Number} sampleRate
 * @param {Uint8Array} esds - Uint8Array representing the esds atom
 * @param {Uint8Array} [sinf] - Uint8Array representing the sinf atom,
 * only if name == "enca"
 * @returns {Uint8Array}
 */


function createMP4ABox(drefIdx, channelsCount, sampleSize, packetSize, sampleRate, esds) {
  return createBox("mp4a", (0,byte_parsing/* concat */.zo)(6, (0,byte_parsing/* itobe2 */.XT)(drefIdx), 8, (0,byte_parsing/* itobe2 */.XT)(channelsCount), (0,byte_parsing/* itobe2 */.XT)(sampleSize), 2, (0,byte_parsing/* itobe2 */.XT)(packetSize), (0,byte_parsing/* itobe2 */.XT)(sampleRate), 2, esds));
}
/**
 * @param {Number} drefIdx
 * @param {Number} channelsCount
 * @param {Number} sampleSize
 * @param {Number} packetSize
 * @param {Number} sampleRate
 * @param {Uint8Array} esds - Uint8Array representing the esds atom
 * @param {Uint8Array} [sinf] - Uint8Array representing the sinf atom,
 * only if name == "enca"
 * @returns {Uint8Array}
 */


function createENCABox(drefIdx, channelsCount, sampleSize, packetSize, sampleRate, esds, sinf) {
  return createBox("enca", (0,byte_parsing/* concat */.zo)(6, (0,byte_parsing/* itobe2 */.XT)(drefIdx), 8, (0,byte_parsing/* itobe2 */.XT)(channelsCount), (0,byte_parsing/* itobe2 */.XT)(sampleSize), 2, (0,byte_parsing/* itobe2 */.XT)(packetSize), (0,byte_parsing/* itobe2 */.XT)(sampleRate), 2, esds, sinf));
}
/**
 * @param {url} Uint8Array
 * @returns {Uint8Array}
 */


function createDREFBox(url) {
  // only one description here... FIXME
  return createBox("dref", (0,byte_parsing/* concat */.zo)(7, [1], url));
}
/**
 * @param {string} majorBrand
 * @param {Array.<string>} brands
 * @returns {Uint8Array}
 */


function createFTYPBox(majorBrand, brands) {
  var content = byte_parsing/* concat.apply */.zo.apply(void 0, [(0,string_parsing/* strToUtf8 */.tG)(majorBrand), [0, 0, 0, 1]].concat(brands.map(string_parsing/* strToUtf8 */.tG)));
  return createBox("ftyp", content);
}
/**
 * @param {string} schemeType - four letters (eg "cenc" for Common Encryption)
 * @param {Number} schemeVersion - eg 65536
 * @returns {Uint8Array}
 */


function createSCHMBox(schemeType, schemeVersion) {
  return createBox("schm", (0,byte_parsing/* concat */.zo)(4, (0,string_parsing/* strToUtf8 */.tG)(schemeType), (0,byte_parsing/* itobe4 */.kh)(schemeVersion)));
}
/**
 * Create tfdt box from a decoding time.
 * @param {number} decodeTime
 * @returns {Uint8Array}
 */


function createTfdtBox(decodeTime) {
  return createBox("tfdt", (0,byte_parsing/* concat */.zo)([1, 0, 0, 0], (0,byte_parsing/* itobe8 */.el)(decodeTime)));
}
/**
 * @returns {Uint8Array}
 */


function createVMHDBox() {
  var arr = new Uint8Array(12);
  arr[3] = 1; // QuickTime...

  return createBox("vmhd", arr);
}
/**
 * @param {Number} trackId
 * @returns {Uint8Array}
 */


function createTREXBox(trackId) {
  // default sample desc idx = 1
  return createBox("trex", (0,byte_parsing/* concat */.zo)(4, (0,byte_parsing/* itobe4 */.kh)(trackId), [0, 0, 0, 1], 12));
}
/**
 * @param {Number} length
 * @returns {Uint8Array}
 */


function createFreeBox(length) {
  return createBox("free", new Uint8Array(length - 8));
}
/**
 * @param {Number} stream
 * @param {string} codecPrivateData - hex string
 * @returns {Uint8Array}
 */


function createESDSBox(stream, codecPrivateData) {
  return createBox("esds", (0,byte_parsing/* concat */.zo)(4, [0x03, 0x19], (0,byte_parsing/* itobe2 */.XT)(stream), [0x00, 0x04, 0x11, 0x40, 0x15], 11, [0x05, 0x02], (0,string_parsing/* hexToBytes */.nr)(codecPrivateData), [0x06, 0x01, 0x02]));
}
/**
 * @param {string} dataFormat - four letters (eg "avc1")
 * @returns {Uint8Array}
 */


function createFRMABox(dataFormat) {
  return createBox("frma", (0,string_parsing/* strToUtf8 */.tG)(dataFormat));
}
/**
 * @param {Uint8Array} sps
 * @param {Uint8Array} pps
 * @param {Number} nalLen - NAL Unit length: 1, 2 or 4 bytes
 * eg: avcc(0x4d, 0x40, 0x0d, 4, 0xe1, "674d400d96560c0efcb80a70505050a0",
 * 1, "68ef3880")
 * @returns {Uint8Array}
 */


function createAVCCBox(sps, pps, nalLen) {
  var nal = nalLen === 2 ? 0x1 : nalLen === 4 ? 0x3 : 0x0; // Deduce AVC Profile from SPS

  var h264Profile = sps[1];
  var h264CompatibleProfile = sps[2];
  var h264Level = sps[3];
  return createBox("avcC", (0,byte_parsing/* concat */.zo)([1, h264Profile, h264CompatibleProfile, h264Level, 0x3F << 2 | nal, 0xE0 | 1], (0,byte_parsing/* itobe2 */.XT)(sps.length), sps, [1], (0,byte_parsing/* itobe2 */.XT)(pps.length), pps));
}
/**
 * @param {string} type - "video"/"audio"/"hint"
 * @returns {Uint8Array}
 */


function createHDLRBox(type) {
  var name;
  var handlerName;

  switch (type) {
    case "video":
      name = "vide";
      handlerName = "VideoHandler";
      break;

    case "audio":
      name = "soun";
      handlerName = "SoundHandler";
      break;

    default:
      name = "hint";
      handlerName = "";
      break;
  }

  return createBox("hdlr", (0,byte_parsing/* concat */.zo)(8, (0,string_parsing/* strToUtf8 */.tG)(name), 12, (0,string_parsing/* strToUtf8 */.tG)(handlerName), 1 // handler name is C-style string (0 terminated)
  ));
}
/**
 * @param {number} timescale
 * @returns {Uint8Array}
 */


function createMDHDBox(timescale) {
  return createBox("mdhd", (0,byte_parsing/* concat */.zo)(12, (0,byte_parsing/* itobe4 */.kh)(timescale), 8));
}
/**
 * @param {Number} timescale
 * @param {Number} trackId
 * @returns {Uint8Array}
 */


function createMVHDBox(timescale, trackId) {
  return createBox("mvhd", (0,byte_parsing/* concat */.zo)(12, (0,byte_parsing/* itobe4 */.kh)(timescale), 4, [0, 1], 2, // we assume rate = 1;
  [1, 0], 10, // we assume volume = 100%;
  [0, 1], 14, // default matrix
  [0, 1], 14, // default matrix
  [64, 0, 0, 0], 26, (0,byte_parsing/* itobe2 */.XT)(trackId + 1) // next trackId (=trackId + 1);
  ));
}
/**
 * @param {string} systemId - Hex string representing the CDM, 16 bytes.
 * @param {Uint8Array|undefined} privateData - Data associated to protection
 * specific system.
 * @param {Array.<Uint8Array>} keyIds - List of key ids contained in the PSSH
 * @returns {Uint8Array}
 */


function createPSSHBox(systemId, privateData, keyIds) {
  if (privateData === void 0) {
    privateData = new Uint8Array(0);
  }

  if (keyIds === void 0) {
    keyIds = new Uint8Array(0);
  }

  var _systemId = systemId.replace(/-/g, "");

  if (_systemId.length !== 32) {
    throw new Error("HSS: wrong system id length");
  }

  var version;
  var kidList;
  var kidCount = keyIds.length;

  if (kidCount > 0) {
    version = 1;
    kidList = byte_parsing/* concat.apply */.zo.apply(void 0, [(0,byte_parsing/* itobe4 */.kh)(kidCount)].concat(keyIds));
  } else {
    version = 0;
    kidList = [];
  }

  return createBox("pssh", (0,byte_parsing/* concat */.zo)([version, 0, 0, 0], (0,string_parsing/* hexToBytes */.nr)(_systemId), kidList, (0,byte_parsing/* itobe4 */.kh)(privateData.length), privateData));
}
/**
 * @param {Uint8Array} mfhd
 * @param {Uint8Array} tfhd
 * @param {Uint8Array} tfdt
 * @param {Uint8Array} trun
 * @returns {Uint8Array}
 */


function createSAIOBox(mfhd, tfhd, tfdt, trun) {
  return createBox("saio", (0,byte_parsing/* concat */.zo)(4, [0, 0, 0, 1], // ??
  (0,byte_parsing/* itobe4 */.kh)(mfhd.length + tfhd.length + tfdt.length + trun.length + 8 + 8 + 8 + 8)));
}
/**
 * @param {Uint8Array} sencContent - including 8 bytes flags and entries count
 * @returns {Uint8Array}
 */


function createSAIZBox(sencContent) {
  if (sencContent.length === 0) {
    return createBox("saiz", new Uint8Array(0));
  }

  var flags = (0,byte_parsing/* be4toi */.pX)(sencContent, 0);
  var entries = (0,byte_parsing/* be4toi */.pX)(sencContent, 4);
  var arr = new Uint8Array(entries + 9);
  arr.set((0,byte_parsing/* itobe4 */.kh)(entries), 5);
  var i = 9;
  var j = 8;
  var pairsCnt;
  var pairsLen;

  while (j < sencContent.length) {
    j += 8; // assuming IV is 8 bytes TODO handle 16 bytes IV
    // if we have extradata for each entry

    if ((flags & 0x2) === 0x2) {
      pairsLen = 2;
      pairsCnt = (0,byte_parsing/* be2toi */.zK)(sencContent, j);
      j += pairsCnt * 6 + 2;
    } else {
      pairsCnt = 0;
      pairsLen = 0;
    }

    arr[i] = pairsCnt * 6 + 8 + pairsLen;
    i++;
  }

  return createBox("saiz", arr);
}
/**
 * @returns {Uint8Array}
 */


function createSMHDBox() {
  return createBox("smhd", new Uint8Array(8));
}
/**
 * @param {Array.<Uint8Array>} representations - arrays of Uint8Array,
 * typically [avc1] or [encv, avc1]
 * @returns {Uint8Array}
 */


function createSTSDBox(reps) {
  // only one description here... FIXME
  var arrBase = [7, [reps.length]];
  return createBox("stsd", byte_parsing/* concat.apply */.zo.apply(void 0, arrBase.concat(reps)));
}
/**
 * @param {Number} width
 * @param {Number} height
 * @param {Number} trackId
 * @returns {Uint8Array}
 */


function createTKHDBox(width, height, trackId) {
  return createBox("tkhd", (0,byte_parsing/* concat */.zo)((0,byte_parsing/* itobe4 */.kh)(1 + 2 + 4), 8, // we assume track is enabled,
  // in media and in preview.
  (0,byte_parsing/* itobe4 */.kh)(trackId), 20, // we assume trackId = 1;
  [1, 0, 0, 0], // we assume volume = 100%;
  [0, 1, 0, 0], 12, // default matrix
  [0, 1, 0, 0], 12, // default matrix
  [64, 0, 0, 0], // ??
  (0,byte_parsing/* itobe2 */.XT)(width), 2, // width (TODO handle fixed)
  (0,byte_parsing/* itobe2 */.XT)(height), 2 // height (TODO handle fixed)
  ));
}
/**
 * @param {Number} algId - eg 1
 * @param {Number} ivSize - eg 8
 * @param {string} keyId - Hex KID 93789920e8d6520098577df8f2dd5546
 * @returns {Uint8Array}
 */


function createTENCBox(algId, ivSize, keyId) {
  return createBox("tenc", (0,byte_parsing/* concat */.zo)(6, [algId, ivSize], keyId));
}


;// CONCATENATED MODULE: ./src/transports/smooth/isobmff/create_traf_box.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function createTrafBox(tfhd, tfdt, trun, mfhd, senc) {
  var trafs = [tfhd, tfdt, trun];

  if (senc !== undefined) {
    trafs.push(createBox("senc", senc), createSAIZBox(senc), createSAIOBox(mfhd, tfhd, tfdt, trun));
  }

  return createBoxWithChildren("traf", trafs);
}
;// CONCATENATED MODULE: ./src/transports/smooth/isobmff/patch_segment.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





/**
 * Update ISOBMFF Segment downloaded in Smooth Streaming so it is playable on
 * the browser.
 * @param {Uint8Array} segment
 * @param {Number} decodeTime
 * @return {Uint8Array}
 */

function patchSegment(segment, decodeTime) {
  var oldMoofOffsets = (0,get_box/* getBoxOffsets */.Qy)(segment, 0x6D6F6F66
  /* moof */
  );

  if (oldMoofOffsets === null) {
    throw new Error("Smooth: Invalid ISOBMFF given");
  }

  var oldMoofContent = segment.subarray(oldMoofOffsets[1], oldMoofOffsets[2]);
  var mfhdBox = (0,get_box/* getBox */.iz)(oldMoofContent, 0x6D666864
  /* mfhd */
  );
  var trafContent = (0,get_box/* getBoxContent */.t_)(oldMoofContent, 0x74726166
  /* traf */
  );

  if (trafContent === null || mfhdBox === null) {
    throw new Error("Smooth: Invalid ISOBMFF given");
  }

  var tfhdOffsets = (0,get_box/* getBoxOffsets */.Qy)(trafContent, 0x74666864
  /* tfhd */
  );
  var oldTrunOffsets = (0,get_box/* getBoxOffsets */.Qy)(trafContent, 0x7472756E
  /* trun */
  );

  if (tfhdOffsets === null || oldTrunOffsets === null) {
    throw new Error("Smooth: Invalid ISOBMFF given");
  }

  var tfhdBox = trafContent.subarray(tfhdOffsets[0], tfhdOffsets[2]);
  var oldTrunBox = trafContent.subarray(oldTrunOffsets[0], oldTrunOffsets[2]); // force trackId=1 since trackIds are not always reliable...

  tfhdBox.set([0, 0, 0, 1], tfhdOffsets[1] - tfhdOffsets[0] + 4
  /* version + flags */
  );
  var tfdtBox = createTfdtBox(decodeTime);
  var newTrunBox = updateTrunDataOffset(oldTrunBox, oldTrunOffsets[1] - oldTrunOffsets[0]);
  var sencContent = (0,get_box/* getUuidContent */.nR)(trafContent, 0xA2394F52, 0x5A9B4F14, 0xA2446C42, 0x7C648DF4);
  var newTrafBox = createTrafBox(tfhdBox, tfdtBox, newTrunBox, mfhdBox, sencContent);
  var newMoof = createBoxWithChildren("moof", [mfhdBox, newTrafBox]);
  var newMoofOffsets = (0,get_box/* getBoxOffsets */.Qy)(newMoof, 0x6D6F6F66
  /* moof */
  );
  var newTrafOffsets = (0,get_box/* getBoxOffsets */.Qy)(newTrafBox, 0x74726166
  /* traf */
  );
  var newTrunOffsets = (0,get_box/* getBoxOffsets */.Qy)(newTrunBox, 0x7472756E
  /* trun */
  );

  if (newMoofOffsets === null || newTrafOffsets === null || newTrunOffsets === null) {
    throw new Error("Smooth: Invalid moof, trun or traf generation");
  }
  /** index of the `data_offset` property from the trun box in the whole "moof". */


  var indexOfTrunDataOffsetInMoof = newMoofOffsets[1] - newMoofOffsets[0] + mfhdBox.length + (
  /* new traf size + name */
  newTrafOffsets[1] - newTrafOffsets[0]) + tfhdBox.length + tfdtBox.length + (
  /* new trun size + name */
  newTrunOffsets[1] - newTrunOffsets[0]) + 8
  /* trun version + flags + `sample_count` */
  ;
  var oldMoofLength = oldMoofOffsets[2] - oldMoofOffsets[0];
  var newMoofSizeDiff = newMoof.length - oldMoofLength;
  var oldMdatOffset = (0,get_box/* getBoxOffsets */.Qy)(segment, 0x6D646174
  /* "mdat" */
  );

  if (oldMdatOffset === null) {
    throw new Error("Smooth: Invalid ISOBMFF given");
  }

  if (canPatchISOBMFFSegment() && (newMoofSizeDiff === 0 || newMoofSizeDiff <= -8)) {
    // patch trun data_offset
    var mdatContentOffset = oldMdatOffset[1];
    newMoof.set((0,byte_parsing/* itobe4 */.kh)(mdatContentOffset), indexOfTrunDataOffsetInMoof);
    segment.set(newMoof, oldMoofOffsets[0]); // add "free" box for the remaining space

    if (newMoofSizeDiff <= -8) {
      segment.set(createFreeBox(-newMoofSizeDiff), newMoof.length);
    }

    return segment;
  } else {
    // patch trun data_offset
    var _mdatContentOffset = oldMdatOffset[1] + newMoofSizeDiff;

    newMoof.set((0,byte_parsing/* itobe4 */.kh)(_mdatContentOffset), indexOfTrunDataOffsetInMoof);
    var newSegment = new Uint8Array(segment.length + newMoofSizeDiff);
    var beforeMoof = segment.subarray(0, oldMoofOffsets[0]);
    var afterMoof = segment.subarray(oldMoofOffsets[2], segment.length);
    newSegment.set(beforeMoof, 0);
    newSegment.set(newMoof, beforeMoof.length);
    newSegment.set(afterMoof, beforeMoof.length + newMoof.length);
    return newSegment;
  }
}
/**
 * Update `trun` box given or create a new one from it to add a data offset
 * flag and the corresponding space to set a data offset.
 * Do not do anything if the flag is already set.
 *
 * Note that the `oldTrunBox` given should not be mutated by this function but
 * the returned value CAN point to the exact same `Uint8Array`.
 *
 * @param {Uint8Array} oldTrunBox - The whole original trun box
 * @param {number} initialDataOffset - Offset at which the first value of the
 * "trun" box (the "version") is set.
 * @returns {Uint8Array}
 */

function updateTrunDataOffset(oldTrunBox, initialDataOffset) {
  var trunHasDataOffset = (oldTrunBox[initialDataOffset + 3
  /* last flag */
  ] & 0x01) > 0;

  if (trunHasDataOffset) {
    return oldTrunBox;
  } // If no data_offset is present, we create another "trun" with one


  var newTrunBox = new Uint8Array(oldTrunBox.length + 4); // copy size + name + version=1 + flags=3 + sample_count=4

  newTrunBox.set(oldTrunBox.subarray(0, initialDataOffset + 8), 0); // add data_offset flag

  newTrunBox[initialDataOffset + 3] = newTrunBox[initialDataOffset + 3] | 0x01;
  newTrunBox.set([0, 0, 0, 0], initialDataOffset + 8); // add data offset
  // add the rest

  newTrunBox.set(oldTrunBox.subarray(initialDataOffset + 8, oldTrunBox.length), initialDataOffset + 12);
  return (0,utils/* updateBoxLength */.J6)(newTrunBox); // update the trun box's length
}
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/Observable.js + 3 modules
var Observable = __webpack_require__(4379);
// EXTERNAL MODULE: ./src/transports/utils/byte_range.ts
var byte_range = __webpack_require__(281);
;// CONCATENATED MODULE: ./src/transports/smooth/isobmff/create_init_segment.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * @param {Uint8Array} mvhd
 * @param {Uint8Array} mvex
 * @param {Uint8Array} trak
 * @param {Object} pssList
 * @returns {Array.<Uint8Array>}
 */

function createMOOVBox(mvhd, mvex, trak, pssList) {
  var children = [mvhd, mvex, trak];
  pssList.forEach(function (pss) {
    var pssh = createPSSHBox(pss.systemId, pss.privateData, pss.keyIds);
    children.push(pssh);
  });
  return createBoxWithChildren("moov", children);
}
/**
 * Create an initialization segment with the information given.
 * @param {Number} timescale
 * @param {string} type
 * @param {Uint8Array} stsd
 * @param {Uint8Array} mhd
 * @param {Number} width
 * @param {Number} height
 * @param {Array.<Object>} pssList - List of dict, example:
 * {systemId: "DEADBEEF", codecPrivateData: "DEAFBEEF}
 * @returns {Uint8Array}
 */


function createInitSegment(timescale, type, stsd, mhd, width, height, pssList) {
  var stbl = createBoxWithChildren("stbl", [stsd, createBox("stts", new Uint8Array(0x08)), createBox("stsc", new Uint8Array(0x08)), createBox("stsz", new Uint8Array(0x0C)), createBox("stco", new Uint8Array(0x08))]);
  var url = createBox("url ", new Uint8Array([0, 0, 0, 1]));
  var dref = createDREFBox(url);
  var dinf = createBoxWithChildren("dinf", [dref]);
  var minf = createBoxWithChildren("minf", [mhd, dinf, stbl]);
  var hdlr = createHDLRBox(type);
  var mdhd = createMDHDBox(timescale); // this one is really important

  var mdia = createBoxWithChildren("mdia", [mdhd, hdlr, minf]);
  var tkhd = createTKHDBox(width, height, 1);
  var trak = createBoxWithChildren("trak", [tkhd, mdia]);
  var trex = createTREXBox(1);
  var mvex = createBoxWithChildren("mvex", [trex]);
  var mvhd = createMVHDBox(timescale, 1); // in fact, we don't give a sh** about
  // this value :O

  var moov = createMOOVBox(mvhd, mvex, trak, pssList);
  var ftyp = createFTYPBox("isom", ["isom", "iso2", "iso6", "avc1", "dash"]);
  return (0,byte_parsing/* concat */.zo)(ftyp, moov);
}
;// CONCATENATED MODULE: ./src/transports/smooth/isobmff/create_video_init_segment.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * Return full video Init segment as Uint8Array
 * @param {Number} timescale - lowest number, this one will be set into mdhd
 * *10000 in mvhd, e.g. 1000
 * @param {Number} width
 * @param {Number} height
 * @param {Number} hRes
 * @param {Number} vRes
 * @param {Number} nalLength (1, 2 or 4)
 * @param {string} codecPrivateData
 * @param {Uint8Array} keyId - hex string representing the key Id,
 * 32 chars. eg. a800dbed49c12c4cb8e0b25643844b9b
 * @param {Array.<Object>} [pssList] - List of dict, example:
 * {systemId: "DEADBEEF", codecPrivateData: "DEAFBEEF}
 * @returns {Uint8Array}
 */

function createVideoInitSegment(timescale, width, height, hRes, vRes, nalLength, codecPrivateData, keyId, pssList) {
  var _pssList = pssList === undefined ? [] : pssList;

  var _codecPrivateData$spl = codecPrivateData.split("00000001"),
      spsHex = _codecPrivateData$spl[1],
      ppsHex = _codecPrivateData$spl[2];

  if (spsHex === undefined || ppsHex === undefined) {
    throw new Error("Smooth: unsupported codec private data.");
  }

  var sps = (0,string_parsing/* hexToBytes */.nr)(spsHex);
  var pps = (0,string_parsing/* hexToBytes */.nr)(ppsHex); // TODO NAL length is forced to 4

  var avcc = createAVCCBox(sps, pps, nalLength);
  var stsd;

  if (_pssList.length === 0 || keyId === undefined) {
    var avc1 = createAVC1Box(width, height, hRes, vRes, "AVC Coding", 24, avcc);
    stsd = createSTSDBox([avc1]);
  } else {
    var tenc = createTENCBox(1, 8, keyId);
    var schi = createBoxWithChildren("schi", [tenc]);
    var schm = createSCHMBox("cenc", 65536);
    var frma = createFRMABox("avc1");
    var sinf = createBoxWithChildren("sinf", [frma, schm, schi]);
    var encv = createENCVBox(width, height, hRes, vRes, "AVC Coding", 24, avcc, sinf);
    stsd = createSTSDBox([encv]);
  }

  return createInitSegment(timescale, "video", stsd, createVMHDBox(), width, height, _pssList);
}
;// CONCATENATED MODULE: ./src/transports/smooth/isobmff/get_aaces_header.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Sampling frequencies defined in MPEG-4 Audio.
 * @type {Array.<Number>}
 */

var SAMPLING_FREQUENCIES = [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350];
/**
 * Return AAC ES Header (hexstr form)
 *
 * @param {Number} type
 *          1 = AAC Main
 *          2 = AAC LC
 *          cf http://wiki.multimedia.cx/index.php?title=MPEG-4_Audio
 * @param {Number} frequency
 * @param {Number} chans (1 or 2)
 * @returns {string}
 */

function getAacesHeader(type, frequency, chans) {
  var freq = SAMPLING_FREQUENCIES.indexOf(frequency); // TODO : handle Idx = 15...

  var val;
  val = (type & 0x3F) << 0x4;
  val = (val | freq & 0x1F) << 0x4;
  val = (val | chans & 0x1F) << 0x3;
  return (0,string_parsing/* bytesToHex */.ci)((0,byte_parsing/* itobe2 */.XT)(val));
}
;// CONCATENATED MODULE: ./src/transports/smooth/isobmff/create_audio_init_segment.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * Return full audio initialization segment as Uint8Array.
 * @param {Number} timescale
 * @param {Number} channelsCount
 * @param {Number} sampleSize
 * @param {Number} packetSize
 * @param {Number} sampleRate
 * @param {string} codecPrivateData
 * @param {Uint8Array} keyId - hex string representing the key Id, 32 chars.
 * eg. a800dbed49c12c4cb8e0b25643844b9b
 * @param {Array.<Object>} [pssList]
 * @returns {Uint8Array}
 */

function createAudioInitSegment(timescale, channelsCount, sampleSize, packetSize, sampleRate, codecPrivateData, keyId, pssList) {
  if (pssList === void 0) {
    pssList = [];
  }

  var _codecPrivateData = codecPrivateData.length === 0 ? getAacesHeader(2, sampleRate, channelsCount) : codecPrivateData;

  var esds = createESDSBox(1, _codecPrivateData);

  var stsd = function () {
    if (pssList.length === 0 || keyId === undefined) {
      var mp4a = createMP4ABox(1, channelsCount, sampleSize, packetSize, sampleRate, esds);
      return createSTSDBox([mp4a]);
    }

    var tenc = createTENCBox(1, 8, keyId);
    var schi = createBoxWithChildren("schi", [tenc]);
    var schm = createSCHMBox("cenc", 65536);
    var frma = createFRMABox("mp4a");
    var sinf = createBoxWithChildren("sinf", [frma, schm, schi]);
    var enca = createENCABox(1, channelsCount, sampleSize, packetSize, sampleRate, esds, sinf);
    return createSTSDBox([enca]);
  }();

  return createInitSegment(timescale, "audio", stsd, createSMHDBox(), 0, 0, pssList);
}
;// CONCATENATED MODULE: ./src/transports/smooth/segment_loader.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





/**
 * Segment loader triggered if there was no custom-defined one in the API.
 * @param {Object} opt
 * @returns {Observable}
 */

function regularSegmentLoader(_ref) {
  var url = _ref.url,
      segment = _ref.segment;
  var headers;
  var range = segment.range;

  if (Array.isArray(range)) {
    headers = {
      Range: (0,byte_range/* default */.Z)(range)
    };
  }

  return (0,request/* default */.ZP)({
    url: url,
    responseType: "arraybuffer",
    headers: headers,
    sendProgressEvents: true
  });
}
/**
 * Defines the url for the request, load the right loader (custom/default
 * one).
 */


var generateSegmentLoader = function generateSegmentLoader(customSegmentLoader) {
  return function (_ref2) {
    var segment = _ref2.segment,
        representation = _ref2.representation,
        adaptation = _ref2.adaptation,
        period = _ref2.period,
        manifest = _ref2.manifest,
        url = _ref2.url;

    if (segment.isInit) {
      if (segment.privateInfos === undefined || segment.privateInfos.smoothInitSegment === undefined) {
        throw new Error("Smooth: Invalid segment format");
      }

      var smoothInitPrivateInfos = segment.privateInfos.smoothInitSegment;
      var responseData;
      var codecPrivateData = smoothInitPrivateInfos.codecPrivateData,
          timescale = smoothInitPrivateInfos.timescale,
          _smoothInitPrivateInf = smoothInitPrivateInfos.protection,
          protection = _smoothInitPrivateInf === void 0 ? {
        keyId: undefined,
        keySystems: undefined
      } : _smoothInitPrivateInf;

      if (codecPrivateData === undefined) {
        throw new Error("Smooth: no codec private data.");
      }

      switch (adaptation.type) {
        case "video":
          {
            var _representation$width = representation.width,
                width = _representation$width === void 0 ? 0 : _representation$width,
                _representation$heigh = representation.height,
                height = _representation$heigh === void 0 ? 0 : _representation$heigh;
            responseData = createVideoInitSegment(timescale, width, height, 72, 72, 4, // vRes, hRes, nal
            codecPrivateData, protection.keyId, protection.keySystems);
            break;
          }

        case "audio":
          {
            var _smoothInitPrivateInf2 = smoothInitPrivateInfos.channels,
                channels = _smoothInitPrivateInf2 === void 0 ? 0 : _smoothInitPrivateInf2,
                _smoothInitPrivateInf3 = smoothInitPrivateInfos.bitsPerSample,
                bitsPerSample = _smoothInitPrivateInf3 === void 0 ? 0 : _smoothInitPrivateInf3,
                _smoothInitPrivateInf4 = smoothInitPrivateInfos.packetSize,
                packetSize = _smoothInitPrivateInf4 === void 0 ? 0 : _smoothInitPrivateInf4,
                _smoothInitPrivateInf5 = smoothInitPrivateInfos.samplingRate,
                samplingRate = _smoothInitPrivateInf5 === void 0 ? 0 : _smoothInitPrivateInf5;
            responseData = createAudioInitSegment(timescale, channels, bitsPerSample, packetSize, samplingRate, codecPrivateData, protection.keyId, protection.keySystems);
            break;
          }

        default:
          if (false) {}

          responseData = new Uint8Array(0);
      }

      return (0,of.of)({
        type: "data-created",
        value: {
          responseData: responseData
        }
      });
    } else if (url === null) {
      return (0,of.of)({
        type: "data-created",
        value: {
          responseData: null
        }
      });
    } else {
      var args = {
        adaptation: adaptation,
        manifest: manifest,
        period: period,
        representation: representation,
        segment: segment,
        transport: "smooth",
        url: url
      };

      if (typeof customSegmentLoader !== "function") {
        return regularSegmentLoader(args);
      }

      return new Observable/* Observable */.y(function (obs) {
        var hasFinished = false;
        var hasFallbacked = false;
        /**
         * Callback triggered when the custom segment loader has a response.
         * @param {Object} args
         */

        var resolve = function resolve(_args) {
          if (!hasFallbacked) {
            hasFinished = true;
            obs.next({
              type: "data-loaded",
              value: {
                responseData: _args.data,
                size: _args.size,
                duration: _args.duration
              }
            });
            obs.complete();
          }
        };
        /**
         * Callback triggered when the custom segment loader fails
         * @param {*} err - The corresponding error encountered
         */


        var reject = function reject(err) {
          if (err === void 0) {
            err = {};
          }

          if (!hasFallbacked) {
            hasFinished = true;
            obs.error(err);
          }
        };

        var progress = function progress(_args) {
          if (!hasFallbacked) {
            obs.next({
              type: "progress",
              value: {
                duration: _args.duration,
                size: _args.size,
                totalSize: _args.totalSize
              }
            });
          }
        };

        var fallback = function fallback() {
          hasFallbacked = true; // HACK What is TypeScript/RxJS doing here??????

          /* eslint-disable import/no-deprecated */

          /* eslint-disable @typescript-eslint/ban-ts-comment */
          // @ts-ignore

          regularSegmentLoader(args).subscribe(obs);
          /* eslint-enable import/no-deprecated */

          /* eslint-enable @typescript-eslint/ban-ts-comment */
        };

        var callbacks = {
          reject: reject,
          resolve: resolve,
          fallback: fallback,
          progress: progress
        };
        var abort = customSegmentLoader(args, callbacks);
        return function () {
          if (!hasFinished && !hasFallbacked && typeof abort === "function") {
            abort();
          }
        };
      });
    }
  };
};

/* harmony default export */ const segment_loader = (generateSegmentLoader);
;// CONCATENATED MODULE: ./src/transports/smooth/utils.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var ISM_REG = /(\.isml?)(\?token=\S+)?$/;
var TOKEN_REG = /\?token=(\S+)/;
/**
 * TODO Remove this logic completely from the player
 * @param {Document} doc
 * @returns {string|null}
 */

function extractISML(doc) {
  return doc.getElementsByTagName("media")[0].getAttribute("src");
}
/**
 * Returns string corresponding to the token contained in the url's querystring.
 * Empty string if no token is found.
 * @param {string} url
 * @returns {string}
 */


function extractToken(url) {
  var tokenMatch = TOKEN_REG.exec(url);

  if (tokenMatch !== null) {
    var match = tokenMatch[1];

    if (match !== undefined) {
      return match;
    }
  }

  return "";
}
/**
 * Replace/Remove token from the url's querystring
 * @param {string} url
 * @param {string} [token]
 * @returns {string}
 */


function replaceToken(url, token) {
  if ((0,is_non_empty_string/* default */.Z)(token)) {
    return url.replace(TOKEN_REG, "?token=" + token);
  } else {
    return url.replace(TOKEN_REG, "");
  }
}
/**
 * @param {string} url
 * @returns {string}
 */


function resolveManifest(url) {
  if (ISM_REG.test(url)) {
    (0,warn_once/* default */.Z)("Giving a isml URL to loadVideo is deprecated." + " Please give the Manifest URL directly");
    return url.replace(ISM_REG, "$1/manifest$2");
  }

  return url;
}


;// CONCATENATED MODULE: ./src/transports/smooth/pipelines.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

















var WSX_REG = /\.wsx?(\?token=\S+)?/;
/**
 * @param {Object} adaptation
 * @param {Object} dlSegment
 * @param {Object} nextSegments
 */

function addNextSegments(adaptation, nextSegments, dlSegment) {
  var _a;

  log/* default.debug */.Z.debug("Smooth Parser: update segments information.");
  var representations = adaptation.representations;

  for (var i = 0; i < representations.length; i++) {
    var representation = representations[i];

    if (representation.index instanceof SmoothRepresentationIndex && ((_a = dlSegment === null || dlSegment === void 0 ? void 0 : dlSegment.privateInfos) === null || _a === void 0 ? void 0 : _a.smoothMediaSegment) !== undefined) {
      representation.index._addSegments(nextSegments, dlSegment.privateInfos.smoothMediaSegment);
    } else {
      log/* default.warn */.Z.warn("Smooth Parser: should only encounter SmoothRepresentationIndex");
    }
  }
}

/* harmony default export */ function pipelines(options) {
  var smoothManifestParser = smooth(options);
  var segmentLoader = segment_loader(options.segmentLoader);
  var manifestLoaderOptions = {
    customManifestLoader: options.manifestLoader
  };
  var manifestLoader = (0,text_manifest_loader/* default */.Z)(manifestLoaderOptions);
  var manifestPipeline = {
    resolver: function resolver(_ref) {
      var url = _ref.url;

      if (url === undefined) {
        return (0,of.of)({
          url: undefined
        });
      } // TODO Remove WSX logic


      var resolving;

      if (WSX_REG.test(url)) {
        (0,warn_once/* default */.Z)("Giving WSX URL to loadVideo is deprecated." + " You should only give Manifest URLs.");
        resolving = (0,request/* default */.ZP)({
          url: replaceToken(url, ""),
          responseType: "document"
        }).pipe((0,map/* map */.U)(function (_ref2) {
          var value = _ref2.value;
          var extractedURL = extractISML(value.responseData);

          if (extractedURL === null || extractedURL.length === 0) {
            throw new Error("Invalid ISML");
          }

          return extractedURL;
        }));
      } else {
        resolving = (0,of.of)(url);
      }

      var token = extractToken(url);
      return resolving.pipe((0,map/* map */.U)(function (_url) {
        return {
          url: replaceToken(resolveManifest(_url), token)
        };
      }));
    },
    loader: manifestLoader,
    parser: function parser(_ref3) {
      var response = _ref3.response,
          reqURL = _ref3.url;
      var url = response.url === undefined ? reqURL : response.url;
      var data = typeof response.responseData === "string" ? new DOMParser().parseFromString(response.responseData, "text/xml") : response.responseData; // TODO find a way to check if Document?

      var manifestReceivedTime = response.receivedTime;
      var parserResult = smoothManifestParser(data, url, manifestReceivedTime);
      var manifest = new src_manifest/* default */.ZP(parserResult, {
        representationFilter: options.representationFilter,
        supplementaryImageTracks: options.supplementaryImageTracks,
        supplementaryTextTracks: options.supplementaryTextTracks
      });
      return (0,return_parsed_manifest/* default */.Z)(manifest, url);
    }
  };
  var segmentPipeline = {
    loader: function loader(content) {
      if (content.segment.isInit || options.checkMediaSegmentIntegrity !== true) {
        return segmentLoader(content);
      }

      return segmentLoader(content).pipe((0,tap/* tap */.b)(function (res) {
        if ((res.type === "data-loaded" || res.type === "data-chunk") && res.value.responseData !== null) {
          (0,check_isobmff_integrity/* default */.Z)(new Uint8Array(res.value.responseData), content.segment.isInit);
        }
      }));
    },
    parser: function parser(_ref4) {
      var content = _ref4.content,
          response = _ref4.response,
          initTimescale = _ref4.initTimescale;

      var _a, _b;

      var segment = content.segment,
          representation = content.representation,
          adaptation = content.adaptation,
          manifest = content.manifest;
      var data = response.data,
          isChunked = response.isChunked;

      if (data === null) {
        if (segment.isInit) {
          var segmentProtections = representation.getProtectionsInitializationData();
          return (0,of.of)({
            type: "parsed-init-segment",
            value: {
              initializationData: null,
              segmentProtections: segmentProtections,
              initTimescale: undefined
            }
          });
        }

        return (0,of.of)({
          type: "parsed-segment",
          value: {
            chunkData: null,
            chunkInfos: null,
            chunkOffset: 0,
            appendWindow: [undefined, undefined]
          }
        });
      }

      var responseBuffer = data instanceof Uint8Array ? data : new Uint8Array(data);

      if (segment.isInit) {
        var psshInfo = (0,take_pssh_out/* default */.Z)(responseBuffer);

        if (psshInfo.length > 0) {
          for (var i = 0; i < psshInfo.length; i++) {
            var _psshInfo$i = psshInfo[i],
                systemID = _psshInfo$i.systemID,
                psshData = _psshInfo$i.data;

            representation._addProtectionData("cenc", systemID, psshData);
          }
        }

        var _segmentProtections = representation.getProtectionsInitializationData();

        var timescale = (_b = (_a = segment.privateInfos) === null || _a === void 0 ? void 0 : _a.smoothInitSegment) === null || _b === void 0 ? void 0 : _b.timescale;
        return (0,of.of)({
          type: "parsed-init-segment",
          value: {
            initializationData: data,
            // smooth init segments are crafted by hand.
            // Their timescale is the one from the manifest.
            initTimescale: timescale,
            segmentProtections: _segmentProtections
          }
        });
      }

      var timingInfos = initTimescale !== undefined ? extractTimingsInfos(responseBuffer, isChunked, initTimescale, segment, manifest.isLive) : null;

      if (timingInfos === null || timingInfos.chunkInfos === null || timingInfos.scaledSegmentTime === undefined) {
        throw new Error("Smooth Segment without time information");
      }

      var nextSegments = timingInfos.nextSegments,
          chunkInfos = timingInfos.chunkInfos,
          scaledSegmentTime = timingInfos.scaledSegmentTime;
      var chunkData = patchSegment(responseBuffer, scaledSegmentTime);

      if (nextSegments.length > 0) {
        addNextSegments(adaptation, nextSegments, segment);
      }

      return (0,of.of)({
        type: "parsed-segment",
        value: {
          chunkData: chunkData,
          chunkInfos: chunkInfos,
          chunkOffset: 0,
          appendWindow: [undefined, undefined]
        }
      });
    }
  };
  var textTrackPipeline = {
    loader: function loader(_ref5) {
      var segment = _ref5.segment,
          representation = _ref5.representation,
          url = _ref5.url;

      if (segment.isInit || url === null) {
        return (0,of.of)({
          type: "data-created",
          value: {
            responseData: null
          }
        });
      }

      var isMP4 = isMP4EmbeddedTrack(representation);

      if (!isMP4 || options.checkMediaSegmentIntegrity !== true) {
        return (0,request/* default */.ZP)({
          url: url,
          responseType: isMP4 ? "arraybuffer" : "text",
          sendProgressEvents: true
        });
      }

      return (0,request/* default */.ZP)({
        url: url,
        responseType: "arraybuffer",
        sendProgressEvents: true
      }).pipe((0,tap/* tap */.b)(function (res) {
        if (res.type === "data-loaded") {
          (0,check_isobmff_integrity/* default */.Z)(new Uint8Array(res.value.responseData), segment.isInit);
        }
      }));
    },
    parser: function parser(_ref6) {
      var content = _ref6.content,
          response = _ref6.response,
          initTimescale = _ref6.initTimescale;

      var _a;

      var manifest = content.manifest,
          adaptation = content.adaptation,
          representation = content.representation,
          segment = content.segment;
      var language = adaptation.language;
      var isMP4 = isMP4EmbeddedTrack(representation);
      var _representation$mimeT = representation.mimeType,
          mimeType = _representation$mimeT === void 0 ? "" : _representation$mimeT,
          _representation$codec = representation.codec,
          codec = _representation$codec === void 0 ? "" : _representation$codec;
      var data = response.data,
          isChunked = response.isChunked;

      if (segment.isInit) {
        // text init segment has no use in HSS
        return (0,of.of)({
          type: "parsed-init-segment",
          value: {
            initializationData: null,
            segmentProtections: [],
            initTimescale: undefined
          }
        });
      }

      if (data === null) {
        return (0,of.of)({
          type: "parsed-segment",
          value: {
            chunkData: null,
            chunkInfos: null,
            chunkOffset: 0,
            appendWindow: [undefined, undefined]
          }
        });
      }

      var nextSegments;
      var chunkInfos = null;
      var segmentStart;
      var segmentEnd;

      var _sdData;

      var _sdType;

      if (isMP4) {
        var chunkBytes;

        if (typeof data === "string") {
          chunkBytes = (0,string_parsing/* strToUtf8 */.tG)(data);
        } else {
          chunkBytes = data instanceof Uint8Array ? data : new Uint8Array(data);
        }

        var timingInfos = initTimescale !== undefined ? extractTimingsInfos(chunkBytes, isChunked, initTimescale, segment, manifest.isLive) : null;
        nextSegments = timingInfos === null || timingInfos === void 0 ? void 0 : timingInfos.nextSegments;
        chunkInfos = (_a = timingInfos === null || timingInfos === void 0 ? void 0 : timingInfos.chunkInfos) !== null && _a !== void 0 ? _a : null;

        if (chunkInfos === null) {
          if (isChunked) {
            log/* default.warn */.Z.warn("Smooth: Unavailable time data for current text track.");
          } else {
            segmentStart = segment.time;
            segmentEnd = segment.end;
          }
        } else {
          segmentStart = chunkInfos.time;
          segmentEnd = chunkInfos.duration !== undefined ? chunkInfos.time + chunkInfos.duration : segment.end;
        }

        var lcCodec = codec.toLowerCase();

        if (mimeType === "application/ttml+xml+mp4" || lcCodec === "stpp" || lcCodec === "stpp.ttml.im1t") {
          _sdType = "ttml";
        } else if (lcCodec === "wvtt") {
          _sdType = "vtt";
        } else {
          throw new Error("could not find a text-track parser for the type " + mimeType);
        }

        var mdat = (0,read/* getMDAT */.Le)(chunkBytes);
        _sdData = mdat === null ? "" : (0,string_parsing/* utf8ToStr */.uR)(mdat);
      } else {
        // not MP4
        segmentStart = segment.time;
        segmentEnd = segment.end;
        var chunkString;

        if (typeof data !== "string") {
          var bytesData = data instanceof Uint8Array ? data : new Uint8Array(data);
          chunkString = (0,string_parsing/* utf8ToStr */.uR)(bytesData);
        } else {
          chunkString = data;
        }

        switch (mimeType) {
          case "application/x-sami":
          case "application/smil":
            // TODO SMIL should be its own format, no?
            _sdType = "sami";
            break;

          case "application/ttml+xml":
            _sdType = "ttml";
            break;

          case "text/vtt":
            _sdType = "vtt";
            break;
        }

        if (_sdType === undefined) {
          var _lcCodec = codec.toLowerCase();

          if (_lcCodec === "srt") {
            _sdType = "srt";
          } else {
            throw new Error("could not find a text-track parser for the type " + mimeType);
          }
        }

        _sdData = chunkString;
      }

      if (chunkInfos !== null && Array.isArray(nextSegments) && nextSegments.length > 0) {
        addNextSegments(adaptation, nextSegments, segment);
      }

      var chunkOffset = segmentStart !== null && segmentStart !== void 0 ? segmentStart : 0;
      return (0,of.of)({
        type: "parsed-segment",
        value: {
          chunkData: {
            type: _sdType,
            data: _sdData,
            start: segmentStart,
            end: segmentEnd,
            language: language
          },
          chunkInfos: chunkInfos,
          chunkOffset: chunkOffset,
          appendWindow: [undefined, undefined]
        }
      });
    }
  };
  var imageTrackPipeline = {
    loader: function loader(_ref7) {
      var segment = _ref7.segment,
          url = _ref7.url;

      if (segment.isInit || url === null) {
        // image do not need an init segment. Passthrough directly to the parser
        return (0,of.of)({
          type: "data-created",
          value: {
            responseData: null
          }
        });
      }

      return (0,request/* default */.ZP)({
        url: url,
        responseType: "arraybuffer",
        sendProgressEvents: true
      });
    },
    parser: function parser(_ref8) {
      var response = _ref8.response,
          content = _ref8.content;
      var data = response.data,
          isChunked = response.isChunked;

      if (content.segment.isInit) {
        // image init segment has no use
        return (0,of.of)({
          type: "parsed-init-segment",
          value: {
            initializationData: null,
            segmentProtections: [],
            initTimescale: undefined
          }
        });
      }

      if (isChunked) {
        throw new Error("Image data should not be downloaded in chunks");
      } // TODO image Parsing should be more on the buffer side, no?


      if (data === null || features/* default.imageParser */.Z.imageParser === null) {
        return (0,of.of)({
          type: "parsed-segment",
          value: {
            chunkData: null,
            chunkInfos: null,
            chunkOffset: 0,
            appendWindow: [undefined, undefined]
          }
        });
      }

      var bifObject = features/* default.imageParser */.Z.imageParser(new Uint8Array(data));
      var thumbsData = bifObject.thumbs;
      return (0,of.of)({
        type: "parsed-segment",
        value: {
          chunkData: {
            data: thumbsData,
            start: 0,
            end: Number.MAX_VALUE,
            timescale: 1,
            type: "bif"
          },
          chunkInfos: {
            time: 0,
            duration: Number.MAX_VALUE,
            timescale: bifObject.timescale
          },
          chunkOffset: 0,
          segmentProtections: [],
          appendWindow: [undefined, undefined]
        }
      });
    }
  };
  return {
    manifest: manifestPipeline,
    audio: segmentPipeline,
    video: segmentPipeline,
    text: textTrackPipeline,
    image: imageTrackPipeline
  };
}
/**
 * Returns true if the given texttrack segment represents a textrack embedded
 * in a mp4 file.
 * @param {Representation} representation
 * @returns {Boolean}
 */

function isMP4EmbeddedTrack(representation) {
  return typeof representation.mimeType === "string" && representation.mimeType.indexOf("mp4") >= 0;
}
;// CONCATENATED MODULE: ./src/transports/smooth/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * /!\ This file is feature-switchable.
 * It always should be imported through the `features` object.
 */

/* harmony default export */ const transports_smooth = (pipelines);

/***/ }),

/***/ 281:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ byteRange
/* harmony export */ });
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns text-formatted byteRange (`bytes=$start-$end?)`
 * @param {Array.<string|Number>} arr
 * @returns {string}
 */
function byteRange(_ref) {
  var start = _ref[0],
      end = _ref[1];
  return end === Infinity ? "bytes=" + start + "-" : "bytes=" + start + "-" + end;
}

/***/ }),

/***/ 4460:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ checkISOBMFFIntegrity
/* harmony export */ });
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5389);
/* harmony import */ var _find_complete_box__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8766);
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Check if an ISOBMFF segment has all the right box needed to be decoded.
 * Throw if that's not the case.
 * @param {Uint8Array} buffer - The whole ISOBMFF segment
 * @param {boolean} isInitSegment - `true` if this is an initialization segment,
 * `false` otherwise.
 */

function checkISOBMFFIntegrity(buffer, isInitSegment) {
  if (isInitSegment) {
    var ftypIndex = (0,_find_complete_box__WEBPACK_IMPORTED_MODULE_0__/* .default */ .Z)(buffer, 0x66747970
    /* ftyp */
    );

    if (ftypIndex < 0) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_1__/* .default */ .Z("INTEGRITY_ERROR", "Incomplete `ftyp` box");
    }

    var moovIndex = (0,_find_complete_box__WEBPACK_IMPORTED_MODULE_0__/* .default */ .Z)(buffer, 0x6D6F6F76
    /* moov */
    );

    if (moovIndex < 0) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_1__/* .default */ .Z("INTEGRITY_ERROR", "Incomplete `moov` box");
    }
  } else {
    var moofIndex = (0,_find_complete_box__WEBPACK_IMPORTED_MODULE_0__/* .default */ .Z)(buffer, 0x6D6F6F66
    /* moof */
    );

    if (moofIndex < 0) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_1__/* .default */ .Z("INTEGRITY_ERROR", "Incomplete `moof` box");
    }

    var mdatIndex = (0,_find_complete_box__WEBPACK_IMPORTED_MODULE_0__/* .default */ .Z)(buffer, 0x6D646174
    /* mdat */
    );

    if (mdatIndex < 0) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_1__/* .default */ .Z("INTEGRITY_ERROR", "Incomplete `mdat` box");
    }
  }
}

/***/ }),

/***/ 8766:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ findCompleteBox
/* harmony export */ });
/* harmony import */ var _utils_byte_parsing__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6968);
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Find the offset for the first declaration of the given box in an isobmff.
 * Returns -1 if not found or if incomplete.
 *
 * This function does not throw or log in case of partial segments.
 * @param {Uint8Array} buf - the isobmff
 * @param {Number} wantedName
 * @returns {Number} - Offset where the box begins. -1 if not found.
 */

function findCompleteBox(buf, wantedName) {
  var len = buf.length;
  var i = 0;

  while (i + 8 <= len) {
    var size = (0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_0__/* .be4toi */ .pX)(buf, i);

    if (size === 0) {
      size = len - i;
    } else if (size === 1) {
      if (i + 16 > len) {
        return -1;
      }

      size = (0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_0__/* .be8toi */ .pV)(buf, i + 8);
    }

    if (isNaN(size) || size <= 0) {
      // should not happen
      return -1;
    }

    var name = (0,_utils_byte_parsing__WEBPACK_IMPORTED_MODULE_0__/* .be4toi */ .pX)(buf, i + 4);

    if (name === wantedName) {
      if (i + size <= len) {
        return i;
      }

      return -1;
    }

    i += size;
  }

  return -1;
}

/***/ }),

/***/ 7445:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ returnParsedManifest
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8170);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9795);
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * As a Manifest instance is obtained, emit the right `warning` events
 * (according to the Manifest's `parsingErrors` property`) followed by the right
 * `parsed` event, as expected from a Manifest parser.
 * @param {Manifest} manifest
 * @param {string|undefined} url
 * @returns {Observable}
 */

function returnParsedManifest(manifest, url) {
  var warningEvts$ = rxjs__WEBPACK_IMPORTED_MODULE_0__.of.apply(void 0, manifest.parsingErrors.map(function (error) {
    return {
      type: "warning",
      value: error
    };
  }));
  return (0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .concat */ .z)(warningEvts$, (0,rxjs__WEBPACK_IMPORTED_MODULE_0__.of)({
    type: "parsed",
    value: {
      manifest: manifest,
      url: url
    }
  }));
}

/***/ }),

/***/ 7278:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Z": () => /* binding */ generateManifestLoader
});

// EXTERNAL MODULE: ./src/utils/is_null_or_undefined.ts
var is_null_or_undefined = __webpack_require__(1946);
// EXTERNAL MODULE: ./src/utils/request/index.ts + 1 modules
var request = __webpack_require__(4597);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/Observable.js + 3 modules
var Observable = __webpack_require__(4379);
;// CONCATENATED MODULE: ./src/transports/utils/call_custom_manifest_loader.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function callCustomManifestLoader(customManifestLoader, fallbackManifestLoader) {
  return function (args) {
    return new Observable/* Observable */.y(function (obs) {
      var url = args.url;
      var timeAPIsDelta = Date.now() - performance.now();
      var hasFinished = false;
      var hasFallbacked = false;
      /**
       * Callback triggered when the custom manifest loader has a response.
       * @param {Object} args
       */

      var resolve = function resolve(_args) {
        if (!hasFallbacked) {
          hasFinished = true;
          var receivedTime = _args.receivingTime !== undefined ? _args.receivingTime - timeAPIsDelta : undefined;
          var sendingTime = _args.sendingTime !== undefined ? _args.sendingTime - timeAPIsDelta : undefined;
          obs.next({
            type: "data-loaded",
            value: {
              responseData: _args.data,
              size: _args.size,
              duration: _args.duration,
              url: _args.url,
              receivedTime: receivedTime,
              sendingTime: sendingTime
            }
          });
          obs.complete();
        }
      };
      /**
       * Callback triggered when the custom manifest loader fails
       * @param {*} err - The corresponding error encountered
       */


      var reject = function reject(err) {
        if (!hasFallbacked) {
          hasFinished = true;
          obs.error(err);
        }
      };
      /**
       * Callback triggered when the custom manifest loader wants to fallback to
       * the "regular" implementation
       */


      var fallback = function fallback() {
        hasFallbacked = true;
        fallbackManifestLoader(args).subscribe(obs);
      };

      var callbacks = {
        reject: reject,
        resolve: resolve,
        fallback: fallback
      };
      var abort = customManifestLoader(url, callbacks);
      return function () {
        if (!hasFinished && !hasFallbacked && typeof abort === "function") {
          abort();
        }
      };
    });
  };
}
;// CONCATENATED MODULE: ./src/transports/utils/text_manifest_loader.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Manifest loader triggered if there was no custom-defined one in the API.
 * @param {string} url
 * @returns {Observable}
 */

function regularManifestLoader(_ref) {
  var url = _ref.url;

  if (url === undefined) {
    throw new Error("Cannot perform HTTP(s) request. URL not known");
  }

  return (0,request/* default */.ZP)({
    url: url,
    responseType: "text"
  });
}
/**
 * Generate a manifest loader for the application
 * @param {Function} [customManifestLoader]
 * @returns {Function}
 */


function generateManifestLoader(_ref2) {
  var customManifestLoader = _ref2.customManifestLoader;

  if ((0,is_null_or_undefined/* default */.Z)(customManifestLoader)) {
    return regularManifestLoader;
  }

  return callCustomManifestLoader(customManifestLoader, regularManifestLoader);
}

/***/ }),

/***/ 4791:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ areArraysOfNumbersEqual
/* harmony export */ });
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Check if two two arrays containing only numbers are equal.
 * @param {Array.<number>|TypedArray} arr1
 * @param {Array.<number>|TypedArray} arr2
 * @returns {Boolean}
 */
function areArraysOfNumbersEqual(arr1, arr2) {
  if (arr1.length !== arr2.length) {
    return false;
  }

  for (var i = arr1.length - 1; i >= 0; i--) {
    if (arr1[i] !== arr2[i]) {
      return false;
    }
  }

  return true;
}

/***/ }),

/***/ 3274:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ arrayFind
/* harmony export */ });
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint-disable @typescript-eslint/no-unsafe-member-access */

/* eslint-disable @typescript-eslint/explicit-module-boundary-types */

/* eslint-disable @typescript-eslint/no-unsafe-call */

/* eslint-disable @typescript-eslint/no-unsafe-return */

/* eslint-disable no-restricted-properties */

/**
 * Array.prototype.find ponyfill.
 * @param {Array} arr
 * @param {Function} predicate
 * @param {*} context
 * @returns {boolean}
 */
function arrayFind(arr, predicate, thisArg) {
  if (typeof Array.prototype.find === "function") {
    return arr.find(predicate, thisArg);
  }

  var len = arr.length >>> 0;

  for (var i = 0; i < len; i++) {
    var val = arr[i];

    if (predicate.call(thisArg, val, i, arr)) {
      return val;
    }
  }

  return undefined;
}

/***/ }),

/***/ 5138:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ arrayFindIndex
/* harmony export */ });
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint-disable @typescript-eslint/no-unsafe-member-access */

/* eslint-disable @typescript-eslint/explicit-module-boundary-types */

/* eslint-disable @typescript-eslint/no-unsafe-call */

/* eslint-disable @typescript-eslint/no-unsafe-return */

/* eslint-disable no-restricted-properties */

/**
 * Array.prototype.find ponyfill.
 * @param {Array} arr
 * @param {Function} predicate
 * @param {*} context
 * @returns {boolean}
 */
function arrayFindIndex(arr, predicate, thisArg) {
  if (typeof Array.prototype.findIndex === "function") {
    return arr.findIndex(predicate, thisArg);
  }

  var len = arr.length >>> 0;

  for (var i = 0; i < len; i++) {
    if (predicate.call(thisArg, arr[i], i, arr)) {
      return i;
    }
  }

  return -1;
}

/***/ }),

/***/ 7714:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ arrayIncludes
/* harmony export */ });
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Array.prototype.includes ponyfill.
 * Returns ``true`` if the given array ``arr`` contains the element
 * ``searchElement``. false ``otherwise``.
 *
 * Inspired from MDN polyfill, but ponyfilled instead
 *
 * @example
 * ```js
 * arrayIncludes([1, 2, 3], 3);
 * // => true
 *
 * arrayIncludes([1, 2, 3], 7);
 * // => false
 *
 * const obj = { a: 4 };
 * arrayIncludes([obj, { b: 7 }, { a: 3 }], obj);
 * // => true
 *
 * // does not perform deep equality
 * arrayIncludes([{ a: 4 }, { b: 7 }, { a: 3 }], { a: 4 });
 * // => false
 *
 * // the third argument state the starting index. 0 if not set.
 *
 * arrayIncludes([1, 2, 3], 2, 1);
 * // => true
 *
 * arrayIncludes([1, 2, 3], 2, 2);
 * // => false
 * ```
 *
 * @param {Array} arr
 * @param {*} searchElement
 * @param {number} [fromIndex]
 * @returns {boolean}
 */
function arrayIncludes(arr, searchElement, fromIndex) {
  /* eslint-disable @typescript-eslint/unbound-method */
  // eslint-disable-next-line no-restricted-properties
  if (typeof Array.prototype.includes === "function") {
    /* eslint-enable @typescript-eslint/unbound-method */
    // eslint-disable-next-line no-restricted-properties
    return arr.includes(searchElement, fromIndex);
  }

  var len = arr.length >>> 0;

  if (len === 0) {
    return false;
  }

  var n = fromIndex | 0;
  var k = n >= 0 ? Math.min(n, len - 1) : Math.max(len + n, 0);

  var areTheSame = function areTheSame(x, y) {
    return x === y || // Viva las JavaScriptas!
    typeof x === "number" && typeof y === "number" && isNaN(x) && isNaN(y);
  };

  while (k < len) {
    if (areTheSame(arr[k], searchElement)) {
      return true;
    }

    k++;
  }

  return false;
}

/***/ }),

/***/ 811:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ assert,
/* harmony export */   "u": () => /* binding */ assertInterface
/* harmony export */ });
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3801);
/* harmony import */ var _is_null_or_undefined__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1946);
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Throw an AssertionError if the given assertion is false.
 * @param {boolean} assertion
 * @param {string} [message] - Optional message property for the AssertionError.
 * @throws AssertionError - Throws if the assertion given is false
 */

function assert(assertion, message) {
  if (!assertion) {
    throw new _errors__WEBPACK_IMPORTED_MODULE_0__/* .default */ .Z(message === undefined ? "invalid assertion" : message);
  }
}
/**
 * Throws if the given Object does not respect the interface.
 * @param {Object} o
 * @param {Object} iface - Contains the checked keynames of o and link them
 * to their types (obtained through the typeof operator).
 * @param {string} [name="object"] - name of the _interface_
 * @throws AssertionError - The argument o given is not an object
 * @throws AssertionError - The _interface_ is not respected.
 */

function assertInterface(o, iface, name) {
  if (name === void 0) {
    name = "object";
  }

  assert(!(0,_is_null_or_undefined__WEBPACK_IMPORTED_MODULE_1__/* .default */ .Z)(o), name + " should be an object");

  for (var k in iface) {
    if (iface.hasOwnProperty(k)) {
      /* eslint-disable max-len  */

      /* eslint-disable @typescript-eslint/restrict-template-expressions */
      assert(typeof o[k] === iface[k], name + " should have property " + k + " as a " + iface[k]);
      /* eslint-enable max-len */

      /* eslint-enable @typescript-eslint/restrict-template-expressions */
    }
  }
}

/***/ }),

/***/ 8418:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ assertUnreachable
/* harmony export */ });
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3801);
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * TypeScript hack to make sure a code path is never taken.
 *
 * This can for example be used to ensure that a switch statement handle all
 * possible cases by adding a default clause calling assertUnreachable with
 * an argument (it doesn't matter which one).
 *
 * @example
 * function parseBinary(str : "0" | "1") : number {
 *   switch (str) {
 *     case "0:
 *       return 0;
 *     case "1":
 *       return 1;
 *     default:
 *       // branch never taken. If it can be, TypeScript will yell at us because
 *       // its argument (here, `str`) is not of the right type.
 *       assertUnreachable(str);
 *   }
 * }
 * @param {*} _
 * @throws AssertionError - Throw an AssertionError when called. If we're
 * sufficiently strict with how we use TypeScript, this should never happen.
 */

function assertUnreachable(_) {
  throw new _errors__WEBPACK_IMPORTED_MODULE_0__/* .default */ .Z("Unreachable path taken");
}

/***/ }),

/***/ 9689:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "J": () => /* binding */ bytesToBase64,
/* harmony export */   "K": () => /* binding */ base64ToBytes
/* harmony export */ });
/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3887);
/* eslint-disable */

/*
MIT License
Copyright (c) 2020 Egor Nepomnyaschih
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
 */

/*
// This constant can also be computed with the following algorithm:
const base64abc = [],
  A = "A".charCodeAt(0),
  a = "a".charCodeAt(0),
  n = "0".charCodeAt(0);
for (let i = 0; i < 26; ++i) {
  base64abc.push(String.fromCharCode(A + i));
}
for (let i = 0; i < 26; ++i) {
  base64abc.push(String.fromCharCode(a + i));
}
for (let i = 0; i < 10; ++i) {
  base64abc.push(String.fromCharCode(n + i));
}
base64abc.push("+");
base64abc.push("/");
 */

var base64abc = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "+", "/"];
/*
// This constant can also be computed with the following algorithm:
const l = 256, base64codes = new Uint8Array(l);
for (let i = 0; i < l; ++i) {
  base64codes[i] = 255; // invalid character
}
base64abc.forEach((char, index) => {
  base64codes[char.charCodeAt(0)] = index;
});
base64codes["=".charCodeAt(0)] = 0; // ignored anyway, so we just need to prevent an error
 */

var base64codes = [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 62, 255, 255, 255, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 255, 255, 255, 0, 255, 255, 255, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 255, 255, 255, 255, 255, 255, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51];
/**
 * Obtain the value corresponding to a base64 char code.
 * /!\ Can throw if the char code given is invalid.
 * @param {number} charCode
 * @returns {number}
 */

function getBase64Code(charCode) {
  if (charCode >= base64codes.length) {
    throw new Error("Unable to parse base64 string.");
  }

  var code = base64codes[charCode];

  if (code === 255) {
    throw new Error("Unable to parse base64 string.");
  }

  return code;
}
/**
 * Convert an array of bytes into a base64 string.
 * @param {Array.<number>|Uint8Array} bytes
 * @returns {string}
 */


function bytesToBase64(bytes) {
  var result = "";
  var i;
  var length = bytes.length;

  for (i = 2; i < length; i += 3) {
    result += base64abc[bytes[i - 2] >> 2];
    result += base64abc[(bytes[i - 2] & 0x03) << 4 | bytes[i - 1] >> 4];
    result += base64abc[(bytes[i - 1] & 0x0F) << 2 | bytes[i] >> 6];
    result += base64abc[bytes[i] & 0x3F];
  }

  if (i === length + 1) {
    // 1 octet yet to write
    result += base64abc[bytes[i - 2] >> 2];
    result += base64abc[(bytes[i - 2] & 0x03) << 4];
    result += "==";
  }

  if (i === length) {
    // 2 octets yet to write
    result += base64abc[bytes[i - 2] >> 2];
    result += base64abc[(bytes[i - 2] & 0x03) << 4 | bytes[i - 1] >> 4];
    result += base64abc[(bytes[i - 1] & 0x0F) << 2];
    result += "=";
  }

  return result;
}
/**
 * Convert a base64 string into the corresponding Uint8Array containing its
 * corresponding binary data.
 * /!\ Can throw if an invalid base64 string was given.
 * @param {Array.<number>|Uint8Array} bytes
 * @returns {string}
 */

function base64ToBytes(str) {
  var paddingNeeded = str.length % 4;
  var paddedStr = str;

  if (paddingNeeded !== 0) {
    _log__WEBPACK_IMPORTED_MODULE_0__/* .default.warn */ .Z.warn("base64ToBytes: base64 given miss padding");
    paddedStr += paddingNeeded === 3 ? "=" : paddingNeeded === 2 ? "==" : "==="; // invalid, but we will catch it
  }

  var index = paddedStr.indexOf("=");

  if (index !== -1 && index < paddedStr.length - 2) {
    throw new Error("Unable to parse base64 string.");
  }

  var missingOctets = paddedStr.endsWith("==") ? 2 : paddedStr.endsWith("=") ? 1 : 0;
  var n = paddedStr.length;
  var result = new Uint8Array(n / 4 * 3);
  var buffer;

  for (var i = 0, j = 0; i < n; i += 4, j += 3) {
    buffer = getBase64Code(paddedStr.charCodeAt(i)) << 18 | getBase64Code(paddedStr.charCodeAt(i + 1)) << 12 | getBase64Code(paddedStr.charCodeAt(i + 2)) << 6 | getBase64Code(paddedStr.charCodeAt(i + 3));
    result[j] = buffer >> 16;
    result[j + 1] = buffer >> 8 & 0xFF;
    result[j + 2] = buffer & 0xFF;
  }

  return result.subarray(0, result.length - missingOctets);
}

/***/ }),

/***/ 6968:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "zo": () => /* binding */ concat,
/* harmony export */   "zK": () => /* binding */ be2toi,
/* harmony export */   "QI": () => /* binding */ be3toi,
/* harmony export */   "pX": () => /* binding */ be4toi,
/* harmony export */   "pV": () => /* binding */ be8toi,
/* harmony export */   "qb": () => /* binding */ le2toi,
/* harmony export */   "dN": () => /* binding */ le4toi,
/* harmony export */   "XT": () => /* binding */ itobe2,
/* harmony export */   "kh": () => /* binding */ itobe4,
/* harmony export */   "el": () => /* binding */ itobe8,
/* harmony export */   "O_": () => /* binding */ itole4,
/* harmony export */   "_f": () => /* binding */ toUint8Array
/* harmony export */ });
/* unused harmony exports le8toi, itole2, isABEqualBytes */
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns a Uint8Array from the arguments given, in order:
 *   - if the next argument given is a number N set the N next bytes to 0.
 *   - else set the next bytes to the argument given.
 * @param {...(Number|Uint8Array)} args
 * @returns {Uint8Array}
 */
function concat() {
  var l = arguments.length;
  var i = -1;
  var len = 0;
  var arg;

  while (++i < l) {
    arg = i < 0 || arguments.length <= i ? undefined : arguments[i];
    len += typeof arg === "number" ? arg : arg.length;
  }

  var arr = new Uint8Array(len);
  var offset = 0;
  i = -1;

  while (++i < l) {
    arg = i < 0 || arguments.length <= i ? undefined : arguments[i];

    if (typeof arg === "number") {
      offset += arg;
    } else if (arg.length > 0) {
      arr.set(arg, offset);
      offset += arg.length;
    }
  }

  return arr;
}
/**
 * Translate groups of 2 big-endian bytes to Integer (from 0 up to 65535).
 * @param {Uint8Array} bytes
 * @param {Number} offset - The offset (from the start of the given array)
 * @returns {Number}
 */


function be2toi(bytes, offset) {
  return (bytes[offset + 0] << 8) + (bytes[offset + 1] << 0);
}
/**
 * Translate groups of 3 big-endian bytes to Integer.
 * @param {Uint8Array} bytes
 * @param {Number} offset - The offset (from the start of the given array)
 * @returns {Number}
 */


function be3toi(bytes, offset) {
  return bytes[offset + 0] * 0x0010000 + bytes[offset + 1] * 0x0000100 + bytes[offset + 2];
}
/**
 * Translate groups of 4 big-endian bytes to Integer.
 * @param {Uint8Array} bytes
 * @param {Number} offset - The offset (from the start of the given array)
 * @returns {Number}
 */


function be4toi(bytes, offset) {
  return bytes[offset + 0] * 0x1000000 + bytes[offset + 1] * 0x0010000 + bytes[offset + 2] * 0x0000100 + bytes[offset + 3];
}
/**
 * Translate groups of 8 big-endian bytes to Integer.
 * @param {Uint8Array} bytes
 * @param {Number} offset - The offset (from the start of the given array)
 * @returns {Number}
 */


function be8toi(bytes, offset) {
  return (bytes[offset + 0] * 0x1000000 + bytes[offset + 1] * 0x0010000 + bytes[offset + 2] * 0x0000100 + bytes[offset + 3]) * 0x100000000 + bytes[offset + 4] * 0x1000000 + bytes[offset + 5] * 0x0010000 + bytes[offset + 6] * 0x0000100 + bytes[offset + 7];
}
/**
 * Translate Integer (from 0 up to 65535) to a Uint8Array of length 2 of
 * the corresponding big-endian bytes.
 * @param {Number} num
 * @returns {Uint8Array}
 */


function itobe2(num) {
  return new Uint8Array([num >>> 8 & 0xFF, num & 0xFF]);
}
/**
 * Translate Integer to a Uint8Array of length 4 of the corresponding big-endian
 * bytes.
 * @param {Number} num
 * @returns {Uint8Array}
 */


function itobe4(num) {
  return new Uint8Array([num >>> 24 & 0xFF, num >>> 16 & 0xFF, num >>> 8 & 0xFF, num & 0xFF]);
}
/**
 * Translate Integer to a Uint8Array of length 8 of the corresponding big-endian
 * bytes.
 * /!\ If the top-most bytes are set, this might go over MAX_SAFE_INTEGER, thus
 * leading to a "bad" value.
 * @param {Number} num
 * @returns {Uint8Array}
 */


function itobe8(num) {
  var l = num % 0x100000000;
  var h = (num - l) / 0x100000000;
  return new Uint8Array([h >>> 24 & 0xFF, h >>> 16 & 0xFF, h >>> 8 & 0xFF, h & 0xFF, l >>> 24 & 0xFF, l >>> 16 & 0xFF, l >>> 8 & 0xFF, l & 0xFF]);
}
/**
 * Translate groups of 2 little-endian bytes to Integer (from 0 up to 65535).
 * @param {Uint8Array} bytes
 * @param {Number} offset - The offset (from the start of the given array)
 * @returns {Number}
 */


function le2toi(bytes, offset) {
  return (bytes[offset + 0] << 0) + (bytes[offset + 1] << 8);
}
/**
 * Translate groups of 4 little-endian bytes to Integer.
 * @param {Uint8Array} bytes
 * @param {Number} offset - The offset (from the start of the given array)
 * @returns {Number}
 */


function le4toi(bytes, offset) {
  return bytes[offset + 0] + bytes[offset + 1] * 0x0000100 + bytes[offset + 2] * 0x0010000 + bytes[offset + 3] * 0x1000000;
}
/**
 * Translate groups of 8 little-endian bytes to Integer.
 * @param {Uint8Array} bytes
 * @param {Number} offset - The offset (from the start of the given array)
 * @returns {Number}
 */


function le8toi(bytes, offset) {
  return bytes[offset + 0] + bytes[offset + 1] * 0x0000100 + bytes[offset + 2] * 0x0010000 + bytes[offset + 3] * 0x1000000 + (bytes[offset + 4] + bytes[offset + 5] * 0x0000100 + bytes[offset + 6] * 0x0010000 + bytes[offset + 7] * 0x1000000) * 0x100000000;
}
/**
 * Translate Integer (from 0 up to 65535) to a Uint8Array of length 2 of
 * the corresponding little-endian bytes.
 * @param {Number} num
 * @returns {Uint8Array}
 */


function itole2(num) {
  return new Uint8Array([num & 0xFF, num >>> 8 & 0xFF]);
}
/**
 * Translate Integer to a Uint8Array of length 4 of the corresponding
 * little-endian bytes.
 * @param {Number} num
 * @returns {Uint8Array}
 */


function itole4(num) {
  return new Uint8Array([num & 0xFF, num >>> 8 & 0xFF, num >>> 16 & 0xFF, num >>> 24 & 0xFF]);
}
/**
 * Check if an ArrayBuffer is equal to the bytes given.
 * @param {ArrayBuffer} buffer
 * @param {Uint8Array} bytes
 * @returns {Boolean}
 */


function isABEqualBytes(buffer, bytes) {
  var view = new DataView(buffer);
  var len = view.byteLength;

  if (len !== bytes.length) {
    return false;
  }

  for (var i = 0; i < len; i++) {
    if (view.getUint8(i) !== bytes[i]) {
      return false;
    }
  }

  return true;
}
/**
 * Convert any BufferSource-typed structure into the corresponding Uint8Array.
 * @param {BufferSource} input
 * @returns {Uint8Array}
 */


function toUint8Array(input) {
  return input instanceof Uint8Array ? input : input instanceof ArrayBuffer ? new Uint8Array(input) : new Uint8Array(input.buffer);
}



/***/ }),

/***/ 8117:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4379);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4072);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(8170);
/* harmony import */ var _is_null_or_undefined__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1946);
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

 // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types

function castToObservable(value) {
  if (value instanceof rxjs__WEBPACK_IMPORTED_MODULE_0__/* .Observable */ .y) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return value;
  }
  /* eslint-disable-next-line @typescript-eslint/no-unsafe-member-access */


  if (!(0,_is_null_or_undefined__WEBPACK_IMPORTED_MODULE_1__/* .default */ .Z)(value) && typeof value.subscribe === "function") {
    var valObsLike = value;
    return new rxjs__WEBPACK_IMPORTED_MODULE_0__/* .Observable */ .y(function (obs) {
      var sub = valObsLike.subscribe(function (val) {
        obs.next(val);
      }, function (err) {
        obs.error(err);
      }, function () {
        obs.complete();
      });
      return function () {
        if (!(0,_is_null_or_undefined__WEBPACK_IMPORTED_MODULE_1__/* .default */ .Z)(sub) && typeof sub.dispose === "function") {
          sub.dispose();
        } else if (!(0,_is_null_or_undefined__WEBPACK_IMPORTED_MODULE_1__/* .default */ .Z)(sub) && typeof sub.unsubscribe === "function") {
          sub.unsubscribe();
        }
      };
    });
  } // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access


  if (!(0,_is_null_or_undefined__WEBPACK_IMPORTED_MODULE_1__/* .default */ .Z)(value) && typeof value.then === "function") {
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .from */ .D)(value);
  } // eslint-disable-next-line @typescript-eslint/no-unsafe-return


  return (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.of)(value);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (castToObservable);

/***/ }),

/***/ 8025:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Z": () => /* binding */ deferSubscriptions
});

// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.js
var tslib_es6 = __webpack_require__(655);
;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/Immediate.js
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var nextHandle = 1;
var RESOLVED = /*@__PURE__*/ (function () { return /*@__PURE__*/ Promise.resolve(); })();
var activeHandles = {};
function findAndClearHandle(handle) {
    if (handle in activeHandles) {
        delete activeHandles[handle];
        return true;
    }
    return false;
}
var Immediate = {
    setImmediate: function (cb) {
        var handle = nextHandle++;
        activeHandles[handle] = true;
        RESOLVED.then(function () { return findAndClearHandle(handle) && cb(); });
        return handle;
    },
    clearImmediate: function (handle) {
        findAndClearHandle(handle);
    },
};
var TestTools = {
    pending: function () {
        return Object.keys(activeHandles).length;
    }
};
//# sourceMappingURL=Immediate.js.map

// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/scheduler/AsyncAction.js + 1 modules
var AsyncAction = __webpack_require__(6114);
;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduler/AsapAction.js
/** PURE_IMPORTS_START tslib,_util_Immediate,_AsyncAction PURE_IMPORTS_END */



var AsapAction = /*@__PURE__*/ (function (_super) {
    tslib_es6/* __extends */.ZT(AsapAction, _super);
    function AsapAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
    }
    AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        if (delay !== null && delay > 0) {
            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        scheduler.actions.push(this);
        return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));
    };
    AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
        }
        if (scheduler.actions.length === 0) {
            Immediate.clearImmediate(id);
            scheduler.scheduled = undefined;
        }
        return undefined;
    };
    return AsapAction;
}(AsyncAction/* AsyncAction */.o));

//# sourceMappingURL=AsapAction.js.map

// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/scheduler/AsyncScheduler.js + 1 modules
var AsyncScheduler = __webpack_require__(2980);
;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduler/AsapScheduler.js
/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */


var AsapScheduler = /*@__PURE__*/ (function (_super) {
    tslib_es6/* __extends */.ZT(AsapScheduler, _super);
    function AsapScheduler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AsapScheduler.prototype.flush = function (action) {
        this.active = true;
        this.scheduled = undefined;
        var actions = this.actions;
        var error;
        var index = -1;
        var count = actions.length;
        action = action || actions.shift();
        do {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        } while (++index < count && (action = actions.shift()));
        this.active = false;
        if (error) {
            while (++index < count && (action = actions.shift())) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AsapScheduler;
}(AsyncScheduler/* AsyncScheduler */.v));

//# sourceMappingURL=AsapScheduler.js.map

;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduler/asap.js
/** PURE_IMPORTS_START _AsapAction,_AsapScheduler PURE_IMPORTS_END */


var asapScheduler = /*@__PURE__*/ new AsapScheduler(AsapAction);
var asap = asapScheduler;
//# sourceMappingURL=asap.js.map

// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/Observable.js + 3 modules
var Observable = __webpack_require__(4379);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/util/isNumeric.js
var isNumeric = __webpack_require__(5812);
;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/SubscribeOnObservable.js
/** PURE_IMPORTS_START tslib,_Observable,_scheduler_asap,_util_isNumeric PURE_IMPORTS_END */




var SubscribeOnObservable = /*@__PURE__*/ (function (_super) {
    tslib_es6/* __extends */.ZT(SubscribeOnObservable, _super);
    function SubscribeOnObservable(source, delayTime, scheduler) {
        if (delayTime === void 0) {
            delayTime = 0;
        }
        if (scheduler === void 0) {
            scheduler = asap;
        }
        var _this = _super.call(this) || this;
        _this.source = source;
        _this.delayTime = delayTime;
        _this.scheduler = scheduler;
        if (!(0,isNumeric/* isNumeric */.k)(delayTime) || delayTime < 0) {
            _this.delayTime = 0;
        }
        if (!scheduler || typeof scheduler.schedule !== 'function') {
            _this.scheduler = asap;
        }
        return _this;
    }
    SubscribeOnObservable.create = function (source, delay, scheduler) {
        if (delay === void 0) {
            delay = 0;
        }
        if (scheduler === void 0) {
            scheduler = asap;
        }
        return new SubscribeOnObservable(source, delay, scheduler);
    };
    SubscribeOnObservable.dispatch = function (arg) {
        var source = arg.source, subscriber = arg.subscriber;
        return this.add(source.subscribe(subscriber));
    };
    SubscribeOnObservable.prototype._subscribe = function (subscriber) {
        var delay = this.delayTime;
        var source = this.source;
        var scheduler = this.scheduler;
        return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {
            source: source, subscriber: subscriber
        });
    };
    return SubscribeOnObservable;
}(Observable/* Observable */.y));

//# sourceMappingURL=SubscribeOnObservable.js.map

;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/subscribeOn.js
/** PURE_IMPORTS_START _observable_SubscribeOnObservable PURE_IMPORTS_END */

function subscribeOn(scheduler, delay) {
    if (delay === void 0) {
        delay = 0;
    }
    return function subscribeOnOperatorFunction(source) {
        return source.lift(new SubscribeOnOperator(scheduler, delay));
    };
}
var SubscribeOnOperator = /*@__PURE__*/ (function () {
    function SubscribeOnOperator(scheduler, delay) {
        this.scheduler = scheduler;
        this.delay = delay;
    }
    SubscribeOnOperator.prototype.call = function (subscriber, source) {
        return new SubscribeOnObservable(source, this.delay, this.scheduler).subscribe(subscriber);
    };
    return SubscribeOnOperator;
}());
//# sourceMappingURL=subscribeOn.js.map

;// CONCATENATED MODULE: ./src/utils/defer_subscriptions.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * At subscription, instead of "running" the Observable right away, wait until
 * the current task has finished executing before actually running this
 * Observable.
 *
 * This can be important for example when you want in a given function to
 * exploit the same shared Observable which may send synchronous events directly
 * after subscription.
 *
 * Here, you might be left in a situation where the first element subscribing to
 * that Observable will receive those synchronous events immediately on
 * subscription. Further subscriptions on that Observable will miss out on those
 * events - even if those subscriptions happen synchronously after the first
 * one.
 *
 * Calling `deferSubscriptions` in those cases will make sure that all such
 * subscriptions can be registered before the Observable start emitting events
 * (as long as such Subscriptions are done synchronously).
 *
 * @example
 * ```js
 * const myObservable = rxjs.timer(100).pipe(mapTo("ASYNC MSG"),
 *                                           startWith("SYNCHRONOUS MSG"),
 *                                           share());
 *
 * myObservable.subscribe(x => console.log("Sub1:", x));
 * myObservable.subscribe(x => console.log("Sub2:", x));
 *
 * setTimeout(() => {
 *   myObservable.subscribe(x => console.log("Sub3:", x));
 * }, 50);
 *
 * // You will get:
 * // Sub1: SYNCHRONOUS MSG
 * // Sub1: ASYNC MSG
 * // Sub2: ASYNC MSG
 * // Sub3: ASYNC MSG
 *
 * // ------------------------------
 *
 * const myObservableDeferred = rxjs.timer(100).pipe(mapTo("ASYNC MSG"),
 *                                                   startWith("SYNCHRONOUS MSG"),
 *                                                   deferSubscriptions(),
 *                                                   // NOTE: the order is important here
 *                                                   share());
 *
 * myObservableDeferred.subscribe(x => console.log("Sub1:", x));
 * myObservableDeferred.subscribe(x => console.log("Sub2:", x));
 *
 * setTimeout(() => {
 *   myObservableDeferred.subscribe(x => console.log("Sub3:", x));
 * }, 50);
 *
 * // You will get:
 * // Sub1: SYNCHRONOUS MSG
 * // Sub2: SYNCHRONOUS MSG
 * // Sub1: ASYNC MSG
 * // Sub2: ASYNC MSG
 * // Sub3: ASYNC MSG
 * ```
 * @returns {function}
 */

function deferSubscriptions() {
  return function (source) {
    // TODO asapScheduler seems to not push the subscription in the microtask
    // queue as nextTick does but in a regular event loop queue.
    // This means that the subscription will be run even later that we wish for.
    // This is not dramatic but it could be better.
    // Either this is a problem with RxJS or this was wanted, in which case we
    // may need to add our own scheduler.
    return source.pipe(subscribeOn(asapScheduler));
  };
}

/***/ }),

/***/ 1959:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ EventEmitter,
/* harmony export */   "R": () => /* binding */ fromEvent
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4379);
/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3887);
/* harmony import */ var _is_null_or_undefined__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1946);
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Simple but fully type-safe EventEmitter implementation.
 * @class EventEmitter
 */

var EventEmitter = /*#__PURE__*/function () {
  function EventEmitter() {
    this._listeners = {};
  }
  /**
   * Register a new callback for an event.
   *
   * @param {string} evt - The event to register a callback to
   * @param {Function} fn - The callback to call as that event is triggered.
   * The callback will take as argument the eventual payload of the event
   * (single argument).
   */


  var _proto = EventEmitter.prototype;

  _proto.addEventListener = function addEventListener(evt, fn) {
    var listeners = this._listeners[evt];

    if (!Array.isArray(listeners)) {
      this._listeners[evt] = [fn];
    } else {
      listeners.push(fn);
    }
  }
  /**
   * Unregister callbacks linked to events.
   * @param {string} [evt] - The event for which the callback[s] should be
   * unregistered. Set it to null or undefined to remove all callbacks
   * currently registered (for any event).
   * @param {Function} [fn] - The callback to unregister. If set to null
   * or undefined while the evt argument is set, all callbacks linked to that
   * event will be unregistered.
   */
  ;

  _proto.removeEventListener = function removeEventListener(evt, fn) {
    if ((0,_is_null_or_undefined__WEBPACK_IMPORTED_MODULE_0__/* .default */ .Z)(evt)) {
      this._listeners = {};
      return;
    }

    var listeners = this._listeners[evt];

    if (!Array.isArray(listeners)) {
      return;
    }

    if ((0,_is_null_or_undefined__WEBPACK_IMPORTED_MODULE_0__/* .default */ .Z)(fn)) {
      delete this._listeners[evt];
      return;
    }

    var index = listeners.indexOf(fn);

    if (index !== -1) {
      listeners.splice(index, 1);
    }

    if (listeners.length === 0) {
      delete this._listeners[evt];
    }
  }
  /**
   * Trigger every registered callbacks for a given event
   * @param {string} evt - The event to trigger
   * @param {*} arg - The eventual payload for that event. All triggered
   * callbacks will recieve this payload as argument.
   */
  ;

  _proto.trigger = function trigger(evt, arg) {
    var listeners = this._listeners[evt];

    if (!Array.isArray(listeners)) {
      return;
    }

    listeners.slice().forEach(function (listener) {
      try {
        listener(arg);
      } catch (e) {
        _log__WEBPACK_IMPORTED_MODULE_1__/* .default.error */ .Z.error(e, e instanceof Error ? e.stack : null);
      }
    });
  };

  return EventEmitter;
}();
/**
 * Simple redefinition of the fromEvent from rxjs to also work on our
 * implementation of EventEmitter with type-checked strings
 * @param {Object} target
 * @param {string} eventName
 * @returns {Observable}
 */



function fromEvent(target, eventName) {
  return new rxjs__WEBPACK_IMPORTED_MODULE_2__/* .Observable */ .y(function (obs) {
    function handler(event) {
      obs.next(event);
    }

    target.addEventListener(eventName, handler);
    return function () {
      target.removeEventListener(eventName, handler);
    };
  });
}

/***/ }),

/***/ 2793:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ filterMap
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1410);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5709);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(6008);
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Special kind of map which will ignore the result when the value emitted
 * corresponds to a given token.
 *
 * This can also be performed through a `mergeMap` (by returning the `EMPTY`
 * Observable when we want to ignore events) but using `filterMap` is both more
 * straightforward and more performant.
 * @param {function} callback
 * @param {*} filteringToken
 * @returns {function}
 */

function filterMap(callback, filteringToken) {
  return function (source) {
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_0__/* .defer */ .P)(function () {
      return source.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_1__/* .map */ .U)(callback), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_2__/* .filter */ .h)(function (x) {
        return x !== filteringToken;
      }));
    });
  };
}

/***/ }),

/***/ 9592:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ flatMap
/* harmony export */ });
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Map each element using a mapping function, then flat the result into
 * a new array.
 * @param {Array.<*>} originalArray
 * @param {Function} fn
 */
function flatMap(originalArray, fn) {
  /* eslint-disable @typescript-eslint/unbound-method */

  /* eslint-disable @typescript-eslint/no-unsafe-member-access */

  /* eslint-disable @typescript-eslint/no-unsafe-return */

  /* eslint-disable @typescript-eslint/no-unsafe-call */
  if (typeof Array.prototype.flatMap === "function") {
    return originalArray.flatMap(fn);
  }
  /* eslint-enable @typescript-eslint/unbound-method */

  /* eslint-enable @typescript-eslint/no-unsafe-member-access */

  /* eslint-enable @typescript-eslint/no-unsafe-return */

  /* eslint-enable @typescript-eslint/no-unsafe-call */


  return originalArray.reduce(function (acc, arg) {
    var r = fn(arg);

    if (Array.isArray(r)) {
      acc.push.apply(acc, r);
      return acc;
    }

    acc.push(r);
    return acc;
  }, []);
}

/***/ }),

/***/ 2572:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ getFuzzedDelay
/* harmony export */ });
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var FUZZ_FACTOR = 0.3;
/**
 * Perform "fuzzing" on the delay given.
 * @param {Number} retryDelay
 * @returns {Number}
 */

function getFuzzedDelay(retryDelay) {
  var fuzzingFactor = (Math.random() * 2 - 1) * FUZZ_FACTOR;
  return retryDelay * (fuzzingFactor + 1); // Max 1.3 Min 0.7
}

/***/ }),

/***/ 2870:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ hashBuffer
/* harmony export */ });
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Convert given buffer to a 32bit integer hash
 *
 * This algorithm is the same one that Java `String.hashCode()` one which
 * is a fast hashing function adapted to short ASCII strings.
 * This consequently might not be the most adapted to buffers of various length
 * containing a various amount of data but still has the advantage of being
 * fast.
 *
 * As this function is used in persistent MediaKeySession storage, we probably
 * should keep this function somewhere as long as we want to support
 * MediaKeySessions persisted in old versions of the RxPlayer.
 *
 * @param {Array.<number>|TypedArray} buffer
 * @returns {number}
 */
function hashBuffer(buffer) {
  var hash = 0;

  var _char;

  for (var i = 0; i < buffer.length; i++) {
    _char = buffer[i];
    hash = (hash << 5) - hash + _char;
    hash = hash & hash; // Convert to 32bit integer
  }

  return hash;
}

/***/ }),

/***/ 908:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ idGenerator
/* harmony export */ });
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint-disable @typescript-eslint/no-unsafe-member-access */

/**
 * Creates an ID generator which generates an ID each time you call it.
 * @returns {Function}
 */
function idGenerator() {
  var prefix = "";
  var currId = -1;
  return function generateNewId() {
    currId++;

    if (currId >= Number.MAX_SAFE_INTEGER) {
      prefix += "0";
      currId = 0;
    }

    return prefix + String(currId);
  };
}

/***/ }),

/***/ 6923:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ isNonEmptyString
/* harmony export */ });
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @param {*} x
 * @returns {string}
 */
function isNonEmptyString(x) {
  return typeof x === "string" && x.length > 0;
}

/***/ }),

/***/ 1946:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ isNullOrUndefined
/* harmony export */ });
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns true if the argument given is either null or undefined.
 * This function was added to have a clearer alternative to `== null` which is
 * not always understood by newcomers to the code, and which can be overused when
 * only one of the possibility can arise.
 * @param {*} x
 * @returns {*}
 */
function isNullOrUndefined(x) {
  return x === null || x === undefined;
}

/***/ }),

/***/ 7829:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ZP": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony import */ var _normalize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5553);
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_normalize__WEBPACK_IMPORTED_MODULE_0__/* .default */ .ZP);


/***/ }),

/***/ 5553:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "ZP": () => /* binding */ normalize,
  "iH": () => /* binding */ normalizeAudioTrack,
  "Y1": () => /* binding */ normalizeTextTrack
});

// EXTERNAL MODULE: ./src/utils/is_non_empty_string.ts
var is_non_empty_string = __webpack_require__(6923);
// EXTERNAL MODULE: ./src/utils/is_null_or_undefined.ts
var is_null_or_undefined = __webpack_require__(1946);
;// CONCATENATED MODULE: ./src/utils/languages/ISO_639-1_to_ISO_639-3.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Translate ISO 639-1 language codes into ISO 639-3 ones.
 */
var ISO_MAP_1_TO_3 = {
  aa: "aar",
  ab: "abk",
  ae: "ave",
  af: "afr",
  ak: "aka",
  am: "amh",
  an: "arg",
  ar: "ara",
  as: "asm",
  av: "ava",
  ay: "aym",
  az: "aze",
  ba: "bak",
  be: "bel",
  bg: "bul",
  bi: "bis",
  bm: "bam",
  bn: "ben",
  bo: "bod",
  br: "bre",
  bs: "bos",
  ca: "cat",
  ce: "che",
  ch: "cha",
  co: "cos",
  cr: "cre",
  cs: "ces",
  cu: "chu",
  // Old Slavonic, Old Bulgarian
  cv: "chv",
  cy: "cym",
  da: "dan",
  de: "deu",
  dv: "div",
  dz: "dzo",
  ee: "ewe",
  el: "ell",
  en: "eng",
  eo: "epo",
  es: "spa",
  et: "est",
  eu: "eus",
  fa: "fas",
  ff: "ful",
  fi: "fin",
  fj: "fij",
  fo: "fao",
  fr: "fra",
  fy: "fry",
  ga: "gle",
  gd: "gla",
  gl: "glg",
  gn: "grn",
  gu: "guj",
  gv: "glv",
  ha: "hau",
  he: "heb",
  hi: "hin",
  ho: "hmo",
  hr: "hrv",
  ht: "hat",
  hu: "hun",
  hy: "hye",
  hz: "her",
  ia: "ina",
  id: "ind",
  ie: "ile",
  ig: "ibo",
  ii: "iii",
  ik: "ipk",
  io: "ido",
  is: "isl",
  it: "ita",
  iu: "iku",
  ja: "jpn",
  jv: "jav",
  ka: "kat",
  kg: "kon",
  ki: "kik",
  kj: "kua",
  kk: "kaz",
  kl: "kal",
  km: "khm",
  kn: "kan",
  ko: "kor",
  kr: "kau",
  ks: "kas",
  ku: "kur",
  kv: "kom",
  kw: "cor",
  ky: "kir",
  la: "lat",
  lb: "ltz",
  lg: "lug",
  li: "lim",
  ln: "lin",
  lo: "lao",
  lt: "lit",
  lu: "lub",
  lv: "lav",
  mg: "mlg",
  mh: "mah",
  mi: "mri",
  mk: "mkd",
  ml: "mal",
  mn: "mon",
  mr: "mar",
  ms: "msa",
  mt: "mlt",
  my: "mya",
  na: "nau",
  nb: "nob",
  nd: "nde",
  ne: "nep",
  ng: "ndo",
  nl: "nld",
  nn: "nno",
  no: "nor",
  nr: "nbl",
  nv: "nav",
  ny: "nya",
  oc: "oci",
  oj: "oji",
  om: "orm",
  or: "ori",
  os: "oss",
  pa: "pan",
  pi: "pli",
  pl: "pol",
  ps: "pus",
  pt: "por",
  qu: "que",
  rm: "roh",
  rn: "run",
  ro: "ron",
  ru: "rus",
  rw: "kin",
  sa: "san",
  sc: "srd",
  sd: "snd",
  se: "sme",
  sg: "sag",
  si: "sin",
  sk: "slk",
  sl: "slv",
  sm: "smo",
  sn: "sna",
  so: "som",
  sq: "sqi",
  sr: "srp",
  ss: "ssw",
  st: "sot",
  su: "sun",
  sv: "swe",
  sw: "swa",
  ta: "tam",
  te: "tel",
  tg: "tgk",
  th: "tha",
  ti: "tir",
  tk: "tuk",
  tl: "tgl",
  tn: "tsn",
  to: "ton",
  tr: "tur",
  ts: "tso",
  tt: "tat",
  tw: "twi",
  ty: "tah",
  ug: "uig",
  uk: "ukr",
  ur: "urd",
  uz: "uzb",
  ve: "ven",
  vi: "vie",
  vo: "vol",
  wa: "wln",
  wo: "wol",
  xh: "xho",
  yi: "yid",
  yo: "yor",
  za: "zha",
  zh: "zho",
  zu: "zul"
};
/* harmony default export */ const ISO_639_1_to_ISO_639_3 = (ISO_MAP_1_TO_3);
;// CONCATENATED MODULE: ./src/utils/languages/ISO_639-2_to_ISO_639-3.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Translate ISO 639-2 synonyms to their ISO 639-3 counterparts.
 */
var ISO_MAP_2_TO_3 = {
  alb: "sqi",
  arm: "hye",
  baq: "eus",
  bur: "mya",
  chi: "zho",
  cze: "ces",
  dut: "nld",
  fre: "fra",
  geo: "kat",
  ger: "deu",
  gre: "ell",
  ice: "isl",
  mac: "mkd",
  mao: "mri",
  may: "msa",
  per: "fas",
  slo: "slk",
  rum: "ron",
  tib: "bod",
  wel: "cym"
};
/* harmony default export */ const ISO_639_2_to_ISO_639_3 = (ISO_MAP_2_TO_3);
;// CONCATENATED MODULE: ./src/utils/languages/normalize.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * Normalize language given.
 * Basically:
 *   - converts it to lowercase.
 *   - normalize "base" (what is before the possible first "-") to an ISO639-3
 *     compatible string.
 * @param {string} _language
 * @returns {string}
 */

function normalizeLanguage(_language) {
  if ((0,is_null_or_undefined/* default */.Z)(_language) || _language === "") {
    return "";
  }

  var fields = ("" + _language).toLowerCase().split("-");

  var base = fields[0];
  var normalizedBase = normalizeBase(base);

  if ((0,is_non_empty_string/* default */.Z)(normalizedBase)) {
    return normalizedBase;
  }

  return _language;
}
/**
 * Normalize language into an ISO639-3 format.
 * Returns undefined if it failed to do so
 * @param {string} base
 * @returns {string}
 */


function normalizeBase(base) {
  var result;

  switch (base.length) {
    case 2:
      result = ISO_639_1_to_ISO_639_3[base];
      break;

    case 3:
      result = ISO_639_2_to_ISO_639_3[base];
      break;
  }

  return result;
}
/**
 * Normalize text track from a user given input into an object
 * with three properties:
 *   - language {string}: The language the user gave us
 *   - normalized {string}: An attempt to normalize the language into an
 *     ISO 639-3 code
 *   - closedCaption {Boolean}: Whether the track is a closed caption track
 * @param {Object|string|null|undefined} _language
 * @returns {Object|null|undefined}
 */


function normalizeTextTrack(_language) {
  if (!(0,is_null_or_undefined/* default */.Z)(_language)) {
    var language;
    var closedCaption = false;

    if (typeof _language === "string") {
      language = _language;
    } else {
      language = _language.language;

      if (_language.closedCaption === true) {
        closedCaption = true;
      }
    }

    return {
      language: language,
      closedCaption: closedCaption,
      normalized: normalizeLanguage(language)
    };
  }

  return _language;
}
/**
 * Normalize audio track from a user given input into an object
 * with the following properties:
 *   - language {string}: The language the user gave us
 *   - normalized {string}: An attempt to normalize the language into an
 *     ISO 639-3 code
 *   - audioDescription {Boolean}: Whether the track is a closed caption track
 *   - isDub {Boolean|undefined}: if true, this is a dub.
 * @param {Object|string|null|undefined} _language
 * @returns {Object|null|undefined}
 */


function normalizeAudioTrack(_language) {
  if ((0,is_null_or_undefined/* default */.Z)(_language)) {
    return _language;
  }

  if (typeof _language === "string") {
    return {
      language: _language,
      audioDescription: false,
      normalized: normalizeLanguage(_language)
    };
  }

  var normalized = {
    language: _language.language,
    audioDescription: _language.audioDescription === true,
    normalized: normalizeLanguage(normalizeLanguage(_language.language))
  };

  if (_language.isDub === true) {
    normalized.isDub = true;
  }

  return normalized;
}

/* harmony default export */ const normalize = (normalizeLanguage);


/***/ }),

/***/ 8894:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* export default binding */ __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Do nothing (but do it well).
 *
 * Having this definition here allow to use the same reference each time a noop
 * is needed.
 * Also, it allows to avoid telling eslint to ignore empty blocks everywhere.
 */

/* eslint-disable no-empty,@typescript-eslint/no-empty-function */
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {}
/* eslint-enable no-empty, @typescript-eslint/no-empty-function */

/***/ }),

/***/ 8026:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function objectAssign(target) {
  if (target === null || target === undefined) {
    throw new TypeError("Cannot convert undefined or null to object");
  } // eslint-disable-next-line  @typescript-eslint/no-unsafe-assignment


  var to = Object(target);

  for (var i = 0; i < (arguments.length <= 1 ? 0 : arguments.length - 1); i++) {
    var source = i + 1 < 1 || arguments.length <= i + 1 ? undefined : arguments[i + 1];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        /* eslint-disable @typescript-eslint/no-unsafe-member-access */
        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
        to[key] = source[key];
        /* eslint-enable @typescript-eslint/no-unsafe-member-access */
      }
    }
  }

  return to;
} // eslint-disable-next-line @typescript-eslint/unbound-method, no-restricted-properties


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (typeof Object.assign === "function" ? // eslint-disable-next-line no-restricted-properties
Object.assign : // eslint-disable-next-line  @typescript-eslint/unbound-method
objectAssign);

/***/ }),

/***/ 1679:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* unused harmony export objectValues */
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @param {Object|Array} o
 * @returns {Array.<*>}
 */
function objectValues(o) {
  return Object.keys(o).map(function (k) {
    return o[k];
  });
} // eslint-disable-next-line  @typescript-eslint/unbound-method, no-restricted-properties


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (typeof Object.values === "function" ? Object.values : objectValues);


/***/ }),

/***/ 9589:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony import */ var pinkie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8555);
/* harmony import */ var pinkie__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pinkie__WEBPACK_IMPORTED_MODULE_0__);
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (typeof Promise === "function" ? Promise : (pinkie__WEBPACK_IMPORTED_MODULE_0___default()));

/***/ }),

/***/ 2829:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "JN": () => /* binding */ convertToRanges,
/* harmony export */   "uH": () => /* binding */ excludeFromRanges,
/* harmony export */   "F_": () => /* binding */ getInnerAndOuterTimeRanges,
/* harmony export */   "L7": () => /* binding */ getLeftSizeOfRange,
/* harmony export */   "XS": () => /* binding */ getNextRangeGap,
/* harmony export */   "DD": () => /* binding */ getPlayedSizeOfRange,
/* harmony export */   "rx": () => /* binding */ getRange,
/* harmony export */   "at": () => /* binding */ getSizeOfRange,
/* harmony export */   "kR": () => /* binding */ insertInto,
/* harmony export */   "Ti": () => /* binding */ isTimeInRange,
/* harmony export */   "A1": () => /* binding */ isTimeInRanges,
/* harmony export */   "tn": () => /* binding */ keepRangeIntersection
/* harmony export */ });
/* unused harmony exports isAfter, isBefore, isTimeInTimeRanges, mergeContiguousRanges, removeEmptyRanges */
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This file contains functions helping with TimeRanges management.
 *
 * For simplicity/performance reasons, many of those work with a simplified
 * "Range" object, which is an object with two keys:
 *   - start {Number}
 *   - end {Number}
 *
 * Those two corresponds to what is returned by the start and end methods of a
 * TimeRanges Object.
 *
 * You can convert from TimeRanges to Range object(s) with the getRange/
 * convertToRanges methods.
 */
// Factor for rounding errors
var EPSILON = 1 / 60;
/**
 * Check equality with a tolerance of EPSILON.
 * Used for various functions with this sort of tolerance regarding the
 * start/end of contiguous ranges.
 * @param {Number} a
 * @param {Number} b
 * @returns {Boolean}
 */

function nearlyEqual(a, b) {
  return Math.abs(a - b) < EPSILON;
}
/**
 * Construct a new range which will have, as start/end, the min/max
 * of both the range given, and the given bitrate.
 * @param {Object} range1
 * @param {Object} range2
 * @returns {Object}
 */


function createRangeUnion(range1, range2) {
  var start = Math.min(range1.start, range2.start);
  var end = Math.max(range1.end, range2.end);
  return {
    start: start,
    end: end
  };
}
/**
 * Clean array ranges from "empty" ranges.
 * That is, range objects which have their start equal to their end.
 * /!\ Mutate the array of ranges.
 * @param {Array<Object>} ranges
 * @returns {Array<Object>}
 */


function removeEmptyRanges(ranges) {
  for (var index = 0; index < ranges.length; index++) {
    var range = ranges[index];

    if (range.start === range.end) {
      ranges.splice(index--, 1);
    }
  }

  return ranges;
}
/**
 * /!\ Mutate the array of ranges.
 * @param {Array<Object>} ranges
 * @returns {Array<Object>}
 */


function mergeContiguousRanges(ranges) {
  for (var index = 1; index < ranges.length; index++) {
    var prevRange = ranges[index - 1];
    var currRange = ranges[index];

    if (areRangesNearlyContiguous(prevRange, currRange)) {
      var unionRange = createRangeUnion(prevRange, currRange);
      ranges.splice(--index, 2, unionRange);
    }
  }

  return ranges;
}
/**
 * True if range1 is considered _after_ range2.
 * @param {Object} range1
 * @param {Object} range2
 * @returns {Boolean}
 */


function isAfter(range1, range2) {
  return range1.start >= range2.end;
}
/**
 * True if range1 is considered _before_ range2.
 * @param {Object} range1
 * @param {Object} range2
 * @returns {Boolean}
 */


function isBefore(range1, range2) {
  return range1.end <= range2.start;
}
/**
 * Returns true if the time given can be considered as part of any of the given
 * ranges.
 * @param {Array.<Object>} ranges
 * @param {number} time
 * @returns {boolean}
 */


function isTimeInRanges(ranges, time) {
  for (var i = 0; i < ranges.length; i++) {
    if (isTimeInRange(ranges[i], time)) {
      return true;
    }
  }

  return false;
}
/**
 * Returns true if the time given can be considered as part of the given range.
 * @param {Object} range1
 * @param {Number} Time
 * @returns {Boolean}
 */


function isTimeInRange(_ref, time) {
  var start = _ref.start,
      end = _ref.end;
  return start <= time && time < end;
}
/**
 * Returns true if the two ranges given are overlapping.
 * @param {Object} range1
 * @param {Object} range2
 * @returns {Boolean}
 */


function areRangesOverlapping(range1, range2) {
  return isTimeInRange(range1, range2.start) || range1.start < range2.end && range2.end < range1.end || isTimeInRange(range2, range1.start);
}
/**
 * Returns true if the two ranges given can be considered contiguous.
 * @param {Object} range1
 * @param {Object} range2
 * @returns {Boolean}
 */


function areRangesNearlyContiguous(range1, range2) {
  return nearlyEqual(range2.start, range1.end) || nearlyEqual(range2.end, range1.start);
}
/**
 * Convert from a TimeRanges object to an array of Ranges.
 * @param {TimeRanges} timeRanges
 * @returns {Array.<Object>}
 */


function convertToRanges(timeRanges) {
  var ranges = [];

  for (var i = 0; i < timeRanges.length; i++) {
    ranges.push({
      start: timeRanges.start(i),
      end: timeRanges.end(i)
    });
  }

  return ranges;
}
/**
 * Get range object of a specific time in a TimeRanges object.
 * @param {TimeRanges} timeRanges
 * @returns {Object}
 */


function getRange(timeRanges, time) {
  for (var i = timeRanges.length - 1; i >= 0; i--) {
    var start = timeRanges.start(i);

    if (time >= start) {
      var end = timeRanges.end(i);

      if (time < end) {
        return {
          start: start,
          end: end
        };
      }
    }
  }

  return null;
}
/**
 * Get gap from a specific time until the start of the next Range.
 * @param {TimeRanges} timeRanges
 * @param {Number} time
 * @returns {Number}
 */


function getNextRangeGap(timeRanges, time) {
  var len = timeRanges.length;

  for (var i = 0; i < len; i++) {
    var start = timeRanges.start(i);

    if (time < start) {
      return start - time;
    }
  }

  return Infinity;
}
/**
 * @param {TimeRanges} timeRanges
 * @param {Number} time
 * @returns {Object} - Object with two properties:
 *   - outerRanges {Array.<Object>}: every ranges which does not contain the
 *     given time.
 *   - innerRange {Object|null}: the range which contain the given time.
 */


function getInnerAndOuterTimeRanges(timeRanges, time) {
  var innerRange = null;
  var outerRanges = [];

  for (var i = 0; i < timeRanges.length; i++) {
    var start = timeRanges.start(i);
    var end = timeRanges.end(i);

    if (time < start || time >= end) {
      outerRanges.push({
        start: start,
        end: end
      });
    } else {
      innerRange = {
        start: start,
        end: end
      };
    }
  }

  return {
    outerRanges: outerRanges,
    innerRange: innerRange
  };
}
/**
 * Get "size" (difference between end and start) of the range containing the
 * given time. 0 if the range is not found.
 * @param {TimeRanges} timeRanges
 * @param {Number} currentTime
 * @returns {Number}
 */


function getSizeOfRange(timeRanges, currentTime) {
  var range = getRange(timeRanges, currentTime);
  return range !== null ? range.end - range.start : 0;
}
/**
 * Get "currently played" (difference between time given and start) of the
 * range containing the given time. 0 if the range is not found.
 * @param {TimeRanges} timeRanges
 * @param {Number} currentTime
 * @returns {Number}
 */


function getPlayedSizeOfRange(timeRanges, currentTime) {
  var range = getRange(timeRanges, currentTime);
  return range !== null ? currentTime - range.start : 0;
}
/**
 * Get "left to play" (difference between end and time given) of the range
 * containing the given time. Infinity if the range is not found.
 * @param {TimeRanges} timeRanges
 * @param {Number} currentTime
 * @returns {Number}
 */


function getLeftSizeOfRange(timeRanges, currentTime) {
  var range = getRange(timeRanges, currentTime);
  return range !== null ? range.end - currentTime : Infinity;
}
/**
 * Insert a range object into an array of ranges objects, at the right place.
 * /!\ Mutate the array of ranges.
 * @param {Array.<Object>} ranges
 * @param {Object} rangeToAddArg
 * @returns {Array.<Object>}
 */


function insertInto(ranges, rangeToAddArg) {
  if (rangeToAddArg.start === rangeToAddArg.end) {
    return ranges;
  }

  var rangeToAdd = rangeToAddArg; // For each present range check if we need to:
  // - In case we are overlapping or contiguous:
  //   - if added range has the same bitrate as the overlapped or
  //     contiguous one, we can merge themcurrentRange
  //   - if added range has a different bitrate we need to insert it
  //     in place
  // - Need to insert in place, we we are completely, not overlapping
  //   and not contiguous in between two ranges.

  var index = 0;

  for (; index < ranges.length; index++) {
    var range = ranges[index];
    var overlapping = areRangesOverlapping(rangeToAdd, range);
    var contiguous = areRangesNearlyContiguous(rangeToAdd, range); // We assume ranges are ordered and two ranges can not be
    // completely overlapping.

    if (overlapping || contiguous) {
      rangeToAdd = createRangeUnion(rangeToAdd, range);
      ranges.splice(index--, 1);
    } else {
      // Check the case for which there is no more to do
      if (index === 0) {
        if (isBefore(rangeToAdd, ranges[0])) {
          // First index, and we are completely before that range (and
          // not contiguous, nor overlapping). We just need to be
          // inserted here.
          break;
        }
      } else {
        if (isBefore(ranges[index - 1], rangeToAdd) && isBefore(rangeToAdd, range)) {
          // We are exactly after the current previous range, and
          // before the current range, while not overlapping with none
          // of them. Insert here.
          break;
        }
      }
    }
  } // Now that we are sure we don't overlap with any range, just add it.


  ranges.splice(index, 0, rangeToAdd);
  return mergeContiguousRanges(removeEmptyRanges(ranges));
}
/**
 * Returns range, from a range objects array overlapping with a range given
 * in argument. null if none is found.
 * @param {Object} range
 * @param {Array.<Object>} ranges
 * @returns {Array.<Object>}
 */


function findOverlappingRanges(range, ranges) {
  var resultingRanges = [];

  for (var i = 0; i < ranges.length; i++) {
    if (areRangesOverlapping(range, ranges[i])) {
      resultingRanges.push(ranges[i]);
    }
  }

  return resultingRanges;
}
/**
 * Returns only the intersection between the two ranges, from the first
 * ranges argument given.
 * @param {Array.<Range>} ranges1
 * @param {Array.<Range>} ranges2
 * @returns {Array.<Range>}
 */


function keepRangeIntersection(ranges1, ranges2) {
  var result = [];

  for (var i = 0; i < ranges1.length; i++) {
    var range = ranges1[i];
    var overlappingRanges = findOverlappingRanges(range, ranges2);

    if (overlappingRanges.length > 0) {
      for (var j = 0; j < overlappingRanges.length; j++) {
        var overlappingRange = overlappingRanges[j];
        result.push({
          start: Math.max(range.start, overlappingRange.start),
          end: Math.min(range.end, overlappingRange.end)
        });
      }
    }
  }

  return result;
}
/**
 * Exclude from the `baseRanges` everything that is in `rangesToExclude`.
 * Example:
 *
 * Let's say we have the following base ranges:
 *       |==========|        |===============| |======|    |==========|
 *
 * From which we want to "exclude" the following ranges:
 *          |=========| |==|        |===|  |=====|
 *
 * We will obtain the first ranges from which we remove the second ranges:
 * -----------------------------------------------------------------------
 *       |==========|        |===============| |======|    |==========|
 *          |=========| |==|        |===|  |=====|
 * _______________________________________________________________________
 *                                     |
 *                                     |
 *                                     V
 * -----------------------------------------------------------------------
 *       |==|                |======|   |==|     |====|    |==========|
 * -----------------------------------------------------------------------
 *
 * @param {Array.<Object} baseRanges
 * @param {Array.<Object} rangesToExclude
 * @return {Array.<Object>}
 */


function excludeFromRanges(baseRanges, rangesToExclude) {
  var result = []; // For every range in `baseRanges`, find overlapping ranges with
  // `rangesToExclude` and remove them.

  for (var i = 0; i < baseRanges.length; i++) {
    var range = baseRanges[i];
    var intersections = [];
    var overlappingRanges = findOverlappingRanges(range, rangesToExclude);

    if (overlappingRanges.length > 0) {
      for (var j = 0; j < overlappingRanges.length; j++) {
        var overlappingRange = overlappingRanges[j];
        intersections.push({
          start: Math.max(range.start, overlappingRange.start),
          end: Math.min(range.end, overlappingRange.end)
        });
      }
    }

    if (intersections.length === 0) {
      result.push(range);
    } else {
      var lastStart = range.start;

      for (var _j = 0; _j < intersections.length; _j++) {
        if (intersections[_j].start > lastStart) {
          result.push({
            start: lastStart,
            end: intersections[_j].start
          });
        }

        lastStart = intersections[_j].end;
      }

      if (lastStart < range.end) {
        result.push({
          start: lastStart,
          end: range.end
        });
      }
    }
  }

  return result;
}
/**
 * Returns `true` if the given `time` is available in the TimeRanges object
 * given.
 * Returns `false` otherwise.
 * @param {TimeRanges} ranges
 * @param {Number} time
 * @returns {boolean}
 */


function isTimeInTimeRanges(ranges, time) {
  for (var i = 0; i < ranges.length; i++) {
    if (ranges.start(i) <= time && time < ranges.end(i)) {
      return true;
    }
  }

  return false;
}



/***/ }),

/***/ 4597:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "ZP": () => /* binding */ utils_request
});

// UNUSED EXPORTS: fetchIsSupported, fetchRequest, xhr

// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/Observable.js + 3 modules
var Observable = __webpack_require__(4379);
// EXTERNAL MODULE: ./src/config.ts
var config = __webpack_require__(944);
// EXTERNAL MODULE: ./src/errors/request_error.ts
var request_error = __webpack_require__(9105);
// EXTERNAL MODULE: ./src/utils/is_non_empty_string.ts
var is_non_empty_string = __webpack_require__(6923);
// EXTERNAL MODULE: ./src/utils/is_null_or_undefined.ts
var is_null_or_undefined = __webpack_require__(1946);
;// CONCATENATED MODULE: ./src/utils/request/xhr.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





var DEFAULT_REQUEST_TIMEOUT = config/* default.DEFAULT_REQUEST_TIMEOUT */.Z.DEFAULT_REQUEST_TIMEOUT;
var DEFAULT_RESPONSE_TYPE = "json";
/**
 * @param {string} data
 * @returns {Object|null}
 */

function toJSONForIE(data) {
  try {
    return JSON.parse(data);
  } catch (e) {
    return null;
  }
}

function request(options) {
  var requestOptions = {
    url: options.url,
    headers: options.headers,
    responseType: (0,is_null_or_undefined/* default */.Z)(options.responseType) ? DEFAULT_RESPONSE_TYPE : options.responseType,
    timeout: (0,is_null_or_undefined/* default */.Z)(options.timeout) ? DEFAULT_REQUEST_TIMEOUT : options.timeout
  };
  return new Observable/* Observable */.y(function (obs) {
    var url = requestOptions.url,
        headers = requestOptions.headers,
        responseType = requestOptions.responseType,
        timeout = requestOptions.timeout;
    var xhr = new XMLHttpRequest();
    xhr.open("GET", url, true);

    if (timeout >= 0) {
      xhr.timeout = timeout;
    }

    xhr.responseType = responseType;

    if (xhr.responseType === "document") {
      xhr.overrideMimeType("text/xml");
    }

    if (!(0,is_null_or_undefined/* default */.Z)(headers)) {
      var _headers = headers;

      for (var key in _headers) {
        if (_headers.hasOwnProperty(key)) {
          xhr.setRequestHeader(key, _headers[key]);
        }
      }
    }

    var sendingTime = performance.now();

    xhr.onerror = function onXHRError() {
      obs.error(new request_error/* default */.Z(url, xhr.status, "ERROR_EVENT", xhr));
    };

    xhr.ontimeout = function onXHRTimeout() {
      obs.error(new request_error/* default */.Z(url, xhr.status, "TIMEOUT", xhr));
    };

    if (options.sendProgressEvents === true) {
      xhr.onprogress = function onXHRProgress(event) {
        var currentTime = performance.now();
        obs.next({
          type: "progress",
          value: {
            url: url,
            duration: currentTime - sendingTime,
            sendingTime: sendingTime,
            currentTime: currentTime,
            size: event.loaded,
            totalSize: event.total
          }
        });
      };
    }

    xhr.onload = function onXHRLoad(event) {
      if (xhr.readyState === 4) {
        if (xhr.status >= 200 && xhr.status < 300) {
          var receivedTime = performance.now();
          var totalSize = xhr.response instanceof ArrayBuffer ? xhr.response.byteLength : event.total;
          var status = xhr.status;
          var loadedResponseType = xhr.responseType;

          var _url = (0,is_non_empty_string/* default */.Z)(xhr.responseURL) ? xhr.responseURL : url;

          var responseData;

          if (loadedResponseType === "json") {
            // IE bug where response is string with responseType json
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            responseData = typeof xhr.response === "object" ? xhr.response : toJSONForIE(xhr.responseText);
          } else {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            responseData = xhr.response;
          }

          if ((0,is_null_or_undefined/* default */.Z)(responseData)) {
            obs.error(new request_error/* default */.Z(url, xhr.status, "PARSE_ERROR", xhr));
            return;
          }

          obs.next({
            type: "data-loaded",
            value: {
              status: status,
              url: _url,
              responseType: loadedResponseType,
              sendingTime: sendingTime,
              receivedTime: receivedTime,
              duration: receivedTime - sendingTime,
              size: totalSize,
              responseData: responseData
            }
          });
          obs.complete();
        } else {
          obs.error(new request_error/* default */.Z(url, xhr.status, "ERROR_HTTP_CODE", xhr));
        }
      }
    };

    xhr.send();
    return function () {
      if (!(0,is_null_or_undefined/* default */.Z)(xhr) && xhr.readyState !== 4) {
        xhr.abort();
      }
    };
  });
}

/* harmony default export */ const xhr = (request);
;// CONCATENATED MODULE: ./src/utils/request/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/* harmony default export */ const utils_request = (xhr);


/***/ }),

/***/ 9829:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ resolveURL,
/* harmony export */   "f": () => /* binding */ normalizeBaseURL
/* harmony export */ });
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Scheme part of an url (e.g. "http://").
var schemeRe = /^(?:[a-z]+:)?\/\//i; // Captures "/../" or "/./".

var selfDirRe = /\/\.{1,2}\//;
/**
 * Resolve self directory and previous directory references to obtain a
 * "normalized" url.
 * @example "https://foo.bar/baz/booz/../biz" => "https://foo.bar/baz/biz"
 * @param {string} url
 * @returns {string}
 */

function _normalizeUrl(url) {
  // fast path if no ./ or ../ are present in the url
  if (!selfDirRe.test(url)) {
    return url;
  }

  var newUrl = [];
  var oldUrl = url.split("/");

  for (var i = 0, l = oldUrl.length; i < l; i++) {
    if (oldUrl[i] === "..") {
      newUrl.pop();
    } else if (oldUrl[i] === ".") {
      continue;
    } else {
      newUrl.push(oldUrl[i]);
    }
  }

  return newUrl.join("/");
}
/**
 * Construct an url from the arguments given.
 * Basically:
 *   - The last arguments that contains a scheme (e.g. "http://") is the base
 *     of the url.
 *   - every subsequent string arguments are concatened to it.
 * @param {...string|undefined} args
 * @returns {string}
 */


function resolveURL() {
  var len = arguments.length;

  if (len === 0) {
    return "";
  }

  var base = "";

  for (var i = 0; i < len; i++) {
    var part = i < 0 || arguments.length <= i ? undefined : arguments[i];

    if (typeof part !== "string" || part === "") {
      continue;
    }

    if (schemeRe.test(part)) {
      base = part;
    } else {
      // trim if begins with "/"
      if (part[0] === "/") {
        part = part.substring(1);
      } // trim if ends with "/"


      if (base[base.length - 1] === "/") {
        base = base.substring(0, base.length - 1);
      }

      base = base + "/" + part;
    }
  }

  return _normalizeUrl(base);
}
/**
 * Remove string after the last '/'.
 * @param {string} url
 * @returns {string}
 */

function normalizeBaseURL(url) {
  var indexOfLastSlash = url.lastIndexOf("/");

  if (indexOfLastSlash < 0) {
    return url;
  }

  if (schemeRe.test(url)) {
    var firstSlashIndex = url.indexOf("/");

    if (firstSlashIndex >= 0 && indexOfLastSlash === firstSlashIndex + 1) {
      // The "/" detected is actually the one from the protocol part of the URL
      // ("https://")
      return url;
    }
  }

  var indexOfQuestionMark = url.indexOf("?");

  if (indexOfQuestionMark >= 0 && indexOfQuestionMark < indexOfLastSlash) {
    // There are query parameters. Let's ignore them and re-run the logic
    // without
    return normalizeBaseURL(url.substring(0, indexOfQuestionMark));
  }

  return url.substring(0, indexOfLastSlash + 1);
}



/***/ }),

/***/ 5561:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ tryCatch
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4944);
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @param {Function} func - A function you want to execute
 * @param {*} argsForFunc - The function's argument
 * @returns {*} - If it fails, returns a throwing Observable, else the
 * function's result (which should be, in most cases, an Observable).
 */

function tryCatch(func, argsForFunc) {
  try {
    return func(argsForFunc);
  } catch (e) {
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_0__/* .throwError */ ._)(e);
  }
}

/***/ }),

/***/ 9252:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ startsWith
/* harmony export */ });
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * String.prototype.startsWith ponyfill.
 * Indicates Whether a string starts with another substring.
 *
 * Inspired from MDN polyfill, but ponyfilled instead.
 * @param {string} completeString
 * @param {string} searchString
 * @param {number} [position]
 * @returns {boolean}
 */
function startsWith(completeString, searchString, position) {
  // eslint-disable-next-line @typescript-eslint/unbound-method
  // eslint-disable-next-line no-restricted-properties
  if (typeof String.prototype.startsWith === "function") {
    // eslint-disable-next-line no-restricted-properties
    return completeString.startsWith(searchString, position);
  }

  var initialPosition = typeof position === "number" ? Math.max(position, 0) : 0;
  return completeString.substring(initialPosition, initialPosition + searchString.length) === searchString;
}

/***/ }),

/***/ 3635:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ci": () => /* binding */ bytesToHex,
/* harmony export */   "nr": () => /* binding */ hexToBytes,
/* harmony export */   "tG": () => /* binding */ strToUtf8,
/* harmony export */   "uR": () => /* binding */ utf8ToStr,
/* harmony export */   "TZ": () => /* binding */ strToUtf16LE,
/* harmony export */   "wV": () => /* binding */ utf16LEToStr,
/* harmony export */   "wO": () => /* binding */ guidToUuid
/* harmony export */ });
/* unused harmony exports strToBeUtf16, beUtf16ToStr */
/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3887);
/* harmony import */ var _assert__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(811);
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var hasTextDecoder = typeof window === "object" && typeof window.TextDecoder === "function";
var hasTextEncoder = typeof window === "object" && typeof window.TextEncoder === "function";
/**
 * Convert a string to an Uint8Array containing the corresponding UTF-16 code
 * units in little-endian.
 * @param {string} str
 * @returns {Uint8Array}
 */

function strToUtf16LE(str) {
  var buffer = new ArrayBuffer(str.length * 2);
  var res = new Uint8Array(buffer);

  for (var i = 0; i < res.length; i += 2) {
    var value = str.charCodeAt(i / 2);
    res[i] = value & 0xFF;
    res[i + 1] = value >> 8 & 0xFF;
  }

  return res;
}
/**
 * Convert a string to an Uint8Array containing the corresponding UTF-16 code
 * units in little-endian.
 * @param {string} str
 * @returns {Uint8Array}
 */


function strToBeUtf16(str) {
  var buffer = new ArrayBuffer(str.length * 2);
  var res = new Uint8Array(buffer);

  for (var i = 0; i < res.length; i += 2) {
    var value = str.charCodeAt(i / 2);
    res[i + 1] = value & 0xFF;
    res[i] = value >> 8 & 0xFF;
  }

  return res;
}
/**
 * Construct string from the little-endian UTF-16 code units given.
 * @param {Uint8Array} bytes
 * @returns {string}
 */


function utf16LEToStr(bytes) {
  if (hasTextDecoder) {
    try {
      // instanciation throws if the encoding is unsupported
      var decoder = new TextDecoder("utf-16le");
      return decoder.decode(bytes);
    } catch (e) {
      _log__WEBPACK_IMPORTED_MODULE_0__/* .default.warn */ .Z.warn("Utils: could not use TextDecoder to parse UTF-16LE, " + "fallbacking to another implementation", e);
    }
  }

  var str = "";

  for (var i = 0; i < bytes.length; i += 2) {
    str += String.fromCharCode((bytes[i + 1] << 8) + bytes[i]);
  }

  return str;
}
/**
 * Construct string from the little-endian UTF-16 code units given.
 * @param {Uint8Array} bytes
 * @returns {string}
 */


function beUtf16ToStr(bytes) {
  if (hasTextDecoder) {
    try {
      // instanciation throws if the encoding is unsupported
      var decoder = new TextDecoder("utf-16be");
      return decoder.decode(bytes);
    } catch (e) {
      log.warn("Utils: could not use TextDecoder to parse UTF-16BE, " + "fallbacking to another implementation", e);
    }
  }

  var str = "";

  for (var i = 0; i < bytes.length; i += 2) {
    str += String.fromCharCode((bytes[i] << 8) + bytes[i + 1]);
  }

  return str;
}
/**
 * Convert a string to an Uint8Array containing the corresponding UTF-8 code
 * units.
 * @param {string} str
 * @returns {Uint8Array}
 */


function strToUtf8(str) {
  if (hasTextEncoder) {
    try {
      var encoder = new TextEncoder();
      return encoder.encode(str);
    } catch (e) {
      _log__WEBPACK_IMPORTED_MODULE_0__/* .default.warn */ .Z.warn("Utils: could not use TextEncoder to encode string into UTF-8, " + "fallbacking to another implementation", e);
    }
  } // http://stackoverflow.com/a/13691499 provides an ugly but functional solution.
  // (Note you have to dig deeper to understand it but I have more faith in
  // stackoverflow not going down in the future so I leave that link.)
  // Briefly said, `utf8Str` will contain a version of `str` where every
  // non-ASCII characters will be replaced by an escape sequence of the
  // corresponding representation of those characters in UTF-8.
  // It does sound weird and unnecessarily complicated, but it works!
  //
  // Here is actually what happens with more words. We will rely on two browser
  // APIs:
  //
  //   - `encodeURIComponent` will take a string and convert the non-ASCII
  //     characters in it into the percent-encoded version of the corresponding
  //     UTF-8 bytes
  //     Example: encodeURIComponent("é") => 0xC3 0xA9 => `"%C3%A9"`
  //
  //   - `unescape` unescapes (so far so good) a percent-encoded string. But it
  //     does it in a really simple way: percent-encoded byte by percent-encoded
  //     byte into the corresponding extended ASCII representation on 8 bits.
  //     As a result, we end-up with a string which actually contains instead of
  //     each of its original characters, the UTF-8 code units (8 bits) of
  //     those characters.
  //     Let's take our previous `"é" => "%C3%A9"` example. Here we would get:
  //     unecape("%C3%A9") => "\u00c3\u00a9" === "Ã©" (in extended ASCII)
  //
  // By iterating on the resulting string, we will then be able to generate a
  // Uint8Array containing the UTF-8 representation of that original string, by
  // just calling the charCodeAt API on it.


  var utf8Str;
  var pcStr = encodeURIComponent(str); // As "unescape" is a deprecated function we want to declare a fallback in the
  // case a browser decide to not implement it.

  if (typeof unescape === "function") {
    utf8Str = unescape(pcStr);
  } else {
    // Let's implement a simple unescape function (got to admit it was for the challenge)
    // http://ecma-international.org/ecma-262/9.0/#sec-unescape-string
    var isHexChar = /[0-9a-fA-F]/;
    var pcStrLen = pcStr.length;
    utf8Str = "";

    for (var i = 0; i < pcStr.length; i++) {
      var wasPercentEncoded = false;

      if (pcStr[i] === "%") {
        if (i <= pcStrLen - 6 && pcStr[i + 1] === "u" && isHexChar.test(pcStr[i + 2]) && isHexChar.test(pcStr[i + 3]) && isHexChar.test(pcStr[i + 4]) && isHexChar.test(pcStr[i + 5])) {
          var charCode = parseInt(pcStr.substring(i + 1, i + 6), 16);
          utf8Str += String.fromCharCode(charCode);
          wasPercentEncoded = true;
          i += 5; // Skip the next 5 chars
        } else if (i <= pcStrLen - 3 && isHexChar.test(pcStr[i + 1]) && isHexChar.test(pcStr[i + 2])) {
          var _charCode = parseInt(pcStr.substring(i + 1, i + 3), 16);

          utf8Str += String.fromCharCode(_charCode);
          wasPercentEncoded = true;
          i += 2; // Skip the next 2 chars
        }
      }

      if (!wasPercentEncoded) {
        utf8Str += pcStr[i];
      }
    }
  } // Now let's just build our array from every other bytes of that string's
  // UTF-16 representation


  var res = new Uint8Array(utf8Str.length);

  for (var _i = 0; _i < utf8Str.length; _i++) {
    res[_i] = utf8Str.charCodeAt(_i) & 0xFF; // first byte should be 0x00 anyway
  }

  return res;
}
/**
 * Creates a new string from the given array of char codes.
 * @param {Uint8Array} args
 * @returns {string}
 */


function stringFromCharCodes(args) {
  var max = 16000;
  var ret = "";

  for (var i = 0; i < args.length; i += max) {
    var subArray = args.subarray(i, i + max); // NOTE: ugly I know, but TS is problematic here (you can try)

    ret += String.fromCharCode.apply(null, subArray);
  }

  return ret;
}
/**
 * Transform an integer into an hexadecimal string of the given length, padded
 * to the left with `0` if needed.
 * @example
 * ```
 * intToHex(5, 4); // => "0005"
 * intToHex(5, 2); // => "05"
 * intToHex(10, 1); // => "a"
 * intToHex(268, 3); // => "10c"
 * intToHex(4584, 6) // => "0011e8"
 * intToHex(123456, 4); // => "1e240" (we do nothing when going over 4 chars)
 * ```
 * @param {number} num
 * @param {number} size
 * @returns {string}
 */


function intToHex(num, size) {
  var toStr = num.toString(16);
  return toStr.length >= size ? toStr : new Array(size - toStr.length + 1).join("0") + toStr;
}
/**
 * Creates a string from the given Uint8Array containing utf-8 code units.
 * @param {Uint8Array} bytes
 * @returns {string}
 */


function utf8ToStr(data) {
  if (hasTextDecoder) {
    try {
      // TextDecoder use UTF-8 by default
      var decoder = new TextDecoder();
      return decoder.decode(data);
    } catch (e) {
      _log__WEBPACK_IMPORTED_MODULE_0__/* .default.warn */ .Z.warn("Utils: could not use TextDecoder to parse UTF-8, " + "fallbacking to another implementation", e);
    }
  }

  var uint8 = data; // If present, strip off the UTF-8 BOM.

  if (uint8[0] === 0xEF && uint8[1] === 0xBB && uint8[2] === 0xBF) {
    uint8 = uint8.subarray(3);
  } // We're basically doing strToUtf8 in reverse.
  // You can look at that other function for the whole story.
  // Generate string containing escaped UTF-8 code units


  var utf8Str = stringFromCharCodes(uint8);
  var escaped;

  if (typeof escape === "function") {
    // Transform UTF-8 escape sequence into percent-encoded escape sequences.
    escaped = escape(utf8Str);
  } else {
    // Let's implement a simple escape function
    // http://ecma-international.org/ecma-262/9.0/#sec-escape-string
    var nonEscapedChar = /[A-Za-z0-9*_\+-\.\/]/;
    escaped = "";

    for (var i = 0; i < utf8Str.length; i++) {
      if (nonEscapedChar.test(utf8Str[i])) {
        escaped += utf8Str[i];
      } else {
        var charCode = utf8Str.charCodeAt(i);
        escaped += charCode >= 256 ? "%u" + intToHex(charCode, 4) : "%" + intToHex(charCode, 2);
      }
    }
  } // Decode the percent-encoded UTF-8 string into the proper JS string.
  // Example: "g#%E3%82%AC" -> "g#€"


  return decodeURIComponent(escaped);
}
/**
 * Convert hex codes in a string form into the corresponding bytes.
 * @param {string} str
 * @returns {Uint8Array}
 * @throws TypeError - str.length is odd
 */


function hexToBytes(str) {
  var len = str.length;
  var arr = new Uint8Array(len / 2);

  for (var i = 0, j = 0; i < len; i += 2, j++) {
    arr[j] = parseInt(str.substring(i, i + 2), 16) & 0xFF;
  }

  return arr;
}
/**
 * Convert bytes into the corresponding hex string, with the possibility
 * to add a separator.
 * @param {Uint8Array} bytes
 * @param {string} [sep=""] - separator. Separate each two hex character.
 * @returns {string}
 */


function bytesToHex(bytes, sep) {
  if (sep === void 0) {
    sep = "";
  }

  var hex = "";

  for (var i = 0; i < bytes.byteLength; i++) {
    hex += (bytes[i] >>> 4).toString(16);
    hex += (bytes[i] & 0xF).toString(16);

    if (sep.length > 0 && i < bytes.byteLength - 1) {
      hex += sep;
    }
  }

  return hex;
}
/**
 * Convert little-endian GUID into big-endian UUID.
 * @param {Uint8Array} guid
 * @returns {Uint8Array} - uuid
 * @throws AssertionError - The guid length is not 16
 */


function guidToUuid(guid) {
  (0,_assert__WEBPACK_IMPORTED_MODULE_1__/* .default */ .Z)(guid.length === 16, "GUID length should be 16");
  var p1A = guid[0];
  var p1B = guid[1];
  var p1C = guid[2];
  var p1D = guid[3];
  var p2A = guid[4];
  var p2B = guid[5];
  var p3A = guid[6];
  var p3B = guid[7];
  var uuid = new Uint8Array(16); // swapping byte endian on 4 bytes
  // [1, 2, 3, 4] => [4, 3, 2, 1]

  uuid[0] = p1D;
  uuid[1] = p1C;
  uuid[2] = p1B;
  uuid[3] = p1A; // swapping byte endian on 2 bytes
  // [5, 6] => [6, 5]

  uuid[4] = p2B;
  uuid[5] = p2A; // swapping byte endian on 2 bytes
  // [7, 8] => [8, 7]

  uuid[6] = p3B;
  uuid[7] = p3A;
  uuid.set(guid.subarray(8, 16), 8);
  return uuid;
}



/***/ }),

/***/ 5278:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ takeFirstSet
/* harmony export */ });
/* harmony import */ var _is_null_or_undefined__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1946);
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function takeFirstSet() {
  var i = 0;

  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  var len = args.length;

  while (i < len) {
    var arg = args[i];

    if (!(0,_is_null_or_undefined__WEBPACK_IMPORTED_MODULE_0__/* .default */ .Z)(arg)) {
      return arg;
    }

    i++;
  }

  return undefined;
}

/***/ }),

/***/ 8806:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ warnOnce
/* harmony export */ });
/* harmony import */ var _array_includes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7714);
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var WARNED_MESSAGES = [];
/**
 * Perform a console.warn only once in the application lifetime.
 *
 * Useful for deprecated messages, for example.
 *
 * @param {string} message
 */

function warnOnce(message) {
  if (!(0,_array_includes__WEBPACK_IMPORTED_MODULE_0__/* .default */ .Z)(WARNED_MESSAGES, message)) {
    // eslint-disable-next-line no-console
    console.warn(message);
    WARNED_MESSAGES.push(message);
  }
}

/***/ }),

/***/ 7473:
/***/ ((module) => {

"use strict";


var ensureCallable = function (fn) {
	if (typeof fn !== 'function') throw new TypeError(fn + " is not a function");
	return fn;
};

var byObserver = function (Observer) {
	var node = document.createTextNode(''), queue, currentQueue, i = 0;
	new Observer(function () {
		var callback;
		if (!queue) {
			if (!currentQueue) return;
			queue = currentQueue;
		} else if (currentQueue) {
			queue = currentQueue.concat(queue);
		}
		currentQueue = queue;
		queue = null;
		if (typeof currentQueue === 'function') {
			callback = currentQueue;
			currentQueue = null;
			callback();
			return;
		}
		node.data = (i = ++i % 2); // Invoke other batch, to handle leftover callbacks in case of crash
		while (currentQueue) {
			callback = currentQueue.shift();
			if (!currentQueue.length) currentQueue = null;
			callback();
		}
	}).observe(node, { characterData: true });
	return function (fn) {
		ensureCallable(fn);
		if (queue) {
			if (typeof queue === 'function') queue = [queue, fn];
			else queue.push(fn);
			return;
		}
		queue = fn;
		node.data = (i = ++i % 2);
	};
};

module.exports = (function () {
	// Node.js
	if ((typeof process === 'object') && process && (typeof process.nextTick === 'function')) {
		return process.nextTick;
	}

	// queueMicrotask
	if (typeof queueMicrotask === "function") {
		return function (cb) { queueMicrotask(ensureCallable(cb)); };
	}

	// MutationObserver
	if ((typeof document === 'object') && document) {
		if (typeof MutationObserver === 'function') return byObserver(MutationObserver);
		if (typeof WebKitMutationObserver === 'function') return byObserver(WebKitMutationObserver);
	}

	// W3C Draft
	// http://dvcs.w3.org/hg/webperf/raw-file/tip/specs/setImmediate/Overview.html
	if (typeof setImmediate === 'function') {
		return function (cb) { setImmediate(ensureCallable(cb)); };
	}

	// Wide available standard
	if ((typeof setTimeout === 'function') || (typeof setTimeout === 'object')) {
		return function (cb) { setTimeout(ensureCallable(cb), 0); };
	}

	return null;
}());


/***/ }),

/***/ 8555:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var PENDING = 'pending';
var SETTLED = 'settled';
var FULFILLED = 'fulfilled';
var REJECTED = 'rejected';
var NOOP = function () {};
var isNode = typeof __webpack_require__.g !== 'undefined' && typeof __webpack_require__.g.process !== 'undefined' && typeof __webpack_require__.g.process.emit === 'function';

var asyncSetTimer = typeof setImmediate === 'undefined' ? setTimeout : setImmediate;
var asyncQueue = [];
var asyncTimer;

function asyncFlush() {
	// run promise callbacks
	for (var i = 0; i < asyncQueue.length; i++) {
		asyncQueue[i][0](asyncQueue[i][1]);
	}

	// reset async asyncQueue
	asyncQueue = [];
	asyncTimer = false;
}

function asyncCall(callback, arg) {
	asyncQueue.push([callback, arg]);

	if (!asyncTimer) {
		asyncTimer = true;
		asyncSetTimer(asyncFlush, 0);
	}
}

function invokeResolver(resolver, promise) {
	function resolvePromise(value) {
		resolve(promise, value);
	}

	function rejectPromise(reason) {
		reject(promise, reason);
	}

	try {
		resolver(resolvePromise, rejectPromise);
	} catch (e) {
		rejectPromise(e);
	}
}

function invokeCallback(subscriber) {
	var owner = subscriber.owner;
	var settled = owner._state;
	var value = owner._data;
	var callback = subscriber[settled];
	var promise = subscriber.then;

	if (typeof callback === 'function') {
		settled = FULFILLED;
		try {
			value = callback(value);
		} catch (e) {
			reject(promise, e);
		}
	}

	if (!handleThenable(promise, value)) {
		if (settled === FULFILLED) {
			resolve(promise, value);
		}

		if (settled === REJECTED) {
			reject(promise, value);
		}
	}
}

function handleThenable(promise, value) {
	var resolved;

	try {
		if (promise === value) {
			throw new TypeError('A promises callback cannot return that same promise.');
		}

		if (value && (typeof value === 'function' || typeof value === 'object')) {
			// then should be retrieved only once
			var then = value.then;

			if (typeof then === 'function') {
				then.call(value, function (val) {
					if (!resolved) {
						resolved = true;

						if (value === val) {
							fulfill(promise, val);
						} else {
							resolve(promise, val);
						}
					}
				}, function (reason) {
					if (!resolved) {
						resolved = true;

						reject(promise, reason);
					}
				});

				return true;
			}
		}
	} catch (e) {
		if (!resolved) {
			reject(promise, e);
		}

		return true;
	}

	return false;
}

function resolve(promise, value) {
	if (promise === value || !handleThenable(promise, value)) {
		fulfill(promise, value);
	}
}

function fulfill(promise, value) {
	if (promise._state === PENDING) {
		promise._state = SETTLED;
		promise._data = value;

		asyncCall(publishFulfillment, promise);
	}
}

function reject(promise, reason) {
	if (promise._state === PENDING) {
		promise._state = SETTLED;
		promise._data = reason;

		asyncCall(publishRejection, promise);
	}
}

function publish(promise) {
	promise._then = promise._then.forEach(invokeCallback);
}

function publishFulfillment(promise) {
	promise._state = FULFILLED;
	publish(promise);
}

function publishRejection(promise) {
	promise._state = REJECTED;
	publish(promise);
	if (!promise._handled && isNode) {
		__webpack_require__.g.process.emit('unhandledRejection', promise._data, promise);
	}
}

function notifyRejectionHandled(promise) {
	__webpack_require__.g.process.emit('rejectionHandled', promise);
}

/**
 * @class
 */
function Promise(resolver) {
	if (typeof resolver !== 'function') {
		throw new TypeError('Promise resolver ' + resolver + ' is not a function');
	}

	if (this instanceof Promise === false) {
		throw new TypeError('Failed to construct \'Promise\': Please use the \'new\' operator, this object constructor cannot be called as a function.');
	}

	this._then = [];

	invokeResolver(resolver, this);
}

Promise.prototype = {
	constructor: Promise,

	_state: PENDING,
	_then: null,
	_data: undefined,
	_handled: false,

	then: function (onFulfillment, onRejection) {
		var subscriber = {
			owner: this,
			then: new this.constructor(NOOP),
			fulfilled: onFulfillment,
			rejected: onRejection
		};

		if ((onRejection || onFulfillment) && !this._handled) {
			this._handled = true;
			if (this._state === REJECTED && isNode) {
				asyncCall(notifyRejectionHandled, this);
			}
		}

		if (this._state === FULFILLED || this._state === REJECTED) {
			// already resolved, call callback async
			asyncCall(invokeCallback, subscriber);
		} else {
			// subscribe
			this._then.push(subscriber);
		}

		return subscriber.then;
	},

	catch: function (onRejection) {
		return this.then(null, onRejection);
	}
};

Promise.all = function (promises) {
	if (!Array.isArray(promises)) {
		throw new TypeError('You must pass an array to Promise.all().');
	}

	return new Promise(function (resolve, reject) {
		var results = [];
		var remaining = 0;

		function resolver(index) {
			remaining++;
			return function (value) {
				results[index] = value;
				if (!--remaining) {
					resolve(results);
				}
			};
		}

		for (var i = 0, promise; i < promises.length; i++) {
			promise = promises[i];

			if (promise && typeof promise.then === 'function') {
				promise.then(resolver(i), reject);
			} else {
				results[i] = promise;
			}
		}

		if (!remaining) {
			resolve(results);
		}
	});
};

Promise.race = function (promises) {
	if (!Array.isArray(promises)) {
		throw new TypeError('You must pass an array to Promise.race().');
	}

	return new Promise(function (resolve, reject) {
		for (var i = 0, promise; i < promises.length; i++) {
			promise = promises[i];

			if (promise && typeof promise.then === 'function') {
				promise.then(resolve, reject);
			} else {
				resolve(promise);
			}
		}
	});
};

Promise.resolve = function (value) {
	if (value && typeof value === 'object' && value.constructor === Promise) {
		return value;
	}

	return new Promise(function (resolve) {
		resolve(value);
	});
};

Promise.reject = function (reason) {
	return new Promise(function (resolve, reject) {
		reject(reason);
	});
};

module.exports = Promise;


/***/ }),

/***/ 5666:
/***/ ((module) => {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   true ? module.exports : 0
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}


/***/ }),

/***/ 2632:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "P": () => /* binding */ Notification
/* harmony export */ });
/* unused harmony export NotificationKind */
/* harmony import */ var _observable_empty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5631);
/* harmony import */ var _observable_of__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8170);
/* harmony import */ var _observable_throwError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4944);
/** PURE_IMPORTS_START _observable_empty,_observable_of,_observable_throwError PURE_IMPORTS_END */



var NotificationKind;
/*@__PURE__*/ (function (NotificationKind) {
    NotificationKind["NEXT"] = "N";
    NotificationKind["ERROR"] = "E";
    NotificationKind["COMPLETE"] = "C";
})(NotificationKind || (NotificationKind = {}));
var Notification = /*@__PURE__*/ (function () {
    function Notification(kind, value, error) {
        this.kind = kind;
        this.value = value;
        this.error = error;
        this.hasValue = kind === 'N';
    }
    Notification.prototype.observe = function (observer) {
        switch (this.kind) {
            case 'N':
                return observer.next && observer.next(this.value);
            case 'E':
                return observer.error && observer.error(this.error);
            case 'C':
                return observer.complete && observer.complete();
        }
    };
    Notification.prototype.do = function (next, error, complete) {
        var kind = this.kind;
        switch (kind) {
            case 'N':
                return next && next(this.value);
            case 'E':
                return error && error(this.error);
            case 'C':
                return complete && complete();
        }
    };
    Notification.prototype.accept = function (nextOrObserver, error, complete) {
        if (nextOrObserver && typeof nextOrObserver.next === 'function') {
            return this.observe(nextOrObserver);
        }
        else {
            return this.do(nextOrObserver, error, complete);
        }
    };
    Notification.prototype.toObservable = function () {
        var kind = this.kind;
        switch (kind) {
            case 'N':
                return (0,_observable_of__WEBPACK_IMPORTED_MODULE_0__.of)(this.value);
            case 'E':
                return (0,_observable_throwError__WEBPACK_IMPORTED_MODULE_1__/* .throwError */ ._)(this.error);
            case 'C':
                return (0,_observable_empty__WEBPACK_IMPORTED_MODULE_2__/* .empty */ .c)();
        }
        throw new Error('unexpected notification kind value');
    };
    Notification.createNext = function (value) {
        if (typeof value !== 'undefined') {
            return new Notification('N', value);
        }
        return Notification.undefinedValueNotification;
    };
    Notification.createError = function (err) {
        return new Notification('E', undefined, err);
    };
    Notification.createComplete = function () {
        return Notification.completeNotification;
    };
    Notification.completeNotification = new Notification('C');
    Notification.undefinedValueNotification = new Notification('N', undefined);
    return Notification;
}());

//# sourceMappingURL=Notification.js.map


/***/ }),

/***/ 4379:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "y": () => /* binding */ Observable
});

// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/Subscriber.js
var Subscriber = __webpack_require__(979);
;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/canReportError.js
/** PURE_IMPORTS_START _Subscriber PURE_IMPORTS_END */

function canReportError(observer) {
    while (observer) {
        var _a = observer, closed_1 = _a.closed, destination = _a.destination, isStopped = _a.isStopped;
        if (closed_1 || isStopped) {
            return false;
        }
        else if (destination && destination instanceof Subscriber/* Subscriber */.L) {
            observer = destination;
        }
        else {
            observer = null;
        }
    }
    return true;
}
//# sourceMappingURL=canReportError.js.map

// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/symbol/rxSubscriber.js
var rxSubscriber = __webpack_require__(3142);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/Observer.js
var Observer = __webpack_require__(2174);
;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/toSubscriber.js
/** PURE_IMPORTS_START _Subscriber,_symbol_rxSubscriber,_Observer PURE_IMPORTS_END */



function toSubscriber(nextOrObserver, error, complete) {
    if (nextOrObserver) {
        if (nextOrObserver instanceof Subscriber/* Subscriber */.L) {
            return nextOrObserver;
        }
        if (nextOrObserver[rxSubscriber/* rxSubscriber */.b]) {
            return nextOrObserver[rxSubscriber/* rxSubscriber */.b]();
        }
    }
    if (!nextOrObserver && !error && !complete) {
        return new Subscriber/* Subscriber */.L(Observer/* empty */.c);
    }
    return new Subscriber/* Subscriber */.L(nextOrObserver, error, complete);
}
//# sourceMappingURL=toSubscriber.js.map

// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/symbol/observable.js
var observable = __webpack_require__(5050);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/util/identity.js
var identity = __webpack_require__(3608);
;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/pipe.js
/** PURE_IMPORTS_START _identity PURE_IMPORTS_END */

function pipe() {
    var fns = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        fns[_i] = arguments[_i];
    }
    return pipeFromArray(fns);
}
function pipeFromArray(fns) {
    if (fns.length === 0) {
        return identity/* identity */.y;
    }
    if (fns.length === 1) {
        return fns[0];
    }
    return function piped(input) {
        return fns.reduce(function (prev, fn) { return fn(prev); }, input);
    };
}
//# sourceMappingURL=pipe.js.map

// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/config.js
var config = __webpack_require__(150);
;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/Observable.js
/** PURE_IMPORTS_START _util_canReportError,_util_toSubscriber,_symbol_observable,_util_pipe,_config PURE_IMPORTS_END */





var Observable = /*@__PURE__*/ (function () {
    function Observable(subscribe) {
        this._isScalar = false;
        if (subscribe) {
            this._subscribe = subscribe;
        }
    }
    Observable.prototype.lift = function (operator) {
        var observable = new Observable();
        observable.source = this;
        observable.operator = operator;
        return observable;
    };
    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
        var operator = this.operator;
        var sink = toSubscriber(observerOrNext, error, complete);
        if (operator) {
            sink.add(operator.call(sink, this.source));
        }
        else {
            sink.add(this.source || (config/* config.useDeprecatedSynchronousErrorHandling */.v.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?
                this._subscribe(sink) :
                this._trySubscribe(sink));
        }
        if (config/* config.useDeprecatedSynchronousErrorHandling */.v.useDeprecatedSynchronousErrorHandling) {
            if (sink.syncErrorThrowable) {
                sink.syncErrorThrowable = false;
                if (sink.syncErrorThrown) {
                    throw sink.syncErrorValue;
                }
            }
        }
        return sink;
    };
    Observable.prototype._trySubscribe = function (sink) {
        try {
            return this._subscribe(sink);
        }
        catch (err) {
            if (config/* config.useDeprecatedSynchronousErrorHandling */.v.useDeprecatedSynchronousErrorHandling) {
                sink.syncErrorThrown = true;
                sink.syncErrorValue = err;
            }
            if (canReportError(sink)) {
                sink.error(err);
            }
            else {
                console.warn(err);
            }
        }
    };
    Observable.prototype.forEach = function (next, promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function (resolve, reject) {
            var subscription;
            subscription = _this.subscribe(function (value) {
                try {
                    next(value);
                }
                catch (err) {
                    reject(err);
                    if (subscription) {
                        subscription.unsubscribe();
                    }
                }
            }, reject, resolve);
        });
    };
    Observable.prototype._subscribe = function (subscriber) {
        var source = this.source;
        return source && source.subscribe(subscriber);
    };
    Observable.prototype[observable/* observable */.L] = function () {
        return this;
    };
    Observable.prototype.pipe = function () {
        var operations = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            operations[_i] = arguments[_i];
        }
        if (operations.length === 0) {
            return this;
        }
        return pipeFromArray(operations)(this);
    };
    Observable.prototype.toPromise = function (promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function (resolve, reject) {
            var value;
            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });
        });
    };
    Observable.create = function (subscribe) {
        return new Observable(subscribe);
    };
    return Observable;
}());

function getPromiseCtor(promiseCtor) {
    if (!promiseCtor) {
        promiseCtor = config/* config.Promise */.v.Promise || Promise;
    }
    if (!promiseCtor) {
        throw new Error('no Promise impl found');
    }
    return promiseCtor;
}
//# sourceMappingURL=Observable.js.map


/***/ }),

/***/ 2174:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "c": () => /* binding */ empty
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(150);
/* harmony import */ var _util_hostReportError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1644);
/** PURE_IMPORTS_START _config,_util_hostReportError PURE_IMPORTS_END */


var empty = {
    closed: true,
    next: function (value) { },
    error: function (err) {
        if (_config__WEBPACK_IMPORTED_MODULE_0__/* .config.useDeprecatedSynchronousErrorHandling */ .v.useDeprecatedSynchronousErrorHandling) {
            throw err;
        }
        else {
            (0,_util_hostReportError__WEBPACK_IMPORTED_MODULE_1__/* .hostReportError */ .z)(err);
        }
    },
    complete: function () { }
};
//# sourceMappingURL=Observer.js.map


/***/ }),

/***/ 2039:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "L": () => /* binding */ OuterSubscriber
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(655);
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(979);
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


var OuterSubscriber = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__/* .__extends */ .ZT(OuterSubscriber, _super);
    function OuterSubscriber() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(innerValue);
    };
    OuterSubscriber.prototype.notifyError = function (error, innerSub) {
        this.destination.error(error);
    };
    OuterSubscriber.prototype.notifyComplete = function (innerSub) {
        this.destination.complete();
    };
    return OuterSubscriber;
}(_Subscriber__WEBPACK_IMPORTED_MODULE_1__/* .Subscriber */ .L));

//# sourceMappingURL=OuterSubscriber.js.map


/***/ }),

/***/ 2135:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "t": () => /* binding */ ReplaySubject
});

// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.js
var tslib_es6 = __webpack_require__(655);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/Subject.js
var Subject = __webpack_require__(211);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/scheduler/AsyncAction.js + 1 modules
var AsyncAction = __webpack_require__(6114);
;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduler/QueueAction.js
/** PURE_IMPORTS_START tslib,_AsyncAction PURE_IMPORTS_END */


var QueueAction = /*@__PURE__*/ (function (_super) {
    tslib_es6/* __extends */.ZT(QueueAction, _super);
    function QueueAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
    }
    QueueAction.prototype.schedule = function (state, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        if (delay > 0) {
            return _super.prototype.schedule.call(this, state, delay);
        }
        this.delay = delay;
        this.state = state;
        this.scheduler.flush(this);
        return this;
    };
    QueueAction.prototype.execute = function (state, delay) {
        return (delay > 0 || this.closed) ?
            _super.prototype.execute.call(this, state, delay) :
            this._execute(state, delay);
    };
    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        return scheduler.flush(this);
    };
    return QueueAction;
}(AsyncAction/* AsyncAction */.o));

//# sourceMappingURL=QueueAction.js.map

// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/scheduler/AsyncScheduler.js + 1 modules
var AsyncScheduler = __webpack_require__(2980);
;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduler/QueueScheduler.js
/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */


var QueueScheduler = /*@__PURE__*/ (function (_super) {
    tslib_es6/* __extends */.ZT(QueueScheduler, _super);
    function QueueScheduler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return QueueScheduler;
}(AsyncScheduler/* AsyncScheduler */.v));

//# sourceMappingURL=QueueScheduler.js.map

;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduler/queue.js
/** PURE_IMPORTS_START _QueueAction,_QueueScheduler PURE_IMPORTS_END */


var queueScheduler = /*@__PURE__*/ new QueueScheduler(QueueAction);
var queue = queueScheduler;
//# sourceMappingURL=queue.js.map

// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/Subscription.js + 1 modules
var Subscription = __webpack_require__(3884);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/Subscriber.js
var Subscriber = __webpack_require__(979);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/Notification.js
var Notification = __webpack_require__(2632);
;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/observeOn.js
/** PURE_IMPORTS_START tslib,_Subscriber,_Notification PURE_IMPORTS_END */



function observeOn(scheduler, delay) {
    if (delay === void 0) {
        delay = 0;
    }
    return function observeOnOperatorFunction(source) {
        return source.lift(new ObserveOnOperator(scheduler, delay));
    };
}
var ObserveOnOperator = /*@__PURE__*/ ((/* unused pure expression or super */ null && (function () {
    function ObserveOnOperator(scheduler, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        this.scheduler = scheduler;
        this.delay = delay;
    }
    ObserveOnOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));
    };
    return ObserveOnOperator;
}())));

var ObserveOnSubscriber = /*@__PURE__*/ (function (_super) {
    tslib_es6/* __extends */.ZT(ObserveOnSubscriber, _super);
    function ObserveOnSubscriber(destination, scheduler, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        var _this = _super.call(this, destination) || this;
        _this.scheduler = scheduler;
        _this.delay = delay;
        return _this;
    }
    ObserveOnSubscriber.dispatch = function (arg) {
        var notification = arg.notification, destination = arg.destination;
        notification.observe(destination);
        this.unsubscribe();
    };
    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {
        var destination = this.destination;
        destination.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
    };
    ObserveOnSubscriber.prototype._next = function (value) {
        this.scheduleMessage(Notification/* Notification.createNext */.P.createNext(value));
    };
    ObserveOnSubscriber.prototype._error = function (err) {
        this.scheduleMessage(Notification/* Notification.createError */.P.createError(err));
        this.unsubscribe();
    };
    ObserveOnSubscriber.prototype._complete = function () {
        this.scheduleMessage(Notification/* Notification.createComplete */.P.createComplete());
        this.unsubscribe();
    };
    return ObserveOnSubscriber;
}(Subscriber/* Subscriber */.L));

var ObserveOnMessage = /*@__PURE__*/ (function () {
    function ObserveOnMessage(notification, destination) {
        this.notification = notification;
        this.destination = destination;
    }
    return ObserveOnMessage;
}());

//# sourceMappingURL=observeOn.js.map

// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/util/ObjectUnsubscribedError.js
var ObjectUnsubscribedError = __webpack_require__(1016);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/SubjectSubscription.js
var SubjectSubscription = __webpack_require__(8253);
;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/ReplaySubject.js
/** PURE_IMPORTS_START tslib,_Subject,_scheduler_queue,_Subscription,_operators_observeOn,_util_ObjectUnsubscribedError,_SubjectSubscription PURE_IMPORTS_END */







var ReplaySubject = /*@__PURE__*/ (function (_super) {
    tslib_es6/* __extends */.ZT(ReplaySubject, _super);
    function ReplaySubject(bufferSize, windowTime, scheduler) {
        if (bufferSize === void 0) {
            bufferSize = Number.POSITIVE_INFINITY;
        }
        if (windowTime === void 0) {
            windowTime = Number.POSITIVE_INFINITY;
        }
        var _this = _super.call(this) || this;
        _this.scheduler = scheduler;
        _this._events = [];
        _this._infiniteTimeWindow = false;
        _this._bufferSize = bufferSize < 1 ? 1 : bufferSize;
        _this._windowTime = windowTime < 1 ? 1 : windowTime;
        if (windowTime === Number.POSITIVE_INFINITY) {
            _this._infiniteTimeWindow = true;
            _this.next = _this.nextInfiniteTimeWindow;
        }
        else {
            _this.next = _this.nextTimeWindow;
        }
        return _this;
    }
    ReplaySubject.prototype.nextInfiniteTimeWindow = function (value) {
        if (!this.isStopped) {
            var _events = this._events;
            _events.push(value);
            if (_events.length > this._bufferSize) {
                _events.shift();
            }
        }
        _super.prototype.next.call(this, value);
    };
    ReplaySubject.prototype.nextTimeWindow = function (value) {
        if (!this.isStopped) {
            this._events.push(new ReplayEvent(this._getNow(), value));
            this._trimBufferThenGetEvents();
        }
        _super.prototype.next.call(this, value);
    };
    ReplaySubject.prototype._subscribe = function (subscriber) {
        var _infiniteTimeWindow = this._infiniteTimeWindow;
        var _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();
        var scheduler = this.scheduler;
        var len = _events.length;
        var subscription;
        if (this.closed) {
            throw new ObjectUnsubscribedError/* ObjectUnsubscribedError */.N();
        }
        else if (this.isStopped || this.hasError) {
            subscription = Subscription/* Subscription.EMPTY */.w.EMPTY;
        }
        else {
            this.observers.push(subscriber);
            subscription = new SubjectSubscription/* SubjectSubscription */.W(this, subscriber);
        }
        if (scheduler) {
            subscriber.add(subscriber = new ObserveOnSubscriber(subscriber, scheduler));
        }
        if (_infiniteTimeWindow) {
            for (var i = 0; i < len && !subscriber.closed; i++) {
                subscriber.next(_events[i]);
            }
        }
        else {
            for (var i = 0; i < len && !subscriber.closed; i++) {
                subscriber.next(_events[i].value);
            }
        }
        if (this.hasError) {
            subscriber.error(this.thrownError);
        }
        else if (this.isStopped) {
            subscriber.complete();
        }
        return subscription;
    };
    ReplaySubject.prototype._getNow = function () {
        return (this.scheduler || queue).now();
    };
    ReplaySubject.prototype._trimBufferThenGetEvents = function () {
        var now = this._getNow();
        var _bufferSize = this._bufferSize;
        var _windowTime = this._windowTime;
        var _events = this._events;
        var eventsCount = _events.length;
        var spliceCount = 0;
        while (spliceCount < eventsCount) {
            if ((now - _events[spliceCount].time) < _windowTime) {
                break;
            }
            spliceCount++;
        }
        if (eventsCount > _bufferSize) {
            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);
        }
        if (spliceCount > 0) {
            _events.splice(0, spliceCount);
        }
        return _events;
    };
    return ReplaySubject;
}(Subject/* Subject */.xQ));

var ReplayEvent = /*@__PURE__*/ (function () {
    function ReplayEvent(time, value) {
        this.time = time;
        this.value = value;
    }
    return ReplayEvent;
}());
//# sourceMappingURL=ReplaySubject.js.map


/***/ }),

/***/ 211:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Yc": () => /* binding */ SubjectSubscriber,
/* harmony export */   "xQ": () => /* binding */ Subject
/* harmony export */ });
/* unused harmony export AnonymousSubject */
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(655);
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(4379);
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(979);
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(3884);
/* harmony import */ var _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(1016);
/* harmony import */ var _SubjectSubscription__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(8253);
/* harmony import */ var _internal_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3142);
/** PURE_IMPORTS_START tslib,_Observable,_Subscriber,_Subscription,_util_ObjectUnsubscribedError,_SubjectSubscription,_internal_symbol_rxSubscriber PURE_IMPORTS_END */







var SubjectSubscriber = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__/* .__extends */ .ZT(SubjectSubscriber, _super);
    function SubjectSubscriber(destination) {
        var _this = _super.call(this, destination) || this;
        _this.destination = destination;
        return _this;
    }
    return SubjectSubscriber;
}(_Subscriber__WEBPACK_IMPORTED_MODULE_1__/* .Subscriber */ .L));

var Subject = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__/* .__extends */ .ZT(Subject, _super);
    function Subject() {
        var _this = _super.call(this) || this;
        _this.observers = [];
        _this.closed = false;
        _this.isStopped = false;
        _this.hasError = false;
        _this.thrownError = null;
        return _this;
    }
    Subject.prototype[_internal_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_2__/* .rxSubscriber */ .b] = function () {
        return new SubjectSubscriber(this);
    };
    Subject.prototype.lift = function (operator) {
        var subject = new AnonymousSubject(this, this);
        subject.operator = operator;
        return subject;
    };
    Subject.prototype.next = function (value) {
        if (this.closed) {
            throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_3__/* .ObjectUnsubscribedError */ .N();
        }
        if (!this.isStopped) {
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();
            for (var i = 0; i < len; i++) {
                copy[i].next(value);
            }
        }
    };
    Subject.prototype.error = function (err) {
        if (this.closed) {
            throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_3__/* .ObjectUnsubscribedError */ .N();
        }
        this.hasError = true;
        this.thrownError = err;
        this.isStopped = true;
        var observers = this.observers;
        var len = observers.length;
        var copy = observers.slice();
        for (var i = 0; i < len; i++) {
            copy[i].error(err);
        }
        this.observers.length = 0;
    };
    Subject.prototype.complete = function () {
        if (this.closed) {
            throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_3__/* .ObjectUnsubscribedError */ .N();
        }
        this.isStopped = true;
        var observers = this.observers;
        var len = observers.length;
        var copy = observers.slice();
        for (var i = 0; i < len; i++) {
            copy[i].complete();
        }
        this.observers.length = 0;
    };
    Subject.prototype.unsubscribe = function () {
        this.isStopped = true;
        this.closed = true;
        this.observers = null;
    };
    Subject.prototype._trySubscribe = function (subscriber) {
        if (this.closed) {
            throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_3__/* .ObjectUnsubscribedError */ .N();
        }
        else {
            return _super.prototype._trySubscribe.call(this, subscriber);
        }
    };
    Subject.prototype._subscribe = function (subscriber) {
        if (this.closed) {
            throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_3__/* .ObjectUnsubscribedError */ .N();
        }
        else if (this.hasError) {
            subscriber.error(this.thrownError);
            return _Subscription__WEBPACK_IMPORTED_MODULE_4__/* .Subscription.EMPTY */ .w.EMPTY;
        }
        else if (this.isStopped) {
            subscriber.complete();
            return _Subscription__WEBPACK_IMPORTED_MODULE_4__/* .Subscription.EMPTY */ .w.EMPTY;
        }
        else {
            this.observers.push(subscriber);
            return new _SubjectSubscription__WEBPACK_IMPORTED_MODULE_5__/* .SubjectSubscription */ .W(this, subscriber);
        }
    };
    Subject.prototype.asObservable = function () {
        var observable = new _Observable__WEBPACK_IMPORTED_MODULE_6__/* .Observable */ .y();
        observable.source = this;
        return observable;
    };
    Subject.create = function (destination, source) {
        return new AnonymousSubject(destination, source);
    };
    return Subject;
}(_Observable__WEBPACK_IMPORTED_MODULE_6__/* .Observable */ .y));

var AnonymousSubject = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__/* .__extends */ .ZT(AnonymousSubject, _super);
    function AnonymousSubject(destination, source) {
        var _this = _super.call(this) || this;
        _this.destination = destination;
        _this.source = source;
        return _this;
    }
    AnonymousSubject.prototype.next = function (value) {
        var destination = this.destination;
        if (destination && destination.next) {
            destination.next(value);
        }
    };
    AnonymousSubject.prototype.error = function (err) {
        var destination = this.destination;
        if (destination && destination.error) {
            this.destination.error(err);
        }
    };
    AnonymousSubject.prototype.complete = function () {
        var destination = this.destination;
        if (destination && destination.complete) {
            this.destination.complete();
        }
    };
    AnonymousSubject.prototype._subscribe = function (subscriber) {
        var source = this.source;
        if (source) {
            return this.source.subscribe(subscriber);
        }
        else {
            return _Subscription__WEBPACK_IMPORTED_MODULE_4__/* .Subscription.EMPTY */ .w.EMPTY;
        }
    };
    return AnonymousSubject;
}(Subject));

//# sourceMappingURL=Subject.js.map


/***/ }),

/***/ 8253:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "W": () => /* binding */ SubjectSubscription
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(655);
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3884);
/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */


var SubjectSubscription = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__/* .__extends */ .ZT(SubjectSubscription, _super);
    function SubjectSubscription(subject, subscriber) {
        var _this = _super.call(this) || this;
        _this.subject = subject;
        _this.subscriber = subscriber;
        _this.closed = false;
        return _this;
    }
    SubjectSubscription.prototype.unsubscribe = function () {
        if (this.closed) {
            return;
        }
        this.closed = true;
        var subject = this.subject;
        var observers = subject.observers;
        this.subject = null;
        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
            return;
        }
        var subscriberIndex = observers.indexOf(this.subscriber);
        if (subscriberIndex !== -1) {
            observers.splice(subscriberIndex, 1);
        }
    };
    return SubjectSubscription;
}(_Subscription__WEBPACK_IMPORTED_MODULE_1__/* .Subscription */ .w));

//# sourceMappingURL=SubjectSubscription.js.map


/***/ }),

/***/ 979:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "L": () => /* binding */ Subscriber
/* harmony export */ });
/* unused harmony export SafeSubscriber */
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(655);
/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(4156);
/* harmony import */ var _Observer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2174);
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(3884);
/* harmony import */ var _internal_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3142);
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(150);
/* harmony import */ var _util_hostReportError__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(1644);
/** PURE_IMPORTS_START tslib,_util_isFunction,_Observer,_Subscription,_internal_symbol_rxSubscriber,_config,_util_hostReportError PURE_IMPORTS_END */







var Subscriber = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__/* .__extends */ .ZT(Subscriber, _super);
    function Subscriber(destinationOrNext, error, complete) {
        var _this = _super.call(this) || this;
        _this.syncErrorValue = null;
        _this.syncErrorThrown = false;
        _this.syncErrorThrowable = false;
        _this.isStopped = false;
        switch (arguments.length) {
            case 0:
                _this.destination = _Observer__WEBPACK_IMPORTED_MODULE_1__/* .empty */ .c;
                break;
            case 1:
                if (!destinationOrNext) {
                    _this.destination = _Observer__WEBPACK_IMPORTED_MODULE_1__/* .empty */ .c;
                    break;
                }
                if (typeof destinationOrNext === 'object') {
                    if (destinationOrNext instanceof Subscriber) {
                        _this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;
                        _this.destination = destinationOrNext;
                        destinationOrNext.add(_this);
                    }
                    else {
                        _this.syncErrorThrowable = true;
                        _this.destination = new SafeSubscriber(_this, destinationOrNext);
                    }
                    break;
                }
            default:
                _this.syncErrorThrowable = true;
                _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);
                break;
        }
        return _this;
    }
    Subscriber.prototype[_internal_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_2__/* .rxSubscriber */ .b] = function () { return this; };
    Subscriber.create = function (next, error, complete) {
        var subscriber = new Subscriber(next, error, complete);
        subscriber.syncErrorThrowable = false;
        return subscriber;
    };
    Subscriber.prototype.next = function (value) {
        if (!this.isStopped) {
            this._next(value);
        }
    };
    Subscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            this.isStopped = true;
            this._error(err);
        }
    };
    Subscriber.prototype.complete = function () {
        if (!this.isStopped) {
            this.isStopped = true;
            this._complete();
        }
    };
    Subscriber.prototype.unsubscribe = function () {
        if (this.closed) {
            return;
        }
        this.isStopped = true;
        _super.prototype.unsubscribe.call(this);
    };
    Subscriber.prototype._next = function (value) {
        this.destination.next(value);
    };
    Subscriber.prototype._error = function (err) {
        this.destination.error(err);
        this.unsubscribe();
    };
    Subscriber.prototype._complete = function () {
        this.destination.complete();
        this.unsubscribe();
    };
    Subscriber.prototype._unsubscribeAndRecycle = function () {
        var _parentOrParents = this._parentOrParents;
        this._parentOrParents = null;
        this.unsubscribe();
        this.closed = false;
        this.isStopped = false;
        this._parentOrParents = _parentOrParents;
        return this;
    };
    return Subscriber;
}(_Subscription__WEBPACK_IMPORTED_MODULE_3__/* .Subscription */ .w));

var SafeSubscriber = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__/* .__extends */ .ZT(SafeSubscriber, _super);
    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
        var _this = _super.call(this) || this;
        _this._parentSubscriber = _parentSubscriber;
        var next;
        var context = _this;
        if ((0,_util_isFunction__WEBPACK_IMPORTED_MODULE_4__/* .isFunction */ .m)(observerOrNext)) {
            next = observerOrNext;
        }
        else if (observerOrNext) {
            next = observerOrNext.next;
            error = observerOrNext.error;
            complete = observerOrNext.complete;
            if (observerOrNext !== _Observer__WEBPACK_IMPORTED_MODULE_1__/* .empty */ .c) {
                context = Object.create(observerOrNext);
                if ((0,_util_isFunction__WEBPACK_IMPORTED_MODULE_4__/* .isFunction */ .m)(context.unsubscribe)) {
                    _this.add(context.unsubscribe.bind(context));
                }
                context.unsubscribe = _this.unsubscribe.bind(_this);
            }
        }
        _this._context = context;
        _this._next = next;
        _this._error = error;
        _this._complete = complete;
        return _this;
    }
    SafeSubscriber.prototype.next = function (value) {
        if (!this.isStopped && this._next) {
            var _parentSubscriber = this._parentSubscriber;
            if (!_config__WEBPACK_IMPORTED_MODULE_5__/* .config.useDeprecatedSynchronousErrorHandling */ .v.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                this.__tryOrUnsub(this._next, value);
            }
            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            var useDeprecatedSynchronousErrorHandling = _config__WEBPACK_IMPORTED_MODULE_5__/* .config.useDeprecatedSynchronousErrorHandling */ .v.useDeprecatedSynchronousErrorHandling;
            if (this._error) {
                if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(this._error, err);
                    this.unsubscribe();
                }
                else {
                    this.__tryOrSetError(_parentSubscriber, this._error, err);
                    this.unsubscribe();
                }
            }
            else if (!_parentSubscriber.syncErrorThrowable) {
                this.unsubscribe();
                if (useDeprecatedSynchronousErrorHandling) {
                    throw err;
                }
                (0,_util_hostReportError__WEBPACK_IMPORTED_MODULE_6__/* .hostReportError */ .z)(err);
            }
            else {
                if (useDeprecatedSynchronousErrorHandling) {
                    _parentSubscriber.syncErrorValue = err;
                    _parentSubscriber.syncErrorThrown = true;
                }
                else {
                    (0,_util_hostReportError__WEBPACK_IMPORTED_MODULE_6__/* .hostReportError */ .z)(err);
                }
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.complete = function () {
        var _this = this;
        if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            if (this._complete) {
                var wrappedComplete = function () { return _this._complete.call(_this._context); };
                if (!_config__WEBPACK_IMPORTED_MODULE_5__/* .config.useDeprecatedSynchronousErrorHandling */ .v.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(wrappedComplete);
                    this.unsubscribe();
                }
                else {
                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);
                    this.unsubscribe();
                }
            }
            else {
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
        try {
            fn.call(this._context, value);
        }
        catch (err) {
            this.unsubscribe();
            if (_config__WEBPACK_IMPORTED_MODULE_5__/* .config.useDeprecatedSynchronousErrorHandling */ .v.useDeprecatedSynchronousErrorHandling) {
                throw err;
            }
            else {
                (0,_util_hostReportError__WEBPACK_IMPORTED_MODULE_6__/* .hostReportError */ .z)(err);
            }
        }
    };
    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
        if (!_config__WEBPACK_IMPORTED_MODULE_5__/* .config.useDeprecatedSynchronousErrorHandling */ .v.useDeprecatedSynchronousErrorHandling) {
            throw new Error('bad call');
        }
        try {
            fn.call(this._context, value);
        }
        catch (err) {
            if (_config__WEBPACK_IMPORTED_MODULE_5__/* .config.useDeprecatedSynchronousErrorHandling */ .v.useDeprecatedSynchronousErrorHandling) {
                parent.syncErrorValue = err;
                parent.syncErrorThrown = true;
                return true;
            }
            else {
                (0,_util_hostReportError__WEBPACK_IMPORTED_MODULE_6__/* .hostReportError */ .z)(err);
                return true;
            }
        }
        return false;
    };
    SafeSubscriber.prototype._unsubscribe = function () {
        var _parentSubscriber = this._parentSubscriber;
        this._context = null;
        this._parentSubscriber = null;
        _parentSubscriber.unsubscribe();
    };
    return SafeSubscriber;
}(Subscriber));

//# sourceMappingURL=Subscriber.js.map


/***/ }),

/***/ 3884:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "w": () => /* binding */ Subscription
});

// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/util/isArray.js
var isArray = __webpack_require__(9026);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/util/isObject.js
var isObject = __webpack_require__(2009);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/util/isFunction.js
var isFunction = __webpack_require__(4156);
;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/UnsubscriptionError.js
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var UnsubscriptionErrorImpl = /*@__PURE__*/ (function () {
    function UnsubscriptionErrorImpl(errors) {
        Error.call(this);
        this.message = errors ?
            errors.length + " errors occurred during unsubscription:\n" + errors.map(function (err, i) { return i + 1 + ") " + err.toString(); }).join('\n  ') : '';
        this.name = 'UnsubscriptionError';
        this.errors = errors;
        return this;
    }
    UnsubscriptionErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
    return UnsubscriptionErrorImpl;
})();
var UnsubscriptionError = UnsubscriptionErrorImpl;
//# sourceMappingURL=UnsubscriptionError.js.map

;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/Subscription.js
/** PURE_IMPORTS_START _util_isArray,_util_isObject,_util_isFunction,_util_UnsubscriptionError PURE_IMPORTS_END */




var Subscription = /*@__PURE__*/ (function () {
    function Subscription(unsubscribe) {
        this.closed = false;
        this._parentOrParents = null;
        this._subscriptions = null;
        if (unsubscribe) {
            this._ctorUnsubscribe = true;
            this._unsubscribe = unsubscribe;
        }
    }
    Subscription.prototype.unsubscribe = function () {
        var errors;
        if (this.closed) {
            return;
        }
        var _a = this, _parentOrParents = _a._parentOrParents, _ctorUnsubscribe = _a._ctorUnsubscribe, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
        this.closed = true;
        this._parentOrParents = null;
        this._subscriptions = null;
        if (_parentOrParents instanceof Subscription) {
            _parentOrParents.remove(this);
        }
        else if (_parentOrParents !== null) {
            for (var index = 0; index < _parentOrParents.length; ++index) {
                var parent_1 = _parentOrParents[index];
                parent_1.remove(this);
            }
        }
        if ((0,isFunction/* isFunction */.m)(_unsubscribe)) {
            if (_ctorUnsubscribe) {
                this._unsubscribe = undefined;
            }
            try {
                _unsubscribe.call(this);
            }
            catch (e) {
                errors = e instanceof UnsubscriptionError ? flattenUnsubscriptionErrors(e.errors) : [e];
            }
        }
        if ((0,isArray/* isArray */.k)(_subscriptions)) {
            var index = -1;
            var len = _subscriptions.length;
            while (++index < len) {
                var sub = _subscriptions[index];
                if ((0,isObject/* isObject */.K)(sub)) {
                    try {
                        sub.unsubscribe();
                    }
                    catch (e) {
                        errors = errors || [];
                        if (e instanceof UnsubscriptionError) {
                            errors = errors.concat(flattenUnsubscriptionErrors(e.errors));
                        }
                        else {
                            errors.push(e);
                        }
                    }
                }
            }
        }
        if (errors) {
            throw new UnsubscriptionError(errors);
        }
    };
    Subscription.prototype.add = function (teardown) {
        var subscription = teardown;
        if (!teardown) {
            return Subscription.EMPTY;
        }
        switch (typeof teardown) {
            case 'function':
                subscription = new Subscription(teardown);
            case 'object':
                if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== 'function') {
                    return subscription;
                }
                else if (this.closed) {
                    subscription.unsubscribe();
                    return subscription;
                }
                else if (!(subscription instanceof Subscription)) {
                    var tmp = subscription;
                    subscription = new Subscription();
                    subscription._subscriptions = [tmp];
                }
                break;
            default: {
                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
            }
        }
        var _parentOrParents = subscription._parentOrParents;
        if (_parentOrParents === null) {
            subscription._parentOrParents = this;
        }
        else if (_parentOrParents instanceof Subscription) {
            if (_parentOrParents === this) {
                return subscription;
            }
            subscription._parentOrParents = [_parentOrParents, this];
        }
        else if (_parentOrParents.indexOf(this) === -1) {
            _parentOrParents.push(this);
        }
        else {
            return subscription;
        }
        var subscriptions = this._subscriptions;
        if (subscriptions === null) {
            this._subscriptions = [subscription];
        }
        else {
            subscriptions.push(subscription);
        }
        return subscription;
    };
    Subscription.prototype.remove = function (subscription) {
        var subscriptions = this._subscriptions;
        if (subscriptions) {
            var subscriptionIndex = subscriptions.indexOf(subscription);
            if (subscriptionIndex !== -1) {
                subscriptions.splice(subscriptionIndex, 1);
            }
        }
    };
    Subscription.EMPTY = (function (empty) {
        empty.closed = true;
        return empty;
    }(new Subscription()));
    return Subscription;
}());

function flattenUnsubscriptionErrors(errors) {
    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError) ? err.errors : err); }, []);
}
//# sourceMappingURL=Subscription.js.map


/***/ }),

/***/ 150:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "v": () => /* binding */ config
/* harmony export */ });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var _enable_super_gross_mode_that_will_cause_bad_things = false;
var config = {
    Promise: undefined,
    set useDeprecatedSynchronousErrorHandling(value) {
        if (value) {
            var error = /*@__PURE__*/ new Error();
            /*@__PURE__*/ console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \n' + error.stack);
        }
        else if (_enable_super_gross_mode_that_will_cause_bad_things) {
            /*@__PURE__*/ console.log('RxJS: Back to a better error behavior. Thank you. <3');
        }
        _enable_super_gross_mode_that_will_cause_bad_things = value;
    },
    get useDeprecatedSynchronousErrorHandling() {
        return _enable_super_gross_mode_that_will_cause_bad_things;
    },
};
//# sourceMappingURL=config.js.map


/***/ }),

/***/ 7604:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IY": () => /* binding */ SimpleInnerSubscriber,
/* harmony export */   "Ds": () => /* binding */ SimpleOuterSubscriber,
/* harmony export */   "ft": () => /* binding */ innerSubscribe
/* harmony export */ });
/* unused harmony exports ComplexInnerSubscriber, ComplexOuterSubscriber */
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(655);
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(979);
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4379);
/* harmony import */ var _util_subscribeTo__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7843);
/** PURE_IMPORTS_START tslib,_Subscriber,_Observable,_util_subscribeTo PURE_IMPORTS_END */




var SimpleInnerSubscriber = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__/* .__extends */ .ZT(SimpleInnerSubscriber, _super);
    function SimpleInnerSubscriber(parent) {
        var _this = _super.call(this) || this;
        _this.parent = parent;
        return _this;
    }
    SimpleInnerSubscriber.prototype._next = function (value) {
        this.parent.notifyNext(value);
    };
    SimpleInnerSubscriber.prototype._error = function (error) {
        this.parent.notifyError(error);
        this.unsubscribe();
    };
    SimpleInnerSubscriber.prototype._complete = function () {
        this.parent.notifyComplete();
        this.unsubscribe();
    };
    return SimpleInnerSubscriber;
}(_Subscriber__WEBPACK_IMPORTED_MODULE_1__/* .Subscriber */ .L));

var ComplexInnerSubscriber = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__/* .__extends */ .ZT(ComplexInnerSubscriber, _super);
    function ComplexInnerSubscriber(parent, outerValue, outerIndex) {
        var _this = _super.call(this) || this;
        _this.parent = parent;
        _this.outerValue = outerValue;
        _this.outerIndex = outerIndex;
        return _this;
    }
    ComplexInnerSubscriber.prototype._next = function (value) {
        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this);
    };
    ComplexInnerSubscriber.prototype._error = function (error) {
        this.parent.notifyError(error);
        this.unsubscribe();
    };
    ComplexInnerSubscriber.prototype._complete = function () {
        this.parent.notifyComplete(this);
        this.unsubscribe();
    };
    return ComplexInnerSubscriber;
}(_Subscriber__WEBPACK_IMPORTED_MODULE_1__/* .Subscriber */ .L));

var SimpleOuterSubscriber = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__/* .__extends */ .ZT(SimpleOuterSubscriber, _super);
    function SimpleOuterSubscriber() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SimpleOuterSubscriber.prototype.notifyNext = function (innerValue) {
        this.destination.next(innerValue);
    };
    SimpleOuterSubscriber.prototype.notifyError = function (err) {
        this.destination.error(err);
    };
    SimpleOuterSubscriber.prototype.notifyComplete = function () {
        this.destination.complete();
    };
    return SimpleOuterSubscriber;
}(_Subscriber__WEBPACK_IMPORTED_MODULE_1__/* .Subscriber */ .L));

var ComplexOuterSubscriber = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__/* .__extends */ .ZT(ComplexOuterSubscriber, _super);
    function ComplexOuterSubscriber() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ComplexOuterSubscriber.prototype.notifyNext = function (_outerValue, innerValue, _outerIndex, _innerSub) {
        this.destination.next(innerValue);
    };
    ComplexOuterSubscriber.prototype.notifyError = function (error) {
        this.destination.error(error);
    };
    ComplexOuterSubscriber.prototype.notifyComplete = function (_innerSub) {
        this.destination.complete();
    };
    return ComplexOuterSubscriber;
}(_Subscriber__WEBPACK_IMPORTED_MODULE_1__/* .Subscriber */ .L));

function innerSubscribe(result, innerSubscriber) {
    if (innerSubscriber.closed) {
        return undefined;
    }
    if (result instanceof _Observable__WEBPACK_IMPORTED_MODULE_2__/* .Observable */ .y) {
        return result.subscribe(innerSubscriber);
    }
    return (0,_util_subscribeTo__WEBPACK_IMPORTED_MODULE_3__/* .subscribeTo */ .s)(result)(innerSubscriber);
}
//# sourceMappingURL=innerSubscribe.js.map


/***/ }),

/***/ 5142:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "aj": () => /* binding */ combineLatest
/* harmony export */ });
/* unused harmony exports CombineLatestOperator, CombineLatestSubscriber */
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(655);
/* harmony import */ var _util_isScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7507);
/* harmony import */ var _util_isArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9026);
/* harmony import */ var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(2039);
/* harmony import */ var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(2080);
/* harmony import */ var _fromArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3375);
/** PURE_IMPORTS_START tslib,_util_isScheduler,_util_isArray,_OuterSubscriber,_util_subscribeToResult,_fromArray PURE_IMPORTS_END */






var NONE = {};
function combineLatest() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    var resultSelector = undefined;
    var scheduler = undefined;
    if ((0,_util_isScheduler__WEBPACK_IMPORTED_MODULE_0__/* .isScheduler */ .K)(observables[observables.length - 1])) {
        scheduler = observables.pop();
    }
    if (typeof observables[observables.length - 1] === 'function') {
        resultSelector = observables.pop();
    }
    if (observables.length === 1 && (0,_util_isArray__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .k)(observables[0])) {
        observables = observables[0];
    }
    return (0,_fromArray__WEBPACK_IMPORTED_MODULE_2__/* .fromArray */ .n)(observables, scheduler).lift(new CombineLatestOperator(resultSelector));
}
var CombineLatestOperator = /*@__PURE__*/ (function () {
    function CombineLatestOperator(resultSelector) {
        this.resultSelector = resultSelector;
    }
    CombineLatestOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new CombineLatestSubscriber(subscriber, this.resultSelector));
    };
    return CombineLatestOperator;
}());

var CombineLatestSubscriber = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_3__/* .__extends */ .ZT(CombineLatestSubscriber, _super);
    function CombineLatestSubscriber(destination, resultSelector) {
        var _this = _super.call(this, destination) || this;
        _this.resultSelector = resultSelector;
        _this.active = 0;
        _this.values = [];
        _this.observables = [];
        return _this;
    }
    CombineLatestSubscriber.prototype._next = function (observable) {
        this.values.push(NONE);
        this.observables.push(observable);
    };
    CombineLatestSubscriber.prototype._complete = function () {
        var observables = this.observables;
        var len = observables.length;
        if (len === 0) {
            this.destination.complete();
        }
        else {
            this.active = len;
            this.toRespond = len;
            for (var i = 0; i < len; i++) {
                var observable = observables[i];
                this.add((0,_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_4__/* .subscribeToResult */ .D)(this, observable, undefined, i));
            }
        }
    };
    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {
        if ((this.active -= 1) === 0) {
            this.destination.complete();
        }
    };
    CombineLatestSubscriber.prototype.notifyNext = function (_outerValue, innerValue, outerIndex) {
        var values = this.values;
        var oldVal = values[outerIndex];
        var toRespond = !this.toRespond
            ? 0
            : oldVal === NONE ? --this.toRespond : this.toRespond;
        values[outerIndex] = innerValue;
        if (toRespond === 0) {
            if (this.resultSelector) {
                this._tryResultSelector(values);
            }
            else {
                this.destination.next(values.slice());
            }
        }
    };
    CombineLatestSubscriber.prototype._tryResultSelector = function (values) {
        var result;
        try {
            result = this.resultSelector.apply(this, values);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return CombineLatestSubscriber;
}(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_5__/* .OuterSubscriber */ .L));

//# sourceMappingURL=combineLatest.js.map


/***/ }),

/***/ 9795:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "z": () => /* binding */ concat
/* harmony export */ });
/* harmony import */ var _of__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8170);
/* harmony import */ var _operators_concatAll__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2257);
/** PURE_IMPORTS_START _of,_operators_concatAll PURE_IMPORTS_END */


function concat() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    return (0,_operators_concatAll__WEBPACK_IMPORTED_MODULE_0__/* .concatAll */ .u)()(_of__WEBPACK_IMPORTED_MODULE_1__.of.apply(void 0, observables));
}
//# sourceMappingURL=concat.js.map


/***/ }),

/***/ 1410:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "P": () => /* binding */ defer
/* harmony export */ });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4379);
/* harmony import */ var _from__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4072);
/* harmony import */ var _empty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5631);
/** PURE_IMPORTS_START _Observable,_from,_empty PURE_IMPORTS_END */



function defer(observableFactory) {
    return new _Observable__WEBPACK_IMPORTED_MODULE_0__/* .Observable */ .y(function (subscriber) {
        var input;
        try {
            input = observableFactory();
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
        var source = input ? (0,_from__WEBPACK_IMPORTED_MODULE_1__/* .from */ .D)(input) : (0,_empty__WEBPACK_IMPORTED_MODULE_2__/* .empty */ .c)();
        return source.subscribe(subscriber);
    });
}
//# sourceMappingURL=defer.js.map


/***/ }),

/***/ 5631:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "E": () => /* binding */ EMPTY,
/* harmony export */   "c": () => /* binding */ empty
/* harmony export */ });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4379);
/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */

var EMPTY = /*@__PURE__*/ new _Observable__WEBPACK_IMPORTED_MODULE_0__/* .Observable */ .y(function (subscriber) { return subscriber.complete(); });
function empty(scheduler) {
    return scheduler ? emptyScheduled(scheduler) : EMPTY;
}
function emptyScheduled(scheduler) {
    return new _Observable__WEBPACK_IMPORTED_MODULE_0__/* .Observable */ .y(function (subscriber) { return scheduler.schedule(function () { return subscriber.complete(); }); });
}
//# sourceMappingURL=empty.js.map


/***/ }),

/***/ 4072:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "D": () => /* binding */ from
});

// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/Observable.js + 3 modules
var Observable = __webpack_require__(4379);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/util/subscribeTo.js + 3 modules
var subscribeTo = __webpack_require__(7843);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/Subscription.js + 1 modules
var Subscription = __webpack_require__(3884);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/symbol/observable.js
var symbol_observable = __webpack_require__(5050);
;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduled/scheduleObservable.js
/** PURE_IMPORTS_START _Observable,_Subscription,_symbol_observable PURE_IMPORTS_END */



function scheduleObservable(input, scheduler) {
    return new Observable/* Observable */.y(function (subscriber) {
        var sub = new Subscription/* Subscription */.w();
        sub.add(scheduler.schedule(function () {
            var observable = input[symbol_observable/* observable */.L]();
            sub.add(observable.subscribe({
                next: function (value) { sub.add(scheduler.schedule(function () { return subscriber.next(value); })); },
                error: function (err) { sub.add(scheduler.schedule(function () { return subscriber.error(err); })); },
                complete: function () { sub.add(scheduler.schedule(function () { return subscriber.complete(); })); },
            }));
        }));
        return sub;
    });
}
//# sourceMappingURL=scheduleObservable.js.map

;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduled/schedulePromise.js
/** PURE_IMPORTS_START _Observable,_Subscription PURE_IMPORTS_END */


function schedulePromise(input, scheduler) {
    return new Observable/* Observable */.y(function (subscriber) {
        var sub = new Subscription/* Subscription */.w();
        sub.add(scheduler.schedule(function () {
            return input.then(function (value) {
                sub.add(scheduler.schedule(function () {
                    subscriber.next(value);
                    sub.add(scheduler.schedule(function () { return subscriber.complete(); }));
                }));
            }, function (err) {
                sub.add(scheduler.schedule(function () { return subscriber.error(err); }));
            });
        }));
        return sub;
    });
}
//# sourceMappingURL=schedulePromise.js.map

// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/scheduled/scheduleArray.js
var scheduleArray = __webpack_require__(3109);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/symbol/iterator.js
var symbol_iterator = __webpack_require__(999);
;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduled/scheduleIterable.js
/** PURE_IMPORTS_START _Observable,_Subscription,_symbol_iterator PURE_IMPORTS_END */



function scheduleIterable(input, scheduler) {
    if (!input) {
        throw new Error('Iterable cannot be null');
    }
    return new Observable/* Observable */.y(function (subscriber) {
        var sub = new Subscription/* Subscription */.w();
        var iterator;
        sub.add(function () {
            if (iterator && typeof iterator.return === 'function') {
                iterator.return();
            }
        });
        sub.add(scheduler.schedule(function () {
            iterator = input[symbol_iterator/* iterator */.hZ]();
            sub.add(scheduler.schedule(function () {
                if (subscriber.closed) {
                    return;
                }
                var value;
                var done;
                try {
                    var result = iterator.next();
                    value = result.value;
                    done = result.done;
                }
                catch (err) {
                    subscriber.error(err);
                    return;
                }
                if (done) {
                    subscriber.complete();
                }
                else {
                    subscriber.next(value);
                    this.schedule();
                }
            }));
        }));
        return sub;
    });
}
//# sourceMappingURL=scheduleIterable.js.map

;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/isInteropObservable.js
/** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */

function isInteropObservable(input) {
    return input && typeof input[symbol_observable/* observable */.L] === 'function';
}
//# sourceMappingURL=isInteropObservable.js.map

// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/util/isPromise.js
var isPromise = __webpack_require__(336);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/util/isArrayLike.js
var isArrayLike = __webpack_require__(9217);
;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/isIterable.js
/** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */

function isIterable(input) {
    return input && typeof input[symbol_iterator/* iterator */.hZ] === 'function';
}
//# sourceMappingURL=isIterable.js.map

;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduled/scheduled.js
/** PURE_IMPORTS_START _scheduleObservable,_schedulePromise,_scheduleArray,_scheduleIterable,_util_isInteropObservable,_util_isPromise,_util_isArrayLike,_util_isIterable PURE_IMPORTS_END */








function scheduled(input, scheduler) {
    if (input != null) {
        if (isInteropObservable(input)) {
            return scheduleObservable(input, scheduler);
        }
        else if ((0,isPromise/* isPromise */.t)(input)) {
            return schedulePromise(input, scheduler);
        }
        else if ((0,isArrayLike/* isArrayLike */.z)(input)) {
            return (0,scheduleArray/* scheduleArray */.r)(input, scheduler);
        }
        else if (isIterable(input) || typeof input === 'string') {
            return scheduleIterable(input, scheduler);
        }
    }
    throw new TypeError((input !== null && typeof input || input) + ' is not observable');
}
//# sourceMappingURL=scheduled.js.map

;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/from.js
/** PURE_IMPORTS_START _Observable,_util_subscribeTo,_scheduled_scheduled PURE_IMPORTS_END */



function from(input, scheduler) {
    if (!scheduler) {
        if (input instanceof Observable/* Observable */.y) {
            return input;
        }
        return new Observable/* Observable */.y((0,subscribeTo/* subscribeTo */.s)(input));
    }
    else {
        return scheduled(input, scheduler);
    }
}
//# sourceMappingURL=from.js.map


/***/ }),

/***/ 3375:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "n": () => /* binding */ fromArray
/* harmony export */ });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4379);
/* harmony import */ var _util_subscribeToArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6900);
/* harmony import */ var _scheduled_scheduleArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3109);
/** PURE_IMPORTS_START _Observable,_util_subscribeToArray,_scheduled_scheduleArray PURE_IMPORTS_END */



function fromArray(input, scheduler) {
    if (!scheduler) {
        return new _Observable__WEBPACK_IMPORTED_MODULE_0__/* .Observable */ .y((0,_util_subscribeToArray__WEBPACK_IMPORTED_MODULE_1__/* .subscribeToArray */ .V)(input));
    }
    else {
        return (0,_scheduled_scheduleArray__WEBPACK_IMPORTED_MODULE_2__/* .scheduleArray */ .r)(input, scheduler);
    }
}
//# sourceMappingURL=fromArray.js.map


/***/ }),

/***/ 7027:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "R": () => /* binding */ fromEvent
/* harmony export */ });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(4379);
/* harmony import */ var _util_isArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9026);
/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4156);
/* harmony import */ var _operators_map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5709);
/** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */




var toString = /*@__PURE__*/ (/* unused pure expression or super */ null && ((function () { return Object.prototype.toString; })()));
function fromEvent(target, eventName, options, resultSelector) {
    if ((0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .m)(options)) {
        resultSelector = options;
        options = undefined;
    }
    if (resultSelector) {
        return fromEvent(target, eventName, options).pipe((0,_operators_map__WEBPACK_IMPORTED_MODULE_1__/* .map */ .U)(function (args) { return (0,_util_isArray__WEBPACK_IMPORTED_MODULE_2__/* .isArray */ .k)(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
    }
    return new _Observable__WEBPACK_IMPORTED_MODULE_3__/* .Observable */ .y(function (subscriber) {
        function handler(e) {
            if (arguments.length > 1) {
                subscriber.next(Array.prototype.slice.call(arguments));
            }
            else {
                subscriber.next(e);
            }
        }
        setupSubscription(target, eventName, handler, subscriber, options);
    });
}
function setupSubscription(sourceObj, eventName, handler, subscriber, options) {
    var unsubscribe;
    if (isEventTarget(sourceObj)) {
        var source_1 = sourceObj;
        sourceObj.addEventListener(eventName, handler, options);
        unsubscribe = function () { return source_1.removeEventListener(eventName, handler, options); };
    }
    else if (isJQueryStyleEventEmitter(sourceObj)) {
        var source_2 = sourceObj;
        sourceObj.on(eventName, handler);
        unsubscribe = function () { return source_2.off(eventName, handler); };
    }
    else if (isNodeStyleEventEmitter(sourceObj)) {
        var source_3 = sourceObj;
        sourceObj.addListener(eventName, handler);
        unsubscribe = function () { return source_3.removeListener(eventName, handler); };
    }
    else if (sourceObj && sourceObj.length) {
        for (var i = 0, len = sourceObj.length; i < len; i++) {
            setupSubscription(sourceObj[i], eventName, handler, subscriber, options);
        }
    }
    else {
        throw new TypeError('Invalid event target');
    }
    subscriber.add(unsubscribe);
}
function isNodeStyleEventEmitter(sourceObj) {
    return sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';
}
function isJQueryStyleEventEmitter(sourceObj) {
    return sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';
}
function isEventTarget(sourceObj) {
    return sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';
}
//# sourceMappingURL=fromEvent.js.map


/***/ }),

/***/ 6564:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "F": () => /* binding */ interval
/* harmony export */ });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4379);
/* harmony import */ var _scheduler_async__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(964);
/* harmony import */ var _util_isNumeric__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5812);
/** PURE_IMPORTS_START _Observable,_scheduler_async,_util_isNumeric PURE_IMPORTS_END */



function interval(period, scheduler) {
    if (period === void 0) {
        period = 0;
    }
    if (scheduler === void 0) {
        scheduler = _scheduler_async__WEBPACK_IMPORTED_MODULE_0__/* .async */ .P;
    }
    if (!(0,_util_isNumeric__WEBPACK_IMPORTED_MODULE_1__/* .isNumeric */ .k)(period) || period < 0) {
        period = 0;
    }
    if (!scheduler || typeof scheduler.schedule !== 'function') {
        scheduler = _scheduler_async__WEBPACK_IMPORTED_MODULE_0__/* .async */ .P;
    }
    return new _Observable__WEBPACK_IMPORTED_MODULE_2__/* .Observable */ .y(function (subscriber) {
        subscriber.add(scheduler.schedule(dispatch, period, { subscriber: subscriber, counter: 0, period: period }));
        return subscriber;
    });
}
function dispatch(state) {
    var subscriber = state.subscriber, counter = state.counter, period = state.period;
    subscriber.next(counter);
    this.schedule({ subscriber: subscriber, counter: counter + 1, period: period }, period);
}
//# sourceMappingURL=interval.js.map


/***/ }),

/***/ 4370:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "T": () => /* binding */ merge
/* harmony export */ });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4379);
/* harmony import */ var _util_isScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7507);
/* harmony import */ var _operators_mergeAll__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2556);
/* harmony import */ var _fromArray__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(3375);
/** PURE_IMPORTS_START _Observable,_util_isScheduler,_operators_mergeAll,_fromArray PURE_IMPORTS_END */




function merge() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    var concurrent = Number.POSITIVE_INFINITY;
    var scheduler = null;
    var last = observables[observables.length - 1];
    if ((0,_util_isScheduler__WEBPACK_IMPORTED_MODULE_0__/* .isScheduler */ .K)(last)) {
        scheduler = observables.pop();
        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {
            concurrent = observables.pop();
        }
    }
    else if (typeof last === 'number') {
        concurrent = observables.pop();
    }
    if (scheduler === null && observables.length === 1 && observables[0] instanceof _Observable__WEBPACK_IMPORTED_MODULE_1__/* .Observable */ .y) {
        return observables[0];
    }
    return (0,_operators_mergeAll__WEBPACK_IMPORTED_MODULE_2__/* .mergeAll */ .J)(concurrent)((0,_fromArray__WEBPACK_IMPORTED_MODULE_3__/* .fromArray */ .n)(observables, scheduler));
}
//# sourceMappingURL=merge.js.map


/***/ }),

/***/ 8170:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "of": () => /* binding */ of
/* harmony export */ });
/* harmony import */ var _util_isScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7507);
/* harmony import */ var _fromArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3375);
/* harmony import */ var _scheduled_scheduleArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3109);
/** PURE_IMPORTS_START _util_isScheduler,_fromArray,_scheduled_scheduleArray PURE_IMPORTS_END */



function of() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var scheduler = args[args.length - 1];
    if ((0,_util_isScheduler__WEBPACK_IMPORTED_MODULE_0__/* .isScheduler */ .K)(scheduler)) {
        args.pop();
        return (0,_scheduled_scheduleArray__WEBPACK_IMPORTED_MODULE_1__/* .scheduleArray */ .r)(args, scheduler);
    }
    else {
        return (0,_fromArray__WEBPACK_IMPORTED_MODULE_2__/* .fromArray */ .n)(args);
    }
}
//# sourceMappingURL=of.js.map


/***/ }),

/***/ 8821:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "S3": () => /* binding */ race
/* harmony export */ });
/* unused harmony exports RaceOperator, RaceSubscriber */
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(655);
/* harmony import */ var _util_isArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9026);
/* harmony import */ var _fromArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3375);
/* harmony import */ var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(2039);
/* harmony import */ var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(2080);
/** PURE_IMPORTS_START tslib,_util_isArray,_fromArray,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */





function race() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    if (observables.length === 1) {
        if ((0,_util_isArray__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .k)(observables[0])) {
            observables = observables[0];
        }
        else {
            return observables[0];
        }
    }
    return (0,_fromArray__WEBPACK_IMPORTED_MODULE_1__/* .fromArray */ .n)(observables, undefined).lift(new RaceOperator());
}
var RaceOperator = /*@__PURE__*/ (function () {
    function RaceOperator() {
    }
    RaceOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new RaceSubscriber(subscriber));
    };
    return RaceOperator;
}());

var RaceSubscriber = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_2__/* .__extends */ .ZT(RaceSubscriber, _super);
    function RaceSubscriber(destination) {
        var _this = _super.call(this, destination) || this;
        _this.hasFirst = false;
        _this.observables = [];
        _this.subscriptions = [];
        return _this;
    }
    RaceSubscriber.prototype._next = function (observable) {
        this.observables.push(observable);
    };
    RaceSubscriber.prototype._complete = function () {
        var observables = this.observables;
        var len = observables.length;
        if (len === 0) {
            this.destination.complete();
        }
        else {
            for (var i = 0; i < len && !this.hasFirst; i++) {
                var observable = observables[i];
                var subscription = (0,_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_3__/* .subscribeToResult */ .D)(this, observable, undefined, i);
                if (this.subscriptions) {
                    this.subscriptions.push(subscription);
                }
                this.add(subscription);
            }
            this.observables = null;
        }
    };
    RaceSubscriber.prototype.notifyNext = function (_outerValue, innerValue, outerIndex) {
        if (!this.hasFirst) {
            this.hasFirst = true;
            for (var i = 0; i < this.subscriptions.length; i++) {
                if (i !== outerIndex) {
                    var subscription = this.subscriptions[i];
                    subscription.unsubscribe();
                    this.remove(subscription);
                }
            }
            this.subscriptions = null;
        }
        this.destination.next(innerValue);
    };
    return RaceSubscriber;
}(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_4__/* .OuterSubscriber */ .L));

//# sourceMappingURL=race.js.map


/***/ }),

/***/ 4944:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "_": () => /* binding */ throwError
/* harmony export */ });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4379);
/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */

function throwError(error, scheduler) {
    if (!scheduler) {
        return new _Observable__WEBPACK_IMPORTED_MODULE_0__/* .Observable */ .y(function (subscriber) { return subscriber.error(error); });
    }
    else {
        return new _Observable__WEBPACK_IMPORTED_MODULE_0__/* .Observable */ .y(function (subscriber) { return scheduler.schedule(dispatch, 0, { error: error, subscriber: subscriber }); });
    }
}
function dispatch(_a) {
    var error = _a.error, subscriber = _a.subscriber;
    subscriber.error(error);
}
//# sourceMappingURL=throwError.js.map


/***/ }),

/***/ 9604:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "H": () => /* binding */ timer
/* harmony export */ });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(4379);
/* harmony import */ var _scheduler_async__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(964);
/* harmony import */ var _util_isNumeric__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5812);
/* harmony import */ var _util_isScheduler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7507);
/** PURE_IMPORTS_START _Observable,_scheduler_async,_util_isNumeric,_util_isScheduler PURE_IMPORTS_END */




function timer(dueTime, periodOrScheduler, scheduler) {
    if (dueTime === void 0) {
        dueTime = 0;
    }
    var period = -1;
    if ((0,_util_isNumeric__WEBPACK_IMPORTED_MODULE_0__/* .isNumeric */ .k)(periodOrScheduler)) {
        period = Number(periodOrScheduler) < 1 && 1 || Number(periodOrScheduler);
    }
    else if ((0,_util_isScheduler__WEBPACK_IMPORTED_MODULE_1__/* .isScheduler */ .K)(periodOrScheduler)) {
        scheduler = periodOrScheduler;
    }
    if (!(0,_util_isScheduler__WEBPACK_IMPORTED_MODULE_1__/* .isScheduler */ .K)(scheduler)) {
        scheduler = _scheduler_async__WEBPACK_IMPORTED_MODULE_2__/* .async */ .P;
    }
    return new _Observable__WEBPACK_IMPORTED_MODULE_3__/* .Observable */ .y(function (subscriber) {
        var due = (0,_util_isNumeric__WEBPACK_IMPORTED_MODULE_0__/* .isNumeric */ .k)(dueTime)
            ? dueTime
            : (+dueTime - scheduler.now());
        return scheduler.schedule(dispatch, due, {
            index: 0, period: period, subscriber: subscriber
        });
    });
}
function dispatch(state) {
    var index = state.index, period = state.period, subscriber = state.subscriber;
    subscriber.next(index);
    if (subscriber.closed) {
        return;
    }
    else if (period === -1) {
        return subscriber.complete();
    }
    state.index = index + 1;
    this.schedule(state, period);
}
//# sourceMappingURL=timer.js.map


/***/ }),

/***/ 486:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "K": () => /* binding */ catchError
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(655);
/* harmony import */ var _innerSubscribe__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7604);
/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */


function catchError(selector) {
    return function catchErrorOperatorFunction(source) {
        var operator = new CatchOperator(selector);
        var caught = source.lift(operator);
        return (operator.caught = caught);
    };
}
var CatchOperator = /*@__PURE__*/ (function () {
    function CatchOperator(selector) {
        this.selector = selector;
    }
    CatchOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));
    };
    return CatchOperator;
}());
var CatchSubscriber = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__/* .__extends */ .ZT(CatchSubscriber, _super);
    function CatchSubscriber(destination, selector, caught) {
        var _this = _super.call(this, destination) || this;
        _this.selector = selector;
        _this.caught = caught;
        return _this;
    }
    CatchSubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var result = void 0;
            try {
                result = this.selector(err, this.caught);
            }
            catch (err2) {
                _super.prototype.error.call(this, err2);
                return;
            }
            this._unsubscribeAndRecycle();
            var innerSubscriber = new _innerSubscribe__WEBPACK_IMPORTED_MODULE_1__/* .SimpleInnerSubscriber */ .IY(this);
            this.add(innerSubscriber);
            var innerSubscription = (0,_innerSubscribe__WEBPACK_IMPORTED_MODULE_1__/* .innerSubscribe */ .ft)(result, innerSubscriber);
            if (innerSubscription !== innerSubscriber) {
                this.add(innerSubscription);
            }
        }
    };
    return CatchSubscriber;
}(_innerSubscribe__WEBPACK_IMPORTED_MODULE_1__/* .SimpleOuterSubscriber */ .Ds));
//# sourceMappingURL=catchError.js.map


/***/ }),

/***/ 2257:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "u": () => /* binding */ concatAll
/* harmony export */ });
/* harmony import */ var _mergeAll__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2556);
/** PURE_IMPORTS_START _mergeAll PURE_IMPORTS_END */

function concatAll() {
    return (0,_mergeAll__WEBPACK_IMPORTED_MODULE_0__/* .mergeAll */ .J)(1);
}
//# sourceMappingURL=concatAll.js.map


/***/ }),

/***/ 1931:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "x": () => /* binding */ distinctUntilChanged
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(655);
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(979);
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


function distinctUntilChanged(compare, keySelector) {
    return function (source) { return source.lift(new DistinctUntilChangedOperator(compare, keySelector)); };
}
var DistinctUntilChangedOperator = /*@__PURE__*/ (function () {
    function DistinctUntilChangedOperator(compare, keySelector) {
        this.compare = compare;
        this.keySelector = keySelector;
    }
    DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));
    };
    return DistinctUntilChangedOperator;
}());
var DistinctUntilChangedSubscriber = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__/* .__extends */ .ZT(DistinctUntilChangedSubscriber, _super);
    function DistinctUntilChangedSubscriber(destination, compare, keySelector) {
        var _this = _super.call(this, destination) || this;
        _this.keySelector = keySelector;
        _this.hasKey = false;
        if (typeof compare === 'function') {
            _this.compare = compare;
        }
        return _this;
    }
    DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {
        return x === y;
    };
    DistinctUntilChangedSubscriber.prototype._next = function (value) {
        var key;
        try {
            var keySelector = this.keySelector;
            key = keySelector ? keySelector(value) : value;
        }
        catch (err) {
            return this.destination.error(err);
        }
        var result = false;
        if (this.hasKey) {
            try {
                var compare = this.compare;
                result = compare(this.key, key);
            }
            catch (err) {
                return this.destination.error(err);
            }
        }
        else {
            this.hasKey = true;
        }
        if (!result) {
            this.key = key;
            this.destination.next(value);
        }
    };
    return DistinctUntilChangedSubscriber;
}(_Subscriber__WEBPACK_IMPORTED_MODULE_1__/* .Subscriber */ .L));
//# sourceMappingURL=distinctUntilChanged.js.map


/***/ }),

/***/ 6008:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "h": () => /* binding */ filter
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(655);
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(979);
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


function filter(predicate, thisArg) {
    return function filterOperatorFunction(source) {
        return source.lift(new FilterOperator(predicate, thisArg));
    };
}
var FilterOperator = /*@__PURE__*/ (function () {
    function FilterOperator(predicate, thisArg) {
        this.predicate = predicate;
        this.thisArg = thisArg;
    }
    FilterOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));
    };
    return FilterOperator;
}());
var FilterSubscriber = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__/* .__extends */ .ZT(FilterSubscriber, _super);
    function FilterSubscriber(destination, predicate, thisArg) {
        var _this = _super.call(this, destination) || this;
        _this.predicate = predicate;
        _this.thisArg = thisArg;
        _this.count = 0;
        return _this;
    }
    FilterSubscriber.prototype._next = function (value) {
        var result;
        try {
            result = this.predicate.call(this.thisArg, value, this.count++);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        if (result) {
            this.destination.next(value);
        }
    };
    return FilterSubscriber;
}(_Subscriber__WEBPACK_IMPORTED_MODULE_1__/* .Subscriber */ .L));
//# sourceMappingURL=filter.js.map


/***/ }),

/***/ 6738:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "l": () => /* binding */ ignoreElements
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(655);
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(979);
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


function ignoreElements() {
    return function ignoreElementsOperatorFunction(source) {
        return source.lift(new IgnoreElementsOperator());
    };
}
var IgnoreElementsOperator = /*@__PURE__*/ (function () {
    function IgnoreElementsOperator() {
    }
    IgnoreElementsOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new IgnoreElementsSubscriber(subscriber));
    };
    return IgnoreElementsOperator;
}());
var IgnoreElementsSubscriber = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__/* .__extends */ .ZT(IgnoreElementsSubscriber, _super);
    function IgnoreElementsSubscriber() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IgnoreElementsSubscriber.prototype._next = function (unused) {
    };
    return IgnoreElementsSubscriber;
}(_Subscriber__WEBPACK_IMPORTED_MODULE_1__/* .Subscriber */ .L));
//# sourceMappingURL=ignoreElements.js.map


/***/ }),

/***/ 5709:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "U": () => /* binding */ map
/* harmony export */ });
/* unused harmony export MapOperator */
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(655);
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(979);
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


function map(project, thisArg) {
    return function mapOperation(source) {
        if (typeof project !== 'function') {
            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
        }
        return source.lift(new MapOperator(project, thisArg));
    };
}
var MapOperator = /*@__PURE__*/ (function () {
    function MapOperator(project, thisArg) {
        this.project = project;
        this.thisArg = thisArg;
    }
    MapOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
    };
    return MapOperator;
}());

var MapSubscriber = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__/* .__extends */ .ZT(MapSubscriber, _super);
    function MapSubscriber(destination, project, thisArg) {
        var _this = _super.call(this, destination) || this;
        _this.project = project;
        _this.count = 0;
        _this.thisArg = thisArg || _this;
        return _this;
    }
    MapSubscriber.prototype._next = function (value) {
        var result;
        try {
            result = this.project.call(this.thisArg, value, this.count++);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return MapSubscriber;
}(_Subscriber__WEBPACK_IMPORTED_MODULE_1__/* .Subscriber */ .L));
//# sourceMappingURL=map.js.map


/***/ }),

/***/ 5602:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "h": () => /* binding */ mapTo
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(655);
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(979);
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


function mapTo(value) {
    return function (source) { return source.lift(new MapToOperator(value)); };
}
var MapToOperator = /*@__PURE__*/ (function () {
    function MapToOperator(value) {
        this.value = value;
    }
    MapToOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new MapToSubscriber(subscriber, this.value));
    };
    return MapToOperator;
}());
var MapToSubscriber = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__/* .__extends */ .ZT(MapToSubscriber, _super);
    function MapToSubscriber(destination, value) {
        var _this = _super.call(this, destination) || this;
        _this.value = value;
        return _this;
    }
    MapToSubscriber.prototype._next = function (x) {
        this.destination.next(this.value);
    };
    return MapToSubscriber;
}(_Subscriber__WEBPACK_IMPORTED_MODULE_1__/* .Subscriber */ .L));
//# sourceMappingURL=mapTo.js.map


/***/ }),

/***/ 2556:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "J": () => /* binding */ mergeAll
/* harmony export */ });
/* harmony import */ var _mergeMap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7746);
/* harmony import */ var _util_identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3608);
/** PURE_IMPORTS_START _mergeMap,_util_identity PURE_IMPORTS_END */


function mergeAll(concurrent) {
    if (concurrent === void 0) {
        concurrent = Number.POSITIVE_INFINITY;
    }
    return (0,_mergeMap__WEBPACK_IMPORTED_MODULE_0__/* .mergeMap */ .zg)(_util_identity__WEBPACK_IMPORTED_MODULE_1__/* .identity */ .y, concurrent);
}
//# sourceMappingURL=mergeAll.js.map


/***/ }),

/***/ 7746:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "zg": () => /* binding */ mergeMap
/* harmony export */ });
/* unused harmony exports MergeMapOperator, MergeMapSubscriber, flatMap */
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(655);
/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5709);
/* harmony import */ var _observable_from__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4072);
/* harmony import */ var _innerSubscribe__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7604);
/** PURE_IMPORTS_START tslib,_map,_observable_from,_innerSubscribe PURE_IMPORTS_END */




function mergeMap(project, resultSelector, concurrent) {
    if (concurrent === void 0) {
        concurrent = Number.POSITIVE_INFINITY;
    }
    if (typeof resultSelector === 'function') {
        return function (source) { return source.pipe(mergeMap(function (a, i) { return (0,_observable_from__WEBPACK_IMPORTED_MODULE_0__/* .from */ .D)(project(a, i)).pipe((0,_map__WEBPACK_IMPORTED_MODULE_1__/* .map */ .U)(function (b, ii) { return resultSelector(a, b, i, ii); })); }, concurrent)); };
    }
    else if (typeof resultSelector === 'number') {
        concurrent = resultSelector;
    }
    return function (source) { return source.lift(new MergeMapOperator(project, concurrent)); };
}
var MergeMapOperator = /*@__PURE__*/ (function () {
    function MergeMapOperator(project, concurrent) {
        if (concurrent === void 0) {
            concurrent = Number.POSITIVE_INFINITY;
        }
        this.project = project;
        this.concurrent = concurrent;
    }
    MergeMapOperator.prototype.call = function (observer, source) {
        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));
    };
    return MergeMapOperator;
}());

var MergeMapSubscriber = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_2__/* .__extends */ .ZT(MergeMapSubscriber, _super);
    function MergeMapSubscriber(destination, project, concurrent) {
        if (concurrent === void 0) {
            concurrent = Number.POSITIVE_INFINITY;
        }
        var _this = _super.call(this, destination) || this;
        _this.project = project;
        _this.concurrent = concurrent;
        _this.hasCompleted = false;
        _this.buffer = [];
        _this.active = 0;
        _this.index = 0;
        return _this;
    }
    MergeMapSubscriber.prototype._next = function (value) {
        if (this.active < this.concurrent) {
            this._tryNext(value);
        }
        else {
            this.buffer.push(value);
        }
    };
    MergeMapSubscriber.prototype._tryNext = function (value) {
        var result;
        var index = this.index++;
        try {
            result = this.project(value, index);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.active++;
        this._innerSub(result);
    };
    MergeMapSubscriber.prototype._innerSub = function (ish) {
        var innerSubscriber = new _innerSubscribe__WEBPACK_IMPORTED_MODULE_3__/* .SimpleInnerSubscriber */ .IY(this);
        var destination = this.destination;
        destination.add(innerSubscriber);
        var innerSubscription = (0,_innerSubscribe__WEBPACK_IMPORTED_MODULE_3__/* .innerSubscribe */ .ft)(ish, innerSubscriber);
        if (innerSubscription !== innerSubscriber) {
            destination.add(innerSubscription);
        }
    };
    MergeMapSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (this.active === 0 && this.buffer.length === 0) {
            this.destination.complete();
        }
        this.unsubscribe();
    };
    MergeMapSubscriber.prototype.notifyNext = function (innerValue) {
        this.destination.next(innerValue);
    };
    MergeMapSubscriber.prototype.notifyComplete = function () {
        var buffer = this.buffer;
        this.active--;
        if (buffer.length > 0) {
            this._next(buffer.shift());
        }
        else if (this.active === 0 && this.hasCompleted) {
            this.destination.complete();
        }
    };
    return MergeMapSubscriber;
}(_innerSubscribe__WEBPACK_IMPORTED_MODULE_3__/* .SimpleOuterSubscriber */ .Ds));

var flatMap = (/* unused pure expression or super */ null && (mergeMap));
//# sourceMappingURL=mergeMap.js.map


/***/ }),

/***/ 3756:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "j": () => /* binding */ mergeMapTo
/* harmony export */ });
/* harmony import */ var _mergeMap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7746);
/** PURE_IMPORTS_START _mergeMap PURE_IMPORTS_END */

function mergeMapTo(innerObservable, resultSelector, concurrent) {
    if (concurrent === void 0) {
        concurrent = Number.POSITIVE_INFINITY;
    }
    if (typeof resultSelector === 'function') {
        return (0,_mergeMap__WEBPACK_IMPORTED_MODULE_0__/* .mergeMap */ .zg)(function () { return innerObservable; }, resultSelector, concurrent);
    }
    if (typeof resultSelector === 'number') {
        concurrent = resultSelector;
    }
    return (0,_mergeMap__WEBPACK_IMPORTED_MODULE_0__/* .mergeMap */ .zg)(function () { return innerObservable; }, concurrent);
}
//# sourceMappingURL=mergeMapTo.js.map


/***/ }),

/***/ 1421:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "O": () => /* binding */ multicast
});

// UNUSED EXPORTS: MulticastOperator

// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.js
var tslib_es6 = __webpack_require__(655);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/Subject.js
var Subject = __webpack_require__(211);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/Observable.js + 3 modules
var Observable = __webpack_require__(4379);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/Subscriber.js
var Subscriber = __webpack_require__(979);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/Subscription.js + 1 modules
var Subscription = __webpack_require__(3884);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/refCount.js
var refCount = __webpack_require__(3018);
;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/ConnectableObservable.js
/** PURE_IMPORTS_START tslib,_Subject,_Observable,_Subscriber,_Subscription,_operators_refCount PURE_IMPORTS_END */






var ConnectableObservable = /*@__PURE__*/ (function (_super) {
    tslib_es6/* __extends */.ZT(ConnectableObservable, _super);
    function ConnectableObservable(source, subjectFactory) {
        var _this = _super.call(this) || this;
        _this.source = source;
        _this.subjectFactory = subjectFactory;
        _this._refCount = 0;
        _this._isComplete = false;
        return _this;
    }
    ConnectableObservable.prototype._subscribe = function (subscriber) {
        return this.getSubject().subscribe(subscriber);
    };
    ConnectableObservable.prototype.getSubject = function () {
        var subject = this._subject;
        if (!subject || subject.isStopped) {
            this._subject = this.subjectFactory();
        }
        return this._subject;
    };
    ConnectableObservable.prototype.connect = function () {
        var connection = this._connection;
        if (!connection) {
            this._isComplete = false;
            connection = this._connection = new Subscription/* Subscription */.w();
            connection.add(this.source
                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));
            if (connection.closed) {
                this._connection = null;
                connection = Subscription/* Subscription.EMPTY */.w.EMPTY;
            }
        }
        return connection;
    };
    ConnectableObservable.prototype.refCount = function () {
        return (0,refCount/* refCount */.x)()(this);
    };
    return ConnectableObservable;
}(Observable/* Observable */.y));

var connectableObservableDescriptor = /*@__PURE__*/ (function () {
    var connectableProto = ConnectableObservable.prototype;
    return {
        operator: { value: null },
        _refCount: { value: 0, writable: true },
        _subject: { value: null, writable: true },
        _connection: { value: null, writable: true },
        _subscribe: { value: connectableProto._subscribe },
        _isComplete: { value: connectableProto._isComplete, writable: true },
        getSubject: { value: connectableProto.getSubject },
        connect: { value: connectableProto.connect },
        refCount: { value: connectableProto.refCount }
    };
})();
var ConnectableSubscriber = /*@__PURE__*/ (function (_super) {
    tslib_es6/* __extends */.ZT(ConnectableSubscriber, _super);
    function ConnectableSubscriber(destination, connectable) {
        var _this = _super.call(this, destination) || this;
        _this.connectable = connectable;
        return _this;
    }
    ConnectableSubscriber.prototype._error = function (err) {
        this._unsubscribe();
        _super.prototype._error.call(this, err);
    };
    ConnectableSubscriber.prototype._complete = function () {
        this.connectable._isComplete = true;
        this._unsubscribe();
        _super.prototype._complete.call(this);
    };
    ConnectableSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (connectable) {
            this.connectable = null;
            var connection = connectable._connection;
            connectable._refCount = 0;
            connectable._subject = null;
            connectable._connection = null;
            if (connection) {
                connection.unsubscribe();
            }
        }
    };
    return ConnectableSubscriber;
}(Subject/* SubjectSubscriber */.Yc));
var RefCountOperator = /*@__PURE__*/ ((/* unused pure expression or super */ null && (function () {
    function RefCountOperator(connectable) {
        this.connectable = connectable;
    }
    RefCountOperator.prototype.call = function (subscriber, source) {
        var connectable = this.connectable;
        connectable._refCount++;
        var refCounter = new RefCountSubscriber(subscriber, connectable);
        var subscription = source.subscribe(refCounter);
        if (!refCounter.closed) {
            refCounter.connection = connectable.connect();
        }
        return subscription;
    };
    return RefCountOperator;
}())));
var RefCountSubscriber = /*@__PURE__*/ (function (_super) {
    tslib_es6/* __extends */.ZT(RefCountSubscriber, _super);
    function RefCountSubscriber(destination, connectable) {
        var _this = _super.call(this, destination) || this;
        _this.connectable = connectable;
        return _this;
    }
    RefCountSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (!connectable) {
            this.connection = null;
            return;
        }
        this.connectable = null;
        var refCount = connectable._refCount;
        if (refCount <= 0) {
            this.connection = null;
            return;
        }
        connectable._refCount = refCount - 1;
        if (refCount > 1) {
            this.connection = null;
            return;
        }
        var connection = this.connection;
        var sharedConnection = connectable._connection;
        this.connection = null;
        if (sharedConnection && (!connection || sharedConnection === connection)) {
            sharedConnection.unsubscribe();
        }
    };
    return RefCountSubscriber;
}(Subscriber/* Subscriber */.L));
//# sourceMappingURL=ConnectableObservable.js.map

;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/multicast.js
/** PURE_IMPORTS_START _observable_ConnectableObservable PURE_IMPORTS_END */

function multicast(subjectOrSubjectFactory, selector) {
    return function multicastOperatorFunction(source) {
        var subjectFactory;
        if (typeof subjectOrSubjectFactory === 'function') {
            subjectFactory = subjectOrSubjectFactory;
        }
        else {
            subjectFactory = function subjectFactory() {
                return subjectOrSubjectFactory;
            };
        }
        if (typeof selector === 'function') {
            return source.lift(new MulticastOperator(subjectFactory, selector));
        }
        var connectable = Object.create(source, connectableObservableDescriptor);
        connectable.source = source;
        connectable.subjectFactory = subjectFactory;
        return connectable;
    };
}
var MulticastOperator = /*@__PURE__*/ (function () {
    function MulticastOperator(subjectFactory, selector) {
        this.subjectFactory = subjectFactory;
        this.selector = selector;
    }
    MulticastOperator.prototype.call = function (subscriber, source) {
        var selector = this.selector;
        var subject = this.subjectFactory();
        var subscription = selector(subject).subscribe(subscriber);
        subscription.add(source.subscribe(subject));
        return subscription;
    };
    return MulticastOperator;
}());

//# sourceMappingURL=multicast.js.map


/***/ }),

/***/ 3018:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "x": () => /* binding */ refCount
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(655);
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(979);
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


function refCount() {
    return function refCountOperatorFunction(source) {
        return source.lift(new RefCountOperator(source));
    };
}
var RefCountOperator = /*@__PURE__*/ (function () {
    function RefCountOperator(connectable) {
        this.connectable = connectable;
    }
    RefCountOperator.prototype.call = function (subscriber, source) {
        var connectable = this.connectable;
        connectable._refCount++;
        var refCounter = new RefCountSubscriber(subscriber, connectable);
        var subscription = source.subscribe(refCounter);
        if (!refCounter.closed) {
            refCounter.connection = connectable.connect();
        }
        return subscription;
    };
    return RefCountOperator;
}());
var RefCountSubscriber = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__/* .__extends */ .ZT(RefCountSubscriber, _super);
    function RefCountSubscriber(destination, connectable) {
        var _this = _super.call(this, destination) || this;
        _this.connectable = connectable;
        return _this;
    }
    RefCountSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (!connectable) {
            this.connection = null;
            return;
        }
        this.connectable = null;
        var refCount = connectable._refCount;
        if (refCount <= 0) {
            this.connection = null;
            return;
        }
        connectable._refCount = refCount - 1;
        if (refCount > 1) {
            this.connection = null;
            return;
        }
        var connection = this.connection;
        var sharedConnection = connectable._connection;
        this.connection = null;
        if (sharedConnection && (!connection || sharedConnection === connection)) {
            sharedConnection.unsubscribe();
        }
    };
    return RefCountSubscriber;
}(_Subscriber__WEBPACK_IMPORTED_MODULE_1__/* .Subscriber */ .L));
//# sourceMappingURL=refCount.js.map


/***/ }),

/***/ 2807:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "R": () => /* binding */ scan
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(655);
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(979);
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


function scan(accumulator, seed) {
    var hasSeed = false;
    if (arguments.length >= 2) {
        hasSeed = true;
    }
    return function scanOperatorFunction(source) {
        return source.lift(new ScanOperator(accumulator, seed, hasSeed));
    };
}
var ScanOperator = /*@__PURE__*/ (function () {
    function ScanOperator(accumulator, seed, hasSeed) {
        if (hasSeed === void 0) {
            hasSeed = false;
        }
        this.accumulator = accumulator;
        this.seed = seed;
        this.hasSeed = hasSeed;
    }
    ScanOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));
    };
    return ScanOperator;
}());
var ScanSubscriber = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__/* .__extends */ .ZT(ScanSubscriber, _super);
    function ScanSubscriber(destination, accumulator, _seed, hasSeed) {
        var _this = _super.call(this, destination) || this;
        _this.accumulator = accumulator;
        _this._seed = _seed;
        _this.hasSeed = hasSeed;
        _this.index = 0;
        return _this;
    }
    Object.defineProperty(ScanSubscriber.prototype, "seed", {
        get: function () {
            return this._seed;
        },
        set: function (value) {
            this.hasSeed = true;
            this._seed = value;
        },
        enumerable: true,
        configurable: true
    });
    ScanSubscriber.prototype._next = function (value) {
        if (!this.hasSeed) {
            this.seed = value;
            this.destination.next(value);
        }
        else {
            return this._tryNext(value);
        }
    };
    ScanSubscriber.prototype._tryNext = function (value) {
        var index = this.index++;
        var result;
        try {
            result = this.accumulator(this.seed, value, index);
        }
        catch (err) {
            this.destination.error(err);
        }
        this.seed = result;
        this.destination.next(result);
    };
    return ScanSubscriber;
}(_Subscriber__WEBPACK_IMPORTED_MODULE_1__/* .Subscriber */ .L));
//# sourceMappingURL=scan.js.map


/***/ }),

/***/ 9095:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "B": () => /* binding */ share
/* harmony export */ });
/* harmony import */ var _multicast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1421);
/* harmony import */ var _refCount__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3018);
/* harmony import */ var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(211);
/** PURE_IMPORTS_START _multicast,_refCount,_Subject PURE_IMPORTS_END */



function shareSubjectFactory() {
    return new _Subject__WEBPACK_IMPORTED_MODULE_0__/* .Subject */ .xQ();
}
function share() {
    return function (source) { return (0,_refCount__WEBPACK_IMPORTED_MODULE_1__/* .refCount */ .x)()((0,_multicast__WEBPACK_IMPORTED_MODULE_2__/* .multicast */ .O)(shareSubjectFactory)(source)); };
}
//# sourceMappingURL=share.js.map


/***/ }),

/***/ 7006:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "d": () => /* binding */ shareReplay
/* harmony export */ });
/* harmony import */ var _ReplaySubject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2135);
/** PURE_IMPORTS_START _ReplaySubject PURE_IMPORTS_END */

function shareReplay(configOrBufferSize, windowTime, scheduler) {
    var config;
    if (configOrBufferSize && typeof configOrBufferSize === 'object') {
        config = configOrBufferSize;
    }
    else {
        config = {
            bufferSize: configOrBufferSize,
            windowTime: windowTime,
            refCount: false,
            scheduler: scheduler
        };
    }
    return function (source) { return source.lift(shareReplayOperator(config)); };
}
function shareReplayOperator(_a) {
    var _b = _a.bufferSize, bufferSize = _b === void 0 ? Number.POSITIVE_INFINITY : _b, _c = _a.windowTime, windowTime = _c === void 0 ? Number.POSITIVE_INFINITY : _c, useRefCount = _a.refCount, scheduler = _a.scheduler;
    var subject;
    var refCount = 0;
    var subscription;
    var hasError = false;
    var isComplete = false;
    return function shareReplayOperation(source) {
        refCount++;
        var innerSub;
        if (!subject || hasError) {
            hasError = false;
            subject = new _ReplaySubject__WEBPACK_IMPORTED_MODULE_0__/* .ReplaySubject */ .t(bufferSize, windowTime, scheduler);
            innerSub = subject.subscribe(this);
            subscription = source.subscribe({
                next: function (value) { subject.next(value); },
                error: function (err) {
                    hasError = true;
                    subject.error(err);
                },
                complete: function () {
                    isComplete = true;
                    subscription = undefined;
                    subject.complete();
                },
            });
        }
        else {
            innerSub = subject.subscribe(this);
        }
        this.add(function () {
            refCount--;
            innerSub.unsubscribe();
            if (subscription && !isComplete && useRefCount && refCount === 0) {
                subscription.unsubscribe();
                subscription = undefined;
                subject = undefined;
            }
        });
    };
}
//# sourceMappingURL=shareReplay.js.map


/***/ }),

/***/ 3485:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "O": () => /* binding */ startWith
/* harmony export */ });
/* harmony import */ var _observable_concat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9795);
/* harmony import */ var _util_isScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7507);
/** PURE_IMPORTS_START _observable_concat,_util_isScheduler PURE_IMPORTS_END */


function startWith() {
    var array = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        array[_i] = arguments[_i];
    }
    var scheduler = array[array.length - 1];
    if ((0,_util_isScheduler__WEBPACK_IMPORTED_MODULE_0__/* .isScheduler */ .K)(scheduler)) {
        array.pop();
        return function (source) { return (0,_observable_concat__WEBPACK_IMPORTED_MODULE_1__/* .concat */ .z)(array, source, scheduler); };
    }
    else {
        return function (source) { return (0,_observable_concat__WEBPACK_IMPORTED_MODULE_1__/* .concat */ .z)(array, source); };
    }
}
//# sourceMappingURL=startWith.js.map


/***/ }),

/***/ 6381:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "w": () => /* binding */ switchMap
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(655);
/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5709);
/* harmony import */ var _observable_from__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4072);
/* harmony import */ var _innerSubscribe__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7604);
/** PURE_IMPORTS_START tslib,_map,_observable_from,_innerSubscribe PURE_IMPORTS_END */




function switchMap(project, resultSelector) {
    if (typeof resultSelector === 'function') {
        return function (source) { return source.pipe(switchMap(function (a, i) { return (0,_observable_from__WEBPACK_IMPORTED_MODULE_0__/* .from */ .D)(project(a, i)).pipe((0,_map__WEBPACK_IMPORTED_MODULE_1__/* .map */ .U)(function (b, ii) { return resultSelector(a, b, i, ii); })); })); };
    }
    return function (source) { return source.lift(new SwitchMapOperator(project)); };
}
var SwitchMapOperator = /*@__PURE__*/ (function () {
    function SwitchMapOperator(project) {
        this.project = project;
    }
    SwitchMapOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SwitchMapSubscriber(subscriber, this.project));
    };
    return SwitchMapOperator;
}());
var SwitchMapSubscriber = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_2__/* .__extends */ .ZT(SwitchMapSubscriber, _super);
    function SwitchMapSubscriber(destination, project) {
        var _this = _super.call(this, destination) || this;
        _this.project = project;
        _this.index = 0;
        return _this;
    }
    SwitchMapSubscriber.prototype._next = function (value) {
        var result;
        var index = this.index++;
        try {
            result = this.project(value, index);
        }
        catch (error) {
            this.destination.error(error);
            return;
        }
        this._innerSub(result);
    };
    SwitchMapSubscriber.prototype._innerSub = function (result) {
        var innerSubscription = this.innerSubscription;
        if (innerSubscription) {
            innerSubscription.unsubscribe();
        }
        var innerSubscriber = new _innerSubscribe__WEBPACK_IMPORTED_MODULE_3__/* .SimpleInnerSubscriber */ .IY(this);
        var destination = this.destination;
        destination.add(innerSubscriber);
        this.innerSubscription = (0,_innerSubscribe__WEBPACK_IMPORTED_MODULE_3__/* .innerSubscribe */ .ft)(result, innerSubscriber);
        if (this.innerSubscription !== innerSubscriber) {
            destination.add(this.innerSubscription);
        }
    };
    SwitchMapSubscriber.prototype._complete = function () {
        var innerSubscription = this.innerSubscription;
        if (!innerSubscription || innerSubscription.closed) {
            _super.prototype._complete.call(this);
        }
        this.unsubscribe();
    };
    SwitchMapSubscriber.prototype._unsubscribe = function () {
        this.innerSubscription = undefined;
    };
    SwitchMapSubscriber.prototype.notifyComplete = function () {
        this.innerSubscription = undefined;
        if (this.isStopped) {
            _super.prototype._complete.call(this);
        }
    };
    SwitchMapSubscriber.prototype.notifyNext = function (innerValue) {
        this.destination.next(innerValue);
    };
    return SwitchMapSubscriber;
}(_innerSubscribe__WEBPACK_IMPORTED_MODULE_3__/* .SimpleOuterSubscriber */ .Ds));
//# sourceMappingURL=switchMap.js.map


/***/ }),

/***/ 1198:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "c": () => /* binding */ switchMapTo
/* harmony export */ });
/* harmony import */ var _switchMap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6381);
/** PURE_IMPORTS_START _switchMap PURE_IMPORTS_END */

function switchMapTo(innerObservable, resultSelector) {
    return resultSelector ? (0,_switchMap__WEBPACK_IMPORTED_MODULE_0__/* .switchMap */ .w)(function () { return innerObservable; }, resultSelector) : (0,_switchMap__WEBPACK_IMPORTED_MODULE_0__/* .switchMap */ .w)(function () { return innerObservable; });
}
//# sourceMappingURL=switchMapTo.js.map


/***/ }),

/***/ 1015:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "q": () => /* binding */ take
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(655);
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(979);
/* harmony import */ var _util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6565);
/* harmony import */ var _observable_empty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5631);
/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */




function take(count) {
    return function (source) {
        if (count === 0) {
            return (0,_observable_empty__WEBPACK_IMPORTED_MODULE_0__/* .empty */ .c)();
        }
        else {
            return source.lift(new TakeOperator(count));
        }
    };
}
var TakeOperator = /*@__PURE__*/ (function () {
    function TakeOperator(total) {
        this.total = total;
        if (this.total < 0) {
            throw new _util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_1__/* .ArgumentOutOfRangeError */ .W;
        }
    }
    TakeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new TakeSubscriber(subscriber, this.total));
    };
    return TakeOperator;
}());
var TakeSubscriber = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_2__/* .__extends */ .ZT(TakeSubscriber, _super);
    function TakeSubscriber(destination, total) {
        var _this = _super.call(this, destination) || this;
        _this.total = total;
        _this.count = 0;
        return _this;
    }
    TakeSubscriber.prototype._next = function (value) {
        var total = this.total;
        var count = ++this.count;
        if (count <= total) {
            this.destination.next(value);
            if (count === total) {
                this.destination.complete();
                this.unsubscribe();
            }
        }
    };
    return TakeSubscriber;
}(_Subscriber__WEBPACK_IMPORTED_MODULE_3__/* .Subscriber */ .L));
//# sourceMappingURL=take.js.map


/***/ }),

/***/ 1558:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "R": () => /* binding */ takeUntil
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(655);
/* harmony import */ var _innerSubscribe__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7604);
/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */


function takeUntil(notifier) {
    return function (source) { return source.lift(new TakeUntilOperator(notifier)); };
}
var TakeUntilOperator = /*@__PURE__*/ (function () {
    function TakeUntilOperator(notifier) {
        this.notifier = notifier;
    }
    TakeUntilOperator.prototype.call = function (subscriber, source) {
        var takeUntilSubscriber = new TakeUntilSubscriber(subscriber);
        var notifierSubscription = (0,_innerSubscribe__WEBPACK_IMPORTED_MODULE_0__/* .innerSubscribe */ .ft)(this.notifier, new _innerSubscribe__WEBPACK_IMPORTED_MODULE_0__/* .SimpleInnerSubscriber */ .IY(takeUntilSubscriber));
        if (notifierSubscription && !takeUntilSubscriber.seenValue) {
            takeUntilSubscriber.add(notifierSubscription);
            return source.subscribe(takeUntilSubscriber);
        }
        return takeUntilSubscriber;
    };
    return TakeUntilOperator;
}());
var TakeUntilSubscriber = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_1__/* .__extends */ .ZT(TakeUntilSubscriber, _super);
    function TakeUntilSubscriber(destination) {
        var _this = _super.call(this, destination) || this;
        _this.seenValue = false;
        return _this;
    }
    TakeUntilSubscriber.prototype.notifyNext = function () {
        this.seenValue = true;
        this.complete();
    };
    TakeUntilSubscriber.prototype.notifyComplete = function () {
    };
    return TakeUntilSubscriber;
}(_innerSubscribe__WEBPACK_IMPORTED_MODULE_0__/* .SimpleOuterSubscriber */ .Ds));
//# sourceMappingURL=takeUntil.js.map


/***/ }),

/***/ 3068:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "b": () => /* binding */ tap
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(655);
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(979);
/* harmony import */ var _util_noop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3306);
/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4156);
/** PURE_IMPORTS_START tslib,_Subscriber,_util_noop,_util_isFunction PURE_IMPORTS_END */




function tap(nextOrObserver, error, complete) {
    return function tapOperatorFunction(source) {
        return source.lift(new DoOperator(nextOrObserver, error, complete));
    };
}
var DoOperator = /*@__PURE__*/ (function () {
    function DoOperator(nextOrObserver, error, complete) {
        this.nextOrObserver = nextOrObserver;
        this.error = error;
        this.complete = complete;
    }
    DoOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new TapSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));
    };
    return DoOperator;
}());
var TapSubscriber = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__/* .__extends */ .ZT(TapSubscriber, _super);
    function TapSubscriber(destination, observerOrNext, error, complete) {
        var _this = _super.call(this, destination) || this;
        _this._tapNext = _util_noop__WEBPACK_IMPORTED_MODULE_1__/* .noop */ .Z;
        _this._tapError = _util_noop__WEBPACK_IMPORTED_MODULE_1__/* .noop */ .Z;
        _this._tapComplete = _util_noop__WEBPACK_IMPORTED_MODULE_1__/* .noop */ .Z;
        _this._tapError = error || _util_noop__WEBPACK_IMPORTED_MODULE_1__/* .noop */ .Z;
        _this._tapComplete = complete || _util_noop__WEBPACK_IMPORTED_MODULE_1__/* .noop */ .Z;
        if ((0,_util_isFunction__WEBPACK_IMPORTED_MODULE_2__/* .isFunction */ .m)(observerOrNext)) {
            _this._context = _this;
            _this._tapNext = observerOrNext;
        }
        else if (observerOrNext) {
            _this._context = observerOrNext;
            _this._tapNext = observerOrNext.next || _util_noop__WEBPACK_IMPORTED_MODULE_1__/* .noop */ .Z;
            _this._tapError = observerOrNext.error || _util_noop__WEBPACK_IMPORTED_MODULE_1__/* .noop */ .Z;
            _this._tapComplete = observerOrNext.complete || _util_noop__WEBPACK_IMPORTED_MODULE_1__/* .noop */ .Z;
        }
        return _this;
    }
    TapSubscriber.prototype._next = function (value) {
        try {
            this._tapNext.call(this._context, value);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(value);
    };
    TapSubscriber.prototype._error = function (err) {
        try {
            this._tapError.call(this._context, err);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.error(err);
    };
    TapSubscriber.prototype._complete = function () {
        try {
            this._tapComplete.call(this._context);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        return this.destination.complete();
    };
    return TapSubscriber;
}(_Subscriber__WEBPACK_IMPORTED_MODULE_3__/* .Subscriber */ .L));
//# sourceMappingURL=tap.js.map


/***/ }),

/***/ 3109:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "r": () => /* binding */ scheduleArray
/* harmony export */ });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4379);
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3884);
/** PURE_IMPORTS_START _Observable,_Subscription PURE_IMPORTS_END */


function scheduleArray(input, scheduler) {
    return new _Observable__WEBPACK_IMPORTED_MODULE_0__/* .Observable */ .y(function (subscriber) {
        var sub = new _Subscription__WEBPACK_IMPORTED_MODULE_1__/* .Subscription */ .w();
        var i = 0;
        sub.add(scheduler.schedule(function () {
            if (i === input.length) {
                subscriber.complete();
                return;
            }
            subscriber.next(input[i++]);
            if (!subscriber.closed) {
                sub.add(this.schedule());
            }
        }));
        return sub;
    });
}
//# sourceMappingURL=scheduleArray.js.map


/***/ }),

/***/ 6114:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "o": () => /* binding */ AsyncAction
});

// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.js
var tslib_es6 = __webpack_require__(655);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/Subscription.js + 1 modules
var Subscription = __webpack_require__(3884);
;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduler/Action.js
/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */


var Action = /*@__PURE__*/ (function (_super) {
    tslib_es6/* __extends */.ZT(Action, _super);
    function Action(scheduler, work) {
        return _super.call(this) || this;
    }
    Action.prototype.schedule = function (state, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        return this;
    };
    return Action;
}(Subscription/* Subscription */.w));

//# sourceMappingURL=Action.js.map

;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduler/AsyncAction.js
/** PURE_IMPORTS_START tslib,_Action PURE_IMPORTS_END */


var AsyncAction = /*@__PURE__*/ (function (_super) {
    tslib_es6/* __extends */.ZT(AsyncAction, _super);
    function AsyncAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        _this.pending = false;
        return _this;
    }
    AsyncAction.prototype.schedule = function (state, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        if (this.closed) {
            return this;
        }
        this.state = state;
        var id = this.id;
        var scheduler = this.scheduler;
        if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, delay);
        }
        this.pending = true;
        this.delay = delay;
        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
        return this;
    };
    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        return setInterval(scheduler.flush.bind(scheduler, this), delay);
    };
    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        if (delay !== null && this.delay === delay && this.pending === false) {
            return id;
        }
        clearInterval(id);
        return undefined;
    };
    AsyncAction.prototype.execute = function (state, delay) {
        if (this.closed) {
            return new Error('executing a cancelled action');
        }
        this.pending = false;
        var error = this._execute(state, delay);
        if (error) {
            return error;
        }
        else if (this.pending === false && this.id != null) {
            this.id = this.recycleAsyncId(this.scheduler, this.id, null);
        }
    };
    AsyncAction.prototype._execute = function (state, delay) {
        var errored = false;
        var errorValue = undefined;
        try {
            this.work(state);
        }
        catch (e) {
            errored = true;
            errorValue = !!e && e || new Error(e);
        }
        if (errored) {
            this.unsubscribe();
            return errorValue;
        }
    };
    AsyncAction.prototype._unsubscribe = function () {
        var id = this.id;
        var scheduler = this.scheduler;
        var actions = scheduler.actions;
        var index = actions.indexOf(this);
        this.work = null;
        this.state = null;
        this.pending = false;
        this.scheduler = null;
        if (index !== -1) {
            actions.splice(index, 1);
        }
        if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, null);
        }
        this.delay = null;
    };
    return AsyncAction;
}(Action));

//# sourceMappingURL=AsyncAction.js.map


/***/ }),

/***/ 2980:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "v": () => /* binding */ AsyncScheduler
});

// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.js
var tslib_es6 = __webpack_require__(655);
;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/Scheduler.js
var Scheduler = /*@__PURE__*/ (function () {
    function Scheduler(SchedulerAction, now) {
        if (now === void 0) {
            now = Scheduler.now;
        }
        this.SchedulerAction = SchedulerAction;
        this.now = now;
    }
    Scheduler.prototype.schedule = function (work, delay, state) {
        if (delay === void 0) {
            delay = 0;
        }
        return new this.SchedulerAction(this, work).schedule(state, delay);
    };
    Scheduler.now = function () { return Date.now(); };
    return Scheduler;
}());

//# sourceMappingURL=Scheduler.js.map

;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduler/AsyncScheduler.js
/** PURE_IMPORTS_START tslib,_Scheduler PURE_IMPORTS_END */


var AsyncScheduler = /*@__PURE__*/ (function (_super) {
    tslib_es6/* __extends */.ZT(AsyncScheduler, _super);
    function AsyncScheduler(SchedulerAction, now) {
        if (now === void 0) {
            now = Scheduler.now;
        }
        var _this = _super.call(this, SchedulerAction, function () {
            if (AsyncScheduler.delegate && AsyncScheduler.delegate !== _this) {
                return AsyncScheduler.delegate.now();
            }
            else {
                return now();
            }
        }) || this;
        _this.actions = [];
        _this.active = false;
        _this.scheduled = undefined;
        return _this;
    }
    AsyncScheduler.prototype.schedule = function (work, delay, state) {
        if (delay === void 0) {
            delay = 0;
        }
        if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {
            return AsyncScheduler.delegate.schedule(work, delay, state);
        }
        else {
            return _super.prototype.schedule.call(this, work, delay, state);
        }
    };
    AsyncScheduler.prototype.flush = function (action) {
        var actions = this.actions;
        if (this.active) {
            actions.push(action);
            return;
        }
        var error;
        this.active = true;
        do {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        } while (action = actions.shift());
        this.active = false;
        if (error) {
            while (action = actions.shift()) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AsyncScheduler;
}(Scheduler));

//# sourceMappingURL=AsyncScheduler.js.map


/***/ }),

/***/ 964:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "P": () => /* binding */ async
/* harmony export */ });
/* unused harmony export asyncScheduler */
/* harmony import */ var _AsyncAction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6114);
/* harmony import */ var _AsyncScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2980);
/** PURE_IMPORTS_START _AsyncAction,_AsyncScheduler PURE_IMPORTS_END */


var asyncScheduler = /*@__PURE__*/ new _AsyncScheduler__WEBPACK_IMPORTED_MODULE_0__/* .AsyncScheduler */ .v(_AsyncAction__WEBPACK_IMPORTED_MODULE_1__/* .AsyncAction */ .o);
var async = asyncScheduler;
//# sourceMappingURL=async.js.map


/***/ }),

/***/ 999:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "hZ": () => /* binding */ iterator
/* harmony export */ });
/* unused harmony exports getSymbolIterator, $$iterator */
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function getSymbolIterator() {
    if (typeof Symbol !== 'function' || !Symbol.iterator) {
        return '@@iterator';
    }
    return Symbol.iterator;
}
var iterator = /*@__PURE__*/ getSymbolIterator();
var $$iterator = (/* unused pure expression or super */ null && (iterator));
//# sourceMappingURL=iterator.js.map


/***/ }),

/***/ 5050:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "L": () => /* binding */ observable
/* harmony export */ });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var observable = /*@__PURE__*/ (function () { return typeof Symbol === 'function' && Symbol.observable || '@@observable'; })();
//# sourceMappingURL=observable.js.map


/***/ }),

/***/ 3142:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "b": () => /* binding */ rxSubscriber
/* harmony export */ });
/* unused harmony export $$rxSubscriber */
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var rxSubscriber = /*@__PURE__*/ (function () {
    return typeof Symbol === 'function'
        ? /*@__PURE__*/ Symbol('rxSubscriber')
        : '@@rxSubscriber_' + /*@__PURE__*/ Math.random();
})();
var $$rxSubscriber = (/* unused pure expression or super */ null && (rxSubscriber));
//# sourceMappingURL=rxSubscriber.js.map


/***/ }),

/***/ 6565:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "W": () => /* binding */ ArgumentOutOfRangeError
/* harmony export */ });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var ArgumentOutOfRangeErrorImpl = /*@__PURE__*/ (function () {
    function ArgumentOutOfRangeErrorImpl() {
        Error.call(this);
        this.message = 'argument out of range';
        this.name = 'ArgumentOutOfRangeError';
        return this;
    }
    ArgumentOutOfRangeErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
    return ArgumentOutOfRangeErrorImpl;
})();
var ArgumentOutOfRangeError = ArgumentOutOfRangeErrorImpl;
//# sourceMappingURL=ArgumentOutOfRangeError.js.map


/***/ }),

/***/ 1016:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "N": () => /* binding */ ObjectUnsubscribedError
/* harmony export */ });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var ObjectUnsubscribedErrorImpl = /*@__PURE__*/ (function () {
    function ObjectUnsubscribedErrorImpl() {
        Error.call(this);
        this.message = 'object unsubscribed';
        this.name = 'ObjectUnsubscribedError';
        return this;
    }
    ObjectUnsubscribedErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
    return ObjectUnsubscribedErrorImpl;
})();
var ObjectUnsubscribedError = ObjectUnsubscribedErrorImpl;
//# sourceMappingURL=ObjectUnsubscribedError.js.map


/***/ }),

/***/ 1644:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "z": () => /* binding */ hostReportError
/* harmony export */ });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function hostReportError(err) {
    setTimeout(function () { throw err; }, 0);
}
//# sourceMappingURL=hostReportError.js.map


/***/ }),

/***/ 3608:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "y": () => /* binding */ identity
/* harmony export */ });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function identity(x) {
    return x;
}
//# sourceMappingURL=identity.js.map


/***/ }),

/***/ 9026:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "k": () => /* binding */ isArray
/* harmony export */ });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var isArray = /*@__PURE__*/ (function () { return Array.isArray || (function (x) { return x && typeof x.length === 'number'; }); })();
//# sourceMappingURL=isArray.js.map


/***/ }),

/***/ 9217:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "z": () => /* binding */ isArrayLike
/* harmony export */ });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var isArrayLike = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });
//# sourceMappingURL=isArrayLike.js.map


/***/ }),

/***/ 9914:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "J": () => /* binding */ isDate
/* harmony export */ });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function isDate(value) {
    return value instanceof Date && !isNaN(+value);
}
//# sourceMappingURL=isDate.js.map


/***/ }),

/***/ 4156:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "m": () => /* binding */ isFunction
/* harmony export */ });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function isFunction(x) {
    return typeof x === 'function';
}
//# sourceMappingURL=isFunction.js.map


/***/ }),

/***/ 5812:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "k": () => /* binding */ isNumeric
/* harmony export */ });
/* harmony import */ var _isArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9026);
/** PURE_IMPORTS_START _isArray PURE_IMPORTS_END */

function isNumeric(val) {
    return !(0,_isArray__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .k)(val) && (val - parseFloat(val) + 1) >= 0;
}
//# sourceMappingURL=isNumeric.js.map


/***/ }),

/***/ 2009:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "K": () => /* binding */ isObject
/* harmony export */ });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function isObject(x) {
    return x !== null && typeof x === 'object';
}
//# sourceMappingURL=isObject.js.map


/***/ }),

/***/ 336:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "t": () => /* binding */ isPromise
/* harmony export */ });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function isPromise(value) {
    return !!value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
}
//# sourceMappingURL=isPromise.js.map


/***/ }),

/***/ 7507:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "K": () => /* binding */ isScheduler
/* harmony export */ });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function isScheduler(value) {
    return value && typeof value.schedule === 'function';
}
//# sourceMappingURL=isScheduler.js.map


/***/ }),

/***/ 3306:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ noop
/* harmony export */ });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function noop() { }
//# sourceMappingURL=noop.js.map


/***/ }),

/***/ 7843:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "s": () => /* binding */ subscribeTo
});

// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/util/subscribeToArray.js
var subscribeToArray = __webpack_require__(6900);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/util/hostReportError.js
var hostReportError = __webpack_require__(1644);
;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/subscribeToPromise.js
/** PURE_IMPORTS_START _hostReportError PURE_IMPORTS_END */

var subscribeToPromise = function (promise) {
    return function (subscriber) {
        promise.then(function (value) {
            if (!subscriber.closed) {
                subscriber.next(value);
                subscriber.complete();
            }
        }, function (err) { return subscriber.error(err); })
            .then(null, hostReportError/* hostReportError */.z);
        return subscriber;
    };
};
//# sourceMappingURL=subscribeToPromise.js.map

// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/symbol/iterator.js
var symbol_iterator = __webpack_require__(999);
;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/subscribeToIterable.js
/** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */

var subscribeToIterable = function (iterable) {
    return function (subscriber) {
        var iterator = iterable[symbol_iterator/* iterator */.hZ]();
        do {
            var item = void 0;
            try {
                item = iterator.next();
            }
            catch (err) {
                subscriber.error(err);
                return subscriber;
            }
            if (item.done) {
                subscriber.complete();
                break;
            }
            subscriber.next(item.value);
            if (subscriber.closed) {
                break;
            }
        } while (true);
        if (typeof iterator.return === 'function') {
            subscriber.add(function () {
                if (iterator.return) {
                    iterator.return();
                }
            });
        }
        return subscriber;
    };
};
//# sourceMappingURL=subscribeToIterable.js.map

// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/symbol/observable.js
var observable = __webpack_require__(5050);
;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/subscribeToObservable.js
/** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */

var subscribeToObservable = function (obj) {
    return function (subscriber) {
        var obs = obj[observable/* observable */.L]();
        if (typeof obs.subscribe !== 'function') {
            throw new TypeError('Provided object does not correctly implement Symbol.observable');
        }
        else {
            return obs.subscribe(subscriber);
        }
    };
};
//# sourceMappingURL=subscribeToObservable.js.map

// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/util/isArrayLike.js
var isArrayLike = __webpack_require__(9217);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/util/isPromise.js
var isPromise = __webpack_require__(336);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/util/isObject.js
var isObject = __webpack_require__(2009);
;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/subscribeTo.js
/** PURE_IMPORTS_START _subscribeToArray,_subscribeToPromise,_subscribeToIterable,_subscribeToObservable,_isArrayLike,_isPromise,_isObject,_symbol_iterator,_symbol_observable PURE_IMPORTS_END */









var subscribeTo = function (result) {
    if (!!result && typeof result[observable/* observable */.L] === 'function') {
        return subscribeToObservable(result);
    }
    else if ((0,isArrayLike/* isArrayLike */.z)(result)) {
        return (0,subscribeToArray/* subscribeToArray */.V)(result);
    }
    else if ((0,isPromise/* isPromise */.t)(result)) {
        return subscribeToPromise(result);
    }
    else if (!!result && typeof result[symbol_iterator/* iterator */.hZ] === 'function') {
        return subscribeToIterable(result);
    }
    else {
        var value = (0,isObject/* isObject */.K)(result) ? 'an invalid object' : "'" + result + "'";
        var msg = "You provided " + value + " where a stream was expected."
            + ' You can provide an Observable, Promise, Array, or Iterable.';
        throw new TypeError(msg);
    }
};
//# sourceMappingURL=subscribeTo.js.map


/***/ }),

/***/ 6900:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "V": () => /* binding */ subscribeToArray
/* harmony export */ });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var subscribeToArray = function (array) {
    return function (subscriber) {
        for (var i = 0, len = array.length; i < len && !subscriber.closed; i++) {
            subscriber.next(array[i]);
        }
        subscriber.complete();
    };
};
//# sourceMappingURL=subscribeToArray.js.map


/***/ }),

/***/ 2080:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "D": () => /* binding */ subscribeToResult
});

// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.js
var tslib_es6 = __webpack_require__(655);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/Subscriber.js
var Subscriber = __webpack_require__(979);
;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/InnerSubscriber.js
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


var InnerSubscriber = /*@__PURE__*/ (function (_super) {
    tslib_es6/* __extends */.ZT(InnerSubscriber, _super);
    function InnerSubscriber(parent, outerValue, outerIndex) {
        var _this = _super.call(this) || this;
        _this.parent = parent;
        _this.outerValue = outerValue;
        _this.outerIndex = outerIndex;
        _this.index = 0;
        return _this;
    }
    InnerSubscriber.prototype._next = function (value) {
        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
    };
    InnerSubscriber.prototype._error = function (error) {
        this.parent.notifyError(error, this);
        this.unsubscribe();
    };
    InnerSubscriber.prototype._complete = function () {
        this.parent.notifyComplete(this);
        this.unsubscribe();
    };
    return InnerSubscriber;
}(Subscriber/* Subscriber */.L));

//# sourceMappingURL=InnerSubscriber.js.map

// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/util/subscribeTo.js + 3 modules
var subscribeTo = __webpack_require__(7843);
// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/Observable.js + 3 modules
var Observable = __webpack_require__(4379);
;// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/subscribeToResult.js
/** PURE_IMPORTS_START _InnerSubscriber,_subscribeTo,_Observable PURE_IMPORTS_END */



function subscribeToResult(outerSubscriber, result, outerValue, outerIndex, innerSubscriber) {
    if (innerSubscriber === void 0) {
        innerSubscriber = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);
    }
    if (innerSubscriber.closed) {
        return undefined;
    }
    if (result instanceof Observable/* Observable */.y) {
        return result.subscribe(innerSubscriber);
    }
    return (0,subscribeTo/* subscribeTo */.s)(result)(innerSubscriber);
}
//# sourceMappingURL=subscribeToResult.js.map


/***/ }),

/***/ 655:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ZT": () => /* binding */ __extends
/* harmony export */ });
/* unused harmony exports __assign, __rest, __decorate, __param, __metadata, __awaiter, __generator, __createBinding, __exportStar, __values, __read, __spread, __spreadArrays, __await, __asyncGenerator, __asyncDelegator, __asyncValues, __makeTemplateObject, __importStar, __importDefault, __classPrivateFieldGet, __classPrivateFieldSet */
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}

function __exportStar(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result.default = mod;
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
}

function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => module['default'] :
/******/ 				() => module;
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// module exports must be returned from runtime so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(1452);
/******/ })()
.default;
});