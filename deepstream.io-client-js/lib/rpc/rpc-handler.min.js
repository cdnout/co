"use strict";var C=require("../constants/constants"),ResubscribeNotifier=require("../utils/resubscribe-notifier"),RpcResponse=require("./rpc-response"),Rpc=require("./rpc"),messageParser=require("../message/message-parser"),messageBuilder=require("../message/message-builder"),RpcHandler=function(e,t,i){this._options=e,this._connection=t,this._client=i,this._rpcs={},this._providers={},this._ackTimeoutRegistry=i._$getAckTimeoutRegistry(),this._resubscribeNotifier=new ResubscribeNotifier(this._client,this._reprovide.bind(this))};RpcHandler.prototype.providerNames=function(){return Object.keys(this._providers)},RpcHandler.prototype.provide=function(e,t){if("string"!=typeof e||0===e.length)throw new Error("invalid argument name");if(this._providers[e])throw new Error("RPC "+e+" already registered");if("function"!=typeof t)throw new Error("invalid argument callback");this._ackTimeoutRegistry.add({topic:C.TOPIC.RPC,name:e,action:C.ACTIONS.SUBSCRIBE}),this._providers[e]=t,this._connection.sendMsg(C.TOPIC.RPC,C.ACTIONS.SUBSCRIBE,[e])},RpcHandler.prototype.unprovide=function(e){if("string"!=typeof e||0===e.length)throw new Error("invalid argument name");this._providers[e]&&(delete this._providers[e],this._ackTimeoutRegistry.add({topic:C.TOPIC.RPC,name:e,action:C.ACTIONS.UNSUBSCRIBE}),this._connection.sendMsg(C.TOPIC.RPC,C.ACTIONS.UNSUBSCRIBE,[e]))},RpcHandler.prototype.make=function(i,e,t){var r=this;if("string"!=typeof i||0===i.length)throw new Error("invalid argument name");var n=this._client.getUid(),s=messageBuilder.typed(e);if(this._connection.sendMsg(C.TOPIC.RPC,C.ACTIONS.REQUEST,[i,n,s]),!t||"function"!=typeof t)return new Promise(function(e,t){r._rpcs[n]=new Rpc(i,{resolve:e,reject:t},r._options,r._client)});this._rpcs[n]=new Rpc(i,{callback:t},this._options,this._client)},RpcHandler.prototype._getRpc=function(e,t,i){var r=this._rpcs[e];return r||(this._client._$onError(C.TOPIC.RPC,C.EVENT.UNSOLICITED_MESSAGE,i),null)},RpcHandler.prototype._respondToRpc=function(e){var t=e.data[0],i=e.data[1],r=null,n=void 0;e.data[2]&&(r=messageParser.convertTyped(e.data[2],this._client)),this._providers[t]?(n=new RpcResponse(this._connection,t,i),this._providers[t](r,n)):this._connection.sendMsg(C.TOPIC.RPC,C.ACTIONS.REJECTION,[t,i])},RpcHandler.prototype._$handle=function(e){var t=void 0,i=void 0;if(e.action!==C.ACTIONS.REQUEST)if(e.action!==C.ACTIONS.ACK||e.data[0]!==C.ACTIONS.SUBSCRIBE&&e.data[0]!==C.ACTIONS.UNSUBSCRIBE){if(e.action===C.ACTIONS.ERROR){if(e.data[0]===C.EVENT.MESSAGE_PERMISSION_ERROR)return;if(e.data[0]===C.EVENT.MESSAGE_DENIED&&e.data[2]===C.ACTIONS.SUBSCRIBE)return void this._ackTimeoutRegistry.remove({topic:C.TOPIC.RPC,action:C.ACTIONS.SUBSCRIBE,name:e.data[1]})}e.action===C.ACTIONS.ERROR||e.action===C.ACTIONS.ACK?(i=e.data[0]===C.EVENT.MESSAGE_DENIED&&e.data[2]===C.ACTIONS.REQUEST?e.data[3]:e.data[2],t=e.data[1]):(t=e.data[0],i=e.data[1]);var r=this._getRpc(i,t,e.raw);null!==r&&(e.action===C.ACTIONS.ACK?r.ack():e.action===C.ACTIONS.RESPONSE?(r.respond(e.data[2]),delete this._rpcs[i]):e.action===C.ACTIONS.ERROR&&(e.processedError=!0,r.error(e.data[0]),delete this._rpcs[i]))}else this._ackTimeoutRegistry.clear(e);else this._respondToRpc(e)},RpcHandler.prototype._reprovide=function(){for(var e in this._providers)this._connection.sendMsg(C.TOPIC.RPC,C.ACTIONS.SUBSCRIBE,[e])},module.exports=RpcHandler;