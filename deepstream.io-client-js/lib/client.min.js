"use strict";var C=require("./constants/constants"),MS=require("./constants/merge-strategies"),Emitter=require("component-emitter2"),Connection=require("./message/connection"),EventHandler=require("./event/event-handler"),RpcHandler=require("./rpc/rpc-handler"),RecordHandler=require("./record/record-handler"),PresenceHandler=require("./presence/presence-handler"),defaultOptions=require("./default-options"),AckTimeoutRegistry=require("./utils/ack-timeout-registry"),Client=function(e,t){this._url=e,this._options=this._getOptions(t||{}),this._connection=new Connection(this,this._url,this._options),this._ackTimeoutRegistry=new AckTimeoutRegistry(this,this._options),this.event=new EventHandler(this._options,this._connection,this),this.rpc=new RpcHandler(this._options,this._connection,this),this.record=new RecordHandler(this._options,this._connection,this),this.presence=new PresenceHandler(this._options,this._connection,this),this._messageCallbacks={},this._messageCallbacks[C.TOPIC.EVENT]=this.event._$handle.bind(this.event),this._messageCallbacks[C.TOPIC.RPC]=this.rpc._$handle.bind(this.rpc),this._messageCallbacks[C.TOPIC.RECORD]=this.record._$handle.bind(this.record),this._messageCallbacks[C.TOPIC.PRESENCE]=this.presence._$handle.bind(this.presence),this._messageCallbacks[C.TOPIC.ERROR]=this._onErrorMessage.bind(this),t&&t.silentDeprecation||console.log("deepstream V3 is in maintenance mode\n  It's heavily recommended you use V4 (@deepstream/client)\n  You can see the changlogs here https://deepstream.io/releases/client-js/v4-0-0/\n  The server V4.1 supports text protocol if your require to use other non official\n  SDKs and resolves many of the issues in V3.\n  To silence this warning just pass in a silentDeprecation flag in options.\n  Example: deepstream(url, { silentDeprecation: true })\n")};function createDeepstream(e,t){return new Client(e,t)}Emitter(Client.prototype),Client.prototype.login=function(e,t){return"function"==typeof e?this._connection.authenticate({},e):this._connection.authenticate(e||{},t),this},Client.prototype.loginAsync=function(e){var t=this;return new Promise(function(n,i){t._connection.authenticate(e||{},function(e,t){(e?n:i)(t)})})},Client.prototype.close=function(){this._connection.close()},Client.prototype.getConnectionState=function(){return this._connection.getState()},Client.prototype.getUid=function(){return(new Date).getTime().toString(36)+"-"+(1e16*Math.random()).toString(36).replace(".","")},Client.prototype._$getAckTimeoutRegistry=function(){return this._ackTimeoutRegistry},Client.prototype._$onMessage=function(e){this._messageCallbacks[e.topic]?this._messageCallbacks[e.topic](e):(e.processedError=!0,this._$onError(e.topic,C.EVENT.MESSAGE_PARSE_ERROR,"Received message for unknown topic "+e.topic)),e.action!==C.ACTIONS.ERROR||e.processedError||this._$onError(e.topic,e.data[0],e.data.slice(0))},Client.prototype._$onError=function(e,t,n){var i=void 0;if(t!==C.EVENT.ACK_TIMEOUT&&t!==C.EVENT.RESPONSE_TIMEOUT||this.getConnectionState()===C.CONNECTION_STATE.AWAITING_AUTHENTICATION&&(i="Your message timed out because you're not authenticated. Have you called login()?",setTimeout(this._$onError.bind(this,C.EVENT.NOT_AUTHENTICATED,C.TOPIC.ERROR,i),1)),!this.hasListeners("error"))throw console.log("--- You can catch all deepstream errors by subscribing to the error event ---"),i=t+": "+n,e&&(i+=" ("+e+")"),new Error(i);this.emit("error",n,t,e),this.emit(t,e,n)},Client.prototype._onErrorMessage=function(e){this._$onError(e.topic,e.data[0],e.data[1])},Client.prototype._getOptions=function(e){var t={};for(var n in defaultOptions)void 0===e[n]?t[n]=defaultOptions[n]:t[n]=e[n];return t},Client.prototype.CONSTANTS=C,createDeepstream.CONSTANTS=C,Client.prototype.MERGE_STRATEGIES=MS,createDeepstream.MERGE_STRATEGIES=MS,module.exports=createDeepstream;