"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.wrapConnectorHooks=wrapConnectorHooks;var _invariant=require("@react-dnd/invariant"),_react=require("react");function throwIfCompositeComponentElement(e){if("string"!=typeof e.type){e=e.type.displayName||e.type.name||"the component";throw new Error("Only native element nodes can now be passed to React DnD connectors."+"You can either wrap ".concat(e," into a <div>, or turn it into a ")+"drag source or a drop target itself.")}}function wrapHookToRecognizeElement(o){return function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:null,t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null;if(!(0,_react.isValidElement)(e)){var n=e;return o(n,t),n}return throwIfCompositeComponentElement(e),cloneWithRef(e,t?function(e){return o(e,t)}:o)}}function wrapConnectorHooks(o){var r={};return Object.keys(o).forEach(function(e){var t,n=o[e];e.endsWith("Ref")?r[e]=o[e]:(t=wrapHookToRecognizeElement(n),r[e]=function(){return t})}),r}function setRef(e,t){"function"==typeof e?e(t):e.current=t}function cloneWithRef(e,t){var n=e.ref;return(0,_invariant.invariant)("string"!=typeof n,"Cannot connect React DnD to an element with an existing string ref. Please convert it to use a callback ref instead, or wrap it into a <span> or <div>. Read more: https://reactjs.org/docs/refs-and-the-dom.html#callback-refs"),n?(0,_react.cloneElement)(e,{ref:function(e){setRef(n,e),setRef(t,e)}}):(0,_react.cloneElement)(e,{ref:t})}