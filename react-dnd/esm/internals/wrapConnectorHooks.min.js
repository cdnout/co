import{invariant}from"@react-dnd/invariant";import{cloneElement,isValidElement}from"react";function throwIfCompositeComponentElement(e){if("string"!=typeof e.type){var n=e.type.displayName||e.type.name||"the component";throw new Error("Only native element nodes can now be passed to React DnD connectors."+"You can either wrap ".concat(n," into a <div>, or turn it into a ")+"drag source or a drop target itself.")}}function wrapHookToRecognizeElement(e){return function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;if(!isValidElement(n)){var o=n;return e(o,t),o}var r=n;return throwIfCompositeComponentElement(r),cloneWithRef(r,t?function(n){return e(n,t)}:e)}}export function wrapConnectorHooks(e){var n={};return Object.keys(e).forEach(function(t){var o=e[t];if(t.endsWith("Ref"))n[t]=e[t];else{var r=wrapHookToRecognizeElement(o);n[t]=function(){return r}}}),n};function setRef(e,n){"function"==typeof e?e(n):e.current=n}function cloneWithRef(e,n){var t=e.ref;return invariant("string"!=typeof t,"Cannot connect React DnD to an element with an existing string ref. Please convert it to use a callback ref instead, or wrap it into a <span> or <div>. Read more: https://reactjs.org/docs/refs-and-the-dom.html#callback-refs"),cloneElement(e,t?{ref:function(e){setRef(t,e),setRef(n,e)}}:{ref:n})}