var __extends=this&&this.__extends||function(){var o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)};return function(e,t){function r(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}}();import{assert}from"../asserts.js";import Feature from"../Feature.js";import{transformGeometryWithOptions}from"./Feature.js";import JSONFeature from"./JSONFeature.js";import GeometryCollection from"../geom/GeometryCollection.js";import LineString from"../geom/LineString.js";import MultiLineString from"../geom/MultiLineString.js";import MultiPoint from"../geom/MultiPoint.js";import MultiPolygon from"../geom/MultiPolygon.js";import Point from"../geom/Point.js";import Polygon from"../geom/Polygon.js";import{assign,isEmpty}from"../obj.js";import{get as getProjection}from"../proj.js";import GeometryType from"../geom/GeometryType.js";var GeoJSON=function(r){function e(e){var t=this,e=e||{};return(t=r.call(this)||this).dataProjection=getProjection(e.dataProjection||"EPSG:4326"),e.featureProjection&&(t.defaultFeatureProjection=getProjection(e.featureProjection)),t.geometryName_=e.geometryName,t.extractGeometryName_=e.extractGeometryName,t}return __extends(e,r),e.prototype.readFeatureFromObject=function(e,t){var r=null,e=readGeometry((r="Feature"===e.type?e:{type:"Feature",geometry:e,properties:null}).geometry,t),t=new Feature;return this.geometryName_?t.setGeometryName(this.geometryName_):this.extractGeometryName_&&"geometry_name"in r!==void 0&&t.setGeometryName(r.geometry_name),t.setGeometry(e),"id"in r&&t.setId(r.id),r.properties&&t.setProperties(r.properties,!0),t},e.prototype.readFeaturesFromObject=function(e,t){var r=null;if("FeatureCollection"===e.type)for(var r=[],o=e.features,n=0,i=o.length;n<i;++n)r.push(this.readFeatureFromObject(o[n],t));else r=[this.readFeatureFromObject(e,t)];return r},e.prototype.readGeometryFromObject=function(e,t){return readGeometry(e,t)},e.prototype.readProjectionFromObject=function(e){var t,e=e.crs;return e?"name"==e.type?t=getProjection(e.properties.name):assert(!1,36):t=this.dataProjection,t},e.prototype.writeFeatureObject=function(e,t){t=this.adaptOptions(t);var r={type:"Feature",geometry:null,properties:null},o=e.getId(),o=(void 0!==o&&(r.id=o),e.getGeometry()),o=(o&&(r.geometry=writeGeometry(o,t)),e.getProperties());return delete o[e.getGeometryName()],isEmpty(o)||(r.properties=o),r},e.prototype.writeFeaturesObject=function(e,t){t=this.adaptOptions(t);for(var r=[],o=0,n=e.length;o<n;++o)r.push(this.writeFeatureObject(e[o],t));return{type:"FeatureCollection",features:r}},e.prototype.writeGeometryObject=function(e,t){return writeGeometry(e,this.adaptOptions(t))},e}(JSONFeature);function readGeometry(e,t){if(!e)return null;var r;switch(e.type){case GeometryType.POINT:r=readPointGeometry(e);break;case GeometryType.LINE_STRING:r=readLineStringGeometry(e);break;case GeometryType.POLYGON:r=readPolygonGeometry(e);break;case GeometryType.MULTI_POINT:r=readMultiPointGeometry(e);break;case GeometryType.MULTI_LINE_STRING:r=readMultiLineStringGeometry(e);break;case GeometryType.MULTI_POLYGON:r=readMultiPolygonGeometry(e);break;case GeometryType.GEOMETRY_COLLECTION:r=readGeometryCollectionGeometry(e);break;default:throw new Error("Unsupported GeoJSON type: "+e.type)}return transformGeometryWithOptions(r,!1,t)}function readGeometryCollectionGeometry(e,t){e=e.geometries.map(function(e){return readGeometry(e,t)});return new GeometryCollection(e)}function readPointGeometry(e){return new Point(e.coordinates)}function readLineStringGeometry(e){return new LineString(e.coordinates)}function readMultiLineStringGeometry(e){return new MultiLineString(e.coordinates)}function readMultiPointGeometry(e){return new MultiPoint(e.coordinates)}function readMultiPolygonGeometry(e){return new MultiPolygon(e.coordinates)}function readPolygonGeometry(e){return new Polygon(e.coordinates)}function writeGeometry(e,t){var r,o=(e=transformGeometryWithOptions(e,!0,t)).getType();switch(o){case GeometryType.POINT:r=writePointGeometry(e,t);break;case GeometryType.LINE_STRING:r=writeLineStringGeometry(e,t);break;case GeometryType.POLYGON:r=writePolygonGeometry(e,t);break;case GeometryType.MULTI_POINT:r=writeMultiPointGeometry(e,t);break;case GeometryType.MULTI_LINE_STRING:r=writeMultiLineStringGeometry(e,t);break;case GeometryType.MULTI_POLYGON:r=writeMultiPolygonGeometry(e,t);break;case GeometryType.GEOMETRY_COLLECTION:r=writeGeometryCollectionGeometry(e,t);break;case GeometryType.CIRCLE:r={type:"GeometryCollection",geometries:[]};break;default:throw new Error("Unsupported geometry type: "+o)}return r}function writeGeometryCollectionGeometry(e,r){return{type:"GeometryCollection",geometries:e.getGeometriesArray().map(function(e){var t=assign({},r);return delete t.featureProjection,writeGeometry(e,t)})}}function writeLineStringGeometry(e,t){return{type:"LineString",coordinates:e.getCoordinates()}}function writeMultiLineStringGeometry(e,t){return{type:"MultiLineString",coordinates:e.getCoordinates()}}function writeMultiPointGeometry(e,t){return{type:"MultiPoint",coordinates:e.getCoordinates()}}function writeMultiPolygonGeometry(e,t){var r;return t&&(r=t.rightHanded),{type:"MultiPolygon",coordinates:e.getCoordinates(r)}}function writePointGeometry(e,t){return{type:"Point",coordinates:e.getCoordinates()}}function writePolygonGeometry(e,t){var r;return t&&(r=t.rightHanded),{type:"Polygon",coordinates:e.getCoordinates(r)}}export default GeoJSON;