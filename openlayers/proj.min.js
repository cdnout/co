import{getDistance}from"./sphere.js";import{applyTransform}from"./extent.js";import{modulo}from"./math.js";import{toEPSG4326,fromEPSG4326,PROJECTIONS as EPSG3857_PROJECTIONS}from"./proj/epsg3857.js";import{PROJECTIONS as EPSG4326_PROJECTIONS}from"./proj/epsg4326.js";import Projection from"./proj/Projection.js";import Units,{METERS_PER_UNIT}from"./proj/Units.js";import{add as addTransformFunc,clear as clearTransformFuncs,get as getTransformFunc}from"./proj/transforms.js";import{add as addProj,clear as clearProj,get as getProj}from"./proj/projections.js";function cloneTransform(r,o,n){var t;if(void 0!==o){for(var e=0,s=r.length;e<s;++e)o[e]=r[e];t=o}else t=r.slice();return t}function identityTransform(r,o,n){if(void 0!==o&&r!==o){for(var t=0,e=r.length;t<e;++t)o[t]=r[t];r=o}return r}function addProjection(r){addProj(r.getCode(),r),addTransformFunc(r,r,cloneTransform)}function addProjections(r){r.forEach(addProjection)}function get(r){return"string"==typeof r?getProj(r):r||null}function getPointResolution(r,o,n,t){var e,s,a=(r=get(r)).getPointResolutionFunc();return a?(e=a(o,n),t&&t!==r.getUnits()&&(s=r.getMetersPerUnit())&&(e=e*s/METERS_PER_UNIT[t])):r.getUnits()==Units.DEGREES&&!t||t==Units.DEGREES?e=o:(a=getTransformFromProjections(r,get("EPSG:4326"))(a=[n[0]-o/2,n[1],n[0]+o/2,n[1],n[0],n[1]-o/2,n[0],n[1]+o/2],a,2),e=(getDistance(a.slice(0,2),a.slice(2,4))+getDistance(a.slice(4,6),a.slice(6,8)))/2,void 0!==(s=t?METERS_PER_UNIT[t]:r.getMetersPerUnit())&&(e/=s)),e}function addEquivalentProjections(r){addProjections(r),r.forEach(function(o){r.forEach(function(r){o!==r&&addTransformFunc(o,r,cloneTransform)})})}function addEquivalentTransforms(r,n,t,e){r.forEach(function(o){n.forEach(function(r){addTransformFunc(o,r,t),addTransformFunc(r,o,e)})})}function clearAllProjections(){clearProj(),clearTransformFuncs()}function createProjection(r,o){return r?"string"==typeof r?get(r):r:get(o)}function createTransformFromCoordinateTransform(f){return function(r,o,n){for(var t=r.length,e=void 0!==n?n:2,s=void 0!==o?o:new Array(t),a=0;a<t;a+=e){var i=f([r[a],r[a+1]]);s[a]=i[0],s[a+1]=i[1];for(var c=e-1;2<=c;--c)s[a+c]=r[a+c]}return s}}function addCoordinateTransforms(r,o,n,t){r=get(r),o=get(o);addTransformFunc(r,o,createTransformFromCoordinateTransform(n)),addTransformFunc(o,r,createTransformFromCoordinateTransform(t))}function fromLonLat(r,o){return transform(r,"EPSG:4326",void 0!==o?o:"EPSG:3857")}function toLonLat(r,o){r=transform(r,void 0!==o?o:"EPSG:3857","EPSG:4326"),o=r[0];return(o<-180||180<o)&&(r[0]=modulo(o+180,360)-180),r}function equivalent(r,o){if(r===o)return!0;var n=r.getUnits()===o.getUnits();return(r.getCode()===o.getCode()||getTransformFromProjections(r,o)===cloneTransform)&&n}function getTransformFromProjections(r,o){r=r.getCode(),o=o.getCode();return getTransformFunc(r,o)||identityTransform}function getTransform(r,o){return getTransformFromProjections(get(r),get(o))}function transform(r,o,n){return getTransform(o,n)(r,void 0,r.length)}function transformExtent(r,o,n){o=getTransform(o,n);return applyTransform(r,o)}function transformWithProjections(r,o,n){return getTransformFromProjections(o,n)(r)}var userProjection=null;function setUserProjection(r){userProjection=get(r)}function clearUserProjection(){userProjection=null}function getUserProjection(){return userProjection}function useGeographic(){setUserProjection("EPSG:4326")}function toUserCoordinate(r,o){return userProjection?transform(r,o,userProjection):r}function fromUserCoordinate(r,o){return userProjection?transform(r,userProjection,o):r}function toUserExtent(r,o){return userProjection?transformExtent(r,o,userProjection):r}function fromUserExtent(r,o){return userProjection?transformExtent(r,userProjection,o):r}function addCommon(){addEquivalentProjections(EPSG3857_PROJECTIONS),addEquivalentProjections(EPSG4326_PROJECTIONS),addEquivalentTransforms(EPSG4326_PROJECTIONS,EPSG3857_PROJECTIONS,fromEPSG4326,toEPSG4326)}addCommon();export{METERS_PER_UNIT,Projection,cloneTransform,identityTransform,addProjection,addProjections,get,getPointResolution,addEquivalentProjections,addEquivalentTransforms,clearAllProjections,createProjection,createTransformFromCoordinateTransform,addCoordinateTransforms,fromLonLat,toLonLat,equivalent,getTransformFromProjections,getTransform,transform,transformExtent,transformWithProjections,setUserProjection,clearUserProjection,getUserProjection,useGeographic,toUserCoordinate,fromUserCoordinate,toUserExtent,fromUserExtent,addCommon};