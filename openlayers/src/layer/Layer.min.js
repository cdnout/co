import{listen,unlistenByKey}from"../events.js";import EventType from"../events/EventType.js";import{getChangeEventType}from"../Object.js";import BaseLayer from"./Base.js";import LayerProperty from"./Property.js";import{assign}from"../obj.js";import RenderEventType from"../render/EventType.js";import SourceState from"../source/State.js";class Layer extends BaseLayer{constructor(e){const r=assign({},e);delete r.source,super(r),this.mapPrecomposeKey_=null,this.mapRenderKey_=null,this.sourceChangeKey_=null,this.renderer_=null,e.render&&(this.render=e.render),e.map&&this.setMap(e.map),this.addEventListener(getChangeEventType(LayerProperty.SOURCE),this.handleSourcePropertyChange_);e=e.source||null;this.setSource(e)}getLayersArray(e){const r=e||[];return r.push(this),r}getLayerStatesArray(e){const r=e||[];return r.push(this.getLayerState()),r}getSource(){return this.get(LayerProperty.SOURCE)||null}getSourceState(){const e=this.getSource();return e?e.getState():SourceState.UNDEFINED}handleSourceChange_(){this.changed()}handleSourcePropertyChange_(){this.sourceChangeKey_&&(unlistenByKey(this.sourceChangeKey_),this.sourceChangeKey_=null);var e=this.getSource();e&&(this.sourceChangeKey_=listen(e,EventType.CHANGE,this.handleSourceChange_,this)),this.changed()}render(e,r){const t=this.getRenderer();if(t.prepareFrame(e))return t.renderFrame(e,r)}setMap(e){this.mapPrecomposeKey_&&(unlistenByKey(this.mapPrecomposeKey_),this.mapPrecomposeKey_=null),e||this.changed(),this.mapRenderKey_&&(unlistenByKey(this.mapRenderKey_),this.mapRenderKey_=null),e&&(this.mapPrecomposeKey_=listen(e,RenderEventType.PRECOMPOSE,function(e){const r=e;r.frameState.layerStatesArray.push(this.getLayerState(!1))},this),this.mapRenderKey_=listen(this,EventType.CHANGE,e.render,e),this.changed())}setSource(e){this.set(LayerProperty.SOURCE,e)}getRenderer(){return this.renderer_||(this.renderer_=this.createRenderer()),this.renderer_}hasRenderer(){return!!this.renderer_}createRenderer(){return null}}function inView(e,r){if(!e.visible)return!1;var t=r.resolution;if(t<e.minResolution||t>=e.maxResolution)return!1;t=r.zoom;return t>e.minZoom&&t<=e.maxZoom}export default Layer;export{inView};