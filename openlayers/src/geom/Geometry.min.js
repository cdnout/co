import{abstract}from"../util.js";import BaseObject from"../Object.js";import{createEmpty,getHeight,returnOrUpdate}from"../extent.js";import{transform2D}from"./flat/transform.js";import{get as getProjection,getTransform}from"../proj.js";import Units from"../proj/Units.js";import{create as createTransform,compose as composeTransform}from"../transform.js";const tmpTransform=createTransform();class Geometry extends BaseObject{constructor(){super(),this.extent_=createEmpty(),this.extentRevision_=-1,this.simplifiedGeometryCache={},this.simplifiedGeometryMaxMinSquaredTolerance=0,this.simplifiedGeometryRevision=0}clone(){return abstract()}closestPointXY(t,e,r,s){return abstract()}containsXY(t,e){var r=this.getClosestPoint([t,e]);return r[0]===t&&r[1]===e}getClosestPoint(t,e){e=e||[NaN,NaN];return this.closestPointXY(t[0],t[1],e,1/0),e}intersectsCoordinate(t){return this.containsXY(t[0],t[1])}computeExtent(t){return abstract()}getExtent(t){return this.extentRevision_!=this.getRevision()&&(this.extent_=this.computeExtent(this.extent_),this.extentRevision_=this.getRevision()),returnOrUpdate(this.extent_,t)}rotate(t,e){abstract()}scale(t,e,r){abstract()}simplify(t){return this.getSimplifiedGeometry(t*t)}getSimplifiedGeometry(t){return abstract()}getType(){return abstract()}applyTransform(t){abstract()}intersectsExtent(t){return abstract()}translate(t,e){abstract()}transform(t,o){const i=getProjection(t);t=i.getUnits()==Units.TILE_PIXELS?function(t,e,r){var s=i.getExtent(),n=i.getWorldExtent(),s=getHeight(n)/getHeight(s);return composeTransform(tmpTransform,n[0],n[3],s,-s,0,0,0),transform2D(t,0,t.length,r,tmpTransform,e),getTransform(i,o)(t,e,r)}:getTransform(i,o);return this.applyTransform(t),this}}export default Geometry;