import{squaredSegmentDistance,squaredDistance}from"../../math.js";function simplifyLineString(r,e,n,t,a,u,i){const o=void 0!==i?i:[];return u||(n=radialDistance(r,e,n,t,a,o,0),r=o,e=0,t=2),o.length=douglasPeucker(r,e,n,t,a,o,0),o}function douglasPeucker(n,t,r,a,u,e,i){var o=(r-t)/a;if(o<3){for(;t<r;t+=a)e[i++]=n[t],e[i++]=n[t+1];return i}const s=new Array(o),l=(s[0]=1,s[o-1]=1,[t,r-a]);let c=0;for(;0<l.length;){var f=l.pop(),p=l.pop();let e=0;var g=n[p],d=n[p+1],h=n[f],y=n[f+1];for(let r=p+a;r<f;r+=a){var q=n[r],A=n[r+1],q=squaredSegmentDistance(q,A,g,d,h,y);q>e&&(c=r,e=q)}e>u&&(s[(c-t)/a]=1,p+a<c&&l.push(p,c),c+a<f&&l.push(c,f))}for(let r=0;r<o;++r)s[r]&&(e[i++]=n[t+r*a],e[i++]=n[t+r*a+1]);return i}function douglasPeuckerArray(n,t,a,u,i,o,s,l){for(let r=0,e=a.length;r<e;++r){var c=a[r];s=douglasPeucker(n,t,c,u,i,o,s),l.push(s),t=c}return s}function douglasPeuckerMultiArray(n,t,a,u,i,o,s,l){for(let r=0,e=a.length;r<e;++r){var c=a[r],f=[];s=douglasPeuckerArray(n,t,c,u,i,o,s,f),l.push(f),t=c[c.length-1]}return s}function radialDistance(r,e,n,t,a,u,i){if(n<=e+t){for(;e<n;e+=t)u[i++]=r[e],u[i++]=r[e+1];return i}let o=r[e],s=r[e+1],l=(u[i++]=o,u[i++]=s,o),c=s;for(e+=t;e<n;e+=t)l=r[e],c=r[e+1],squaredDistance(o,s,l,c)>a&&(u[i++]=l,u[i++]=c,o=l,s=c);return l==o&&c==s||(u[i++]=l,u[i++]=c),i}function snap(r,e){return e*Math.round(r/e)}function quantize(r,e,n,t,a,u,i){if(e==n)return i;let o=snap(r[e],a),s=snap(r[e+1],a);e+=t,u[i++]=o,u[i++]=s;let l,c;do{if(l=snap(r[e],a),c=snap(r[e+1],a),(e+=t)==n)return u[i++]=l,u[i++]=c,i}while(l==o&&c==s);for(;e<n;){var f,p,g,d,h=snap(r[e],a),y=snap(r[e+1],a);e+=t,h==l&&y==c||(f=l-o,p=c-s,g=h-o,d=y-s,c=(l=(f*d==p*g&&(f<0&&g<f||f==g||0<f&&f<g)&&(p<0&&d<p||p==d||0<p&&p<d)||(u[i++]=l,u[i++]=c,o=l,s=c),h),y))}return u[i++]=l,u[i++]=c,i}function quantizeArray(n,t,a,u,i,o,s,l){for(let r=0,e=a.length;r<e;++r){var c=a[r];s=quantize(n,t,c,u,i,o,s),l.push(s),t=c}return s}function quantizeMultiArray(n,t,a,u,i,o,s,l){for(let r=0,e=a.length;r<e;++r){var c=a[r],f=[];s=quantizeArray(n,t,c,u,i,o,s,f),l.push(f),t=c[c.length-1]}return s}export{simplifyLineString,douglasPeucker,douglasPeuckerArray,douglasPeuckerMultiArray,radialDistance,snap,quantize,quantizeArray,quantizeMultiArray};