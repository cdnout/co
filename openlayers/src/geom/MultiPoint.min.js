import{extend}from"../array.js";import{closestSquaredDistanceXY,containsXY}from"../extent.js";import GeometryType from"./GeometryType.js";import Point from"./Point.js";import SimpleGeometry from"./SimpleGeometry.js";import{deflateCoordinates}from"./flat/deflate.js";import{inflateCoordinates}from"./flat/inflate.js";import{squaredDistance as squaredDx}from"../math.js";class MultiPoint extends SimpleGeometry{constructor(t,e){super(),e&&!Array.isArray(t[0])?this.setFlatCoordinates(e,t):this.setCoordinates(t,e)}appendPoint(t){this.flatCoordinates?extend(this.flatCoordinates,t.getFlatCoordinates()):this.flatCoordinates=t.getFlatCoordinates().slice(),this.changed()}clone(){return new MultiPoint(this.flatCoordinates.slice(),this.layout)}closestPointXY(s,i,o,r){if(r<closestSquaredDistanceXY(this.getExtent(),s,i))return r;var a=this.flatCoordinates,n=this.stride;for(let e=0,t=a.length;e<t;e+=n){var l=squaredDx(s,i,a[e],a[e+1]);if(l<r){r=l;for(let t=0;t<n;++t)o[t]=a[e+t];o.length=n}}return r}getCoordinates(){return inflateCoordinates(this.flatCoordinates,0,this.flatCoordinates.length,this.stride)}getPoint(t){var e=this.flatCoordinates?this.flatCoordinates.length/this.stride:0;return t<0||e<=t?null:new Point(this.flatCoordinates.slice(t*this.stride,(t+1)*this.stride),this.layout)}getPoints(){const s=this.flatCoordinates;var i=this.layout,o=this.stride;const r=[];for(let t=0,e=s.length;t<e;t+=o){var a=new Point(s.slice(t,t+o),i);r.push(a)}return r}getType(){return GeometryType.MULTI_POINT}intersectsExtent(s){var i=this.flatCoordinates,o=this.stride;for(let t=0,e=i.length;t<e;t+=o){var r=i[t],a=i[t+1];if(containsXY(s,r,a))return!0}return!1}setCoordinates(t,e){this.setLayout(e,t,1),this.flatCoordinates||(this.flatCoordinates=[]),this.flatCoordinates.length=deflateCoordinates(this.flatCoordinates,0,t,this.stride),this.changed()}}export default MultiPoint;