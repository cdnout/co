import{createOrUpdate,forEachCorner,intersects}from"../extent.js";import GeometryType from"./GeometryType.js";import SimpleGeometry from"./SimpleGeometry.js";import{deflateCoordinate}from"./flat/deflate.js";import{rotate,translate}from"./flat/transform.js";class Circle extends SimpleGeometry{constructor(t,e,r){super(),void 0!==r&&void 0===e?this.setFlatCoordinates(r,t):this.setCenterAndRadius(t,e||0,r)}clone(){return new Circle(this.flatCoordinates.slice(),void 0,this.layout)}closestPointXY(t,e,r,s){var i=this.flatCoordinates,t=t-i[0],e=e-i[1],a=t*t+e*e;if(a<s){if(0==a)for(let t=0;t<this.stride;++t)r[t]=i[t];else{var o=this.getRadius()/Math.sqrt(a);r[0]=i[0]+o*t,r[1]=i[1]+o*e;for(let t=2;t<this.stride;++t)r[t]=i[t]}return r.length=this.stride,a}return s}containsXY(t,e){var r=this.flatCoordinates,t=t-r[0],e=e-r[1];return t*t+e*e<=this.getRadiusSquared_()}getCenter(){return this.flatCoordinates.slice(0,this.stride)}computeExtent(t){var e=this.flatCoordinates,r=e[this.stride]-e[0];return createOrUpdate(e[0]-r,e[1]-r,e[0]+r,e[1]+r,t)}getRadius(){return Math.sqrt(this.getRadiusSquared_())}getRadiusSquared_(){var t=this.flatCoordinates[this.stride]-this.flatCoordinates[0],e=this.flatCoordinates[this.stride+1]-this.flatCoordinates[1];return t*t+e*e}getType(){return GeometryType.CIRCLE}intersectsExtent(t){var e=this.getExtent();return!!intersects(t,e)&&(e=this.getCenter(),t[0]<=e[0]&&t[2]>=e[0]||(t[1]<=e[1]&&t[3]>=e[1]||forEachCorner(t,this.intersectsCoordinate.bind(this))))}setCenter(e){var r=this.stride,t=this.flatCoordinates[r]-this.flatCoordinates[0];const s=e.slice();s[r]=s[0]+t;for(let t=1;t<r;++t)s[r+t]=e[t];this.setFlatCoordinates(this.layout,s),this.changed()}setCenterAndRadius(t,e,r){this.setLayout(r,t,0),this.flatCoordinates||(this.flatCoordinates=[]);const s=this.flatCoordinates;let i=deflateCoordinate(s,0,t,this.stride);s[i++]=s[0]+e;for(let t=1,e=this.stride;t<e;++t)s[i++]=s[t];s.length=i,this.changed()}getCoordinates(){return null}setCoordinates(t,e){}setRadius(t){this.flatCoordinates[this.stride]=this.flatCoordinates[0]+t,this.changed()}rotate(t,e){var r=this.getCenter(),s=this.getStride();this.setCenter(rotate(r,0,r.length,s,t,e,r)),this.changed()}translate(t,e){var r=this.getCenter(),s=this.getStride();this.setCenter(translate(r,0,r.length,s,t,e,r)),this.changed()}}Circle.prototype.transform;export default Circle;