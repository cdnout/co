function clamp(t,e,n){return Math.min(Math.max(t,e),n)}const cosh=function(){let t;return t="cosh"in Math?Math.cosh:function(t){t=Math.exp(t);return(t+1/t)/2}}();function squaredSegmentDistance(t,e,n,r,a,o){var u,s=a-n,c=o-r;return 0==s&&0==c||(1<(u=((t-n)*s+(e-r)*c)/(s*s+c*c))?(n=a,r=o):0<u&&(n+=s*u,r+=c*u)),squaredDistance(t,e,n,r)}function squaredDistance(t,e,n,r){n-=t,t=r-e;return n*n+t*t}function solveLinearSystem(a){var o=a.length;for(let r=0;r<o;r++){let e=r,n=Math.abs(a[r][r]);for(let t=r+1;t<o;t++){var u=Math.abs(a[t][r]);u>n&&(n=u,e=t)}if(0===n)return null;var t=a[e];a[e]=a[r],a[r]=t;for(let e=r+1;e<o;e++){var s=-a[e][r]/a[r][r];for(let t=r;t<o+1;t++)r==t?a[e][t]=0:a[e][t]+=s*a[r][t]}}const n=new Array(o);for(let e=o-1;0<=e;e--){n[e]=a[e][o]/a[e][e];for(let t=e-1;0<=t;t--)a[t][o]-=a[t][e]*n[e]}return n}function toDegrees(t){return 180*t/Math.PI}function toRadians(t){return t*Math.PI/180}function modulo(t,e){t%=e;return t*e<0?t+e:t}function lerp(t,e,n){return t+n*(e-t)}export{clamp,cosh,squaredSegmentDistance,squaredDistance,solveLinearSystem,toDegrees,toRadians,modulo,lerp};