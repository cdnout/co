import{getUid}from"./util.js";import Tile from"./Tile.js";import TileState from"./TileState.js";import{createCanvasContext2D}from"./dom.js";class VectorRenderTile extends Tile{constructor(e,t,i,r,s,o){super(e,t,{transition:0}),this.context_={},this.executorGroups={},this.loadingSourceTiles=0,this.errorSourceTileKeys={},this.replayState_={},this.wantedResolution,this.getSourceTiles_=s,this.removeSourceTiles_=o,this.sourceTileGrid_=r,this.sourceZ=-1,this.hifi=!1,this.wrappedTileCoord=i}disposeInternal(){this.removeSourceTiles_(this);for(const e in this.context_){const t=this.context_[e].canvas;t.width=t.height=0}for(const i in this.executorGroups){const r=this.executorGroups[i];for(let e=0,t=r.length;e<t;++e)r[e].disposeInternal()}this.setState(TileState.ABORT),super.disposeInternal()}getContext(e){e=getUid(e);return e in this.context_||(this.context_[e]=createCanvasContext2D()),this.context_[e]}hasContext(e){return getUid(e)in this.context_}getImage(e){return this.hasContext(e)?this.getContext(e).canvas:null}getReplayState(e){e=getUid(e);return e in this.replayState_||(this.replayState_[e]={dirty:!1,renderedRenderOrder:null,renderedResolution:NaN,renderedRevision:-1,renderedTileResolution:NaN,renderedTileRevision:-1,renderedZ:-1,renderedTileZ:-1}),this.replayState_[e]}load(){this.getSourceTiles_(this)}}export default VectorRenderTile;