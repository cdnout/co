import ImageBase from"./ImageBase.js";import ImageState from"./ImageState.js";import{listenOnce,unlistenByKey}from"./events.js";import EventType from"./events/EventType.js";import{getHeight}from"./extent.js";import{IMAGE_DECODE}from"./has.js";class ImageWrapper extends ImageBase{constructor(t,e,s,i,n,a){super(t,e,s,ImageState.IDLE),this.src_=i,this.image_=new Image,null!==n&&(this.image_.crossOrigin=n),this.unlisten_=null,this.state=ImageState.IDLE,this.imageLoadFunction_=a}getImage(){return this.image_}handleImageError_(){this.state=ImageState.ERROR,this.unlistenImage_(),this.changed()}handleImageLoad_(){void 0===this.resolution&&(this.resolution=getHeight(this.extent)/this.image_.height),this.state=ImageState.LOADED,this.unlistenImage_(),this.changed()}load(){this.state!=ImageState.IDLE&&this.state!=ImageState.ERROR||(this.state=ImageState.LOADING,this.changed(),this.imageLoadFunction_(this,this.src_),this.unlisten_=listenImage(this.image_,this.handleImageLoad_.bind(this),this.handleImageError_.bind(this)))}setImage(t){this.image_=t}unlistenImage_(){this.unlisten_&&(this.unlisten_(),this.unlisten_=null)}}function listenImage(t,s,i){const n=t;if(n.src&&IMAGE_DECODE){const a=n.decode();let e=!0;return a.then(function(){e&&s()}).catch(function(t){e&&("EncodingError"===t.name&&"Invalid image type."===t.message?s:i)()}),function(){e=!1}}const e=[listenOnce(n,EventType.LOAD,s),listenOnce(n,EventType.ERROR,i)];return function(){e.forEach(unlistenByKey)}}export default ImageWrapper;export{listenImage};