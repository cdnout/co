import{getDistance}from"./sphere.js";import{applyTransform}from"./extent.js";import{modulo}from"./math.js";import{toEPSG4326,fromEPSG4326,PROJECTIONS as EPSG3857_PROJECTIONS}from"./proj/epsg3857.js";import{PROJECTIONS as EPSG4326_PROJECTIONS}from"./proj/epsg4326.js";import Projection from"./proj/Projection.js";import Units,{METERS_PER_UNIT}from"./proj/Units.js";import{add as addTransformFunc,clear as clearTransformFuncs,get as getTransformFunc}from"./proj/transforms.js";import{add as addProj,clear as clearProj,get as getProj}from"./proj/projections.js";function cloneTransform(n,t,r){let o;if(void 0!==t){for(let r=0,o=n.length;r<o;++r)t[r]=n[r];o=t}else o=n.slice();return o}function identityTransform(n,t,r){if(void 0!==t&&n!==t){for(let r=0,o=n.length;r<o;++r)t[r]=n[r];n=t}return n}function addProjection(r){addProj(r.getCode(),r),addTransformFunc(r,r,cloneTransform)}function addProjections(r){r.forEach(addProjection)}function get(r){return"string"==typeof r?getProj(r):r||null}function getPointResolution(o,n,t,e){let s;const r=(o=get(o)).getPointResolutionFunc();if(r)s=r(n,t),e&&e!==o.getUnits()&&(i=o.getMetersPerUnit())&&(s=s*i/METERS_PER_UNIT[e]);else if(o.getUnits()==Units.DEGREES&&!e||e==Units.DEGREES)s=n;else{const a=getTransformFromProjections(o,get("EPSG:4326"));let r=[t[0]-n/2,t[1],t[0]+n/2,t[1],t[0],t[1]-n/2,t[0],t[1]+n/2];r=a(r,r,2);var i=getDistance(r.slice(0,2),r.slice(2,4)),t=getDistance(r.slice(4,6),r.slice(6,8)),n=(s=(i+t)/2,e?METERS_PER_UNIT[e]:o.getMetersPerUnit());void 0!==n&&(s/=n)}return s}function addEquivalentProjections(r){addProjections(r),r.forEach(function(o){r.forEach(function(r){o!==r&&addTransformFunc(o,r,cloneTransform)})})}function addEquivalentTransforms(r,n,t,e){r.forEach(function(o){n.forEach(function(r){addTransformFunc(o,r,t),addTransformFunc(r,o,e)})})}function clearAllProjections(){clearProj(),clearTransformFuncs()}function createProjection(r,o){return r?"string"==typeof r?get(r):r:get(o)}function createTransformFromCoordinateTransform(a){return function(n,r,o){var t=n.length,e=void 0!==o?o:2;const s=void 0!==r?r:new Array(t);for(let o=0;o<t;o+=e){var i=a([n[o],n[o+1]]);s[o]=i[0],s[o+1]=i[1];for(let r=e-1;2<=r;--r)s[o+r]=n[o+r]}return s}}function addCoordinateTransforms(r,o,n,t){r=get(r),o=get(o);addTransformFunc(r,o,createTransformFromCoordinateTransform(n)),addTransformFunc(o,r,createTransformFromCoordinateTransform(t))}function fromLonLat(r,o){return transform(r,"EPSG:4326",void 0!==o?o:"EPSG:3857")}function toLonLat(r,o){const n=transform(r,void 0!==o?o:"EPSG:3857","EPSG:4326");r=n[0];return(r<-180||180<r)&&(n[0]=modulo(r+180,360)-180),n}function equivalent(r,o){if(r===o)return!0;var n=r.getUnits()===o.getUnits();return(r.getCode()===o.getCode()||getTransformFromProjections(r,o)===cloneTransform)&&n}function getTransformFromProjections(r,o){r=r.getCode(),o=o.getCode();let n=getTransformFunc(r,o);return n=n||identityTransform}function getTransform(r,o){return getTransformFromProjections(get(r),get(o))}function transform(r,o,n){const t=getTransform(o,n);return t(r,void 0,r.length)}function transformExtent(r,o,n){o=getTransform(o,n);return applyTransform(r,o)}function transformWithProjections(r,o,n){const t=getTransformFromProjections(o,n);return t(r)}let userProjection=null;function setUserProjection(r){userProjection=get(r)}function clearUserProjection(){userProjection=null}function getUserProjection(){return userProjection}function useGeographic(){setUserProjection("EPSG:4326")}function toUserCoordinate(r,o){return userProjection?transform(r,o,userProjection):r}function fromUserCoordinate(r,o){return userProjection?transform(r,userProjection,o):r}function toUserExtent(r,o){return userProjection?transformExtent(r,o,userProjection):r}function fromUserExtent(r,o){return userProjection?transformExtent(r,userProjection,o):r}function addCommon(){addEquivalentProjections(EPSG3857_PROJECTIONS),addEquivalentProjections(EPSG4326_PROJECTIONS),addEquivalentTransforms(EPSG4326_PROJECTIONS,EPSG3857_PROJECTIONS,fromEPSG4326,toEPSG4326)}addCommon();export{METERS_PER_UNIT,Projection,cloneTransform,identityTransform,addProjection,addProjections,get,getPointResolution,addEquivalentProjections,addEquivalentTransforms,clearAllProjections,createProjection,createTransformFromCoordinateTransform,addCoordinateTransforms,fromLonLat,toLonLat,equivalent,getTransformFromProjections,getTransform,transform,transformExtent,transformWithProjections,setUserProjection,clearUserProjection,getUserProjection,useGeographic,toUserCoordinate,fromUserCoordinate,toUserExtent,fromUserExtent,addCommon};