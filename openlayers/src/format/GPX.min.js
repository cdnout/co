import Feature from"../Feature.js";import{includes}from"../array.js";import{transformGeometryWithOptions}from"./Feature.js";import XMLFeature from"./XMLFeature.js";import{readString,readDecimal,readNonNegativeInteger,readDateTime,writeStringTextNode,writeNonNegativeIntegerTextNode,writeDecimalTextNode,writeDateTimeTextNode}from"./xsd.js";import GeometryLayout from"../geom/GeometryLayout.js";import GeometryType from"../geom/GeometryType.js";import LineString from"../geom/LineString.js";import MultiLineString from"../geom/MultiLineString.js";import Point from"../geom/Point.js";import{get as getProjection}from"../proj.js";import{createElementNS,makeArrayPusher,makeArraySerializer,makeChildAppender,makeObjectPropertySetter,makeSequence,makeSimpleNodeFactory,makeStructureNS,OBJECT_PROPERTY_NODE_FACTORY,parseNode,pushParseAndPop,pushSerializeAndPop,XML_SCHEMA_INSTANCE_URI}from"../xml.js";const NAMESPACE_URIS=[null,"http://www.topografix.com/GPX/1/0","http://www.topografix.com/GPX/1/1"],SCHEMA_LOCATION="http://www.topografix.com/GPX/1/1 http://www.topografix.com/GPX/1/1/gpx.xsd",FEATURE_READER={rte:readRte,trk:readTrk,wpt:readWpt},GPX_PARSERS=makeStructureNS(NAMESPACE_URIS,{rte:makeArrayPusher(readRte),trk:makeArrayPusher(readTrk),wpt:makeArrayPusher(readWpt)}),LINK_PARSERS=makeStructureNS(NAMESPACE_URIS,{text:makeObjectPropertySetter(readString,"linkText"),type:makeObjectPropertySetter(readString,"linkType")}),GPX_SERIALIZERS=makeStructureNS(NAMESPACE_URIS,{rte:makeChildAppender(writeRte),trk:makeChildAppender(writeTrk),wpt:makeChildAppender(writeWpt)});class GPX extends XMLFeature{constructor(e){super();e=e||{};this.dataProjection=getProjection("EPSG:4326"),this.readExtensions_=e.readExtensions}handleReadExtensions_(r){for(let e=0,t=(r=r||[]).length;e<t;++e){const i=r[e];var a;this.readExtensions_&&(a=i.get("extensionsNode_")||null,this.readExtensions_(i,a)),i.set("extensionsNode_",void 0)}}readFeatureFromNode(e,t){if(!includes(NAMESPACE_URIS,e.namespaceURI))return null;const r=FEATURE_READER[e.localName];if(!r)return null;e=r(e,[this.getReadOptions(e,t)]);return e?(this.handleReadExtensions_([e]),e):null}readFeaturesFromNode(e,t){return includes(NAMESPACE_URIS,e.namespaceURI)&&"gpx"==e.localName&&(e=pushParseAndPop([],GPX_PARSERS,e,[this.getReadOptions(e,t)]))?(this.handleReadExtensions_(e),e):[]}writeFeaturesNode(e,t){t=this.adaptOptions(t);const r=createElementNS("http://www.topografix.com/GPX/1/1","gpx");return r.setAttributeNS("http://www.w3.org/2000/xmlns/","xmlns:xsi",XML_SCHEMA_INSTANCE_URI),r.setAttributeNS(XML_SCHEMA_INSTANCE_URI,"xsi:schemaLocation",SCHEMA_LOCATION),r.setAttribute("version","1.1"),r.setAttribute("creator","OpenLayers"),pushSerializeAndPop({node:r},GPX_SERIALIZERS,GPX_NODE_FACTORY,e,[t]),r}}const RTE_PARSERS=makeStructureNS(NAMESPACE_URIS,{name:makeObjectPropertySetter(readString),cmt:makeObjectPropertySetter(readString),desc:makeObjectPropertySetter(readString),src:makeObjectPropertySetter(readString),link:parseLink,number:makeObjectPropertySetter(readNonNegativeInteger),extensions:parseExtensions,type:makeObjectPropertySetter(readString),rtept:parseRtePt}),RTEPT_PARSERS=makeStructureNS(NAMESPACE_URIS,{ele:makeObjectPropertySetter(readDecimal),time:makeObjectPropertySetter(readDateTime)}),TRK_PARSERS=makeStructureNS(NAMESPACE_URIS,{name:makeObjectPropertySetter(readString),cmt:makeObjectPropertySetter(readString),desc:makeObjectPropertySetter(readString),src:makeObjectPropertySetter(readString),link:parseLink,number:makeObjectPropertySetter(readNonNegativeInteger),type:makeObjectPropertySetter(readString),extensions:parseExtensions,trkseg:parseTrkSeg}),TRKSEG_PARSERS=makeStructureNS(NAMESPACE_URIS,{trkpt:parseTrkPt}),TRKPT_PARSERS=makeStructureNS(NAMESPACE_URIS,{ele:makeObjectPropertySetter(readDecimal),time:makeObjectPropertySetter(readDateTime)}),WPT_PARSERS=makeStructureNS(NAMESPACE_URIS,{ele:makeObjectPropertySetter(readDecimal),time:makeObjectPropertySetter(readDateTime),magvar:makeObjectPropertySetter(readDecimal),geoidheight:makeObjectPropertySetter(readDecimal),name:makeObjectPropertySetter(readString),cmt:makeObjectPropertySetter(readString),desc:makeObjectPropertySetter(readString),src:makeObjectPropertySetter(readString),link:parseLink,sym:makeObjectPropertySetter(readString),type:makeObjectPropertySetter(readString),fix:makeObjectPropertySetter(readString),sat:makeObjectPropertySetter(readNonNegativeInteger),hdop:makeObjectPropertySetter(readDecimal),vdop:makeObjectPropertySetter(readDecimal),pdop:makeObjectPropertySetter(readDecimal),ageofdgpsdata:makeObjectPropertySetter(readDecimal),dgpsid:makeObjectPropertySetter(readNonNegativeInteger),extensions:parseExtensions}),LINK_SEQUENCE=["text","type"],LINK_SERIALIZERS=makeStructureNS(NAMESPACE_URIS,{text:makeChildAppender(writeStringTextNode),type:makeChildAppender(writeStringTextNode)}),RTE_SEQUENCE=makeStructureNS(NAMESPACE_URIS,["name","cmt","desc","src","link","number","type","rtept"]),RTE_SERIALIZERS=makeStructureNS(NAMESPACE_URIS,{name:makeChildAppender(writeStringTextNode),cmt:makeChildAppender(writeStringTextNode),desc:makeChildAppender(writeStringTextNode),src:makeChildAppender(writeStringTextNode),link:makeChildAppender(writeLink),number:makeChildAppender(writeNonNegativeIntegerTextNode),type:makeChildAppender(writeStringTextNode),rtept:makeArraySerializer(makeChildAppender(writeWptType))}),RTEPT_TYPE_SEQUENCE=makeStructureNS(NAMESPACE_URIS,["ele","time"]),TRK_SEQUENCE=makeStructureNS(NAMESPACE_URIS,["name","cmt","desc","src","link","number","type","trkseg"]),TRK_SERIALIZERS=makeStructureNS(NAMESPACE_URIS,{name:makeChildAppender(writeStringTextNode),cmt:makeChildAppender(writeStringTextNode),desc:makeChildAppender(writeStringTextNode),src:makeChildAppender(writeStringTextNode),link:makeChildAppender(writeLink),number:makeChildAppender(writeNonNegativeIntegerTextNode),type:makeChildAppender(writeStringTextNode),trkseg:makeArraySerializer(makeChildAppender(writeTrkSeg))}),TRKSEG_NODE_FACTORY=makeSimpleNodeFactory("trkpt"),TRKSEG_SERIALIZERS=makeStructureNS(NAMESPACE_URIS,{trkpt:makeChildAppender(writeWptType)}),WPT_TYPE_SEQUENCE=makeStructureNS(NAMESPACE_URIS,["ele","time","magvar","geoidheight","name","cmt","desc","src","link","sym","type","fix","sat","hdop","vdop","pdop","ageofdgpsdata","dgpsid"]),WPT_TYPE_SERIALIZERS=makeStructureNS(NAMESPACE_URIS,{ele:makeChildAppender(writeDecimalTextNode),time:makeChildAppender(writeDateTimeTextNode),magvar:makeChildAppender(writeDecimalTextNode),geoidheight:makeChildAppender(writeDecimalTextNode),name:makeChildAppender(writeStringTextNode),cmt:makeChildAppender(writeStringTextNode),desc:makeChildAppender(writeStringTextNode),src:makeChildAppender(writeStringTextNode),link:makeChildAppender(writeLink),sym:makeChildAppender(writeStringTextNode),type:makeChildAppender(writeStringTextNode),fix:makeChildAppender(writeStringTextNode),sat:makeChildAppender(writeNonNegativeIntegerTextNode),hdop:makeChildAppender(writeDecimalTextNode),vdop:makeChildAppender(writeDecimalTextNode),pdop:makeChildAppender(writeDecimalTextNode),ageofdgpsdata:makeChildAppender(writeDecimalTextNode),dgpsid:makeChildAppender(writeNonNegativeIntegerTextNode)}),GEOMETRY_TYPE_TO_NODENAME={Point:"wpt",LineString:"rte",MultiLineString:"trk"};function GPX_NODE_FACTORY(e,t,r){const a=e.getGeometry();if(a){e=GEOMETRY_TYPE_TO_NODENAME[a.getType()];if(e)return t=t[t.length-1].node,createElementNS(t.namespaceURI,e)}}function appendCoordinate(e,t,r,a){return e.push(parseFloat(r.getAttribute("lon")),parseFloat(r.getAttribute("lat"))),"ele"in a?(e.push(a.ele),delete a.ele,t.hasZ=!0):e.push(0),"time"in a?(e.push(a.time),delete a.time,t.hasM=!0):e.push(0),e}function applyLayoutOptions(r,a,i){let e=GeometryLayout.XY,n=2;if(r.hasZ&&r.hasM?(e=GeometryLayout.XYZM,n=4):r.hasZ?(e=GeometryLayout.XYZ,n=3):r.hasM&&(e=GeometryLayout.XYM,n=3),4!==n){for(let e=0,t=a.length/4;e<t;e++)a[e*n]=a[4*e],a[e*n+1]=a[4*e+1],r.hasZ&&(a[e*n+2]=a[4*e+2]),r.hasM&&(a[e*n+2]=a[4*e+3]);if(a.length=a.length/4*n,i)for(let e=0,t=i.length;e<t;e++)i[e]=i[e]/4*n}return e}function parseLink(e,t){const r=t[t.length-1];var a=e.getAttribute("href");null!==a&&(r.link=a),parseNode(LINK_PARSERS,e,t)}function parseExtensions(e,t){const r=t[t.length-1];r.extensionsNode_=e}function parseRtePt(e,t){var r=pushParseAndPop({},RTEPT_PARSERS,e,t);r&&appendCoordinate((t=t[t.length-1]).flatCoordinates,t.layoutOptions,e,r)}function parseTrkPt(e,t){var r=pushParseAndPop({},TRKPT_PARSERS,e,t);r&&appendCoordinate((t=t[t.length-1]).flatCoordinates,t.layoutOptions,e,r)}function parseTrkSeg(e,t){var r=t[t.length-1],e=(parseNode(TRKSEG_PARSERS,e,t),r.flatCoordinates);const a=r.ends;a.push(e.length)}function readRte(e,t){var r=t[0];const a=pushParseAndPop({flatCoordinates:[],layoutOptions:{}},RTE_PARSERS,e,t);if(a){e=a.flatCoordinates,t=(delete a.flatCoordinates,a.layoutOptions),t=(delete a.layoutOptions,applyLayoutOptions(t,e)),e=new LineString(e,t);transformGeometryWithOptions(e,!1,r);const i=new Feature(e);return i.setProperties(a,!0),i}}function readTrk(e,t){var r=t[0];const a=pushParseAndPop({flatCoordinates:[],ends:[],layoutOptions:{}},TRK_PARSERS,e,t);if(a){var e=a.flatCoordinates,t=(delete a.flatCoordinates,a.ends),i=(delete a.ends,a.layoutOptions),i=(delete a.layoutOptions,applyLayoutOptions(i,e,t)),e=new MultiLineString(e,i,t);transformGeometryWithOptions(e,!1,r);const n=new Feature(e);return n.setProperties(a,!0),n}}function readWpt(e,t){var r=t[0],t=pushParseAndPop({},WPT_PARSERS,e,t);if(t){var a={},e=appendCoordinate([],a,e,t),a=applyLayoutOptions(a,e),e=new Point(e,a);transformGeometryWithOptions(e,!1,r);const i=new Feature(e);return i.setProperties(t,!0),i}}function writeLink(e,t,r){e.setAttribute("href",t);t=r[r.length-1].properties,t=[t.linkText,t.linkType];pushSerializeAndPop({node:e},LINK_SERIALIZERS,OBJECT_PROPERTY_NODE_FACTORY,t,r,LINK_SEQUENCE)}function writeWptType(e,t,r){var a=r[r.length-1],i=a.node.namespaceURI;const n=a.properties;switch(e.setAttributeNS(null,"lat",String(t[1])),e.setAttributeNS(null,"lon",String(t[0])),a.geometryLayout){case GeometryLayout.XYZM:0!==t[3]&&(n.time=t[3]);case GeometryLayout.XYZ:0!==t[2]&&(n.ele=t[2]);break;case GeometryLayout.XYM:0!==t[2]&&(n.time=t[2])}a=("rtept"==e.nodeName?RTEPT_TYPE_SEQUENCE:WPT_TYPE_SEQUENCE)[i],i=makeSequence(n,a);pushSerializeAndPop({node:e,properties:n},WPT_TYPE_SERIALIZERS,OBJECT_PROPERTY_NODE_FACTORY,i,r,a)}function writeRte(e,t,r){var a=r[0];const i=t.getProperties(),n={node:e},o=(n.properties=i,t.getGeometry());if(o.getType()==GeometryType.LINE_STRING){const p=transformGeometryWithOptions(o,!0,a);n.geometryLayout=p.getLayout(),i.rtept=p.getCoordinates()}e=r[r.length-1].node,t=RTE_SEQUENCE[e.namespaceURI],a=makeSequence(i,t);pushSerializeAndPop(n,RTE_SERIALIZERS,OBJECT_PROPERTY_NODE_FACTORY,a,r,t)}function writeTrk(e,t,r){var a=r[0];const i=t.getProperties(),n={node:e},o=(n.properties=i,t.getGeometry());if(o.getType()==GeometryType.MULTI_LINE_STRING){const p=transformGeometryWithOptions(o,!0,a);i.trkseg=p.getLineStrings()}e=r[r.length-1].node,t=TRK_SEQUENCE[e.namespaceURI],a=makeSequence(i,t);pushSerializeAndPop(n,TRK_SERIALIZERS,OBJECT_PROPERTY_NODE_FACTORY,a,r,t)}function writeTrkSeg(e,t,r){const a={node:e};a.geometryLayout=t.getLayout(),a.properties={},pushSerializeAndPop(a,TRKSEG_SERIALIZERS,TRKSEG_NODE_FACTORY,t.getCoordinates(),r)}function writeWpt(e,t,r){var a=r[0];const i=r[r.length-1],n=(i.properties=t.getProperties(),t.getGeometry());if(n.getType()==GeometryType.POINT){const o=transformGeometryWithOptions(n,!0,a);i.geometryLayout=o.getLayout(),writeWptType(e,o.getCoordinates(),r)}}export default GPX;