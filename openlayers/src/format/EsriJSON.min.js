import Feature from"../Feature.js";import{assert}from"../asserts.js";import{containsExtent}from"../extent.js";import{transformGeometryWithOptions}from"./Feature.js";import JSONFeature from"./JSONFeature.js";import GeometryLayout from"../geom/GeometryLayout.js";import GeometryType from"../geom/GeometryType.js";import LineString from"../geom/LineString.js";import LinearRing from"../geom/LinearRing.js";import MultiLineString from"../geom/MultiLineString.js";import MultiPoint from"../geom/MultiPoint.js";import MultiPolygon from"../geom/MultiPolygon.js";import Point from"../geom/Point.js";import Polygon from"../geom/Polygon.js";import{deflateCoordinates}from"../geom/flat/deflate.js";import{linearRingIsClockwise}from"../geom/flat/orient.js";import{isEmpty}from"../obj.js";import{get as getProjection}from"../proj.js";const GEOMETRY_READERS={},GEOMETRY_WRITERS=(GEOMETRY_READERS[GeometryType.POINT]=readPointGeometry,GEOMETRY_READERS[GeometryType.LINE_STRING]=readLineStringGeometry,GEOMETRY_READERS[GeometryType.POLYGON]=readPolygonGeometry,GEOMETRY_READERS[GeometryType.MULTI_POINT]=readMultiPointGeometry,GEOMETRY_READERS[GeometryType.MULTI_LINE_STRING]=readMultiLineStringGeometry,GEOMETRY_READERS[GeometryType.MULTI_POLYGON]=readMultiPolygonGeometry,{});GEOMETRY_WRITERS[GeometryType.POINT]=writePointGeometry,GEOMETRY_WRITERS[GeometryType.LINE_STRING]=writeLineStringGeometry,GEOMETRY_WRITERS[GeometryType.POLYGON]=writePolygonGeometry,GEOMETRY_WRITERS[GeometryType.MULTI_POINT]=writeMultiPointGeometry,GEOMETRY_WRITERS[GeometryType.MULTI_LINE_STRING]=writeMultiLineStringGeometry,GEOMETRY_WRITERS[GeometryType.MULTI_POLYGON]=writeMultiPolygonGeometry;class EsriJSON extends JSONFeature{constructor(e){e=e||{};super(),this.geometryName_=e.geometryName}readFeatureFromObject(e,t){var r=readGeometry(e.geometry,t);const o=new Feature;return this.geometryName_&&o.setGeometryName(this.geometryName_),o.setGeometry(r),t&&t.idField&&e.attributes[t.idField]&&o.setId(e.attributes[t.idField]),e.attributes&&o.setProperties(e.attributes,!0),o}readFeaturesFromObject(e,t){const r=t||{};if(e.features){const n=[];var o=e.features;r.idField=e.objectIdFieldName;for(let e=0,t=o.length;e<t;++e)n.push(this.readFeatureFromObject(o[e],r));return n}return[this.readFeatureFromObject(e,r)]}readGeometryFromObject(e,t){return readGeometry(e,t)}readProjectionFromObject(e){return e.spatialReference&&void 0!==e.spatialReference.wkid?(e=e.spatialReference.wkid,getProjection("EPSG:"+e)):null}writeGeometryObject(e,t){return writeGeometry(e,this.adaptOptions(t))}writeFeatureObject(e,t){t=this.adaptOptions(t);const r={};var o=e.getGeometry();o&&(r.geometry=writeGeometry(o,t),t&&t.featureProjection&&(r.geometry.spatialReference={wkid:Number(getProjection(t.featureProjection).getCode().split(":").pop())}));const n=e.getProperties();return delete n[e.getGeometryName()],isEmpty(n)?r.attributes={}:r.attributes=n,r}writeFeaturesObject(r,o){o=this.adaptOptions(o);const n=[];for(let e=0,t=r.length;e<t;++e)n.push(this.writeFeatureObject(r[e],o));return{features:n}}}function readGeometry(e,t){if(!e)return null;let r;var o,n;"number"==typeof e.x&&"number"==typeof e.y?r=GeometryType.POINT:e.points?r=GeometryType.MULTI_POINT:e.paths?r=1===e.paths.length?GeometryType.LINE_STRING:GeometryType.MULTI_LINE_STRING:e.rings&&(o=getGeometryLayout(n=e),e=1===(n=convertRings(n.rings,o)).length?(r=GeometryType.POLYGON,Object.assign({},e,{rings:n[0]})):(r=GeometryType.MULTI_POLYGON,Object.assign({},e,{rings:n})));const i=GEOMETRY_READERS[r];return transformGeometryWithOptions(i(e),!1,t)}function convertRings(e,t){const r=[],o=[],n=[];let i,a;for(i=0,a=e.length;i<a;++i)r.length=0,deflateCoordinates(r,0,e[i],t.length),linearRingIsClockwise(r,0,r.length,t.length)?o.push([e[i]]):n.push(e[i]);for(;n.length;){const m=n.shift();let e=!1;for(i=o.length-1;0<=i;i--){var s=o[i][0];if(containsExtent(new LinearRing(s).getExtent(),new LinearRing(m).getExtent())){o[i].push(m),e=!0;break}}e||o.push([m.reverse()])}return o}function readPointGeometry(e){let t;return t=void 0!==e.m&&void 0!==e.z?new Point([e.x,e.y,e.z,e.m],GeometryLayout.XYZM):void 0!==e.z?new Point([e.x,e.y,e.z],GeometryLayout.XYZ):void 0!==e.m?new Point([e.x,e.y,e.m],GeometryLayout.XYM):new Point([e.x,e.y])}function readLineStringGeometry(e){var t=getGeometryLayout(e);return new LineString(e.paths[0],t)}function readMultiLineStringGeometry(e){var t=getGeometryLayout(e);return new MultiLineString(e.paths,t)}function getGeometryLayout(e){let t=GeometryLayout.XY;return!0===e.hasZ&&!0===e.hasM?t=GeometryLayout.XYZM:!0===e.hasZ?t=GeometryLayout.XYZ:!0===e.hasM&&(t=GeometryLayout.XYM),t}function readMultiPointGeometry(e){var t=getGeometryLayout(e);return new MultiPoint(e.points,t)}function readMultiPolygonGeometry(e){var t=getGeometryLayout(e);return new MultiPolygon(e.rings,t)}function readPolygonGeometry(e){var t=getGeometryLayout(e);return new Polygon(e.rings,t)}function writePointGeometry(e,t){var r=e.getCoordinates();let o;e=e.getLayout();return e===GeometryLayout.XYZ?o={x:r[0],y:r[1],z:r[2]}:e===GeometryLayout.XYM?o={x:r[0],y:r[1],m:r[2]}:e===GeometryLayout.XYZM?o={x:r[0],y:r[1],z:r[2],m:r[3]}:e===GeometryLayout.XY?o={x:r[0],y:r[1]}:assert(!1,34),o}function getHasZM(e){e=e.getLayout();return{hasZ:e===GeometryLayout.XYZ||e===GeometryLayout.XYZM,hasM:e===GeometryLayout.XYM||e===GeometryLayout.XYZM}}function writeLineStringGeometry(e,t){var r=getHasZM(e);return{hasZ:r.hasZ,hasM:r.hasM,paths:[e.getCoordinates()]}}function writePolygonGeometry(e,t){var r=getHasZM(e);return{hasZ:r.hasZ,hasM:r.hasM,rings:e.getCoordinates(!1)}}function writeMultiLineStringGeometry(e,t){var r=getHasZM(e);return{hasZ:r.hasZ,hasM:r.hasM,paths:e.getCoordinates()}}function writeMultiPointGeometry(e,t){var r=getHasZM(e);return{hasZ:r.hasZ,hasM:r.hasM,points:e.getCoordinates()}}function writeMultiPolygonGeometry(e,t){var r=getHasZM(e),o=e.getCoordinates(!1);const n=[];for(let t=0;t<o.length;t++)for(let e=o[t].length-1;0<=e;e--)n.push(o[t][e]);return{hasZ:r.hasZ,hasM:r.hasM,rings:n}}function writeGeometry(e,t){const r=GEOMETRY_WRITERS[e.getType()];return r(transformGeometryWithOptions(e,!0,t),t)}export default EsriJSON;