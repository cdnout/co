import Feature from"../Feature.js";import{transformGeometryWithOptions}from"./Feature.js";import TextFeature from"./TextFeature.js";import GeometryLayout from"../geom/GeometryLayout.js";import LineString from"../geom/LineString.js";import{get as getProjection}from"../proj.js";const IGCZ={BAROMETRIC:"barometric",GPS:"gps",NONE:"none"},B_RECORD_RE=/^B(\d{2})(\d{2})(\d{2})(\d{2})(\d{5})([NS])(\d{3})(\d{5})([EW])([AV])(\d{5})(\d{5})/,H_RECORD_RE=/^H.([A-Z]{3}).*?:(.*)/,HFDTE_RECORD_RE=/^HFDTE(\d{2})(\d{2})(\d{2})/,NEWLINE_RE=/\r\n|\r|\n/;class IGC extends TextFeature{constructor(e){super();e=e||{};this.dataProjection=getProjection("EPSG:4326"),this.altitudeMode_=e.altitudeMode||IGCZ.NONE}readFeatureFromText(e,t){var a=this.altitudeMode_,r=e.split(NEWLINE_RE);const s={},n=[];let i=2e3,p=0,E=1,m=-1,u,o;for(u=0,o=r.length;u<o;++u){const G=r[u];let o;if("B"==G.charAt(0)){if(o=B_RECORD_RE.exec(G)){var d=parseInt(o[1],10),I=parseInt(o[2],10),R=parseInt(o[3],10);let e=parseInt(o[4],10)+parseInt(o[5],10)/6e4,t=("S"==o[6]&&(e=-e),parseInt(o[7],10)+parseInt(o[8],10)/6e4);if("W"==o[9]&&(t=-t),n.push(t,e),a!=IGCZ.NONE){let e;e=a==IGCZ.GPS?parseInt(o[11],10):a==IGCZ.BAROMETRIC?parseInt(o[12],10):0,n.push(e)}let r=Date.UTC(i,p,E,d,I,R);r<m&&(r=Date.UTC(i,p,E+1,d,I,R)),n.push(r/1e3),m=r}}else"H"==G.charAt(0)&&((o=HFDTE_RECORD_RE.exec(G))?(E=parseInt(o[1],10),p=parseInt(o[2],10)-1,i=2e3+parseInt(o[3],10)):(o=H_RECORD_RE.exec(G))&&(s[o[1]]=o[2].trim()))}if(0===n.length)return null;e=a==IGCZ.NONE?GeometryLayout.XYM:GeometryLayout.XYZM,e=new LineString(n,e);const C=new Feature(transformGeometryWithOptions(e,!1,t));return C.setProperties(s,!0),C}readFeaturesFromText(e,t){e=this.readFeatureFromText(e,t);return e?[e]:[]}}export default IGC;