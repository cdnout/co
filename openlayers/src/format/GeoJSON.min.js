import{assert}from"../asserts.js";import Feature from"../Feature.js";import{transformGeometryWithOptions}from"./Feature.js";import JSONFeature from"./JSONFeature.js";import GeometryCollection from"../geom/GeometryCollection.js";import LineString from"../geom/LineString.js";import MultiLineString from"../geom/MultiLineString.js";import MultiPoint from"../geom/MultiPoint.js";import MultiPolygon from"../geom/MultiPolygon.js";import Point from"../geom/Point.js";import Polygon from"../geom/Polygon.js";import{assign,isEmpty}from"../obj.js";import{get as getProjection}from"../proj.js";import GeometryType from"../geom/GeometryType.js";class GeoJSON extends JSONFeature{constructor(e){e=e||{};super(),this.dataProjection=getProjection(e.dataProjection||"EPSG:4326"),e.featureProjection&&(this.defaultFeatureProjection=getProjection(e.featureProjection)),this.geometryName_=e.geometryName,this.extractGeometryName_=e.extractGeometryName}readFeatureFromObject(e,t){let r=null;e=readGeometry((r="Feature"===e.type?e:{type:"Feature",geometry:e,properties:null}).geometry,t);const o=new Feature;return this.geometryName_?o.setGeometryName(this.geometryName_):this.extractGeometryName_&&"geometry_name"in r!==void 0&&o.setGeometryName(r.geometry_name),o.setGeometry(e),"id"in r&&o.setId(r.id),r.properties&&o.setProperties(r.properties,!0),o}readFeaturesFromObject(e,r){let o=null;if("FeatureCollection"===e.type){o=[];var i=e.features;for(let e=0,t=i.length;e<t;++e)o.push(this.readFeatureFromObject(i[e],r))}else o=[this.readFeatureFromObject(e,r)];return o}readGeometryFromObject(e,t){return readGeometry(e,t)}readProjectionFromObject(e){e=e.crs;let t;return e?"name"==e.type?t=getProjection(e.properties.name):assert(!1,36):t=this.dataProjection,t}writeFeatureObject(e,t){t=this.adaptOptions(t);const r={type:"Feature",geometry:null,properties:null};var o=e.getId(),o=(void 0!==o&&(r.id=o),e.getGeometry());o&&(r.geometry=writeGeometry(o,t));const i=e.getProperties();return delete i[e.getGeometryName()],isEmpty(i)||(r.properties=i),r}writeFeaturesObject(r,o){o=this.adaptOptions(o);const i=[];for(let e=0,t=r.length;e<t;++e)i.push(this.writeFeatureObject(r[e],o));return{type:"FeatureCollection",features:i}}writeGeometryObject(e,t){return writeGeometry(e,this.adaptOptions(t))}}function readGeometry(e,t){if(!e)return null;let r;switch(e.type){case GeometryType.POINT:r=readPointGeometry(e);break;case GeometryType.LINE_STRING:r=readLineStringGeometry(e);break;case GeometryType.POLYGON:r=readPolygonGeometry(e);break;case GeometryType.MULTI_POINT:r=readMultiPointGeometry(e);break;case GeometryType.MULTI_LINE_STRING:r=readMultiLineStringGeometry(e);break;case GeometryType.MULTI_POLYGON:r=readMultiPolygonGeometry(e);break;case GeometryType.GEOMETRY_COLLECTION:r=readGeometryCollectionGeometry(e);break;default:throw new Error("Unsupported GeoJSON type: "+e.type)}return transformGeometryWithOptions(r,!1,t)}function readGeometryCollectionGeometry(e,t){e=e.geometries.map(function(e){return readGeometry(e,t)});return new GeometryCollection(e)}function readPointGeometry(e){return new Point(e.coordinates)}function readLineStringGeometry(e){return new LineString(e.coordinates)}function readMultiLineStringGeometry(e){return new MultiLineString(e.coordinates)}function readMultiPointGeometry(e){return new MultiPoint(e.coordinates)}function readMultiPolygonGeometry(e){return new MultiPolygon(e.coordinates)}function readPolygonGeometry(e){return new Polygon(e.coordinates)}function writeGeometry(e,t){var r=(e=transformGeometryWithOptions(e,!0,t)).getType();let o;switch(r){case GeometryType.POINT:o=writePointGeometry(e,t);break;case GeometryType.LINE_STRING:o=writeLineStringGeometry(e,t);break;case GeometryType.POLYGON:o=writePolygonGeometry(e,t);break;case GeometryType.MULTI_POINT:o=writeMultiPointGeometry(e,t);break;case GeometryType.MULTI_LINE_STRING:o=writeMultiLineStringGeometry(e,t);break;case GeometryType.MULTI_POLYGON:o=writeMultiPolygonGeometry(e,t);break;case GeometryType.GEOMETRY_COLLECTION:o=writeGeometryCollectionGeometry(e,t);break;case GeometryType.CIRCLE:o={type:"GeometryCollection",geometries:[]};break;default:throw new Error("Unsupported geometry type: "+r)}return o}function writeGeometryCollectionGeometry(e,r){return{type:"GeometryCollection",geometries:e.getGeometriesArray().map(function(e){const t=assign({},r);return delete t.featureProjection,writeGeometry(e,t)})}}function writeLineStringGeometry(e,t){return{type:"LineString",coordinates:e.getCoordinates()}}function writeMultiLineStringGeometry(e,t){return{type:"MultiLineString",coordinates:e.getCoordinates()}}function writeMultiPointGeometry(e,t){return{type:"MultiPoint",coordinates:e.getCoordinates()}}function writeMultiPolygonGeometry(e,t){let r;return t&&(r=t.rightHanded),{type:"MultiPolygon",coordinates:e.getCoordinates(r)}}function writePointGeometry(e,t){return{type:"Point",coordinates:e.getCoordinates()}}function writePolygonGeometry(e,t){let r;return t&&(r=t.rightHanded),{type:"Polygon",coordinates:e.getCoordinates(r)}}export default GeoJSON;