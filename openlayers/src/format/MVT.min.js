import{assert}from"../asserts.js";import PBF from"pbf";import FeatureFormat,{transformGeometryWithOptions}from"./Feature.js";import FormatType from"./FormatType.js";import GeometryLayout from"../geom/GeometryLayout.js";import GeometryType from"../geom/GeometryType.js";import LineString from"../geom/LineString.js";import MultiLineString from"../geom/MultiLineString.js";import MultiPoint from"../geom/MultiPoint.js";import MultiPolygon from"../geom/MultiPolygon.js";import Point from"../geom/Point.js";import Polygon from"../geom/Polygon.js";import{linearRingIsClockwise}from"../geom/flat/orient.js";import Projection from"../proj/Projection.js";import Units from"../proj/Units.js";import RenderFeature from"../render/Feature.js";import{get}from"../proj.js";class MVT extends FeatureFormat{constructor(e){super();e=e||{};this.dataProjection=new Projection({code:"",units:Units.TILE_PIXELS}),this.featureClass_=e.featureClass||RenderFeature,this.geometryName_=e.geometryName,this.layerName_=e.layerName||"layer",this.layers_=e.layers||null,this.idProperty_=e.idProperty}readRawGeometry_(e,r,t,o){e.pos=r.geometry;var a,i=e.readVarint()+e.pos;let s=1,n=0,y=0,m=0,l=0,p=0;for(;e.pos<i;)n||(a=e.readVarint(),s=7&a,n=a>>3),n--,1===s||2===s?(y+=e.readSVarint(),m+=e.readSVarint(),1===s&&l>p&&(o.push(l),p=l),t.push(y,m),l+=2):7===s?l>p&&(t.push(t[p],t[p+1]),l+=2):assert(!1,59);l>p&&(o.push(l),p=l)}createFeature_(r,t,o){var e=t.type;if(0===e)return null;let a;const i=t.properties;let s;this.idProperty_?(s=i[this.idProperty_],delete i[this.idProperty_]):s=t.id,i[this.layerName_]=t.layer.name;var n=[];const y=[];this.readRawGeometry_(r,t,n,y);r=getGeometryType(e,y.length);if(this.featureClass_===RenderFeature)(a=new this.featureClass_(r,n,y,i,s)).transform(o.dataProjection,o.featureProjection);else{let e;if(r==GeometryType.POLYGON){const p=[];let t=0,o=0;for(let e=0,r=y.length;e<r;++e){var m=y[e];linearRingIsClockwise(n,t,m,2)||(p.push(y.slice(o,e)),o=e),t=m}e=1<p.length?new MultiPolygon(n,GeometryLayout.XY,p):new Polygon(n,GeometryLayout.XY,y)}else e=r===GeometryType.POINT?new Point(n,GeometryLayout.XY):r===GeometryType.LINE_STRING?new LineString(n,GeometryLayout.XY):r===GeometryType.POLYGON?new Polygon(n,GeometryLayout.XY,y):r===GeometryType.MULTI_POINT?new MultiPoint(n,GeometryLayout.XY):r===GeometryType.MULTI_LINE_STRING?new MultiLineString(n,GeometryLayout.XY,y):null;const l=this.featureClass_;a=new l,this.geometryName_&&a.setGeometryName(this.geometryName_);t=transformGeometryWithOptions(e,!1,o);a.setGeometry(t),a.setId(s),a.setProperties(i,!0)}return a}getType(){return FormatType.ARRAY_BUFFER}readFeatures(e,r){const t=this.layers_,o=this.adaptOptions(r),a=get(o.dataProjection),i=(a.setWorldExtent(o.extent),o.dataProjection=a,new PBF(e));var s=i.readFields(layersPBFReader,{});const n=[];for(const p in s)if(!t||-1!=t.indexOf(p)){var y=s[p],m=y?[0,0,y.extent,y.extent]:null;a.setExtent(m);for(let e=0,r=y.length;e<r;++e){var l=readRawFeature(i,y,e);n.push(this.createFeature_(i,l,o))}}return n}readProjection(e){return this.dataProjection}setLayers(e){this.layers_=e}}function layersPBFReader(e,r,t){if(3===e){const o={keys:[],values:[],features:[]};e=t.readVarint()+t.pos;t.readFields(layerPBFReader,o,e),o.length=o.features.length,o.length&&(r[o.name]=o)}}function layerPBFReader(r,t,o){if(15===r)t.version=o.readVarint();else if(1===r)t.name=o.readString();else if(5===r)t.extent=o.readVarint();else if(2===r)t.features.push(o.pos);else if(3===r)t.keys.push(o.readString());else if(4===r){let e=null;for(var a=o.readVarint()+o.pos;o.pos<a;)r=o.readVarint()>>3,e=1===r?o.readString():2===r?o.readFloat():3===r?o.readDouble():4===r?o.readVarint64():5===r?o.readVarint():6===r?o.readSVarint():7===r?o.readBoolean():null;t.values.push(e)}}function featurePBFReader(e,r,t){if(1==e)r.id=t.readVarint();else if(2==e)for(var o=t.readVarint()+t.pos;t.pos<o;){var a=r.layer.keys[t.readVarint()],i=r.layer.values[t.readVarint()];r.properties[a]=i}else 3==e?r.type=t.readVarint():4==e&&(r.geometry=t.pos)}function readRawFeature(e,r,t){e.pos=r.features[t];t=e.readVarint()+e.pos,r={layer:r,type:0,properties:{}};return e.readFields(featurePBFReader,r,t),r}function getGeometryType(e,r){let t;return 1===e?t=1===r?GeometryType.POINT:GeometryType.MULTI_POINT:2===e?t=1===r?GeometryType.LINE_STRING:GeometryType.MULTI_LINE_STRING:3===e&&(t=GeometryType.POLYGON),t}export default MVT;