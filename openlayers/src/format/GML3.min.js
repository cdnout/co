import{extend}from"../array.js";import{createOrUpdate}from"../extent.js";import{transformExtentWithOptions,transformGeometryWithOptions}from"./Feature.js";import GMLBase,{GMLNS}from"./GMLBase.js";import{readNonNegativeIntegerString,writeStringTextNode}from"./xsd.js";import GeometryLayout from"../geom/GeometryLayout.js";import LineString from"../geom/LineString.js";import MultiLineString from"../geom/MultiLineString.js";import MultiPolygon from"../geom/MultiPolygon.js";import Polygon from"../geom/Polygon.js";import{assign}from"../obj.js";import{get as getProjection}from"../proj.js";import{createElementNS,getAllTextContent,makeArrayPusher,makeChildAppender,makeReplacer,makeSimpleNodeFactory,OBJECT_PROPERTY_NODE_FACTORY,parseNode,pushParseAndPop,pushSerializeAndPop,XML_SCHEMA_INSTANCE_URI}from"../xml.js";const schemaLocation=GMLNS+" http://schemas.opengis.net/gml/3.1.1/profiles/gmlsfProfile/1.0.0/gmlsf.xsd",MULTIGEOMETRY_TO_MEMBER_NODENAME={MultiLineString:"lineStringMember",MultiCurve:"curveMember",MultiPolygon:"polygonMember",MultiSurface:"surfaceMember"};class GML3 extends GMLBase{constructor(e){e=e||{};super(e),this.surface_=void 0!==e.surface&&e.surface,this.curve_=void 0!==e.curve&&e.curve,this.multiCurve_=void 0===e.multiCurve||e.multiCurve,this.multiSurface_=void 0===e.multiSurface||e.multiSurface,this.schemaLocation=e.schemaLocation||schemaLocation,this.hasZ=void 0!==e.hasZ&&e.hasZ}readMultiCurve_(e,t){e=pushParseAndPop([],this.MULTICURVE_PARSERS_,e,t,this);if(e)return new MultiLineString(e)}readMultiSurface_(e,t){e=pushParseAndPop([],this.MULTISURFACE_PARSERS_,e,t,this);if(e)return new MultiPolygon(e)}curveMemberParser_(e,t){parseNode(this.CURVEMEMBER_PARSERS_,e,t,this)}surfaceMemberParser_(e,t){parseNode(this.SURFACEMEMBER_PARSERS_,e,t,this)}readPatch_(e,t){return pushParseAndPop([null],this.PATCHES_PARSERS_,e,t,this)}readSegment_(e,t){return pushParseAndPop([null],this.SEGMENTS_PARSERS_,e,t,this)}readPolygonPatch_(e,t){return pushParseAndPop([null],this.FLAT_LINEAR_RINGS_PARSERS,e,t,this)}readLineStringSegment_(e,t){return pushParseAndPop([null],this.GEOMETRY_FLAT_COORDINATES_PARSERS,e,t,this)}interiorParser_(e,t){e=pushParseAndPop(void 0,this.RING_PARSERS,e,t,this);if(e){const r=t[t.length-1];r.push(e)}}exteriorParser_(e,t){e=pushParseAndPop(void 0,this.RING_PARSERS,e,t,this);if(e){const r=t[t.length-1];r[0]=e}}readSurface_(e,t){var r=pushParseAndPop([null],this.SURFACE_PARSERS_,e,t,this);if(r&&r[0]){var i=r[0];const o=[i.length];let e,t;for(e=1,t=r.length;e<t;++e)extend(i,r[e]),o.push(i.length);return new Polygon(i,GeometryLayout.XYZ,o)}}readCurve_(e,t){e=pushParseAndPop([null],this.CURVE_PARSERS_,e,t,this);if(e)return new LineString(e,GeometryLayout.XYZ)}readEnvelope_(e,t){e=pushParseAndPop([null],this.ENVELOPE_PARSERS_,e,t,this);return createOrUpdate(e[1][0],e[1][1],e[2][0],e[2][1])}readFlatPos_(t,r){let e=getAllTextContent(t,!1);const i=/^\s*([+\-]?\d*\.?\d+(?:[eE][+\-]?\d+)?)\s*/,o=[];for(var n;n=i.exec(e);)o.push(parseFloat(n[1])),e=e.substr(n[0].length);if(""===e){t=r[0].srsName;let e="enu";if(t){const p=getProjection(t);e=p.getAxisOrientation()}if("neu"===e){let e,t;for(e=0,t=o.length;e<t;e+=3){var s=o[e],a=o[e+1];o[e]=a,o[e+1]=s}}r=o.length;if(2==r&&o.push(0),0!==r)return o}}readFlatPosList_(e,t){const r=getAllTextContent(e,!1).replace(/^\s*|\s*$/g,"");var t=t[0],i=t.srsName,t=t.srsDimension;let o="enu";if(i){const u=getProjection(i);o=u.getAxisOrientation()}var n,s,a,p=r.split(/\s+/);let l=2;e.getAttribute("srsDimension")?l=readNonNegativeIntegerString(e.getAttribute("srsDimension")):e.getAttribute("dimension")?l=readNonNegativeIntegerString(e.getAttribute("dimension")):e.parentNode.getAttribute("srsDimension")?l=readNonNegativeIntegerString(e.parentNode.getAttribute("srsDimension")):t&&(l=readNonNegativeIntegerString(t));const m=[];for(let e=0,t=p.length;e<t;e+=l)n=parseFloat(p[e]),s=parseFloat(p[e+1]),a=3===l?parseFloat(p[e+2]):0,"en"===o.substr(0,2)?m.push(n,s,a):m.push(s,n,a);return m}writePos_(e,t,r){var r=r[r.length-1],i=r.hasZ,r=(e.setAttribute("srsDimension",i?"3":"2"),r.srsName);let o="enu";r&&(o=getProjection(r).getAxisOrientation());r=t.getCoordinates();let n;n="en"===o.substr(0,2)?r[0]+" "+r[1]:r[1]+" "+r[0],i&&(t=r[2]||0,n+=" "+t),writeStringTextNode(e,n)}getCoords_(e,t,r){let i="enu",o="en"===(i=t?getProjection(t).getAxisOrientation():i).substr(0,2)?e[0]+" "+e[1]:e[1]+" "+e[0];return r&&(t=e[2]||0,o+=" "+t),o}writePosList_(e,t,r){var i,r=r[r.length-1],o=r.hasZ,n=(e.setAttribute("srsDimension",o?"3":"2"),r.srsName),s=t.getCoordinates(),a=s.length;const p=new Array(a);for(let e=0;e<a;++e)i=s[e],p[e]=this.getCoords_(i,n,o);writeStringTextNode(e,p.join(" "))}writePoint_(e,t,r){var i=r[r.length-1].srsName,i=(i&&e.setAttribute("srsName",i),createElementNS(e.namespaceURI,"pos"));e.appendChild(i),this.writePos_(i,t,r)}writeEnvelope(e,t,r){var i=r[r.length-1].srsName,i=(i&&e.setAttribute("srsName",i),[t[0]+" "+t[1],t[2]+" "+t[3]]);pushSerializeAndPop({node:e},this.ENVELOPE_SERIALIZERS_,OBJECT_PROPERTY_NODE_FACTORY,i,r,["lowerCorner","upperCorner"],this)}writeLinearRing_(e,t,r){var i=r[r.length-1].srsName,i=(i&&e.setAttribute("srsName",i),createElementNS(e.namespaceURI,"posList"));e.appendChild(i),this.writePosList_(i,t,r)}RING_NODE_FACTORY_(e,t,r){const i=t[t.length-1];var t=i.node,o=i.exteriorWritten;return void 0===o&&(i.exteriorWritten=!0),createElementNS(t.namespaceURI,void 0!==o?"interior":"exterior")}writeSurfaceOrPolygon_(e,t,r){var i,o=r[r.length-1],n=o.hasZ,o=o.srsName;"PolygonPatch"!==e.nodeName&&o&&e.setAttribute("srsName",o),"Polygon"===e.nodeName||"PolygonPatch"===e.nodeName?(i=t.getLinearRings(),pushSerializeAndPop({node:e,hasZ:n,srsName:o},this.RING_SERIALIZERS_,this.RING_NODE_FACTORY_,i,r,void 0,this)):"Surface"===e.nodeName&&(n=createElementNS(e.namespaceURI,"patches"),e.appendChild(n),this.writeSurfacePatches_(n,t,r))}writeCurveOrLineString_(e,t,r){var i=r[r.length-1].srsName;"LineStringSegment"!==e.nodeName&&i&&e.setAttribute("srsName",i),"LineString"===e.nodeName||"LineStringSegment"===e.nodeName?(i=createElementNS(e.namespaceURI,"posList"),e.appendChild(i),this.writePosList_(i,t,r)):"Curve"===e.nodeName&&(i=createElementNS(e.namespaceURI,"segments"),e.appendChild(i),this.writeCurveSegments_(i,t,r))}writeMultiSurfaceOrPolygon_(e,t,r){var i=r[r.length-1],o=i.hasZ,n=i.srsName,i=i.surface,t=(n&&e.setAttribute("srsName",n),t.getPolygons());pushSerializeAndPop({node:e,hasZ:o,srsName:n,surface:i},this.SURFACEORPOLYGONMEMBER_SERIALIZERS_,this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_,t,r,void 0,this)}writeMultiPoint_(e,t,r){var i=r[r.length-1],o=i.srsName,i=i.hasZ,t=(o&&e.setAttribute("srsName",o),t.getPoints());pushSerializeAndPop({node:e,hasZ:i,srsName:o},this.POINTMEMBER_SERIALIZERS_,makeSimpleNodeFactory("pointMember"),t,r,void 0,this)}writeMultiCurveOrLineString_(e,t,r){var i=r[r.length-1],o=i.hasZ,n=i.srsName,i=i.curve,t=(n&&e.setAttribute("srsName",n),t.getLineStrings());pushSerializeAndPop({node:e,hasZ:o,srsName:n,curve:i},this.LINESTRINGORCURVEMEMBER_SERIALIZERS_,this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_,t,r,void 0,this)}writeRing_(e,t,r){var i=createElementNS(e.namespaceURI,"LinearRing");e.appendChild(i),this.writeLinearRing_(i,t,r)}writeSurfaceOrPolygonMember_(e,t,r){var i=this.GEOMETRY_NODE_FACTORY_(t,r);i&&(e.appendChild(i),this.writeSurfaceOrPolygon_(i,t,r))}writePointMember_(e,t,r){var i=createElementNS(e.namespaceURI,"Point");e.appendChild(i),this.writePoint_(i,t,r)}writeLineStringOrCurveMember_(e,t,r){var i=this.GEOMETRY_NODE_FACTORY_(t,r);i&&(e.appendChild(i),this.writeCurveOrLineString_(i,t,r))}writeSurfacePatches_(e,t,r){var i=createElementNS(e.namespaceURI,"PolygonPatch");e.appendChild(i),this.writeSurfaceOrPolygon_(i,t,r)}writeCurveSegments_(e,t,r){var i=createElementNS(e.namespaceURI,"LineStringSegment");e.appendChild(i),this.writeCurveOrLineString_(i,t,r)}writeGeometryElement(e,t,r){var i=r[r.length-1];const o=assign({},i);o.node=e;let n;n=Array.isArray(t)?transformExtentWithOptions(t,i):transformGeometryWithOptions(t,!0,i),pushSerializeAndPop(o,this.GEOMETRY_SERIALIZERS_,this.GEOMETRY_NODE_FACTORY_,[n],r,void 0,this)}writeFeatureElement(e,t,r){var i=t.getId();i&&e.setAttribute("fid",i);const o=r[r.length-1];var n=o.featureNS,s=t.getGeometryName(),a=(o.serializers||(o.serializers={},o.serializers[n]={}),t.getProperties());const p=[],l=[];for(const h in a){var m=a[h];null!==m&&(p.push(h),l.push(m),h==s||"function"==typeof m.getSimplifiedGeometry?h in o.serializers[n]||(o.serializers[n][h]=makeChildAppender(this.writeGeometryElement,this)):h in o.serializers[n]||(o.serializers[n][h]=makeChildAppender(writeStringTextNode)))}const u=assign({},o);u.node=e,pushSerializeAndPop(u,o.serializers,makeSimpleNodeFactory(void 0,n),l,r,p)}writeFeatureMembers_(e,t,r){var i=r[r.length-1],o=i.featureType,n=i.featureNS;const s={},a=(s[n]={},s[n][o]=makeChildAppender(this.writeFeatureElement,this),assign({},i));a.node=e,pushSerializeAndPop(a,s,makeSimpleNodeFactory(o,n),t,r)}MULTIGEOMETRY_MEMBER_NODE_FACTORY_(e,t,r){t=t[t.length-1].node;return createElementNS(this.namespace,MULTIGEOMETRY_TO_MEMBER_NODENAME[t.nodeName])}GEOMETRY_NODE_FACTORY_(e,t,r){var t=t[t.length-1],i=t.multiSurface,o=t.surface,n=t.curve,t=t.multiCurve;let s;return Array.isArray(e)?s="Envelope":"MultiPolygon"===(s=e.getType())&&!0===i?s="MultiSurface":"Polygon"===s&&!0===o?s="Surface":"LineString"===s&&!0===n?s="Curve":"MultiLineString"===s&&!0===t&&(s="MultiCurve"),createElementNS(this.namespace,s)}writeGeometryNode(e,t){t=this.adaptOptions(t);var r=createElementNS(this.namespace,"geom"),i={node:r,hasZ:this.hasZ,srsName:this.srsName,curve:this.curve_,surface:this.surface_,multiSurface:this.multiSurface_,multiCurve:this.multiCurve_};return t&&assign(i,t),this.writeGeometryElement(r,e,[i]),r}writeFeaturesNode(e,t){t=this.adaptOptions(t);const r=createElementNS(this.namespace,"featureMembers");r.setAttributeNS(XML_SCHEMA_INSTANCE_URI,"xsi:schemaLocation",this.schemaLocation);var i={srsName:this.srsName,hasZ:this.hasZ,curve:this.curve_,surface:this.surface_,multiSurface:this.multiSurface_,multiCurve:this.multiCurve_,featureNS:this.featureNS,featureType:this.featureType};return t&&assign(i,t),this.writeFeatureMembers_(r,e,[i]),r}}GML3.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS={"http://www.opengis.net/gml":{pos:makeReplacer(GML3.prototype.readFlatPos_),posList:makeReplacer(GML3.prototype.readFlatPosList_)}},GML3.prototype.FLAT_LINEAR_RINGS_PARSERS={"http://www.opengis.net/gml":{interior:GML3.prototype.interiorParser_,exterior:GML3.prototype.exteriorParser_}},GML3.prototype.GEOMETRY_PARSERS={"http://www.opengis.net/gml":{Point:makeReplacer(GMLBase.prototype.readPoint),MultiPoint:makeReplacer(GMLBase.prototype.readMultiPoint),LineString:makeReplacer(GMLBase.prototype.readLineString),MultiLineString:makeReplacer(GMLBase.prototype.readMultiLineString),LinearRing:makeReplacer(GMLBase.prototype.readLinearRing),Polygon:makeReplacer(GMLBase.prototype.readPolygon),MultiPolygon:makeReplacer(GMLBase.prototype.readMultiPolygon),Surface:makeReplacer(GML3.prototype.readSurface_),MultiSurface:makeReplacer(GML3.prototype.readMultiSurface_),Curve:makeReplacer(GML3.prototype.readCurve_),MultiCurve:makeReplacer(GML3.prototype.readMultiCurve_),Envelope:makeReplacer(GML3.prototype.readEnvelope_)}},GML3.prototype.MULTICURVE_PARSERS_={"http://www.opengis.net/gml":{curveMember:makeArrayPusher(GML3.prototype.curveMemberParser_),curveMembers:makeArrayPusher(GML3.prototype.curveMemberParser_)}},GML3.prototype.MULTISURFACE_PARSERS_={"http://www.opengis.net/gml":{surfaceMember:makeArrayPusher(GML3.prototype.surfaceMemberParser_),surfaceMembers:makeArrayPusher(GML3.prototype.surfaceMemberParser_)}},GML3.prototype.CURVEMEMBER_PARSERS_={"http://www.opengis.net/gml":{LineString:makeArrayPusher(GMLBase.prototype.readLineString),Curve:makeArrayPusher(GML3.prototype.readCurve_)}},GML3.prototype.SURFACEMEMBER_PARSERS_={"http://www.opengis.net/gml":{Polygon:makeArrayPusher(GMLBase.prototype.readPolygon),Surface:makeArrayPusher(GML3.prototype.readSurface_)}},GML3.prototype.SURFACE_PARSERS_={"http://www.opengis.net/gml":{patches:makeReplacer(GML3.prototype.readPatch_)}},GML3.prototype.CURVE_PARSERS_={"http://www.opengis.net/gml":{segments:makeReplacer(GML3.prototype.readSegment_)}},GML3.prototype.ENVELOPE_PARSERS_={"http://www.opengis.net/gml":{lowerCorner:makeArrayPusher(GML3.prototype.readFlatPosList_),upperCorner:makeArrayPusher(GML3.prototype.readFlatPosList_)}},GML3.prototype.PATCHES_PARSERS_={"http://www.opengis.net/gml":{PolygonPatch:makeReplacer(GML3.prototype.readPolygonPatch_)}},GML3.prototype.SEGMENTS_PARSERS_={"http://www.opengis.net/gml":{LineStringSegment:makeReplacer(GML3.prototype.readLineStringSegment_)}},GML3.prototype.writeFeatures,GML3.prototype.RING_SERIALIZERS_={"http://www.opengis.net/gml":{exterior:makeChildAppender(GML3.prototype.writeRing_),interior:makeChildAppender(GML3.prototype.writeRing_)}},GML3.prototype.ENVELOPE_SERIALIZERS_={"http://www.opengis.net/gml":{lowerCorner:makeChildAppender(writeStringTextNode),upperCorner:makeChildAppender(writeStringTextNode)}},GML3.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS_={"http://www.opengis.net/gml":{surfaceMember:makeChildAppender(GML3.prototype.writeSurfaceOrPolygonMember_),polygonMember:makeChildAppender(GML3.prototype.writeSurfaceOrPolygonMember_)}},GML3.prototype.POINTMEMBER_SERIALIZERS_={"http://www.opengis.net/gml":{pointMember:makeChildAppender(GML3.prototype.writePointMember_)}},GML3.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS_={"http://www.opengis.net/gml":{lineStringMember:makeChildAppender(GML3.prototype.writeLineStringOrCurveMember_),curveMember:makeChildAppender(GML3.prototype.writeLineStringOrCurveMember_)}},GML3.prototype.GEOMETRY_SERIALIZERS_={"http://www.opengis.net/gml":{Curve:makeChildAppender(GML3.prototype.writeCurveOrLineString_),MultiCurve:makeChildAppender(GML3.prototype.writeMultiCurveOrLineString_),Point:makeChildAppender(GML3.prototype.writePoint_),MultiPoint:makeChildAppender(GML3.prototype.writeMultiPoint_),LineString:makeChildAppender(GML3.prototype.writeCurveOrLineString_),MultiLineString:makeChildAppender(GML3.prototype.writeMultiCurveOrLineString_),LinearRing:makeChildAppender(GML3.prototype.writeLinearRing_),Polygon:makeChildAppender(GML3.prototype.writeSurfaceOrPolygon_),MultiPolygon:makeChildAppender(GML3.prototype.writeMultiSurfaceOrPolygon_),Surface:makeChildAppender(GML3.prototype.writeSurfaceOrPolygon_),MultiSurface:makeChildAppender(GML3.prototype.writeMultiSurfaceOrPolygon_),Envelope:makeChildAppender(GML3.prototype.writeEnvelope)}};export default GML3;