import{extend}from"../array.js";import Feature from"../Feature.js";import{transformGeometryWithOptions,transformExtentWithOptions}from"./Feature.js";import XMLFeature from"./XMLFeature.js";import GeometryLayout from"../geom/GeometryLayout.js";import LineString from"../geom/LineString.js";import LinearRing from"../geom/LinearRing.js";import MultiLineString from"../geom/MultiLineString.js";import MultiPoint from"../geom/MultiPoint.js";import MultiPolygon from"../geom/MultiPolygon.js";import Point from"../geom/Point.js";import Polygon from"../geom/Polygon.js";import{assign}from"../obj.js";import{get as getProjection}from"../proj.js";import{getAllTextContent,getAttributeNS,makeArrayPusher,makeReplacer,parseNode,pushParseAndPop}from"../xml.js";const GMLNS="http://www.opengis.net/gml",ONLY_WHITESPACE_RE=/^[\s\xa0]*$/;class GMLBase extends XMLFeature{constructor(e){super();e=e||{};this.featureType=e.featureType,this.featureNS=e.featureNS,this.srsName=e.srsName,this.schemaLocation="",this.FEATURE_COLLECTION_PARSERS={},this.FEATURE_COLLECTION_PARSERS[this.namespace]={featureMember:makeArrayPusher(this.readFeaturesInternal),featureMembers:makeReplacer(this.readFeaturesInternal)}}readFeaturesInternal(n,e){var s=n.localName;let t=null;if("FeatureCollection"==s)t=pushParseAndPop([],this.FEATURE_COLLECTION_PARSERS,n,e,this);else if("featureMembers"==s||"featureMember"==s){const m=e[0];let r=m.featureType,o=m.featureNS;var a;if(!r&&n.childNodes){r=[],o={};for(let e=0,t=n.childNodes.length;e<t;++e){const h=n.childNodes[e];if(1===h.nodeType){var i=h.nodeName.split(":").pop();if(-1===r.indexOf(i)){let e="",t=0;var p=h.namespaceURI;for(const P in o){if(o[P]===p){e=P;break}++t}e||(e="p"+t,o[e]=p),r.push(e+":"+i)}}}"featureMember"!=s&&(m.featureType=r,m.featureNS=o)}"string"==typeof o&&(a=o,(o={}).p0=a);const l={},u=Array.isArray(r)?r:[r];for(const d in o){const g={};for(let e=0,t=u.length;e<t;++e)(-1===u[e].indexOf(":")?"p0":u[e].split(":")[0])===d&&(g[u[e].split(":").pop()]=("featureMembers"==s?makeArrayPusher:makeReplacer)(this.readFeatureElement,this));l[o[d]]=g}t=pushParseAndPop("featureMember"==s?void 0:[],l,n,e)}return t=null===t?[]:t}readGeometryElement(e,t){const r=t[0];r.srsName=e.firstElementChild.getAttribute("srsName"),r.srsDimension=e.firstElementChild.getAttribute("srsDimension");e=pushParseAndPop(null,this.GEOMETRY_PARSERS,e,t,this);if(e)return Array.isArray(e)?transformExtentWithOptions(e,r):transformGeometryWithOptions(e,!1,r)}readFeatureElementInternal(e,r,o){let n;const s={};for(let t=e.firstElementChild;t;t=t.nextElementSibling){let e;var a=t.localName,i=(0===t.childNodes.length||1===t.childNodes.length&&(3===t.firstChild.nodeType||4===t.firstChild.nodeType)?(e=getAllTextContent(t,!1),ONLY_WHITESPACE_RE.test(e)&&(e=void 0)):(e=o?this.readGeometryElement(t,r):e)?"boundedBy"!==a&&(n=a):e=this.readFeatureElementInternal(t,r,!1),s[a]?(s[a]instanceof Array||(s[a]=[s[a]]),s[a].push(e)):s[a]=e,t.attributes.length);if(0<i){s[a]={_content_:s[a]};for(let e=0;e<i;e++){var p=t.attributes[e].name;s[a][p]=t.attributes[e].value}}}if(o){const t=new Feature(s);n&&t.setGeometryName(n);e=e.getAttribute("fid")||getAttributeNS(e,this.namespace,"id");return e&&t.setId(e),t}return s}readFeatureElement(e,t){return this.readFeatureElementInternal(e,t,!0)}readPoint(e,t){e=this.readFlatCoordinatesFromNode_(e,t);if(e)return new Point(e,GeometryLayout.XYZ)}readMultiPoint(e,t){e=pushParseAndPop([],this.MULTIPOINT_PARSERS_,e,t,this);if(e)return new MultiPoint(e)}readMultiLineString(e,t){e=pushParseAndPop([],this.MULTILINESTRING_PARSERS_,e,t,this);if(e)return new MultiLineString(e)}readMultiPolygon(e,t){e=pushParseAndPop([],this.MULTIPOLYGON_PARSERS_,e,t,this);if(e)return new MultiPolygon(e)}pointMemberParser_(e,t){parseNode(this.POINTMEMBER_PARSERS_,e,t,this)}lineStringMemberParser_(e,t){parseNode(this.LINESTRINGMEMBER_PARSERS_,e,t,this)}polygonMemberParser_(e,t){parseNode(this.POLYGONMEMBER_PARSERS_,e,t,this)}readLineString(e,t){e=this.readFlatCoordinatesFromNode_(e,t);if(e)return new LineString(e,GeometryLayout.XYZ)}readFlatLinearRing_(e,t){e=pushParseAndPop(null,this.GEOMETRY_FLAT_COORDINATES_PARSERS,e,t,this);if(e)return e}readLinearRing(e,t){e=this.readFlatCoordinatesFromNode_(e,t);if(e)return new LinearRing(e,GeometryLayout.XYZ)}readPolygon(e,t){var r=pushParseAndPop([null],this.FLAT_LINEAR_RINGS_PARSERS,e,t,this);if(r&&r[0]){var o=r[0];const n=[o.length];let e,t;for(e=1,t=r.length;e<t;++e)extend(o,r[e]),n.push(o.length);return new Polygon(o,GeometryLayout.XYZ,n)}}readFlatCoordinatesFromNode_(e,t){return pushParseAndPop(null,this.GEOMETRY_FLAT_COORDINATES_PARSERS,e,t,this)}readGeometryFromNode(e,t){e=this.readGeometryElement(e,[this.getReadOptions(e,t||{})]);return e||null}readFeaturesFromNode(e,t){var r={featureType:this.featureType,featureNS:this.featureNS},t=(t&&assign(r,this.getReadOptions(e,t)),this.readFeaturesInternal(e,[r]));return t||[]}readProjectionFromNode(e){return getProjection(this.srsName||e.firstElementChild.getAttribute("srsName"))}}GMLBase.prototype.namespace=GMLNS,GMLBase.prototype.FLAT_LINEAR_RINGS_PARSERS={"http://www.opengis.net/gml":{}},GMLBase.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS={"http://www.opengis.net/gml":{}},GMLBase.prototype.GEOMETRY_PARSERS={"http://www.opengis.net/gml":{}},GMLBase.prototype.MULTIPOINT_PARSERS_={"http://www.opengis.net/gml":{pointMember:makeArrayPusher(GMLBase.prototype.pointMemberParser_),pointMembers:makeArrayPusher(GMLBase.prototype.pointMemberParser_)}},GMLBase.prototype.MULTILINESTRING_PARSERS_={"http://www.opengis.net/gml":{lineStringMember:makeArrayPusher(GMLBase.prototype.lineStringMemberParser_),lineStringMembers:makeArrayPusher(GMLBase.prototype.lineStringMemberParser_)}},GMLBase.prototype.MULTIPOLYGON_PARSERS_={"http://www.opengis.net/gml":{polygonMember:makeArrayPusher(GMLBase.prototype.polygonMemberParser_),polygonMembers:makeArrayPusher(GMLBase.prototype.polygonMemberParser_)}},GMLBase.prototype.POINTMEMBER_PARSERS_={"http://www.opengis.net/gml":{Point:makeArrayPusher(GMLBase.prototype.readFlatCoordinatesFromNode_)}},GMLBase.prototype.LINESTRINGMEMBER_PARSERS_={"http://www.opengis.net/gml":{LineString:makeArrayPusher(GMLBase.prototype.readLineString)}},GMLBase.prototype.POLYGONMEMBER_PARSERS_={"http://www.opengis.net/gml":{Polygon:makeArrayPusher(GMLBase.prototype.readPolygon)}},GMLBase.prototype.RING_PARSERS={"http://www.opengis.net/gml":{LinearRing:makeReplacer(GMLBase.prototype.readFlatLinearRing_)}};export default GMLBase;export{GMLNS};