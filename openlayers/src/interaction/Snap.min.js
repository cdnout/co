import{getUid}from"../util.js";import CollectionEventType from"../CollectionEventType.js";import{distance as coordinateDistance,squaredDistance as squaredCoordinateDistance,closestOnCircle,closestOnSegment,squaredDistanceToSegment}from"../coordinate.js";import{listen,unlistenByKey}from"../events.js";import EventType from"../events/EventType.js";import{boundingExtent,createEmpty}from"../extent.js";import{TRUE,FALSE}from"../functions.js";import GeometryType from"../geom/GeometryType.js";import{fromCircle}from"../geom/Polygon.js";import PointerInteraction from"./Pointer.js";import{getValues}from"../obj.js";import VectorEventType from"../source/VectorEventType.js";import RBush from"../structs/RBush.js";function getFeatureFromEvent(e){return e.feature||e.element||void 0}class Snap extends PointerInteraction{constructor(e){e=e||{};const t=e;t.handleDownEvent||(t.handleDownEvent=TRUE),t.stopDown||(t.stopDown=FALSE),super(t),this.source_=e.source||null,this.vertex_=void 0===e.vertex||e.vertex,this.edge_=void 0===e.edge||e.edge,this.features_=e.features||null,this.featuresListenerKeys_=[],this.featureChangeListenerKeys_={},this.indexedFeaturesExtents_={},this.pendingFeatures_={},this.pixelCoordinate_=null,this.pixelTolerance_=void 0!==e.pixelTolerance?e.pixelTolerance:10,this.sortByDistance_=sortByDistance.bind(this),this.rBush_=new RBush,this.SEGMENT_WRITERS_={Point:this.writePointGeometry_,LineString:this.writeLineStringGeometry_,LinearRing:this.writeLineStringGeometry_,Polygon:this.writePolygonGeometry_,MultiPoint:this.writeMultiPointGeometry_,MultiLineString:this.writeMultiLineStringGeometry_,MultiPolygon:this.writeMultiPolygonGeometry_,GeometryCollection:this.writeGeometryCollectionGeometry_,Circle:this.writeCircleGeometry_}}addFeature(e,t){var t=void 0===t||t,r=getUid(e);const i=e.getGeometry();if(i){const n=this.SEGMENT_WRITERS_[i.getType()];n&&(this.indexedFeaturesExtents_[r]=i.getExtent(createEmpty()),n.call(this,e,i))}t&&(this.featureChangeListenerKeys_[r]=listen(e,EventType.CHANGE,this.handleFeatureChange_,this))}forEachFeatureAdd_(e){this.addFeature(e)}forEachFeatureRemove_(e){this.removeFeature(e)}getFeatures_(){let e;return this.features_?e=this.features_:this.source_&&(e=this.source_.getFeatures()),e}handleEvent(e){const t=this.snapTo(e.pixel,e.coordinate,e.map);return t.snapped&&(e.coordinate=t.vertex.slice(0,2),e.pixel=t.vertexPixel),super.handleEvent(e)}handleFeatureAdd_(e){e=getFeatureFromEvent(e);this.addFeature(e)}handleFeatureRemove_(e){e=getFeatureFromEvent(e);this.removeFeature(e)}handleFeatureChange_(e){var t,e=e.target;this.handlingDownUpSequence?(t=getUid(e))in this.pendingFeatures_||(this.pendingFeatures_[t]=e):this.updateFeature_(e)}handleUpEvent(e){const t=getValues(this.pendingFeatures_);return t.length&&(t.forEach(this.updateFeature_.bind(this)),this.pendingFeatures_={}),!1}removeFeature(t,e){var e=void 0===e||e,r=getUid(t),i=this.indexedFeaturesExtents_[r];if(i){const n=this.rBush_,s=[];n.forEachInExtent(i,function(e){t===e.feature&&s.push(e)});for(let e=s.length-1;0<=e;--e)n.remove(s[e])}e&&(unlistenByKey(this.featureChangeListenerKeys_[r]),delete this.featureChangeListenerKeys_[r])}setMap(e){var t=this.getMap();const r=this.featuresListenerKeys_,i=this.getFeatures_();t&&(r.forEach(unlistenByKey),r.length=0,i.forEach(this.forEachFeatureRemove_.bind(this))),super.setMap(e),e&&(this.features_?r.push(listen(this.features_,CollectionEventType.ADD,this.handleFeatureAdd_,this),listen(this.features_,CollectionEventType.REMOVE,this.handleFeatureRemove_,this)):this.source_&&r.push(listen(this.source_,VectorEventType.ADDFEATURE,this.handleFeatureAdd_,this),listen(this.source_,VectorEventType.REMOVEFEATURE,this.handleFeatureRemove_,this)),i.forEach(this.forEachFeatureAdd_.bind(this)))}snapTo(e,t,r){var i=r.getCoordinateFromPixel([e[0]-this.pixelTolerance_,e[1]+this.pixelTolerance_]),n=r.getCoordinateFromPixel([e[0]+this.pixelTolerance_,e[1]-this.pixelTolerance_]),i=boundingExtent([i,n]);let s=this.rBush_.getInExtent(i),o=!1,a=!1,h=null,l=null,u,d,g,c,m;return 0<(s=this.vertex_&&!this.edge_?s.filter(function(e){return e.feature.getGeometry().getType()!==GeometryType.CIRCLE}):s).length&&(this.pixelCoordinate_=t,s.sort(this.sortByDistance_),n=s[0].segment,i=s[0].feature.getGeometry().getType()===GeometryType.CIRCLE,this.vertex_&&!this.edge_?(d=r.getPixelFromCoordinate(n[0]),g=r.getPixelFromCoordinate(n[1]),c=squaredCoordinateDistance(e,d),m=squaredCoordinateDistance(e,g),u=Math.sqrt(Math.min(c,m)),(o=u<=this.pixelTolerance_)&&(a=!0,h=c>m?n[1]:n[0],l=r.getPixelFromCoordinate(h))):this.edge_&&(h=i?closestOnCircle(t,s[0].feature.getGeometry()):closestOnSegment(t,n),l=r.getPixelFromCoordinate(h),coordinateDistance(e,l)<=this.pixelTolerance_&&(a=!0,this.vertex_&&!i&&(d=r.getPixelFromCoordinate(n[0]),g=r.getPixelFromCoordinate(n[1]),c=squaredCoordinateDistance(l,d),m=squaredCoordinateDistance(l,g),u=Math.sqrt(Math.min(c,m)),(o=u<=this.pixelTolerance_)&&(h=c>m?n[1]:n[0],l=r.getPixelFromCoordinate(h))))),a&&(l=[Math.round(l[0]),Math.round(l[1])])),{snapped:a,vertex:h,vertexPixel:l}}updateFeature_(e){this.removeFeature(e,!1),this.addFeature(e,!1)}writeCircleGeometry_(r,e){const t=fromCircle(e),i=t.getCoordinates()[0];for(let e=0,t=i.length-1;e<t;++e){var n=i.slice(e,e+2),s={feature:r,segment:n};this.rBush_.insert(boundingExtent(n),s)}}writeGeometryCollectionGeometry_(t,e){const r=e.getGeometriesArray();for(let e=0;e<r.length;++e){const i=this.SEGMENT_WRITERS_[r[e].getType()];i&&i.call(this,t,r[e])}}writeLineStringGeometry_(r,e){const i=e.getCoordinates();for(let e=0,t=i.length-1;e<t;++e){var n=i.slice(e,e+2),s={feature:r,segment:n};this.rBush_.insert(boundingExtent(n),s)}}writeMultiLineStringGeometry_(r,e){var i=e.getCoordinates();for(let e=0,t=i.length;e<t;++e){const o=i[e];for(let e=0,t=o.length-1;e<t;++e){var n=o.slice(e,e+2),s={feature:r,segment:n};this.rBush_.insert(boundingExtent(n),s)}}}writeMultiPointGeometry_(r,i){var n=i.getCoordinates();for(let e=0,t=n.length;e<t;++e){var s=n[e],s={feature:r,segment:[s,s]};this.rBush_.insert(i.getExtent(),s)}}writeMultiPolygonGeometry_(r,e){var i=e.getCoordinates();for(let e=0,t=i.length;e<t;++e){var n=i[e];for(let e=0,t=n.length;e<t;++e){const a=n[e];for(let e=0,t=a.length-1;e<t;++e){var s=a.slice(e,e+2),o={feature:r,segment:s};this.rBush_.insert(boundingExtent(s),o)}}}}writePointGeometry_(e,t){var r=t.getCoordinates(),e={feature:e,segment:[r,r]};this.rBush_.insert(t.getExtent(),e)}writePolygonGeometry_(r,e){var i=e.getCoordinates();for(let e=0,t=i.length;e<t;++e){const o=i[e];for(let e=0,t=o.length-1;e<t;++e){var n=o.slice(e,e+2),s={feature:r,segment:n};this.rBush_.insert(boundingExtent(n),s)}}}}function sortByDistance(e,t){return squaredDistanceToSegment(this.pixelCoordinate_,e.segment)-squaredDistanceToSegment(this.pixelCoordinate_,t.segment)}export default Snap;