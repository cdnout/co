import Event from"../events/Event.js";import{always,mouseOnly,mouseActionButton}from"../events/condition.js";import{VOID}from"../functions.js";import PointerInteraction from"./Pointer.js";import RenderBox from"../render/Box.js";const DragBoxEventType={BOXSTART:"boxstart",BOXDRAG:"boxdrag",BOXEND:"boxend"};class DragBoxEvent extends Event{constructor(t,o,n){super(t),this.coordinate=o,this.mapBrowserEvent=n}}class DragBox extends PointerInteraction{constructor(t){super();t=t||{};this.box_=new RenderBox(t.className||"ol-dragbox"),this.minArea_=void 0!==t.minArea?t.minArea:64,this.onBoxEnd_=t.onBoxEnd||VOID,this.startPixel_=null,this.condition_=t.condition||always,this.boxEndCondition_=t.boxEndCondition||this.defaultBoxEndCondition}defaultBoxEndCondition(t,o,n){var e=n[0]-o[0],n=n[1]-o[1];return e*e+n*n>=this.minArea_}getGeometry(){return this.box_.getGeometry()}handleDragEvent(t){mouseOnly(t)&&(this.box_.setPixels(this.startPixel_,t.pixel),this.dispatchEvent(new DragBoxEvent(DragBoxEventType.BOXDRAG,t.coordinate,t)))}handleUpEvent(t){return!mouseOnly(t)||(this.box_.setMap(null),this.boxEndCondition_(t,this.startPixel_,t.pixel)&&(this.onBoxEnd_(t),this.dispatchEvent(new DragBoxEvent(DragBoxEventType.BOXEND,t.coordinate,t))),!1)}handleDownEvent(t){return!!mouseOnly(t)&&(!(!mouseActionButton(t)||!this.condition_(t))&&(this.startPixel_=t.pixel,this.box_.setMap(t.map),this.box_.setPixels(this.startPixel_,this.startPixel_),this.dispatchEvent(new DragBoxEvent(DragBoxEventType.BOXSTART,t.coordinate,t)),!0))}}export default DragBox;