import{scale as scaleCoordinate,rotate as rotateCoordinate}from"../coordinate.js";import{easeOut}from"../easing.js";import{noModifierKeys,primaryAction}from"../events/condition.js";import{FALSE}from"../functions.js";import PointerInteraction,{centroid as centroidFromPointers}from"./Pointer.js";class DragPan extends PointerInteraction{constructor(t){super({stopDown:FALSE});t=t||{};this.kinetic_=t.kinetic,this.lastCentroid=null,this.lastPointersCount_,this.panning_=!1,this.condition_=t.condition||defaultCondition,this.noKinetic_=!1}handleDragEvent(t){this.panning_||(this.panning_=!0,this.getMap().getView().beginInteraction());var i=this.targetPointers,n=centroidFromPointers(i);if(i.length==this.lastPointersCount_){if(this.kinetic_&&this.kinetic_.update(n[0],n[1]),this.lastCentroid){var e=[this.lastCentroid[0]-n[0],n[1]-this.lastCentroid[1]];const o=t.map,s=o.getView();scaleCoordinate(e,s.getResolution()),rotateCoordinate(e,s.getRotation()),s.adjustCenterInternal(e)}}else this.kinetic_&&this.kinetic_.begin();this.lastCentroid=n,this.lastPointersCount_=i.length}handleUpEvent(t){const i=t.map,n=i.getView();var e,o;return 0===this.targetPointers.length?(!this.noKinetic_&&this.kinetic_&&this.kinetic_.end()&&(t=this.kinetic_.getDistance(),e=this.kinetic_.getAngle(),o=n.getCenterInternal(),o=i.getPixelFromCoordinate(o),o=i.getCoordinateFromPixel([o[0]-t*Math.cos(e),o[1]-t*Math.sin(e)]),n.animateInternal({center:n.getConstrainedCenter(o),duration:500,easing:easeOut})),this.panning_&&(this.panning_=!1,n.endInteraction()),!1):(this.kinetic_&&this.kinetic_.begin(),!(this.lastCentroid=null))}handleDownEvent(t){if(0<this.targetPointers.length&&this.condition_(t)){const i=t.map,n=i.getView();return this.lastCentroid=null,n.getAnimating()&&n.cancelAnimations(),this.kinetic_&&this.kinetic_.begin(),this.noKinetic_=1<this.targetPointers.length,!0}return!1}}function defaultCondition(t){return noModifierKeys(t)&&primaryAction(t)}export default DragPan;