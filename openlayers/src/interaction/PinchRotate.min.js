import{FALSE}from"../functions.js";import PointerInteraction,{centroid as centroidFromPointers}from"./Pointer.js";import{disable}from"../rotationconstraint.js";class PinchRotate extends PointerInteraction{constructor(t){t=t||{};const n=t;n.stopDown||(n.stopDown=FALSE),super(n),this.anchor_=null,this.lastAngle_=void 0,this.rotating_=!1,this.rotationDelta_=0,this.threshold_=void 0!==t.threshold?t.threshold:.3,this.duration_=void 0!==t.duration?t.duration:250}handleDragEvent(t){let n=0;var i=this.targetPointers[0],o=this.targetPointers[1],o=Math.atan2(o.clientY-i.clientY,o.clientX-i.clientX);void 0!==this.lastAngle_&&(i=o-this.lastAngle_,this.rotationDelta_+=i,!this.rotating_&&Math.abs(this.rotationDelta_)>this.threshold_&&(this.rotating_=!0),n=i),this.lastAngle_=o;const e=t.map,r=e.getView();if(r.getConstraints().rotation!==disable){i=e.getViewport().getBoundingClientRect();const s=centroidFromPointers(this.targetPointers);s[0]-=i.left,s[1]-=i.top,this.anchor_=e.getCoordinateFromPixel(s),this.rotating_&&(e.render(),r.adjustRotationInternal(n,this.anchor_))}}handleUpEvent(t){if(this.targetPointers.length<2){const n=t.map,i=n.getView();return i.endInteraction(this.duration_),!1}return!0}handleDownEvent(t){if(2<=this.targetPointers.length){const n=t.map;return this.anchor_=null,this.lastAngle_=void 0,this.rotating_=!1,this.rotationDelta_=0,this.handlingDownUpSequence||n.getView().beginInteraction(),!0}return!1}}export default PinchRotate;