import{createCanvasContext2D}from"./dom.js";import{containsCoordinate,createEmpty,extend,getHeight,getTopLeft,getWidth}from"./extent.js";import{solveLinearSystem}from"./math.js";import{getPointResolution,transform}from"./proj.js";function calculateSourceResolution(t,e,n,o){var r=transform(n,e,t);let a=getPointResolution(e,o,n);var o=e.getMetersPerUnit(),n=(void 0!==o&&(a*=o),t.getMetersPerUnit()),e=(void 0!==n&&(a/=n),t.getExtent());return e&&!containsCoordinate(e,r)||(o=getPointResolution(t,a,r)/a,isFinite(o)&&0<o&&(a/=o)),a}function enlargeClipPoint(t,e,n,o){var t=n-t,e=o-e,r=Math.sqrt(t*t+e*e);return[Math.round(n+t/r),Math.round(o+e/r)]}function render(t,e,d,f,n,v,o,r,a,s,i){const p=createCanvasContext2D(Math.round(d*t),Math.round(d*e));if(0===a.length)return p.canvas;p.scale(d,d);const x=createEmpty();a.forEach(function(t,e,n){extend(x,t.extent)});t=getWidth(x),e=getHeight(x);const C=createCanvasContext2D(Math.round(d*t/f),Math.round(d*e/f)),c=d/f,P=(a.forEach(function(t,e,n){var o=t.extent[0]-x[0],r=-(t.extent[3]-x[3]),a=getWidth(t.extent),i=getHeight(t.extent);C.drawImage(t.image,s,s,t.image.width-2*s,t.image.height-2*s,o*c,r*c,a*c,i*c)}),getTopLeft(o));return r.getTriangles().forEach(function(t,e,n){var o=t.source,t=t.target,r=o[0][0],a=o[0][1],i=o[1][0],s=o[1][1],c=o[2][0],o=o[2][1],g=(t[0][0]-P[0])/v,l=-(t[0][1]-P[1])/v,u=(t[1][0]-P[0])/v,h=-(t[1][1]-P[1])/v,m=(t[2][0]-P[0])/v,t=-(t[2][1]-P[1])/v,i=[[i-=r,s-=a,0,0,u-g],[c-=r,o-=a,0,0,m-g],[0,0,i,s,h-l],[0,0,c,o,t-l]],s=solveLinearSystem(i);s&&(p.save(),p.beginPath(),i=enlargeClipPoint(c=(g+u+m)/3,o=(l+h+t)/3,g,l),u=enlargeClipPoint(c,o,u,h),h=enlargeClipPoint(c,o,m,t),p.moveTo(u[0],u[1]),p.lineTo(i[0],i[1]),p.lineTo(h[0],h[1]),p.clip(),p.transform(s[0],s[2],s[1],s[3],g,l),p.translate(x[0]-r,x[3]-a),p.scale(f/d,-f/d),p.drawImage(C.canvas,0,0),p.restore())}),i&&(p.save(),p.strokeStyle="black",p.lineWidth=1,r.getTriangles().forEach(function(t,e,n){var t=t.target,o=(t[0][0]-P[0])/v,r=-(t[0][1]-P[1])/v,a=(t[1][0]-P[0])/v,i=-(t[1][1]-P[1])/v,s=(t[2][0]-P[0])/v,t=-(t[2][1]-P[1])/v;p.beginPath(),p.moveTo(a,i),p.lineTo(o,r),p.lineTo(s,t),p.closePath(),p.stroke()}),p.restore()),p.canvas}export{calculateSourceResolution,render};