import{numberSafeCompareFunction}from"../../array.js";import{createCanvasContext2D}from"../../dom.js";import{buffer,createEmpty,extendCoordinate}from"../../extent.js";import{transform2D}from"../../geom/flat/transform.js";import{isEmpty}from"../../obj.js";import BuilderType from"./BuilderType.js";import{create as createTransform,compose as composeTransform}from"../../transform.js";import Executor from"./Executor.js";import Disposable from"../../Disposable.js";const ORDER=[BuilderType.POLYGON,BuilderType.CIRCLE,BuilderType.LINE_STRING,BuilderType.IMAGE,BuilderType.TEXT,BuilderType.DEFAULT];class ExecutorGroup extends Disposable{constructor(e,t,r,o,i,n){super(),this.maxExtent_=e,this.overlaps_=o,this.pixelRatio_=r,this.resolution_=t,this.renderBuffer_=n,this.executorsByZIndex_={},this.hitDetectionContext_=null,this.hitDetectionTransform_=createTransform(),this.createExecutors_(i)}clip(e,t){t=this.getClipCoords(t);e.beginPath(),e.moveTo(t[0],t[1]),e.lineTo(t[2],t[3]),e.lineTo(t[4],t[5]),e.lineTo(t[6],t[7]),e.clip()}createExecutors_(t){for(const i in t){let e=this.executorsByZIndex_[i];void 0===e&&(this.executorsByZIndex_[i]=e={});var r=t[i];for(const n in r){var o=r[n];e[n]=new Executor(this.resolution_,this.pixelRatio_,this.overlaps_,o)}}}disposeInternal(){for(const e in this.executorsByZIndex_){const t=this.executorsByZIndex_[e];for(const r in t)t[r].disposeInternal()}if(this.hitDetectionContext_){const o=this.hitDetectionContext_.canvas;o.width=o.height=0}super.disposeInternal()}hasExecutors(r){for(const e in this.executorsByZIndex_){var o=this.executorsByZIndex_[e];for(let e=0,t=r.length;e<t;++e)if(r[e]in o)return!0}return!1}forEachFeatureAtCoordinate(e,t,r,o,i,n){const s=2*(o=Math.round(o))+1;var a=composeTransform(this.hitDetectionTransform_,o+.5,o+.5,1/t,-1/t,-r,-e[0],-e[1]);this.hitDetectionContext_||(this.hitDetectionContext_=createCanvasContext2D(s,s));const c=this.hitDetectionContext_;c.canvas.width!==s||c.canvas.height!==s?(c.canvas.width=s,c.canvas.height=s):c.clearRect(0,0,s,s);let l;void 0!==this.renderBuffer_&&(l=createEmpty(),extendCoordinate(l,e),buffer(l,t*(this.renderBuffer_+o),l));const u=getCircleArray(o);let f;function h(r){var o=c.getImageData(0,0,s,s).data;for(let t=0;t<s;t++)for(let e=0;e<s;e++)if(u[t][e]&&0<o[4*(e*s+t)+3]){let e;return(e=n&&(f==BuilderType.IMAGE||f==BuilderType.TEXT)&&-1===n.indexOf(r)?e:i(r))||void c.clearRect(0,0,s,s)}}const d=Object.keys(this.executorsByZIndex_).map(Number);d.sort(numberSafeCompareFunction);let p,x,m,y,C;for(p=d.length-1;0<=p;--p){var T=d[p].toString();for(m=this.executorsByZIndex_[T],x=ORDER.length-1;0<=x;--x)if(f=ORDER[x],void 0!==(y=m[f])&&(C=y.executeHitDetection(c,a,r,h,l)))return C}}getClipCoords(e){var t=this.maxExtent_;if(!t)return null;var r=t[0],o=t[1],i=t[2],t=t[3],r=[r,o,r,t,i,t,i,o];return transform2D(r,0,8,2,e,r),r}isEmpty(){return isEmpty(this.executorsByZIndex_)}execute(e,t,r,o,i,n){const s=Object.keys(this.executorsByZIndex_).map(Number);s.sort(numberSafeCompareFunction),this.maxExtent_&&(e.save(),this.clip(e,t));var a=i||ORDER;let c,l,u,f,h,d;for(c=0,l=s.length;c<l;++c){var p=s[c].toString();for(h=this.executorsByZIndex_[p],u=0,f=a.length;u<f;++u){var x=a[u];if(void 0!==(d=h[x]))if(!n||x!=BuilderType.IMAGE&&x!=BuilderType.TEXT)d.execute(e,t,r,o);else{const m=n[p];m?m.push(d,t.slice(0)):n[p]=[d,t.slice(0)]}}}this.maxExtent_&&e.restore()}}const circleArrayCache={0:[[!0]]};function fillCircleArrayRowToMiddle(e,t,r){let o;var i=Math.floor(e.length/2);if(i<=t)for(o=i;o<t;o++)e[o][r]=!0;else if(t<i)for(o=t+1;o<i;o++)e[o][r]=!0}function getCircleArray(e){if(void 0!==circleArrayCache[e])return circleArrayCache[e];var t=2*e+1;const r=new Array(t);for(let e=0;e<t;e++)r[e]=new Array(t);let o=e,i=0,n=0;for(;o>=i;)fillCircleArrayRowToMiddle(r,e+o,e+i),fillCircleArrayRowToMiddle(r,e+i,e+o),fillCircleArrayRowToMiddle(r,e-i,e+o),fillCircleArrayRowToMiddle(r,e-o,e+i),fillCircleArrayRowToMiddle(r,e-o,e-i),fillCircleArrayRowToMiddle(r,e-i,e-o),fillCircleArrayRowToMiddle(r,e+i,e-o),fillCircleArrayRowToMiddle(r,e+o,e-i),i++,0<2*((n+=1+2*i)-o)+1&&(--o,n+=1-2*o);return circleArrayCache[e]=r}function replayDeclutter(o,i,n,s,a,c){const l=Object.keys(o).map(Number).sort(numberSafeCompareFunction);for(let e=0,t=l.length;e<t;++e){var u=o[l[e].toString()];let r;for(let e=0,t=u.length;e<t;){const h=u[e++];h!==r&&(r=h,c.push({items:h.declutterItems,opacity:s}));var f=u[e++];h.execute(i,f,n,a)}}}export default ExecutorGroup;export{getCircleArray,replayDeclutter};