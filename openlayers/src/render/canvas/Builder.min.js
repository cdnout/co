import{equals,reverseSubArray}from"../../array.js";import{asColorLike}from"../../colorlike.js";import{buffer,clone,coordinateRelationship}from"../../extent.js";import Relationship from"../../extent/Relationship.js";import GeometryType from"../../geom/GeometryType.js";import{inflateCoordinates,inflateCoordinatesArray,inflateMultiCoordinatesArray}from"../../geom/flat/inflate.js";import VectorContext from"../VectorContext.js";import{defaultFillStyle,defaultStrokeStyle,defaultMiterLimit,defaultLineWidth,defaultLineJoin,defaultLineDashOffset,defaultLineDash,defaultLineCap}from"../canvas.js";import CanvasInstruction from"./Instruction.js";class CanvasBuilder extends VectorContext{constructor(t,e,i,n){super(),this.tolerance=t,this.maxExtent=e,this.pixelRatio=n,this.maxLineWidth=0,this.resolution=i,this.beginGeometryInstruction1_=null,this.beginGeometryInstruction2_=null,this.bufferedMaxExtent_=null,this.instructions=[],this.coordinates=[],this.tmpCoordinate_=[],this.hitDetectionInstructions=[],this.state={}}applyPixelRatio(t){const e=this.pixelRatio;return 1==e?t:t.map(function(t){return t*e})}appendFlatCoordinates(t,e,i,n,s,r){let o=this.coordinates.length;var a=this.getBufferedMaxExtent();r&&(e+=n);let l=t[e],h=t[e+1];const u=this.tmpCoordinate_;let c=!0,d,f,p;for(d=e+n;d<i;d+=n)u[0]=t[d],u[1]=t[d+1],p=coordinateRelationship(a,u),c=p!==f?(c&&(this.coordinates[o++]=l,this.coordinates[o++]=h),this.coordinates[o++]=u[0],this.coordinates[o++]=u[1],!1):p!==Relationship.INTERSECTING||(this.coordinates[o++]=u[0],this.coordinates[o++]=u[1],!1),l=u[0],h=u[1],f=p;return(s&&c||d===e+n)&&(this.coordinates[o++]=l,this.coordinates[o++]=h),o}drawCustomCoordinates_(i,n,s,r,o){for(let t=0,e=s.length;t<e;++t){var a=s[t],l=this.appendFlatCoordinates(i,n,a,r,!1,!1);o.push(l),n=a}return n}drawCustom(t,e,i){this.beginGeometry(e);var n=t.getType(),s=t.getStride(),r=this.coordinates.length;let o,a,l,h,u;if(n==GeometryType.MULTI_POLYGON){o=t.getOrientedFlatCoordinates(),h=[];var c=t.getEndss();for(let t=u=0,e=c.length;t<e;++t){var d=[];u=this.drawCustomCoordinates_(o,u,c[t],s,d),h.push(d)}this.instructions.push([CanvasInstruction.CUSTOM,r,h,t,i,inflateMultiCoordinatesArray])}else n==GeometryType.POLYGON||n==GeometryType.MULTI_LINE_STRING?(l=[],o=n==GeometryType.POLYGON?t.getOrientedFlatCoordinates():t.getFlatCoordinates(),u=this.drawCustomCoordinates_(o,0,t.getEnds(),s,l),this.instructions.push([CanvasInstruction.CUSTOM,r,l,t,i,inflateCoordinatesArray])):n==GeometryType.LINE_STRING||n==GeometryType.MULTI_POINT?(o=t.getFlatCoordinates(),a=this.appendFlatCoordinates(o,0,o.length,s,!1,!1),this.instructions.push([CanvasInstruction.CUSTOM,r,a,t,i,inflateCoordinates])):n==GeometryType.POINT&&(o=t.getFlatCoordinates(),this.coordinates.push(o[0],o[1]),a=this.coordinates.length,this.instructions.push([CanvasInstruction.CUSTOM,r,a,t,i]));this.endGeometry(e)}beginGeometry(t){this.beginGeometryInstruction1_=[CanvasInstruction.BEGIN_GEOMETRY,t,0],this.instructions.push(this.beginGeometryInstruction1_),this.beginGeometryInstruction2_=[CanvasInstruction.BEGIN_GEOMETRY,t,0],this.hitDetectionInstructions.push(this.beginGeometryInstruction2_)}finish(){return{instructions:this.instructions,hitDetectionInstructions:this.hitDetectionInstructions,coordinates:this.coordinates}}reverseHitDetectionInstructions(){const t=this.hitDetectionInstructions;t.reverse();let e;var i,n=t.length;let s,r=-1;for(e=0;e<n;++e)(i=(s=t[e])[0])==CanvasInstruction.END_GEOMETRY?r=e:i==CanvasInstruction.BEGIN_GEOMETRY&&(s[2]=e,reverseSubArray(this.hitDetectionInstructions,r,e),r=-1)}setFillStrokeStyle(t,e){const i=this.state;if(t?(t=t.getColor(),i.fillStyle=asColorLike(t||defaultFillStyle)):i.fillStyle=void 0,e){t=e.getColor(),t=(i.strokeStyle=asColorLike(t||defaultStrokeStyle),e.getLineCap());i.lineCap=void 0!==t?t:defaultLineCap;const n=e.getLineDash();i.lineDash=n?n.slice():defaultLineDash;t=e.getLineDashOffset(),t=(i.lineDashOffset=t||defaultLineDashOffset,e.getLineJoin()),t=(i.lineJoin=void 0!==t?t:defaultLineJoin,e.getWidth()),t=(i.lineWidth=void 0!==t?t:defaultLineWidth,e.getMiterLimit());i.miterLimit=void 0!==t?t:defaultMiterLimit,i.lineWidth>this.maxLineWidth&&(this.maxLineWidth=i.lineWidth,this.bufferedMaxExtent_=null)}else i.strokeStyle=void 0,i.lineCap=void 0,i.lineDash=null,i.lineDashOffset=void 0,i.lineJoin=void 0,i.lineWidth=void 0,i.miterLimit=void 0}createFill(t){t=t.fillStyle;const e=[CanvasInstruction.SET_FILL_STYLE,t];return"string"!=typeof t&&e.push(!0),e}applyStroke(t){this.instructions.push(this.createStroke(t))}createStroke(t){return[CanvasInstruction.SET_STROKE_STYLE,t.strokeStyle,t.lineWidth*this.pixelRatio,t.lineCap,t.lineJoin,t.miterLimit,this.applyPixelRatio(t.lineDash),t.lineDashOffset*this.pixelRatio]}updateFillStyle(t,e){var i=t.fillStyle;"string"==typeof i&&t.currentFillStyle==i||(void 0!==i&&this.instructions.push(e.call(this,t)),t.currentFillStyle=i)}updateStrokeStyle(t,e){var i=t.strokeStyle,n=t.lineCap,s=t.lineDash,r=t.lineDashOffset,o=t.lineJoin,a=t.lineWidth,l=t.miterLimit;t.currentStrokeStyle==i&&t.currentLineCap==n&&(s==t.currentLineDash||equals(t.currentLineDash,s))&&t.currentLineDashOffset==r&&t.currentLineJoin==o&&t.currentLineWidth==a&&t.currentMiterLimit==l||(void 0!==i&&e.call(this,t),t.currentStrokeStyle=i,t.currentLineCap=n,t.currentLineDash=s,t.currentLineDashOffset=r,t.currentLineJoin=o,t.currentLineWidth=a,t.currentMiterLimit=l)}endGeometry(t){this.beginGeometryInstruction1_[2]=this.instructions.length,this.beginGeometryInstruction1_=null,this.beginGeometryInstruction2_[2]=this.hitDetectionInstructions.length,this.beginGeometryInstruction2_=null;t=[CanvasInstruction.END_GEOMETRY,t];this.instructions.push(t),this.hitDetectionInstructions.push(t)}getBufferedMaxExtent(){var t;return this.bufferedMaxExtent_||(this.bufferedMaxExtent_=clone(this.maxExtent),0<this.maxLineWidth&&(t=this.resolution*(this.maxLineWidth+1)/2,buffer(this.bufferedMaxExtent_,t,this.bufferedMaxExtent_))),this.bufferedMaxExtent_}}export default CanvasBuilder;