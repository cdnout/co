import{snap}from"../../geom/flat/simplify.js";import{defaultFillStyle}from"../canvas.js";import CanvasInstruction,{fillInstruction,strokeInstruction,beginPathInstruction,closePathInstruction}from"./Instruction.js";import CanvasBuilder from"./Builder.js";class CanvasPolygonBuilder extends CanvasBuilder{constructor(t,i,s,e){super(t,i,s,e)}drawFlatCoordinatess_(i,s,e,n){var t=this.state,o=void 0!==t.fillStyle,r=null!=t.strokeStyle,l=e.length;this.instructions.push(beginPathInstruction),this.hitDetectionInstructions.push(beginPathInstruction);for(let t=0;t<l;++t){var h=e[t],a=this.coordinates.length,u=this.appendFlatCoordinates(i,s,h,n,!0,!r),a=[CanvasInstruction.MOVE_TO_LINE_TO,a,u];this.instructions.push(a),this.hitDetectionInstructions.push(a),r&&(this.instructions.push(closePathInstruction),this.hitDetectionInstructions.push(closePathInstruction)),s=h}return o&&(this.instructions.push(fillInstruction),this.hitDetectionInstructions.push(fillInstruction)),r&&(this.instructions.push(strokeInstruction),this.hitDetectionInstructions.push(strokeInstruction)),s}drawCircle(t,i){var s=this.state,e=s.fillStyle,n=s.strokeStyle;void 0===e&&void 0===n||(this.setFillStrokeStyles_(),this.beginGeometry(i),void 0!==s.fillStyle&&this.hitDetectionInstructions.push([CanvasInstruction.SET_FILL_STYLE,defaultFillStyle]),void 0!==s.strokeStyle&&this.hitDetectionInstructions.push([CanvasInstruction.SET_STROKE_STYLE,s.strokeStyle,s.lineWidth,s.lineCap,s.lineJoin,s.miterLimit,s.lineDash,s.lineDashOffset]),e=t.getFlatCoordinates(),n=t.getStride(),t=this.coordinates.length,this.appendFlatCoordinates(e,0,e.length,n,!1,!1),e=[CanvasInstruction.CIRCLE,t],this.instructions.push(beginPathInstruction,e),this.hitDetectionInstructions.push(beginPathInstruction,e),this.hitDetectionInstructions.push(fillInstruction),void 0!==s.fillStyle&&this.instructions.push(fillInstruction),void 0!==s.strokeStyle&&(this.instructions.push(strokeInstruction),this.hitDetectionInstructions.push(strokeInstruction)),this.endGeometry(i))}drawPolygon(t,i){var s=this.state,e=s.fillStyle,n=s.strokeStyle;void 0===e&&void 0===n||(this.setFillStrokeStyles_(),this.beginGeometry(i),void 0!==s.fillStyle&&this.hitDetectionInstructions.push([CanvasInstruction.SET_FILL_STYLE,defaultFillStyle]),void 0!==s.strokeStyle&&this.hitDetectionInstructions.push([CanvasInstruction.SET_STROKE_STYLE,s.strokeStyle,s.lineWidth,s.lineCap,s.lineJoin,s.miterLimit,s.lineDash,s.lineDashOffset]),e=t.getEnds(),n=t.getOrientedFlatCoordinates(),s=t.getStride(),this.drawFlatCoordinatess_(n,0,e,s),this.endGeometry(i))}drawMultiPolygon(t,i){var e=this.state,s=e.fillStyle,n=e.strokeStyle;if(void 0!==s||void 0!==n){this.setFillStrokeStyles_(),this.beginGeometry(i),void 0!==e.fillStyle&&this.hitDetectionInstructions.push([CanvasInstruction.SET_FILL_STYLE,defaultFillStyle]),void 0!==e.strokeStyle&&this.hitDetectionInstructions.push([CanvasInstruction.SET_STROKE_STYLE,e.strokeStyle,e.lineWidth,e.lineCap,e.lineJoin,e.miterLimit,e.lineDash,e.lineDashOffset]);var o=t.getEndss(),r=t.getOrientedFlatCoordinates(),l=t.getStride();let s=0;for(let t=0,i=o.length;t<i;++t)s=this.drawFlatCoordinatess_(r,s,o[t],l);this.endGeometry(i)}}finish(){this.reverseHitDetectionInstructions(),this.state=null;var s=this.tolerance;if(0!==s){const e=this.coordinates;for(let t=0,i=e.length;t<i;++t)e[t]=snap(e[t],s)}return super.finish()}setFillStrokeStyles_(){var t=this.state;void 0!==t.fillStyle&&this.updateFillStyle(t,this.createFill),void 0!==t.strokeStyle&&this.updateStrokeStyle(t,this.applyStroke)}}export default CanvasPolygonBuilder;