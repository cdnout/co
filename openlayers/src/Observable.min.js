import{listen,unlistenByKey,listenOnce}from"./events.js";import EventTarget from"./events/Target.js";import EventType from"./events/EventType.js";class Observable extends EventTarget{constructor(){super(),this.revision_=0}changed(){++this.revision_,this.dispatchEvent(EventType.CHANGE)}getRevision(){return this.revision_}on(t,r){if(Array.isArray(t)){var n=t.length;const s=new Array(n);for(let e=0;e<n;++e)s[e]=listen(this,t[e],r);return s}return listen(this,t,r)}once(t,r){if(Array.isArray(t)){var n=t.length;const s=new Array(n);for(let e=0;e<n;++e)s[e]=listenOnce(this,t[e],r);return s}return listenOnce(this,t,r)}un(r,n){if(Array.isArray(r))for(let e=0,t=r.length;e<t;++e)this.removeEventListener(r[e],n);else this.removeEventListener(r,n)}}function unByKey(r){if(Array.isArray(r))for(let e=0,t=r.length;e<t;++e)unlistenByKey(r[e]);else unlistenByKey(r)}export default Observable;export{unByKey};