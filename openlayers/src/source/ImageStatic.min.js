import ImageWrapper from"../Image.js";import ImageState from"../ImageState.js";import{createCanvasContext2D}from"../dom.js";import EventType from"../events/EventType.js";import{intersects,getHeight,getWidth}from"../extent.js";import{get as getProjection}from"../proj.js";import ImageSource,{defaultImageLoadFunction}from"./Image.js";class Static extends ImageSource{constructor(e){var t=void 0!==e.crossOrigin?e.crossOrigin:null,i=void 0!==e.imageLoadFunction?e.imageLoadFunction:defaultImageLoadFunction;super({attributions:e.attributions,projection:getProjection(e.projection)}),this.url_=e.url,this.imageExtent_=e.imageExtent,this.image_=new ImageWrapper(this.imageExtent_,void 0,1,this.url_,t,i),this.imageSize_=e.imageSize||null,this.image_.addEventListener(EventType.CHANGE,this.handleImageChange.bind(this))}getImageExtent(){return this.imageExtent_}getImageInternal(e,t,i,a){return intersects(e,this.image_.getExtent())?this.image_:null}getUrl(){return this.url_}handleImageChange(e){if(this.image_.getState()==ImageState.LOADED){var i=this.image_.getExtent(),a=this.image_.getImage();let e,t;t=this.imageSize_?(e=this.imageSize_[0],this.imageSize_[1]):(e=a.width,a.height);var g=getHeight(i)/t,i=Math.ceil(getWidth(i)/g);if(i!=e){const r=createCanvasContext2D(i,t);g=r.canvas;r.drawImage(a,0,0,e,t,0,0,g.width,g.height),this.image_.setImage(g)}}super.handleImageChange(e)}}export default Static;