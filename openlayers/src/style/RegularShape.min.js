import{asColorLike}from"../colorlike.js";import{createCanvasContext2D}from"../dom.js";import ImageState from"../ImageState.js";import{defaultStrokeStyle,defaultFillStyle,defaultLineCap,defaultLineWidth,defaultLineJoin,defaultMiterLimit}from"../render/canvas.js";import ImageStyle from"./Image.js";class RegularShape extends ImageStyle{constructor(t){super({opacity:1,rotateWithView:void 0!==t.rotateWithView&&t.rotateWithView,rotation:void 0!==t.rotation?t.rotation:0,scale:1}),this.canvas_=null,this.hitDetectionCanvas_=null,this.fill_=void 0!==t.fill?t.fill:null,this.origin_=[0,0],this.points_=t.points,this.radius_=void 0!==t.radius?t.radius:t.radius1,this.radius2_=t.radius2,this.angle_=void 0!==t.angle?t.angle:0,this.stroke_=void 0!==t.stroke?t.stroke:null,this.anchor_=null,this.size_=null,this.imageSize_=null,this.hitDetectionImageSize_=null,this.render()}clone(){const t=new RegularShape({fill:this.getFill()?this.getFill().clone():void 0,points:this.getPoints(),radius:this.getRadius(),radius2:this.getRadius2(),angle:this.getAngle(),stroke:this.getStroke()?this.getStroke().clone():void 0,rotation:this.getRotation(),rotateWithView:this.getRotateWithView()});return t.setOpacity(this.getOpacity()),t.setScale(this.getScale()),t}getAnchor(){return this.anchor_}getAngle(){return this.angle_}getFill(){return this.fill_}getHitDetectionImage(t){return this.hitDetectionCanvas_}getImage(t){return this.canvas_}getImageSize(){return this.imageSize_}getHitDetectionImageSize(){return this.hitDetectionImageSize_}getImageState(){return ImageState.LOADED}getOrigin(){return this.origin_}getPoints(){return this.points_}getRadius(){return this.radius_}getRadius2(){return this.radius2_}getSize(){return this.size_}getStroke(){return this.stroke_}listenImageChange(t){}load(){}unlistenImageChange(t){}render(){let t=defaultLineCap,e=defaultLineJoin,i=0,s=null,a=0,r,n=0;this.stroke_&&(null===(r=this.stroke_.getColor())&&(r=defaultStrokeStyle),r=asColorLike(r),void 0===(n=this.stroke_.getWidth())&&(n=defaultLineWidth),s=this.stroke_.getLineDash(),a=this.stroke_.getLineDashOffset(),void 0===(e=this.stroke_.getLineJoin())&&(e=defaultLineJoin),void 0===(t=this.stroke_.getLineCap())&&(t=defaultLineCap),void 0===(i=this.stroke_.getMiterLimit())&&(i=defaultMiterLimit));var l=2*(this.radius_+n)+1,h={strokeStyle:r,strokeWidth:n,size:l,lineCap:t,lineDash:s,lineDashOffset:a,lineJoin:e,miterLimit:i},o=createCanvasContext2D(l,l),d=(this.canvas_=o.canvas,l=this.canvas_.width);this.draw_(h,o,0,0),this.createHitDetectionCanvas_(h),this.anchor_=[l/2,l/2],this.size_=[l,l],this.imageSize_=[d,d]}draw_(t,e,i,s){let a,r,n,l=(e.setTransform(1,0,0,1,0,0),e.translate(i,s),e.beginPath(),this.points_);if(l===1/0)e.arc(t.size/2,t.size/2,this.radius_,0,2*Math.PI,!0);else{var h=void 0!==this.radius2_?this.radius2_:this.radius_;for(h!==this.radius_&&(l*=2),a=0;a<=l;a++)r=2*a*Math.PI/l-Math.PI/2+this.angle_,n=a%2==0?this.radius_:h,e.lineTo(t.size/2+n*Math.cos(r),t.size/2+n*Math.sin(r))}if(this.fill_){let t=this.fill_.getColor();null===t&&(t=defaultFillStyle),e.fillStyle=asColorLike(t),e.fill()}this.stroke_&&(e.strokeStyle=t.strokeStyle,e.lineWidth=t.strokeWidth,e.setLineDash&&t.lineDash&&(e.setLineDash(t.lineDash),e.lineDashOffset=t.lineDashOffset),e.lineCap=t.lineCap,e.lineJoin=t.lineJoin,e.miterLimit=t.miterLimit,e.stroke()),e.closePath()}createHitDetectionCanvas_(t){var e;this.hitDetectionImageSize_=[t.size,t.size],this.fill_?this.hitDetectionCanvas_=this.canvas_:(e=createCanvasContext2D(t.size,t.size),this.hitDetectionCanvas_=e.canvas,this.drawHitDetectionCanvas_(t,e,0,0))}drawHitDetectionCanvas_(s,a,t,e){a.setTransform(1,0,0,1,0,0),a.translate(t,e),a.beginPath();let r=this.points_;if(r===1/0)a.arc(s.size/2,s.size/2,this.radius_,0,2*Math.PI,!0);else{var n=void 0!==this.radius2_?this.radius2_:this.radius_;n!==this.radius_&&(r*=2);let t,e,i;for(t=0;t<=r;t++)i=2*t*Math.PI/r-Math.PI/2+this.angle_,e=t%2==0?this.radius_:n,a.lineTo(s.size/2+e*Math.cos(i),s.size/2+e*Math.sin(i))}a.fillStyle=defaultFillStyle,a.fill(),this.stroke_&&(a.strokeStyle=s.strokeStyle,a.lineWidth=s.strokeWidth,s.lineDash&&(a.setLineDash(s.lineDash),a.lineDashOffset=s.lineDashOffset),a.stroke()),a.closePath()}}export default RegularShape;