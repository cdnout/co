import TileState from"./TileState.js";import EventType from"./events/EventType.js";import PriorityQueue from"./structs/PriorityQueue.js";class TileQueue extends PriorityQueue{constructor(t,e){super(function(e){return t.apply(null,e)},function(e){return e[0].getKey()}),this.boundHandleTileChange_=this.handleTileChange.bind(this),this.tileChangeCallback_=e,this.tilesLoading_=0,this.tilesLoadingKeys_={}}enqueue(e){var t=super.enqueue(e);if(t){const i=e[0];i.addEventListener(EventType.CHANGE,this.boundHandleTileChange_)}return t}getTilesLoading(){return this.tilesLoading_}handleTileChange(e){const t=e.target;var e=t.getState();(t.hifi&&e===TileState.LOADED||e===TileState.ERROR||e===TileState.EMPTY||e===TileState.ABORT)&&(t.removeEventListener(EventType.CHANGE,this.boundHandleTileChange_),(e=t.getKey())in this.tilesLoadingKeys_&&(delete this.tilesLoadingKeys_[e],--this.tilesLoading_),this.tileChangeCallback_())}loadMoreTiles(e,t){let i=0,n=!1,s,a,l;for(;this.tilesLoading_<e&&i<t&&0<this.getCount();)l=(a=this.dequeue()[0]).getKey(),(s=a.getState())===TileState.ABORT?n=!0:s!==TileState.IDLE||l in this.tilesLoadingKeys_||(a.load(),a.getState()===TileState.LOADING&&(this.tilesLoadingKeys_[l]=!0,++this.tilesLoading_,++i));0===i&&n&&this.tileChangeCallback_()}}export default TileQueue;