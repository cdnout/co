import{assert}from"./asserts.js";import{modulo}from"./math.js";import{hash as tileCoordHash}from"./tilecoord.js";function createFromTemplate(t,o){const a=/\{z\}/g,l=/\{x\}/g,c=/\{y\}/g,i=/\{-y\}/g;return function(n,e,r){if(n)return t.replace(a,n[0].toString()).replace(l,n[1].toString()).replace(c,n[2].toString()).replace(i,function(){var e=n[0];const r=o.getFullTileRange(e),t=(assert(r,55),r.getHeight()-n[2]-1);return t.toString()})}}function createFromTemplates(r,t){var n=r.length;const o=new Array(n);for(let e=0;e<n;++e)o[e]=createFromTemplate(r[e],t);return createFromTileUrlFunctions(o)}function createFromTileUrlFunctions(o){return 1===o.length?o[0]:function(e,r,t){var n;if(e)return n=tileCoordHash(e),n=modulo(n,o.length),o[n](e,r,t)}}function nullTileUrlFunction(e,r,t){}function expandUrl(r){const t=[];let n=/\{([a-z])-([a-z])\}/.exec(r);if(n){var o=n[1].charCodeAt(0),a=n[2].charCodeAt(0);let e;for(e=o;e<=a;++e)t.push(r.replace(n[0],String.fromCharCode(e)));return t}if(n=n=/\{(\d+)-(\d+)\}/.exec(r)){var l=parseInt(n[2],10);for(let e=parseInt(n[1],10);e<=l;e++)t.push(r.replace(n[0],e.toString()));return t}return t.push(r),t}export{createFromTemplate,createFromTemplates,createFromTileUrlFunctions,nullTileUrlFunction,expandUrl};