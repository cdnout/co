import Disposable from"../Disposable.js";import{VOID}from"../functions.js";import Event from"./Event.js";import{clear}from"../obj.js";class Target extends Disposable{constructor(){super(),this.pendingRemovals_={},this.dispatching_={},this.listeners_={}}addEventListener(e,t){let s=this.listeners_[e];-1===(s=s||(this.listeners_[e]=[])).indexOf(t)&&s.push(t)}dispatchEvent(e){const s="string"==typeof e?new Event(e):e;var t=s.type;s.target||(s.target=this);const i=this.listeners_[t];let n;if(i){t in this.dispatching_||(this.dispatching_[t]=0,this.pendingRemovals_[t]=0),++this.dispatching_[t];for(let e=0,t=i.length;e<t;++e)if(!1===i[e].call(this,s)||s.propagationStopped){n=!1;break}if(--this.dispatching_[t],0===this.dispatching_[t]){let e=this.pendingRemovals_[t];for(delete this.pendingRemovals_[t];e--;)this.removeEventListener(t,VOID);delete this.dispatching_[t]}return n}}disposeInternal(){clear(this.listeners_)}getListeners(e){return this.listeners_[e]}hasListener(e){return e?e in this.listeners_:0<Object.keys(this.listeners_).length}removeEventListener(e,t){const s=this.listeners_[e];s&&(t=s.indexOf(t),e in this.pendingRemovals_?(s[t]=VOID,++this.pendingRemovals_[e]):(s.splice(t,1),0===s.length&&delete this.listeners_[e]))}}export default Target;