import{getUid}from"../util.js";import RBush_ from"rbush";import{createOrUpdate,equals}from"../extent.js";import{isEmpty}from"../obj.js";class RBush{constructor(t){this.rbush_=new RBush_(t),this.items_={}}insert(t,e){t={minX:t[0],minY:t[1],maxX:t[2],maxY:t[3],value:e};this.rbush_.insert(t),this.items_[getUid(e)]=t}load(r,s){const i=new Array(s.length);for(let t=0,e=s.length;t<e;t++){var n=r[t],h=s[t],n={minX:n[0],minY:n[1],maxX:n[2],maxY:n[3],value:h};i[t]=n,this.items_[getUid(h)]=n}this.rbush_.load(i)}remove(t){var t=getUid(t),e=this.items_[t];return delete this.items_[t],null!==this.rbush_.remove(e)}update(t,e){var r=this.items_[getUid(e)],r=[r.minX,r.minY,r.maxX,r.maxY];equals(r,t)||(this.remove(e),this.insert(t,e))}getAll(){const t=this.rbush_.all();return t.map(function(t){return t.value})}getInExtent(t){t={minX:t[0],minY:t[1],maxX:t[2],maxY:t[3]};const e=this.rbush_.search(t);return e.map(function(t){return t.value})}forEach(t){return this.forEach_(this.getAll(),t)}forEachInExtent(t,e){return this.forEach_(this.getInExtent(t),e)}forEach_(r,s){let i;for(let t=0,e=r.length;t<e;t++)if(i=s(r[t]))return i;return i}isEmpty(){return isEmpty(this.items_)}clear(){this.rbush_.clear(),this.items_={}}getExtent(t){var e=this.rbush_.toJSON();return createOrUpdate(e.minX,e.minY,e.maxX,e.maxY,t)}concat(t){this.rbush_.load(t.rbush_.all());for(const e in t.items_)this.items_[e]=t.items_[e]}}export default RBush;