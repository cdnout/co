import ImageCanvas from"../../ImageCanvas.js";import ViewHint from"../../ViewHint.js";import{getHeight,getWidth,isEmpty,scaleFromCenter}from"../../extent.js";import{assign}from"../../obj.js";import CanvasImageLayerRenderer from"./ImageLayer.js";import CanvasVectorLayerRenderer from"./VectorLayer.js";import EventType from"../../events/EventType.js";import ImageState from"../../ImageState.js";import{renderDeclutterItems}from"../../render.js";class CanvasVectorImageLayerRenderer extends CanvasImageLayerRenderer{constructor(e){super(e),this.vectorRenderer_=new CanvasVectorLayerRenderer(e),this.layerImageRatio_=e.getImageRatio()}disposeInternal(){this.vectorRenderer_.dispose(),super.disposeInternal()}handleFontsChanged(){this.vectorRenderer_.handleFontsChanged()}prepareFrame(e){var t=e.pixelRatio,r=e.viewState.resolution,a=e.viewHints;const n=this.vectorRenderer_;let i=e.extent;if(1!==this.layerImageRatio_&&(i=i.slice(0),scaleFromCenter(i,this.layerImageRatio_)),!a[ViewHint.ANIMATING]&&!a[ViewHint.INTERACTING]&&!isEmpty(i)){n.useContainer(null,null,1);a=n.context;const s=assign({},e,{declutterItems:[],size:[getWidth(i)/r,getHeight(i)/r],viewState:assign({},e.viewState,{rotation:0})}),o=new ImageCanvas(i,r,t,a.canvas,function(e){n.prepareFrame(s)&&n.replayGroupChanged&&(n.renderFrame(s,null),renderDeclutterItems(s,null),e())});o.addEventListener(EventType.CHANGE,function(){o.getState()===ImageState.LOADED&&(this.image_=o)}.bind(this)),o.load()}if(this.image_){const m=this.image_;e=m.getResolution(),r=m.getPixelRatio();this.renderedResolution=e*t/r}return!!this.image_}preRender(){}postRender(){}forEachFeatureAtCoordinate(e,t,r,a,n){return this.vectorRenderer_?this.vectorRenderer_.forEachFeatureAtCoordinate(e,t,r,a,n):super.forEachFeatureAtCoordinate(e,t,r,a,n)}}export default CanvasVectorImageLayerRenderer;