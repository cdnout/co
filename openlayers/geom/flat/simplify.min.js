import{squaredSegmentDistance,squaredDistance}from"../../math.js";function simplifyLineString(r,a,n,e,u,t,i){i=void 0!==i?i:[];return t||(n=radialDistance(r,a,n,e,u,i,0),r=i,a=0,e=2),i.length=douglasPeucker(r,a,n,e,u,i,0),i}function douglasPeucker(r,a,n,e,u,t,i){var o=(n-a)/e;if(o<3){for(;a<n;a+=e)t[i++]=r[a],t[i++]=r[a+1];return i}for(var s=new Array(o),f=(s[0]=1,s[o-1]=1,[a,n-e]),l=0;0<f.length;){for(var c=f.pop(),p=f.pop(),g=0,d=r[p],h=r[p+1],v=r[c],y=r[c+1],q=p+e;q<c;q+=e){var A=r[q],k=r[q+1],A=squaredSegmentDistance(A,k,d,h,v,y);g<A&&(l=q,g=A)}u<g&&(s[(l-a)/e]=1,p+e<l&&f.push(p,l),l+e<c&&f.push(l,c))}for(q=0;q<o;++q)s[q]&&(t[i++]=r[a+q*e],t[i++]=r[a+q*e+1]);return i}function douglasPeuckerArray(r,a,n,e,u,t,i,o){for(var s=0,f=n.length;s<f;++s){var l=n[s];i=douglasPeucker(r,a,l,e,u,t,i),o.push(i),a=l}return i}function douglasPeuckerMultiArray(r,a,n,e,u,t,i,o){for(var s=0,f=n.length;s<f;++s){var l=n[s],c=[];i=douglasPeuckerArray(r,a,l,e,u,t,i,c),o.push(c),a=l[l.length-1]}return i}function radialDistance(r,a,n,e,u,t,i){if(n<=a+e){for(;a<n;a+=e)t[i++]=r[a],t[i++]=r[a+1];return i}var o=r[a],s=r[a+1],f=t[i++]=o,l=t[i++]=s;for(a+=e;a<n;a+=e)f=r[a],l=r[a+1],squaredDistance(o,s,f,l)>u&&(o=t[i++]=f,s=t[i++]=l);return f==o&&l==s||(t[i++]=f,t[i++]=l),i}function snap(r,a){return a*Math.round(r/a)}function quantize(r,a,n,e,u,t,i){if(a==n)return i;var o,s=snap(r[a],u),f=snap(r[a+1],u);a+=e,t[i++]=s,t[i++]=f;do{if(o=snap(r[a],u),d=snap(r[a+1],u),(a+=e)==n)return t[i++]=o,t[i++]=d,i}while(o==s&&d==f);for(;a<n;){var l,c,p,g,d,h=snap(r[a],u),v=snap(r[a+1],u);a+=e,h==o&&v==d||(o=((l=o-s)*(g=v-f)==(c=d-f)*(p=h-s)&&(l<0&&p<l||l==p||0<l&&l<p)&&(c<0&&g<c||c==g||0<c&&c<g)||(s=t[i++]=o,f=t[i++]=d),h),d=v)}return t[i++]=o,t[i++]=d,i}function quantizeArray(r,a,n,e,u,t,i,o){for(var s=0,f=n.length;s<f;++s){var l=n[s];i=quantize(r,a,l,e,u,t,i),o.push(i),a=l}return i}function quantizeMultiArray(r,a,n,e,u,t,i,o){for(var s=0,f=n.length;s<f;++s){var l=n[s],c=[];i=quantizeArray(r,a,l,e,u,t,i,c),o.push(c),a=l[l.length-1]}return i}export{simplifyLineString,douglasPeucker,douglasPeuckerArray,douglasPeuckerMultiArray,radialDistance,snap,quantize,quantizeArray,quantizeMultiArray};