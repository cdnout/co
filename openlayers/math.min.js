function clamp(r,n,t){return Math.min(Math.max(r,n),t)}var cosh=function(){var r="cosh"in Math?Math.cosh:function(r){r=Math.exp(r);return(r+1/r)/2};return r}();function squaredSegmentDistance(r,n,t,e,a,o){var u,s=a-t,i=o-e;return 0==s&&0==i||(1<(u=((r-t)*s+(n-e)*i)/(s*s+i*i))?(t=a,e=o):0<u&&(t+=s*u,e+=i*u)),squaredDistance(r,n,t,e)}function squaredDistance(r,n,t,e){t-=r,r=e-n;return t*t+r*r}function solveLinearSystem(r){for(var n=r.length,t=0;t<n;t++){for(var e=t,a=Math.abs(r[t][t]),o=t+1;o<n;o++){var u=Math.abs(r[o][t]);a<u&&(a=u,e=o)}if(0===a)return null;var s=r[e];r[e]=r[t],r[t]=s;for(var i=t+1;i<n;i++)for(var c=-r[i][t]/r[t][t],f=t;f<n+1;f++)t==f?r[i][f]=0:r[i][f]+=c*r[t][f]}for(var h=new Array(n),v=n-1;0<=v;v--){h[v]=r[v][n]/r[v][v];for(var l=v-1;0<=l;l--)r[l][n]-=r[l][v]*h[v]}return h}function toDegrees(r){return 180*r/Math.PI}function toRadians(r){return r*Math.PI/180}function modulo(r,n){r%=n;return r*n<0?r+n:r}function lerp(r,n,t){return r+t*(n-r)}export{clamp,cosh,squaredSegmentDistance,squaredDistance,solveLinearSystem,toDegrees,toRadians,modulo,lerp};