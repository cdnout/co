"use strict";var __decorate=this&&this.__decorate||function(o,t,e,n){var l,r=arguments.length,u=r<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,e):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)u=Reflect.decorate(o,t,e,n);else for(var i=o.length-1;0<=i;i--)(l=o[i])&&(u=(r<3?l(u):3<r?l(t,e,u):l(t,e))||u);return 3<r&&u&&Object.defineProperty(t,e,u),u},__metadata=this&&this.__metadata||function(o,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(o,t)};Object.defineProperty(exports,"__esModule",{value:!0});var columnController_1=require("./columnController"),context_1=require("../context/context"),ColumnApi=function(){function o(){}return o.prototype.sizeColumnsToFit=function(o){this.columnController.sizeColumnsToFit(o,"api")},o.prototype.setColumnGroupOpened=function(o,t){this.columnController.setColumnGroupOpened(o,t,"api")},o.prototype.getColumnGroup=function(o,t){return this.columnController.getColumnGroup(o,t)},o.prototype.getOriginalColumnGroup=function(o){return this.columnController.getOriginalColumnGroup(o)},o.prototype.getDisplayNameForColumn=function(o,t){return this.columnController.getDisplayNameForColumn(o,t)},o.prototype.getDisplayNameForColumnGroup=function(o,t){return this.columnController.getDisplayNameForColumnGroup(o,t)},o.prototype.getColumn=function(o){return this.columnController.getPrimaryColumn(o)},o.prototype.setColumnState=function(o){return this.columnController.setColumnState(o,!1,"api")},o.prototype.getColumnState=function(){return this.columnController.getColumnState()},o.prototype.resetColumnState=function(){this.columnController.resetColumnState(!1,"api")},o.prototype.getColumnGroupState=function(){return this.columnController.getColumnGroupState()},o.prototype.setColumnGroupState=function(o){this.columnController.setColumnGroupState(o,"api")},o.prototype.resetColumnGroupState=function(){this.columnController.resetColumnGroupState("api")},o.prototype.isPinning=function(){return this.columnController.isPinningLeft()||this.columnController.isPinningRight()},o.prototype.isPinningLeft=function(){return this.columnController.isPinningLeft()},o.prototype.isPinningRight=function(){return this.columnController.isPinningRight()},o.prototype.getDisplayedColAfter=function(o){return this.columnController.getDisplayedColAfter(o)},o.prototype.getDisplayedColBefore=function(o){return this.columnController.getDisplayedColBefore(o)},o.prototype.setColumnVisible=function(o,t){this.columnController.setColumnVisible(o,t,"api")},o.prototype.setColumnsVisible=function(o,t){this.columnController.setColumnsVisible(o,t,"api")},o.prototype.setColumnPinned=function(o,t){this.columnController.setColumnPinned(o,t,"api")},o.prototype.setColumnsPinned=function(o,t){this.columnController.setColumnsPinned(o,t,"api")},o.prototype.getAllColumns=function(){return this.columnController.getAllPrimaryColumns()},o.prototype.getAllGridColumns=function(){return this.columnController.getAllGridColumns()},o.prototype.getDisplayedLeftColumns=function(){return this.columnController.getDisplayedLeftColumns()},o.prototype.getDisplayedCenterColumns=function(){return this.columnController.getDisplayedCenterColumns()},o.prototype.getDisplayedRightColumns=function(){return this.columnController.getDisplayedRightColumns()},o.prototype.getAllDisplayedColumns=function(){return this.columnController.getAllDisplayedColumns()},o.prototype.getAllDisplayedVirtualColumns=function(){return this.columnController.getAllDisplayedVirtualColumns()},o.prototype.moveColumn=function(o,t){"number"==typeof o?(console.warn("ag-Grid: you are using moveColumn(fromIndex, toIndex) - moveColumn takes a column key and a destination index, not two indexes, to move with indexes use moveColumnByIndex(from,to) instead"),this.columnController.moveColumnByIndex(o,t,"api")):this.columnController.moveColumn(o,t,"api")},o.prototype.moveColumnByIndex=function(o,t){this.columnController.moveColumnByIndex(o,t,"api")},o.prototype.moveColumns=function(o,t){this.columnController.moveColumns(o,t,"api")},o.prototype.moveRowGroupColumn=function(o,t){this.columnController.moveRowGroupColumn(o,t)},o.prototype.setColumnAggFunc=function(o,t){this.columnController.setColumnAggFunc(o,t)},o.prototype.setColumnWidth=function(o,t,e){void 0===e&&(e=!0),this.columnController.setColumnWidth(o,t,!1,e)},o.prototype.setPivotMode=function(o){this.columnController.setPivotMode(o)},o.prototype.isPivotMode=function(){return this.columnController.isPivotMode()},o.prototype.getSecondaryPivotColumn=function(o,t){return this.columnController.getSecondaryPivotColumn(o,t)},o.prototype.setValueColumns=function(o){this.columnController.setValueColumns(o,"api")},o.prototype.getValueColumns=function(){return this.columnController.getValueColumns()},o.prototype.removeValueColumn=function(o){this.columnController.removeValueColumn(o,"api")},o.prototype.removeValueColumns=function(o){this.columnController.removeValueColumns(o,"api")},o.prototype.addValueColumn=function(o){this.columnController.addValueColumn(o,"api")},o.prototype.addValueColumns=function(o){this.columnController.addValueColumns(o,"api")},o.prototype.setRowGroupColumns=function(o){this.columnController.setRowGroupColumns(o,"api")},o.prototype.removeRowGroupColumn=function(o){this.columnController.removeRowGroupColumn(o,"api")},o.prototype.removeRowGroupColumns=function(o){this.columnController.removeRowGroupColumns(o,"api")},o.prototype.addRowGroupColumn=function(o){this.columnController.addRowGroupColumn(o,"api")},o.prototype.addRowGroupColumns=function(o){this.columnController.addRowGroupColumns(o,"api")},o.prototype.getRowGroupColumns=function(){return this.columnController.getRowGroupColumns()},o.prototype.setPivotColumns=function(o){this.columnController.setPivotColumns(o,"api")},o.prototype.removePivotColumn=function(o){this.columnController.removePivotColumn(o,"api")},o.prototype.removePivotColumns=function(o){this.columnController.removePivotColumns(o,"api")},o.prototype.addPivotColumn=function(o){this.columnController.addPivotColumn(o,"api")},o.prototype.addPivotColumns=function(o){this.columnController.addPivotColumns(o,"api")},o.prototype.getPivotColumns=function(){return this.columnController.getPivotColumns()},o.prototype.getLeftDisplayedColumnGroups=function(){return this.columnController.getLeftDisplayedColumnGroups()},o.prototype.getCenterDisplayedColumnGroups=function(){return this.columnController.getCenterDisplayedColumnGroups()},o.prototype.getRightDisplayedColumnGroups=function(){return this.columnController.getRightDisplayedColumnGroups()},o.prototype.getAllDisplayedColumnGroups=function(){return this.columnController.getAllDisplayedColumnGroups()},o.prototype.autoSizeColumn=function(o){return this.columnController.autoSizeColumn(o,"api")},o.prototype.autoSizeColumns=function(o){return this.columnController.autoSizeColumns(o,"api")},o.prototype.autoSizeAllColumns=function(){this.columnController.autoSizeAllColumns("api")},o.prototype.setSecondaryColumns=function(o){this.columnController.setSecondaryColumns(o,"api")},o.prototype.getSecondaryColumns=function(){return this.columnController.getSecondaryColumns()},o.prototype.getPrimaryColumns=function(){return this.columnController.getAllPrimaryColumns()},o.prototype.columnGroupOpened=function(o,t){console.error("ag-Grid: columnGroupOpened no longer exists, use setColumnGroupOpened"),this.setColumnGroupOpened(o,t)},o.prototype.hideColumns=function(o,t){console.error("ag-Grid: hideColumns is deprecated, use setColumnsVisible"),this.columnController.setColumnsVisible(o,!t,"api")},o.prototype.hideColumn=function(o,t){console.error("ag-Grid: hideColumn is deprecated, use setColumnVisible"),this.columnController.setColumnVisible(o,!t,"api")},o.prototype.setState=function(o){return console.error("ag-Grid: setState is deprecated, use setColumnState"),this.setColumnState(o)},o.prototype.getState=function(){return console.error("ag-Grid: getState is deprecated, use getColumnState"),this.getColumnState()},o.prototype.resetState=function(){console.error("ag-Grid: resetState is deprecated, use resetColumnState"),this.resetColumnState()},o.prototype.getAggregationColumns=function(){return console.error("ag-Grid: getAggregationColumns is deprecated, use getValueColumns"),this.columnController.getValueColumns()},o.prototype.removeAggregationColumn=function(o){console.error("ag-Grid: removeAggregationColumn is deprecated, use removeValueColumn"),this.columnController.removeValueColumn(o,"api")},o.prototype.removeAggregationColumns=function(o){console.error("ag-Grid: removeAggregationColumns is deprecated, use removeValueColumns"),this.columnController.removeValueColumns(o,"api")},o.prototype.addAggregationColumn=function(o){console.error("ag-Grid: addAggregationColumn is deprecated, use addValueColumn"),this.columnController.addValueColumn(o,"api")},o.prototype.addAggregationColumns=function(o){console.error("ag-Grid: addAggregationColumns is deprecated, use addValueColumns"),this.columnController.addValueColumns(o,"api")},o.prototype.setColumnAggFunction=function(o,t){console.error("ag-Grid: setColumnAggFunction is deprecated, use setColumnAggFunc"),this.columnController.setColumnAggFunc(o,t,"api")},o.prototype.getDisplayNameForCol=function(o){return console.error("ag-Grid: getDisplayNameForCol is deprecated, use getDisplayNameForColumn"),this.getDisplayNameForColumn(o,null)},__decorate([context_1.Autowired("columnController"),__metadata("design:type",columnController_1.ColumnController)],o.prototype,"columnController",void 0),__decorate([context_1.Bean("columnApi")],o)}();exports.ColumnApi=ColumnApi;