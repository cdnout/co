"use strict";var __decorate=this&&this.__decorate||function(e,t,o,r){var n,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,o):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,o,r);else for(var s=e.length-1;0<=s;s--)(n=e[s])&&(a=(i<3?n(a):3<i?n(t,o,a):n(t,o))||a);return 3<i&&a&&Object.defineProperty(t,o,a),a},__metadata=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(exports,"__esModule",{value:!0});var csvCreator_1=require("./exporter/csvCreator"),rowRenderer_1=require("./rendering/rowRenderer"),filterManager_1=require("./filter/filterManager"),columnController_1=require("./columnController/columnController"),selectionController_1=require("./selectionController"),gridOptionsWrapper_1=require("./gridOptionsWrapper"),valueService_1=require("./valueService/valueService"),eventService_1=require("./eventService"),constants_1=require("./constants"),context_1=require("./context/context"),sortController_1=require("./sortController"),focusedCellController_1=require("./focusedCellController"),cellRendererFactory_1=require("./rendering/cellRendererFactory"),paginationProxy_1=require("./rowModels/paginationProxy"),immutableService_1=require("./rowModels/clientSide/immutableService"),valueCache_1=require("./valueService/valueCache"),alignedGridsService_1=require("./alignedGridsService"),pinnedRowModel_1=require("./rowModels/pinnedRowModel"),animationFrameService_1=require("./misc/animationFrameService"),utils_1=require("./utils"),GridApi=function(){function e(){this.detailGridInfoMap={}}return e.prototype.registerGridComp=function(e){this.gridPanel=e},e.prototype.registerGridCore=function(e){this.gridCore=e},e.prototype.registerHeaderRootComp=function(e){this.headerRootComp=e},e.prototype.init=function(){switch(this.rowModel.getType()){case constants_1.Constants.ROW_MODEL_TYPE_CLIENT_SIDE:this.clientSideRowModel=this.rowModel;break;case constants_1.Constants.ROW_MODEL_TYPE_INFINITE:this.infinitePageRowModel=this.rowModel;break;case constants_1.Constants.ROW_MODEL_TYPE_SERVER_SIDE:this.serverSideRowModel=this.rowModel}},e.prototype.__getAlignedGridService=function(){return this.alignedGridsService},e.prototype.addDetailGridInfo=function(e,t){this.detailGridInfoMap[e]=t},e.prototype.removeDetailGridInfo=function(e){this.detailGridInfoMap[e]=void 0},e.prototype.getDetailGridInfo=function(e){return this.detailGridInfoMap[e]},e.prototype.forEachDetailGridInfo=function(o){var r=0;utils_1._.iterateObject(this.detailGridInfoMap,function(e,t){utils_1._.exists(t)&&(o(t,r),r++)})},e.prototype.getDataAsCsv=function(e){return this.csvCreator.getDataAsCsv(e)},e.prototype.exportDataAsCsv=function(e){this.csvCreator.exportDataAsCsv(e)},e.prototype.getDataAsExcel=function(e){return this.excelCreator||console.warn("ag-Grid: Excel export is only available in ag-Grid Enterprise"),this.excelCreator.getDataAsExcelXml(e)},e.prototype.exportDataAsExcel=function(e){this.excelCreator||console.warn("ag-Grid: Excel export is only available in ag-Grid Enterprise"),this.excelCreator.exportDataAsExcel(e)},e.prototype.setEnterpriseDatasource=function(e){console.warn("ag-grid: since version 18.x, api.setEnterpriseDatasource() should be replaced with api.setServerSideDatasource()"),this.setServerSideDatasource(e)},e.prototype.setServerSideDatasource=function(e){this.gridOptionsWrapper.isRowModelServerSide()?this.rowModel.setDatasource(e):console.warn("ag-Grid: you can only use an enterprise datasource when gridOptions.rowModelType is '"+constants_1.Constants.ROW_MODEL_TYPE_SERVER_SIDE+"'")},e.prototype.setDatasource=function(e){this.gridOptionsWrapper.isRowModelInfinite()?this.rowModel.setDatasource(e):console.warn("ag-Grid: you can only use a datasource when gridOptions.rowModelType is '"+constants_1.Constants.ROW_MODEL_TYPE_INFINITE+"'")},e.prototype.setViewportDatasource=function(e){this.gridOptionsWrapper.isRowModelViewport()?this.rowModel.setViewportDatasource(e):console.warn("ag-Grid: you can only use a viewport datasource when gridOptions.rowModelType is '"+constants_1.Constants.ROW_MODEL_TYPE_VIEWPORT+"'")},e.prototype.setRowData=function(e){var t,o;this.gridOptionsWrapper.isRowModelDefault()?this.gridOptionsWrapper.isDeltaRowDataMode()?(t=(o=this.immutableService.createTransactionForRowData(e))[0],o=o[1],this.clientSideRowModel.updateRowData(t,o),this.rowRenderer.refreshFullWidthRows()):(this.selectionController.reset(),this.clientSideRowModel.setRowData(e)):console.warn("cannot call setRowData unless using normal row model")},e.prototype.setFloatingTopRowData=function(e){console.warn("ag-Grid: since v12, api.setFloatingTopRowData() is now api.setPinnedTopRowData()"),this.setPinnedTopRowData(e)},e.prototype.setFloatingBottomRowData=function(e){console.warn("ag-Grid: since v12, api.setFloatingBottomRowData() is now api.setPinnedBottomRowData()"),this.setPinnedBottomRowData(e)},e.prototype.getFloatingTopRowCount=function(){return console.warn("ag-Grid: since v12, api.getFloatingTopRowCount() is now api.getPinnedTopRowCount()"),this.getPinnedTopRowCount()},e.prototype.getFloatingBottomRowCount=function(){return console.warn("ag-Grid: since v12, api.getFloatingBottomRowCount() is now api.getPinnedBottomRowCount()"),this.getPinnedBottomRowCount()},e.prototype.getFloatingTopRow=function(e){return console.warn("ag-Grid: since v12, api.getFloatingTopRow() is now api.getPinnedTopRow()"),this.getPinnedTopRow(e)},e.prototype.getFloatingBottomRow=function(e){return console.warn("ag-Grid: since v12, api.getFloatingBottomRow() is now api.getPinnedBottomRow()"),this.getPinnedBottomRow(e)},e.prototype.setPinnedTopRowData=function(e){this.pinnedRowModel.setPinnedTopRowData(e)},e.prototype.setPinnedBottomRowData=function(e){this.pinnedRowModel.setPinnedBottomRowData(e)},e.prototype.getPinnedTopRowCount=function(){return this.pinnedRowModel.getPinnedTopRowCount()},e.prototype.getPinnedBottomRowCount=function(){return this.pinnedRowModel.getPinnedBottomRowCount()},e.prototype.getPinnedTopRow=function(e){return this.pinnedRowModel.getPinnedTopRow(e)},e.prototype.getPinnedBottomRow=function(e){return this.pinnedRowModel.getPinnedBottomRow(e)},e.prototype.setColumnDefs=function(e,t){void 0===t&&(t="api"),this.columnController.setColumnDefs(e,t)},e.prototype.expireValueCache=function(){this.valueCache.expire()},e.prototype.getVerticalPixelRange=function(){return this.gridPanel.getVScrollPosition()},e.prototype.getHorizontalPixelRange=function(){return this.gridPanel.getHScrollPosition()},e.prototype.setAlwaysShowVerticalScroll=function(e){this.gridOptionsWrapper.setProperty("alwaysShowVerticalScroll",e)},e.prototype.refreshToolPanel=function(){this.gridCore.refreshSideBar()},e.prototype.refreshCells=function(e){void 0===e&&(e={}),Array.isArray(e)?console.warn("since ag-Grid v11.1, refreshCells() now takes parameters, please see the documentation."):this.rowRenderer.refreshCells(e)},e.prototype.flashCells=function(e){void 0===e&&(e={}),this.rowRenderer.flashCells(e)},e.prototype.redrawRows=function(e){void 0===e&&(e={}),e&&e.rowNodes?this.rowRenderer.redrawRows(e.rowNodes):this.rowRenderer.redrawAfterModelUpdate()},e.prototype.timeFullRedraw=function(i){void 0===i&&(i=1);var a=0,s=0,l=0,e=this;function d(){console.log("tests complete. iteration count = "+a),console.log("average processing = "+s/a+"ms"),console.log("average reflow = "+l/a+"ms")}!function o(){var r=(new Date).getTime();e.rowRenderer.redrawAfterModelUpdate();var n=(new Date).getTime();window.setTimeout(function(){var e=(new Date).getTime(),t=n-r,e=e-n;console.log("duration:  processing = "+t+"ms, reflow = "+e+"ms"),s+=t,l+=e,++a<i?window.setTimeout(o,1e3):d()},0)}()},e.prototype.refreshView=function(){console.warn("ag-Grid: since v11.1, refreshView() is deprecated, please call refreshCells() or redrawRows() instead"),this.redrawRows()},e.prototype.refreshRows=function(e){console.warn("since ag-Grid v11.1, refreshRows() is deprecated, please use refreshCells({rowNodes: rows}) or redrawRows({rowNodes: rows}) instead"),this.refreshCells({rowNodes:e})},e.prototype.rowDataChanged=function(e){console.warn("ag-Grid: rowDataChanged is deprecated, either call refreshView() to refresh everything, or call rowNode.setRowData(newData) to set value on a particular node"),this.redrawRows()},e.prototype.softRefreshView=function(){console.error("ag-Grid: since v16, softRefreshView() is no longer supported. Please check the documentation on how to refresh.")},e.prototype.refreshGroupRows=function(){console.warn("ag-Grid: since v11.1, refreshGroupRows() is no longer supported, call refreshCells() instead. Because refreshCells() now does dirty checking, it will only refresh cells that have changed, so it should not be necessary to only refresh the group rows."),this.refreshCells()},e.prototype.setFunctionsReadOnly=function(e){this.gridOptionsWrapper.setProperty("functionsReadOnly",e)},e.prototype.refreshHeader=function(){this.headerRootComp.refreshHeader(),this.gridPanel.setHeaderAndFloatingHeights()},e.prototype.isAnyFilterPresent=function(){return this.filterManager.isAnyFilterPresent()},e.prototype.isAdvancedFilterPresent=function(){return console.warn("ag-Grid: isAdvancedFilterPresent() is deprecated, please use isColumnFilterPresent()"),this.isColumnFilterPresent()},e.prototype.isColumnFilterPresent=function(){return this.filterManager.isAdvancedFilterPresent()},e.prototype.isQuickFilterPresent=function(){return this.filterManager.isQuickFilterPresent()},e.prototype.getModel=function(){return this.rowModel},e.prototype.setRowNodeExpanded=function(e,t){e&&e.setExpanded(t)},e.prototype.onGroupExpandedOrCollapsed=function(e){utils_1._.missing(this.clientSideRowModel)&&console.warn("ag-Grid: cannot call onGroupExpandedOrCollapsed unless using normal row model"),utils_1._.exists(e)&&console.warn("ag-Grid: api.onGroupExpandedOrCollapsed - refreshFromIndex parameter is no longer used, the grid will refresh all rows"),this.clientSideRowModel.refreshModel({step:constants_1.Constants.STEP_MAP})},e.prototype.refreshInMemoryRowModel=function(e){console.warn("ag-grid: since version 18.x, api.refreshInMemoryRowModel() should be replaced with api.refreshClientSideRowModel()"),this.refreshClientSideRowModel(e)},e.prototype.refreshClientSideRowModel=function(e){utils_1._.missing(this.clientSideRowModel)&&console.warn("cannot call refreshClientSideRowModel unless using normal row model");var t=constants_1.Constants.STEP_EVERYTHING,o={group:constants_1.Constants.STEP_EVERYTHING,filter:constants_1.Constants.STEP_FILTER,map:constants_1.Constants.STEP_MAP,aggregate:constants_1.Constants.STEP_AGGREGATE,sort:constants_1.Constants.STEP_SORT,pivot:constants_1.Constants.STEP_PIVOT};utils_1._.exists(e)&&(t=o[e]),utils_1._.missing(t)?console.error("ag-Grid: invalid step "+e+", available steps are "+Object.keys(o).join(", ")):(t={step:t,keepRenderedRows:!0,animate:!0,keepEditingRows:!0},this.clientSideRowModel.refreshModel(t))},e.prototype.isAnimationFrameQueueEmpty=function(){return this.animationFrameService.isQueueEmpty()},e.prototype.getRowNode=function(e){return this.rowModel.getRowNode(e)},e.prototype.expandAll=function(){utils_1._.missing(this.clientSideRowModel)?console.warn("ag-Grid: cannot call expandAll unless using normal row model"):this.clientSideRowModel.expandOrCollapseAll(!0)},e.prototype.collapseAll=function(){utils_1._.missing(this.clientSideRowModel)?console.warn("ag-Grid: cannot call collapseAll unless using normal row model"):this.clientSideRowModel.expandOrCollapseAll(!1)},e.prototype.addVirtualRowListener=function(e,t,o){"string"!=typeof e&&console.warn("ag-Grid: addVirtualRowListener is deprecated, please use addRenderedRowListener."),this.addRenderedRowListener(e,t,o)},e.prototype.addRenderedRowListener=function(e,t,o){"virtualRowSelected"===e&&console.warn("ag-Grid: event virtualRowSelected is deprecated, to register for individual row\n                selection events, add a listener directly to the row node."),this.rowRenderer.addRenderedRowListener(e,t,o)},e.prototype.setQuickFilter=function(e){this.filterManager.setQuickFilter(e)},e.prototype.selectIndex=function(e,t,o){console.warn("ag-Grid: do not use api for selection, call node.setSelected(value) instead"),o&&console.warn("ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it"),this.selectionController.selectIndex(e,t)},e.prototype.deselectIndex=function(e,t){void 0===t&&(t=!1),console.warn("ag-Grid: do not use api for selection, call node.setSelected(value) instead"),t&&console.warn("ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it"),this.selectionController.deselectIndex(e)},e.prototype.selectNode=function(e,t,o){void 0===t&&(t=!1),void 0===o&&(o=!1),console.warn("ag-Grid: API for selection is deprecated, call node.setSelected(value) instead"),o&&console.warn("ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it"),e.setSelectedParams({newValue:!0,clearSelection:!t})},e.prototype.deselectNode=function(e,t){void 0===t&&(t=!1),console.warn("ag-Grid: API for selection is deprecated, call node.setSelected(value) instead"),t&&console.warn("ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it"),e.setSelectedParams({newValue:!1})},e.prototype.selectAll=function(){this.selectionController.selectAllRowNodes()},e.prototype.deselectAll=function(){this.selectionController.deselectAllRowNodes()},e.prototype.selectAllFiltered=function(){this.selectionController.selectAllRowNodes(!0)},e.prototype.deselectAllFiltered=function(){this.selectionController.deselectAllRowNodes(!0)},e.prototype.recomputeAggregates=function(){utils_1._.missing(this.clientSideRowModel)&&console.warn("cannot call recomputeAggregates unless using normal row model"),console.warn("recomputeAggregates is deprecated, please call api.refreshClientSideRowModel('aggregate') instead"),this.clientSideRowModel.refreshModel({step:constants_1.Constants.STEP_AGGREGATE})},e.prototype.sizeColumnsToFit=function(){this.gridPanel.sizeColumnsToFit()},e.prototype.showLoadingOverlay=function(){this.gridPanel.showLoadingOverlay()},e.prototype.showNoRowsOverlay=function(){this.gridPanel.showNoRowsOverlay()},e.prototype.hideOverlay=function(){this.gridPanel.hideOverlay()},e.prototype.isNodeSelected=function(e){return console.warn("ag-Grid: no need to call api.isNodeSelected(), just call node.isSelected() instead"),e.isSelected()},e.prototype.getSelectedNodesById=function(){return console.error("ag-Grid: since version 3.4, getSelectedNodesById no longer exists, use getSelectedNodes() instead"),null},e.prototype.getSelectedNodes=function(){return this.selectionController.getSelectedNodes()},e.prototype.getSelectedRows=function(){return this.selectionController.getSelectedRows()},e.prototype.getBestCostNodeSelection=function(){return this.selectionController.getBestCostNodeSelection()},e.prototype.getRenderedNodes=function(){return this.rowRenderer.getRenderedNodes()},e.prototype.ensureColIndexVisible=function(e){console.warn("ag-Grid: ensureColIndexVisible(index) no longer supported, use ensureColumnVisible(colKey) instead.")},e.prototype.ensureColumnVisible=function(e){this.gridPanel.ensureColumnVisible(e)},e.prototype.ensureIndexVisible=function(e,t){this.gridPanel.ensureIndexVisible(e,t)},e.prototype.ensureNodeVisible=function(e,t){this.gridCore.ensureNodeVisible(e,t)},e.prototype.forEachLeafNode=function(e){utils_1._.missing(this.clientSideRowModel)&&console.warn("cannot call forEachNode unless using normal row model"),this.clientSideRowModel.forEachLeafNode(e)},e.prototype.forEachNode=function(e){this.rowModel.forEachNode(e)},e.prototype.forEachNodeAfterFilter=function(e){utils_1._.missing(this.clientSideRowModel)&&console.warn("cannot call forEachNodeAfterFilter unless using normal row model"),this.clientSideRowModel.forEachNodeAfterFilter(e)},e.prototype.forEachNodeAfterFilterAndSort=function(e){utils_1._.missing(this.clientSideRowModel)&&console.warn("cannot call forEachNodeAfterFilterAndSort unless using normal row model"),this.clientSideRowModel.forEachNodeAfterFilterAndSort(e)},e.prototype.getFilterApiForColDef=function(e){return console.warn("ag-grid API method getFilterApiForColDef deprecated, use getFilterApi instead"),this.getFilterInstance(e)},e.prototype.getFilterInstance=function(e){e=this.columnController.getPrimaryColumn(e);if(e)return this.filterManager.getFilterComponent(e,"NO_UI").resolveNow(null,function(e){return e})},e.prototype.getFilterApi=function(e){return console.warn("ag-Grid: getFilterApi is deprecated, use getFilterInstance instead"),this.getFilterInstance(e)},e.prototype.destroyFilter=function(e){e=this.columnController.getPrimaryColumn(e);if(e)return this.filterManager.destroyFilter(e,"filterDestroyed")},e.prototype.getStatusPanel=function(e){if(this.statusBarService)return this.statusBarService.getStatusPanel(e)},e.prototype.getColumnDef=function(e){e=this.columnController.getPrimaryColumn(e);return e?e.getColDef():null},e.prototype.onFilterChanged=function(){this.filterManager.onFilterChanged()},e.prototype.onSortChanged=function(){this.sortController.onSortChanged()},e.prototype.setSortModel=function(e,t){void 0===t&&(t="api"),this.sortController.setSortModel(e,t)},e.prototype.getSortModel=function(){return this.sortController.getSortModel()},e.prototype.setFilterModel=function(e){this.filterManager.setFilterModel(e)},e.prototype.getFilterModel=function(){return this.filterManager.getFilterModel()},e.prototype.getFocusedCell=function(){return this.focusedCellController.getFocusedCell()},e.prototype.clearFocusedCell=function(){return this.focusedCellController.clearFocusedCell()},e.prototype.setFocusedCell=function(e,t,o){this.focusedCellController.setFocusedCell(e,t,o,!0)},e.prototype.setSuppressRowDrag=function(e){this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_SUPPRESS_ROW_DRAG,e)},e.prototype.setHeaderHeight=function(e){this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_HEADER_HEIGHT,e),this.doLayout()},e.prototype.setGridAutoHeight=function(e){console.warn("api.setGridAutoHeight(boolean) is deprecated, please use api.setDomLayout() instead"),this.setDomLayout(e?"autoHeight":"normal")},e.prototype.setDomLayout=function(e){this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_DOM_LAYOUT,e)},e.prototype.setEnableCellTextSelection=function(e){this.gridPanel.setCellTextSelection(e)},e.prototype.setGroupHeaderHeight=function(e){this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_GROUP_HEADER_HEIGHT,e),this.doLayout()},e.prototype.setFloatingFiltersHeight=function(e){this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_FLOATING_FILTERS_HEIGHT,e),this.doLayout()},e.prototype.setPivotGroupHeaderHeight=function(e){this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_PIVOT_GROUP_HEADER_HEIGHT,e),this.doLayout()},e.prototype.setPivotHeaderHeight=function(e){this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_PIVOT_HEADER_HEIGHT,e),this.doLayout()},e.prototype.isSideBarVisible=function(){return this.gridCore.isSideBarVisible()},e.prototype.setSideBarVisible=function(e){this.gridCore.setSideBarVisible(e)},e.prototype.showToolPanel=function(e){console.warn("ag-grid: from v19 api.showToolPanel has been deprecated in favour of api.setSideBarVisible"),this.setSideBarVisible(e)},e.prototype.openToolPanel=function(e){this.gridCore.openToolPanel(e)},e.prototype.closeToolPanel=function(){this.gridCore.closeToolPanel()},e.prototype.getOpenedToolPanel=function(){return this.gridCore.getOpenedToolPanel()},e.prototype.getSideBar=function(){return this.gridCore.getSideBar()},e.prototype.setSideBar=function(e){return this.gridCore.setSideBar(e)},e.prototype.setSuppressClipboardPaste=function(e){this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_SUPPRESS_CLIPBOARD_PASTE,e)},e.prototype.isToolPanelShowing=function(){return this.gridCore.isToolPanelShowing()},e.prototype.doLayout=function(){this.gridPanel.checkViewportAndScrolls()},e.prototype.resetRowHeights=function(){utils_1._.exists(this.clientSideRowModel)&&this.clientSideRowModel.resetRowHeights()},e.prototype.setGroupRemoveSingleChildren=function(e){this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_GROUP_REMOVE_SINGLE_CHILDREN,e)},e.prototype.setGroupRemoveLowestSingleChildren=function(e){this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN,e)},e.prototype.onRowHeightChanged=function(){utils_1._.exists(this.clientSideRowModel)&&this.clientSideRowModel.onRowHeightChanged()},e.prototype.getValue=function(e,t){var o=this.columnController.getPrimaryColumn(e);return utils_1._.missing(o)&&(o=this.columnController.getGridColumn(e)),utils_1._.missing(o)?null:this.valueService.getValue(o,t)},e.prototype.addEventListener=function(e,t){var o=this.gridOptionsWrapper.useAsyncEvents();this.eventService.addEventListener(e,t,o)},e.prototype.addGlobalListener=function(e){var t=this.gridOptionsWrapper.useAsyncEvents();this.eventService.addGlobalListener(e,t)},e.prototype.removeEventListener=function(e,t){var o=this.gridOptionsWrapper.useAsyncEvents();this.eventService.removeEventListener(e,t,o)},e.prototype.removeGlobalListener=function(e){var t=this.gridOptionsWrapper.useAsyncEvents();this.eventService.removeGlobalListener(e,t)},e.prototype.dispatchEvent=function(e){this.eventService.dispatchEvent(e)},e.prototype.destroy=function(){this.gridCore.destroy(),this.context.destroy()},e.prototype.resetQuickFilter=function(){this.rowModel.forEachNode(function(e){return e.quickFilterAggregateText=null})},e.prototype.getRangeSelections=function(){return console.warn("ag-Grid: in v20.1.x, api.getRangeSelections() is gone, please use getCellRanges() instead.\n        We had to change how cell selections works a small bit to allow charting to integrate. The return type of\n        getCellRanges() is a bit different, please check the ag-Grid documentation."),null},e.prototype.getCellRanges=function(){return this.rangeController?this.rangeController.getCellRanges():(console.warn("ag-Grid: cell range selection is only available in ag-Grid Enterprise"),null)},e.prototype.camelCaseToHumanReadable=function(e){return utils_1._.camelCaseToHumanText(e)},e.prototype.addRangeSelection=function(e){console.warn("ag-Grid: As of version 21.x, range selection changed slightly to allow charting integration. Please call api.addCellRange() instead of api.addRangeSelection()")},e.prototype.addCellRange=function(e){this.rangeController||console.warn("ag-Grid: cell range selection is only available in ag-Grid Enterprise"),this.rangeController.addCellRange(e)},e.prototype.clearRangeSelection=function(){this.rangeController||console.warn("ag-Grid: cell range selection is only available in ag-Grid Enterprise"),this.rangeController.removeAllCellRanges()},e.prototype.chartRange=function(e){if(this.context.isModuleRegistered("chartsModule"))return this.chartService.chartCellRange(e);utils_1._.doOnce(function(){console.warn("ag-grid: Cannot chart range - the Charts Module has not been included.")},"ChartsModuleCheck")},e.prototype.copySelectedRowsToClipboard=function(e,t){this.clipboardService||console.warn("ag-Grid: clipboard is only available in ag-Grid Enterprise"),this.clipboardService.copySelectedRowsToClipboard(e,t)},e.prototype.copySelectedRangeToClipboard=function(e){this.clipboardService||console.warn("ag-Grid: clipboard is only available in ag-Grid Enterprise"),this.clipboardService.copySelectedRangeToClipboard(e)},e.prototype.copySelectedRangeDown=function(){this.clipboardService||console.warn("ag-Grid: clipboard is only available in ag-Grid Enterprise"),this.clipboardService.copyRangeDown()},e.prototype.showColumnMenuAfterButtonClick=function(e,t){e=this.columnController.getGridColumn(e);this.menuFactory.showMenuAfterButtonClick(e,t)},e.prototype.showColumnMenuAfterMouseClick=function(e,t){e=this.columnController.getGridColumn(e);this.menuFactory.showMenuAfterMouseEvent(e,t)},e.prototype.hidePopupMenu=function(){this.contextMenuFactory&&this.contextMenuFactory.hideActiveMenu(),this.menuFactory.hideActiveMenu()},e.prototype.setPopupParent=function(e){this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_POPUP_PARENT,e)},e.prototype.tabToNextCell=function(){return this.rowRenderer.tabToNextCell(!1)},e.prototype.tabToPreviousCell=function(){return this.rowRenderer.tabToNextCell(!0)},e.prototype.getCellRendererInstances=function(e){return void 0===e&&(e={}),this.rowRenderer.getCellRendererInstances(e)},e.prototype.getCellEditorInstances=function(e){return void 0===e&&(e={}),this.rowRenderer.getCellEditorInstances(e)},e.prototype.getEditingCells=function(){return this.rowRenderer.getEditingCells()},e.prototype.stopEditing=function(e){void 0===e&&(e=!1),this.rowRenderer.stopEditing(e)},e.prototype.startEditingCell=function(e){var t=this.columnController.getGridColumn(e.colKey);t?(t={rowIndex:e.rowIndex,rowPinned:e.rowPinned,column:t},utils_1._.missing(e.rowPinned)&&this.gridPanel.ensureIndexVisible(e.rowIndex),this.rowRenderer.startEditingCell(t,e.keyPress,e.charPress)):console.warn("ag-Grid: no column found for "+e.colKey)},e.prototype.addAggFunc=function(e,t){this.aggFuncService&&this.aggFuncService.addAggFunc(e,t)},e.prototype.addAggFuncs=function(e){this.aggFuncService&&this.aggFuncService.addAggFuncs(e)},e.prototype.clearAggFuncs=function(){this.aggFuncService&&this.aggFuncService.clear()},e.prototype.updateRowData=function(e){var t=null;return this.clientSideRowModel?t=this.clientSideRowModel.updateRowData(e):this.infinitePageRowModel?this.infinitePageRowModel.updateRowData(e):console.error("ag-Grid: updateRowData() only works with ClientSideRowModel and InfiniteRowModel."),this.rowRenderer.refreshFullWidthRows(),this.gridOptionsWrapper.isSuppressChangeDetection()||this.rowRenderer.refreshCells(),t},e.prototype.batchUpdateRowData=function(e,t){this.clientSideRowModel?this.clientSideRowModel.batchUpdateRowData(e,t):console.error("ag-Grid: api.batchUpdateRowData() only works with ClientSideRowModel.")},e.prototype.insertItemsAtIndex=function(e,t,o){void 0===o&&(o=!1),console.warn("ag-Grid: insertItemsAtIndex() is deprecated, use updateRowData(transaction) instead."),this.updateRowData({add:t,addIndex:e,update:null,remove:null})},e.prototype.removeItems=function(e,t){void 0===t&&(t=!1),console.warn("ag-Grid: removeItems() is deprecated, use updateRowData(transaction) instead.");e=e.map(function(e){return e.data});this.updateRowData({add:null,addIndex:null,update:null,remove:e})},e.prototype.addItems=function(e,t){void 0===t&&(t=!1),console.warn("ag-Grid: addItems() is deprecated, use updateRowData(transaction) instead."),this.updateRowData({add:e,addIndex:null,update:null,remove:null})},e.prototype.refreshVirtualPageCache=function(){console.warn("ag-Grid: refreshVirtualPageCache() is now called refreshInfiniteCache(), please call refreshInfiniteCache() instead"),this.refreshInfiniteCache()},e.prototype.refreshInfinitePageCache=function(){console.warn("ag-Grid: refreshInfinitePageCache() is now called refreshInfiniteCache(), please call refreshInfiniteCache() instead"),this.refreshInfiniteCache()},e.prototype.refreshInfiniteCache=function(){this.infinitePageRowModel?this.infinitePageRowModel.refreshCache():console.warn("ag-Grid: api.refreshInfiniteCache is only available when rowModelType='infinite'.")},e.prototype.purgeVirtualPageCache=function(){console.warn("ag-Grid: purgeVirtualPageCache() is now called purgeInfiniteCache(), please call purgeInfiniteCache() instead"),this.purgeInfinitePageCache()},e.prototype.purgeInfinitePageCache=function(){console.warn("ag-Grid: purgeInfinitePageCache() is now called purgeInfiniteCache(), please call purgeInfiniteCache() instead"),this.purgeInfiniteCache()},e.prototype.purgeInfiniteCache=function(){this.infinitePageRowModel?this.infinitePageRowModel.purgeCache():console.warn("ag-Grid: api.purgeInfiniteCache is only available when rowModelType='infinite'.")},e.prototype.purgeEnterpriseCache=function(e){console.warn("ag-grid: since version 18.x, api.purgeEnterpriseCache() should be replaced with api.purgeServerSideCache()"),this.purgeServerSideCache(e)},e.prototype.purgeServerSideCache=function(e){this.serverSideRowModel?this.serverSideRowModel.purgeCache(e):console.warn("ag-Grid: api.purgeServerSideCache is only available when rowModelType='enterprise'.")},e.prototype.getVirtualRowCount=function(){return console.warn("ag-Grid: getVirtualRowCount() is now called getInfiniteRowCount(), please call getInfiniteRowCount() instead"),this.getInfiniteRowCount()},e.prototype.getInfiniteRowCount=function(){if(this.infinitePageRowModel)return this.infinitePageRowModel.getVirtualRowCount();console.warn("ag-Grid: api.getVirtualRowCount is only available when rowModelType='virtual'.")},e.prototype.isMaxRowFound=function(){if(this.infinitePageRowModel)return this.infinitePageRowModel.isMaxRowFound();console.warn("ag-Grid: api.isMaxRowFound is only available when rowModelType='virtual'.")},e.prototype.setVirtualRowCount=function(e,t){console.warn("ag-Grid: setVirtualRowCount() is now called setInfiniteRowCount(), please call setInfiniteRowCount() instead"),this.setInfiniteRowCount(e,t)},e.prototype.setInfiniteRowCount=function(e,t){this.infinitePageRowModel?this.infinitePageRowModel.setVirtualRowCount(e,t):console.warn("ag-Grid: api.setVirtualRowCount is only available when rowModelType='virtual'.")},e.prototype.getVirtualPageState=function(){return console.warn("ag-Grid: getVirtualPageState() is now called getCacheBlockState(), please call getCacheBlockState() instead"),this.getCacheBlockState()},e.prototype.getInfinitePageState=function(){return console.warn("ag-Grid: getInfinitePageState() is now called getCacheBlockState(), please call getCacheBlockState() instead"),this.getCacheBlockState()},e.prototype.getCacheBlockState=function(){return this.infinitePageRowModel?this.infinitePageRowModel.getBlockState():this.serverSideRowModel?this.serverSideRowModel.getBlockState():void console.warn("ag-Grid: api.getCacheBlockState() is only available when rowModelType='infinite' or rowModelType='serverSide'.")},e.prototype.checkGridSize=function(){this.gridPanel.setHeaderAndFloatingHeights()},e.prototype.getFirstRenderedRow=function(){return console.warn("in ag-Grid v12, getFirstRenderedRow() was renamed to getFirstDisplayedRow()"),this.getFirstDisplayedRow()},e.prototype.getFirstDisplayedRow=function(){return this.rowRenderer.getFirstVirtualRenderedRow()},e.prototype.getLastRenderedRow=function(){return console.warn("in ag-Grid v12, getLastRenderedRow() was renamed to getLastDisplayedRow()"),this.getLastDisplayedRow()},e.prototype.getLastDisplayedRow=function(){return this.rowRenderer.getLastVirtualRenderedRow()},e.prototype.getDisplayedRowAtIndex=function(e){return this.rowModel.getRow(e)},e.prototype.getDisplayedRowCount=function(){return this.rowModel.getRowCount()},e.prototype.paginationIsLastPageFound=function(){return this.paginationProxy.isLastPageFound()},e.prototype.paginationGetPageSize=function(){return this.paginationProxy.getPageSize()},e.prototype.paginationSetPageSize=function(e){this.gridOptionsWrapper.setProperty("paginationPageSize",e)},e.prototype.paginationGetCurrentPage=function(){return this.paginationProxy.getCurrentPage()},e.prototype.paginationGetTotalPages=function(){return this.paginationProxy.getTotalPages()},e.prototype.paginationGetRowCount=function(){return this.paginationProxy.getMasterRowCount()},e.prototype.paginationGoToNextPage=function(){this.paginationProxy.goToNextPage()},e.prototype.paginationGoToPreviousPage=function(){this.paginationProxy.goToPreviousPage()},e.prototype.paginationGoToFirstPage=function(){this.paginationProxy.goToFirstPage()},e.prototype.paginationGoToLastPage=function(){this.paginationProxy.goToLastPage()},e.prototype.paginationGoToPage=function(e){this.paginationProxy.goToPage(e)},__decorate([context_1.Autowired("immutableService"),__metadata("design:type",immutableService_1.ImmutableService)],e.prototype,"immutableService",void 0),__decorate([context_1.Autowired("csvCreator"),__metadata("design:type",csvCreator_1.CsvCreator)],e.prototype,"csvCreator",void 0),__decorate([context_1.Optional("excelCreator"),__metadata("design:type",Object)],e.prototype,"excelCreator",void 0),__decorate([context_1.Autowired("rowRenderer"),__metadata("design:type",rowRenderer_1.RowRenderer)],e.prototype,"rowRenderer",void 0),__decorate([context_1.Autowired("filterManager"),__metadata("design:type",filterManager_1.FilterManager)],e.prototype,"filterManager",void 0),__decorate([context_1.Autowired("columnController"),__metadata("design:type",columnController_1.ColumnController)],e.prototype,"columnController",void 0),__decorate([context_1.Autowired("selectionController"),__metadata("design:type",selectionController_1.SelectionController)],e.prototype,"selectionController",void 0),__decorate([context_1.Autowired("gridOptionsWrapper"),__metadata("design:type",gridOptionsWrapper_1.GridOptionsWrapper)],e.prototype,"gridOptionsWrapper",void 0),__decorate([context_1.Autowired("valueService"),__metadata("design:type",valueService_1.ValueService)],e.prototype,"valueService",void 0),__decorate([context_1.Autowired("alignedGridsService"),__metadata("design:type",alignedGridsService_1.AlignedGridsService)],e.prototype,"alignedGridsService",void 0),__decorate([context_1.Autowired("eventService"),__metadata("design:type",eventService_1.EventService)],e.prototype,"eventService",void 0),__decorate([context_1.Autowired("pinnedRowModel"),__metadata("design:type",pinnedRowModel_1.PinnedRowModel)],e.prototype,"pinnedRowModel",void 0),__decorate([context_1.Autowired("context"),__metadata("design:type",context_1.Context)],e.prototype,"context",void 0),__decorate([context_1.Autowired("rowModel"),__metadata("design:type",Object)],e.prototype,"rowModel",void 0),__decorate([context_1.Autowired("sortController"),__metadata("design:type",sortController_1.SortController)],e.prototype,"sortController",void 0),__decorate([context_1.Autowired("paginationProxy"),__metadata("design:type",paginationProxy_1.PaginationProxy)],e.prototype,"paginationProxy",void 0),__decorate([context_1.Autowired("focusedCellController"),__metadata("design:type",focusedCellController_1.FocusedCellController)],e.prototype,"focusedCellController",void 0),__decorate([context_1.Optional("rangeController"),__metadata("design:type",Object)],e.prototype,"rangeController",void 0),__decorate([context_1.Optional("clipboardService"),__metadata("design:type",Object)],e.prototype,"clipboardService",void 0),__decorate([context_1.Optional("aggFuncService"),__metadata("design:type",Object)],e.prototype,"aggFuncService",void 0),__decorate([context_1.Autowired("menuFactory"),__metadata("design:type",Object)],e.prototype,"menuFactory",void 0),__decorate([context_1.Optional("contextMenuFactory"),__metadata("design:type",Object)],e.prototype,"contextMenuFactory",void 0),__decorate([context_1.Autowired("cellRendererFactory"),__metadata("design:type",cellRendererFactory_1.CellRendererFactory)],e.prototype,"cellRendererFactory",void 0),__decorate([context_1.Autowired("valueCache"),__metadata("design:type",valueCache_1.ValueCache)],e.prototype,"valueCache",void 0),__decorate([context_1.Optional("sideBarComp"),__metadata("design:type",Object)],e.prototype,"sideBarComp",void 0),__decorate([context_1.Autowired("animationFrameService"),__metadata("design:type",animationFrameService_1.AnimationFrameService)],e.prototype,"animationFrameService",void 0),__decorate([context_1.Optional("statusBarService"),__metadata("design:type",Object)],e.prototype,"statusBarService",void 0),__decorate([context_1.Optional("chartService"),__metadata("design:type",Object)],e.prototype,"chartService",void 0),__decorate([context_1.PostConstruct,__metadata("design:type",Function),__metadata("design:paramtypes",[]),__metadata("design:returntype",void 0)],e.prototype,"init",null),__decorate([context_1.Bean("gridApi")],e)}();exports.GridApi=GridApi;