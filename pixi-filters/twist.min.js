/*!
 * pixi-filters - v1.0.8
 * Compiled Tue, 18 Jul 2017 02:27:01 UTC
 *
 * pixi-filters is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
!function(o){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=o();else if("function"==typeof define&&define.amd)define([],o);else{var n;n="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,n.twist=o()}}(function(){return function o(n,e,r){function t(f,d){if(!e[f]){if(!n[f]){var c="function"==typeof require&&require;if(!d&&c)return c(f,!0);if(i)return i(f,!0);var u=new Error("Cannot find module '"+f+"'");throw u.code="MODULE_NOT_FOUND",u}var s=e[f]={exports:{}};n[f][0].call(s.exports,function(o){var e=n[f][1][o];return t(e||o)},s,s.exports,o,n,e,r)}return e[f].exports}for(var i="function"==typeof require&&require,f=0;f<r.length;f++)t(r[f]);return t}({1:[function(o,n,e){if("undefined"==typeof PIXI)throw new Error("pixi.js is required to be included")},{}],2:[function(o,n,e){function r(){PIXI.Filter.call(this,"#define GLSLIFY 1\nattribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}","#define GLSLIFY 1\nvarying vec2 vTextureCoord;\n\nuniform sampler2D uSampler;\nuniform float radius;\nuniform float angle;\nuniform vec2 offset;\nuniform vec4 filterArea;\n\nvec2 mapCoord( vec2 coord )\n{\n    coord *= filterArea.xy;\n    coord += filterArea.zw;\n\n    return coord;\n}\n\nvec2 unmapCoord( vec2 coord )\n{\n    coord -= filterArea.zw;\n    coord /= filterArea.xy;\n\n    return coord;\n}\n\nvec2 twist(vec2 coord)\n{\n    coord -= offset;\n\n    float dist = length(coord);\n\n    if (dist < radius)\n    {\n        float ratioDist = (radius - dist) / radius;\n        float angleMod = ratioDist * ratioDist * angle;\n        float s = sin(angleMod);\n        float c = cos(angleMod);\n        coord = vec2(coord.x * c - coord.y * s, coord.x * s + coord.y * c);\n    }\n\n    coord += offset;\n\n    return coord;\n}\n\nvoid main(void)\n{\n\n    vec2 coord = mapCoord(vTextureCoord);\n\n    coord = twist(coord);\n\n    coord = unmapCoord(coord);\n\n    gl_FragColor = texture2D(uSampler, coord );\n\n}\n"),this.radius=200,this.angle=4,this.padding=20}r.prototype=Object.create(PIXI.Filter.prototype),r.prototype.constructor=r,n.exports=r,Object.defineProperties(r.prototype,{offset:{get:function(){return this.uniforms.offset},set:function(o){this.uniforms.offset=o}},radius:{get:function(){return this.uniforms.radius},set:function(o){this.uniforms.radius=o}},angle:{get:function(){return this.uniforms.angle},set:function(o){this.uniforms.angle=o}}})},{}],3:[function(o,n,e){o("../check");var r=PIXI.filters.TwistFilter=o("./TwistFilter");void 0!==n&&n.exports&&(n.exports=r)},{"../check":1,"./TwistFilter":2}]},{},[3])(3)});
//# sourceMappingURL=twist.min.js.map
