import _defineProperty from"@babel/runtime/helpers/defineProperty";import _typeof from"@babel/runtime/helpers/typeof";import _slicedToArray from"@babel/runtime/helpers/slicedToArray";import _objectWithoutProperties from"@babel/runtime/helpers/objectWithoutProperties";import _extends from"@babel/runtime/helpers/extends";var _excluded=["children","isShown","offsetX","offsetY","alignX","alignY","onClose","cornerOffset","cornerAbsoluteOffset"];import{createScopedElement}from"../../lib/jsxRuntime";import*as React from"react";import ReactDOM from"react-dom";import{classNames}from"../../lib/classNames";import{getClassName}from"../../helpers/getClassName";import{Subhead}from"../Typography/Subhead/Subhead";import{useNavTransition}from"../NavTransitionContext/NavTransitionContext";import{usePopper}from"react-popper";import{tooltipContainerAttr}from"./TooltipContainer";import{useExternRef}from"../../hooks/useExternRef";import{useDOM}from"../../lib/dom";import{warnOnce}from"../../lib/warnOnce";import{hasReactNode}from"../../lib/utils";import{useGlobalEventListener}from"../../hooks/useGlobalEventListener";import"./Tooltip.css";var isDOMTypeElement=function(e){return React.isValidElement(e)&&"string"==typeof e.type},baseClassName=getClassName("Tooltip"),warn=warnOnce("Tooltip"),IS_DEV="development"===process.env.NODE_ENV,SimpleTooltip=React.forwardRef(function(e,t){var o=e.mode,r=e.header,i=e.text,n=e.arrowRef,a=e.style,a=void 0===a?{}:a,e=e.attributes;return createScopedElement("div",{vkuiClass:classNames(baseClassName,"Tooltip--".concat(void 0===o?"accent":o))},createScopedElement("div",_extends({vkuiClass:"Tooltip__container",ref:t,style:a.container},null==e?void 0:e.container),createScopedElement("div",_extends({vkuiClass:"Tooltip__corner",style:a.arrow},null==e?void 0:e.arrow,{ref:n})),createScopedElement("div",{vkuiClass:"Tooltip__content"},r&&createScopedElement(Subhead,{weight:"1",vkuiClass:"Tooltip__title"},r),i&&createScopedElement(Subhead,{vkuiClass:"Tooltip__text"},i))))});function mapAlignX(e){switch(e){case"left":return"start";case"right":return"end";default:return""}}function getPlacement(e,t){return[t||"bottom",mapAlignX(e||"left")].filter(function(e){return!!e}).join("-")}function isVerticalPlacement(e){return e.startsWith("top")||e.startsWith("bottom")}var Tooltip=function(e){var t=e.children,o=e.isShown,r=e.offsetX,r=void 0===r?0:r,i=e.offsetY,i=void 0===i?15:i,n=e.alignX,a=e.alignY,l=e.onClose,s=e.cornerOffset,c=void 0===s?0:s,m=e.cornerAbsoluteOffset,s=_objectWithoutProperties(e,_excluded),e=useNavTransition().entering,o=o&&!e,e=React.useState(null),e=_slicedToArray(e,2),p=e[0],f=e[1],e=React.useState(null),e=_slicedToArray(e,2),u=e[0],d=e[1],e=React.useState(),e=_slicedToArray(e,2),v=e[0],e=e[1],b=(IS_DEV&&(b=1<React.Children.count(t),h=hasReactNode(t)&&"object"!==_typeof(t),(b||h)&&warn(["children must be a single React element, got",b&&"multiple",h&&JSON.stringify(t)].filter(Boolean).join(" "),"error")),React.useMemo(function(){return null==v?void 0:v.closest("[".concat(tooltipContainerAttr,"]"))},[v])),h=React.useMemo(function(){return"fixed"===(null==v?void 0:v.style.position)?"fixed":"absolute"},[v]);if(IS_DEV&&v&&!b)throw new Error("Use TooltipContainer for Tooltip outside Panel (see docs)");var w=React.useMemo(function(){return{name:"arrowOffset",enabled:!0,phase:"main",fn:function(e){var t,e=e.state;e.modifiersData.arrow&&(isVerticalPlacement(e.placement)?void 0!==m?e.modifiersData.arrow.x=m:void 0!==(null==(t=e.modifiersData.arrow)?void 0:t.x)&&(e.modifiersData.arrow.x+=c):void 0!==m?e.modifiersData.arrow.y=m:void 0!==(null==(t=e.modifiersData.arrow)?void 0:t.y)&&(e.modifiersData.arrow.y+=c))}}},[c,m]),n=getPlacement(n,a),a=usePopper(v,p,{strategy:h,placement:n,modifiers:[{name:"offset",options:{offset:[r,i]}},{name:"arrow",options:{element:u,padding:14}},{name:"preventOverflow"},{name:"flip"},w]}),p=a.styles,h=a.attributes,n=useDOM().document,r=(useGlobalEventListener(n,"click",o&&l,{passive:!0}),React.isValidElement(t)&&(isDOMTypeElement(t)?t.ref:t.props.getRootRef)),i=useExternRef(e,r),u=React.isValidElement(t)?React.cloneElement(t,_defineProperty({},isDOMTypeElement(t)?"ref":"getRootRef",i)):t;return createScopedElement(React.Fragment,null,u,o&&null!=v&&ReactDOM.createPortal(createScopedElement(SimpleTooltip,_extends({},s,{ref:function(e){return f(e)},arrowRef:function(e){return d(e)},style:{arrow:p.arrow,container:p.popper},attributes:{arrow:null!=(w=h.arrow)?w:null,container:null!=(a=h.popper)?a:null}})),b))};Tooltip.defaultProps={offsetX:0,offsetY:15,cornerOffset:0,isShown:!0,mode:"accent"};export default Tooltip;