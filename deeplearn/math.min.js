"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var environment_1=require("./environment"),array_ops_1=require("./ops/array_ops"),batchnorm_1=require("./ops/batchnorm"),binary_ops_1=require("./ops/binary_ops"),compare_1=require("./ops/compare"),conv_1=require("./ops/conv"),image_ops_1=require("./ops/image_ops"),logical_ops_1=require("./ops/logical_ops"),lrn_1=require("./ops/lrn"),lstm_1=require("./ops/lstm"),matmul_1=require("./ops/matmul"),norm_1=require("./ops/norm"),ops=require("./ops/ops"),pool_1=require("./ops/pool"),reduction_ops_1=require("./ops/reduction_ops"),reverse_1=require("./ops/reverse"),slice_1=require("./ops/slice"),softmax_1=require("./ops/softmax"),transpose_1=require("./ops/transpose"),unary_ops_1=require("./ops/unary_ops"),tracking_1=require("./tracking"),util=require("./util"),tidy=tracking_1.Tracking.tidy,keep=tracking_1.Tracking.keep,NDArrayMath=function(){function r(r,s){this.matMul=matmul_1.MatmulOps.matMul,this.vectorTimesMatrix=matmul_1.MatmulOps.vectorTimesMatrix,this.outerProduct=matmul_1.MatmulOps.outerProduct,this.matrixTimesVector=matmul_1.MatmulOps.matrixTimesVector,this.dotProduct=matmul_1.MatmulOps.dotProduct,this.slice=slice_1.SliceOps.slice,this.slice1D=slice_1.SliceOps.slice1d,this.slice2D=slice_1.SliceOps.slice2d,this.slice3D=slice_1.SliceOps.slice3d,this.slice4D=slice_1.SliceOps.slice4d,this.reverse=reverse_1.ReverseOps.reverse,this.reverse1D=reverse_1.ReverseOps.reverse1d,this.reverse2D=reverse_1.ReverseOps.reverse2d,this.reverse3D=reverse_1.ReverseOps.reverse3d,this.reverse4D=reverse_1.ReverseOps.reverse4d,this.batchNormalization=batchnorm_1.BatchNormOps.batchNormalization,this.batchNormalization2D=batchnorm_1.BatchNormOps.batchNormalization2d,this.batchNormalization3D=batchnorm_1.BatchNormOps.batchNormalization3d,this.batchNormalization4D=batchnorm_1.BatchNormOps.batchNormalization4d,this.avgPool=pool_1.PoolOps.avgPool,this.maxPool=pool_1.PoolOps.maxPool,this.minPool=pool_1.PoolOps.minPool,this.maxPoolBackprop=pool_1.PoolOps.maxPoolBackprop,this.conv2dTranspose=conv_1.ConvOps.conv2dTranspose,this.depthwiseConv2D=conv_1.ConvOps.depthwiseConv2d,this.conv2dDerFilter=conv_1.ConvOps.conv2dDerFilter,this.conv2dDerInput=conv_1.ConvOps.conv2dDerInput,this.argMax=reduction_ops_1.ReductionOps.argMax,this.argMin=reduction_ops_1.ReductionOps.argMin,this.logSumExp=reduction_ops_1.ReductionOps.logSumExp,this.max=reduction_ops_1.ReductionOps.max,this.mean=reduction_ops_1.ReductionOps.mean,this.min=reduction_ops_1.ReductionOps.min,this.moments=reduction_ops_1.ReductionOps.moments,this.sum=reduction_ops_1.ReductionOps.sum,this.add=binary_ops_1.BinaryOps.add,this.addStrict=binary_ops_1.BinaryOps.addStrict,this.div=binary_ops_1.BinaryOps.div,this.divide=this.div,this.divStrict=binary_ops_1.BinaryOps.divStrict,this.divideStrict=this.divStrict,this.maximum=binary_ops_1.BinaryOps.maximum,this.maximumStrict=binary_ops_1.BinaryOps.maximumStrict,this.minimum=binary_ops_1.BinaryOps.minimum,this.minimumStrict=binary_ops_1.BinaryOps.minimumStrict,this.mul=binary_ops_1.BinaryOps.mul,this.multiply=this.mul,this.mulStrict=binary_ops_1.BinaryOps.mulStrict,this.multiplyStrict=this.mulStrict,this.pow=binary_ops_1.BinaryOps.pow,this.powStrict=binary_ops_1.BinaryOps.powStrict,this.sub=binary_ops_1.BinaryOps.sub,this.subtract=this.sub,this.subStrict=binary_ops_1.BinaryOps.subStrict,this.logicalNot=logical_ops_1.LogicalOps.logicalNot,this.logicalAnd=logical_ops_1.LogicalOps.logicalAnd,this.logicalOr=logical_ops_1.LogicalOps.logicalOr,this.logicalXor=logical_ops_1.LogicalOps.logicalXor,this.where=logical_ops_1.LogicalOps.where,this.transpose=transpose_1.TransposeOps.transpose,this.equal=compare_1.CompareOps.equal,this.equalStrict=compare_1.CompareOps.equalStrict,this.greater=compare_1.CompareOps.greater,this.greaterStrict=compare_1.CompareOps.greaterStrict,this.greaterEqual=compare_1.CompareOps.greaterEqual,this.greaterEqualStrict=compare_1.CompareOps.greaterEqualStrict,this.less=compare_1.CompareOps.less,this.lessStrict=compare_1.CompareOps.lessStrict,this.lessEqual=compare_1.CompareOps.lessEqual,this.lessEqualStrict=compare_1.CompareOps.lessEqualStrict,this.notEqual=compare_1.CompareOps.notEqual,this.notEqualStrict=compare_1.CompareOps.notEqualStrict,this.abs=unary_ops_1.UnaryOps.abs,this.acos=unary_ops_1.UnaryOps.acos,this.asin=unary_ops_1.UnaryOps.asin,this.atan=unary_ops_1.UnaryOps.atan,this.ceil=unary_ops_1.UnaryOps.ceil,this.clip=unary_ops_1.UnaryOps.clipByValue,this.cos=unary_ops_1.UnaryOps.cos,this.cosh=unary_ops_1.UnaryOps.cosh,this.elu=unary_ops_1.UnaryOps.elu,this.exp=unary_ops_1.UnaryOps.exp,this.floor=unary_ops_1.UnaryOps.floor,this.leakyRelu=unary_ops_1.UnaryOps.leakyRelu,this.log=unary_ops_1.UnaryOps.log,this.neg=unary_ops_1.UnaryOps.neg,this.prelu=unary_ops_1.UnaryOps.prelu,this.relu=unary_ops_1.UnaryOps.relu,this.selu=unary_ops_1.UnaryOps.selu,this.sigmoid=unary_ops_1.UnaryOps.sigmoid,this.sin=unary_ops_1.UnaryOps.sin,this.sinh=unary_ops_1.UnaryOps.sinh,this.sqrt=unary_ops_1.UnaryOps.sqrt,this.square=unary_ops_1.UnaryOps.square,this.step=unary_ops_1.UnaryOps.step,this.tan=unary_ops_1.UnaryOps.tan,this.tanh=unary_ops_1.UnaryOps.tanh,this.norm=norm_1.NormOps.norm,this.basicLSTMCell=lstm_1.LSTMOps.basicLSTMCell,this.multiRNNCell=lstm_1.LSTMOps.multiRNNCell,this.softmax=softmax_1.SoftmaxOps.softmax,this.softmaxCrossEntropy=softmax_1.SoftmaxOps.softmaxCrossEntropy,this.cast=array_ops_1.ArrayOps.cast,this.clone=array_ops_1.ArrayOps.clone,this.gather=array_ops_1.ArrayOps.gather,this.reshape=array_ops_1.ArrayOps.reshape,this.tile=array_ops_1.ArrayOps.tile,this.oneHot=array_ops_1.ArrayOps.oneHot,this.multinomial=array_ops_1.ArrayOps.multinomial,this.pad1D=array_ops_1.ArrayOps.pad1d,this.pad2D=array_ops_1.ArrayOps.pad2d,this.resizeBilinear3D=image_ops_1.ImageOps.resizeBilinear,this.localResponseNormalization3D=lrn_1.LRNOps.localResponseNormalization,this.localResponseNormalization4D=lrn_1.LRNOps.localResponseNormalization,this.keep=tracking_1.Tracking.keep,environment_1.ENV.setMath(this,r,s),this.engine=environment_1.ENV.engine,this.dispose=environment_1.ENV.engine.dispose.bind(environment_1.ENV.engine),this.registeredVariables=environment_1.ENV.engine.registeredVariables,this.startScope=environment_1.ENV.engine.startScope.bind(environment_1.ENV.engine),this.endScope=environment_1.ENV.engine.endScope.bind(environment_1.ENV.engine)}return r.prototype.scope=function(r){function s(r){return keep(r)}function t(r){return r}return tidy(function(){return r(s,t)})},r.prototype.track=function(r){return r},r.prototype.topK=function(s,t){var r,i;return util.assert(t<=s.size,"Error in topK: k value ("+t+") must be less than size of input tensor, got shape "+s.shape+"."),tidy("topK",function(){return r=environment_1.ENV.engine.runKernel(function(r){return r.topKValues(s,t)},{x:s}),i=environment_1.ENV.engine.runKernel(function(r){return r.topKIndices(s,t)},{x:s}),r}),{values:r,indices:i}},r.prototype.elementWiseMul=function(r,s){return r.mulStrict(s)},r.prototype.scalarDividedByArray=function(r,s){return util.assert(1===r.size,"Error in scalarDividedByArray: first argument must be rank 0, but got Tensor of rank "+r.rank+"."),r.div(s)},r.prototype.arrayDividedByScalar=function(r,s){return util.assert(1===s.size,"Error in arrayDividedByScalar: second argument must be rank 0, but got Tensor of rank "+s.rank+"."),r.div(s)},r.prototype.switchDim=function(r,s){return ops.transpose(r,s)},r.prototype.scalarPlusArray=function(r,s){return util.assert(1===r.size,"Error in scalarPlusArray: first argument must be rank 0, but got rank "+r.rank+"."),this.add(r,s)},r.prototype.scalarMinusArray=function(r,s){return util.assert(1===r.size,"Error in scalarMinusArray: first argument must be rank 0, but got rank "+r.rank+"."),this.subtract(r,s)},r.prototype.arrayMinusScalar=function(r,s){return util.assert(1===s.size,"Error in arrayMinusScalar: second argument must be rank 0, but got rank "+s.rank+"."),this.subtract(r,s)},r.prototype.scaledArrayAdd=function(r,s,t,i){var e=this;return util.assert(1===r.size,"Error in scaledArrayAdd: first argument must rank 0, but got  rank "+r.rank+"."),util.assert(1===t.size,"Error in scaledArrayAdd: third argument must be rank 0, but got Tensor of rank "+t.rank+"."),util.assertShapesMatch(s.shape,i.shape,"Error in scaledArrayAdd: "),tidy("scaledArrayAdd",function(){return e.add(e.multiply(r,s),e.multiply(t,i))})},r.prototype.scalarTimesArray=function(r,s){return util.assert(1===r.size,"Error in arrayDividedByScalar: first argument must be rank 0, but got rank "+r.rank+"."),this.multiply(r,s)},r.prototype.concat=function(r,s,t){return ops.concat([r,s],t)},r.prototype.concat1D=function(r,s){return ops.concat1d([r,s])},r.prototype.concat2D=function(r,s,t){return ops.concat2d([r,s],t)},r.prototype.concat3D=function(r,s,t){return ops.concat3d([r,s],t)},r.prototype.concat4D=function(r,s,t){return ops.concat4d([r,s],t)},r.prototype.conv1d=function(r,s,t,i,e,a){return null!=t&&util.assert(1===t.rank,"Error in conv1d: bias must be rank 1, but got rank "+t.rank+"."),ops.conv1d(r,s,i,e,a).add(t)},r.prototype.conv2d=function(r,s,t,i,e,a){return null!=t&&util.assert(1===t.rank,"Error in conv2d: bias must be rank 1, but got rank "+t.rank+"."),ops.conv2d(r,s,i,e,a).add(t)},r.prototype.argMaxEquals=function(r,s){return util.assertShapesMatch(r.shape,s.shape,"Error in argMaxEquals: "),r.argMax().equal(s.argMax())},r}();exports.NDArrayMath=NDArrayMath;