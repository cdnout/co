"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var environment_1=require("./environment"),backend_cpu_1=require("./kernels/backend_cpu"),backend_webgl_1=require("./kernels/backend_webgl"),tensor_1=require("./tensor"),util=require("./util");function expectArraysClose(e,r,n){if(void 0===n&&(n=exports.TEST_EPSILON),e instanceof tensor_1.Tensor||r instanceof tensor_1.Tensor){if(e instanceof tensor_1.Tensor&&r instanceof tensor_1.Tensor){if(e.dtype!==r.dtype)throw new Error("Arrays are of different type actual: "+e.dtype+" vs expected: "+r.dtype+".");if(!util.arraysEqual(e.shape,r.shape))throw new Error("Arrays are of different shape actual: "+e.shape+" vs expected: "+r.shape+".")}}else{var t=e.constructor.name,s=r.constructor.name;if(t!==s)throw new Error("Arrays are of different type actual: "+t+" vs expected: "+s)}var a=e instanceof tensor_1.Tensor?e.dataSync():e,o=r instanceof tensor_1.Tensor?r.dataSync():r;if(a.length!==o.length)throw new Error("Arrays have different lengths actual: "+a.length+" vs expected: "+o.length+".\nActual:   "+a+".\nExpected: "+o+".");for(var c=0;c<o.length;++c){var i=a[c],u=o[c];if(!areClose(i,Number(u),n))throw new Error("Arrays differ: actual["+c+"] = "+i+", expected["+c+"] = "+u+".\nActual:   "+a+".\nExpected: "+o+".")}}function expectArraysEqual(e,r){return expectArraysClose(e,r,0)}function expectNumbersClose(e,r,n){if(void 0===n&&(n=exports.TEST_EPSILON),!areClose(e,r,n))throw new Error("Numbers differ: actual === "+e+", expected === "+r)}function areClose(e,r,n){return!(!isNaN(e)||!isNaN(r))||!(isNaN(e)||isNaN(r)||Math.abs(e-r)>n)}function expectValuesInRange(e,r,n){for(var t=e instanceof tensor_1.Tensor?e.dataSync():e,s=0;s<t.length;s++)if(t[s]<r||t[s]>n)throw new Error("Value out of range:"+t[s]+" low: "+r+", high: "+n)}function describeWithFlags(r,e,n){e.forEach(function(e){executeTests(r+" "+JSON.stringify(e),n,e)})}function executeTests(e,r,n){describe(e,function(){beforeEach(function(){environment_1.ENV.setFeatures(n||{}),environment_1.ENV.addCustomBackend("webgl",function(){return new backend_webgl_1.MathBackendWebGL}),environment_1.ENV.addCustomBackend("cpu",function(){return new backend_cpu_1.MathBackendCPU}),n&&null!=n.BACKEND&&environment_1.Environment.setBackend(n.BACKEND),environment_1.ENV.engine.startScope()}),afterEach(function(){environment_1.ENV.engine.endScope(null),environment_1.ENV.reset()}),r()})}function assertIsNan(e,r){if(!util.isValNaN(e,r))throw new Error("Value "+e+" does not represent NaN for dtype "+r)}exports.WEBGL_ENVS=[{BACKEND:"webgl",WEBGL_FLOAT_TEXTURE_ENABLED:!0,WEBGL_VERSION:1},{BACKEND:"webgl",WEBGL_FLOAT_TEXTURE_ENABLED:!0,WEBGL_VERSION:2}],exports.CPU_ENVS=[{BACKEND:"cpu"}],exports.ALL_ENVS=exports.WEBGL_ENVS.concat(exports.CPU_ENVS),exports.TEST_EPSILON=.001,exports.expectArraysClose=expectArraysClose,exports.expectArraysEqual=expectArraysEqual,exports.expectNumbersClose=expectNumbersClose,exports.expectValuesInRange=expectValuesInRange,exports.describeWithFlags=describeWithFlags,exports.assertIsNan=assertIsNan;