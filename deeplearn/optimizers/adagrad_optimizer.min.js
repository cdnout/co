"use strict";var __extends=this&&this.__extends||function(){var r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])};return function(e,t){function a(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(a.prototype=t.prototype,new a)}}();Object.defineProperty(exports,"__esModule",{value:!0});var environment_1=require("../environment"),globals_1=require("../globals"),tensor_array_map_1=require("../graph/tensor_array_map"),ops_1=require("../ops/ops"),tensor_1=require("../tensor"),optimizer_1=require("./optimizer"),AdagradOptimizer=function(o){function e(e,t,a){void 0===a&&(a=.1);var r=o.call(this,e,t)||this;return r.learningRate=e,r.initialAccumulatorValue=a,r.accumulatedGrads={},r.accumulatedSquaredGradients=new tensor_array_map_1.TensorArrayMap,r.c=globals_1.keep(ops_1.scalar(-e)),r.epsilon=globals_1.keep(ops_1.scalar(1e-8)),r}return __extends(e,o),e.prototype.applyGradients=function(e){function t(a){var r=environment_1.ENV.engine.registeredVariables[a];null==n.accumulatedGrads[a]&&globals_1.tidy(function(){o.accumulatedGrads[a]=ops_1.fill(r.shape,o.initialAccumulatorValue).variable(!1)});var s=e[a],i=n.accumulatedGrads[a];globals_1.tidy(function(){var e=i.add(s.square());o.accumulatedGrads[a].assign(e);var t=o.c.mul(s.div(e.add(o.epsilon).sqrt())).add(r);r.assign(t)})}var o=this,n=this;for(var a in e)t(a)},e.prototype.beforeBatch=function(e,t,a,r,s){var i=this;o.prototype.beforeBatch.call(this,e,t,a,r,s),0===this.accumulatedSquaredGradients.size()&&this.variableNodes.forEach(function(e){i.accumulatedSquaredGradients.set(e.output,tensor_1.Tensor.zeros(e.output.shape))})},e.prototype.afterBatch=function(n,e,t,u,a){var d=this;null==this.one&&(this.one=globals_1.keep(ops_1.scalar(1))),globals_1.tidy(function(){d.variableNodes.forEach(function(e){var t=u.get(e.output),a=d.variableGradients.get(e.output),r=d.accumulatedSquaredGradients.get(e.output),s=n.multiply(a,a),i=n.add(r,s),o=n.scaledArrayAdd(d.cGraph,n.divide(a,n.add(n.sqrt(i),d.epsilon)),d.one,t);d.accumulatedSquaredGradients.set(e.output,globals_1.keep(i)),u.set(e.output,globals_1.keep(o)),e.data=o,t.dispose(),r.dispose()})}),this.variableGradients.dispose(),this.variableGradients=new tensor_array_map_1.TensorArrayMap},e.prototype.dispose=function(){var t=this;o.prototype.dispose.call(this),this.epsilon.dispose(),this.c.dispose(),null!=this.one&&this.one.dispose(),null!=this.accumulatedSquaredGradients&&this.accumulatedSquaredGradients.dispose(),null!=this.accumulatedGrads&&Object.keys(this.accumulatedGrads).forEach(function(e){return t.accumulatedGrads[e].dispose()})},e}(optimizer_1.Optimizer);exports.AdagradOptimizer=AdagradOptimizer;