"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var AvgPool2DBackpropProgram=function(n){this.variableNames=["dy"],this.outputShape=n.inShape;var t=n.filterHeight,o=n.filterWidth,d=n.strideHeight,r=n.strideWidth,e=t-1-n.padInfo.top,i=o-1-n.padInfo.left,a=1/(t*o);this.userCode="\n      const ivec2 pads = ivec2("+e+", "+i+");\n      const float avgMultiplier = float("+a+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < "+t+"; wR++) {\n          float dyR = float(dyRCorner + wR) / "+d+".0;\n\n          if (dyR < 0.0 || dyR >= "+n.outHeight+".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < "+o+"; wC++) {\n            float dyC = float(dyCCorner + wC) / "+r+".0;\n\n            if (dyC < 0.0 || dyC >= "+n.outWidth+".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    "};exports.AvgPool2DBackpropProgram=AvgPool2DBackpropProgram;