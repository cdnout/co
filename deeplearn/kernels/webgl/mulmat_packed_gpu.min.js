"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var matmul_1=require("../../ops/matmul"),gpgpu_context_1=require("./gpgpu_context"),webgl_util=require("./webgl_util");function getFragmentShaderSource(t,e,r){var a=Math.ceil(t/2),i=e===matmul_1.MatrixOrientation.REGULAR?"center, resultUV.t":"resultUV.t, center",n=r===matmul_1.MatrixOrientation.REGULAR?"resultUV.s, center":"center, resultUV.s",o=e===matmul_1.MatrixOrientation.REGULAR?["a.xxzz","a.yyww"]:["a.xxyy","a.zzww"],u=r===matmul_1.MatrixOrientation.REGULAR?["b.xyxy","b.zwzw"]:["b.xzxz","b.ywyw"];return"\n    precision highp float;\n    uniform sampler2D matrixA;\n    uniform sampler2D matrixB;\n    varying vec2 resultUV;\n\n    const float sharedDimension = "+a+".0;\n\n    vec4 dot2x2ARowBCol() {\n      vec4 result = vec4(0, 0, 0, 0);\n      for (int ii = 0; ii < "+a+"; ii++) {\n        float i = float(ii);\n        float center = (i + 0.5) / sharedDimension;\n        vec4 a = texture2D(matrixA, vec2("+i+"));\n        vec4 b = texture2D(matrixB, vec2("+n+"));\n        result +=\n          ("+o[0]+" * "+u[0]+") + ("+o[1]+" * "+u[1]+");\n      }\n      return result;\n    }\n\n    void main() {\n      gl_FragColor = dot2x2ARowBCol();\n    }"}function multiplyMatrixPacked(t,e,r,a,i,n){t.setOutputPackedMatrixTexture(i,n[0],n[1]),t.setProgram(e);var o=webgl_util.getProgramUniformLocationOrThrow(t.gl,e,"matrixA"),u=webgl_util.getProgramUniformLocationOrThrow(t.gl,e,"matrixB");t.setInputMatrixTexture(r,o,0),t.setInputMatrixTexture(a,u,1),t.executeProgram()}function uploadMultiplyMatrixPackedDownload(t,e,r,a,i,n){void 0===i&&(i=matmul_1.MatrixOrientation.REGULAR),void 0===n&&(n=matmul_1.MatrixOrientation.REGULAR);var o=i===matmul_1.MatrixOrientation.REGULAR?e[0]:e[1],u=n===matmul_1.MatrixOrientation.REGULAR?a[1]:a[0],l=i===matmul_1.MatrixOrientation.REGULAR?e[1]:e[0],x=new gpgpu_context_1.GPGPUContext,m=x.createProgram(getFragmentShaderSource(l,i,n)),c=x.createPackedMatrixTexture(e[0],e[1]),d=x.createPackedMatrixTexture(a[0],a[1]),M=x.createPackedMatrixTexture(o,u);x.uploadMatrixToPackedTexture(c,e[0],e[1],t),x.uploadMatrixToPackedTexture(d,a[0],a[1],r),multiplyMatrixPacked(x,m,c,d,M,[o,u]);var g=x.downloadMatrixFromPackedTexture(M,o,u);return x.deleteMatrixTexture(c),x.deleteMatrixTexture(d),x.deleteMatrixTexture(M),x.deleteProgram(m),x.dispose(),g}exports.getFragmentShaderSource=getFragmentShaderSource,exports.multiplyMatrixPacked=multiplyMatrixPacked,exports.uploadMultiplyMatrixPackedDownload=uploadMultiplyMatrixPackedDownload;