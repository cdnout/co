"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var ResizeBilinearProgram=function(e,o,t,n){this.variableNames=["A"],this.outputShape=[];var r=e[0],c=e[1],i=e[2],u=e[3];this.outputShape=[r,o,t,u];var a=n?[c-1,i-1]:[c,i],s=n?[o-1,t-1]:[o,t];this.userCode="\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          "+a[0]/s[0]+",\n          "+a[1]/s[1]+");\n      const vec2 inputShapeRC = vec2("+c+".0, "+i+".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    "};exports.ResizeBilinearProgram=ResizeBilinearProgram;