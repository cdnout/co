let hasPassiveEvents=!1;if("undefined"!=typeof window){const e={get passive(){hasPassiveEvents=!0}};window.addEventListener("testPassive",null,e),window.removeEventListener("testPassive",null,e)}const isIosDevice="undefined"!=typeof window&&window.navigator&&window.navigator.platform&&(/iP(ad|hone|od)/.test(window.navigator.platform)||"MacIntel"===window.navigator.platform&&window.navigator.maxTouchPoints>1);let previousBodyOverflowSetting,previousBodyPaddingRight,locks=[],documentListenerAdded=!1,initialClientY=-1;const allowTouchMove=e=>locks.some(o=>!(!o.options.allowTouchMove||!o.options.allowTouchMove(e))),preventDefault=e=>{const o=e||window.event;return!!allowTouchMove(o.target)||(o.touches.length>1||(o.preventDefault&&o.preventDefault(),!1))},setOverflowHidden=e=>{if(void 0===previousBodyPaddingRight){const o=!!e&&!0===e.reserveScrollBarGap,t=window.innerWidth-document.documentElement.clientWidth;o&&t>0&&(previousBodyPaddingRight=document.body.style.paddingRight,document.body.style.paddingRight=`${t}px`)}void 0===previousBodyOverflowSetting&&(previousBodyOverflowSetting=document.body.style.overflow,document.body.style.overflow="hidden")},restoreOverflowSetting=()=>{void 0!==previousBodyPaddingRight&&(document.body.style.paddingRight=previousBodyPaddingRight,previousBodyPaddingRight=void 0),void 0!==previousBodyOverflowSetting&&(document.body.style.overflow=previousBodyOverflowSetting,previousBodyOverflowSetting=void 0)},isTargetElementTotallyScrolled=e=>!!e&&e.scrollHeight-e.scrollTop<=e.clientHeight,handleScroll=(e,o)=>{const t=e.targetTouches[0].clientY-initialClientY;return!allowTouchMove(e.target)&&(o&&0===o.scrollTop&&t>0?preventDefault(e):isTargetElementTotallyScrolled(o)&&t<0?preventDefault(e):(e.stopPropagation(),!0))};export const disableBodyScroll=(e,o)=>{if(!e)return void console.error("disableBodyScroll unsuccessful - targetElement must be provided when calling disableBodyScroll on IOS devices.");if(locks.some(o=>o.targetElement===e))return;locks=[...locks,{targetElement:e,options:o||{}}],isIosDevice?(e.ontouchstart=(e=>{1===e.targetTouches.length&&(initialClientY=e.targetTouches[0].clientY)}),e.ontouchmove=(o=>{1===o.targetTouches.length&&handleScroll(o,e)}),documentListenerAdded||(document.addEventListener("touchmove",preventDefault,hasPassiveEvents?{passive:!1}:void 0),documentListenerAdded=!0)):setOverflowHidden(o)};export const clearAllBodyScrollLocks=()=>{isIosDevice?(locks.forEach(e=>{e.targetElement.ontouchstart=null,e.targetElement.ontouchmove=null}),documentListenerAdded&&(document.removeEventListener("touchmove",preventDefault,hasPassiveEvents?{passive:!1}:void 0),documentListenerAdded=!1),initialClientY=-1):restoreOverflowSetting(),locks=[]};export const enableBodyScroll=e=>{e?(locks=locks.filter(o=>o.targetElement!==e),isIosDevice?(e.ontouchstart=null,e.ontouchmove=null,documentListenerAdded&&0===locks.length&&(document.removeEventListener("touchmove",preventDefault,hasPassiveEvents?{passive:!1}:void 0),documentListenerAdded=!1)):locks.length||restoreOverflowSetting()):console.error("enableBodyScroll unsuccessful - targetElement must be provided when calling enableBodyScroll on IOS devices.")};