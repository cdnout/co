/*! Monio: util.js
    v0.24.2 (c) 2021 Kyle Simpson
    MIT License: http://getify.mit-license.org
*/
!function UMD(n,t,i,e){"function"==typeof define&&define.amd?(i=Object.values(i),define(n,i,e)):"undefined"!=typeof module&&module.exports?(i=Object.keys(i).map((n=>require(n))),module.exports=e(...i)):(i=Object.values(i).map((n=>t[n])),t[n]=e(...i))}("MonioUtil","undefined"!=typeof globalThis?globalThis:"undefined"!=typeof global?global:"undefined"!=typeof window?window:"undefined"!=typeof self?self:new Function("return this")(),{},(function DEF(){"use strict";let n={};n={getMonadFlatMap:getMonadFlatMap,isMonad:isMonad,liftM:liftM,isFunction:isFunction,isPromise:isPromise,curry:curry},n.getMonadFlatMap=getMonadFlatMap,n.isMonad=isMonad,n.liftM=liftM,n.isFunction=isFunction,n.isPromise=isPromise,n.curry=curry;var t=new Set([Function.prototype.bind,Array.prototype.flatMap,Set.prototype.flatMap,function*(){}().flatMap,async function*(){}().flatMap].filter(isFunction));function getMonadFlatMap(n){var t=n.flatMap||n.chain||n.bind;return isFunction(t)?t:void 0}function isMonad(n){var i=n&&("object"==typeof n||isFunction(n))?getMonadFlatMap(n):void 0;return!(!i||t.has(i)||(i.toString()||"").includes("[native code]")&&!(i.name||"").startsWith("bound"))}function liftM(n){return isMonad(n)?n:Just(n)}function isFunction(n){return!(!n||"function"!=typeof n)}function isPromise(n){return!(!n||!isFunction(n.then))}function curry(n,t=n.length){return function nextCurried(i){return(...e)=>{var o=[...i,...e];return o.length>=t?n(...o):nextCurried(o)}}([])}return n}));