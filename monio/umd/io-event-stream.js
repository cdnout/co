/*! Monio: io-event-stream.js
    v0.24.2 (c) 2021 Kyle Simpson
    MIT License: http://getify.mit-license.org
*/
!function UMD(e,t,r,n){"function"==typeof define&&define.amd?(r=Object.values(r),define(e,r,n)):"undefined"!=typeof module&&module.exports?(r=Object.keys(r).map((e=>require(e))),module.exports=n(...r)):(r=Object.values(r).map((e=>t[e])),t[e]=n(...r))}("IOEventStream","undefined"!=typeof globalThis?globalThis:"undefined"!=typeof global?global:"undefined"!=typeof window?window:"undefined"!=typeof self?self:new Function("return this")(),{"./lib/util.js":"MonioUtil","./io.js":"IO"},(function DEF(e,t){"use strict";var{isFunction:r,curry:n}=e;let l={};function IOEventStream(e,n,l={}){var{bufferSize:i=100,throwBufferOverflow:o=!1,evtOpts:a={}}=l;return t((()=>{var t,l,u=Symbol("force closed"),{pr:f,next:s}=getDeferred(),c=async function*eventStream(){t=[],l=[],r(e.addEventListener)?e.addEventListener(n,handler,a):r(e.addListener)?e.addListener(n,handler):r(e.on)&&e.on(n,handler);try{for(;;){if(0==t.length){let{pr:e,next:r}=getDeferred();t.push(e),l.push(r)}let e=await Promise.race([f,t.shift()]);if(e==u)return;yield e}}finally{r(e.removeEventListener)?e.removeEventListener(n,handler,a):r(e.removeListener)?e.removeListener(n,handler):r(e.off)&&e.off(n,handler),t.length=l.length=0}}(),d=c.return;return c.return=function itReturn(...e){var t=d.apply(c,e);return c.closed=!0,s(u),c.return=d,t},c.closed=!1,c;function handler(e){if(l.length>0){l.shift()(e)}else if(t.length<i){let{pr:r,next:n}=getDeferred();t.push(r),n(e)}else if(o){let t=new Error("Event stream buffer overflow");throw t.evt=e,t}}}))}function merge(...e){return t((()=>async function*mergeStreams(){try{for(;;){let t=pullFromStreams(e);if(!(t.length>0))return;try{if(1==t.length){let[r,n,l]=await t[0];if(l.done)return void(e[r]=null);e[r]=n,yield l.value}else{let[r,n,l]=await Promise.race(t);e[r]=null,l.done||(e.push(n),yield l.value)}}catch(e){return Promise.reject(e)}}}finally{await close(e)}}()))}function zip(...e){return t((()=>async function*zipStreams(){try{for(;;){let t=pullFromStreams(e);if(!(t.length>0))return;try{let r=(await Promise.all(t)).reduce((function getStreamVals(t,r){var[n,l,i]=r;return i.done?(e[n]=null,t):(e[n]=l,[...t,i.value])}),[]);if(!(r.length>0))return;yield r}catch(e){return Promise.reject(e)}}}finally{await close(...e).run()}}()))}function pullFromStreams(e){return e.map((function callIter(t,n){return t&&r(t.next)?(e[n]=async function getNext(){var r=t.next();try{let l=await r;return e[n]=[n,t,l]}catch(t){return e[n]=null,r}}(),e[n]):t})).filter(Boolean)}function close(...e){return t((()=>Promise.all(e.map((async function closeStream(e){if(e&&r(e.return))try{return await e.return()}catch(e){}})))))}function getDeferred(){var e;return{pr:new Promise((t=>e=t)),next:e}}return l=IOEventStream=Object.assign(n(IOEventStream,2),{merge:merge,zip:zip,close:close}),l.merge=merge,l.zip=zip,l.close=close,l}));