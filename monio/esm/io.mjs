/*! Monio: io.mjs
    v0.15.0 (c) 2021 Kyle Simpson
    MIT License: http://getify.mit-license.org
*/
import{isFunction,isPromise,getMonadFlatMap}from"./lib/util.mjs";import Either from"./either.mjs";var brand={};export default Object.assign(IO,{of:of,is:is,do:$do,doEither:doEither});export{IO as RIO};export{IO as Reader};function IO(t){var n={map:function map(n){return IO((r=>{var i=t(r);return isPromise(i)?i.then(n):n(i)}))},chain:chain,flatMap:chain,bind:chain,ap:function ap(n){return n.map(t)},concat:function concat(n){return IO((r=>{var i=t(r),e=n.run(r);return isPromise(i)||isPromise(e)?Promise.all([i,e]).then((([t,n])=>t.concat(n))):i.concat(e)}))},run:function run(n){return t(n)},_inspect:function _inspect(){return`${n[Symbol.toStringTag]}(${isFunction(t)?t.name||"anonymous function":t&&isFunction(t._inspect)?t._inspect():val})`},_is:function _is(t){return t===brand},[Symbol.toStringTag]:"IO"};return n;function chain(n){return IO((r=>{var i=t(r);return isPromise(i)?i.then(n).then((t=>t.run(r))):n(i).run(r)}))}}function of(t){return IO((()=>t))}function is(t){return t&&isFunction(t._is)&&t._is(brand)}function processNext(t,n,r,i=!1){return new Promise((async function c(e,o){try{let a=monadFlatMap(isPromise(n)?await n:n,(n=>IO((()=>t(n).then(e,o)))));IO.is(a)?await a.run(r):i&&Either.Left.is(a)?o(a):e(a)}catch(t){o(t)}}))}function $do(t){return IO((n=>{var r=getIterator(t,n);return async function next(t){var i=r.next(isPromise(t)?await t:t);return(i=isPromise(i)?await i:i).done?i.value:processNext(next,i.value,n,!1)}()}))}function doEither(t){return IO((n=>{var r=getIterator(t,n);return async function next(t){try{t=isPromise(t)?await t:t;let i=Either.Left.is(t)?t.fold((t=>r.throw(t)),(()=>{})):r.next(t);i=isPromise(i)?await i:i;let e=i.done&&isPromise(i.value)?await i.value:i.value;if(i.done){if(Either.Left.is(e))throw e;return Either.Right.is(e)?e:Either.Right(e)}return processNext(next,e,n,!0).catch(next)}catch(t){throw Either.Left.is(t)?t:Either.Left(t)}}()}))}function getIterator(t,n){return isFunction(t)?t(n):t&&"object"==typeof t&&isFunction(t.next)?t:void 0}function monadFlatMap(t,n){return getMonadFlatMap(t).call(t,n)}