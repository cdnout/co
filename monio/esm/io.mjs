/*! Monio: io.mjs
    v0.24.2 (c) 2021 Kyle Simpson
    MIT License: http://getify.mit-license.org
*/
import{isFunction,isPromise,isMonad,getMonadFlatMap}from"./lib/util.mjs";import Nothing from"./nothing.mjs";import Either from"./either.mjs";var brand={};export default Object.assign(IO,{of:of,is:is,do:$do,doEither:doEither});export{IO as RIO};export{IO as Reader};function IO(t){var r={map:function map(r){return IO((n=>{var i=t(n);return isPromise(i)?i.then(r):r(i)}))},chain:chain,flatMap:chain,bind:chain,ap:function ap(r){return r.map(t)},concat:function concat(r){return IO((n=>{var i=t(n),e=r.run(n);return isPromise(i)||isPromise(e)?Promise.all([i,e]).then((([t,r])=>t.concat(r))):i.concat(e)}))},run:function run(r){return t(r)},_inspect:function _inspect(){return`${r[Symbol.toStringTag]}(${isFunction(t)?t.name||"anonymous function":t&&isFunction(t._inspect)?t._inspect():val})`},_is:function _is(t){return t===brand},[Symbol.toStringTag]:"IO"};return r;function chain(r){return IO((n=>{var i=t(n);return isPromise(i)?i.then(r).then((t=>t.run(n))):r(i).run(n)}))}}function of(t){return IO((()=>t))}function is(t){return t&&isFunction(t._is)&&t._is(brand)}function processNext(t,r,n,i=!1){return new Promise((async function c(e,o){try{let[a,s]=isPromise(r)?await safeUnwrap(r,i):[r,i&&Either.Left.is(r)?"error":"value"],u=Nothing.is(a)?IO((()=>e())):monadFlatMap(i&&"error"==s&&Either.Left.is(a)||!isMonad(a)?IO.of(a):a,(r=>IO((()=>t(r,s).then(e,o)))));try{await u.run(n)}catch(r){e(await t(r,"error"))}}catch(t){o(t)}}))}function $do(t){return IO((r=>{var n=getIterator(t,r);return async function next(t,i){var e="error"===i?n.throw(t):n.next(t);return(e=isPromise(e)?await e:e).done?IO.is(e.value)?e.value.run(r):e.value:processNext(next,e.value,r,!1)}()}))}function doEither(t){return IO((r=>{var n=getIterator(t,r);return async function next(t,i){t="error"!=i||Either.Left.is(t)?"value"!=i||Either.Right.is(t)?Either.is(t)?t:Either(t):Either.Right(t):Either.Left(t);try{let i=t.fold((t=>n.throw(t)),(t=>n.next(t)));if(i=isPromise(i)?await i:i,i.done){let t=isPromise(i.value)?await i.value:i.value;if(t=IO.is(t)?t.run(r):t,t=isPromise(t)?await t:t,Either.Left.is(t))throw t;return Either.Right.is(t)?t:Either.Right(t)}return processNext(next,i.value,r,!0)}catch(t){throw Either.Left.is(t)?t:Either.Left(t)}}()}))}function getIterator(t,r){return isFunction(t)?t(r):t&&"object"==typeof t&&isFunction(t.next)?t:void 0}function monadFlatMap(t,r){return getMonadFlatMap(t).call(t,r)}async function safeUnwrap(t,r){try{if(t=isPromise(t)?await t:t,r&&Either.Left.is(t))throw t;return[t,"value"]}catch(t){return[t,"error"]}}