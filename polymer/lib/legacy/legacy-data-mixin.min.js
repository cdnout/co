import{Class}from"./class.js";import{Polymer}from"../../polymer-legacy.js";import{dedupingMixin}from"../utils/mixin.js";import{templatize}from"../utils/templatize.js";const UndefinedArgumentError=class extends Error{constructor(e,t){super(e),this.arg=t,this.name=this.constructor.name,this.constructor=UndefinedArgumentError,this.__proto__=UndefinedArgumentError.prototype}};function wrapEffect(e,t){if(e&&e.fn){const n=e.fn;e.fn=function(){try{n.apply(this,arguments)}catch(e){if(!(e instanceof UndefinedArgumentError))throw e;console.warn(`Argument '${e.arg}'${t?` for method '${t}'`:""} was undefined. Ensure it has a default value, or else ensure the method handles the argument being undefined.`)}}}return e}export const LegacyDataMixin=dedupingMixin(e=>{return class extends e{_marshalArgs(e,t,n){const r=super._marshalArgs(e,t,n);if(this._legacyUndefinedCheck&&r.length>1)for(let t=0;t<r.length;t++)if(void 0===r[t]||e[t].wildcard&&void 0===r[t].base){const n=e[t].name;throw new UndefinedArgumentError(`Argument '${n}' is undefined.`,n)}return r}_addPropertyEffect(e,t,n){return super._addPropertyEffect(e,t,wrapEffect(n,n&&n.info&&n.info.methodName))}static _addTemplatePropertyEffect(t,n,r){return e._addTemplatePropertyEffect.call(this,t,n,wrapEffect(r))}}});Polymer.Class=((e,t)=>Class(e,e=>t?t(LegacyDataMixin(e)):LegacyDataMixin(e)));const TemplatizeMixin=dedupingMixin(e=>{const t=LegacyDataMixin(e);class n extends t{get _legacyUndefinedCheck(){return this._methodHost&&this._methodHost._legacyUndefinedCheck}}return n.prototype._methodHost,n});templatize.mixin=TemplatizeMixin,console.info("LegacyDataMixin will be applied to all legacy elements.\nSet `_legacyUndefinedCheck: true` on element class to enable.");