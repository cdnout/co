import{PropertyAccessors}from"./property-accessors.js";import{dedupingMixin}from"../utils/mixin.js";const HOST_DIR=/:host\(:dir\((ltr|rtl)\)\)/g,HOST_DIR_REPLACMENT=':host([dir="$1"])',EL_DIR=/([\s\w-#\.\[\]\*]*):dir\((ltr|rtl)\)/g,EL_DIR_REPLACMENT=':host([dir="$2"]) $1',DIR_CHECK=/:dir\((?:ltr|rtl)\)/,SHIM_SHADOW=Boolean(window.ShadyDOM&&window.ShadyDOM.inUse),DIR_INSTANCES=[];let observer=null,documentDir="";function getRTL(){documentDir=document.documentElement.getAttribute("dir")}function setRTL(t){if(!t.__autoDirOptOut){t.setAttribute("dir",documentDir)}}function updateDirection(){getRTL(),documentDir=document.documentElement.getAttribute("dir");for(let t=0;t<DIR_INSTANCES.length;t++)setRTL(DIR_INSTANCES[t])}function takeRecords(){observer&&observer.takeRecords().length&&updateDirection()}export const DirMixin=dedupingMixin(t=>{SHIM_SHADOW||observer||(getRTL(),(observer=new MutationObserver(updateDirection)).observe(document.documentElement,{attributes:!0,attributeFilter:["dir"]}));const e=PropertyAccessors(t);class r extends e{static _processStyleText(t,r){return t=e._processStyleText.call(this,t,r),!SHIM_SHADOW&&DIR_CHECK.test(t)&&(t=this._replaceDirInCssText(t),this.__activateDir=!0),t}static _replaceDirInCssText(t){let e=t;return e=(e=e.replace(HOST_DIR,HOST_DIR_REPLACMENT)).replace(EL_DIR,EL_DIR_REPLACMENT)}constructor(){super(),this.__autoDirOptOut=!1}ready(){super.ready(),this.__autoDirOptOut=this.hasAttribute("dir")}connectedCallback(){e.prototype.connectedCallback&&super.connectedCallback(),this.constructor.__activateDir&&(takeRecords(),DIR_INSTANCES.push(this),setRTL(this))}disconnectedCallback(){if(e.prototype.disconnectedCallback&&super.disconnectedCallback(),this.constructor.__activateDir){const t=DIR_INSTANCES.indexOf(this);t>-1&&DIR_INSTANCES.splice(t,1)}}}return r.__activateDir=!1,r});