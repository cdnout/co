import"../utils/boot.js";import{isPath}from"../utils/path.js";import{dedupingMixin}from"../utils/mixin.js";import{PropertyEffects}from"./property-effects.js";const BINDINGS={"{":"}","[":"]"},STATE={INITIAL:1,FIRSTOPENINGBINDING:2,FIRSTCHARACTERBINDING:3,BINDING:4,FIRSTCOLON:5,COLONNOTIFYEVENT:6,COLONNOTIFYEVENTFIRSTCLOSINGBINDING:7,FIRSTCLOSINGBINDING:8,STRING:9,METHOD:10,STRINGARG:11,NUMBERARG:12,VARIABLEARG:13,METHODCLOSED:14,METHODCLOSEDBINDING:15};function pushLiteral(e,t,r,s){const a=e.substring(s||0,t);a&&r.push({literal:a})}function storeMethod(e,t){const r=e.signature.methodName,s=t.dynamicFns;(s&&s[r]||e.signature.static)&&(e.dependencies.push(r),e.signature.dynamicFn=!0)}function storeVariableBinding(e,t,r,s){t.source=r,t.dependencies.push(r),t.startChar=s+1,e.push(t)}function storeMethodVariable(e,t,r){const s=t.substring(e.startChar,r).trim();if(s)if("true"===s||"false"===s)e.signature.args.push({name:s,value:"true"==s,literal:!0});else{const t={name:s};t.structured=isPath(s),t.structured&&(t.wildcard=".*"==s.slice(-2),t.wildcard&&(t.name=s.slice(0,-2))),e.signature.args.push(t),e.dependencies.push(s),e.signature.static=!1}}function storeMethodNumber(e,t,r){const s=t.substring(e.startChar,r).trim();e.signature.args.push({name:s,value:Number(s),literal:!0})}const StrictBindingParser=dedupingMixin(e=>{const t=PropertyEffects(e);return class extends t{static _parseBindings(e,t){const r=[];let s,a,T,I={},N=!1,i=STATE.INITIAL;for(a=0,T=e.length;a<T;a++){const T=e.charAt(a);switch(i){case STATE.INITIAL:"{"!==T&&"["!==T||(I={mode:T,dependencies:[],startChar:I.startChar},i=STATE.FIRSTOPENINGBINDING);break;case STATE.FIRSTOPENINGBINDING:T===I.mode?(pushLiteral(e,a-1,r,I.startChar),I.startChar=a+1,i=STATE.FIRSTCHARACTERBINDING):(I={},i=STATE.INITIAL);break;case STATE.FIRSTCHARACTERBINDING:" "!==T&&"\t"!==T&&"\n"!==T&&("!"===T&&(I.negate=!0,I.startChar=a+1),i=STATE.BINDING);break;case STATE.BINDING:switch(T){case BINDINGS[I.mode]:i=STATE.FIRSTCLOSINGBINDING;break;case"'":case'"':s=T,i=STATE.STRING;break;case"(":I.signature={methodName:e.substring(I.startChar,a).trim(),args:[],static:!0},I.startChar=a+1,i=STATE.METHOD;break;case":":i=STATE.FIRSTCOLON}break;case STATE.FIRSTCOLON:":"===T?(I.customEvent=!0,I.startCharAfterColon=a+1,i=STATE.COLONNOTIFYEVENT):i=STATE.BINDING;break;case STATE.COLONNOTIFYEVENT:T===BINDINGS[I.mode]&&(i=STATE.COLONNOTIFYEVENTFIRSTCLOSINGBINDING);break;case STATE.COLONNOTIFYEVENTFIRSTCLOSINGBINDING:if(T===BINDINGS[I.mode]){I.event=e.substring(I.startCharAfterColon,a-1).trim(),storeVariableBinding(r,I,e.substring(I.startChar,I.startCharAfterColon-2).trim(),a),i=STATE.INITIAL}else i=STATE.BINDING;break;case STATE.FIRSTCLOSINGBINDING:if(T===BINDINGS[I.mode]){storeVariableBinding(r,I,e.substring(I.startChar,a-1).trim(),a),i=STATE.INITIAL}else i=STATE.BINDING;break;case STATE.STRING:"\\"===T?N=!0:T!==s||N?N=!1:i=STATE.BINDING;break;case STATE.METHOD:switch(T){case")":storeMethodVariable(I,e,a),storeMethod(I,t),I.startChar=a+1,i=STATE.METHODCLOSED;break;case",":storeMethodVariable(I,e,a),I.startChar=a+1;break;case"'":case'"':s=T,i=STATE.STRINGARG;break;default:T>="0"&&T<="9"||"-"===T?i=STATE.NUMBERARG:" "!=T&&"\n"!=T&&(i=STATE.VARIABLEARG)}break;case STATE.STRINGARG:if("\\"===T)N=!0;else if(T!==s||N)N=!1;else{const t=e.substring(I.startChar,a).replace(/^\s+/,"").substring(1).replace(/&comma;/g,",").replace(/\\(.)/g,"$1");I.signature.args.push({value:t,name:t,literal:!0}),I.startChar=a+1,i=STATE.METHOD}break;case STATE.NUMBERARG:switch(T){case",":storeMethodNumber(I,e,a),I.startChar=a+1,i=STATE.METHOD;break;case")":storeMethodNumber(I,e,a),storeMethod(I,t),i=STATE.METHODCLOSED;break;default:(T<"0"||T>"9")&&(i=STATE.VARIABLEARG)}break;case STATE.VARIABLEARG:switch(T){case",":storeMethodVariable(I,e,a),I.startChar=a+1,i=STATE.METHOD;break;case")":storeMethodVariable(I,e,a),storeMethod(I,t),i=STATE.METHODCLOSED}break;case STATE.METHODCLOSED:T===BINDINGS[I.mode]?i=STATE.METHODCLOSEDBINDING:" "!==T&&"\t"!==T&&"\n"!==T&&console.warn(`Expected two closing "${BINDINGS[I.mode]}" for binding "${e}"`);break;case STATE.METHODCLOSEDBINDING:T===BINDINGS[I.mode]?(I.startChar=a+1,r.push(I),i=STATE.INITIAL):" "!==T&&"\t"!==T&&"\n"!==T&&console.warn(`Expected one closing "${BINDINGS[I.mode]}" for binding "${e}"`)}}return r.length?(pushLiteral(e,a,r,r[r.length-1].startChar),r):null}}});export{StrictBindingParser};