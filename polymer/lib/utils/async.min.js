import"./boot.js";let microtaskCurrHandle=0,microtaskLastHandle=0,microtaskCallbacks=[],microtaskNodeContent=0,microtaskScheduled=!1,microtaskNode=document.createTextNode("");function microtaskFlush(){microtaskScheduled=!1;const a=microtaskCallbacks.length;for(let e=0;e<a;e++){let a=microtaskCallbacks[e];if(a)try{a()}catch(a){setTimeout(()=>{throw a})}}microtaskCallbacks.splice(0,a),microtaskLastHandle+=a}new window.MutationObserver(microtaskFlush).observe(microtaskNode,{characterData:!0});const timeOut={after:a=>({run:e=>window.setTimeout(e,a),cancel(a){window.clearTimeout(a)}}),run:(a,e)=>window.setTimeout(a,e),cancel(a){window.clearTimeout(a)}};export{timeOut};const animationFrame={run:a=>window.requestAnimationFrame(a),cancel(a){window.cancelAnimationFrame(a)}};export{animationFrame};const idlePeriod={run:a=>window.requestIdleCallback?window.requestIdleCallback(a):window.setTimeout(a,16),cancel(a){window.cancelIdleCallback?window.cancelIdleCallback(a):window.clearTimeout(a)}};export{idlePeriod};const microTask={run:a=>(microtaskScheduled||(microtaskScheduled=!0,microtaskNode.textContent=microtaskNodeContent++),microtaskCallbacks.push(a),microtaskCurrHandle++),cancel(a){const e=a-microtaskLastHandle;if(e>=0){if(!microtaskCallbacks[e])throw new Error("invalid async handle: "+a);microtaskCallbacks[e]=null}}};export{microTask};