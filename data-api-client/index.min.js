"use strict";const{RDSDataClient,ExecuteStatementCommand,BatchExecuteStatementCommand,BeginTransactionCommand,CommitTransactionCommand,RollbackTransactionCommand}=require("@aws-sdk/client-rds-data"),sqlString=require("sqlstring"),supportedTypes=["arrayValue","blobValue","booleanValue","doubleValue","isNull","longValue","stringValue","structValue"],error=(...e)=>{throw Error(...e)},parseSQL=e=>"string"==typeof e[0]?e[0]:"object"==typeof e[0]&&"string"==typeof e[0].sql?e[0].sql:error("No 'sql' statement provided."),parseParams=e=>Array.isArray(e[0].parameters)?e[0].parameters:"object"==typeof e[0].parameters?[e[0].parameters]:Array.isArray(e[1])?e[1]:"object"==typeof e[1]?[e[1]]:e[0].parameters?error("'parameters' must be an object or array"):e[1]?error("Parameters must be an object or array"):[],parseDatabase=(e,a)=>e.transactionId?e.database:"string"==typeof a[0].database?a[0].database:a[0].database?error("'database' must be a string."):e.database||void 0,parseHydrate=(e,a)=>"boolean"==typeof a[0].hydrateColumnNames?a[0].hydrateColumnNames:a[0].hydrateColumnNames?error("'hydrateColumnNames' must be a boolean."):e.hydrateColumnNames,parseFormatOptions=(e,a)=>"object"==typeof a[0].formatOptions?{deserializeDate:"boolean"==typeof a[0].formatOptions.deserializeDate?a[0].formatOptions.deserializeDate:a[0].formatOptions.deserializeDate?error("'formatOptions.deserializeDate' must be a boolean."):e.formatOptions.deserializeDate,treatAsLocalDate:"boolean"==typeof a[0].formatOptions.treatAsLocalDate?a[0].formatOptions.treatAsLocalDate:a[0].formatOptions.treatAsLocalDate?error("'formatOptions.treatAsLocalDate' must be a boolean."):e.formatOptions.treatAsLocalDate}:a[0].formatOptions?error("'formatOptions' must be an object."):e.formatOptions,prepareParams=({secretArn:e,resourceArn:a},t)=>Object.assign({secretArn:e,resourceArn:a},"object"==typeof t[0]?omit(t[0],["hydrateColumnNames","parameters"]):{}),omit=(t,r)=>Object.keys(t).reduce((e,a)=>r.includes(a)?e:Object.assign(e,{[a]:t[a]}),{}),pick=(t,r)=>Object.keys(t).reduce((e,a)=>r.includes(a)?Object.assign(e,{[a]:t[a]}):e,{}),flatten=e=>e.reduce((e,a)=>e.concat(a),[]),normalizeParams=e=>e.reduce((e,a)=>Array.isArray(a)?e.concat([normalizeParams(a)]):2===Object.keys(a).length&&a.name&&void 0!==a.value||3===Object.keys(a).length&&a.name&&void 0!==a.value&&a.cast?e.concat(a):e.concat(splitParams(a)),[]),processParams=(s,n,o,e,i,c=0)=>({processedParams:e.reduce((e,a)=>{if(Array.isArray(a)){var t=processParams(s,n,o,a,i,c);return 0===c&&(n=t.escapedSql,c++),e.concat([t.processedParams])}var r;return o[a.name]&&("n_ph"===o[a.name].type?(a.cast&&(r=new RegExp(":"+a.name+"\\b","g"),n=n.replace(r,"pg"===s?`:${a.name}::${a.cast}`:`CAST(:${a.name} AS ${a.cast})`)),e.push(formatParam(a.name,a.value,i))):0===c&&(r=new RegExp("::"+a.name+"\\b","g"),n=n.replace(r,sqlString.escapeId(a.value)))),e},[]),escapedSql:n}),formatParam=(e,a,t)=>formatType(e,a,getType(a),getTypeHint(a),t),splitParams=t=>Object.keys(t).reduce((e,a)=>e.concat({name:a,value:t[a]}),[]),getSqlParams=e=>(e.match(/:{1,2}\w+/g)||[]).map(e=>e.startsWith("::")?{type:"n_id",label:e.substr(2)}:{type:"n_ph",label:e.substr(1)}).reduce((e,a)=>Object.assign(e,{[a.label]:{type:a.type}}),{}),getType=e=>"string"==typeof e?"stringValue":"boolean"==typeof e?"booleanValue":"number"==typeof e&&parseInt(e)===e?"longValue":"number"==typeof e&&parseFloat(e)===e?"doubleValue":null===e?"isNull":isDate(e)?"stringValue":Buffer.isBuffer(e)?"blobValue":"object"==typeof e&&1===Object.keys(e).length&&supportedTypes.includes(Object.keys(e)[0])?null:void 0,getTypeHint=e=>isDate(e)?"TIMESTAMP":void 0,isDate=e=>e instanceof Date,formatType=(e,a,t,r,s)=>Object.assign(null!=r?{name:e,typeHint:r}:{name:e},null===t?{value:a}:{value:{[t||error(`'${e}' is an invalid type`)]:"isNull"===t||(isDate(a)?formatToTimeStamp(a,s&&s.treatAsLocalDate):a)}}),formatToTimeStamp=(e,a)=>{var t=(e,a=2)=>"0".repeat(a-(e+"").length)+e,r=a?e.getFullYear():e.getUTCFullYear(),s=(a?e.getMonth():e.getUTCMonth())+1,n=a?e.getDate():e.getUTCDate(),o=a?e.getHours():e.getUTCHours(),i=a?e.getMinutes():e.getUTCMinutes(),c=a?e.getSeconds():e.getUTCSeconds(),e=a?e.getMilliseconds():e.getUTCMilliseconds(),e=e<=0?"":`.${t(e,3)}`;return`${r}-${t(s)}-${t(n)} ${t(o)}:${t(i)}:${t(c)}${e}`},formatFromTimeStamp=(e,a)=>!a&&/^\d{4}-\d{2}-\d{2}(\s\d{2}:\d{2}:\d{2}(\.\d+)?)?$/.test(e)?new Date(e+"Z"):new Date(e),formatResults=({columnMetadata:e,numberOfRecordsUpdated:a,records:t,generatedFields:r,updateResults:s},n,o,i)=>Object.assign(o?{columnMetadata:e}:{},void 0===a||t?{}:{numberOfRecordsUpdated:a},t?{records:formatRecords(t,e,n,i)}:{},s?{updateResults:formatUpdateResults(s)}:{},r&&0<r.length?{insertId:r[0].longValue}:{}),formatRecords=(e,t,s,n)=>{let o=e&&e[0]?e[0].map((e,a)=>Object.assign({},t?{label:t[a].label,typeName:t[a].typeName}:{})):{};return e?e.map(e=>e.reduce((e,a,t)=>{if(!0===a.isNull)return s?Object.assign(e,{[o[t].label]:null}):e.concat(null);if(o[t]&&o[t].field){var r=formatRecordValue(a[o[t].field],o[t].typeName,n);return s?Object.assign(e,{[o[t].label]:r}):e.concat(r)}Object.keys(a).map(e=>{"isNull"!==e&&null!==a[e]&&(o[t].field=e)});r=formatRecordValue(a[o[t].field],o[t].typeName,n);return s?Object.assign(e,{[o[t].label]:r}):e.concat(r)},s?{}:[])):[]},formatRecordValue=(e,a,t)=>t&&t.deserializeDate&&["DATE","DATETIME","TIMESTAMP","TIMESTAMPTZ","TIMESTAMP WITH TIME ZONE"].includes(a.toUpperCase())?formatFromTimeStamp(e,t&&t.treatAsLocalDate||"TIMESTAMP WITH TIME ZONE"===a):"JSON"===a?JSON.parse(e):e,formatUpdateResults=e=>e.map(e=>e.generatedFields&&0<e.generatedFields.length?{insertId:e.generatedFields[0].longValue}:{}),mergeConfig=(e,a)=>Object.assign(e,a),query=async function(a,...e){var t=Array.isArray(e[0])?flatten(e):e,r=parseSQL(t),s=getSqlParams(r),n=parseHydrate(a,t),o=parseFormatOptions(a,t),e=normalizeParams(parseParams(t)),{processedParams:r,escapedSql:s}=processParams(a.engine,r,s,e,o),e=0<r.length&&Array.isArray(r[0]),r=Object.assign(prepareParams(a,t),{database:parseDatabase(a,t),sql:s},0<r.length?{[e?"parameterSets":"parameters"]:r}:{},n&&!e?{includeResultMetadata:!0}:{},a.transactionId?{transactionId:a.transactionId}:{});try{var i=await(e?a.methods.batchExecuteStatement(r):a.methods.executeStatement(r));return formatResults(i,n,!0===t[0].includeResultMetadata,o)}catch(e){throw this&&this.rollback&&(r=await a.methods.rollbackTransaction(pick(r,["resourceArn","secretArn","transactionId"])),this.rollback(e,r)),e}},transaction=(e,a)=>{a="object"==typeof a?[a]:[{}];let t=[],r=()=>{};const s=Object.assign(prepareParams(e,a),{database:parseDatabase(e,a),hydrateColumnNames:parseHydrate(e,a),formatOptions:parseFormatOptions(e,a),methods:e.methods});return{query:function(...e){return"function"==typeof e[0]?t.push(e[0]):t.push(()=>[...e]),this},rollback:function(e){return"function"==typeof e&&(r=e),this},commit:async function(){return commit(s,t,r)}}},commit=async(a,t,r)=>{let s=[];var e=(await a.methods.beginTransaction(pick(a,["resourceArn","secretArn","database"])))["transactionId"];let n=Object.assign(a,{transactionId:e});for(let e=0;e<t.length;e++){var o=await query.apply({rollback:r},[a,t[e](s[s.length-1],s)]);s.push(o)}var e=(await n.methods.commitTransaction(pick(a,["resourceArn","secretArn","transactionId"])))["transactionStatus"];return s.push({transactionStatus:e}),s},init=e=>{const a="object"==typeof e.options?e.options:void 0!==e.options?error("'options' must be an object"):{};"string"==typeof e.region&&(a.region=e.region);const t={engine:"string"==typeof e.engine?e.engine:"mysql",secretArn:"string"==typeof e.secretArn?e.secretArn:error("'secretArn' string value required"),resourceArn:"string"==typeof e.resourceArn?e.resourceArn:error("'resourceArn' string value required"),database:"string"==typeof e.database?e.database:void 0!==e.database?error("'database' must be a string"):void 0,hydrateColumnNames:"boolean"!=typeof e.hydrateColumnNames||e.hydrateColumnNames,formatOptions:{deserializeDate:"object"!=typeof e.formatOptions||!1!==e.formatOptions.deserializeDate,treatAsLocalDate:"object"==typeof e.formatOptions&&e.formatOptions.treatAsLocalDate},client:e.wrapper?e.wrapper(new RDSDataClient(a)):new RDSDataClient(a),methods:{executeStatement:async e=>{e=new ExecuteStatementCommand(mergeConfig(pick(t,["resourceArn","secretArn","database"]),e));return t.client.send(e)},batchExecuteStatement:async e=>{e=new BatchExecuteStatementCommand(mergeConfig(pick(t,["resourceArn","secretArn","database"]),e));return t.client.send(e)},beginTransaction:async e=>{e=new BeginTransactionCommand(mergeConfig(pick(t,["resourceArn","secretArn","database"]),e));return t.client.send(e)},commitTransaction:async e=>{e=new CommitTransactionCommand(mergeConfig(pick(t,["resourceArn","secretArn"]),e));return t.client.send(e)},rollbackTransaction:async e=>{e=new RollbackTransactionCommand(mergeConfig(pick(t,["resourceArn","secretArn"]),e));return t.client.send(e)}}};return{query:(...e)=>query(t,...e),transaction:e=>transaction(t,e),...t.methods}};module.exports=init;