// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../gd-sprest-def/lib/base
//   ../gd-sprest-def/lib/SP/complextypes
//   ../gd-sprest-def/lib/SP/entitytypes
//   ../gd-sprest-def
//   ../gd-sprest-def/lib/Microsoft/AppServices/entitytypes
//   ../gd-sprest-def/lib/Microsoft/SharePoint/Portal/entitytypes
//   ../gd-sprest-def/lib/Microsoft/SharePoint/Navigation/REST/entitytypes
//   ../gd-sprest-def/lib/SP/UserProfiles/entitytypes
//   ../gd-sprest-def/lib/Microsoft/Office/Server/Search/REST/complextypes
//   ../gd-sprest-def/lib/Microsoft/Office/Server/Search/REST/entitytypes
//   ../gd-sprest-def/lib/SP/Social/complextypes
//   ../gd-sprest-def/lib/SP/Social/entitytypes
//   ../gd-sprest-def/lib/SP/Utilities/entitytypes
//   ../gd-sprest-def/lib/SP/WorkflowServices/entitytypes
//   ../gd-sprest-def/base
//   ../gd-sprest-def/lib/SP/Taxonomy/entitytypes
//   ../gd-sprest-def/lib/SP/UI/ApplicationPages/complextypes
//   ../gd-sprest-def/lib/SP

declare module 'gd-sprest-bs' {
    export * from "gd-sprest-bs/gd-bs";
    export * from "gd-sprest-bs/gd-sprest";
    
    import * as Components from "gd-sprest-bs/components";
    import * as WebParts from "gd-sprest-bs/webparts";
    export {
        Components,
        WebParts
    }
    
    import { IRESTBS } from "gd-sprest-bs/rest";
    export const $REST: IRESTBS;
}

declare module 'gd-sprest-bs/gd-bs' {
    import * as Components from "gd-sprest-bs/gd-bs/components";
    import { Icons, IconTypes } from "gd-sprest-bs/gd-bs/icons";
    var bootstrap, popper: any;
    
    export {
        bootstrap,
        Components,
        Icons, IconTypes,
        popper
    }
}

declare module 'gd-sprest-bs/gd-sprest' {
    /**
        * Library
        */
    import { Apps, ContextInfo, GroupService, GroupSiteManager, HubSites, HubSitesUtility, List, Navigation, PeopleManager, PeoplePicker, ProfileLoader, Search, Site, SiteManager, SocialFeed, UserProfile, Utility, Web, ThemeManager, WorkflowInstanceService, WorkflowSubscriptionService } from "gd-sprest-bs/gd-sprest/lib";
    export {
            Apps, ContextInfo, GroupService, GroupSiteManager, HubSites, HubSitesUtility,
            List, Navigation, PeopleManager, PeoplePicker, ProfileLoader, Search, Site, SiteManager,
            SocialFeed, ThemeManager, UserProfile, Utility, Web, WorkflowInstanceService, WorkflowSubscriptionService
    }
    
    /**
        * Helper Class
        */
    import * as Helper from "gd-sprest-bs/gd-sprest/helper";
    export { Helper }
    
    /**
        * Library Components
        */
    import * as Lib from "gd-sprest-bs/gd-sprest/lib";
    export { Lib }
    
    /**
        * $REST Global Variable
        */
    export * from "gd-sprest-bs/gd-sprest/rest";
    
    /**
        * SharePoint Enumerator Types
        */
    import { SPTypes } from "gd-sprest-bs/gd-sprest/sptypes";
    export { SPTypes }
    
    /**
        * Intellisense
        */
    import * as Types from "gd-sprest-bs/gd-sprest/intellisense";
    export { Types }
}

declare module 'gd-sprest-bs/components' {
    export * from "gd-sprest-bs/gd-bs/components";
    export * from "gd-sprest-bs/components/datetime";
    export * from "gd-sprest-bs/components/field";
    export * from "gd-sprest-bs/components/listForm";
    export * from "gd-sprest-bs/components/listFormDialog";
    export * from "gd-sprest-bs/components/peoplePicker";
    
    import { IFormControlTypes as Parent } from "gd-sprest-bs/gd-bs/components/formControl";
    export interface IFormControlTypes extends Parent {
        DateTime: number;
        PeoplePicker: number;
    }
    export const FormControlTypes: IFormControlTypes;
}

declare module 'gd-sprest-bs/webparts' {
    export * from "gd-sprest-bs/webparts/helper";
    export * from "gd-sprest-bs/webparts/wp";
    export * from "gd-sprest-bs/webparts/wpList";
    export * from "gd-sprest-bs/webparts/wpListFields";
    export * from "gd-sprest-bs/webparts/wpSearch";
    export * from "gd-sprest-bs/webparts/wpTabs";
    export * from "gd-sprest-bs/webparts/wpTaxonomy";
}

declare module 'gd-sprest-bs/rest' {
    import { IconTypes, Icons } from "gd-sprest-bs/gd-bs";
    import { IREST } from "gd-sprest-bs/gd-sprest";
    import * as Components from "gd-sprest-bs/components";
    import * as WebParts from "gd-sprest-bs/webparts";
    
    /**
      * $REST Bootstrap Library
      */
    export interface IRESTBS extends IREST {
        Components,
        Icons, IconTypes,
        WebParts
    }
}

declare module 'gd-sprest-bs/gd-bs/components' {
    export * from "gd-sprest-bs/gd-bs/components/accordion";
    export * from "gd-sprest-bs/gd-bs/components/alert";
    export * from "gd-sprest-bs/gd-bs/components/badge";
    export * from "gd-sprest-bs/gd-bs/components/breadcrumb";
    export * from "gd-sprest-bs/gd-bs/components/button";
    export * from "gd-sprest-bs/gd-bs/components/buttonGroup";
    export * from "gd-sprest-bs/gd-bs/components/card";
    export * from "gd-sprest-bs/gd-bs/components/cardGroup";
    export * from "gd-sprest-bs/gd-bs/components/carousel";
    export * from "gd-sprest-bs/gd-bs/components/checkboxGroup";
    export * from "gd-sprest-bs/gd-bs/components/collapse";
    export * from "gd-sprest-bs/gd-bs/components/dropdown";
    export * from "gd-sprest-bs/gd-bs/components/form";
    export * from "gd-sprest-bs/gd-bs/components/formControl";
    export * from "gd-sprest-bs/gd-bs/components/inputGroup";
    export * from "gd-sprest-bs/gd-bs/components/jumbotron";
    export * from "gd-sprest-bs/gd-bs/components/listBox";
    export * from "gd-sprest-bs/gd-bs/components/listGroup";
    export * from "gd-sprest-bs/gd-bs/components/modal";
    export * from "gd-sprest-bs/gd-bs/components/nav";
    export * from "gd-sprest-bs/gd-bs/components/navbar";
    export * from "gd-sprest-bs/gd-bs/components/offcanvas";
    export * from "gd-sprest-bs/gd-bs/components/pagination";
    export * from "gd-sprest-bs/gd-bs/components/popover";
    export * from "gd-sprest-bs/gd-bs/components/progress";
    export * from "gd-sprest-bs/gd-bs/components/progressGroup";
    export * from "gd-sprest-bs/gd-bs/components/spinner";
    export * from "gd-sprest-bs/gd-bs/components/table";
    export * from "gd-sprest-bs/gd-bs/components/toast";
    export * from "gd-sprest-bs/gd-bs/components/toolbar";
    export * from "gd-sprest-bs/gd-bs/components/tooltip";
}

declare module 'gd-sprest-bs/gd-bs/icons' {
    
    /**
      * ### Icons
      * 
      * Renders an icon by type
      * 
      * ```ts
      * import { Icons, IconTypes } from "gd-sprest-bs";
      * 
      * // Create the icon and append it to the target element
      * let elIcon = Icons(IconTypes.Alarm, 32, 32);
      * document.querySelector("#icon").appendChild(elIcon);
      * ```
      */
    export const Icons: (iconType:number, height?:number, width?:number) => HTMLElement;
    
    /**
      * Icon Types
     */
    export const IconTypes: {
        // alarm-fill.svg
        AlarmFill: number;
        // alarm.svg
        Alarm: number;
        // align-bottom.svg
        AlignBottom: number;
        // align-center.svg
        AlignCenter: number;
        // align-end.svg
        AlignEnd: number;
        // align-middle.svg
        AlignMiddle: number;
        // align-start.svg
        AlignStart: number;
        // align-top.svg
        AlignTop: number;
        // alt.svg
        Alt: number;
        // app-indicator.svg
        AppIndicator: number;
        // app.svg
        App: number;
        // archive-fill.svg
        ArchiveFill: number;
        // archive.svg
        Archive: number;
        // arrow-90deg-down.svg
        Arrow90degDown: number;
        // arrow-90deg-left.svg
        Arrow90degLeft: number;
        // arrow-90deg-right.svg
        Arrow90degRight: number;
        // arrow-90deg-up.svg
        Arrow90degUp: number;
        // arrow-bar-down.svg
        ArrowBarDown: number;
        // arrow-bar-left.svg
        ArrowBarLeft: number;
        // arrow-bar-right.svg
        ArrowBarRight: number;
        // arrow-bar-up.svg
        ArrowBarUp: number;
        // arrow-clockwise.svg
        ArrowClockwise: number;
        // arrow-counterclockwise.svg
        ArrowCounterclockwise: number;
        // arrow-down-circle-fill.svg
        ArrowDownCircleFill: number;
        // arrow-down-circle.svg
        ArrowDownCircle: number;
        // arrow-down-left-circle-fill.svg
        ArrowDownLeftCircleFill: number;
        // arrow-down-left-circle.svg
        ArrowDownLeftCircle: number;
        // arrow-down-left-square-fill.svg
        ArrowDownLeftSquareFill: number;
        // arrow-down-left-square.svg
        ArrowDownLeftSquare: number;
        // arrow-down-left.svg
        ArrowDownLeft: number;
        // arrow-down-right-circle-fill.svg
        ArrowDownRightCircleFill: number;
        // arrow-down-right-circle.svg
        ArrowDownRightCircle: number;
        // arrow-down-right-square-fill.svg
        ArrowDownRightSquareFill: number;
        // arrow-down-right-square.svg
        ArrowDownRightSquare: number;
        // arrow-down-right.svg
        ArrowDownRight: number;
        // arrow-down-short.svg
        ArrowDownShort: number;
        // arrow-down-square-fill.svg
        ArrowDownSquareFill: number;
        // arrow-down-square.svg
        ArrowDownSquare: number;
        // arrow-down-up.svg
        ArrowDownUp: number;
        // arrow-down.svg
        ArrowDown: number;
        // arrow-left-circle-fill.svg
        ArrowLeftCircleFill: number;
        // arrow-left-circle.svg
        ArrowLeftCircle: number;
        // arrow-left-right.svg
        ArrowLeftRight: number;
        // arrow-left-short.svg
        ArrowLeftShort: number;
        // arrow-left-square-fill.svg
        ArrowLeftSquareFill: number;
        // arrow-left-square.svg
        ArrowLeftSquare: number;
        // arrow-left.svg
        ArrowLeft: number;
        // arrow-repeat.svg
        ArrowRepeat: number;
        // arrow-return-left.svg
        ArrowReturnLeft: number;
        // arrow-return-right.svg
        ArrowReturnRight: number;
        // arrow-right-circle-fill.svg
        ArrowRightCircleFill: number;
        // arrow-right-circle.svg
        ArrowRightCircle: number;
        // arrow-right-short.svg
        ArrowRightShort: number;
        // arrow-right-square-fill.svg
        ArrowRightSquareFill: number;
        // arrow-right-square.svg
        ArrowRightSquare: number;
        // arrow-right.svg
        ArrowRight: number;
        // arrow-up-circle-fill.svg
        ArrowUpCircleFill: number;
        // arrow-up-circle.svg
        ArrowUpCircle: number;
        // arrow-up-left-circle-fill.svg
        ArrowUpLeftCircleFill: number;
        // arrow-up-left-circle.svg
        ArrowUpLeftCircle: number;
        // arrow-up-left-square-fill.svg
        ArrowUpLeftSquareFill: number;
        // arrow-up-left-square.svg
        ArrowUpLeftSquare: number;
        // arrow-up-left.svg
        ArrowUpLeft: number;
        // arrow-up-right-circle-fill.svg
        ArrowUpRightCircleFill: number;
        // arrow-up-right-circle.svg
        ArrowUpRightCircle: number;
        // arrow-up-right-square-fill.svg
        ArrowUpRightSquareFill: number;
        // arrow-up-right-square.svg
        ArrowUpRightSquare: number;
        // arrow-up-right.svg
        ArrowUpRight: number;
        // arrow-up-short.svg
        ArrowUpShort: number;
        // arrow-up-square-fill.svg
        ArrowUpSquareFill: number;
        // arrow-up-square.svg
        ArrowUpSquare: number;
        // arrow-up.svg
        ArrowUp: number;
        // arrows-angle-contract.svg
        ArrowsAngleContract: number;
        // arrows-angle-expand.svg
        ArrowsAngleExpand: number;
        // arrows-collapse.svg
        ArrowsCollapse: number;
        // arrows-expand.svg
        ArrowsExpand: number;
        // arrows-fullscreen.svg
        ArrowsFullscreen: number;
        // arrows-move.svg
        ArrowsMove: number;
        // aspect-ratio-fill.svg
        AspectRatioFill: number;
        // aspect-ratio.svg
        AspectRatio: number;
        // asterisk.svg
        Asterisk: number;
        // at.svg
        At: number;
        // award-fill.svg
        AwardFill: number;
        // award.svg
        Award: number;
        // back.svg
        Back: number;
        // backspace-fill.svg
        BackspaceFill: number;
        // backspace-reverse-fill.svg
        BackspaceReverseFill: number;
        // backspace-reverse.svg
        BackspaceReverse: number;
        // backspace.svg
        Backspace: number;
        // badge-3d-fill.svg
        Badge3dFill: number;
        // badge-3d.svg
        Badge3d: number;
        // badge-4k-fill.svg
        Badge4kFill: number;
        // badge-4k.svg
        Badge4k: number;
        // badge-8k-fill.svg
        Badge8kFill: number;
        // badge-8k.svg
        Badge8k: number;
        // badge-ad-fill.svg
        BadgeAdFill: number;
        // badge-ad.svg
        BadgeAd: number;
        // badge-ar-fill.svg
        BadgeArFill: number;
        // badge-ar.svg
        BadgeAr: number;
        // badge-cc-fill.svg
        BadgeCcFill: number;
        // badge-cc.svg
        BadgeCc: number;
        // badge-hd-fill.svg
        BadgeHdFill: number;
        // badge-hd.svg
        BadgeHd: number;
        // badge-tm-fill.svg
        BadgeTmFill: number;
        // badge-tm.svg
        BadgeTm: number;
        // badge-vo-fill.svg
        BadgeVoFill: number;
        // badge-vo.svg
        BadgeVo: number;
        // badge-vr-fill.svg
        BadgeVrFill: number;
        // badge-vr.svg
        BadgeVr: number;
        // badge-wc-fill.svg
        BadgeWcFill: number;
        // badge-wc.svg
        BadgeWc: number;
        // bag-check-fill.svg
        BagCheckFill: number;
        // bag-check.svg
        BagCheck: number;
        // bag-dash-fill.svg
        BagDashFill: number;
        // bag-dash.svg
        BagDash: number;
        // bag-fill.svg
        BagFill: number;
        // bag-plus-fill.svg
        BagPlusFill: number;
        // bag-plus.svg
        BagPlus: number;
        // bag-x-fill.svg
        BagXFill: number;
        // bag-x.svg
        BagX: number;
        // bag.svg
        Bag: number;
        // bar-chart-fill.svg
        BarChartFill: number;
        // bar-chart-line-fill.svg
        BarChartLineFill: number;
        // bar-chart-line.svg
        BarChartLine: number;
        // bar-chart-steps.svg
        BarChartSteps: number;
        // bar-chart.svg
        BarChart: number;
        // basket-fill.svg
        BasketFill: number;
        // basket.svg
        Basket: number;
        // basket2-fill.svg
        Basket2Fill: number;
        // basket2.svg
        Basket2: number;
        // basket3-fill.svg
        Basket3Fill: number;
        // basket3.svg
        Basket3: number;
        // battery-charging.svg
        BatteryCharging: number;
        // battery-full.svg
        BatteryFull: number;
        // battery-half.svg
        BatteryHalf: number;
        // battery.svg
        Battery: number;
        // bell-fill.svg
        BellFill: number;
        // bell.svg
        Bell: number;
        // bezier.svg
        Bezier: number;
        // bezier2.svg
        Bezier2: number;
        // bicycle.svg
        Bicycle: number;
        // binoculars-fill.svg
        BinocularsFill: number;
        // binoculars.svg
        Binoculars: number;
        // blockquote-left.svg
        BlockquoteLeft: number;
        // blockquote-right.svg
        BlockquoteRight: number;
        // book-fill.svg
        BookFill: number;
        // book-half.svg
        BookHalf: number;
        // book.svg
        Book: number;
        // bookmark-check-fill.svg
        BookmarkCheckFill: number;
        // bookmark-check.svg
        BookmarkCheck: number;
        // bookmark-dash-fill.svg
        BookmarkDashFill: number;
        // bookmark-dash.svg
        BookmarkDash: number;
        // bookmark-fill.svg
        BookmarkFill: number;
        // bookmark-heart-fill.svg
        BookmarkHeartFill: number;
        // bookmark-heart.svg
        BookmarkHeart: number;
        // bookmark-plus-fill.svg
        BookmarkPlusFill: number;
        // bookmark-plus.svg
        BookmarkPlus: number;
        // bookmark-star-fill.svg
        BookmarkStarFill: number;
        // bookmark-star.svg
        BookmarkStar: number;
        // bookmark-x-fill.svg
        BookmarkXFill: number;
        // bookmark-x.svg
        BookmarkX: number;
        // bookmark.svg
        Bookmark: number;
        // bookmarks-fill.svg
        BookmarksFill: number;
        // bookmarks.svg
        Bookmarks: number;
        // bookshelf.svg
        Bookshelf: number;
        // bootstrap-fill.svg
        BootstrapFill: number;
        // bootstrap-reboot.svg
        BootstrapReboot: number;
        // bootstrap.svg
        Bootstrap: number;
        // border-all.svg
        BorderAll: number;
        // border-bottom.svg
        BorderBottom: number;
        // border-center.svg
        BorderCenter: number;
        // border-inner.svg
        BorderInner: number;
        // border-left.svg
        BorderLeft: number;
        // border-middle.svg
        BorderMiddle: number;
        // border-outer.svg
        BorderOuter: number;
        // border-right.svg
        BorderRight: number;
        // border-style.svg
        BorderStyle: number;
        // border-top.svg
        BorderTop: number;
        // border-width.svg
        BorderWidth: number;
        // border.svg
        Border: number;
        // bounding-box-circles.svg
        BoundingBoxCircles: number;
        // bounding-box.svg
        BoundingBox: number;
        // box-arrow-down-left.svg
        BoxArrowDownLeft: number;
        // box-arrow-down-right.svg
        BoxArrowDownRight: number;
        // box-arrow-down.svg
        BoxArrowDown: number;
        // box-arrow-in-down-left.svg
        BoxArrowInDownLeft: number;
        // box-arrow-in-down-right.svg
        BoxArrowInDownRight: number;
        // box-arrow-in-down.svg
        BoxArrowInDown: number;
        // box-arrow-in-left.svg
        BoxArrowInLeft: number;
        // box-arrow-in-right.svg
        BoxArrowInRight: number;
        // box-arrow-in-up-left.svg
        BoxArrowInUpLeft: number;
        // box-arrow-in-up-right.svg
        BoxArrowInUpRight: number;
        // box-arrow-in-up.svg
        BoxArrowInUp: number;
        // box-arrow-left.svg
        BoxArrowLeft: number;
        // box-arrow-right.svg
        BoxArrowRight: number;
        // box-arrow-up-left.svg
        BoxArrowUpLeft: number;
        // box-arrow-up-right.svg
        BoxArrowUpRight: number;
        // box-arrow-up.svg
        BoxArrowUp: number;
        // box-seam.svg
        BoxSeam: number;
        // box.svg
        Box: number;
        // braces.svg
        Braces: number;
        // bricks.svg
        Bricks: number;
        // briefcase-fill.svg
        BriefcaseFill: number;
        // briefcase.svg
        Briefcase: number;
        // brightness-alt-high-fill.svg
        BrightnessAltHighFill: number;
        // brightness-alt-high.svg
        BrightnessAltHigh: number;
        // brightness-alt-low-fill.svg
        BrightnessAltLowFill: number;
        // brightness-alt-low.svg
        BrightnessAltLow: number;
        // brightness-high-fill.svg
        BrightnessHighFill: number;
        // brightness-high.svg
        BrightnessHigh: number;
        // brightness-low-fill.svg
        BrightnessLowFill: number;
        // brightness-low.svg
        BrightnessLow: number;
        // broadcast-pin.svg
        BroadcastPin: number;
        // broadcast.svg
        Broadcast: number;
        // brush-fill.svg
        BrushFill: number;
        // brush.svg
        Brush: number;
        // bucket-fill.svg
        BucketFill: number;
        // bucket.svg
        Bucket: number;
        // bug-fill.svg
        BugFill: number;
        // bug.svg
        Bug: number;
        // building.svg
        Building: number;
        // bullseye.svg
        Bullseye: number;
        // calculator-fill.svg
        CalculatorFill: number;
        // calculator.svg
        Calculator: number;
        // calendar-check-fill.svg
        CalendarCheckFill: number;
        // calendar-check.svg
        CalendarCheck: number;
        // calendar-date-fill.svg
        CalendarDateFill: number;
        // calendar-date.svg
        CalendarDate: number;
        // calendar-day-fill.svg
        CalendarDayFill: number;
        // calendar-day.svg
        CalendarDay: number;
        // calendar-event-fill.svg
        CalendarEventFill: number;
        // calendar-event.svg
        CalendarEvent: number;
        // calendar-fill.svg
        CalendarFill: number;
        // calendar-minus-fill.svg
        CalendarMinusFill: number;
        // calendar-minus.svg
        CalendarMinus: number;
        // calendar-month-fill.svg
        CalendarMonthFill: number;
        // calendar-month.svg
        CalendarMonth: number;
        // calendar-plus-fill.svg
        CalendarPlusFill: number;
        // calendar-plus.svg
        CalendarPlus: number;
        // calendar-range-fill.svg
        CalendarRangeFill: number;
        // calendar-range.svg
        CalendarRange: number;
        // calendar-week-fill.svg
        CalendarWeekFill: number;
        // calendar-week.svg
        CalendarWeek: number;
        // calendar-x-fill.svg
        CalendarXFill: number;
        // calendar-x.svg
        CalendarX: number;
        // calendar.svg
        Calendar: number;
        // calendar2-check-fill.svg
        Calendar2CheckFill: number;
        // calendar2-check.svg
        Calendar2Check: number;
        // calendar2-date-fill.svg
        Calendar2DateFill: number;
        // calendar2-date.svg
        Calendar2Date: number;
        // calendar2-day-fill.svg
        Calendar2DayFill: number;
        // calendar2-day.svg
        Calendar2Day: number;
        // calendar2-event-fill.svg
        Calendar2EventFill: number;
        // calendar2-event.svg
        Calendar2Event: number;
        // calendar2-fill.svg
        Calendar2Fill: number;
        // calendar2-minus-fill.svg
        Calendar2MinusFill: number;
        // calendar2-minus.svg
        Calendar2Minus: number;
        // calendar2-month-fill.svg
        Calendar2MonthFill: number;
        // calendar2-month.svg
        Calendar2Month: number;
        // calendar2-plus-fill.svg
        Calendar2PlusFill: number;
        // calendar2-plus.svg
        Calendar2Plus: number;
        // calendar2-range-fill.svg
        Calendar2RangeFill: number;
        // calendar2-range.svg
        Calendar2Range: number;
        // calendar2-week-fill.svg
        Calendar2WeekFill: number;
        // calendar2-week.svg
        Calendar2Week: number;
        // calendar2-x-fill.svg
        Calendar2XFill: number;
        // calendar2-x.svg
        Calendar2X: number;
        // calendar2.svg
        Calendar2: number;
        // calendar3-event-fill.svg
        Calendar3EventFill: number;
        // calendar3-event.svg
        Calendar3Event: number;
        // calendar3-fill.svg
        Calendar3Fill: number;
        // calendar3-range-fill.svg
        Calendar3RangeFill: number;
        // calendar3-range.svg
        Calendar3Range: number;
        // calendar3-week-fill.svg
        Calendar3WeekFill: number;
        // calendar3-week.svg
        Calendar3Week: number;
        // calendar3.svg
        Calendar3: number;
        // calendar4-event.svg
        Calendar4Event: number;
        // calendar4-range.svg
        Calendar4Range: number;
        // calendar4-week.svg
        Calendar4Week: number;
        // calendar4.svg
        Calendar4: number;
        // camera-fill.svg
        CameraFill: number;
        // camera-reels-fill.svg
        CameraReelsFill: number;
        // camera-reels.svg
        CameraReels: number;
        // camera-video-fill.svg
        CameraVideoFill: number;
        // camera-video-off-fill.svg
        CameraVideoOffFill: number;
        // camera-video-off.svg
        CameraVideoOff: number;
        // camera-video.svg
        CameraVideo: number;
        // camera.svg
        Camera: number;
        // camera2.svg
        Camera2: number;
        // capslock-fill.svg
        CapslockFill: number;
        // capslock.svg
        Capslock: number;
        // card-checklist.svg
        CardChecklist: number;
        // card-heading.svg
        CardHeading: number;
        // card-image.svg
        CardImage: number;
        // card-list.svg
        CardList: number;
        // card-text.svg
        CardText: number;
        // caret-down-fill.svg
        CaretDownFill: number;
        // caret-down-square-fill.svg
        CaretDownSquareFill: number;
        // caret-down-square.svg
        CaretDownSquare: number;
        // caret-down.svg
        CaretDown: number;
        // caret-left-fill.svg
        CaretLeftFill: number;
        // caret-left-square-fill.svg
        CaretLeftSquareFill: number;
        // caret-left-square.svg
        CaretLeftSquare: number;
        // caret-left.svg
        CaretLeft: number;
        // caret-right-fill.svg
        CaretRightFill: number;
        // caret-right-square-fill.svg
        CaretRightSquareFill: number;
        // caret-right-square.svg
        CaretRightSquare: number;
        // caret-right.svg
        CaretRight: number;
        // caret-up-fill.svg
        CaretUpFill: number;
        // caret-up-square-fill.svg
        CaretUpSquareFill: number;
        // caret-up-square.svg
        CaretUpSquare: number;
        // caret-up.svg
        CaretUp: number;
        // cart-check-fill.svg
        CartCheckFill: number;
        // cart-check.svg
        CartCheck: number;
        // cart-dash-fill.svg
        CartDashFill: number;
        // cart-dash.svg
        CartDash: number;
        // cart-fill.svg
        CartFill: number;
        // cart-plus-fill.svg
        CartPlusFill: number;
        // cart-plus.svg
        CartPlus: number;
        // cart-x-fill.svg
        CartXFill: number;
        // cart-x.svg
        CartX: number;
        // cart.svg
        Cart: number;
        // cart2.svg
        Cart2: number;
        // cart3.svg
        Cart3: number;
        // cart4.svg
        Cart4: number;
        // cash-stack.svg
        CashStack: number;
        // cash.svg
        Cash: number;
        // cast.svg
        Cast: number;
        // chat-dots-fill.svg
        ChatDotsFill: number;
        // chat-dots.svg
        ChatDots: number;
        // chat-fill.svg
        ChatFill: number;
        // chat-left-dots-fill.svg
        ChatLeftDotsFill: number;
        // chat-left-dots.svg
        ChatLeftDots: number;
        // chat-left-fill.svg
        ChatLeftFill: number;
        // chat-left-quote-fill.svg
        ChatLeftQuoteFill: number;
        // chat-left-quote.svg
        ChatLeftQuote: number;
        // chat-left-text-fill.svg
        ChatLeftTextFill: number;
        // chat-left-text.svg
        ChatLeftText: number;
        // chat-left.svg
        ChatLeft: number;
        // chat-quote-fill.svg
        ChatQuoteFill: number;
        // chat-quote.svg
        ChatQuote: number;
        // chat-right-dots-fill.svg
        ChatRightDotsFill: number;
        // chat-right-dots.svg
        ChatRightDots: number;
        // chat-right-fill.svg
        ChatRightFill: number;
        // chat-right-quote-fill.svg
        ChatRightQuoteFill: number;
        // chat-right-quote.svg
        ChatRightQuote: number;
        // chat-right-text-fill.svg
        ChatRightTextFill: number;
        // chat-right-text.svg
        ChatRightText: number;
        // chat-right.svg
        ChatRight: number;
        // chat-square-dots-fill.svg
        ChatSquareDotsFill: number;
        // chat-square-dots.svg
        ChatSquareDots: number;
        // chat-square-fill.svg
        ChatSquareFill: number;
        // chat-square-quote-fill.svg
        ChatSquareQuoteFill: number;
        // chat-square-quote.svg
        ChatSquareQuote: number;
        // chat-square-text-fill.svg
        ChatSquareTextFill: number;
        // chat-square-text.svg
        ChatSquareText: number;
        // chat-square.svg
        ChatSquare: number;
        // chat-text-fill.svg
        ChatTextFill: number;
        // chat-text.svg
        ChatText: number;
        // chat.svg
        Chat: number;
        // check-all.svg
        CheckAll: number;
        // check-circle-fill.svg
        CheckCircleFill: number;
        // check-circle.svg
        CheckCircle: number;
        // check-square-fill.svg
        CheckSquareFill: number;
        // check-square.svg
        CheckSquare: number;
        // check.svg
        Check: number;
        // check2-all.svg
        Check2All: number;
        // check2-circle.svg
        Check2Circle: number;
        // check2-square.svg
        Check2Square: number;
        // check2.svg
        Check2: number;
        // chevron-bar-contract.svg
        ChevronBarContract: number;
        // chevron-bar-down.svg
        ChevronBarDown: number;
        // chevron-bar-expand.svg
        ChevronBarExpand: number;
        // chevron-bar-left.svg
        ChevronBarLeft: number;
        // chevron-bar-right.svg
        ChevronBarRight: number;
        // chevron-bar-up.svg
        ChevronBarUp: number;
        // chevron-compact-down.svg
        ChevronCompactDown: number;
        // chevron-compact-left.svg
        ChevronCompactLeft: number;
        // chevron-compact-right.svg
        ChevronCompactRight: number;
        // chevron-compact-up.svg
        ChevronCompactUp: number;
        // chevron-contract.svg
        ChevronContract: number;
        // chevron-double-down.svg
        ChevronDoubleDown: number;
        // chevron-double-left.svg
        ChevronDoubleLeft: number;
        // chevron-double-right.svg
        ChevronDoubleRight: number;
        // chevron-double-up.svg
        ChevronDoubleUp: number;
        // chevron-down.svg
        ChevronDown: number;
        // chevron-expand.svg
        ChevronExpand: number;
        // chevron-left.svg
        ChevronLeft: number;
        // chevron-right.svg
        ChevronRight: number;
        // chevron-up.svg
        ChevronUp: number;
        // circle-fill.svg
        CircleFill: number;
        // circle-half.svg
        CircleHalf: number;
        // circle-square.svg
        CircleSquare: number;
        // circle.svg
        Circle: number;
        // clipboard-check.svg
        ClipboardCheck: number;
        // clipboard-data.svg
        ClipboardData: number;
        // clipboard-minus.svg
        ClipboardMinus: number;
        // clipboard-plus.svg
        ClipboardPlus: number;
        // clipboard-x.svg
        ClipboardX: number;
        // clipboard.svg
        Clipboard: number;
        // clock-fill.svg
        ClockFill: number;
        // clock-history.svg
        ClockHistory: number;
        // clock.svg
        Clock: number;
        // cloud-arrow-down-fill.svg
        CloudArrowDownFill: number;
        // cloud-arrow-down.svg
        CloudArrowDown: number;
        // cloud-arrow-up-fill.svg
        CloudArrowUpFill: number;
        // cloud-arrow-up.svg
        CloudArrowUp: number;
        // cloud-check-fill.svg
        CloudCheckFill: number;
        // cloud-check.svg
        CloudCheck: number;
        // cloud-download-fill.svg
        CloudDownloadFill: number;
        // cloud-download.svg
        CloudDownload: number;
        // cloud-fill.svg
        CloudFill: number;
        // cloud-minus-fill.svg
        CloudMinusFill: number;
        // cloud-minus.svg
        CloudMinus: number;
        // cloud-plus-fill.svg
        CloudPlusFill: number;
        // cloud-plus.svg
        CloudPlus: number;
        // cloud-slash-fill.svg
        CloudSlashFill: number;
        // cloud-slash.svg
        CloudSlash: number;
        // cloud-upload-fill.svg
        CloudUploadFill: number;
        // cloud-upload.svg
        CloudUpload: number;
        // cloud.svg
        Cloud: number;
        // code-slash.svg
        CodeSlash: number;
        // code-square.svg
        CodeSquare: number;
        // code.svg
        Code: number;
        // collection-fill.svg
        CollectionFill: number;
        // collection-play-fill.svg
        CollectionPlayFill: number;
        // collection-play.svg
        CollectionPlay: number;
        // collection.svg
        Collection: number;
        // columns-gap.svg
        ColumnsGap: number;
        // columns.svg
        Columns: number;
        // command.svg
        Command: number;
        // compass-fill.svg
        CompassFill: number;
        // compass.svg
        Compass: number;
        // cone-striped.svg
        ConeStriped: number;
        // cone.svg
        Cone: number;
        // controller.svg
        Controller: number;
        // cpu-fill.svg
        CpuFill: number;
        // cpu.svg
        Cpu: number;
        // credit-card-2-back-fill.svg
        CreditCard2BackFill: number;
        // credit-card-2-back.svg
        CreditCard2Back: number;
        // credit-card-2-front-fill.svg
        CreditCard2FrontFill: number;
        // credit-card-2-front.svg
        CreditCard2Front: number;
        // credit-card-fill.svg
        CreditCardFill: number;
        // credit-card.svg
        CreditCard: number;
        // crop.svg
        Crop: number;
        // cup-fill.svg
        CupFill: number;
        // cup-straw.svg
        CupStraw: number;
        // cup.svg
        Cup: number;
        // cursor-fill.svg
        CursorFill: number;
        // cursor-text.svg
        CursorText: number;
        // cursor.svg
        Cursor: number;
        // dash-circle-dotted.svg
        DashCircleDotted: number;
        // dash-circle-fill.svg
        DashCircleFill: number;
        // dash-circle.svg
        DashCircle: number;
        // dash-square-dotted.svg
        DashSquareDotted: number;
        // dash-square-fill.svg
        DashSquareFill: number;
        // dash-square.svg
        DashSquare: number;
        // dash.svg
        Dash: number;
        // diagram-2-fill.svg
        Diagram2Fill: number;
        // diagram-2.svg
        Diagram2: number;
        // diagram-3-fill.svg
        Diagram3Fill: number;
        // diagram-3.svg
        Diagram3: number;
        // diamond-fill.svg
        DiamondFill: number;
        // diamond-half.svg
        DiamondHalf: number;
        // diamond.svg
        Diamond: number;
        // dice-1-fill.svg
        Dice1Fill: number;
        // dice-1.svg
        Dice1: number;
        // dice-2-fill.svg
        Dice2Fill: number;
        // dice-2.svg
        Dice2: number;
        // dice-3-fill.svg
        Dice3Fill: number;
        // dice-3.svg
        Dice3: number;
        // dice-4-fill.svg
        Dice4Fill: number;
        // dice-4.svg
        Dice4: number;
        // dice-5-fill.svg
        Dice5Fill: number;
        // dice-5.svg
        Dice5: number;
        // dice-6-fill.svg
        Dice6Fill: number;
        // dice-6.svg
        Dice6: number;
        // disc-fill.svg
        DiscFill: number;
        // disc.svg
        Disc: number;
        // discord.svg
        Discord: number;
        // display-fill.svg
        DisplayFill: number;
        // display.svg
        Display: number;
        // distribute-horizontal.svg
        DistributeHorizontal: number;
        // distribute-vertical.svg
        DistributeVertical: number;
        // door-closed-fill.svg
        DoorClosedFill: number;
        // door-closed.svg
        DoorClosed: number;
        // door-open-fill.svg
        DoorOpenFill: number;
        // door-open.svg
        DoorOpen: number;
        // dot.svg
        Dot: number;
        // download.svg
        Download: number;
        // droplet-fill.svg
        DropletFill: number;
        // droplet-half.svg
        DropletHalf: number;
        // droplet.svg
        Droplet: number;
        // earbuds.svg
        Earbuds: number;
        // easel-fill.svg
        EaselFill: number;
        // easel.svg
        Easel: number;
        // egg-fill.svg
        EggFill: number;
        // egg-fried.svg
        EggFried: number;
        // egg.svg
        Egg: number;
        // eject-fill.svg
        EjectFill: number;
        // eject.svg
        Eject: number;
        // emoji-angry-fill.svg
        EmojiAngryFill: number;
        // emoji-angry.svg
        EmojiAngry: number;
        // emoji-dizzy-fill.svg
        EmojiDizzyFill: number;
        // emoji-dizzy.svg
        EmojiDizzy: number;
        // emoji-expressionless-fill.svg
        EmojiExpressionlessFill: number;
        // emoji-expressionless.svg
        EmojiExpressionless: number;
        // emoji-frown-fill.svg
        EmojiFrownFill: number;
        // emoji-frown.svg
        EmojiFrown: number;
        // emoji-heart-eyes-fill.svg
        EmojiHeartEyesFill: number;
        // emoji-heart-eyes.svg
        EmojiHeartEyes: number;
        // emoji-laughing-fill.svg
        EmojiLaughingFill: number;
        // emoji-laughing.svg
        EmojiLaughing: number;
        // emoji-neutral-fill.svg
        EmojiNeutralFill: number;
        // emoji-neutral.svg
        EmojiNeutral: number;
        // emoji-smile-fill.svg
        EmojiSmileFill: number;
        // emoji-smile-upside-down-fill.svg
        EmojiSmileUpsideDownFill: number;
        // emoji-smile-upside-down.svg
        EmojiSmileUpsideDown: number;
        // emoji-smile.svg
        EmojiSmile: number;
        // emoji-sunglasses-fill.svg
        EmojiSunglassesFill: number;
        // emoji-sunglasses.svg
        EmojiSunglasses: number;
        // emoji-wink-fill.svg
        EmojiWinkFill: number;
        // emoji-wink.svg
        EmojiWink: number;
        // envelope-fill.svg
        EnvelopeFill: number;
        // envelope-open-fill.svg
        EnvelopeOpenFill: number;
        // envelope-open.svg
        EnvelopeOpen: number;
        // envelope.svg
        Envelope: number;
        // eraser-fill.svg
        EraserFill: number;
        // eraser.svg
        Eraser: number;
        // exclamation-circle-fill.svg
        ExclamationCircleFill: number;
        // exclamation-circle.svg
        ExclamationCircle: number;
        // exclamation-diamond-fill.svg
        ExclamationDiamondFill: number;
        // exclamation-diamond.svg
        ExclamationDiamond: number;
        // exclamation-octagon-fill.svg
        ExclamationOctagonFill: number;
        // exclamation-octagon.svg
        ExclamationOctagon: number;
        // exclamation-square-fill.svg
        ExclamationSquareFill: number;
        // exclamation-square.svg
        ExclamationSquare: number;
        // exclamation-triangle-fill.svg
        ExclamationTriangleFill: number;
        // exclamation-triangle.svg
        ExclamationTriangle: number;
        // exclamation.svg
        Exclamation: number;
        // exclude.svg
        Exclude: number;
        // eye-fill.svg
        EyeFill: number;
        // eye-slash-fill.svg
        EyeSlashFill: number;
        // eye-slash.svg
        EyeSlash: number;
        // eye.svg
        Eye: number;
        // eyedropper.svg
        Eyedropper: number;
        // eyeglasses.svg
        Eyeglasses: number;
        // facebook.svg
        Facebook: number;
        // file-arrow-down-fill.svg
        FileArrowDownFill: number;
        // file-arrow-down.svg
        FileArrowDown: number;
        // file-arrow-up-fill.svg
        FileArrowUpFill: number;
        // file-arrow-up.svg
        FileArrowUp: number;
        // file-bar-graph-fill.svg
        FileBarGraphFill: number;
        // file-bar-graph.svg
        FileBarGraph: number;
        // file-binary-fill.svg
        FileBinaryFill: number;
        // file-binary.svg
        FileBinary: number;
        // file-break-fill.svg
        FileBreakFill: number;
        // file-break.svg
        FileBreak: number;
        // file-check-fill.svg
        FileCheckFill: number;
        // file-check.svg
        FileCheck: number;
        // file-code-fill.svg
        FileCodeFill: number;
        // file-code.svg
        FileCode: number;
        // file-diff-fill.svg
        FileDiffFill: number;
        // file-diff.svg
        FileDiff: number;
        // file-earmark-arrow-down-fill.svg
        FileEarmarkArrowDownFill: number;
        // file-earmark-arrow-down.svg
        FileEarmarkArrowDown: number;
        // file-earmark-arrow-up-fill.svg
        FileEarmarkArrowUpFill: number;
        // file-earmark-arrow-up.svg
        FileEarmarkArrowUp: number;
        // file-earmark-bar-graph-fill.svg
        FileEarmarkBarGraphFill: number;
        // file-earmark-bar-graph.svg
        FileEarmarkBarGraph: number;
        // file-earmark-binary-fill.svg
        FileEarmarkBinaryFill: number;
        // file-earmark-binary.svg
        FileEarmarkBinary: number;
        // file-earmark-break-fill.svg
        FileEarmarkBreakFill: number;
        // file-earmark-break.svg
        FileEarmarkBreak: number;
        // file-earmark-check-fill.svg
        FileEarmarkCheckFill: number;
        // file-earmark-check.svg
        FileEarmarkCheck: number;
        // file-earmark-code-fill.svg
        FileEarmarkCodeFill: number;
        // file-earmark-code.svg
        FileEarmarkCode: number;
        // file-earmark-diff-fill.svg
        FileEarmarkDiffFill: number;
        // file-earmark-diff.svg
        FileEarmarkDiff: number;
        // file-earmark-easel-fill.svg
        FileEarmarkEaselFill: number;
        // file-earmark-easel.svg
        FileEarmarkEasel: number;
        // file-earmark-excel-fill.svg
        FileEarmarkExcelFill: number;
        // file-earmark-excel.svg
        FileEarmarkExcel: number;
        // file-earmark-fill.svg
        FileEarmarkFill: number;
        // file-earmark-font-fill.svg
        FileEarmarkFontFill: number;
        // file-earmark-font.svg
        FileEarmarkFont: number;
        // file-earmark-image-fill.svg
        FileEarmarkImageFill: number;
        // file-earmark-image.svg
        FileEarmarkImage: number;
        // file-earmark-lock-fill.svg
        FileEarmarkLockFill: number;
        // file-earmark-lock.svg
        FileEarmarkLock: number;
        // file-earmark-lock2-fill.svg
        FileEarmarkLock2Fill: number;
        // file-earmark-lock2.svg
        FileEarmarkLock2: number;
        // file-earmark-medical-fill.svg
        FileEarmarkMedicalFill: number;
        // file-earmark-medical.svg
        FileEarmarkMedical: number;
        // file-earmark-minus-fill.svg
        FileEarmarkMinusFill: number;
        // file-earmark-minus.svg
        FileEarmarkMinus: number;
        // file-earmark-music-fill.svg
        FileEarmarkMusicFill: number;
        // file-earmark-music.svg
        FileEarmarkMusic: number;
        // file-earmark-person-fill.svg
        FileEarmarkPersonFill: number;
        // file-earmark-person.svg
        FileEarmarkPerson: number;
        // file-earmark-play-fill.svg
        FileEarmarkPlayFill: number;
        // file-earmark-play.svg
        FileEarmarkPlay: number;
        // file-earmark-plus-fill.svg
        FileEarmarkPlusFill: number;
        // file-earmark-plus.svg
        FileEarmarkPlus: number;
        // file-earmark-post-fill.svg
        FileEarmarkPostFill: number;
        // file-earmark-post.svg
        FileEarmarkPost: number;
        // file-earmark-ppt-fill.svg
        FileEarmarkPptFill: number;
        // file-earmark-ppt.svg
        FileEarmarkPpt: number;
        // file-earmark-richtext-fill.svg
        FileEarmarkRichtextFill: number;
        // file-earmark-richtext.svg
        FileEarmarkRichtext: number;
        // file-earmark-ruled-fill.svg
        FileEarmarkRuledFill: number;
        // file-earmark-ruled.svg
        FileEarmarkRuled: number;
        // file-earmark-slides-fill.svg
        FileEarmarkSlidesFill: number;
        // file-earmark-slides.svg
        FileEarmarkSlides: number;
        // file-earmark-spreadsheet-fill.svg
        FileEarmarkSpreadsheetFill: number;
        // file-earmark-spreadsheet.svg
        FileEarmarkSpreadsheet: number;
        // file-earmark-text-fill.svg
        FileEarmarkTextFill: number;
        // file-earmark-text.svg
        FileEarmarkText: number;
        // file-earmark-word-fill.svg
        FileEarmarkWordFill: number;
        // file-earmark-word.svg
        FileEarmarkWord: number;
        // file-earmark-x-fill.svg
        FileEarmarkXFill: number;
        // file-earmark-x.svg
        FileEarmarkX: number;
        // file-earmark-zip-fill.svg
        FileEarmarkZipFill: number;
        // file-earmark-zip.svg
        FileEarmarkZip: number;
        // file-earmark.svg
        FileEarmark: number;
        // file-easel-fill.svg
        FileEaselFill: number;
        // file-easel.svg
        FileEasel: number;
        // file-excel-fill.svg
        FileExcelFill: number;
        // file-excel.svg
        FileExcel: number;
        // file-fill.svg
        FileFill: number;
        // file-font-fill.svg
        FileFontFill: number;
        // file-font.svg
        FileFont: number;
        // file-image-fill.svg
        FileImageFill: number;
        // file-image.svg
        FileImage: number;
        // file-lock-fill.svg
        FileLockFill: number;
        // file-lock.svg
        FileLock: number;
        // file-lock2-fill.svg
        FileLock2Fill: number;
        // file-lock2.svg
        FileLock2: number;
        // file-medical-fill.svg
        FileMedicalFill: number;
        // file-medical.svg
        FileMedical: number;
        // file-minus-fill.svg
        FileMinusFill: number;
        // file-minus.svg
        FileMinus: number;
        // file-music-fill.svg
        FileMusicFill: number;
        // file-music.svg
        FileMusic: number;
        // file-person-fill.svg
        FilePersonFill: number;
        // file-person.svg
        FilePerson: number;
        // file-play-fill.svg
        FilePlayFill: number;
        // file-play.svg
        FilePlay: number;
        // file-plus-fill.svg
        FilePlusFill: number;
        // file-plus.svg
        FilePlus: number;
        // file-post-fill.svg
        FilePostFill: number;
        // file-post.svg
        FilePost: number;
        // file-ppt-fill.svg
        FilePptFill: number;
        // file-ppt.svg
        FilePpt: number;
        // file-richtext-fill.svg
        FileRichtextFill: number;
        // file-richtext.svg
        FileRichtext: number;
        // file-ruled-fill.svg
        FileRuledFill: number;
        // file-ruled.svg
        FileRuled: number;
        // file-slides-fill.svg
        FileSlidesFill: number;
        // file-slides.svg
        FileSlides: number;
        // file-spreadsheet-fill.svg
        FileSpreadsheetFill: number;
        // file-spreadsheet.svg
        FileSpreadsheet: number;
        // file-text-fill.svg
        FileTextFill: number;
        // file-text.svg
        FileText: number;
        // file-word-fill.svg
        FileWordFill: number;
        // file-word.svg
        FileWord: number;
        // file-x-fill.svg
        FileXFill: number;
        // file-x.svg
        FileX: number;
        // file-zip-fill.svg
        FileZipFill: number;
        // file-zip.svg
        FileZip: number;
        // file.svg
        File: number;
        // files-alt.svg
        FilesAlt: number;
        // files.svg
        Files: number;
        // film.svg
        Film: number;
        // filter-circle-fill.svg
        FilterCircleFill: number;
        // filter-circle.svg
        FilterCircle: number;
        // filter-left.svg
        FilterLeft: number;
        // filter-right.svg
        FilterRight: number;
        // filter-square-fill.svg
        FilterSquareFill: number;
        // filter-square.svg
        FilterSquare: number;
        // filter.svg
        Filter: number;
        // flag-fill.svg
        FlagFill: number;
        // flag.svg
        Flag: number;
        // flower1.svg
        Flower1: number;
        // flower2.svg
        Flower2: number;
        // flower3.svg
        Flower3: number;
        // folder-check.svg
        FolderCheck: number;
        // folder-fill.svg
        FolderFill: number;
        // folder-minus.svg
        FolderMinus: number;
        // folder-plus.svg
        FolderPlus: number;
        // folder-symlink-fill.svg
        FolderSymlinkFill: number;
        // folder-symlink.svg
        FolderSymlink: number;
        // folder-x.svg
        FolderX: number;
        // folder.svg
        Folder: number;
        // folder2-open.svg
        Folder2Open: number;
        // folder2.svg
        Folder2: number;
        // fonts.svg
        Fonts: number;
        // forward-fill.svg
        ForwardFill: number;
        // forward.svg
        Forward: number;
        // front.svg
        Front: number;
        // fullscreen-exit.svg
        FullscreenExit: number;
        // fullscreen.svg
        Fullscreen: number;
        // funnel-fill.svg
        FunnelFill: number;
        // funnel.svg
        Funnel: number;
        // gear-fill.svg
        GearFill: number;
        // gear-wide-connected.svg
        GearWideConnected: number;
        // gear-wide.svg
        GearWide: number;
        // gear.svg
        Gear: number;
        // gem.svg
        Gem: number;
        // geo-alt-fill.svg
        GeoAltFill: number;
        // geo-alt.svg
        GeoAlt: number;
        // geo-fill.svg
        GeoFill: number;
        // geo.svg
        Geo: number;
        // gift-fill.svg
        GiftFill: number;
        // gift.svg
        Gift: number;
        // github.svg
        Github: number;
        // globe.svg
        Globe: number;
        // globe2.svg
        Globe2: number;
        // google.svg
        Google: number;
        // graph-down.svg
        GraphDown: number;
        // graph-up.svg
        GraphUp: number;
        // grid-1x2-fill.svg
        Grid1x2Fill: number;
        // grid-1x2.svg
        Grid1x2: number;
        // grid-3x2-gap-fill.svg
        Grid3x2GapFill: number;
        // grid-3x2-gap.svg
        Grid3x2Gap: number;
        // grid-3x2.svg
        Grid3x2: number;
        // grid-3x3-gap-fill.svg
        Grid3x3GapFill: number;
        // grid-3x3-gap.svg
        Grid3x3Gap: number;
        // grid-3x3.svg
        Grid3x3: number;
        // grid-fill.svg
        GridFill: number;
        // grid.svg
        Grid: number;
        // grip-horizontal.svg
        GripHorizontal: number;
        // grip-vertical.svg
        GripVertical: number;
        // hammer.svg
        Hammer: number;
        // hand-index-fill.svg
        HandIndexFill: number;
        // hand-index-thumb-fill.svg
        HandIndexThumbFill: number;
        // hand-index-thumb.svg
        HandIndexThumb: number;
        // hand-index.svg
        HandIndex: number;
        // hand-thumbs-down-fill.svg
        HandThumbsDownFill: number;
        // hand-thumbs-down.svg
        HandThumbsDown: number;
        // hand-thumbs-up-fill.svg
        HandThumbsUpFill: number;
        // hand-thumbs-up.svg
        HandThumbsUp: number;
        // handbag-fill.svg
        HandbagFill: number;
        // handbag.svg
        Handbag: number;
        // hash.svg
        Hash: number;
        // hdd-fill.svg
        HddFill: number;
        // hdd-network-fill.svg
        HddNetworkFill: number;
        // hdd-network.svg
        HddNetwork: number;
        // hdd-rack-fill.svg
        HddRackFill: number;
        // hdd-rack.svg
        HddRack: number;
        // hdd-stack-fill.svg
        HddStackFill: number;
        // hdd-stack.svg
        HddStack: number;
        // hdd.svg
        Hdd: number;
        // headphones.svg
        Headphones: number;
        // headset.svg
        Headset: number;
        // heart-fill.svg
        HeartFill: number;
        // heart-half.svg
        HeartHalf: number;
        // heart.svg
        Heart: number;
        // heptagon-fill.svg
        HeptagonFill: number;
        // heptagon-half.svg
        HeptagonHalf: number;
        // heptagon.svg
        Heptagon: number;
        // hexagon-fill.svg
        HexagonFill: number;
        // hexagon-half.svg
        HexagonHalf: number;
        // hexagon.svg
        Hexagon: number;
        // hourglass-bottom.svg
        HourglassBottom: number;
        // hourglass-split.svg
        HourglassSplit: number;
        // hourglass-top.svg
        HourglassTop: number;
        // hourglass.svg
        Hourglass: number;
        // house-door-fill.svg
        HouseDoorFill: number;
        // house-door.svg
        HouseDoor: number;
        // house-fill.svg
        HouseFill: number;
        // house.svg
        House: number;
        // hr.svg
        Hr: number;
        // image-alt.svg
        ImageAlt: number;
        // image-fill.svg
        ImageFill: number;
        // image.svg
        Image: number;
        // images.svg
        Images: number;
        // inbox-fill.svg
        InboxFill: number;
        // inbox.svg
        Inbox: number;
        // inboxes-fill.svg
        InboxesFill: number;
        // inboxes.svg
        Inboxes: number;
        // info-circle-fill.svg
        InfoCircleFill: number;
        // info-circle.svg
        InfoCircle: number;
        // info-square-fill.svg
        InfoSquareFill: number;
        // info-square.svg
        InfoSquare: number;
        // info.svg
        Info: number;
        // input-cursor-text.svg
        InputCursorText: number;
        // input-cursor.svg
        InputCursor: number;
        // instagram.svg
        Instagram: number;
        // intersect.svg
        Intersect: number;
        // journal-album.svg
        JournalAlbum: number;
        // journal-arrow-down.svg
        JournalArrowDown: number;
        // journal-arrow-up.svg
        JournalArrowUp: number;
        // journal-bookmark-fill.svg
        JournalBookmarkFill: number;
        // journal-bookmark.svg
        JournalBookmark: number;
        // journal-check.svg
        JournalCheck: number;
        // journal-code.svg
        JournalCode: number;
        // journal-medical.svg
        JournalMedical: number;
        // journal-minus.svg
        JournalMinus: number;
        // journal-plus.svg
        JournalPlus: number;
        // journal-richtext.svg
        JournalRichtext: number;
        // journal-text.svg
        JournalText: number;
        // journal-x.svg
        JournalX: number;
        // journal.svg
        Journal: number;
        // journals.svg
        Journals: number;
        // joystick.svg
        Joystick: number;
        // justify-left.svg
        JustifyLeft: number;
        // justify-right.svg
        JustifyRight: number;
        // justify.svg
        Justify: number;
        // kanban-fill.svg
        KanbanFill: number;
        // kanban.svg
        Kanban: number;
        // key-fill.svg
        KeyFill: number;
        // key.svg
        Key: number;
        // keyboard-fill.svg
        KeyboardFill: number;
        // keyboard.svg
        Keyboard: number;
        // ladder.svg
        Ladder: number;
        // lamp-fill.svg
        LampFill: number;
        // lamp.svg
        Lamp: number;
        // laptop-fill.svg
        LaptopFill: number;
        // laptop.svg
        Laptop: number;
        // layer-backward.svg
        LayerBackward: number;
        // layer-forward.svg
        LayerForward: number;
        // layers-fill.svg
        LayersFill: number;
        // layers-half.svg
        LayersHalf: number;
        // layers.svg
        Layers: number;
        // layout-sidebar-inset-reverse.svg
        LayoutSidebarInsetReverse: number;
        // layout-sidebar-inset.svg
        LayoutSidebarInset: number;
        // layout-sidebar-reverse.svg
        LayoutSidebarReverse: number;
        // layout-sidebar.svg
        LayoutSidebar: number;
        // layout-split.svg
        LayoutSplit: number;
        // layout-text-sidebar-reverse.svg
        LayoutTextSidebarReverse: number;
        // layout-text-sidebar.svg
        LayoutTextSidebar: number;
        // layout-text-window-reverse.svg
        LayoutTextWindowReverse: number;
        // layout-text-window.svg
        LayoutTextWindow: number;
        // layout-three-columns.svg
        LayoutThreeColumns: number;
        // layout-wtf.svg
        LayoutWtf: number;
        // life-preserver.svg
        LifePreserver: number;
        // lightbulb-fill.svg
        LightbulbFill: number;
        // lightbulb-off-fill.svg
        LightbulbOffFill: number;
        // lightbulb-off.svg
        LightbulbOff: number;
        // lightbulb.svg
        Lightbulb: number;
        // lightning-fill.svg
        LightningFill: number;
        // lightning.svg
        Lightning: number;
        // link-45deg.svg
        Link45deg: number;
        // link.svg
        Link: number;
        // linkedin.svg
        Linkedin: number;
        // list-check.svg
        ListCheck: number;
        // list-nested.svg
        ListNested: number;
        // list-ol.svg
        ListOl: number;
        // list-stars.svg
        ListStars: number;
        // list-task.svg
        ListTask: number;
        // list-ul.svg
        ListUl: number;
        // list.svg
        List: number;
        // lock-fill.svg
        LockFill: number;
        // lock.svg
        Lock: number;
        // mailbox.svg
        Mailbox: number;
        // mailbox2.svg
        Mailbox2: number;
        // map-fill.svg
        MapFill: number;
        // map.svg
        Map: number;
        // markdown-fill.svg
        MarkdownFill: number;
        // markdown.svg
        Markdown: number;
        // mask.svg
        Mask: number;
        // megaphone-fill.svg
        MegaphoneFill: number;
        // megaphone.svg
        Megaphone: number;
        // menu-app-fill.svg
        MenuAppFill: number;
        // menu-app.svg
        MenuApp: number;
        // menu-button-fill.svg
        MenuButtonFill: number;
        // menu-button-wide-fill.svg
        MenuButtonWideFill: number;
        // menu-button-wide.svg
        MenuButtonWide: number;
        // menu-button.svg
        MenuButton: number;
        // menu-down.svg
        MenuDown: number;
        // menu-up.svg
        MenuUp: number;
        // mic-fill.svg
        MicFill: number;
        // mic-mute-fill.svg
        MicMuteFill: number;
        // mic-mute.svg
        MicMute: number;
        // mic.svg
        Mic: number;
        // minecart-loaded.svg
        MinecartLoaded: number;
        // minecart.svg
        Minecart: number;
        // moon.svg
        Moon: number;
        // mouse-fill.svg
        MouseFill: number;
        // mouse.svg
        Mouse: number;
        // mouse2-fill.svg
        Mouse2Fill: number;
        // mouse2.svg
        Mouse2: number;
        // mouse3-fill.svg
        Mouse3Fill: number;
        // mouse3.svg
        Mouse3: number;
        // music-note-beamed.svg
        MusicNoteBeamed: number;
        // music-note-list.svg
        MusicNoteList: number;
        // music-note.svg
        MusicNote: number;
        // music-player-fill.svg
        MusicPlayerFill: number;
        // music-player.svg
        MusicPlayer: number;
        // newspaper.svg
        Newspaper: number;
        // node-minus-fill.svg
        NodeMinusFill: number;
        // node-minus.svg
        NodeMinus: number;
        // node-plus-fill.svg
        NodePlusFill: number;
        // node-plus.svg
        NodePlus: number;
        // nut-fill.svg
        NutFill: number;
        // nut.svg
        Nut: number;
        // octagon-fill.svg
        OctagonFill: number;
        // octagon-half.svg
        OctagonHalf: number;
        // octagon.svg
        Octagon: number;
        // option.svg
        Option: number;
        // outlet.svg
        Outlet: number;
        // paint-bucket.svg
        PaintBucket: number;
        // palette-fill.svg
        PaletteFill: number;
        // palette.svg
        Palette: number;
        // palette2.svg
        Palette2: number;
        // paperclip.svg
        Paperclip: number;
        // paragraph.svg
        Paragraph: number;
        // patch-check-fill.svg
        PatchCheckFill: number;
        // patch-check.svg
        PatchCheck: number;
        // patch-exclamation-fill.svg
        PatchExclamationFill: number;
        // patch-exclamation.svg
        PatchExclamation: number;
        // patch-minus-fill.svg
        PatchMinusFill: number;
        // patch-minus.svg
        PatchMinus: number;
        // patch-plus-fill.svg
        PatchPlusFill: number;
        // patch-plus.svg
        PatchPlus: number;
        // patch-question-fill.svg
        PatchQuestionFill: number;
        // patch-question.svg
        PatchQuestion: number;
        // pause-btn-fill.svg
        PauseBtnFill: number;
        // pause-btn.svg
        PauseBtn: number;
        // pause-circle-fill.svg
        PauseCircleFill: number;
        // pause-circle.svg
        PauseCircle: number;
        // pause-fill.svg
        PauseFill: number;
        // pause.svg
        Pause: number;
        // peace-fill.svg
        PeaceFill: number;
        // peace.svg
        Peace: number;
        // pen-fill.svg
        PenFill: number;
        // pen.svg
        Pen: number;
        // pencil-fill.svg
        PencilFill: number;
        // pencil-square.svg
        PencilSquare: number;
        // pencil.svg
        Pencil: number;
        // pentagon-fill.svg
        PentagonFill: number;
        // pentagon-half.svg
        PentagonHalf: number;
        // pentagon.svg
        Pentagon: number;
        // people-fill.svg
        PeopleFill: number;
        // people.svg
        People: number;
        // percent.svg
        Percent: number;
        // person-badge-fill.svg
        PersonBadgeFill: number;
        // person-badge.svg
        PersonBadge: number;
        // person-bounding-box.svg
        PersonBoundingBox: number;
        // person-check-fill.svg
        PersonCheckFill: number;
        // person-check.svg
        PersonCheck: number;
        // person-circle.svg
        PersonCircle: number;
        // person-dash-fill.svg
        PersonDashFill: number;
        // person-dash.svg
        PersonDash: number;
        // person-fill.svg
        PersonFill: number;
        // person-lines-fill.svg
        PersonLinesFill: number;
        // person-plus-fill.svg
        PersonPlusFill: number;
        // person-plus.svg
        PersonPlus: number;
        // person-square.svg
        PersonSquare: number;
        // person-x-fill.svg
        PersonXFill: number;
        // person-x.svg
        PersonX: number;
        // person.svg
        Person: number;
        // phone-fill.svg
        PhoneFill: number;
        // phone-landscape-fill.svg
        PhoneLandscapeFill: number;
        // phone-landscape.svg
        PhoneLandscape: number;
        // phone-vibrate-fill.svg
        PhoneVibrateFill: number;
        // phone-vibrate.svg
        PhoneVibrate: number;
        // phone.svg
        Phone: number;
        // pie-chart-fill.svg
        PieChartFill: number;
        // pie-chart.svg
        PieChart: number;
        // pin-angle-fill.svg
        PinAngleFill: number;
        // pin-angle.svg
        PinAngle: number;
        // pin-fill.svg
        PinFill: number;
        // pin.svg
        Pin: number;
        // pip-fill.svg
        PipFill: number;
        // pip.svg
        Pip: number;
        // play-btn-fill.svg
        PlayBtnFill: number;
        // play-btn.svg
        PlayBtn: number;
        // play-circle-fill.svg
        PlayCircleFill: number;
        // play-circle.svg
        PlayCircle: number;
        // play-fill.svg
        PlayFill: number;
        // play.svg
        Play: number;
        // plug-fill.svg
        PlugFill: number;
        // plug.svg
        Plug: number;
        // plus-circle-dotted.svg
        PlusCircleDotted: number;
        // plus-circle-fill.svg
        PlusCircleFill: number;
        // plus-circle.svg
        PlusCircle: number;
        // plus-square-dotted.svg
        PlusSquareDotted: number;
        // plus-square-fill.svg
        PlusSquareFill: number;
        // plus-square.svg
        PlusSquare: number;
        // plus.svg
        Plus: number;
        // power.svg
        Power: number;
        // printer-fill.svg
        PrinterFill: number;
        // printer.svg
        Printer: number;
        // puzzle-fill.svg
        PuzzleFill: number;
        // puzzle.svg
        Puzzle: number;
        // question-circle-fill.svg
        QuestionCircleFill: number;
        // question-circle.svg
        QuestionCircle: number;
        // question-diamond-fill.svg
        QuestionDiamondFill: number;
        // question-diamond.svg
        QuestionDiamond: number;
        // question-octagon-fill.svg
        QuestionOctagonFill: number;
        // question-octagon.svg
        QuestionOctagon: number;
        // question-square-fill.svg
        QuestionSquareFill: number;
        // question-square.svg
        QuestionSquare: number;
        // question.svg
        Question: number;
        // receipt-cutoff.svg
        ReceiptCutoff: number;
        // receipt.svg
        Receipt: number;
        // reception-0.svg
        Reception0: number;
        // reception-1.svg
        Reception1: number;
        // reception-2.svg
        Reception2: number;
        // reception-3.svg
        Reception3: number;
        // reception-4.svg
        Reception4: number;
        // record-btn-fill.svg
        RecordBtnFill: number;
        // record-btn.svg
        RecordBtn: number;
        // record-circle-fill.svg
        RecordCircleFill: number;
        // record-circle.svg
        RecordCircle: number;
        // record-fill.svg
        RecordFill: number;
        // record.svg
        Record: number;
        // record2-fill.svg
        Record2Fill: number;
        // record2.svg
        Record2: number;
        // reply-all-fill.svg
        ReplyAllFill: number;
        // reply-all.svg
        ReplyAll: number;
        // reply-fill.svg
        ReplyFill: number;
        // reply.svg
        Reply: number;
        // rss-fill.svg
        RssFill: number;
        // rss.svg
        Rss: number;
        // rulers.svg
        Rulers: number;
        // save-fill.svg
        SaveFill: number;
        // save.svg
        Save: number;
        // save2-fill.svg
        Save2Fill: number;
        // save2.svg
        Save2: number;
        // scissors.svg
        Scissors: number;
        // screwdriver.svg
        Screwdriver: number;
        // search.svg
        Search: number;
        // segmented-nav.svg
        SegmentedNav: number;
        // server.svg
        Server: number;
        // share-fill.svg
        ShareFill: number;
        // share.svg
        Share: number;
        // shield-check.svg
        ShieldCheck: number;
        // shield-exclamation.svg
        ShieldExclamation: number;
        // shield-fill-check.svg
        ShieldFillCheck: number;
        // shield-fill-exclamation.svg
        ShieldFillExclamation: number;
        // shield-fill-minus.svg
        ShieldFillMinus: number;
        // shield-fill-plus.svg
        ShieldFillPlus: number;
        // shield-fill-x.svg
        ShieldFillX: number;
        // shield-fill.svg
        ShieldFill: number;
        // shield-lock-fill.svg
        ShieldLockFill: number;
        // shield-lock.svg
        ShieldLock: number;
        // shield-minus.svg
        ShieldMinus: number;
        // shield-plus.svg
        ShieldPlus: number;
        // shield-shaded.svg
        ShieldShaded: number;
        // shield-slash-fill.svg
        ShieldSlashFill: number;
        // shield-slash.svg
        ShieldSlash: number;
        // shield-x.svg
        ShieldX: number;
        // shield.svg
        Shield: number;
        // shift-fill.svg
        ShiftFill: number;
        // shift.svg
        Shift: number;
        // shop-window.svg
        ShopWindow: number;
        // shop.svg
        Shop: number;
        // shuffle.svg
        Shuffle: number;
        // signpost-2-fill.svg
        Signpost2Fill: number;
        // signpost-2.svg
        Signpost2: number;
        // signpost-fill.svg
        SignpostFill: number;
        // signpost-split-fill.svg
        SignpostSplitFill: number;
        // signpost-split.svg
        SignpostSplit: number;
        // signpost.svg
        Signpost: number;
        // sim-fill.svg
        SimFill: number;
        // sim.svg
        Sim: number;
        // skip-backward-btn-fill.svg
        SkipBackwardBtnFill: number;
        // skip-backward-btn.svg
        SkipBackwardBtn: number;
        // skip-backward-circle-fill.svg
        SkipBackwardCircleFill: number;
        // skip-backward-circle.svg
        SkipBackwardCircle: number;
        // skip-backward-fill.svg
        SkipBackwardFill: number;
        // skip-backward.svg
        SkipBackward: number;
        // skip-end-btn-fill.svg
        SkipEndBtnFill: number;
        // skip-end-btn.svg
        SkipEndBtn: number;
        // skip-end-circle-fill.svg
        SkipEndCircleFill: number;
        // skip-end-circle.svg
        SkipEndCircle: number;
        // skip-end-fill.svg
        SkipEndFill: number;
        // skip-end.svg
        SkipEnd: number;
        // skip-forward-btn-fill.svg
        SkipForwardBtnFill: number;
        // skip-forward-btn.svg
        SkipForwardBtn: number;
        // skip-forward-circle-fill.svg
        SkipForwardCircleFill: number;
        // skip-forward-circle.svg
        SkipForwardCircle: number;
        // skip-forward-fill.svg
        SkipForwardFill: number;
        // skip-forward.svg
        SkipForward: number;
        // skip-start-btn-fill.svg
        SkipStartBtnFill: number;
        // skip-start-btn.svg
        SkipStartBtn: number;
        // skip-start-circle-fill.svg
        SkipStartCircleFill: number;
        // skip-start-circle.svg
        SkipStartCircle: number;
        // skip-start-fill.svg
        SkipStartFill: number;
        // skip-start.svg
        SkipStart: number;
        // slack.svg
        Slack: number;
        // slash-circle-fill.svg
        SlashCircleFill: number;
        // slash-circle.svg
        SlashCircle: number;
        // slash-square-fill.svg
        SlashSquareFill: number;
        // slash-square.svg
        SlashSquare: number;
        // slash.svg
        Slash: number;
        // sliders.svg
        Sliders: number;
        // smartwatch.svg
        Smartwatch: number;
        // sort-alpha-down-alt.svg
        SortAlphaDownAlt: number;
        // sort-alpha-down.svg
        SortAlphaDown: number;
        // sort-alpha-up-alt.svg
        SortAlphaUpAlt: number;
        // sort-alpha-up.svg
        SortAlphaUp: number;
        // sort-down-alt.svg
        SortDownAlt: number;
        // sort-down.svg
        SortDown: number;
        // sort-numeric-down-alt.svg
        SortNumericDownAlt: number;
        // sort-numeric-down.svg
        SortNumericDown: number;
        // sort-numeric-up-alt.svg
        SortNumericUpAlt: number;
        // sort-numeric-up.svg
        SortNumericUp: number;
        // sort-up-alt.svg
        SortUpAlt: number;
        // sort-up.svg
        SortUp: number;
        // soundwave.svg
        Soundwave: number;
        // speaker-fill.svg
        SpeakerFill: number;
        // speaker.svg
        Speaker: number;
        // speedometer.svg
        Speedometer: number;
        // speedometer2.svg
        Speedometer2: number;
        // spellcheck.svg
        Spellcheck: number;
        // square-fill.svg
        SquareFill: number;
        // square-half.svg
        SquareHalf: number;
        // square.svg
        Square: number;
        // stack.svg
        Stack: number;
        // star-fill.svg
        StarFill: number;
        // star-half.svg
        StarHalf: number;
        // star.svg
        Star: number;
        // stickies-fill.svg
        StickiesFill: number;
        // stickies.svg
        Stickies: number;
        // sticky-fill.svg
        StickyFill: number;
        // sticky.svg
        Sticky: number;
        // stop-btn-fill.svg
        StopBtnFill: number;
        // stop-btn.svg
        StopBtn: number;
        // stop-circle-fill.svg
        StopCircleFill: number;
        // stop-circle.svg
        StopCircle: number;
        // stop-fill.svg
        StopFill: number;
        // stop.svg
        Stop: number;
        // stoplights-fill.svg
        StoplightsFill: number;
        // stoplights.svg
        Stoplights: number;
        // stopwatch-fill.svg
        StopwatchFill: number;
        // stopwatch.svg
        Stopwatch: number;
        // subtract.svg
        Subtract: number;
        // suit-club-fill.svg
        SuitClubFill: number;
        // suit-club.svg
        SuitClub: number;
        // suit-diamond-fill.svg
        SuitDiamondFill: number;
        // suit-diamond.svg
        SuitDiamond: number;
        // suit-heart-fill.svg
        SuitHeartFill: number;
        // suit-heart.svg
        SuitHeart: number;
        // suit-spade-fill.svg
        SuitSpadeFill: number;
        // suit-spade.svg
        SuitSpade: number;
        // sun.svg
        Sun: number;
        // sunglasses.svg
        Sunglasses: number;
        // symmetry-horizontal.svg
        SymmetryHorizontal: number;
        // symmetry-vertical.svg
        SymmetryVertical: number;
        // table.svg
        Table: number;
        // tablet-fill.svg
        TabletFill: number;
        // tablet-landscape-fill.svg
        TabletLandscapeFill: number;
        // tablet-landscape.svg
        TabletLandscape: number;
        // tablet.svg
        Tablet: number;
        // tag-fill.svg
        TagFill: number;
        // tag.svg
        Tag: number;
        // tags-fill.svg
        TagsFill: number;
        // tags.svg
        Tags: number;
        // telegram.svg
        Telegram: number;
        // telephone-fill.svg
        TelephoneFill: number;
        // telephone-forward-fill.svg
        TelephoneForwardFill: number;
        // telephone-forward.svg
        TelephoneForward: number;
        // telephone-inbound-fill.svg
        TelephoneInboundFill: number;
        // telephone-inbound.svg
        TelephoneInbound: number;
        // telephone-minus-fill.svg
        TelephoneMinusFill: number;
        // telephone-minus.svg
        TelephoneMinus: number;
        // telephone-outbound-fill.svg
        TelephoneOutboundFill: number;
        // telephone-outbound.svg
        TelephoneOutbound: number;
        // telephone-plus-fill.svg
        TelephonePlusFill: number;
        // telephone-plus.svg
        TelephonePlus: number;
        // telephone-x-fill.svg
        TelephoneXFill: number;
        // telephone-x.svg
        TelephoneX: number;
        // telephone.svg
        Telephone: number;
        // terminal-fill.svg
        TerminalFill: number;
        // terminal.svg
        Terminal: number;
        // text-center.svg
        TextCenter: number;
        // text-indent-left.svg
        TextIndentLeft: number;
        // text-indent-right.svg
        TextIndentRight: number;
        // text-left.svg
        TextLeft: number;
        // text-paragraph.svg
        TextParagraph: number;
        // text-right.svg
        TextRight: number;
        // textarea-resize.svg
        TextareaResize: number;
        // textarea-t.svg
        TextareaT: number;
        // textarea.svg
        Textarea: number;
        // thermometer-half.svg
        ThermometerHalf: number;
        // thermometer.svg
        Thermometer: number;
        // three-dots-vertical.svg
        ThreeDotsVertical: number;
        // three-dots.svg
        ThreeDots: number;
        // toggle-off.svg
        ToggleOff: number;
        // toggle-on.svg
        ToggleOn: number;
        // toggle2-off.svg
        Toggle2Off: number;
        // toggle2-on.svg
        Toggle2On: number;
        // toggles.svg
        Toggles: number;
        // toggles2.svg
        Toggles2: number;
        // tools.svg
        Tools: number;
        // trash-fill.svg
        TrashFill: number;
        // trash.svg
        Trash: number;
        // trash2-fill.svg
        Trash2Fill: number;
        // trash2.svg
        Trash2: number;
        // tree-fill.svg
        TreeFill: number;
        // tree.svg
        Tree: number;
        // triangle-fill.svg
        TriangleFill: number;
        // triangle-half.svg
        TriangleHalf: number;
        // triangle.svg
        Triangle: number;
        // trophy-fill.svg
        TrophyFill: number;
        // trophy.svg
        Trophy: number;
        // truck-flatbed.svg
        TruckFlatbed: number;
        // truck.svg
        Truck: number;
        // tv-fill.svg
        TvFill: number;
        // tv.svg
        Tv: number;
        // twitch.svg
        Twitch: number;
        // twitter.svg
        Twitter: number;
        // type-bold.svg
        TypeBold: number;
        // type-h1.svg
        TypeH1: number;
        // type-h2.svg
        TypeH2: number;
        // type-h3.svg
        TypeH3: number;
        // type-italic.svg
        TypeItalic: number;
        // type-strikethrough.svg
        TypeStrikethrough: number;
        // type-underline.svg
        TypeUnderline: number;
        // type.svg
        Type: number;
        // ui-checks-grid.svg
        UiChecksGrid: number;
        // ui-checks.svg
        UiChecks: number;
        // ui-radios-grid.svg
        UiRadiosGrid: number;
        // ui-radios.svg
        UiRadios: number;
        // union.svg
        Union: number;
        // unlock-fill.svg
        UnlockFill: number;
        // unlock.svg
        Unlock: number;
        // upc-scan.svg
        UpcScan: number;
        // upc.svg
        Upc: number;
        // upload.svg
        Upload: number;
        // vector-pen.svg
        VectorPen: number;
        // view-list.svg
        ViewList: number;
        // view-stacked.svg
        ViewStacked: number;
        // vinyl-fill.svg
        VinylFill: number;
        // vinyl.svg
        Vinyl: number;
        // voicemail.svg
        Voicemail: number;
        // volume-down-fill.svg
        VolumeDownFill: number;
        // volume-down.svg
        VolumeDown: number;
        // volume-mute-fill.svg
        VolumeMuteFill: number;
        // volume-mute.svg
        VolumeMute: number;
        // volume-off-fill.svg
        VolumeOffFill: number;
        // volume-off.svg
        VolumeOff: number;
        // volume-up-fill.svg
        VolumeUpFill: number;
        // volume-up.svg
        VolumeUp: number;
        // vr.svg
        Vr: number;
        // wallet-fill.svg
        WalletFill: number;
        // wallet.svg
        Wallet: number;
        // wallet2.svg
        Wallet2: number;
        // watch.svg
        Watch: number;
        // whatsapp.svg
        Whatsapp: number;
        // wifi-1.svg
        Wifi1: number;
        // wifi-2.svg
        Wifi2: number;
        // wifi-off.svg
        WifiOff: number;
        // wifi.svg
        Wifi: number;
        // window-dock.svg
        WindowDock: number;
        // window-sidebar.svg
        WindowSidebar: number;
        // window.svg
        Window: number;
        // wrench.svg
        Wrench: number;
        // x-circle-fill.svg
        XCircleFill: number;
        // x-circle.svg
        XCircle: number;
        // x-diamond-fill.svg
        XDiamondFill: number;
        // x-diamond.svg
        XDiamond: number;
        // x-octagon-fill.svg
        XOctagonFill: number;
        // x-octagon.svg
        XOctagon: number;
        // x-square-fill.svg
        XSquareFill: number;
        // x-square.svg
        XSquare: number;
        // x.svg
        X: number;
        // youtube.svg
        Youtube: number;
        // zoom-in.svg
        ZoomIn: number;
        // zoom-out.svg
        ZoomOut: number;
    }
}

declare module 'gd-sprest-bs/gd-sprest/lib' {
    export * from "gd-sprest-bs/gd-sprest/lib/apps";
    export * from "gd-sprest-bs/gd-sprest/lib/contextInfo";
    export * from "gd-sprest-bs/gd-sprest/lib/graph";
    export * from "gd-sprest-bs/gd-sprest/lib/groupService";
    export * from "gd-sprest-bs/gd-sprest/lib/groupSiteManager";
    export * from "gd-sprest-bs/gd-sprest/lib/hubSites";
    export * from "gd-sprest-bs/gd-sprest/lib/hubSitesUtility";
    export * from "gd-sprest-bs/gd-sprest/lib/list";
    export * from "gd-sprest-bs/gd-sprest/lib/navigation";
    export * from "gd-sprest-bs/gd-sprest/lib/peopleManager";
    export * from "gd-sprest-bs/gd-sprest/lib/peoplePicker";
    export * from "gd-sprest-bs/gd-sprest/lib/profileLoader";
    export * from "gd-sprest-bs/gd-sprest/lib/search";
    export * from "gd-sprest-bs/gd-sprest/lib/site";
    export * from "gd-sprest-bs/gd-sprest/lib/siteManager";
    export * from "gd-sprest-bs/gd-sprest/lib/socialFeed";
    export * from "gd-sprest-bs/gd-sprest/lib/themeManager";
    export * from "gd-sprest-bs/gd-sprest/lib/userProfile";
    export * from "gd-sprest-bs/gd-sprest/lib/utility";
    export * from "gd-sprest-bs/gd-sprest/lib/web";
    export * from "gd-sprest-bs/gd-sprest/lib/wfInstanceService";
    export * from "gd-sprest-bs/gd-sprest/lib/wfSubscriptionService";
}

declare module 'gd-sprest-bs/gd-sprest/helper' {
    import { IExecutor } from "gd-sprest-bs/gd-sprest/helper/executor";
    import { IFieldSchemaXML } from "gd-sprest-bs/gd-sprest/helper/fieldSchemaXML";
    import { IJSLink } from "gd-sprest-bs/gd-sprest/helper/jslink";
    import { IRibbonLink, ISuiteBarLink, ILinkInfo } from "gd-sprest-bs/gd-sprest/helper/linkInfo";
    import { IListForm } from "gd-sprest-bs/gd-sprest/helper/listForm";
    import { IListFormField } from "gd-sprest-bs/gd-sprest/helper/listFormField";
    import { IRequest, IaddContentEditorWebPart, IaddScriptEditorWebPart, IcreateContentType, IcreateDocSet, IhasPermissions, Iparse, Irequest, IsetContentTypeFields, IsetGroupOwner } from "gd-sprest-bs/gd-sprest/helper/methods";
    import { ISPComponents } from "gd-sprest-bs/gd-sprest/helper/sp";
    import { ISPConfig, ISPConfigProps, IFieldInfo } from "gd-sprest-bs/gd-sprest/helper/spCfg";
    import { ISPCfgFieldType, ISPCfgType } from "gd-sprest-bs/gd-sprest/helper/spCfgTypes";
    import { ITaxonomy } from "gd-sprest-bs/gd-sprest/helper/taxonomy";
    import { IWebPart } from "gd-sprest-bs/gd-sprest/helper/webpart";
    
    /**
        * Helper Library
        */
    export * from "gd-sprest-bs/gd-sprest/helper/executor";
    export * from "gd-sprest-bs/gd-sprest/helper/fieldSchemaXML";
    export * from "gd-sprest-bs/gd-sprest/helper/jslink";
    export * from "gd-sprest-bs/gd-sprest/helper/linkInfo";
    export * from "gd-sprest-bs/gd-sprest/helper/listForm";
    export * from "gd-sprest-bs/gd-sprest/helper/listFormField";
    export * from "gd-sprest-bs/gd-sprest/helper/methods";
    export * from "gd-sprest-bs/gd-sprest/helper/sp";
    export * from "gd-sprest-bs/gd-sprest/helper/spCfg";
    export * from "gd-sprest-bs/gd-sprest/helper/spCfgTypes";
    export * from "gd-sprest-bs/gd-sprest/helper/taxonomy";
    export * from "gd-sprest-bs/gd-sprest/helper/webpart";
    
    /**
        * Helper functions for SharePoint development.
        * @category Helper
        */
    export interface IHelper {
    
            /** Methods */
            addContentEditorWebPart: IaddContentEditorWebPart,
            addScriptEditorWebPart: IaddScriptEditorWebPart,
            createContentType: IcreateContentType,
            createDocSet: IcreateDocSet,
            hasPermissions: IhasPermissions,
            parse: Iparse,
            request: Irequest,
            setContentTypeFields: IsetContentTypeFields,
            setGroupOwner: IsetGroupOwner,
            Executor: IExecutor;
            FieldSchemaXML: IFieldSchemaXML;
    
    
            /**
                * Helper classes
                */
            JSLink: IJSLink;
            ListForm: IListForm;
            ListFormField: IListFormField;
            RibbonLink: IRibbonLink;
            SP: ISPComponents;
            SPCfgFieldType: ISPCfgFieldType;
            SPCfgType: ISPCfgType;
            SPConfig: (cfg: ISPConfigProps, webUrl?: string) => ISPConfig;
            SuiteBarLink: ISuiteBarLink;
            Taxonomy: ITaxonomy;
            WebPart: IWebPart;
    }
}

declare module 'gd-sprest-bs/gd-sprest/rest' {
    import { IBaseExecution } from "gd-sprest-def/lib/base";
    import { RenderListDataParameters } from "gd-sprest-def/lib/SP/complextypes";
    import { IList, RemoteWeb } from "gd-sprest-def/lib/SP/entitytypes";
    import { IHelper } from "gd-sprest-bs/gd-sprest/helper";
    import { ISPTypes } from "gd-sprest-bs/gd-sprest/sptypes";
    import * as LibTypes from "gd-sprest-bs/gd-sprest/lib";
    
    /**
        * SharePoint REST Library
        */
    export const $REST: IREST;
    
    /**
        * SharePoint REST Library
        */
    export interface IREST {
            /**
                * The version number of the library.
                */
            __ver: number;
    
            /**
                * Use this api to get the app context information of a site.
                */
            AppContext: (siteUrl: string) => IBaseExecution;
    
            /**
                * Use this api to interact with the SharePoint Apps
                */
            Apps: LibTypes.IApps;
    
            /**
                * A reference to the _spPageContextInfo global variable.
                */
            ContextInfo: LibTypes.IContextInformation;
    
            /**
                * False by default.
                */
            DefaultRequestToHostFl: boolean;
    
            /**
                * Use this api to interact with the Graph API. (Still In Development)
                */
            Graph: LibTypes.IGraph;
    
            /**
                * A reference to the _api/groupservice endpoint.
                */
            GroupService: LibTypes.IGroupService;
    
            /**
                * A reference to the _api/groupsitemanager endpoint.
                */
            GroupSiteManager: LibTypes.IGroupSiteManager;
    
            /**
                * Helper methods.
                */
            Helper: IHelper;
    
            /**
                * A reference to the _api/hubsites endpoint.
                */
            HubSites: LibTypes.IHubSites;
    
            /**
                * A reference to the _api/hubsitesutility endpoint.
                */
            HubSitesUtility: LibTypes.IHubSitesUtility;
    
            /**
                * Use this api to interact with SharePoint lists and libraries.
                */
            List: LibTypes.IList;
    
            /**
                * Use this api to get the list name by its entity name.
                * @param props - The list entity request properties.
                */
            ListByEntityName(props: LibTypes.IListEntityProps): IList;
    
            /**
                * Use this api to get the list data.
                * @param listFullUrl - The absolute url of the list.
                * @param parameters - The optional list data parameters.
                */
            ListDataAsStream: (listFullUrl: string, parameters?: RenderListDataParameters) => IBaseExecution<LibTypes.IListDataStream>
    
            /**
                * Use this api to interact with SharePoint navigation.
                */
            Navigation: LibTypes.INavigation;
    
            /**
                * Use this api to interact with SharePoint user profiles.
                * @param targetInfo - (Optional) The target information.
                */
            PeopleManager: LibTypes.IPeopleManager;
    
            /**
                * Use this api to search for users.
                * @param settings - The search settings.
                */
            PeoplePicker: LibTypes.IPeoplePicker;
    
            /**
                * Use this api to interact with the user profile loader.
                * @param targetInfo - (Optional) The target information.
                */
            ProfileLoader: LibTypes.IProfileLoader;
    
            /**
                * Use this api to get a remote web.
                * @param requestUrl - The absolute url of the remote web.
                */
            RemoteWeb: (requestUrl?: string) => IBaseExecution<RemoteWeb>;
    
            /**
                * Use this api to interact with the SharePoint search service.
                * @param url - The optional url to execute the search against.
                * @param settings - The search settings.
                */
            Search: LibTypes.ISearch;
    
            /**
                * Use this api to interact with a SharePoint site collection.
                */
            Site: LibTypes.ISite;
    
            /**
                * Use this api to create/delete site collections.
                */
            SiteManager: LibTypes.ISiteManager;
    
            /**
                * Use this api to see if a site collection exists.
                * @param url - The absolute url of the site collection.
                */
            SiteExists: (url: string) => IBaseExecution<LibTypes.ISiteExists>;
    
            /**
                * Use this api to get the url of a site, by its id.
                * @param id - The site id.
                */
            SiteUrl: (id: string) => IBaseExecution<LibTypes.ISiteUrl>;
    
            /**
                * Use this api to interact with the current user's social profile.
                */
            SocialFeed: LibTypes.ISocialFeed;
    
            /**
                * The SharePoint enumerator types.
                */
            SPTypes: ISPTypes;
    
            /**
                * A reference to the _api/thememanager endpoint.
                */
            ThemeManager: LibTypes.IThemeManager;
    
            /**
                * Use this api to interact with the current user's profile.
                */
            UserProfile: LibTypes.IUserProfile;
    
            /**
                * Use this api to interact with the available utility methods.
                */
            Utility: LibTypes.IUtility;
    
            /**
                * Use this api to interact with a SharePoint web.
                */
            Web: LibTypes.IWeb;
    
            /**
                * User this api to interact with the SharePoint 2013 workflow instance service.
                */
            WorkflowInstanceService: LibTypes.IWorkflowInstanceService;
    
            /**
                * User this api to interact with the SharePoint 2013 workflow subscription service.
                */
            WorkflowSubscriptionService: LibTypes.IWorkflowSubscriptionService;
    }
}

declare module 'gd-sprest-bs/gd-sprest/sptypes' {
    import * as Types from "gd-sprest-bs/gd-sprest/sptypes/sptypes";
    export * from "gd-sprest-bs/gd-sprest/sptypes/sptypes";
    
    /**
      * SharePoint Types
      */
    export const SPTypes: ISPTypes;
    export interface ISPTypes {
        BasePermissionTypes: Types.IBasePermissionTypes;
        CalendarType: Types.ICalendarType;
        CheckOutType: Types.ICheckOutType;
        ChoiceFormatType: Types.IChoiceFormatType;
        ClientTemplateUtility: Types.IClientTemplateUtility;
        ControlMode: Types.IControlMode;
        DateFormat: Types.IDateFormat;
        DraftVisibilityType: Types.IDraftVisibilityType;
        EventReceiverType: Types.IEventReceiverType;
        EventReceiverSynchronizationType: Types.IEventReceiverSynchronizationType;
        FieldNoteType: Types.IFieldNoteType;
        FieldNumberType: Types.IFieldNumberType;
        FieldResultType: Types.IFieldResultType;
        FieldType: Types.IFieldType;
        FieldUserSelectionType: Types.IFieldUserSelectionType;
        FileLevelType: Types.IFileLevelType;
        FileTemplateType: Types.IFileTemplateType;
        FriendlyDateFormat: Types.IFriendlyDateFormat;
        ListTemplateType: Types.IListTemplateType;
        LocaleLCIDType: Types.ILocaleLCIDType;
        ModalDialogResult: Types.ModalDialogResult,
        NodeType: Types.INodeType;
        PageType: Types.IPageType;
        PersonalizationScope: Types.IPersonalizationScope;
        PersonalSiteCapabilities: Types.IPersonalSiteCapabilities;
        PrincipalSources: Types.IPrincipalSources;
        PrincipalTypes: Types.IPrincipalTypes;
        RelationshipDeleteBehaviorType: Types.IRelationshipDeleteBehaviorType;
        RenderListDataOptions: Types.IRenderListDataOptions;
        ReorderingRuleMatchType: Types.IReorderingRuleMatchType;
        RoleType: Types.IRoleType;
        StatusPriColor: Types.IStatusPriColor;
        UrlFormatType: Types.IUrlFormatType;
        URLZones: Types.IURLZones;
        UserCustomActionRegistrationType: Types.IUserCustomActionRegistrationType;
        ViewType: Types.IViewType;
        WebTemplateType: Types.IWebTemplateType;
    }
}

declare module 'gd-sprest-bs/gd-sprest/intellisense' {
    export * from "gd-sprest-def";
    export * from "gd-sprest-bs/gd-sprest/intellisense/peoplePicker";
    export * from "gd-sprest-bs/gd-sprest/intellisense/utility";
}

declare module 'gd-sprest-bs/components/datetime' {
    import { IFormControlProps } from "gd-sprest-bs/gd-bs/components/formControl";
    
    /**
        * Date/Time
        */
    export const DateTime: (props: IDateTimeProps) => IDateTime
    
    /**
        * Date/Time
        */
    export interface IDateTime {
            /** The date/time picker element. */
            el: HTMLDivElement;
    
            /** The flatpickr object. */
            flatpickrObj: any;
    
            /** Returns the date as a Date/Time object. */
            getDate: () => Date;
    
            /** Method to get the value. */
            getValue: () => string;
    
            /** Method to set the value. */
            setValue: (dt: string | Date, dtFormat?: string) => void;
    }
    
    /**
        * Date/Time Props
        */
    export interface IDateTimeProps {
            /** Assigns the object to the input parameter. */
            assignTo?: (obj: IDateTime) => void;
    
            /** The class name to apply to the element. */
            className?: string;
    
            /** The element to render the form to. */
            el?: Element;
    
            /** True to disable the date/time plugin */
            disabled?: boolean;
    
            /** The date/time label. */
            label?: string;
    
            /** The flatpickr options. */
            options?: any;
    
            /** Flag to display the time. */
            showTime?: boolean;
    
            /** The date/time value. */
            value?: string;
    }
    
    /**
        * Form Control Properties - DateTime
        */
    export interface IFormControlPropsDateTime extends IFormControlProps {
            /** The flatpickr options. */
            options?: any;
    
            /** Flag to display the time. */
            showTime?: boolean;
    
            /** The date/time value. */
            value?: string;
    }
}

declare module 'gd-sprest-bs/components/field' {
    import { Helper, Types } from "gd-sprest-bs/gd-sprest";
    import { IFormControl, IFormControlProps, IFormControlValidationResult } from "gd-sprest-bs/gd-bs/components/formControl";
    
    /**
        * Field
        */
    export const Field: (props: IFieldProps) => IField;
    
    /**
        * Field
        */
    export interface IField {
            control: IFormControl;
            controlProps: IFormControlProps;
            getValue: () => IFieldValue;
            isValid: () => boolean;
    }
    
    /**
        * Field Properties
        */
    export interface IFieldProps {
            assignTo?: (obj: IField) => void;
            controlMode?: number;
            errorMessage?: string;
            field: Types.SP.Field;
            listInfo: Helper.IListFormResult;
            lookupFilter?: string;
            onError?: (msg: string) => void;
            onControlRendered?: (control: IFormControl, field: Types.SP.Field) => void | Promise<IFormControl>;
            onControlRendering?: (control: IFormControlProps, field: Types.SP.Field) => void | Promise<IFormControlProps>;
            onValidate?: (field: Types.SP.Field, control: IFormControl, value: IFormControlValidationResult) => boolean | IFormControlValidationResult;
            value?: any;
    }
    
    /**
        * Field Value
        */
    export interface IFieldValue {
            name: string;
            value: any;
    }
}

declare module 'gd-sprest-bs/components/listForm' {
    import { Helper, Types } from "gd-sprest-bs/gd-sprest";
    import { IFormRow } from "gd-sprest-bs/gd-bs/components/form";
    import { IFormControl, IFormControlProps } from "gd-sprest-bs/gd-bs/components/formControl";
    
    /**
        * List Form
        */
    export const ListForm: IListForm;
    
    /**
        * List Form
        */
    export interface IListForm extends Helper.IListForm {
            /**
                * Method to render the display form template.
                * @param props - The display form properties.
                */
            renderDisplayForm(props: IListFormDisplayProps): IListFormDisplay;
    
            /**
                * Method to render the edit/new form.
                * @param props - The edit/new form properties.
                */
            renderEditForm(props: IListFormEditProps): IListFormEdit;
    }
    
    /**
        * List Form Attachments Properties
        */
    export interface IListFormAttachmentsProps {
            /** The element to render the form to. */
            el: Element;
    
            /** The list form information. */
            info: Helper.IListFormResult;
    
            /** The item attachment saved event. */
            onSave?: (info: Helper.IListFormResult) => void;
    }
    
    /**
        * List Form Display
        */
    export interface IListFormDisplay {
            /** The form element. */
            el: HTMLFormElement;
    }
    
    /**
        * List Form Display Properties
        */
    export interface IListFormDisplayProps extends Helper.IListFormDisplayProps {
            /** Assigns the object to the input parameter. */
            assignTo?: (obj: IListFormDisplay) => void;
    
            /** The form component class name. */
            className?: string;
    
            /** The form component group class name. */
            groupClassName?: string;
    
            /** The form component row class name. */
            rowClassName?: string;
    
            /** The control rendered event. */
            onControlRendered?: (control: IFormControl, field: Types.SP.Field) => void | Promise<IFormControl>;
    
            /** The control rendering event. */
            onControlRendering?: (control: IFormControlProps, field: Types.SP.Field) => void | Promise<IFormControlProps>;
    
            /** The error event. */
            onError?: (msg?: string) => void;
    
            /** The list form rows. */
            template?: Array<IFormRow>;
    }
    
    /**
        * List Form Edit
        */
    export interface IListFormEdit {
            /** Appends controls to the form */
            appendControls(controls: Array<IFormControlProps>);
    
            /** Appends rows to the form */
            appendRows(rows: Array<IFormRow>);
    
            /** The form element. */
            el: HTMLFormElement;
    
            /** Method to get a control by field name */
            getControl(fieldName: string): IFormControl;
    
            /** Method to get the form values */
            getValues(): { [key: string]: any }
    
            /** Method to determine if the field is valid */
            isValid(): boolean;
    
            /** Method to save the form. */
            save(): PromiseLike<Types.SP.ListItem>;
    }
    
    /**
        * List Form Edit Properties
        */
    export interface IListFormEditProps extends IListFormDisplayProps, Helper.IListFormEditProps {
            /** Assigns the object to the input parameter. */
            assignTo?: (obj: IListFormEdit) => void;
    
            /** Use this event to filter a lookup field by OData query. */
            onFilterLookupField?: (field: Types.SP.Field) => string | Types.IODataQuery;
    
            /** The form saving event. */
            onSaving?: (item: any) => void | PromiseLike<any>;
    
            /** The form validating event. */
            onValidate?: (field: Types.SP.Field, control: IFormControl) => boolean;
    }
}

declare module 'gd-sprest-bs/components/listFormDialog' {
    import { IFormRow } from "gd-sprest-bs/gd-bs/components/form";
    import { IFormControl, IFormControlProps } from "gd-sprest-bs/gd-bs/components/formControl";
    import { IModal, IModalProps } from "gd-sprest-bs/gd-bs/components/modal";
    import { IToolbarProps } from "gd-sprest-bs/gd-bs/components/toolbar";
    import { Helper, Types } from "gd-sprest-bs/gd-sprest";
    
    /**
        * List Form Dialog
        */
    export const ListFormDialog: (props: IListFormDialogProps) => IListFormDialog;
    
    /**
        * List Form Dialog
        */
    export interface IListFormDialog extends IModal {
            /** Method to save the form. */
            saveForm: () => PromiseLike<Types.SP.ListItem>;
    }
    
    /**
        * List Form Dialog Properties
        */
    export interface IListFormDialogProps extends Helper.IListFormProps {
            /** The form actions. */
            actions?: IToolbarProps;
    
            /** Assigns the object to the input parameter. */
            assignTo?: (obj: IListFormDialog) => void;
    
            /** The form control mode. */
            controlMode?: number;
    
            /** The element to render the field to. */
            el: Element | HTMLElement;
    
            /** The item. */
            item?: any;
    
            /** The modal dialog properties. */
            modalProps?: IModalProps;
    
            /** The control rendered event. */
            onControlRendered?: (control: IFormControl) => void | Promise<IFormControl>;
    
            /** The control rendering event. */
            onControlRendering?: (control: IFormControlProps) => void | Promise<IFormControlProps>;
    
            /** The form saving event. */
            onSaving?: (item: any) => void | PromiseLike<any>;
    
            /** The form saved event. */
            onSaved?: (item?: Types.SP.ListItem) => void;
    
            /** The list form rows. */
            template?: Array<IFormRow>;
    
            /** True to display the modal by default. */
            visible?: boolean;
    }
}

declare module 'gd-sprest-bs/components/peoplePicker' {
    
    /**
        * ### People Picker
        * 
        * ```ts
        * import { ContextInfo, Components } from "gd-sprest-bs";
        * 
        * // Create the panel
        * let el = document.querySelector("#people-picker");
        * let form = Components.Form({
        *     el: el,
        *     rows: [
        *         // Other controls go here
        *         {
        *             control: {
        *                 allowGroups: false,
        *                 label: "Select User:",
        *                 multi: true,
        *                 name: "User",
        *                 type: Components.FormControlTypes.PeoplePicker
        *                 value: ContextInfo.userId // Default to the current user
        *             } as Components.IFormControlPropsPeoplePicker
        *         }
        *     ]
        * });
        * ```
        */
    export const PeoplePicker: (props: IPeoplePickerProps) => IPeoplePicker;
    
    import { IFormControlProps } from "gd-sprest-bs/gd-bs/components/formControl";
    import { Types } from "gd-sprest-bs/gd-sprest";
    
    /**
        * People Picker
        */
    export interface IPeoplePicker {
            /** The people picker element. */
            el: HTMLElement;
    
            /** Returns the selected users. */
            getValue: () => Array<Types.SP.User | Types.SP.Group>;
    
            /** Sets the selected users by id or people picker user object. */
            setValue: (selectedUsers: Array<string | number | Types.IPeoplePickerUser>) => void;
    }
    
    /**
        * People Picker Properties
        */
    export interface IPeoplePickerProps {
            /** True, to include groups in the results. */
            allowGroups?: boolean;
    
            /** Assigns the object to the input parameter. */
            assignTo?: (obj: IPeoplePicker) => void;
    
            /** The class name to apply to the element. */
            className?: string;
    
            /** The element to render the form to. */
            el?: Element;
    
            /** The label. */
            label?: string;
    
            /** Limits the results to a maximum number. */
            maxResults?: number;
    
            /** True to allow multiple users to be selected. */
            multi?: boolean;
    
            /** The placeholder text. (Default value is "Search") */
            placeholder?: string;
    
            /** True to allow multiple users to be selected. */
            readOnly?: boolean;
    
            /** True to search the local users first. */
            searchLocal?: boolean;
    
            /** The selected users. */
            value?: string | number | Types.IPeoplePickerUser | Array<string | number | Types.IPeoplePickerUser>;
    }
    
    /**
        * Form Control Properties - People Picker
        */
    export interface IFormControlPropsPeoplePicker extends IFormControlProps {
            allowGroups?: boolean;
            maxResults?: number;
            multi?: boolean;
            placeholder?: string;
            searchLocal?: boolean;
            value?: string | number | Types.IPeoplePickerUser | Array<string | number | Types.IPeoplePickerUser>;
    }
}

declare module 'gd-sprest-bs/gd-bs/components/formControl' {
    
    /**
        * ### Form Control
        */
    export const FormControl: (props: IFormControlProps) => IFormControl;
    
    import { IBaseProps } from "gd-sprest-bs/gd-bs/base";
    import { ICheckboxGroup, ICheckboxGroupItem } from "gd-sprest-bs/gd-bs/components/checkboxGroup";
    import { IDropdown, IDropdownItem } from "gd-sprest-bs/gd-bs/components/dropdown";
    import { IInputGroup } from "gd-sprest-bs/gd-bs/components/inputGroup";
    import { IListBox } from "gd-sprest-bs/gd-bs/components/listBox";
    
    /**
        * Custom Controls
        */
    export const CustomControls: {
            // Gets the event by type
            getByType(key: number): (props?: IFormControlProps) => void;
    
            /** Registers a custom form control type. */
            registerType: (key: number, onRender: (props?: IFormControlProps) => void) => void;
    }
    
    /**
        * Form Control Types
        */
    export const FormControlTypes: IFormControlTypes;
    
    /**
        * Form Control
        */
    export interface IFormControl {
            el: HTMLElement;
            checkbox: ICheckboxGroup;
            control: ICheckboxGroup | IDropdown | IInputGroup | IListBox;
            dropdown: IDropdown;
            getValue: () => any;
            isLoaded: () => PromiseLike<void>;
            isRendered: boolean;
            isValid: boolean;
            props: IFormControlProps;
            textbox: IInputGroup;
            setLabel: (value: string) => void;
            setControl: (control: any) => void;
            setValue: (value: any) => void;
            updateValidation: (elControl: Element, validation: IFormControlValidationResult) => void;
    }
    
    /**
        * Form Control Properties
        */
    export interface IFormControlProps extends IBaseProps<IFormControl> {
            controlClassName?: string;
            data?: any;
            description?: string;
            errorMessage?: string;
            id?: string;
            isReadonly?: boolean;
            isPlainText?: boolean;
            label?: string;
            loadingMessage?: string;
            name?: string;
            onControlRendering?: (control: IFormControlProps) => void | PromiseLike<IFormControlProps>;
            onControlRendered?: (control: IFormControl) => void | PromiseLike<IFormControl>;
            onGetValue?: (control: IFormControlProps) => any;
            onValidate?: (control: IFormControlProps, value: IFormControlValidationResult) => boolean | IFormControlValidationResult;
            required?: boolean;
            title?: string;
            type?: number;
            validationType?: number;
            value?: any;
    }
    
    /**
        * Form Control Properties - Checkbox
        */
    export interface IFormControlPropsCheckbox extends IFormControlProps {
            el?: HTMLInputElement;
            hideLabel?: boolean;
            isInline?: boolean;
            items?: Array<ICheckboxGroupItem>;
            onChange?: (item: ICheckboxGroupItem, ev?: Event) => void;
            onControlRendering?: (control: IFormControlPropsCheckbox) => void | PromiseLike<IFormControlPropsCheckbox>;
            onGetValue?: (control: IFormControlPropsCheckbox) => any;
            onValidate?: (control: IFormControlPropsCheckbox, value: IFormControlValidationResult) => boolean | IFormControlValidationResult;
    }
    
    /**
        * Form Control Properties - Dropdown
        */
    export interface IFormControlPropsDropdown extends IFormControlProps {
            items?: Array<IDropdownItem>;
            onChange?: (item: IDropdownItem, ev?: Event) => void;
            onControlRendering?: (control: IFormControlPropsDropdown) => void | PromiseLike<IFormControlPropsDropdown>;
            onGetValue?: (control: IFormControlPropsDropdown) => any;
            onValidate?: (control: IFormControlPropsDropdown, value: IFormControlValidationResult) => boolean | IFormControlValidationResult;
    }
    
    /**
        * Form Control Properties - List Box
        */
    export interface IFormControlPropsListBox extends IFormControlProps {
            items?: Array<IDropdownItem>;
            onChange?: (items: IDropdownItem, ev?: Event) => void;
            onControlRendering?: (control: IFormControlPropsListBox) => void | PromiseLike<IFormControlPropsListBox>;
            onGetValue?: (control: IFormControlPropsListBox) => any;
            onValidate?: (control: IFormControlPropsListBox, value: IFormControlValidationResult) => boolean | IFormControlValidationResult;
            placeholder?: string;
    }
    
    /**
        * Form Control Properties - Multiple Checkbox
        */
    export interface IFormControlPropsMultiCheckbox extends IFormControlProps {
            el?: HTMLInputElement;
            hideLabel?: boolean;
            isInline?: boolean;
            items?: Array<ICheckboxGroupItem>;
            onChange?: (item: Array<ICheckboxGroupItem>, ev?: Event) => void;
            onControlRendering?: (control: IFormControlPropsCheckbox) => void | PromiseLike<IFormControlPropsCheckbox>;
            onGetValue?: (control: IFormControlPropsCheckbox) => any;
            onValidate?: (control: IFormControlPropsCheckbox, value: IFormControlValidationResult) => boolean | IFormControlValidationResult;
    }
    
    /**
        * Form Control Properties - Multiple Dropdown
        */
    export interface IFormControlPropsMultiDropdown extends IFormControlProps {
            items?: Array<IDropdownItem>;
            onChange?: (item: Array<IDropdownItem>, ev?: Event) => void;
            onControlRendering?: (control: IFormControlPropsDropdown) => void | PromiseLike<IFormControlPropsDropdown>;
            onGetValue?: (control: IFormControlPropsDropdown) => any;
            onValidate?: (control: IFormControlPropsDropdown, value: IFormControlValidationResult) => boolean | IFormControlValidationResult;
    }
    
    /**
        * Form Control Properties - Multiple List Box
        */
    export interface IFormControlPropsMultiListBox extends IFormControlProps {
            items?: Array<IDropdownItem>;
            onChange?: (items: Array<IDropdownItem>, ev?: Event) => void;
            onControlRendering?: (control: IFormControlPropsListBox) => void | PromiseLike<IFormControlPropsListBox>;
            onGetValue?: (control: IFormControlPropsListBox) => any;
            onValidate?: (control: IFormControlPropsListBox, value: IFormControlValidationResult) => boolean | IFormControlValidationResult;
            placeholder?: string;
    }
    
    /**
        * Form Control Properties - Multiple Switch
        */
    export interface IFormControlPropsMultiSwitch extends IFormControlPropsMultiCheckbox { }
    
    /**
        * Form Control Properties - Number Field
        */
    export interface IFormControlPropsNumberField extends IFormControlPropsTextField {
            max?: number;
            min?: number;
            onControlRendering?: (control: IFormControlPropsNumberField) => void | PromiseLike<IFormControlPropsNumberField>;
            onGetValue?: (control: IFormControlPropsNumberField) => any;
            onValidate?: (control: IFormControlPropsNumberField, value: IFormControlValidationResult) => boolean | IFormControlValidationResult;
            step?: number;
    }
    
    /**
        * Form Control Properties - Range
        */
    export interface IFormControlPropsRange extends IFormControlPropsNumberField { }
    
    /**
        * Form Control Properties - Switch
        */
    export interface IFormControlPropsSwitch extends IFormControlPropsCheckbox { }
    
    /**
        * Form Control Properties - TextField
        */
    export interface IFormControlPropsTextField extends IFormControlProps {
            el?: HTMLInputElement;
            onChange?: (value: string, ev?: Event) => void;
            onControlRendering?: (control: IFormControlPropsTextField) => void | PromiseLike<IFormControlPropsTextField>;
            onGetValue?: (control: IFormControlPropsTextField) => any;
            onValidate?: (control: IFormControlPropsTextField, value: IFormControlValidationResult) => boolean | IFormControlValidationResult;
            placeholder?: string;
            rows?: number;
    }
    
    /**
        * Form Control Types
        */
    export type IFormControlTypes = {
            Checkbox: number;
            ColorPicker: number;
            Email: number;
            Datalist: number;
            Dropdown: number;
            File: number;
            ListBox: number;
            MultiCheckbox: number;
            MultiDropdown: number;
            MultiListBox: number;
            MultiRadio: number;
            MultiSwitch: number;
            Password: number;
            Radio: number;
            Range: number;
            Readonly: number;
            Switch: number;
            TextArea: number;
            TextField: number;
    }
    
    /**
        * Form Control Validation Result
        */
    export interface IFormControlValidationResult {
            invalidMessage?: string;
            isValid?: boolean;
            validMessage?: string;
            value?: any;
    }
}

declare module 'gd-sprest-bs/webparts/helper' {
    import { IForm } from "gd-sprest-bs/gd-bs/components/form";
    import { IFormControlProps } from "gd-sprest-bs/gd-bs/components/formControl";
    import { IWebPartInfo } from "gd-sprest-bs/webparts/wp";
    
    /**
        * Helper Methods
        */
    export const Helper: IHelper;
    
    /**
        * Helper Methods
        */
    export interface IHelper {
            /**
                * Method to get the webpart
                * @param wpId - The webpart id.
                */
            getWebPart(wpId: string): PromiseLike<IWPInstance>;
    
            /**
                * Method to get the webpart id for a specified element
                * @param el - The target element.
                */
            getWebPartId(el: HTMLElement): string;
    
            /**
                * Method to render the edit form.
                * @param wpInfo - The webpart information.
                * @param formControls - The form controls to render.
                */
            renderEditForm: (wpInfo: IWebPartInfo, formControls: Array<IFormControlProps>) => IForm;
    
            /**
                * Method to save the webpart configuration.
                * This method may execute a postback, based on the page type.
                * @param wpId - The webpart id.
                * @param cfgId: The configuration element id.
                * @param wpCfg - The webpart configuration.
                */
            saveConfiguration(wpId: string, cfgId?: string, wpCfg?: any): PromiseLike<void>;
    
            /**
                * Method to update the configuration element
                * @param cfgId: The configuration element id.
                * @param elTarget - The target element.
                * @param wpCfg - The webpart configuration.
                */
            updateConfigurationInElement(cfgId: string, elTarget: HTMLInputElement, wpCfg);
    
            /**
                * Method to update the webpart content elements
                * @param wpId - The webpart id.
                * @param cfgId: The configuration element id.
                * @param wpCfg - The webpart configuration.
                */
            updateWebPartContentElements(wpId: string, cfgId?: string, wpCfg?: any): boolean;
    }
    
    /**
        * WebPart Information
        */
    export interface IWPInstance {
            Context: any;
            Properties: any;
            WebPart: any;
            WebPartDefinition: any;
    }
}

declare module 'gd-sprest-bs/webparts/wp' {
    import { IButtonProps } from "gd-sprest-bs/gd-bs/components/button";
    import { IForm } from "gd-sprest-bs/gd-bs/components/form";
    import { IFormControl, IFormControlProps } from "gd-sprest-bs/gd-bs/components/formControl";
    
    /**
        * ### Web Part
        * 
        * The client-side webpart component can be used to control what is displayed when a page is being edited and displayed. An optional hidden configuration element can be utilized to store a custom configuration.
        * 
        * ```ts
        * import { WebParts } from "gd-sprest-bs";
        * 
        * // Create the webpart
        * WebParts.WebPart({
        *     elementId: "my-wp",
        *     cfgElementId: "my-wp-cfg",
        *     onRenderDisplay: (wpInfo) => {
        *         // Render the display element
        *         wpInfo.el.innerHTML = '<h1>Hello Display Mode</h1>';
        *     },
        *     onRenderEdit: (wpInfo) => {
        *         // Render the edit element
        *         wpInfo.el.innerHTML = '<h1>Hello Edit Mode</h1>';
        *     }
        * });
        * ```
        */
    export const WebPart: (props: IWebPartProps) => IWebPart;
    
    /**
        * WebPart
        */
    export interface IWebPart<IWPCfg = IWebPartCfg, IWPInfo = IWebPartInfo> {
            /** The webpart configuration. */
            cfg: IWPCfg;
    
            /** The webpart information. */
            info: IWPInfo;
    
            /** Method to update the edit form. */
            updateEditForm?: (formControls: Array<IFormControl>) => void;
    }
    
    /**
        * WebPart Information
        */
    export interface IWebPartInfo<IWPCfg = IWebPartCfg> {
            /** The configuration */
            cfg: IWPCfg;
    
            /** The element to render the webpart to */
            el: HTMLElement;
    
            /** The webpart id */
            wpId: string;
    }
    
    /**
        * WebPart Object
        */
    export interface IWebPartObject {
            /** The JSOM context object */
            Context: any;
    
            /** The webpart properties object */
            Properties: any;
    
            /** The webpart id */
            WebPartId: string;
    
            /** The webpart html element */
            WebPart: HTMLElement;
    
            /** The webpart definition object */
            WebPartDefinition: any;
    }
    
    /**
        * WebPart Properties
        */
    export interface IWebPartProps<IWPInfo = IWebPartInfo, IWPEditForm = IWebPartEditForm> {
            /** The optional configuration element */
            cfgElementId?: string;
    
            /** The class name. */
            className?: string;
    
            /** The target element id to render the webpart to */
            elementId?: string;
    
            /** The edit form */
            editForm?: IWPEditForm;
    
            /** The optional help link properties */
            helpProps?: {
                    /** The link title */
                    title?: string;
    
                    /** The link url */
                    url: string;
            };
    
            /** The post render event */
            onPostRender?: (wp: IWPInfo, ...args) => void;
    
            /** The render event triggered when the page is in 'Display' mode */
            onRenderDisplay?: (wp: IWPInfo) => any;
    
            /** The render event triggered when the page is in 'Edit' mode */
            onRenderEdit?: (wp: IWPInfo) => any;
    
            /** The webpart class name */
            wpClassName?: string;
    }
    
    /**
        * WebPart Configuration
        */
    export const WPCfg: (cfg: IWebPartCfg, props: IWebPartProps) => {
            /** Method to render the edit form. */
            renderForm?: (formControls: Array<IFormControl>) => void;
    };
    
    /**
        * WebPart Configuration
        */
    export interface IWebPartCfg {
            /** The webpart id */
            WebPartId?: string;
    }
    
    /**
        * WebPart Edit Form
        */
    export interface IWebPartEditForm<IWPCfg = IWebPartCfg, IWPInfo = IWebPartInfo> {
            /** The form action buttons displayed in the footer of the modal. */
            actions?: Array<IButtonProps>;
    
            /** The render form event. */
            onRenderForm?: (wpInfo?: IWPInfo) => Array<IFormControlProps> | PromiseLike<Array<IFormControlProps>> | void;
    
            /** The save event. */
            onSave?: (wpCfg?: IWPCfg, form?: IForm) => IWPCfg;
    
            /** True to hide the save button. */
            showSaveButton?: boolean;
    }
}

declare module 'gd-sprest-bs/webparts/wpList' {
    import { IFormControlProps } from "gd-sprest-bs/gd-bs/components/formControl";
    import { Types } from "gd-sprest-bs/gd-sprest";
    import { IWebPart, IWebPartInfo, IWebPartProps, IWebPartCfg, IWebPartEditForm } from "gd-sprest-bs/webparts/wp";
    
    /**
        * ### List WebPart
        * 
        * The list webpart should be used when targeting a list as a datasource.
        * 
        * ```ts
        * import { WebParts } from "gd-sprest-bs";
        * 
        * // Create the webpart
        * WebParts.WebPart({
        *     elementId: "my-wpList",
        *     cfgElementId: "my-wpList-cfg",
        *     onRenderItems: (wpInfo, items) => {
        *         // Render the display element
        *         wpInfo.el.innerHTML = [
        *             '<h1>List: ' + wpInfo.ListName + '</h1>',
        *             '<h5>List Items: ' + items.length + '</h5>'
        *         ].join('\n');
        *     }
        * });
        * ```
        */
    export const WPList: (props: IWPListProps) => IWPList;
    
    /**
        * List WebPart Edit Form
        */
    export const WPListEditForm: (props: IWPListEditForm) => IWPListEditForm;
    
    /**
        * List WebPart
        */
    export interface IWPList<IListCfg = IWPListCfg, IListInfo = IWPListInfo> extends IWebPart<IListCfg, IListInfo> { }
    
    /**
        * List WebPart Information
        */
    export interface IWPListInfo<IListCfg = IWPListCfg> extends IWebPartInfo<IListCfg> { }
    
    /**
        * List WebPart Properties
        */
    export interface IWPListProps<IListInfo=IWPListInfo, IListEditForm=IWPListEditForm> extends IWebPartProps<IListInfo, IListEditForm> {
            /** The caml query. */
            camlQuery?: string;
    
            /** The odata query. */
            odataQuery?: Types.IODataQuery;
    
            /** The executing caml query event. */
            onExecutingCAMLQuery?: (wpInfo: IListInfo, caml: string) => string;
    
            /** The executing odata query event. */
            onExecutingODATAQuery?: (wpInfo: IListInfo, odata: Types.IODataQuery) => Types.IODataQuery;
    
            /** The on render items event. */
            onRenderItems?: (wpInfo: IListInfo, items: Array<Types.SP.IListItemQuery | Types.SP.ListItem>) => void;
    }
    
    /**
        * List WebPart Configuration
        */
    export interface IWPListCfg extends IWebPartCfg {
            /** The list name */
            ListName?: string;
    
            /** The relative web url */
            WebUrl?: string;
    }
    
    /**
        * List WebPart Edit Form
        */
    export interface IWPListEditForm<IListCfg = IWPListCfg, IListInfo = IWPListInfo> extends IWebPartEditForm<IListCfg, IListInfo> {
            /** The odata list query. */
            listQuery?: Types.IODataQuery;
    
            /** The list changed event. */
            onListChanged?: (wpInfo: IListInfo, list?: Types.SP.IListQuery | Types.SP.List) => Array<IFormControlProps> | PromiseLike<Array<IFormControlProps>> | void;
    
            /** The lists loaded event. */
            onListsLoaded?: (wpInfo: IListInfo, lists?: Array<Types.SP.IListQuery | Types.SP.List>) => Array<Types.SP.IListQuery | Types.SP.List>;
    
            /** The render form event. */
            onRenderForm?: (wpInfo: IListInfo, list?: Types.SP.IListQuery | Types.SP.List) => Array<IFormControlProps> | PromiseLike<Array<IFormControlProps>> | void;
    }
}

declare module 'gd-sprest-bs/webparts/wpListFields' {
    import { Types } from "gd-sprest-bs/gd-sprest";
    import { IWPList, IWPListCfg, IWPListEditForm, IWPListInfo, IWPListProps } from "gd-sprest-bs/webparts/wpList";
    
    /**
        * ### List Fields WebPart
        * 
        * The list fields webpart should be used when targeting a list and fields as a datasource.
        * 
        * ```ts
        * import { WebParts } from "gd-sprest-bs";
        * 
        * // Create the webpart
        * WebParts.WebPart({
        *     elementId: "my-wpList",
        *     cfgElementId: "my-wpList-cfg",
        *     onRenderItems: (wpInfo, items) => {
        *         // Render the display element
        *         wpInfo.el.innerHTML = [
        *             '<h1>List: ' + wpInfo.ListName + '</h1>',
        *             '<h5>List Items: ' + items.length + '</h5>'
        *         ].join('\n');
        *     }
        * });
        * ```
        */
    export const WPListFields: (props: IWPListFieldsProps) => IWPListFields;
    
    /**
        * List Fields WebPart Edit Form
        */
    export const WPListFieldsEditForm: (props: IWPListFieldsEditForm) => IWPListFieldsEditForm;
    
    /**
        * List Fields WebPart
        */
    export interface IWPListFields<IListFieldsCfg = IWPListFieldsCfg, IListFieldsInfo = IWPListFieldsInfo> extends IWPList<IListFieldsCfg, IListFieldsInfo> { }
    
    /**
        * List Fields WebPart Information
        */
    export interface IWPListFieldsInfo<IListFieldsCfg = IWPListFieldsCfg> extends IWPListInfo<IListFieldsCfg> { }
    
    /**
        * List Fields WebPart Properties
        */
    export interface IWPListFieldsProps<IListFieldsInfo = IWPListFieldsInfo, IListFieldsEditForm = IWPListFieldsEditForm> extends IWPListProps<IListFieldsInfo, IListFieldsEditForm> { }
    
    /**
        * WebPart Configuration List Field
        */
    export interface IWPListField {
            // The internal field name
            Name: string;
    
            // The display name of the field
            Title: string
    }
    
    /**
        * List Fields WebPart Configuration
        */
    export interface IWPListFieldsCfg extends IWPListCfg {
            /** The selected fields */
            Fields: Array<IWPListField>;
    }
    
    /**
        * List Fields WebPart Edit Form
        */
    export interface IWPListFieldsEditForm<IListFieldsCfg = IWPListFieldsCfg, IListFieldsInfo = IWPListFieldsInfo> extends IWPListEditForm<IListFieldsCfg, IListFieldsInfo> { }
}

declare module 'gd-sprest-bs/webparts/wpSearch' {
    import { Types } from "gd-sprest-bs/gd-sprest";
    import { IWPList, IWPListInfo, IWPListProps } from "gd-sprest-bs/webparts/wpList";
    import { IWPListCfg, IWPListEditForm } from "gd-sprest-bs/webparts/wpList";
    
    /**
        * ### Search WebPart
        * 
        * The search webpart extends the list webpart, and includes a filterItems method to return items based on the inputed filter text.
        * 
        * ```ts
        * import { WebParts } from "gd-sprest-bs";
        * 
        * // Create the webpart
        * let wp = WebParts.WebPart({
        *     elementId: "my-wpSearch",
        *     cfgElementId: "my-wpSearch-cfg",
        *     onRenderItems: (wpInfo, items) => {
        *         // Render the display element
        *         wpInfo.el.innerHTML = [
        *             '<h1>List: ' + wpInfo.ListName + '</h1>',
        *             '<h5>List Items: ' + items.length + '</h5>'
        *         ].join('\n');
        *     }
        * });
        * ```
        */
    export const WPSearch: (props: IWPListProps) => IWPSearch;
    
    /**
        * Search WebPart Edit Form
        */
    export const WPSearchEditForm: (props: IWPSearchEditForm) => IWPSearchEditForm;
    
    /**
        * Search WebPart
        */
    export interface IWPSearch extends IWPList<IWPSearchCfg, IWPSearchInfo> {
            /** The filter items method. */
            filterItems: (filterText: string) => Array<Types.SP.IListItemQuery | Types.SP.ListItem>;
    }
    
    /**
        * Search WebPart Information
        */
    export interface IWPSearchInfo extends IWPListInfo<IWPSearchCfg> { }
    
    /**
        * Search WebPart Properties
        */
    export interface IWPSearchProps extends IWPListProps<IWPSearchInfo, IWPSearchEditForm> {
            /** The internal field names to be used for search. These will be appended to the configuration fields. */
            searchFields?: Array<{ name: string, type: string }>;
    }
    
    /**
        * Search WebPart Configuration
        */
    export interface IWPSearchCfg extends IWPListCfg {
            /** The searchable fields. */
            Fields: Array<{ name: string, type: string }>;
    }
    
    /**
        * Search WebPart Edit Form
        */
    export interface IWPSearchEditForm extends IWPListEditForm<IWPSearchCfg, IWPSearchInfo> { }
}

declare module 'gd-sprest-bs/webparts/wpTabs' {
    import { INav } from "gd-sprest-bs/gd-bs/components/nav";
    import { IWebPart, IWebPartProps } from "gd-sprest-bs/webparts/wp";
    
    /**
        * ### WebPart Tabs
        * 
        * The webpart tabs will generate tabs for each visible webpart in its zone.
        * 
        * ```ts
        * import { WebParts } from "gd-sprest-bs";
        * 
        * // Create the webpart
        * WebParts.WPTabs({ elementId: "my-tabs" });
        * ```
        */
    export const WPTabs: (props: IWPTabsProps) => IWPTabs;
    
    /**
        * WebPart Tab Types
        */
    export const WPTabTypes: IWPTabTypes;
    
    /**
        * WebPart Tabs
        */
    export interface IWPTabs extends IWebPart {
            getNav(): INav;
            getTabs(): Array<HTMLElement>;
    }
    
    /**
        * WebPart Tabs Properties
        */
    export interface IWPTabsProps extends IWebPartProps {
            onClick?: (el?: HTMLElement) => void;
            type?: number;
    }
    
    /**
        * WebPart Tab Types
        */
    export type IWPTabTypes = {
            Pillars: number;
            Tabs: number;
    }
}

declare module 'gd-sprest-bs/webparts/wpTaxonomy' {
    import { IDropdownItem } from "../gd-bs/components/dropdown"
    import { Helper } from "gd-sprest-bs/gd-sprest";
    import { IWebPart, IWebPartInfo, IWebPartProps, IWebPartCfg, IWebPartEditForm } from "gd-sprest-bs/webparts/wp";
    
    /**
        * ### Taxonomy WebPart
        * 
        * The taxonomy webpart should be used when targeting the term store as a datasource.
        * 
        * ```ts
        * import { WebParts } from "gd-sprest-bs";
        * 
        * // Create the webpart
        * WebParts.WPTaxonomy({
        *     elementId: "my-wpTaxonomy",
        *     cfgElementId: "my-wpTaxonomy-cfg",
        *     onRenderTermSetTerms: (wpInfo, terms) => {
        *         // Render the display element
        *         wpInfo.el.innerHTML = [
        *             '<h1>Term Set: ' + wpInfo.TermSetName + '</h1>',
        *             '<h5>Terms: ' + terms.length + '</h5>'
        *         ].join('\n');
        *     }
        * });
        * ```
        */
    export const WPTaxonomy: (props: IWPTaxonomyProps) => IWPTaxonomy;
    
    /**
        * Taxonomy WebPart Edit Form
        */
    export const WPTaxonomyEditForm: (props: IWPTaxonomyEditForm) => IWPTaxonomyEditForm;
    
    /**
        * Taxonomy WebPart
        */
    export interface IWPTaxonomy extends IWebPart<IWPTaxonomyCfg, IWPTaxonomyInfo> { }
    
    /**
        * Taxonomy WebPart Information
        */
    export interface IWPTaxonomyInfo extends IWebPartInfo<IWPTaxonomyCfg> { }
    
    /**
        * Taxonomy WebPart Properties
        */
    export interface IWPTaxonomyProps extends IWebPartProps<IWPTaxonomyInfo, IWPTaxonomyEditForm> {
            /** The on render term set event. */
            onRenderTermSet?: (wpInfo: IWPTaxonomyInfo, termSet: Helper.ITerm) => void;
    
            /** The on render term sets event. */
            onRenderTermSets?: (wpInfo: IWPTaxonomyInfo, termSets: Array<Helper.ITermSetInfo>) => void;
    
            /** The on render term set terms event. */
            onRenderTermSetTerms?: (wpInfo: IWPTaxonomyInfo, terms: Array<Helper.ITermInfo>) => void;
    }
    
    /**
        * Taxonomy WebPart Configuration
        */
    export interface IWPTaxonomyCfg extends IWebPartCfg {
            /** The term group id. */
            TermGroupId?: string;
    
            /** The term group name. */
            TermGroupName?: string;
    
            /** The term set id. */
            TermSetId?: string;
    
            /** The term set name */
            TermSetName?: string;
    
            /** The term set term id. */
            TermSetTermId?: string;
    
            /** The term set term name */
            TermSetTermName?: string;
    }
    
    /**
        * Taxonomy WebPart Edit Form
        */
    export interface IWPTaxonomyEditForm extends IWebPartEditForm<IWPTaxonomyCfg, IWPTaxonomyInfo> {
            /** The term group changed event. */
            onTermGroupChanged?: (wpInfo: IWPTaxonomyInfo, termGroupInfo?: ITermGroupInfo) => void;
    
            /** The term group loaded event. */
            onTermGroupsLoaded?: (wpInfo: IWPTaxonomyInfo, termGroups: Array<IDropdownItem>) => Array<IDropdownItem>;
    
            /** The term set changed event. */
            onTermSetChanged?: (wpInfo: IWPTaxonomyInfo, termSetInfo?: ITermInfo) => void;
    
            /** The term set loaded event. */
            onTermSetsLoaded?: (wpInfo: IWPTaxonomyInfo, termSets?: Array<IDropdownItem>) => Array<IDropdownItem>;
    
            /** The term set term changed event. */
            onTermSetTermChanged?: (wpInfo: IWPTaxonomyInfo, termInfo?: ITermInfo) => void;
    
            /** The term set terms loaded event. */
            onTermSetTermsLoaded?: (wpInfo: IWPTaxonomyInfo, terms?: Array<IDropdownItem>) => Array<IDropdownItem>;
    
            /** Flag to display the term set terms. */
            showTermSetTerms?: boolean;
    }
    
    /**
        * Term Group Info
        */
    interface ITermGroupInfo {
            id: string;
            name: string;
    }
    
    /**
        * Term Info
        */
    interface ITermInfo {
            id: string;
            name: string;
    }
}

declare module 'gd-sprest-bs/gd-bs/components/accordion' {
    
    /**
        * ### Accordion
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the accordion
        * let el = document.querySelector("#accordion");
        * let accordion = Components.Accordion({
        *     autoCollapse: true,
        *     el: el,
        *     id: "demoAccordion",
        *     items: [
        *         {
        *             btnProps: { text: "Item 1" },
        *             content: "This is the content for item 1."
        *         },
        *         {
        *             btnProps: { text: "Item 2" },
        *             content: "This is the content for item 2."
        *         },
        *         {
        *             btnProps: { text: "Item 3" },
        *             content: "This is the content for item 3."
        *         }
        *     ]
        * });
        * ```
        */
    export const Accordion: (props: IAccordionProps, template?: string, itemTemplate?: string) => IAccordion;
    
    import { IBase, IBaseProps } from "gd-sprest-bs/gd-bs/base";
    import { IButtonProps } from "gd-sprest-bs/gd-bs/components/button";
    import { ICollapseOptions } from "gd-sprest-bs/gd-bs/components/collapse";
    
    /**
        * Accordion
        */
    export interface IAccordion extends IBase<IAccordionProps> { }
    
    /**
        * Accordion Item
        */
    export interface IAccordionItem<T=Element> {
            data?: any;
            content?: string | T;
            header?: string;
            onClick?: (el?: HTMLElement, item?: IAccordionItem<T>) => void;
            onRender?: (el?: HTMLElement, item?: IAccordionItem<T>) => void;
            showFl?: boolean;
    }
    
    /**
        * Accordion Options
        */
    export interface IAccordionOptions extends ICollapseOptions { }
    
    /**
        * Accordion Properties
        */
    export interface IAccordionProps<T=Element> extends IBaseProps<IAccordion> {
            id?: string;
            items?: Array<IAccordionItem<T>>;
            options?: IAccordionOptions;
    }
}

declare module 'gd-sprest-bs/gd-bs/components/alert' {
    
    /**
        * ### Alert
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the alert
        * let el = document.querySelector("#alert");
        * let alert = Components.Alert({
        *     el: el,
        *     content: "This is an alert."
        * });
        * ```
        */
    export const Alert: (props: IAlertProps, template?: string) => IAlert;
    
    /**
        * Alert Types
        */
    export const AlertTypes: IAlertTypes;
    
    import { IBase, IBaseProps } from "gd-sprest-bs/gd-bs/base";
    
    /**
        * Alert
        */
    export interface IAlert extends IBase<IAlertProps> {
            /** Closes an alert by removing it from the DOM. */
            close: () => void;
    
            /** Disposes the alert. */
            dispose: () => void;
    
            /** Updates the alert text. */
            setText: (alertText?: string) => void;
    
            /** Updates the alert type. */
            setType: (alertType: number) => void;
    }
    
    /**
        * Alert Properties
        */
    export interface IAlertProps<T = Element> extends IBaseProps<IAlert> {
            content?: string | T;
            data?: any;
            header?: string;
            isDismissible?: boolean;
            onClose?: (props?: IAlertProps) => void;
            type?: number;
    }
    
    /**
        * Alert Types
        */
    export type IAlertTypes = {
            Danger: number;
            Dark: number;
            Info: number;
            Light: number;
            Primary: number;
            Secondary: number;
            Success: number;
            Warning: number;
    }
}

declare module 'gd-sprest-bs/gd-bs/components/badge' {
    
    /**
        * ### Badge
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the badge
        * let el = document.querySelector("#badge");
        * let badge = Components.Badge({
        *     el: el,
        *     content: "Badge"
        * });
        * ```
        */
    export const Badge: (props: IBadgeProps, template?: string) => IBadge;
    
    /**
        * Badge Types
        */
    export const BadgeTypes: IBadgeTypes;
    
    import { IBase, IBaseProps } from 'gd-sprest-bs/gd-bs/base';
    
    /**
        * Badge
        */
    export interface IBadge extends IBase<IBadgeProps> {
            /** The element. */
            el: HTMLAnchorElement | HTMLSpanElement;
    }
    
    /**
        * Badge Properties
        */
    export interface IBadgeProps<T=Element> extends IBaseProps<IBadge> {
            content?: string | T;
            data?: any;
            header?: string;
            href?: string;
            isPill?: boolean;
            onClick?: (badge?: IBadgeProps, ev?: Event) => void;
            type?: number;
    }
    
    /**
        * Badge Types
        */
    export type IBadgeTypes = {
            Danger: number;
            Dark: number;
            Info: number;
            Light: number;
            Primary: number;
            Secondary: number;
            Success: number;
            Warning: number;
    }
}

declare module 'gd-sprest-bs/gd-bs/components/breadcrumb' {
    
    /**
        * ### Breadcrumb
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the breadcrumb
        * let el = document.querySelector("#breadcrumb");
        * let breadcrumb = Components.Breadcrumb({
        *     el: el,
        *     items: [
        *         { text: "Root", href: "/" },
        *         { text: "Web 1", href: "/web" },
        *         { text: "Web 1-1", href: "/web/1" }
        *     ]
        * });
        * ```
        */
    export const Breadcrumb: (props: IBreadcrumbProps, template?: string) => IBreadcrumb;
    
    import { IBaseProps } from "gd-sprest-bs/gd-bs/base";
    
    /**
        * Breadcrumb
        */
    export interface IBreadcrumb {
            /** The element. */
            el: Element;
    
            /** Hides the breadcrumb. */
            hide: () => void;
    
            /** Shows the breadcrumb. */
            show: () => void;
    }
    
    /**
        * Breadcrumb Item
        */
    export interface IBreadcrumbItem {
            /** The breadcrumb link */
            href?: string;
    
            /** Internal flag set by the component */
            isActive?: boolean;
    
            /** Click event for the link */
            onClick?: (item?: IBreadcrumbItem, ev?: Event) => void;
    
            /** The link text */
            text?: string;
    }
    
    /**
        * Breadcrumb Properties
        */
    export interface IBreadcrumbProps extends IBaseProps {
            /** The breadcrumb items */
            items?: Array<IBreadcrumbItem>
    
            /** Click event for the link */
            onClick?: (item?: IBreadcrumbItem, ev?: Event) => void;
    }
}

declare module 'gd-sprest-bs/gd-bs/components/button' {
    
    /**
        * ### Button
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the button
        * let el = document.querySelector("#btn");
        * let btn = Components.Button({
        *     el: el,
        *     text: "Button",
        *     onClick: (ev) => {
        *         alert("The button was clicked.");
        *     }
        * });
        * ```
        */
    export const Button: (props: IButtonProps, template?: string) => IButton;
    
    /**
        * Button Types
        */
    export const ButtonTypes: IButtonTypes;
    
    import { IBaseProps } from "gd-sprest-bs/gd-bs/base";
    import { IBadgeProps } from "gd-sprest-bs/gd-bs/components/badge";
    import { ISpinnerProps } from "gd-sprest-bs/gd-bs/components/spinner";
    
    /**
        * Button
        */
    export interface IButton {
            /** The element. */
            el: HTMLAnchorElement | HTMLButtonElement;
    
            /** Disables the button. */
            disable: () => void;
    
            /** Disposes the button. */
            dispose: () => void;
    
            /** Enables the button. */
            enable: () => void;
    
            /** Hides the button. */
            hide: () => void;
    
            /** Updates the button text. */
            setText: (btnText?: string) => void;
    
            /** Updates the button type. */
            setType: (btnType: number) => void;
    
            /** Shows the button. */
            show: () => void;
    
            /** Toggles push state. Gives the button the appearance that it has been activated. */
            toggle: () => void;
    }
    
    /**
        * Button Properties
        */
    export interface IButtonProps extends IBaseProps<IButton> {
            badge?: IBadgeProps;
            controls?: string | Array<string>;
            data?: any;
            dismiss?: string;
            href?: string;
            iconSize?: number;
            iconType?: number;
            id?: string;
            isBlock?: boolean;
            isDisabled?: boolean;
            isExpanded?: boolean;
            isLarge?: boolean;
            isLink?: boolean;
            isSmall?: boolean;
            onClick?: (button?: IButtonProps, ev?: Event) => void;
            spinnerProps?: ISpinnerProps;
            tabIndex?: number;
            target?: string;
            text?: string;
            title?: string;
            toggle?: string;
            trigger?: string;
            type?: number;
    }
    
    /**
        * Button Types
        */
    export type IButtonTypes = {
            Danger: number;
            Dark: number;
            Info: number;
            Light: number;
            Link: number;
            Primary: number;
            Secondary: number;
            Success: number;
            Warning: number;
            OutlineDanger: number;
            OutlineDark: number;
            OutlineInfo: number;
            OutlineLight: number;
            OutlineLink: number;
            OutlinePrimary: number;
            OutlineSecondary: number;
            OutlineSuccess: number;
            OutlineWarning: number;
    }
}

declare module 'gd-sprest-bs/gd-bs/components/buttonGroup' {
    
    /**
        * ### Button Group
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the buttonGroup
        * let el = document.querySelector("#buttonGroup");
        * let buttonGroup = Components.ButtonGroup({
        *     el: el,
        *     buttonType: $REST.Components.ButtonTypes.Primary,
        *     buttons: [
        *         { text: "Left" },
        *         { text: "Middle" },
        *         { text: "Right" }
        *     ]
        * });
        * ```
        */
    export const ButtonGroup: (props: IButtonGroupProps, template?: string, btnTemplate?: string) => IButtonGroup;
    
    import { IBaseProps } from "gd-sprest-bs/gd-bs/base";
    import { IButton, IButtonProps } from "gd-sprest-bs/gd-bs/components/button";
    
    /**
        * Button Group
        */
    export interface IButtonGroup {
            /** The element. */
            el: Element;
    
            /** The buttons. */
            buttons: Array<IButton>;
    
            /** Hides the button group. */
            hide: () => void;
    
            /** Shows the button group. */
            show: () => void;
    }
    
    /**
        * Button Group Properties
        */
    export interface IButtonGroupProps extends IBaseProps<IButtonGroup> {
            buttons?: Array<IButtonProps>;
            buttonType?: number;
            id?: string;
            isLarge?: boolean;
            isSmall?: boolean;
            isVertical?: boolean;
            label?: string;
    }
}

declare module 'gd-sprest-bs/gd-bs/components/card' {
    
    /**
        * ### Card
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the card
        * let el = document.querySelector("#card");
        * let card = Components.Card({
        *     el: el,
        *     body: [
        *         {
        *             title: "Card Title",
        *             text: "This is the card contents.",
        *             actions: [
        *                 {
        *                     text: "Card Action",
        *                     buttonType: $REST.Components.ButtonTypes.Primary
        *                 }
        *             ]
        *         }
        *     ]
        * });
        * ```
        */
    export const Card: (props: ICardProps, template?: string) => ICard;
    
    import { IBaseProps } from "gd-sprest-bs/gd-bs/base";
    import { IButtonProps } from "gd-sprest-bs/gd-bs/components/button";
    import { INavProps } from "gd-sprest-bs/gd-bs/components/nav";
    
    /**
        * Card
        */
    export interface ICard {
            /** The element. */
            el: Element;
    
            /** Hides the card. */
            hide: () => void;
    
            /** Shows the card. */
            show: () => void;
    }
    
    /**
        * Card Action
        */
    export interface ICardAction {
            buttonType?: number;
            data?: any;
            onClick?: (action?: ICardAction, card?: ICardBody, ev?: Event) => void;
            href?: string;
            text?: string;
    }
    
    /**
        * Card Body
        */
    export interface ICardBody<T=Element> {
            actions?: Array<ICardAction>;
            className?: string;
            content?: string | T;
            data?: any;
            onClick?: (card?: ICardProps, ev?: Event) => void;
            onRender?: (el?: HTMLElement, card?: ICardBody) => void;
            onRenderTitle?: (el?: HTMLElement, card?: ICardBody) => void;
            subTitle?: string;
            text?: string;
            title?: string | T;
    }
    
    /**
        * Card Footer
        */
    export interface ICardFooter<T=Element> {
            className?: string;
            content?: string | T;
            onRender?: (el?: HTMLElement, card?: ICardFooter) => void;
    }
    
    /**
        * Card Header
        */
    export interface ICardHeader<T=Element> {
            className?: string;
            content?: string | T;
            onRender?: (el?: HTMLElement, card?: ICardHeader) => void;
            nav?: INavProps;
    }
    
    /**
        * Card Properties
        */
    export interface ICardProps<T=Element> extends IBaseProps<ICard> {
            body?: Array<ICardBody<T>>;
            footer?: ICardFooter<T>;
            header?: ICardHeader<T>;
            imgBottom?: {
                    alt?: string;
                    src?: string;
            }
            imgTop?: {
                    alt?: string;
                    src?: string;
            };
            onClick?: (card?: ICardBody, ev?: Event) => void;
    }
}

declare module 'gd-sprest-bs/gd-bs/components/cardGroup' {
    
    /**
        * ### Card Group
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the cardGroup
        * let el = document.querySelector("#cardGroup");
        * let cardGroup = Components.CardGroup({
        *     el: el,
        *     cards: [
        *         {
        *             body: [
        *                 {
        *                     title: "Card 1",
        *                     text: "This is the first card."
        *                 }
        *             ]
        *         },
        *         {
        *             body: [
        *                 {
        *                     title: "Card 2",
        *                     text: "This is the second card."
        *                 }
        *             ]
        *         },
        *         {
        *             body: [
        *                 {
        *                     title: "Card 3",
        *                     text: "This is the third card."
        *                 }
        *             ]
        *         }
        *     ]
        * });
        * ```
        */
    export const CardGroup: (props: ICardGroupProps, template?: string, cardTemplate?: string) => ICardGroup;
    
    import { IBaseProps } from "gd-sprest-bs/gd-bs/base";
    import { ICardProps } from "gd-sprest-bs/gd-bs/components/card";
    
    /**
        * Card Group
        */
    export interface ICardGroup {
            /** The element. */
            el: Element;
    
            /** Hides the card group. */
            hide: () => void;
    
            /** Shows the card group. */
            show: () => void;
    }
    
    /**
        * Card Group Properties
        */
    export interface ICardGroupProps extends IBaseProps<ICardGroup> {
            cards?: Array<ICardProps>;
    }
}

declare module 'gd-sprest-bs/gd-bs/components/carousel' {
    
    /**
        * ### Carousel
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the carousel
        * let el = document.querySelector("#carousel");
        * let carousel = Components.Carousel({
        *     el: el,
        *     enableControls: true,
        *     enableIndicators: true,
        *     id: "carouselDemo",
        *     items: [
        *         {
        *             captions: "<h5>First Slide</h5>",
        *             imageUrl: "https://via.placeholder.com/400x200",
        *             imageAlt: "First Slide",
        *             isActive: true
        *         },
        *         {
        *             captions: "<h5>Second Slide</h5>",
        *             imageUrl: "https://via.placeholder.com/400x200",
        *             imageAlt: "Second Slide"
        *         },
        *         {
        *             captions: "<h5>Third Slide</h5>",
        *             imageUrl: "https://via.placeholder.com/400x200",
        *             imageAlt: "Third Slide"
        *         }
        *     ]
        * });
        * ```
        */
    export const Carousel: (props: ICarouselProps, template?: string, slideTemplate?: string) => ICarousel;
    
    import { IBaseProps } from "gd-sprest-bs/gd-bs/base";
    
    /**
        * Carousel
        */
    export interface ICarousel {
            /**
                * Cycles through the carousel items from left to right.
                */
            cycle: () => void;
    
            /** Disposes the carousel. */
            dispose: () => void;
    
            /** The element. */
            el: Element;
    
            /** Hides the carousel. */
            hide: () => void;
    
            /**
                * Cycles to the next item.
                */
            next: () => void;
    
            /**
                * Stops the carousel from cycling through items.
                */
            pause: () => void;
    
            /**
                * Cycles to the previous item.
                */
            previous: () => void;
    
            /** Enables/Disables the dark theme. */
            setTheme: (isDark: boolean) => void;
    
            /** Shows the carousel. */
            show: () => void;
    }
    
    /**
        * Carousel Item
        */
    export interface ICarouselItem<T = Element> {
            captions?: string;
            className?: string;
            content?: string | T;
            imageAlt?: string;
            imageUrl?: string;
            isActive?: boolean;
    }
    
    /**
        * Carousel Options
        */
    export interface ICarouselOptions {
            interval?: number | boolean;
            keyboard?: boolean;
            pause?: string | boolean;
            slide?: string | boolean;
            touch?: boolean;
            wrap?: boolean;
    }
    
    /**
        * Carousel Properties
        */
    export interface ICarouselProps<T = Element> extends IBaseProps<ICarousel> {
            enableControls?: boolean;
            enableCrossfade?: boolean;
            enableIndicators?: boolean;
            id?: string;
            isDark?: boolean;
            items?: Array<ICarouselItem<T>>;
            options?: ICarouselOptions;
    }
}

declare module 'gd-sprest-bs/gd-bs/components/checkboxGroup' {
    
    /**
        * ### Checkbox Group
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the buttonGroup
        * let el = document.querySelector("#cbGroup");
        * let cbGroup = Components.CheckboxGroup({
        *     el: el,
        *     items: [
        *         { label: "Option 1" },
        *         { label: "Option 2" },
        *         { label: "Option 3" }
        *     ]
        * });
        * ```
        */
    export const CheckboxGroup: (props: ICheckboxGroupProps, template?: string, cbTemplate?: string) => ICheckboxGroup;
    
    import { IBaseProps } from "gd-sprest-bs/gd-bs/base";
    
    /**
        * Checkbox Group Types
        */
    export const CheckboxGroupTypes: ICheckboxTypes;
    
    /**
        * Checkbox Group
        */
    export interface ICheckboxGroup {
            /** The checkbox element. */
            el: HTMLElement;
    
            /** Gets the values. */
            getValue: () => ICheckboxGroupItem | Array<ICheckboxGroupItem>;
    
            /** Hides the checkbox group. */
            hide: () => void;
    
            /** Sets the dropdown value. */
            setValue: (value: string | Array<string>) => void;
    
            /** Shows the checkbox group. */
            show: () => void;
    }
    
    /**
        * Checkbox Group Item
        */
    export interface ICheckboxGroupItem {
            data?: any;
            isDisabled?: boolean;
            isSelected?: boolean;
            label?: string;
            name?: string;
            onChange?: (item: ICheckboxGroupItem, ev?: Event) => void;
            type?: number;
    }
    
    /**
        * Checkbox Group Properties
        */
    export interface ICheckboxGroupProps extends IBaseProps<ICheckboxGroup> {
            colSize?: number;
            hideLabel?: boolean;
            isInline?: boolean;
            isReadonly?: boolean;
            label?: string;
            items?: Array<ICheckboxGroupItem>;
            multi?: boolean;
            onRender?: (el?: HTMLElement, item?: ICheckboxGroupItem) => void;
            onChange?: (items: ICheckboxGroupItem | Array<ICheckboxGroupItem>, ev?: Event) => void;
            renderRow?: boolean;
            title?: string;
            type?: number;
            value?: any;
    }
    
    /**
        * Checkbox Group Types
        */
    export type ICheckboxTypes = {
            Checkbox: number;
            Radio: number;
            Switch: number;
    }
}

declare module 'gd-sprest-bs/gd-bs/components/collapse' {
    
    /**
        * ### Collapse
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the button to toggle the collapse
        * let btn = Components.Button({
        *     el: document.querySelector("#btnCollapse"),
        *     target: "#demoCollapse",
        *     toggle: "collapse",
        *     text: "Collapse Demo"
        * });
        * 
        * // Create the collapse
        * let el = document.querySelector("#collapse");
        * let collapse = Components.Collapse({
        *     el: el,
        *      id: "demoCollapse",
        *     content: "This is the content to be collapsed."
        * });
        * ```
        */
    export const Collapse: (props: ICollapseProps, template?: string) => ICollapse;
    
    import { IBaseProps } from "gd-sprest-bs/gd-bs/base";
    import { IButtonProps } from "gd-sprest-bs/gd-bs/components/button";
    
    /**
        * Collapse
        */
    export interface ICollapse {
            /** Disposes the collapse. */
            dispose: () => void;
    
            /** The element. */
            el: Element;
    
            /** Hides a collapsible element. */
            hide: () => void;
    
            /** True if the collapse is visible. */
            isVisible: boolean;
    
            /** Shows a collapsible element. */
            show: () => void;
    
            /** Toggles the collapsible element on invocation. */
            toggle: () => void;
    }
    
    /**
        * Collapse Options
        */
    export interface ICollapseOptions {
            parent?: string | Element;
            toggle?: boolean;
    }
    
    /**
        * Collapse Properties
        */
    export interface ICollapseProps<T = Element> extends IBaseProps<ICollapse> {
            content?: string | T;
            data?: any;
            id?: string;
            isMulti?: boolean;
            onRender?: (props?: ICollapseProps, el?: HTMLElement) => void;
            options?: ICollapseOptions;
    }
}

declare module 'gd-sprest-bs/gd-bs/components/dropdown' {
    
    /**
        * ### Dropdown
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the dropdown
        * let el = document.querySelector("#dropdown");
        * let dropdown = Components.Dropdown({
        *     el: el,
        *     label: "Select a Choice",
        *     items: [
        *         { text: "Choice 1", value: "1" },
        *         { text: "Choice 2", value: "2" },
        *         { text: "Choice 3", value: "3" },
        *         { text: "Choice 4", value: "4" },
        *         { text: "Choice 5", value: "5" }
        *     ],
        *     onChange: (item, ev) => {
        *         console.log("The selected value is: " + item.text);
        *     }
        * });
        * ```
        */
    export const Dropdown: (props: IDropdownProps, template?: string) => IDropdown;
    
    import { IBaseProps } from "gd-sprest-bs/gd-bs/base";
    import { IButtonTypes } from "gd-sprest-bs/gd-bs/components/button";
    
    /**
        * Dropdown Types
        */
    export const DropdownTypes: IButtonTypes;
    
    /**
        * Dropdown
        */
    export interface IDropdown {
            /** Disposes the dropdown. */
            dispose: () => void;
    
            /** The element. */
            el: Element;
    
            /** Gets the selected dropdown item(s). */
            getValue: () => IDropdownItem | Array<IDropdownItem>;
    
            /** Hides the dropdown. */
            hide: () => void;
    
            /** True if the dropdown is a multi-select. */
            isMulti: boolean;
    
            /** Updates the dropdown items. */
            setItems: (items: Array<IDropdownItem>) => void;
    
            /** Enables/Disables the dark theme. */
            setTheme: (isDark: boolean) => void;
    
            /** Updates the dropdown type. */
            setType: (ddlType: number) => void;
    
            /** Sets the dropdown value. */
            setValue: (value?: any | Array<any>) => void;
    
            /** Shows the dropdown. */
            show: () => void;
    
            /** Toggles the dropdown menu of a given navbar or tabbed navigation. */
            toggle: () => void;
    
            /** Updates the position of an element’s dropdown. */
            update: () => void;
    }
    
    /**
        * Dropdown Item
        */
    export interface IDropdownItem {
            className?: string;
            data?: any;
            href?: string;
            isDisabled?: boolean;
            isDivider?: boolean;
            isHeader?: boolean;
            isSelected?: boolean;
            onClick?: (item?: IDropdownItem, ev?: Event) => void;
            onRender?: (el: HTMLElement, item?: IDropdownItem) => void;
            target?: string;
            text?: string;
            toggle?: string;
            value?: string;
    }
    
    /**
        * Dropdown Properties
        */
    export interface IDropdownProps extends IBaseProps<IDropdown> {
            btnClassName?: string;
            dropLeft?: boolean;
            dropRight?: boolean;
            dropUp?: boolean;
            formFl?: boolean;
            id?: string;
            isDark?: boolean;
            isDatalist?: boolean;
            isReadonly?: boolean;
            isSplit?: boolean;
            items?: Array<IDropdownItem>;
            label?: string;
            menuOnly?: boolean;
            multi?: boolean;
            navFl?: boolean;
            onChange?: (item?: IDropdownItem | Array<IDropdownItem>, ev?: Event) => void;
            setLabelToValue?: boolean;
            title?: string;
            type?: number;
            value?: any;
    }
}

declare module 'gd-sprest-bs/gd-bs/components/form' {
    
    /**
        * ### Form
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the form
        * let el = document.querySelector("#myForm");
        * let form = Components.Form({
        *     el: el,
        *     rows: [
        *         {
        *             control: {
        *                 label: "First Name:",
        *                 name: "FName",
        *                 type: Components.FormControlTypes.TextField
        *             }
        *         },
        *         {
        *             control: {
        *                 label: "Last Name:",
        *                 name: "LName",
        *                 type: Components.FormControlTypes.TextField
        *             }
        *         },
        *         {
        *             control: {
        *                 label: "Choices:",
        *                 name: "Choice",
        *                 type: Components.FormControlTypes.Dropdown,
        *                 items: [
        *                     { text: "Choice 1", value: "1" },
        *                     { text: "Choice 2", value: "2" },
        *                     { text: "Choice 3", value: "3" },
        *                     { text: "Choice 4", value: "4" },
        *                     { text: "Choice 5", value: "5" }
        *                 ]
        *             }
        *         }
        *     ],
        *     value: {
        *         FName: "Gunjan",
        *         LName: "Datta",
        *         Choice: "3"
        *     }
        * });
        * ```
        */
    export const Form: (props: IFormProps) => IForm;
    
    import { IBaseProps } from "gd-sprest-bs/gd-bs/base";
    import { IFormControl, IFormControlProps, IFormControlTypes } from "gd-sprest-bs/gd-bs/components/formControl";
    
    /**
        * Form Validation Types
        */
    export const FormValidationTypes: IFormValidationTypes;
    
    /**
        * Form
        */
    export interface IForm {
            /** Appends controls to the form */
            appendControls: (controls: Array<IFormControlProps>) => void;
    
            /** Appends rows to the form */
            appendRows: (rows: Array<IFormRow>) => void;
    
            /** The form controls */
            controls: Array<IFormControl>;
    
            /** The form element */
            el: HTMLFormElement;
    
            /** Gets a control by its name */
            getControl: (name: string) => IFormControl;
    
            /** Returns the form values */
            getValues: () => { [key: string]: any };
    
            /** Hides the form. */
            hide: () => void;
    
            /** Validates the form */
            isValid: () => boolean;
    
            /** Shows the form. */
            show: () => void;
    }
    
    /**
        * Form Column
        */
    export interface IFormColumn {
            className?: string;
            control: IFormControlProps;
            isAutoSized?: boolean;
            size?: number;
    }
    
    /**
        * Form Properties
        */
    export interface IFormProps extends IBaseProps<IForm> {
            controls?: Array<IFormControlProps>;
            groupClassName?: string;
            isFloating?: boolean;
            rowClassName?: string;
            rows?: Array<IFormRow>;
            onControlRendering?: (control: IFormControlProps) => void | PromiseLike<IFormControlProps>;
            onControlRendered?: (control: IFormControl) => void | PromiseLike<IFormControl>;
            onRendered?: (controls: Array<IFormControl>) => void;
            validationType?: number;
            value?: any;
    }
    
    /**
        * Form Row
        */
    export interface IFormRow {
            className?: string;
            isAutoSized?: boolean;
            isCentered?: boolean;
            columns?: Array<IFormColumn>;
    }
    
    /**
        * Form Validation Types
        */
    export type IFormValidationTypes = {
            Default: number;
            Tooltip: number;
    }
}

declare module 'gd-sprest-bs/gd-bs/components/inputGroup' {
    
    /**
        * ### Input Group
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the inputGroup
        * let el = document.querySelector("#inputGroup");
        * let inputGroup = Components.InputGroup({
        *     el: el,
        *     label: "My Name:",
        *     value: "First Last"
        * });
        * ```
        */
    export const InputGroup: (props: IInputGroupProps, template?: string) => IInputGroup;
    
    /**
        * Input Group Types
        */
    export const InputGroupTypes: IInputGroupTypes;
    
    import { IBaseProps } from "gd-sprest-bs/gd-bs/base";
    import { IButtonProps } from "gd-sprest-bs/gd-bs/components/button";
    
    /**
        * Button Group
        */
    export interface IInputGroup {
            /** The element. */
            el: HTMLElement;
    
            /** Method to get the value. */
            getValue: () => string;
    
            /** Hides the input group. */
            hide: () => void;
    
            /** Method to set the value. */
            setValue: (value: string) => void;
    
            /** Shows the input group. */
            show: () => void;
    }
    
    /**
        * Input Group Properties
        */
    export interface IInputGroupProps extends IBaseProps<IInputGroup> {
            appendedButtons?: Array<IButtonProps>;
            appendedLabel?: string;
            formFl?: boolean;
            id?: string;
            isLarge?: boolean;
            isReadonly?: boolean;
            isSmall?: boolean;
            label?: string;
            max?: number;
            min?: number;
            onClear?: () => void;
            onChange?: (value?: string, ev?: Event) => void;
            placeholder?: string;
            prependedButtons?: Array<IButtonProps>;
            prependedLabel?: string;
            rows?: number;
            step?: number;
            title?: string;
            type?: number;
            value?: string;
    }
    
    /**
        * Input Group Types
        */
    export type IInputGroupTypes = {
            ColorPicker: number;
            Email: number;
            File: number;
            Password: number;
            Range: number;
            Search: number;
            TextArea: number;
            TextField: number;
    }
}

declare module 'gd-sprest-bs/gd-bs/components/jumbotron' {
    
    /**
        * ### Jumbotron
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the jumbotron
        * let el = document.querySelector("#jumbotron");
        * let jumbotron = Components.Jumbotron({
        *     el: el,
        *     title: "My Jumbotron",
        *     lead: "This is a jumbotron"
        * });
        * ```
        */
    export const Jumbotron: (props: IJumbotronProps, template?: string) => IJumbotron;
    
    import { IBaseProps } from "gd-sprest-bs/gd-bs/base";
    
    /**
        * Jumbotron
        */
    export interface IJumbotron {
            /** The element. */
            el: Element;
    
            /** Hides the jumbotron. */
            hide: () => void;
    
            /** Shows the jumbotron. */
            show: () => void;
    }
    
    /**
        * Jumbotron Properties
        */
    export interface IJumbotronProps<T=Element> extends IBaseProps<IJumbotron> {
            content?: string | T;
            isFluid?: boolean;
            lead?: string;
            onRenderContent?: (el?: HTMLElement) => void;
            title?: string;
    }
}

declare module 'gd-sprest-bs/gd-bs/components/listBox' {
    /**
        * List Box
        */
    export const ListBox: (props: IListBoxProps, template?: string) => IListBox;
    
    import { IBase } from "gd-sprest-bs/gd-bs/base";
    import { IDropdownItem } from "gd-sprest-bs/gd-bs/components/dropdown";
    
    /**
        * List Box
        */
    export interface IListBox extends IBase<IListBoxProps> {
            /** The element. */
            el: Element;
    
            /** The selected listbox items. */
            getValue: () => Array<IDropdownItem>;
    
            /** Sets the listbox value. */
            setValue: (value?: string | Array<string> | Array<IDropdownItem>) => void;
    }
    
    /**
        * List Box Properties
        */
    export interface IListBoxProps {
            label?: string;
            id?: string;
            isReadonly?: boolean;
            items: Array<IDropdownItem>;
            multi?: boolean;
            placeholder?: string;
            onChange?: (items: IDropdownItem | Array<IDropdownItem>, ev?: Event) => void;
            value?: string | Array<string>;
    }
}

declare module 'gd-sprest-bs/gd-bs/components/listGroup' {
    
    /**
        * ### List Group
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the listGroup
        * let el = document.querySelector("#listGroup");
        * let listGroup = Components.listGroup({
        *     el: el,
        *     colWidth: 4,
        *     isTabs: true,
        *     items: [
        *         { tabName: "Tab 1", content: "This is the content for tab 1.", isActive: true },
        *         { tabName: "Tab 2", content: "This is the content for tab 2.", badge: { content: "10", type: 4 } },
        *         { tabName: "Tab 3", content: "This is the content for tab 3." },
        *         { tabName: "Tab 4", content: "This is the content for tab 4." },
        *         { tabName: "Tab 5", content: "This is the content for tab 5." }
        *     ]
        * });
        * ```
        */
    export const ListGroup: (props: IListGroupProps, template?: string, itemTemplate?: string) => IListGroup;
    
    /**
        * List Group Item Types
        */
    export const ListGroupItemTypes: IListGroupItemTypes;
    
    import { IBaseProps } from "gd-sprest-bs/gd-bs/base";
    import { IBadgeProps } from "gd-sprest-bs/gd-bs/components/badge";
    
    /**
        * List Group
        */
    export interface IListGroup {
            /** The element. */
            el: Element;
    
            /** Hides the list group. */
            hide: () => void;
    
            /**
                * Shows the list group, or specified tab content.
                * @prop elId - The tab id.
                */
            show: (tabId?: string) => void;
    }
    
    /**
        * List Group Item
        */
    export interface IListGroupItem<T=Element> {
            badge?: IBadgeProps;
            className?: string;
            content?: string | T;
            data?: any;
            href?: string;
            isActive?: boolean;
            isDisabled?: boolean;
            onClick?: (el?: HTMLElement, item?: IListGroupItem) => void;
            onRender?: (el?: HTMLElement, item?: IListGroupItem) => void;
            tabName?: string;
            type?: number;
    }
    
    /**
        * List Group Properties
        */
    export interface IListGroupProps<T=Element> extends IBaseProps<IListGroup> {
            colWidth?: number;
            fadeTabs?: boolean;
            isFlush?: boolean;
            isHorizontal?: boolean;
            isTabs?: boolean;
            items?: Array<IListGroupItem<T>>;
    }
    
    /**
        * List Group Item Types
        */
    export type IListGroupItemTypes = {
            Danger: number;
            Dark: number;
            Info: number;
            Light: number;
            Primary: number;
            Secondary: number;
            Success: number;
            Warning: number;
    }
}

declare module 'gd-sprest-bs/gd-bs/components/modal' {
    
    /**
        * ### Modal
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the button
        * Components.Button({
        *     el: document.querySelector("#modalDemo"),
        *     target: "#bsModalDemo",
        *     text: "Show Modal",
        *     toggle: "modal"
        * });
        * 
        * // Create the modal
        * let el = document.querySelector("#modalDemo");
        * let modal = Components.Modal({
        *     el: el,
        *     id: "bsModalDemo",
        *     title: "Modal Demo",
        *     body: "This is the body of the modal."
        * });
        * ```
        */
    export const Modal: (props: IModalProps, template?: string) => IModal;
    
    /**
        * Modal Types
        */
    export const ModalTypes: IModalTypes;
    
    import { IBaseProps } from "gd-sprest-bs/gd-bs/base";
    import { IButtonProps } from "gd-sprest-bs/gd-bs/components/button";
    
    /**
        * Modal
        */
    export interface IModal {
            /** Disposes the modal. */
            dispose: () => void;
    
            /** The element. */
            el: Element,
    
            /** Manually readjust the modal’s position if the height of a modal changes while it is open (i.e. in case a scrollbar appears). */
            handleUpdate: () => void;
    
            /** Manually hides a modal. */
            hide: () => void;
    
            /** Returns true if the modal is visible. */
            isVisible: boolean;
    
            /** Updates the title. */
            setTitle: (title: string) => void;
    
            /** Updates the type. */
            setType: (modalType: number) => void;
    
            /** Manually opens a modal. */
            show: () => void;
    
            /** Manually toggles a modal. */
            toggle: () => void;
    }
    
    /**
        * Modal Options
        */
    export interface IModalOptions {
            /** Includes a modal-backdrop element. Alternatively, specify static for a backdrop which doesn't close the modal on click. */
            backdrop?: boolean | string;
    
            /** Puts the focus on the modal when initialized. */
            focus?: boolean;
    
            /** Closes the modal when escape key is pressed. */
            keyboard?: boolean;
    }
    
    /**
        * Modal Properties
        */
    export interface IModalProps<T = Element> extends IBaseProps<IModal> {
            body?: string | T;
            disableFade?: boolean;
            footer?: string | T;
            hideCloseButton?: boolean;
            id?: string;
            isCentered?: boolean;
            isStatic?: boolean;
            onClose?: (el: HTMLDivElement) => void;
            onRenderBody?: (el: HTMLDivElement) => void;
            onRenderFooter?: (el: HTMLDivElement) => void;
            options?: IModalOptions;
            title?: string;
            type?: number;
    }
    
    /**
        * Checkbox Group Types
        */
    export type IModalTypes = {
            Small: number;
            Medium: number;
            Large: number;
            XLarge: number;
            Full: number;
            FullSmall: number;
            FullMedium: number;
            FullLarge: number;
            FullXLarge: number;
            PanelSmall: number;
            PanelMedium: number;
            PanelLarge: number;
            PanelXLarge: number;
    }
}

declare module 'gd-sprest-bs/gd-bs/components/nav' {
    
    /**
        * ### Navigation
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
    
        * // Create the navigation
        * let el = document.querySelector("#navigation");
        * let nav = Components.Nav({
        *     el: el,
        *     isPills: true,
        *     items: [
        *         { title: "Nav 1", isActive: true },
        *         { title: "Nav 2" },
        *         { title: "Nav 3" },
        *         { title: "Nav 4" },
        *         { title: "Nav 5" }
        *     ]
        * });
        * ```
        */
    export const Nav: (props: INavProps, template?: string, itemTemplate?: string) => INav;
    
    import { IBaseProps } from "gd-sprest-bs/gd-bs/base";
    
    /**
        * Navigation
        */
    export interface INav {
            /** The element. */
            el: HTMLUListElement;
    
            /** Hides the navigation. */
            hide: () => void;
    
            /**
                * Shows the navigation or selects the given tab and shows its associated pane. Any other tab that was previously selected becomes unselected and its associated pane is hidden.
                * @prop selector - The query selector.
                */
            show: (selector?: string) => void;
    }
    
    /**
        * Navigation Properties
        */
    export interface INavProps<T = Element> extends IBaseProps<INav> {
            data?: any;
            enableFill?: boolean;
            fadeTabs?: boolean;
            id?: string;
            items?: Array<INavLink<T>>;
            isJustified?: boolean;
            isPills?: boolean;
            isTabs?: boolean;
            isVertical?: boolean;
    }
    
    /**
        * Navigation Links
        */
    export interface INavLink<T = Element> {
            isActive?: boolean;
            isDisabled?: boolean;
            data?: any;
            href?: string;
            onClick?: (item?: INavLink, ev?: Event) => void;
            onRenderTab?: (item?: INavLink, el?: HTMLDivElement) => void;
            tabContent?: string | T;
            title?: string;
    }
}

declare module 'gd-sprest-bs/gd-bs/components/navbar' {
    
    /**
        * ### Navbar
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the navbar
        * let el = document.querySelector("#navbar");
        * let navbar = Components.Navbar({
        *     el: el,
        *     brand: "Navbar",
        *     searchBox: {
        *         onChange: (value) => {
        *             // Log the value
        *             console.log("The search value is: " + value);
        *         },
        *         onSearch: (value) => {
        *             // Log the value
        *             console.log("The search value is: " + value);
        *         }
        *     },
        *     items: [
        *         {
        *             text: "Home",
        *             isActive: true
        *         },
        *         {
        *             text: "Link"
        *         },
        *         {
        *             text: "Disabled Link",
        *             isDisabled: true
        *         },
        *         {
        *             text: "Dropdown Link",
        *             items: [
        *                 { text: "Link 1" },
        *                 { text: "Link 2" },
        *                 { text: "Link 3" },
        *                 { text: "Link 4" },
        *                 { text: "Link 5" }
        *             ]
        *         }
        *     ]
        * });
        * ```
        */
    export const Navbar: (props: INavbarProps, template?: string, itemTemplate?: string) => INavbar;
    
    /**
        * Navbar Types
        */
    export const NavbarTypes: INavbarTypes;
    
    import { IBaseProps } from "gd-sprest-bs/gd-bs/base";
    import { IDropdownItem } from "gd-sprest-bs/gd-bs/components/dropdown";
    
    /**
        * Navbar
        */
    export interface INavbar {
            /** The element. */
            el: HTMLBaseElement;
    
            /** Hides the nav bar. */
            hide: () => void;
    
            /** Updates the navbar type. */
            setType: (navbarType: number) => void;
    
            /** Shows the nav bar. */
            show: () => void;
    }
    
    /**
        * Navbar Item
        */
    export interface INavbarItem {
            data?: any;
            href?: string;
            isActive?: boolean;
            isDisabled?: boolean;
            items?: Array<IDropdownItem>;
            onClick?: (item?: INavbarItem, ev?: Event) => void;
            target?: string;
            text?: string;
            toggle?: string;
    }
    
    /**
        * Navbar Properties
        */
    export interface INavbarProps extends IBaseProps<INavbar> {
            brand?: string;
            brandUrl?: string;
            enableScrolling?: boolean;
            enableSearch?: boolean;
            id?: string;
            items?: Array<INavbarItem>;
            onClick?: (item?: INavbarItem, ev?: Event) => void;
            searchBox?: INavbarSearchBox;
            type?: number;
    }
    
    /**
        * Navbar Types
        */
    export type INavbarTypes = {
            Dark: number;
            Light: number;
            Primary: number;
    }
    
    /**
        * Navbar Search Box
        */
    export interface INavbarSearchBox {
            btnType?: number;
            btnText?: string;
            hideButton?: boolean;
            onChange?: (value?: string, ev?: Event) => void;
            onSearch?: (value?: string, ev?: Event) => void;
            placeholder?: string;
            value?: string;
    }
}

declare module 'gd-sprest-bs/gd-bs/components/offcanvas' {
    /**
        * Offcanvas
        */
    export const Offcanvas: (props: IOffcanvasProps, template?: string) => IOffcanvas;
    
    import { IBaseProps } from "gd-sprest-bs/gd-bs/base";
    
    /**
        * Offcanvas
        */
    export interface IOffcanvas {
            /** The element. */
            el: Element;
    
            /** Hides a collapsible element. */
            hide: () => void;
    
            /** Shows a collapsible element. */
            show: () => void;
    
            /** Toggles the collapsible element on invocation. */
            toggle: () => void;
    }
    
    /**
        * Offcanvas Properties
        */
    export interface IOffcanvasProps<T = Element> extends IBaseProps<IOffcanvas> {
            body?: string | T;
            data?: any;
            enableBackdrop?: boolean;
            enableScroll?: boolean;
            id?: string;
            onRenderBody?: (el?: HTMLDivElement, props?: IOffcanvasProps) => void;
            onRenderHeader?: (el?: HTMLDivElement, props?: IOffcanvasProps) => void;
            title?: string | T;
    }
    
    /**
        * Offcanvas Types
        */
    export type IOffcanvasTypes = {
            Bottom: number;
            Left: number;
            Right: number;
    }
}

declare module 'gd-sprest-bs/gd-bs/components/pagination' {
    
    /**
        * ### Pagination
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the pagination
        * let el = document.querySelector("#pagination");
        * let pagination = Components.Pagination({
        *     el: el,
        *     numberOfPages: 5,
        *     onClick: (index, ev) => {
        *         // Log the index
        *         console.log("The page number selected is: " + index);
        *     }
        * });
        * ```
        */
    export const Pagination: (props: IPaginationProps, template?: string, itemTemplate?: string) => IPagination;
    
    import { IBaseProps } from "gd-sprest-bs/gd-bs/base";
    
    /**
        * Pagination Alignment
        */
    export const PaginationAlignment: IPaginationAlignment;
    
    /**
        * Pagination
        */
    export interface IPagination {
            /** The element. */
            el: HTMLBaseElement;
    
            /** Hides the pagination. */
            hide: () => void;
    
            /** Shows the pagination. */
            show: () => void;
    }
    
    /**
        * Pagination Properties
        */
    export interface IPaginationProps extends IBaseProps<IPagination> {
            alignment?: number;
            isLarge?: boolean;
            isSmall?: boolean;
            label?: string;
            numberOfPages?: number;
            onClick?: (pageNumber?: number, ev?: Event) => void;
    }
    
    /**
        * Pagination Alignment
        */
    export type IPaginationAlignment = {
            Centered: number;
            Left: number;
            Right: number;
    }
}

declare module 'gd-sprest-bs/gd-bs/components/popover' {
    
    /**
        * ### Popover
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the popover
        * let el = document.querySelector("#popover");
        * let popover = Components.Popover({
        *     el: el,
        *     isDismissible: true,
        *     btnProps: {
        *         text: "Popover Demo"
        *     },
        *     options: {
        *         container: "body",
        *         content: "This is the popover content.",
        *         title: "My Popover",
        *         trigger: "hover"
        *     }
        * });
        * ```
        */
    export const Popover: (props: IPopoverProps, template?: string) => IPopover;
    
    /**
        * Popover Types
        */
    export const PopoverTypes: IPopoverTypes;
    
    import { IBaseProps } from "gd-sprest-bs/gd-bs/base";
    import { IButtonProps } from "gd-sprest-bs/gd-bs/components/button";
    
    /**
        * Popover
        */
    export interface IPopover {
            /** Disables the popover. */
            disable: () => void;
    
            /** Disposes the popover. */
            dispose: () => void;
    
            /** The element. */
            el: Element;
    
            /** Enables the popover. */
            enable: () => void;
    
            /** Hides an element’s popover. */
            hide: () => void;
    
            /** Toggles an element's popover. */
            toggle: () => void;
    
            /** Toggles the ability for an element’s popover to be shown or hidden. */
            toggleEnabled: () => void;
    
            /** Reveals an element’s popover. */
            show: () => void;
    
            /** Updates the position of an element’s popover. */
            update: () => void;
    }
    
    /**
        * Popover Options
        */
    export interface IPopoverOptions {
            animation?: boolean;
            boundary?: string | Element;
            container?: string | Element | Function;
            content?: string | Element | Function;
            delay?: number | object;
            fallbackPlacement?: string | Array<string>;
            html?: boolean;
            offset?: number | string;
            placement?: string | Function;
            selector?: string;
            template?: string;
            title?: string | Element | Function;
            trigger?: string;
    }
    
    /**
        * Popover Properties
        */
    export interface IPopoverProps extends IBaseProps<IPopover> {
            btnProps?: IButtonProps;
            isDismissible?: boolean;
            options?: IPopoverOptions;
            target?: Element,
            type?: number;
    }
    
    /**
        * Popover Types
        */
    export type IPopoverTypes = {
            Auto: number;
            Bottom: number;
            Left: number;
            Right: number;
            Top: number;
    }
}

declare module 'gd-sprest-bs/gd-bs/components/progress' {
    
    /**
        * ### Progress
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the progress
        * let el = document.querySelector("#progress");
        * let progress = Components.Progress({
        *     el: el,
        *     size: 25,
        *     label: "25%"
        * });
        * ```
        */
    export const Progress: (props: IProgressProps, template?: string) => IProgress;
    
    import { IBaseProps } from "gd-sprest-bs/gd-bs/base";
    
    /**
        * Progress
        */
    export interface IProgress {
            /** The element. */
            el: Element;
    
            /** Hides the progress. */
            hide: () => void;
    
            /** The progress bar element */
            progressBar: HTMLDivElement;
    
            /** Shows the progress. */
            show: () => void;
    }
    
    /**
        * Progress Properties
        */
    export interface IProgressProps extends IBaseProps<IProgress> {
            isAnimated?: boolean;
            isStriped?: boolean;
            label?: string;
            max?: number;
            min?: number;
            size?: number;
            type?: number;
    }
}

declare module 'gd-sprest-bs/gd-bs/components/progressGroup' {
    
    /**
        * ### Progress Group
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the progress group
        * let el = document.querySelector("#progressGroup");
        * let progressGroup = Components.ProgressGroup({
        *     el: el,
        *     progressbars: [
        *         {
        *             size: 25,
        *             isStriped: true,
        *             label: "25%"
        *         },
        *         {
        *             size: 50,
        *             isAnimated: true,
        *             isStriped: true,
        *             label: "50%"
        *         }
        *     ]
        * });
        * ```
        */
    export const ProgressGroup: (props: IProgressGroupProps, template?: string, progressTemplate?: string) => IProgressGroup;
    
    import { IBaseProps } from "gd-sprest-bs/gd-bs/base";
    import { IProgressProps } from "gd-sprest-bs/gd-bs/components/progress";
    
    /**
        * Progress Group
        */
    export interface IProgressGroup {
            /** The element. */
            el: Element;
    
            /** Hides the progress group. */
            hide: () => void;
    
            /** Shows the progress group. */
            show: () => void;
    }
    
    /**
        * Progress Group Properties
        */
    export interface IProgressGroupProps extends IBaseProps<IProgressGroup> {
            isMultiple?: boolean;
            progressbars?: Array<IProgressProps>;
    }
}

declare module 'gd-sprest-bs/gd-bs/components/spinner' {
    
    /**
        * ### Spinner
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create a spinner
        * let el = document.querySelector("#spinner");
        * Components.Spinner({
        *     el,
        *     text: "Loading...",
        *     type: Components.SpinnerTypes.Danger
        * });
        * ```
        */
    export const Spinner: (props: ISpinnerProps, template?: string) => ISpinner;
    
    /**
        * Spinner Types
        */
    export const SpinnerTypes: ISpinnerTypes;
    
    import { IBaseProps } from "gd-sprest-bs/gd-bs/base";
    
    /**
        * Spinner
        */
    export interface ISpinner {
            /** The element. */
            el: Element;
    
            /** Hides the spinner. */
            hide: () => void;
    
            /** Shows the spinner. */
            show: () => void;
    }
    
    /**
        * Spinner Properties
        */
    export interface ISpinnerProps extends IBaseProps<ISpinner> {
            isGrowing?: boolean;
            isSmall?: boolean;
            text?: string;
            type?: number;
    }
    
    /**
        * Spinner Types
        */
    export type ISpinnerTypes = {
            Danger: number;
            Dark: number;
            Info: number;
            Light: number;
            Primary: number;
            Secondary: number;
            Success: number;
            Warning: number;
    }
}

declare module 'gd-sprest-bs/gd-bs/components/table' {
    
    /**
        * ### Table
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the table
        * let el = document.querySelector("#table");
        * let table = Components.Table({
        *     el: el,
        *     className: "table-sm is-striped",
        *     columns: [
        *         { name: "a0", title: "Actions", isHidden: true },
        *         { name: "a1", title: "Col 1" },
        *         { name: "a2", title: "Col 2" },
        *         { name: "a3", title: "Col 3" }
        *     ],
        *     rows: [
        *         { a0: "1", a1: "1.1", a2: "1.2", a3: "1.3" },
        *         { a0: "2", a1: "2.1", a2: "2.2", a3: "2.3" },
        *         { a0: "3", a1: "3.1", a2: "3.2", a3: "3.3" },
        *         { a0: "4", a1: "4.1", a2: "4.2", a3: "4.3" },
        *         { a0: "5", a1: "5.1", a2: "5.2", a3: "5.3" },
        *         { a0: "6", a1: "6.1", a2: "6.2", a3: "6.3" },
        *         { a0: "7", a1: "7.1", a2: "7.2", a3: "7.3" },
        *         { a0: "8", a1: "8.1", a2: "8.2", a3: "8.3" },
        *         { a0: "9", a1: "9.1", a2: "9.2", a3: "9.3" }
        *     ]
        * });
        * ```
        */
    export const Table: (props: ITableProps, template?: string) => ITable
    
    import { IBaseProps } from "gd-sprest-bs/gd-bs/base";
    
    /**
        * Table
        */
    export interface ITable {
            addRows: (rows: Array<any>) => void;
    
            el: HTMLTableElement;
    
            /** Hides the table. */
            hide: () => void;
    
            /** Shows the table. */
            show: () => void;
    }
    
    /**
        * Table Properties
        */
    export interface ITableProps extends IBaseProps<ITable> {
            columns?: Array<ITableColumn>;
            onClickCell?: (el: HTMLTableDataCellElement, column?: ITableColumn, data?: any) => void;
            onClickHeader?: (el: HTMLTableHeaderCellElement, column?: ITableColumn) => void;
            onRenderCell?: (el?: HTMLTableDataCellElement, column?: ITableColumn, data?: any) => void;
            onRenderHeaderCell?: (el?: HTMLTableDataCellElement, column?: ITableColumn) => void;
            onRenderHeaderRow?: (el?: HTMLTableRowElement) => void;
            onRenderRow?: (el?: HTMLTableRowElement, data?: any) => void;
            rows?: Array<any>;
    }
    
    /**
        * Table Column
        */
    export interface ITableColumn {
            className?: string;
            data?: any;
            isHidden?: boolean;
            name: string;
            onClickCell?: (el: HTMLTableDataCellElement, column?: ITableColumn, data?: any) => void;
            onClickHeader?: (el: HTMLTableHeaderCellElement, column?: ITableColumn) => void;
            onRenderCell?: (el: HTMLTableDataCellElement, column?: ITableColumn, data?: any) => void;
            onRenderHeader?: (el?: HTMLTableDataCellElement, column?: ITableColumn) => void;
            scope?: string;
            title?: string;
    }
}

declare module 'gd-sprest-bs/gd-bs/components/toast' {
    
    /**
        * ### Toast
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create a toast
        * let el = document.querySelector("#toast");
        * Components.Toast({
        *     el,
        *     headerText: "Header",
        *     body: "This is the body of the toast.",
        *     mutedText: "2 seconds ago",
        *     options: { autohide: false }
        * });
        * ```
        */
    export const Toast: (props: IToastProps, template?: string) => IToast;
    
    import { IBaseProps } from "gd-sprest-bs/gd-bs/base";
    
    /**
        * Toast
        */
    export interface IToast {
            /** The component element. */
            el: HTMLElement;
    
            /** Hides the toast. */
            hide: () => void;
    
            /** Shows the toast. */
            show: () => void;
    }
    
    /**
        * Toast Properties
        */
    export interface IToastProps<T = Element> extends IBaseProps<IToast> {
            body?: string | T;
            data?: any;
            headerImgClass?: string;
            headerImgSrc?: string;
            headerText?: string;
            hideCloseButton?: boolean;
            mutedText?: string;
            options?: IToastOptions;
            onClick?: (el?: HTMLElement, data?: any) => void;
            onRenderBody?: (el?: HTMLElement, data?: any) => void;
            onRenderHeader?: (el?: HTMLElement, data?: any) => void;
    }
    
    /**
        * Toast Options
        */
    export interface IToastOptions {
            animation?: boolean;
            autohide?: boolean;
            delay?: number;
    }
}

declare module 'gd-sprest-bs/gd-bs/components/toolbar' {
    
    /**
        * ### Toolbar
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create a toolbar
        * let el = document.querySelector("#toolbar");
        * Components.Toolbar({
        *     el,
        *     spacing: 3,
        *     items: [
        *         { buttons: [{ text: "Button 1" }] },
        *         { buttons: [{ text: "Button 2" }] },
        *         { buttons: [{ text: "Button 3" }] },
        *         { buttons: [{ text: "Button 4" }] },
        *         { buttons: [{ text: "Button 5" }] }
        *     ]
        * });
        * ```
        */
    export const Toolbar: (props: IToolbarProps, template?: string) => IToolbar;
    
    /**
        * Toolbar
        */
    export interface IToolbar {
            /** The element. */
            el: Element;
    
            /** Hides the toolbar. */
            hide: () => void;
    
            /** Shows the toolbar. */
            show: () => void;
    }
    
    import { IBaseProps } from "gd-sprest-bs/gd-bs/base";
    import { IButtonProps } from "gd-sprest-bs/gd-bs/components/button";
    import { IInputGroupProps } from "gd-sprest-bs/gd-bs/components/inputGroup";
    
    /**
        * Toolbar Item
        */
    export interface IToolbarItem {
            buttons?: Array<IButtonProps>;
            buttonType?: number;
            inputGroup?: IInputGroupProps;
    }
    
    /**
        * Toolbar Properties
        */
    export interface IToolbarProps extends IBaseProps<IToolbar> {
            items?: Array<IToolbarItem>;
            spacing?: number;
    }
}

declare module 'gd-sprest-bs/gd-bs/components/tooltip' {
    
    /**
        * ### Tooltip
        * 
        * ```ts
    import { Components } from "gd-sprest-bs";
    
    // Create the tooltip
    let el = document.querySelector("#tooltip");
    let tooltip = Components.Tooltip({
            el: el,
            text: "Tooltip Demo"
            options: {
                    html: true,
                    title: "My Tooltip",
            }
    });
    ```
        */
    export const Tooltip: (props: ITooltipProps, template?: string) => ITooltip;
    
    /**
        * Tooltip Types
        */
    export const TooltipTypes: ITooltipTypes;
    
    import { IBaseProps } from "gd-sprest-bs/gd-bs/base";
    import { IButtonProps, IButton } from "gd-sprest-bs/gd-bs/components/button";
    
    /**
        * Tooltip
        */
    export interface ITooltip {
            /** Reference to the button. */
            button: IButton;
    
            /** Disposes the tooltip. */
            dispose: () => void;
    
            /** The element. */
            el: HTMLButtonElement;
    
            /** Gives an element’s tooltip the ability to be shown. */
            enable: () => void;
    
            /** Hides an element’s tooltip. */
            hide: () => void;
    
            /** Toggles an element's tooltip. */
            toggle: () => void;
    
            /** Toggles the ability for an element’s tooltip to be shown or hidden. */
            toggleEnabled: () => void;
    
            /** Reveals an element’s tooltip. */
            show: () => void;
    
            /** Updates the position of an element’s tooltip. */
            update: () => void;
    }
    
    /**
        * Tooltip Options
        */
    export interface ITooltipOptions {
            animation?: boolean;
            boundary?: string | Element;
            container?: string | Element | Function;
            delay?: number | object;
            fallbackPlacement?: string | Array<string>;
            html?: boolean;
            offset?: number | string | Function;
            placement?: string | Function;
            popperConfig?: object;
            selector?: string;
            template?: string;
            title?: string | Element | Function;
            trigger?: string;
    }
    
    /**
        * Tooltip Properties
        */
    export interface ITooltipProps extends IBaseProps<ITooltip> {
            btnProps?: IButtonProps;
            options?: ITooltipOptions;
            type?: number;
    }
    
    /**
        * Tooltip Types
        */
    export type ITooltipTypes = {
            Auto: number;
            Bottom: number;
            Left: number;
            Right: number;
            Top: number;
    }
}

declare module 'gd-sprest-bs/gd-sprest/lib/apps' {
    import { IAppCollection } from "gd-sprest-def/lib/Microsoft/AppServices/entitytypes";
    import { ITargetInfoProps } from "gd-sprest-bs/gd-sprest/utils";
    
    /**
        * #### REST API
        * _api/Microsoft.AppServices.AppCollection
        */
    export const Apps: IApps;
    
    /**
        * Apps
        * @category Apps
        */
    export interface IApps {
            /**
                * Creates an instance of the user profile library.
                * @param targetInfo - (Optional) The target information.
                */
            (targetInfo?: ITargetInfoProps): IAppCollection;
    }
}

declare module 'gd-sprest-bs/gd-sprest/lib/contextInfo' {
    import { IBaseExecution } from "gd-sprest-def/lib/base";
    import { BasePermissions, ContextWebInformation } from "gd-sprest-def/lib/SP/complextypes";
    
    /**
        * A reference to the _spPageContextInfo global variable.
        * 
        * ### How to get the context information of another web
        * This is required for making POST requests on webs in different site collections.
        * ```ts
        * // Get the context information of the root web
        * ContextInfo.getWeb("/").execute((contextInfo) => {
        *     // Get the root web
        *     Web("/", { requestDigest: contextInfo.GetContextWebInformation.FormDigestValue })
        *         // Get the 'Site Assets' library
        *         .Lists("Site Assets")
        *         // Query for the items
        *         .getItemsByQuery("<Query><OrderBy><FieldRef Name='ID' /></OrderBy></Query>")
        *         // Execute the request
        *         .execute(items => {
        *             // Parse the items
        *             for(let i=0; i<items.results.length; i++) {
        *                 let item = items.results[i];
        *             }
        *         });
        * });
        */
    export const ContextInfo: IContextInformation;
    
    /**
        * Context Information
        * @category Context Information
        */
    export interface IContextInformation {
    
            /** AAD Instance Url */
            aadInstanceUrl: string;
    
            /** AAD Tenant Id */
            aadTenantId: string;
    
            /** Alerts Enabled */
            alertsEnabled: boolean;
    
            /** Allow Silverlight Prompt */
            allowSilverlightPrompt: boolean;
    
            /** Block Downloads Experience Enabled */
            blockDownloadsExperienceEnabled: boolean;
    
            /** Can User Create Microsoft Form */
            canUserCreateMicrosoftForm: boolean;
    
            /** Can User Create Visio Drawing */
            canUserCreateVisioDrawing: boolean;
    
            /** CDN Prefix */
            cdnPrefix: string;
    
            /** Client Server Time Delta */
            clientServerTimeDelta: number;
    
            /** Correlation ID */
            CorrelationId: string;
    
            /** Cross Domain Photos Enabled */
            crossDomainPhotosEnabled: boolean;
    
            /** Current Culture LCID */
            currentCultureLCID: string;
    
            /** Current Culture Name */
            currentCultureName: string;
    
            /** Current Language */
            currentLanguage: string;
    
            /** Current UI Culture Name */
            currentUICultureName: string;
    
            /** Department ID */
            departmentId: string;
    
            /** Design Package ID */
            DesignPackageId: string;
    
            /** Disable App Views */
            disableAppViews: boolean;
    
            /** Disable Flows */
            disableFlows: boolean;
    
            /** Document */
            document: HTMLDocument;
    
            /** Environment */
            env: string;
    
            /** True if the _spPageContextInfo object exists, flase otherwise. */
            existsFl: boolean;
    
            /** Farm Label */
            farmLabel: string;
    
            /** FID */
            fid: string;
    
            /** Form Digest Timeout Seconds */
            formDigestTimeoutSeconds: number;
    
            /** Form Digest Value */
            formDigestValue: string;
    
            /** Group Color */
            groupColor: string;
    
            /** Group Has Homepage */
            groupHasHomepage: boolean;
    
            /** Group ID */
            groupId: string;
    
            /** Group Type */
            groupType: string;
    
            /** Guests Enabled */
            guestsEnabled: boolean;
    
            /** Has Manage Web Permissions */
            hasManageWebPermissions: boolean;
    
            /** Has Pending Web Template Extension */
            hasPendingWebTemplateExtension: boolean;
    
            /** Hide Sync Button On ODB */
            hideSyncButtonOnODB: boolean;
    
            /** Hub Site ID */
            hubSiteId: boolean;
    
            /** IDLE Session Sign Out Enabled */
            idleSessionSignOutEnabled: boolean;
    
            /** Is Anonymous Guest User */
            isAnonymousGuestUser: boolean;
    
            /** Is App Web */
            isAppWeb: boolean;
    
            /** Is Archived */
            isArchived: boolean;
    
            /** Is Email Authentication Guest User */
            isEmailAuthenticationGuestUser: boolean;
    
            /** Is External Guest User */
            isExternalGuestUser: boolean;
    
            /** Is Group Related Site */
            isGroupRelatedSite: boolean;
    
            /** Is Groupify Disabled */
            isGroupifyDisabled: boolean;
    
            /** Is Groupify Menu Button Feature Off */
            isGroupifyMenuButtonFeatureOff: boolean;
    
            /** Is Hub Site */
            isHubSite: boolean;
    
            /** Is Location Service Available */
            isLocationserviceAvailable: boolean;
    
            /** Is Multi Geo ODB Mode */
            isMultiGeoODBMode: boolean;
    
            /** Is Multi Geo Tenant */
            isMultiGeoTenant: boolean;
    
            /** Is No-Script Enabled */
            isNoScriptEnabled: boolean;
    
            /** Is Site Administrator */
            isSiteAdmin: boolean;
    
            /** Is Site Owner */
            isSiteOwner: boolean;
    
            /** Is SharePoint Online */
            isSPO: boolean;
    
            /** Is Shared By Link Enabled */
            isShareByLinkEnabled: boolean;
    
            /** Is Teams Channel Site */
            isTeamsChannelSite: boolean;
    
            /** Is Teams Connected Site */
            isTeamsConnectedSite: boolean;
    
            /** Is Tenant Development Site */
            isTenantDevSite: boolean;
    
            /** Is Unauthorized Tenant */
            isUnauthorizedTenant: boolean;
    
            /** Is Web Welcome Page */
            isWebWelcomePage: boolean;
    
            /** Layouts Url */
            layoutsUrl: string;
    
            /** List Base Template */
            listBaseTemplate: number;
    
            /** List Base Type */
            listBaseType: number;
    
            /** List Id */
            listId: string;
    
            /** List Item Count */
            listItemCount: number;
    
            /** List Permissions Mask */
            listPermsMask: BasePermissions;
    
            /** List Title */
            listTitle: string;
    
            /** List Url */
            listUrl: string;
    
            /** Maximum File Size */
            maximumFileSize: number;
    
            /** Modern Theming Enabled */
            modernThemingEnabled: boolean;
    
            /** MS Graph Endpoint Url */
            msGraphEndpointUrl: string;
    
            /** MS Mru Endpoint Url */
            msMruEndpointUrl: string;
    
            /** Multi Geo Info */
            multiGeoInfo: Array<any>;
    
            /** Navigation Information */
            navigationInfo: any;
    
            /** NID */
            nid: number;
    
            /** Open in Client */
            openInClient: boolean;
    
            /** Page Item Id */
            pageItemId: number;
    
            /** Page List Id */
            pageListId: string;
    
            /** Page Permissions Mask */
            pagePermsMask: BasePermissions;
    
            /** Page Personalization Scope */
            pagePersonalizationScope: number;
    
            /** Prefer User Time Zone */
            preferUserTimeZone: boolean;
    
            /** Preview Features Enabled */
            PreviewFeaturesEnabled: boolean;
    
            /** Profile Url */
            profileUrl: string;
    
            /** Publishing Feature On */
            PublishingFeatureOn: boolean;
    
            /** Recycle Bin Item Count */
            RecycleBinItemCount: number;
    
            /** Server Redirected Url */
            serverRedirectedUrl: string;
    
            /** Server Request Path */
            serverRequestPath: string;
    
            /** Server Time */
            serverTime: string;
    
            /** Show NGSC Dialog for Sync on ODB */
            showNGSCDialogForSyncOnODB: boolean;
    
            /** Show NGSC Dialog for Sync on TS */
            showNGSCDialogForSyncOnTS: boolean;
    
            /** Site Absolute Url */
            siteAbsoluteUrl: string;
    
            /** Site Classification */
            siteClassification: string;
    
            /** Site Client Tag */
            siteClientTag: string;
    
            /** Site Color */
            siteColor: string;
    
            /** Site ID */
            siteId: string;
    
            /** Site Pages Enabled */
            sitePagesEnabled: boolean;
    
            /** Site Pages Feature Version */
            sitePagesFeatureVersion: number;
    
            /** Site Server Relative Url */
            siteServerRelativeUrl: string;
    
            /** Site Subscription ID */
            siteSubscriptionId: string;
    
            /** Social Bar Enabled */
            socialBarEnabled: boolean;
    
            /** Support Percent Store Page */
            supportPercentStorePage: boolean;
    
            /** Support Pound Store Path */
            supportPoundStorePath: boolean;
    
            /** System User Key */
            systemUserKey: string;
    
            /** Teams Channel Type */
            teamsChannelType: number;
    
            /** Tenant App Version */
            tenantAppVersion: string;
    
            /** Tenant Display Name */
            tenantDisplayName: string;
    
            /** Theme Cache Token */
            themeCacheToken: string;
    
            /** Theme CSS Folder Url */
            themedCssFolderUrl: string;
    
            /** Theme Image File Names */
            themedImageFileNames: any;
    
            /** Update From Digest Page Loaded */
            updateFromDigestPageLoaded: Date;
    
            /** User Display Name */
            userDisplayName: string;
    
            /** User EMail */
            userEmail: string;
    
            /** User First Day of Week */
            userFirstDayOfWeek: any;
    
            /** User Id */
            userId: number;
    
            /** User Login Name */
            userLoginName: string;
    
            /** User Photo Cdn Base Url */
            userPhotoCdnBaseUrl: string;
    
            /** User Principal Name */
            userPrincipalName: string;
    
            /** User Time 24 */
            userTime24: boolean;
    
            /** User Time Zone Data */
            userTimeZoneData: any;
    
            /** User Voice for Feedback Enabled */
            userVoiceForFeedbackEnabled: boolean;
    
            /** View ID */
            viewId: string;
    
            /** View Only Experience Enabled */
            viewOnlyExperienceEnabled: boolean;
    
            /** Web Absolute Url */
            webAbsoluteUrl: string;
    
            /** Web Description */
            webDescription: string;
    
            /** Web Domain */
            webDomain: string;
    
            /** Web First Day of Week */
            webFirstDayOfWeek: number;
    
            /** Web ID */
            webId: string;
    
            /** Web Language */
            webLanguage: number;
    
            /** Web Language Name */
            webLanguageName: string;
    
            /** Web Logo Url */
            webLogoUrl: string;
    
            /** Web Permissions Mask */
            webPermMasks: BasePermissions;
    
            /** Web Server Relative Url */
            webServerRelativeUrl: string;
    
            /** Web Template */
            webTemplate: string;
    
            /** Web Template Configuration */
            webTemplateConfiguration: string;
    
            /** Web Time 24 */
            webTime24: boolean;
    
            /** Web Time Zone Data */
            webTimeZoneData: object;
    
            /** Web Title */
            webTitle: string;
    
            /** Web UI Version */
            webUIVersion: number;
    
            /** Window */
            window: {
                    $REST: any;
                    addEventListener: any;
                    clearInterval: any;
                    document: HTMLDocument;
                    setInterval: any;
                    SP: any;
                    SPClientTemplates: any;
            };
    
    
            /**
                * Generates a guid.
                * @returns A GUID as a string value.
                */
            generateGUID: () => string;
    
            /**
                * Gets the context information of another web.
                * This is required for making POST requests on other site collections.
                * @param url The relative url of the web.
                * @return The context information of the web.
                */
            getWeb(url: string): IBaseExecution<{ GetContextWebInformation: ContextWebInformation }>;
    
            /**
                * Sets the page context information for modern pages.
                * @param spfxPageContext - The page context information variable from a SPFx project.
                */
            setPageContext(spfxPageContext: any);
    }
}

declare module 'gd-sprest-bs/gd-sprest/lib/graph' {
    import * as SP from "gd-sprest-bs/gd-sprest/intellisense/graph";
    import { ITargetInfo } from "gd-sprest-bs/gd-sprest/utils";
    
    /**
        * Graph
        * @hidden
        */
    export const Graph: IGraph;
    
    /**
        * Graph
        * @hidden
        */
    export interface IGraph {
            /**
                * Creates an instance of the graph library.
                * @param accessToken - The access token for the graph api request.
                * @param version - The version of the graph to target.
                */
            (accessToken: string, version?: string): SP.IGraph;
    
            /**
                * Method to get the access token from a classic page.
                */
            getAccessToken(): Promise<SP.IGraphToken>;
    }
}

declare module 'gd-sprest-bs/gd-sprest/lib/groupService' {
    import * as SP from "gd-sprest-def/lib/Microsoft/SharePoint/Portal/entitytypes";
    import { ITargetInfoProps } from "gd-sprest-bs/gd-sprest/utils";
    
    /**
        * #### REST API
        * _api/Microsoft.SharePoint.Portal.GroupService
        */
    export const GroupService: IGroupService;
    
    /**
        * Group Service
        * @category Group Site
        */
    export interface IGroupService {
            /**
                * Creates an instance of the user profile library.
                * @param targetInfo - (Optional) The target information.
                */
            (targetInfo?: ITargetInfoProps): SP.IGroupService;
    }
}

declare module 'gd-sprest-bs/gd-sprest/lib/groupSiteManager' {
    import * as SP from "gd-sprest-def/lib/Microsoft/SharePoint/Portal/entitytypes";
    import { ITargetInfoProps } from "gd-sprest-bs/gd-sprest/utils";
    
    /**
        * #### REST API
        * _api/Microsoft.SharePoint.Portal.GroupSiteManager
        */
    export const GroupSiteManager: IGroupSiteManager;
    
    /**
        * Group Site Manager
        * @category Group Site
        */
    export interface IGroupSiteManager {
            /**
                * Creates an instance of the user profile library.
                * @param targetInfo - (Optional) The target information.
                */
            (targetInfo?: ITargetInfoProps): SP.IGroupSiteManager;
    }
}

declare module 'gd-sprest-bs/gd-sprest/lib/hubSites' {
    import { IBaseExecution } from "gd-sprest-def/lib/base";
    import { IHubSiteCollection } from "gd-sprest-def/lib/SP/entitytypes";
    import { ITargetInfoProps } from "gd-sprest-bs/gd-sprest/utils";
    
    /**
        * #### REST API
        * _api/SP.HubSite.Collection
        */
    export const HubSites: IHubSites;
    
    /**
        * Hub Sites
        * @category Hub Site
        */
    export interface IHubSites {
            /**
                * Creates an instance of the user profile library.
                * @param targetInfo - (Optional) The target information.
                */
            (targetInfo?: ITargetInfoProps): IHubSiteCollection;
    
            /**
                * A static method to see if the current user can create a hub site.
                */
            canCreate(): IBaseExecution<{ CanCreate: boolean }>;
    }
}

declare module 'gd-sprest-bs/gd-sprest/lib/hubSitesUtility' {
    import * as SP from "gd-sprest-def/lib/Microsoft/SharePoint/Portal/entitytypes";
    import { ITargetInfoProps } from "gd-sprest-bs/gd-sprest/utils";
    
    /**
        * #### REST API
        * _api/HubSitesUtility
        */
    export const HubSitesUtility: IHubSitesUtility;
    
    /**
        * Hub Sites Utility
        * @category Hub Site
        */
    export interface IHubSitesUtility {
            /**
                * Creates an instance of the user profile library.
                * @param targetInfo - (Optional) The target information.
                */
            (targetInfo?: ITargetInfoProps): SP.ISPHubSitesUtility;
    }
}

declare module 'gd-sprest-bs/gd-sprest/lib/list' {
    import { IBaseExecution } from "gd-sprest-def/lib/base";
    import { RenderListDataParameters } from "gd-sprest-def/lib/SP/complextypes";
    import * as SP from "gd-sprest-def/lib/SP/entitytypes";
    import { ITargetInfoProps } from "gd-sprest-bs/gd-sprest/utils";
    
    /**
        * #### REST API
        * _api/web/lists/getByTitle('listName')
        *
        * #### Get list from the current web
        *
        * ```typescript
        * List("Site Assets").execute(list => {
        *   let title = list.Title;
        * });
        * ```
        * 
        *
        * #### Query a list to include various collections
        *
        * ```typescript
        * List("Site Assets").query({
        *  Expand: ["ContentTypes", "Fields", "Views"]
        * }).execute(list => {
        *   let contentTypes = list.ContentTypes.results;
        *   let fields = list.Fields.results;
        *   let views = list.Views.results;
        * });
        * ```
        */
    export const List: IList;
    
    /**
        * List
        * @category List
        */
    export interface IList {
            /**
                * Creates an instance of the library.
                * @category List
                * @param listName - The name of the list.
                * @param targetInfo - (Optional) The target information.
                */
            (listName: string, targetInfo?: ITargetInfoProps): SP.IList;
    
            /**
                * @category List
                * A static method to get the list by the entity name.
                * @param props - The list entity request properties.
                */
            getByEntityName(props: IListEntityProps): SP.IList;
    
            /**
                * A static method to get the list data from the SP.List.GetListAsDataStream endpoint.
                * @category List
                * @param listFullUrl - The absolute url of the list.
                * @param parameters - The optional list data parameters.
                */
            getDataAsStream(listFullUrl: string, parameters?: RenderListDataParameters): IBaseExecution<IListDataStream>;
    }
    
    /**
        * List Data Stream
        * @category List
        */
    export interface IListDataStream<RowProps = SP.ListItem> {
            FilterFields?: string;
            FilterLink: string;
            FirstRow: number;
            FolderPermissions: string;
            ForceNoHierarchy: string;
            HierarchyHasIndention: string;
            LastRow: number;
            Row: Array<RowProps>;
            RowLimit: number;
    }
    
    /**
        * List Entity Properties
        * @category List
        */
    export interface IListEntityProps {
            /** The callback method. */
            callback?: (list: SP.IList) => void;
    
            /** The list entity name. */
            name: string;
    
            /** The target information to pass to the web request. */
            targetInfo?: ITargetInfoProps;
    
            /** The relative url of the web containing the list. */
            url?: string;
    }
}

declare module 'gd-sprest-bs/gd-sprest/lib/navigation' {
    import { INavigationServiceRest } from "gd-sprest-def/lib/Microsoft/SharePoint/Navigation/REST/entitytypes";
    import { ITargetInfoProps } from "gd-sprest-bs/gd-sprest/utils";
    
    /**
        * #### REST API
        * _api/navigation
        */
    export const Navigation: INavigation;
    
    /**
        * Navigation
        * @category Navigation
        */
    export interface INavigation {
            /**
                * Creates an instance of the navigation library.
                * @param url - (Optional) The web url.
                * @param targetInfo - (Optional) The target information.
                */
            (url?: string, targetInfo?: ITargetInfoProps): INavigationServiceRest;
    }
}

declare module 'gd-sprest-bs/gd-sprest/lib/peopleManager' {
    import * as SP from "gd-sprest-def/lib/SP/UserProfiles/entitytypes";
    import { ITargetInfoProps } from "gd-sprest-bs/gd-sprest/utils";
    
    /**
        * #### REST API
        * _api/SP.UserProfiles.PeopleManager
        */
    export const PeopleManager: IPeopleManager;
    
    /**
        * People Manager
        * @category People Manager
        */
    export interface IPeopleManager {
            /**
                * Creates an instance of the people manager library.
                * @param targetInfo - (Optional) The target information.
                */
            (targetInfo?: ITargetInfoProps): SP.IPeopleManager;
    }
}

declare module 'gd-sprest-bs/gd-sprest/lib/peoplePicker' {
    import * as SP from "gd-sprest-bs/gd-sprest/intellisense/peoplePicker";
    import { ITargetInfoProps } from "gd-sprest-bs/gd-sprest/utils";
    
    /**
        * #### REST API
        * _api/SP.UI.ApplicationPages.ClientPeoplePickerWebServiceInterface
        */
    export const PeoplePicker: IPeoplePicker;
    
    /**
        * People Picker
        * @category People Picker
        */
    export interface IPeoplePicker {
            /**
                * Creates an instance of the people picker library.
                * @param targetInfo - (Optional) The target information.
                */
            (targetInfo?: ITargetInfoProps): SP.IPeoplePicker;
    }
}

declare module 'gd-sprest-bs/gd-sprest/lib/profileLoader' {
    import * as SP from "gd-sprest-def/lib/SP/UserProfiles/entitytypes";
    import { ITargetInfoProps } from "gd-sprest-bs/gd-sprest/utils";
    
    /**
        * #### REST API
        * _api/SP.UserProfiles.ProfileLoader.getProfileLoader
        */
    export const ProfileLoader: IProfileLoader;
    
    /**
        * Profile Loader
        * @category Profile Loader
        */
    export interface IProfileLoader {
            /**
                * Creates an instance of the profile loader library.
                * @param targetInfo - (Optional) The target information.
                */
            (targetInfo?: ITargetInfoProps): SP.IProfileLoader;
    }
}

declare module 'gd-sprest-bs/gd-sprest/lib/search' {
    import { IBaseExecution } from "gd-sprest-def/lib/base";
    import { SearchRequest } from "gd-sprest-def/lib/Microsoft/Office/Server/Search/REST/complextypes";
    import { ISearchService } from "gd-sprest-def/lib/Microsoft/Office/Server/Search/REST/entitytypes";
    import { ITargetInfoProps } from "gd-sprest-bs/gd-sprest/utils";
    
    /**
        * #### REST API
        * _api/search
        */
    export const Search: ISearch;
    
    /**
        * Search
        * @category Search
        */
    export interface ISearch {
            /**
                * Creates an instance of the search library.
                * @param url - The optional url to execute the search against.
                * @param targetInfo - The target information.
                */
            (url?: string, targetInfo?: ITargetInfoProps): ISearchService;
    
            /**
                * Method to get the app context information.
                * @param siteUrl - The absolute url of the site.
                */
            getAppContext(siteUrl: string): IBaseExecution;
    
            /**
                * Method to get the query from the search parameters.
                * @param parameters - The search parameters.
                */
            getQuery: (parameters: SearchRequest /* | Microsoft.Office.Server.Search.REST.SearchSuggestion*/) => Array<string>;
    
            /**
                * Method to get the url of a site, by its id.
                * @param id - The site id.
                */
            getUrlById(id: string): IBaseExecution<{ GetUrlById: string }>;
    }
}

declare module 'gd-sprest-bs/gd-sprest/lib/site' {
    import { IBaseExecution } from "gd-sprest-def/lib/base";
    import * as SP from "gd-sprest-def/lib/SP/entitytypes";
    import { ITargetInfoProps } from "gd-sprest-bs/gd-sprest/utils";
    
    /**
        * #### REST API
        * _api/site
        *
        * #### Get list from the current site collection
        *
        * ```typescript
        * import { Site } from "gd-sprest";
        * 
        * Site().execute(site => {
        *   let hubSiteId = site.HubSiteId;
        * });
        * ```
        * 
        *
        * #### Query a list to include various collections
        *
        * ```typescript
        * import { Site } from "gd-sprest";
        * 
        * Site().query({
        *  Expand: ["UserCustomActions"]
        * }).execute(list => {
        *   let actions = site.UserCustomActions.results;
        * });
        * ```
        */
    export const Site: ISite;
    
    /**
        * Site
        * @category Site
        */
    export interface ISite {
            /**
                * Creates an instance of the site library.
                * @param url - (Optional) The site url.
                * @param targetInfo - (Optional) The target information.
                */
            (url?: string, targetInfo?: ITargetInfoProps): SP.ISite;
    
            /**
                * Method to check if a site collection exists.
                * @param url - The absolute url of the site collection.
                */
            exists(url: string): IBaseExecution<ISiteExists>;
    
            /**
                * Method to get the app context information.
                * @param siteUrl - The absolute url of the site.
                */
            getAppContext(siteUrl: string): IBaseExecution;
    
            /**
                * Method to get the url of a site, by its id.
                * @param id - The site id.
                */
            getUrlById(id: string): IBaseExecution<ISiteUrl>;
    }
    
    /**
        * Site Exists
        */
    export interface ISiteExists {
            /** True if the site collection exists, false otherwise. */
            Exists: boolean;
    }
    
    /**
        * Site Url
        */
    export interface ISiteUrl {
            /** The site url. */
            GetUrlById: string;
    }
}

declare module 'gd-sprest-bs/gd-sprest/lib/siteManager' {
    import { IBaseExecution } from "gd-sprest-def/lib/base";
    import * as Portal from "gd-sprest-def/lib/Microsoft/SharePoint/Portal/entitytypes";
    import { ITargetInfoProps } from "gd-sprest-bs/gd-sprest/utils";
    
    /**
        * #### REST API
        * _api/siteManager
        *
        * #### Get list from the current site collection
        *
        * ```typescript
        * import { Site } from "gd-sprest";
        * 
        * Site().execute(site => {
        *   let hubSiteId = site.HubSiteId;
        * });
        * ```
        * 
        *
        * #### Query a list to include various collections
        *
        * ```typescript
        * import { Site } from "gd-sprest";
        * 
        * Site().query({
        *  Expand: ["UserCustomActions"]
        * }).execute(list => {
        *   let actions = site.UserCustomActions.results;
        * });
        * ```
        */
    export const SiteManager: ISiteManager;
    
    /**
        * Site Manager
        * @category Site Manager
        */
    export interface ISiteManager {
            /**
                * Creates an instance of the site library.
                * @param url - (Optional) The site url.
                * @param targetInfo - (Optional) The target information.
                */
            (url?: string, targetInfo?: ITargetInfoProps): Portal.ISPSiteManager;
    }
}

declare module 'gd-sprest-bs/gd-sprest/lib/socialFeed' {
    import { IBaseExecution } from "gd-sprest-def/lib/base";
    import { SocialPostCreationData } from "gd-sprest-def/lib/SP/Social/complextypes";
    import { ISocialRestThread, SocialRestThread } from "gd-sprest-def/lib/SP/Social/entitytypes";
    import { ITargetInfoProps } from "gd-sprest-bs/gd-sprest/utils";
    
    /**
        * #### REST API
        * _api/Social.Feed
        */
    export const SocialFeed: ISocialFeed;
    
    /**
        * Social Feed
        * @cateogry Social Feed
        */
    export interface ISocialFeed {
            /**
                * Creates an instance of the social feed library.
                * @param targetInfo - (Optional) The target information.
                */
            (targetInfo?: ITargetInfoProps): ISocialRestThread;
    
            /**
                * Posts to a feed.
                * @param accountName - The account name to post to.
                * @param postInfo - The post information.
                */
            postToFeed(accountName: string, postInfo: SocialPostCreationData): IBaseExecution<SocialRestThread>;
    
            /**
                * Post to the current user's feed.
                * @param postInfo - The post information.
                */
            postToMyFeed(postInfo: SocialPostCreationData): IBaseExecution<SocialRestThread>;
    }
}

declare module 'gd-sprest-bs/gd-sprest/lib/themeManager' {
    import * as SP from "gd-sprest-def/lib/SP/Utilities/entitytypes";
    import { ITargetInfoProps } from "gd-sprest-bs/gd-sprest/utils";
    
    /**
        * #### REST API
        * _api/ThemeManager
        */
    export const ThemeManager: IThemeManager;
    
    /**
        * Theme Manager
        * @category Theme Manager
        */
    export interface IThemeManager {
            /**
                * Creates an instance of the user profile library.
                * @param targetInfo - (Optional) The target information.
                */
            (targetInfo?: ITargetInfoProps): SP.IThemeManager;
    }
}

declare module 'gd-sprest-bs/gd-sprest/lib/userProfile' {
    import { IProfileLoader } from "gd-sprest-def/lib/SP/UserProfiles/entitytypes";
    import { ITargetInfoProps } from "gd-sprest-bs/gd-sprest/utils";
    
    /**
        * #### REST API
        * _api/SP.UserProfiles.ProfileLoader.getProfileLoader/getUserProfile
        */
    export const UserProfile: IUserProfile;
    
    /**
        * User Profile
        * @category User Profile
        */
    export interface IUserProfile {
            /**
                * Creates an instance of the user profile library.
                * @param targetInfo - (Optional) The target information.
                */
            (targetInfo?: ITargetInfoProps): IProfileLoader;
    }
}

declare module 'gd-sprest-bs/gd-sprest/lib/utility' {
    import * as SP from "gd-sprest-bs/gd-sprest/intellisense/utility";
    import { ITargetInfoProps } from "gd-sprest-bs/gd-sprest/utils";
    
    /**
        * #### REST API
        * _api/SP.Utilities.Utility
        */
    export const Utility: IUtility;
    
    /**
        * Utility
        * @category Utility
        */
    export interface IUtility {
            /**
                * Creates an instance of the utility library.
                * @param url - (Optional) The web url.
                * @param targetInfo - (Optional) The target information.
                */
            (url?: string, targetInfo?: ITargetInfoProps): SP.IUtility;
    }
}

declare module 'gd-sprest-bs/gd-sprest/lib/web' {
    import { IBaseExecution } from "gd-sprest-def/lib/base";
    import * as SP from "gd-sprest-def/lib/SP/entitytypes";
    import { ITargetInfoProps } from "gd-sprest-bs/gd-sprest/utils";
    
    /**
        * #### REST API
        * _api/web
        *
        * #### Get current web
        *
        * ```typescript
        * import { Web } from "gd-sprest";
        * 
        * Web().execute(web => {
        *   let title = web.Title;
        * });
        * ```
        * 
        *
        * #### Query a list to include various collections
        *
        * ```typescript
        * import { Web } from "gd-sprest";
        * 
        * Web().query({
        *  Expand: ["ContentTypes", "Fields", "Lists", "RootFolder"]
        * }).execute(web => {
        *   let contentTypes = web.ContentTypes.results;
        *   let fields = web.Fields.results;
        *   let lists = web.Lists.results;
        *   let rootFolder = web.RootFolder;
        * });
        * ```
        */
    export const Web: IWeb;
    
    /**
        * Web
        */
    export interface IWeb {
            /**
                * Creates an instance of the web library.
                * @param url - (Optional) The web url.
                * @param targetInfo - (Optional) The target information.
                */
            (url?: string, targetInfo?: ITargetInfoProps): SP.IWeb;
    
            /**
                * Method to get a remote web.
                * @param requestUrl - The absolute url of the remote web.
                */
            getRemoteWeb(requestUrl: string): IBaseExecution<SP.RemoteWeb>;
    }
}

declare module 'gd-sprest-bs/gd-sprest/lib/wfInstanceService' {
    import { IBaseExecution } from "gd-sprest-def/lib/base";
    import * as SP from "gd-sprest-def/lib/SP/WorkflowServices/entitytypes";
    import { ITargetInfoProps } from "gd-sprest-bs/gd-sprest/utils";
    
    /**
        * #### REST API
        * _api/SP.WorkflowServices.WorkflowInstanceService.Current
        */
    export const WorkflowInstanceService: IWorkflowInstanceService;
    
    /**
        * Workflow Instance Service
        */
    export interface IWorkflowInstanceService {
            /**
                * Creates an instance of the web library.
                * @param url - (Optional) The web url.
                * @param targetInfo - (Optional) The target information.
                */
            (url?: string, targetInfo?: ITargetInfoProps): SP.IWorkflowInstanceService;
    }
}

declare module 'gd-sprest-bs/gd-sprest/lib/wfSubscriptionService' {
    import { IBaseExecution } from "gd-sprest-def/lib/base";
    import * as SP from "gd-sprest-def/lib/SP/WorkflowServices/entitytypes";
    import { ITargetInfoProps } from "gd-sprest-bs/gd-sprest/utils";
    
    /**
        * #### REST API
        * _api/SP.WorkflowServices.WorkflowSubscriptionService.Current
        */
    export const WorkflowSubscriptionService: IWorkflowSubscriptionService;
    
    /**
        * Workflow Subscription Service
        */
    export interface IWorkflowSubscriptionService {
            /**
                * Creates an instance of the web library.
                * @param url - (Optional) The web url.
                * @param targetInfo - (Optional) The target information.
                */
            (url?: string, targetInfo?: ITargetInfoProps): SP.IWorkflowSubscriptionService;
    }
}

declare module 'gd-sprest-bs/gd-sprest/helper/executor' {
    /**
        * An easy way to apply simple or complex code against an array of objects.
        * @param methodParams - An array of parameters to execute in order synchronously.
        * @param method - The method to execute for each method parameter provided. Returning a promise will prevent the next item from executing until it is resolved.
        * @param onExecuted - An event executed after the method completes. Returning a promise will prevent the next item from executing until it is resolved.
        */
    export const Executor: IExecutor;
    
    /**
        * Executor
        */
    export interface IExecutor {
            <T = any>(methodParams: Array<T>, method: (param: T) => PromiseLike<any> | void, onExecuted?: (...args) => PromiseLike<any> | void): PromiseLike<any>;
    }
}

declare module 'gd-sprest-bs/gd-sprest/helper/fieldSchemaXML' {
    import { IFieldInfo } from "gd-sprest-bs/gd-sprest/helper/spCfg";
    
    /**
        * Generates the Schema XML for a Field.
        * @category Field Schema XML
        */
    export const FieldSchemaXML: IFieldSchemaXML;
    
    /**
        * @category Field Schema XML
        */
    export interface IFieldSchemaXML {
            /** Creates the suitebar link */
            (fieldInfo: IFieldInfo): PromiseLike<string>;
    }
}

declare module 'gd-sprest-bs/gd-sprest/helper/jslink' {
    /**
        * Helper class for creating JSLink solutions.
        * 
        * ### How to register a template
        * ```ts
        * Helper.JSLink.register({
        *     Templates: {
        *         Fields: {
        *             Title: {
        *                 EditForm: (ctx, field) => { $REST.Helper.JSLink.hideField(ctx, field, true); },
        *                 View: $REST.Helper.JSLink.disableQuickEdit
        *             }
        *         }
        *     }
        * });
        * ```
        * 
        * ### Available Customizations
        * - BaseViewID
        * - ListTemplateType
        * - OnPostRender
        * - onPreRender
        * - Templates
        *     - Body
        *     - Footer
        *     - Fields
        *         - DisplayForm
        *         - EditForm
        *         - Name
        *         - NewForm
        *         - View
        *     - Group
        *     - Header
        *     - Item
        *     - OnPostRender
        *     - OnPreRender
        * ```
        */
    export const JSLink: IJSLink;
    
    /**
        * JSLink
        */
    export interface IJSLink {
            /**
                * Internal field to method mapper
                */
            _fieldToMethodMapper: any;
    
            /**
                * Internal field used by the hideField method.
                */
            _hideEventFl: boolean;
    
            /**
                * Disables edit for the specified field.
                * @param ctx - The client context.
                * @param field - The field to disable edit.
                * @param requireValueFl - Flag to only disable the field, if a value exists.
                */
            disableEdit(ctx: any, field: any, requireValueFl?: boolean): string;
    
            /**
                * Disable quick edit for the specified field.
                * @param ctx - The client context.
                * @param field - The field to disable edit.
                */
            disableQuickEdit(ctx: any, field: any);
    
            /**
                * Returns the list view.
                * @param ctx - The client context.
                */
            getListView(ctx: any);
    
            /**
                * Returns the list view items.
                * @param ctx - The client context.
                */
            getListViewItems(ctx: any);
    
            /**
                * Returns the selected list view items
                */
            getListViewSelectedItems();
    
            /**
                * Returns the webpart containing the JSLink field/form/view.
                * @param ctx - The client context.
                */
            getWebPart(ctx);
    
            /**
                * Hides the specified field.
                * @param ctx - The client context.
                * @param field - The field to hide.
                */
            hideField(ctx: any, field: any);
    
            /**
                * Registers the JSLink configuration.
                * @param cfg - The JSLink configuration.
                */
            register(cfg: IJSLinkCfg);
    
            /**
                * Removes the field and html from the page.
                * @param ctx - The client context.
                * @param field - The field to remove.
                */
            removeField(ctx: any, field: any);
    
            /**
                * Method to render the default html for a field.
                * @param ctx - The client context.
                * @param field - The form field.
                * @param formType - The form type. (Display, Edit, New or View)
                */
            renderField(ctx, field, formType?: number);
    }
    
    /**
        * JSLink Configuration
        */
    export interface IJSLinkCfg {
            /** The base view id. */
            BaseViewID?: number | string;
    
            /** The list template type. */
            ListTemplateType?: number;
    
            /** The post render event. */
            OnPostRender?: any;
    
            /** The pre render event. */
            OnPreRender?: any;
    
            /** The JSLink template overrides. */
            Templates?: IJSLinkCfgTemplate;
    }
    /**
        * JSLink Field Configuration
        */
    export interface IJSLinkCfgField {
            DisplayForm?: any;
            EditForm?: any;
            NewForm?: any;
            View?: any;
    }
    
    /**
        * JSLink Templates
        */
    export interface IJSLinkCfgTemplate {
            Body?: any;
            Footer?: any;
            Fields?: { [key: string]: IJSLinkCfgField };
            Group?: any;
            Header?: any;
            Item?: any;
            OnPostRender?: any;
            OnPreRender?: any;
    }
}

declare module 'gd-sprest-bs/gd-sprest/helper/linkInfo' {
    /**
        * Adds an icon to the ribbon bar on a classic page.
        * @param props The ribbon link information.
        */
    export const RibbonLink: (props: ILinkInfo) => PromiseLike<HTMLAnchorElement>;
    
    /**
        * Adds an icon to the suite bar on a classic page.
        * If SharePoint Online is detected, then the icon will be rendered in the ribbon bar.
        */
    export const SuiteBarLink: (props: ILinkInfo) => PromiseLike<HTMLAnchorElement>;
    
    /**
     * Link Information
     */
    export interface ILinkInfo {
            /** True to append the link at the end of the list. */
            appendFl?: boolean;
    
            /** The link class name */
            className?: string;
    
            /** The link url */
            href?: string;
    
            /** The link id */
            id: string;
    
            /** The link click event */
            onClick?: (ev?: MouseEvent) => void;
    
            /** The link title */
            title: string;
    }
    
    /**
        * Ribbon Link
        */
    export interface IRibbonLink {
            (props: ILinkInfo): PromiseLike<HTMLAnchorElement>;
    }
    
    /**
        * Suitebar Link
        */
    export interface ISuiteBarLink {
            (props: ILinkInfo): PromiseLike<HTMLAnchorElement>;
    }
}

declare module 'gd-sprest-bs/gd-sprest/helper/listForm' {
    import { IODataQuery } from "gd-sprest-def/lib/base";
    import { Attachment, ContentType, Field, FieldLink, Folder, List, ListItem, ListItemOData } from "gd-sprest-def/lib/SP/entitytypes";
    import * as Types from "gd-sprest-bs/gd-sprest/intellisense";
    
    /**
        * Helper class for creating custom list forms.
        */
    export const ListForm: IListForm;
    
    /**
        * List Form
        */
    export interface IListForm {
            /**
                * Creates an instance of the list form
                * @param props - The list form properties.
                */
            create(props: IListFormProps): PromiseLike<IListFormResult>;
    
            /**
                * Method to generate the odata query for the list item.
                */
            generateODataQuery(info: IListFormResult, loadAttachments?: boolean): IODataQuery;
    
            /**
                * Method to load the item attachments
                * @param info - The list form information.
             */
            loadAttachments(info: IListFormProps): PromiseLike<Array<Attachment>>
    
            /**
                * Method to refresh the item.
                * @param info - The list form information.
                */
            refreshItem(info: IListFormResult): PromiseLike<IListFormResult>;
    
            /**
                * Method to remove attachment from an item.
                */
            removeAttachment(info: IListFormResult, fileName: string): PromiseLike<IListFormResult>;
    
            /**
                * Method to save attachments to the item.
                * @param info - The list form information.
                * @param attachmentInfo - The attachment files to add.
                */
            saveAttachments(info: IListFormProps, attachmentInfo: Array<IListFormAttachmentInfo>): PromiseLike<Array<Attachment>>;
    
            /**
                * Method to save the item.
                * @param info - The list form information.
                * @param itemValues - The list item values.
                */
            saveItem(info: IListFormResult, formValues: any): PromiseLike<IListFormResult>;
    
            /**
                * Method to show the file dialog.
                * @param info - The list form information.
                * @param onSave - The save event triggered when a file is uploaded to the item.
                */
            showFileDialog(): PromiseLike<IListFormAttachmentInfo>;
    
            /**
                * Method to show the file dialog.
                * @param info - The list form information.
                * @param onSave - The save event triggered when a file is uploaded to the item.
                */
            showFileDialog(info: IListFormResult, onSave?: (IListFormAttachmentInfo) => void): PromiseLike<IListFormResult>;
    }
    
    /**
        * List Form Attachment Information
        */
    export interface IListFormAttachmentInfo {
            /** The file content */
            data: any;
    
            /** The name of the file */
            name: string;
    }
    
    /**
        * List Form Display
        */
    export interface IListFormDisplay {
            /**
                * Method to get the fields
                */
            getFields(): Array<HTMLDivElement>;
    }
    
    /**
        * List Form Display Properties
        */
    export interface IListFormDisplayProps {
            /** The element to render the form to. */
            el?: Element;
    
            /** The fields to exclude from the form. */
            excludeFields?: Array<string>;
    
            /** The fields to include in the form. */
            includeFields?: Array<string>;
    
            /** The list form information. */
            info: IListFormResult;
    }
    
    /**
        * List Form Edit
        */
    export interface IListFormEdit {
            /**
                * Method to get the fields
                */
            getFields<T = any>(): Array<T>;
    
            /**
                * Method to get the form values
                */
            getValues<T = any>(): PromiseLike<T>;
    }
    
    /**
        * List Form Edit Properties
        */
    export interface IListFormEditProps extends IListFormDisplayProps {
            /** The form mode (New/Edit) */
            controlMode?: number;
    }
    
    /**
        * List Form Properties
        */
    export interface IListFormProps {
            /** The content type to target for the list form fields. */
            contentType?: string;
    
            /** The form fields to exclude. */
            excludeFields?: Array<string>;
    
            /** The form fields */
            fields?: Array<string>;
    
            /** The list item */
            item?: ListItemOData | ListItem;
    
            /** The item id */
            itemId?: number;
    
            /** The list name */
            listName: string;
    
            /** Flag to deteremine if we are loading attachments */
            loadAttachments?: boolean;
    
            /** OData query used when loading an item */
            query?: IODataQuery;
    
            /** The relative web url containing the list */
            webUrl?: string;
    }
    
    /**
        * List Form Result
        */
    export interface IListFormResult {
            /** The item attachments. */
            attachments?: Array<Attachment>;
    
            /** The referenced content type. */
            contentType: ContentType;
    
            /** The form fields. */
            fields: { [key: string]: Field };
    
            /** The form field links, if a content type was referenced. */
            fieldLinks: { [key: string]: FieldLink };
    
            /** The field values as text. */
            fieldValuesAsText: Types.SP.FieldStringValues;
    
            /** The field values as html. */
            fieldValuesAsHtml: Types.SP.FieldStringValues;
    
            /** The list item. */
            item?: ListItemOData | ListItem;
    
            /** The list item folder. (Used for document sets) */
            itemFolder?: Folder;
    
            /** The item query. */
            query?: IODataQuery;
    
            /** The list. */
            list: List;
    
            /** The relative web url containing the list. */
            webUrl?: string;
    }
}

declare module 'gd-sprest-bs/gd-sprest/helper/listFormField' {
    import { IODataQuery } from "gd-sprest-def/base";
    import { Field, FieldChoice, FieldCurrency, FieldDateTime, FieldLookup, FieldMultiChoice, FieldMultiLineText, FieldNumber, FieldOData, FieldText, FieldUrl, FieldUser, IListItemQuery } from "gd-sprest-def/lib/SP/entitytypes";
    import { ITaxonomyField, TaxonomyField } from "gd-sprest-def/lib/SP/Taxonomy/entitytypes";
    import { ITermInfo } from "gd-sprest-bs/gd-sprest/helper/taxonomy";
    
    /**
        * Helper class for creating custom list forms.
        */
    export const ListFormField: IListFormField;
    
    /**
        * List Form Field Information
        */
    export interface IListFormFieldInfo {
            /** The default value. */
            defaultValue?: any;
    
            /** The list field. */
            field?: Field | FieldOData | TaxonomyField;
    
            /** The list name. */
            listName: string;
    
            /** The internal name of the field. */
            name: string;
    
            /** Flag indicating if the field is read-only. */
            readOnly?: boolean;
    
            /** True indicates a required field type. */
            required?: boolean;
    
            /** The display name of the field. */
            title?: string;
    
            /** The field type. */
            type?: number;
    
            /** The field type as a string. */
            typeAsString?: string;
    
            /** The relative web url containing the list. */
            webUrl?: string;
    }
    
    /**
        * List Form Choice Field Information
        */
    export interface IListFormChoiceFieldInfo extends IListFormFieldInfo {
            /** The choices. */
            choices?: Array<string>;
    
            /** The list field. */
            field?: FieldChoice | FieldMultiChoice;
    
            /** Flag to determine if multiple values exist */
            multi?: boolean;
    }
    
    /**
        * List Form Date Field Information
        */
    export interface IListFormDateFieldInfo extends IListFormFieldInfo {
            /** The list field. */
            field?: FieldDateTime;
    
            /** Flag determining if we are displaying time */
            showTime?: boolean;
    }
    
    /**
        * List Form Lookup Field Information
        */
    export interface IListFormLookupFieldInfo extends IListFormFieldInfo {
            /** The list field. */
            field?: FieldLookup;
    
            /** The lookup field */
            lookupField?: string;
    
            /** Optional OData query to filter the lookup items */
            lookupFilter?: string | IODataQuery;
    
            /** The lookup list id */
            lookupListId?: string;
    
            /** The lookup web id */
            lookupWebId?: string;
    
            /** Flag to determine if multiple values exist */
            multi?: boolean;
    }
    
    /**
        * List Form MMS Field Information
        */
    export interface IListFormMMSFieldInfo extends IListFormFieldInfo {
            /** The list field. */
            field?: Field & ITaxonomyField;
    
            /** Flag to determine if multiple values exist */
            multi?: boolean;
    
            /** The term id */
            termId?: string;
    
            /** The term set id */
            termSetId?: string;
    
            /** The term store id */
            termStoreId?: string;
    
            /** The value field */
            valueField?: FieldMultiLineText;
    }
    
    /**
        * List Form Number Field Information
        */
    export interface IListFormNumberFieldInfo extends IListFormFieldInfo {
            /** The number of decimals. */
            decimals?: number;
    
            /** The list field. */
            field?: FieldNumber | FieldCurrency;
    
            /** The maximum value */
            maxValue?: number;
    
            /** The minimum value */
            minValue?: number;
    
            /** Flag determining if we are displaying the value as a percentage */
            showAsPercentage?: boolean;
    }
    
    /**
        * List Form Text Field Information
        */
    export interface IListFormTextFieldInfo extends IListFormFieldInfo {
            /** The list field. */
            field?: FieldText | FieldMultiLineText;
    
            /** Flag determining if this is a note field */
            multiline?: boolean;
    
            /** Flag determining if this field value is html encoded */
            richText?: boolean;
    
            /** The number of rows to display */
            rows?: number;
    }
    
    /**
        * List Form URL Field Information
        */
    export interface IListFormUrlFieldInfo extends IListFormFieldInfo {
            /** The list field. */
            field?: FieldUrl;
    }
    
    /**
        * List Form User Field Information
        */
    export interface IListFormUserFieldInfo extends IListFormFieldInfo {
            /** Flag to determine if groups are allowed */
            allowGroups?: boolean;
    
            /** The list field. */
            field?: FieldUser;
    
            /** Flag to determine if multiple values exist */
            multi?: boolean;
    }
    
    /**
        * List Form Field
        */
    export interface IListFormField {
            /**
                * Creates an instance of the list form field
                * @param props - The list form field properties
                */
            create(props: IListFormFieldInfo): PromiseLike<IListFormFieldInfo>;
    
            /** Method to load the lookup data */
            loadLookupData(info: IListFormLookupFieldInfo, queryTop?: number): PromiseLike<Array<IListItemQuery>>;
    
            /** Method to load the mms data */
            loadMMSData(info: IListFormMMSFieldInfo): PromiseLike<Array<ITermInfo>>;
    
            /** Method to load the mms value field */
            loadMMSValueField(info: IListFormMMSFieldInfo): PromiseLike<FieldMultiLineText>;
    }
}

declare module 'gd-sprest-bs/gd-sprest/helper/methods' {
    export * from "gd-sprest-bs/gd-sprest/helper/methods/addContentEditorWebPart";
    export * from "gd-sprest-bs/gd-sprest/helper/methods/addPermissionLevel";
    export * from "gd-sprest-bs/gd-sprest/helper/methods/addScriptEditorWebPart";
    export * from "gd-sprest-bs/gd-sprest/helper/methods/createContentType";
    export * from "gd-sprest-bs/gd-sprest/helper/methods/createDocSet";
    export * from "gd-sprest-bs/gd-sprest/helper/methods/hasPermissions";
    export * from "gd-sprest-bs/gd-sprest/helper/methods/parse";
    export * from "gd-sprest-bs/gd-sprest/helper/methods/request";
    export * from "gd-sprest-bs/gd-sprest/helper/methods/setContentTypeFields";
    export * from "gd-sprest-bs/gd-sprest/helper/methods/setGroupOwner";
}

declare module 'gd-sprest-bs/gd-sprest/helper/sp' {
    /**
        * References to the internal SharePoint libraries.
        */
    export const SP: ISPComponents;
    
    /**
        * SharePoint Components
        */
    export interface ISPComponents {
            /**
                * ### How to create a callout
                * ```ts
                * Helper.SP.CalloutManager.init().then(() => {
                *   // Create the callout
                *   let callout = Helper.SP.CalloutManager.createNewIfNecessary({
                *     ID: "UniqueId",
                *     launchPoint: document.querySelector("input[value='Run']"),
                *     title: "My Custom Callout",
                *     content: "<p>This is the content of the callout. An element can be applied instead of a string."
                *   });
                * });
                * ```
                */
            CalloutManager: ICalloutManager,
    
            /**
                * ### How to create a modal dialog
                * ```ts
                * Helper.SP.ModalDialog.showWaitScreenWithNoClose("Loading the Data").then(dlg => {
                *   // Do Stuff and then close the dialog
                *   dlg.close();
                * });
                * ```
                */
            ModalDialog: IModalDialog,
    
            /**
                * ### How to create a notification
                * ```ts
                * Helper.SP.Notify.addNotifition("This is a notification.", false);
                * ```
                */
            Notify: INotify,
    
            /**
                * ### How to wait for a library to be loaded
                * ```ts
                * Helper.SP.SOD.executeOrDelayUntilScriptLoaded(() => {
                *   // Do Stuff
                * }, "gd-sprest");
                * ```
                */
            SOD: ISOD,
    
            /**
                * ### How to create a status
                * ```ts
                * Helper.SP.Status.addStatus("Success", "This is a custom status.");
                * ```
                */
            Status: IStatus
    }
    
    /**
        * Callout
        */
    export interface ICallout {
            /** Adds a link to the actions panel of the callout window. */
            addAction(action: ICalloutAction): any;
    
            /**
                * Adds an event handler to the callout.
                * Examples - opened, opening, closed and closing
                */
            addEventCallback(eventName: string, callback: (callout: ICallout) => void): any;
    
            /** Closes the callout. */
            close(useAnimation: boolean): any;
    
            /** Do not call this method, use the CalloutManager to remove the callout. */
            destroy();
    
            /** Returns the action menu of the callout. */
            getActionMenu(): ICalloutActionMenu;
    
            /** Returns the beak orientation of the callout. */
            getBeakOrientation(): string;
    
            /** Returns the bounding box element of the callout. */
            getBoundingBox(): HTMLElement;
    
            /** Returns the html of the content. */
            getContent(): string;
    
            /** Returns the content element. */
            getContentElement(): HTMLElement;
    
            /** Returns the content width of the callout. */
            getContentWidth(): number;
    
            /** Returns the unique id of the callout. */
            getID(): string;
    
            /** Returns the launch point element of the callout. */
            getLaunchPoint(): HTMLElement;
    
            /** Returns the open options of the callout. */
            getOpenOptions(): ICalloutOpenOptions;
    
            /** Gets the position of the callout. */
            getPositionAlgorithm(): any;
    
            /** Returns the title of the callout. */
            getTitle(): string;
    
            /** Returns true if the callout is closed. */
            isClosed(): boolean
    
            /** Returns true if the callout is closing. */
            isClosing(): boolean;
    
            /** Returns true if the callout is opened. */
            isOpen(): boolean;
    
            /** Returns true if the callout is opening or opened. */
            isOpenOrOpening(): boolean;
    
            /** Returns true if the callout is in the "Opening" state. */
            isOpening(): boolean;
    
            /** Displays the callout. */
            open(useAnimation?: boolean): any;
    
            /** Re-renders the actions menu. Call after the actions menu is changed. */
            refreshActions();
    
            /** 
                * Sets options for the callout.
                * Note - Not all options can be changed for the callout after its creation. */
            set(options: ICalloutOptions): any;
    
            /** Displays the callout if it's hidden, hides it otherwise. */
            toggle();
    }
    
    /**
        * Callout Action
        */
    export interface ICalloutAction {
            getDisabledToolTip(): string;
            getIsDisabledCallback(): (action: ICalloutAction) => boolean;
            getIsMenu(): boolean;
            getIsVisibleCallback(): (action: ICalloutAction) => boolean;
            getMenuEntries(): Array<ICalloutActionMenuEntry>;
            getText(): string;
            getToolTop(): string;
            isEnabled(): boolean;
            isVisible(): boolean;
            render();
            set(options: ICalloutActionOptions);
    }
    
    /**
        * Callout Action Menu
        */
    export interface ICalloutActionMenu {
            constructor(actionId: any): ICalloutActionMenu;
            addAction(action: ICalloutAction): any;
            calculateActionWidth();
            getActions(): Array<ICalloutAction>;
            refreshActions();
            render();
    }
    
    /**
        * Callout Action Options
        */
    export interface ICalloutActionOptions {
            disabledTooltip?: string;
            isEnabledCallback?: (action: ICalloutAction) => boolean;
            isVisibleCallback?: (action: ICalloutAction) => boolean;
            menuEntries?: Array<ICalloutActionMenu>;
            onClickCallback?: (event: Event, action: ICalloutAction) => any;
            text?: string;
            tooltip?: string;
    }
    
    /**
        * Callout Action Menu Entry
        */
    export interface ICalloutActionMenuEntry {
            onClickCallback: (actionMenuEntry: ICalloutActionMenuEntry, actionMenuEntryIndex: number) => void;
            iconUrl?: string;
            text: string;
    }
    
    /**
        * Callout Manager
        */
    export interface ICalloutManager {
            /** Closes all callouts on the page. */
            closeAll();
    
            /** Returns true if the associated callout is open. */
            containsOneCalloutOpen(el: HTMLElement);
    
            /** Creates an action menu entry. */
            createAction(options: ICalloutActionOptions): ICalloutAction;
    
            /** Creates an action menu entries. */
            createMenuEntries(options: Array<ICalloutActionMenuEntry>): Array<ICalloutActionMenu>;
    
            /** Creates a new callout. */
            createNew(options: ICalloutOptions);
    
            /** Checks if the callout id exists, before creating it. */
            createNewIfNecessary(options: ICalloutOptions): ICallout;
    
            /** Performs an action on each callout on the page. */
            forEach(callback: (callout: ICallout) => void);
    
            /** Finds the closest launch point and returns the callout associated with it. */
            getFromCalloutDescendant(descendant: HTMLElement): ICallout;
    
            /** Returns the callout from the specified launch point. */
            getFromLaunchPoint(launchPoint: HTMLElement): ICallout;
    
            /** Returns the callout for the specified launch point, null if it doesn't exist. */
            getFromLaunchPointIfExists(launchPoint: HTMLElement): ICallout;
    
            /** Returns true if at least one callout is defined on the page is opened or opening. */
            isAtLeastOneCalloutOn(): boolean;
    
            /** Returns true if at least one callout is opened on the page. */
            isAtLeastOneCalloutOpen(): boolean;
    
            /**
                * Method to ensure the core script is loaded.
                */
            init(): PromiseLike<void>;
    
            /** Removes the callout and destroys it. */
            remove(callout: ICallout): any;
    }
    
    /**
        * Callout Options
        */
    export interface ICalloutOptions {
            /** The unique id of the callout. */
            ID: string;
    
            /** The orientation of the callout. The valid options are: topBottom (default) or leftRight */
            beakOrientation?: string;
    
            /** */
            boundingBox?: Element;
    
            /** The html to be displayed in the callout. */
            content?: string;
    
            /** Element to be displayed in the callout. */
            contentElement?: Element;
    
            /** The width in pixels. Default - 350px */
            contentWidth?: number;
    
            /** The element to apply the callout to. */
            launchPoint: Element;
    
            /** Event triggered after the callout is closed. */
            onClosedCallback?(callout: ICallout);
    
            /** Event triggered before the callout is closed. */
            onClosingCallback?(callout: ICallout);
    
            /** Event triggered after the callout is shown. */
            onOpenedCallback?(callout: ICallout);
    
            /** Event triggered after the callout is rendered, but before it is positioned and shown. */
            onOpeningCallback?(callout: ICallout);
    
            /** Defines the callout opening behavior. */
            openOptions?: ICalloutOpenOptions;
    
            /** Sets the position of the callout during the opening event. */
            positionAlgorithm?(callout: ICallout);
    
            /** The title of the callout. */
            title?: string;
    }
    
    /**
        * Callout Open Options
        */
    export interface ICalloutOpenOptions {
            /** Closes the callout on blur. */
            closeCalloutOnBlur?: boolean;
    
            /** The event name. Example: 'click' */
            event?: string;
    
            /** Close button will be shown within the callout window. */
            showCloseButton?: boolean;
    }
    
    /**
        * Dialog Options
        */
    export interface IDialogOptions {
            /** A Boolean value that specifies whether the dialog can be maximized. true if the Maximize button is shown; otherwise, false. */
            allowMaximize?: boolean;
    
            /** An object that contains data that are passed to the dialog. */
            args?: any;
    
            /** A Boolean value that specifies whether the dialog platform handles dialog sizing. */
            autoSize?: boolean;
    
            /** A function pointer that specifies the return callback function. The function takes two parameters, a dialogResult of type SP.UI.DialogResult Enumeration and a returnValue of type object that contains any data returned by the dialog. */
            dialogReturnValueCallback?: (dialogResult?: number, returnVal?: any) => void;
    
            /** An integer value that specifies the height of the dialog. If height is not specified, the height of the dialog is autosized by default. If autosize is false, the dialog height is set to 576 pixels. */
            height?: number;
    
            /** An html element to display in the dialog. If both html and url are specified, url takes precedence. Either url or html must be specified. */
            html?: Element;
    
            /** A Boolean value that specifies whether the Close button appears on the dialog. */
            showClose?: boolean;
    
            /** A Boolean value that specifies whether the dialog opens in a maximized state. true the dialog opens maximized. Otherwise, the dialog is opened at the requested sized if specified; otherwise, the default size, if specified; otherwise, the autosized size. */
            showMaximized?: boolean;
    
            /** A string that contains the title of the dialog. */
            title?: string;
    
            /** A string that contains the URL of the page that appears in the dialog. If both url and html are specified, url takes precedence. Either url or html must be specified. */
            url?: string;
    
            /** An integer value that specifies the width of the dialog. If width is not specified, the width of the dialog is autosized by default. If autosize is false, the width of the dialog is set to 768 pixels. */
            width?: number;
    
            /** An integer value that specifies the x-offset of the dialog. This value works like the CSS left value. */
            x?: number;
    
            /** An integer value that specifies the y-offset of the dialog. This value works like the CSS top value. */
            y?: number;
    }
    
    /**
        * @cateogry Modal Dialog
        */
    export interface IModalDialog {
            /**
                * Closes the most recently opened modal dialog with the specified dialog result and return value.
                * @param dialogResult - One of the enumeration values that specifies the result of the modal dialog.
                * @param returnVal - The return value of the modal dialog.
                */
            commonModalDialogClose(dialogResult?: number, returnVal?: any);
    
            /**
                * Displays a modal dialog with the specified URL, options, callback function, and arguments.
                * @param url - The URL of the page to be shown in the modal dialog.
                * @param options - The options to create the modal dialog.
                * @param callback - The callback function that runs when the modal dialog is closed.
                * @param args - The arguments to the modal dialog.
                */
            commonModalDialogOpen(url: string, options?: IDialogOptions, callback?: (dialogResult?: number, returnVal?: any) => void, args?: any);
    
            /**
                * Method to ensure the core script is loaded
                */
            load(): PromiseLike<void>;
    
            /**
                * Displays a modal dialog with the specified URL, callback function, width, and height.
                * @param url - The URL of the page to be shown in the modal dialog.
                * @param callback - The callback function that runs when the modal dialog is closed.
                * @param width - The width of the modal dialog.
                * @param height - The height of the modal dialog.
                */
            OpenPopUpPage(url: string, callback?: (dialogResult?: number, returnVal?: any) => void, width?: number, height?: number);
    
            /**
                * Refreshes the parent page of the modal dialog when the dialog is closed by clicking OK.
                * @param dialogResult - The result of the modal dialog.
                */
            RefreshPage(dialogResult?: number);
    
            /**
                * Displays a modal dialog with specified dialog options.
                * @param options - The options to create the modal dialog.
                */
            showModalDialog(options: IDialogOptions): PromiseLike<IModalDialogObj>;
    
            /**
                * Displays a modal dialog using the page at the specified URL.
                * @param url - The URL of the page to be shown in the modal dialog.
                */
            ShowPopupDialog(url: string);
    
            /**
                * Displays a wait screen dialog that has a Cancel button using the specified parameters.
                * @param title - The title of the wait screen dialog.
                * @param message - The message that is shown in the wait screen dialog.
                * @param callback - The callback function that runs when the wait screen dialog is closed.
                * @param height - The height of the wait screen dialog.
                * @param width - The width of the wait screen dialog.
                */
            showWaitScreenSize(title: string, message?: string, callback?: () => void, height?: number, width?: number): PromiseLike<IModalDialogObj>;
    
            /**
                * Displays a wait screen dialog that does not have a Cancel button using the specified parameters.
                * @param title - The title of the wait screen dialog.
                * @param message - The message that is shown in the wait screen dialog.
                * @param height - The height of the wait screen dialog.
                * @param width - The width of the wait screen dialog.
                */
            showWaitScreenWithNoClose(title: string, message?: string, height?: number, width?: number): PromiseLike<IModalDialogObj>;
    }
    
    /**
        * Modal Dialog Object
        */
    export interface IModalDialogObj {
            /**
                * Auto-sizes the modal dialog.
                */
            autoSize();
    
            /**
                * Auto-sizes the modal dialog.
                * Can't find documentation on this.
                */
            autoSizeSupressScrollbar(d: any);
    
            /**
                * Closes the most recently opened modal dialog with the specified dialog result.
                * @param dialogResult - One of the enumeration values that specifies the result of the modal dialog.
                */
            close(dialogResult?: number);
    
            /** Gets the allow maximized property. */
            get_allowMaximize(): boolean;
    
            /** Gets the modal dialog arguments. */
            get_args(): any;
    
            /** Gets the closed property. */
            get_closed(): boolean;
    
            /** Gets the modal dialog element. */
            get_dialogElement(): HTMLDivElement;
    
            /** Need to find documentation. */
            get_firstTabStop(): any;
    
            /** Gets the iframe element. */
            get_frameElement(): HTMLIFrameElement;
    
            /** Gets the html property. */
            get_html(): HTMLElement;
    
            /** True if the maximized/restore button is visible. */
            get_isMaximized(): boolean;
    
            /** Need to find documentation. */
            get_lastTabStop(): any;
    
            /** Gets the return value. */
            get_returnValue(): any;
    
            /** True if the close button is visible. */
            get_showClose(): boolean;
    
            /** Gets the title property. */
            get_title(): string;
    
            /** Gets the url property. */
            get_url(): string;
    
            /**
                * Hides the dialog
                */
            hide();
    
            /**
                * Sets the return value
                */
            set_returnValue(value: any);
    
            /**
                * Sets the title
                */
            set_title(title: string);
    
            /**
                * Sets the sub title of the close dialog
                */
            setSubTitle(value: string);
    
            /**
                * Sets the title of the close dialog
                */
            setTitle(value: string);
    
            /**
                * Shows the dialog
                */
            show();
    }
    
    /**
        * Notify
        */
    export interface INotify {
            /**
                * Adds a notification to the page. By default, notifications appear for five seconds.
                * @param html - The message inside the notification.
                * @param sticky - Specifies whether the notification stays on the page until removed.
                * @returns A promise containing the ID of the notification that was added to the page.
                */
            addNotification(html: string, sticky?: boolean): PromiseLike<string>;
    
            /**
                * Method to ensure the core script is loaded
                */
            load(): PromiseLike<void>;
    
            /**
                * Removes the specified notification from the page.
                * @param id - The notification to remove from the page.
                */
            removeNotification(id: string);
    }
    
    /**
        * Script on Demand (SOD)
        */
    export interface ISOD {
            /**
                * Executes the specified function in the specified file with the optional arguments.
                * @param key - The name of the file containing the JavaScript function.
                * @param functionName - The function to execute.
                * @param args - The optional arguments to the function.
                */
            execute(key: string, functionName: string, ...args);
    
            /**
                * Ensures that the specified file that contains the specified function is loaded and then runs the specified callback function.
                * @param key - The name of the file containing the function that is executed.
                * @param functionName - The name of the function that is executed.
                * @param fn - The function that is called once functionName has finished executing.
                */
            executeFunc(key: string, functionName: string, fn: Function);
    
            /**
                * Executes the specified function if the specified event has occurred; otherwise, adds the function to the pending job queue.
                * @param func - The function to execute.
                * @param eventName - The name of the event.
                */
            executeOrDelayUntilEventNotified(func: Function, eventName: string);
    
            /**
                * Executes the specified function if the file containing it is loaded; otherwise, adds it to the pending job queue.
                * @param func - The function to execute.
                * @param depScriptFileName - The name of the file containing the function.
                */
            executeOrDelayUntilScriptLoaded(func: Function, depScriptFileName: string);
    
            /**
                * Records the event and executes any jobs in the pending job queue that are waiting on the event.
                * @param eventName - The name of the event.
                */
            notifyEventAndExecuteWaitingJobs(eventName: string);
    
            /**
                * Records that the script file is loaded and executes any jobs in the pending job queue that are waiting for the script file to be loaded.
                * @param scriptFileName - The name of the script file.
                */
            notifyScriptLoadedAndExecuteWaitingJobs(scriptFileName: string);
    
            /**
                * Registers the specified file at the specified URL.
                * @param key - The name of the file to register.
                * @param url - The relative (to the server root) URL of the file.
                */
            registerSod(key: string, url: string);
    
            /**
                * Registers the specified file as a dependency of another file.
                * @param key - The name of the file to which the other file is dependent.
                * @param dep - The name of the dependent file.
                */
            registerSodDep(key: string, dep: string);
    }
    
    /**
        * Status
        */
    export interface IStatus {
            /**
                * Adds a status message to the page.
                * @param title - The title of the status message.
                * @param html - The contents of the status message.
                * @param prepend - Specifies whether the status message will appear at the beginning of the list.
                */
            addStatus(title: string, html?: string, prepend?: boolean): PromiseLike<string>;
    
            /**
                * Appends text to an existing status message.
                * @param id - The ID of the status message to remove.
                * @param title - The title of the status message.
                * @param html - The contents of the status message.
                */
            appendStatus(id: string, title: string, html: string): PromiseLike<string>;
    
            /**
                * Method to ensure the core script is loaded
                */
            load(): PromiseLike<void>;
    
            /**
                * Removes all status messages from the page.
                * @param hide - Specifies that the status messages should be hidden.
                */
            removeAllStatus(hide?: boolean);
    
            /**
                * Removes the specified status message.
                * @param id - The ID of the status message to remove.
                */
            removeStatus(id: string);
    
            /**
                * Sets the priority color of the specified status message.
                * @param id - The ID of the status message to remove.
                * @param color - The color to set for the status message. The following table lists the values and their priority.
                */
            setStatusPriColor(id: string, color: string);
    
            /**
                * Updates the specified status message.
                * @param id - The ID of the status message to remove.
                * @param html - The contents of the status message.
                */
            updateStatus(id: string, html: string);
    }
}

declare module 'gd-sprest-bs/gd-sprest/helper/spCfg' {
    import { ContentTypeCreationInformation } from "gd-sprest-def/lib/SP/complextypes";
    import { ContentType, Field, FieldLinkProps, File, List, ListProps, UserCustomActionProps, View } from "gd-sprest-def/lib/SP/entitytypes";
    
    /**
        * Helper class for creating SharePoint Assets
        * 
        * ### Example Configuration
        * ```ts
        * let cfg = Helper.SPConfig({
        *     ListCfg: [
        *         {
        *             ListInformation: {
        *                 BaseTemplate: SPTypes.ListTemplateType.GenericList,
        *                 Description: "",
        *                 Title: "My Custom List",
        *             },
        *             ViewInformation: [
        *                 {
        *                     JSLink: "~sitecollection/style library/jslinks/mySolution.js",
        *                     ViewFields: ["ID", "Title", "InternalFieldName"],
        *                     ViewName: "All Items",
        *                     ViewQuery: "<Query></Query>"
        *                 }
        *             ]
        *         }
        *     ]
        * });
        * 
        * // Install the library
        * cfg.install();
        * 
        * // Unisntall the library
        * cfg.uninstall();
        * ```
        */
    export const SPConfig: (cfg: ISPConfigProps, webUrl?: string) => ISPConfig;
    
    /**
        * Field Information
        */
    export interface IFieldInfo {
            /** True, to allow deletion of the field. */
            allowDeletion?: boolean;
    
            /** The default value of the field. */
            defaultValue?: string;
    
            /** The field description. */
            description?: string;
    
            /** The group name. */
            group?: string;
    
            /** True for hidden fields. */
            hidden?: boolean;
    
            /** True to index the field. */
            indexed?: boolean;
    
            /** The JSLink value for the field. */
            jslink?: string;
    
            /** The internal name of the field. */
            name: string;
    
            /** Flag to determine if the field is readonly. */
            readOnly?: boolean;
    
            /** Flag to determine if the field is required. */
            required?: boolean;
    
            /** The schema definition of the field. */
            schemaXml?: string;
    
            /** Flag to make this field visible in the display form. */
            showInDisplayForm?: boolean;
    
            /** Flag to make this field visible in the edit form. */
            showInEditForm?: boolean;
    
            /** Flag to make this field visible in the list settings. */
            showInListSettings?: boolean;
    
            /** Flag to make this field visible in the new form. */
            showInNewForm?: boolean;
    
            /** Flag to make this field visible in the list views. */
            showInViewForms?: boolean;
    
            /** The field title */
            title?: string;
    
            /** The field type */
            type?: number;
    }
    
    /**
        * Calculated Field Information
        */
    export interface IFieldInfoCalculated extends IFieldInfo {
            /** The number of decimal places */
            decimals?: number;
    
            /** The field references */
            fieldRefs?: Array<string>;
    
            /** The date/time format */
            format?: number;
    
            /** The formula */
            formula?: string;
    
            /** The country/region whose currency format is being used. */
            lcid?: number;
    
            /** The number field type */
            numberType?: number;
    
            /** The result type */
            resultType?: string;
    }
    
    /**
        * Choice Field Information
        */
    export interface IFieldInfoChoice extends IFieldInfo {
            /** The choices */
            choices?: string[];
    
            /** Allow users to fill in custom values */
            fillInChoice?: boolean;
    
            /** The selection format */
            format?: number;
    
            /** Allow multiple choices */
            multi?: boolean;
    }
    
    /**
        * Currency Field Information
        */
    export interface IFieldInfoCurrency extends IFieldInfo {
            /** The number of decimal places */
            decimals?: number;
    
            /** The country/region whose currency format is being used. */
            lcid?: number;
    
            /** The maximum value */
            max?: number;
    
            /** The minimum value */
            min?: number;
    }
    
    /**
        * Date Field Information
        */
    export interface IFieldInfoDate extends IFieldInfo {
            /** The display format */
            displayFormat?: number;
    
            /** The date/time format */
            format?: number;
    }
    
    /**
        * Lookup Field Information
        */
    export interface IFieldInfoLookup extends IFieldInfo {
            /** The field reference (Required for associated lookup fields) */
            fieldRef?: string;
    
            /** Allow multiple lookup values */
            multi?: boolean;
    
            /** The list id */
            listId?: string;
    
            /** The list name */
            listName?: string;
    
            /** The lookup field relationship behavior */
            relationshipBehavior?: number;
    
            /** The lookup field to show */
            showField?: string;
    
            /** The relative web url containing the list */
            webUrl?: string;
    }
    
    /**
        * Managed Metadata
        */
    export interface IFieldInfoMMS extends IFieldInfo {
            /** The locale value */
            locale?: number;
    }
    
    /**
        * Note
        */
    export interface IFieldInfoNote extends IFieldInfo {
            /** Flag to append the comments. (This requires versioning to be enabled) */
            appendFl?: boolean;
    
            /** The note field type */
            noteType?: number;
    
            /** The number of lines */
            numberOfLines?: number;
    }
    
    /**
        * Number
        */
    export interface IFieldInfoNumber extends IFieldInfo {
            /** The number of decimal places */
            decimals?: number;
    
            /** The maximum value */
            max?: number;
    
            /** The minimum value */
            min?: number;
    
            /** The number field type */
            numberType?: number;
    }
    
    /**
        * Url
        */
    export interface IFieldInfoUrl extends IFieldInfo {
            /** The attribute to set the url as a Hyperlink or Image */
            format?: number;
    }
    
    /**
        * User
        */
    export interface IFieldInfoUser extends IFieldInfo {
            /** Allow multiple choices */
            multi?: boolean;
    
            /** The user selection mode */
            selectionMode?: number;
    
            /** The user selection scope */
            selectionScope?: number;
    }
    
    /**
        * SharePoint Configuration - Content Type Information
        */
    export interface ISPCfgContentTypeInfo extends ContentTypeCreationInformation {
            /**
                * The content type. (This value is set internally.)
                */
            ContentType?: ContentType;
    
            /**
                * The field references.
                */
            FieldRefs?: Array<string | FieldLinkProps>;
    
            /**
                * The JSLink property.
                */
            JSLink?: string;
    
            /**
                * The parent content type name, required if different then the name.
                */
            ParentName?: string;
    
            /**
                * The url of the web containing the parent content type, required if the parent content type doesn't exist in the current web.
                */
            ParentWebUrl?: string;
    
            /**
                * Event triggered after the content type is created.
                */
            onCreated?: (ct: ContentType, list?: List) => void;
    
            /**
                * Event triggered after the content type is updated.
                */
            onUpdated?: (ct: ContentType) => void;
    }
    
    /**
        * SharePoint Configuration - Custom Action Information
        */
    export interface ISPCfgCustomActionInfo {
            /**
                * Custom actions to be created at the site collection level.
                */
            Site?: Array<UserCustomActionProps>,
    
            /**
                * Custom actions to be created at the web level.
                */
            Web?: Array<UserCustomActionProps>
    }
    
    /**
        * SharePoint Configuration - Field Information
        */
    export interface ISPCfgFieldInfo extends IFieldInfo {
            /**
                * Event triggered after the field is created.
                */
            onCreated?: (field: Field, list?: List) => void;
    
            /**
                * Event triggered after the field is updated.
                */
            onUpdated?: (field: Field, list?: List) => void;
    }
    
    /**
        * SharePoint Configuration - List Information
        */
    export interface ISPCfgListInfo {
            /** The content Types. */
            ContentTypes?: Array<ISPCfgContentTypeInfo>;
    
            /** The custom list fields. */
            CustomFields?: Array<ISPCfgFieldInfo>;
    
            /** The list creation information. */
            ListInformation: ListProps;
    
            /** The title display name. */
            TitleFieldDisplayName?: string;
    
            /** The user custom actions. */
            UserCustomActions?: Array<UserCustomActionProps>;
    
            /** The view information. */
            ViewInformation?: Array<ISPCfgViewInfo>;
    
            /**
                * Event triggered after the list is created or updated.
                */
            onCreated?: (list: List) => void;
    
            /**
                * Event triggered after the list is updated.
                */
            onUpdated?: (list: List) => void;
    }
    
    /**
        * SharePoint Configuration - View Information
        */
    export interface ISPCfgViewInfo {
            /** The JSLink property. */
            JSLink?: string;
    
            /** The view fields. */
            ViewFields?: Array<string>;
    
            /** The view name. */
            ViewName: string;
    
            /** The view query. */
            ViewQuery?: string;
    
            /**
                * Event triggered after the view is created or updated.
                */
            onCreated?: (view: View, list?: List) => void;
    
            /**
                * Event triggered after the view is updated.
                */
            onUpdated?: (view: View, list?: List) => void;
    }
    
    /**
        * SharePoint Configuration - WebPart Information
        */
    export interface ISPCfgWebPartInfo {
            /** The file name of the webpart. */
            FileName: string;
    
            /** The webpart group. */
            Group?: string;
    
            /** The webpart xml */
            XML: string;
    
            /**
                * Event triggered after the webpart file is created.
                */
            onCreated?: (file: File) => void;
    
            /**
                * Event triggered after the webpart file is updated.
                */
            onUpdated?: (file: File) => void;
    }
    
    /**
        * SharePoint Configuration Methods
        */
    export interface ISPConfig {
            /** The configuration. */
            _configuration: ISPConfigProps;
    
            /**
                * Method to install the configuration
                */
            install(): PromiseLike<void>;
    
            /**
                * Method to install the configuration
                */
            uninstall(): PromiseLike<void>;
    }
    
    /**
        * SharePoint Configuration - Properties
        */
    export interface ISPConfigProps {
            /** The content Types. */
            ContentTypes?: Array<ISPCfgContentTypeInfo>;
    
            /** The custom action configuration. */
            CustomActionCfg?: ISPCfgCustomActionInfo;
    
            /** The site column configuration. */
            Fields?: Array<ISPCfgFieldInfo>;
    
            /** The list configuration. */
            ListCfg?: Array<ISPCfgListInfo>;
    
            /** The web part configuration. */
            WebPartCfg?: Array<ISPCfgWebPartInfo>;
    }
    
    /**
        * SharePoint Configuration - Types
        */
    export interface ISPConfigTypes {
            /** Fields */
            Fields: number;
    
            /** Content Types */
            ContentTypes: number;
    
            /** Lists */
            Lists: number;
    
            /** Site User Custom Actions */
            SiteUserCustomActions: number;
    
            /** Web User Custom Actions */
            WebUserCustomActions: number;
    }
}

declare module 'gd-sprest-bs/gd-sprest/helper/spCfgTypes' {
    /**
        * SharePoint Configuration Field Types
        */
    export const SPCfgFieldType: ISPCfgFieldType;
    
    /**
        * SharePoint Configuration Types
        * The value determines the order to install the object type.
        */
    export const SPCfgType: ISPCfgType;
    
    /** The field types */
    export type ISPCfgFieldType = {
            Boolean: number;
            Calculated: number;
            Choice: number;
            Currency: number;
            Date: number;
            Geolocation: number;
            Lookup: number;
            MMS: number;
            Note: number;
            Number: number;
            Text: number;
            Url: number;
            User: number;
    }
    
    /** The configuration types */
    export type ISPCfgType = {
            Fields: number;
            ContentTypes: number;
            Lists: number;
            SiteUserCustomActions: number;
            WebParts: number;
            WebUserCustomActions: number;
    }
}

declare module 'gd-sprest-bs/gd-sprest/helper/taxonomy' {
    
    /**
        * Helper class for getting data from the Managed Metadata Service.
        */
    export const Taxonomy: ITaxonomy;
    
    /**
     * Taxonomy Helper
     */
    export interface ITaxonomy {
            /**
                * Method to find a term by id
                * @param term - The term
                * @param termId - The term id to search for
                */
            findById(term: ITerm, termId: string): ITerm;
    
            /**
                * Method to find a term by name
                * @param term - The term
                * @param termName - The term name to search for
                */
            findByName(term: ITerm, termName: string): ITerm;
    
            /**
                * Method to get the term group
                * @param groupName - The group name.
                */
            getTermGroup(groupName?: string): PromiseLike<{ context: any, termGroup: any }>;
    
            /**
                * Method to get the term groups
                */
            getTermGroups(): PromiseLike<Array<ITermGroupInfo>>;
    
            /**
                * Method to get the term sets for a group
                * @param groupName - The group name.
                */
            getTermSets(groupName: string): PromiseLike<Array<ITermSetInfo>>;
    
            /**
                * Method to get the term sets for the site collection
                */
            getTermSetsFromDefaultSC(): PromiseLike<Array<ITermSetInfo>>;
    
            /**
                * Method to get the terms
                * @param termSet - The term set.
                * @param termSetTerms - The term set terms.
                */
            getTerms(termSet, termSetTerms): Array<ITermInfo>;
    
            /**
                * Method to get the terms by id
                * @param termStoreId - The term store guid
                * @param termSetId - The term set guid
                */
            getTermsById(termStoreId: string, termSetId: string): PromiseLike<Array<ITermInfo>>;
    
            /**
                * Method to get the term set by id
                * @param termStoreId - The term store guid
                * @param termSetId - The term set guid
                */
            getTermSetById(termStoreId: string, termSetId: string): PromiseLike<ITerm>;
    
            /**
                * Method to get the terms from the default site collection
                * @param termSetName - The term set name
                */
            getTermsFromDefaultSC(termSetName: string): PromiseLike<Array<ITermInfo>>;
    
            /**
                * Method to get the term set from the default site collection
                */
            getTermSetFromDefaultSC(termSetName: string): PromiseLike<ITerm>;
    
            /**
                * Method to get a terms from a specified group
                */
            getTermsByGroupName(termSetName: string, groupName: string): PromiseLike<Array<ITermInfo>>;
    
            /**
                * Method to get the term set from the default site collection
                */
            getTermSetByGroupName(termSetName: string, groupName: string): PromiseLike<ITerm>;
    
            /**
                * Method to ensure the taxonomy script references are loaded.
                */
            loadScripts(): PromiseLike<void>;
    
            /**
                * Method to convert a term set into an array of terms
                * @param term - The term
                */
            toArray(term: ITerm | ITermInfo): Array<ITermInfo>;
    
            /**
                * Method to convert a term to a field value
                * @param term - The term
                */
            toFieldValue(term: ITerm | ITermInfo): any;
    
            /**
                * Method to convert a collection of terms to a field value
                * @param terms - The terms
                */
            toFieldMultiValue(terms: Array<ITerm | ITermInfo>): any;
    
            /**
                * Method to convert an array of terms into a term set
                * @param terms - The terms
                */
            toObject(terms: Array<ITermInfo>): ITerm;
    }
    
    
    /**
        * Taxonomy Term
        */
    export interface ITerm {
            /** The root term information */
            info: ITermInfo;
    
            /** The parent term */
            parent?: ITerm;
    }
    
    /**
        * Taxonomy Term Group Information
        */
    export interface ITermGroupInfo {
            /** The term description */
            description: string;
    
            /** The term id */
            id: string;
    
            /** The term name */
            name: string;
    }
    
    /**
        * Taxonomy Term Information
        */
    export interface ITermInfo {
            /** The term description */
            description: string;
    
            /** The term id */
            id: string;
    
            /** The term name */
            name: string;
    
            /** The parent term */
            parent?: ITerm;
    
            /** The term path */
            path: Array<string>;
    
            /** The term path as a string */
            pathAsString: string;
    
            /** The term custom properties */
            props: { [key: string]: string; };
    }
    
    /**
        * Taxonomy Term Set Information
        */
    export interface ITermSetInfo {
            /** The term description */
            description: string;
    
            /** The term id */
            id: string;
    
            /** The term name */
            name: string;
    
            /** The term custom properties */
            props: { [key: string]: string; };
    }
}

declare module 'gd-sprest-bs/gd-sprest/helper/webpart' {
    /**
        * The content editor webpart properties
        */
    export interface IContentEditorWebPart {
            /** The webpart description. */
            description?: string;
    
            /** The webpart content. */
            content?: string;
    
            /** The webpart content link. */
            contentLink?: string;
    
            /** The webpart frame type. (BorderOnly, Default, None, Standard or TitleBarOnly) */
            frameType?: string;
    
            /** The webpart index. */
            index?: number;
    
            /** The webpart title. */
            title?: string;
    
            /** The webpart zone. */
            zone?: string;
    }
    
    /**
        * The script editor webpart properties
        */
    export interface IScriptEditorWebPart {
            /** The webpart description. */
            description?: string;
    
            /** The webpart chrome type. (BorderOnly, Default, None, TitleAndBorder or TitleOnly) */
            chromeType?: string;
    
            /** The webpart content. */
            content: string;
    
            /** The webpart index. */
            index?: number;
    
            /** The webpart title. */
            title?: string;
    
            /** The webpart zone. */
            zone?: string;
    }
    
    /**
        * Helper class for creating custom webparts.
        */
    export const WebPart: IWebPart;
    
    /**
        * Web Part
        */
    export interface IWebPart {
            /**
                * Creates an instance of a webpart.
                * @param props - The webpart properties.
                */
            new(props: IWebPartProps);
    
            /**
                * Creates an instance of a webpart.
                * @param props - The webpart properties.
                */
            create(props: IWebPartProps);
    
            /**
                * Generates the XML for a content editor webpart
                * @param props - The content editor webpart properties
                */
            generateContentEditorXML(props: IContentEditorWebPart);
    
            /**
                * Generates the XML for a script editor webpart
                * @param props - The script editor webpart properties
                */
            generateScriptEditorXML(props: IScriptEditorWebPart);
    
            /**
                * Determines if the page is being edited.
                */
            isEditMode(): boolean;
    }
    
    /**
        * The webpart configuration
        */
    export interface IWebPartCfg {
            /** The webpart id */
            WebPartId?: string;
    }
    
    /**
        * The webpart information
        */
    export interface IWebPartInfo {
            /** The configuration */
            cfg: IWebPartCfg;
    
            /** The element to render the webpart to */
            el: HTMLElement;
    
            /** The webpart id */
            wpId: string;
    }
    
    /**
        * The webpart properties
        */
    export interface IWebPartProps {
            /** The optional configuration element id */
            cfgElementId?: string;
    
            /** The optional help link properties */
            helpProps?: {
                    /** The link title */
                    title?: string;
    
                    /** The link url */
                    url: string;
            };
    
            /** The post render event */
            onPostRender?: (wp: IWebPartInfo) => void;
    
            /** The render event triggered when the page is in 'Display' mode */
            onRenderDisplay?: (wp: IWebPartInfo) => any;
    
            /** The render event triggered when the page is in 'Edit' mode */
            onRenderEdit?: (wp: IWebPartInfo) => any;
    
            /** The target element id to render the webpart to */
            elementId: string;
    }
}

declare module 'gd-sprest-bs/gd-sprest/sptypes/sptypes' {
    import { BasePermissions } from "gd-sprest-def/lib/SP/complextypes";
    
    /**
        * Base Permission Types
        */
    export type IBasePermissionTypes = {
            AddAndCustomizePages: number,
            AddDelPrivateWebParts: number,
            AddListItems: number,
            AnonymousSearchAccessList: number,
            AnonymousSearchAccessWebLists: number,
            ApplyStyleSheets: number,
            ApplyThemeAndBorder: number,
            ApproveItems: number,
            BrowseDirectories: number,
            BrowseUserInfo: number,
            CancelCheckout: number,
            CreateAlerts: number,
            CreateGroups: number,
            CreateSSCSite: number,
            DeleteListItems: number,
            DeleteVersions: number,
            EditListItems: number,
            EditMyUserInfo: number,
            EmptyMask: number,
            EnumeratePermissions: number,
            FullMask: number,
            ManageAlerts: number,
            ManageLists: number,
            ManagePermissions: number,
            ManagePersonalViews: number,
            ManageSubwebs: number,
            ManageWeb: number,
            Open: number,
            OpenItems: number,
            UpdatePersonalWebParts: number,
            UseClientIntegration: number,
            UseRemoteAPIs: number,
            ViewFormPages: number,
            ViewListItems: number,
            ViewPages: number,
            ViewUsageData: number,
            ViewVersions: number
    }
    
    /**
        * Calendar Types
        */
    export type ICalendarType = {
            /** Gregorian (localized) */
            Gregorian: number,
    
            /** Japanese Emperor Era */
            JapaneseEmperorEra: number,
    
            /** Taiwan Calendar */
            TaiwanCalendar: number,
    
            /** Korean Tangun Era */
            KoreanTangunEra: number,
    
            /** Hijri (Arabic Lunar) */
            Hijri: number,
    
            /** Thai */
            Thai: number,
    
            /** Hebrew Lunar */
            HebrewLunar: number,
    
            /** Gregorian (Middle East French) */
            GregorianMiddleEastFrench: number,
    
            /** Gregorian (Arabic) */
            GregorianArabic: number,
    
            /** Gregorian (Transliterated English) */
            GregorianTransliteratedEnglish: number,
    
            /** Gregorian (Transliterated French) */
            GregorianTransliteratedFrench: number,
    
            /** Korean and Japanese Lunar */
            KoreanandJapaneseLunar: number,
    
            /** Chinese Lunar */
            ChineseLunar: number,
    
            /** Saka Era */
            SakaEra: number
    }
    
    /**
        * Check In Types
        */
    export type ICheckInType = {
            /** Minor Check In */
            MinorCheckIn: number,
    
            /** Major Check In */
            MajorCheckIn: number,
    
            /** Overwrite Check In */
            OverwriteCheckIn: number
    };
    
    /**
        * Check Out Types
        */
    export type ICheckOutType = {
            /** Online */
            Online: number,
    
            /** Offline */
            Offline: number,
    
            /** None */
            None: number
    };
    
    /**
        * Choice Format Types
        */
    export type IChoiceFormatType = {
            /** Dropdown */
            Dropdown: number,
    
            /** Radio buttons */
            RadioButtons: number
    };
    
    /**
        * Client Template Utility
        */
    export type IClientTemplateUtility = {
            /** User Lookup Delimiter */
            UserLookupDelimitString: string,
    
            /** Multi-User Value Delimiter */
            UserMultiValueDelimitString: string
    }
    
    /**
        * Control Modes
        */
    export type IControlMode = {
            /** A placeholder value in the export typeeration indicating that it has no valid display mode from one of the other export typeeration values. */
            Invalid: number,
    
            /** Specifies that the control is in display mode. */
            Display: number,
    
            /** Specifies that the control is in edit mode. */
            Edit: number,
    
            /** Specifies that the control is in new mode. */
            New: number,
    
            /** Specifies that the control is in view mode. */
            View: number
    };
    
    /**
        * Date Format
        */
    export type IDateFormat = {
            /** Displays only the date. */
            DateOnly: number,
    
            /** Displays the date and time. */
            DateTime: number
    }
    
    /**
        * Draft Visibility Types
        */
    export type IDraftVisibilityType = {
            /** export typeeration whose values specify that the minimum permission is approver. */
            Approver: number,
    
            /** export typeeration whose values specify that the minimum permission is author. */
            Author: number,
    
            /** export typeeration whose values specify that the minimum permission is reader. */
            Reader: number
    };
    
    /**
        * Event Receiver Types
        */
    export type IEventReceiverType = {
            /** Event that occurs before an item has been added. */
            ItemAdding: number,
    
            /** Event that occurs before an item is updated. */
            ItemUpdating: number,
    
            /** Event that occurs before an item is deleted. */
            ItemDeleting: number,
    
            /** Event that occurs before an item has been checked in. */
            ItemCheckingIn: number,
    
            /** Event that occurs before an item is checked out. */
            ItemCheckingOut: number,
    
            /** Event that occurs before an item is unchecked out. */
            ItemUncheckingOut: number,
    
            /** Event that occurs before an attachment has been added to an item. */
            ItemAttachmentAdding: number,
    
            /** Event that occurs before an attachment has been removed from the item. */
            ItemAttachmentDeleting: number,
    
            /** Event that occurs before a file is moved. */
            ItemFileMoving: number,
    
            /** Event that occurs before a document version is deleted. */
            ItemVersionDeleting: number,
    
            /** Event that occurs before a field is added to a list. */
            FieldAdding: number,
    
            /** Event that occurs before a field is updated. */
            FieldUpdating: number,
    
            /** Event that occurs before a field is removed from a list. */
            FieldDeleting: number,
    
            /** Event that occurs before a list is created. */
            ListAdding: number,
    
            /** Event that occurs before a list is deleted. */
            ListDeleting: number,
    
            /** Event that occurs before a site collection is deleted. */
            SiteDeleting: number,
    
            /** Event that occurs before a site is deleted. */
            WebDeleting: number,
    
            /** Event that occurs before a site URL has been changed. */
            WebMoving: number,
    
            /** Event that occurs before a new site is created. */
            WebAdding: number,
    
            /** Event that occurs before a security group is added. */
            GroupAdding: number,
    
            /** Event that occurs before a security group is updated. */
            GroupUpdating: number,
    
            /** Event that occurs before a security group is deleted. */
            GroupDeleting: number,
    
            /** Event that occurs before a user is added to a security group. */
            GroupUserAdding: number,
    
            /** Event that occurs before a user is deleted from a security group. */
            GroupUserDeleting: number,
    
            /** Event that occurs before a role definition is added. */
            RoleDefinitionAdding: number,
    
            /** Event that occurs before a role definition is updated. */
            RoleDefinitionUpdating: number,
    
            /** Event that occurs before a role definition is deleted. */
            RoleDefinitionDeleting: number,
    
            /** Event that occurs before a role assignment is added. */
            RoleAssignmentAdding: number,
    
            /** Event that occurs before a role assignment is deleted. */
            RoleAssignmentDeleting: number,
    
            /** Event that occurs before an inheritance is broken. */
            InheritanceBreaking: number,
    
            /** Event that occurs before an inheritance is restored. */
            InheritanceResetting: number,
    
            /** Event that occurs before a workflow starts running. */
            WorkflowStarting: number,
    
            /** Event that occurs after an item has been added. */
            ItemAdded: number,
    
            /** Event that occurs after an item has been updated. */
            ItemUpdated: number,
    
            /** Event that occurs after an item has been deleted. */
            ItemDeleted: number,
    
            /** Event that occurs after an item has been checked in. */
            ItemCheckedIn: number,
    
            /** Event that occurs after an item has been checked out. */
            ItemCheckedOut: number,
    
            /** Event that occurs after an item has been unchecked out. */
            ItemUncheckedOut: number,
    
            /** Event that occurs after an attachment has been added to the item. */
            ItemAttachmentAdded: number,
    
            /** Event that occurs after an attachment has been removed from the item. */
            ItemAttachmentDeleted: number,
    
            /** Event that occurs after a file has been moved. */
            ItemFileMoved: number,
    
            /** Event that occurs after a file is transformed from one type to another. */
            ItemFileConverted: number,
    
            /** Event that occurs after a document version is deleted. */
            ItemVersionDeleted: number,
    
            /** Event that occurs after a field has been added. */
            FieldAdded: number,
    
            /** Event that occurs after a field has been updated. */
            FieldUpdated: number,
    
            /** Event that occurs after a field has been removed. */
            FieldDeleted: number,
    
            /** Event that occurs after a list has been created. */
            ListAdded: number,
    
            /** Event that occurs after a list has been deleted. */
            ListDeleted: number,
    
            /** Event that occurs after a site collection has been deleted. */
            SiteDeleted: number,
    
            /** Event that occurs after a site has been deleted. */
            WebDeleted: number,
    
            /** Event that occurs after a site URL has been changed. */
            WebMoved: number,
    
            /** Event that occurs after a new site has been created, but before that new site is provisioned. */
            WebProvisioned: number,
    
            /** Event that occurs happens after a security group is added. */
            GroupAdded: number,
    
            /** Event that occurs after a security group is updated. */
            GroupUpdated: number,
    
            /** Event that occurs after a security group is deleted. */
            GroupDeleted: number,
    
            /** Event that occurs after a user is added to a security group. */
            GroupUserAdded: number,
    
            /** Event that occurs after a user is deleted from a security group. */
            GroupUserDeleted: number,
    
            /** Event that occurs after a role definition is added. */
            RoleDefinitionAdded: number,
    
            /** Event that occurs after a role definition is updated. */
            RoleDefinitionUpdated: number,
    
            /** Event that occurs after a role definition is deleted. */
            RoleDefinitionDeleted: number,
    
            /** Event that occurs after a role assignment is added. */
            RoleAssignmentAdded: number,
    
            /** Event that occurs after a role definition is deleted. */
            RoleAssignmentDeleted: number,
    
            /** Event that occurs after an inheritance is broken. */
            InheritanceBroken: number,
    
            /** Event that occurs after an inheritance is restored. */
            InheritanceReset: number,
    
            /** Event that occurs after a workflow has started running. */
            WorkflowStarted: number,
    
            /** Event that occurs after a workflow has been postponed. */
            WorkflowPostponed: number,
    
            /** Event that occurs after a workflow has completed running. */
            WorkflowCompleted: number,
    
            /** Event that occurs when an instance of an external content type has been added. */
            EntityInstanceAdded: number,
    
            /** Event that occurs when an instance of an external content type has been updated. */
            EntityInstanceUpdated: number,
    
            /** Event that occurs when an instance of an external content type has been deleted. */
            EntityInstanceDeleted: number,
    
            /** Event that occurs after an app is installed. */
            AppInstalled: number,
    
            /** Event that occurs after an app is upgraded. */
            AppUpgraded: number,
    
            /** Event that occurs before an app is uninstalled. */
            AppUninstalling: number,
    
            /** Event that occurs after a list receives an e-mail message. */
            EmailReceived: number,
    
            /** Identifies workflow event receivers, and is therefore not a true event type. */
            ContextEvent: number,
    };
    
    /**
        * Event Receiver Synchronization Types
        */
    export type IEventReceiverSynchronizationType = {
            /** Event to be triggered asynchronously. */
            Asynchronous: number,
    
            /** Event to be triggered synchronously. */
            Synchronization: number
    };
    
    /**
        * Field Index Status
        */
    export type IFieldIndexStatus = {
            None: number,
            Indexed: number,
            Enabling: number,
            Disabling: number
    }
    
    /**
        * Field Note Types
        */
    export type IFieldNoteType = {
            /** Enhance Rich Text */
            EnhancedRichText: number,
    
            /** Rich Text */
            RichText: number,
    
            /** Text Only */
            TextOnly: number;
    }
    
    /**
        * Field Number Type
        */
    export type IFieldNumberType = {
            /** Decimal */
            Decimal: number,
    
            /** Integer */
            Integer: number,
    
            /** Percentage */
            Percentage: number,
    }
    
    /**
        * Field Result Types
        */
    export type IFieldResultType = {
            /** Boolean */
            Boolean: string,
    
            /** Currency */
            Currency: string,
    
            /** Date Only */
            DateOnly: string,
    
            /** Date & Time */
            DateTime: string,
    
            /** Number */
            Number: string,
    
            /** Text */
            Text: string
    }
    
    /**
        * Field Types
        */
    export type IFieldType = {
            /** Specifies that the field indicates whether a meeting in a calendar list is an all-day event. */
            AllDayEvent: number,
    
            /** Specifies that the field indicates whether the list item has attachments. */
            Attachments: number,
    
            /** Specifies that the field contains a Boolean value. */
            Boolean: number,
    
            /** Specifies that the field is a calculated field. */
            Calculated: number,
    
            /** Specifies that the field contains a single value from a set of specified values. */
            Choice: number,
    
            /** Specifies that the field is a computed field. */
            Computed: number,
    
            /** Specifies that the field contains a content type identifier as a value. */
            ContentTypeId: number,
    
            /** Specifies that the field contains a monotonically increasing integer. */
            Counter: number,
    
            /** Specifies that the field contains a link between projects in a Meeting Workspace site. */
            CrossProjectLink: number,
    
            /** Specifies that the field contains a currency value. */
            Currency: number,
    
            /** Specifies that the field contains a date and time value or a date-only value. */
            DateTime: number,
    
            /** Specifies that the type of the field was set to an invalid value. */
            Error: number,
    
            /** Specifies that the field contains the leaf name of a document as a value. */
            File: number,
    
            /** Specifies that the field contains geographical location values. */
            Geolocation: number,
    
            /** Specifies that the field contains rating scale values for a survey list. */
            GridChoice: number,
    
            /** Specifies that the field contains a GUID value. */
            Guid: number,
    
            /** Specifies that the field contains an integer value. */
            Integer: number,
    
            /** Must not be used. */
            Invalid: number,
    
            /** Specifies that the field is a lookup field. */
            Lookup: number,
    
            /** Must not be used. */
            MaxItems: number,
    
            /** Specifies that the field indicates moderation status. */
            ModStat: number,
    
            /** Specifies that the field contains one or more values from a set of specified values. */
            MultiChoice: number,
    
            /** Specifies that the field contains multiple lines of text. */
            Note: number,
    
            /** Specifies that the field contains a floating-point number value. */
            Number: number,
    
            /** Specifies that the field separates questions in a survey list onto multiple pages. */
            PageSeparator: number,
    
            /** Specifies that the field indicates whether a meeting in a calendar list recurs. */
            Recurrence: number,
    
            /** Specifies that the field contains a single line of text. */
            Text: number,
    
            /** Specifies that the field indicates the position of a discussion item in a threaded view of a discussion board. */
            ThreadIndex: number,
    
            /** Specifies that the field indicates the thread for a discussion item in a threaded view of a discussion board. */
            Threading: number,
    
            /** Specifies that the field contains a URI and an optional description of the URI. */
            URL: number,
    
            /** Specifies that the field contains one or more users and groups as values. */
            User: number,
    
            /** Specifies that the field contains the most recent event in a workflow instance. */
            WorkflowEventType: number,
    
            /** Specifies that the field indicates the status of a workflow instance on a list item. */
            WorkflowStatus: number
    };
    
    /**
        * Field User Selection Types
        */
    export type IFieldUserSelectionType = {
            /** People only. */
            PeopleOnly: number,
    
            /** People and groups. */
            PeopleAndGroups: number
    }
    
    /**
        * File Level Types
        */
    export type IFileLevelType = {
            /** The document is published. */
            Published: number,
    
            /** The document is a draft. */
            Draft: number,
    
            /** The document is checked out. */
            Checkout: number
    }
    
    /**
        * File Template Types
     */
    export type IFileTemplateType = {
            /** export typeeration whose value specifies default form template. */
            FormPage: number,
    
            /** export typeeration whose value specifies default view template. */
            StandardPage: number,
    
            /** export typeeration whose value specifies default wiki template. */
            WikiPage: number
    };
    
    /**
        * Friendly Date Format
        */
    export type IFriendlyDateFormat = {
            /** Unspecified */
            Unspecified: number,
    
            /** Disabled (standard absolute) */
            Disabled: number,
    
            /** Relative (standard friendly relative) */
            Relative: number
    }
    
    /**
        * Base Permission Result
        */
    export interface IGetUserEffectivePermissionsResult {
            GetUserEffectivePermissions: BasePermissions
    }
    
    /**
        * List Template Types
     */
    export type IListTemplateType = {
            /** Access Request List */
            AccessRequest: number,
    
            /** Administrator Tasks */
            AdminTasks: number,
    
            /** Agenda (Meeting) */
            Agenda: number,
    
            /** App Data Catalog */
            AppDataCatalog: number,
    
            /** Announcements */
            Announcements: number,
    
            /** Call Track */
            CallTrack: number,
    
            /** Categories (Blog) */
            Categories: number,
    
            /** Circulation */
            Circulation: number,
    
            /** Comments (Blog) */
            Comments: number,
    
            /** Contacts */
            Contacts: number,
    
            /** Custom grid for a list */
            CustomGrid: number,
    
            /** Data connection library for sharing information about external data connections */
            DataConnectionLibrary: number,
    
            /** Data sources for a site */
            DataSources: number,
    
            /** Decisions (Meeting) */
            Decision: number,
    
            /** Design Catalog */
            DesignCatalog: number,
    
            /** Draft Apps library in Developer Site */
            DeveloperSiteDraftApps: number,
    
            /** Discussion board */
            DiscussionBoard: number,
    
            /** Document library */
            DocumentLibrary: number,
    
            /** Calendar */
            Events: number,
    
            /** External */
            ExternalList: number,
    
            /** Facility */
            Facility: number,
    
            /** Project Tasks */
            GanttTasks: number,
    
            /** Custom list */
            GenericList: number,
    
            /** Health Reports */
            HealthReports: number,
    
            /** Health Rules */
            HealthRules: number,
    
            /** Help Library */
            HelpLibrary: number,
    
            /** Holidays */
            Holidays: number,
    
            /** Workspace Pages (Meeting) */
            HomePageLibrary: number,
    
            /** IME (Input Method Editor) Dictionary */
            IMEDic: number,
    
            /** Issue tracking */
            IssueTracking: number,
    
            /** Links */
            Links: number,
    
            /** List Template gallery */
            ListTemplateCatalog: number,
    
            /** Master Page gallery */
            MasterPageCatalog: number,
    
            /** Maintenance Logs Library */
            MaintenanceLogs: number,
    
            /** Objectives (Meeting) */
            MeetingObjective: number,
    
            /** Meeting Series (Meeting) */
            Meetings: number,
    
            /** Attendees (Meeting) */
            MeetingUser: number,
    
            /** My Site Document Library */
            MySiteDocumentLibrary: number,
    
            /** Posts (Blog) */
            Posts: number,
    
            /** No Code Public Workflow */
            NoCodePublic: number,
    
            /** No Code Workflows */
            NoCodeWorkflows: number,
    
            /** Picture library */
            PictureLibrary: number,
    
            /** Solutions */
            SolutionCatalog: number,
    
            /** Survey */
            Survey: number,
    
            /** Tasks */
            Tasks: number,
    
            /** Tasks with Timeline and Hierarchy */
            TasksWithTimelineAndHierarchy: number,
    
            /** Text Box (Meeting) */
            TextBox: number,
    
            /** Themes */
            ThemeCatalog: number,
    
            /** Things To Bring (Meeting) */
            ThingsToBring: number,
    
            /** Timecard */
            Timecard: number,
    
            /** User Information */
            UserInformation: number,
    
            /** Wiki Page Library */
            WebPageLibrary: number,
    
            /** Web Part gallery */
            WebPartCatalog: number,
    
            /** Site template gallery */
            WebTemplateCatalog: number,
    
            /** Whereabouts */
            Whereabouts: number,
    
            /** Workflow History */
            WorkflowHistory: number,
    
            /** Custom Workflow Process */
            WorkflowProcess: number,
    
            /** XML Form library */
            XMLForm: number
    };
    
    /**
        * Locale LCID Types
        */
    export type ILocaleLCIDType = {
            Afrikaans: number,
            Albanian: number,
            ArabicAlgeria: number,
            ArabicBahrain: number,
            ArabicEgypt: number,
            ArabicIraq: number,
            ArabicJordan: number,
            ArabicLebanon: number,
            ArabicLibya: number,
            ArabicMorocco: number,
            ArabicOman: number,
            ArabicQatar: number,
            ArabicSaudiArabia: number,
            ArabicSyria: number,
            ArabicTunisia: number,
            ArabicUAE: number,
            ArabicYemen: number,
            Armenian: number,
            AzeriCyrillic: number,
            AzeriLatin: number,
            Basque: number,
            Belarusian: number,
            Bulgarian: number,
            Catalan: number,
            ChineseHongKongSAR: number,
            ChineseMacaoSAR: number,
            ChinesePRC: number,
            ChineseSingapore: number,
            ChineseTaiwan: number,
            CroatianCroatia: number,
            Czech: number,
            Danish: number,
            Divehi: number,
            DutchBelgium: number,
            DutchNetherlands: number,
            EnglishAustralia: number,
            EnglishBelize: number,
            EnglishCanada: number,
            EnglishCaribbean: number,
            EnglishIreland: number,
            EnglishJamaica: number,
            EnglishNewZealand: number,
            EnglishPhilippines: number,
            EnglishSouthAfrica: number,
            EnglishTrinidad: number,
            EnglishUnitedKingdom: number,
            EnglishUnitedStates: number,
            EnglishZimbabwe: number,
            Estonian: number,
            Faeroese: number,
            Finnish: number,
            FrenchBelgium: number,
            FrenchCanada: number,
            FrenchFrance: number,
            FrenchLuxembourg: number,
            FrenchMonaco: number,
            FrenchSwitzerland: number,
            Galician: number,
            Georgian: number,
            GermanAustria: number,
            GermanGermany: number,
            GermanLiechtenstein: number,
            GermanLuxembourg: number,
            GermanSwitzerland: number,
            Greek: number,
            Gujarati: number,
            HebrewIsrael: number,
            HindiIndia: number,
            Hungarian: number,
            Icelandic: number,
            Indonesian: number,
            ItalianItaly: number,
            ItalianSwitzerland: number,
            Japanese: number,
            Kannada: number,
            Kazakh: number,
            Konkani: number,
            Korean: number,
            KyrgyzCyrillic: number,
            Latvian: number,
            Lithuanian: number,
            MacedonianFYROM: number,
            Malay: number,
            MalayBruneiDarussalam: number,
            Marathi: number,
            MongolianCyrillic: number,
            NorwegianBokmal: number,
            NorwegianNynorsk: number,
            PersianIran: number,
            Polish: number,
            PortugueseBrazil: number,
            PortuguesePortugal: number,
            Punjabi: number,
            Romanian: number,
            Russian: number,
            Sanskrit: number,
            SerbianCyrillic: number,
            SerbianLatin: number,
            Slovak: number,
            Slovenian: number,
            SpanishArgentina: number,
            SpanishBolivia: number,
            SpanishChile: number,
            SpanishColombia: number,
            SpanishCostaRica: number,
            SpanishDominicanRepublic: number,
            SpanishEcuador: number,
            SpanishElSalvador: number,
            SpanishGuatemala: number,
            SpanishHonduras: number,
            SpanishMexico: number,
            SpanishNicaragua: number,
            SpanishPanama: number,
            SpanishParaguay: number,
            SpanishPeru: number,
            SpanishPuertoRico: number,
            SpanishSpain: number,
            SpanishUruguay: number,
            SpanishVenezuela: number,
            Swahili: number,
            Swedish: number,
            SwedishFinland: number,
            Syriac: number,
            Tamil: number,
            Tatar: number,
            Telugu: number,
            ThaiThailand: number,
            Turkish: number,
            Ukrainian: number,
            UrduPakistan: number,
            UzbekCyrillic: number,
            UzbekLatin: number,
            Vietnamese: number
    }
    
    /**
        * Modal Dialog Results
        */
    export type ModalDialogResult = {
            Invalid: number;
            Cancel: number;
            OK: number;
    }
    
    /**
        * Node Types
        */
    export type INodeType = {
            /** Specifies no node types. */
            None: number;
    
            /** Specifies any type of SPWeb site. */
            Area: number;
    
            /** Specifies a List item in the Pages list. */
            Page: number;
    
            /** Specifies a Microsoft SharePoint Foundation list (SPList). */
            List: number;
    
            /** Specifies a Microsoft SharePoint Foundation list item (SPListItem). */
            ListItem: number;
    
            /** Specifies a CMS Page Layout. */
            PageLayout: number;
    
            /**  Specifies a navigation heading. */
            Heading: number;
    
            /** Specifies an authored link that references a page. */
            AuthoredLinkToPage: number;
    
            /** Specifies an authored link that references a Web site or area. */
            AuthoredLinkToWeb: number;
    
            /** Specifies a generic authored link. */
            AuthoredLinkPlain: number;
    
            /** Specifies a custom node type that may be useful for extensibility purposes. */
            Custom: number;
    
            /** Represents an error specific to node types. */
            Error: number;
    
            /** Specifies any type of authored link. */
            AuthoredLink: number;
    
            /** Specifies a combination of Area, Page, Heading and AuthoredLink. Navigation uses this value to determine which node types to return by default. */
            Default: number;
    
            /** Specifies all node types, including Area, Page, List, ListItem, PageLayout, Heading, AuthoredLink, and Custom. */
            All: number;
    }
    
    /**
        * Page Types
        */
    export type IPageType = {
            /** export typeeration whose values specify a page that is the default view for a list. */
            DefaultView: number,
    
            /** export typeeration whose values specify a page suitable for display within a dialog box on a client computer. */
            DialogView: number,
    
            /** export typeeration whose values specify a list form for displaying a list item. */
            DisplayForm: number,
    
            /** export typeeration whose values specify a list form for displaying a list item, suitable for display within a dialog box on a client computer. */
            DisplayFormDialog: number,
    
            /** export typeeration whose values specify a list form for editing a list item. */
            EditForm: number,
    
            /** export typeeration whose values specify a list form for editing a list item, suitable for display within a dialog box on a client computer. */
            EditFormDialog: number,
    
            /** export typeeration whose values specify a page that does not correspond to a list view or a list form. */
            Invalid: number,
    
            /** export typeeration whose values specify a list form for creating a new list item. */
            NewForm: number,
    
            /** export typeeration whose values specify a list form for creating a new list item, suitable for display within a dialog box on a client computer. */
            NewFormDialog: number,
    
            /** export typeeration whose values specify a page that is a list view and is not the default view for a list. */
            NormalView: number,
    
            /** export typeeration whose values specify the total number of valid page types. */
            Page_MAXITEMS: number,
    
            /** export typeeration whose values specify a list form for displaying or editing a list item and represented by a form template (.xsn) file. */
            SolutionForm: number,
    
            /** export typeeration whose values specify a page that is a list view. */
            View: number
    };
    
    /**
        * Personalization Scope
        */
    export type IPersonalizationScope = {
            Shared: number,
            User: number
    };
    
    /**
        * Personal Site Capabilities
        */
    export type IPersonalSiteCapabilities = {
            Education: number,
            Guest: number,
            MyTasksDashboard: number,
            None: number,
            Profile: number,
            Social: number,
            Storage: number
    };
    
    /**
        * Principal Sources
        */
    export type IPrincipalSources = {
            /** Search all principal sources. */
            All: number,
    
            /** Search the current membership provider. */
            MembershipProvider: number,
    
            /** Search no principal sources. */
            None: number,
    
            /** Search the current role provider. */
            RoleProvider: number,
    
            /** Search the user information list. */
            UserInfoList: number,
    
            /** Search active directory. */
            Windows: number
    }
    
    /**
        * Principal Types
        */
    export type IPrincipalTypes = {
            /** Return all entity types. */
            All: number,
    
            /** Return distribution list entity types. */
            DistributionList: number,
    
            /** Return no principal types. */
            None: number,
    
            /** Return security group entity types. */
            SecurityGroup: number,
    
            /** Return sharepoint group entity types. */
            SharePointGroup: number,
    
            /** Return user entity types. */
            User: number
    }
    
    /**
        * Relationship Delete Behavior Types
        */
    export type IRelationshipDeleteBehaviorType = {
            /** No relationship behavior is applied. */
            None: number,
    
            /** Cascade behavior. */
            Cascade: number,
    
            /** Restrict behavior. */
            Restrict: number
    };
    
    /**
        * Render List Data Options
        */
    export type IRenderListDataOptions = {
            None: number,
            ContextInfo: number,
            ListData: number,
            ListSchema: number,
            MenuView: number,
            ListContentType: number,
            FileSystemItemId: number,
            ClientFormSchema: number,
            QuickLaunch: number,
            Spotlight: number,
            Visualization: number,
            ViewMetadata: number,
            DisableAutoHyperlink: number,
            EnableMediaTAUrls: number,
            ParentInfo: number,
            PageContextInfo: number,
            ClientSideComponentManifest: number
    };
    
    /**
        * Reordering Rule Match Types
        */
    export type IReorderingRuleMatchType = {
            ResultContainsKeyword: number,
            TitleContainsKeyword: number,
            TitleMatchesKeyword: number,
            UrlStartsWith: number,
            UrlExactlyMatches: number,
            ContentTypeIs: number,
            FileExtensionMatches: number,
            ResultHasTag: number,
            ManualCondition: number
    };
    
    /**
        * Role Types
        */
    export type IRoleType = {
            /** Has all rights from other roles, plus rights to manage roles and view usage analysis data. Includes all rights in the WebDesigner role, plus the following: ManageListPermissions, ManageRoles, ManageSubwebs, ViewUsageData. The Administrator role cannot be customized or deleted, and must always contain at least one member. Members of the Administrator role always have access to, or can grant themselves access to, any item in the Web site. */
            Administrator: number,
    
            /** Has Reader rights, plus rights to add items, edit items, delete items, manage list permissions, manage personal views, personalize Web Part Pages, and browse directories. Includes all rights in the Reader role, plus the following: AddDelPrivateWebParts, AddListItems, BrowseDirectories, CreatePersonalGroups, DeleteListItems, EditListItems, ManagePersonalViews, UpdatePersonalWebParts. Contributors cannot create new lists or document libraries, but they can add content to existing lists and document libraries. */
            Contributor: number,
    
            /** Has Contributor rights, plus rights to manage lists. Includes all rights in the Contributor role. Editors can create new lists or document libraries. */
            Editor: number,
    
            /** Has limited rights to view pages and specific page elements. This role is used to give users access to a particular page, list, or item in a list, without granting rights to view the entire site. Users cannot be added explicitly to the Guest role; users who are given access to lists or document libraries by way of per-list permissions are added automatically to the Guest role. The Guest role cannot be customized or deleted. */
            Guest: number,
    
            /** export typeeration whose values specify that there are no rights on the Web site. */
            None: number,
    
            /** Has rights to view items, personalize Web parts, use alerts, and create a top-level Web site using Self-Service Site Creation. A reader can only read a site; the reader cannot add content. When a reader creates a site using Self-Service Site Creation, the reader becomes the site owner and a member of the Administrator role for the new site. This does not affect the user's role membership for any other site. Rights included: CreateSSCSite, ViewListItems, ViewPages. */
            Reader: number,
    
            /** Has Contributor rights, plus rights to cancel check out, delete items, manage lists, add and customize pages, define and apply themes and borders, and link style sheets. Includes all rights in the Contributor role, plus the following: AddAndCustomizePages, ApplyStyleSheets, ApplyThemeAndBorder, CancelCheckout, ManageLists.WebDesigners can modify the structure of the site and create new lists or document libraries. */
            WebDesigner: number
    };
    
    /**
        * Status Pri Color
        */
    export interface IStatusPriColor {
            /** Information */
            Blue: string,
    
            /** Success */
            Green: string,
    
            /** Very Important */
            Red: string,
    
            /** Important */
            Yellow: string
    }
    
    /**
        * URL Format Types
        */
    export type IUrlFormatType = {
            /** Hyperlink */
            Hyperlink: number,
    
            /** Image */
            Image: number
    };
    
    /**
        * URL Zones
        */
    export type IURLZones = {
            /** Search the custom zone. */
            Custom: number,
    
            /** Search the default zone. */
            Default: number,
    
            /** Search the extranet zone. */
            Extranet: number,
    
            /** Search the internet zone. */
            Internet: number,
    
            /** Search the intranet zone. */
            Intranet: number
    }
    
    /**
        * User Custom Action Registration Types
        */
    export type IUserCustomActionRegistrationType = {
            /** export typeeration whose values specify that the object association is not specified. */
            None: number,
    
            /** export typeeration whose values specify that the custom action is associated with a list. */
            List: number,
    
            /** export typeeration whose values specify that the custom action is associated with a content type. */
            ContentType: number,
    
            /** export typeeration whose values specify that the custom action is associated with a ProgID. */
            ProgId: number,
    
            /** export typeeration whose values specify that the custom action is associated with a file extension. */
            FileType: number
    };
    
    /**
        * View Types
        */
    export type IViewType = {
            /** export typeeration whose values specify a calendar list view type. */
            Calendar: number,
    
            /** export typeeration whose values specify a chart list view type. */
            Chart: number,
    
            /** export typeeration whose values specify a Gantt chart list view type. */
            Gantt: number,
    
            /** export typeeration whose values specify a datasheet list view type. */
            Grid: number,
    
            /** export typeeration whose values specify an HTML list view type. */
            Html: number,
    
            /** export typeeration whose values specify a list view type that displays recurring events. */
            Recurrence: number
    }
    
    
    /**
        * Web Template Types
        */
    export type IWebTemplateType = {
            AcademicLibrary: string,
            App: string,
            AppCatalog: string,
            BasicSearch: string,
            Blog: string,
            BusinessIntelligenceCenter: string,
            CentralAdmin: string,
            Community: string,
            CommunityPortal: string,
            Dev: string,
            DocumentCenter: string,
            eDiscoveryCenter: string,
            EnterpriseSearch: string,
            EnterpriseWiki: string,
            Global: string,
            GroupWorkSite: string,
            Meetings: string,
            MeetingWorkspace: string,
            PerformancePoint: string,
            ProductCatalog: string,
            Profiles: string,
            ProjectSite: string,
            Publishing: string,
            PublishingSite: string,
            RecordsCenter: string,
            SharedServicesAdminSite: string,
            Site: string,
            TeamCollaborationSite: string,
            TenantAdmin: string,
            Wiki: string
    }
}

declare module 'gd-sprest-bs/gd-sprest/intellisense/peoplePicker' {
    import { IBaseExecution } from "gd-sprest-def/lib/base";
    import { ClientPeoplePickerQueryParameters } from "gd-sprest-def/lib/SP/UI/ApplicationPages/complextypes";
    
    /**
        * Entity Data
        */
    export interface IEntityData {
            /** Account Name */
            AccountName?: string;
    
            /** Department. */
            Department?: string;
    
            /** EMail */
            Email?: string;
    
            /** */
            IsAltSecIdPresent?: boolean;
    
            /** Mobile Phone */
            MobilePhone?: string;
    
            /** Object ID */
            ObjectId?: string;
    
            /** Principal Type */
            PrincipalType?: string;
    
            /** SharePoint Group ID */
            SPGroupID?: string;
    
            /** SharePoint User ID */
            SPUserID?: string;
    
            /** Title */
            Title?: string;
    }
    
    /**
        * People Picker Resolve User
        */
    export interface IPeoplePickerResolveUser {
            // The client people picker resolve user results
            ClientPeoplePickerResolveUser: IPeoplePickerUser;
    }
    
    /**
        * People Picker Search User
        */
    export interface IPeoplePickerSearchUser {
            // The client people picker search user results
            ClientPeoplePickerSearchUser: Array<IPeoplePickerUser>;
    }
    
    /**
        * People Picker User
        */
    export interface IPeoplePickerUser {
            /** Description */
            Description?: string;
    
            /** Display Text */
            DisplayText: string;
    
            /** The user entity data. */
            EntityData?: IEntityData;
    
            /** Entity Type */
            EntityType?: string;
    
            /** Flag to determine if the search user is resolved. */
            IsResolved?: boolean;
    
            /** The search value. */
            Key: string;
    
            /** An array of un-resolved user entities. */
            MultipleMatches?: Array<IEntityData>;
    
            /** Provider Display Name */
            ProviderDisplayName?: string;
    
            /** Provider Name */
            ProviderName?: string;
    }
    
    /**
        * People Picker
        */
    export interface IPeoplePicker extends IBaseExecution {
            /** Method to resolve users.
                * @param query - The people picker query.
             */
            clientPeoplePickerResolveUser(query: ClientPeoplePickerQueryParameters): IBaseExecution<IPeoplePickerResolveUser>;
    
            /** Method to search for users.
                * @param query - The people picker query.
             */
            clientPeoplePickerSearchUser(query: ClientPeoplePickerQueryParameters): IBaseExecution<IPeoplePickerSearchUser>;
    }
}

declare module 'gd-sprest-bs/gd-sprest/intellisense/utility' {
    import { IBaseExecution } from "gd-sprest-def/lib/base";
    import { KeyValue } from "gd-sprest-def/lib/SP/complextypes";
    import { File } from "gd-sprest-def/lib/SP/entitytypes";
    
    /**
        * Email
        */
    export interface IEmail {
            /** A collection of additional email headers. */
            AdditionalHeaders?: Array<KeyValue>;
    
            /** A string or collection of email addresses to blind carbon copy the email to. */
            BCC?: Array<string>;
    
            /** A value that specifies the body of the email. */
            Body: string;
    
            /** A string or collection of email addresses to carbon copy the email to. */
            CC?: Array<string>;
    
            /** A value that specifies the email address of the sender. */
            From?: string;
    
            /** A string or collection of email addresses to send the email to. */
            To: Array<string>;
    
            /** A value that specifies the email subject. */
            Subject: string;
    }
    
    /**
        * Principal Result
        */
    export interface IPrincipalResult {
            Department?: string;
            DisplayName?: string;
            Email?: string;
            JobTitle?: string;
            LoginName?: string;
            Mobile?: string;
            PrincipalId?: number;
            PrincipalType?: number;
            SIPAddress?: string;
    }
    
    /**
        * Resolve Principal
        */
    export interface IResolvePrincipal {
            /** Specifies whether to add the user to the user information list. */
            addToUserInfoList?: boolean;
    
            /** The display name, email address, or login name of the principal scopes. */
            input: string;
    
            /** Specifies whether only the email address is used when searching for the principal. */
            inputIsEmailOnly?: boolean;
    
            /** Specifies whether the user information list is used. */
            matchUserInfoList?: boolean;
    
            /** The type of the principal. */
            scopes: number;
    
            /** The source of the principal. */
            sources: number;
    }
    
    /**
        * Search Principal
        */
    export interface ISearchPrincipal {
            /** The group name. */
            groupName?: string;
    
            /** The display name, email address, or login name of the principal scopes. */
            input: string;
    
            /** The maximum number of information entries about principals to return. */
            maxCount: number;
    
            /** The type of the principal. */
            scopes?: number;
    
            /** The source of the principal. */
            sources?: number;
    }
    
    /**
        * Utility Results
        */
    export interface ICreateEmailBodyForInvitationResult extends IBaseExecution { CreateEmailBodyForInvitation: string; }
    export interface IGetCurrentUserEmailAddressesResult extends IBaseExecution { GetCurrentUserEmailAddresses: string; }
    export interface IGetAppLicenseDeploymentIdResult extends IBaseExecution { GetAppLicenseDeploymentId: string; }
    export interface IGetAppLicenseInformationResult extends IBaseExecution { GetAppLicenseInformation: string; }
    export interface IGetLowerCaseStringResult extends IBaseExecution { GetLowerCaseString: string; }
    export interface IResolvePrincipalResult extends IBaseExecution { ResolvePrincipalInCurrentContext: IPrincipalResult; }
    export interface ISearchPrincipalsResult extends IBaseExecution { results: Array<IPrincipalResult>; SearchPrincipalsUsingContextWeb: { results: Array<IPrincipalResult>; }; }
    export interface ISendEmailResult extends IBaseExecution { SendEmail: string; }
    
    /**
        * Utility Methods
        */
    export interface IUtilityMethods {
            /**
                * Gets the external (outside the firewall) URL to a document or resource in a site.
                * pageAddress - The URL for the document or resource.
                */
            createEmailBodyForInvitation(pageAddress: string): IBaseExecution<IBaseExecution, ICreateEmailBodyForInvitationResult>;
    
            /**
                * Gets the app license deployment id.
                */
            getAppLicenseDeploymentId(): IBaseExecution<IBaseExecution, IGetAppLicenseDeploymentIdResult>;
    
            /**
                * Gets the app license information.
                */
            getAppLicenseInformation(): IBaseExecution<IBaseExecution, IGetAppLicenseInformationResult>;
    
            /**
                * Returns the current user's email address.
                */
            getCurrentUserEmailAddresses(): IBaseExecution<IBaseExecution, IGetCurrentUserEmailAddressesResult>;
    
            /**
                * Converts the text to a localized string.
                */
            getLocalizedString(sourceValue: string): IBaseExecution;
    
            /**
                * Converts the text to be lower case.
                */
            getLowerCaseString(sourceValue: string, lcid: number): IBaseExecution<IBaseExecution, IGetLowerCaseStringResult>;
    
            /**
                * Need to research
                */
            importAppLicense(url: string): IBaseExecution;
    
            /**
                * Need to research
                */
            isUserLicensedForEntityInContext(url: string): IBaseExecution;
    
            /**
                * Need to research
                */
            localizeWebPartGallery(url: string): IBaseExecution;
    
            /**
                * Need to research
                */
            markDiscussionAsFeatured(url: string): IBaseExecution;
    
            /**
                * Gets information about a principal that matches the specified Search criteria.
                */
            resolvePrincipal(principal: IResolvePrincipal): IBaseExecution<IBaseExecution, IResolvePrincipalResult>;
    
            /**
                * Gets information about the principals that match the specified Search criteria.
                */
            searchPrincipals(principal: ISearchPrincipal): IBaseExecution<IBaseExecution, ISearchPrincipalsResult>;
    
            /**
                * Need to research
                */
            unmarkDiscussionAsFeatured(url: string): IBaseExecution;
    }
    
    /**
        * Utility
        */
    export interface IUtility extends IUtilityMethods, IBaseExecution<IUtility> {
            /**
                * Creates a wiki page.
                * @param listUrl - The relative url to the library.
                * @param content - The html content.
                */
            createWikiPage(pageUrl: string, content?: string): IBaseExecution<File>;
    
            /**
                * Method to send an email.
                * @param email - The email properties.
                */
            sendEmail(email: IEmail): IBaseExecution<IBaseExecution, ISendEmailResult>;
    }
}

declare module 'gd-sprest-bs/gd-bs/base' {
    /**
        * Base
        */
    export interface IBase<IProps = IBaseProps> {
            /** The bootstrap object */
            _bootstrapObj?: any;
    
            /** Internal method to configure the parent element. */
            configureParent(): Element;
    
            /** The component HTML element */
            el: Element | HTMLElement;
    
            /** Hides the component. */
            hide(): void;
    
            /** The component properties */
            props: IProps;
    
            /** Shows the component. */
            show(): void;
    }
    
    /**
        * Base Properties
        */
    export interface IBaseProps<IBaseObj = any> {
            /** Assigns the object to the input parameter. */
            assignTo?: (obj: IBaseObj) => void;
    
            /** Custom class names. */
            className?: string;
    
            /** The element to render the component to. */
            el?: Element | HTMLElement;
    }
}

declare module 'gd-sprest-bs/gd-sprest/utils' {
    export * from "gd-sprest-bs/gd-sprest/utils/base";
    export * from "gd-sprest-bs/gd-sprest/utils/helper";
    export * from "gd-sprest-bs/gd-sprest/utils/request";
    export * from "gd-sprest-bs/gd-sprest/utils/requestType";
    export * from "gd-sprest-bs/gd-sprest/utils/targetInfo";
    export * from "gd-sprest-bs/gd-sprest/utils/xhrRequest";
}

declare module 'gd-sprest-bs/gd-sprest/intellisense/graph' {
    import { IBaseExecution, IBaseQuery } from "gd-sprest-def/lib/base";
    
    /**
        * Graph Collection
        * @hidden
        */
    export interface IGraphCollection<T> {
            value: Array<T>;
    }
    
    /**
        * Graph Methods
        * @hidden
        */
    export interface IGraphMethods { }
    
    /**
        * Graph Query Properties
        * @hidden
        */
    export interface IGraphQueryProps {
            /**
                * Represents a collection of OneDrives and Document Libraries.
                */
            drives(): IBaseExecution<IGraphCollection<IGraphDrive>>;
    
            /**
                * Represents a OneDrive or Document Library.
                * @param id - The drive id.
                */
            drives(id: string): IBaseExecution<IGraphDrive>;
    
            /**
                * Represents a collection of Azure Active Directory (Azure AD) groups.
                * Types: Office 365 Group, Dynamic Group or Security Group
                */
            groups(): IBaseExecution<IGraphCollection<IGraphGroup>>;
    
            /**
                * Represents an Azure Active Directory (Azure AD) group.
                * Types: Office 365 Group, Dynamic Group or Security Group
                * @param id - The group id.
                */
            groups(id: string): IBaseExecution<IGraphGroup>;
    
            /**
                * Represents a collection of Azure AD user accounts.
                */
            users(): IBaseExecution<IGraphCollection<IGraphUser>>;
    
            /**
                * Represents a collection of Azure AD user accounts.
                * @param id - The user id.
                */
            users(id: string): IBaseExecution<IGraphUser>;
    }
    
    /**
        * Graph Result
        * @hidden
        */
    export interface IGraphResult { }
    
    /**
        * Graph Query Result
        * @hidden
        */
    export interface IGraphQueryResult { }
    
    /**
        * Graph Drive
        * @hidden
        */
    export interface IGraphDrive {
            // Identity of the user, device, or application which created the item.
            createdBy?: { user: IGraphUser };
    
            // Date and time of item creation.
            createdDateTime?: string;
    
            // Provide a user-visible description of the drive.
            description?: string;
    
            // Describes the type of drive represented by this resource. OneDrive personal drives will return personal. OneDrive for Business will return business. SharePoint document libraries will return documentLibrary.
            driveType?: string;
    
            // The unique identifier of the drive.
            id?: string;
    
            // The drive items
            items?: () => IBaseExecution<IGraphCollection<IGraphDriveItem>>;
    
            // Identity of the user, device, and application which last modified the item.
            lastModifiedBy?: { user: IGraphUser };
    
            // Date and time the item was last modified.
            lastModifiedDateTime?: string;
    
            // The name of the item.
            name?: string;
    
            // The user account that owns the drive.
            owner?: { user: IGraphUser };
    
            // Information about the drive's storage space quota.
            quota?: IGraphDriveQuota;
    
            // Reference to the root folder.
            root?: () => IBaseExecution<IGraphDriveItem>;
    
            // Collection of common folders available in OneDrive.
            specials?: () => IBaseExecution<IGraphCollection<IGraphDriveItem>>;
    
            // Returns identifiers useful for SharePoint REST compatibility.
            sharepointIds?: IGraphSharePointIds;
    
            // If present, indicates that this is a system-managed drive.
            systemFacet?: any;
    
            // URL that displays the resource in the browser.
            webUrl?: string;
    }
    
    /**
        * Graph Drive Item
        * @hidden
        */
    export interface IGraphDriveItem {
    }
    
    /**
        * Graph Drive Quota
        * @hidden
        */
    export interface IGraphDriveQuota {
            deleted?: number;
            remaining?: number;
            state?: string;
            total?: number;
            used?: number;
    }
    
    /**
        * Graph Token
        * @hidden
        */
    export interface IGraphToken {
            access_token: string;
            expires_on: string;
            resource: string;
            scope: string;
            token_type: string;
    }
    
    /**
        * Graph
        * @hidden
        */
    export interface IGraph extends IGraphMethods, IGraphQueryProps, IBaseQuery<IGraphResult, IGraphQueryResult> { }
    
    /**
        * Graph Group
        * @hidden
        */
    export interface IGraphGroup {
            // Default is false. Indicates if people external to the organization can send messages to the group.
            allowExternalSenders?: boolean;
    
            // Default is false. Indicates if new members added to the group will be auto-subscribed to receive email notifications. You can set this property in a PATCH request for the group; do not set it in the initial POST request that creates the group.
            autoSubscribeNewMembers?: boolean;
    
            // Describes a classification for the group (such as low, medium or high business impact). Valid values for this property are defined by creating a ClassificationList setting value, based on the template definition.
            classification?: string;
    
            // Timestamp of when the group was created. The value cannot be modified and is automatically populated when the group is created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Read-only.
            createdDateTime?: string;
    
            // An optional description for the group.
            description?: string;
    
            // The display name for the group. This property is required when a group is created and it cannot be cleared during updates. Supports $filter and $orderby.
            displayName?: string;
    
            // Specifies the type of group to create. Possible values are Unified to create an Office 365 group, or DynamicMembership for dynamic groups.  For all other group types, like security-enabled groups and email-enabled security groups, do not set this property. Supports $filter.
            groupTypes?: Array<string>;
    
            // The unique identifier for the group. Inherited from directoryObject. Key. Not nullable. Read-only.
            id?: string;
    
            // Default value is true. Indicates whether the current user is subscribed to receive email conversations.
            isSubscribedByMail?: boolean;
    
            // The SMTP address for the group, for example, "serviceadmins@contoso.onmicrosoft.com". Read-only. Supports $filter.
            mail?: string;
    
            // Specifies whether the group is mail-enabled. If the securityEnabled property is also true, the group is a mail-enabled security group; otherwise, the group is a Microsoft Exchange distribution group.
            mailEnabled?: boolean;
    
            // The mail alias for the group, unique in the organization. This property must be specified when a group is created. Supports $filter.
            mailNickname?: string;
    
            // Indicates the last time at which the group was synced with the on-premises directory.The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Read-only. Supports $filter.
            onPremisesLastSyncDateTime?: string;
    
            // Contains the on-premises security identifier (SID) for the group that was synchronized from on-premises to the cloud. Read-only.
            onPremisesSecurityIdentifier?: string;
    
            // true if this group is synced from an on-premises directory; false if this group was originally synced from an on-premises directory but is no longer synced; null if this object has never been synced from an on-premises directory (default). Read-only. Supports $filter.
            onPremisesSyncEnabled?: boolean;
    
            // The any operator is required for filter expressions on multi-valued properties. Read-only. Not nullable. Supports $filter.
            proxyAddresses?: Array<string>;
    
            // Timestamp of when the group was last renewed. This cannot be modified directly and is only updated via the renew service action. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Read-only.
            renewedDateTime?: string;
    
            // Specifies whether the group is a security group. If the mailEnabled property is also true, the group is a mail-enabled security group; otherwise it is a security group. Must be false for Office 365 groups. Supports $filter.
            securityEnabled?: boolean;
    
            // Count of posts that the current  user has not seen since his last visit.
            unseenCount?: number;
    
            // Specifies the visibility of an Office 365 group. Possible values are: Private, Public, or empty (which is interpreted as Public).
            visibility?: string;
    }
    
    /**
        * Graph SharePoint IDs
        * @hidden
        */
    export interface IGraphSharePointIds {
            // The unique identifier (guid) for the item's list in SharePoint.
            listId?: string;
    
            // An integer identifier for the item within the containing list.
            listItemId?: string;
    
            // The unique identifier (guid) for the item within OneDrive for Business or a SharePoint site.
            listItemUniqueId?: string;
    
            // The unique identifier (guid) for the item's site collection (SPSite).
            siteId?: string;
    
            // The SharePoint URL for the site that contains the item.
            siteUrl?: string;
    
            // The unique identifier (guid) for the item's site (SPWeb).
            webId?: string;
    }
    
    /**
        * Graph User
        * @hidden
        */
    export interface IGraphUser {
            // A freeform text entry field for the user to describe themselves.
            aboutMe?: string;
    
            // true if the account is enabled; otherwise, false. This property is required when a user is created. Supports $filter.
            accountEnabled?: boolean;
    
            // The licenses that are assigned to the user.
            assignedLicenses?: Array<string>;
    
            // The plans that are assigned to the user.
            assignedPlans?: Array<string>;
    
            // The birthday of the user. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1,
            birthday?: string;
    
            // The user's phone numbers.
            businessPhones?: Array<string>;
    
            // The city in which the user is located.
            city?: string;
    
            // The company name which the user is associated.
            companyName?: string;
    
            // The country/region in which the user is located; for example, “US” or “UK”.
            country?: string;
    
            // The name for the department in which the user works.
            department?: string;
    
            // The name displayed in the address book for the user.
            displayName?: string;
    
            // The first name of the user.
            givenName?: string;
    
            // The hire date of the user. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time.
            hireDate?: string;
    
            // The unique identifier for the user.
            id?: string;
    
            // The instant message voice over IP (VOIP) session initiation protocol (SIP) addresses for the user.
            imAddresses?: Array<string>;
    
            // A list for the user to describe their interests.
            interests?: Array<string>;
    
            // The user's job title.
            jobTitle?: string;
    
            // The user's email address.
            mail?: string;
    
            // The mail alias for the user.
            mailNickname?: string;
    
            // The user's cellphone number.
            mobilePhone?: string;
    
            // The URL for the user's personal site.
            mySite?: string;
    
            // The user's physical office location.
            officeLocation?: string;
    
            // The postal code for the user's postal address. 
            postalCode?: string;
    
            // The user's language of preference.
            preferredLanguage?: string;
    
            // The preferred name for the user.
            preferredName?: string;
    
            // A list for the user to enumerate their responsibilities.
            responsibilities?: Array<string>;
    
            // A list for the user to enumerate the schools they have attended.
            schools?: Array<string>;
    
            // A list for the user to enumerate their skills.
            skills?: Array<string>;
    
            // The state or province in the user's address.
            state?: string;
    
            // The street address of the user's place of business.
            streetAddress?: string;
    
            // The last name of the user.
            surname?: string;
    
            // A two letter country code (ISO standard 3166). Required for users that will be assigned licenses due to legal requirement to check for availability of services in countries.  Examples include: "US", "JP", and "GB".
            usageLocation?: string;
    
            // The user's principal name.
            userPrincipalName?: string;
    
            // A string value that can be used to classify user types in your directory, such as “Member” and “Guest”.
            userType?: string;
    }
}

declare module 'gd-sprest-bs/gd-sprest/helper/methods/addContentEditorWebPart' {
    import { IContentEditorWebPart } from "gd-sprest-bs/gd-sprest/helper/webpart";
    
    /**
      * Adds a content editor webpart to a page.
      * @category Helper
      * @param url The relative url of the page.
      * @param wpProps The webpart properties.
      * @returns A promise is returned.
      */
    export const addContentEditorWebPart: IaddContentEditorWebPart;
    export interface IaddContentEditorWebPart {
        (url: string, wpProps: IContentEditorWebPart): PromiseLike<void>;
    }
}

declare module 'gd-sprest-bs/gd-sprest/helper/methods/addPermissionLevel' {
    import { RoleDefinition, RoleDefinitionCreationInformation } from "gd-sprest-def/lib/SP";
    
    /**
        * Properties
        */
    export interface IaddPermissionLevelProps extends RoleDefinitionCreationInformation {
            Permissions: Array<number>;
            Name: string;
            WebUrl?: string;
    }
    
    /**
        * Adds a permission level to the current or specified web.
        * @props properties
        */
    export const addPermissionLevel: IaddPermissionLevel;
    export interface IaddPermissionLevel {
            (props: IaddPermissionLevelProps): PromiseLike<RoleDefinition>;
    }
}

declare module 'gd-sprest-bs/gd-sprest/helper/methods/addScriptEditorWebPart' {
    import { IScriptEditorWebPart } from "gd-sprest-bs/gd-sprest/helper/webpart";
    
    /**
      * Adds a script editor webpart to a page.
      * @category Helper
      * @param url - The relative url of the page.
      * @param wpProps - The webpart properties.
      */
    export const addScriptEditorWebPart: IaddScriptEditorWebPart;
    export interface IaddScriptEditorWebPart {
        (url: string, wpProps: IScriptEditorWebPart): PromiseLike<void>;
    }
}

declare module 'gd-sprest-bs/gd-sprest/helper/methods/createContentType' {
    import { ContentTypeCreationInformation } from "gd-sprest-def/lib/SP/complextypes";
    import { ContentType } from "gd-sprest-def/lib/SP/entitytypes";
    
    /**
      * Creates a content type in a web or specified list.
      * @category Helper
      * @param ctInfo - The content type information.
      * @param parentInfo - The parent content type id and url containing it.
      * @param webUrl - The relative url to create the content type in.
      * @param listName - The list name to add the content type to.
      */
    export const createContentType: IcreateContentType;
    export interface IcreateContentType {
        (ctInfo: ContentTypeCreationInformation, parentInfo: { Id: string, Url?: string }, webUrl?: string, listName?: string): PromiseLike<ContentType>;
    }
}

declare module 'gd-sprest-bs/gd-sprest/helper/methods/createDocSet' {
    import { ListItem } from "gd-sprest-def/lib/SP/entitytypes";
    
    /**
      * Creates a document set item.
      * @category Helper
      * @param name - The name of the document set folder to create.
      * @param listName - The name of the document set library.
      * @param webUrl - The url of the web containing the document set library.
      */
    export const createDocSet: IcreateDocSet;
    export interface IcreateDocSet {
        (name: string, listName: string, webUrl?: string): PromiseLike<ListItem>;
    }
}

declare module 'gd-sprest-bs/gd-sprest/helper/methods/hasPermissions' {
    /**
      * Determines if the user has permissions, based on the permission kind value
      * @category Helper
      */
    export const hasPermissions: IhasPermissions;
    export interface IhasPermissions {
        (permissionMask: any, permissions: Array<number> | number): PromiseLike<boolean>;
    }
}

declare module 'gd-sprest-bs/gd-sprest/helper/methods/parse' {
    /**
      * Convert a JSON string to a base object
      * @category Helper
      */
    export const parse: Iparse;
    export interface Iparse {
        <T = any>(jsonString: string): T;
    }
}

declare module 'gd-sprest-bs/gd-sprest/helper/methods/request' {
    /**
        * XML HTTP Request
        * @category Helper
        */
    export const request: Irequest;
    export interface Irequest {
            (props: IRequest): PromiseLike<any>;
    }
    
    /**
        * The XML HTTP request properties.
        */
    export interface IRequest {
            /** The data to pass in the request. */
            data?: any;
    
            /** The request headers. */
            headers?: { [key: string]: string };
    
            /** The request method. */
            method?: string;
    
            /** The request url. */
            url: string;
    }
}

declare module 'gd-sprest-bs/gd-sprest/helper/methods/setContentTypeFields' {
    /**
      * Sets the field links associated with a content type.
      * @param ctInfo The content type information
      * @category Helper
      */
    export const setContentTypeFields: IsetContentTypeFields;
    export interface IsetContentTypeFields {
        (ctInfo: { id: string, fields: Array<string>, listName?: string, webUrl?: string }): PromiseLike<void>;
    }
}

declare module 'gd-sprest-bs/gd-sprest/helper/methods/setGroupOwner' {
    /**
      * Sets a site group owner.
      * This uses JSOM to set a site group owner's property to another group. You can only set the owner to a user, using the REST API.
      * @param groupName The group name to update.
      * @param ownerName The owner group name. 
      */
    export const setGroupOwner: IsetGroupOwner;
    export interface IsetGroupOwner {
        (groupName: string, ownerName: string): PromiseLike<void>;
    }
}

declare module 'gd-sprest-bs/gd-sprest/utils/base' {
    import { IBaseExecution, IBaseResult } from "gd-sprest-def/lib/base";
    import { ITargetInfo, ITargetInfoProps } from "gd-sprest-bs/gd-sprest/utils/targetInfo";
    import { IXHRRequest } from "gd-sprest-bs/gd-sprest/utils/xhrRequest";
    
    /**
        * Base
        */
    export interface IBase<Type = any, Result = Type, QueryResult = Result> extends IBaseExecution<Result, QueryResult>, IBaseResult {
    
            /** The parent object, which created this object. */
            parent: any;
    
    
            /** The batch requests. */
            batchRequests: Array<Array<{ callback?: any, response?: IBase, targetInfo: ITargetInfo }>>;
    
            /** The index of this object in the responses array. */
            responseIndex: number;
    
            /** The responses. */
            responses: Array<IBase>;
    
            /** The wait flags. */
            waitFlags: Array<boolean>;
    
    
            /** The base object. */
            base: IBase;
    
            /** The request type */
            requestType: number;
    
            /** The request's status. */
            status: number;
    
            /** The target information. */
            targetInfo: ITargetInfoProps;
    
            /** The xml object. */
            xml: string | XMLDocument;
    
    
            /** Flag to get all items. */
            getAllItemsFl: boolean;
    
            /** Flag determining if more items exist. */
            nextFl: boolean;
    
            /** The request. */
            xhr: IXHRRequest;
    
            /** Adds methods based on the object type. */
            addMethods(data: any, context?: any);
    
            /** Gets the property as a collection. */
            getCollection(method: string, args?: any);
    
            /** Gets the next set of results. */
            getNextSetOfResults();
    
            /** Gets the property. */
            getProperty(propertyName: string, requestType?: string);
    
            /** Updates the metdata uri. */
            updateMetadataUri(metadata, targetInfo: ITargetInfoProps);
    
            /**
                * Method to wait for the parent requests to complete
                */
            waitForRequestsToComplete(callback: () => void, requestIdx?: number);
    }
}

declare module 'gd-sprest-bs/gd-sprest/utils/helper' {
    import { IMethodInfo, IRequestInfo } from "gd-sprest-def/lib/base";
    import { IBase } from "gd-sprest-bs/gd-sprest/utils/base";
    import { ITargetInfoProps } from "gd-sprest-bs/gd-sprest/utils/targetInfo";
    
    /**
      * Request Helper Methods
      */
    export interface IBaseHelper {
        /** Adds the base methods. */
        addBaseMethods(base: IBase, obj: any);
    
        /** Method to wait for the requests to complete. */
        done(base: IBase, resolve: (value?: any) => void);
    
        /** Method to execute the request. */
        executeMethod(base: IBase, methodName: string, methodConfig: IMethodInfo, args?: any);
    
        /** Gets the property as a collection. */
        getCollection(base: IBase, method: string, args?: any): IBase;
    
        /** Gets the next set of results. */
        getNextSetOfResults(base: IBase): IBase;
    
        /** Gets the property. */
        getProperty(base: IBase, propertyName: string, requestType?: string): IBase;
    
        /** Gets the XHR request information. */
        getRequestInfo(base: IBase): IRequestInfo;
    
        /** Converts the base object to a JSON string. */
        stringify(base: IBase): string;
    
        /** Updates the data collection objects. */
        updateDataCollection(base: IBase, results: Array<IBase>);
    
        /** Updates the expanded properties for odata queries. */
        updateExpandedProperties(base: IBase);
    
        /** Updates the metadata. */
        updateMetadata(base, data);
    
        /** Updates the metdata uri. */
        updateMetadataUri(base: IBase, metadata, targetInfo: ITargetInfoProps);
    }
}

declare module 'gd-sprest-bs/gd-sprest/utils/request' {
    import { IBase } from "gd-sprest-bs/gd-sprest/utils/base";
    
    /**
      * Request
      */
    export interface IRequest {
        /** Adds methods based on the object type. */
        addMethods(base: IBase, data: any, context?: any);
    
        /** Adds properties based on the object type. */
        addProperties(base: IBase, data: any);
    
        /** Method to execute the request. */
        execute(base: IBase, args: Array<any>): IBase;
    
        /** Method to execute the request. */
        executeRequest(base: IBase, asyncFl: boolean, callback?: (response: any, errorFl: boolean) => void);
    
        /** Parses the xml string and creates a base object. */
        parseXML(xml: string): IBase;
    
        /** Updates the data object. */
        updateDataObject(base: IBase, isBatchRequest: boolean, batchCallback?: (batchResponses: Array<any>) => void);
    
        /** Validates the data collection results. */
        validateDataCollectionResults(base: IBase): PromiseLike<void>;
    
        /** Method to wait for the parent requests to complete */
        waitForRequestsToComplete(base: IBase, callback: () => void, requestIdx?: number);
    }
}

declare module 'gd-sprest-bs/gd-sprest/utils/requestType' {
    /**
      * Request Type
      */
    export type IRequestType = {
        // Requests
        Custom: number;
        Delete: number;
        Merge: number;
        OData: number;
    
        // Get Requests
        Get: number;
        GetBuffer: number;
        GetWithArgs: number;
        GetWithArgsInBody: number;
        GetWithArgsInQS: number;
        GetWithArgsInQSAsVar: number;
        GetWithArgsValueOnly: number;
        GetReplace: number;
    
        // Graph Requests
        GraphGet: number;
        GraphPost: number;
    
        // Post Requests
        Post: number;
        PostBodyNoArgs: number;
        PostWithArgs: number;
        PostWithArgsAndData: number;
        PostWithArgsInBody: number;
        PostWithArgsInQS: number;
        PostWithArgsInQSAsVar: number;
        PostWithArgsValueOnly: number;
        PostReplace: number;
        PostReplaceWithData: number;
    }
}

declare module 'gd-sprest-bs/gd-sprest/utils/targetInfo' {
    /**
        * Target Information
        */
    export const TargetInfo: (props: ITargetInfoProps) => ITargetInfo;
    
    /**
        * Target Information
        */
    export interface ITargetInfo {
            // The target information properties
            props: ITargetInfoProps;
    
            // Flag to determine if this is a batch request
            isBatchRequest: boolean;
    
            // Flag to determine if this is a graph request
            isGraph: boolean;
    
            // The request data
            requestData: any;
    
            // The request header
            requestHeaders: object;
    
            // The request method
            requestMethod: string;
    
            // The request type
            requestType: number;
    
            // The request url
            requestUrl: string;
    }
    
    /**
        * Target Information Properties
        */
    export interface ITargetInfoProps {
            /** The access token for the graph api request. */
            accessToken?: string;
    
            /** True if the expected request returns an array buffer. */
            bufferFl?: boolean;
    
            /** The method to execute after the asynchronous request executes. */
            callback?: () => void;
    
            /** The data to be passed in the body of the request. */
            data?: any;
    
            /** True to default the request to the web api, site api otherwise. */
            defaultToWebFl?: boolean;
    
            /** Sets the Cache-Control header to no-cache */
            disableCache?: boolean;
    
            /** The endpoint of the request. */
            endpoint?: string;
    
            /** The method to execute. */
            method?: string;
    
            /** True to override the default request to host flag. */
            overrideDefaultRequestToHostFl?: boolean;
    
            /** The request digest to use for the request. */
            requestDigest?: string;
    
            /** The request header. */
            requestHeader?: object;
    
            /** The request information. */
            requestInfo?: object;
    
            /** The request type. */
            requestType?: number;
    
            /** The url of the site/web to execute the request against. */
            url?: string;
    }
}

declare module 'gd-sprest-bs/gd-sprest/utils/xhrRequest' {
    import { ITargetInfo } from "gd-sprest-bs/gd-sprest/utils/targetInfo";
    
    /**
        * XHR Request
        */
    export const XHRRequest: (asyncFl: boolean, targetInfo: ITargetInfo, callback?: (...args) => void) => IXHRRequest;
    
    /**
        * XHR Request
        */
    export interface IXHRRequest {
            // Flag indicating the request has completed
            completedFl: boolean;
    
            // The response
            response: string;
    
            // The xml http request
            request: XMLHttpRequest;
    
            // The data send in the body of the request
            requestData: any;
    
            // The request headers
            requestHeaders: { [key: string]: string };
    
            // The reqest url
            requestUrl: string;
    
            // The request status
            status: number;
    }
}

