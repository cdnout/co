(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@firebase/app')) :
    typeof define === 'function' && define.amd ? define(['exports', '@firebase/app'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.firebase = global.firebase || {}, global.firebase.analytics = global.firebase.analytics || {}), global.firebase.app));
}(this, (function (exports, app) { 'use strict';

    try {
                (function() {

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a;
    /**
     * The JS SDK supports 5 log levels and also allows a user the ability to
     * silence the logs altogether.
     *
     * The order is a follows:
     * DEBUG < VERBOSE < INFO < WARN < ERROR
     *
     * All of the log types above the current log level will be captured (i.e. if
     * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
     * `VERBOSE` logs will not)
     */
    var LogLevel;
    (function (LogLevel) {
        LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
        LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
        LogLevel[LogLevel["INFO"] = 2] = "INFO";
        LogLevel[LogLevel["WARN"] = 3] = "WARN";
        LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
        LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
    })(LogLevel || (LogLevel = {}));
    var levelStringToEnum = {
        'debug': LogLevel.DEBUG,
        'verbose': LogLevel.VERBOSE,
        'info': LogLevel.INFO,
        'warn': LogLevel.WARN,
        'error': LogLevel.ERROR,
        'silent': LogLevel.SILENT
    };
    /**
     * The default log level
     */
    var defaultLogLevel = LogLevel.INFO;
    /**
     * By default, `console.debug` is not displayed in the developer console (in
     * chrome). To avoid forcing users to have to opt-in to these logs twice
     * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
     * logs to the `console.log` function.
     */
    var ConsoleMethod = (_a = {},
        _a[LogLevel.DEBUG] = 'log',
        _a[LogLevel.VERBOSE] = 'log',
        _a[LogLevel.INFO] = 'info',
        _a[LogLevel.WARN] = 'warn',
        _a[LogLevel.ERROR] = 'error',
        _a);
    /**
     * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
     * messages on to their corresponding console counterparts (if the log method
     * is supported by the current log level)
     */
    var defaultLogHandler = function (instance, logType) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        if (logType < instance.logLevel) {
            return;
        }
        var now = new Date().toISOString();
        var method = ConsoleMethod[logType];
        if (method) {
            console[method].apply(console, __spreadArrays(["[" + now + "]  " + instance.name + ":"], args));
        }
        else {
            throw new Error("Attempted to log a message with an invalid logType (value: " + logType + ")");
        }
    };
    var Logger = /** @class */ (function () {
        /**
         * Gives you an instance of a Logger to capture messages according to
         * Firebase's logging scheme.
         *
         * @param name The name that the logs will be associated with
         */
        function Logger(name) {
            this.name = name;
            /**
             * The log level of the given Logger instance.
             */
            this._logLevel = defaultLogLevel;
            /**
             * The main (internal) log handler for the Logger instance.
             * Can be set to a new function in internal package code but not by user.
             */
            this._logHandler = defaultLogHandler;
            /**
             * The optional, additional, user-defined log handler for the Logger instance.
             */
            this._userLogHandler = null;
        }
        Object.defineProperty(Logger.prototype, "logLevel", {
            get: function () {
                return this._logLevel;
            },
            set: function (val) {
                if (!(val in LogLevel)) {
                    throw new TypeError("Invalid value \"" + val + "\" assigned to `logLevel`");
                }
                this._logLevel = val;
            },
            enumerable: false,
            configurable: true
        });
        // Workaround for setter/getter having to be the same type.
        Logger.prototype.setLogLevel = function (val) {
            this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;
        };
        Object.defineProperty(Logger.prototype, "logHandler", {
            get: function () {
                return this._logHandler;
            },
            set: function (val) {
                if (typeof val !== 'function') {
                    throw new TypeError('Value assigned to `logHandler` must be a function');
                }
                this._logHandler = val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Logger.prototype, "userLogHandler", {
            get: function () {
                return this._userLogHandler;
            },
            set: function (val) {
                this._userLogHandler = val;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * The functions below are all based on the `console` interface
         */
        Logger.prototype.debug = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.DEBUG], args));
            this._logHandler.apply(this, __spreadArrays([this, LogLevel.DEBUG], args));
        };
        Logger.prototype.log = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.VERBOSE], args));
            this._logHandler.apply(this, __spreadArrays([this, LogLevel.VERBOSE], args));
        };
        Logger.prototype.info = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.INFO], args));
            this._logHandler.apply(this, __spreadArrays([this, LogLevel.INFO], args));
        };
        Logger.prototype.warn = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.WARN], args));
            this._logHandler.apply(this, __spreadArrays([this, LogLevel.WARN], args));
        };
        Logger.prototype.error = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.ERROR], args));
            this._logHandler.apply(this, __spreadArrays([this, LogLevel.ERROR], args));
        };
        return Logger;
    }());

    function isBrowserExtension() {
        var runtime = typeof chrome === 'object'
            ? chrome.runtime
            : typeof browser === 'object'
                ? browser.runtime
                : undefined;
        return typeof runtime === 'object' && runtime.id !== undefined;
    }
    /**
     * This method checks if indexedDB is supported by current browser/service worker context
     * @return true if indexedDB is supported by current browser/service worker context
     */
    function isIndexedDBAvailable() {
        return 'indexedDB' in self && indexedDB != null;
    }
    /**
     * This method validates browser context for indexedDB by opening a dummy indexedDB database and reject
     * if errors occur during the database open operation.
     */
    function validateIndexedDBOpenable() {
        return new Promise(function (resolve, reject) {
            try {
                var preExist_1 = true;
                var DB_CHECK_NAME_1 = 'validate-browser-context-for-indexeddb-analytics-module';
                var request_1 = window.indexedDB.open(DB_CHECK_NAME_1);
                request_1.onsuccess = function () {
                    request_1.result.close();
                    // delete database only when it doesn't pre-exist
                    if (!preExist_1) {
                        window.indexedDB.deleteDatabase(DB_CHECK_NAME_1);
                    }
                    resolve(true);
                };
                request_1.onupgradeneeded = function () {
                    preExist_1 = false;
                };
                request_1.onerror = function () {
                    var _a;
                    reject(((_a = request_1.error) === null || _a === void 0 ? void 0 : _a.message) || '');
                };
            }
            catch (error) {
                reject(error);
            }
        });
    }
    /**
     *
     * This method checks whether cookie is enabled within current browser
     * @return true if cookie is enabled within current browser
     */
    function areCookiesEnabled() {
        if (!navigator || !navigator.cookieEnabled) {
            return false;
        }
        return true;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ERROR_NAME = 'FirebaseError';
    // Based on code from:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
    var FirebaseError = /** @class */ (function (_super) {
        __extends(FirebaseError, _super);
        function FirebaseError(code, message, customData) {
            var _this = _super.call(this, message) || this;
            _this.code = code;
            _this.customData = customData;
            _this.name = ERROR_NAME;
            // Fix For ES5
            // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
            Object.setPrototypeOf(_this, FirebaseError.prototype);
            // Maintains proper stack trace for where our error was thrown.
            // Only available on V8.
            if (Error.captureStackTrace) {
                Error.captureStackTrace(_this, ErrorFactory.prototype.create);
            }
            return _this;
        }
        return FirebaseError;
    }(Error));
    var ErrorFactory = /** @class */ (function () {
        function ErrorFactory(service, serviceName, errors) {
            this.service = service;
            this.serviceName = serviceName;
            this.errors = errors;
        }
        ErrorFactory.prototype.create = function (code) {
            var data = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                data[_i - 1] = arguments[_i];
            }
            var customData = data[0] || {};
            var fullCode = this.service + "/" + code;
            var template = this.errors[code];
            var message = template ? replaceTemplate(template, customData) : 'Error';
            // Service Name: Error message (service/code).
            var fullMessage = this.serviceName + ": " + message + " (" + fullCode + ").";
            var error = new FirebaseError(fullCode, fullMessage, customData);
            return error;
        };
        return ErrorFactory;
    }());
    function replaceTemplate(template, data) {
        return template.replace(PATTERN, function (_, key) {
            var value = data[key];
            return value != null ? String(value) : "<" + key + "?>";
        });
    }
    var PATTERN = /\{\$([^}]+)}/g;

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * The amount of milliseconds to exponentially increase.
     */
    var DEFAULT_INTERVAL_MILLIS = 1000;
    /**
     * The factor to backoff by.
     * Should be a number greater than 1.
     */
    var DEFAULT_BACKOFF_FACTOR = 2;
    /**
     * The maximum milliseconds to increase to.
     *
     * <p>Visible for testing
     */
    var MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000; // Four hours, like iOS and Android.
    /**
     * The percentage of backoff time to randomize by.
     * See
     * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic
     * for context.
     *
     * <p>Visible for testing
     */
    var RANDOM_FACTOR = 0.5;
    /**
     * Based on the backoff method from
     * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.
     * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.
     */
    function calculateBackoffMillis(backoffCount, intervalMillis, backoffFactor) {
        if (intervalMillis === void 0) { intervalMillis = DEFAULT_INTERVAL_MILLIS; }
        if (backoffFactor === void 0) { backoffFactor = DEFAULT_BACKOFF_FACTOR; }
        // Calculates an exponentially increasing value.
        // Deviation: calculates value from count and a constant interval, so we only need to save value
        // and count to restore state.
        var currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);
        // A random "fuzz" to avoid waves of retries.
        // Deviation: randomFactor is required.
        var randomWait = Math.round(
        // A fraction of the backoff value to add/subtract.
        // Deviation: changes multiplication order to improve readability.
        RANDOM_FACTOR *
            currBaseValue *
            // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines
            // if we add or subtract.
            (Math.random() - 0.5) *
            2);
        // Limits backoff to max to avoid effectively permanent backoff.
        return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);
    }

    /**
     * Component for service name T, e.g. `auth`, `auth-internal`
     */
    var Component = /** @class */ (function () {
        /**
         *
         * @param name The public service name, e.g. app, auth, firestore, database
         * @param instanceFactory Service factory responsible for creating the public interface
         * @param type whether the service provided by the component is public or private
         */
        function Component(name, instanceFactory, type) {
            this.name = name;
            this.instanceFactory = instanceFactory;
            this.type = type;
            this.multipleInstances = false;
            /**
             * Properties to be added to the service namespace
             */
            this.serviceProps = {};
            this.instantiationMode = "LAZY" /* LAZY */;
        }
        Component.prototype.setInstantiationMode = function (mode) {
            this.instantiationMode = mode;
            return this;
        };
        Component.prototype.setMultipleInstances = function (multipleInstances) {
            this.multipleInstances = multipleInstances;
            return this;
        };
        Component.prototype.setServiceProps = function (props) {
            this.serviceProps = props;
            return this;
        };
        return Component;
    }());

    function toArray(arr) {
      return Array.prototype.slice.call(arr);
    }

    function promisifyRequest(request) {
      return new Promise(function(resolve, reject) {
        request.onsuccess = function() {
          resolve(request.result);
        };

        request.onerror = function() {
          reject(request.error);
        };
      });
    }

    function promisifyRequestCall(obj, method, args) {
      var request;
      var p = new Promise(function(resolve, reject) {
        request = obj[method].apply(obj, args);
        promisifyRequest(request).then(resolve, reject);
      });

      p.request = request;
      return p;
    }

    function promisifyCursorRequestCall(obj, method, args) {
      var p = promisifyRequestCall(obj, method, args);
      return p.then(function(value) {
        if (!value) return;
        return new Cursor(value, p.request);
      });
    }

    function proxyProperties(ProxyClass, targetProp, properties) {
      properties.forEach(function(prop) {
        Object.defineProperty(ProxyClass.prototype, prop, {
          get: function() {
            return this[targetProp][prop];
          },
          set: function(val) {
            this[targetProp][prop] = val;
          }
        });
      });
    }

    function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {
      properties.forEach(function(prop) {
        if (!(prop in Constructor.prototype)) return;
        ProxyClass.prototype[prop] = function() {
          return promisifyRequestCall(this[targetProp], prop, arguments);
        };
      });
    }

    function proxyMethods(ProxyClass, targetProp, Constructor, properties) {
      properties.forEach(function(prop) {
        if (!(prop in Constructor.prototype)) return;
        ProxyClass.prototype[prop] = function() {
          return this[targetProp][prop].apply(this[targetProp], arguments);
        };
      });
    }

    function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {
      properties.forEach(function(prop) {
        if (!(prop in Constructor.prototype)) return;
        ProxyClass.prototype[prop] = function() {
          return promisifyCursorRequestCall(this[targetProp], prop, arguments);
        };
      });
    }

    function Index(index) {
      this._index = index;
    }

    proxyProperties(Index, '_index', [
      'name',
      'keyPath',
      'multiEntry',
      'unique'
    ]);

    proxyRequestMethods(Index, '_index', IDBIndex, [
      'get',
      'getKey',
      'getAll',
      'getAllKeys',
      'count'
    ]);

    proxyCursorRequestMethods(Index, '_index', IDBIndex, [
      'openCursor',
      'openKeyCursor'
    ]);

    function Cursor(cursor, request) {
      this._cursor = cursor;
      this._request = request;
    }

    proxyProperties(Cursor, '_cursor', [
      'direction',
      'key',
      'primaryKey',
      'value'
    ]);

    proxyRequestMethods(Cursor, '_cursor', IDBCursor, [
      'update',
      'delete'
    ]);

    // proxy 'next' methods
    ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {
      if (!(methodName in IDBCursor.prototype)) return;
      Cursor.prototype[methodName] = function() {
        var cursor = this;
        var args = arguments;
        return Promise.resolve().then(function() {
          cursor._cursor[methodName].apply(cursor._cursor, args);
          return promisifyRequest(cursor._request).then(function(value) {
            if (!value) return;
            return new Cursor(value, cursor._request);
          });
        });
      };
    });

    function ObjectStore(store) {
      this._store = store;
    }

    ObjectStore.prototype.createIndex = function() {
      return new Index(this._store.createIndex.apply(this._store, arguments));
    };

    ObjectStore.prototype.index = function() {
      return new Index(this._store.index.apply(this._store, arguments));
    };

    proxyProperties(ObjectStore, '_store', [
      'name',
      'keyPath',
      'indexNames',
      'autoIncrement'
    ]);

    proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [
      'put',
      'add',
      'delete',
      'clear',
      'get',
      'getAll',
      'getKey',
      'getAllKeys',
      'count'
    ]);

    proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [
      'openCursor',
      'openKeyCursor'
    ]);

    proxyMethods(ObjectStore, '_store', IDBObjectStore, [
      'deleteIndex'
    ]);

    function Transaction(idbTransaction) {
      this._tx = idbTransaction;
      this.complete = new Promise(function(resolve, reject) {
        idbTransaction.oncomplete = function() {
          resolve();
        };
        idbTransaction.onerror = function() {
          reject(idbTransaction.error);
        };
        idbTransaction.onabort = function() {
          reject(idbTransaction.error);
        };
      });
    }

    Transaction.prototype.objectStore = function() {
      return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));
    };

    proxyProperties(Transaction, '_tx', [
      'objectStoreNames',
      'mode'
    ]);

    proxyMethods(Transaction, '_tx', IDBTransaction, [
      'abort'
    ]);

    function UpgradeDB(db, oldVersion, transaction) {
      this._db = db;
      this.oldVersion = oldVersion;
      this.transaction = new Transaction(transaction);
    }

    UpgradeDB.prototype.createObjectStore = function() {
      return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));
    };

    proxyProperties(UpgradeDB, '_db', [
      'name',
      'version',
      'objectStoreNames'
    ]);

    proxyMethods(UpgradeDB, '_db', IDBDatabase, [
      'deleteObjectStore',
      'close'
    ]);

    function DB(db) {
      this._db = db;
    }

    DB.prototype.transaction = function() {
      return new Transaction(this._db.transaction.apply(this._db, arguments));
    };

    proxyProperties(DB, '_db', [
      'name',
      'version',
      'objectStoreNames'
    ]);

    proxyMethods(DB, '_db', IDBDatabase, [
      'close'
    ]);

    // Add cursor iterators
    // TODO: remove this once browsers do the right thing with promises
    ['openCursor', 'openKeyCursor'].forEach(function(funcName) {
      [ObjectStore, Index].forEach(function(Constructor) {
        // Don't create iterateKeyCursor if openKeyCursor doesn't exist.
        if (!(funcName in Constructor.prototype)) return;

        Constructor.prototype[funcName.replace('open', 'iterate')] = function() {
          var args = toArray(arguments);
          var callback = args[args.length - 1];
          var nativeObject = this._store || this._index;
          var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));
          request.onsuccess = function() {
            callback(request.result);
          };
        };
      });
    });

    // polyfill getAll
    [Index, ObjectStore].forEach(function(Constructor) {
      if (Constructor.prototype.getAll) return;
      Constructor.prototype.getAll = function(query, count) {
        var instance = this;
        var items = [];

        return new Promise(function(resolve) {
          instance.iterateCursor(query, function(cursor) {
            if (!cursor) {
              resolve(items);
              return;
            }
            items.push(cursor.value);

            if (count !== undefined && items.length == count) {
              resolve(items);
              return;
            }
            cursor.continue();
          });
        });
      };
    });

    function openDb(name, version, upgradeCallback) {
      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);
      var request = p.request;

      if (request) {
        request.onupgradeneeded = function(event) {
          if (upgradeCallback) {
            upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));
          }
        };
      }

      return p.then(function(db) {
        return new DB(db);
      });
    }

    var name = "@firebase/installations-exp";
    var version = "0.0.900";

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var PENDING_TIMEOUT_MS = 10000;
    var PACKAGE_VERSION = "w:" + version;
    var INTERNAL_AUTH_VERSION = 'FIS_v2';
    var INSTALLATIONS_API_URL = 'https://firebaseinstallations.googleapis.com/v1';
    var TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour
    var SERVICE = 'installations';
    var SERVICE_NAME = 'Installations';

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a$1;
    var ERROR_DESCRIPTION_MAP = (_a$1 = {},
        _a$1["missing-app-config-values" /* MISSING_APP_CONFIG_VALUES */] = 'Missing App configuration value: "{$valueName}"',
        _a$1["not-registered" /* NOT_REGISTERED */] = 'Firebase Installation is not registered.',
        _a$1["installation-not-found" /* INSTALLATION_NOT_FOUND */] = 'Firebase Installation not found.',
        _a$1["request-failed" /* REQUEST_FAILED */] = '{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"',
        _a$1["app-offline" /* APP_OFFLINE */] = 'Could not process request. Application offline.',
        _a$1["delete-pending-registration" /* DELETE_PENDING_REGISTRATION */] = "Can't delete installation while there is a pending registration request.",
        _a$1);
    var ERROR_FACTORY = new ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);
    /** Returns true if error is a FirebaseError that is based on an error from the server. */
    function isServerError(error) {
        return (error instanceof FirebaseError &&
            error.code.includes("request-failed" /* REQUEST_FAILED */));
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function getInstallationsEndpoint(_a) {
        var projectId = _a.projectId;
        return INSTALLATIONS_API_URL + "/projects/" + projectId + "/installations";
    }
    function extractAuthTokenInfoFromResponse(response) {
        return {
            token: response.token,
            requestStatus: 2 /* COMPLETED */,
            expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),
            creationTime: Date.now()
        };
    }
    function getErrorFromResponse(requestName, response) {
        return __awaiter(this, void 0, void 0, function () {
            var responseJson, errorData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, response.json()];
                    case 1:
                        responseJson = _a.sent();
                        errorData = responseJson.error;
                        return [2 /*return*/, ERROR_FACTORY.create("request-failed" /* REQUEST_FAILED */, {
                                requestName: requestName,
                                serverCode: errorData.code,
                                serverMessage: errorData.message,
                                serverStatus: errorData.status
                            })];
                }
            });
        });
    }
    function getHeaders(_a) {
        var apiKey = _a.apiKey;
        return new Headers({
            'Content-Type': 'application/json',
            Accept: 'application/json',
            'x-goog-api-key': apiKey
        });
    }
    function getHeadersWithAuth(appConfig, _a) {
        var refreshToken = _a.refreshToken;
        var headers = getHeaders(appConfig);
        headers.append('Authorization', getAuthorizationHeader(refreshToken));
        return headers;
    }
    /**
     * Calls the passed in fetch wrapper and returns the response.
     * If the returned response has a status of 5xx, re-runs the function once and
     * returns the response.
     */
    function retryIfServerError(fn) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, fn()];
                    case 1:
                        result = _a.sent();
                        if (result.status >= 500 && result.status < 600) {
                            // Internal Server Error. Retry request.
                            return [2 /*return*/, fn()];
                        }
                        return [2 /*return*/, result];
                }
            });
        });
    }
    function getExpiresInFromResponseExpiresIn(responseExpiresIn) {
        // This works because the server will never respond with fractions of a second.
        return Number(responseExpiresIn.replace('s', '000'));
    }
    function getAuthorizationHeader(refreshToken) {
        return INTERNAL_AUTH_VERSION + " " + refreshToken;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function createInstallationRequest(appConfig, _a) {
        var fid = _a.fid;
        return __awaiter(this, void 0, void 0, function () {
            var endpoint, headers, body, request, response, responseValue, registeredInstallationEntry;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        endpoint = getInstallationsEndpoint(appConfig);
                        headers = getHeaders(appConfig);
                        body = {
                            fid: fid,
                            authVersion: INTERNAL_AUTH_VERSION,
                            appId: appConfig.appId,
                            sdkVersion: PACKAGE_VERSION
                        };
                        request = {
                            method: 'POST',
                            headers: headers,
                            body: JSON.stringify(body)
                        };
                        return [4 /*yield*/, retryIfServerError(function () { return fetch(endpoint, request); })];
                    case 1:
                        response = _b.sent();
                        if (!response.ok) return [3 /*break*/, 3];
                        return [4 /*yield*/, response.json()];
                    case 2:
                        responseValue = _b.sent();
                        registeredInstallationEntry = {
                            fid: responseValue.fid || fid,
                            registrationStatus: 2 /* COMPLETED */,
                            refreshToken: responseValue.refreshToken,
                            authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)
                        };
                        return [2 /*return*/, registeredInstallationEntry];
                    case 3: return [4 /*yield*/, getErrorFromResponse('Create Installation', response)];
                    case 4: throw _b.sent();
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Returns a promise that resolves after given time passes. */
    function sleep(ms) {
        return new Promise(function (resolve) {
            setTimeout(resolve, ms);
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function bufferToBase64UrlSafe(array) {
        var b64 = btoa(String.fromCharCode.apply(String, __spread(array)));
        return b64.replace(/\+/g, '-').replace(/\//g, '_');
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var VALID_FID_PATTERN = /^[cdef][\w-]{21}$/;
    var INVALID_FID = '';
    /**
     * Generates a new FID using random values from Web Crypto API.
     * Returns an empty string if FID generation fails for any reason.
     */
    function generateFid() {
        try {
            // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5
            // bytes. our implementation generates a 17 byte array instead.
            var fidByteArray = new Uint8Array(17);
            var crypto_1 = self.crypto || self.msCrypto;
            crypto_1.getRandomValues(fidByteArray);
            // Replace the first 4 random bits with the constant FID header of 0b0111.
            fidByteArray[0] = 112 + (fidByteArray[0] % 16);
            var fid = encode(fidByteArray);
            return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;
        }
        catch (_a) {
            // FID generation errored
            return INVALID_FID;
        }
    }
    /** Converts a FID Uint8Array to a base64 string representation. */
    function encode(fidByteArray) {
        var b64String = bufferToBase64UrlSafe(fidByteArray);
        // Remove the 23rd character that was added because of the extra 4 bits at the
        // end of our 17 byte array, and the '=' padding.
        return b64String.substr(0, 22);
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Returns a string key that can be used to identify the app. */
    function getKey(appConfig) {
        return appConfig.appName + "!" + appConfig.appId;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var fidChangeCallbacks = new Map();
    /**
     * Calls the onIdChange callbacks with the new FID value, and broadcasts the
     * change to other tabs.
     */
    function fidChanged(appConfig, fid) {
        var key = getKey(appConfig);
        callFidChangeCallbacks(key, fid);
        broadcastFidChange(key, fid);
    }
    function callFidChangeCallbacks(key, fid) {
        var e_1, _a;
        var callbacks = fidChangeCallbacks.get(key);
        if (!callbacks) {
            return;
        }
        try {
            for (var callbacks_1 = __values(callbacks), callbacks_1_1 = callbacks_1.next(); !callbacks_1_1.done; callbacks_1_1 = callbacks_1.next()) {
                var callback = callbacks_1_1.value;
                callback(fid);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (callbacks_1_1 && !callbacks_1_1.done && (_a = callbacks_1.return)) _a.call(callbacks_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    function broadcastFidChange(key, fid) {
        var channel = getBroadcastChannel();
        if (channel) {
            channel.postMessage({ key: key, fid: fid });
        }
        closeBroadcastChannel();
    }
    var broadcastChannel = null;
    /** Opens and returns a BroadcastChannel if it is supported by the browser. */
    function getBroadcastChannel() {
        if (!broadcastChannel && 'BroadcastChannel' in self) {
            broadcastChannel = new BroadcastChannel('[Firebase] FID Change');
            broadcastChannel.onmessage = function (e) {
                callFidChangeCallbacks(e.data.key, e.data.fid);
            };
        }
        return broadcastChannel;
    }
    function closeBroadcastChannel() {
        if (fidChangeCallbacks.size === 0 && broadcastChannel) {
            broadcastChannel.close();
            broadcastChannel = null;
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DATABASE_NAME = 'firebase-installations-database';
    var DATABASE_VERSION = 1;
    var OBJECT_STORE_NAME = 'firebase-installations-store';
    var dbPromise = null;
    function getDbPromise() {
        if (!dbPromise) {
            dbPromise = openDb(DATABASE_NAME, DATABASE_VERSION, function (upgradeDB) {
                // We don't use 'break' in this switch statement, the fall-through
                // behavior is what we want, because if there are multiple versions between
                // the old version and the current version, we want ALL the migrations
                // that correspond to those versions to run, not only the last one.
                // eslint-disable-next-line default-case
                switch (upgradeDB.oldVersion) {
                    case 0:
                        upgradeDB.createObjectStore(OBJECT_STORE_NAME);
                }
            });
        }
        return dbPromise;
    }
    /** Assigns or overwrites the record for the given key with the given value. */
    function set(appConfig, value) {
        return __awaiter(this, void 0, void 0, function () {
            var key, db, tx, objectStore, oldValue;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = getKey(appConfig);
                        return [4 /*yield*/, getDbPromise()];
                    case 1:
                        db = _a.sent();
                        tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
                        objectStore = tx.objectStore(OBJECT_STORE_NAME);
                        return [4 /*yield*/, objectStore.get(key)];
                    case 2:
                        oldValue = _a.sent();
                        return [4 /*yield*/, objectStore.put(value, key)];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, tx.complete];
                    case 4:
                        _a.sent();
                        if (!oldValue || oldValue.fid !== value.fid) {
                            fidChanged(appConfig, value.fid);
                        }
                        return [2 /*return*/, value];
                }
            });
        });
    }
    /** Removes record(s) from the objectStore that match the given key. */
    function remove(appConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var key, db, tx;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = getKey(appConfig);
                        return [4 /*yield*/, getDbPromise()];
                    case 1:
                        db = _a.sent();
                        tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
                        return [4 /*yield*/, tx.objectStore(OBJECT_STORE_NAME).delete(key)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, tx.complete];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    }
    /**
     * Atomically updates a record with the result of updateFn, which gets
     * called with the current value. If newValue is undefined, the record is
     * deleted instead.
     * @return Updated value
     */
    function update(appConfig, updateFn) {
        return __awaiter(this, void 0, void 0, function () {
            var key, db, tx, store, oldValue, newValue;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = getKey(appConfig);
                        return [4 /*yield*/, getDbPromise()];
                    case 1:
                        db = _a.sent();
                        tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
                        store = tx.objectStore(OBJECT_STORE_NAME);
                        return [4 /*yield*/, store.get(key)];
                    case 2:
                        oldValue = _a.sent();
                        newValue = updateFn(oldValue);
                        if (!(newValue === undefined)) return [3 /*break*/, 4];
                        return [4 /*yield*/, store.delete(key)];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 4: return [4 /*yield*/, store.put(newValue, key)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [4 /*yield*/, tx.complete];
                    case 7:
                        _a.sent();
                        if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {
                            fidChanged(appConfig, newValue.fid);
                        }
                        return [2 /*return*/, newValue];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Updates and returns the InstallationEntry from the database.
     * Also triggers a registration request if it is necessary and possible.
     */
    function getInstallationEntry(appConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var registrationPromise, installationEntry;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, update(appConfig, function (oldEntry) {
                            var installationEntry = updateOrCreateInstallationEntry(oldEntry);
                            var entryWithPromise = triggerRegistrationIfNecessary(appConfig, installationEntry);
                            registrationPromise = entryWithPromise.registrationPromise;
                            return entryWithPromise.installationEntry;
                        })];
                    case 1:
                        installationEntry = _b.sent();
                        if (!(installationEntry.fid === INVALID_FID)) return [3 /*break*/, 3];
                        _a = {};
                        return [4 /*yield*/, registrationPromise];
                    case 2: 
                    // FID generation failed. Waiting for the FID from the server.
                    return [2 /*return*/, (_a.installationEntry = _b.sent(), _a)];
                    case 3: return [2 /*return*/, {
                            installationEntry: installationEntry,
                            registrationPromise: registrationPromise
                        }];
                }
            });
        });
    }
    /**
     * Creates a new Installation Entry if one does not exist.
     * Also clears timed out pending requests.
     */
    function updateOrCreateInstallationEntry(oldEntry) {
        var entry = oldEntry || {
            fid: generateFid(),
            registrationStatus: 0 /* NOT_STARTED */
        };
        return clearTimedOutRequest(entry);
    }
    /**
     * If the Firebase Installation is not registered yet, this will trigger the
     * registration and return an InProgressInstallationEntry.
     *
     * If registrationPromise does not exist, the installationEntry is guaranteed
     * to be registered.
     */
    function triggerRegistrationIfNecessary(appConfig, installationEntry) {
        if (installationEntry.registrationStatus === 0 /* NOT_STARTED */) {
            if (!navigator.onLine) {
                // Registration required but app is offline.
                var registrationPromiseWithError = Promise.reject(ERROR_FACTORY.create("app-offline" /* APP_OFFLINE */));
                return {
                    installationEntry: installationEntry,
                    registrationPromise: registrationPromiseWithError
                };
            }
            // Try registering. Change status to IN_PROGRESS.
            var inProgressEntry = {
                fid: installationEntry.fid,
                registrationStatus: 1 /* IN_PROGRESS */,
                registrationTime: Date.now()
            };
            var registrationPromise = registerInstallation(appConfig, inProgressEntry);
            return { installationEntry: inProgressEntry, registrationPromise: registrationPromise };
        }
        else if (installationEntry.registrationStatus === 1 /* IN_PROGRESS */) {
            return {
                installationEntry: installationEntry,
                registrationPromise: waitUntilFidRegistration(appConfig)
            };
        }
        else {
            return { installationEntry: installationEntry };
        }
    }
    /** This will be executed only once for each new Firebase Installation. */
    function registerInstallation(appConfig, installationEntry) {
        return __awaiter(this, void 0, void 0, function () {
            var registeredInstallationEntry, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 7]);
                        return [4 /*yield*/, createInstallationRequest(appConfig, installationEntry)];
                    case 1:
                        registeredInstallationEntry = _a.sent();
                        return [2 /*return*/, set(appConfig, registeredInstallationEntry)];
                    case 2:
                        e_1 = _a.sent();
                        if (!(isServerError(e_1) && e_1.customData.serverCode === 409)) return [3 /*break*/, 4];
                        // Server returned a "FID can not be used" error.
                        // Generate a new ID next time.
                        return [4 /*yield*/, remove(appConfig)];
                    case 3:
                        // Server returned a "FID can not be used" error.
                        // Generate a new ID next time.
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 4: 
                    // Registration failed. Set FID as not registered.
                    return [4 /*yield*/, set(appConfig, {
                            fid: installationEntry.fid,
                            registrationStatus: 0 /* NOT_STARTED */
                        })];
                    case 5:
                        // Registration failed. Set FID as not registered.
                        _a.sent();
                        _a.label = 6;
                    case 6: throw e_1;
                    case 7: return [2 /*return*/];
                }
            });
        });
    }
    /** Call if FID registration is pending in another request. */
    function waitUntilFidRegistration(appConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var entry, _a, installationEntry, registrationPromise;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, updateInstallationRequest(appConfig)];
                    case 1:
                        entry = _b.sent();
                        _b.label = 2;
                    case 2:
                        if (!(entry.registrationStatus === 1 /* IN_PROGRESS */)) return [3 /*break*/, 5];
                        // createInstallation request still in progress.
                        return [4 /*yield*/, sleep(100)];
                    case 3:
                        // createInstallation request still in progress.
                        _b.sent();
                        return [4 /*yield*/, updateInstallationRequest(appConfig)];
                    case 4:
                        entry = _b.sent();
                        return [3 /*break*/, 2];
                    case 5:
                        if (!(entry.registrationStatus === 0 /* NOT_STARTED */)) return [3 /*break*/, 7];
                        return [4 /*yield*/, getInstallationEntry(appConfig)];
                    case 6:
                        _a = _b.sent(), installationEntry = _a.installationEntry, registrationPromise = _a.registrationPromise;
                        if (registrationPromise) {
                            return [2 /*return*/, registrationPromise];
                        }
                        else {
                            // if there is no registrationPromise, entry is registered.
                            return [2 /*return*/, installationEntry];
                        }
                    case 7: return [2 /*return*/, entry];
                }
            });
        });
    }
    /**
     * Called only if there is a CreateInstallation request in progress.
     *
     * Updates the InstallationEntry in the DB based on the status of the
     * CreateInstallation request.
     *
     * Returns the updated InstallationEntry.
     */
    function updateInstallationRequest(appConfig) {
        return update(appConfig, function (oldEntry) {
            if (!oldEntry) {
                throw ERROR_FACTORY.create("installation-not-found" /* INSTALLATION_NOT_FOUND */);
            }
            return clearTimedOutRequest(oldEntry);
        });
    }
    function clearTimedOutRequest(entry) {
        if (hasInstallationRequestTimedOut(entry)) {
            return {
                fid: entry.fid,
                registrationStatus: 0 /* NOT_STARTED */
            };
        }
        return entry;
    }
    function hasInstallationRequestTimedOut(installationEntry) {
        return (installationEntry.registrationStatus === 1 /* IN_PROGRESS */ &&
            installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now());
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function generateAuthTokenRequest(_a, installationEntry) {
        var appConfig = _a.appConfig, platformLoggerProvider = _a.platformLoggerProvider;
        return __awaiter(this, void 0, void 0, function () {
            var endpoint, headers, platformLogger, body, request, response, responseValue, completedAuthToken;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);
                        headers = getHeadersWithAuth(appConfig, installationEntry);
                        platformLogger = platformLoggerProvider.getImmediate({
                            optional: true
                        });
                        if (platformLogger) {
                            headers.append('x-firebase-client', platformLogger.getPlatformInfoString());
                        }
                        body = {
                            installation: {
                                sdkVersion: PACKAGE_VERSION
                            }
                        };
                        request = {
                            method: 'POST',
                            headers: headers,
                            body: JSON.stringify(body)
                        };
                        return [4 /*yield*/, retryIfServerError(function () { return fetch(endpoint, request); })];
                    case 1:
                        response = _b.sent();
                        if (!response.ok) return [3 /*break*/, 3];
                        return [4 /*yield*/, response.json()];
                    case 2:
                        responseValue = _b.sent();
                        completedAuthToken = extractAuthTokenInfoFromResponse(responseValue);
                        return [2 /*return*/, completedAuthToken];
                    case 3: return [4 /*yield*/, getErrorFromResponse('Generate Auth Token', response)];
                    case 4: throw _b.sent();
                }
            });
        });
    }
    function getGenerateAuthTokenEndpoint(appConfig, _a) {
        var fid = _a.fid;
        return getInstallationsEndpoint(appConfig) + "/" + fid + "/authTokens:generate";
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns a valid authentication token for the installation. Generates a new
     * token if one doesn't exist, is expired or about to expire.
     *
     * Should only be called if the Firebase Installation is registered.
     */
    function refreshAuthToken(installations, forceRefresh) {
        if (forceRefresh === void 0) { forceRefresh = false; }
        return __awaiter(this, void 0, void 0, function () {
            var tokenPromise, entry, authToken, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, update(installations.appConfig, function (oldEntry) {
                            if (!isEntryRegistered(oldEntry)) {
                                throw ERROR_FACTORY.create("not-registered" /* NOT_REGISTERED */);
                            }
                            var oldAuthToken = oldEntry.authToken;
                            if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {
                                // There is a valid token in the DB.
                                return oldEntry;
                            }
                            else if (oldAuthToken.requestStatus === 1 /* IN_PROGRESS */) {
                                // There already is a token request in progress.
                                tokenPromise = waitUntilAuthTokenRequest(installations, forceRefresh);
                                return oldEntry;
                            }
                            else {
                                // No token or token expired.
                                if (!navigator.onLine) {
                                    throw ERROR_FACTORY.create("app-offline" /* APP_OFFLINE */);
                                }
                                var inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);
                                tokenPromise = fetchAuthTokenFromServer(installations, inProgressEntry);
                                return inProgressEntry;
                            }
                        })];
                    case 1:
                        entry = _b.sent();
                        if (!tokenPromise) return [3 /*break*/, 3];
                        return [4 /*yield*/, tokenPromise];
                    case 2:
                        _a = _b.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        _a = entry.authToken;
                        _b.label = 4;
                    case 4:
                        authToken = _a;
                        return [2 /*return*/, authToken];
                }
            });
        });
    }
    /**
     * Call only if FID is registered and Auth Token request is in progress.
     *
     * Waits until the current pending request finishes. If the request times out,
     * tries once in this thread as well.
     */
    function waitUntilAuthTokenRequest(installations, forceRefresh) {
        return __awaiter(this, void 0, void 0, function () {
            var entry, authToken;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, updateAuthTokenRequest(installations.appConfig)];
                    case 1:
                        entry = _a.sent();
                        _a.label = 2;
                    case 2:
                        if (!(entry.authToken.requestStatus === 1 /* IN_PROGRESS */)) return [3 /*break*/, 5];
                        // generateAuthToken still in progress.
                        return [4 /*yield*/, sleep(100)];
                    case 3:
                        // generateAuthToken still in progress.
                        _a.sent();
                        return [4 /*yield*/, updateAuthTokenRequest(installations.appConfig)];
                    case 4:
                        entry = _a.sent();
                        return [3 /*break*/, 2];
                    case 5:
                        authToken = entry.authToken;
                        if (authToken.requestStatus === 0 /* NOT_STARTED */) {
                            // The request timed out or failed in a different call. Try again.
                            return [2 /*return*/, refreshAuthToken(installations, forceRefresh)];
                        }
                        else {
                            return [2 /*return*/, authToken];
                        }
                }
            });
        });
    }
    /**
     * Called only if there is a GenerateAuthToken request in progress.
     *
     * Updates the InstallationEntry in the DB based on the status of the
     * GenerateAuthToken request.
     *
     * Returns the updated InstallationEntry.
     */
    function updateAuthTokenRequest(appConfig) {
        return update(appConfig, function (oldEntry) {
            if (!isEntryRegistered(oldEntry)) {
                throw ERROR_FACTORY.create("not-registered" /* NOT_REGISTERED */);
            }
            var oldAuthToken = oldEntry.authToken;
            if (hasAuthTokenRequestTimedOut(oldAuthToken)) {
                return __assign(__assign({}, oldEntry), { authToken: { requestStatus: 0 /* NOT_STARTED */ } });
            }
            return oldEntry;
        });
    }
    function fetchAuthTokenFromServer(installations, installationEntry) {
        return __awaiter(this, void 0, void 0, function () {
            var authToken, updatedInstallationEntry, e_1, updatedInstallationEntry;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 8]);
                        return [4 /*yield*/, generateAuthTokenRequest(installations, installationEntry)];
                    case 1:
                        authToken = _a.sent();
                        updatedInstallationEntry = __assign(__assign({}, installationEntry), { authToken: authToken });
                        return [4 /*yield*/, set(installations.appConfig, updatedInstallationEntry)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, authToken];
                    case 3:
                        e_1 = _a.sent();
                        if (!(isServerError(e_1) &&
                            (e_1.customData.serverCode === 401 || e_1.customData.serverCode === 404))) return [3 /*break*/, 5];
                        // Server returned a "FID not found" or a "Invalid authentication" error.
                        // Generate a new ID next time.
                        return [4 /*yield*/, remove(installations.appConfig)];
                    case 4:
                        // Server returned a "FID not found" or a "Invalid authentication" error.
                        // Generate a new ID next time.
                        _a.sent();
                        return [3 /*break*/, 7];
                    case 5:
                        updatedInstallationEntry = __assign(__assign({}, installationEntry), { authToken: { requestStatus: 0 /* NOT_STARTED */ } });
                        return [4 /*yield*/, set(installations.appConfig, updatedInstallationEntry)];
                    case 6:
                        _a.sent();
                        _a.label = 7;
                    case 7: throw e_1;
                    case 8: return [2 /*return*/];
                }
            });
        });
    }
    function isEntryRegistered(installationEntry) {
        return (installationEntry !== undefined &&
            installationEntry.registrationStatus === 2 /* COMPLETED */);
    }
    function isAuthTokenValid(authToken) {
        return (authToken.requestStatus === 2 /* COMPLETED */ &&
            !isAuthTokenExpired(authToken));
    }
    function isAuthTokenExpired(authToken) {
        var now = Date.now();
        return (now < authToken.creationTime ||
            authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER);
    }
    /** Returns an updated InstallationEntry with an InProgressAuthToken. */
    function makeAuthTokenRequestInProgressEntry(oldEntry) {
        var inProgressAuthToken = {
            requestStatus: 1 /* IN_PROGRESS */,
            requestTime: Date.now()
        };
        return __assign(__assign({}, oldEntry), { authToken: inProgressAuthToken });
    }
    function hasAuthTokenRequestTimedOut(authToken) {
        return (authToken.requestStatus === 1 /* IN_PROGRESS */ &&
            authToken.requestTime + PENDING_TIMEOUT_MS < Date.now());
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Creates a Firebase Installation if there isn't one for the app and
     * returns the Installation ID.
     *
     * @public
     */
    function getId(installations) {
        return __awaiter(this, void 0, void 0, function () {
            var installationsImpl, _a, installationEntry, registrationPromise;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        installationsImpl = installations;
                        return [4 /*yield*/, getInstallationEntry(installationsImpl.appConfig)];
                    case 1:
                        _a = _b.sent(), installationEntry = _a.installationEntry, registrationPromise = _a.registrationPromise;
                        if (registrationPromise) {
                            registrationPromise.catch(console.error);
                        }
                        else {
                            // If the installation is already registered, update the authentication
                            // token if needed.
                            refreshAuthToken(installationsImpl).catch(console.error);
                        }
                        return [2 /*return*/, installationEntry.fid];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns an Installation auth token, identifying the current Firebase Installation.
     *
     * @public
     */
    function getToken(installations, forceRefresh) {
        if (forceRefresh === void 0) { forceRefresh = false; }
        return __awaiter(this, void 0, void 0, function () {
            var installationsImpl, authToken;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        installationsImpl = installations;
                        return [4 /*yield*/, completeInstallationRegistration(installationsImpl.appConfig)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, refreshAuthToken(installationsImpl, forceRefresh)];
                    case 2:
                        authToken = _a.sent();
                        return [2 /*return*/, authToken.token];
                }
            });
        });
    }
    function completeInstallationRegistration(appConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var registrationPromise;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, getInstallationEntry(appConfig)];
                    case 1:
                        registrationPromise = (_a.sent()).registrationPromise;
                        if (!registrationPromise) return [3 /*break*/, 3];
                        // A createInstallation request is in progress. Wait until it finishes.
                        return [4 /*yield*/, registrationPromise];
                    case 2:
                        // A createInstallation request is in progress. Wait until it finishes.
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function extractAppConfig(app) {
        var e_1, _a;
        if (!app || !app.options) {
            throw getMissingValueError('App Configuration');
        }
        if (!app.name) {
            throw getMissingValueError('App Name');
        }
        // Required app config keys
        var configKeys = [
            'projectId',
            'apiKey',
            'appId'
        ];
        try {
            for (var configKeys_1 = __values(configKeys), configKeys_1_1 = configKeys_1.next(); !configKeys_1_1.done; configKeys_1_1 = configKeys_1.next()) {
                var keyName = configKeys_1_1.value;
                if (!app.options[keyName]) {
                    throw getMissingValueError(keyName);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (configKeys_1_1 && !configKeys_1_1.done && (_a = configKeys_1.return)) _a.call(configKeys_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return {
            appName: app.name,
            projectId: app.options.projectId,
            apiKey: app.options.apiKey,
            appId: app.options.appId
        };
    }
    function getMissingValueError(valueName) {
        return ERROR_FACTORY.create("missing-app-config-values" /* MISSING_APP_CONFIG_VALUES */, {
            valueName: valueName
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var INSTALLATIONS_NAME = 'installations-exp';
    var INSTALLATIONS_NAME_INTERNAL = 'installations-exp-internal';
    var publicFactory = function (container) {
        var app$1 = container.getProvider('app-exp').getImmediate();
        // Throws if app isn't configured properly.
        var appConfig = extractAppConfig(app$1);
        var platformLoggerProvider = app._getProvider(app$1, 'platform-logger');
        var installationsImpl = {
            app: app$1,
            appConfig: appConfig,
            platformLoggerProvider: platformLoggerProvider,
            _delete: function () { return Promise.resolve(); }
        };
        return installationsImpl;
    };
    var internalFactory = function (container) {
        var app$1 = container.getProvider('app-exp').getImmediate();
        // Internal FIS instance relies on public FIS instance.
        var installations = app._getProvider(app$1, INSTALLATIONS_NAME).getImmediate();
        var installationsInternal = {
            getId: function () { return getId(installations); },
            getToken: function (forceRefresh) { return getToken(installations, forceRefresh); }
        };
        return installationsInternal;
    };
    function registerInstallations() {
        app._registerComponent(new Component(INSTALLATIONS_NAME, publicFactory, "PUBLIC" /* PUBLIC */));
        app._registerComponent(new Component(INSTALLATIONS_NAME_INTERNAL, internalFactory, "PRIVATE" /* PRIVATE */));
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    registerInstallations();
    app.registerVersion(name, version);

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Type constant for Firebase Analytics.
     */
    var ANALYTICS_TYPE = 'analytics-exp';
    // Key to attach FID to in gtag params.
    var GA_FID_KEY = 'firebase_id';
    var ORIGIN_KEY = 'origin';
    var FETCH_TIMEOUT_MILLIS = 60 * 1000;
    var DYNAMIC_CONFIG_URL = 'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';
    var GTAG_URL = 'https://www.googletagmanager.com/gtag/js';

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var logger = new Logger('@firebase/analytics');

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Makeshift polyfill for Promise.allSettled(). Resolves when all promises
     * have either resolved or rejected.
     *
     * @param promises Array of promises to wait for.
     */
    function promiseAllSettled(promises) {
        return Promise.all(promises.map(function (promise) { return promise.catch(function (e) { return e; }); }));
    }
    /**
     * Inserts gtag script tag into the page to asynchronously download gtag.
     * @param dataLayerName Name of datalayer (most often the default, "_dataLayer").
     */
    function insertScriptTag(dataLayerName, measurementId) {
        var script = document.createElement('script');
        // We are not providing an analyticsId in the URL because it would trigger a `page_view`
        // without fid. We will initialize ga-id using gtag (config) command together with fid.
        script.src = GTAG_URL + "?l=" + dataLayerName + "&id=" + measurementId;
        script.async = true;
        document.head.appendChild(script);
    }
    /**
     * Get reference to, or create, global datalayer.
     * @param dataLayerName Name of datalayer (most often the default, "_dataLayer").
     */
    function getOrCreateDataLayer(dataLayerName) {
        // Check for existing dataLayer and create if needed.
        var dataLayer = [];
        if (Array.isArray(window[dataLayerName])) {
            dataLayer = window[dataLayerName];
        }
        else {
            window[dataLayerName] = dataLayer;
        }
        return dataLayer;
    }
    /**
     * Wrapped gtag logic when gtag is called with 'config' command.
     *
     * @param gtagCore Basic gtag function that just appends to dataLayer.
     * @param initializationPromisesMap Map of appIds to their initialization promises.
     * @param dynamicConfigPromisesList Array of dynamic config fetch promises.
     * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.
     * @param measurementId GA Measurement ID to set config for.
     * @param gtagParams Gtag config params to set.
     */
    function gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, measurementId, gtagParams) {
        return __awaiter(this, void 0, void 0, function () {
            var correspondingAppId, dynamicConfigResults, foundConfig, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        correspondingAppId = measurementIdToAppId[measurementId];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 7, , 8]);
                        if (!correspondingAppId) return [3 /*break*/, 3];
                        return [4 /*yield*/, initializationPromisesMap[correspondingAppId]];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 3: return [4 /*yield*/, promiseAllSettled(dynamicConfigPromisesList)];
                    case 4:
                        dynamicConfigResults = _a.sent();
                        foundConfig = dynamicConfigResults.find(function (config) { return config.measurementId === measurementId; });
                        if (!foundConfig) return [3 /*break*/, 6];
                        return [4 /*yield*/, initializationPromisesMap[foundConfig.appId]];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [3 /*break*/, 8];
                    case 7:
                        e_1 = _a.sent();
                        logger.error(e_1);
                        return [3 /*break*/, 8];
                    case 8:
                        gtagCore("config" /* CONFIG */, measurementId, gtagParams);
                        return [2 /*return*/];
                }
            });
        });
    }
    /**
     * Wrapped gtag logic when gtag is called with 'event' command.
     *
     * @param gtagCore Basic gtag function that just appends to dataLayer.
     * @param initializationPromisesMap Map of appIds to their initialization promises.
     * @param dynamicConfigPromisesList Array of dynamic config fetch promises.
     * @param measurementId GA Measurement ID to log event to.
     * @param gtagParams Params to log with this event.
     */
    function gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementId, gtagParams) {
        return __awaiter(this, void 0, void 0, function () {
            var initializationPromisesToWaitFor, gaSendToList, dynamicConfigResults, _loop_1, _i, gaSendToList_1, sendToId, state_1, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 4, , 5]);
                        initializationPromisesToWaitFor = [];
                        if (!(gtagParams && gtagParams['send_to'])) return [3 /*break*/, 2];
                        gaSendToList = gtagParams['send_to'];
                        // Make it an array if is isn't, so it can be dealt with the same way.
                        if (!Array.isArray(gaSendToList)) {
                            gaSendToList = [gaSendToList];
                        }
                        return [4 /*yield*/, promiseAllSettled(dynamicConfigPromisesList)];
                    case 1:
                        dynamicConfigResults = _a.sent();
                        _loop_1 = function (sendToId) {
                            // Any fetched dynamic measurement ID that matches this 'send_to' ID
                            var foundConfig = dynamicConfigResults.find(function (config) { return config.measurementId === sendToId; });
                            var initializationPromise = foundConfig && initializationPromisesMap[foundConfig.appId];
                            if (initializationPromise) {
                                initializationPromisesToWaitFor.push(initializationPromise);
                            }
                            else {
                                // Found an item in 'send_to' that is not associated
                                // directly with an FID, possibly a group.  Empty this array,
                                // exit the loop early, and let it get populated below.
                                initializationPromisesToWaitFor = [];
                                return "break";
                            }
                        };
                        for (_i = 0, gaSendToList_1 = gaSendToList; _i < gaSendToList_1.length; _i++) {
                            sendToId = gaSendToList_1[_i];
                            state_1 = _loop_1(sendToId);
                            if (state_1 === "break")
                                break;
                        }
                        _a.label = 2;
                    case 2:
                        // This will be unpopulated if there was no 'send_to' field , or
                        // if not all entries in the 'send_to' field could be mapped to
                        // a FID. In these cases, wait on all pending initialization promises.
                        if (initializationPromisesToWaitFor.length === 0) {
                            initializationPromisesToWaitFor = Object.values(initializationPromisesMap);
                        }
                        // Run core gtag function with args after all relevant initialization
                        // promises have been resolved.
                        return [4 /*yield*/, Promise.all(initializationPromisesToWaitFor)];
                    case 3:
                        // Run core gtag function with args after all relevant initialization
                        // promises have been resolved.
                        _a.sent();
                        // Workaround for http://b/141370449 - third argument cannot be undefined.
                        gtagCore("event" /* EVENT */, measurementId, gtagParams || {});
                        return [3 /*break*/, 5];
                    case 4:
                        e_2 = _a.sent();
                        logger.error(e_2);
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    }
    /**
     * Wraps a standard gtag function with extra code to wait for completion of
     * relevant initialization promises before sending requests.
     *
     * @param gtagCore Basic gtag function that just appends to dataLayer.
     * @param initializationPromisesMap Map of appIds to their initialization promises.
     * @param dynamicConfigPromisesList Array of dynamic config fetch promises.
     * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.
     */
    function wrapGtag(gtagCore, 
    /**
     * Allows wrapped gtag calls to wait on whichever intialization promises are required,
     * depending on the contents of the gtag params' `send_to` field, if any.
     */
    initializationPromisesMap, 
    /**
     * Wrapped gtag calls sometimes require all dynamic config fetches to have returned
     * before determining what initialization promises (which include FIDs) to wait for.
     */
    dynamicConfigPromisesList, 
    /**
     * Wrapped gtag config calls can narrow down which initialization promise (with FID)
     * to wait for if the measurementId is already fetched, by getting the corresponding appId,
     * which is the key for the initialization promises map.
     */
    measurementIdToAppId) {
        /**
         * Wrapper around gtag that ensures FID is sent with gtag calls.
         * @param command Gtag command type.
         * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.
         * @param gtagParams Params if event is EVENT/CONFIG.
         */
        function gtagWrapper(command, idOrNameOrParams, gtagParams) {
            return __awaiter(this, void 0, void 0, function () {
                var e_3;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 6, , 7]);
                            if (!(command === "event" /* EVENT */)) return [3 /*break*/, 2];
                            // If EVENT, second arg must be measurementId.
                            return [4 /*yield*/, gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, idOrNameOrParams, gtagParams)];
                        case 1:
                            // If EVENT, second arg must be measurementId.
                            _a.sent();
                            return [3 /*break*/, 5];
                        case 2:
                            if (!(command === "config" /* CONFIG */)) return [3 /*break*/, 4];
                            // If CONFIG, second arg must be measurementId.
                            return [4 /*yield*/, gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, idOrNameOrParams, gtagParams)];
                        case 3:
                            // If CONFIG, second arg must be measurementId.
                            _a.sent();
                            return [3 /*break*/, 5];
                        case 4:
                            // If SET, second arg must be params.
                            gtagCore("set" /* SET */, idOrNameOrParams);
                            _a.label = 5;
                        case 5: return [3 /*break*/, 7];
                        case 6:
                            e_3 = _a.sent();
                            logger.error(e_3);
                            return [3 /*break*/, 7];
                        case 7: return [2 /*return*/];
                    }
                });
            });
        }
        return gtagWrapper;
    }
    /**
     * Creates global gtag function or wraps existing one if found.
     * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and
     * 'event' calls that belong to the GAID associated with this Firebase instance.
     *
     * @param initializationPromisesMap Map of appIds to their initialization promises.
     * @param dynamicConfigPromisesList Array of dynamic config fetch promises.
     * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.
     * @param dataLayerName Name of global GA datalayer array.
     * @param gtagFunctionName Name of global gtag function ("gtag" if not user-specified).
     */
    function wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagFunctionName) {
        // Create a basic core gtag function
        var gtagCore = function () {
            var _args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                _args[_i] = arguments[_i];
            }
            // Must push IArguments object, not an array.
            window[dataLayerName].push(arguments);
        };
        // Replace it with existing one if found
        if (window[gtagFunctionName] &&
            typeof window[gtagFunctionName] === 'function') {
            // @ts-ignore
            gtagCore = window[gtagFunctionName];
        }
        window[gtagFunctionName] = wrapGtag(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId);
        return {
            gtagCore: gtagCore,
            wrappedGtag: window[gtagFunctionName]
        };
    }
    /**
     * Returns first script tag in DOM matching our gtag url pattern.
     */
    function findGtagScriptOnPage() {
        var scriptTags = window.document.getElementsByTagName('script');
        for (var _i = 0, _a = Object.values(scriptTags); _i < _a.length; _i++) {
            var tag = _a[_i];
            if (tag.src && tag.src.includes(GTAG_URL)) {
                return tag;
            }
        }
        return null;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a$2;
    var ERRORS = (_a$2 = {},
        _a$2["already-exists" /* ALREADY_EXISTS */] = 'A Firebase Analytics instance with the appId {$id} ' +
            ' already exists. ' +
            'Only one Firebase Analytics instance can be created for each appId.',
        _a$2["already-initialized" /* ALREADY_INITIALIZED */] = 'Firebase Analytics has already been initialized.' +
            'settings() must be called before initializing any Analytics instance' +
            'or it will have no effect.',
        _a$2["interop-component-reg-failed" /* INTEROP_COMPONENT_REG_FAILED */] = 'Firebase Analytics Interop Component failed to instantiate: {$reason}',
        _a$2["invalid-analytics-context" /* INVALID_ANALYTICS_CONTEXT */] = 'Firebase Analytics is not supported in this environment. ' +
            'Wrap initialization of analytics in analytics.isSupported() ' +
            'to prevent initialization in unsupported environments. Details: {$errorInfo}',
        _a$2["indexeddb-unavailable" /* INDEXEDDB_UNAVAILABLE */] = 'IndexedDB unavailable or restricted in this environment. ' +
            'Wrap initialization of analytics in analytics.isSupported() ' +
            'to prevent initialization in unsupported environments. Details: {$errorInfo}',
        _a$2["fetch-throttle" /* FETCH_THROTTLE */] = 'The config fetch request timed out while in an exponential backoff state.' +
            ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',
        _a$2["config-fetch-failed" /* CONFIG_FETCH_FAILED */] = 'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}',
        _a$2["no-api-key" /* NO_API_KEY */] = 'The "apiKey" field is empty in the local Firebase config. Firebase Analytics requires this field to' +
            'contain a valid API key.',
        _a$2["no-app-id" /* NO_APP_ID */] = 'The "appId" field is empty in the local Firebase config. Firebase Analytics requires this field to' +
            'contain a valid app ID.',
        _a$2);
    var ERROR_FACTORY$1 = new ErrorFactory('analytics', 'Analytics', ERRORS);

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Backoff factor for 503 errors, which we want to be conservative about
     * to avoid overloading servers. Each retry interval will be
     * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one
     * will be ~30 seconds (with fuzzing).
     */
    var LONG_RETRY_FACTOR = 30;
    /**
     * Base wait interval to multiplied by backoffFactor^backoffCount.
     */
    var BASE_INTERVAL_MILLIS = 1000;
    /**
     * Stubbable retry data storage class.
     */
    var RetryData = /** @class */ (function () {
        function RetryData(throttleMetadata, intervalMillis) {
            if (throttleMetadata === void 0) { throttleMetadata = {}; }
            if (intervalMillis === void 0) { intervalMillis = BASE_INTERVAL_MILLIS; }
            this.throttleMetadata = throttleMetadata;
            this.intervalMillis = intervalMillis;
        }
        RetryData.prototype.getThrottleMetadata = function (appId) {
            return this.throttleMetadata[appId];
        };
        RetryData.prototype.setThrottleMetadata = function (appId, metadata) {
            this.throttleMetadata[appId] = metadata;
        };
        RetryData.prototype.deleteThrottleMetadata = function (appId) {
            delete this.throttleMetadata[appId];
        };
        return RetryData;
    }());
    var defaultRetryData = new RetryData();
    /**
     * Set GET request headers.
     * @param apiKey App API key.
     */
    function getHeaders$1(apiKey) {
        return new Headers({
            Accept: 'application/json',
            'x-goog-api-key': apiKey
        });
    }
    /**
     * Fetches dynamic config from backend.
     * @param app Firebase app to fetch config for.
     */
    function fetchDynamicConfig(appFields) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var appId, apiKey, request, appUrl, response, errorMessage, jsonResponse, _ignored_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        appId = appFields.appId, apiKey = appFields.apiKey;
                        request = {
                            method: 'GET',
                            headers: getHeaders$1(apiKey)
                        };
                        appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);
                        return [4 /*yield*/, fetch(appUrl, request)];
                    case 1:
                        response = _b.sent();
                        if (!(response.status !== 200 && response.status !== 304)) return [3 /*break*/, 6];
                        errorMessage = '';
                        _b.label = 2;
                    case 2:
                        _b.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, response.json()];
                    case 3:
                        jsonResponse = (_b.sent());
                        if ((_a = jsonResponse.error) === null || _a === void 0 ? void 0 : _a.message) {
                            errorMessage = jsonResponse.error.message;
                        }
                        return [3 /*break*/, 5];
                    case 4:
                        _ignored_1 = _b.sent();
                        return [3 /*break*/, 5];
                    case 5: throw ERROR_FACTORY$1.create("config-fetch-failed" /* CONFIG_FETCH_FAILED */, {
                        httpStatus: response.status,
                        responseMessage: errorMessage
                    });
                    case 6: return [2 /*return*/, response.json()];
                }
            });
        });
    }
    /**
     * Fetches dynamic config from backend, retrying if failed.
     * @param app Firebase app to fetch config for.
     */
    function fetchDynamicConfigWithRetry(app, 
    // retryData and timeoutMillis are parameterized to allow passing a different value for testing.
    retryData, timeoutMillis) {
        if (retryData === void 0) { retryData = defaultRetryData; }
        return __awaiter(this, void 0, void 0, function () {
            var _a, appId, apiKey, measurementId, throttleMetadata, signal;
            var _this = this;
            return __generator(this, function (_b) {
                _a = app.options, appId = _a.appId, apiKey = _a.apiKey, measurementId = _a.measurementId;
                if (!appId) {
                    throw ERROR_FACTORY$1.create("no-app-id" /* NO_APP_ID */);
                }
                if (!apiKey) {
                    if (measurementId) {
                        return [2 /*return*/, {
                                measurementId: measurementId,
                                appId: appId
                            }];
                    }
                    throw ERROR_FACTORY$1.create("no-api-key" /* NO_API_KEY */);
                }
                throttleMetadata = retryData.getThrottleMetadata(appId) || {
                    backoffCount: 0,
                    throttleEndTimeMillis: Date.now()
                };
                signal = new AnalyticsAbortSignal();
                setTimeout(function () { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.
                        signal.abort();
                        return [2 /*return*/];
                    });
                }); }, timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS);
                return [2 /*return*/, attemptFetchDynamicConfigWithRetry({ appId: appId, apiKey: apiKey, measurementId: measurementId }, throttleMetadata, signal, retryData)];
            });
        });
    }
    /**
     * Runs one retry attempt.
     * @param appFields Necessary app config fields.
     * @param throttleMetadata Ongoing metadata to determine throttling times.
     * @param signal Abort signal.
     */
    function attemptFetchDynamicConfigWithRetry(appFields, _a, signal, retryData // for testing
    ) {
        var throttleEndTimeMillis = _a.throttleEndTimeMillis, backoffCount = _a.backoffCount;
        if (retryData === void 0) { retryData = defaultRetryData; }
        return __awaiter(this, void 0, void 0, function () {
            var appId, measurementId, e_1, response, e_2, backoffMillis, throttleMetadata;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        appId = appFields.appId, measurementId = appFields.measurementId;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, setAbortableTimeout(signal, throttleEndTimeMillis)];
                    case 2:
                        _b.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _b.sent();
                        if (measurementId) {
                            logger.warn("Timed out fetching this Firebase app's measurement ID from the server." +
                                (" Falling back to the measurement ID " + measurementId) +
                                (" provided in the \"measurementId\" field in the local Firebase config. [" + e_1.message + "]"));
                            return [2 /*return*/, { appId: appId, measurementId: measurementId }];
                        }
                        throw e_1;
                    case 4:
                        _b.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, fetchDynamicConfig(appFields)];
                    case 5:
                        response = _b.sent();
                        // Note the SDK only clears throttle state if response is success or non-retriable.
                        retryData.deleteThrottleMetadata(appId);
                        return [2 /*return*/, response];
                    case 6:
                        e_2 = _b.sent();
                        if (!isRetriableError(e_2)) {
                            retryData.deleteThrottleMetadata(appId);
                            if (measurementId) {
                                logger.warn("Failed to fetch this Firebase app's measurement ID from the server." +
                                    (" Falling back to the measurement ID " + measurementId) +
                                    (" provided in the \"measurementId\" field in the local Firebase config. [" + e_2.message + "]"));
                                return [2 /*return*/, { appId: appId, measurementId: measurementId }];
                            }
                            else {
                                throw e_2;
                            }
                        }
                        backoffMillis = Number(e_2.customData.httpStatus) === 503
                            ? calculateBackoffMillis(backoffCount, retryData.intervalMillis, LONG_RETRY_FACTOR)
                            : calculateBackoffMillis(backoffCount, retryData.intervalMillis);
                        throttleMetadata = {
                            throttleEndTimeMillis: Date.now() + backoffMillis,
                            backoffCount: backoffCount + 1
                        };
                        // Persists state.
                        retryData.setThrottleMetadata(appId, throttleMetadata);
                        logger.debug("Calling attemptFetch again in " + backoffMillis + " millis");
                        return [2 /*return*/, attemptFetchDynamicConfigWithRetry(appFields, throttleMetadata, signal, retryData)];
                    case 7: return [2 /*return*/];
                }
            });
        });
    }
    /**
     * Supports waiting on a backoff by:
     *
     * <ul>
     *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>
     *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>
     *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled
     *       request appear the same.</li>
     * </ul>
     *
     * <p>Visible for testing.
     */
    function setAbortableTimeout(signal, throttleEndTimeMillis) {
        return new Promise(function (resolve, reject) {
            // Derives backoff from given end time, normalizing negative numbers to zero.
            var backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);
            var timeout = setTimeout(resolve, backoffMillis);
            // Adds listener, rather than sets onabort, because signal is a shared object.
            signal.addEventListener(function () {
                clearTimeout(timeout);
                // If the request completes before this timeout, the rejection has no effect.
                reject(ERROR_FACTORY$1.create("fetch-throttle" /* FETCH_THROTTLE */, {
                    throttleEndTimeMillis: throttleEndTimeMillis
                }));
            });
        });
    }
    /**
     * Returns true if the {@link Error} indicates a fetch request may succeed later.
     */
    function isRetriableError(e) {
        if (!(e instanceof FirebaseError) || !e.customData) {
            return false;
        }
        // Uses string index defined by ErrorData, which FirebaseError implements.
        var httpStatus = Number(e.customData['httpStatus']);
        return (httpStatus === 429 ||
            httpStatus === 500 ||
            httpStatus === 503 ||
            httpStatus === 504);
    }
    /**
     * Shims a minimal AbortSignal (copied from Remote Config).
     *
     * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects
     * of networking, such as retries. Firebase doesn't use AbortController enough to justify a
     * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be
     * swapped out if/when we do.
     */
    var AnalyticsAbortSignal = /** @class */ (function () {
        function AnalyticsAbortSignal() {
            this.listeners = [];
        }
        AnalyticsAbortSignal.prototype.addEventListener = function (listener) {
            this.listeners.push(listener);
        };
        AnalyticsAbortSignal.prototype.abort = function () {
            this.listeners.forEach(function (listener) { return listener(); });
        };
        return AnalyticsAbortSignal;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function validateIndexedDB() {
        return __awaiter(this, void 0, void 0, function () {
            var e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!isIndexedDBAvailable()) return [3 /*break*/, 1];
                        logger.warn(ERROR_FACTORY$1.create("indexeddb-unavailable" /* INDEXEDDB_UNAVAILABLE */, {
                            errorInfo: 'IndexedDB is not available in this environment.'
                        }).message);
                        return [2 /*return*/, false];
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, validateIndexedDBOpenable()];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        logger.warn(ERROR_FACTORY$1.create("indexeddb-unavailable" /* INDEXEDDB_UNAVAILABLE */, {
                            errorInfo: e_1
                        }).message);
                        return [2 /*return*/, false];
                    case 4: return [2 /*return*/, true];
                }
            });
        });
    }
    /**
     * Initialize the analytics instance in gtag.js by calling config command with fid.
     *
     * NOTE: We combine analytics initialization and setting fid together because we want fid to be
     * part of the `page_view` event that's sent during the initialization
     * @param app Firebase app
     * @param gtagCore The gtag function that's not wrapped.
     * @param dynamicConfigPromisesList Array of all dynamic config promises.
     * @param measurementIdToAppId Maps measurementID to appID.
     * @param installations _FirebaseInstallationsInternal instance.
     *
     * @returns Measurement ID.
     */
    function initializeAnalytics(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCore, dataLayerName) {
        return __awaiter(this, void 0, void 0, function () {
            var dynamicConfigPromise, fidPromise, _a, dynamicConfig, fid, configProperties;
            var _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        dynamicConfigPromise = fetchDynamicConfigWithRetry(app);
                        // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.
                        dynamicConfigPromise
                            .then(function (config) {
                            measurementIdToAppId[config.measurementId] = config.appId;
                            if (app.options.measurementId &&
                                config.measurementId !== app.options.measurementId) {
                                logger.warn("The measurement ID in the local Firebase config (" + app.options.measurementId + ")" +
                                    (" does not match the measurement ID fetched from the server (" + config.measurementId + ").") +
                                    " To ensure analytics events are always sent to the correct Analytics property," +
                                    " update the" +
                                    " measurement ID field in the local config or remove it from the local config.");
                            }
                        })
                            .catch(function (e) { return logger.error(e); });
                        // Add to list to track state of all dynamic config promises.
                        dynamicConfigPromisesList.push(dynamicConfigPromise);
                        fidPromise = validateIndexedDB().then(function (envIsValid) {
                            if (envIsValid) {
                                return installations.getId();
                            }
                            else {
                                return undefined;
                            }
                        });
                        return [4 /*yield*/, Promise.all([
                                dynamicConfigPromise,
                                fidPromise
                            ])];
                    case 1:
                        _a = _c.sent(), dynamicConfig = _a[0], fid = _a[1];
                        // Detect if user has already put the gtag <script> tag on this page.
                        if (!findGtagScriptOnPage()) {
                            insertScriptTag(dataLayerName, dynamicConfig.measurementId);
                        }
                        // This command initializes gtag.js and only needs to be called once for the entire web app,
                        // but since it is idempotent, we can call it multiple times.
                        // We keep it together with other initialization logic for better code structure.
                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        gtagCore('js', new Date());
                        configProperties = (_b = {},
                            // guard against developers accidentally setting properties with prefix `firebase_`
                            _b[ORIGIN_KEY] = 'firebase',
                            _b.update = true,
                            _b);
                        if (fid != null) {
                            configProperties[GA_FID_KEY] = fid;
                        }
                        // It should be the first config command called on this GA-ID
                        // Initialize this GA-ID and set FID on it using the gtag config API.
                        // Note: This will trigger a page_view event unless 'send_page_view' is set to false in
                        // `configProperties`.
                        gtagCore("config" /* CONFIG */, dynamicConfig.measurementId, configProperties);
                        return [2 /*return*/, dynamicConfig.measurementId];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Analytics Service class.
     */
    var AnalyticsService = /** @class */ (function () {
        function AnalyticsService(app) {
            this.app = app;
        }
        AnalyticsService.prototype._delete = function () {
            delete initializationPromisesMap[this.app.options.appId];
            return Promise.resolve();
        };
        return AnalyticsService;
    }());
    /**
     * Maps appId to full initialization promise. Wrapped gtag calls must wait on
     * all or some of these, depending on the call's `send_to` param and the status
     * of the dynamic config fetches (see below).
     */
    var initializationPromisesMap = {};
    /**
     * List of dynamic config fetch promises. In certain cases, wrapped gtag calls
     * wait on all these to be complete in order to determine if it can selectively
     * wait for only certain initialization (FID) promises or if it must wait for all.
     */
    var dynamicConfigPromisesList = [];
    /**
     * Maps fetched measurementIds to appId. Populated when the app's dynamic config
     * fetch completes. If already populated, gtag config calls can use this to
     * selectively wait for only this app's initialization promise (FID) instead of all
     * initialization promises.
     */
    var measurementIdToAppId = {};
    /**
     * Name for window global data layer array used by GA: defaults to 'dataLayer'.
     */
    var dataLayerName = 'dataLayer';
    /**
     * Name for window global gtag function used by GA: defaults to 'gtag'.
     */
    var gtagName = 'gtag';
    /**
     * Reproduction of standard gtag function or reference to existing
     * gtag function on window object.
     */
    var gtagCoreFunction;
    /**
     * Wrapper around gtag function that ensures FID is sent with all
     * relevant event and config calls.
     */
    var wrappedGtagFunction;
    /**
     * Flag to ensure page initialization steps (creation or wrapping of
     * dataLayer and gtag script) are only run once per page load.
     */
    var globalInitDone = false;
    /**
     * Configures Firebase Analytics to use custom `gtag` or `dataLayer` names.
     * Intended to be used if `gtag.js` script has been installed on
     * this page independently of Firebase Analytics, and is using non-default
     * names for either the `gtag` function or for `dataLayer`.
     * Must be called before calling `getAnalytics()` or it won't
     * have any effect.
     *
     * @public
     *
     * @param options - Custom gtag and dataLayer names.
     */
    function settings(options) {
        if (globalInitDone) {
            throw ERROR_FACTORY$1.create("already-initialized" /* ALREADY_INITIALIZED */);
        }
        if (options.dataLayerName) {
            dataLayerName = options.dataLayerName;
        }
        if (options.gtagName) {
            gtagName = options.gtagName;
        }
    }
    /**
     * Returns true if no environment mismatch is found.
     * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT
     * error that also lists details for each mismatch found.
     */
    function warnOnBrowserContextMismatch() {
        var mismatchedEnvMessages = [];
        if (isBrowserExtension()) {
            mismatchedEnvMessages.push('This is a browser extension environment.');
        }
        if (!areCookiesEnabled()) {
            mismatchedEnvMessages.push('Cookies are not available.');
        }
        if (mismatchedEnvMessages.length > 0) {
            var details = mismatchedEnvMessages
                .map(function (message, index) { return "(" + (index + 1) + ") " + message; })
                .join(' ');
            var err = ERROR_FACTORY$1.create("invalid-analytics-context" /* INVALID_ANALYTICS_CONTEXT */, {
                errorInfo: details
            });
            logger.warn(err.message);
        }
    }
    /**
     * Analytics instance factory.
     * @internal
     */
    function factory(app, installations) {
        warnOnBrowserContextMismatch();
        var appId = app.options.appId;
        if (!appId) {
            throw ERROR_FACTORY$1.create("no-app-id" /* NO_APP_ID */);
        }
        if (!app.options.apiKey) {
            if (app.options.measurementId) {
                logger.warn("The \"apiKey\" field is empty in the local Firebase config. This is needed to fetch the latest" +
                    (" measurement ID for this Firebase app. Falling back to the measurement ID " + app.options.measurementId) +
                    " provided in the \"measurementId\" field in the local Firebase config.");
            }
            else {
                throw ERROR_FACTORY$1.create("no-api-key" /* NO_API_KEY */);
            }
        }
        if (initializationPromisesMap[appId] != null) {
            throw ERROR_FACTORY$1.create("already-exists" /* ALREADY_EXISTS */, {
                id: appId
            });
        }
        if (!globalInitDone) {
            // Steps here should only be done once per page: creation or wrapping
            // of dataLayer and global gtag function.
            getOrCreateDataLayer(dataLayerName);
            var _a = wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagName), wrappedGtag = _a.wrappedGtag, gtagCore = _a.gtagCore;
            wrappedGtagFunction = wrappedGtag;
            gtagCoreFunction = gtagCore;
            globalInitDone = true;
        }
        // Async but non-blocking.
        // This map reflects the completion state of all promises for each appId.
        initializationPromisesMap[appId] = initializeAnalytics(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCoreFunction, dataLayerName);
        var analyticsInstance = new AnalyticsService(app);
        return analyticsInstance;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Logs an analytics event through the Firebase SDK.
     *
     * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event
     * @param eventName Google Analytics event name, choose from standard list or use a custom string.
     * @param eventParams Analytics event parameters.
     */
    function logEvent(gtagFunction, initializationPromise, eventName, eventParams, options) {
        return __awaiter(this, void 0, void 0, function () {
            var measurementId, params;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(options && options.global)) return [3 /*break*/, 1];
                        gtagFunction("event" /* EVENT */, eventName, eventParams);
                        return [2 /*return*/];
                    case 1: return [4 /*yield*/, initializationPromise];
                    case 2:
                        measurementId = _a.sent();
                        params = __assign(__assign({}, eventParams), { 'send_to': measurementId });
                        gtagFunction("event" /* EVENT */, eventName, params);
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    }
    /**
     * Set screen_name parameter for this Google Analytics ID.
     *
     * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event
     * @param screenName Screen name string to set.
     */
    function setCurrentScreen(gtagFunction, initializationPromise, screenName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var measurementId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(options && options.global)) return [3 /*break*/, 1];
                        gtagFunction("set" /* SET */, { 'screen_name': screenName });
                        return [2 /*return*/, Promise.resolve()];
                    case 1: return [4 /*yield*/, initializationPromise];
                    case 2:
                        measurementId = _a.sent();
                        gtagFunction("config" /* CONFIG */, measurementId, {
                            update: true,
                            'screen_name': screenName
                        });
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    }
    /**
     * Set user_id parameter for this Google Analytics ID.
     *
     * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event
     * @param id User ID string to set
     */
    function setUserId(gtagFunction, initializationPromise, id, options) {
        return __awaiter(this, void 0, void 0, function () {
            var measurementId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(options && options.global)) return [3 /*break*/, 1];
                        gtagFunction("set" /* SET */, { 'user_id': id });
                        return [2 /*return*/, Promise.resolve()];
                    case 1: return [4 /*yield*/, initializationPromise];
                    case 2:
                        measurementId = _a.sent();
                        gtagFunction("config" /* CONFIG */, measurementId, {
                            update: true,
                            'user_id': id
                        });
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    }
    /**
     * Set all other user properties other than user_id and screen_name.
     *
     * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event
     * @param properties Map of user properties to set
     */
    function setUserProperties(gtagFunction, initializationPromise, properties, options) {
        return __awaiter(this, void 0, void 0, function () {
            var flatProperties, _i, _a, key, measurementId;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(options && options.global)) return [3 /*break*/, 1];
                        flatProperties = {};
                        for (_i = 0, _a = Object.keys(properties); _i < _a.length; _i++) {
                            key = _a[_i];
                            // use dot notation for merge behavior in gtag.js
                            flatProperties["user_properties." + key] = properties[key];
                        }
                        gtagFunction("set" /* SET */, flatProperties);
                        return [2 /*return*/, Promise.resolve()];
                    case 1: return [4 /*yield*/, initializationPromise];
                    case 2:
                        measurementId = _b.sent();
                        gtagFunction("config" /* CONFIG */, measurementId, {
                            update: true,
                            'user_properties': properties
                        });
                        _b.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    }
    /**
     * Set whether collection is enabled for this ID.
     *
     * @param enabled If true, collection is enabled for this ID.
     */
    function setAnalyticsCollectionEnabled(initializationPromise, enabled) {
        return __awaiter(this, void 0, void 0, function () {
            var measurementId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, initializationPromise];
                    case 1:
                        measurementId = _a.sent();
                        window["ga-disable-" + measurementId] = !enabled;
                        return [2 /*return*/];
                }
            });
        });
    }

    /* eslint-disable @typescript-eslint/no-explicit-any */
    /**
     * Returns a Firebase Analytics instance for the given app.
     *
     * @public
     *
     * @param app - The FirebaseApp to use.
     */
    function getAnalytics(app$1) {
        // Dependencies
        var analyticsProvider = app._getProvider(app$1, ANALYTICS_TYPE);
        var analyticsInstance = analyticsProvider.getImmediate();
        return analyticsInstance;
    }
    /**
     * This is a public static method provided to users that wraps four different checks:
     *
     * 1. Check if it's not a browser extension environment.
     * 2. Check if cookies are enabled in current browser.
     * 3. Check if IndexedDB is supported by the browser environment.
     * 4. Check if the current browser context is valid for using IndexedDB.open().
     *
     * @public
     *
     */
    function isSupported() {
        return __awaiter(this, void 0, void 0, function () {
            var isDBOpenable, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (isBrowserExtension()) {
                            return [2 /*return*/, false];
                        }
                        if (!areCookiesEnabled()) {
                            return [2 /*return*/, false];
                        }
                        if (!isIndexedDBAvailable()) {
                            return [2 /*return*/, false];
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, validateIndexedDBOpenable()];
                    case 2:
                        isDBOpenable = _a.sent();
                        return [2 /*return*/, isDBOpenable];
                    case 3:
                        error_1 = _a.sent();
                        return [2 /*return*/, false];
                    case 4: return [2 /*return*/];
                }
            });
        });
    }
    /**
     * Use gtag 'config' command to set 'screen_name'.
     *
     * @public
     *
     * @param analyticsInstance - Firebase Analytics instance.
     * @param screenName - Screen name to set.
     */
    function setCurrentScreen$1(analyticsInstance, screenName, options) {
        setCurrentScreen(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], screenName, options).catch(function (e) { return logger.error(e); });
    }
    /**
     * Use gtag 'config' command to set 'user_id'.
     *
     * @public
     *
     * @param analyticsInstance - Firebase Analytics instance.
     * @param id - User ID to set.
     */
    function setUserId$1(analyticsInstance, id, options) {
        setUserId(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], id, options).catch(function (e) { return logger.error(e); });
    }
    /**
     * Use gtag 'config' command to set all params specified.
     *
     * @public
     */
    function setUserProperties$1(analyticsInstance, properties, options) {
        setUserProperties(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], properties, options).catch(function (e) { return logger.error(e); });
    }
    /**
     * Sets whether analytics collection is enabled for this app on this device.
     * window['ga-disable-analyticsId'] = true;
     *
     * @public
     *
     * @param analyticsInstance - Firebase Analytics instance.
     * @param enabled - If true, enables collection, if false, disables it.
     */
    function setAnalyticsCollectionEnabled$1(analyticsInstance, enabled) {
        setAnalyticsCollectionEnabled(initializationPromisesMap[analyticsInstance.app.options.appId], enabled).catch(function (e) { return logger.error(e); });
    }
    /**
     * Sends analytics event with given `eventParams`. This method
     * automatically associates this logged event with this Firebase web
     * app instance on this device.
     * List of official event parameters can be found in the gtag.js
     * reference documentation:
     * {@link https://developers.google.com/gtagjs/reference/event
     * | the gtag.js reference documentation}.
     *
     * @public
     */
    function logEvent$1(analyticsInstance, eventName, eventParams, options) {
        logEvent(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], eventName, eventParams, options).catch(function (e) { return logger.error(e); });
    }

    var name$1 = "@firebase/analytics-exp";
    var version$1 = "0.0.900";

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function registerAnalytics() {
        app._registerComponent(new Component(ANALYTICS_TYPE, function (container) {
            // getImmediate for FirebaseApp will always succeed
            var app = container.getProvider('app-exp').getImmediate();
            var installations = container
                .getProvider('installations-exp-internal')
                .getImmediate();
            return factory(app, installations);
        }, "PUBLIC" /* PUBLIC */));
        app._registerComponent(new Component('analytics-internal', internalFactory, "PRIVATE" /* PRIVATE */));
        app.registerVersion(name$1, version$1);
        function internalFactory(container) {
            try {
                var analytics_1 = container.getProvider(ANALYTICS_TYPE).getImmediate();
                return {
                    logEvent: function (eventName, eventParams, options) { return logEvent$1(analytics_1, eventName, eventParams, options); }
                };
            }
            catch (e) {
                throw ERROR_FACTORY$1.create("interop-component-reg-failed" /* INTEROP_COMPONENT_REG_FAILED */, {
                    reason: e
                });
            }
        }
    }
    registerAnalytics();

    exports.getAnalytics = getAnalytics;
    exports.isSupported = isSupported;
    exports.logEvent = logEvent$1;
    exports.setAnalyticsCollectionEnabled = setAnalyticsCollectionEnabled$1;
    exports.setCurrentScreen = setCurrentScreen$1;
    exports.setUserId = setUserId$1;
    exports.setUserProperties = setUserProperties$1;
    exports.settings = settings;

    Object.defineProperty(exports, '__esModule', { value: true });


              }).apply(this, arguments);
            } catch(err) {
                console.error(err);
                throw new Error(
                  'Cannot instantiate firebase-analytics.js - ' +
                  'be sure to load firebase-app.js first.'
                );
              }

})));


!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t(((e="undefined"!=typeof globalThis?globalThis:e||self).firebase=e.firebase||{},e.firebase.app={}))}(this,function(e){"use strict";var n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};var c=function(){return(c=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};function t(e,a,s,l){return new(s=s||Promise)(function(n,t){function r(e){try{o(l.next(e))}catch(e){t(e)}}function i(e){try{o(l.throw(e))}catch(e){t(e)}}function o(e){var t;e.done?n(e.value):((t=e.value)instanceof s?t:new s(function(e){e(t)})).then(r,i)}o((l=l.apply(e,a||[])).next())})}function r(n,r){var i,o,a,s={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]},e={next:t(0),throw:t(1),return:t(2)};return"function"==typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e;function t(t){return function(e){return function(t){if(i)throw new TypeError("Generator is already executing.");for(;s;)try{if(i=1,o&&(a=2&t[0]?o.return:t[0]?o.throw||((a=o.return)&&a.call(o),0):o.next)&&!(a=a.call(o,t[1])).done)return a;switch(o=0,(t=a?[2&t[0],a.value]:t)[0]){case 0:case 1:a=t;break;case 4:return s.label++,{value:t[1],done:!1};case 5:s.label++,o=t[1],t=[0];continue;case 7:t=s.ops.pop(),s.trys.pop();continue;default:if(!(a=0<(a=s.trys).length&&a[a.length-1])&&(6===t[0]||2===t[0])){s=0;continue}if(3===t[0]&&(!a||t[1]>a[0]&&t[1]<a[3])){s.label=t[1];break}if(6===t[0]&&s.label<a[1]){s.label=a[1],a=t;break}if(a&&s.label<a[2]){s.label=a[2],s.ops.push(t);break}a[2]&&s.ops.pop(),s.trys.pop();continue}t=r.call(n,s)}catch(e){t=[6,e],o=0}finally{i=a=0}if(5&t[0])throw t[1];return{value:t[0]?t[1]:void 0,done:!0}}([t,e])}}}function p(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return{value:(e=e&&r>=e.length?void 0:e)&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function u(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),a=[];try{for(;(void 0===t||0<t--)&&!(r=o.next()).done;)a.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a}var i=(o.prototype.wrapCallback=function(n){var r=this;return function(e,t){e?r.reject(e):r.resolve(t),"function"==typeof n&&(r.promise.catch(function(){}),1===n.length?n(e):n(e,t))}},o);function o(){var n=this;this.reject=function(){},this.resolve=function(){},this.promise=new Promise(function(e,t){n.resolve=e,n.reject=t})}var a,s,l,f="FirebaseError",h=(a=Error,n(s=m,l=a),s.prototype=null===l?Object.create(l):(d.prototype=l.prototype,new d),m);function d(){this.constructor=s}function m(e,t,n){t=a.call(this,t)||this;return t.code=e,t.customData=n,t.name=f,Object.setPrototypeOf(t,m.prototype),Error.captureStackTrace&&Error.captureStackTrace(t,v.prototype.create),t}var v=(y.prototype.create=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r,i=t[0]||{},o=this.service+"/"+e,e=this.errors[e],e=e?(r=i,e.replace(g,function(e,t){var n=r[t];return null!=n?String(n):"<"+t+"?>"})):"Error",e=this.serviceName+": "+e+" ("+o+").";return new h(o,e,i)},y);function y(e,t,n){this.service=e,this.serviceName=t,this.errors=n}var g=/\{\$([^}]+)}/g,b=(w.prototype.setInstantiationMode=function(e){return this.instantiationMode=e,this},w.prototype.setMultipleInstances=function(e){return this.multipleInstances=e,this},w.prototype.setServiceProps=function(e){return this.serviceProps=e,this},w);function w(e,t,n){this.name=e,this.instanceFactory=t,this.type=n,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY"}var E="[DEFAULT]",_=(O.prototype.get=function(e){void 0===e&&(e=E);var t=this.normalizeInstanceIdentifier(e);if(!this.instancesDeferred.has(t)){var n=new i;this.instancesDeferred.set(t,n);try{var r=this.getOrInitializeService(t);r&&n.resolve(r)}catch(e){}}return this.instancesDeferred.get(t).promise},O.prototype.getImmediate=function(e){var t=c({identifier:E,optional:!1},e),e=t.identifier,n=t.optional,r=this.normalizeInstanceIdentifier(e);try{var i=this.getOrInitializeService(r);if(i)return i;if(n)return null;throw Error("Service "+this.name+" is not available")}catch(e){if(n)return null;throw e}},O.prototype.getComponent=function(){return this.component},O.prototype.setComponent=function(e){var t,n;if(e.name!==this.name)throw Error("Mismatching Component "+e.name+" for Provider "+this.name+".");if(this.component)throw Error("Component for "+this.name+" has already been provided");if("EAGER"===(this.component=e).instantiationMode)try{this.getOrInitializeService(E)}catch(e){}try{for(var r=p(this.instancesDeferred.entries()),i=r.next();!i.done;i=r.next()){var o=u(i.value,2),a=o[0],s=o[1],l=this.normalizeInstanceIdentifier(a);try{var c=this.getOrInitializeService(l);s.resolve(c)}catch(e){}}}catch(e){t={error:e}}finally{try{i&&!i.done&&(n=r.return)&&n.call(r)}finally{if(t)throw t.error}}},O.prototype.clearInstance=function(e){void 0===e&&(e=E),this.instancesDeferred.delete(e),this.instances.delete(e)},O.prototype.delete=function(){return t(this,void 0,void 0,function(){var t;return r(this,function(e){switch(e.label){case 0:return t=Array.from(this.instances.values()),[4,Promise.all(function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(u(arguments[t]));return e}(t.filter(function(e){return"INTERNAL"in e}).map(function(e){return e.INTERNAL.delete()}),t.filter(function(e){return"_delete"in e}).map(function(e){return e._delete()})))];case 1:return e.sent(),[2]}})})},O.prototype.isComponentSet=function(){return null!=this.component},O.prototype.isInitialized=function(e){return void 0===e&&(e=E),this.instances.has(e)},O.prototype.getOrInitializeService=function(e){var t,n=this.instances.get(e);return!n&&this.component&&(n=this.component.instanceFactory(this.container,(t=e)===E?void 0:t),this.instances.set(e,n)),n||null},O.prototype.normalizeInstanceIdentifier=function(e){return!this.component||this.component.multipleInstances?e:E},O);function O(e,t){this.name=e,this.container=t,this.component=null,this.instances=new Map,this.instancesDeferred=new Map}var I=(L.prototype.addComponent=function(e){var t=this.getProvider(e.name);if(t.isComponentSet())throw new Error("Component "+e.name+" has already been registered with "+this.name);t.setComponent(e)},L.prototype.addOrOverwriteComponent=function(e){this.getProvider(e.name).isComponentSet()&&this.providers.delete(e.name),this.addComponent(e)},L.prototype.getProvider=function(e){if(this.providers.has(e))return this.providers.get(e);var t=new _(e,this);return this.providers.set(e,t),t},L.prototype.getProviders=function(){return Array.from(this.providers.values())},L);function L(e){this.name=e,this.providers=new Map}function S(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;for(var r=Array(e),i=0,t=0;t<n;t++)for(var o=arguments[t],a=0,s=o.length;a<s;a++,i++)r[i]=o[a];return r}var N,R=[];(x=N=N||{})[x.DEBUG=0]="DEBUG",x[x.VERBOSE=1]="VERBOSE",x[x.INFO=2]="INFO",x[x.WARN=3]="WARN",x[x.ERROR=4]="ERROR",x[x.SILENT=5]="SILENT";function D(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];if(!(t<e.logLevel)){var i=(new Date).toISOString(),o=C[t];if(!o)throw new Error("Attempted to log a message with an invalid logType (value: "+t+")");console[o].apply(console,S(["["+i+"]  "+e.name+":"],n))}}var A={debug:N.DEBUG,verbose:N.VERBOSE,info:N.INFO,warn:N.WARN,error:N.ERROR,silent:N.SILENT},P=N.INFO,C=((x={})[N.DEBUG]="log",x[N.VERBOSE]="log",x[N.INFO]="info",x[N.WARN]="warn",x[N.ERROR]="error",x),x=(Object.defineProperty(j.prototype,"logLevel",{get:function(){return this._logLevel},set:function(e){if(!(e in N))throw new TypeError('Invalid value "'+e+'" assigned to `logLevel`');this._logLevel=e},enumerable:!1,configurable:!0}),j.prototype.setLogLevel=function(e){this._logLevel="string"==typeof e?A[e]:e},Object.defineProperty(j.prototype,"logHandler",{get:function(){return this._logHandler},set:function(e){if("function"!=typeof e)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=e},enumerable:!1,configurable:!0}),Object.defineProperty(j.prototype,"userLogHandler",{get:function(){return this._userLogHandler},set:function(e){this._userLogHandler=e},enumerable:!1,configurable:!0}),j.prototype.debug=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._userLogHandler&&this._userLogHandler.apply(this,S([this,N.DEBUG],e)),this._logHandler.apply(this,S([this,N.DEBUG],e))},j.prototype.log=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._userLogHandler&&this._userLogHandler.apply(this,S([this,N.VERBOSE],e)),this._logHandler.apply(this,S([this,N.VERBOSE],e))},j.prototype.info=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._userLogHandler&&this._userLogHandler.apply(this,S([this,N.INFO],e)),this._logHandler.apply(this,S([this,N.INFO],e))},j.prototype.warn=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._userLogHandler&&this._userLogHandler.apply(this,S([this,N.WARN],e)),this._logHandler.apply(this,S([this,N.WARN],e))},j.prototype.error=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._userLogHandler&&this._userLogHandler.apply(this,S([this,N.ERROR],e)),this._logHandler.apply(this,S([this,N.ERROR],e))},j);function j(e){this.name=e,this._logLevel=P,this._logHandler=D,this._userLogHandler=null,R.push(this)}function H(a,t){for(var e=0,n=R;e<n.length;e++)!function(e){var o=null;t&&t.level&&(o=A[t.level]),e.userLogHandler=null===a?null:function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var i=n.map(function(e){if(null==e)return null;if("string"==typeof e)return e;if("number"==typeof e||"boolean"==typeof e)return e.toString();if(e instanceof Error)return e.message;try{return JSON.stringify(e)}catch(e){return null}}).filter(function(e){return e}).join(" ");t>=(null!=o?o:e.logLevel)&&a({level:N[t].toLowerCase(),message:i,args:n,type:e.name})}}(n[e])}var F=(T.prototype.getPlatformInfoString=function(){return this.container.getProviders().map(function(e){if(function(e){e=e.getComponent();return"VERSION"===(null==e?void 0:e.type)}(e)){e=e.getImmediate();return e.library+"/"+e.version}return null}).filter(function(e){return e}).join(" ")},T);function T(e){this.container=e}var k="@firebase/app-exp",B=new x("@firebase/app"),M="[DEFAULT]",z=((x={})[k]="fire-core",x["@firebase/app-compat"]="fire-core-compat",x["@firebase/analytics-exp"]="fire-analytics",x["@firebase/auth-exp"]="fire-auth",x["@firebase/auth-compat"]="fire-auth-compat",x["@firebase/database"]="fire-rtdb",x["@firebase/functions-exp"]="fire-fn",x["@firebase/functions-compat"]="fire-fn-compat",x["@firebase/installations-exp"]="fire-iid",x["@firebase/installations-compat"]="fire-iid-compat",x["@firebase/messaging-exp"]="fire-fcm",x["@firebase/performance-exp"]="fire-perf",x["@firebase/remote-config-exp"]="fire-rc",x["@firebase/remote-config-compat"]="fire-rc-compat",x["@firebase/storage"]="fire-gcs",x["@firebase/firestore"]="fire-fst",x["fire-js"]="fire-js",x["firebase-exp"]="fire-js-all",x),V=new Map,U=new Map;function G(t,n){try{t.container.addComponent(n)}catch(e){B.debug("Component "+n.name+" failed to register with FirebaseApp "+t.name,e)}}function W(e){var t,n,r=e.name;if(U.has(r))return B.debug("There were multiple attempts to register component "+r+"."),!1;U.set(r,e);try{for(var i=p(V.values()),o=i.next();!o.done;o=i.next())G(o.value,e)}catch(e){t={error:e}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(t)throw t.error}}return!0}function $(e,t){return e.container.getProvider(t)}var x=((x={})["no-app"]="No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()",x["bad-app-name"]="Illegal App name: '{$appName}",x["duplicate-app"]="Firebase App named '{$appName}' already exists",x["app-deleted"]="Firebase App named '{$appName}' already deleted",x["invalid-app-argument"]="firebase.{$appName}() takes either no argument or a Firebase App instance.",x["invalid-log-argument"]="First argument to `onLog` must be null or a function.",x),Y=new v("app","Firebase",x),J=(Object.defineProperty(K.prototype,"automaticDataCollectionEnabled",{get:function(){return this.checkDestroyed(),this._automaticDataCollectionEnabled},set:function(e){this.checkDestroyed(),this._automaticDataCollectionEnabled=e},enumerable:!1,configurable:!0}),Object.defineProperty(K.prototype,"name",{get:function(){return this.checkDestroyed(),this._name},enumerable:!1,configurable:!0}),Object.defineProperty(K.prototype,"options",{get:function(){return this.checkDestroyed(),this._options},enumerable:!1,configurable:!0}),Object.defineProperty(K.prototype,"container",{get:function(){return this._container},enumerable:!1,configurable:!0}),Object.defineProperty(K.prototype,"isDeleted",{get:function(){return this._isDeleted},set:function(e){this._isDeleted=e},enumerable:!1,configurable:!0}),K.prototype.checkDestroyed=function(){if(this.isDeleted)throw Y.create("app-deleted",{appName:this._name})},K);function K(e,t,n){var r=this;this._isDeleted=!1,this._options=c({},e),this._name=t.name,this._automaticDataCollectionEnabled=t.automaticDataCollectionEnabled,this._container=n,this.container.addComponent(new b("app-exp",function(){return r},"PUBLIC"))}var Z;function q(e,t,n){var r=null!==(i=z[e])&&void 0!==i?i:e;n&&(r+="-"+n);var i=r.match(/\s|\//),e=t.match(/\s|\//);if(i||e){n=['Unable to register library "'+r+'" with version "'+t+'":'];return i&&n.push('library name "'+r+'" contains illegal characters (whitespace or "/")'),i&&e&&n.push("and"),e&&n.push('version name "'+t+'" contains illegal characters (whitespace or "/")'),void B.warn(n.join(" "))}W(new b(r+"-version",function(){return{library:r,version:t}},"VERSION"))}W(new b("platform-logger",function(e){return new F(e)},"PRIVATE")),q(k,"0.0.900",Z),q("fire-js","");q("firebase-exp","0.900.14","app"),e.SDK_VERSION="0.900.14",e._DEFAULT_ENTRY_NAME=M,e._addComponent=G,e._addOrOverwriteComponent=function(e,t){e.container.addOrOverwriteComponent(t)},e._apps=V,e._clearComponents=function(){U.clear()},e._components=U,e._getProvider=$,e._registerComponent=W,e._removeServiceInstance=function(e,t,n){void 0===n&&(n=M),$(e,t).clearInstance(n)},e.deleteApp=function(n){return t(this,void 0,void 0,function(){var t;return r(this,function(e){switch(e.label){case 0:return(t=n.name,V.has(t))?(V.delete(t),[4,Promise.all(n.container.getProviders().map(function(e){return e.delete()}))]):[3,2];case 1:e.sent(),n.isDeleted=!0,e.label=2;case 2:return[2]}})})},e.getApp=function(e){void 0===e&&(e=M);var t=V.get(e);if(!t)throw Y.create("no-app",{appName:e});return t},e.getApps=function(){return Array.from(V.values())},e.initializeApp=function(e,t){var n,r,i=c({name:M,automaticDataCollectionEnabled:!1},t="object"!=typeof(t=void 0===t?{}:t)?{name:t}:t);if("string"!=typeof(t=i.name)||!t)throw Y.create("bad-app-name",{appName:String(t)});if(V.has(t))throw Y.create("duplicate-app",{appName:t});var o=new I(t);try{for(var a=p(U.values()),s=a.next();!s.done;s=a.next()){var l=s.value;o.addComponent(l)}}catch(e){n={error:e}}finally{try{s&&!s.done&&(r=a.return)&&r.call(a)}finally{if(n)throw n.error}}return i=new J(e,i,o),V.set(t,i),i},e.onLog=function(e,t){if(null!==e&&"function"!=typeof e)throw Y.create("invalid-log-argument");H(e,t)},e.registerVersion=q,e.setLogLevel=function(e){var t;t=e,R.forEach(function(e){e.setLogLevel(t)})},Object.defineProperty(e,"__esModule",{value:!0})});


(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@firebase/app')) :
    typeof define === 'function' && define.amd ? define(['exports', '@firebase/app'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.firebase = global.firebase || {}, global.firebase.auth = global.firebase.auth || {}), global.firebase.app));
}(this, (function (exports, app) { 'use strict';

    try {
                (function() {

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var stringToByteArray = function (str) {
        // TODO(user): Use native implementations if/when available
        var out = [];
        var p = 0;
        for (var i = 0; i < str.length; i++) {
            var c = str.charCodeAt(i);
            if (c < 128) {
                out[p++] = c;
            }
            else if (c < 2048) {
                out[p++] = (c >> 6) | 192;
                out[p++] = (c & 63) | 128;
            }
            else if ((c & 0xfc00) === 0xd800 &&
                i + 1 < str.length &&
                (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {
                // Surrogate Pair
                c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);
                out[p++] = (c >> 18) | 240;
                out[p++] = ((c >> 12) & 63) | 128;
                out[p++] = ((c >> 6) & 63) | 128;
                out[p++] = (c & 63) | 128;
            }
            else {
                out[p++] = (c >> 12) | 224;
                out[p++] = ((c >> 6) & 63) | 128;
                out[p++] = (c & 63) | 128;
            }
        }
        return out;
    };
    /**
     * Turns an array of numbers into the string given by the concatenation of the
     * characters to which the numbers correspond.
     * @param bytes Array of numbers representing characters.
     * @return Stringification of the array.
     */
    var byteArrayToString = function (bytes) {
        // TODO(user): Use native implementations if/when available
        var out = [];
        var pos = 0, c = 0;
        while (pos < bytes.length) {
            var c1 = bytes[pos++];
            if (c1 < 128) {
                out[c++] = String.fromCharCode(c1);
            }
            else if (c1 > 191 && c1 < 224) {
                var c2 = bytes[pos++];
                out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
            }
            else if (c1 > 239 && c1 < 365) {
                // Surrogate Pair
                var c2 = bytes[pos++];
                var c3 = bytes[pos++];
                var c4 = bytes[pos++];
                var u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -
                    0x10000;
                out[c++] = String.fromCharCode(0xd800 + (u >> 10));
                out[c++] = String.fromCharCode(0xdc00 + (u & 1023));
            }
            else {
                var c2 = bytes[pos++];
                var c3 = bytes[pos++];
                out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
            }
        }
        return out.join('');
    };
    // We define it as an object literal instead of a class because a class compiled down to es5 can't
    // be treeshaked. https://github.com/rollup/rollup/issues/1691
    // Static lookup maps, lazily populated by init_()
    var base64 = {
        /**
         * Maps bytes to characters.
         */
        byteToCharMap_: null,
        /**
         * Maps characters to bytes.
         */
        charToByteMap_: null,
        /**
         * Maps bytes to websafe characters.
         * @private
         */
        byteToCharMapWebSafe_: null,
        /**
         * Maps websafe characters to bytes.
         * @private
         */
        charToByteMapWebSafe_: null,
        /**
         * Our default alphabet, shared between
         * ENCODED_VALS and ENCODED_VALS_WEBSAFE
         */
        ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',
        /**
         * Our default alphabet. Value 64 (=) is special; it means "nothing."
         */
        get ENCODED_VALS() {
            return this.ENCODED_VALS_BASE + '+/=';
        },
        /**
         * Our websafe alphabet.
         */
        get ENCODED_VALS_WEBSAFE() {
            return this.ENCODED_VALS_BASE + '-_.';
        },
        /**
         * Whether this browser supports the atob and btoa functions. This extension
         * started at Mozilla but is now implemented by many browsers. We use the
         * ASSUME_* variables to avoid pulling in the full useragent detection library
         * but still allowing the standard per-browser compilations.
         *
         */
        HAS_NATIVE_SUPPORT: typeof atob === 'function',
        /**
         * Base64-encode an array of bytes.
         *
         * @param input An array of bytes (numbers with
         *     value in [0, 255]) to encode.
         * @param webSafe Boolean indicating we should use the
         *     alternative alphabet.
         * @return The base64 encoded string.
         */
        encodeByteArray: function (input, webSafe) {
            if (!Array.isArray(input)) {
                throw Error('encodeByteArray takes an array as a parameter');
            }
            this.init_();
            var byteToCharMap = webSafe
                ? this.byteToCharMapWebSafe_
                : this.byteToCharMap_;
            var output = [];
            for (var i = 0; i < input.length; i += 3) {
                var byte1 = input[i];
                var haveByte2 = i + 1 < input.length;
                var byte2 = haveByte2 ? input[i + 1] : 0;
                var haveByte3 = i + 2 < input.length;
                var byte3 = haveByte3 ? input[i + 2] : 0;
                var outByte1 = byte1 >> 2;
                var outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);
                var outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);
                var outByte4 = byte3 & 0x3f;
                if (!haveByte3) {
                    outByte4 = 64;
                    if (!haveByte2) {
                        outByte3 = 64;
                    }
                }
                output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
            }
            return output.join('');
        },
        /**
         * Base64-encode a string.
         *
         * @param input A string to encode.
         * @param webSafe If true, we should use the
         *     alternative alphabet.
         * @return The base64 encoded string.
         */
        encodeString: function (input, webSafe) {
            // Shortcut for Mozilla browsers that implement
            // a native base64 encoder in the form of "btoa/atob"
            if (this.HAS_NATIVE_SUPPORT && !webSafe) {
                return btoa(input);
            }
            return this.encodeByteArray(stringToByteArray(input), webSafe);
        },
        /**
         * Base64-decode a string.
         *
         * @param input to decode.
         * @param webSafe True if we should use the
         *     alternative alphabet.
         * @return string representing the decoded value.
         */
        decodeString: function (input, webSafe) {
            // Shortcut for Mozilla browsers that implement
            // a native base64 encoder in the form of "btoa/atob"
            if (this.HAS_NATIVE_SUPPORT && !webSafe) {
                return atob(input);
            }
            return byteArrayToString(this.decodeStringToByteArray(input, webSafe));
        },
        /**
         * Base64-decode a string.
         *
         * In base-64 decoding, groups of four characters are converted into three
         * bytes.  If the encoder did not apply padding, the input length may not
         * be a multiple of 4.
         *
         * In this case, the last group will have fewer than 4 characters, and
         * padding will be inferred.  If the group has one or two characters, it decodes
         * to one byte.  If the group has three characters, it decodes to two bytes.
         *
         * @param input Input to decode.
         * @param webSafe True if we should use the web-safe alphabet.
         * @return bytes representing the decoded value.
         */
        decodeStringToByteArray: function (input, webSafe) {
            this.init_();
            var charToByteMap = webSafe
                ? this.charToByteMapWebSafe_
                : this.charToByteMap_;
            var output = [];
            for (var i = 0; i < input.length;) {
                var byte1 = charToByteMap[input.charAt(i++)];
                var haveByte2 = i < input.length;
                var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
                ++i;
                var haveByte3 = i < input.length;
                var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
                ++i;
                var haveByte4 = i < input.length;
                var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
                ++i;
                if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
                    throw Error();
                }
                var outByte1 = (byte1 << 2) | (byte2 >> 4);
                output.push(outByte1);
                if (byte3 !== 64) {
                    var outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);
                    output.push(outByte2);
                    if (byte4 !== 64) {
                        var outByte3 = ((byte3 << 6) & 0xc0) | byte4;
                        output.push(outByte3);
                    }
                }
            }
            return output;
        },
        /**
         * Lazy static initialization function. Called before
         * accessing any of the static map variables.
         * @private
         */
        init_: function () {
            if (!this.byteToCharMap_) {
                this.byteToCharMap_ = {};
                this.charToByteMap_ = {};
                this.byteToCharMapWebSafe_ = {};
                this.charToByteMapWebSafe_ = {};
                // We want quick mappings back and forth, so we precompute two maps.
                for (var i = 0; i < this.ENCODED_VALS.length; i++) {
                    this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
                    this.charToByteMap_[this.byteToCharMap_[i]] = i;
                    this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
                    this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;
                    // Be forgiving when decoding and correctly decode both encodings.
                    if (i >= this.ENCODED_VALS_BASE.length) {
                        this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
                        this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
                    }
                }
            }
        }
    };
    /**
     * URL-safe base64 decoding
     *
     * NOTE: DO NOT use the global atob() function - it does NOT support the
     * base64Url variant encoding.
     *
     * @param str To be decoded
     * @return Decoded result, if possible
     */
    var base64Decode = function (str) {
        try {
            return base64.decodeString(str, true);
        }
        catch (e) {
            console.error('base64Decode failed: ', e);
        }
        return null;
    };

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns navigator.userAgent string or '' if it's not defined.
     * @return user agent string
     */
    function getUA() {
        if (typeof navigator !== 'undefined' &&
            typeof navigator['userAgent'] === 'string') {
            return navigator['userAgent'];
        }
        else {
            return '';
        }
    }
    /**
     * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.
     *
     * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap
     * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally
     * wait for a callback.
     */
    function isMobileCordova() {
        return (typeof window !== 'undefined' &&
            // @ts-ignore Setting up an broadly applicable index signature for Window
            // just to deal with this case would probably be a bad idea.
            !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&
            /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));
    }
    function isBrowserExtension() {
        var runtime = typeof chrome === 'object'
            ? chrome.runtime
            : typeof browser === 'object'
                ? browser.runtime
                : undefined;
        return typeof runtime === 'object' && runtime.id !== undefined;
    }
    /**
     * Detect React Native.
     *
     * @return true if ReactNative environment is detected.
     */
    function isReactNative() {
        return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');
    }
    /** Detects Internet Explorer. */
    function isIE() {
        var ua = getUA();
        return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ERROR_NAME = 'FirebaseError';
    // Based on code from:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
    var FirebaseError = /** @class */ (function (_super) {
        __extends(FirebaseError, _super);
        function FirebaseError(code, message, customData) {
            var _this = _super.call(this, message) || this;
            _this.code = code;
            _this.customData = customData;
            _this.name = ERROR_NAME;
            // Fix For ES5
            // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
            Object.setPrototypeOf(_this, FirebaseError.prototype);
            // Maintains proper stack trace for where our error was thrown.
            // Only available on V8.
            if (Error.captureStackTrace) {
                Error.captureStackTrace(_this, ErrorFactory.prototype.create);
            }
            return _this;
        }
        return FirebaseError;
    }(Error));
    var ErrorFactory = /** @class */ (function () {
        function ErrorFactory(service, serviceName, errors) {
            this.service = service;
            this.serviceName = serviceName;
            this.errors = errors;
        }
        ErrorFactory.prototype.create = function (code) {
            var data = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                data[_i - 1] = arguments[_i];
            }
            var customData = data[0] || {};
            var fullCode = this.service + "/" + code;
            var template = this.errors[code];
            var message = template ? replaceTemplate(template, customData) : 'Error';
            // Service Name: Error message (service/code).
            var fullMessage = this.serviceName + ": " + message + " (" + fullCode + ").";
            var error = new FirebaseError(fullCode, fullMessage, customData);
            return error;
        };
        return ErrorFactory;
    }());
    function replaceTemplate(template, data) {
        return template.replace(PATTERN, function (_, key) {
            var value = data[key];
            return value != null ? String(value) : "<" + key + "?>";
        });
    }
    var PATTERN = /\{\$([^}]+)}/g;
    function isEmpty(obj) {
        for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
                return false;
            }
        }
        return true;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a
     * params object (e.g. {arg: 'val', arg2: 'val2'})
     * Note: You must prepend it with ? when adding it to a URL.
     */
    function querystring(querystringParams) {
        var params = [];
        var _loop_1 = function (key, value) {
            if (Array.isArray(value)) {
                value.forEach(function (arrayVal) {
                    params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));
                });
            }
            else {
                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
            }
        };
        for (var _i = 0, _a = Object.entries(querystringParams); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            _loop_1(key, value);
        }
        return params.length ? '&' + params.join('&') : '';
    }

    /**
     * Helper to make a Subscribe function (just like Promise helps make a
     * Thenable).
     *
     * @param executor Function which can make calls to a single Observer
     *     as a proxy.
     * @param onNoObservers Callback when count of Observers goes to zero.
     */
    function createSubscribe(executor, onNoObservers) {
        var proxy = new ObserverProxy(executor, onNoObservers);
        return proxy.subscribe.bind(proxy);
    }
    /**
     * Implement fan-out for any number of Observers attached via a subscribe
     * function.
     */
    var ObserverProxy = /** @class */ (function () {
        /**
         * @param executor Function which can make calls to a single Observer
         *     as a proxy.
         * @param onNoObservers Callback when count of Observers goes to zero.
         */
        function ObserverProxy(executor, onNoObservers) {
            var _this = this;
            this.observers = [];
            this.unsubscribes = [];
            this.observerCount = 0;
            // Micro-task scheduling by calling task.then().
            this.task = Promise.resolve();
            this.finalized = false;
            this.onNoObservers = onNoObservers;
            // Call the executor asynchronously so subscribers that are called
            // synchronously after the creation of the subscribe function
            // can still receive the very first value generated in the executor.
            this.task
                .then(function () {
                executor(_this);
            })
                .catch(function (e) {
                _this.error(e);
            });
        }
        ObserverProxy.prototype.next = function (value) {
            this.forEachObserver(function (observer) {
                observer.next(value);
            });
        };
        ObserverProxy.prototype.error = function (error) {
            this.forEachObserver(function (observer) {
                observer.error(error);
            });
            this.close(error);
        };
        ObserverProxy.prototype.complete = function () {
            this.forEachObserver(function (observer) {
                observer.complete();
            });
            this.close();
        };
        /**
         * Subscribe function that can be used to add an Observer to the fan-out list.
         *
         * - We require that no event is sent to a subscriber sychronously to their
         *   call to subscribe().
         */
        ObserverProxy.prototype.subscribe = function (nextOrObserver, error, complete) {
            var _this = this;
            var observer;
            if (nextOrObserver === undefined &&
                error === undefined &&
                complete === undefined) {
                throw new Error('Missing Observer.');
            }
            // Assemble an Observer object when passed as callback functions.
            if (implementsAnyMethods(nextOrObserver, [
                'next',
                'error',
                'complete'
            ])) {
                observer = nextOrObserver;
            }
            else {
                observer = {
                    next: nextOrObserver,
                    error: error,
                    complete: complete
                };
            }
            if (observer.next === undefined) {
                observer.next = noop;
            }
            if (observer.error === undefined) {
                observer.error = noop;
            }
            if (observer.complete === undefined) {
                observer.complete = noop;
            }
            var unsub = this.unsubscribeOne.bind(this, this.observers.length);
            // Attempt to subscribe to a terminated Observable - we
            // just respond to the Observer with the final error or complete
            // event.
            if (this.finalized) {
                // eslint-disable-next-line @typescript-eslint/no-floating-promises
                this.task.then(function () {
                    try {
                        if (_this.finalError) {
                            observer.error(_this.finalError);
                        }
                        else {
                            observer.complete();
                        }
                    }
                    catch (e) {
                        // nothing
                    }
                    return;
                });
            }
            this.observers.push(observer);
            return unsub;
        };
        // Unsubscribe is synchronous - we guarantee that no events are sent to
        // any unsubscribed Observer.
        ObserverProxy.prototype.unsubscribeOne = function (i) {
            if (this.observers === undefined || this.observers[i] === undefined) {
                return;
            }
            delete this.observers[i];
            this.observerCount -= 1;
            if (this.observerCount === 0 && this.onNoObservers !== undefined) {
                this.onNoObservers(this);
            }
        };
        ObserverProxy.prototype.forEachObserver = function (fn) {
            if (this.finalized) {
                // Already closed by previous event....just eat the additional values.
                return;
            }
            // Since sendOne calls asynchronously - there is no chance that
            // this.observers will become undefined.
            for (var i = 0; i < this.observers.length; i++) {
                this.sendOne(i, fn);
            }
        };
        // Call the Observer via one of it's callback function. We are careful to
        // confirm that the observe has not been unsubscribed since this asynchronous
        // function had been queued.
        ObserverProxy.prototype.sendOne = function (i, fn) {
            var _this = this;
            // Execute the callback asynchronously
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.task.then(function () {
                if (_this.observers !== undefined && _this.observers[i] !== undefined) {
                    try {
                        fn(_this.observers[i]);
                    }
                    catch (e) {
                        // Ignore exceptions raised in Observers or missing methods of an
                        // Observer.
                        // Log error to console. b/31404806
                        if (typeof console !== 'undefined' && console.error) {
                            console.error(e);
                        }
                    }
                }
            });
        };
        ObserverProxy.prototype.close = function (err) {
            var _this = this;
            if (this.finalized) {
                return;
            }
            this.finalized = true;
            if (err !== undefined) {
                this.finalError = err;
            }
            // Proxy is no longer needed - garbage collect references
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.task.then(function () {
                _this.observers = undefined;
                _this.onNoObservers = undefined;
            });
        };
        return ObserverProxy;
    }());
    /**
     * Return true if the object passed in implements any of the named methods.
     */
    function implementsAnyMethods(obj, methods) {
        if (typeof obj !== 'object' || obj === null) {
            return false;
        }
        for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {
            var method = methods_1[_i];
            if (method in obj && typeof obj[method] === 'function') {
                return true;
            }
        }
        return false;
    }
    function noop() {
        // do nothing
    }

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    function __spreadArrays$1() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a;
    /**
     * The JS SDK supports 5 log levels and also allows a user the ability to
     * silence the logs altogether.
     *
     * The order is a follows:
     * DEBUG < VERBOSE < INFO < WARN < ERROR
     *
     * All of the log types above the current log level will be captured (i.e. if
     * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
     * `VERBOSE` logs will not)
     */
    var LogLevel;
    (function (LogLevel) {
        LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
        LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
        LogLevel[LogLevel["INFO"] = 2] = "INFO";
        LogLevel[LogLevel["WARN"] = 3] = "WARN";
        LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
        LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
    })(LogLevel || (LogLevel = {}));
    var levelStringToEnum = {
        'debug': LogLevel.DEBUG,
        'verbose': LogLevel.VERBOSE,
        'info': LogLevel.INFO,
        'warn': LogLevel.WARN,
        'error': LogLevel.ERROR,
        'silent': LogLevel.SILENT
    };
    /**
     * The default log level
     */
    var defaultLogLevel = LogLevel.INFO;
    /**
     * By default, `console.debug` is not displayed in the developer console (in
     * chrome). To avoid forcing users to have to opt-in to these logs twice
     * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
     * logs to the `console.log` function.
     */
    var ConsoleMethod = (_a = {},
        _a[LogLevel.DEBUG] = 'log',
        _a[LogLevel.VERBOSE] = 'log',
        _a[LogLevel.INFO] = 'info',
        _a[LogLevel.WARN] = 'warn',
        _a[LogLevel.ERROR] = 'error',
        _a);
    /**
     * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
     * messages on to their corresponding console counterparts (if the log method
     * is supported by the current log level)
     */
    var defaultLogHandler = function (instance, logType) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        if (logType < instance.logLevel) {
            return;
        }
        var now = new Date().toISOString();
        var method = ConsoleMethod[logType];
        if (method) {
            console[method].apply(console, __spreadArrays$1(["[" + now + "]  " + instance.name + ":"], args));
        }
        else {
            throw new Error("Attempted to log a message with an invalid logType (value: " + logType + ")");
        }
    };
    var Logger = /** @class */ (function () {
        /**
         * Gives you an instance of a Logger to capture messages according to
         * Firebase's logging scheme.
         *
         * @param name The name that the logs will be associated with
         */
        function Logger(name) {
            this.name = name;
            /**
             * The log level of the given Logger instance.
             */
            this._logLevel = defaultLogLevel;
            /**
             * The main (internal) log handler for the Logger instance.
             * Can be set to a new function in internal package code but not by user.
             */
            this._logHandler = defaultLogHandler;
            /**
             * The optional, additional, user-defined log handler for the Logger instance.
             */
            this._userLogHandler = null;
        }
        Object.defineProperty(Logger.prototype, "logLevel", {
            get: function () {
                return this._logLevel;
            },
            set: function (val) {
                if (!(val in LogLevel)) {
                    throw new TypeError("Invalid value \"" + val + "\" assigned to `logLevel`");
                }
                this._logLevel = val;
            },
            enumerable: false,
            configurable: true
        });
        // Workaround for setter/getter having to be the same type.
        Logger.prototype.setLogLevel = function (val) {
            this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;
        };
        Object.defineProperty(Logger.prototype, "logHandler", {
            get: function () {
                return this._logHandler;
            },
            set: function (val) {
                if (typeof val !== 'function') {
                    throw new TypeError('Value assigned to `logHandler` must be a function');
                }
                this._logHandler = val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Logger.prototype, "userLogHandler", {
            get: function () {
                return this._userLogHandler;
            },
            set: function (val) {
                this._userLogHandler = val;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * The functions below are all based on the `console` interface
         */
        Logger.prototype.debug = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$1([this, LogLevel.DEBUG], args));
            this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.DEBUG], args));
        };
        Logger.prototype.log = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$1([this, LogLevel.VERBOSE], args));
            this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.VERBOSE], args));
        };
        Logger.prototype.info = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$1([this, LogLevel.INFO], args));
            this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.INFO], args));
        };
        Logger.prototype.warn = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$1([this, LogLevel.WARN], args));
            this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.WARN], args));
        };
        Logger.prototype.error = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$1([this, LogLevel.ERROR], args));
            this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.ERROR], args));
        };
        return Logger;
    }());

    /**
     * Component for service name T, e.g. `auth`, `auth-internal`
     */
    var Component = /** @class */ (function () {
        /**
         *
         * @param name The public service name, e.g. app, auth, firestore, database
         * @param instanceFactory Service factory responsible for creating the public interface
         * @param type whether the service provided by the component is public or private
         */
        function Component(name, instanceFactory, type) {
            this.name = name;
            this.instanceFactory = instanceFactory;
            this.type = type;
            this.multipleInstances = false;
            /**
             * Properties to be added to the service namespace
             */
            this.serviceProps = {};
            this.instantiationMode = "LAZY" /* LAZY */;
        }
        Component.prototype.setInstantiationMode = function (mode) {
            this.instantiationMode = mode;
            return this;
        };
        Component.prototype.setMultipleInstances = function (multipleInstances) {
            this.multipleInstances = multipleInstances;
            return this;
        };
        Component.prototype.setServiceProps = function (props) {
            this.serviceProps = props;
            return this;
        };
        return Component;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _debugErrorMap() {
        var _a;
        return _a = {},
            _a["admin-restricted-operation" /* ADMIN_ONLY_OPERATION */] = 'This operation is restricted to administrators only.',
            _a["argument-error" /* ARGUMENT_ERROR */] = '',
            _a["app-not-authorized" /* APP_NOT_AUTHORIZED */] = "This app, identified by the domain where it's hosted, is not " +
                'authorized to use Firebase Authentication with the provided API key. ' +
                'Review your key configuration in the Google API console.',
            _a["app-not-installed" /* APP_NOT_INSTALLED */] = 'The requested mobile application corresponding to the identifier (' +
                'Android package name or iOS bundle ID) provided is not installed on ' +
                'this device.',
            _a["captcha-check-failed" /* CAPTCHA_CHECK_FAILED */] = 'The reCAPTCHA response token provided is either invalid, expired, ' +
                'already used or the domain associated with it does not match the list ' +
                'of whitelisted domains.',
            _a["code-expired" /* CODE_EXPIRED */] = 'The SMS code has expired. Please re-send the verification code to try ' +
                'again.',
            _a["cordova-not-ready" /* CORDOVA_NOT_READY */] = 'Cordova framework is not ready.',
            _a["cors-unsupported" /* CORS_UNSUPPORTED */] = 'This browser is not supported.',
            _a["credential-already-in-use" /* CREDENTIAL_ALREADY_IN_USE */] = 'This credential is already associated with a different user account.',
            _a["custom-token-mismatch" /* CREDENTIAL_MISMATCH */] = 'The custom token corresponds to a different audience.',
            _a["requires-recent-login" /* CREDENTIAL_TOO_OLD_LOGIN_AGAIN */] = 'This operation is sensitive and requires recent authentication. Log in ' +
                'again before retrying this request.',
            _a["dependent-sdk-initialized-before-auth" /* DEPENDENT_SDK_INIT_BEFORE_AUTH */] = 'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' +
                'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' +
                'starting any other Firebase SDK.',
            _a["dynamic-link-not-activated" /* DYNAMIC_LINK_NOT_ACTIVATED */] = 'Please activate Dynamic Links in the Firebase Console and agree to the terms and ' +
                'conditions.',
            _a["email-change-needs-verification" /* EMAIL_CHANGE_NEEDS_VERIFICATION */] = 'Multi-factor users must always have a verified email.',
            _a["email-already-in-use" /* EMAIL_EXISTS */] = 'The email address is already in use by another account.',
            _a["emulator-config-failed" /* EMULATOR_CONFIG_FAILED */] = 'Auth instance has already been used to make a network call. Auth can ' +
                'no longer be configured to use the emulator. Try calling ' +
                '"useAuthEmulator()" sooner.',
            _a["expired-action-code" /* EXPIRED_OOB_CODE */] = 'The action code has expired.',
            _a["cancelled-popup-request" /* EXPIRED_POPUP_REQUEST */] = 'This operation has been cancelled due to another conflicting popup being opened.',
            _a["internal-error" /* INTERNAL_ERROR */] = 'An internal AuthError has occurred.',
            _a["invalid-app-credential" /* INVALID_APP_CREDENTIAL */] = 'The phone verification request contains an invalid application verifier.' +
                ' The reCAPTCHA token response is either invalid or expired.',
            _a["invalid-app-id" /* INVALID_APP_ID */] = 'The mobile app identifier is not registed for the current project.',
            _a["invalid-user-token" /* INVALID_AUTH */] = "This user's credential isn't valid for this project. This can happen " +
                "if the user's token has been tampered with, or if the user isn't for " +
                'the project associated with this API key.',
            _a["invalid-auth-event" /* INVALID_AUTH_EVENT */] = 'An internal AuthError has occurred.',
            _a["invalid-verification-code" /* INVALID_CODE */] = 'The SMS verification code used to create the phone auth credential is ' +
                'invalid. Please resend the verification code sms and be sure use the ' +
                'verification code provided by the user.',
            _a["invalid-continue-uri" /* INVALID_CONTINUE_URI */] = 'The continue URL provided in the request is invalid.',
            _a["invalid-cordova-configuration" /* INVALID_CORDOVA_CONFIGURATION */] = 'The following Cordova plugins must be installed to enable OAuth sign-in: ' +
                'cordova-plugin-buildinfo, cordova-universal-links-plugin, ' +
                'cordova-plugin-browsertab, cordova-plugin-inappbrowser and ' +
                'cordova-plugin-customurlscheme.',
            _a["invalid-custom-token" /* INVALID_CUSTOM_TOKEN */] = 'The custom token format is incorrect. Please check the documentation.',
            _a["invalid-dynamic-link-domain" /* INVALID_DYNAMIC_LINK_DOMAIN */] = 'The provided dynamic link domain is not configured or authorized for the current project.',
            _a["invalid-email" /* INVALID_EMAIL */] = 'The email address is badly formatted.',
            _a["invalid-emulator-scheme" /* INVALID_EMULATOR_SCHEME */] = 'Emulator URL must start with a valid scheme (http:// or https://).',
            _a["invalid-api-key" /* INVALID_API_KEY */] = 'Your API key is invalid, please check you have copied it correctly.',
            _a["invalid-cert-hash" /* INVALID_CERT_HASH */] = 'The SHA-1 certificate hash provided is invalid.',
            _a["invalid-credential" /* INVALID_IDP_RESPONSE */] = 'The supplied auth credential is malformed or has expired.',
            _a["invalid-message-payload" /* INVALID_MESSAGE_PAYLOAD */] = 'The email template corresponding to this action contains invalid characters in its message. ' +
                'Please fix by going to the Auth email templates section in the Firebase Console.',
            _a["invalid-multi-factor-session" /* INVALID_MFA_SESSION */] = 'The request does not contain a valid proof of first factor successful sign-in.',
            _a["invalid-oauth-provider" /* INVALID_OAUTH_PROVIDER */] = 'EmailAuthProvider is not supported for this operation. This operation ' +
                'only supports OAuth providers.',
            _a["invalid-oauth-client-id" /* INVALID_OAUTH_CLIENT_ID */] = 'The OAuth client ID provided is either invalid or does not match the ' +
                'specified API key.',
            _a["unauthorized-domain" /* INVALID_ORIGIN */] = 'This domain is not authorized for OAuth operations for your Firebase ' +
                'project. Edit the list of authorized domains from the Firebase console.',
            _a["invalid-action-code" /* INVALID_OOB_CODE */] = 'The action code is invalid. This can happen if the code is malformed, ' +
                'expired, or has already been used.',
            _a["wrong-password" /* INVALID_PASSWORD */] = 'The password is invalid or the user does not have a password.',
            _a["invalid-persistence-type" /* INVALID_PERSISTENCE */] = 'The specified persistence type is invalid. It can only be local, session or none.',
            _a["invalid-phone-number" /* INVALID_PHONE_NUMBER */] = 'The format of the phone number provided is incorrect. Please enter the ' +
                'phone number in a format that can be parsed into E.164 format. E.164 ' +
                'phone numbers are written in the format [+][country code][subscriber ' +
                'number including area code].',
            _a["invalid-provider-id" /* INVALID_PROVIDER_ID */] = 'The specified provider ID is invalid.',
            _a["invalid-recipient-email" /* INVALID_RECIPIENT_EMAIL */] = 'The email corresponding to this action failed to send as the provided ' +
                'recipient email address is invalid.',
            _a["invalid-sender" /* INVALID_SENDER */] = 'The email template corresponding to this action contains an invalid sender email or name. ' +
                'Please fix by going to the Auth email templates section in the Firebase Console.',
            _a["invalid-verification-id" /* INVALID_SESSION_INFO */] = 'The verification ID used to create the phone auth credential is invalid.',
            _a["invalid-tenant-id" /* INVALID_TENANT_ID */] = "The Auth instance's tenant ID is invalid.",
            _a["missing-android-pkg-name" /* MISSING_ANDROID_PACKAGE_NAME */] = 'An Android Package Name must be provided if the Android App is required to be installed.',
            _a["auth-domain-config-required" /* MISSING_AUTH_DOMAIN */] = 'Be sure to include authDomain when calling firebase.initializeApp(), ' +
                'by following the instructions in the Firebase console.',
            _a["missing-app-credential" /* MISSING_APP_CREDENTIAL */] = 'The phone verification request is missing an application verifier ' +
                'assertion. A reCAPTCHA response token needs to be provided.',
            _a["missing-verification-code" /* MISSING_CODE */] = 'The phone auth credential was created with an empty SMS verification code.',
            _a["missing-continue-uri" /* MISSING_CONTINUE_URI */] = 'A continue URL must be provided in the request.',
            _a["missing-iframe-start" /* MISSING_IFRAME_START */] = 'An internal AuthError has occurred.',
            _a["missing-ios-bundle-id" /* MISSING_IOS_BUNDLE_ID */] = 'An iOS Bundle ID must be provided if an App Store ID is provided.',
            _a["missing-or-invalid-nonce" /* MISSING_OR_INVALID_NONCE */] = 'The request does not contain a valid nonce. This can occur if the ' +
                'SHA-256 hash of the provided raw nonce does not match the hashed nonce ' +
                'in the ID token payload.',
            _a["missing-multi-factor-info" /* MISSING_MFA_INFO */] = 'No second factor identifier is provided.',
            _a["missing-multi-factor-session" /* MISSING_MFA_SESSION */] = 'The request is missing proof of first factor successful sign-in.',
            _a["missing-phone-number" /* MISSING_PHONE_NUMBER */] = 'To send verification codes, provide a phone number for the recipient.',
            _a["missing-verification-id" /* MISSING_SESSION_INFO */] = 'The phone auth credential was created with an empty verification ID.',
            _a["app-deleted" /* MODULE_DESTROYED */] = 'This instance of FirebaseApp has been deleted.',
            _a["multi-factor-info-not-found" /* MFA_INFO_NOT_FOUND */] = 'The user does not have a second factor matching the identifier provided.',
            _a["multi-factor-auth-required" /* MFA_REQUIRED */] = 'Proof of ownership of a second factor is required to complete sign-in.',
            _a["account-exists-with-different-credential" /* NEED_CONFIRMATION */] = 'An account already exists with the same email address but different ' +
                'sign-in credentials. Sign in using a provider associated with this ' +
                'email address.',
            _a["network-request-failed" /* NETWORK_REQUEST_FAILED */] = 'A network AuthError (such as timeout, interrupted connection or unreachable host) has occurred.',
            _a["no-auth-event" /* NO_AUTH_EVENT */] = 'An internal AuthError has occurred.',
            _a["no-such-provider" /* NO_SUCH_PROVIDER */] = 'User was not linked to an account with the given provider.',
            _a["null-user" /* NULL_USER */] = 'A null user object was provided as the argument for an operation which ' +
                'requires a non-null user object.',
            _a["operation-not-allowed" /* OPERATION_NOT_ALLOWED */] = 'The given sign-in provider is disabled for this Firebase project. ' +
                'Enable it in the Firebase console, under the sign-in method tab of the ' +
                'Auth section.',
            _a["operation-not-supported-in-this-environment" /* OPERATION_NOT_SUPPORTED */] = 'This operation is not supported in the environment this application is ' +
                'running on. "location.protocol" must be http, https or chrome-extension' +
                ' and web storage must be enabled.',
            _a["popup-blocked" /* POPUP_BLOCKED */] = 'Unable to establish a connection with the popup. It may have been blocked by the browser.',
            _a["popup-closed-by-user" /* POPUP_CLOSED_BY_USER */] = 'The popup has been closed by the user before finalizing the operation.',
            _a["provider-already-linked" /* PROVIDER_ALREADY_LINKED */] = 'User can only be linked to one identity for the given provider.',
            _a["quota-exceeded" /* QUOTA_EXCEEDED */] = "The project's quota for this operation has been exceeded.",
            _a["redirect-cancelled-by-user" /* REDIRECT_CANCELLED_BY_USER */] = 'The redirect operation has been cancelled by the user before finalizing.',
            _a["redirect-operation-pending" /* REDIRECT_OPERATION_PENDING */] = 'A redirect sign-in operation is already pending.',
            _a["rejected-credential" /* REJECTED_CREDENTIAL */] = 'The request contains malformed or mismatching credentials.',
            _a["second-factor-already-in-use" /* SECOND_FACTOR_ALREADY_ENROLLED */] = 'The second factor is already enrolled on this account.',
            _a["maximum-second-factor-count-exceeded" /* SECOND_FACTOR_LIMIT_EXCEEDED */] = 'The maximum allowed number of second factors on a user has been exceeded.',
            _a["tenant-id-mismatch" /* TENANT_ID_MISMATCH */] = "The provided tenant ID does not match the Auth instance's tenant ID",
            _a["timeout" /* TIMEOUT */] = 'The operation has timed out.',
            _a["user-token-expired" /* TOKEN_EXPIRED */] = "The user's credential is no longer valid. The user must sign in again.",
            _a["too-many-requests" /* TOO_MANY_ATTEMPTS_TRY_LATER */] = 'We have blocked all requests from this device due to unusual activity. ' +
                'Try again later.',
            _a["unauthorized-continue-uri" /* UNAUTHORIZED_DOMAIN */] = 'The domain of the continue URL is not whitelisted.  Please whitelist ' +
                'the domain in the Firebase console.',
            _a["unsupported-first-factor" /* UNSUPPORTED_FIRST_FACTOR */] = 'Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.',
            _a["unsupported-persistence-type" /* UNSUPPORTED_PERSISTENCE */] = 'The current environment does not support the specified persistence type.',
            _a["unsupported-tenant-operation" /* UNSUPPORTED_TENANT_OPERATION */] = 'This operation is not supported in a multi-tenant context.',
            _a["unverified-email" /* UNVERIFIED_EMAIL */] = 'The operation requires a verified email.',
            _a["user-cancelled" /* USER_CANCELLED */] = 'The user did not grant your application the permissions it requested.',
            _a["user-not-found" /* USER_DELETED */] = 'There is no user record corresponding to this identifier. The user may ' +
                'have been deleted.',
            _a["user-disabled" /* USER_DISABLED */] = 'The user account has been disabled by an administrator.',
            _a["user-mismatch" /* USER_MISMATCH */] = 'The supplied credentials do not correspond to the previously signed in user.',
            _a["user-signed-out" /* USER_SIGNED_OUT */] = '',
            _a["weak-password" /* WEAK_PASSWORD */] = 'The password must be 6 characters long or more.',
            _a["web-storage-unsupported" /* WEB_STORAGE_UNSUPPORTED */] = 'This browser is not supported or 3rd party cookies and data may be disabled.',
            _a["already-initialized" /* ALREADY_INITIALIZED */] = 'Auth can only be initialized once per app.',
            _a;
    }
    function _prodErrorMap() {
        var _a;
        // We will include this one message in the prod error map since by the very
        // nature of this error, developers will never be able to see the message
        // using the debugErrorMap (which is installed during auth initialization).
        return _a = {},
            _a["dependent-sdk-initialized-before-auth" /* DEPENDENT_SDK_INIT_BEFORE_AUTH */] = 'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' +
                'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' +
                'starting any other Firebase SDK.',
            _a;
    }
    /**
     * A verbose error map with detailed descriptions for most error codes.
     *
     * See discussion at {@link @firebase/auth-types#AuthErrorMap}
     *
     * @public
     */
    var debugErrorMap = _debugErrorMap;
    /**
     * A minimal error map with all verbose error messages stripped.
     *
     * See discussion at {@link @firebase/auth-types#AuthErrorMap}
     *
     * @public
     */
    var prodErrorMap = _prodErrorMap;
    var _DEFAULT_AUTH_ERROR_FACTORY = new ErrorFactory('auth', 'Firebase', _prodErrorMap());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var logClient = new Logger('@firebase/auth-exp');
    function _logError(msg) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (logClient.logLevel <= LogLevel.ERROR) {
            logClient.error.apply(logClient, __spreadArrays(["Auth (" + app.SDK_VERSION + "): " + msg], args));
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _fail(authOrCode) {
        var rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            rest[_i - 1] = arguments[_i];
        }
        throw createErrorInternal.apply(void 0, __spreadArrays([authOrCode], rest));
    }
    function _createError(authOrCode) {
        var rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            rest[_i - 1] = arguments[_i];
        }
        return createErrorInternal.apply(void 0, __spreadArrays([authOrCode], rest));
    }
    function createErrorInternal(authOrCode) {
        var _a;
        var rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            rest[_i - 1] = arguments[_i];
        }
        if (typeof authOrCode !== 'string') {
            var code = rest[0];
            var fullParams = __spreadArrays(rest.slice(1));
            if (fullParams[0]) {
                fullParams[0].appName = authOrCode.name;
            }
            return (_a = authOrCode._errorFactory).create.apply(_a, __spreadArrays([code], fullParams));
        }
        return _DEFAULT_AUTH_ERROR_FACTORY.create.apply(_DEFAULT_AUTH_ERROR_FACTORY, __spreadArrays([authOrCode], rest));
    }
    function _assert(assertion, authOrCode) {
        var rest = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            rest[_i - 2] = arguments[_i];
        }
        if (!assertion) {
            throw createErrorInternal.apply(void 0, __spreadArrays([authOrCode], rest));
        }
    }
    /**
     * Unconditionally fails, throwing an internal error with the given message.
     *
     * @param failure type of failure encountered
     * @throws Error
     */
    function debugFail(failure) {
        // Log the failure in addition to throw an exception, just in case the
        // exception is swallowed.
        var message = "INTERNAL ASSERTION FAILED: " + failure;
        _logError(message);
        // NOTE: We don't use FirebaseError here because these are internal failures
        // that cannot be handled by the user. (Also it would create a circular
        // dependency between the error and assert modules which doesn't work.)
        throw new Error(message);
    }
    /**
     * Fails if the given assertion condition is false, throwing an Error with the
     * given message if it did.
     *
     * @param assertion
     * @param message
     */
    function debugAssert(assertion, message) {
        if (!assertion) {
            debugFail(message);
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var instanceCache = new Map();
    function _getInstance(cls) {
        debugAssert(cls instanceof Function, 'Expected a class definition');
        var instance = instanceCache.get(cls);
        if (instance) {
            debugAssert(instance instanceof cls, 'Instance stored in cache mismatched with class');
            return instance;
        }
        instance = new cls();
        instanceCache.set(cls, instance);
        return instance;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** @public */
    function initializeAuth(app$1, deps) {
        var provider = app._getProvider(app$1, 'auth-exp');
        if (provider.isInitialized()) {
            var auth_1 = provider.getImmediate();
            _fail(auth_1, "already-initialized" /* ALREADY_INITIALIZED */);
        }
        var auth = provider.getImmediate();
        _initializeAuthInstance(auth, deps);
        return auth;
    }
    function _initializeAuthInstance(auth, deps) {
        var persistence = (deps === null || deps === void 0 ? void 0 : deps.persistence) || [];
        var hierarchy = (Array.isArray(persistence)
            ? persistence
            : [persistence]).map(_getInstance);
        if (deps === null || deps === void 0 ? void 0 : deps.errorMap) {
            auth._updateErrorMap(deps.errorMap);
        }
        // This promise is intended to float; auth initialization happens in the
        // background, meanwhile the auth object may be used by the app.
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        auth._initializeWithPersistence(hierarchy, deps === null || deps === void 0 ? void 0 : deps.popupRedirectResolver);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _getCurrentUrl() {
        var _a;
        return (typeof self !== 'undefined' && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.href)) || '';
    }
    function _isHttpOrHttps() {
        return _getCurrentScheme() === 'http:' || _getCurrentScheme() === 'https:';
    }
    function _getCurrentScheme() {
        var _a;
        return (typeof self !== 'undefined' && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.protocol)) || null;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Determine whether the browser is working online
     */
    function _isOnline() {
        if (typeof navigator !== 'undefined' &&
            navigator &&
            'onLine' in navigator &&
            typeof navigator.onLine === 'boolean' &&
            // Apply only for traditional web apps and Chrome extensions.
            // This is especially true for Cordova apps which have unreliable
            // navigator.onLine behavior unless cordova-plugin-network-information is
            // installed which overwrites the native navigator.onLine value and
            // defines navigator.connection.
            (_isHttpOrHttps() || isBrowserExtension() || 'connection' in navigator)) {
            return navigator.onLine;
        }
        // If we can't determine the state, assume it is online.
        return true;
    }
    function _getUserLanguage() {
        if (typeof navigator === 'undefined') {
            return null;
        }
        var navigatorLanguage = navigator;
        return (
        // Most reliable, but only supported in Chrome/Firefox.
        (navigatorLanguage.languages && navigatorLanguage.languages[0]) ||
            // Supported in most browsers, but returns the language of the browser
            // UI, not the language set in browser settings.
            navigatorLanguage.language ||
            // Couldn't determine language.
            null);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A structure to help pick between a range of long and short delay durations
     * depending on the current environment. In general, the long delay is used for
     * mobile environments whereas short delays are used for desktop environments.
     */
    var Delay = /** @class */ (function () {
        function Delay(shortDelay, longDelay) {
            this.shortDelay = shortDelay;
            this.longDelay = longDelay;
            // Internal error when improperly initialized.
            debugAssert(longDelay > shortDelay, 'Short delay should be less than long delay!');
            this.isMobile = isMobileCordova() || isReactNative();
        }
        Delay.prototype.get = function () {
            if (!_isOnline()) {
                // Pick the shorter timeout.
                return Math.min(5000 /* OFFLINE */, this.shortDelay);
            }
            // If running in a mobile environment, return the long delay, otherwise
            // return the short delay.
            // This could be improved in the future to dynamically change based on other
            // variables instead of just reading the current environment.
            return this.isMobile ? this.longDelay : this.shortDelay;
        };
        return Delay;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _emulatorUrl(config, path) {
        debugAssert(config.emulator, 'Emulator should always be set here');
        var url = config.emulator.url;
        if (!path) {
            return url;
        }
        return "" + url + (path.startsWith('/') ? path.slice(1) : path);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var FetchProvider = /** @class */ (function () {
        function FetchProvider() {
        }
        FetchProvider.initialize = function (fetchImpl, headersImpl, responseImpl) {
            this.fetchImpl = fetchImpl;
            if (headersImpl) {
                this.headersImpl = headersImpl;
            }
            if (responseImpl) {
                this.responseImpl = responseImpl;
            }
        };
        FetchProvider.fetch = function () {
            if (this.fetchImpl) {
                return this.fetchImpl;
            }
            if (typeof self !== 'undefined' && 'fetch' in self) {
                return self.fetch;
            }
            debugFail('Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');
        };
        FetchProvider.headers = function () {
            if (this.headersImpl) {
                return this.headersImpl;
            }
            if (typeof self !== 'undefined' && 'Headers' in self) {
                return self.Headers;
            }
            debugFail('Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');
        };
        FetchProvider.response = function () {
            if (this.responseImpl) {
                return this.responseImpl;
            }
            if (typeof self !== 'undefined' && 'Response' in self) {
                return self.Response;
            }
            debugFail('Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');
        };
        return FetchProvider;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a$1;
    /**
     * Map from errors returned by the server to errors to developer visible errors
     */
    var SERVER_ERROR_MAP = (_a$1 = {},
        // Custom token errors.
        _a$1["CREDENTIAL_MISMATCH" /* CREDENTIAL_MISMATCH */] = "custom-token-mismatch" /* CREDENTIAL_MISMATCH */,
        // This can only happen if the SDK sends a bad request.
        _a$1["MISSING_CUSTOM_TOKEN" /* MISSING_CUSTOM_TOKEN */] = "internal-error" /* INTERNAL_ERROR */,
        // Create Auth URI errors.
        _a$1["INVALID_IDENTIFIER" /* INVALID_IDENTIFIER */] = "invalid-email" /* INVALID_EMAIL */,
        // This can only happen if the SDK sends a bad request.
        _a$1["MISSING_CONTINUE_URI" /* MISSING_CONTINUE_URI */] = "internal-error" /* INTERNAL_ERROR */,
        // Sign in with email and password errors (some apply to sign up too).
        _a$1["INVALID_PASSWORD" /* INVALID_PASSWORD */] = "wrong-password" /* INVALID_PASSWORD */,
        // This can only happen if the SDK sends a bad request.
        _a$1["MISSING_PASSWORD" /* MISSING_PASSWORD */] = "internal-error" /* INTERNAL_ERROR */,
        // Sign up with email and password errors.
        _a$1["EMAIL_EXISTS" /* EMAIL_EXISTS */] = "email-already-in-use" /* EMAIL_EXISTS */,
        _a$1["PASSWORD_LOGIN_DISABLED" /* PASSWORD_LOGIN_DISABLED */] = "operation-not-allowed" /* OPERATION_NOT_ALLOWED */,
        // Verify assertion for sign in with credential errors:
        _a$1["INVALID_IDP_RESPONSE" /* INVALID_IDP_RESPONSE */] = "invalid-credential" /* INVALID_IDP_RESPONSE */,
        _a$1["INVALID_PENDING_TOKEN" /* INVALID_PENDING_TOKEN */] = "invalid-credential" /* INVALID_IDP_RESPONSE */,
        _a$1["FEDERATED_USER_ID_ALREADY_LINKED" /* FEDERATED_USER_ID_ALREADY_LINKED */] = "credential-already-in-use" /* CREDENTIAL_ALREADY_IN_USE */,
        // This can only happen if the SDK sends a bad request.
        _a$1["MISSING_REQ_TYPE" /* MISSING_REQ_TYPE */] = "internal-error" /* INTERNAL_ERROR */,
        // Send Password reset email errors:
        _a$1["EMAIL_NOT_FOUND" /* EMAIL_NOT_FOUND */] = "user-not-found" /* USER_DELETED */,
        _a$1["RESET_PASSWORD_EXCEED_LIMIT" /* RESET_PASSWORD_EXCEED_LIMIT */] = "too-many-requests" /* TOO_MANY_ATTEMPTS_TRY_LATER */,
        _a$1["EXPIRED_OOB_CODE" /* EXPIRED_OOB_CODE */] = "expired-action-code" /* EXPIRED_OOB_CODE */,
        _a$1["INVALID_OOB_CODE" /* INVALID_OOB_CODE */] = "invalid-action-code" /* INVALID_OOB_CODE */,
        // This can only happen if the SDK sends a bad request.
        _a$1["MISSING_OOB_CODE" /* MISSING_OOB_CODE */] = "internal-error" /* INTERNAL_ERROR */,
        // Operations that require ID token in request:
        _a$1["CREDENTIAL_TOO_OLD_LOGIN_AGAIN" /* CREDENTIAL_TOO_OLD_LOGIN_AGAIN */] = "requires-recent-login" /* CREDENTIAL_TOO_OLD_LOGIN_AGAIN */,
        _a$1["INVALID_ID_TOKEN" /* INVALID_ID_TOKEN */] = "invalid-user-token" /* INVALID_AUTH */,
        _a$1["TOKEN_EXPIRED" /* TOKEN_EXPIRED */] = "user-token-expired" /* TOKEN_EXPIRED */,
        _a$1["USER_NOT_FOUND" /* USER_NOT_FOUND */] = "user-token-expired" /* TOKEN_EXPIRED */,
        // Other errors.
        _a$1["TOO_MANY_ATTEMPTS_TRY_LATER" /* TOO_MANY_ATTEMPTS_TRY_LATER */] = "too-many-requests" /* TOO_MANY_ATTEMPTS_TRY_LATER */,
        // Phone Auth related errors.
        _a$1["INVALID_CODE" /* INVALID_CODE */] = "invalid-verification-code" /* INVALID_CODE */,
        _a$1["INVALID_SESSION_INFO" /* INVALID_SESSION_INFO */] = "invalid-verification-id" /* INVALID_SESSION_INFO */,
        _a$1["INVALID_TEMPORARY_PROOF" /* INVALID_TEMPORARY_PROOF */] = "invalid-credential" /* INVALID_IDP_RESPONSE */,
        _a$1["MISSING_SESSION_INFO" /* MISSING_SESSION_INFO */] = "missing-verification-id" /* MISSING_SESSION_INFO */,
        _a$1["SESSION_EXPIRED" /* SESSION_EXPIRED */] = "code-expired" /* CODE_EXPIRED */,
        // Other action code errors when additional settings passed.
        // MISSING_CONTINUE_URI is getting mapped to INTERNAL_ERROR above.
        // This is OK as this error will be caught by client side validation.
        _a$1["MISSING_ANDROID_PACKAGE_NAME" /* MISSING_ANDROID_PACKAGE_NAME */] = "missing-android-pkg-name" /* MISSING_ANDROID_PACKAGE_NAME */,
        _a$1["UNAUTHORIZED_DOMAIN" /* UNAUTHORIZED_DOMAIN */] = "unauthorized-continue-uri" /* UNAUTHORIZED_DOMAIN */,
        // getProjectConfig errors when clientId is passed.
        _a$1["INVALID_OAUTH_CLIENT_ID" /* INVALID_OAUTH_CLIENT_ID */] = "invalid-oauth-client-id" /* INVALID_OAUTH_CLIENT_ID */,
        // User actions (sign-up or deletion) disabled errors.
        _a$1["ADMIN_ONLY_OPERATION" /* ADMIN_ONLY_OPERATION */] = "admin-restricted-operation" /* ADMIN_ONLY_OPERATION */,
        // Multi factor related errors.
        _a$1["INVALID_MFA_PENDING_CREDENTIAL" /* INVALID_MFA_PENDING_CREDENTIAL */] = "invalid-multi-factor-session" /* INVALID_MFA_SESSION */,
        _a$1["MFA_ENROLLMENT_NOT_FOUND" /* MFA_ENROLLMENT_NOT_FOUND */] = "multi-factor-info-not-found" /* MFA_INFO_NOT_FOUND */,
        _a$1["MISSING_MFA_ENROLLMENT_ID" /* MISSING_MFA_ENROLLMENT_ID */] = "missing-multi-factor-info" /* MISSING_MFA_INFO */,
        _a$1["MISSING_MFA_PENDING_CREDENTIAL" /* MISSING_MFA_PENDING_CREDENTIAL */] = "missing-multi-factor-session" /* MISSING_MFA_SESSION */,
        _a$1["SECOND_FACTOR_EXISTS" /* SECOND_FACTOR_EXISTS */] = "second-factor-already-in-use" /* SECOND_FACTOR_ALREADY_ENROLLED */,
        _a$1["SECOND_FACTOR_LIMIT_EXCEEDED" /* SECOND_FACTOR_LIMIT_EXCEEDED */] = "maximum-second-factor-count-exceeded" /* SECOND_FACTOR_LIMIT_EXCEEDED */,
        _a$1);

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DEFAULT_API_TIMEOUT_MS = new Delay(30000, 60000);
    function _performApiRequest(auth, method, path, request, customErrorMap) {
        if (customErrorMap === void 0) { customErrorMap = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _performFetchWithErrorHandling(auth, customErrorMap, function () {
                        var body = {};
                        var params = {};
                        if (request) {
                            if (method === "GET" /* GET */) {
                                params = request;
                            }
                            else {
                                body = {
                                    body: JSON.stringify(request)
                                };
                            }
                        }
                        var query = querystring(__assign({ key: auth.config.apiKey }, params)).slice(1);
                        var headers = new (FetchProvider.headers())();
                        headers.set("Content-Type" /* CONTENT_TYPE */, 'application/json');
                        headers.set("X-Client-Version" /* X_CLIENT_VERSION */, auth.config.sdkClientVersion);
                        if (auth.languageCode) {
                            headers.set("X-Firebase-Locale" /* X_FIREBASE_LOCALE */, auth.languageCode);
                        }
                        return FetchProvider.fetch()(_getFinalTarget(auth, auth.config.apiHost, path, query), __assign({ method: method,
                            headers: headers, referrerPolicy: 'no-referrer' }, body));
                    })];
            });
        });
    }
    function _performFetchWithErrorHandling(auth, customErrorMap, fetchFn) {
        return __awaiter(this, void 0, void 0, function () {
            var errorMap, networkTimeout, response, json, errorMessage, serverErrorCode, authError, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        auth._canInitEmulator = false;
                        errorMap = __assign(__assign({}, SERVER_ERROR_MAP), customErrorMap);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, , 5]);
                        networkTimeout = new NetworkTimeout(auth);
                        return [4 /*yield*/, Promise.race([
                                fetchFn(),
                                networkTimeout.promise
                            ])];
                    case 2:
                        response = _a.sent();
                        // If we've reached this point, the fetch succeeded and the networkTimeout
                        // didn't throw; clear the network timeout delay so that Node won't hang
                        networkTimeout.clearNetworkTimeout();
                        return [4 /*yield*/, response.json()];
                    case 3:
                        json = _a.sent();
                        if ('needConfirmation' in json) {
                            throw makeTaggedError(auth, "account-exists-with-different-credential" /* NEED_CONFIRMATION */, json);
                        }
                        if (response.ok && !('errorMessage' in json)) {
                            return [2 /*return*/, json];
                        }
                        else {
                            errorMessage = response.ok ? json.errorMessage : json.error.message;
                            serverErrorCode = errorMessage.split(' : ')[0];
                            if (serverErrorCode === "FEDERATED_USER_ID_ALREADY_LINKED" /* FEDERATED_USER_ID_ALREADY_LINKED */) {
                                throw makeTaggedError(auth, "credential-already-in-use" /* CREDENTIAL_ALREADY_IN_USE */, json);
                            }
                            else if (serverErrorCode === "EMAIL_EXISTS" /* EMAIL_EXISTS */) {
                                throw makeTaggedError(auth, "email-already-in-use" /* EMAIL_EXISTS */, json);
                            }
                            authError = errorMap[serverErrorCode] ||
                                serverErrorCode
                                    .toLowerCase()
                                    .replace(/[_\s]+/g, '-');
                            _fail(auth, authError);
                        }
                        return [3 /*break*/, 5];
                    case 4:
                        e_1 = _a.sent();
                        if (e_1 instanceof FirebaseError) {
                            throw e_1;
                        }
                        _fail(auth, "network-request-failed" /* NETWORK_REQUEST_FAILED */);
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    }
    function _performSignInRequest(auth, method, path, request, customErrorMap) {
        if (customErrorMap === void 0) { customErrorMap = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var serverResponse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, _performApiRequest(auth, method, path, request, customErrorMap)];
                    case 1:
                        serverResponse = (_a.sent());
                        if ('mfaPendingCredential' in serverResponse) {
                            _fail(auth, "multi-factor-auth-required" /* MFA_REQUIRED */, {
                                serverResponse: serverResponse
                            });
                        }
                        return [2 /*return*/, serverResponse];
                }
            });
        });
    }
    function _getFinalTarget(auth, host, path, query) {
        var base = "" + host + path + "?" + query;
        if (!auth.config.emulator) {
            return auth.config.apiScheme + "://" + base;
        }
        return _emulatorUrl(auth.config, base);
    }
    var NetworkTimeout = /** @class */ (function () {
        function NetworkTimeout(auth) {
            var _this = this;
            this.auth = auth;
            // Node timers and browser timers are fundamentally incompatible, but we
            // don't care about the value here
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            this.timer = null;
            this.promise = new Promise(function (_, reject) {
                _this.timer = setTimeout(function () {
                    return reject(_createError(_this.auth, "timeout" /* TIMEOUT */));
                }, DEFAULT_API_TIMEOUT_MS.get());
            });
        }
        NetworkTimeout.prototype.clearNetworkTimeout = function () {
            clearTimeout(this.timer);
        };
        return NetworkTimeout;
    }());
    function makeTaggedError(auth, code, response) {
        var errorParams = {
            appName: auth.name
        };
        if (response.email) {
            errorParams.email = response.email;
        }
        if (response.phoneNumber) {
            errorParams.phoneNumber = response.phoneNumber;
        }
        var error = _createError(auth, code, errorParams);
        // We know customData is defined on error because errorParams is defined
        error.customData._tokenResponse = response;
        return error;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function deleteAccount(auth, request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _performApiRequest(auth, "POST" /* POST */, "/v1/accounts:delete" /* DELETE_ACCOUNT */, request)];
            });
        });
    }
    function deleteLinkedAccounts(auth, request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _performApiRequest(auth, "POST" /* POST */, "/v1/accounts:update" /* SET_ACCOUNT_INFO */, request)];
            });
        });
    }
    function getAccountInfo(auth, request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _performApiRequest(auth, "POST" /* POST */, "/v1/accounts:lookup" /* GET_ACCOUNT_INFO */, request)];
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function utcTimestampToDateString(utcTimestamp) {
        if (!utcTimestamp) {
            return undefined;
        }
        try {
            // Convert to date object.
            var date = new Date(Number(utcTimestamp));
            // Test date is valid.
            if (!isNaN(date.getTime())) {
                // Convert to UTC date string.
                return date.toUTCString();
            }
        }
        catch (e) {
            // Do nothing. undefined will be returned.
        }
        return undefined;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns a JSON Web Token (JWT) used to identify the user to a Firebase service.
     *
     * @remarks
     * Returns the current token if it has not expired or if it will not expire in the next five
     * minutes. Otherwise, this will refresh the token and return a new one.
     *
     * @param user - The user.
     * @param forceRefresh - Force refresh regardless of token expiration.
     *
     * @public
     */
    function getIdToken(user, forceRefresh) {
        if (forceRefresh === void 0) { forceRefresh = false; }
        return user.getIdToken(forceRefresh);
    }
    /**
     * Returns a deserialized JSON Web Token (JWT) used to identitfy the user to a Firebase service.
     *
     * @remarks
     * Returns the current token if it has not expired or if it will not expire in the next five
     * minutes. Otherwise, this will refresh the token and return a new one.
     *
     * @param user - The user.
     * @param forceRefresh - Force refresh regardless of token expiration.
     *
     * @public
     */
    function getIdTokenResult(user, forceRefresh) {
        if (forceRefresh === void 0) { forceRefresh = false; }
        return __awaiter(this, void 0, void 0, function () {
            var userInternal, token, claims, firebase, signInProvider;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        userInternal = user;
                        return [4 /*yield*/, user.getIdToken(forceRefresh)];
                    case 1:
                        token = _a.sent();
                        claims = _parseToken(token);
                        _assert(claims && claims.exp && claims.auth_time && claims.iat, userInternal.auth, "internal-error" /* INTERNAL_ERROR */);
                        firebase = typeof claims.firebase === 'object' ? claims.firebase : undefined;
                        signInProvider = firebase === null || firebase === void 0 ? void 0 : firebase['sign_in_provider'];
                        return [2 /*return*/, {
                                claims: claims,
                                token: token,
                                authTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.auth_time)),
                                issuedAtTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.iat)),
                                expirationTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.exp)),
                                signInProvider: signInProvider || null,
                                signInSecondFactor: (firebase === null || firebase === void 0 ? void 0 : firebase['sign_in_second_factor']) || null
                            }];
                }
            });
        });
    }
    function secondsStringToMilliseconds(seconds) {
        return Number(seconds) * 1000;
    }
    function _parseToken(token) {
        var _a = token.split('.'), algorithm = _a[0], payload = _a[1], signature = _a[2];
        if (algorithm === undefined ||
            payload === undefined ||
            signature === undefined) {
            _logError('JWT malformed, contained fewer than 3 sections');
            return null;
        }
        try {
            var decoded = base64Decode(payload);
            if (!decoded) {
                _logError('Failed to decode base64 JWT payload');
                return null;
            }
            return JSON.parse(decoded);
        }
        catch (e) {
            _logError('Caught error parsing JWT payload as JSON', e);
            return null;
        }
    }
    /**
     * Extract expiresIn TTL from a token by subtracting the expiration from the issuance.
     */
    function _tokenExpiresIn(token) {
        var parsedToken = _parseToken(token);
        _assert(parsedToken, "internal-error" /* INTERNAL_ERROR */);
        _assert(typeof parsedToken.exp !== 'undefined', "internal-error" /* INTERNAL_ERROR */);
        _assert(typeof parsedToken.iat !== 'undefined', "internal-error" /* INTERNAL_ERROR */);
        return Number(parsedToken.exp) - Number(parsedToken.iat);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _logoutIfInvalidated(user, promise, bypassAuthState) {
        if (bypassAuthState === void 0) { bypassAuthState = false; }
        return __awaiter(this, void 0, void 0, function () {
            var e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (bypassAuthState) {
                            return [2 /*return*/, promise];
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 6]);
                        return [4 /*yield*/, promise];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        e_1 = _a.sent();
                        if (!(e_1 instanceof FirebaseError && isUserInvalidated(e_1))) return [3 /*break*/, 5];
                        if (!(user.auth.currentUser === user)) return [3 /*break*/, 5];
                        return [4 /*yield*/, user.auth.signOut()];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5: throw e_1;
                    case 6: return [2 /*return*/];
                }
            });
        });
    }
    function isUserInvalidated(_a) {
        var code = _a.code;
        return (code === "auth/" + "user-disabled" /* USER_DISABLED */ ||
            code === "auth/" + "user-token-expired" /* TOKEN_EXPIRED */);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ProactiveRefresh = /** @class */ (function () {
        function ProactiveRefresh(user) {
            this.user = user;
            this.isRunning = false;
            // Node timers and browser timers return fundamentally different types.
            // We don't actually care what the value is but TS won't accept unknown and
            // we can't cast properly in both environments.
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            this.timerId = null;
            this.errorBackoff = 30000 /* RETRY_BACKOFF_MIN */;
        }
        ProactiveRefresh.prototype._start = function () {
            if (this.isRunning) {
                return;
            }
            this.isRunning = true;
            this.schedule();
        };
        ProactiveRefresh.prototype._stop = function () {
            if (!this.isRunning) {
                return;
            }
            this.isRunning = false;
            if (this.timerId !== null) {
                clearTimeout(this.timerId);
            }
        };
        ProactiveRefresh.prototype.getInterval = function (wasError) {
            var _a;
            if (wasError) {
                var interval = this.errorBackoff;
                this.errorBackoff = Math.min(this.errorBackoff * 2, 960000 /* RETRY_BACKOFF_MAX */);
                return interval;
            }
            else {
                // Reset the error backoff
                this.errorBackoff = 30000 /* RETRY_BACKOFF_MIN */;
                var expTime = (_a = this.user.stsTokenManager.expirationTime) !== null && _a !== void 0 ? _a : 0;
                var interval = expTime - Date.now() - 300000 /* OFFSET */;
                return Math.max(0, interval);
            }
        };
        ProactiveRefresh.prototype.schedule = function (wasError) {
            var _this = this;
            if (wasError === void 0) { wasError = false; }
            if (!this.isRunning) {
                // Just in case...
                return;
            }
            var interval = this.getInterval(wasError);
            this.timerId = setTimeout(function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.iteration()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); }, interval);
        };
        ProactiveRefresh.prototype.iteration = function () {
            return __awaiter(this, void 0, void 0, function () {
                var e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.user.getIdToken(true)];
                        case 1:
                            _a.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            e_1 = _a.sent();
                            // Only retry on network errors
                            if (e_1.code === "auth/" + "network-request-failed" /* NETWORK_REQUEST_FAILED */) {
                                this.schedule(/* wasError */ true);
                            }
                            return [2 /*return*/];
                        case 3:
                            this.schedule();
                            return [2 /*return*/];
                    }
                });
            });
        };
        return ProactiveRefresh;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var UserMetadata = /** @class */ (function () {
        function UserMetadata(createdAt, lastLoginAt) {
            this.createdAt = createdAt;
            this.lastLoginAt = lastLoginAt;
            this._initializeTime();
        }
        UserMetadata.prototype._initializeTime = function () {
            this.lastSignInTime = utcTimestampToDateString(this.lastLoginAt);
            this.creationTime = utcTimestampToDateString(this.createdAt);
        };
        UserMetadata.prototype._copy = function (metadata) {
            this.createdAt = metadata.createdAt;
            this.lastLoginAt = metadata.lastLoginAt;
            this._initializeTime();
        };
        UserMetadata.prototype.toJSON = function () {
            return {
                createdAt: this.createdAt,
                lastLoginAt: this.lastLoginAt
            };
        };
        return UserMetadata;
    }());

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _reloadWithoutSaving(user) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var auth, idToken, response, coreAccount, newProviderData, providerData, oldIsAnonymous, newIsAnonymous, isAnonymous, updates;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        auth = user.auth;
                        return [4 /*yield*/, user.getIdToken()];
                    case 1:
                        idToken = _b.sent();
                        return [4 /*yield*/, _logoutIfInvalidated(user, getAccountInfo(auth, { idToken: idToken }))];
                    case 2:
                        response = _b.sent();
                        _assert(response === null || response === void 0 ? void 0 : response.users.length, auth, "internal-error" /* INTERNAL_ERROR */);
                        coreAccount = response.users[0];
                        user._notifyReloadListener(coreAccount);
                        newProviderData = ((_a = coreAccount.providerUserInfo) === null || _a === void 0 ? void 0 : _a.length) ? extractProviderData(coreAccount.providerUserInfo)
                            : [];
                        providerData = mergeProviderData(user.providerData, newProviderData);
                        oldIsAnonymous = user.isAnonymous;
                        newIsAnonymous = !(user.email && coreAccount.passwordHash) && !(providerData === null || providerData === void 0 ? void 0 : providerData.length);
                        isAnonymous = !oldIsAnonymous ? false : newIsAnonymous;
                        updates = {
                            uid: coreAccount.localId,
                            displayName: coreAccount.displayName || null,
                            photoURL: coreAccount.photoUrl || null,
                            email: coreAccount.email || null,
                            emailVerified: coreAccount.emailVerified || false,
                            phoneNumber: coreAccount.phoneNumber || null,
                            tenantId: coreAccount.tenantId || null,
                            providerData: providerData,
                            metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),
                            isAnonymous: isAnonymous
                        };
                        Object.assign(user, updates);
                        return [2 /*return*/];
                }
            });
        });
    }
    /**
     * Reloads user account data, if signed in.
     *
     * @param user - The user.
     *
     * @public
     */
    function reload(user) {
        return __awaiter(this, void 0, void 0, function () {
            var userInternal;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        userInternal = user;
                        return [4 /*yield*/, _reloadWithoutSaving(userInternal)];
                    case 1:
                        _a.sent();
                        // Even though the current user hasn't changed, update
                        // current user will trigger a persistence update w/ the
                        // new info.
                        return [4 /*yield*/, userInternal.auth._persistUserIfCurrent(userInternal)];
                    case 2:
                        // Even though the current user hasn't changed, update
                        // current user will trigger a persistence update w/ the
                        // new info.
                        _a.sent();
                        userInternal.auth._notifyListenersIfCurrent(userInternal);
                        return [2 /*return*/];
                }
            });
        });
    }
    function mergeProviderData(original, newData) {
        var deduped = original.filter(function (o) { return !newData.some(function (n) { return n.providerId === o.providerId; }); });
        return __spreadArrays(deduped, newData);
    }
    function extractProviderData(providers) {
        return providers.map(function (_a) {
            var providerId = _a.providerId, provider = __rest(_a, ["providerId"]);
            return {
                providerId: providerId,
                uid: provider.rawId || '',
                displayName: provider.displayName || null,
                email: provider.email || null,
                phoneNumber: provider.phoneNumber || null,
                photoURL: provider.photoUrl || null
            };
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function requestStsToken(auth, refreshToken) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, _performFetchWithErrorHandling(auth, {}, function () {
                            var body = querystring({
                                'grant_type': 'refresh_token',
                                'refresh_token': refreshToken
                            }).slice(1);
                            var _a = auth.config, tokenApiHost = _a.tokenApiHost, apiKey = _a.apiKey, sdkClientVersion = _a.sdkClientVersion;
                            var url = _getFinalTarget(auth, tokenApiHost, "/v1/token" /* TOKEN */, "key=" + apiKey);
                            return FetchProvider.fetch()(url, {
                                method: "POST" /* POST */,
                                headers: {
                                    'X-Client-Version': sdkClientVersion,
                                    'Content-Type': 'application/x-www-form-urlencoded'
                                },
                                body: body
                            });
                        })];
                    case 1:
                        response = _a.sent();
                        // The response comes back in snake_case. Convert to camel:
                        return [2 /*return*/, {
                                accessToken: response.access_token,
                                expiresIn: response.expires_in,
                                refreshToken: response.refresh_token
                            }];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var StsTokenManager = /** @class */ (function () {
        function StsTokenManager() {
            this.refreshToken = null;
            this.accessToken = null;
            this.expirationTime = null;
        }
        Object.defineProperty(StsTokenManager.prototype, "isExpired", {
            get: function () {
                return (!this.expirationTime ||
                    Date.now() > this.expirationTime - 30000 /* TOKEN_REFRESH */);
            },
            enumerable: false,
            configurable: true
        });
        StsTokenManager.prototype.updateFromServerResponse = function (response) {
            _assert(response.idToken, "internal-error" /* INTERNAL_ERROR */);
            _assert(typeof response.idToken !== 'undefined', "internal-error" /* INTERNAL_ERROR */);
            _assert(typeof response.refreshToken !== 'undefined', "internal-error" /* INTERNAL_ERROR */);
            var expiresIn = 'expiresIn' in response && typeof response.expiresIn !== 'undefined'
                ? Number(response.expiresIn)
                : _tokenExpiresIn(response.idToken);
            this.updateTokensAndExpiration(response.idToken, response.refreshToken, expiresIn);
        };
        StsTokenManager.prototype.getToken = function (auth, forceRefresh) {
            if (forceRefresh === void 0) { forceRefresh = false; }
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _assert(!this.accessToken || this.refreshToken, auth, "user-token-expired" /* TOKEN_EXPIRED */);
                            if (!forceRefresh && this.accessToken && !this.isExpired) {
                                return [2 /*return*/, this.accessToken];
                            }
                            if (!this.refreshToken) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.refresh(auth, this.refreshToken)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/, this.accessToken];
                        case 2: return [2 /*return*/, null];
                    }
                });
            });
        };
        StsTokenManager.prototype.clearRefreshToken = function () {
            this.refreshToken = null;
        };
        StsTokenManager.prototype.refresh = function (auth, oldToken) {
            return __awaiter(this, void 0, void 0, function () {
                var _a, accessToken, refreshToken, expiresIn;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, requestStsToken(auth, oldToken)];
                        case 1:
                            _a = _b.sent(), accessToken = _a.accessToken, refreshToken = _a.refreshToken, expiresIn = _a.expiresIn;
                            this.updateTokensAndExpiration(accessToken, refreshToken, Number(expiresIn));
                            return [2 /*return*/];
                    }
                });
            });
        };
        StsTokenManager.prototype.updateTokensAndExpiration = function (accessToken, refreshToken, expiresInSec) {
            this.refreshToken = refreshToken || null;
            this.accessToken = accessToken || null;
            this.expirationTime = Date.now() + expiresInSec * 1000;
        };
        StsTokenManager.fromJSON = function (appName, object) {
            var refreshToken = object.refreshToken, accessToken = object.accessToken, expirationTime = object.expirationTime;
            var manager = new StsTokenManager();
            if (refreshToken) {
                _assert(typeof refreshToken === 'string', "internal-error" /* INTERNAL_ERROR */, {
                    appName: appName
                });
                manager.refreshToken = refreshToken;
            }
            if (accessToken) {
                _assert(typeof accessToken === 'string', "internal-error" /* INTERNAL_ERROR */, {
                    appName: appName
                });
                manager.accessToken = accessToken;
            }
            if (expirationTime) {
                _assert(typeof expirationTime === 'number', "internal-error" /* INTERNAL_ERROR */, {
                    appName: appName
                });
                manager.expirationTime = expirationTime;
            }
            return manager;
        };
        StsTokenManager.prototype.toJSON = function () {
            return {
                refreshToken: this.refreshToken,
                accessToken: this.accessToken,
                expirationTime: this.expirationTime
            };
        };
        StsTokenManager.prototype._assign = function (stsTokenManager) {
            this.accessToken = stsTokenManager.accessToken;
            this.refreshToken = stsTokenManager.refreshToken;
            this.expirationTime = stsTokenManager.expirationTime;
        };
        StsTokenManager.prototype._clone = function () {
            return Object.assign(new StsTokenManager(), this.toJSON());
        };
        StsTokenManager.prototype._performRefresh = function () {
            return debugFail('not implemented');
        };
        return StsTokenManager;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function assertStringOrUndefined(assertion, appName) {
        _assert(typeof assertion === 'string' || typeof assertion === 'undefined', "internal-error" /* INTERNAL_ERROR */, { appName: appName });
    }
    var UserImpl = /** @class */ (function () {
        function UserImpl(_a) {
            var uid = _a.uid, auth = _a.auth, stsTokenManager = _a.stsTokenManager, opt = __rest(_a, ["uid", "auth", "stsTokenManager"]);
            // For the user object, provider is always Firebase.
            this.providerId = "firebase" /* FIREBASE */;
            this.emailVerified = false;
            this.isAnonymous = false;
            this.tenantId = null;
            this.providerData = [];
            this.proactiveRefresh = new ProactiveRefresh(this);
            this.reloadUserInfo = null;
            this.reloadListener = null;
            this.uid = uid;
            this.auth = auth;
            this.stsTokenManager = stsTokenManager;
            this.accessToken = stsTokenManager.accessToken;
            this.displayName = opt.displayName || null;
            this.email = opt.email || null;
            this.phoneNumber = opt.phoneNumber || null;
            this.photoURL = opt.photoURL || null;
            this.isAnonymous = opt.isAnonymous || false;
            this.metadata = new UserMetadata(opt.createdAt || undefined, opt.lastLoginAt || undefined);
        }
        UserImpl.prototype.getIdToken = function (forceRefresh) {
            return __awaiter(this, void 0, void 0, function () {
                var accessToken;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, _logoutIfInvalidated(this, this.stsTokenManager.getToken(this.auth, forceRefresh))];
                        case 1:
                            accessToken = _a.sent();
                            _assert(accessToken, this.auth, "internal-error" /* INTERNAL_ERROR */);
                            if (!(this.accessToken !== accessToken)) return [3 /*break*/, 3];
                            this.accessToken = accessToken;
                            return [4 /*yield*/, this.auth._persistUserIfCurrent(this)];
                        case 2:
                            _a.sent();
                            this.auth._notifyListenersIfCurrent(this);
                            _a.label = 3;
                        case 3: return [2 /*return*/, accessToken];
                    }
                });
            });
        };
        UserImpl.prototype.getIdTokenResult = function (forceRefresh) {
            return getIdTokenResult(this, forceRefresh);
        };
        UserImpl.prototype.reload = function () {
            return reload(this);
        };
        UserImpl.prototype._assign = function (user) {
            if (this === user) {
                return;
            }
            _assert(this.uid === user.uid, this.auth, "internal-error" /* INTERNAL_ERROR */);
            this.displayName = user.displayName;
            this.photoURL = user.photoURL;
            this.email = user.email;
            this.emailVerified = user.emailVerified;
            this.phoneNumber = user.phoneNumber;
            this.isAnonymous = user.isAnonymous;
            this.tenantId = user.tenantId;
            this.providerData = user.providerData.map(function (userInfo) { return (__assign({}, userInfo)); });
            this.metadata._copy(user.metadata);
            this.stsTokenManager._assign(user.stsTokenManager);
        };
        UserImpl.prototype._clone = function () {
            return new UserImpl(__assign(__assign({}, this), { stsTokenManager: this.stsTokenManager._clone() }));
        };
        UserImpl.prototype._onReload = function (callback) {
            // There should only ever be one listener, and that is a single instance of MultiFactorUser
            _assert(!this.reloadListener, this.auth, "internal-error" /* INTERNAL_ERROR */);
            this.reloadListener = callback;
            if (this.reloadUserInfo) {
                this._notifyReloadListener(this.reloadUserInfo);
                this.reloadUserInfo = null;
            }
        };
        UserImpl.prototype._notifyReloadListener = function (userInfo) {
            if (this.reloadListener) {
                this.reloadListener(userInfo);
            }
            else {
                // If no listener is subscribed yet, save the result so it's available when they do subscribe
                this.reloadUserInfo = userInfo;
            }
        };
        UserImpl.prototype._startProactiveRefresh = function () {
            this.proactiveRefresh._start();
        };
        UserImpl.prototype._stopProactiveRefresh = function () {
            this.proactiveRefresh._stop();
        };
        UserImpl.prototype._updateTokensIfNecessary = function (response, reload) {
            if (reload === void 0) { reload = false; }
            return __awaiter(this, void 0, void 0, function () {
                var tokensRefreshed;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            tokensRefreshed = false;
                            if (response.idToken &&
                                response.idToken !== this.stsTokenManager.accessToken) {
                                this.stsTokenManager.updateFromServerResponse(response);
                                tokensRefreshed = true;
                            }
                            if (!reload) return [3 /*break*/, 2];
                            return [4 /*yield*/, _reloadWithoutSaving(this)];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2: return [4 /*yield*/, this.auth._persistUserIfCurrent(this)];
                        case 3:
                            _a.sent();
                            if (tokensRefreshed) {
                                this.auth._notifyListenersIfCurrent(this);
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        UserImpl.prototype.delete = function () {
            return __awaiter(this, void 0, void 0, function () {
                var idToken;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getIdToken()];
                        case 1:
                            idToken = _a.sent();
                            return [4 /*yield*/, _logoutIfInvalidated(this, deleteAccount(this.auth, { idToken: idToken }))];
                        case 2:
                            _a.sent();
                            this.stsTokenManager.clearRefreshToken();
                            // TODO: Determine if cancellable-promises are necessary to use in this class so that delete()
                            //       cancels pending actions...
                            return [2 /*return*/, this.auth.signOut()];
                    }
                });
            });
        };
        UserImpl.prototype.toJSON = function () {
            return __assign({ uid: this.uid, email: this.email || undefined, emailVerified: this.emailVerified, displayName: this.displayName || undefined, isAnonymous: this.isAnonymous, photoURL: this.photoURL || undefined, phoneNumber: this.phoneNumber || undefined, tenantId: this.tenantId || undefined, providerData: this.providerData.map(function (userInfo) { return (__assign({}, userInfo)); }), stsTokenManager: this.stsTokenManager.toJSON(), 
                // Redirect event ID must be maintained in case there is a pending
                // redirect event.
                _redirectEventId: this._redirectEventId }, this.metadata.toJSON());
        };
        Object.defineProperty(UserImpl.prototype, "refreshToken", {
            get: function () {
                return this.stsTokenManager.refreshToken || '';
            },
            enumerable: false,
            configurable: true
        });
        UserImpl._fromJSON = function (auth, object) {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            var displayName = (_a = object.displayName) !== null && _a !== void 0 ? _a : undefined;
            var email = (_b = object.email) !== null && _b !== void 0 ? _b : undefined;
            var phoneNumber = (_c = object.phoneNumber) !== null && _c !== void 0 ? _c : undefined;
            var photoURL = (_d = object.photoURL) !== null && _d !== void 0 ? _d : undefined;
            var tenantId = (_e = object.tenantId) !== null && _e !== void 0 ? _e : undefined;
            var _redirectEventId = (_f = object._redirectEventId) !== null && _f !== void 0 ? _f : undefined;
            var createdAt = (_g = object.createdAt) !== null && _g !== void 0 ? _g : undefined;
            var lastLoginAt = (_h = object.lastLoginAt) !== null && _h !== void 0 ? _h : undefined;
            var uid = object.uid, emailVerified = object.emailVerified, isAnonymous = object.isAnonymous, providerData = object.providerData, plainObjectTokenManager = object.stsTokenManager;
            _assert(uid && plainObjectTokenManager, auth, "internal-error" /* INTERNAL_ERROR */);
            var stsTokenManager = StsTokenManager.fromJSON(this.name, plainObjectTokenManager);
            _assert(typeof uid === 'string', auth, "internal-error" /* INTERNAL_ERROR */);
            assertStringOrUndefined(displayName, auth.name);
            assertStringOrUndefined(email, auth.name);
            _assert(typeof emailVerified === 'boolean', auth, "internal-error" /* INTERNAL_ERROR */);
            _assert(typeof isAnonymous === 'boolean', auth, "internal-error" /* INTERNAL_ERROR */);
            assertStringOrUndefined(phoneNumber, auth.name);
            assertStringOrUndefined(photoURL, auth.name);
            assertStringOrUndefined(tenantId, auth.name);
            assertStringOrUndefined(_redirectEventId, auth.name);
            assertStringOrUndefined(createdAt, auth.name);
            assertStringOrUndefined(lastLoginAt, auth.name);
            var user = new UserImpl({
                uid: uid,
                auth: auth,
                email: email,
                emailVerified: emailVerified,
                displayName: displayName,
                isAnonymous: isAnonymous,
                photoURL: photoURL,
                phoneNumber: phoneNumber,
                tenantId: tenantId,
                stsTokenManager: stsTokenManager,
                createdAt: createdAt,
                lastLoginAt: lastLoginAt
            });
            if (providerData && Array.isArray(providerData)) {
                user.providerData = providerData.map(function (userInfo) { return (__assign({}, userInfo)); });
            }
            if (_redirectEventId) {
                user._redirectEventId = _redirectEventId;
            }
            return user;
        };
        /**
         * Initialize a User from an idToken server response
         * @param auth
         * @param idTokenResponse
         */
        UserImpl._fromIdTokenResponse = function (auth, idTokenResponse, isAnonymous) {
            if (isAnonymous === void 0) { isAnonymous = false; }
            return __awaiter(this, void 0, void 0, function () {
                var stsTokenManager, user;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            stsTokenManager = new StsTokenManager();
                            stsTokenManager.updateFromServerResponse(idTokenResponse);
                            user = new UserImpl({
                                uid: idTokenResponse.localId,
                                auth: auth,
                                stsTokenManager: stsTokenManager,
                                isAnonymous: isAnonymous
                            });
                            // Updates the user info and data and resolves with a user instance.
                            return [4 /*yield*/, _reloadWithoutSaving(user)];
                        case 1:
                            // Updates the user info and data and resolves with a user instance.
                            _a.sent();
                            return [2 /*return*/, user];
                    }
                });
            });
        };
        return UserImpl;
    }());

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var InMemoryPersistence = /** @class */ (function () {
        function InMemoryPersistence() {
            this.type = "NONE" /* NONE */;
            this.storage = {};
        }
        InMemoryPersistence.prototype._isAvailable = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, true];
                });
            });
        };
        InMemoryPersistence.prototype._set = function (key, value) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this.storage[key] = value;
                    return [2 /*return*/];
                });
            });
        };
        InMemoryPersistence.prototype._get = function (key) {
            return __awaiter(this, void 0, void 0, function () {
                var value;
                return __generator(this, function (_a) {
                    value = this.storage[key];
                    return [2 /*return*/, value === undefined ? null : value];
                });
            });
        };
        InMemoryPersistence.prototype._remove = function (key) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    delete this.storage[key];
                    return [2 /*return*/];
                });
            });
        };
        InMemoryPersistence.prototype._addListener = function (_key, _listener) {
            // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers
            return;
        };
        InMemoryPersistence.prototype._removeListener = function (_key, _listener) {
            // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers
            return;
        };
        InMemoryPersistence.type = 'NONE';
        return InMemoryPersistence;
    }());
    /**
     * An implementation of {@link @firebase/auth-types#Persistence} of type 'NONE'.
     *
     * @public
     */
    var inMemoryPersistence = InMemoryPersistence;

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _persistenceKeyName(key, apiKey, appName) {
        return "firebase" /* PERSISTENCE */ + ":" + key + ":" + apiKey + ":" + appName;
    }
    var PersistenceUserManager = /** @class */ (function () {
        function PersistenceUserManager(persistence, auth, userKey) {
            this.persistence = persistence;
            this.auth = auth;
            this.userKey = userKey;
            var _a = this.auth, config = _a.config, name = _a.name;
            this.fullUserKey = _persistenceKeyName(this.userKey, config.apiKey, name);
            this.fullPersistenceKey = _persistenceKeyName("persistence" /* PERSISTENCE_USER */, config.apiKey, name);
            this.boundEventHandler = auth._onStorageEvent.bind(auth);
            this.persistence._addListener(this.fullUserKey, this.boundEventHandler);
        }
        PersistenceUserManager.prototype.setCurrentUser = function (user) {
            return this.persistence._set(this.fullUserKey, user.toJSON());
        };
        PersistenceUserManager.prototype.getCurrentUser = function () {
            return __awaiter(this, void 0, void 0, function () {
                var blob;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.persistence._get(this.fullUserKey)];
                        case 1:
                            blob = _a.sent();
                            return [2 /*return*/, blob ? UserImpl._fromJSON(this.auth, blob) : null];
                    }
                });
            });
        };
        PersistenceUserManager.prototype.removeCurrentUser = function () {
            return this.persistence._remove(this.fullUserKey);
        };
        PersistenceUserManager.prototype.savePersistenceForRedirect = function () {
            return this.persistence._set(this.fullPersistenceKey, this.persistence.type);
        };
        PersistenceUserManager.prototype.setPersistence = function (newPersistence) {
            return __awaiter(this, void 0, void 0, function () {
                var currentUser;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (this.persistence.type === newPersistence.type) {
                                return [2 /*return*/];
                            }
                            return [4 /*yield*/, this.getCurrentUser()];
                        case 1:
                            currentUser = _a.sent();
                            return [4 /*yield*/, this.removeCurrentUser()];
                        case 2:
                            _a.sent();
                            this.persistence = newPersistence;
                            if (currentUser) {
                                return [2 /*return*/, this.setCurrentUser(currentUser)];
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        PersistenceUserManager.prototype.delete = function () {
            this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);
        };
        PersistenceUserManager.create = function (auth, persistenceHierarchy, userKey) {
            if (userKey === void 0) { userKey = "authUser" /* AUTH_USER */; }
            return __awaiter(this, void 0, void 0, function () {
                var key, _i, persistenceHierarchy_1, persistence;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!persistenceHierarchy.length) {
                                return [2 /*return*/, new PersistenceUserManager(_getInstance(inMemoryPersistence), auth, userKey)];
                            }
                            key = _persistenceKeyName(userKey, auth.config.apiKey, auth.name);
                            _i = 0, persistenceHierarchy_1 = persistenceHierarchy;
                            _a.label = 1;
                        case 1:
                            if (!(_i < persistenceHierarchy_1.length)) return [3 /*break*/, 4];
                            persistence = persistenceHierarchy_1[_i];
                            return [4 /*yield*/, persistence._get(key)];
                        case 2:
                            if (_a.sent()) {
                                return [2 /*return*/, new PersistenceUserManager(persistence, auth, userKey)];
                            }
                            _a.label = 3;
                        case 3:
                            _i++;
                            return [3 /*break*/, 1];
                        case 4: 
                        // Check all the available storage options.
                        // TODO: Migrate from local storage to indexedDB
                        // TODO: Clear other forms once one is found
                        // All else failed, fall back to zeroth persistence
                        // TODO: Modify this to support non-browser devices
                        return [2 /*return*/, new PersistenceUserManager(persistenceHierarchy[0], auth, userKey)];
                    }
                });
            });
        };
        return PersistenceUserManager;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var AuthImpl = /** @class */ (function () {
        function AuthImpl(app, config) {
            this.app = app;
            this.config = config;
            this.currentUser = null;
            this.emulatorConfig = null;
            this.operations = Promise.resolve();
            this.authStateSubscription = new Subscription(this);
            this.idTokenSubscription = new Subscription(this);
            this.redirectUser = null;
            this.isProactiveRefreshEnabled = false;
            this.redirectInitializerError = null;
            // Any network calls will set this to true and prevent subsequent emulator
            // initialization
            this._canInitEmulator = true;
            this._isInitialized = false;
            this._deleted = false;
            this._initializationPromise = null;
            this._popupRedirectResolver = null;
            this._errorFactory = _DEFAULT_AUTH_ERROR_FACTORY;
            // Tracks the last notified UID for state change listeners to prevent
            // repeated calls to the callbacks. Undefined means it's never been
            // called, whereas null means it's been called with a signed out user
            this.lastNotifiedUid = undefined;
            this.languageCode = null;
            this.tenantId = null;
            this.settings = { appVerificationDisabledForTesting: false };
            this.name = app.name;
        }
        AuthImpl.prototype._initializeWithPersistence = function (persistenceHierarchy, popupRedirectResolver) {
            var _this = this;
            if (popupRedirectResolver) {
                this._popupRedirectResolver = _getInstance(popupRedirectResolver);
            }
            // Have to check for app deletion throughout initialization (after each
            // promise resolution)
            this._initializationPromise = this.queue(function () { return __awaiter(_this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (this._deleted) {
                                return [2 /*return*/];
                            }
                            _a = this;
                            return [4 /*yield*/, PersistenceUserManager.create(this, persistenceHierarchy)];
                        case 1:
                            _a.persistenceManager = _b.sent();
                            if (this._deleted) {
                                return [2 /*return*/];
                            }
                            return [4 /*yield*/, this.initializeCurrentUser(popupRedirectResolver)];
                        case 2:
                            _b.sent();
                            if (this._deleted) {
                                return [2 /*return*/];
                            }
                            this._isInitialized = true;
                            return [2 /*return*/];
                    }
                });
            }); });
            // After initialization completes, throw any error caused by redirect flow
            return this._initializationPromise.then(function () {
                if (_this.redirectInitializerError) {
                    throw _this.redirectInitializerError;
                }
            });
        };
        /**
         * If the persistence is changed in another window, the user manager will let us know
         */
        AuthImpl.prototype._onStorageEvent = function () {
            return __awaiter(this, void 0, void 0, function () {
                var user;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (this._deleted) {
                                return [2 /*return*/];
                            }
                            return [4 /*yield*/, this.assertedPersistence.getCurrentUser()];
                        case 1:
                            user = _a.sent();
                            if (!this.currentUser && !user) {
                                // No change, do nothing (was signed out and remained signed out).
                                return [2 /*return*/];
                            }
                            if (!(this.currentUser && user && this.currentUser.uid === user.uid)) return [3 /*break*/, 3];
                            // Data update, simply copy data changes.
                            this._currentUser._assign(user);
                            // If tokens changed from previous user tokens, this will trigger
                            // notifyAuthListeners_.
                            return [4 /*yield*/, this.currentUser.getIdToken()];
                        case 2:
                            // If tokens changed from previous user tokens, this will trigger
                            // notifyAuthListeners_.
                            _a.sent();
                            return [2 /*return*/];
                        case 3: 
                        // Update current Auth state. Either a new login or logout.
                        return [4 /*yield*/, this._updateCurrentUser(user)];
                        case 4:
                            // Update current Auth state. Either a new login or logout.
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        AuthImpl.prototype.initializeCurrentUser = function (popupRedirectResolver) {
            var _a;
            return __awaiter(this, void 0, void 0, function () {
                var storedUser, redirectUserEventId, storedUserEventId, result;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.assertedPersistence.getCurrentUser()];
                        case 1:
                            storedUser = (_b.sent());
                            if (!(popupRedirectResolver && this.config.authDomain)) return [3 /*break*/, 4];
                            return [4 /*yield*/, this.getOrInitRedirectPersistenceManager()];
                        case 2:
                            _b.sent();
                            redirectUserEventId = (_a = this.redirectUser) === null || _a === void 0 ? void 0 : _a._redirectEventId;
                            storedUserEventId = storedUser === null || storedUser === void 0 ? void 0 : storedUser._redirectEventId;
                            return [4 /*yield*/, this.tryRedirectSignIn(popupRedirectResolver)];
                        case 3:
                            result = _b.sent();
                            // If the stored user (i.e. the old "currentUser") has a redirectId that
                            // matches the redirect user, then we want to initially sign in with the
                            // new user object from result.
                            // TODO(samgho): More thoroughly test all of this
                            if ((!redirectUserEventId || redirectUserEventId === storedUserEventId) && (result === null || result === void 0 ? void 0 : result.user)) {
                                storedUser = result.user;
                            }
                            _b.label = 4;
                        case 4:
                            // If no user in persistence, there is no current user. Set to null.
                            if (!storedUser) {
                                return [2 /*return*/, this.directlySetCurrentUser(null)];
                            }
                            if (!storedUser._redirectEventId) {
                                // This isn't a redirect user, we can reload and bail
                                // This will also catch the redirected user, if available, as that method
                                // strips the _redirectEventId
                                return [2 /*return*/, this.reloadAndSetCurrentUserOrClear(storedUser)];
                            }
                            _assert(this._popupRedirectResolver, this, "argument-error" /* ARGUMENT_ERROR */);
                            return [4 /*yield*/, this.getOrInitRedirectPersistenceManager()];
                        case 5:
                            _b.sent();
                            // If the redirect user's event ID matches the current user's event ID,
                            // DO NOT reload the current user, otherwise they'll be cleared from storage.
                            // This is important for the reauthenticateWithRedirect() flow.
                            if (this.redirectUser &&
                                this.redirectUser._redirectEventId === storedUser._redirectEventId) {
                                return [2 /*return*/, this.directlySetCurrentUser(storedUser)];
                            }
                            return [2 /*return*/, this.reloadAndSetCurrentUserOrClear(storedUser)];
                    }
                });
            });
        };
        AuthImpl.prototype.tryRedirectSignIn = function (redirectResolver) {
            return __awaiter(this, void 0, void 0, function () {
                var result, e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            result = null;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 5]);
                            return [4 /*yield*/, this._popupRedirectResolver._completeRedirectFn(this, redirectResolver, true)];
                        case 2:
                            // We know this._popupRedirectResolver is set since redirectResolver
                            // is passed in. The _completeRedirectFn expects the unwrapped extern.
                            result = _a.sent();
                            return [3 /*break*/, 5];
                        case 3:
                            e_1 = _a.sent();
                            this.redirectInitializerError = e_1;
                            return [4 /*yield*/, this._setRedirectUser(null)];
                        case 4:
                            _a.sent();
                            return [3 /*break*/, 5];
                        case 5: return [2 /*return*/, result];
                    }
                });
            });
        };
        AuthImpl.prototype.reloadAndSetCurrentUserOrClear = function (user) {
            return __awaiter(this, void 0, void 0, function () {
                var e_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, _reloadWithoutSaving(user)];
                        case 1:
                            _a.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            e_2 = _a.sent();
                            if (e_2.code !== "auth/" + "network-request-failed" /* NETWORK_REQUEST_FAILED */) {
                                // Something's wrong with the user's token. Log them out and remove
                                // them from storage
                                return [2 /*return*/, this.directlySetCurrentUser(null)];
                            }
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/, this.directlySetCurrentUser(user)];
                    }
                });
            });
        };
        AuthImpl.prototype.useDeviceLanguage = function () {
            this.languageCode = _getUserLanguage();
        };
        AuthImpl.prototype._delete = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this._deleted = true;
                    return [2 /*return*/];
                });
            });
        };
        AuthImpl.prototype.updateCurrentUser = function (userExtern) {
            return __awaiter(this, void 0, void 0, function () {
                var user;
                return __generator(this, function (_a) {
                    user = userExtern;
                    _assert(!user || user.auth.name === this.name, this, "argument-error" /* ARGUMENT_ERROR */);
                    return [2 /*return*/, this._updateCurrentUser(user && user._clone())];
                });
            });
        };
        AuthImpl.prototype._updateCurrentUser = function (user) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    if (this._deleted) {
                        return [2 /*return*/];
                    }
                    if (user) {
                        _assert(this.tenantId === user.tenantId, this, "tenant-id-mismatch" /* TENANT_ID_MISMATCH */);
                    }
                    return [2 /*return*/, this.queue(function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, this.directlySetCurrentUser(user)];
                                    case 1:
                                        _a.sent();
                                        this.notifyAuthListeners();
                                        return [2 /*return*/];
                                }
                            });
                        }); })];
                });
            });
        };
        AuthImpl.prototype.signOut = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(this.redirectPersistenceManager || this._popupRedirectResolver)) return [3 /*break*/, 2];
                            return [4 /*yield*/, this._setRedirectUser(null)];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2: return [2 /*return*/, this._updateCurrentUser(null)];
                    }
                });
            });
        };
        AuthImpl.prototype.setPersistence = function (persistence) {
            var _this = this;
            return this.queue(function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.assertedPersistence.setPersistence(_getInstance(persistence))];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
        };
        AuthImpl.prototype._getPersistence = function () {
            return this.assertedPersistence.persistence.type;
        };
        AuthImpl.prototype._updateErrorMap = function (errorMap) {
            this._errorFactory = new ErrorFactory('auth', 'Firebase', errorMap());
        };
        AuthImpl.prototype.onAuthStateChanged = function (nextOrObserver, error, completed) {
            return this.registerStateListener(this.authStateSubscription, nextOrObserver, error, completed);
        };
        AuthImpl.prototype.onIdTokenChanged = function (nextOrObserver, error, completed) {
            return this.registerStateListener(this.idTokenSubscription, nextOrObserver, error, completed);
        };
        AuthImpl.prototype.toJSON = function () {
            var _a;
            return {
                apiKey: this.config.apiKey,
                authDomain: this.config.authDomain,
                appName: this.name,
                currentUser: (_a = this._currentUser) === null || _a === void 0 ? void 0 : _a.toJSON()
            };
        };
        AuthImpl.prototype._setRedirectUser = function (user, popupRedirectResolver) {
            return __awaiter(this, void 0, void 0, function () {
                var redirectManager;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getOrInitRedirectPersistenceManager(popupRedirectResolver)];
                        case 1:
                            redirectManager = _a.sent();
                            return [2 /*return*/, user === null
                                    ? redirectManager.removeCurrentUser()
                                    : redirectManager.setCurrentUser(user)];
                    }
                });
            });
        };
        AuthImpl.prototype.getOrInitRedirectPersistenceManager = function (popupRedirectResolver) {
            return __awaiter(this, void 0, void 0, function () {
                var resolver, _a, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            if (!!this.redirectPersistenceManager) return [3 /*break*/, 3];
                            resolver = (popupRedirectResolver && _getInstance(popupRedirectResolver)) ||
                                this._popupRedirectResolver;
                            _assert(resolver, this, "argument-error" /* ARGUMENT_ERROR */);
                            _a = this;
                            return [4 /*yield*/, PersistenceUserManager.create(this, [_getInstance(resolver._redirectPersistence)], "redirectUser" /* REDIRECT_USER */)];
                        case 1:
                            _a.redirectPersistenceManager = _c.sent();
                            _b = this;
                            return [4 /*yield*/, this.redirectPersistenceManager.getCurrentUser()];
                        case 2:
                            _b.redirectUser = _c.sent();
                            _c.label = 3;
                        case 3: return [2 /*return*/, this.redirectPersistenceManager];
                    }
                });
            });
        };
        AuthImpl.prototype._redirectUserForId = function (id) {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            if (!this._isInitialized) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.queue(function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                                    return [2 /*return*/];
                                }); }); })];
                        case 1:
                            _c.sent();
                            _c.label = 2;
                        case 2:
                            if (((_a = this._currentUser) === null || _a === void 0 ? void 0 : _a._redirectEventId) === id) {
                                return [2 /*return*/, this._currentUser];
                            }
                            if (((_b = this.redirectUser) === null || _b === void 0 ? void 0 : _b._redirectEventId) === id) {
                                return [2 /*return*/, this.redirectUser];
                            }
                            return [2 /*return*/, null];
                    }
                });
            });
        };
        AuthImpl.prototype._persistUserIfCurrent = function (user) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    if (user === this.currentUser) {
                        return [2 /*return*/, this.queue(function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                                return [2 /*return*/, this.directlySetCurrentUser(user)];
                            }); }); })];
                    }
                    return [2 /*return*/];
                });
            });
        };
        /** Notifies listeners only if the user is current */
        AuthImpl.prototype._notifyListenersIfCurrent = function (user) {
            if (user === this.currentUser) {
                this.notifyAuthListeners();
            }
        };
        AuthImpl.prototype._key = function () {
            return this.config.authDomain + ":" + this.config.apiKey + ":" + this.name;
        };
        AuthImpl.prototype._startProactiveRefresh = function () {
            this.isProactiveRefreshEnabled = true;
            if (this.currentUser) {
                this._currentUser._startProactiveRefresh();
            }
        };
        AuthImpl.prototype._stopProactiveRefresh = function () {
            this.isProactiveRefreshEnabled = false;
            if (this.currentUser) {
                this._currentUser._stopProactiveRefresh();
            }
        };
        Object.defineProperty(AuthImpl.prototype, "_currentUser", {
            /** Returns the current user cast as the internal type */
            get: function () {
                return this.currentUser;
            },
            enumerable: false,
            configurable: true
        });
        AuthImpl.prototype.notifyAuthListeners = function () {
            var _a, _b;
            if (!this._isInitialized) {
                return;
            }
            this.idTokenSubscription.next(this.currentUser);
            var currentUid = (_b = (_a = this.currentUser) === null || _a === void 0 ? void 0 : _a.uid) !== null && _b !== void 0 ? _b : null;
            if (this.lastNotifiedUid !== currentUid) {
                this.lastNotifiedUid = currentUid;
                this.authStateSubscription.next(this.currentUser);
            }
        };
        AuthImpl.prototype.registerStateListener = function (subscription, nextOrObserver, error, completed) {
            var _this = this;
            if (this._deleted) {
                return function () { };
            }
            var cb = typeof nextOrObserver === 'function'
                ? nextOrObserver
                : nextOrObserver.next;
            var promise = this._isInitialized
                ? Promise.resolve()
                : this._initializationPromise;
            _assert(promise, this, "internal-error" /* INTERNAL_ERROR */);
            // The callback needs to be called asynchronously per the spec.
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            promise.then(function () { return cb(_this.currentUser); });
            if (typeof nextOrObserver === 'function') {
                return subscription.addObserver(nextOrObserver, error, completed);
            }
            else {
                return subscription.addObserver(nextOrObserver);
            }
        };
        /**
         * Unprotected (from race conditions) method to set the current user. This
         * should only be called from within a queued callback. This is necessary
         * because the queue shouldn't rely on another queued callback.
         */
        AuthImpl.prototype.directlySetCurrentUser = function (user) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (this.currentUser && this.currentUser !== user) {
                                this._currentUser._stopProactiveRefresh();
                                if (user && this.isProactiveRefreshEnabled) {
                                    user._startProactiveRefresh();
                                }
                            }
                            this.currentUser = user;
                            if (!user) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.assertedPersistence.setCurrentUser(user)];
                        case 1:
                            _a.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, this.assertedPersistence.removeCurrentUser()];
                        case 3:
                            _a.sent();
                            _a.label = 4;
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        AuthImpl.prototype.queue = function (action) {
            // In case something errors, the callback still should be called in order
            // to keep the promise chain alive
            this.operations = this.operations.then(action, action);
            return this.operations;
        };
        Object.defineProperty(AuthImpl.prototype, "assertedPersistence", {
            get: function () {
                _assert(this.persistenceManager, this, "internal-error" /* INTERNAL_ERROR */);
                return this.persistenceManager;
            },
            enumerable: false,
            configurable: true
        });
        return AuthImpl;
    }());
    /**
     * Method to be used to cast down to our private implmentation of Auth
     *
     * @param auth Auth object passed in from developer
     */
    function _castAuth(auth) {
        return auth;
    }
    /** Helper class to wrap subscriber logic */
    var Subscription = /** @class */ (function () {
        function Subscription(auth) {
            var _this = this;
            this.auth = auth;
            this.observer = null;
            this.addObserver = createSubscribe(function (observer) { return (_this.observer = observer); });
        }
        Object.defineProperty(Subscription.prototype, "next", {
            get: function () {
                _assert(this.observer, this.auth, "internal-error" /* INTERNAL_ERROR */);
                return this.observer.next.bind(this.observer);
            },
            enumerable: false,
            configurable: true
        });
        return Subscription;
    }());

    /**
     * @license
     * Copyright 2021 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Changes the Auth instance to communicate with the Firebase Auth Emulator, instead of production
     * Firebase Auth services.
     *
     * @remarks
     * This must be called synchronously immediately following the first call to
     * {@link @firebase/auth#initializeAuth}.  Do not use with production credentials as emulator
     * traffic is not encrypted.
     *
     *
     * @example
     * ```javascript
     * useAuthEmulator(auth, 'http://127.0.0.1:9099', { disableWarnings: true });
     * ```
     *
     * @param auth - The Auth instance.
     * @param url - The URL at which the emulator is running (eg, 'http://localhost:9099').
     * @param options.disableWarnings - (Optional: default false) Disable the warning banner attached to the DOM
     *
     * @public
     */
    function useAuthEmulator(auth, url, options) {
        var authInternal = _castAuth(auth);
        _assert(authInternal._canInitEmulator, authInternal, "emulator-config-failed" /* EMULATOR_CONFIG_FAILED */);
        _assert(/^https?:\/\//.test(url), authInternal, "invalid-emulator-scheme" /* INVALID_EMULATOR_SCHEME */);
        var parsedUrl = new URL(url);
        var disableWarnings = !!(options === null || options === void 0 ? void 0 : options.disableWarnings);
        // Store the normalized URL whose path is always nonempty (i.e. containing at least a single '/').
        authInternal.config.emulator = { url: parsedUrl.toString() };
        authInternal.settings.appVerificationDisabledForTesting = true;
        authInternal.emulatorConfig = Object.freeze({
            host: parsedUrl.hostname,
            port: parsedUrl.port ? Number(parsedUrl.port) : null,
            protocol: parsedUrl.protocol.replace(':', ''),
            options: Object.freeze({ disableWarnings: disableWarnings })
        });
        emitEmulatorWarning(disableWarnings);
    }
    function emitEmulatorWarning(disableBanner) {
        function attachBanner() {
            var el = document.createElement('p');
            var sty = el.style;
            el.innerText =
                'Running in emulator mode. Do not use with production credentials.';
            sty.position = 'fixed';
            sty.width = '100%';
            sty.backgroundColor = '#ffffff';
            sty.border = '.1em solid #000000';
            sty.color = '#ff0000';
            sty.bottom = '0px';
            sty.left = '0px';
            sty.margin = '0px';
            sty.zIndex = '10000';
            sty.textAlign = 'center';
            el.classList.add('firebase-emulator-warning');
            document.body.appendChild(el);
        }
        if (typeof console !== 'undefined' && typeof console.info === 'function') {
            console.info('WARNING: You are using the Auth Emulator,' +
                ' which is intended for local testing only.  Do not use with' +
                ' production credentials.');
        }
        if (typeof window !== 'undefined' &&
            typeof document !== 'undefined' &&
            !disableBanner) {
            if (document.readyState === 'loading') {
                window.addEventListener('DOMContentLoaded', attachBanner);
            }
            else {
                attachBanner();
            }
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * {@inheritdoc @firebase/auth-types#AuthCredential}
     *
     * @public
     */
    var AuthCredential = /** @class */ (function () {
        /** @internal */
        function AuthCredential(providerId, signInMethod) {
            this.providerId = providerId;
            this.signInMethod = signInMethod;
        }
        /** {@inheritdoc @firebase/auth-types#AuthCredential.toJSON} */
        AuthCredential.prototype.toJSON = function () {
            return debugFail('not implemented');
        };
        /** @internal */
        AuthCredential.prototype._getIdTokenResponse = function (_auth) {
            return debugFail('not implemented');
        };
        /** @internal */
        AuthCredential.prototype._linkToIdToken = function (_auth, _idToken) {
            return debugFail('not implemented');
        };
        /** @internal */
        AuthCredential.prototype._getReauthenticationResolver = function (_auth) {
            return debugFail('not implemented');
        };
        return AuthCredential;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function resetPassword(auth, request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _performApiRequest(auth, "POST" /* POST */, "/v1/accounts:resetPassword" /* RESET_PASSWORD */, request)];
            });
        });
    }
    function updateEmailPassword(auth, request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _performApiRequest(auth, "POST" /* POST */, "/v1/accounts:update" /* SET_ACCOUNT_INFO */, request)];
            });
        });
    }
    function applyActionCode(auth, request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _performApiRequest(auth, "POST" /* POST */, "/v1/accounts:update" /* SET_ACCOUNT_INFO */, request)];
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function signInWithPassword(auth, request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _performSignInRequest(auth, "POST" /* POST */, "/v1/accounts:signInWithPassword" /* SIGN_IN_WITH_PASSWORD */, request)];
            });
        });
    }
    function sendOobCode(auth, request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _performApiRequest(auth, "POST" /* POST */, "/v1/accounts:sendOobCode" /* SEND_OOB_CODE */, request)];
            });
        });
    }
    function sendEmailVerification(auth, request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, sendOobCode(auth, request)];
            });
        });
    }
    function sendPasswordResetEmail(auth, request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, sendOobCode(auth, request)];
            });
        });
    }
    function sendSignInLinkToEmail(auth, request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, sendOobCode(auth, request)];
            });
        });
    }
    function verifyAndChangeEmail(auth, request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, sendOobCode(auth, request)];
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function signInWithEmailLink(auth, request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _performSignInRequest(auth, "POST" /* POST */, "/v1/accounts:signInWithEmailLink" /* SIGN_IN_WITH_EMAIL_LINK */, request)];
            });
        });
    }
    function signInWithEmailLinkForLinking(auth, request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _performSignInRequest(auth, "POST" /* POST */, "/v1/accounts:signInWithEmailLink" /* SIGN_IN_WITH_EMAIL_LINK */, request)];
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Interface that represents the credentials returned by {@link EmailAuthProvider} for
     * {@link @firebase/auth-types#ProviderId.PASSWORD}
     *
     * @remarks
     * Covers both {@link @firebase/auth-types#SignInMethod.EMAIL_PASSWORD} and
     * {@link @firebase/auth-types#SignInMethod.EMAIL_LINK}.
     *
     * @public
     */
    var EmailAuthCredential = /** @class */ (function (_super) {
        __extends(EmailAuthCredential, _super);
        /** @internal */
        function EmailAuthCredential(email, password, signInMethod, tenantId) {
            if (tenantId === void 0) { tenantId = null; }
            var _this = _super.call(this, "password" /* PASSWORD */, signInMethod) || this;
            _this.email = email;
            _this.password = password;
            _this.tenantId = tenantId;
            return _this;
        }
        /** @internal */
        EmailAuthCredential._fromEmailAndPassword = function (email, password) {
            return new EmailAuthCredential(email, password, "password" /* EMAIL_PASSWORD */);
        };
        /** @internal */
        EmailAuthCredential._fromEmailAndCode = function (email, oobCode, tenantId) {
            if (tenantId === void 0) { tenantId = null; }
            return new EmailAuthCredential(email, oobCode, "emailLink" /* EMAIL_LINK */, tenantId);
        };
        /** {@inheritdoc @firebase/auth-types#AuthCredential.toJSON} */
        EmailAuthCredential.prototype.toJSON = function () {
            return {
                email: this.email,
                password: this.password,
                signInMethod: this.signInMethod,
                tenantId: this.tenantId
            };
        };
        /** {@inheritdoc @firebase/auth-types#AuthCredential.fromJSON} */
        EmailAuthCredential.fromJSON = function (json) {
            var obj = typeof json === 'string' ? JSON.parse(json) : json;
            if ((obj === null || obj === void 0 ? void 0 : obj.email) && (obj === null || obj === void 0 ? void 0 : obj.password)) {
                if (obj.signInMethod === "password" /* EMAIL_PASSWORD */) {
                    return this._fromEmailAndPassword(obj.email, obj.password);
                }
                else if (obj.signInMethod === "emailLink" /* EMAIL_LINK */) {
                    return this._fromEmailAndCode(obj.email, obj.password, obj.tenantId);
                }
            }
            return null;
        };
        /** @internal */
        EmailAuthCredential.prototype._getIdTokenResponse = function (auth) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (this.signInMethod) {
                        case "password" /* EMAIL_PASSWORD */:
                            return [2 /*return*/, signInWithPassword(auth, {
                                    returnSecureToken: true,
                                    email: this.email,
                                    password: this.password
                                })];
                        case "emailLink" /* EMAIL_LINK */:
                            return [2 /*return*/, signInWithEmailLink(auth, {
                                    email: this.email,
                                    oobCode: this.password
                                })];
                        default:
                            _fail(auth, "internal-error" /* INTERNAL_ERROR */);
                    }
                    return [2 /*return*/];
                });
            });
        };
        /** @internal */
        EmailAuthCredential.prototype._linkToIdToken = function (auth, idToken) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (this.signInMethod) {
                        case "password" /* EMAIL_PASSWORD */:
                            return [2 /*return*/, updateEmailPassword(auth, {
                                    idToken: idToken,
                                    returnSecureToken: true,
                                    email: this.email,
                                    password: this.password
                                })];
                        case "emailLink" /* EMAIL_LINK */:
                            return [2 /*return*/, signInWithEmailLinkForLinking(auth, {
                                    idToken: idToken,
                                    email: this.email,
                                    oobCode: this.password
                                })];
                        default:
                            _fail(auth, "internal-error" /* INTERNAL_ERROR */);
                    }
                    return [2 /*return*/];
                });
            });
        };
        /** @internal */
        EmailAuthCredential.prototype._getReauthenticationResolver = function (auth) {
            return this._getIdTokenResponse(auth);
        };
        return EmailAuthCredential;
    }(AuthCredential));

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function signInWithIdp(auth, request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _performSignInRequest(auth, "POST" /* POST */, "/v1/accounts:signInWithIdp" /* SIGN_IN_WITH_IDP */, request)];
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var IDP_REQUEST_URI = 'http://localhost';
    /**
     * {@inheritdoc @firebase/auth-types#OAuthCredential}
     *
     * @public
     */
    var OAuthCredential = /** @class */ (function (_super) {
        __extends(OAuthCredential, _super);
        function OAuthCredential() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.pendingToken = null;
            return _this;
        }
        /** @internal */
        OAuthCredential._fromParams = function (params) {
            var cred = new OAuthCredential(params.providerId, params.signInMethod);
            if (params.idToken || params.accessToken) {
                // OAuth 2 and either ID token or access token.
                if (params.idToken) {
                    cred.idToken = params.idToken;
                }
                if (params.accessToken) {
                    cred.accessToken = params.accessToken;
                }
                // Add nonce if available and no pendingToken is present.
                if (params.nonce && !params.pendingToken) {
                    cred.nonce = params.nonce;
                }
                if (params.pendingToken) {
                    cred.pendingToken = params.pendingToken;
                }
            }
            else if (params.oauthToken && params.oauthTokenSecret) {
                // OAuth 1 and OAuth token with token secret
                cred.accessToken = params.oauthToken;
                cred.secret = params.oauthTokenSecret;
            }
            else {
                _fail("argument-error" /* ARGUMENT_ERROR */);
            }
            return cred;
        };
        /** {@inheritdoc @firebase/auth-types#OAuthCredential.toJSON}  */
        OAuthCredential.prototype.toJSON = function () {
            return {
                idToken: this.idToken,
                accessToken: this.accessToken,
                secret: this.secret,
                nonce: this.nonce,
                pendingToken: this.pendingToken,
                providerId: this.providerId,
                signInMethod: this.signInMethod
            };
        };
        /** {@inheritdoc @firebase/auth-types#OAuthCredential.fromJSON} */
        OAuthCredential.fromJSON = function (json) {
            var obj = typeof json === 'string' ? JSON.parse(json) : json;
            var providerId = obj.providerId, signInMethod = obj.signInMethod, rest = __rest(obj, ["providerId", "signInMethod"]);
            if (!providerId || !signInMethod) {
                return null;
            }
            var cred = new OAuthCredential(providerId, signInMethod);
            Object.assign(cred, rest);
            return cred;
        };
        /** @internal */
        OAuthCredential.prototype._getIdTokenResponse = function (auth) {
            var request = this.buildRequest();
            return signInWithIdp(auth, request);
        };
        /** @internal */
        OAuthCredential.prototype._linkToIdToken = function (auth, idToken) {
            var request = this.buildRequest();
            request.idToken = idToken;
            return signInWithIdp(auth, request);
        };
        /** @internal */
        OAuthCredential.prototype._getReauthenticationResolver = function (auth) {
            var request = this.buildRequest();
            request.autoCreate = false;
            return signInWithIdp(auth, request);
        };
        OAuthCredential.prototype.buildRequest = function () {
            var request = {
                requestUri: IDP_REQUEST_URI,
                returnSecureToken: true,
                postBody: null
            };
            if (this.pendingToken) {
                request.pendingToken = this.pendingToken;
            }
            else {
                var postBody = {};
                if (this.idToken) {
                    postBody['id_token'] = this.idToken;
                }
                if (this.accessToken) {
                    postBody['access_token'] = this.accessToken;
                }
                if (this.secret) {
                    postBody['oauth_token_secret'] = this.secret;
                }
                postBody['providerId'] = this.providerId;
                if (this.nonce && !this.pendingToken) {
                    postBody['nonce'] = this.nonce;
                }
                request.postBody = querystring(postBody);
            }
            return request;
        };
        return OAuthCredential;
    }(AuthCredential));

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a$1$1;
    function sendPhoneVerificationCode(auth, request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _performApiRequest(auth, "POST" /* POST */, "/v1/accounts:sendVerificationCode" /* SEND_VERIFICATION_CODE */, request)];
            });
        });
    }
    function signInWithPhoneNumber(auth, request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _performSignInRequest(auth, "POST" /* POST */, "/v1/accounts:signInWithPhoneNumber" /* SIGN_IN_WITH_PHONE_NUMBER */, request)];
            });
        });
    }
    function linkWithPhoneNumber(auth, request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _performSignInRequest(auth, "POST" /* POST */, "/v1/accounts:signInWithPhoneNumber" /* SIGN_IN_WITH_PHONE_NUMBER */, request)];
            });
        });
    }
    var VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_ = (_a$1$1 = {},
        _a$1$1["USER_NOT_FOUND" /* USER_NOT_FOUND */] = "user-not-found" /* USER_DELETED */,
        _a$1$1);
    function verifyPhoneNumberForExisting(auth, request) {
        return __awaiter(this, void 0, void 0, function () {
            var apiRequest;
            return __generator(this, function (_a) {
                apiRequest = __assign(__assign({}, request), { operation: 'REAUTH' });
                return [2 /*return*/, _performSignInRequest(auth, "POST" /* POST */, "/v1/accounts:signInWithPhoneNumber" /* SIGN_IN_WITH_PHONE_NUMBER */, apiRequest, VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_)];
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * {@inheritdoc @firebase/auth-types#PhoneAuthCredential}
     *
     * @public
     */
    var PhoneAuthCredential = /** @class */ (function (_super) {
        __extends(PhoneAuthCredential, _super);
        function PhoneAuthCredential(params) {
            var _this = _super.call(this, "phone" /* PHONE */, "phone" /* PHONE */) || this;
            _this.params = params;
            return _this;
        }
        /** @internal */
        PhoneAuthCredential._fromVerification = function (verificationId, verificationCode) {
            return new PhoneAuthCredential({ verificationId: verificationId, verificationCode: verificationCode });
        };
        /** @internal */
        PhoneAuthCredential._fromTokenResponse = function (phoneNumber, temporaryProof) {
            return new PhoneAuthCredential({ phoneNumber: phoneNumber, temporaryProof: temporaryProof });
        };
        /** @internal */
        PhoneAuthCredential.prototype._getIdTokenResponse = function (auth) {
            return signInWithPhoneNumber(auth, this._makeVerificationRequest());
        };
        /** @internal */
        PhoneAuthCredential.prototype._linkToIdToken = function (auth, idToken) {
            return linkWithPhoneNumber(auth, __assign({ idToken: idToken }, this._makeVerificationRequest()));
        };
        /** @internal */
        PhoneAuthCredential.prototype._getReauthenticationResolver = function (auth) {
            return verifyPhoneNumberForExisting(auth, this._makeVerificationRequest());
        };
        /** @internal */
        PhoneAuthCredential.prototype._makeVerificationRequest = function () {
            var _a = this.params, temporaryProof = _a.temporaryProof, phoneNumber = _a.phoneNumber, verificationId = _a.verificationId, verificationCode = _a.verificationCode;
            if (temporaryProof && phoneNumber) {
                return { temporaryProof: temporaryProof, phoneNumber: phoneNumber };
            }
            return {
                sessionInfo: verificationId,
                code: verificationCode
            };
        };
        /** {@inheritdoc @firebase/auth-types#toJSON} */
        PhoneAuthCredential.prototype.toJSON = function () {
            var obj = {
                providerId: this.providerId
            };
            if (this.params.phoneNumber) {
                obj.phoneNumber = this.params.phoneNumber;
            }
            if (this.params.temporaryProof) {
                obj.temporaryProof = this.params.temporaryProof;
            }
            if (this.params.verificationCode) {
                obj.verificationCode = this.params.verificationCode;
            }
            if (this.params.verificationId) {
                obj.verificationId = this.params.verificationId;
            }
            return obj;
        };
        /** {@inheritdoc @firebase/auth-types#fromJSON} */
        PhoneAuthCredential.fromJSON = function (json) {
            if (typeof json === 'string') {
                json = JSON.parse(json);
            }
            var _a = json, verificationId = _a.verificationId, verificationCode = _a.verificationCode, phoneNumber = _a.phoneNumber, temporaryProof = _a.temporaryProof;
            if (!verificationCode &&
                !verificationId &&
                !phoneNumber &&
                !temporaryProof) {
                return null;
            }
            return new PhoneAuthCredential({
                verificationId: verificationId,
                verificationCode: verificationCode,
                phoneNumber: phoneNumber,
                temporaryProof: temporaryProof
            });
        };
        return PhoneAuthCredential;
    }(AuthCredential));

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Maps the mode string in action code URL to Action Code Info operation.
     *
     * @param mode
     */
    function parseMode(mode) {
        switch (mode) {
            case 'recoverEmail':
                return "RECOVER_EMAIL" /* RECOVER_EMAIL */;
            case 'resetPassword':
                return "PASSWORD_RESET" /* PASSWORD_RESET */;
            case 'signIn':
                return "EMAIL_SIGNIN" /* EMAIL_SIGNIN */;
            case 'verifyEmail':
                return "VERIFY_EMAIL" /* VERIFY_EMAIL */;
            case 'verifyAndChangeEmail':
                return "VERIFY_AND_CHANGE_EMAIL" /* VERIFY_AND_CHANGE_EMAIL */;
            case 'revertSecondFactorAddition':
                return "REVERT_SECOND_FACTOR_ADDITION" /* REVERT_SECOND_FACTOR_ADDITION */;
            default:
                return null;
        }
    }
    /**
     * Helper to parse FDL links
     *
     * @param url
     */
    function parseDeepLink(url) {
        var uri = new URL(url);
        var link = uri.searchParams.get('link');
        // Double link case (automatic redirect).
        var doubleDeepLink = link ? new URL(link).searchParams.get('link') : null;
        // iOS custom scheme links.
        var iOSDeepLink = uri.searchParams.get('deep_link_id');
        var iOSDoubleDeepLink = iOSDeepLink
            ? new URL(iOSDeepLink).searchParams.get('link')
            : null;
        return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;
    }
    /**
     * {@inheritDoc @firebase/auth-types#ActionCodeURL}
     *
     * @public
     */
    var ActionCodeURL = /** @class */ (function () {
        /**
         * @param actionLink - The link from which to extract the URL.
         * @returns The ActionCodeURL object, or null if the link is invalid.
         *
         * @internal
         */
        function ActionCodeURL(actionLink) {
            var uri = new URL(actionLink);
            var apiKey = uri.searchParams.get("apiKey" /* API_KEY */);
            var code = uri.searchParams.get("oobCode" /* CODE */);
            var operation = parseMode(uri.searchParams.get("mode" /* MODE */));
            // Validate API key, code and mode.
            _assert(apiKey && code && operation, "argument-error" /* ARGUMENT_ERROR */);
            this.apiKey = apiKey;
            this.operation = operation;
            this.code = code;
            this.continueUrl = uri.searchParams.get("continueUrl" /* CONTINUE_URL */);
            this.languageCode = uri.searchParams.get("languageCode" /* LANGUAGE_CODE */);
            this.tenantId = uri.searchParams.get("tenantId" /* TENANT_ID */);
        }
        /** {@inheritDoc @firebase/auth-types#ActionCodeURL.parseLink} */
        ActionCodeURL.parseLink = function (link) {
            var actionLink = parseDeepLink(link);
            try {
                return new ActionCodeURL(actionLink);
            }
            catch (_a) {
                return null;
            }
        };
        return ActionCodeURL;
    }());
    /**
     * {@inheritDoc @firebase/auth-types#ActionCodeURL.parseLink}
     *
     * @public
     */
    function parseActionCodeURL(link) {
        return ActionCodeURL.parseLink(link);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * {@inheritdoc @firebase/auth-types#EmailAuthProvider}
     *
     * @public
     */
    var EmailAuthProvider = /** @class */ (function () {
        function EmailAuthProvider() {
            /** {@inheritdoc @firebase/auth-types#EmailAuthProvider.providerId} */
            this.providerId = EmailAuthProvider.PROVIDER_ID;
        }
        /** {@inheritdoc @firebase/auth-types#EmailAuthProvider.credential} */
        EmailAuthProvider.credential = function (email, password) {
            return EmailAuthCredential._fromEmailAndPassword(email, password);
        };
        /** {@inheritdoc @firebase/auth-types#EmailAuthProvider.credentialWithLink} */
        EmailAuthProvider.credentialWithLink = function (email, emailLink) {
            var actionCodeUrl = ActionCodeURL.parseLink(emailLink);
            _assert(actionCodeUrl, "argument-error" /* ARGUMENT_ERROR */);
            return EmailAuthCredential._fromEmailAndCode(email, actionCodeUrl.code, actionCodeUrl.tenantId);
        };
        /** {@inheritdoc @firebase/auth-types#EmailAuthProvider.PROVIDER_ID} */
        EmailAuthProvider.PROVIDER_ID = "password" /* PASSWORD */;
        /** {@inheritdoc @firebase/auth-types#EmailAuthProvider.EMAIL_PASSWORD_SIGN_IN_METHOD} */
        EmailAuthProvider.EMAIL_PASSWORD_SIGN_IN_METHOD = "password" /* EMAIL_PASSWORD */;
        /** {@inheritdoc @firebase/auth-types#EmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD} */
        EmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD = "emailLink" /* EMAIL_LINK */;
        return EmailAuthProvider;
    }());

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provider for generating generic {@link OAuthCredential}.
     *
     * @example
     * ```javascript
     * // Sign in using a redirect.
     * const provider = new OAuthProvider('google.com');
     * // Start a sign in process for an unauthenticated user.
     * provider.addScope('profile');
     * provider.addScope('email');
     * await signInWithRedirect(auth, provider);
     * // This will trigger a full page redirect away from your app
     *
     * // After returning from the redirect when your app initializes you can obtain the result
     * const result = await getRedirectResult(auth);
     * if (result) {
     *   // This is the signed-in user
     *   const user = result.user;
     *   // This gives you a OAuth Access Token for the provider.
     *   const credential = provider.credentialFromResult(auth, result);
     *   const token = credential.accessToken;
     * }
     * ```
     *
     * @example
     * ```javascript
     * // Sign in using a popup.
     * const provider = new OAuthProvider('google.com');
     * provider.addScope('profile');
     * provider.addScope('email');
     * const result = await signInWithPopup(auth, provider);
     *
     * // The signed-in user info.
     * const user = result.user;
     * // This gives you a OAuth Access Token for the provider.
     * const credential = provider.credentialFromResult(auth, result);
     * const token = credential.accessToken;
     * ```
     * @public
     */
    var OAuthProvider = /** @class */ (function () {
        /**
         * Constructor for generic OAuth providers.
         *
         * @param providerId - Provider for which credentials should be generated.
         */
        function OAuthProvider(providerId) {
            this.providerId = providerId;
            /** @internal */
            this.defaultLanguageCode = null;
            /** @internal */
            this.scopes = [];
            /** @internal */
            this.customParameters = {};
        }
        OAuthProvider.credentialFromJSON = function (json) {
            var obj = typeof json === 'string' ? JSON.parse(json) : json;
            _assert('providerId' in obj && 'signInMethod' in obj, "argument-error" /* ARGUMENT_ERROR */);
            return OAuthCredential._fromParams(obj);
        };
        /**
         * Creates a {@link OAuthCredential} from a generic OAuth provider's access token or ID token.
         *
         * @remarks
         * The raw nonce is required when an ID token with a nonce field is provided. The SHA-256 hash of
         * the raw nonce must match the nonce field in the ID token.
         *
         * @example
         * ```javascript
         * // `googleUser` from the onsuccess Google Sign In callback.
         * // Initialize a generate OAuth provider with a `google.com` providerId.
         * const provider = new OAuthProvider('google.com');
         * const credential = provider.credential({
         *   idToken: googleUser.getAuthResponse().id_token,
         * });
         * const result = await signInWithCredential(credential);
         * ```
         *
         * @param params - Either the options object containing the ID token, access token and raw nonce
         * or the ID token string.
         */
        OAuthProvider.prototype.credential = function (params) {
            _assert(params.idToken && params.accessToken, "argument-error" /* ARGUMENT_ERROR */);
            // For OAuthCredential, sign in method is same as providerId.
            return OAuthCredential._fromParams(__assign({ providerId: this.providerId, signInMethod: this.providerId }, params));
        };
        /**
         * Set the language gode.
         *
         * @param languageCode - language code
         */
        OAuthProvider.prototype.setDefaultLanguage = function (languageCode) {
            this.defaultLanguageCode = languageCode;
        };
        /**
         * Sets the OAuth custom parameters to pass in an OAuth request for popup and redirect sign-in
         * operations.
         *
         * @remarks
         * For a detailed list, check the reserved required OAuth 2.0 parameters such as `client_id`,
         * `redirect_uri`, `scope`, `response_type`, and `state` are not allowed and will be ignored.
         *
         * @param customOAuthParameters - The custom OAuth parameters to pass in the OAuth request.
         */
        OAuthProvider.prototype.setCustomParameters = function (customOAuthParameters) {
            this.customParameters = customOAuthParameters;
            return this;
        };
        /**
         * Retrieve the current list of {@link CustomParameters}.
         */
        OAuthProvider.prototype.getCustomParameters = function () {
            return this.customParameters;
        };
        /**
         * Add an OAuth scope to the credential.
         *
         * @param scope - Provider OAuth scope to add.
         */
        OAuthProvider.prototype.addScope = function (scope) {
            // If not already added, add scope to list.
            if (!this.scopes.includes(scope)) {
                this.scopes.push(scope);
            }
            return this;
        };
        /**
         * Retrieve the current list of OAuth scopes.
         */
        OAuthProvider.prototype.getScopes = function () {
            return __spreadArrays(this.scopes);
        };
        /**
         * Used to extract the underlying {@link OAuthCredential} from a {@link @firebase/auth-types#UserCredential}.
         *
         * @param userCredential - The user credential.
         */
        OAuthProvider.credentialFromResult = function (userCredential) {
            return OAuthProvider.oauthCredentialFromTaggedObject(userCredential);
        };
        /**
         * Used to extract the underlying {@link OAuthCredential} from a {@link @firebase/auth-types#AuthError} which was
         * thrown during a sign-in, link, or reauthenticate operation.
         *
         * @param userCredential - The user credential.
         */
        OAuthProvider.credentialFromError = function (error) {
            return OAuthProvider.oauthCredentialFromTaggedObject((error.customData || {}));
        };
        // This needs to have a different name so it doesn't conflict with the
        // subclasses
        OAuthProvider.oauthCredentialFromTaggedObject = function (_a) {
            var tokenResponse = _a._tokenResponse;
            if (!tokenResponse) {
                return null;
            }
            var _b = tokenResponse, oauthIdToken = _b.oauthIdToken, oauthAccessToken = _b.oauthAccessToken, oauthTokenSecret = _b.oauthTokenSecret, pendingToken = _b.pendingToken, nonce = _b.nonce, providerId = _b.providerId;
            if (!oauthAccessToken &&
                !oauthTokenSecret &&
                !oauthIdToken &&
                !pendingToken) {
                return null;
            }
            if (!providerId) {
                return null;
            }
            try {
                return new OAuthProvider(providerId).credential({
                    idToken: oauthIdToken,
                    accessToken: oauthAccessToken,
                    rawNonce: nonce
                });
            }
            catch (e) {
                return null;
            }
        };
        return OAuthProvider;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provider for generating an {@link OAuthCredential} for {@link @firebase/auth-types#ProviderId.FACEBOOK}.
     *
     * @example
     * ```javascript
     * // Sign in using a redirect.
     * const provider = new FacebookAuthProvider();
     * // Start a sign in process for an unauthenticated user.
     * provider.addScope('user_birthday');
     * await signInWithRedirect(auth, provider);
     * // This will trigger a full page redirect away from your app
     *
     * // After returning from the redirect when your app initializes you can obtain the result
     * const result = await getRedirectResult(auth);
     * if (result) {
     *   // This is the signed-in user
     *   const user = result.user;
     *   // This gives you a Facebook Access Token.
     *   const credential = provider.credentialFromResult(auth, result);
     *   const token = credential.accessToken;
     * }
     * ```
     *
     * @example
     * ```javascript
     * // Sign in using a popup.
     * const provider = new FacebookAuthProvider();
     * provider.addScope('user_birthday');
     * const result = await signInWithPopup(auth, provider);
     *
     * // The signed-in user info.
     * const user = result.user;
     * // This gives you a Facebook Access Token.
     * const credential = provider.credentialFromResult(auth, result);
     * const token = credential.accessToken;
     * ```
     *
     * @public
     */
    var FacebookAuthProvider = /** @class */ (function (_super) {
        __extends(FacebookAuthProvider, _super);
        function FacebookAuthProvider() {
            return _super.call(this, "facebook.com" /* FACEBOOK */) || this;
        }
        /**
         * Creates a credential for Facebook.
         *
         * @example
         * ```javascript
         * // `event` from the Facebook auth.authResponseChange callback.
         * const credential = FacebookAuthProvider.credential(event.authResponse.accessToken);
         * const result = await signInWithCredential(credential);
         * ```
         *
         * @param accessToken - Facebook access token.
         */
        FacebookAuthProvider.credential = function (accessToken) {
            return OAuthCredential._fromParams({
                providerId: FacebookAuthProvider.PROVIDER_ID,
                signInMethod: FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD,
                accessToken: accessToken
            });
        };
        /**
         * Used to extract the underlying {@link OAuthCredential} from a {@link @firebase/auth-types#UserCredential}.
         *
         * @param userCredential - The user credential.
         */
        FacebookAuthProvider.credentialFromResult = function (userCredential) {
            return FacebookAuthProvider.credentialFromTaggedObject(userCredential);
        };
        /**
         * Used to extract the underlying {@link OAuthCredential} from a {@link @firebase/auth-types#AuthError} which was
         * thrown during a sign-in, link, or reauthenticate operation.
         *
         * @param userCredential - The user credential.
         */
        FacebookAuthProvider.credentialFromError = function (error) {
            return FacebookAuthProvider.credentialFromTaggedObject((error.customData || {}));
        };
        FacebookAuthProvider.credentialFromTaggedObject = function (_a) {
            var tokenResponse = _a._tokenResponse;
            if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {
                return null;
            }
            if (!tokenResponse.oauthAccessToken) {
                return null;
            }
            try {
                return FacebookAuthProvider.credential(tokenResponse.oauthAccessToken);
            }
            catch (_b) {
                return null;
            }
        };
        /** Always set to {@link @firebase/auth-types#SignInMethod.FACEBOOK}. */
        FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD = "facebook.com" /* FACEBOOK */;
        /** Always set to {@link @firebase/auth-types#ProviderId.FACEBOOK}. */
        FacebookAuthProvider.PROVIDER_ID = "facebook.com" /* FACEBOOK */;
        return FacebookAuthProvider;
    }(OAuthProvider));

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provider for generating an an {@link OAuthCredential} for {@link @firebase/auth-types#ProviderId.GOOGLE}.
     *
     * @example
     * ```javascript
     * // Sign in using a redirect.
     * const provider = new GoogleAuthProvider();
     * // Start a sign in process for an unauthenticated user.
     * provider.addScope('profile');
     * provider.addScope('email');
     * await signInWithRedirect(auth, provider);
     * // This will trigger a full page redirect away from your app
     *
     * // After returning from the redirect when your app initializes you can obtain the result
     * const result = await getRedirectResult(auth);
     * if (result) {
     *   // This is the signed-in user
     *   const user = result.user;
     *   // This gives you a Google Access Token.
     *   const credential = provider.credentialFromResult(auth, result);
     *   const token = credential.accessToken;
     * }
     * ```
     *
     * @example
     * ```javascript
     * // Sign in using a popup.
     * const provider = new GoogleAuthProvider();
     * provider.addScope('profile');
     * provider.addScope('email');
     * const result = await signInWithPopup(auth, provider);
     *
     * // The signed-in user info.
     * const user = result.user;
     * // This gives you a Google Access Token.
     * const credential = provider.credentialFromResult(auth, result);
     * const token = credential.accessToken;
     * ```
     *
     * @public
     */
    var GoogleAuthProvider = /** @class */ (function (_super) {
        __extends(GoogleAuthProvider, _super);
        function GoogleAuthProvider() {
            var _this = _super.call(this, "google.com" /* GOOGLE */) || this;
            _this.addScope('profile');
            return _this;
        }
        /**
         * Creates a credential for Google. At least one of ID token and access token is required.
         *
         * @example
         * ```javascript
         * // \`googleUser\` from the onsuccess Google Sign In callback.
         * const credential = GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token);
         * const result = await signInWithCredential(credential);
         * ```
         *
         * @param idToken - Google ID token.
         * @param accessToken - Google access token.
         */
        GoogleAuthProvider.credential = function (idToken, accessToken) {
            return OAuthCredential._fromParams({
                providerId: GoogleAuthProvider.PROVIDER_ID,
                signInMethod: GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD,
                idToken: idToken,
                accessToken: accessToken
            });
        };
        /**
         * Used to extract the underlying {@link OAuthCredential} from a {@link @firebase/auth-types#UserCredential}.
         *
         * @param userCredential - The user credential.
         */
        GoogleAuthProvider.credentialFromResult = function (userCredential) {
            return GoogleAuthProvider.credentialFromTaggedObject(userCredential);
        };
        /**
         * Used to extract the underlying {@link OAuthCredential} from a {@link @firebase/auth-types#AuthError} which was
         * thrown during a sign-in, link, or reauthenticate operation.
         *
         * @param userCredential - The user credential.
         */
        GoogleAuthProvider.credentialFromError = function (error) {
            return GoogleAuthProvider.credentialFromTaggedObject((error.customData || {}));
        };
        GoogleAuthProvider.credentialFromTaggedObject = function (_a) {
            var tokenResponse = _a._tokenResponse;
            if (!tokenResponse) {
                return null;
            }
            var _b = tokenResponse, oauthIdToken = _b.oauthIdToken, oauthAccessToken = _b.oauthAccessToken;
            if (!oauthIdToken && !oauthAccessToken) {
                // This could be an oauth 1 credential or a phone credential
                return null;
            }
            try {
                return GoogleAuthProvider.credential(oauthIdToken, oauthAccessToken);
            }
            catch (_c) {
                return null;
            }
        };
        /** Always set to {@link @firebase/auth-types#SignInMethod.GOOGLE}. */
        GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD = "google.com" /* GOOGLE */;
        /** Always set to {@link @firebase/auth-types#ProviderId.GOOGLE}. */
        GoogleAuthProvider.PROVIDER_ID = "google.com" /* GOOGLE */;
        return GoogleAuthProvider;
    }(OAuthProvider));

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provider for generating an {@link OAuthCredential} for {@link @firebase/auth-types#ProviderId.GITHUB}.
     *
     * @remarks
     * GitHub requires an OAuth 2.0 redirect, so you can either handle the redirect directly, or use
     * the {@link signInWithPopup} handler:
     *
     * @example
     * ```javascript
     * // Sign in using a redirect.
     * const provider = new GithubAuthProvider();
     * // Start a sign in process for an unauthenticated user.
     * provider.addScope('repo');
     * await signInWithRedirect(auth, provider);
     * // This will trigger a full page redirect away from your app
     *
     * // After returning from the redirect when your app initializes you can obtain the result
     * const result = await getRedirectResult(auth);
     * if (result) {
     *   // This is the signed-in user
     *   const user = result.user;
     *   // This gives you a Github Access Token.
     *   const credential = provider.credentialFromResult(auth, result);
     *   const token = credential.accessToken;
     * }
     * ```
     *
     * @example
     * ```javascript
     * // Sign in using a popup.
     * const provider = new GithubAuthProvider();
     * provider.addScope('repo');
     * const result = await signInWithPopup(auth, provider);
     *
     * // The signed-in user info.
     * const user = result.user;
     * // This gives you a Github Access Token.
     * const credential = provider.credentialFromResult(auth, result);
     * const token = credential.accessToken;
     * ```
     * @public
     */
    var GithubAuthProvider = /** @class */ (function (_super) {
        __extends(GithubAuthProvider, _super);
        function GithubAuthProvider() {
            return _super.call(this, "github.com" /* GITHUB */) || this;
        }
        /**
         * Creates a credential for Github.
         *
         * @param accessToken - Github access token.
         */
        GithubAuthProvider.credential = function (accessToken) {
            return OAuthCredential._fromParams({
                providerId: GithubAuthProvider.PROVIDER_ID,
                signInMethod: GithubAuthProvider.GITHUB_SIGN_IN_METHOD,
                accessToken: accessToken
            });
        };
        /**
         * Used to extract the underlying {@link OAuthCredential} from a {@link @firebase/auth-types#UserCredential}.
         *
         * @param userCredential - The user credential.
         */
        GithubAuthProvider.credentialFromResult = function (userCredential) {
            return GithubAuthProvider.credentialFromTaggedObject(userCredential);
        };
        /**
         * Used to extract the underlying {@link OAuthCredential} from a {@link @firebase/auth-types#AuthError} which was
         * thrown during a sign-in, link, or reauthenticate operation.
         *
         * @param userCredential - The user credential.
         */
        GithubAuthProvider.credentialFromError = function (error) {
            return GithubAuthProvider.credentialFromTaggedObject((error.customData || {}));
        };
        GithubAuthProvider.credentialFromTaggedObject = function (_a) {
            var tokenResponse = _a._tokenResponse;
            if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {
                return null;
            }
            if (!tokenResponse.oauthAccessToken) {
                return null;
            }
            try {
                return GithubAuthProvider.credential(tokenResponse.oauthAccessToken);
            }
            catch (_b) {
                return null;
            }
        };
        /** Always set to {@link @firebase/auth-types#SignInMethod.GITHUB}. */
        GithubAuthProvider.GITHUB_SIGN_IN_METHOD = "github.com" /* GITHUB */;
        /** Always set to {@link @firebase/auth-types#ProviderId.GITHUB}. */
        GithubAuthProvider.PROVIDER_ID = "github.com" /* GITHUB */;
        return GithubAuthProvider;
    }(OAuthProvider));

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provider for generating an {@link OAuthCredential} for {@link @firebase/auth-types#ProviderId.TWITTER}.
     *
     * @example
     * ```javascript
     * // Sign in using a redirect.
     * const provider = new TwitterAuthProvider();
     * // Start a sign in process for an unauthenticated user.
     * await signInWithRedirect(auth, provider);
     * // This will trigger a full page redirect away from your app
     *
     * // After returning from the redirect when your app initializes you can obtain the result
     * const result = await getRedirectResult(auth);
     * if (result) {
     *   // This is the signed-in user
     *   const user = result.user;
     *   // This gives you a Twitter Access Token and Secret.
     *   const credential = provider.credentialFromResult(auth, result);
     *   const token = credential.accessToken;
     *   const secret = credential.secret;
     * }
     * ```
     *
     * @example
     * ```javascript
     * // Sign in using a popup.
     * const provider = new TwitterAuthProvider();
     * const result = await signInWithPopup(auth, provider);
     *
     * // The signed-in user info.
     * const user = result.user;
     * // This gives you a Twitter Access Token and Secret.
     * const credential = provider.credentialFromResult(auth, result);
     * const token = credential.accessToken;
     * const secret = credential.secret;
     * ```
     *
     * @public
     */
    var TwitterAuthProvider = /** @class */ (function (_super) {
        __extends(TwitterAuthProvider, _super);
        function TwitterAuthProvider() {
            return _super.call(this, "twitter.com" /* TWITTER */) || this;
        }
        /**
         * Creates a credential for Twitter.
         *
         * @param token - Twitter access token.
         * @param secret - Twitter secret.
         */
        TwitterAuthProvider.credential = function (token, secret) {
            return OAuthCredential._fromParams({
                providerId: TwitterAuthProvider.PROVIDER_ID,
                signInMethod: TwitterAuthProvider.TWITTER_SIGN_IN_METHOD,
                oauthToken: token,
                oauthTokenSecret: secret
            });
        };
        /**
         * Used to extract the underlying {@link OAuthCredential} from a {@link @firebase/auth-types#UserCredential}.
         *
         * @param userCredential - The user credential.
         */
        TwitterAuthProvider.credentialFromResult = function (userCredential) {
            return TwitterAuthProvider.credentialFromTaggedObject(userCredential);
        };
        /**
         * Used to extract the underlying {@link OAuthCredential} from a {@link @firebase/auth-types#AuthError} which was
         * thrown during a sign-in, link, or reauthenticate operation.
         *
         * @param userCredential - The user credential.
         */
        TwitterAuthProvider.credentialFromError = function (error) {
            return TwitterAuthProvider.credentialFromTaggedObject((error.customData || {}));
        };
        TwitterAuthProvider.credentialFromTaggedObject = function (_a) {
            var tokenResponse = _a._tokenResponse;
            if (!tokenResponse) {
                return null;
            }
            var _b = tokenResponse, oauthAccessToken = _b.oauthAccessToken, oauthTokenSecret = _b.oauthTokenSecret;
            if (!oauthAccessToken || !oauthTokenSecret) {
                return null;
            }
            try {
                return TwitterAuthProvider.credential(oauthAccessToken, oauthTokenSecret);
            }
            catch (_c) {
                return null;
            }
        };
        TwitterAuthProvider.TWITTER_SIGN_IN_METHOD = "twitter.com" /* TWITTER */;
        TwitterAuthProvider.PROVIDER_ID = "twitter.com" /* TWITTER */;
        return TwitterAuthProvider;
    }(OAuthProvider));

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function signUp(auth, request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _performSignInRequest(auth, "POST" /* POST */, "/v1/accounts:signUp" /* SIGN_UP */, request)];
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var UserCredentialImpl = /** @class */ (function () {
        function UserCredentialImpl(params) {
            this.user = params.user;
            this.providerId = params.providerId;
            this._tokenResponse = params._tokenResponse;
            this.operationType = params.operationType;
        }
        UserCredentialImpl._fromIdTokenResponse = function (auth, operationType, idTokenResponse, isAnonymous) {
            if (isAnonymous === void 0) { isAnonymous = false; }
            return __awaiter(this, void 0, void 0, function () {
                var user, providerId, userCred;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, UserImpl._fromIdTokenResponse(auth, idTokenResponse, isAnonymous)];
                        case 1:
                            user = _a.sent();
                            providerId = providerIdForResponse(idTokenResponse);
                            userCred = new UserCredentialImpl({
                                user: user,
                                providerId: providerId,
                                _tokenResponse: idTokenResponse,
                                operationType: operationType
                            });
                            return [2 /*return*/, userCred];
                    }
                });
            });
        };
        UserCredentialImpl._forOperation = function (user, operationType, response) {
            return __awaiter(this, void 0, void 0, function () {
                var providerId;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, user._updateTokensIfNecessary(response, /* reload */ true)];
                        case 1:
                            _a.sent();
                            providerId = providerIdForResponse(response);
                            return [2 /*return*/, new UserCredentialImpl({
                                    user: user,
                                    providerId: providerId,
                                    _tokenResponse: response,
                                    operationType: operationType
                                })];
                    }
                });
            });
        };
        return UserCredentialImpl;
    }());
    function providerIdForResponse(response) {
        if (response.providerId) {
            return response.providerId;
        }
        if ('phoneNumber' in response) {
            return "phone" /* PHONE */;
        }
        return null;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Asynchronously signs in as an anonymous user.
     *
     * @remarks
     * If there is already an anonymous user signed in, that user will be returned; otherwise, a
     * new anonymous user identity will be created and returned.
     *
     * @param auth - The Auth instance.
     *
     * @public
     */
    function signInAnonymously(auth) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var authInternal, response, userCredential;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        authInternal = _castAuth(auth);
                        if ((_a = authInternal.currentUser) === null || _a === void 0 ? void 0 : _a.isAnonymous) {
                            // If an anonymous user is already signed in, no need to sign them in again.
                            return [2 /*return*/, new UserCredentialImpl({
                                    user: authInternal.currentUser,
                                    providerId: null,
                                    operationType: "signIn" /* SIGN_IN */
                                })];
                        }
                        return [4 /*yield*/, signUp(authInternal, {
                                returnSecureToken: true
                            })];
                    case 1:
                        response = _b.sent();
                        return [4 /*yield*/, UserCredentialImpl._fromIdTokenResponse(authInternal, "signIn" /* SIGN_IN */, response, true)];
                    case 2:
                        userCredential = _b.sent();
                        return [4 /*yield*/, authInternal._updateCurrentUser(userCredential.user)];
                    case 3:
                        _b.sent();
                        return [2 /*return*/, userCredential];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var MultiFactorError = /** @class */ (function (_super) {
        __extends(MultiFactorError, _super);
        function MultiFactorError(auth, error, operationType, user) {
            var _a;
            var _this = _super.call(this, error.code, error.message) || this;
            _this.operationType = operationType;
            _this.user = user;
            _this.name = 'FirebaseError';
            // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
            Object.setPrototypeOf(_this, MultiFactorError.prototype);
            _this.appName = auth.name;
            _this.code = error.code;
            _this.tenantId = (_a = auth.tenantId) !== null && _a !== void 0 ? _a : undefined;
            _this.serverResponse = error.customData
                .serverResponse;
            return _this;
        }
        MultiFactorError._fromErrorAndOperation = function (auth, error, operationType, user) {
            return new MultiFactorError(auth, error, operationType, user);
        };
        return MultiFactorError;
    }(FirebaseError));
    function _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user) {
        var idTokenProvider = operationType === "reauthenticate" /* REAUTHENTICATE */
            ? credential._getReauthenticationResolver(auth)
            : credential._getIdTokenResponse(auth);
        return idTokenProvider.catch(function (error) {
            if (error.code === "auth/" + "multi-factor-auth-required" /* MFA_REQUIRED */) {
                throw MultiFactorError._fromErrorAndOperation(auth, error, operationType, user);
            }
            throw error;
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Takes a set of UserInfo provider data and converts it to a set of names
     */
    function providerDataAsNames(providerData) {
        return new Set(providerData
            .map(function (_a) {
            var providerId = _a.providerId;
            return providerId;
        })
            .filter(function (pid) { return !!pid; }));
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Unlinks a provider from a user account.
     *
     * @param user - The user.
     * @param providerId - The provider to unlink.
     *
     * @public
     */
    function unlink(user, providerId) {
        return __awaiter(this, void 0, void 0, function () {
            var userInternal, providerUserInfo, _a, _b, providersLeft;
            var _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        userInternal = user;
                        return [4 /*yield*/, _assertLinkedStatus(true, userInternal, providerId)];
                    case 1:
                        _d.sent();
                        _a = deleteLinkedAccounts;
                        _b = [userInternal.auth];
                        _c = {};
                        return [4 /*yield*/, user.getIdToken()];
                    case 2: return [4 /*yield*/, _a.apply(void 0, _b.concat([(_c.idToken = _d.sent(),
                                _c.deleteProvider = [providerId],
                                _c)]))];
                    case 3:
                        providerUserInfo = (_d.sent()).providerUserInfo;
                        providersLeft = providerDataAsNames(providerUserInfo || []);
                        userInternal.providerData = user.providerData.filter(function (pd) {
                            return providersLeft.has(pd.providerId);
                        });
                        if (!providersLeft.has("phone" /* PHONE */)) {
                            userInternal.phoneNumber = null;
                        }
                        return [4 /*yield*/, userInternal.auth._persistUserIfCurrent(userInternal)];
                    case 4:
                        _d.sent();
                        return [2 /*return*/, user];
                }
            });
        });
    }
    function _link(user, credential, bypassAuthState) {
        if (bypassAuthState === void 0) { bypassAuthState = false; }
        return __awaiter(this, void 0, void 0, function () {
            var response, _a, _b, _c, _d, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        _a = _logoutIfInvalidated;
                        _b = [user];
                        _d = (_c = credential)._linkToIdToken;
                        _e = [user.auth];
                        return [4 /*yield*/, user.getIdToken()];
                    case 1: return [4 /*yield*/, _a.apply(void 0, _b.concat([_d.apply(_c, _e.concat([_f.sent()])), bypassAuthState]))];
                    case 2:
                        response = _f.sent();
                        return [2 /*return*/, UserCredentialImpl._forOperation(user, "link" /* LINK */, response)];
                }
            });
        });
    }
    function _assertLinkedStatus(expected, user, provider) {
        return __awaiter(this, void 0, void 0, function () {
            var providerIds, code;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, _reloadWithoutSaving(user)];
                    case 1:
                        _a.sent();
                        providerIds = providerDataAsNames(user.providerData);
                        code = expected === false
                            ? "provider-already-linked" /* PROVIDER_ALREADY_LINKED */
                            : "no-such-provider" /* NO_SUCH_PROVIDER */;
                        _assert(providerIds.has(provider) === expected, user.auth, code);
                        return [2 /*return*/];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _reauthenticate(user, credential, bypassAuthState) {
        if (bypassAuthState === void 0) { bypassAuthState = false; }
        return __awaiter(this, void 0, void 0, function () {
            var auth, operationType, response, parsed, localId, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        auth = user.auth;
                        operationType = "reauthenticate" /* REAUTHENTICATE */;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, _logoutIfInvalidated(user, _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user), bypassAuthState)];
                    case 2:
                        response = _a.sent();
                        _assert(response.idToken, auth, "internal-error" /* INTERNAL_ERROR */);
                        parsed = _parseToken(response.idToken);
                        _assert(parsed, auth, "internal-error" /* INTERNAL_ERROR */);
                        localId = parsed.sub;
                        _assert(user.uid === localId, auth, "user-mismatch" /* USER_MISMATCH */);
                        return [2 /*return*/, UserCredentialImpl._forOperation(user, operationType, response)];
                    case 3:
                        e_1 = _a.sent();
                        // Convert user deleted error into user mismatch
                        if ((e_1 === null || e_1 === void 0 ? void 0 : e_1.code) === "auth/" + "user-not-found" /* USER_DELETED */) {
                            _fail(auth, "user-mismatch" /* USER_MISMATCH */);
                        }
                        throw e_1;
                    case 4: return [2 /*return*/];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _signInWithCredential(auth, credential, bypassAuthState) {
        if (bypassAuthState === void 0) { bypassAuthState = false; }
        return __awaiter(this, void 0, void 0, function () {
            var operationType, response, userCredential;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        operationType = "signIn" /* SIGN_IN */;
                        return [4 /*yield*/, _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, UserCredentialImpl._fromIdTokenResponse(auth, operationType, response)];
                    case 2:
                        userCredential = _a.sent();
                        if (!!bypassAuthState) return [3 /*break*/, 4];
                        return [4 /*yield*/, auth._updateCurrentUser(userCredential.user)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2 /*return*/, userCredential];
                }
            });
        });
    }
    /**
     * Asynchronously signs in with the given credentials.
     *
     * @remarks
     * An {@link @firebase/auth-types#AuthProvider} can be used to generate the credential.
     *
     * @param auth - The Auth instance.
     * @param credential - The auth credential.
     *
     * @public
     */
    function signInWithCredential(auth, credential) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _signInWithCredential(_castAuth(auth), credential)];
            });
        });
    }
    /**
     * Links the user account with the given credentials.
     *
     * @remarks
     * An {@link @firebase/auth-types#AuthProvider} can be used to generate the credential.
     *
     * @param user - The user.
     * @param credential - The auth credential.
     *
     * @public
     */
    function linkWithCredential(user, credential) {
        return __awaiter(this, void 0, void 0, function () {
            var userInternal;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        userInternal = user;
                        return [4 /*yield*/, _assertLinkedStatus(false, userInternal, credential.providerId)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, _link(userInternal, credential)];
                }
            });
        });
    }
    /**
     * Re-authenticates a user using a fresh credential.
     *
     * @remarks
     * Use before operations such as {@link updatePassword} that require tokens from recent sign-in
     * attempts. This method can be used to recover from a
     * {@link AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN} error.
     *
     * @param user - The user.
     * @param credential - The auth credential.
     *
     * @public
     */
    function reauthenticateWithCredential(user, credential) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _reauthenticate(user, credential)];
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function signInWithCustomToken(auth, request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _performSignInRequest(auth, "POST" /* POST */, "/v1/accounts:signInWithCustomToken" /* SIGN_IN_WITH_CUSTOM_TOKEN */, request)];
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Asynchronously signs in using a custom token.
     *
     * @remarks
     * Custom tokens are used to integrate Firebase Auth with existing auth systems, and must
     * be generated by an auth backend using the
     * {@link https://firebase.google.com/docs/reference/admin/node/admin.auth.Auth#createcustomtoken | createCustomToken}
     * method in the {@link https://firebase.google.com/docs/auth/admin | Admin SDK} .
     *
     * Fails with an error if the token is invalid, expired, or not accepted by the Firebase Auth service.
     *
     * @param auth - The Auth instance.
     * @param customToken - The custom token to sign in with.
     *
     * @public
     */
    function signInWithCustomToken$1(auth, customToken) {
        return __awaiter(this, void 0, void 0, function () {
            var response, authInternal, cred;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, signInWithCustomToken(auth, {
                            token: customToken,
                            returnSecureToken: true
                        })];
                    case 1:
                        response = _a.sent();
                        authInternal = _castAuth(auth);
                        return [4 /*yield*/, UserCredentialImpl._fromIdTokenResponse(authInternal, "signIn" /* SIGN_IN */, response)];
                    case 2:
                        cred = _a.sent();
                        return [4 /*yield*/, authInternal._updateCurrentUser(cred.user)];
                    case 3:
                        _a.sent();
                        return [2 /*return*/, cred];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var MultiFactorInfo = /** @class */ (function () {
        function MultiFactorInfo(factorId, response) {
            this.factorId = factorId;
            this.uid = response.mfaEnrollmentId;
            this.enrollmentTime = new Date(response.enrolledAt).toUTCString();
            this.displayName = response.displayName;
        }
        MultiFactorInfo._fromServerResponse = function (auth, enrollment) {
            if ('phoneInfo' in enrollment) {
                return PhoneMultiFactorInfo._fromServerResponse(auth, enrollment);
            }
            return _fail(auth, "internal-error" /* INTERNAL_ERROR */);
        };
        return MultiFactorInfo;
    }());
    var PhoneMultiFactorInfo = /** @class */ (function (_super) {
        __extends(PhoneMultiFactorInfo, _super);
        function PhoneMultiFactorInfo(response) {
            var _this = _super.call(this, "phone" /* PHONE */, response) || this;
            _this.phoneNumber = response.phoneInfo;
            return _this;
        }
        PhoneMultiFactorInfo._fromServerResponse = function (_auth, enrollment) {
            return new PhoneMultiFactorInfo(enrollment);
        };
        return PhoneMultiFactorInfo;
    }(MultiFactorInfo));

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _setActionCodeSettingsOnRequest(auth, request, actionCodeSettings) {
        var _a;
        _assert(((_a = actionCodeSettings.url) === null || _a === void 0 ? void 0 : _a.length) > 0, auth, "invalid-continue-uri" /* INVALID_CONTINUE_URI */);
        _assert(typeof actionCodeSettings.dynamicLinkDomain === 'undefined' ||
            actionCodeSettings.dynamicLinkDomain.length > 0, auth, "invalid-dynamic-link-domain" /* INVALID_DYNAMIC_LINK_DOMAIN */);
        request.continueUrl = actionCodeSettings.url;
        request.dynamicLinkDomain = actionCodeSettings.dynamicLinkDomain;
        request.canHandleCodeInApp = actionCodeSettings.handleCodeInApp;
        if (actionCodeSettings.iOS) {
            _assert(actionCodeSettings.iOS.bundleId.length > 0, auth, "missing-ios-bundle-id" /* MISSING_IOS_BUNDLE_ID */);
            request.iosBundleId = actionCodeSettings.iOS.bundleId;
        }
        if (actionCodeSettings.android) {
            _assert(actionCodeSettings.android.packageName.length > 0, auth, "missing-android-pkg-name" /* MISSING_ANDROID_PACKAGE_NAME */);
            request.androidInstallApp = actionCodeSettings.android.installApp;
            request.androidMinimumVersionCode =
                actionCodeSettings.android.minimumVersion;
            request.androidPackageName = actionCodeSettings.android.packageName;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Sends a password reset email to the given email address.
     *
     * @remarks
     * To complete the password reset, call {@link confirmPasswordReset} with the code supplied in
     * the email sent to the user, along with the new password specified by the user.
     *
     * @example
     * ```javascript
     * const actionCodeSettings = {
     *   url: 'https://www.example.com/?email=user@example.com',
     *   iOS: {
     *      bundleId: 'com.example.ios'
     *   },
     *   android: {
     *     packageName: 'com.example.android',
     *     installApp: true,
     *     minimumVersion: '12'
     *   },
     *   handleCodeInApp: true
     * };
     * await sendPasswordResetEmail(auth, 'user@example.com', actionCodeSettings);
     * // Obtain code from user.
     * await confirmPasswordReset('user@example.com', code);
     * ```
     *
     * @param auth - The Auth instance.
     * @param email - The user's email address.
     * @param actionCodeSettings - The {@link @firebase/auth-types#ActionCodeSettings}.
     *
     * @public
     */
    function sendPasswordResetEmail$1(auth, email, actionCodeSettings) {
        return __awaiter(this, void 0, void 0, function () {
            var request;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        request = {
                            requestType: "PASSWORD_RESET" /* PASSWORD_RESET */,
                            email: email
                        };
                        if (actionCodeSettings) {
                            _setActionCodeSettingsOnRequest(auth, request, actionCodeSettings);
                        }
                        return [4 /*yield*/, sendPasswordResetEmail(auth, request)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    }
    /**
     * Completes the password reset process, given a confirmation code and new password.
     *
     * @param auth - The Auth instance.
     * @param oobCode - A confirmation code sent to the user.
     * @param newPassword - The new password.
     *
     * @public
     */
    function confirmPasswordReset(auth, oobCode, newPassword) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, resetPassword(auth, {
                            oobCode: oobCode,
                            newPassword: newPassword
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    }
    /**
     * Applies a verification code sent to the user by email or other out-of-band mechanism.
     *
     * @param auth - The Auth instance.
     * @param oobCode - A verification code sent to the user.
     *
     * @public
     */
    function applyActionCode$1(auth, oobCode) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, applyActionCode(auth, { oobCode: oobCode })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    }
    /**
     * Checks a verification code sent to the user by email or other out-of-band mechanism.
     *
     * @returns metadata about the code.
     *
     * @param auth - The Auth instance.
     * @param oobCode - A verification code sent to the user.
     *
     * @public
     */
    function checkActionCode(auth, oobCode) {
        return __awaiter(this, void 0, void 0, function () {
            var response, operation, multiFactorInfo;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, resetPassword(auth, { oobCode: oobCode })];
                    case 1:
                        response = _a.sent();
                        operation = response.requestType;
                        _assert(operation, auth, "internal-error" /* INTERNAL_ERROR */);
                        switch (operation) {
                            case "EMAIL_SIGNIN" /* EMAIL_SIGNIN */:
                                break;
                            case "VERIFY_AND_CHANGE_EMAIL" /* VERIFY_AND_CHANGE_EMAIL */:
                                _assert(response.newEmail, auth, "internal-error" /* INTERNAL_ERROR */);
                                break;
                            case "REVERT_SECOND_FACTOR_ADDITION" /* REVERT_SECOND_FACTOR_ADDITION */:
                                _assert(response.mfaInfo, auth, "internal-error" /* INTERNAL_ERROR */);
                            // fall through
                            default:
                                _assert(response.email, auth, "internal-error" /* INTERNAL_ERROR */);
                        }
                        multiFactorInfo = null;
                        if (response.mfaInfo) {
                            multiFactorInfo = MultiFactorInfo._fromServerResponse(_castAuth(auth), response.mfaInfo);
                        }
                        return [2 /*return*/, {
                                data: {
                                    email: (response.requestType ===
                                        "VERIFY_AND_CHANGE_EMAIL" /* VERIFY_AND_CHANGE_EMAIL */
                                        ? response.newEmail
                                        : response.email) || null,
                                    previousEmail: (response.requestType ===
                                        "VERIFY_AND_CHANGE_EMAIL" /* VERIFY_AND_CHANGE_EMAIL */
                                        ? response.email
                                        : response.newEmail) || null,
                                    multiFactorInfo: multiFactorInfo
                                },
                                operation: operation
                            }];
                }
            });
        });
    }
    /**
     * Checks a password reset code sent to the user by email or other out-of-band mechanism.
     *
     * @returns the user's email address if valid.
     *
     * @param auth - The Auth instance.
     * @param code - A verification code sent to the user.
     *
     * @public
     */
    function verifyPasswordResetCode(auth, code) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, checkActionCode(auth, code)];
                    case 1:
                        data = (_a.sent()).data;
                        // Email should always be present since a code was sent to it
                        return [2 /*return*/, data.email];
                }
            });
        });
    }
    /**
     * Creates a new user account associated with the specified email address and password.
     *
     * @remarks
     * On successful creation of the user account, this user will also be signed in to your application.
     *
     * User account creation can fail if the account already exists or the password is invalid.
     *
     * Note: The email address acts as a unique identifier for the user and enables an email-based
     * password reset. This function will create a new user account and set the initial user password.
     *
     * @param auth - The Auth instance.
     * @param email - The user's email address.
     * @param password - The user's chosen password.
     *
     * @public
     */
    function createUserWithEmailAndPassword(auth, email, password) {
        return __awaiter(this, void 0, void 0, function () {
            var authInternal, response, userCredential;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        authInternal = _castAuth(auth);
                        return [4 /*yield*/, signUp(auth, {
                                returnSecureToken: true,
                                email: email,
                                password: password
                            })];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, UserCredentialImpl._fromIdTokenResponse(authInternal, "signIn" /* SIGN_IN */, response)];
                    case 2:
                        userCredential = _a.sent();
                        return [4 /*yield*/, authInternal._updateCurrentUser(userCredential.user)];
                    case 3:
                        _a.sent();
                        return [2 /*return*/, userCredential];
                }
            });
        });
    }
    /**
     * Asynchronously signs in using an email and password.
     *
     * @remarks
     * Fails with an error if the email address and password do not match.
     *
     * Note: The user's password is NOT the password used to access the user's email account. The
     * email address serves as a unique identifier for the user, and the password is used to access
     * the user's account in your Firebase project. See also: {@link createUserWithEmailAndPassword}.
     *
     * @param auth - The Auth instance.
     * @param email - The users email address.
     * @param password - The users password.
     *
     * @public
     */
    function signInWithEmailAndPassword(auth, email, password) {
        return signInWithCredential(auth, EmailAuthProvider.credential(email, password));
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Sends a sign-in email link to the user with the specified email.
     *
     * @remarks
     * The sign-in operation has to always be completed in the app unlike other out of band email
     * actions (password reset and email verifications). This is because, at the end of the flow,
     * the user is expected to be signed in and their Auth state persisted within the app.
     *
     * To complete sign in with the email link, call {@link signInWithEmailLink} with the email
     * address and the email link supplied in the email sent to the user.
     *
     * @example
     * ```javascript
     * const actionCodeSettings = {
     *   url: 'https://www.example.com/?email=user@example.com',
     *   iOS: {
     *      bundleId: 'com.example.ios'
     *   },
     *   android: {
     *     packageName: 'com.example.android',
     *     installApp: true,
     *     minimumVersion: '12'
     *   },
     *   handleCodeInApp: true
     * };
     * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);
     * // Obtain emailLink from the user.
     * if(isSignInWithEmailLink(auth, emailLink)) {
     *   await signInWithEmailLink('user@example.com', 'user@example.com', emailLink);
     * }
     * ```
     *
     * @param auth - The Auth instance.
     * @param email - The user's email address.
     * @param actionCodeSettings - The {@link @firebase/auth-types#ActionCodeSettings}.
     *
     * @public
     */
    function sendSignInLinkToEmail$1(auth, email, actionCodeSettings) {
        return __awaiter(this, void 0, void 0, function () {
            var request;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        request = {
                            requestType: "EMAIL_SIGNIN" /* EMAIL_SIGNIN */,
                            email: email
                        };
                        _assert(actionCodeSettings === null || actionCodeSettings === void 0 ? void 0 : actionCodeSettings.handleCodeInApp, auth, "argument-error" /* ARGUMENT_ERROR */);
                        if (actionCodeSettings) {
                            _setActionCodeSettingsOnRequest(auth, request, actionCodeSettings);
                        }
                        return [4 /*yield*/, sendSignInLinkToEmail(auth, request)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    }
    /**
     * Checks if an incoming link is a sign-in with email link suitable for {@link signInWithEmailLink}.
     *
     * @param auth - The Auth instance.
     * @param emailLink - The link sent to the user's email address.
     *
     * @public
     */
    function isSignInWithEmailLink(auth, emailLink) {
        var actionCodeUrl = ActionCodeURL.parseLink(emailLink);
        return (actionCodeUrl === null || actionCodeUrl === void 0 ? void 0 : actionCodeUrl.operation) === "EMAIL_SIGNIN" /* EMAIL_SIGNIN */;
    }
    /**
     * Asynchronously signs in using an email and sign-in email link.
     *
     * @remarks
     * If no link is passed, the link is inferred from the current URL.
     *
     * Fails with an error if the email address is invalid or OTP in email link expires.
     *
     * Note: Confirm the link is a sign-in email link before calling this method firebase.auth.Auth.isSignInWithEmailLink.
     *
     * @example
     * ```javascript
     * const actionCodeSettings = {
     *   url: 'https://www.example.com/?email=user@example.com',
     *   iOS: {
     *      bundleId: 'com.example.ios'
     *   },
     *   android: {
     *     packageName: 'com.example.android',
     *     installApp: true,
     *     minimumVersion: '12'
     *   },
     *   handleCodeInApp: true
     * };
     * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);
     * // Obtain emailLink from the user.
     * if(isSignInWithEmailLink(auth, emailLink)) {
     *   await signInWithEmailLink('user@example.com', 'user@example.com', emailLink);
     * }
     * ```
     *
     * @param auth - The Auth instance.
     * @param email - The user's email address.
     * @param emailLink - The link sent to the user's email address.
     *
     * @public
     */
    function signInWithEmailLink$1(auth, email, emailLink) {
        return __awaiter(this, void 0, void 0, function () {
            var credential;
            return __generator(this, function (_a) {
                credential = EmailAuthProvider.credentialWithLink(email, emailLink || _getCurrentUrl());
                // Check if the tenant ID in the email link matches the tenant ID on Auth
                // instance.
                _assert(credential.tenantId === (auth.tenantId || null), auth, "tenant-id-mismatch" /* TENANT_ID_MISMATCH */);
                return [2 /*return*/, signInWithCredential(auth, credential)];
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function createAuthUri(auth, request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _performApiRequest(auth, "POST" /* POST */, "/v1/accounts:createAuthUri" /* CREATE_AUTH_URI */, request)];
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Gets the list of possible sign in methods for the given email address.
     *
     * @remarks
     * This is useful to differentiate methods of sign-in for the same provider, eg.
     * {@link EmailAuthProvider} which has 2 methods of sign-in,
     * {@link @firebase/auth-types#SignInMethod.EMAIL_PASSWORD} and
     * {@link @firebase/auth-types#SignInMethod.EMAIL_LINK} .
     *
     * @param auth - The Auth instance.
     * @param email - The user's email address.
     *
     * @public
     */
    function fetchSignInMethodsForEmail(auth, email) {
        return __awaiter(this, void 0, void 0, function () {
            var continueUri, request, signinMethods;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        continueUri = _isHttpOrHttps() ? _getCurrentUrl() : 'http://localhost';
                        request = {
                            identifier: email,
                            continueUri: continueUri
                        };
                        return [4 /*yield*/, createAuthUri(auth, request)];
                    case 1:
                        signinMethods = (_a.sent()).signinMethods;
                        return [2 /*return*/, signinMethods || []];
                }
            });
        });
    }
    /**
     * Sends a verification email to a user.
     *
     * @remarks
     * The verification process is completed by calling {@link applyActionCode}.
     *
     * @example
     * ```javascript
     * const actionCodeSettings = {
     *   url: 'https://www.example.com/?email=user@example.com',
     *   iOS: {
     *      bundleId: 'com.example.ios'
     *   },
     *   android: {
     *     packageName: 'com.example.android',
     *     installApp: true,
     *     minimumVersion: '12'
     *   },
     *   handleCodeInApp: true
     * };
     * await sendEmailVerification(user, actionCodeSettings);
     * // Obtain code from the user.
     * await applyActionCode(auth, code);
     * ```
     *
     * @param user - The user.
     * @param actionCodeSettings - The {@link @firebase/auth-types#ActionCodeSettings}.
     *
     * @public
     */
    function sendEmailVerification$1(user, actionCodeSettings) {
        return __awaiter(this, void 0, void 0, function () {
            var userInternal, idToken, request, email;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        userInternal = user;
                        return [4 /*yield*/, user.getIdToken()];
                    case 1:
                        idToken = _a.sent();
                        request = {
                            requestType: "VERIFY_EMAIL" /* VERIFY_EMAIL */,
                            idToken: idToken
                        };
                        if (actionCodeSettings) {
                            _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);
                        }
                        return [4 /*yield*/, sendEmailVerification(userInternal.auth, request)];
                    case 2:
                        email = (_a.sent()).email;
                        if (!(email !== user.email)) return [3 /*break*/, 4];
                        return [4 /*yield*/, user.reload()];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    }
    /**
     * Sends a verification email to a new email address.
     *
     * @remarks
     * The user's email will be updated to the new one after being verified.
     *
     * If you have a custom email action handler, you can complete the verification process by calling
     * {@link applyActionCode}.
     *
     * @example
     * ```javascript
     * const actionCodeSettings = {
     *   url: 'https://www.example.com/?email=user@example.com',
     *   iOS: {
     *      bundleId: 'com.example.ios'
     *   },
     *   android: {
     *     packageName: 'com.example.android',
     *     installApp: true,
     *     minimumVersion: '12'
     *   },
     *   handleCodeInApp: true
     * };
     * await verifyBeforeUpdateEmail(user, 'newemail@example.com', actionCodeSettings);
     * // Obtain code from the user.
     * await applyActionCode(auth, code);
     * ```
     *
     * @param user - The user.
     * @param newEmail - The new email address to be verified before update.
     * @param actionCodeSettings - The {@link @firebase/auth-types#ActionCodeSettings}.
     *
     * @public
     */
    function verifyBeforeUpdateEmail(user, newEmail, actionCodeSettings) {
        return __awaiter(this, void 0, void 0, function () {
            var userInternal, idToken, request, email;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        userInternal = user;
                        return [4 /*yield*/, user.getIdToken()];
                    case 1:
                        idToken = _a.sent();
                        request = {
                            requestType: "VERIFY_AND_CHANGE_EMAIL" /* VERIFY_AND_CHANGE_EMAIL */,
                            idToken: idToken,
                            newEmail: newEmail
                        };
                        if (actionCodeSettings) {
                            _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);
                        }
                        return [4 /*yield*/, verifyAndChangeEmail(userInternal.auth, request)];
                    case 2:
                        email = (_a.sent()).email;
                        if (!(email !== user.email)) return [3 /*break*/, 4];
                        // If the local copy of the email on user is outdated, reload the
                        // user.
                        return [4 /*yield*/, user.reload()];
                    case 3:
                        // If the local copy of the email on user is outdated, reload the
                        // user.
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function updateProfile(auth, request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _performApiRequest(auth, "POST" /* POST */, "/v1/accounts:update" /* SET_ACCOUNT_INFO */, request)];
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Updates a user's profile data.
     *
     * @param user - The user.
     * @param profile - The profile's `displayName` and `photoURL` to update.
     *
     * @public
     */
    function updateProfile$1(user, _a) {
        var displayName = _a.displayName, photoUrl = _a.photoURL;
        return __awaiter(this, void 0, void 0, function () {
            var userInternal, idToken, profileRequest, response, passwordProvider;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (displayName === undefined && photoUrl === undefined) {
                            return [2 /*return*/];
                        }
                        userInternal = user;
                        return [4 /*yield*/, user.getIdToken()];
                    case 1:
                        idToken = _b.sent();
                        profileRequest = {
                            idToken: idToken,
                            displayName: displayName,
                            photoUrl: photoUrl,
                            returnSecureToken: true
                        };
                        return [4 /*yield*/, _logoutIfInvalidated(userInternal, updateProfile(userInternal.auth, profileRequest))];
                    case 2:
                        response = _b.sent();
                        userInternal.displayName = response.displayName || null;
                        userInternal.photoURL = response.photoUrl || null;
                        passwordProvider = userInternal.providerData.find(function (_a) {
                            var providerId = _a.providerId;
                            return providerId === "password" /* PASSWORD */;
                        });
                        if (passwordProvider) {
                            passwordProvider.displayName = user.displayName;
                            passwordProvider.photoURL = user.photoURL;
                        }
                        return [4 /*yield*/, userInternal._updateTokensIfNecessary(response)];
                    case 3:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    }
    /**
     * Updates the user's email address.
     *
     * @remarks
     * An email will be sent to the original email address (if it was set) that allows to revoke the
     * email address change, in order to protect them from account hijacking.
     *
     * Important: this is a security sensitive operation that requires the user to have recently signed
     * in. If this requirement isn't met, ask the user to authenticate again and then call
     * {@link reauthenticateWithCredential}.
     *
     * @param user - The user.
     * @param newEmail - The new email address.
     *
     * @public
     */
    function updateEmail(user, newEmail) {
        return updateEmailOrPassword(user, newEmail, null);
    }
    /**
     * Updates the user's password.
     *
     * @remarks
     * Important: this is a security sensitive operation that requires the user to have recently signed
     * in. If this requirement isn't met, ask the user to authenticate again and then call
     * {@link reauthenticateWithCredential}.
     *
     * @param user - The user.
     * @param newPassword - The new password.
     *
     * @public
     */
    function updatePassword(user, newPassword) {
        return updateEmailOrPassword(user, null, newPassword);
    }
    function updateEmailOrPassword(user, email, password) {
        return __awaiter(this, void 0, void 0, function () {
            var auth, idToken, request, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        auth = user.auth;
                        return [4 /*yield*/, user.getIdToken()];
                    case 1:
                        idToken = _a.sent();
                        request = {
                            idToken: idToken,
                            returnSecureToken: true
                        };
                        if (email) {
                            request.email = email;
                        }
                        if (password) {
                            request.password = password;
                        }
                        return [4 /*yield*/, _logoutIfInvalidated(user, updateEmailPassword(auth, request))];
                    case 2:
                        response = _a.sent();
                        return [4 /*yield*/, user._updateTokensIfNecessary(response, /* reload */ true)];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Parse the `AdditionalUserInfo` from the ID token response.
     *
     */
    function _fromIdTokenResponse(idTokenResponse) {
        var _a, _b;
        if (!idTokenResponse) {
            return null;
        }
        var providerId = idTokenResponse.providerId;
        var profile = idTokenResponse.rawUserInfo
            ? JSON.parse(idTokenResponse.rawUserInfo)
            : {};
        var isNewUser = idTokenResponse.isNewUser ||
            idTokenResponse.kind === "identitytoolkit#SignupNewUserResponse" /* SignupNewUser */;
        if (!providerId && (idTokenResponse === null || idTokenResponse === void 0 ? void 0 : idTokenResponse.idToken)) {
            var signInProvider = (_b = (_a = _parseToken(idTokenResponse.idToken)) === null || _a === void 0 ? void 0 : _a.firebase) === null || _b === void 0 ? void 0 : _b['sign_in_provider'];
            if (signInProvider) {
                var filteredProviderId = signInProvider !== "anonymous" /* ANONYMOUS */ &&
                    signInProvider !== "custom" /* CUSTOM */
                    ? signInProvider
                    : null;
                // Uses generic class in accordance with the legacy SDK.
                return new GenericAdditionalUserInfo(isNewUser, filteredProviderId);
            }
        }
        if (!providerId) {
            return null;
        }
        switch (providerId) {
            case "facebook.com" /* FACEBOOK */:
                return new FacebookAdditionalUserInfo(isNewUser, profile);
            case "github.com" /* GITHUB */:
                return new GithubAdditionalUserInfo(isNewUser, profile);
            case "google.com" /* GOOGLE */:
                return new GoogleAdditionalUserInfo(isNewUser, profile);
            case "twitter.com" /* TWITTER */:
                return new TwitterAdditionalUserInfo(isNewUser, profile, idTokenResponse.screenName || null);
            case "custom" /* CUSTOM */:
            case "anonymous" /* ANONYMOUS */:
                return new GenericAdditionalUserInfo(isNewUser, null);
            default:
                return new GenericAdditionalUserInfo(isNewUser, providerId, profile);
        }
    }
    var GenericAdditionalUserInfo = /** @class */ (function () {
        function GenericAdditionalUserInfo(isNewUser, providerId, profile) {
            if (profile === void 0) { profile = {}; }
            this.isNewUser = isNewUser;
            this.providerId = providerId;
            this.profile = profile;
        }
        return GenericAdditionalUserInfo;
    }());
    var FederatedAdditionalUserInfoWithUsername = /** @class */ (function (_super) {
        __extends(FederatedAdditionalUserInfoWithUsername, _super);
        function FederatedAdditionalUserInfoWithUsername(isNewUser, providerId, profile, username) {
            var _this = _super.call(this, isNewUser, providerId, profile) || this;
            _this.username = username;
            return _this;
        }
        return FederatedAdditionalUserInfoWithUsername;
    }(GenericAdditionalUserInfo));
    var FacebookAdditionalUserInfo = /** @class */ (function (_super) {
        __extends(FacebookAdditionalUserInfo, _super);
        function FacebookAdditionalUserInfo(isNewUser, profile) {
            return _super.call(this, isNewUser, "facebook.com" /* FACEBOOK */, profile) || this;
        }
        return FacebookAdditionalUserInfo;
    }(GenericAdditionalUserInfo));
    var GithubAdditionalUserInfo = /** @class */ (function (_super) {
        __extends(GithubAdditionalUserInfo, _super);
        function GithubAdditionalUserInfo(isNewUser, profile) {
            return _super.call(this, isNewUser, "github.com" /* GITHUB */, profile, typeof (profile === null || profile === void 0 ? void 0 : profile.login) === 'string' ? profile === null || profile === void 0 ? void 0 : profile.login : null) || this;
        }
        return GithubAdditionalUserInfo;
    }(FederatedAdditionalUserInfoWithUsername));
    var GoogleAdditionalUserInfo = /** @class */ (function (_super) {
        __extends(GoogleAdditionalUserInfo, _super);
        function GoogleAdditionalUserInfo(isNewUser, profile) {
            return _super.call(this, isNewUser, "google.com" /* GOOGLE */, profile) || this;
        }
        return GoogleAdditionalUserInfo;
    }(GenericAdditionalUserInfo));
    var TwitterAdditionalUserInfo = /** @class */ (function (_super) {
        __extends(TwitterAdditionalUserInfo, _super);
        function TwitterAdditionalUserInfo(isNewUser, profile, screenName) {
            return _super.call(this, isNewUser, "twitter.com" /* TWITTER */, profile, screenName) || this;
        }
        return TwitterAdditionalUserInfo;
    }(FederatedAdditionalUserInfoWithUsername));
    /**
     * Extracts provider specific {@link @firebase/auth-types#AdditionalUserInfo} for the given credential.
     *
     * @param userCredential - The user credential.
     *
     * @public
     */
    function getAdditionalUserInfo(userCredential) {
        var _a = userCredential, user = _a.user, _tokenResponse = _a._tokenResponse;
        if (user.isAnonymous && !_tokenResponse) {
            // Handle the special case where signInAnonymously() gets called twice.
            // No network call is made so there's nothing to actually fill this in
            return {
                providerId: null,
                isNewUser: false,
                profile: null
            };
        }
        return _fromIdTokenResponse(_tokenResponse);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // Non-optional auth methods.
    /**
     * Changes the type of persistence on the Auth instance for the currently saved
     * Auth session and applies this type of persistence for future sign-in requests, including
     * sign-in with redirect requests.
     *
     * @remarks
     * This makes it easy for a user signing in to specify whether their session should be
     * remembered or not. It also makes it easier to never persist the Auth state for applications
     * that are shared by other users or have sensitive data.
     *
     * @example
     * ```javascript
     * setPersistence(auth, browserSessionPersistence);
     * ```
     *
     * @param auth - The Auth instance.
     * @param persistence - The {@link @firebase/auth-types#Persistence} to use.
     * @returns A promise that resolves once the persistence change has completed
     *
     * @public
     */
    function setPersistence(auth, persistence) {
        return auth.setPersistence(persistence);
    }
    /**
     * Adds an observer for changes to the signed-in user's ID token, which includes sign-in,
     * sign-out, and token refresh events.
     *
     * @param auth - The Auth instance.
     * @param nextOrObserver - callback triggered on change.
     * @param error - callback triggered on error.
     * @param completed - callback triggered when observer is removed.
     *
     * @public
     */
    function onIdTokenChanged(auth, nextOrObserver, error, completed) {
        return auth.onIdTokenChanged(nextOrObserver, error, completed);
    }
    /**
     * Adds an observer for changes to the user's sign-in state.
     *
     * @remarks
     * To keep the old behavior, see {@link onIdTokenChanged}.
     *
     * @param auth - The Auth instance.
     * @param nextOrObserver - callback triggered on change.
     * @param error - callback triggered on error.
     * @param completed - callback triggered when observer is removed.
     *
     * @public
     */
    function onAuthStateChanged(auth, nextOrObserver, error, completed) {
        return auth.onAuthStateChanged(nextOrObserver, error, completed);
    }
    /**
     * Sets the current language to the default device/browser preference.
     *
     * @param auth - The Auth instanec.
     *
     * @public
     */
    function useDeviceLanguage(auth) {
        auth.useDeviceLanguage();
    }
    /**
     * Asynchronously sets the provided user as {@link @firebase/auth-types#Auth.currentUser} on the
     * {@link @firebase/auth-types#Auth} instance.
     *
     * @remarks
     * A new instance copy of the user provided will be made and set as currentUser.
     *
     * This will trigger {@link onAuthStateChanged} and {@link onIdTokenChanged} listeners
     * like other sign in methods.
     *
     * The operation fails with an error if the user to be updated belongs to a different Firebase
     * project.
     *
     * @param auth - The Auth instance.
     * @param user - The new {@link @firebase/auth-types#User}.
     *
     * @public
     */
    function updateCurrentUser(auth, user) {
        return auth.updateCurrentUser(user);
    }
    /**
     * Signs out the current user.
     *
     * @param auth - The Auth instance.
     *
     * @public
     */
    function signOut(auth) {
        return auth.signOut();
    }
    /**
     * Deletes and signs out the user.
     *
     * @remarks
     * Important: this is a security-sensitive operation that requires the user to have recently
     * signed in. If this requirement isn't met, ask the user to authenticate again and then call
     * {@link reauthenticateWithCredential}.
     *
     * @param user - The user.
     *
     * @public
     */
    function deleteUser(user) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, user.delete()];
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var MultiFactorSession = /** @class */ (function () {
        function MultiFactorSession(type, credential) {
            this.type = type;
            this.credential = credential;
        }
        MultiFactorSession._fromIdtoken = function (idToken) {
            return new MultiFactorSession("enroll" /* ENROLL */, idToken);
        };
        MultiFactorSession._fromMfaPendingCredential = function (mfaPendingCredential) {
            return new MultiFactorSession("signin" /* SIGN_IN */, mfaPendingCredential);
        };
        MultiFactorSession.prototype.toJSON = function () {
            var _a;
            var key = this.type === "enroll" /* ENROLL */
                ? 'idToken'
                : 'pendingCredential';
            return {
                multiFactorSession: (_a = {},
                    _a[key] = this.credential,
                    _a)
            };
        };
        MultiFactorSession.fromJSON = function (obj) {
            var _a, _b;
            if (obj === null || obj === void 0 ? void 0 : obj.multiFactorSession) {
                if ((_a = obj.multiFactorSession) === null || _a === void 0 ? void 0 : _a.pendingCredential) {
                    return MultiFactorSession._fromMfaPendingCredential(obj.multiFactorSession.pendingCredential);
                }
                else if ((_b = obj.multiFactorSession) === null || _b === void 0 ? void 0 : _b.idToken) {
                    return MultiFactorSession._fromIdtoken(obj.multiFactorSession.idToken);
                }
            }
            return null;
        };
        return MultiFactorSession;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var MultiFactorResolver = /** @class */ (function () {
        function MultiFactorResolver(session, hints, signInResolver) {
            this.session = session;
            this.hints = hints;
            this.signInResolver = signInResolver;
        }
        /** @internal */
        MultiFactorResolver._fromError = function (authExtern, error) {
            var _this = this;
            var auth = _castAuth(authExtern);
            var hints = (error.serverResponse.mfaInfo || []).map(function (enrollment) {
                return MultiFactorInfo._fromServerResponse(auth, enrollment);
            });
            _assert(error.serverResponse.mfaPendingCredential, auth, "internal-error" /* INTERNAL_ERROR */);
            var session = MultiFactorSession._fromMfaPendingCredential(error.serverResponse.mfaPendingCredential);
            return new MultiFactorResolver(session, hints, function (assertion) { return __awaiter(_this, void 0, void 0, function () {
                var mfaResponse, idTokenResponse, _a, userCredential;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, assertion._process(auth, session)];
                        case 1:
                            mfaResponse = _b.sent();
                            // Clear out the unneeded fields from the old login response
                            delete error.serverResponse.mfaInfo;
                            delete error.serverResponse.mfaPendingCredential;
                            idTokenResponse = __assign(__assign({}, error.serverResponse), { idToken: mfaResponse.idToken, refreshToken: mfaResponse.refreshToken });
                            _a = error.operationType;
                            switch (_a) {
                                case "signIn" /* SIGN_IN */: return [3 /*break*/, 2];
                                case "reauthenticate" /* REAUTHENTICATE */: return [3 /*break*/, 5];
                            }
                            return [3 /*break*/, 6];
                        case 2: return [4 /*yield*/, UserCredentialImpl._fromIdTokenResponse(auth, error.operationType, idTokenResponse)];
                        case 3:
                            userCredential = _b.sent();
                            return [4 /*yield*/, auth._updateCurrentUser(userCredential.user)];
                        case 4:
                            _b.sent();
                            return [2 /*return*/, userCredential];
                        case 5:
                            _assert(error.user, auth, "internal-error" /* INTERNAL_ERROR */);
                            return [2 /*return*/, UserCredentialImpl._forOperation(error.user, error.operationType, idTokenResponse)];
                        case 6:
                            _fail(auth, "internal-error" /* INTERNAL_ERROR */);
                            _b.label = 7;
                        case 7: return [2 /*return*/];
                    }
                });
            }); });
        };
        MultiFactorResolver.prototype.resolveSignIn = function (assertionExtern) {
            return __awaiter(this, void 0, void 0, function () {
                var assertion;
                return __generator(this, function (_a) {
                    assertion = assertionExtern;
                    return [2 /*return*/, this.signInResolver(assertion)];
                });
            });
        };
        return MultiFactorResolver;
    }());
    /**
     * Provides a {@link @firebase/auth-types#MultiFactorResolver} suitable for completion of a
     * multi-factor flow.
     *
     * @param auth - The auth instance.
     * @param error - The {@link @firebase/auth-types#MultiFactorError} raised during a sign-in, or
     * reauthentication operation.
     *
     * @public
     */
    function getMultiFactorResolver(auth, error) {
        var _a;
        var errorInternal = error;
        _assert(error.operationType, auth, "argument-error" /* ARGUMENT_ERROR */);
        _assert((_a = errorInternal.serverResponse) === null || _a === void 0 ? void 0 : _a.mfaPendingCredential, auth, "argument-error" /* ARGUMENT_ERROR */);
        return MultiFactorResolver._fromError(auth, errorInternal);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function startEnrollPhoneMfa(auth, request) {
        return _performApiRequest(auth, "POST" /* POST */, "/v2/accounts/mfaEnrollment:start" /* START_PHONE_MFA_ENROLLMENT */, __assign({ tenantId: auth.tenantId }, request));
    }
    function finalizeEnrollPhoneMfa(auth, request) {
        return _performApiRequest(auth, "POST" /* POST */, "/v2/accounts/mfaEnrollment:finalize" /* FINALIZE_PHONE_MFA_ENROLLMENT */, __assign({ tenantId: auth.tenantId }, request));
    }
    function withdrawMfa(auth, request) {
        return _performApiRequest(auth, "POST" /* POST */, "/v2/accounts/mfaEnrollment:withdraw" /* WITHDRAW_MFA */, __assign({ tenantId: auth.tenantId }, request));
    }

    var MultiFactorUser = /** @class */ (function () {
        function MultiFactorUser(user) {
            var _this = this;
            this.user = user;
            this.enrolledFactors = [];
            user._onReload(function (userInfo) {
                if (userInfo.mfaInfo) {
                    _this.enrolledFactors = userInfo.mfaInfo.map(function (enrollment) {
                        return MultiFactorInfo._fromServerResponse(user.auth, enrollment);
                    });
                }
            });
        }
        MultiFactorUser._fromUser = function (user) {
            return new MultiFactorUser(user);
        };
        MultiFactorUser.prototype.getSession = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            _b = (_a = MultiFactorSession)._fromIdtoken;
                            return [4 /*yield*/, this.user.getIdToken()];
                        case 1: return [2 /*return*/, _b.apply(_a, [_c.sent()])];
                    }
                });
            });
        };
        MultiFactorUser.prototype.enroll = function (assertionExtern, displayName) {
            return __awaiter(this, void 0, void 0, function () {
                var assertion, session, finalizeMfaResponse;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            assertion = assertionExtern;
                            return [4 /*yield*/, this.getSession()];
                        case 1:
                            session = (_a.sent());
                            return [4 /*yield*/, _logoutIfInvalidated(this.user, assertion._process(this.user.auth, session, displayName))];
                        case 2:
                            finalizeMfaResponse = _a.sent();
                            // New tokens will be issued after enrollment of the new second factors.
                            // They need to be updated on the user.
                            return [4 /*yield*/, this.user._updateTokensIfNecessary(finalizeMfaResponse)];
                        case 3:
                            // New tokens will be issued after enrollment of the new second factors.
                            // They need to be updated on the user.
                            _a.sent();
                            // The user needs to be reloaded to get the new multi-factor information
                            // from server. USER_RELOADED event will be triggered and `enrolledFactors`
                            // will be updated.
                            return [2 /*return*/, this.user.reload()];
                    }
                });
            });
        };
        MultiFactorUser.prototype.unenroll = function (infoOrUid) {
            return __awaiter(this, void 0, void 0, function () {
                var mfaEnrollmentId, idToken, idTokenResponse, e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            mfaEnrollmentId = typeof infoOrUid === 'string' ? infoOrUid : infoOrUid.uid;
                            return [4 /*yield*/, this.user.getIdToken()];
                        case 1:
                            idToken = _a.sent();
                            return [4 /*yield*/, _logoutIfInvalidated(this.user, withdrawMfa(this.user.auth, {
                                    idToken: idToken,
                                    mfaEnrollmentId: mfaEnrollmentId
                                }))];
                        case 2:
                            idTokenResponse = _a.sent();
                            // Remove the second factor from the user's list.
                            this.enrolledFactors = this.enrolledFactors.filter(function (_a) {
                                var uid = _a.uid;
                                return uid !== mfaEnrollmentId;
                            });
                            // Depending on whether the backend decided to revoke the user's session,
                            // the tokenResponse may be empty. If the tokens were not updated (and they
                            // are now invalid), reloading the user will discover this and invalidate
                            // the user's state accordingly.
                            return [4 /*yield*/, this.user._updateTokensIfNecessary(idTokenResponse)];
                        case 3:
                            // Depending on whether the backend decided to revoke the user's session,
                            // the tokenResponse may be empty. If the tokens were not updated (and they
                            // are now invalid), reloading the user will discover this and invalidate
                            // the user's state accordingly.
                            _a.sent();
                            _a.label = 4;
                        case 4:
                            _a.trys.push([4, 6, , 7]);
                            return [4 /*yield*/, this.user.reload()];
                        case 5:
                            _a.sent();
                            return [3 /*break*/, 7];
                        case 6:
                            e_1 = _a.sent();
                            if (e_1.code !== "auth/" + "user-token-expired" /* TOKEN_EXPIRED */) {
                                throw e_1;
                            }
                            return [3 /*break*/, 7];
                        case 7: return [2 /*return*/];
                    }
                });
            });
        };
        return MultiFactorUser;
    }());
    var multiFactorUserCache = new WeakMap();
    /**
     * The {@link @firebase/auth-types#MultiFactorUser} corresponding to the user.
     *
     * @remarks
     * This is used to access all multi-factor properties and operations related to the user.
     *
     * @param user - The user.
     *
     * @public
     */
    function multiFactor(user) {
        if (!multiFactorUserCache.has(user)) {
            multiFactorUserCache.set(user, MultiFactorUser._fromUser(user));
        }
        return multiFactorUserCache.get(user);
    }

    var version = "0.0.900";

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Determine the browser for the purposes of reporting usage to the API
     */
    function _getBrowserName(userAgent) {
        var ua = userAgent.toLowerCase();
        if (ua.includes('opera/') || ua.includes('opr/') || ua.includes('opios/')) {
            return "Opera" /* OPERA */;
        }
        else if (_isIEMobile(ua)) {
            // Windows phone IEMobile browser.
            return "IEMobile" /* IEMOBILE */;
        }
        else if (ua.includes('msie') || ua.includes('trident/')) {
            return "IE" /* IE */;
        }
        else if (ua.includes('edge/')) {
            return "Edge" /* EDGE */;
        }
        else if (_isFirefox(ua)) {
            return "Firefox" /* FIREFOX */;
        }
        else if (ua.includes('silk/')) {
            return "Silk" /* SILK */;
        }
        else if (_isBlackBerry(ua)) {
            // Blackberry browser.
            return "Blackberry" /* BLACKBERRY */;
        }
        else if (_isWebOS(ua)) {
            // WebOS default browser.
            return "Webos" /* WEBOS */;
        }
        else if (_isSafari(ua)) {
            return "Safari" /* SAFARI */;
        }
        else if ((ua.includes('chrome/') || _isChromeIOS(ua)) &&
            !ua.includes('edge/')) {
            return "Chrome" /* CHROME */;
        }
        else if (_isAndroid(ua)) {
            // Android stock browser.
            return "Android" /* ANDROID */;
        }
        else {
            // Most modern browsers have name/version at end of user agent string.
            var re = /([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/;
            var matches = userAgent.match(re);
            if ((matches === null || matches === void 0 ? void 0 : matches.length) === 2) {
                return matches[1];
            }
        }
        return "Other" /* OTHER */;
    }
    function _isFirefox(ua) {
        if (ua === void 0) { ua = getUA(); }
        return /firefox\//i.test(ua);
    }
    function _isSafari(userAgent) {
        var ua = userAgent.toLowerCase();
        return (ua.includes('safari/') &&
            !ua.includes('chrome/') &&
            !ua.includes('crios/') &&
            !ua.includes('android'));
    }
    function _isChromeIOS(ua) {
        if (ua === void 0) { ua = getUA(); }
        return /crios\//i.test(ua);
    }
    function _isIEMobile(ua) {
        if (ua === void 0) { ua = getUA(); }
        return /iemobile/i.test(ua);
    }
    function _isAndroid(ua) {
        if (ua === void 0) { ua = getUA(); }
        return /android/i.test(ua);
    }
    function _isBlackBerry(ua) {
        if (ua === void 0) { ua = getUA(); }
        return /blackberry/i.test(ua);
    }
    function _isWebOS(ua) {
        if (ua === void 0) { ua = getUA(); }
        return /webos/i.test(ua);
    }
    function _isIOS(ua) {
        if (ua === void 0) { ua = getUA(); }
        return /iphone|ipad|ipod/i.test(ua);
    }
    function _isIOSStandalone(ua) {
        var _a;
        if (ua === void 0) { ua = getUA(); }
        return _isIOS(ua) && !!((_a = window.navigator) === null || _a === void 0 ? void 0 : _a.standalone);
    }
    function _isIE10() {
        return isIE() && document.documentMode === 10;
    }
    function _isMobileBrowser(ua) {
        if (ua === void 0) { ua = getUA(); }
        // TODO: implement getBrowserName equivalent for OS.
        return (_isIOS(ua) ||
            _isAndroid(ua) ||
            _isWebOS(ua) ||
            _isBlackBerry(ua) ||
            /windows phone/i.test(ua) ||
            _isIEMobile(ua));
    }
    function _isIframe() {
        try {
            // Check that the current window is not the top window.
            // If so, return true.
            return !!(window && window !== window.top);
        }
        catch (e) {
            return false;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /*
     * Determine the SDK version string
     *
     * TODO: This should be set on the Auth object during initialization
     */
    function _getClientVersion(clientPlatform) {
        var reportedPlatform;
        switch (clientPlatform) {
            case "Browser" /* BROWSER */:
                // In a browser environment, report the browser name.
                reportedPlatform = _getBrowserName(getUA());
                break;
            case "Worker" /* WORKER */:
                // Technically a worker runs from a browser but we need to differentiate a
                // worker from a browser.
                // For example: Chrome-Worker/JsCore/4.9.1/FirebaseCore-web.
                reportedPlatform = _getBrowserName(getUA()) + "-" + clientPlatform;
                break;
            default:
                reportedPlatform = clientPlatform;
        }
        return reportedPlatform + "/" + "JsCore" /* CORE */ + "/" + app.SDK_VERSION + "/" + "FirebaseCore-web" /* DEFAULT */;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var AuthInternal = /** @class */ (function () {
        function AuthInternal(auth) {
            this.auth = auth;
            this.internalListeners = new Map();
        }
        AuthInternal.prototype.getUid = function () {
            var _a;
            this.assertAuthConfigured();
            return ((_a = this.auth.currentUser) === null || _a === void 0 ? void 0 : _a.uid) || null;
        };
        AuthInternal.prototype.getToken = function (forceRefresh) {
            return __awaiter(this, void 0, void 0, function () {
                var accessToken;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.assertAuthConfigured();
                            return [4 /*yield*/, this.auth._initializationPromise];
                        case 1:
                            _a.sent();
                            if (!this.auth.currentUser) {
                                return [2 /*return*/, null];
                            }
                            return [4 /*yield*/, this.auth.currentUser.getIdToken(forceRefresh)];
                        case 2:
                            accessToken = _a.sent();
                            return [2 /*return*/, { accessToken: accessToken }];
                    }
                });
            });
        };
        AuthInternal.prototype.addAuthTokenListener = function (listener) {
            this.assertAuthConfigured();
            if (this.internalListeners.has(listener)) {
                return;
            }
            var unsubscribe = this.auth.onIdTokenChanged(function (user) {
                var _a;
                listener(((_a = user) === null || _a === void 0 ? void 0 : _a.stsTokenManager.accessToken) || null);
            });
            this.internalListeners.set(listener, unsubscribe);
            this.updateProactiveRefresh();
        };
        AuthInternal.prototype.removeAuthTokenListener = function (listener) {
            this.assertAuthConfigured();
            var unsubscribe = this.internalListeners.get(listener);
            if (!unsubscribe) {
                return;
            }
            this.internalListeners.delete(listener);
            unsubscribe();
            this.updateProactiveRefresh();
        };
        AuthInternal.prototype.assertAuthConfigured = function () {
            _assert(this.auth._initializationPromise, "dependent-sdk-initialized-before-auth" /* DEPENDENT_SDK_INIT_BEFORE_AUTH */);
        };
        AuthInternal.prototype.updateProactiveRefresh = function () {
            if (this.internalListeners.size > 0) {
                this.auth._startProactiveRefresh();
            }
            else {
                this.auth._stopProactiveRefresh();
            }
        };
        return AuthInternal;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function getVersionForPlatform(clientPlatform) {
        switch (clientPlatform) {
            case "Node" /* NODE */:
                return 'node';
            case "ReactNative" /* REACT_NATIVE */:
                return 'rn';
            case "Worker" /* WORKER */:
                return 'webworker';
            case "Cordova" /* CORDOVA */:
                return 'cordova';
            default:
                return undefined;
        }
    }
    /** @internal */
    function registerAuth(clientPlatform) {
        app._registerComponent(new Component("auth-exp" /* AUTH */, function (container) {
            var app = container.getProvider('app-exp').getImmediate();
            var _a = app.options, apiKey = _a.apiKey, authDomain = _a.authDomain;
            return (function (app) {
                _assert(apiKey, "invalid-api-key" /* INVALID_API_KEY */, { appName: app.name });
                var config = {
                    apiKey: apiKey,
                    authDomain: authDomain,
                    apiHost: "identitytoolkit.googleapis.com" /* API_HOST */,
                    tokenApiHost: "securetoken.googleapis.com" /* TOKEN_API_HOST */,
                    apiScheme: "https" /* API_SCHEME */,
                    sdkClientVersion: _getClientVersion(clientPlatform)
                };
                return new AuthImpl(app, config);
            })(app);
        }, "PUBLIC" /* PUBLIC */));
        app._registerComponent(new Component("auth-internal" /* AUTH_INTERNAL */, function (container) {
            var auth = _castAuth(container.getProvider("auth-exp" /* AUTH */).getImmediate());
            return (function (auth) { return new AuthInternal(auth); })(auth);
        }, "PRIVATE" /* PRIVATE */));
        app.registerVersion("auth-exp" /* AUTH */, version, getVersionForPlatform(clientPlatform));
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var STORAGE_AVAILABLE_KEY = '__sak';

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // There are two different browser persistence types: local and session.
    // Both have the same implementation but use a different underlying storage
    // object.
    var BrowserPersistenceClass = /** @class */ (function () {
        function BrowserPersistenceClass(storage, type) {
            this.storage = storage;
            this.type = type;
        }
        BrowserPersistenceClass.prototype._isAvailable = function () {
            try {
                if (!this.storage) {
                    return Promise.resolve(false);
                }
                this.storage.setItem(STORAGE_AVAILABLE_KEY, '1');
                this.storage.removeItem(STORAGE_AVAILABLE_KEY);
                return Promise.resolve(true);
            }
            catch (_a) {
                return Promise.resolve(false);
            }
        };
        BrowserPersistenceClass.prototype._set = function (key, value) {
            this.storage.setItem(key, JSON.stringify(value));
            return Promise.resolve();
        };
        BrowserPersistenceClass.prototype._get = function (key) {
            var json = this.storage.getItem(key);
            return Promise.resolve(json ? JSON.parse(json) : null);
        };
        BrowserPersistenceClass.prototype._remove = function (key) {
            this.storage.removeItem(key);
            return Promise.resolve();
        };
        return BrowserPersistenceClass;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _iframeCannotSyncWebStorage() {
        var ua = getUA();
        return _isSafari(ua) || _isIOS(ua);
    }
    // The polling period in case events are not supported
    var _POLLING_INTERVAL_MS = 1000;
    // The IE 10 localStorage cross tab synchronization delay in milliseconds
    var IE10_LOCAL_STORAGE_SYNC_DELAY = 10;
    var BrowserLocalPersistence = /** @class */ (function (_super) {
        __extends(BrowserLocalPersistence, _super);
        function BrowserLocalPersistence() {
            var _this = _super.call(this, localStorage, "LOCAL" /* LOCAL */) || this;
            _this.listeners = {};
            _this.localCache = {};
            // setTimeout return value is platform specific
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            _this.pollTimer = null;
            // Safari or iOS browser and embedded in an iframe.
            _this.safariLocalStorageNotSynced = _iframeCannotSyncWebStorage() && _isIframe();
            // Whether to use polling instead of depending on window events
            _this.fallbackToPolling = _isMobileBrowser();
            _this.boundEventHandler = _this.onStorageEvent.bind(_this);
            return _this;
        }
        BrowserLocalPersistence.prototype.forAllChangedKeys = function (cb) {
            // Check all keys with listeners on them.
            for (var _i = 0, _a = Object.keys(this.listeners); _i < _a.length; _i++) {
                var key = _a[_i];
                // Get value from localStorage.
                var newValue = this.storage.getItem(key);
                var oldValue = this.localCache[key];
                // If local map value does not match, trigger listener with storage event.
                // Differentiate this simulated event from the real storage event.
                if (newValue !== oldValue) {
                    cb(key, oldValue, newValue);
                }
            }
        };
        BrowserLocalPersistence.prototype.onStorageEvent = function (event, poll) {
            var _this = this;
            if (poll === void 0) { poll = false; }
            // Key would be null in some situations, like when localStorage is cleared
            if (!event.key) {
                this.forAllChangedKeys(function (key, _oldValue, newValue) {
                    _this.notifyListeners(key, newValue);
                });
                return;
            }
            var key = event.key;
            // Ignore keys that have no listeners.
            if (!this.listeners[key]) {
                return;
            }
            // Check the mechanism how this event was detected.
            // The first event will dictate the mechanism to be used.
            if (poll) {
                // Environment detects storage changes via polling.
                // Remove storage event listener to prevent possible event duplication.
                this.detachListener();
            }
            else {
                // Environment detects storage changes via storage event listener.
                // Remove polling listener to prevent possible event duplication.
                this.stopPolling();
            }
            // Safari embedded iframe. Storage event will trigger with the delta
            // changes but no changes will be applied to the iframe localStorage.
            if (this.safariLocalStorageNotSynced) {
                // Get current iframe page value.
                var storedValue_1 = this.storage.getItem(key);
                // Value not synchronized, synchronize manually.
                if (event.newValue !== storedValue_1) {
                    if (event.newValue !== null) {
                        // Value changed from current value.
                        this.storage.setItem(key, event.newValue);
                    }
                    else {
                        // Current value deleted.
                        this.storage.removeItem(key);
                    }
                }
                else if (this.localCache[key] === event.newValue && !poll) {
                    // Already detected and processed, do not trigger listeners again.
                    return;
                }
            }
            var triggerListeners = function () {
                // Keep local map up to date in case storage event is triggered before
                // poll.
                var storedValue = _this.storage.getItem(key);
                if (!poll && _this.localCache[key] === storedValue) {
                    // Real storage event which has already been detected, do nothing.
                    // This seems to trigger in some IE browsers for some reason.
                    return;
                }
                _this.notifyListeners(key, storedValue);
            };
            var storedValue = this.storage.getItem(key);
            if (_isIE10() &&
                storedValue !== event.newValue &&
                event.newValue !== event.oldValue) {
                // IE 10 has this weird bug where a storage event would trigger with the
                // correct key, oldValue and newValue but localStorage.getItem(key) does
                // not yield the updated value until a few milliseconds. This ensures
                // this recovers from that situation.
                setTimeout(triggerListeners, IE10_LOCAL_STORAGE_SYNC_DELAY);
            }
            else {
                triggerListeners();
            }
        };
        BrowserLocalPersistence.prototype.notifyListeners = function (key, value) {
            if (!this.listeners[key]) {
                return;
            }
            this.localCache[key] = value;
            for (var _i = 0, _a = Array.from(this.listeners[key]); _i < _a.length; _i++) {
                var listener = _a[_i];
                listener(value ? JSON.parse(value) : value);
            }
        };
        BrowserLocalPersistence.prototype.startPolling = function () {
            var _this = this;
            this.stopPolling();
            this.pollTimer = setInterval(function () {
                _this.forAllChangedKeys(function (key, oldValue, newValue) {
                    _this.onStorageEvent(new StorageEvent('storage', {
                        key: key,
                        oldValue: oldValue,
                        newValue: newValue
                    }), 
                    /* poll */ true);
                });
            }, _POLLING_INTERVAL_MS);
        };
        BrowserLocalPersistence.prototype.stopPolling = function () {
            if (this.pollTimer) {
                clearInterval(this.pollTimer);
                this.pollTimer = null;
            }
        };
        BrowserLocalPersistence.prototype.attachListener = function () {
            window.addEventListener('storage', this.boundEventHandler);
        };
        BrowserLocalPersistence.prototype.detachListener = function () {
            window.removeEventListener('storage', this.boundEventHandler);
        };
        BrowserLocalPersistence.prototype._addListener = function (key, listener) {
            this.localCache[key] = this.storage.getItem(key);
            if (Object.keys(this.listeners).length === 0) {
                // Whether browser can detect storage event when it had already been pushed to the background.
                // This may happen in some mobile browsers. A localStorage change in the foreground window
                // will not be detected in the background window via the storage event.
                // This was detected in iOS 7.x mobile browsers
                if (this.fallbackToPolling) {
                    this.startPolling();
                }
                else {
                    this.attachListener();
                }
            }
            this.listeners[key] = this.listeners[key] || new Set();
            this.listeners[key].add(listener);
        };
        BrowserLocalPersistence.prototype._removeListener = function (key, listener) {
            if (this.listeners[key]) {
                this.listeners[key].delete(listener);
                if (this.listeners[key].size === 0) {
                    delete this.listeners[key];
                    delete this.localCache[key];
                }
            }
            if (Object.keys(this.listeners).length === 0) {
                this.detachListener();
                this.stopPolling();
            }
        };
        BrowserLocalPersistence.type = 'LOCAL';
        return BrowserLocalPersistence;
    }(BrowserPersistenceClass));
    /**
     * An implementation of {@link @firebase/auth-types#Persistence} of type 'LOCAL' using `localStorage`
     * for the underlying storage.
     *
     * @public
     */
    var browserLocalPersistence = BrowserLocalPersistence;

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Shim for Promise.allSettled, note the slightly different format of `fulfilled` vs `status`.
     *
     * @param promises - Array of promises to wait on.
     */
    function _allSettled(promises) {
        var _this = this;
        return Promise.all(promises.map(function (promise) { return __awaiter(_this, void 0, void 0, function () {
            var value, reason_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, promise];
                    case 1:
                        value = _a.sent();
                        return [2 /*return*/, {
                                fulfilled: true,
                                value: value
                            }];
                    case 2:
                        reason_1 = _a.sent();
                        return [2 /*return*/, {
                                fulfilled: false,
                                reason: reason_1
                            }];
                    case 3: return [2 /*return*/];
                }
            });
        }); }));
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Interface class for receiving messages.
     *
     */
    var Receiver = /** @class */ (function () {
        function Receiver(eventTarget) {
            this.eventTarget = eventTarget;
            this.handlersMap = {};
            this.boundEventHandler = this.handleEvent.bind(this);
        }
        /**
         * Obtain an instance of a Receiver for a given event target, if none exists it will be created.
         *
         * @param eventTarget - An event target (such as window or self) through which the underlying
         * messages will be received.
         */
        Receiver._getInstance = function (eventTarget) {
            // The results are stored in an array since objects can't be keys for other
            // objects. In addition, setting a unique property on an event target as a
            // hash map key may not be allowed due to CORS restrictions.
            var existingInstance = this.receivers.find(function (receiver) {
                return receiver.isListeningto(eventTarget);
            });
            if (existingInstance) {
                return existingInstance;
            }
            var newInstance = new Receiver(eventTarget);
            this.receivers.push(newInstance);
            return newInstance;
        };
        Receiver.prototype.isListeningto = function (eventTarget) {
            return this.eventTarget === eventTarget;
        };
        /**
         * Fans out a MessageEvent to the appropriate listeners.
         *
         * @remarks
         * Sends an {@link Status.ACK} upon receipt and a {@link Status.DONE} once all handlers have
         * finished processing.
         *
         * @param event - The MessageEvent.
         *
         */
        Receiver.prototype.handleEvent = function (event) {
            return __awaiter(this, void 0, void 0, function () {
                var messageEvent, _a, eventId, eventType, data, handlers, promises, response;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            messageEvent = event;
                            _a = messageEvent.data, eventId = _a.eventId, eventType = _a.eventType, data = _a.data;
                            handlers = this.handlersMap[eventType];
                            if (!(handlers === null || handlers === void 0 ? void 0 : handlers.size)) {
                                return [2 /*return*/];
                            }
                            messageEvent.ports[0].postMessage({
                                status: "ack" /* ACK */,
                                eventId: eventId,
                                eventType: eventType
                            });
                            promises = Array.from(handlers).map(function (handler) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                                return [2 /*return*/, handler(messageEvent.origin, data)];
                            }); }); });
                            return [4 /*yield*/, _allSettled(promises)];
                        case 1:
                            response = _b.sent();
                            messageEvent.ports[0].postMessage({
                                status: "done" /* DONE */,
                                eventId: eventId,
                                eventType: eventType,
                                response: response
                            });
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Subscribe an event handler for a particular event.
         *
         * @param eventType - Event name to subscribe to.
         * @param eventHandler - The event handler which should receive the events.
         *
         */
        Receiver.prototype._subscribe = function (eventType, eventHandler) {
            if (Object.keys(this.handlersMap).length === 0) {
                this.eventTarget.addEventListener('message', this.boundEventHandler);
            }
            if (!this.handlersMap[eventType]) {
                this.handlersMap[eventType] = new Set();
            }
            this.handlersMap[eventType].add(eventHandler);
        };
        /**
         * Unsubscribe an event handler from a particular event.
         *
         * @param eventType - Event name to unsubscribe from.
         * @param eventHandler - Optinoal event handler, if none provided, unsubscribe all handlers on this event.
         *
         */
        Receiver.prototype._unsubscribe = function (eventType, eventHandler) {
            if (this.handlersMap[eventType] && eventHandler) {
                this.handlersMap[eventType].delete(eventHandler);
            }
            if (!eventHandler || this.handlersMap[eventType].size === 0) {
                delete this.handlersMap[eventType];
            }
            if (Object.keys(this.handlersMap).length === 0) {
                this.eventTarget.removeEventListener('message', this.boundEventHandler);
            }
        };
        Receiver.receivers = [];
        return Receiver;
    }());

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function generateEventId(prefix, digits) {
        if (prefix === void 0) { prefix = ''; }
        if (digits === void 0) { digits = 20; }
        return "" + prefix + Math.floor(Math.random() * Math.pow(10, digits));
    }
    /**
     * Interface for sending messages and waiting for a completion response.
     *
     */
    var Sender = /** @class */ (function () {
        function Sender(target) {
            this.target = target;
            this.handlers = new Set();
        }
        /**
         * Unsubscribe the handler and remove it from our tracking Set.
         *
         * @param handler - The handler to unsubscribe.
         */
        Sender.prototype.removeMessageHandler = function (handler) {
            if (handler.messageChannel) {
                handler.messageChannel.port1.removeEventListener('message', handler.onMessage);
                handler.messageChannel.port1.close();
            }
            this.handlers.delete(handler);
        };
        /**
         * Send a message to the Receiver located at {@link target}.
         *
         * @remarks
         * We'll first wait a bit for an ACK , if we get one we will wait significantly longer until the
         * receiver has had a chance to fully process the event.
         *
         * @param eventType - Type of event to send.
         * @param data - The payload of the event.
         * @param timeout - Timeout for waiting on an ACK from the receiver.
         *
         * @returns An array of settled promises from all the handlers that were listening on the receiver.
         */
        Sender.prototype._send = function (eventType, data, timeout) {
            if (timeout === void 0) { timeout = 50 /* ACK */; }
            return __awaiter(this, void 0, void 0, function () {
                var messageChannel, completionTimer, handler;
                var _this = this;
                return __generator(this, function (_a) {
                    messageChannel = typeof MessageChannel !== 'undefined' ? new MessageChannel() : null;
                    if (!messageChannel) {
                        throw new Error("connection_unavailable" /* CONNECTION_UNAVAILABLE */);
                    }
                    return [2 /*return*/, new Promise(function (resolve, reject) {
                            var eventId = generateEventId();
                            messageChannel.port1.start();
                            var ackTimer = setTimeout(function () {
                                reject(new Error("unsupported_event" /* UNSUPPORTED_EVENT */));
                            }, timeout);
                            handler = {
                                messageChannel: messageChannel,
                                onMessage: function (event) {
                                    var messageEvent = event;
                                    if (messageEvent.data.eventId !== eventId) {
                                        return;
                                    }
                                    switch (messageEvent.data.status) {
                                        case "ack" /* ACK */:
                                            // The receiver should ACK first.
                                            clearTimeout(ackTimer);
                                            completionTimer = setTimeout(function () {
                                                reject(new Error("timeout" /* TIMEOUT */));
                                            }, 3000 /* COMPLETION */);
                                            break;
                                        case "done" /* DONE */:
                                            // Once the receiver's handlers are finished we will get the results.
                                            clearTimeout(completionTimer);
                                            resolve(messageEvent.data.response);
                                            break;
                                        default:
                                            clearTimeout(ackTimer);
                                            clearTimeout(completionTimer);
                                            reject(new Error("invalid_response" /* INVALID_RESPONSE */));
                                            break;
                                    }
                                }
                            };
                            _this.handlers.add(handler);
                            messageChannel.port1.addEventListener('message', handler.onMessage);
                            _this.target.postMessage({
                                eventType: eventType,
                                eventId: eventId,
                                data: data
                            }, [messageChannel.port2]);
                        }).finally(function () {
                            if (handler) {
                                _this.removeMessageHandler(handler);
                            }
                        })];
                });
            });
        };
        return Sender;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Lazy accessor for window, since the compat layer won't tree shake this out,
     * we need to make sure not to mess with window unless we have to
     */
    function _window() {
        return window;
    }
    function _setWindowLocation(url) {
        _window().location.href = url;
    }

    /**
     * @license
     * Copyright 2020 Google LLC.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _isWorker() {
        return (typeof _window()['WorkerGlobalScope'] !== 'undefined' &&
            typeof _window()['importScripts'] === 'function');
    }
    function _getActiveServiceWorker() {
        return __awaiter(this, void 0, void 0, function () {
            var registration, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker)) {
                            return [2 /*return*/, null];
                        }
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, navigator.serviceWorker.ready];
                    case 2:
                        registration = _b.sent();
                        return [2 /*return*/, registration.active];
                    case 3:
                        _a = _b.sent();
                        return [2 /*return*/, null];
                    case 4: return [2 /*return*/];
                }
            });
        });
    }
    function _getServiceWorkerController() {
        var _a;
        return ((_a = navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker) === null || _a === void 0 ? void 0 : _a.controller) || null;
    }
    function _getWorkerGlobalScope() {
        return _isWorker() ? self : null;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DB_NAME = 'firebaseLocalStorageDb';
    var DB_VERSION = 1;
    var DB_OBJECTSTORE_NAME = 'firebaseLocalStorage';
    var DB_DATA_KEYPATH = 'fbase_key';
    /**
     * Promise wrapper for IDBRequest
     *
     * Unfortunately we can't cleanly extend Promise<T> since promises are not callable in ES6
     *
     */
    var DBPromise = /** @class */ (function () {
        function DBPromise(request) {
            this.request = request;
        }
        DBPromise.prototype.toPromise = function () {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.request.addEventListener('success', function () {
                    resolve(_this.request.result);
                });
                _this.request.addEventListener('error', function () {
                    reject(_this.request.error);
                });
            });
        };
        return DBPromise;
    }());
    function getObjectStore(db, isReadWrite) {
        return db
            .transaction([DB_OBJECTSTORE_NAME], isReadWrite ? 'readwrite' : 'readonly')
            .objectStore(DB_OBJECTSTORE_NAME);
    }
    function _deleteDatabase() {
        var request = indexedDB.deleteDatabase(DB_NAME);
        return new DBPromise(request).toPromise();
    }
    function _openDatabase() {
        var _this = this;
        var request = indexedDB.open(DB_NAME, DB_VERSION);
        return new Promise(function (resolve, reject) {
            request.addEventListener('error', function () {
                reject(request.error);
            });
            request.addEventListener('upgradeneeded', function () {
                var db = request.result;
                try {
                    db.createObjectStore(DB_OBJECTSTORE_NAME, { keyPath: DB_DATA_KEYPATH });
                }
                catch (e) {
                    reject(e);
                }
            });
            request.addEventListener('success', function () { return __awaiter(_this, void 0, void 0, function () {
                var db;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            db = request.result;
                            if (!!db.objectStoreNames.contains(DB_OBJECTSTORE_NAME)) return [3 /*break*/, 2];
                            return [4 /*yield*/, _deleteDatabase()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/, _openDatabase()];
                        case 2:
                            resolve(db);
                            _a.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            }); });
        });
    }
    function _putObject(db, key, value) {
        return __awaiter(this, void 0, void 0, function () {
            var getRequest, data, request, request;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        getRequest = getObjectStore(db, false).get(key);
                        return [4 /*yield*/, new DBPromise(getRequest).toPromise()];
                    case 1:
                        data = _b.sent();
                        if (data) {
                            // Force an index signature on the user object
                            data.value = value;
                            request = getObjectStore(db, true).put(data);
                            return [2 /*return*/, new DBPromise(request).toPromise()];
                        }
                        else {
                            request = getObjectStore(db, true).add((_a = {},
                                _a[DB_DATA_KEYPATH] = key,
                                _a.value = value,
                                _a));
                            return [2 /*return*/, new DBPromise(request).toPromise()];
                        }
                }
            });
        });
    }
    function getObject(db, key) {
        return __awaiter(this, void 0, void 0, function () {
            var request, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        request = getObjectStore(db, false).get(key);
                        return [4 /*yield*/, new DBPromise(request).toPromise()];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data === undefined ? null : data.value];
                }
            });
        });
    }
    function deleteObject(db, key) {
        var request = getObjectStore(db, true).delete(key);
        return new DBPromise(request).toPromise();
    }
    var _POLLING_INTERVAL_MS$1 = 800;
    var _TRANSACTION_RETRY_COUNT = 3;
    var IndexedDBLocalPersistence = /** @class */ (function () {
        function IndexedDBLocalPersistence() {
            this.type = "LOCAL" /* LOCAL */;
            this.listeners = {};
            this.localCache = {};
            // setTimeout return value is platform specific
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            this.pollTimer = null;
            this.pendingWrites = 0;
            this.receiver = null;
            this.sender = null;
            this.serviceWorkerReceiverAvailable = false;
            this.activeServiceWorker = null;
            // Fire & forget the service worker registration as it may never resolve
            this._workerInitializationPromise = this.initializeServiceWorkerMessaging().then(function () { }, function () { });
        }
        IndexedDBLocalPersistence.prototype._openDb = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (this.db) {
                                return [2 /*return*/, this.db];
                            }
                            _a = this;
                            return [4 /*yield*/, _openDatabase()];
                        case 1:
                            _a.db = _b.sent();
                            return [2 /*return*/, this.db];
                    }
                });
            });
        };
        IndexedDBLocalPersistence.prototype._withRetries = function (op) {
            return __awaiter(this, void 0, void 0, function () {
                var numAttempts, db, e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            numAttempts = 0;
                            _a.label = 1;
                        case 1:
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 5, , 6]);
                            return [4 /*yield*/, this._openDb()];
                        case 3:
                            db = _a.sent();
                            return [4 /*yield*/, op(db)];
                        case 4: return [2 /*return*/, _a.sent()];
                        case 5:
                            e_1 = _a.sent();
                            if (numAttempts++ > _TRANSACTION_RETRY_COUNT) {
                                throw e_1;
                            }
                            if (this.db) {
                                this.db.close();
                                this.db = undefined;
                            }
                            return [3 /*break*/, 6];
                        case 6: return [3 /*break*/, 1];
                        case 7: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * IndexedDB events do not propagate from the main window to the worker context.  We rely on a
         * postMessage interface to send these events to the worker ourselves.
         */
        IndexedDBLocalPersistence.prototype.initializeServiceWorkerMessaging = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, _isWorker() ? this.initializeReceiver() : this.initializeSender()];
                });
            });
        };
        /**
         * As the worker we should listen to events from the main window.
         */
        IndexedDBLocalPersistence.prototype.initializeReceiver = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    this.receiver = Receiver._getInstance(_getWorkerGlobalScope());
                    // Refresh from persistence if we receive a KeyChanged message.
                    this.receiver._subscribe("keyChanged" /* KEY_CHANGED */, function (_origin, data) { return __awaiter(_this, void 0, void 0, function () {
                        var keys;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this._poll()];
                                case 1:
                                    keys = _a.sent();
                                    return [2 /*return*/, {
                                            keyProcessed: keys.includes(data.key)
                                        }];
                            }
                        });
                    }); });
                    // Let the sender know that we are listening so they give us more timeout.
                    this.receiver._subscribe("ping" /* PING */, function (_origin, _data) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            return [2 /*return*/, ["keyChanged" /* KEY_CHANGED */]];
                        });
                    }); });
                    return [2 /*return*/];
                });
            });
        };
        /**
         * As the main window, we should let the worker know when keys change (set and remove).
         *
         * @remarks
         * {@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/ready | ServiceWorkerContainer.ready}
         * may not resolve.
         */
        IndexedDBLocalPersistence.prototype.initializeSender = function () {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function () {
                var _c, results;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            // Check to see if there's an active service worker.
                            _c = this;
                            return [4 /*yield*/, _getActiveServiceWorker()];
                        case 1:
                            // Check to see if there's an active service worker.
                            _c.activeServiceWorker = _d.sent();
                            if (!this.activeServiceWorker) {
                                return [2 /*return*/];
                            }
                            this.sender = new Sender(this.activeServiceWorker);
                            return [4 /*yield*/, this.sender._send("ping" /* PING */, {}, 800 /* LONG_ACK */)];
                        case 2:
                            results = _d.sent();
                            if (!results) {
                                return [2 /*return*/];
                            }
                            if (((_a = results[0]) === null || _a === void 0 ? void 0 : _a.fulfilled) && ((_b = results[0]) === null || _b === void 0 ? void 0 : _b.value.includes("keyChanged" /* KEY_CHANGED */))) {
                                this.serviceWorkerReceiverAvailable = true;
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Let the worker know about a changed key, the exact key doesn't technically matter since the
         * worker will just trigger a full sync anyway.
         *
         * @remarks
         * For now, we only support one service worker per page.
         *
         * @param key - Storage key which changed.
         */
        IndexedDBLocalPersistence.prototype.notifyServiceWorker = function (key) {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!this.sender ||
                                !this.activeServiceWorker ||
                                _getServiceWorkerController() !== this.activeServiceWorker) {
                                return [2 /*return*/];
                            }
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.sender._send("keyChanged" /* KEY_CHANGED */, { key: key }, 
                                // Use long timeout if receiver has previously responded to a ping from us.
                                this.serviceWorkerReceiverAvailable
                                    ? 800 /* LONG_ACK */
                                    : 50 /* ACK */)];
                        case 2:
                            _b.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        IndexedDBLocalPersistence.prototype._isAvailable = function () {
            return __awaiter(this, void 0, void 0, function () {
                var db, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _b.trys.push([0, 4, , 5]);
                            if (!indexedDB) {
                                return [2 /*return*/, false];
                            }
                            return [4 /*yield*/, _openDatabase()];
                        case 1:
                            db = _b.sent();
                            return [4 /*yield*/, _putObject(db, STORAGE_AVAILABLE_KEY, '1')];
                        case 2:
                            _b.sent();
                            return [4 /*yield*/, deleteObject(db, STORAGE_AVAILABLE_KEY)];
                        case 3:
                            _b.sent();
                            return [2 /*return*/, true];
                        case 4:
                            _a = _b.sent();
                            return [3 /*break*/, 5];
                        case 5: return [2 /*return*/, false];
                    }
                });
            });
        };
        IndexedDBLocalPersistence.prototype._withPendingWrite = function (write) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.pendingWrites++;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, , 3, 4]);
                            return [4 /*yield*/, write()];
                        case 2:
                            _a.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            this.pendingWrites--;
                            return [7 /*endfinally*/];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        IndexedDBLocalPersistence.prototype._set = function (key, value) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    return [2 /*return*/, this._withPendingWrite(function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, this._withRetries(function (db) { return _putObject(db, key, value); })];
                                    case 1:
                                        _a.sent();
                                        this.localCache[key] = value;
                                        return [2 /*return*/, this.notifyServiceWorker(key)];
                                }
                            });
                        }); })];
                });
            });
        };
        IndexedDBLocalPersistence.prototype._get = function (key) {
            return __awaiter(this, void 0, void 0, function () {
                var obj;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this._withRetries(function (db) {
                                return getObject(db, key);
                            })];
                        case 1:
                            obj = (_a.sent());
                            this.localCache[key] = obj;
                            return [2 /*return*/, obj];
                    }
                });
            });
        };
        IndexedDBLocalPersistence.prototype._remove = function (key) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    return [2 /*return*/, this._withPendingWrite(function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, this._withRetries(function (db) { return deleteObject(db, key); })];
                                    case 1:
                                        _a.sent();
                                        delete this.localCache[key];
                                        return [2 /*return*/, this.notifyServiceWorker(key)];
                                }
                            });
                        }); })];
                });
            });
        };
        IndexedDBLocalPersistence.prototype._poll = function () {
            return __awaiter(this, void 0, void 0, function () {
                var result, keys, _i, result_1, _a, key, value;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this._withRetries(function (db) {
                                var getAllRequest = getObjectStore(db, false).getAll();
                                return new DBPromise(getAllRequest).toPromise();
                            })];
                        case 1:
                            result = _b.sent();
                            if (!result) {
                                return [2 /*return*/, []];
                            }
                            // If we have pending writes in progress abort, we'll get picked up on the next poll
                            if (this.pendingWrites !== 0) {
                                return [2 /*return*/, []];
                            }
                            keys = [];
                            for (_i = 0, result_1 = result; _i < result_1.length; _i++) {
                                _a = result_1[_i], key = _a.fbase_key, value = _a.value;
                                if (JSON.stringify(this.localCache[key]) !== JSON.stringify(value)) {
                                    this.notifyListeners(key, value);
                                    keys.push(key);
                                }
                            }
                            return [2 /*return*/, keys];
                    }
                });
            });
        };
        IndexedDBLocalPersistence.prototype.notifyListeners = function (key, newValue) {
            if (!this.listeners[key]) {
                return;
            }
            this.localCache[key] = newValue;
            for (var _i = 0, _a = Array.from(this.listeners[key]); _i < _a.length; _i++) {
                var listener = _a[_i];
                listener(newValue);
            }
        };
        IndexedDBLocalPersistence.prototype.startPolling = function () {
            var _this = this;
            this.stopPolling();
            this.pollTimer = setInterval(function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                return [2 /*return*/, this._poll()];
            }); }); }, _POLLING_INTERVAL_MS$1);
        };
        IndexedDBLocalPersistence.prototype.stopPolling = function () {
            if (this.pollTimer) {
                clearInterval(this.pollTimer);
                this.pollTimer = null;
            }
        };
        IndexedDBLocalPersistence.prototype._addListener = function (key, listener) {
            if (Object.keys(this.listeners).length === 0) {
                this.startPolling();
            }
            this.listeners[key] = this.listeners[key] || new Set();
            this.listeners[key].add(listener);
        };
        IndexedDBLocalPersistence.prototype._removeListener = function (key, listener) {
            if (this.listeners[key]) {
                this.listeners[key].delete(listener);
                if (this.listeners[key].size === 0) {
                    delete this.listeners[key];
                    delete this.localCache[key];
                }
            }
            if (Object.keys(this.listeners).length === 0) {
                this.stopPolling();
            }
        };
        IndexedDBLocalPersistence.type = 'LOCAL';
        return IndexedDBLocalPersistence;
    }());
    /**
     * An implementation of {@link @firebase/auth-types#Persistence} of type 'LOCAL' using `indexedDB`
     * for the underlying storage.
     *
     * @public
     */
    var indexedDBLocalPersistence = IndexedDBLocalPersistence;

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // The amount of time to store the UIDs of seen events; this is
    // set to 10 min by default
    var EVENT_DUPLICATION_CACHE_DURATION_MS = 10 * 60 * 1000;
    var AuthEventManager = /** @class */ (function () {
        function AuthEventManager(auth) {
            this.auth = auth;
            this.cachedEventUids = new Set();
            this.consumers = new Set();
            this.queuedRedirectEvent = null;
            this.hasHandledPotentialRedirect = false;
            this.lastProcessedEventTime = Date.now();
        }
        AuthEventManager.prototype.registerConsumer = function (authEventConsumer) {
            this.consumers.add(authEventConsumer);
            if (this.queuedRedirectEvent &&
                this.isEventForConsumer(this.queuedRedirectEvent, authEventConsumer)) {
                this.sendToConsumer(this.queuedRedirectEvent, authEventConsumer);
                this.saveEventToCache(this.queuedRedirectEvent);
                this.queuedRedirectEvent = null;
            }
        };
        AuthEventManager.prototype.unregisterConsumer = function (authEventConsumer) {
            this.consumers.delete(authEventConsumer);
        };
        AuthEventManager.prototype.onEvent = function (event) {
            var _this = this;
            // Check if the event has already been handled
            if (this.hasEventBeenHandled(event)) {
                return false;
            }
            var handled = false;
            this.consumers.forEach(function (consumer) {
                if (_this.isEventForConsumer(event, consumer)) {
                    handled = true;
                    _this.sendToConsumer(event, consumer);
                    _this.saveEventToCache(event);
                }
            });
            if (this.hasHandledPotentialRedirect || !isRedirectEvent(event)) {
                // If we've already seen a redirect before, or this is a popup event,
                // bail now
                return handled;
            }
            this.hasHandledPotentialRedirect = true;
            // If the redirect wasn't handled, hang on to it
            if (!handled) {
                this.queuedRedirectEvent = event;
                handled = true;
            }
            return handled;
        };
        AuthEventManager.prototype.sendToConsumer = function (event, consumer) {
            var _a;
            if (event.error && !isNullRedirectEvent(event)) {
                var code = ((_a = event.error.code) === null || _a === void 0 ? void 0 : _a.split('auth/')[1]) ||
                    "internal-error" /* INTERNAL_ERROR */;
                consumer.onError(_createError(this.auth, code));
            }
            else {
                consumer.onAuthEvent(event);
            }
        };
        AuthEventManager.prototype.isEventForConsumer = function (event, consumer) {
            var eventIdMatches = consumer.eventId === null ||
                (!!event.eventId && event.eventId === consumer.eventId);
            return consumer.filter.includes(event.type) && eventIdMatches;
        };
        AuthEventManager.prototype.hasEventBeenHandled = function (event) {
            if (Date.now() - this.lastProcessedEventTime >=
                EVENT_DUPLICATION_CACHE_DURATION_MS) {
                this.cachedEventUids.clear();
            }
            return this.cachedEventUids.has(eventUid(event));
        };
        AuthEventManager.prototype.saveEventToCache = function (event) {
            this.cachedEventUids.add(eventUid(event));
            this.lastProcessedEventTime = Date.now();
        };
        return AuthEventManager;
    }());
    function eventUid(e) {
        return [e.type, e.eventId, e.sessionId, e.tenantId].filter(function (v) { return v; }).join('-');
    }
    function isNullRedirectEvent(_a) {
        var type = _a.type, error = _a.error;
        return (type === "unknown" /* UNKNOWN */ &&
            (error === null || error === void 0 ? void 0 : error.code) === "auth/" + "no-auth-event" /* NO_AUTH_EVENT */);
    }
    function isRedirectEvent(event) {
        switch (event.type) {
            case "signInViaRedirect" /* SIGN_IN_VIA_REDIRECT */:
            case "linkViaRedirect" /* LINK_VIA_REDIRECT */:
            case "reauthViaRedirect" /* REAUTH_VIA_REDIRECT */:
                return true;
            case "unknown" /* UNKNOWN */:
                return isNullRedirectEvent(event);
            default:
                return false;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _generateEventId(prefix) {
        return "" + (prefix ? prefix : '') + Math.floor(Math.random() * 1000000000);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _getProjectConfig(auth) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _performApiRequest(auth, "GET" /* GET */, "/v1/projects" /* GET_PROJECT_CONFIG */, {})];
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var IP_ADDRESS_REGEX = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;
    var HTTP_REGEX = /^https?/;
    function _validateOrigin(auth) {
        return __awaiter(this, void 0, void 0, function () {
            var authorizedDomains, _i, authorizedDomains_1, domain;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // Skip origin validation if we are in an emulated environment
                        if (auth.config.emulator) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, _getProjectConfig(auth)];
                    case 1:
                        authorizedDomains = (_a.sent()).authorizedDomains;
                        for (_i = 0, authorizedDomains_1 = authorizedDomains; _i < authorizedDomains_1.length; _i++) {
                            domain = authorizedDomains_1[_i];
                            try {
                                if (matchDomain(domain)) {
                                    return [2 /*return*/];
                                }
                            }
                            catch (_b) {
                                // Do nothing if there's a URL error; just continue searching
                            }
                        }
                        // In the old SDK, this error also provides helpful messages.
                        _fail(auth, "unauthorized-domain" /* INVALID_ORIGIN */);
                        return [2 /*return*/];
                }
            });
        });
    }
    function matchDomain(expected) {
        var currentUrl = _getCurrentUrl();
        var _a = new URL(currentUrl), protocol = _a.protocol, hostname = _a.hostname;
        if (expected.startsWith('chrome-extension://')) {
            var ceUrl = new URL(expected);
            if (ceUrl.hostname === '' && hostname === '') {
                // For some reason we're not parsing chrome URLs properly
                return (protocol === 'chrome-extension:' &&
                    expected.replace('chrome-extension://', '') ===
                        currentUrl.replace('chrome-extension://', ''));
            }
            return protocol === 'chrome-extension:' && ceUrl.hostname === hostname;
        }
        if (!HTTP_REGEX.test(protocol)) {
            return false;
        }
        if (IP_ADDRESS_REGEX.test(expected)) {
            // The domain has to be exactly equal to the pattern, as an IP domain will
            // only contain the IP, no extra character.
            return hostname === expected;
        }
        // Dots in pattern should be escaped.
        var escapedDomainPattern = expected.replace(/\./g, '\\.');
        // Non ip address domains.
        // domain.com = *.domain.com OR domain.com
        var re = new RegExp('^(.+\\.' + escapedDomainPattern + '|' + escapedDomainPattern + ')$', 'i');
        return re.test(hostname);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function getScriptParentElement() {
        var _a, _b;
        return (_b = (_a = document.getElementsByTagName('head')) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : document;
    }
    function _loadJS(url) {
        // TODO: consider adding timeout support & cancellation
        return new Promise(function (resolve, reject) {
            var el = document.createElement('script');
            el.setAttribute('src', url);
            el.onload = resolve;
            el.onerror = reject;
            el.type = 'text/javascript';
            el.charset = 'UTF-8';
            getScriptParentElement().appendChild(el);
        });
    }
    function _generateCallbackName(prefix) {
        return "__" + prefix + Math.floor(Math.random() * 1000000);
    }

    /**
     * @license
     * Copyright 2020 Google LLC.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var NETWORK_TIMEOUT = new Delay(30000, 60000);
    /**
     * Reset unlaoded GApi modules. If gapi.load fails due to a network error,
     * it will stop working after a retrial. This is a hack to fix this issue.
     */
    function resetUnloadedGapiModules() {
        // Clear last failed gapi.load state to force next gapi.load to first
        // load the failed gapi.iframes module.
        // Get gapix.beacon context.
        var beacon = _window().___jsl;
        // Get current hint.
        if (beacon === null || beacon === void 0 ? void 0 : beacon.H) {
            // Get gapi hint.
            for (var _i = 0, _a = Object.keys(beacon.H); _i < _a.length; _i++) {
                var hint = _a[_i];
                // Requested modules.
                beacon.H[hint].r = beacon.H[hint].r || [];
                // Loaded modules.
                beacon.H[hint].L = beacon.H[hint].L || [];
                // Set requested modules to a copy of the loaded modules.
                beacon.H[hint].r = __spreadArrays(beacon.H[hint].L);
                // Clear pending callbacks.
                if (beacon.CP) {
                    for (var i = 0; i < beacon.CP.length; i++) {
                        // Remove all failed pending callbacks.
                        beacon.CP[i] = null;
                    }
                }
            }
        }
    }
    function loadGapi(auth) {
        return new Promise(function (resolve, reject) {
            var _a, _b, _c;
            // Function to run when gapi.load is ready.
            function loadGapiIframe() {
                // The developer may have tried to previously run gapi.load and failed.
                // Run this to fix that.
                resetUnloadedGapiModules();
                gapi.load('gapi.iframes', {
                    callback: function () {
                        resolve(gapi.iframes.getContext());
                    },
                    ontimeout: function () {
                        // The above reset may be sufficient, but having this reset after
                        // failure ensures that if the developer calls gapi.load after the
                        // connection is re-established and before another attempt to embed
                        // the iframe, it would work and would not be broken because of our
                        // failed attempt.
                        // Timeout when gapi.iframes.Iframe not loaded.
                        resetUnloadedGapiModules();
                        reject(_createError(auth, "network-request-failed" /* NETWORK_REQUEST_FAILED */));
                    },
                    timeout: NETWORK_TIMEOUT.get()
                });
            }
            if ((_b = (_a = _window().gapi) === null || _a === void 0 ? void 0 : _a.iframes) === null || _b === void 0 ? void 0 : _b.Iframe) {
                // If gapi.iframes.Iframe available, resolve.
                resolve(gapi.iframes.getContext());
            }
            else if (!!((_c = _window().gapi) === null || _c === void 0 ? void 0 : _c.load)) {
                // Gapi loader ready, load gapi.iframes.
                loadGapiIframe();
            }
            else {
                // Create a new iframe callback when this is called so as not to overwrite
                // any previous defined callback. This happens if this method is called
                // multiple times in parallel and could result in the later callback
                // overwriting the previous one. This would end up with a iframe
                // timeout.
                var cbName = _generateCallbackName('iframefcb');
                // GApi loader not available, dynamically load platform.js.
                _window()[cbName] = function () {
                    // GApi loader should be ready.
                    if (!!gapi.load) {
                        loadGapiIframe();
                    }
                    else {
                        // Gapi loader failed, throw error.
                        reject(_createError(auth, "network-request-failed" /* NETWORK_REQUEST_FAILED */));
                    }
                };
                // Load GApi loader.
                return _loadJS("https://apis.google.com/js/api.js?onload=" + cbName);
            }
        }).catch(function (error) {
            // Reset cached promise to allow for retrial.
            cachedGApiLoader = null;
            throw error;
        });
    }
    var cachedGApiLoader = null;
    function _loadGapi(auth) {
        cachedGApiLoader = cachedGApiLoader || loadGapi(auth);
        return cachedGApiLoader;
    }

    /**
     * @license
     * Copyright 2020 Google LLC.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var PING_TIMEOUT = new Delay(5000, 15000);
    var IFRAME_PATH = '__/auth/iframe';
    var EMULATED_IFRAME_PATH = 'emulator/auth/iframe';
    var IFRAME_ATTRIBUTES = {
        style: {
            position: 'absolute',
            top: '-100px',
            width: '1px',
            height: '1px'
        }
    };
    function getIframeUrl(auth) {
        var config = auth.config;
        _assert(config.authDomain, auth, "auth-domain-config-required" /* MISSING_AUTH_DOMAIN */);
        var url = config.emulator
            ? _emulatorUrl(config, EMULATED_IFRAME_PATH)
            : "https://" + auth.config.authDomain + "/" + IFRAME_PATH;
        var params = {
            apiKey: config.apiKey,
            appName: auth.name,
            v: app.SDK_VERSION
        };
        // Can pass 'eid' as one of 'p' (production), 's' (staging), or 't' (test)
        // TODO: do we care about frameworks? pass them as fw=
        return url + "?" + querystring(params).slice(1);
    }
    function _openIframe(auth) {
        return __awaiter(this, void 0, void 0, function () {
            var context, gapi;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, _loadGapi(auth)];
                    case 1:
                        context = _a.sent();
                        gapi = _window().gapi;
                        _assert(gapi, auth, "internal-error" /* INTERNAL_ERROR */);
                        return [2 /*return*/, context.open({
                                where: document.body,
                                url: getIframeUrl(auth),
                                messageHandlersFilter: gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER,
                                attributes: IFRAME_ATTRIBUTES,
                                dontclear: true
                            }, function (iframe) {
                                return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                                    // Clear timer and resolve pending iframe ready promise.
                                    function clearTimerAndResolve() {
                                        _window().clearTimeout(networkErrorTimer);
                                        resolve(iframe);
                                    }
                                    var networkError, networkErrorTimer;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0: return [4 /*yield*/, iframe.restyle({
                                                    // Prevent iframe from closing on mouse out.
                                                    setHideOnLeave: false
                                                })];
                                            case 1:
                                                _a.sent();
                                                networkError = _createError(auth, "network-request-failed" /* NETWORK_REQUEST_FAILED */);
                                                networkErrorTimer = _window().setTimeout(function () {
                                                    reject(networkError);
                                                }, PING_TIMEOUT.get());
                                                // This returns an IThenable. However the reject part does not call
                                                // when the iframe is not loaded.
                                                iframe.ping(clearTimerAndResolve).then(clearTimerAndResolve, function () {
                                                    reject(networkError);
                                                });
                                                return [2 /*return*/];
                                        }
                                    });
                                }); });
                            })];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var BrowserSessionPersistence = /** @class */ (function (_super) {
        __extends(BrowserSessionPersistence, _super);
        function BrowserSessionPersistence() {
            return _super.call(this, sessionStorage, "SESSION" /* SESSION */) || this;
        }
        BrowserSessionPersistence.prototype._addListener = function (_key, _listener) {
            // Listeners are not supported for session storage since it cannot be shared across windows
            return;
        };
        BrowserSessionPersistence.prototype._removeListener = function (_key, _listener) {
            // Listeners are not supported for session storage since it cannot be shared across windows
            return;
        };
        BrowserSessionPersistence.type = 'SESSION';
        return BrowserSessionPersistence;
    }(BrowserPersistenceClass));
    /**
     * An implementation of {@link @firebase/auth-types#Persistence} of 'SESSION' using `sessionStorage`
     * for the underlying storage.
     *
     * @public
     */
    var browserSessionPersistence = BrowserSessionPersistence;

    /**
     * @license
     * Copyright 2020 Google LLC.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var BASE_POPUP_OPTIONS = {
        location: 'yes',
        resizable: 'yes',
        statusbar: 'yes',
        toolbar: 'no'
    };
    var DEFAULT_WIDTH = 500;
    var DEFAULT_HEIGHT = 600;
    var TARGET_BLANK = '_blank';
    var FIREFOX_EMPTY_URL = 'http://localhost';
    var AuthPopup = /** @class */ (function () {
        function AuthPopup(window) {
            this.window = window;
            this.associatedEvent = null;
        }
        AuthPopup.prototype.close = function () {
            if (this.window) {
                try {
                    this.window.close();
                }
                catch (e) { }
            }
        };
        return AuthPopup;
    }());
    function _open(auth, url, name, width, height) {
        if (width === void 0) { width = DEFAULT_WIDTH; }
        if (height === void 0) { height = DEFAULT_HEIGHT; }
        var top = Math.min((window.screen.availHeight - height) / 2, 0).toString();
        var left = Math.min((window.screen.availWidth - width) / 2, 0).toString();
        var target = '';
        var options = __assign(__assign({}, BASE_POPUP_OPTIONS), { width: width.toString(), height: height.toString(), top: top,
            left: left });
        // Chrome iOS 7 and 8 is returning an undefined popup win when target is
        // specified, even though the popup is not necessarily blocked.
        var ua = getUA().toLowerCase();
        if (name) {
            target = _isChromeIOS(ua) ? TARGET_BLANK : name;
        }
        if (_isFirefox(ua)) {
            // Firefox complains when invalid URLs are popped out. Hacky way to bypass.
            url = url || FIREFOX_EMPTY_URL;
            // Firefox disables by default scrolling on popup windows, which can create
            // issues when the user has many Google accounts, for instance.
            options.scrollbars = 'yes';
        }
        var optionsString = Object.entries(options).reduce(function (accum, _a) {
            var key = _a[0], value = _a[1];
            return "" + accum + key + "=" + value + ",";
        }, '');
        if (_isIOSStandalone(ua) && target !== '_self') {
            openAsNewWindowIOS(url || '', target);
            return new AuthPopup(null);
        }
        // about:blank getting sanitized causing browsers like IE/Edge to display
        // brief error message before redirecting to handler.
        var newWin = window.open(url || '', target, optionsString);
        _assert(newWin, auth, "popup-blocked" /* POPUP_BLOCKED */);
        // Flaky on IE edge, encapsulate with a try and catch.
        try {
            newWin.focus();
        }
        catch (e) { }
        return new AuthPopup(newWin);
    }
    function openAsNewWindowIOS(url, target) {
        var el = document.createElement('a');
        el.href = url;
        el.target = target;
        var click = document.createEvent('MouseEvent');
        click.initMouseEvent('click', true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 1, null);
        el.dispatchEvent(click);
    }

    /**
     * @license
     * Copyright 2021 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Chooses a popup/redirect resolver to use. This prefers the override (which
     * is directly passed in), and falls back to the property set on the auth
     * object. If neither are available, this function errors w/ an argument error.
     */
    function _withDefaultResolver(auth, resolverOverride) {
        if (resolverOverride) {
            return _getInstance(resolverOverride);
        }
        _assert(auth._popupRedirectResolver, auth, "argument-error" /* ARGUMENT_ERROR */);
        return auth._popupRedirectResolver;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var IdpCredential = /** @class */ (function (_super) {
        __extends(IdpCredential, _super);
        function IdpCredential(params) {
            var _this = _super.call(this, "custom" /* CUSTOM */, "custom" /* CUSTOM */) || this;
            _this.params = params;
            return _this;
        }
        IdpCredential.prototype._getIdTokenResponse = function (auth) {
            return signInWithIdp(auth, this._buildIdpRequest());
        };
        IdpCredential.prototype._linkToIdToken = function (auth, idToken) {
            return signInWithIdp(auth, this._buildIdpRequest(idToken));
        };
        IdpCredential.prototype._getReauthenticationResolver = function (auth) {
            return signInWithIdp(auth, this._buildIdpRequest());
        };
        IdpCredential.prototype._buildIdpRequest = function (idToken) {
            var request = {
                requestUri: this.params.requestUri,
                sessionId: this.params.sessionId,
                postBody: this.params.postBody || null,
                tenantId: this.params.tenantId,
                pendingToken: this.params.pendingToken,
                returnSecureToken: true,
                returnIdpCredential: true
            };
            if (idToken) {
                request.idToken = idToken;
            }
            return request;
        };
        return IdpCredential;
    }(AuthCredential));
    function _signIn(params) {
        return _signInWithCredential(params.auth, new IdpCredential(params), params.bypassAuthState);
    }
    function _reauth(params) {
        var auth = params.auth, user = params.user;
        _assert(user, auth, "internal-error" /* INTERNAL_ERROR */);
        return _reauthenticate(user, new IdpCredential(params), params.bypassAuthState);
    }
    function _link$1(params) {
        return __awaiter(this, void 0, void 0, function () {
            var auth, user;
            return __generator(this, function (_a) {
                auth = params.auth, user = params.user;
                _assert(user, auth, "internal-error" /* INTERNAL_ERROR */);
                return [2 /*return*/, _link(user, new IdpCredential(params), params.bypassAuthState)];
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Popup event manager. Handles the popup's entire lifecycle; listens to auth
     * events
     */
    var AbstractPopupRedirectOperation = /** @class */ (function () {
        function AbstractPopupRedirectOperation(auth, filter, resolver, user, bypassAuthState) {
            if (bypassAuthState === void 0) { bypassAuthState = false; }
            this.auth = auth;
            this.resolver = resolver;
            this.user = user;
            this.bypassAuthState = bypassAuthState;
            this.pendingPromise = null;
            this.eventManager = null;
            this.filter = Array.isArray(filter) ? filter : [filter];
        }
        AbstractPopupRedirectOperation.prototype.execute = function () {
            var _this = this;
            return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                var _a, e_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.pendingPromise = { resolve: resolve, reject: reject };
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 4, , 5]);
                            _a = this;
                            return [4 /*yield*/, this.resolver._initialize(this.auth)];
                        case 2:
                            _a.eventManager = _b.sent();
                            return [4 /*yield*/, this.onExecution()];
                        case 3:
                            _b.sent();
                            this.eventManager.registerConsumer(this);
                            return [3 /*break*/, 5];
                        case 4:
                            e_1 = _b.sent();
                            this.reject(e_1);
                            return [3 /*break*/, 5];
                        case 5: return [2 /*return*/];
                    }
                });
            }); });
        };
        AbstractPopupRedirectOperation.prototype.onAuthEvent = function (event) {
            return __awaiter(this, void 0, void 0, function () {
                var urlResponse, sessionId, postBody, tenantId, error, type, params, _a, e_2;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            urlResponse = event.urlResponse, sessionId = event.sessionId, postBody = event.postBody, tenantId = event.tenantId, error = event.error, type = event.type;
                            if (error) {
                                this.reject(error);
                                return [2 /*return*/];
                            }
                            params = {
                                auth: this.auth,
                                requestUri: urlResponse,
                                sessionId: sessionId,
                                tenantId: tenantId || undefined,
                                postBody: postBody || undefined,
                                user: this.user,
                                bypassAuthState: this.bypassAuthState
                            };
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            _a = this.resolve;
                            return [4 /*yield*/, this.getIdpTask(type)(params)];
                        case 2:
                            _a.apply(this, [_b.sent()]);
                            return [3 /*break*/, 4];
                        case 3:
                            e_2 = _b.sent();
                            this.reject(e_2);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        AbstractPopupRedirectOperation.prototype.onError = function (error) {
            this.reject(error);
        };
        AbstractPopupRedirectOperation.prototype.getIdpTask = function (type) {
            switch (type) {
                case "signInViaPopup" /* SIGN_IN_VIA_POPUP */:
                case "signInViaRedirect" /* SIGN_IN_VIA_REDIRECT */:
                    return _signIn;
                case "linkViaPopup" /* LINK_VIA_POPUP */:
                case "linkViaRedirect" /* LINK_VIA_REDIRECT */:
                    return _link$1;
                case "reauthViaPopup" /* REAUTH_VIA_POPUP */:
                case "reauthViaRedirect" /* REAUTH_VIA_REDIRECT */:
                    return _reauth;
                default:
                    _fail(this.auth, "internal-error" /* INTERNAL_ERROR */);
            }
        };
        AbstractPopupRedirectOperation.prototype.resolve = function (cred) {
            debugAssert(this.pendingPromise, 'Pending promise was never set');
            this.pendingPromise.resolve(cred);
            this.unregisterAndCleanUp();
        };
        AbstractPopupRedirectOperation.prototype.reject = function (error) {
            debugAssert(this.pendingPromise, 'Pending promise was never set');
            this.pendingPromise.reject(error);
            this.unregisterAndCleanUp();
        };
        AbstractPopupRedirectOperation.prototype.unregisterAndCleanUp = function () {
            if (this.eventManager) {
                this.eventManager.unregisterConsumer(this);
            }
            this.pendingPromise = null;
            this.cleanUp();
        };
        return AbstractPopupRedirectOperation;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // We only get one redirect outcome for any one auth, so just store it
    // in here.
    var redirectOutcomeMap = new Map();
    var RedirectAction = /** @class */ (function (_super) {
        __extends(RedirectAction, _super);
        function RedirectAction(auth, resolver, bypassAuthState) {
            if (bypassAuthState === void 0) { bypassAuthState = false; }
            var _this = _super.call(this, auth, [
                "signInViaRedirect" /* SIGN_IN_VIA_REDIRECT */,
                "linkViaRedirect" /* LINK_VIA_REDIRECT */,
                "reauthViaRedirect" /* REAUTH_VIA_REDIRECT */,
                "unknown" /* UNKNOWN */
            ], resolver, undefined, bypassAuthState) || this;
            _this.eventId = null;
            return _this;
        }
        /**
         * Override the execute function; if we already have a redirect result, then
         * just return it.
         */
        RedirectAction.prototype.execute = function () {
            return __awaiter(this, void 0, void 0, function () {
                var readyOutcome, result_1, e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            readyOutcome = redirectOutcomeMap.get(this.auth._key());
                            if (!!readyOutcome) return [3 /*break*/, 5];
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, _super.prototype.execute.call(this)];
                        case 2:
                            result_1 = _a.sent();
                            readyOutcome = function () { return Promise.resolve(result_1); };
                            return [3 /*break*/, 4];
                        case 3:
                            e_1 = _a.sent();
                            readyOutcome = function () { return Promise.reject(e_1); };
                            return [3 /*break*/, 4];
                        case 4:
                            redirectOutcomeMap.set(this.auth._key(), readyOutcome);
                            _a.label = 5;
                        case 5: return [2 /*return*/, readyOutcome()];
                    }
                });
            });
        };
        RedirectAction.prototype.onAuthEvent = function (event) {
            return __awaiter(this, void 0, void 0, function () {
                var user;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (event.type === "signInViaRedirect" /* SIGN_IN_VIA_REDIRECT */) {
                                return [2 /*return*/, _super.prototype.onAuthEvent.call(this, event)];
                            }
                            else if (event.type === "unknown" /* UNKNOWN */) {
                                // This is a sentinel value indicating there's no pending redirect
                                this.resolve(null);
                                return [2 /*return*/];
                            }
                            if (!event.eventId) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.auth._redirectUserForId(event.eventId)];
                        case 1:
                            user = _a.sent();
                            if (user) {
                                this.user = user;
                                return [2 /*return*/, _super.prototype.onAuthEvent.call(this, event)];
                            }
                            else {
                                this.resolve(null);
                            }
                            _a.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            });
        };
        RedirectAction.prototype.onExecution = function () {
            return __awaiter(this, void 0, void 0, function () { return __generator(this, function (_a) {
                return [2 /*return*/];
            }); });
        };
        RedirectAction.prototype.cleanUp = function () { };
        return RedirectAction;
    }(AbstractPopupRedirectOperation));

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Authenticates a Firebase client using a full-page redirect flow.
     *
     * @remarks
     * To handle the results and errors for this operation, refer to {@link getRedirectResult}.
     *
     * @example
     * ```javascript
     * // Sign in using a redirect.
     * const provider = new FacebookAuthProvider();
     * // You can add additional scopes to the provider:
     * provider.addScope('user_birthday');
     * // Start a sign in process for an unauthenticated user.
     * await signInWithRedirect(auth, provider);
     * // This will trigger a full page redirect away from your app
     *
     * // After returning from the redirect when your app initializes you can obtain the result
     * const result = await getRedirectResult(auth);
     * if (result) {
     *   // This is the signed-in user
     *   const user = result.user;
     *   // This gives you a Facebook Access Token.
     *   const credential = provider.credentialFromResult(auth, result);
     *   const token = credential.accessToken;
     * }
     * // As this API can be used for sign-in, linking and reauthentication,
     * // check the operationType to determine what triggered this redirect
     * // operation.
     * const operationType = result.operationType;
     * ```
     *
     * @param auth - The Auth instance.
     * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
     * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
     * @param resolver - An instance of {@link @firebase/auth-types#PopupRedirectResolver}, optional
     * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
     *
     * @public
     */
    function signInWithRedirect(auth, provider, resolver) {
        return _signInWithRedirect(auth, provider, resolver);
    }
    function _signInWithRedirect(auth, provider, resolver) {
        return __awaiter(this, void 0, void 0, function () {
            var authInternal;
            return __generator(this, function (_a) {
                authInternal = _castAuth(auth);
                _assert(provider instanceof OAuthProvider, auth, "argument-error" /* ARGUMENT_ERROR */);
                return [2 /*return*/, _withDefaultResolver(authInternal, resolver)._openRedirect(authInternal, provider, "signInViaRedirect" /* SIGN_IN_VIA_REDIRECT */)];
            });
        });
    }
    /**
     * Reauthenticates the current user with the specified {@link OAuthProvider} using a full-page redirect flow.
     *
     * @example
     * ```javascript
     * // Sign in using a redirect.
     * const provider = new FacebookAuthProvider();
     * const result = await signInWithRedirect(auth, provider);
     * // This will trigger a full page redirect away from your app
     *
     * // After returning from the redirect when your app initializes you can obtain the result
     * const result = await getRedirectResult(auth);
     * // Link using a redirect.
     * await linkWithRedirect(result.user, provider);
     * // This will again trigger a full page redirect away from your app
     *
     * // After returning from the redirect when your app initializes you can obtain the result
     * const result = await getRedirectResult(auth);
     * ```
     *
     * @param user - The user.
     * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
     * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
     * @param resolver - An instance of {@link @firebase/auth-types#PopupRedirectResolver}, optional
     * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
     *
     * @public
     */
    function reauthenticateWithRedirect(user, provider, resolver) {
        return _reauthenticateWithRedirect(user, provider, resolver);
    }
    function _reauthenticateWithRedirect(user, provider, resolver) {
        return __awaiter(this, void 0, void 0, function () {
            var userInternal, resolverInternal, eventId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        userInternal = user;
                        _assert(provider instanceof OAuthProvider, userInternal.auth, "argument-error" /* ARGUMENT_ERROR */);
                        resolverInternal = _withDefaultResolver(userInternal.auth, resolver);
                        return [4 /*yield*/, prepareUserForRedirect(userInternal)];
                    case 1:
                        eventId = _a.sent();
                        return [2 /*return*/, resolverInternal._openRedirect(userInternal.auth, provider, "reauthViaRedirect" /* REAUTH_VIA_REDIRECT */, eventId)];
                }
            });
        });
    }
    /**
     * Links the {@link OAuthProvider} to the user account using a full-page redirect flow.
     *
     * @example
     * ```javascript
     * // Sign in using some other provider.
     * const result = await signInWithEmailAndPassword(auth, email, password);
     * // Link using a redirect.
     * const provider = new FacebookAuthProvider();
     * await linkWithRedirect(result.user, provider);
     * // This will trigger a full page redirect away from your app
     *
     * // After returning from the redirect when your app initializes you can obtain the result
     * const result = await getRedirectResult(auth);
     * ```
     *
     * @param user - The user.
     * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
     * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
     * @param resolver - An instance of {@link @firebase/auth-types#PopupRedirectResolver}, optional
     * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
     *
     *
     * @public
     */
    function linkWithRedirect(user, provider, resolver) {
        return _linkWithRedirect(user, provider, resolver);
    }
    function _linkWithRedirect(user, provider, resolver) {
        return __awaiter(this, void 0, void 0, function () {
            var userInternal, resolverInternal, eventId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        userInternal = user;
                        _assert(provider instanceof OAuthProvider, userInternal.auth, "argument-error" /* ARGUMENT_ERROR */);
                        resolverInternal = _withDefaultResolver(userInternal.auth, resolver);
                        return [4 /*yield*/, _assertLinkedStatus(false, userInternal, provider.providerId)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, prepareUserForRedirect(userInternal)];
                    case 2:
                        eventId = _a.sent();
                        return [2 /*return*/, resolverInternal._openRedirect(userInternal.auth, provider, "linkViaRedirect" /* LINK_VIA_REDIRECT */, eventId)];
                }
            });
        });
    }
    /**
     * Returns a {@link @firebase/auth-types#UserCredential} from the redirect-based sign-in flow.
     *
     * @remarks
     * If sign-in succeeded, returns the signed in user. If sign-in was unsuccessful, fails with an
     * error. If no redirect operation was called, returns a {@link @firebase/auth-types#UserCredential}
     * with a null `user`.
     *
     * @example
     * ```javascript
     * // Sign in using a redirect.
     * const provider = new FacebookAuthProvider();
     * // You can add additional scopes to the provider:
     * provider.addScope('user_birthday');
     * // Start a sign in process for an unauthenticated user.
     * await signInWithRedirect(auth, provider);
     * // This will trigger a full page redirect away from your app
     *
     * // After returning from the redirect when your app initializes you can obtain the result
     * const result = await getRedirectResult(auth);
     * if (result) {
     *   // This is the signed-in user
     *   const user = result.user;
     *   // This gives you a Facebook Access Token.
     *   const credential = provider.credentialFromResult(auth, result);
     *   const token = credential.accessToken;
     * }
     * // As this API can be used for sign-in, linking and reauthentication,
     * // check the operationType to determine what triggered this redirect
     * // operation.
     * const operationType = result.operationType;
     * ```
     *
     * @param auth - The Auth instance.
     * @param resolver - An instance of {@link @firebase/auth-types#PopupRedirectResolver}, optional
     * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
     *
     * @public
     */
    function getRedirectResult(auth, resolver) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, _castAuth(auth)._initializationPromise];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, _getRedirectResult(auth, resolver, false)];
                }
            });
        });
    }
    function _getRedirectResult(auth, resolverExtern, bypassAuthState) {
        if (bypassAuthState === void 0) { bypassAuthState = false; }
        return __awaiter(this, void 0, void 0, function () {
            var authInternal, resolver, action, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        authInternal = _castAuth(auth);
                        resolver = _withDefaultResolver(authInternal, resolverExtern);
                        action = new RedirectAction(authInternal, resolver, bypassAuthState);
                        return [4 /*yield*/, action.execute()];
                    case 1:
                        result = _a.sent();
                        if (!(result && !bypassAuthState)) return [3 /*break*/, 4];
                        delete result.user._redirectEventId;
                        return [4 /*yield*/, authInternal._persistUserIfCurrent(result.user)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, authInternal._setRedirectUser(null, resolverExtern)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2 /*return*/, result];
                }
            });
        });
    }
    function prepareUserForRedirect(user) {
        return __awaiter(this, void 0, void 0, function () {
            var eventId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        eventId = _generateEventId(user.uid + ":::");
                        user._redirectEventId = eventId;
                        return [4 /*yield*/, user.auth._setRedirectUser(user)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, user.auth._persistUserIfCurrent(user)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, eventId];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2021 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * URL for Authentication widget which will initiate the OAuth handshake
     *
     * @internal
     */
    var WIDGET_PATH = '__/auth/handler';
    /**
     * URL for emulated environment
     *
     * @internal
     */
    var EMULATOR_WIDGET_PATH = 'emulator/auth/handler';
    function _getRedirectUrl(auth, provider, authType, redirectUrl, eventId, additionalParams) {
        _assert(auth.config.authDomain, auth, "auth-domain-config-required" /* MISSING_AUTH_DOMAIN */);
        _assert(auth.config.apiKey, auth, "invalid-api-key" /* INVALID_API_KEY */);
        var params = {
            apiKey: auth.config.apiKey,
            appName: auth.name,
            authType: authType,
            redirectUrl: redirectUrl,
            v: app.SDK_VERSION,
            eventId: eventId
        };
        if (provider instanceof OAuthProvider) {
            provider.setDefaultLanguage(auth.languageCode);
            params.providerId = provider.providerId || '';
            if (!isEmpty(provider.getCustomParameters())) {
                params.customParameters = JSON.stringify(provider.getCustomParameters());
            }
            var scopes = provider.getScopes().filter(function (scope) { return scope !== ''; });
            if (scopes.length > 0) {
                params.scopes = scopes.join(',');
            }
            // TODO set additionalParams from the provider as well?
            for (var _i = 0, _a = Object.entries(additionalParams || {}); _i < _a.length; _i++) {
                var _b = _a[_i], key = _b[0], value = _b[1];
                params[key] = value;
            }
        }
        if (auth.tenantId) {
            params.tid = auth.tenantId;
        }
        for (var _c = 0, _d = Object.keys(params); _c < _d.length; _c++) {
            var key = _d[_c];
            if (params[key] === undefined) {
                delete params[key];
            }
        }
        // TODO: maybe set eid as endipointId
        // TODO: maybe set fw as Frameworks.join(",")
        var url = new URL(getHandlerBase(auth) + "?" + querystring(params).slice(1));
        return url.toString();
    }
    function getHandlerBase(_a) {
        var config = _a.config;
        if (!config.emulator) {
            return "https://" + config.authDomain + "/" + WIDGET_PATH;
        }
        return _emulatorUrl(config, EMULATOR_WIDGET_PATH);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * The special web storage event
     *
     */
    var WEB_STORAGE_SUPPORT_KEY = 'webStorageSupport';
    var BrowserPopupRedirectResolver = /** @class */ (function () {
        function BrowserPopupRedirectResolver() {
            this.eventManagers = {};
            this.iframes = {};
            this.originValidationPromises = {};
            this._redirectPersistence = browserSessionPersistence;
            this._completeRedirectFn = _getRedirectResult;
        }
        // Wrapping in async even though we don't await anywhere in order
        // to make sure errors are raised as promise rejections
        BrowserPopupRedirectResolver.prototype._openPopup = function (auth, provider, authType, eventId) {
            var _a;
            return __awaiter(this, void 0, void 0, function () {
                var url;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            debugAssert((_a = this.eventManagers[auth._key()]) === null || _a === void 0 ? void 0 : _a.manager, '_initialize() not called before _openPopup()');
                            return [4 /*yield*/, this.originValidation(auth)];
                        case 1:
                            _b.sent();
                            url = _getRedirectUrl(auth, provider, authType, _getCurrentUrl(), eventId);
                            return [2 /*return*/, _open(auth, url, _generateEventId())];
                    }
                });
            });
        };
        BrowserPopupRedirectResolver.prototype._openRedirect = function (auth, provider, authType, eventId) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.originValidation(auth)];
                        case 1:
                            _a.sent();
                            _setWindowLocation(_getRedirectUrl(auth, provider, authType, _getCurrentUrl(), eventId));
                            return [2 /*return*/, new Promise(function () { })];
                    }
                });
            });
        };
        BrowserPopupRedirectResolver.prototype._initialize = function (auth) {
            var key = auth._key();
            if (this.eventManagers[key]) {
                var _a = this.eventManagers[key], manager = _a.manager, promise_1 = _a.promise;
                if (manager) {
                    return Promise.resolve(manager);
                }
                else {
                    debugAssert(promise_1, 'If manager is not set, promise should be');
                    return promise_1;
                }
            }
            var promise = this.initAndGetManager(auth);
            this.eventManagers[key] = { promise: promise };
            return promise;
        };
        BrowserPopupRedirectResolver.prototype.initAndGetManager = function (auth) {
            return __awaiter(this, void 0, void 0, function () {
                var iframe, manager;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, _openIframe(auth)];
                        case 1:
                            iframe = _a.sent();
                            manager = new AuthEventManager(auth);
                            iframe.register('authEvent', function (iframeEvent) {
                                _assert(iframeEvent === null || iframeEvent === void 0 ? void 0 : iframeEvent.authEvent, auth, "invalid-auth-event" /* INVALID_AUTH_EVENT */);
                                // TODO: Consider splitting redirect and popup events earlier on
                                var handled = manager.onEvent(iframeEvent.authEvent);
                                return { status: handled ? "ACK" /* ACK */ : "ERROR" /* ERROR */ };
                            }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);
                            this.eventManagers[auth._key()] = { manager: manager };
                            this.iframes[auth._key()] = iframe;
                            return [2 /*return*/, manager];
                    }
                });
            });
        };
        BrowserPopupRedirectResolver.prototype._isIframeWebStorageSupported = function (auth, cb) {
            var iframe = this.iframes[auth._key()];
            iframe.send(WEB_STORAGE_SUPPORT_KEY, { type: WEB_STORAGE_SUPPORT_KEY }, function (result) {
                var _a;
                var isSupported = (_a = result === null || result === void 0 ? void 0 : result[0]) === null || _a === void 0 ? void 0 : _a[WEB_STORAGE_SUPPORT_KEY];
                if (isSupported !== undefined) {
                    cb(!!isSupported);
                }
                _fail(auth, "internal-error" /* INTERNAL_ERROR */);
            }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);
        };
        BrowserPopupRedirectResolver.prototype.originValidation = function (auth) {
            var key = auth._key();
            if (!this.originValidationPromises[key]) {
                this.originValidationPromises[key] = _validateOrigin(auth);
            }
            return this.originValidationPromises[key];
        };
        return BrowserPopupRedirectResolver;
    }());
    /**
     * An implementation of {@link @firebase/auth-types#PopupRedirectResolver} suitable for browser
     * based applications.
     *
     * @public
     */
    var browserPopupRedirectResolver = BrowserPopupRedirectResolver;

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function startSignInPhoneMfa(auth, request) {
        return _performApiRequest(auth, "POST" /* POST */, "/v2/accounts/mfaSignIn:start" /* START_PHONE_MFA_SIGN_IN */, __assign({ tenantId: auth.tenantId }, request));
    }
    function finalizeSignInPhoneMfa(auth, request) {
        return _performApiRequest(auth, "POST" /* POST */, "/v2/accounts/mfaSignIn:finalize" /* FINALIZE_PHONE_MFA_SIGN_IN */, __assign({ tenantId: auth.tenantId }, request));
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function getRecaptchaParams(auth) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, _performApiRequest(auth, "GET" /* GET */, "/v1/recaptchaParams" /* GET_RECAPTCHA_PARAM */)];
                    case 1: return [2 /*return*/, ((_a.sent()).recaptchaSiteKey || '')];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _SOLVE_TIME_MS = 500;
    var _EXPIRATION_TIME_MS = 60000;
    var _WIDGET_ID_START = 1000000000000;
    var MockReCaptcha = /** @class */ (function () {
        function MockReCaptcha(auth) {
            this.auth = auth;
            this.counter = _WIDGET_ID_START;
            this._widgets = new Map();
        }
        MockReCaptcha.prototype.render = function (container, parameters) {
            var id = this.counter;
            this._widgets.set(id, new MockWidget(container, this.auth.name, parameters || {}));
            this.counter++;
            return id;
        };
        MockReCaptcha.prototype.reset = function (optWidgetId) {
            var _a;
            var id = optWidgetId || _WIDGET_ID_START;
            void ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.delete());
            this._widgets.delete(id);
        };
        MockReCaptcha.prototype.getResponse = function (optWidgetId) {
            var _a;
            var id = optWidgetId || _WIDGET_ID_START;
            return ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.getResponse()) || '';
        };
        MockReCaptcha.prototype.execute = function (optWidgetId) {
            var _a;
            return __awaiter(this, void 0, void 0, function () {
                var id;
                return __generator(this, function (_b) {
                    id = optWidgetId || _WIDGET_ID_START;
                    void ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.execute());
                    return [2 /*return*/, ''];
                });
            });
        };
        return MockReCaptcha;
    }());
    var MockWidget = /** @class */ (function () {
        function MockWidget(containerOrId, appName, params) {
            var _this = this;
            this.params = params;
            this.timerId = null;
            this.deleted = false;
            this.responseToken = null;
            this.clickHandler = function () {
                _this.execute();
            };
            var container = typeof containerOrId === 'string'
                ? document.getElementById(containerOrId)
                : containerOrId;
            _assert(container, "argument-error" /* ARGUMENT_ERROR */, { appName: appName });
            this.container = container;
            this.isVisible = this.params.size !== 'invisible';
            if (this.isVisible) {
                this.execute();
            }
            else {
                this.container.addEventListener('click', this.clickHandler);
            }
        }
        MockWidget.prototype.getResponse = function () {
            this.checkIfDeleted();
            return this.responseToken;
        };
        MockWidget.prototype.delete = function () {
            this.checkIfDeleted();
            this.deleted = true;
            if (this.timerId) {
                clearTimeout(this.timerId);
                this.timerId = null;
            }
            this.container.removeEventListener('click', this.clickHandler);
        };
        MockWidget.prototype.execute = function () {
            var _this = this;
            this.checkIfDeleted();
            if (this.timerId) {
                return;
            }
            this.timerId = window.setTimeout(function () {
                _this.responseToken = generateRandomAlphaNumericString(50);
                var _a = _this.params, callback = _a.callback, expiredCallback = _a["expired-callback"];
                if (callback) {
                    try {
                        callback(_this.responseToken);
                    }
                    catch (e) { }
                }
                _this.timerId = window.setTimeout(function () {
                    _this.timerId = null;
                    _this.responseToken = null;
                    if (expiredCallback) {
                        try {
                            expiredCallback();
                        }
                        catch (e) { }
                    }
                    if (_this.isVisible) {
                        _this.execute();
                    }
                }, _EXPIRATION_TIME_MS);
            }, _SOLVE_TIME_MS);
        };
        MockWidget.prototype.checkIfDeleted = function () {
            if (this.deleted) {
                throw new Error('reCAPTCHA mock was already deleted!');
            }
        };
        return MockWidget;
    }());
    function generateRandomAlphaNumericString(len) {
        var chars = [];
        var allowedChars = '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        for (var i = 0; i < len; i++) {
            chars.push(allowedChars.charAt(Math.floor(Math.random() * allowedChars.length)));
        }
        return chars.join('');
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // ReCaptcha will load using the same callback, so the callback function needs
    // to be kept around
    var _JSLOAD_CALLBACK = _generateCallbackName('rcb');
    var NETWORK_TIMEOUT_DELAY = new Delay(30000, 60000);
    var RECAPTCHA_BASE = 'https://www.google.com/recaptcha/api.js?';
    /**
     * Loader for the GReCaptcha library. There should only ever be one of this.
     */
    var ReCaptchaLoaderImpl = /** @class */ (function () {
        function ReCaptchaLoaderImpl() {
            this.hostLanguage = '';
            this.counter = 0;
            this.librarySeparatelyLoaded = !!_window().grecaptcha;
        }
        ReCaptchaLoaderImpl.prototype.load = function (auth, hl) {
            var _this = this;
            if (hl === void 0) { hl = ''; }
            _assert(isHostLanguageValid(hl), auth, "argument-error" /* ARGUMENT_ERROR */);
            if (this.shouldResolveImmediately(hl)) {
                return Promise.resolve(_window().grecaptcha);
            }
            return new Promise(function (resolve, reject) {
                var networkTimeout = _window().setTimeout(function () {
                    reject(_createError(auth, "network-request-failed" /* NETWORK_REQUEST_FAILED */));
                }, NETWORK_TIMEOUT_DELAY.get());
                _window()[_JSLOAD_CALLBACK] = function () {
                    _window().clearTimeout(networkTimeout);
                    delete _window()[_JSLOAD_CALLBACK];
                    var recaptcha = _window().grecaptcha;
                    if (!recaptcha) {
                        reject(_createError(auth, "internal-error" /* INTERNAL_ERROR */));
                        return;
                    }
                    // Wrap the greptcha render function so that we know if the developer has
                    // called it separately
                    var render = recaptcha.render;
                    recaptcha.render = function (container, params) {
                        var widgetId = render(container, params);
                        _this.counter++;
                        return widgetId;
                    };
                    _this.hostLanguage = hl;
                    resolve(recaptcha);
                };
                var url = RECAPTCHA_BASE + "?" + querystring({
                    onload: _JSLOAD_CALLBACK,
                    render: 'explicit',
                    hl: hl
                });
                _loadJS(url).catch(function () {
                    clearTimeout(networkTimeout);
                    reject(_createError(auth, "internal-error" /* INTERNAL_ERROR */));
                });
            });
        };
        ReCaptchaLoaderImpl.prototype.clearedOneInstance = function () {
            this.counter--;
        };
        ReCaptchaLoaderImpl.prototype.shouldResolveImmediately = function (hl) {
            // We can resolve immediately if:
            //   • grecaptcha is already defined AND (
            //     1. the requested language codes are the same OR
            //     2. there exists already a ReCaptcha on the page
            //     3. the library was already loaded by the app
            // In cases (2) and (3), we _can't_ reload as it would break the recaptchas
            // that are already in the page
            return (!!_window().grecaptcha &&
                (hl === this.hostLanguage ||
                    this.counter > 0 ||
                    this.librarySeparatelyLoaded));
        };
        return ReCaptchaLoaderImpl;
    }());
    function isHostLanguageValid(hl) {
        return hl.length <= 6 && /^\s*[a-zA-Z0-9\-]*\s*$/.test(hl);
    }
    var MockReCaptchaLoaderImpl = /** @class */ (function () {
        function MockReCaptchaLoaderImpl() {
        }
        MockReCaptchaLoaderImpl.prototype.load = function (auth) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, new MockReCaptcha(auth)];
                });
            });
        };
        MockReCaptchaLoaderImpl.prototype.clearedOneInstance = function () { };
        return MockReCaptchaLoaderImpl;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var RECAPTCHA_VERIFIER_TYPE = 'recaptcha';
    var DEFAULT_PARAMS = {
        theme: 'light',
        type: 'image'
    };
    /**
     * {@inheritdoc @firebase/auth-types#RecaptchaVerifier}
     * @public
     */
    var RecaptchaVerifier = /** @class */ (function () {
        function RecaptchaVerifier(containerOrId, parameters, authExtern) {
            if (parameters === void 0) { parameters = __assign({}, DEFAULT_PARAMS); }
            this.parameters = parameters;
            this.type = RECAPTCHA_VERIFIER_TYPE;
            this.destroyed = false;
            this.widgetId = null;
            this.tokenChangeListeners = new Set();
            this.renderPromise = null;
            this.recaptcha = null;
            this.auth = _castAuth(authExtern);
            this.isInvisible = this.parameters.size === 'invisible';
            _assert(typeof document !== 'undefined', this.auth, "operation-not-supported-in-this-environment" /* OPERATION_NOT_SUPPORTED */);
            var container = typeof containerOrId === 'string'
                ? document.getElementById(containerOrId)
                : containerOrId;
            _assert(container, this.auth, "argument-error" /* ARGUMENT_ERROR */);
            this.container = container;
            this.parameters.callback = this.makeTokenCallback(this.parameters.callback);
            this._recaptchaLoader = this.auth.settings.appVerificationDisabledForTesting
                ? new MockReCaptchaLoaderImpl()
                : new ReCaptchaLoaderImpl();
            this.validateStartingState();
            // TODO: Figure out if sdk version is needed
        }
        /** {@inheritdoc @firebase/auth-types#RecaptchaVerifier.verify} */
        RecaptchaVerifier.prototype.verify = function () {
            return __awaiter(this, void 0, void 0, function () {
                var id, recaptcha, response;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.assertNotDestroyed();
                            return [4 /*yield*/, this.render()];
                        case 1:
                            id = _a.sent();
                            recaptcha = this.getAssertedRecaptcha();
                            response = recaptcha.getResponse(id);
                            if (response) {
                                return [2 /*return*/, response];
                            }
                            return [2 /*return*/, new Promise(function (resolve) {
                                    var tokenChange = function (token) {
                                        if (!token) {
                                            return; // Ignore token expirations.
                                        }
                                        _this.tokenChangeListeners.delete(tokenChange);
                                        resolve(token);
                                    };
                                    _this.tokenChangeListeners.add(tokenChange);
                                    if (_this.isInvisible) {
                                        recaptcha.execute(id);
                                    }
                                })];
                    }
                });
            });
        };
        /** {@inheritdoc @firebase/auth-types#RecaptchaVerifier.render} */
        RecaptchaVerifier.prototype.render = function () {
            var _this = this;
            try {
                this.assertNotDestroyed();
            }
            catch (e) {
                // This method returns a promise. Since it's not async (we want to return the
                // _same_ promise if rendering is still occurring), the API surface should
                // reject with the error rather than just throw
                return Promise.reject(e);
            }
            if (this.renderPromise) {
                return this.renderPromise;
            }
            this.renderPromise = this.makeRenderPromise().catch(function (e) {
                _this.renderPromise = null;
                throw e;
            });
            return this.renderPromise;
        };
        /** @internal */
        RecaptchaVerifier.prototype._reset = function () {
            this.assertNotDestroyed();
            if (this.widgetId !== null) {
                this.getAssertedRecaptcha().reset(this.widgetId);
            }
        };
        /** {@inheritdoc @firebase/auth-types#RecaptchaVerifier.clear} */
        RecaptchaVerifier.prototype.clear = function () {
            var _this = this;
            this.assertNotDestroyed();
            this.destroyed = true;
            this._recaptchaLoader.clearedOneInstance();
            if (!this.isInvisible) {
                this.container.childNodes.forEach(function (node) {
                    _this.container.removeChild(node);
                });
            }
        };
        RecaptchaVerifier.prototype.validateStartingState = function () {
            _assert(!this.parameters.sitekey, this.auth, "argument-error" /* ARGUMENT_ERROR */);
            _assert(this.isInvisible || !this.container.hasChildNodes(), this.auth, "argument-error" /* ARGUMENT_ERROR */);
            _assert(typeof document !== 'undefined', this.auth, "operation-not-supported-in-this-environment" /* OPERATION_NOT_SUPPORTED */);
        };
        RecaptchaVerifier.prototype.makeTokenCallback = function (existing) {
            var _this = this;
            return function (token) {
                _this.tokenChangeListeners.forEach(function (listener) { return listener(token); });
                if (typeof existing === 'function') {
                    existing(token);
                }
                else if (typeof existing === 'string') {
                    var globalFunc = _window()[existing];
                    if (typeof globalFunc === 'function') {
                        globalFunc(token);
                    }
                }
            };
        };
        RecaptchaVerifier.prototype.assertNotDestroyed = function () {
            _assert(!this.destroyed, this.auth, "internal-error" /* INTERNAL_ERROR */);
        };
        RecaptchaVerifier.prototype.makeRenderPromise = function () {
            return __awaiter(this, void 0, void 0, function () {
                var container, guaranteedEmpty;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.init()];
                        case 1:
                            _a.sent();
                            if (!this.widgetId) {
                                container = this.container;
                                if (!this.isInvisible) {
                                    guaranteedEmpty = document.createElement('div');
                                    container.appendChild(guaranteedEmpty);
                                    container = guaranteedEmpty;
                                }
                                this.widgetId = this.getAssertedRecaptcha().render(container, this.parameters);
                            }
                            return [2 /*return*/, this.widgetId];
                    }
                });
            });
        };
        RecaptchaVerifier.prototype.init = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, siteKey;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _assert(_isHttpOrHttps() && !_isWorker(), this.auth, "internal-error" /* INTERNAL_ERROR */);
                            return [4 /*yield*/, domReady()];
                        case 1:
                            _b.sent();
                            _a = this;
                            return [4 /*yield*/, this._recaptchaLoader.load(this.auth, this.auth.languageCode || undefined)];
                        case 2:
                            _a.recaptcha = _b.sent();
                            return [4 /*yield*/, getRecaptchaParams(this.auth)];
                        case 3:
                            siteKey = _b.sent();
                            _assert(siteKey, this.auth, "internal-error" /* INTERNAL_ERROR */);
                            this.parameters.sitekey = siteKey;
                            return [2 /*return*/];
                    }
                });
            });
        };
        RecaptchaVerifier.prototype.getAssertedRecaptcha = function () {
            _assert(this.recaptcha, this.auth, "internal-error" /* INTERNAL_ERROR */);
            return this.recaptcha;
        };
        return RecaptchaVerifier;
    }());
    function domReady() {
        var resolver = null;
        return new Promise(function (resolve) {
            if (document.readyState === 'complete') {
                resolve();
                return;
            }
            // Document not ready, wait for load before resolving.
            // Save resolver, so we can remove listener in case it was externally
            // cancelled.
            resolver = function () { return resolve(); };
            window.addEventListener('load', resolver);
        }).catch(function (e) {
            if (resolver) {
                window.removeEventListener('load', resolver);
            }
            throw e;
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ConfirmationResult = /** @class */ (function () {
        function ConfirmationResult(verificationId, onConfirmation) {
            this.verificationId = verificationId;
            this.onConfirmation = onConfirmation;
        }
        ConfirmationResult.prototype.confirm = function (verificationCode) {
            var authCredential = PhoneAuthCredential._fromVerification(this.verificationId, verificationCode);
            return this.onConfirmation(authCredential);
        };
        return ConfirmationResult;
    }());
    /**
     * Asynchronously signs in using a phone number.
     *
     * @remarks
     * This method sends a code via SMS to the given
     * phone number, and returns a {@link @firebase/auth-types#ConfirmationResult}. After the user
     * provides the code sent to their phone, call {@link @firebase/auth-types#ConfirmationResult.confirm}
     * with the code to sign the user in.
     *
     * For abuse prevention, this method also requires a {@link @firebase/auth-types#ApplicationVerifier}.
     * This SDK includes a reCAPTCHA-based implementation, {@link RecaptchaVerifier}.
     *
     * @example
     * ```javascript
     * // 'recaptcha-container' is the ID of an element in the DOM.
     * const applicationVerifier = new firebase.auth.RecaptchaVerifier('recaptcha-container');
     * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);
     * // Obtain a verificationCode from the user.
     * const credential = await confirmationResult.confirm(verificationCode);
     * ```
     *
     * @param auth - The Auth instance.
     * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).
     * @param appVerifier - The {@link @firebase/auth-types#ApplicationVerifier}.
     *
     * @public
     */
    function signInWithPhoneNumber$1(auth, phoneNumber, appVerifier) {
        return __awaiter(this, void 0, void 0, function () {
            var verificationId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, _verifyPhoneNumber(_castAuth(auth), phoneNumber, appVerifier)];
                    case 1:
                        verificationId = _a.sent();
                        return [2 /*return*/, new ConfirmationResult(verificationId, function (cred) {
                                return signInWithCredential(auth, cred);
                            })];
                }
            });
        });
    }
    /**
     * Links the user account with the given phone number.
     *
     * @param user - The user.
     * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).
     * @param appVerifier - The {@link @firebase/auth-types#ApplicationVerifier}.
     *
     * @public
     */
    function linkWithPhoneNumber$1(user, phoneNumber, appVerifier) {
        return __awaiter(this, void 0, void 0, function () {
            var userInternal, verificationId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        userInternal = user;
                        return [4 /*yield*/, _assertLinkedStatus(false, userInternal, "phone" /* PHONE */)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, _verifyPhoneNumber(userInternal.auth, phoneNumber, appVerifier)];
                    case 2:
                        verificationId = _a.sent();
                        return [2 /*return*/, new ConfirmationResult(verificationId, function (cred) {
                                return linkWithCredential(user, cred);
                            })];
                }
            });
        });
    }
    /**
     * Re-authenticates a user using a fresh phne credential.
     *
     * @remarks Use before operations such as {@link updatePassword} that require tokens from recent sign-in attempts.
     *
     * @param user - The user.
     * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).
     * @param appVerifier - The {@link @firebase/auth-types#ApplicationVerifier}.
     *
     * @public
     */
    function reauthenticateWithPhoneNumber(user, phoneNumber, appVerifier) {
        return __awaiter(this, void 0, void 0, function () {
            var userInternal, verificationId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        userInternal = user;
                        return [4 /*yield*/, _verifyPhoneNumber(userInternal.auth, phoneNumber, appVerifier)];
                    case 1:
                        verificationId = _a.sent();
                        return [2 /*return*/, new ConfirmationResult(verificationId, function (cred) {
                                return reauthenticateWithCredential(user, cred);
                            })];
                }
            });
        });
    }
    /**
     * Returns a verification ID to be used in conjunction with the SMS code that is sent.
     *
     */
    function _verifyPhoneNumber(auth, options, verifier) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var recaptchaToken, phoneInfoOptions, session, response, mfaEnrollmentId, response, sessionInfo;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, verifier.verify()];
                    case 1:
                        recaptchaToken = _b.sent();
                        _b.label = 2;
                    case 2:
                        _b.trys.push([2, , 10, 11]);
                        _assert(typeof recaptchaToken === 'string', auth, "argument-error" /* ARGUMENT_ERROR */);
                        _assert(verifier.type === RECAPTCHA_VERIFIER_TYPE, auth, "argument-error" /* ARGUMENT_ERROR */);
                        phoneInfoOptions = void 0;
                        if (typeof options === 'string') {
                            phoneInfoOptions = {
                                phoneNumber: options
                            };
                        }
                        else {
                            phoneInfoOptions = options;
                        }
                        if (!('session' in phoneInfoOptions)) return [3 /*break*/, 7];
                        session = phoneInfoOptions.session;
                        if (!('phoneNumber' in phoneInfoOptions)) return [3 /*break*/, 4];
                        _assert(session.type === "enroll" /* ENROLL */, auth, "internal-error" /* INTERNAL_ERROR */);
                        return [4 /*yield*/, startEnrollPhoneMfa(auth, {
                                idToken: session.credential,
                                phoneEnrollmentInfo: {
                                    phoneNumber: phoneInfoOptions.phoneNumber,
                                    recaptchaToken: recaptchaToken
                                }
                            })];
                    case 3:
                        response = _b.sent();
                        return [2 /*return*/, response.phoneSessionInfo.sessionInfo];
                    case 4:
                        _assert(session.type === "signin" /* SIGN_IN */, auth, "internal-error" /* INTERNAL_ERROR */);
                        mfaEnrollmentId = ((_a = phoneInfoOptions.multiFactorHint) === null || _a === void 0 ? void 0 : _a.uid) ||
                            phoneInfoOptions.multiFactorUid;
                        _assert(mfaEnrollmentId, auth, "missing-multi-factor-info" /* MISSING_MFA_INFO */);
                        return [4 /*yield*/, startSignInPhoneMfa(auth, {
                                mfaPendingCredential: session.credential,
                                mfaEnrollmentId: mfaEnrollmentId,
                                phoneSignInInfo: {
                                    recaptchaToken: recaptchaToken
                                }
                            })];
                    case 5:
                        response = _b.sent();
                        return [2 /*return*/, response.phoneResponseInfo.sessionInfo];
                    case 6: return [3 /*break*/, 9];
                    case 7: return [4 /*yield*/, sendPhoneVerificationCode(auth, {
                            phoneNumber: phoneInfoOptions.phoneNumber,
                            recaptchaToken: recaptchaToken
                        })];
                    case 8:
                        sessionInfo = (_b.sent()).sessionInfo;
                        return [2 /*return*/, sessionInfo];
                    case 9: return [3 /*break*/, 11];
                    case 10:
                        verifier._reset();
                        return [7 /*endfinally*/];
                    case 11: return [2 /*return*/];
                }
            });
        });
    }
    /**
     * Updates the user's phone number.
     *
     * @example
     * ```
     * // 'recaptcha-container' is the ID of an element in the DOM.
     * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');
     * const provider = new PhoneAuthProvider(auth);
     * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);
     * // Obtain the verificationCode from the user.
     * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);
     * await updatePhoneNumber(user, phoneCredential);
     * ```
     *
     * @param user - The user.
     * @param credential - A credential authenticating the new phone number.
     *
     * @public
     */
    function updatePhoneNumber(user, credential) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, _link(user, credential)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * {@inheritdoc @firebase/auth-types#PhoneAuthProvider}
     * @public
     */
    var PhoneAuthProvider = /** @class */ (function () {
        function PhoneAuthProvider(auth) {
            /** {@inheritdoc @firebase/auth-types#PhoneAuthProvider.providerId} */
            this.providerId = PhoneAuthProvider.PROVIDER_ID;
            this.auth = _castAuth(auth);
        }
        /** {@inheritdoc @firebase/auth-types#PhoneAuthProvider.verifyPhoneNumber} */
        PhoneAuthProvider.prototype.verifyPhoneNumber = function (phoneOptions, applicationVerifier) {
            return _verifyPhoneNumber(this.auth, phoneOptions, applicationVerifier);
        };
        /** {@inheritdoc @firebase/auth-types#PhoneAuthProvider.credential} */
        PhoneAuthProvider.credential = function (verificationId, verificationCode) {
            return PhoneAuthCredential._fromVerification(verificationId, verificationCode);
        };
        PhoneAuthProvider.credentialFromResult = function (userCredential) {
            var credential = userCredential;
            _assert(credential._tokenResponse, credential.user.auth, "argument-error" /* ARGUMENT_ERROR */);
            var _a = credential._tokenResponse, phoneNumber = _a.phoneNumber, temporaryProof = _a.temporaryProof;
            if (phoneNumber && temporaryProof) {
                return PhoneAuthCredential._fromTokenResponse(phoneNumber, temporaryProof);
            }
            _fail(credential.user.auth, "argument-error" /* ARGUMENT_ERROR */);
        };
        /** {@inheritdoc @firebase/auth-types#PhoneAuthProvider.PROVIDER_ID} */
        PhoneAuthProvider.PROVIDER_ID = "phone" /* PHONE */;
        /** {@inheritdoc @firebase/auth-types#PhoneAuthProvider.PHONE_SIGN_IN_METHOD} */
        PhoneAuthProvider.PHONE_SIGN_IN_METHOD = "phone" /* PHONE */;
        return PhoneAuthProvider;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _POLL_WINDOW_CLOSE_TIMEOUT = new Delay(2000, 10000);
    /**
     * Authenticates a Firebase client using a popup-based OAuth authentication flow.
     *
     * @remarks
     * If succeeds, returns the signed in user along with the provider's credential. If sign in was
     * unsuccessful, returns an error object containing additional information about the error.
     *
     * @example
     * ```javascript
     * // Sign in using a popup.
     * const provider = new FacebookAuthProvider();
     * const result = await signInWithPopup(auth, provider);
     *
     * // The signed-in user info.
     * const user = result.user;
     * // This gives you a Facebook Access Token.
     * const credential = provider.credentialFromResult(auth, result);
     * const token = credential.accessToken;
     * ```
     *
     * @param auth - The Auth instance.
     * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
     * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
     * @param resolver - An instance of {@link @firebase/auth-types#PopupRedirectResolver}, optional
     * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
     *
     *
     * @public
     */
    function signInWithPopup(auth, provider, resolver) {
        return __awaiter(this, void 0, void 0, function () {
            var authInternal, resolverInternal, action;
            return __generator(this, function (_a) {
                authInternal = _castAuth(auth);
                _assert(provider instanceof OAuthProvider, auth, "argument-error" /* ARGUMENT_ERROR */);
                resolverInternal = _withDefaultResolver(authInternal, resolver);
                action = new PopupOperation(authInternal, "signInViaPopup" /* SIGN_IN_VIA_POPUP */, provider, resolverInternal);
                return [2 /*return*/, action.executeNotNull()];
            });
        });
    }
    /**
     * Reauthenticates the current user with the specified {@link OAuthProvider} using a pop-up based
     * OAuth flow.
     *
     * @remarks
     * If the reauthentication is successful, the returned result will contain the user and the
     * provider's credential.
     *
     * @example
     * ```javascript
     * // Sign in using a popup.
     * const provider = new FacebookAuthProvider();
     * const result = await signInWithPopup(auth, provider);
     * // Reauthenticate using a popup.
     * await reauthenticateWithPopup(result.user, provider);
     * ```
     *
     * @param user - The user.
     * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
     * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
     * @param resolver - An instance of {@link @firebase/auth-types#PopupRedirectResolver}, optional
     * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
     *
     * @public
     */
    function reauthenticateWithPopup(user, provider, resolver) {
        return __awaiter(this, void 0, void 0, function () {
            var userInternal, resolverInternal, action;
            return __generator(this, function (_a) {
                userInternal = user;
                _assert(provider instanceof OAuthProvider, userInternal.auth, "argument-error" /* ARGUMENT_ERROR */);
                resolverInternal = _withDefaultResolver(userInternal.auth, resolver);
                action = new PopupOperation(userInternal.auth, "reauthViaPopup" /* REAUTH_VIA_POPUP */, provider, resolverInternal, userInternal);
                return [2 /*return*/, action.executeNotNull()];
            });
        });
    }
    /**
     * Links the authenticated provider to the user account using a pop-up based OAuth flow.
     *
     * @remarks
     * If the linking is successful, the returned result will contain the user and the provider's credential.
     *
     *
     * @example
     * ```javascript
     * // Sign in using some other provider.
     * const result = await signInWithEmailAndPassword(auth, email, password);
     * // Link using a popup.
     * const provider = new FacebookAuthProvider();
     * await linkWithPopup(result.user, provider);
     * ```
     *
     * @param user - The user.
     * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
     * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
     * @param resolver - An instance of {@link @firebase/auth-types#PopupRedirectResolver}, optional
     * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
     *
     * @public
     */
    function linkWithPopup(user, provider, resolver) {
        return __awaiter(this, void 0, void 0, function () {
            var userInternal, resolverInternal, action;
            return __generator(this, function (_a) {
                userInternal = user;
                _assert(provider instanceof OAuthProvider, userInternal.auth, "argument-error" /* ARGUMENT_ERROR */);
                resolverInternal = _withDefaultResolver(userInternal.auth, resolver);
                action = new PopupOperation(userInternal.auth, "linkViaPopup" /* LINK_VIA_POPUP */, provider, resolverInternal, userInternal);
                return [2 /*return*/, action.executeNotNull()];
            });
        });
    }
    /**
     * Popup event manager. Handles the popup's entire lifecycle; listens to auth
     * events
     *
     */
    var PopupOperation = /** @class */ (function (_super) {
        __extends(PopupOperation, _super);
        function PopupOperation(auth, filter, provider, resolver, user) {
            var _this = _super.call(this, auth, filter, resolver, user) || this;
            _this.provider = provider;
            _this.authWindow = null;
            _this.pollId = null;
            if (PopupOperation.currentPopupAction) {
                PopupOperation.currentPopupAction.cancel();
            }
            PopupOperation.currentPopupAction = _this;
            return _this;
        }
        PopupOperation.prototype.executeNotNull = function () {
            return __awaiter(this, void 0, void 0, function () {
                var result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.execute()];
                        case 1:
                            result = _a.sent();
                            _assert(result, this.auth, "internal-error" /* INTERNAL_ERROR */);
                            return [2 /*return*/, result];
                    }
                });
            });
        };
        PopupOperation.prototype.onExecution = function () {
            return __awaiter(this, void 0, void 0, function () {
                var eventId, _a;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            debugAssert(this.filter.length === 1, 'Popup operations only handle one event');
                            eventId = _generateEventId();
                            _a = this;
                            return [4 /*yield*/, this.resolver._openPopup(this.auth, this.provider, this.filter[0], // There's always one, see constructor
                                eventId)];
                        case 1:
                            _a.authWindow = _b.sent();
                            this.authWindow.associatedEvent = eventId;
                            // Check for web storage support _after_ the popup is loaded. Checking for
                            // web storage is slow (on the order of a second or so). Rather than
                            // waiting on that before opening the window, optimistically open the popup
                            // and check for storage support at the same time. If storage support is
                            // not available, this will cause the whole thing to reject properly. It
                            // will also close the popup, but since the promise has already rejected,
                            // the popup closed by user poll will reject into the void.
                            this.resolver._isIframeWebStorageSupported(this.auth, function (isSupported) {
                                if (!isSupported) {
                                    _this.reject(_createError(_this.auth, "web-storage-unsupported" /* WEB_STORAGE_UNSUPPORTED */));
                                }
                            });
                            // Handle user closure. Notice this does *not* use await
                            this.pollUserCancellation();
                            return [2 /*return*/];
                    }
                });
            });
        };
        Object.defineProperty(PopupOperation.prototype, "eventId", {
            get: function () {
                var _a;
                return ((_a = this.authWindow) === null || _a === void 0 ? void 0 : _a.associatedEvent) || null;
            },
            enumerable: false,
            configurable: true
        });
        PopupOperation.prototype.cancel = function () {
            this.reject(_createError(this.auth, "cancelled-popup-request" /* EXPIRED_POPUP_REQUEST */));
        };
        PopupOperation.prototype.cleanUp = function () {
            if (this.authWindow) {
                this.authWindow.close();
            }
            if (this.pollId) {
                window.clearTimeout(this.pollId);
            }
            this.authWindow = null;
            this.pollId = null;
            PopupOperation.currentPopupAction = null;
        };
        PopupOperation.prototype.pollUserCancellation = function () {
            var _this = this;
            var poll = function () {
                var _a, _b;
                if ((_b = (_a = _this.authWindow) === null || _a === void 0 ? void 0 : _a.window) === null || _b === void 0 ? void 0 : _b.closed) {
                    // Make sure that there is sufficient time for whatever action to
                    // complete. The window could have closed but the sign in network
                    // call could still be in flight.
                    _this.pollId = window.setTimeout(function () {
                        _this.pollId = null;
                        _this.reject(_createError(_this.auth, "popup-closed-by-user" /* POPUP_CLOSED_BY_USER */));
                    }, 2000 /* AUTH_EVENT */);
                    return;
                }
                _this.pollId = window.setTimeout(poll, _POLL_WINDOW_CLOSE_TIMEOUT.get());
            };
            poll();
        };
        // Only one popup is ever shown at once. The lifecycle of the current popup
        // can be managed / cancelled by the constructor.
        PopupOperation.currentPopupAction = null;
        return PopupOperation;
    }(AbstractPopupRedirectOperation));

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var MultiFactorAssertion = /** @class */ (function () {
        function MultiFactorAssertion(factorId) {
            this.factorId = factorId;
        }
        MultiFactorAssertion.prototype._process = function (auth, session, displayName) {
            switch (session.type) {
                case "enroll" /* ENROLL */:
                    return this._finalizeEnroll(auth, session.credential, displayName);
                case "signin" /* SIGN_IN */:
                    return this._finalizeSignIn(auth, session.credential);
                default:
                    return debugFail('unexpected MultiFactorSessionType');
            }
        };
        return MultiFactorAssertion;
    }());

    /**
     * {@inheritdoc @firebase/auth-types#PhoneMultiFactorAssertion}
     *
     * @public
     */
    var PhoneMultiFactorAssertion = /** @class */ (function (_super) {
        __extends(PhoneMultiFactorAssertion, _super);
        function PhoneMultiFactorAssertion(credential) {
            var _this = _super.call(this, "phone" /* PHONE */) || this;
            _this.credential = credential;
            return _this;
        }
        /** @internal */
        PhoneMultiFactorAssertion._fromCredential = function (credential) {
            return new PhoneMultiFactorAssertion(credential);
        };
        /** @internal */
        PhoneMultiFactorAssertion.prototype._finalizeEnroll = function (auth, idToken, displayName) {
            return finalizeEnrollPhoneMfa(auth, {
                idToken: idToken,
                displayName: displayName,
                phoneVerificationInfo: this.credential._makeVerificationRequest()
            });
        };
        /** @internal */
        PhoneMultiFactorAssertion.prototype._finalizeSignIn = function (auth, mfaPendingCredential) {
            return finalizeSignInPhoneMfa(auth, {
                mfaPendingCredential: mfaPendingCredential,
                phoneVerificationInfo: this.credential._makeVerificationRequest()
            });
        };
        return PhoneMultiFactorAssertion;
    }(MultiFactorAssertion));
    /**
     * {@inheritdoc @firebase/auth-types#PhoneMultiFactorGenerator}
     * @public
     */
    var PhoneMultiFactorGenerator = /** @class */ (function () {
        function PhoneMultiFactorGenerator() {
        }
        /** {@inheritdoc @firebase/auth-types#PhoneMultiFactorGenerator.assertion} */
        PhoneMultiFactorGenerator.assertion = function (credential) {
            return PhoneMultiFactorAssertion._fromCredential(credential);
        };
        return PhoneMultiFactorGenerator;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Initializes an Auth instance with platform specific default dependencies.
     *
     * @param app - The Firebase App.
     *
     * @public
     */
    function getAuth(app$1) {
        var provider = app._getProvider(app$1, 'auth-exp');
        if (provider.isInitialized()) {
            return provider.getImmediate();
        }
        return initializeAuth(app$1, {
            popupRedirectResolver: browserPopupRedirectResolver,
            persistence: [indexedDBLocalPersistence, browserLocalPersistence]
        });
    }
    registerAuth("Browser" /* BROWSER */);

    exports.ActionCodeURL = ActionCodeURL;
    exports.AuthCredential = AuthCredential;
    exports.EmailAuthCredential = EmailAuthCredential;
    exports.EmailAuthProvider = EmailAuthProvider;
    exports.FacebookAuthProvider = FacebookAuthProvider;
    exports.GithubAuthProvider = GithubAuthProvider;
    exports.GoogleAuthProvider = GoogleAuthProvider;
    exports.OAuthCredential = OAuthCredential;
    exports.OAuthProvider = OAuthProvider;
    exports.PhoneAuthCredential = PhoneAuthCredential;
    exports.PhoneAuthProvider = PhoneAuthProvider;
    exports.PhoneMultiFactorGenerator = PhoneMultiFactorGenerator;
    exports.RecaptchaVerifier = RecaptchaVerifier;
    exports.TwitterAuthProvider = TwitterAuthProvider;
    exports.applyActionCode = applyActionCode$1;
    exports.browserLocalPersistence = browserLocalPersistence;
    exports.browserPopupRedirectResolver = browserPopupRedirectResolver;
    exports.browserSessionPersistence = browserSessionPersistence;
    exports.checkActionCode = checkActionCode;
    exports.confirmPasswordReset = confirmPasswordReset;
    exports.createUserWithEmailAndPassword = createUserWithEmailAndPassword;
    exports.debugErrorMap = debugErrorMap;
    exports.deleteUser = deleteUser;
    exports.fetchSignInMethodsForEmail = fetchSignInMethodsForEmail;
    exports.getAdditionalUserInfo = getAdditionalUserInfo;
    exports.getAuth = getAuth;
    exports.getIdToken = getIdToken;
    exports.getIdTokenResult = getIdTokenResult;
    exports.getMultiFactorResolver = getMultiFactorResolver;
    exports.getRedirectResult = getRedirectResult;
    exports.inMemoryPersistence = inMemoryPersistence;
    exports.indexedDBLocalPersistence = indexedDBLocalPersistence;
    exports.initializeAuth = initializeAuth;
    exports.isSignInWithEmailLink = isSignInWithEmailLink;
    exports.linkWithCredential = linkWithCredential;
    exports.linkWithPhoneNumber = linkWithPhoneNumber$1;
    exports.linkWithPopup = linkWithPopup;
    exports.linkWithRedirect = linkWithRedirect;
    exports.multiFactor = multiFactor;
    exports.onAuthStateChanged = onAuthStateChanged;
    exports.onIdTokenChanged = onIdTokenChanged;
    exports.parseActionCodeURL = parseActionCodeURL;
    exports.prodErrorMap = prodErrorMap;
    exports.reauthenticateWithCredential = reauthenticateWithCredential;
    exports.reauthenticateWithPhoneNumber = reauthenticateWithPhoneNumber;
    exports.reauthenticateWithPopup = reauthenticateWithPopup;
    exports.reauthenticateWithRedirect = reauthenticateWithRedirect;
    exports.reload = reload;
    exports.sendEmailVerification = sendEmailVerification$1;
    exports.sendPasswordResetEmail = sendPasswordResetEmail$1;
    exports.sendSignInLinkToEmail = sendSignInLinkToEmail$1;
    exports.setPersistence = setPersistence;
    exports.signInAnonymously = signInAnonymously;
    exports.signInWithCredential = signInWithCredential;
    exports.signInWithCustomToken = signInWithCustomToken$1;
    exports.signInWithEmailAndPassword = signInWithEmailAndPassword;
    exports.signInWithEmailLink = signInWithEmailLink$1;
    exports.signInWithPhoneNumber = signInWithPhoneNumber$1;
    exports.signInWithPopup = signInWithPopup;
    exports.signInWithRedirect = signInWithRedirect;
    exports.signOut = signOut;
    exports.unlink = unlink;
    exports.updateCurrentUser = updateCurrentUser;
    exports.updateEmail = updateEmail;
    exports.updatePassword = updatePassword;
    exports.updatePhoneNumber = updatePhoneNumber;
    exports.updateProfile = updateProfile$1;
    exports.useAuthEmulator = useAuthEmulator;
    exports.useDeviceLanguage = useDeviceLanguage;
    exports.verifyBeforeUpdateEmail = verifyBeforeUpdateEmail;
    exports.verifyPasswordResetCode = verifyPasswordResetCode;

    Object.defineProperty(exports, '__esModule', { value: true });


              }).apply(this, arguments);
            } catch(err) {
                console.error(err);
                throw new Error(
                  'Cannot instantiate firebase-auth.js - ' +
                  'be sure to load firebase-app.js first.'
                );
              }

})));


(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@firebase/app')) :
    typeof define === 'function' && define.amd ? define(['exports', '@firebase/app'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.firebase = global.firebase || {}, global.firebase.functions = global.firebase.functions || {}), global.firebase.app));
}(this, (function (exports, app) { 'use strict';

    try {
                (function() {

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ERROR_NAME = 'FirebaseError';
    // Based on code from:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
    var FirebaseError = /** @class */ (function (_super) {
        __extends(FirebaseError, _super);
        function FirebaseError(code, message, customData) {
            var _this = _super.call(this, message) || this;
            _this.code = code;
            _this.customData = customData;
            _this.name = ERROR_NAME;
            // Fix For ES5
            // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
            Object.setPrototypeOf(_this, FirebaseError.prototype);
            // Maintains proper stack trace for where our error was thrown.
            // Only available on V8.
            if (Error.captureStackTrace) {
                Error.captureStackTrace(_this, ErrorFactory.prototype.create);
            }
            return _this;
        }
        return FirebaseError;
    }(Error));
    var ErrorFactory = /** @class */ (function () {
        function ErrorFactory(service, serviceName, errors) {
            this.service = service;
            this.serviceName = serviceName;
            this.errors = errors;
        }
        ErrorFactory.prototype.create = function (code) {
            var data = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                data[_i - 1] = arguments[_i];
            }
            var customData = data[0] || {};
            var fullCode = this.service + "/" + code;
            var template = this.errors[code];
            var message = template ? replaceTemplate(template, customData) : 'Error';
            // Service Name: Error message (service/code).
            var fullMessage = this.serviceName + ": " + message + " (" + fullCode + ").";
            var error = new FirebaseError(fullCode, fullMessage, customData);
            return error;
        };
        return ErrorFactory;
    }());
    function replaceTemplate(template, data) {
        return template.replace(PATTERN, function (_, key) {
            var value = data[key];
            return value != null ? String(value) : "<" + key + "?>";
        });
    }
    var PATTERN = /\{\$([^}]+)}/g;

    /**
     * Component for service name T, e.g. `auth`, `auth-internal`
     */
    var Component = /** @class */ (function () {
        /**
         *
         * @param name The public service name, e.g. app, auth, firestore, database
         * @param instanceFactory Service factory responsible for creating the public interface
         * @param type whether the service provided by the component is public or private
         */
        function Component(name, instanceFactory, type) {
            this.name = name;
            this.instanceFactory = instanceFactory;
            this.type = type;
            this.multipleInstances = false;
            /**
             * Properties to be added to the service namespace
             */
            this.serviceProps = {};
            this.instantiationMode = "LAZY" /* LAZY */;
        }
        Component.prototype.setInstantiationMode = function (mode) {
            this.instantiationMode = mode;
            return this;
        };
        Component.prototype.setMultipleInstances = function (multipleInstances) {
            this.multipleInstances = multipleInstances;
            return this;
        };
        Component.prototype.setServiceProps = function (props) {
            this.serviceProps = props;
            return this;
        };
        return Component;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var LONG_TYPE = 'type.googleapis.com/google.protobuf.Int64Value';
    var UNSIGNED_LONG_TYPE = 'type.googleapis.com/google.protobuf.UInt64Value';
    function mapValues(
    // { [k: string]: unknown } is no longer a wildcard assignment target after typescript 3.5
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    o, f) {
        var result = {};
        for (var key in o) {
            if (o.hasOwnProperty(key)) {
                result[key] = f(o[key]);
            }
        }
        return result;
    }
    /**
     * Takes data and encodes it in a JSON-friendly way, such that types such as
     * Date are preserved.
     * @internal
     * @param data - Data to encode.
     */
    function encode(data) {
        if (data == null) {
            return null;
        }
        if (data instanceof Number) {
            data = data.valueOf();
        }
        if (typeof data === 'number' && isFinite(data)) {
            // Any number in JS is safe to put directly in JSON and parse as a double
            // without any loss of precision.
            return data;
        }
        if (data === true || data === false) {
            return data;
        }
        if (Object.prototype.toString.call(data) === '[object String]') {
            return data;
        }
        if (Array.isArray(data)) {
            return data.map(function (x) { return encode(x); });
        }
        if (typeof data === 'function' || typeof data === 'object') {
            return mapValues(data, function (x) { return encode(x); });
        }
        // If we got this far, the data is not encodable.
        throw new Error('Data cannot be encoded in JSON: ' + data);
    }
    /**
     * Takes data that's been encoded in a JSON-friendly form and returns a form
     * with richer datatypes, such as Dates, etc.
     * @internal
     * @param json - JSON to convert.
     */
    function decode(json) {
        if (json == null) {
            return json;
        }
        if (json['@type']) {
            switch (json['@type']) {
                case LONG_TYPE:
                // Fall through and handle this the same as unsigned.
                case UNSIGNED_LONG_TYPE: {
                    // Technically, this could work return a valid number for malformed
                    // data if there was a number followed by garbage. But it's just not
                    // worth all the extra code to detect that case.
                    var value = Number(json['value']);
                    if (isNaN(value)) {
                        throw new Error('Data cannot be decoded from JSON: ' + json);
                    }
                    return value;
                }
                default: {
                    throw new Error('Data cannot be decoded from JSON: ' + json);
                }
            }
        }
        if (Array.isArray(json)) {
            return json.map(function (x) { return decode(x); });
        }
        if (typeof json === 'function' || typeof json === 'object') {
            return mapValues(json, function (x) { return decode(x); });
        }
        // Anything else is safe to return.
        return json;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Type constant for Firebase Functions.
     */
    var FUNCTIONS_TYPE = 'functions';

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Standard error codes for different ways a request can fail, as defined by:
     * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto
     *
     * This map is used primarily to convert from a backend error code string to
     * a client SDK error code string, and make sure it's in the supported set.
     */
    var errorCodeMap = {
        OK: 'ok',
        CANCELLED: 'cancelled',
        UNKNOWN: 'unknown',
        INVALID_ARGUMENT: 'invalid-argument',
        DEADLINE_EXCEEDED: 'deadline-exceeded',
        NOT_FOUND: 'not-found',
        ALREADY_EXISTS: 'already-exists',
        PERMISSION_DENIED: 'permission-denied',
        UNAUTHENTICATED: 'unauthenticated',
        RESOURCE_EXHAUSTED: 'resource-exhausted',
        FAILED_PRECONDITION: 'failed-precondition',
        ABORTED: 'aborted',
        OUT_OF_RANGE: 'out-of-range',
        UNIMPLEMENTED: 'unimplemented',
        INTERNAL: 'internal',
        UNAVAILABLE: 'unavailable',
        DATA_LOSS: 'data-loss'
    };
    /**
     * An explicit error that can be thrown from a handler to send an error to the
     * client that called the function.
     */
    var FunctionsError = /** @class */ (function (_super) {
        __extends(FunctionsError, _super);
        function FunctionsError(
        /**
         * A standard error code that will be returned to the client. This also
         * determines the HTTP status code of the response, as defined in code.proto.
         */
        code, message, 
        /**
         * Extra data to be converted to JSON and included in the error response.
         */
        details) {
            var _this = _super.call(this, FUNCTIONS_TYPE + "/" + code, message || '') || this;
            _this.details = details;
            return _this;
        }
        return FunctionsError;
    }(FirebaseError));
    /**
     * Takes an HTTP status code and returns the corresponding ErrorCode.
     * This is the standard HTTP status code -> error mapping defined in:
     * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto
     *
     * @param status An HTTP status code.
     * @return The corresponding ErrorCode, or ErrorCode.UNKNOWN if none.
     */
    function codeForHTTPStatus(status) {
        // Make sure any successful status is OK.
        if (status >= 200 && status < 300) {
            return 'ok';
        }
        switch (status) {
            case 0:
                // This can happen if the server returns 500.
                return 'internal';
            case 400:
                return 'invalid-argument';
            case 401:
                return 'unauthenticated';
            case 403:
                return 'permission-denied';
            case 404:
                return 'not-found';
            case 409:
                return 'aborted';
            case 429:
                return 'resource-exhausted';
            case 499:
                return 'cancelled';
            case 500:
                return 'internal';
            case 501:
                return 'unimplemented';
            case 503:
                return 'unavailable';
            case 504:
                return 'deadline-exceeded';
        }
        return 'unknown';
    }
    /**
     * Takes an HTTP response and returns the corresponding Error, if any.
     */
    function _errorForResponse(status, bodyJSON) {
        var code = codeForHTTPStatus(status);
        // Start with reasonable defaults from the status code.
        var description = code;
        var details = undefined;
        // Then look through the body for explicit details.
        try {
            var errorJSON = bodyJSON && bodyJSON.error;
            if (errorJSON) {
                var status_1 = errorJSON.status;
                if (typeof status_1 === 'string') {
                    if (!errorCodeMap[status_1]) {
                        // They must've included an unknown error code in the body.
                        return new FunctionsError('internal', 'internal');
                    }
                    code = errorCodeMap[status_1];
                    // TODO(klimt): Add better default descriptions for error enums.
                    // The default description needs to be updated for the new code.
                    description = status_1;
                }
                var message = errorJSON.message;
                if (typeof message === 'string') {
                    description = message;
                }
                details = errorJSON.details;
                if (details !== undefined) {
                    details = decode(details);
                }
            }
        }
        catch (e) {
            // If we couldn't parse explicit error data, that's fine.
        }
        if (code === 'ok') {
            // Technically, there's an edge case where a developer could explicitly
            // return an error code of OK, and we will treat it as success, but that
            // seems reasonable.
            return null;
        }
        return new FunctionsError(code, description, details);
    }

    /**
     * Helper class to get metadata that should be included with a function call.
     * @internal
     */
    var ContextProvider = /** @class */ (function () {
        function ContextProvider(authProvider, messagingProvider) {
            var _this = this;
            this.auth = null;
            this.messaging = null;
            this.auth = authProvider.getImmediate({ optional: true });
            this.messaging = messagingProvider.getImmediate({
                optional: true
            });
            if (!this.auth) {
                authProvider.get().then(function (auth) { return (_this.auth = auth); }, function () {
                    /* get() never rejects */
                });
            }
            if (!this.messaging) {
                messagingProvider.get().then(function (messaging) { return (_this.messaging = messaging); }, function () {
                    /* get() never rejects */
                });
            }
        }
        ContextProvider.prototype.getAuthToken = function () {
            return __awaiter(this, void 0, void 0, function () {
                var token, e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this.auth) {
                                return [2 /*return*/, undefined];
                            }
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.auth.getToken()];
                        case 2:
                            token = _a.sent();
                            return [2 /*return*/, token === null || token === void 0 ? void 0 : token.accessToken];
                        case 3:
                            e_1 = _a.sent();
                            // If there's any error when trying to get the auth token, leave it off.
                            return [2 /*return*/, undefined];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        ContextProvider.prototype.getMessagingToken = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (!this.messaging ||
                        !('Notification' in self) ||
                        Notification.permission !== 'granted') {
                        return [2 /*return*/, undefined];
                    }
                    try {
                        return [2 /*return*/, this.messaging.getToken()];
                    }
                    catch (e) {
                        // We don't warn on this, because it usually means messaging isn't set up.
                        // console.warn('Failed to retrieve instance id token.', e);
                        // If there's any error when trying to get the token, leave it off.
                        return [2 /*return*/, undefined];
                    }
                    return [2 /*return*/];
                });
            });
        };
        ContextProvider.prototype.getContext = function () {
            return __awaiter(this, void 0, void 0, function () {
                var authToken, messagingToken;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getAuthToken()];
                        case 1:
                            authToken = _a.sent();
                            return [4 /*yield*/, this.getMessagingToken()];
                        case 2:
                            messagingToken = _a.sent();
                            return [2 /*return*/, { authToken: authToken, messagingToken: messagingToken }];
                    }
                });
            });
        };
        return ContextProvider;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DEFAULT_REGION = 'us-central1';
    /**
     * Returns a Promise that will be rejected after the given duration.
     * The error will be of type FunctionsError.
     *
     * @param millis Number of milliseconds to wait before rejecting.
     */
    function failAfter(millis) {
        return new Promise(function (_, reject) {
            setTimeout(function () {
                reject(new FunctionsError('deadline-exceeded', 'deadline-exceeded'));
            }, millis);
        });
    }
    /**
     * The main class for the Firebase Functions SDK.
     * @internal
     */
    var FunctionsService = /** @class */ (function () {
        /**
         * Creates a new Functions service for the given app.
         * @param app - The FirebaseApp to use.
         */
        function FunctionsService(app, authProvider, messagingProvider, regionOrCustomDomain, fetchImpl) {
            var _this = this;
            if (regionOrCustomDomain === void 0) { regionOrCustomDomain = DEFAULT_REGION; }
            this.app = app;
            this.fetchImpl = fetchImpl;
            this.emulatorOrigin = null;
            this.contextProvider = new ContextProvider(authProvider, messagingProvider);
            // Cancels all ongoing requests when resolved.
            this.cancelAllRequests = new Promise(function (resolve) {
                _this.deleteService = function () {
                    return Promise.resolve(resolve());
                };
            });
            // Resolve the region or custom domain overload by attempting to parse it.
            try {
                var url = new URL(regionOrCustomDomain);
                this.customDomain = url.origin;
                this.region = DEFAULT_REGION;
            }
            catch (e) {
                this.customDomain = null;
                this.region = regionOrCustomDomain;
            }
        }
        FunctionsService.prototype._delete = function () {
            return this.deleteService();
        };
        /**
         * Returns the URL for a callable with the given name.
         * @param name - The name of the callable.
         * @internal
         */
        FunctionsService.prototype._url = function (name) {
            var projectId = this.app.options.projectId;
            if (this.emulatorOrigin !== null) {
                var origin_1 = this.emulatorOrigin;
                return origin_1 + "/" + projectId + "/" + this.region + "/" + name;
            }
            if (this.customDomain !== null) {
                return this.customDomain + "/" + name;
            }
            return "https://" + this.region + "-" + projectId + ".cloudfunctions.net/" + name;
        };
        return FunctionsService;
    }());
    /**
     * Modify this instance to communicate with the Cloud Functions emulator.
     *
     * Note: this must be called before this instance has been used to do any operations.
     *
     * @param host The emulator host (ex: localhost)
     * @param port The emulator port (ex: 5001)
     * @public
     */
    function useFunctionsEmulator(functionsInstance, host, port) {
        functionsInstance.emulatorOrigin = "http://" + host + ":" + port;
    }
    /**
     * Returns a reference to the callable https trigger with the given name.
     * @param name - The name of the trigger.
     * @public
     */
    function httpsCallable(functionsInstance, name, options) {
        return function (data) {
            return call(functionsInstance, name, data, options || {});
        };
    }
    /**
     * Does an HTTP POST and returns the completed response.
     * @param url The url to post to.
     * @param body The JSON body of the post.
     * @param headers The HTTP headers to include in the request.
     * @return A Promise that will succeed when the request finishes.
     */
    function postJSON(url, body, headers, fetchImpl) {
        return __awaiter(this, void 0, void 0, function () {
            var response, e_1, json, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        headers['Content-Type'] = 'application/json';
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, fetchImpl(url, {
                                method: 'POST',
                                body: JSON.stringify(body),
                                headers: headers
                            })];
                    case 2:
                        response = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        // This could be an unhandled error on the backend, or it could be a
                        // network error. There's no way to know, since an unhandled error on the
                        // backend will fail to set the proper CORS header, and thus will be
                        // treated as a network error by fetch.
                        return [2 /*return*/, {
                                status: 0,
                                json: null
                            }];
                    case 4:
                        json = null;
                        _a.label = 5;
                    case 5:
                        _a.trys.push([5, 7, , 8]);
                        return [4 /*yield*/, response.json()];
                    case 6:
                        json = _a.sent();
                        return [3 /*break*/, 8];
                    case 7:
                        e_2 = _a.sent();
                        return [3 /*break*/, 8];
                    case 8: return [2 /*return*/, {
                            status: response.status,
                            json: json
                        }];
                }
            });
        });
    }
    /**
     * Calls a callable function asynchronously and returns the result.
     * @param name The name of the callable trigger.
     * @param data The data to pass as params to the function.s
     */
    function call(functionsInstance, name, data, options) {
        return __awaiter(this, void 0, void 0, function () {
            var url, body, headers, context, timeout, response, error, responseData, decodedData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = functionsInstance._url(name);
                        // Encode any special types, such as dates, in the input data.
                        data = encode(data);
                        body = { data: data };
                        headers = {};
                        return [4 /*yield*/, functionsInstance.contextProvider.getContext()];
                    case 1:
                        context = _a.sent();
                        if (context.authToken) {
                            headers['Authorization'] = 'Bearer ' + context.authToken;
                        }
                        if (context.messagingToken) {
                            headers['Firebase-Instance-ID-Token'] = context.messagingToken;
                        }
                        timeout = options.timeout || 70000;
                        return [4 /*yield*/, Promise.race([
                                postJSON(url, body, headers, functionsInstance.fetchImpl),
                                failAfter(timeout),
                                functionsInstance.cancelAllRequests
                            ])];
                    case 2:
                        response = _a.sent();
                        // If service was deleted, interrupted response throws an error.
                        if (!response) {
                            throw new FunctionsError('cancelled', 'Firebase Functions instance was deleted.');
                        }
                        error = _errorForResponse(response.status, response.json);
                        if (error) {
                            throw error;
                        }
                        if (!response.json) {
                            throw new FunctionsError('internal', 'Response is not valid JSON object.');
                        }
                        responseData = response.json.data;
                        // TODO(klimt): For right now, allow "result" instead of "data", for
                        // backwards compatibility.
                        if (typeof responseData === 'undefined') {
                            responseData = response.json.result;
                        }
                        if (typeof responseData === 'undefined') {
                            // Consider the response malformed.
                            throw new FunctionsError('internal', 'Response is missing data field.');
                        }
                        decodedData = decode(responseData);
                        return [2 /*return*/, { data: decodedData }];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function registerFunctions(fetchImpl) {
        var factory = function (container, regionOrCustomDomain) {
            // Dependencies
            var app = container.getProvider('app-exp').getImmediate();
            var authProvider = container.getProvider('auth-internal');
            var messagingProvider = container.getProvider('messaging');
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return new FunctionsService(app, authProvider, messagingProvider, regionOrCustomDomain, fetchImpl);
        };
        app._registerComponent(new Component(FUNCTIONS_TYPE, factory, "PUBLIC" /* PUBLIC */).setMultipleInstances(true));
    }

    var name = "@firebase/functions-exp";
    var version = "0.0.900";

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns a Functions instance for the given app.
     * @param app - The FirebaseApp to use.
     * @param regionOrCustomDomain - one of:
     *   a) The region the callable functions are located in (ex: us-central1)
     *   b) A custom domain hosting the callable functions (ex: https://mydomain.com)
     * @public
     */
    function getFunctions(app$1, regionOrCustomDomain) {
        if (regionOrCustomDomain === void 0) { regionOrCustomDomain = DEFAULT_REGION; }
        // Dependencies
        var functionsProvider = app._getProvider(app$1, FUNCTIONS_TYPE);
        var functionsInstance = functionsProvider.getImmediate({
            identifier: regionOrCustomDomain
        });
        return functionsInstance;
    }
    /**
     * Modify this instance to communicate with the Cloud Functions emulator.
     *
     * Note: this must be called before this instance has been used to do any operations.
     *
     * @param host The emulator host (ex: localhost)
     * @param port The emulator port (ex: 5001)
     * @public
     */
    function useFunctionsEmulator$1(functionsInstance, host, port) {
        useFunctionsEmulator(functionsInstance, host, port);
    }
    /**
     * Returns a reference to the callable https trigger with the given name.
     * @param name - The name of the trigger.
     * @public
     */
    function httpsCallable$1(functionsInstance, name, options) {
        return httpsCallable(functionsInstance, name, options);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    registerFunctions(fetch.bind(self));
    app.registerVersion(name, version);

    exports.getFunctions = getFunctions;
    exports.httpsCallable = httpsCallable$1;
    exports.useFunctionsEmulator = useFunctionsEmulator$1;

    Object.defineProperty(exports, '__esModule', { value: true });


              }).apply(this, arguments);
            } catch(err) {
                console.error(err);
                throw new Error(
                  'Cannot instantiate firebase-functions.js - ' +
                  'be sure to load firebase-app.js first.'
                );
              }

})));


(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@firebase/app')) :
    typeof define === 'function' && define.amd ? define(['exports', '@firebase/app'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.firebase = global.firebase || {}, global.firebase.firestore = global.firebase.firestore || {}), global.firebase.app));
}(this, (function (exports, app) { 'use strict';

    try {
                (function() {

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns navigator.userAgent string or '' if it's not defined.
     * @return user agent string
     */
    function getUA() {
        if (typeof navigator !== 'undefined' &&
            typeof navigator['userAgent'] === 'string') {
            return navigator['userAgent'];
        }
        else {
            return '';
        }
    }
    /**
     * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.
     *
     * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap
     * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally
     * wait for a callback.
     */
    function isMobileCordova() {
        return (typeof window !== 'undefined' &&
            // @ts-ignore Setting up an broadly applicable index signature for Window
            // just to deal with this case would probably be a bad idea.
            !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&
            /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));
    }
    function isBrowserExtension() {
        var runtime = typeof chrome === 'object'
            ? chrome.runtime
            : typeof browser === 'object'
                ? browser.runtime
                : undefined;
        return typeof runtime === 'object' && runtime.id !== undefined;
    }
    /**
     * Detect React Native.
     *
     * @return true if ReactNative environment is detected.
     */
    function isReactNative() {
        return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');
    }
    /** Detects Electron apps. */
    function isElectron() {
        return getUA().indexOf('Electron/') >= 0;
    }
    /** Detects Internet Explorer. */
    function isIE() {
        var ua = getUA();
        return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;
    }
    /** Detects Universal Windows Platform apps. */
    function isUWP() {
        return getUA().indexOf('MSAppHost/') >= 0;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ERROR_NAME = 'FirebaseError';
    // Based on code from:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
    var FirebaseError = /** @class */ (function (_super) {
        __extends(FirebaseError, _super);
        function FirebaseError(code, message, customData) {
            var _this = _super.call(this, message) || this;
            _this.code = code;
            _this.customData = customData;
            _this.name = ERROR_NAME;
            // Fix For ES5
            // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
            Object.setPrototypeOf(_this, FirebaseError.prototype);
            // Maintains proper stack trace for where our error was thrown.
            // Only available on V8.
            if (Error.captureStackTrace) {
                Error.captureStackTrace(_this, ErrorFactory.prototype.create);
            }
            return _this;
        }
        return FirebaseError;
    }(Error));
    var ErrorFactory = /** @class */ (function () {
        function ErrorFactory(service, serviceName, errors) {
            this.service = service;
            this.serviceName = serviceName;
            this.errors = errors;
        }
        ErrorFactory.prototype.create = function (code) {
            var data = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                data[_i - 1] = arguments[_i];
            }
            var customData = data[0] || {};
            var fullCode = this.service + "/" + code;
            var template = this.errors[code];
            var message = template ? replaceTemplate(template, customData) : 'Error';
            // Service Name: Error message (service/code).
            var fullMessage = this.serviceName + ": " + message + " (" + fullCode + ").";
            var error = new FirebaseError(fullCode, fullMessage, customData);
            return error;
        };
        return ErrorFactory;
    }());
    function replaceTemplate(template, data) {
        return template.replace(PATTERN, function (_, key) {
            var value = data[key];
            return value != null ? String(value) : "<" + key + "?>";
        });
    }
    var PATTERN = /\{\$([^}]+)}/g;

    /**
     * Component for service name T, e.g. `auth`, `auth-internal`
     */
    var Component = /** @class */ (function () {
        /**
         *
         * @param name The public service name, e.g. app, auth, firestore, database
         * @param instanceFactory Service factory responsible for creating the public interface
         * @param type whether the service provided by the component is public or private
         */
        function Component(name, instanceFactory, type) {
            this.name = name;
            this.instanceFactory = instanceFactory;
            this.type = type;
            this.multipleInstances = false;
            /**
             * Properties to be added to the service namespace
             */
            this.serviceProps = {};
            this.instantiationMode = "LAZY" /* LAZY */;
        }
        Component.prototype.setInstantiationMode = function (mode) {
            this.instantiationMode = mode;
            return this;
        };
        Component.prototype.setMultipleInstances = function (multipleInstances) {
            this.multipleInstances = multipleInstances;
            return this;
        };
        Component.prototype.setServiceProps = function (props) {
            this.serviceProps = props;
            return this;
        };
        return Component;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a;
    /**
     * The JS SDK supports 5 log levels and also allows a user the ability to
     * silence the logs altogether.
     *
     * The order is a follows:
     * DEBUG < VERBOSE < INFO < WARN < ERROR
     *
     * All of the log types above the current log level will be captured (i.e. if
     * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
     * `VERBOSE` logs will not)
     */
    var LogLevel;
    (function (LogLevel) {
        LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
        LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
        LogLevel[LogLevel["INFO"] = 2] = "INFO";
        LogLevel[LogLevel["WARN"] = 3] = "WARN";
        LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
        LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
    })(LogLevel || (LogLevel = {}));
    var levelStringToEnum = {
        'debug': LogLevel.DEBUG,
        'verbose': LogLevel.VERBOSE,
        'info': LogLevel.INFO,
        'warn': LogLevel.WARN,
        'error': LogLevel.ERROR,
        'silent': LogLevel.SILENT
    };
    /**
     * The default log level
     */
    var defaultLogLevel = LogLevel.INFO;
    /**
     * By default, `console.debug` is not displayed in the developer console (in
     * chrome). To avoid forcing users to have to opt-in to these logs twice
     * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
     * logs to the `console.log` function.
     */
    var ConsoleMethod = (_a = {},
        _a[LogLevel.DEBUG] = 'log',
        _a[LogLevel.VERBOSE] = 'log',
        _a[LogLevel.INFO] = 'info',
        _a[LogLevel.WARN] = 'warn',
        _a[LogLevel.ERROR] = 'error',
        _a);
    /**
     * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
     * messages on to their corresponding console counterparts (if the log method
     * is supported by the current log level)
     */
    var defaultLogHandler = function (instance, logType) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        if (logType < instance.logLevel) {
            return;
        }
        var now = new Date().toISOString();
        var method = ConsoleMethod[logType];
        if (method) {
            console[method].apply(console, __spreadArrays(["[" + now + "]  " + instance.name + ":"], args));
        }
        else {
            throw new Error("Attempted to log a message with an invalid logType (value: " + logType + ")");
        }
    };
    var Logger = /** @class */ (function () {
        /**
         * Gives you an instance of a Logger to capture messages according to
         * Firebase's logging scheme.
         *
         * @param name The name that the logs will be associated with
         */
        function Logger(name) {
            this.name = name;
            /**
             * The log level of the given Logger instance.
             */
            this._logLevel = defaultLogLevel;
            /**
             * The main (internal) log handler for the Logger instance.
             * Can be set to a new function in internal package code but not by user.
             */
            this._logHandler = defaultLogHandler;
            /**
             * The optional, additional, user-defined log handler for the Logger instance.
             */
            this._userLogHandler = null;
        }
        Object.defineProperty(Logger.prototype, "logLevel", {
            get: function () {
                return this._logLevel;
            },
            set: function (val) {
                if (!(val in LogLevel)) {
                    throw new TypeError("Invalid value \"" + val + "\" assigned to `logLevel`");
                }
                this._logLevel = val;
            },
            enumerable: false,
            configurable: true
        });
        // Workaround for setter/getter having to be the same type.
        Logger.prototype.setLogLevel = function (val) {
            this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;
        };
        Object.defineProperty(Logger.prototype, "logHandler", {
            get: function () {
                return this._logHandler;
            },
            set: function (val) {
                if (typeof val !== 'function') {
                    throw new TypeError('Value assigned to `logHandler` must be a function');
                }
                this._logHandler = val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Logger.prototype, "userLogHandler", {
            get: function () {
                return this._userLogHandler;
            },
            set: function (val) {
                this._userLogHandler = val;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * The functions below are all based on the `console` interface
         */
        Logger.prototype.debug = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.DEBUG], args));
            this._logHandler.apply(this, __spreadArrays([this, LogLevel.DEBUG], args));
        };
        Logger.prototype.log = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.VERBOSE], args));
            this._logHandler.apply(this, __spreadArrays([this, LogLevel.VERBOSE], args));
        };
        Logger.prototype.info = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.INFO], args));
            this._logHandler.apply(this, __spreadArrays([this, LogLevel.INFO], args));
        };
        Logger.prototype.warn = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.WARN], args));
            this._logHandler.apply(this, __spreadArrays([this, LogLevel.WARN], args));
        };
        Logger.prototype.error = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.ERROR], args));
            this._logHandler.apply(this, __spreadArrays([this, LogLevel.ERROR], args));
        };
        return Logger;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics$1 = function(d, b) {
        extendStatics$1 = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics$1(d, b);
    };

    function __extends$1(d, b) {
        extendStatics$1(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    var h, goog = goog || {}, k = commonjsGlobal || self;
    function aa() { }
    function ba(a) { var b = typeof a; b = "object" != b ? b : a ? Array.isArray(a) ? "array" : b : "null"; return "array" == b || "object" == b && "number" == typeof a.length; }
    function n(a) { var b = typeof a; return "object" == b && null != a || "function" == b; }
    function ca(a) { return Object.prototype.hasOwnProperty.call(a, da) && a[da] || (a[da] = ++ea); }
    var da = "closure_uid_" + (1E9 * Math.random() >>> 0), ea = 0;
    function fa(a, b, c) { return a.call.apply(a.bind, arguments); }
    function ha(a, b, c) { if (!a)
        throw Error(); if (2 < arguments.length) {
        var d = Array.prototype.slice.call(arguments, 2);
        return function () { var e = Array.prototype.slice.call(arguments); Array.prototype.unshift.apply(e, d); return a.apply(b, e); };
    } return function () { return a.apply(b, arguments); }; }
    function p(a, b, c) { Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? p = fa : p = ha; return p.apply(null, arguments); }
    function ja(a, b) { var c = Array.prototype.slice.call(arguments, 1); return function () { var d = c.slice(); d.push.apply(d, arguments); return a.apply(this, d); }; }
    function q() { return Date.now(); }
    function r(a, b) { function c() { } c.prototype = b.prototype; a.X = b.prototype; a.prototype = new c; a.prototype.constructor = a; a.Kb = function (d, e, f) { for (var g = Array(arguments.length - 2), m = 2; m < arguments.length; m++)
        g[m - 2] = arguments[m]; return b.prototype[e].apply(d, g); }; }
    function t() { this.j = this.j; this.i = this.i; }
    var ka = 0;
    t.prototype.j = !1;
    t.prototype.ja = function () { if (!this.j && (this.j = !0, this.G(), 0 != ka)) {
        var a = ca(this);
    } };
    t.prototype.G = function () { if (this.i)
        for (; this.i.length;)
            this.i.shift()(); };
    var ma = Array.prototype.indexOf ? function (a, b) { return Array.prototype.indexOf.call(a, b, void 0); } : function (a, b) { if ("string" === typeof a)
        return "string" !== typeof b || 1 != b.length ? -1 : a.indexOf(b, 0); for (var c = 0; c < a.length; c++)
        if (c in a && a[c] === b)
            return c; return -1; }, na = Array.prototype.forEach ? function (a, b, c) { Array.prototype.forEach.call(a, b, c); } : function (a, b, c) { for (var d = a.length, e = "string" === typeof a ? a.split("") : a, f = 0; f < d; f++)
        f in e && b.call(c, e[f], f, a); };
    function oa(a) { a: {
        var b = pa;
        for (var c = a.length, d = "string" === typeof a ? a.split("") : a, e = 0; e < c; e++)
            if (e in d && b.call(void 0, d[e], e, a)) {
                b = e;
                break a;
            }
        b = -1;
    } return 0 > b ? null : "string" === typeof a ? a.charAt(b) : a[b]; }
    function qa(a) { return Array.prototype.concat.apply([], arguments); }
    function ra(a) { var b = a.length; if (0 < b) {
        for (var c = Array(b), d = 0; d < b; d++)
            c[d] = a[d];
        return c;
    } return []; }
    function sa(a) { return /^[\s\xa0]*$/.test(a); }
    var ta = String.prototype.trim ? function (a) { return a.trim(); } : function (a) { return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1]; };
    function v(a, b) { return -1 != a.indexOf(b); }
    function ua(a, b) { return a < b ? -1 : a > b ? 1 : 0; }
    var w;
    a: {
        var va = k.navigator;
        if (va) {
            var wa = va.userAgent;
            if (wa) {
                w = wa;
                break a;
            }
        }
        w = "";
    }
    function za(a, b, c) { for (var d in a)
        b.call(c, a[d], d, a); }
    function Aa(a) { var b = {}; for (var c in a)
        b[c] = a[c]; return b; }
    var Ba = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
    function Ca(a, b) { var c, d; for (var e = 1; e < arguments.length; e++) {
        d = arguments[e];
        for (c in d)
            a[c] = d[c];
        for (var f = 0; f < Ba.length; f++)
            c = Ba[f], Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]);
    } }
    function Da(a) { Da[" "](a); return a; }
    Da[" "] = aa;
    function Ea(a, b) { var c = Fa; return Object.prototype.hasOwnProperty.call(c, a) ? c[a] : c[a] = b(a); }
    var Ga = v(w, "Opera"), x = v(w, "Trident") || v(w, "MSIE"), Ha = v(w, "Edge"), Ia = Ha || x, Ja = v(w, "Gecko") && !(v(w.toLowerCase(), "webkit") && !v(w, "Edge")) && !(v(w, "Trident") || v(w, "MSIE")) && !v(w, "Edge"), Ka = v(w.toLowerCase(), "webkit") && !v(w, "Edge");
    function La() { var a = k.document; return a ? a.documentMode : void 0; }
    var Ma;
    a: {
        var Na = "", Oa = function () { var a = w; if (Ja)
            return /rv:([^\);]+)(\)|;)/.exec(a); if (Ha)
            return /Edge\/([\d\.]+)/.exec(a); if (x)
            return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a); if (Ka)
            return /WebKit\/(\S+)/.exec(a); if (Ga)
            return /(?:Version)[ \/]?(\S+)/.exec(a); }();
        Oa && (Na = Oa ? Oa[1] : "");
        if (x) {
            var Pa = La();
            if (null != Pa && Pa > parseFloat(Na)) {
                Ma = String(Pa);
                break a;
            }
        }
        Ma = Na;
    }
    var Fa = {};
    function Qa(a) { return Ea(a, function () { {
        var b = 0;
        var e = ta(String(Ma)).split("."), f = ta(String(a)).split("."), g = Math.max(e.length, f.length);
        for (var m = 0; 0 == b && m < g; m++) {
            var c = e[m] || "", d = f[m] || "";
            do {
                c = /(\d*)(\D*)(.*)/.exec(c) || ["", "", "", ""];
                d = /(\d*)(\D*)(.*)/.exec(d) || ["", "", "", ""];
                if (0 == c[0].length && 0 == d[0].length)
                    break;
                b = ua(0 == c[1].length ? 0 : parseInt(c[1], 10), 0 == d[1].length ? 0 : parseInt(d[1], 10)) || ua(0 == c[2].length, 0 == d[2].length) || ua(c[2], d[2]);
                c = c[3];
                d = d[3];
            } while (0 == b);
        }
    } return 0 <= b; }); }
    var Ra;
    if (k.document && x) {
        var Sa = La();
        Ra = Sa ? Sa : parseInt(Ma, 10) || void 0;
    }
    else
        Ra = void 0;
    var Ta = Ra;
    var Ua = !x || 9 <= Number(Ta), Va = x && !Qa("9"), Wa = function () { if (!k.addEventListener || !Object.defineProperty)
        return !1; var a = !1, b = Object.defineProperty({}, "passive", { get: function () { a = !0; } }); try {
        k.addEventListener("test", aa, b), k.removeEventListener("test", aa, b);
    }
    catch (c) { } return a; }();
    function y(a, b) { this.type = a; this.a = this.target = b; this.defaultPrevented = !1; }
    y.prototype.b = function () { this.defaultPrevented = !0; };
    function z(a, b) {
        y.call(this, a ? a.type : "");
        this.relatedTarget = this.a = this.target = null;
        this.button = this.screenY = this.screenX = this.clientY = this.clientX = 0;
        this.key = "";
        this.metaKey = this.shiftKey = this.altKey = this.ctrlKey = !1;
        this.pointerId = 0;
        this.pointerType = "";
        this.c = null;
        if (a) {
            var c = this.type = a.type, d = a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : null;
            this.target = a.target || a.srcElement;
            this.a = b;
            if (b = a.relatedTarget) {
                if (Ja) {
                    a: {
                        try {
                            Da(b.nodeName);
                            var e = !0;
                            break a;
                        }
                        catch (f) { }
                        e = !1;
                    }
                    e || (b = null);
                }
            }
            else
                "mouseover" ==
                    c ? b = a.fromElement : "mouseout" == c && (b = a.toElement);
            this.relatedTarget = b;
            d ? (this.clientX = void 0 !== d.clientX ? d.clientX : d.pageX, this.clientY = void 0 !== d.clientY ? d.clientY : d.pageY, this.screenX = d.screenX || 0, this.screenY = d.screenY || 0) : (this.clientX = void 0 !== a.clientX ? a.clientX : a.pageX, this.clientY = void 0 !== a.clientY ? a.clientY : a.pageY, this.screenX = a.screenX || 0, this.screenY = a.screenY || 0);
            this.button = a.button;
            this.key = a.key || "";
            this.ctrlKey = a.ctrlKey;
            this.altKey = a.altKey;
            this.shiftKey = a.shiftKey;
            this.metaKey =
                a.metaKey;
            this.pointerId = a.pointerId || 0;
            this.pointerType = "string" === typeof a.pointerType ? a.pointerType : Xa[a.pointerType] || "";
            this.c = a;
            a.defaultPrevented && this.b();
        }
    }
    r(z, y);
    var Xa = { 2: "touch", 3: "pen", 4: "mouse" };
    z.prototype.b = function () { z.X.b.call(this); var a = this.c; if (a.preventDefault)
        a.preventDefault();
    else if (a.returnValue = !1, Va)
        try {
            if (a.ctrlKey || 112 <= a.keyCode && 123 >= a.keyCode)
                a.keyCode = -1;
        }
        catch (b) { } };
    var A = "closure_listenable_" + (1E6 * Math.random() | 0), Ya = 0;
    function Za(a, b, c, d, e) { this.listener = a; this.proxy = null; this.src = b; this.type = c; this.capture = !!d; this.ca = e; this.key = ++Ya; this.Y = this.Z = !1; }
    function $a(a) { a.Y = !0; a.listener = null; a.proxy = null; a.src = null; a.ca = null; }
    function ab(a) { this.src = a; this.a = {}; this.b = 0; }
    ab.prototype.add = function (a, b, c, d, e) { var f = a.toString(); a = this.a[f]; a || (a = this.a[f] = [], this.b++); var g = bb(a, b, d, e); -1 < g ? (b = a[g], c || (b.Z = !1)) : (b = new Za(b, this.src, f, !!d, e), b.Z = c, a.push(b)); return b; };
    function cb(a, b) { var c = b.type; if (c in a.a) {
        var d = a.a[c], e = ma(d, b), f;
        (f = 0 <= e) && Array.prototype.splice.call(d, e, 1);
        f && ($a(b), 0 == a.a[c].length && (delete a.a[c], a.b--));
    } }
    function bb(a, b, c, d) { for (var e = 0; e < a.length; ++e) {
        var f = a[e];
        if (!f.Y && f.listener == b && f.capture == !!c && f.ca == d)
            return e;
    } return -1; }
    var db = "closure_lm_" + (1E6 * Math.random() | 0), eb = {};
    function gb(a, b, c, d, e) { if (d && d.once)
        return hb(a, b, c, d, e); if (Array.isArray(b)) {
        for (var f = 0; f < b.length; f++)
            gb(a, b[f], c, d, e);
        return null;
    } c = ib(c); return a && a[A] ? a.va(b, c, n(d) ? !!d.capture : !!d, e) : jb(a, b, c, !1, d, e); }
    function jb(a, b, c, d, e, f) {
        if (!b)
            throw Error("Invalid event type");
        var g = n(e) ? !!e.capture : !!e;
        if (g && !Ua)
            return null;
        var m = kb(a);
        m || (a[db] = m = new ab(a));
        c = m.add(b, c, d, g, f);
        if (c.proxy)
            return c;
        d = lb();
        c.proxy = d;
        d.src = a;
        d.listener = c;
        if (a.addEventListener)
            Wa || (e = g), void 0 === e && (e = !1), a.addEventListener(b.toString(), d, e);
        else if (a.attachEvent)
            a.attachEvent(mb(b.toString()), d);
        else if (a.addListener && a.removeListener)
            a.addListener(d);
        else
            throw Error("addEventListener and attachEvent are unavailable.");
        return c;
    }
    function lb() { var a = nb, b = Ua ? function (c) { return a.call(b.src, b.listener, c); } : function (c) { c = a.call(b.src, b.listener, c); if (!c)
        return c; }; return b; }
    function hb(a, b, c, d, e) { if (Array.isArray(b)) {
        for (var f = 0; f < b.length; f++)
            hb(a, b[f], c, d, e);
        return null;
    } c = ib(c); return a && a[A] ? a.wa(b, c, n(d) ? !!d.capture : !!d, e) : jb(a, b, c, !0, d, e); }
    function ob(a, b, c, d, e) { if (Array.isArray(b))
        for (var f = 0; f < b.length; f++)
            ob(a, b[f], c, d, e);
    else
        (d = n(d) ? !!d.capture : !!d, c = ib(c), a && a[A]) ? (a = a.c, b = String(b).toString(), b in a.a && (f = a.a[b], c = bb(f, c, d, e), -1 < c && ($a(f[c]), Array.prototype.splice.call(f, c, 1), 0 == f.length && (delete a.a[b], a.b--)))) : a && (a = kb(a)) && (b = a.a[b.toString()], a = -1, b && (a = bb(b, c, d, e)), (c = -1 < a ? b[a] : null) && pb(c)); }
    function pb(a) { if ("number" !== typeof a && a && !a.Y) {
        var b = a.src;
        if (b && b[A])
            cb(b.c, a);
        else {
            var c = a.type, d = a.proxy;
            b.removeEventListener ? b.removeEventListener(c, d, a.capture) : b.detachEvent ? b.detachEvent(mb(c), d) : b.addListener && b.removeListener && b.removeListener(d);
            (c = kb(b)) ? (cb(c, a), 0 == c.b && (c.src = null, b[db] = null)) : $a(a);
        }
    } }
    function mb(a) { return a in eb ? eb[a] : eb[a] = "on" + a; }
    function qb(a, b) { var c = a.listener, d = a.ca || a.src; a.Z && pb(a); return c.call(d, b); }
    function nb(a, b) { if (a.Y)
        return !0; if (!Ua) {
        if (!b)
            a: {
                b = ["window", "event"];
                for (var c = k, d = 0; d < b.length; d++)
                    if (c = c[b[d]], null == c) {
                        b = null;
                        break a;
                    }
                b = c;
            }
        b = new z(b, this);
        return qb(a, b);
    } return qb(a, new z(b, this)); }
    function kb(a) { a = a[db]; return a instanceof ab ? a : null; }
    var sb = "__closure_events_fn_" + (1E9 * Math.random() >>> 0);
    function ib(a) { if ("function" === typeof a)
        return a; a[sb] || (a[sb] = function (b) { return a.handleEvent(b); }); return a[sb]; }
    function D() { t.call(this); this.c = new ab(this); this.J = this; this.C = null; }
    r(D, t);
    D.prototype[A] = !0;
    h = D.prototype;
    h.addEventListener = function (a, b, c, d) { gb(this, a, b, c, d); };
    h.removeEventListener = function (a, b, c, d) { ob(this, a, b, c, d); };
    function E(a, b) { var c, d = a.C; if (d)
        for (c = []; d; d = d.C)
            c.push(d); a = a.J; d = b.type || b; if ("string" === typeof b)
        b = new y(b, a);
    else if (b instanceof y)
        b.target = b.target || a;
    else {
        var e = b;
        b = new y(d, a);
        Ca(b, e);
    } e = !0; if (c)
        for (var f = c.length - 1; 0 <= f; f--) {
            var g = b.a = c[f];
            e = tb(g, d, !0, b) && e;
        } g = b.a = a; e = tb(g, d, !0, b) && e; e = tb(g, d, !1, b) && e; if (c)
        for (f = 0; f < c.length; f++)
            g = b.a = c[f], e = tb(g, d, !1, b) && e; }
    h.G = function () { D.X.G.call(this); if (this.c) {
        var a = this.c, c;
        for (c in a.a) {
            for (var d = a.a[c], e = 0; e < d.length; e++)
                $a(d[e]);
            delete a.a[c];
            a.b--;
        }
    } this.C = null; };
    h.va = function (a, b, c, d) { return this.c.add(String(a), b, !1, c, d); };
    h.wa = function (a, b, c, d) { return this.c.add(String(a), b, !0, c, d); };
    function tb(a, b, c, d) { b = a.c.a[String(b)]; if (!b)
        return !0; b = b.concat(); for (var e = !0, f = 0; f < b.length; ++f) {
        var g = b[f];
        if (g && !g.Y && g.capture == c) {
            var m = g.listener, l = g.ca || g.src;
            g.Z && cb(a.c, g);
            e = !1 !== m.call(l, d) && e;
        }
    } return e && !d.defaultPrevented; }
    var ub = k.JSON.stringify;
    function vb() { this.b = this.a = null; }
    var xb = new /** @class */ (function () {
        function class_1(a, b) {
            this.c = a;
            this.f = b;
            this.b = 0;
            this.a = null;
        }
        class_1.prototype.get = function () { var a; 0 < this.b ? (this.b--, a = this.a, this.a = a.next, a.next = null) : a = this.c(); return a; };
        return class_1;
    }())(function () { return new wb; }, function (a) { a.reset(); });
    vb.prototype.add = function (a, b) { var c = xb.get(); c.set(a, b); this.b ? this.b.next = c : this.a = c; this.b = c; };
    function yb() { var a = zb, b = null; a.a && (b = a.a, a.a = a.a.next, a.a || (a.b = null), b.next = null); return b; }
    function wb() { this.next = this.b = this.a = null; }
    wb.prototype.set = function (a, b) { this.a = a; this.b = b; this.next = null; };
    wb.prototype.reset = function () { this.next = this.b = this.a = null; };
    function Ab(a) { k.setTimeout(function () { throw a; }, 0); }
    function Bb(a, b) { Cb || Db(); Eb || (Cb(), Eb = !0); zb.add(a, b); }
    var Cb;
    function Db() { var a = k.Promise.resolve(void 0); Cb = function () { a.then(Fb); }; }
    var Eb = !1, zb = new vb;
    function Fb() { for (var a; a = yb();) {
        try {
            a.a.call(a.b);
        }
        catch (c) {
            Ab(c);
        }
        var b = xb;
        b.f(a);
        100 > b.b && (b.b++, a.next = b.a, b.a = a);
    } Eb = !1; }
    function Gb(a, b) { D.call(this); this.b = a || 1; this.a = b || k; this.f = p(this.Za, this); this.g = q(); }
    r(Gb, D);
    h = Gb.prototype;
    h.aa = !1;
    h.M = null;
    h.Za = function () { if (this.aa) {
        var a = q() - this.g;
        0 < a && a < .8 * this.b ? this.M = this.a.setTimeout(this.f, this.b - a) : (this.M && (this.a.clearTimeout(this.M), this.M = null), E(this, "tick"), this.aa && (Hb(this), this.start()));
    } };
    h.start = function () { this.aa = !0; this.M || (this.M = this.a.setTimeout(this.f, this.b), this.g = q()); };
    function Hb(a) { a.aa = !1; a.M && (a.a.clearTimeout(a.M), a.M = null); }
    h.G = function () { Gb.X.G.call(this); Hb(this); delete this.a; };
    function Ib(a, b, c) { if ("function" === typeof a)
        c && (a = p(a, c));
    else if (a && "function" == typeof a.handleEvent)
        a = p(a.handleEvent, a);
    else
        throw Error("Invalid listener argument"); return 2147483647 < Number(b) ? -1 : k.setTimeout(a, b || 0); }
    function Jb(a) { a.a = Ib(function () { a.a = null; a.c && (a.c = !1, Jb(a)); }, a.h); var b = a.b; a.b = null; a.g.apply(null, b); }
    var Kb = /** @class */ (function (_super) {
        __extends$1(Kb, _super);
        function Kb(a, b) {
            var _this = _super.call(this) || this;
            _this.g = a;
            _this.h = b;
            _this.b = null;
            _this.c = !1;
            _this.a = null;
            return _this;
        }
        Kb.prototype.f = function (a) { this.b = arguments; this.a ? this.c = !0 : Jb(this); };
        Kb.prototype.G = function () { _super.prototype.G.call(this); this.a && (k.clearTimeout(this.a), this.a = null, this.c = !1, this.b = null); };
        return Kb;
    }(t));
    function F(a) { t.call(this); this.b = a; this.a = {}; }
    r(F, t);
    var Lb = [];
    function Mb(a, b, c, d) { Array.isArray(c) || (c && (Lb[0] = c.toString()), c = Lb); for (var e = 0; e < c.length; e++) {
        var f = gb(b, c[e], d || a.handleEvent, !1, a.b || a);
        if (!f)
            break;
        a.a[f.key] = f;
    } }
    function Nb(a) { za(a.a, function (b, c) { this.a.hasOwnProperty(c) && pb(b); }, a); a.a = {}; }
    F.prototype.G = function () { F.X.G.call(this); Nb(this); };
    F.prototype.handleEvent = function () { throw Error("EventHandler.handleEvent not implemented"); };
    function Ob() { this.a = !0; }
    function Pb(a, b, c, d, e, f) { a.info(function () { if (a.a)
        if (f) {
            var g = "";
            for (var m = f.split("&"), l = 0; l < m.length; l++) {
                var u = m[l].split("=");
                if (1 < u.length) {
                    var C = u[0];
                    u = u[1];
                    var B = C.split("_");
                    g = 2 <= B.length && "type" == B[1] ? g + (C + "=" + u + "&") : g + (C + "=redacted&");
                }
            }
        }
        else
            g = null;
    else
        g = f; return "XMLHTTP REQ (" + d + ") [attempt " + e + "]: " + b + "\n" + c + "\n" + g; }); }
    function Qb(a, b, c, d, e, f, g) { a.info(function () { return "XMLHTTP RESP (" + d + ") [ attempt " + e + "]: " + b + "\n" + c + "\n" + f + " " + g; }); }
    function G(a, b, c, d) { a.info(function () { return "XMLHTTP TEXT (" + b + "): " + Rb(a, c) + (d ? " " + d : ""); }); }
    function Sb(a, b) { a.info(function () { return "TIMEOUT: " + b; }); }
    Ob.prototype.info = function () { };
    function Rb(a, b) { if (!a.a)
        return b; if (!b)
        return null; try {
        var c = JSON.parse(b);
        if (c)
            for (a = 0; a < c.length; a++)
                if (Array.isArray(c[a])) {
                    var d = c[a];
                    if (!(2 > d.length)) {
                        var e = d[1];
                        if (Array.isArray(e) && !(1 > e.length)) {
                            var f = e[0];
                            if ("noop" != f && "stop" != f && "close" != f)
                                for (var g = 1; g < e.length; g++)
                                    e[g] = "";
                        }
                    }
                }
        return ub(c);
    }
    catch (m) {
        return b;
    } }
    var H = {}, Tb = null;
    function Ub() { return Tb = Tb || new D; }
    H.Fa = "serverreachability";
    function Vb(a) { y.call(this, H.Fa, a); }
    r(Vb, y);
    function I(a) { var b = Ub(); E(b, new Vb(b, a)); }
    H.STAT_EVENT = "statevent";
    function Wb(a, b) { y.call(this, H.STAT_EVENT, a); this.stat = b; }
    r(Wb, y);
    function J(a) { var b = Ub(); E(b, new Wb(b, a)); }
    H.Ga = "timingevent";
    function Xb(a) { y.call(this, H.Ga, a); }
    r(Xb, y);
    function K(a, b) { if ("function" !== typeof a)
        throw Error("Fn must not be null and must be a function"); return k.setTimeout(function () { a(); }, b); }
    var Yb = { NO_ERROR: 0, $a: 1, nb: 2, mb: 3, hb: 4, lb: 5, ob: 6, Da: 7, TIMEOUT: 8, rb: 9 };
    var Zb = { fb: "complete", Bb: "success", Ea: "error", Da: "abort", tb: "ready", ub: "readystatechange", TIMEOUT: "timeout", pb: "incrementaldata", sb: "progress", ib: "downloadprogress", Jb: "uploadprogress" };
    function $b() { }
    $b.prototype.a = null;
    function ac(a) { var b; (b = a.a) || (b = a.a = {}); return b; }
    function bc() { }
    var L = { OPEN: "a", eb: "b", Ea: "c", qb: "d" };
    function cc() { y.call(this, "d"); }
    r(cc, y);
    function dc() { y.call(this, "c"); }
    r(dc, y);
    var ec;
    function fc() { }
    r(fc, $b);
    ec = new fc;
    function M(a, b, c, d) { this.g = a; this.c = b; this.f = c; this.S = d || 1; this.J = new F(this); this.P = gc; a = Ia ? 125 : void 0; this.R = new Gb(a); this.B = null; this.b = !1; this.j = this.l = this.i = this.H = this.u = this.T = this.o = null; this.s = []; this.a = null; this.D = 0; this.h = this.m = null; this.N = -1; this.A = !1; this.O = 0; this.F = null; this.V = this.C = this.U = this.I = !1; }
    var gc = 45E3, hc = {}, ic = {};
    h = M.prototype;
    h.setTimeout = function (a) { this.P = a; };
    function jc(a, b, c) { a.H = 1; a.i = kc(N(b)); a.j = c; a.I = !0; lc(a, null); }
    function lc(a, b) { a.u = q(); mc(a); a.l = N(a.i); var c = a.l, d = a.S; Array.isArray(d) || (d = [String(d)]); nc(c.b, "t", d); a.D = 0; a.a = oc(a.g, a.g.C ? b : null); 0 < a.O && (a.F = new Kb(p(a.Ca, a, a.a), a.O)); Mb(a.J, a.a, "readystatechange", a.Xa); b = a.B ? Aa(a.B) : {}; a.j ? (a.m || (a.m = "POST"), b["Content-Type"] = "application/x-www-form-urlencoded", a.a.ba(a.l, a.m, a.j, b)) : (a.m = "GET", a.a.ba(a.l, a.m, null, b)); I(1); Pb(a.c, a.m, a.l, a.f, a.S, a.j); }
    h.Xa = function (a) { a = a.target; var b = this.F; b && 3 == O(a) ? b.f() : this.Ca(a); };
    h.Ca = function (a) {
        try {
            if (a == this.a)
                a: {
                    var b = O(this.a), c = this.a.ua(), d = this.a.W();
                    if (!(3 > b || 3 == b && !Ia && !this.a.$())) {
                        this.A || 4 != b || 7 == c || (8 == c || 0 >= d ? I(3) : I(2));
                        pc(this);
                        var e = this.a.W();
                        this.N = e;
                        var f = this.a.$();
                        this.b = 200 == e;
                        Qb(this.c, this.m, this.l, this.f, this.S, b, e);
                        if (this.b) {
                            if (this.U && !this.C) {
                                b: {
                                    if (this.a) {
                                        var g, m = this.a;
                                        if ((g = m.a ? m.a.getResponseHeader("X-HTTP-Initial-Response") : null) && !sa(g)) {
                                            var l = g;
                                            break b;
                                        }
                                    }
                                    l = null;
                                }
                                if (l)
                                    G(this.c, this.f, l, "Initial handshake response via X-HTTP-Initial-Response"),
                                        this.C = !0, qc(this, l);
                                else {
                                    this.b = !1;
                                    this.h = 3;
                                    J(12);
                                    P(this);
                                    rc(this);
                                    break a;
                                }
                            }
                            this.I ? (sc(this, b, f), Ia && this.b && 3 == b && (Mb(this.J, this.R, "tick", this.Wa), this.R.start())) : (G(this.c, this.f, f, null), qc(this, f));
                            4 == b && P(this);
                            this.b && !this.A && (4 == b ? uc(this.g, this) : (this.b = !1, mc(this)));
                        }
                        else
                            400 == e && 0 < f.indexOf("Unknown SID") ? (this.h = 3, J(12)) : (this.h = 0, J(13)), P(this), rc(this);
                    }
                }
        }
        catch (u) { }
        finally { }
    };
    function sc(a, b, c) { for (var d = !0; !a.A && a.D < c.length;) {
        var e = vc(a, c);
        if (e == ic) {
            4 == b && (a.h = 4, J(14), d = !1);
            G(a.c, a.f, null, "[Incomplete Response]");
            break;
        }
        else if (e == hc) {
            a.h = 4;
            J(15);
            G(a.c, a.f, c, "[Invalid Chunk]");
            d = !1;
            break;
        }
        else
            G(a.c, a.f, e, null), qc(a, e);
    } 4 == b && 0 == c.length && (a.h = 1, J(16), d = !1); a.b = a.b && d; d ? 0 < c.length && !a.V && (a.V = !0, b = a.g, b.a == a && b.U && !b.F && (b.c.info("Great, no buffering proxy detected. Bytes received: " + c.length), wc(b), b.F = !0, J(11))) : (G(a.c, a.f, c, "[Invalid Chunked Response]"), P(a), rc(a)); }
    h.Wa = function () { if (this.a) {
        var a = O(this.a), b = this.a.$();
        this.D < b.length && (pc(this), sc(this, a, b), this.b && 4 != a && mc(this));
    } };
    function vc(a, b) { var c = a.D, d = b.indexOf("\n", c); if (-1 == d)
        return ic; c = Number(b.substring(c, d)); if (isNaN(c))
        return hc; d += 1; if (d + c > b.length)
        return ic; b = b.substr(d, c); a.D = d + c; return b; }
    h.cancel = function () { this.A = !0; P(this); };
    function mc(a) { a.T = q() + a.P; yc(a, a.P); }
    function yc(a, b) { if (null != a.o)
        throw Error("WatchDog timer not null"); a.o = K(p(a.Va, a), b); }
    function pc(a) { a.o && (k.clearTimeout(a.o), a.o = null); }
    h.Va = function () { this.o = null; var a = q(); 0 <= a - this.T ? (Sb(this.c, this.l), 2 != this.H && (I(3), J(17)), P(this), this.h = 2, rc(this)) : yc(this, this.T - a); };
    function rc(a) { 0 == a.g.v || a.A || uc(a.g, a); }
    function P(a) { pc(a); var b = a.F; b && "function" == typeof b.ja && b.ja(); a.F = null; Hb(a.R); Nb(a.J); a.a && (b = a.a, a.a = null, b.abort(), b.ja()); }
    function qc(a, b) {
        try {
            var c = a.g;
            if (0 != c.v && (c.a == a || zc(c.b, a)))
                if (c.I = a.N, !a.C && zc(c.b, a) && 3 == c.v) {
                    try {
                        var d = c.ka.a.parse(b);
                    }
                    catch (tc) {
                        d = null;
                    }
                    if (Array.isArray(d) && 3 == d.length) {
                        var e = d;
                        if (0 == e[0])
                            a: {
                                if (!c.j) {
                                    if (c.a)
                                        if (c.a.u + 3E3 < a.u)
                                            Ac(c), Bc(c);
                                        else
                                            break a;
                                    Cc(c);
                                    J(18);
                                }
                            }
                        else
                            c.oa = e[1], 0 < c.oa - c.P && 37500 > e[2] && c.H && 0 == c.o && !c.m && (c.m = K(p(c.Sa, c), 6E3));
                        if (1 >= Dc(c.b) && c.ea) {
                            try {
                                c.ea();
                            }
                            catch (tc) { }
                            c.ea = void 0;
                        }
                    }
                    else
                        Q(c, 11);
                }
                else if ((a.C || c.a == a) && Ac(c), !sa(b))
                    for (b = d = c.ka.a.parse(b), d = 0; d < b.length; d++)
                        if (e =
                            b[d], c.P = e[0], e = e[1], 2 == c.v)
                            if ("c" == e[0]) {
                                c.J = e[1];
                                c.ga = e[2];
                                var f = e[3];
                                null != f && (c.ha = f, c.c.info("VER=" + c.ha));
                                var g = e[4];
                                null != g && (c.pa = g, c.c.info("SVER=" + c.pa));
                                var m = e[5];
                                if (null != m && "number" === typeof m && 0 < m) {
                                    var l = 1.5 * m;
                                    c.D = l;
                                    c.c.info("backChannelRequestTimeoutMs_=" + l);
                                }
                                l = c;
                                var u = a.a;
                                if (u) {
                                    var C = u.a ? u.a.getResponseHeader("X-Client-Wire-Protocol") : null;
                                    if (C) {
                                        var B = l.b;
                                        !B.a && (v(C, "spdy") || v(C, "quic") || v(C, "h2")) && (B.f = B.g, B.a = new Set, B.b && (Ec(B, B.b), B.b = null));
                                    }
                                    if (l.A) {
                                        var rb = u.a ? u.a.getResponseHeader("X-HTTP-Session-Id") :
                                            null;
                                        rb && (l.na = rb, R(l.B, l.A, rb));
                                    }
                                }
                                c.v = 3;
                                c.f && c.f.ta();
                                c.U && (c.N = q() - a.u, c.c.info("Handshake RTT: " + c.N + "ms"));
                                l = c;
                                var xa = a;
                                l.la = Fc(l, l.C ? l.ga : null, l.fa);
                                if (xa.C) {
                                    Gc(l.b, xa);
                                    var ya = xa, xc = l.D;
                                    xc && ya.setTimeout(xc);
                                    ya.o && (pc(ya), mc(ya));
                                    l.a = xa;
                                }
                                else
                                    Hc(l);
                                0 < c.g.length && Ic(c);
                            }
                            else
                                "stop" != e[0] && "close" != e[0] || Q(c, 7);
                        else
                            3 == c.v && ("stop" == e[0] || "close" == e[0] ? "stop" == e[0] ? Q(c, 7) : Jc(c) : "noop" != e[0] && c.f && c.f.sa(e), c.o = 0);
            I(4);
        }
        catch (tc) { }
    }
    function Kc(a) { if (a.K && "function" == typeof a.K)
        return a.K(); if ("string" === typeof a)
        return a.split(""); if (ba(a)) {
        for (var b = [], c = a.length, d = 0; d < c; d++)
            b.push(a[d]);
        return b;
    } b = []; c = 0; for (d in a)
        b[c++] = a[d]; return a = b; }
    function Lc(a, b) { if (a.forEach && "function" == typeof a.forEach)
        a.forEach(b, void 0);
    else if (ba(a) || "string" === typeof a)
        na(a, b, void 0);
    else {
        if (a.L && "function" == typeof a.L)
            var c = a.L();
        else if (a.K && "function" == typeof a.K)
            c = void 0;
        else if (ba(a) || "string" === typeof a) {
            c = [];
            for (var d = a.length, e = 0; e < d; e++)
                c.push(e);
        }
        else
            for (e in c = [], d = 0, a)
                c[d++] = e;
        d = Kc(a);
        e = d.length;
        for (var f = 0; f < e; f++)
            b.call(void 0, d[f], c && c[f], a);
    } }
    function S(a, b) { this.b = {}; this.a = []; this.c = 0; var c = arguments.length; if (1 < c) {
        if (c % 2)
            throw Error("Uneven number of arguments");
        for (var d = 0; d < c; d += 2)
            this.set(arguments[d], arguments[d + 1]);
    }
    else if (a)
        if (a instanceof S)
            for (c = a.L(), d = 0; d < c.length; d++)
                this.set(c[d], a.get(c[d]));
        else
            for (d in a)
                this.set(d, a[d]); }
    h = S.prototype;
    h.K = function () { Mc(this); for (var a = [], b = 0; b < this.a.length; b++)
        a.push(this.b[this.a[b]]); return a; };
    h.L = function () { Mc(this); return this.a.concat(); };
    function Mc(a) { if (a.c != a.a.length) {
        for (var b = 0, c = 0; b < a.a.length;) {
            var d = a.a[b];
            T(a.b, d) && (a.a[c++] = d);
            b++;
        }
        a.a.length = c;
    } if (a.c != a.a.length) {
        var e = {};
        for (c = b = 0; b < a.a.length;)
            d = a.a[b], T(e, d) || (a.a[c++] = d, e[d] = 1), b++;
        a.a.length = c;
    } }
    h.get = function (a, b) { return T(this.b, a) ? this.b[a] : b; };
    h.set = function (a, b) { T(this.b, a) || (this.c++, this.a.push(a)); this.b[a] = b; };
    h.forEach = function (a, b) { for (var c = this.L(), d = 0; d < c.length; d++) {
        var e = c[d], f = this.get(e);
        a.call(b, f, e, this);
    } };
    function T(a, b) { return Object.prototype.hasOwnProperty.call(a, b); }
    var Nc = /^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;
    function Oc(a, b) { if (a) {
        a = a.split("&");
        for (var c = 0; c < a.length; c++) {
            var d = a[c].indexOf("="), e = null;
            if (0 <= d) {
                var f = a[c].substring(0, d);
                e = a[c].substring(d + 1);
            }
            else
                f = a[c];
            b(f, e ? decodeURIComponent(e.replace(/\+/g, " ")) : "");
        }
    } }
    function U(a, b) { this.c = this.j = this.f = ""; this.h = null; this.i = this.g = ""; this.a = !1; if (a instanceof U) {
        this.a = void 0 !== b ? b : a.a;
        Pc(this, a.f);
        this.j = a.j;
        Qc(this, a.c);
        Rc(this, a.h);
        this.g = a.g;
        b = a.b;
        var c = new Sc;
        c.c = b.c;
        b.a && (c.a = new S(b.a), c.b = b.b);
        Tc(this, c);
        this.i = a.i;
    }
    else
        a && (c = String(a).match(Nc)) ? (this.a = !!b, Pc(this, c[1] || "", !0), this.j = Uc(c[2] || ""), Qc(this, c[3] || "", !0), Rc(this, c[4]), this.g = Uc(c[5] || "", !0), Tc(this, c[6] || "", !0), this.i = Uc(c[7] || "")) : (this.a = !!b, this.b = new Sc(null, this.a)); }
    U.prototype.toString = function () { var a = [], b = this.f; b && a.push(Vc(b, Wc, !0), ":"); var c = this.c; if (c || "file" == b)
        a.push("//"), (b = this.j) && a.push(Vc(b, Wc, !0), "@"), a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g, "%$1")), c = this.h, null != c && a.push(":", String(c)); if (c = this.g)
        this.c && "/" != c.charAt(0) && a.push("/"), a.push(Vc(c, "/" == c.charAt(0) ? Xc : Yc, !0)); (c = this.b.toString()) && a.push("?", c); (c = this.i) && a.push("#", Vc(c, Zc)); return a.join(""); };
    function N(a) { return new U(a); }
    function Pc(a, b, c) { a.f = c ? Uc(b, !0) : b; a.f && (a.f = a.f.replace(/:$/, "")); }
    function Qc(a, b, c) { a.c = c ? Uc(b, !0) : b; }
    function Rc(a, b) { if (b) {
        b = Number(b);
        if (isNaN(b) || 0 > b)
            throw Error("Bad port number " + b);
        a.h = b;
    }
    else
        a.h = null; }
    function Tc(a, b, c) { b instanceof Sc ? (a.b = b, $c(a.b, a.a)) : (c || (b = Vc(b, ad)), a.b = new Sc(b, a.a)); }
    function R(a, b, c) { a.b.set(b, c); }
    function kc(a) { R(a, "zx", Math.floor(2147483648 * Math.random()).toString(36) + Math.abs(Math.floor(2147483648 * Math.random()) ^ q()).toString(36)); return a; }
    function bd(a) { return a instanceof U ? N(a) : new U(a, void 0); }
    function cd(a, b, c, d) { var e = new U(null, void 0); a && Pc(e, a); b && Qc(e, b); c && Rc(e, c); d && (e.g = d); return e; }
    function Uc(a, b) { return a ? b ? decodeURI(a.replace(/%25/g, "%2525")) : decodeURIComponent(a) : ""; }
    function Vc(a, b, c) { return "string" === typeof a ? (a = encodeURI(a).replace(b, dd), c && (a = a.replace(/%25([0-9a-fA-F]{2})/g, "%$1")), a) : null; }
    function dd(a) { a = a.charCodeAt(0); return "%" + (a >> 4 & 15).toString(16) + (a & 15).toString(16); }
    var Wc = /[#\/\?@]/g, Yc = /[#\?:]/g, Xc = /[#\?]/g, ad = /[#\?@]/g, Zc = /#/g;
    function Sc(a, b) { this.b = this.a = null; this.c = a || null; this.f = !!b; }
    function V(a) { a.a || (a.a = new S, a.b = 0, a.c && Oc(a.c, function (b, c) { a.add(decodeURIComponent(b.replace(/\+/g, " ")), c); })); }
    h = Sc.prototype;
    h.add = function (a, b) { V(this); this.c = null; a = W(this, a); var c = this.a.get(a); c || this.a.set(a, c = []); c.push(b); this.b += 1; return this; };
    function ed(a, b) { V(a); b = W(a, b); T(a.a.b, b) && (a.c = null, a.b -= a.a.get(b).length, a = a.a, T(a.b, b) && (delete a.b[b], a.c--, a.a.length > 2 * a.c && Mc(a))); }
    function fd(a, b) { V(a); b = W(a, b); return T(a.a.b, b); }
    h.forEach = function (a, b) { V(this); this.a.forEach(function (c, d) { na(c, function (e) { a.call(b, e, d, this); }, this); }, this); };
    h.L = function () { V(this); for (var a = this.a.K(), b = this.a.L(), c = [], d = 0; d < b.length; d++)
        for (var e = a[d], f = 0; f < e.length; f++)
            c.push(b[d]); return c; };
    h.K = function (a) { V(this); var b = []; if ("string" === typeof a)
        fd(this, a) && (b = qa(b, this.a.get(W(this, a))));
    else {
        a = this.a.K();
        for (var c = 0; c < a.length; c++)
            b = qa(b, a[c]);
    } return b; };
    h.set = function (a, b) { V(this); this.c = null; a = W(this, a); fd(this, a) && (this.b -= this.a.get(a).length); this.a.set(a, [b]); this.b += 1; return this; };
    h.get = function (a, b) { if (!a)
        return b; a = this.K(a); return 0 < a.length ? String(a[0]) : b; };
    function nc(a, b, c) { ed(a, b); 0 < c.length && (a.c = null, a.a.set(W(a, b), ra(c)), a.b += c.length); }
    h.toString = function () { if (this.c)
        return this.c; if (!this.a)
        return ""; for (var a = [], b = this.a.L(), c = 0; c < b.length; c++) {
        var d = b[c], e = encodeURIComponent(String(d));
        d = this.K(d);
        for (var f = 0; f < d.length; f++) {
            var g = e;
            "" !== d[f] && (g += "=" + encodeURIComponent(String(d[f])));
            a.push(g);
        }
    } return this.c = a.join("&"); };
    function W(a, b) { b = String(b); a.f && (b = b.toLowerCase()); return b; }
    function $c(a, b) { b && !a.f && (V(a), a.c = null, a.a.forEach(function (c, d) { var e = d.toLowerCase(); d != e && (ed(this, d), nc(this, e, c)); }, a)); a.f = b; }
    var gd = /** @class */ (function () {
        function gd(a, b) {
            this.b = a;
            this.a = b;
        }
        return gd;
    }());
    function hd(a) { this.g = a || id; k.PerformanceNavigationTiming ? (a = k.performance.getEntriesByType("navigation"), a = 0 < a.length && ("hq" == a[0].nextHopProtocol || "h2" == a[0].nextHopProtocol)) : a = !!(k.ia && k.ia.ya && k.ia.ya() && k.ia.ya().Lb); this.f = a ? this.g : 1; this.a = null; 1 < this.f && (this.a = new Set); this.b = null; this.c = []; }
    var id = 10;
    function jd(a) { return a.b ? !0 : a.a ? a.a.size >= a.f : !1; }
    function Dc(a) { return a.b ? 1 : a.a ? a.a.size : 0; }
    function zc(a, b) { return a.b ? a.b == b : a.a ? a.a.has(b) : !1; }
    function Ec(a, b) { a.a ? a.a.add(b) : a.b = b; }
    function Gc(a, b) { a.b && a.b == b ? a.b = null : a.a && a.a.has(b) && a.a.delete(b); }
    hd.prototype.cancel = function () {
        var e_1, _a;
        this.c = kd(this);
        if (this.b)
            this.b.cancel(), this.b = null;
        else if (this.a && 0 !== this.a.size) {
            try {
                for (var _b = __values(this.a.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var a = _c.value;
                    a.cancel();
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            this.a.clear();
        }
    };
    function kd(a) {
        var e_2, _a;
        if (null != a.b)
            return a.c.concat(a.b.s);
        if (null != a.a && 0 !== a.a.size) {
            var b = a.c;
            try {
                for (var _b = __values(a.a.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var c = _c.value;
                    b = b.concat(c.s);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
            return b;
        }
        return ra(a.c);
    }
    function ld() { }
    ld.prototype.stringify = function (a) { return k.JSON.stringify(a, void 0); };
    ld.prototype.parse = function (a) { return k.JSON.parse(a, void 0); };
    function md() { this.a = new ld; }
    function nd(a, b, c) { var d = c || ""; try {
        Lc(a, function (e, f) { var g = e; n(e) && (g = ub(e)); b.push(d + f + "=" + encodeURIComponent(g)); });
    }
    catch (e) {
        throw b.push(d + "type=" + encodeURIComponent("_badmap")), e;
    } }
    function od(a, b) { var c = new Ob; if (k.Image) {
        var d = new Image;
        d.onload = ja(pd, c, d, "TestLoadImage: loaded", !0, b);
        d.onerror = ja(pd, c, d, "TestLoadImage: error", !1, b);
        d.onabort = ja(pd, c, d, "TestLoadImage: abort", !1, b);
        d.ontimeout = ja(pd, c, d, "TestLoadImage: timeout", !1, b);
        k.setTimeout(function () { if (d.ontimeout)
            d.ontimeout(); }, 1E4);
        d.src = a;
    }
    else
        b(!1); }
    function pd(a, b, c, d, e) { try {
        b.onload = null, b.onerror = null, b.onabort = null, b.ontimeout = null, e(d);
    }
    catch (f) { } }
    var qd = k.JSON.parse;
    function X(a) { D.call(this); this.headers = new S; this.H = a || null; this.b = !1; this.s = this.a = null; this.B = ""; this.h = 0; this.f = ""; this.g = this.A = this.l = this.u = !1; this.o = 0; this.m = null; this.I = rd; this.D = this.F = !1; }
    r(X, D);
    var rd = "", sd = /^https?$/i, td = ["POST", "PUT"];
    h = X.prototype;
    h.ba = function (a, b, c, d) {
        if (this.a)
            throw Error("[goog.net.XhrIo] Object is active with another request=" + this.B + "; newUri=" + a);
        b = b ? b.toUpperCase() : "GET";
        this.B = a;
        this.f = "";
        this.h = 0;
        this.u = !1;
        this.b = !0;
        this.a = new XMLHttpRequest;
        this.s = this.H ? ac(this.H) : ac(ec);
        this.a.onreadystatechange = p(this.za, this);
        try {
            this.A = !0, this.a.open(b, String(a), !0), this.A = !1;
        }
        catch (f) {
            ud(this, f);
            return;
        }
        a = c || "";
        var e = new S(this.headers);
        d && Lc(d, function (f, g) { e.set(g, f); });
        d = oa(e.L());
        c = k.FormData && a instanceof k.FormData;
        !(0 <=
            ma(td, b)) || d || c || e.set("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");
        e.forEach(function (f, g) { this.a.setRequestHeader(g, f); }, this);
        this.I && (this.a.responseType = this.I);
        "withCredentials" in this.a && this.a.withCredentials !== this.F && (this.a.withCredentials = this.F);
        try {
            vd(this), 0 < this.o && ((this.D = wd(this.a)) ? (this.a.timeout = this.o, this.a.ontimeout = p(this.xa, this)) : this.m = Ib(this.xa, this.o, this)), this.l = !0, this.a.send(a), this.l = !1;
        }
        catch (f) {
            ud(this, f);
        }
    };
    function wd(a) { return x && Qa(9) && "number" === typeof a.timeout && void 0 !== a.ontimeout; }
    function pa(a) { return "content-type" == a.toLowerCase(); }
    h.xa = function () { "undefined" != typeof goog && this.a && (this.f = "Timed out after " + this.o + "ms, aborting", this.h = 8, E(this, "timeout"), this.abort(8)); };
    function ud(a, b) { a.b = !1; a.a && (a.g = !0, a.a.abort(), a.g = !1); a.f = b; a.h = 5; xd(a); yd(a); }
    function xd(a) { a.u || (a.u = !0, E(a, "complete"), E(a, "error")); }
    h.abort = function (a) { this.a && this.b && (this.b = !1, this.g = !0, this.a.abort(), this.g = !1, this.h = a || 7, E(this, "complete"), E(this, "abort"), yd(this)); };
    h.G = function () { this.a && (this.b && (this.b = !1, this.g = !0, this.a.abort(), this.g = !1), yd(this, !0)); X.X.G.call(this); };
    h.za = function () { this.j || (this.A || this.l || this.g ? zd(this) : this.Ua()); };
    h.Ua = function () { zd(this); };
    function zd(a) {
        if (a.b && "undefined" != typeof goog && (!a.s[1] || 4 != O(a) || 2 != a.W()))
            if (a.l && 4 == O(a))
                Ib(a.za, 0, a);
            else if (E(a, "readystatechange"), 4 == O(a)) {
                a.b = !1;
                try {
                    {
                        var l = a.W();
                        a: switch (l) {
                            case 200:
                            case 201:
                            case 202:
                            case 204:
                            case 206:
                            case 304:
                            case 1223:
                                var b = !0;
                                break a;
                            default: b = !1;
                        }
                        var c;
                        if (!(c = b)) {
                            var d;
                            if (d = 0 === l) {
                                var e = String(a.B).match(Nc)[1] || null;
                                if (!e && k.self && k.self.location) {
                                    var f = k.self.location.protocol;
                                    e = f.substr(0, f.length - 1);
                                }
                                d = !sd.test(e ? e.toLowerCase() : "");
                            }
                            c = d;
                        }
                        var g = c;
                    }
                    if (g)
                        E(a, "complete"),
                            E(a, "success");
                    else {
                        a.h = 6;
                        try {
                            var m = 2 < O(a) ? a.a.statusText : "";
                        }
                        catch (l) {
                            m = "";
                        }
                        a.f = m + " [" + a.W() + "]";
                        xd(a);
                    }
                }
                finally {
                    yd(a);
                }
            }
    }
    function yd(a, b) { if (a.a) {
        vd(a);
        var c = a.a, d = a.s[0] ? aa : null;
        a.a = null;
        a.s = null;
        b || E(a, "ready");
        try {
            c.onreadystatechange = d;
        }
        catch (e) { }
    } }
    function vd(a) { a.a && a.D && (a.a.ontimeout = null); a.m && (k.clearTimeout(a.m), a.m = null); }
    function O(a) { return a.a ? a.a.readyState : 0; }
    h.W = function () { try {
        return 2 < O(this) ? this.a.status : -1;
    }
    catch (a) {
        return -1;
    } };
    h.$ = function () { try {
        return this.a ? this.a.responseText : "";
    }
    catch (a) {
        return "";
    } };
    h.Pa = function (a) { if (this.a) {
        var b = this.a.responseText;
        a && 0 == b.indexOf(a) && (b = b.substring(a.length));
        return qd(b);
    } };
    h.ua = function () { return this.h; };
    h.Qa = function () { return "string" === typeof this.f ? this.f : String(this.f); };
    function Ad(a) { var b = ""; za(a, function (c, d) { b += d; b += ":"; b += c; b += "\r\n"; }); return b; }
    function Bd(a, b, c) { a: {
        for (d in c) {
            var d = !1;
            break a;
        }
        d = !0;
    } d || (c = Ad(c), "string" === typeof a ? (null != c && encodeURIComponent(String(c))) : R(a, b, c)); }
    function Cd(a, b, c) { return c && c.internalChannelParams ? c.internalChannelParams[a] || b : b; }
    function Dd(a) {
        this.pa = 0;
        this.g = [];
        this.c = new Ob;
        this.ga = this.la = this.B = this.fa = this.a = this.na = this.A = this.V = this.i = this.O = this.l = null;
        this.Oa = this.R = 0;
        this.La = Cd("failFast", !1, a);
        this.H = this.m = this.j = this.h = this.f = null;
        this.S = !0;
        this.I = this.oa = this.P = -1;
        this.T = this.o = this.u = 0;
        this.Ha = Cd("baseRetryDelayMs", 5E3, a);
        this.Ra = Cd("retryDelaySeedMs", 1E4, a);
        this.Ma = Cd("forwardChannelMaxRetries", 2, a);
        this.ma = Cd("forwardChannelRequestTimeoutMs", 2E4, a);
        this.Na = a && a.g || void 0;
        this.D = void 0;
        this.C = a && a.supportsCrossDomainXhr ||
            !1;
        this.J = "";
        this.b = new hd(a && a.concurrentRequestLimit);
        this.ka = new md;
        this.da = a && a.fastHandshake || !1;
        this.Ia = a && a.b || !1;
        a && a.f && (this.c.a = !1);
        a && a.forceLongPolling && (this.S = !1);
        this.U = !this.da && this.S && a && a.detectBufferingProxy || !1;
        this.ea = void 0;
        this.N = 0;
        this.F = !1;
        this.s = null;
        (this.Ka = a && a.c || !1) && this.c.info("Opt-in to enable Chrome Origin Trials.");
    }
    h = Dd.prototype;
    h.ha = 8;
    h.v = 1;
    function Jc(a) { Ed(a); if (3 == a.v) {
        var b = a.R++, c = N(a.B);
        R(c, "SID", a.J);
        R(c, "RID", b);
        R(c, "TYPE", "terminate");
        Fd(a, c);
        b = new M(a, a.c, b, void 0);
        b.H = 2;
        b.i = kc(N(c));
        c = !1;
        k.navigator && k.navigator.sendBeacon && (c = k.navigator.sendBeacon(b.i.toString(), ""));
        !c && k.Image && ((new Image).src = b.i, c = !0);
        c || (b.a = oc(b.g, null), b.a.ba(b.i));
        b.u = q();
        mc(b);
    } Gd(a); }
    function Bc(a) { a.a && (wc(a), a.a.cancel(), a.a = null); }
    function Ed(a) { Bc(a); a.j && (k.clearTimeout(a.j), a.j = null); Ac(a); a.b.cancel(); a.h && ("number" === typeof a.h && k.clearTimeout(a.h), a.h = null); }
    function Hd(a, b) { a.g.push(new gd(a.Oa++, b)); 3 == a.v && Ic(a); }
    function Ic(a) { jd(a.b) || a.h || (a.h = !0, Bb(a.Ba, a), a.u = 0); }
    function Id(a, b) { if (Dc(a.b) >= a.b.f - (a.h ? 1 : 0))
        return !1; if (a.h)
        return a.g = b.s.concat(a.g), !0; if (1 == a.v || 2 == a.v || a.u >= (a.La ? 0 : a.Ma))
        return !1; a.h = K(p(a.Ba, a, b), Jd(a, a.u)); a.u++; return !0; }
    h.Ba = function (a) {
        if (this.h)
            if (this.h = null, 1 == this.v) {
                if (!a) {
                    this.R = Math.floor(1E5 * Math.random());
                    a = this.R++;
                    var b = new M(this, this.c, a, void 0), c = this.l;
                    this.O && (c ? (c = Aa(c), Ca(c, this.O)) : c = this.O);
                    null === this.i && (b.B = c);
                    var d;
                    if (this.da)
                        a: {
                            for (var e = d = 0; e < this.g.length; e++) {
                                b: {
                                    var f = this.g[e];
                                    if ("__data__" in f.a && (f = f.a.__data__, "string" === typeof f)) {
                                        f = f.length;
                                        break b;
                                    }
                                    f = void 0;
                                }
                                if (void 0 === f)
                                    break;
                                d += f;
                                if (4096 < d) {
                                    d = e;
                                    break a;
                                }
                                if (4096 === d || e === this.g.length - 1) {
                                    d = e + 1;
                                    break a;
                                }
                            }
                            d = 1E3;
                        }
                    else
                        d = 1E3;
                    d = Kd(this, b, d);
                    e = N(this.B);
                    R(e, "RID", a);
                    R(e, "CVER", 22);
                    this.A && R(e, "X-HTTP-Session-Id", this.A);
                    Fd(this, e);
                    this.i && c && Bd(e, this.i, c);
                    Ec(this.b, b);
                    this.Ia && R(e, "TYPE", "init");
                    this.da ? (R(e, "$req", d), R(e, "SID", "null"), b.U = !0, jc(b, e, null)) : jc(b, e, d);
                    this.v = 2;
                }
            }
            else
                3 == this.v && (a ? Ld(this, a) : 0 == this.g.length || jd(this.b) || Ld(this));
    };
    function Ld(a, b) { var c; b ? c = b.f : c = a.R++; var d = N(a.B); R(d, "SID", a.J); R(d, "RID", c); R(d, "AID", a.P); Fd(a, d); a.i && a.l && Bd(d, a.i, a.l); c = new M(a, a.c, c, a.u + 1); null === a.i && (c.B = a.l); b && (a.g = b.s.concat(a.g)); b = Kd(a, c, 1E3); c.setTimeout(Math.round(.5 * a.ma) + Math.round(.5 * a.ma * Math.random())); Ec(a.b, c); jc(c, d, b); }
    function Fd(a, b) { a.f && Lc({}, function (c, d) { R(b, d, c); }); }
    function Kd(a, b, c) { c = Math.min(a.g.length, c); var d = a.f ? p(a.f.Ja, a.f, a) : null; a: for (var e = a.g, f = -1;;) {
        var g = ["count=" + c];
        -1 == f ? 0 < c ? (f = e[0].b, g.push("ofs=" + f)) : f = 0 : g.push("ofs=" + f);
        for (var m = !0, l = 0; l < c; l++) {
            var u = e[l].b, C = e[l].a;
            u -= f;
            if (0 > u)
                f = Math.max(0, e[l].b - 100), m = !1;
            else
                try {
                    nd(C, g, "req" + u + "_");
                }
                catch (B) {
                    d && d(C);
                }
        }
        if (m) {
            d = g.join("&");
            break a;
        }
    } a = a.g.splice(0, c); b.s = a; return d; }
    function Hc(a) { a.a || a.j || (a.T = 1, Bb(a.Aa, a), a.o = 0); }
    function Cc(a) { if (a.a || a.j || 3 <= a.o)
        return !1; a.T++; a.j = K(p(a.Aa, a), Jd(a, a.o)); a.o++; return !0; }
    h.Aa = function () { this.j = null; Md(this); if (this.U && !(this.F || null == this.a || 0 >= this.N)) {
        var a = 2 * this.N;
        this.c.info("BP detection timer enabled: " + a);
        this.s = K(p(this.Ta, this), a);
    } };
    h.Ta = function () { this.s && (this.s = null, this.c.info("BP detection timeout reached."), this.c.info("Buffering proxy detected and switch to long-polling!"), this.H = !1, this.F = !0, J(10), Bc(this), Md(this)); };
    function wc(a) { null != a.s && (k.clearTimeout(a.s), a.s = null); }
    function Md(a) { a.a = new M(a, a.c, "rpc", a.T); null === a.i && (a.a.B = a.l); a.a.O = 0; var b = N(a.la); R(b, "RID", "rpc"); R(b, "SID", a.J); R(b, "CI", a.H ? "0" : "1"); R(b, "AID", a.P); Fd(a, b); R(b, "TYPE", "xmlhttp"); a.i && a.l && Bd(b, a.i, a.l); a.D && a.a.setTimeout(a.D); var c = a.a; a = a.ga; c.H = 1; c.i = kc(N(b)); c.j = null; c.I = !0; lc(c, a); }
    h.Sa = function () { null != this.m && (this.m = null, Bc(this), Cc(this), J(19)); };
    function Ac(a) { null != a.m && (k.clearTimeout(a.m), a.m = null); }
    function uc(a, b) { var c = null; if (a.a == b) {
        Ac(a);
        wc(a);
        a.a = null;
        var d = 2;
    }
    else if (zc(a.b, b))
        c = b.s, Gc(a.b, b), d = 1;
    else
        return; a.I = b.N; if (0 != a.v)
        if (b.b)
            if (1 == d) {
                c = b.j ? b.j.length : 0;
                b = q() - b.u;
                var e = a.u;
                d = Ub();
                E(d, new Xb(d, c, b, e));
                Ic(a);
            }
            else
                Hc(a);
        else if (e = b.h, 3 == e || 0 == e && 0 < a.I || !(1 == d && Id(a, b) || 2 == d && Cc(a)))
            switch (c && 0 < c.length && (b = a.b, b.c = b.c.concat(c)), e) {
                case 1:
                    Q(a, 5);
                    break;
                case 4:
                    Q(a, 10);
                    break;
                case 3:
                    Q(a, 6);
                    break;
                default: Q(a, 2);
            } }
    function Jd(a, b) { var c = a.Ha + Math.floor(Math.random() * a.Ra); a.f || (c *= 2); return c * b; }
    function Q(a, b) { a.c.info("Error code " + b); if (2 == b) {
        var c = null;
        a.f && (c = null);
        var d = p(a.Ya, a);
        c || (c = new U("//www.google.com/images/cleardot.gif"), k.location && "http" == k.location.protocol || Pc(c, "https"), kc(c));
        od(c.toString(), d);
    }
    else
        J(2); a.v = 0; a.f && a.f.ra(b); Gd(a); Ed(a); }
    h.Ya = function (a) { a ? (this.c.info("Successfully pinged google.com"), J(2)) : (this.c.info("Failed to ping google.com"), J(1)); };
    function Gd(a) { a.v = 0; a.I = -1; if (a.f) {
        if (0 != kd(a.b).length || 0 != a.g.length)
            a.b.c.length = 0, ra(a.g), a.g.length = 0;
        a.f.qa();
    } }
    function Fc(a, b, c) { var d = bd(c); if ("" != d.c)
        b && Qc(d, b + "." + d.c), Rc(d, d.h);
    else {
        var e = k.location;
        d = cd(e.protocol, b ? b + "." + e.hostname : e.hostname, +e.port, c);
    } a.V && za(a.V, function (f, g) { R(d, g, f); }); b = a.A; c = a.na; b && c && R(d, b, c); R(d, "VER", a.ha); Fd(a, d); return d; }
    function oc(a, b) { if (b && !a.C)
        throw Error("Can't create secondary domain capable XhrIo object."); b = new X(a.Na); b.F = a.C; return b; }
    function Nd() { }
    h = Nd.prototype;
    h.ta = function () { };
    h.sa = function () { };
    h.ra = function () { };
    h.qa = function () { };
    h.Ja = function () { };
    function Od() { if (x && !(10 <= Number(Ta)))
        throw Error("Environmental error: no available transport."); }
    Od.prototype.a = function (a, b) { return new Y(a, b); };
    function Y(a, b) {
        D.call(this);
        this.a = new Dd(b);
        this.o = a;
        this.b = b && b.messageUrlParams || null;
        a = b && b.messageHeaders || null;
        b && b.clientProtocolHeaderRequired && (a ? a["X-Client-Protocol"] = "webchannel" : a = { "X-Client-Protocol": "webchannel" });
        this.a.l = a;
        a = b && b.initMessageHeaders || null;
        b && b.messageContentType && (a ? a["X-WebChannel-Content-Type"] = b.messageContentType : a = { "X-WebChannel-Content-Type": b.messageContentType });
        b && b.a && (a ? a["X-WebChannel-Client-Profile"] = b.a : a = { "X-WebChannel-Client-Profile": b.a });
        this.a.O =
            a;
        (a = b && b.httpHeadersOverwriteParam) && !sa(a) && (this.a.i = a);
        this.m = b && b.supportsCrossDomainXhr || !1;
        this.l = b && b.sendRawJson || !1;
        (b = b && b.httpSessionIdParam) && !sa(b) && (this.a.A = b, a = this.b, null !== a && b in a && (a = this.b, b in a && delete a[b]));
        this.f = new Z(this);
    }
    r(Y, D);
    Y.prototype.g = function () { this.a.f = this.f; this.m && (this.a.C = !0); var a = this.a, b = this.o, c = this.b || void 0; J(0); a.fa = b; a.V = c || {}; a.H = a.S; a.B = Fc(a, null, a.fa); Ic(a); };
    Y.prototype.close = function () { Jc(this.a); };
    Y.prototype.h = function (a) { if ("string" === typeof a) {
        var b = {};
        b.__data__ = a;
        Hd(this.a, b);
    }
    else
        this.l ? (b = {}, b.__data__ = ub(a), Hd(this.a, b)) : Hd(this.a, a); };
    Y.prototype.G = function () { this.a.f = null; delete this.f; Jc(this.a); delete this.a; Y.X.G.call(this); };
    function Pd(a) { cc.call(this); var b = a.__sm__; if (b) {
        a: {
            for (var c in b) {
                a = c;
                break a;
            }
            a = void 0;
        }
        (this.c = a) ? (a = this.c, this.data = null !== b && a in b ? b[a] : void 0) : this.data = b;
    }
    else
        this.data = a; }
    r(Pd, cc);
    function Qd() { dc.call(this); this.status = 1; }
    r(Qd, dc);
    function Z(a) { this.a = a; }
    r(Z, Nd);
    Z.prototype.ta = function () { E(this.a, "a"); };
    Z.prototype.sa = function (a) { E(this.a, new Pd(a)); };
    Z.prototype.ra = function (a) { E(this.a, new Qd(a)); };
    Z.prototype.qa = function () { E(this.a, "b"); }; /*

     Copyright 2017 Google LLC

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
    */
    Od.prototype.createWebChannel = Od.prototype.a;
    Y.prototype.send = Y.prototype.h;
    Y.prototype.open = Y.prototype.g;
    Y.prototype.close = Y.prototype.close;
    Yb.NO_ERROR = 0;
    Yb.TIMEOUT = 8;
    Yb.HTTP_ERROR = 6;
    Zb.COMPLETE = "complete";
    bc.EventType = L;
    L.OPEN = "a";
    L.CLOSE = "b";
    L.ERROR = "c";
    L.MESSAGE = "d";
    D.prototype.listen = D.prototype.va;
    X.prototype.listenOnce = X.prototype.wa;
    X.prototype.getLastError = X.prototype.Qa;
    X.prototype.getLastErrorCode = X.prototype.ua;
    X.prototype.getStatus = X.prototype.W;
    X.prototype.getResponseJson = X.prototype.Pa;
    X.prototype.getResponseText = X.prototype.$;
    X.prototype.send = X.prototype.ba;
    var createWebChannelTransport = function () { return new Od; };
    var getStatEventTarget = function () { return Ub(); };
    var ErrorCode = Yb;
    var EventType = Zb;
    var Event = H;
    var Stat = { gb: 0, jb: 1, kb: 2, Db: 3, Ib: 4, Fb: 5, Gb: 6, Eb: 7, Cb: 8, Hb: 9, PROXY: 10, NOPROXY: 11, Ab: 12, wb: 13, xb: 14, vb: 15, yb: 16, zb: 17, bb: 18, ab: 19, cb: 20 };
    var WebChannel = bc;
    var XhrIo = X;

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Simple wrapper around a nullable UID. Mostly exists to make code more
     * readable.
     */
    class P$1 {
        constructor(t) {
            this.uid = t;
        }
        t() {
            return null != this.uid;
        }
        /**
         * Returns a key representing this user, suitable for inclusion in a
         * dictionary.
         */    i() {
            return this.t() ? "uid:" + this.uid : "anonymous-user";
        }
        isEqual(t) {
            return t.uid === this.uid;
        }
    }

    /** A user with a null UID. */ P$1.UNAUTHENTICATED = new P$1(null), 
    // TODO(mikelehen): Look into getting a proper uid-equivalent for
    // non-FirebaseAuth providers.
    P$1.o = new P$1("google-credentials-uid"), P$1.u = new P$1("first-party-uid");

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const V$1 = new Logger("@firebase/firestore");

    // Helper methods are needed because variables can't be exported as read/write
    function g() {
        return V$1.logLevel;
    }

    /**
     * Sets the verbosity of Cloud Firestore logs (debug, error, or silent).
     *
     * @param logLevel - The verbosity you set for activity and error logging. Can
     *   be any of the following values:
     *
     *   <ul>
     *     <li>`debug` for the most verbose logging level, primarily for
     *     debugging.</li>
     *     <li>`error` to log errors only.</li>
     *     <li><code>`silent` to turn off logging.</li>
     *   </ul>
     */ function y$1(t) {
        V$1.setLogLevel(t);
    }

    function p$1(t, ...e) {
        if (V$1.logLevel <= LogLevel.DEBUG) {
            const n = e.map(S$1);
            V$1.debug(`Firestore (8.2.9): ${t}`, ...n);
        }
    }

    function b(t, ...e) {
        if (V$1.logLevel <= LogLevel.ERROR) {
            const n = e.map(S$1);
            V$1.error(`Firestore (8.2.9): ${t}`, ...n);
        }
    }

    function v$1(t, ...e) {
        if (V$1.logLevel <= LogLevel.WARN) {
            const n = e.map(S$1);
            V$1.warn(`Firestore (8.2.9): ${t}`, ...n);
        }
    }

    /**
     * Converts an additional log parameter to a string representation.
     */ function S$1(t) {
        if ("string" == typeof t) return t;
        try {
            return e = t, JSON.stringify(e);
        } catch (e) {
            // Converting to JSON failed, just log the object directly
            return t;
        }
        /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
        /** Formats an object as a JSON string, suitable for logging. */
        var e;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Unconditionally fails, throwing an Error with the given message.
     * Messages are stripped in production builds.
     *
     * Returns `never` and can be used in expressions:
     * @example
     * let futureVar = fail('not implemented yet');
     */ function D$1(t = "Unexpected state") {
        // Log the failure in addition to throw an exception, just in case the
        // exception is swallowed.
        const e = "FIRESTORE (8.2.9) INTERNAL ASSERTION FAILED: " + t;
        // NOTE: We don't use FirestoreError here because these are internal failures
        // that cannot be handled by the user. (Also it would create a circular
        // dependency between the error and assert modules which doesn't work.)
        throw b(e), new Error(e);
    }

    /**
     * Fails if the given assertion condition is false, throwing an Error with the
     * given message if it did.
     *
     * Messages are stripped in production builds.
     */ function C(t, e) {
        t || D$1();
    }

    /**
     * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an
     * instance of `T` before casting.
     */ function N$1(t, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    e) {
        return t;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ const x$1 = {
        // Causes are copied from:
        // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
        /** Not an error; returned on success. */
        OK: "ok",
        /** The operation was cancelled (typically by the caller). */
        CANCELLED: "cancelled",
        /** Unknown error or an error from a different error domain. */
        UNKNOWN: "unknown",
        /**
         * Client specified an invalid argument. Note that this differs from
         * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are
         * problematic regardless of the state of the system (e.g., a malformed file
         * name).
         */
        INVALID_ARGUMENT: "invalid-argument",
        /**
         * Deadline expired before operation could complete. For operations that
         * change the state of the system, this error may be returned even if the
         * operation has completed successfully. For example, a successful response
         * from a server could have been delayed long enough for the deadline to
         * expire.
         */
        DEADLINE_EXCEEDED: "deadline-exceeded",
        /** Some requested entity (e.g., file or directory) was not found. */
        NOT_FOUND: "not-found",
        /**
         * Some entity that we attempted to create (e.g., file or directory) already
         * exists.
         */
        ALREADY_EXISTS: "already-exists",
        /**
         * The caller does not have permission to execute the specified operation.
         * PERMISSION_DENIED must not be used for rejections caused by exhausting
         * some resource (use RESOURCE_EXHAUSTED instead for those errors).
         * PERMISSION_DENIED must not be used if the caller can not be identified
         * (use UNAUTHENTICATED instead for those errors).
         */
        PERMISSION_DENIED: "permission-denied",
        /**
         * The request does not have valid authentication credentials for the
         * operation.
         */
        UNAUTHENTICATED: "unauthenticated",
        /**
         * Some resource has been exhausted, perhaps a per-user quota, or perhaps the
         * entire file system is out of space.
         */
        RESOURCE_EXHAUSTED: "resource-exhausted",
        /**
         * Operation was rejected because the system is not in a state required for
         * the operation's execution. For example, directory to be deleted may be
         * non-empty, an rmdir operation is applied to a non-directory, etc.
         *
         * A litmus test that may help a service implementor in deciding
         * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:
         *  (a) Use UNAVAILABLE if the client can retry just the failing call.
         *  (b) Use ABORTED if the client should retry at a higher-level
         *      (e.g., restarting a read-modify-write sequence).
         *  (c) Use FAILED_PRECONDITION if the client should not retry until
         *      the system state has been explicitly fixed. E.g., if an "rmdir"
         *      fails because the directory is non-empty, FAILED_PRECONDITION
         *      should be returned since the client should not retry unless
         *      they have first fixed up the directory by deleting files from it.
         *  (d) Use FAILED_PRECONDITION if the client performs conditional
         *      REST Get/Update/Delete on a resource and the resource on the
         *      server does not match the condition. E.g., conflicting
         *      read-modify-write on the same resource.
         */
        FAILED_PRECONDITION: "failed-precondition",
        /**
         * The operation was aborted, typically due to a concurrency issue like
         * sequencer check failures, transaction aborts, etc.
         *
         * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
         * and UNAVAILABLE.
         */
        ABORTED: "aborted",
        /**
         * Operation was attempted past the valid range. E.g., seeking or reading
         * past end of file.
         *
         * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed
         * if the system state changes. For example, a 32-bit file system will
         * generate INVALID_ARGUMENT if asked to read at an offset that is not in the
         * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from
         * an offset past the current file size.
         *
         * There is a fair bit of overlap between FAILED_PRECONDITION and
         * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)
         * when it applies so that callers who are iterating through a space can
         * easily look for an OUT_OF_RANGE error to detect when they are done.
         */
        OUT_OF_RANGE: "out-of-range",
        /** Operation is not implemented or not supported/enabled in this service. */
        UNIMPLEMENTED: "unimplemented",
        /**
         * Internal errors. Means some invariants expected by underlying System has
         * been broken. If you see one of these errors, Something is very broken.
         */
        INTERNAL: "internal",
        /**
         * The service is currently unavailable. This is a most likely a transient
         * condition and may be corrected by retrying with a backoff.
         *
         * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
         * and UNAVAILABLE.
         */
        UNAVAILABLE: "unavailable",
        /** Unrecoverable data loss or corruption. */
        DATA_LOSS: "data-loss"
    };

    /** An error returned by a Firestore operation. */ class $ extends Error {
        /** @hideconstructor */
        constructor(t, e) {
            super(e), this.code = t, this.message = e, this.name = "FirebaseError", 
            // HACK: We write a toString property directly because Error is not a real
            // class and so inheritance does not work correctly. We could alternatively
            // do the same "back-door inheritance" trick that FirebaseError does.
            this.toString = () => `${this.name}: [code=${this.code}]: ${this.message}`;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class O$1 {
        constructor(t, e) {
            this.user = e, this.type = "OAuth", this.h = {}, 
            // Set the headers using Object Literal notation to avoid minification
            this.h.Authorization = `Bearer ${t}`;
        }
    }

    /** A CredentialsProvider that always yields an empty token. */ class k$1 {
        constructor() {
            /**
             * Stores the listener registered with setChangeListener()
             * This isn't actually necessary since the UID never changes, but we use this
             * to verify the listen contract is adhered to in tests.
             */
            this.l = null;
        }
        getToken() {
            return Promise.resolve(null);
        }
        _() {}
        T(t) {
            this.l = t, 
            // Fire with initial user.
            t(P$1.UNAUTHENTICATED);
        }
        I() {
            this.l = null;
        }
    }

    class M$1 {
        constructor(t) {
            /**
             * The auth token listener registered with FirebaseApp, retained here so we
             * can unregister it.
             */
            this.m = null, 
            /** Tracks the current User. */
            this.currentUser = P$1.UNAUTHENTICATED, this.A = !1, 
            /**
             * Counter used to detect if the token changed while a getToken request was
             * outstanding.
             */
            this.R = 0, 
            /** The listener registered with setChangeListener(). */
            this.l = null, this.forceRefresh = !1, this.m = () => {
                this.R++, this.currentUser = this.P(), this.A = !0, this.l && this.l(this.currentUser);
            }, this.R = 0, this.auth = t.getImmediate({
                optional: !0
            }), this.auth ? this.auth.addAuthTokenListener(this.m) : (
            // if auth is not available, invoke tokenListener once with null token
            this.m(null), t.get().then((t => {
                this.auth = t, this.m && 
                // tokenListener can be removed by removeChangeListener()
                this.auth.addAuthTokenListener(this.m);
            }), (() => {})));
        }
        getToken() {
            // Take note of the current value of the tokenCounter so that this method
            // can fail (with an ABORTED error) if there is a token change while the
            // request is outstanding.
            const t = this.R, e = this.forceRefresh;
            return this.forceRefresh = !1, this.auth ? this.auth.getToken(e).then((e => 
            // Cancel the request since the token changed while the request was
            // outstanding so the response is potentially for a previous user (which
            // user, we can't be sure).
            this.R !== t ? (p$1("FirebaseCredentialsProvider", "getToken aborted due to token change."), 
            this.getToken()) : e ? (C("string" == typeof e.accessToken), new O$1(e.accessToken, this.currentUser)) : null)) : Promise.resolve(null);
        }
        _() {
            this.forceRefresh = !0;
        }
        T(t) {
            this.l = t, 
            // Fire the initial event
            this.A && t(this.currentUser);
        }
        I() {
            this.auth && this.auth.removeAuthTokenListener(this.m), this.m = null, this.l = null;
        }
        // Auth.getUid() can return null even with a user logged in. It is because
        // getUid() is synchronous, but the auth code populating Uid is asynchronous.
        // This method should only be called in the AuthTokenListener callback
        // to guarantee to get the actual user.
        P() {
            const t = this.auth && this.auth.getUid();
            return C(null === t || "string" == typeof t), new P$1(t);
        }
    }

    /*
     * FirstPartyToken provides a fresh token each time its value
     * is requested, because if the token is too old, requests will be rejected.
     * Technically this may no longer be necessary since the SDK should gracefully
     * recover from unauthenticated errors (see b/33147818 for context), but it's
     * safer to keep the implementation as-is.
     */ class F$1 {
        constructor(t, e) {
            this.V = t, this.g = e, this.type = "FirstParty", this.user = P$1.u;
        }
        get h() {
            const t = {
                "X-Goog-AuthUser": this.g
            }, e = this.V.auth.getAuthHeaderValueForFirstParty([]);
            // Use array notation to prevent minification
                    return e && (t.Authorization = e), t;
        }
    }

    /*
     * Provides user credentials required for the Firestore JavaScript SDK
     * to authenticate the user, using technique that is only available
     * to applications hosted by Google.
     */ class L$1 {
        constructor(t, e) {
            this.V = t, this.g = e;
        }
        getToken() {
            return Promise.resolve(new F$1(this.V, this.g));
        }
        T(t) {
            // Fire with initial uid.
            t(P$1.u);
        }
        I() {}
        _() {}
    }

    /**
     * Builds a CredentialsProvider depending on the type of
     * the credentials passed in.
     */
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class B {
        /**
         * Constructs a DatabaseInfo using the provided host, databaseId and
         * persistenceKey.
         *
         * @param databaseId - The database to use.
         * @param persistenceKey - A unique identifier for this Firestore's local
         * storage (used in conjunction with the databaseId).
         * @param host - The Firestore backend host to connect to.
         * @param ssl - Whether to use SSL when connecting.
         * @param forceLongPolling - Whether to use the forceLongPolling option
         * when using WebChannel as the network transport.
         * @param autoDetectLongPolling - Whether to use the detectBufferingProxy
         * option when using WebChannel as the network transport.
         */
        constructor(t, e, n, s, i, r) {
            this.p = t, this.persistenceKey = e, this.host = n, this.ssl = s, this.forceLongPolling = i, 
            this.v = r;
        }
    }

    /** The default database name for a project. */
    /** Represents the database ID a Firestore client is associated with. */
    class q$1 {
        constructor(t, e) {
            this.projectId = t, this.database = e || "(default)";
        }
        get S() {
            return "(default)" === this.database;
        }
        isEqual(t) {
            return t instanceof q$1 && t.projectId === this.projectId && t.database === this.database;
        }
    }

    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * `ListenSequence` is a monotonic sequence. It is initialized with a minimum value to
     * exceed. All subsequent calls to next will return increasing values. If provided with a
     * `SequenceNumberSyncer`, it will additionally bump its next value when told of a new value, as
     * well as write out sequence numbers that it produces via `next()`.
     */ class U$1 {
        constructor(t, e) {
            this.previousValue = t, e && (e.D = t => this.C(t), this.N = t => e.$(t));
        }
        C(t) {
            return this.previousValue = Math.max(t, this.previousValue), this.previousValue;
        }
        next() {
            const t = ++this.previousValue;
            return this.N && this.N(t), t;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Generates `nBytes` of random bytes.
     *
     * If `nBytes < 0` , an error will be thrown.
     */
    function K$1(t) {
        // Polyfills for IE and WebWorker by using `self` and `msCrypto` when `crypto` is not available.
        const e = 
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        "undefined" != typeof self && (self.crypto || self.msCrypto), n = new Uint8Array(t);
        if (e && "function" == typeof e.getRandomValues) e.getRandomValues(n); else 
        // Falls back to Math.random
        for (let e = 0; e < t; e++) n[e] = Math.floor(256 * Math.random());
        return n;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ U$1.O = -1;

    class Q$1 {
        static k() {
            // Alphanumeric characters
            const t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", e = Math.floor(256 / t.length) * t.length;
            // The largest byte value that is a multiple of `char.length`.
                    let n = "";
            for (;n.length < 20; ) {
                const s = K$1(40);
                for (let i = 0; i < s.length; ++i) 
                // Only accept values that are [0, maxMultiple), this ensures they can
                // be evenly mapped to indices of `chars` via a modulo operation.
                n.length < 20 && s[i] < e && (n += t.charAt(s[i] % t.length));
            }
            return n;
        }
    }

    function W$1(t, e) {
        return t < e ? -1 : t > e ? 1 : 0;
    }

    /** Helper to compare arrays using isEqual(). */ function j(t, e, n) {
        return t.length === e.length && t.every(((t, s) => n(t, e[s])));
    }

    /**
     * Returns the immediate lexicographically-following string. This is useful to
     * construct an inclusive range for indexeddb iterators.
     */ function G$1(t) {
        // Return the input string, with an additional NUL byte appended.
        return t + "\0";
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // The earliest date supported by Firestore timestamps (0001-01-01T00:00:00Z).
    /**
     * A `Timestamp` represents a point in time independent of any time zone or
     * calendar, represented as seconds and fractions of seconds at nanosecond
     * resolution in UTC Epoch time.
     *
     * It is encoded using the Proleptic Gregorian Calendar which extends the
     * Gregorian calendar backwards to year one. It is encoded assuming all minutes
     * are 60 seconds long, i.e. leap seconds are "smeared" so that no leap second
     * table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to
     * 9999-12-31T23:59:59.999999999Z.
     *
     * For examples and further specifications, refer to the
     * {@link https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto | Timestamp definition}.
     */
    class z$1 {
        /**
         * Creates a new timestamp.
         *
         * @param seconds - The number of seconds of UTC time since Unix epoch
         *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
         *     9999-12-31T23:59:59Z inclusive.
         * @param nanoseconds - The non-negative fractions of a second at nanosecond
         *     resolution. Negative second values with fractions must still have
         *     non-negative nanoseconds values that count forward in time. Must be
         *     from 0 to 999,999,999 inclusive.
         */
        constructor(t, e) {
            if (this.seconds = t, this.nanoseconds = e, e < 0) throw new $(x$1.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + e);
            if (e >= 1e9) throw new $(x$1.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + e);
            if (t < -62135596800) throw new $(x$1.INVALID_ARGUMENT, "Timestamp seconds out of range: " + t);
            // This will break in the year 10,000.
                    if (t >= 253402300800) throw new $(x$1.INVALID_ARGUMENT, "Timestamp seconds out of range: " + t);
        }
        /**
         * Creates a new timestamp with the current date, with millisecond precision.
         *
         * @returns a new timestamp representing the current date.
         */    static now() {
            return z$1.fromMillis(Date.now());
        }
        /**
         * Creates a new timestamp from the given date.
         *
         * @param date - The date to initialize the `Timestamp` from.
         * @returns A new `Timestamp` representing the same point in time as the given
         *     date.
         */    static fromDate(t) {
            return z$1.fromMillis(t.getTime());
        }
        /**
         * Creates a new timestamp from the given number of milliseconds.
         *
         * @param milliseconds - Number of milliseconds since Unix epoch
         *     1970-01-01T00:00:00Z.
         * @returns A new `Timestamp` representing the same point in time as the given
         *     number of milliseconds.
         */    static fromMillis(t) {
            const e = Math.floor(t / 1e3);
            return new z$1(e, 1e6 * (t - 1e3 * e));
        }
        /**
         * Converts a `Timestamp` to a JavaScript `Date` object. This conversion causes
         * a loss of precision since `Date` objects only support millisecond precision.
         *
         * @returns JavaScript `Date` object representing the same point in time as
         *     this `Timestamp`, with millisecond precision.
         */    toDate() {
            return new Date(this.toMillis());
        }
        /**
         * Converts a `Timestamp` to a numeric timestamp (in milliseconds since
         * epoch). This operation causes a loss of precision.
         *
         * @returns The point in time corresponding to this timestamp, represented as
         *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.
         */    toMillis() {
            return 1e3 * this.seconds + this.nanoseconds / 1e6;
        }
        M(t) {
            return this.seconds === t.seconds ? W$1(this.nanoseconds, t.nanoseconds) : W$1(this.seconds, t.seconds);
        }
        /**
         * Returns true if this `Timestamp` is equal to the provided one.
         *
         * @param other - The `Timestamp` to compare against.
         * @returns true if this `Timestamp` is equal to the provided one.
         */    isEqual(t) {
            return t.seconds === this.seconds && t.nanoseconds === this.nanoseconds;
        }
        toString() {
            return "Timestamp(seconds=" + this.seconds + ", nanoseconds=" + this.nanoseconds + ")";
        }
        toJSON() {
            return {
                seconds: this.seconds,
                nanoseconds: this.nanoseconds
            };
        }
        /**
         * Converts this object to a primitive string, which allows Timestamp objects to be compared
         * using the `>`, `<=`, `>=` and `>` operators.
         */    valueOf() {
            // This method returns a string of the form <seconds>.<nanoseconds> where <seconds> is
            // translated to have a non-negative value and both <seconds> and <nanoseconds> are left-padded
            // with zeroes to be a consistent length. Strings with this format then have a lexiographical
            // ordering that matches the expected ordering. The <seconds> translation is done to avoid
            // having a leading negative sign (i.e. a leading '-' character) in its string representation,
            // which would affect its lexiographical ordering.
            const t = this.seconds - -62135596800;
            // Note: Up to 12 decimal digits are required to represent all valid 'seconds' values.
                    return String(t).padStart(12, "0") + "." + String(this.nanoseconds).padStart(9, "0");
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A version of a document in Firestore. This corresponds to the version
     * timestamp, such as update_time or read_time.
     */ class H$1 {
        constructor(t) {
            this.timestamp = t;
        }
        static F(t) {
            return new H$1(t);
        }
        static min() {
            return new H$1(new z$1(0, 0));
        }
        L(t) {
            return this.timestamp.M(t.timestamp);
        }
        isEqual(t) {
            return this.timestamp.isEqual(t.timestamp);
        }
        /** Returns a number representation of the version for use in spec tests. */    B() {
            // Convert to microseconds.
            return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;
        }
        toString() {
            return "SnapshotVersion(" + this.timestamp.toString() + ")";
        }
        q() {
            return this.timestamp;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Path represents an ordered sequence of string segments.
     */
    class J$1 {
        constructor(t, e, n) {
            void 0 === e ? e = 0 : e > t.length && D$1(), void 0 === n ? n = t.length - e : n > t.length - e && D$1(), 
            this.segments = t, this.offset = e, this.U = n;
        }
        get length() {
            return this.U;
        }
        isEqual(t) {
            return 0 === J$1.K(this, t);
        }
        child(t) {
            const e = this.segments.slice(this.offset, this.limit());
            return t instanceof J$1 ? t.forEach((t => {
                e.push(t);
            })) : e.push(t), this.W(e);
        }
        /** The index of one past the last segment of the path. */    limit() {
            return this.offset + this.length;
        }
        j(t) {
            return t = void 0 === t ? 1 : t, this.W(this.segments, this.offset + t, this.length - t);
        }
        G() {
            return this.W(this.segments, this.offset, this.length - 1);
        }
        H() {
            return this.segments[this.offset];
        }
        J() {
            return this.get(this.length - 1);
        }
        get(t) {
            return this.segments[this.offset + t];
        }
        Y() {
            return 0 === this.length;
        }
        X(t) {
            if (t.length < this.length) return !1;
            for (let e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;
            return !0;
        }
        Z(t) {
            if (this.length + 1 !== t.length) return !1;
            for (let e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;
            return !0;
        }
        forEach(t) {
            for (let e = this.offset, n = this.limit(); e < n; e++) t(this.segments[e]);
        }
        tt() {
            return this.segments.slice(this.offset, this.limit());
        }
        static K(t, e) {
            const n = Math.min(t.length, e.length);
            for (let s = 0; s < n; s++) {
                const n = t.get(s), i = e.get(s);
                if (n < i) return -1;
                if (n > i) return 1;
            }
            return t.length < e.length ? -1 : t.length > e.length ? 1 : 0;
        }
    }

    /**
     * A slash-separated path for navigating resources (documents and collections)
     * within Firestore.
     */ class Y$1 extends J$1 {
        W(t, e, n) {
            return new Y$1(t, e, n);
        }
        et() {
            // NOTE: The client is ignorant of any path segments containing escape
            // sequences (e.g. __id123__) and just passes them through raw (they exist
            // for legacy reasons and should not be used frequently).
            return this.tt().join("/");
        }
        toString() {
            return this.et();
        }
        /**
         * Creates a resource path from the given slash-delimited string. If multiple
         * arguments are provided, all components are combined. Leading and trailing
         * slashes from all components are ignored.
         */    static nt(...t) {
            // NOTE: The client is ignorant of any path segments containing escape
            // sequences (e.g. __id123__) and just passes them through raw (they exist
            // for legacy reasons and should not be used frequently).
            const e = [];
            for (const n of t) {
                if (n.indexOf("//") >= 0) throw new $(x$1.INVALID_ARGUMENT, `Invalid segment (${n}). Paths must not contain // in them.`);
                // Strip leading and traling slashed.
                            e.push(...n.split("/").filter((t => t.length > 0)));
            }
            return new Y$1(e);
        }
        static st() {
            return new Y$1([]);
        }
    }

    const X$1 = /^[_a-zA-Z][_a-zA-Z0-9]*$/;

    /** A dot-separated path for navigating sub-objects within a document. */ class Z$1 extends J$1 {
        W(t, e, n) {
            return new Z$1(t, e, n);
        }
        /**
         * Returns true if the string could be used as a segment in a field path
         * without escaping.
         */    static it(t) {
            return X$1.test(t);
        }
        et() {
            return this.tt().map((t => (t = t.replace(/\\/g, "\\\\").replace(/`/g, "\\`"), Z$1.it(t) || (t = "`" + t + "`"), 
            t))).join(".");
        }
        toString() {
            return this.et();
        }
        /**
         * Returns true if this field references the key of a document.
         */    rt() {
            return 1 === this.length && "__name__" === this.get(0);
        }
        /**
         * The field designating the key of a document.
         */    static ot() {
            return new Z$1([ "__name__" ]);
        }
        /**
         * Parses a field string from the given server-formatted string.
         *
         * - Splitting the empty string is not allowed (for now at least).
         * - Empty segments within the string (e.g. if there are two consecutive
         *   separators) are not allowed.
         *
         * TODO(b/37244157): we should make this more strict. Right now, it allows
         * non-identifier path components, even if they aren't escaped.
         */    static ct(t) {
            const e = [];
            let n = "", s = 0;
            const i = () => {
                if (0 === n.length) throw new $(x$1.INVALID_ARGUMENT, `Invalid field path (${t}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);
                e.push(n), n = "";
            };
            let r = !1;
            for (;s < t.length; ) {
                const e = t[s];
                if ("\\" === e) {
                    if (s + 1 === t.length) throw new $(x$1.INVALID_ARGUMENT, "Path has trailing escape character: " + t);
                    const e = t[s + 1];
                    if ("\\" !== e && "." !== e && "`" !== e) throw new $(x$1.INVALID_ARGUMENT, "Path has invalid escape sequence: " + t);
                    n += e, s += 2;
                } else "`" === e ? (r = !r, s++) : "." !== e || r ? (n += e, s++) : (i(), s++);
            }
            if (i(), r) throw new $(x$1.INVALID_ARGUMENT, "Unterminated ` in path: " + t);
            return new Z$1(e);
        }
        static st() {
            return new Z$1([]);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class tt {
        constructor(t) {
            this.path = t;
        }
        static at(t) {
            return new tt(Y$1.nt(t));
        }
        static ut(t) {
            return new tt(Y$1.nt(t).j(5));
        }
        /** Returns true if the document is in the specified collectionId. */    ht(t) {
            return this.path.length >= 2 && this.path.get(this.path.length - 2) === t;
        }
        isEqual(t) {
            return null !== t && 0 === Y$1.K(this.path, t.path);
        }
        toString() {
            return this.path.toString();
        }
        static K(t, e) {
            return Y$1.K(t.path, e.path);
        }
        static lt(t) {
            return t.length % 2 == 0;
        }
        /**
         * Creates and returns a new document key with the given segments.
         *
         * @param segments - The segments of the path to the document
         * @returns A new instance of DocumentKey
         */    static _t(t) {
            return new tt(new Y$1(t.slice()));
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ function et(t) {
        let e = 0;
        for (const n in t) Object.prototype.hasOwnProperty.call(t, n) && e++;
        return e;
    }

    function nt(t, e) {
        for (const n in t) Object.prototype.hasOwnProperty.call(t, n) && e(n, t[n]);
    }

    function st(t) {
        for (const e in t) if (Object.prototype.hasOwnProperty.call(t, e)) return !1;
        return !0;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provides a set of fields that can be used to partially patch a document.
     * FieldMask is used in conjunction with ObjectValue.
     * Examples:
     *   foo - Overwrites foo entirely with the provided value. If foo is not
     *         present in the companion ObjectValue, the field is deleted.
     *   foo.bar - Overwrites only the field bar of the object foo.
     *             If foo is not an object, foo is replaced with an object
     *             containing foo
     */ class it {
        constructor(t) {
            this.fields = t, 
            // TODO(dimond): validation of FieldMask
            // Sort the field mask to support `FieldMask.isEqual()` and assert below.
            t.sort(Z$1.K);
        }
        /**
         * Verifies that `fieldPath` is included by at least one field in this field
         * mask.
         *
         * This is an O(n) operation, where `n` is the size of the field mask.
         */    ft(t) {
            for (const e of this.fields) if (e.X(t)) return !0;
            return !1;
        }
        isEqual(t) {
            return j(this.fields, t.fields, ((t, e) => t.isEqual(e)));
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Converts a Base64 encoded string to a binary string. */
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Immutable class that represents a "proto" byte string.
     *
     * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when
     * sent on the wire. This class abstracts away this differentiation by holding
     * the proto byte string in a common class that must be converted into a string
     * before being sent as a proto.
     */
    class rt {
        constructor(t) {
            this.dt = t;
        }
        static fromBase64String(t) {
            const e = atob(t);
            return new rt(e);
        }
        static fromUint8Array(t) {
            const e = 
            /**
     * Helper function to convert an Uint8array to a binary string.
     */
            function(t) {
                let e = "";
                for (let n = 0; n < t.length; ++n) e += String.fromCharCode(t[n]);
                return e;
            }
            /**
     * Helper function to convert a binary string to an Uint8Array.
     */ (t);
            return new rt(e);
        }
        toBase64() {
            return t = this.dt, btoa(t);
            /** Converts a binary string to a Base64 encoded string. */
            var t;
        }
        toUint8Array() {
            return function(t) {
                const e = new Uint8Array(t.length);
                for (let n = 0; n < t.length; n++) e[n] = t.charCodeAt(n);
                return e;
            }
            /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
            // A RegExp matching ISO 8601 UTC timestamps with optional fraction.
            (this.dt);
        }
        wt() {
            return 2 * this.dt.length;
        }
        L(t) {
            return W$1(this.dt, t.dt);
        }
        isEqual(t) {
            return this.dt === t.dt;
        }
    }

    rt.Et = new rt("");

    const ot = new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);

    /**
     * Converts the possible Proto values for a timestamp value into a "seconds and
     * nanos" representation.
     */ function ct(t) {
        // The json interface (for the browser) will return an iso timestamp string,
        // while the proto js library (for node) will return a
        // google.protobuf.Timestamp instance.
        if (C(!!t), "string" == typeof t) {
            // The date string can have higher precision (nanos) than the Date class
            // (millis), so we do some custom parsing here.
            // Parse the nanos right out of the string.
            let e = 0;
            const n = ot.exec(t);
            if (C(!!n), n[1]) {
                // Pad the fraction out to 9 digits (nanos).
                let t = n[1];
                t = (t + "000000000").substr(0, 9), e = Number(t);
            }
            // Parse the date to get the seconds.
                    const s = new Date(t);
            return {
                seconds: Math.floor(s.getTime() / 1e3),
                nanos: e
            };
        }
        return {
            seconds: at(t.seconds),
            nanos: at(t.nanos)
        };
    }

    /**
     * Converts the possible Proto types for numbers into a JavaScript number.
     * Returns 0 if the value is not numeric.
     */ function at(t) {
        // TODO(bjornick): Handle int64 greater than 53 bits.
        return "number" == typeof t ? t : "string" == typeof t ? Number(t) : 0;
    }

    /** Converts the possible Proto types for Blobs into a ByteString. */ function ut(t) {
        return "string" == typeof t ? rt.fromBase64String(t) : rt.fromUint8Array(t);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Represents a locally-applied ServerTimestamp.
     *
     * Server Timestamps are backed by MapValues that contain an internal field
     * `__type__` with a value of `server_timestamp`. The previous value and local
     * write time are stored in its `__previous_value__` and `__local_write_time__`
     * fields respectively.
     *
     * Notes:
     * - ServerTimestampValue instances are created as the result of applying a
     *   transform. They can only exist in the local view of a document. Therefore
     *   they do not need to be parsed or serialized.
     * - When evaluated locally (e.g. for snapshot.data()), they by default
     *   evaluate to `null`. This behavior can be configured by passing custom
     *   FieldValueOptions to value().
     * - With respect to other ServerTimestampValues, they sort by their
     *   localWriteTime.
     */ function ht(t) {
        var e, n;
        return "server_timestamp" === (null === (n = ((null === (e = null == t ? void 0 : t.mapValue) || void 0 === e ? void 0 : e.fields) || {}).__type__) || void 0 === n ? void 0 : n.stringValue);
    }

    /**
     * Creates a new ServerTimestamp proto value (using the internal format).
     */
    /**
     * Returns the value of the field before this ServerTimestamp was set.
     *
     * Preserving the previous values allows the user to display the last resoled
     * value until the backend responds with the timestamp.
     */
    function lt(t) {
        const e = t.mapValue.fields.__previous_value__;
        return ht(e) ? lt(e) : e;
    }

    /**
     * Returns the local time at which this timestamp was first set.
     */ function _t(t) {
        const e = ct(t.mapValue.fields.__local_write_time__.timestampValue);
        return new z$1(e.seconds, e.nanos);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Sentinel value that sorts before any Mutation Batch ID. */
    /**
     * Returns whether a variable is either undefined or null.
     */
    function ft(t) {
        return null == t;
    }

    /** Returns whether the value represents -0. */ function dt(t) {
        // Detect if the value is -0.0. Based on polyfill from
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
        return 0 === t && 1 / t == -1 / 0;
    }

    /**
     * Returns whether a value is an integer and in the safe integer range
     * @param value - The value to test for being an integer and in the safe range
     */ function wt(t) {
        return "number" == typeof t && Number.isInteger(t) && !dt(t) && t <= Number.MAX_SAFE_INTEGER && t >= Number.MIN_SAFE_INTEGER;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Extracts the backend's type order for the provided value. */ function Et(t) {
        return "nullValue" in t ? 0 /* NullValue */ : "booleanValue" in t ? 1 /* BooleanValue */ : "integerValue" in t || "doubleValue" in t ? 2 /* NumberValue */ : "timestampValue" in t ? 3 /* TimestampValue */ : "stringValue" in t ? 5 /* StringValue */ : "bytesValue" in t ? 6 /* BlobValue */ : "referenceValue" in t ? 7 /* RefValue */ : "geoPointValue" in t ? 8 /* GeoPointValue */ : "arrayValue" in t ? 9 /* ArrayValue */ : "mapValue" in t ? ht(t) ? 4 /* ServerTimestampValue */ : 10 /* ObjectValue */ : D$1();
    }

    /** Tests `left` and `right` for equality based on the backend semantics. */ function Tt(t, e) {
        const n = Et(t);
        if (n !== Et(e)) return !1;
        switch (n) {
          case 0 /* NullValue */ :
            return !0;

          case 1 /* BooleanValue */ :
            return t.booleanValue === e.booleanValue;

          case 4 /* ServerTimestampValue */ :
            return _t(t).isEqual(_t(e));

          case 3 /* TimestampValue */ :
            return function(t, e) {
                if ("string" == typeof t.timestampValue && "string" == typeof e.timestampValue && t.timestampValue.length === e.timestampValue.length) 
                // Use string equality for ISO 8601 timestamps
                return t.timestampValue === e.timestampValue;
                const n = ct(t.timestampValue), s = ct(e.timestampValue);
                return n.seconds === s.seconds && n.nanos === s.nanos;
            }(t, e);

          case 5 /* StringValue */ :
            return t.stringValue === e.stringValue;

          case 6 /* BlobValue */ :
            return function(t, e) {
                return ut(t.bytesValue).isEqual(ut(e.bytesValue));
            }(t, e);

          case 7 /* RefValue */ :
            return t.referenceValue === e.referenceValue;

          case 8 /* GeoPointValue */ :
            return function(t, e) {
                return at(t.geoPointValue.latitude) === at(e.geoPointValue.latitude) && at(t.geoPointValue.longitude) === at(e.geoPointValue.longitude);
            }(t, e);

          case 2 /* NumberValue */ :
            return function(t, e) {
                if ("integerValue" in t && "integerValue" in e) return at(t.integerValue) === at(e.integerValue);
                if ("doubleValue" in t && "doubleValue" in e) {
                    const n = at(t.doubleValue), s = at(e.doubleValue);
                    return n === s ? dt(n) === dt(s) : isNaN(n) && isNaN(s);
                }
                return !1;
            }(t, e);

          case 9 /* ArrayValue */ :
            return j(t.arrayValue.values || [], e.arrayValue.values || [], Tt);

          case 10 /* ObjectValue */ :
            return function(t, e) {
                const n = t.mapValue.fields || {}, s = e.mapValue.fields || {};
                if (et(n) !== et(s)) return !1;
                for (const t in n) if (n.hasOwnProperty(t) && (void 0 === s[t] || !Tt(n[t], s[t]))) return !1;
                return !0;
            }
            /** Returns true if the ArrayValue contains the specified element. */ (t, e);

          default:
            return D$1();
        }
    }

    function It(t, e) {
        return void 0 !== (t.values || []).find((t => Tt(t, e)));
    }

    function mt(t, e) {
        const n = Et(t), s = Et(e);
        if (n !== s) return W$1(n, s);
        switch (n) {
          case 0 /* NullValue */ :
            return 0;

          case 1 /* BooleanValue */ :
            return W$1(t.booleanValue, e.booleanValue);

          case 2 /* NumberValue */ :
            return function(t, e) {
                const n = at(t.integerValue || t.doubleValue), s = at(e.integerValue || e.doubleValue);
                return n < s ? -1 : n > s ? 1 : n === s ? 0 : 
                // one or both are NaN.
                isNaN(n) ? isNaN(s) ? 0 : -1 : 1;
            }(t, e);

          case 3 /* TimestampValue */ :
            return At(t.timestampValue, e.timestampValue);

          case 4 /* ServerTimestampValue */ :
            return At(_t(t), _t(e));

          case 5 /* StringValue */ :
            return W$1(t.stringValue, e.stringValue);

          case 6 /* BlobValue */ :
            return function(t, e) {
                const n = ut(t), s = ut(e);
                return n.L(s);
            }(t.bytesValue, e.bytesValue);

          case 7 /* RefValue */ :
            return function(t, e) {
                const n = t.split("/"), s = e.split("/");
                for (let t = 0; t < n.length && t < s.length; t++) {
                    const e = W$1(n[t], s[t]);
                    if (0 !== e) return e;
                }
                return W$1(n.length, s.length);
            }(t.referenceValue, e.referenceValue);

          case 8 /* GeoPointValue */ :
            return function(t, e) {
                const n = W$1(at(t.latitude), at(e.latitude));
                if (0 !== n) return n;
                return W$1(at(t.longitude), at(e.longitude));
            }(t.geoPointValue, e.geoPointValue);

          case 9 /* ArrayValue */ :
            return function(t, e) {
                const n = t.values || [], s = e.values || [];
                for (let t = 0; t < n.length && t < s.length; ++t) {
                    const e = mt(n[t], s[t]);
                    if (e) return e;
                }
                return W$1(n.length, s.length);
            }(t.arrayValue, e.arrayValue);

          case 10 /* ObjectValue */ :
            return function(t, e) {
                const n = t.fields || {}, s = Object.keys(n), i = e.fields || {}, r = Object.keys(i);
                // Even though MapValues are likely sorted correctly based on their insertion
                // order (e.g. when received from the backend), local modifications can bring
                // elements out of order. We need to re-sort the elements to ensure that
                // canonical IDs are independent of insertion order.
                s.sort(), r.sort();
                for (let t = 0; t < s.length && t < r.length; ++t) {
                    const e = W$1(s[t], r[t]);
                    if (0 !== e) return e;
                    const o = mt(n[s[t]], i[r[t]]);
                    if (0 !== o) return o;
                }
                return W$1(s.length, r.length);
            }
            /**
     * Generates the canonical ID for the provided field value (as used in Target
     * serialization).
     */ (t.mapValue, e.mapValue);

          default:
            throw D$1();
        }
    }

    function At(t, e) {
        if ("string" == typeof t && "string" == typeof e && t.length === e.length) return W$1(t, e);
        const n = ct(t), s = ct(e), i = W$1(n.seconds, s.seconds);
        return 0 !== i ? i : W$1(n.nanos, s.nanos);
    }

    function Rt(t) {
        return Pt(t);
    }

    function Pt(t) {
        return "nullValue" in t ? "null" : "booleanValue" in t ? "" + t.booleanValue : "integerValue" in t ? "" + t.integerValue : "doubleValue" in t ? "" + t.doubleValue : "timestampValue" in t ? function(t) {
            const e = ct(t);
            return `time(${e.seconds},${e.nanos})`;
        }(t.timestampValue) : "stringValue" in t ? t.stringValue : "bytesValue" in t ? ut(t.bytesValue).toBase64() : "referenceValue" in t ? (n = t.referenceValue, 
        tt.ut(n).toString()) : "geoPointValue" in t ? `geo(${(e = t.geoPointValue).latitude},${e.longitude})` : "arrayValue" in t ? function(t) {
            let e = "[", n = !0;
            for (const s of t.values || []) n ? n = !1 : e += ",", e += Pt(s);
            return e + "]";
        }
        /** Returns a reference value for the provided database and key. */ (t.arrayValue) : "mapValue" in t ? function(t) {
            // Iteration order in JavaScript is not guaranteed. To ensure that we generate
            // matching canonical IDs for identical maps, we need to sort the keys.
            const e = Object.keys(t.fields || {}).sort();
            let n = "{", s = !0;
            for (const i of e) s ? s = !1 : n += ",", n += `${i}:${Pt(t.fields[i])}`;
            return n + "}";
        }(t.mapValue) : D$1();
        var e, n;
    }

    function Vt(t, e) {
        return {
            referenceValue: `projects/${t.projectId}/databases/${t.database}/documents/${e.path.et()}`
        };
    }

    /** Returns true if `value` is an IntegerValue . */ function gt(t) {
        return !!t && "integerValue" in t;
    }

    /** Returns true if `value` is a DoubleValue. */
    /** Returns true if `value` is an ArrayValue. */
    function yt(t) {
        return !!t && "arrayValue" in t;
    }

    /** Returns true if `value` is a NullValue. */ function pt(t) {
        return !!t && "nullValue" in t;
    }

    /** Returns true if `value` is NaN. */ function bt(t) {
        return !!t && "doubleValue" in t && isNaN(Number(t.doubleValue));
    }

    /** Returns true if `value` is a MapValue. */ function vt(t) {
        return !!t && "mapValue" in t;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An ObjectValue represents a MapValue in the Firestore Proto and offers the
     * ability to add and remove fields (via the ObjectValueBuilder).
     */ class St {
        constructor(t) {
            this.proto = t;
        }
        static empty() {
            return new St({
                mapValue: {}
            });
        }
        /**
         * Returns the value at the given path or null.
         *
         * @param path - the path to search
         * @returns The value at the path or if there it doesn't exist.
         */    field(t) {
            if (t.Y()) return this.proto;
            {
                let e = this.proto;
                for (let n = 0; n < t.length - 1; ++n) {
                    if (!e.mapValue.fields) return null;
                    if (e = e.mapValue.fields[t.get(n)], !vt(e)) return null;
                }
                return e = (e.mapValue.fields || {})[t.J()], e || null;
            }
        }
        isEqual(t) {
            return Tt(this.proto, t.proto);
        }
    }

    /**
     * An ObjectValueBuilder provides APIs to set and delete fields from an
     * ObjectValue.
     */ class Dt {
        /**
         * @param baseObject - The object to mutate.
         */
        constructor(t = St.empty()) {
            this.Tt = t, 
            /** A map that contains the accumulated changes in this builder. */
            this.It = new Map;
        }
        /**
         * Sets the field to the provided value.
         *
         * @param path - The field path to set.
         * @param value - The value to set.
         * @returns The current Builder instance.
         */    set(t, e) {
            return this.At(t, e), this;
        }
        /**
         * Removes the field at the specified path. If there is no field at the
         * specified path, nothing is changed.
         *
         * @param path - The field path to remove.
         * @returns The current Builder instance.
         */    delete(t) {
            return this.At(t, null), this;
        }
        /**
         * Adds `value` to the overlay map at `path`. Creates nested map entries if
         * needed.
         */    At(t, e) {
            let n = this.It;
            for (let e = 0; e < t.length - 1; ++e) {
                const s = t.get(e);
                let i = n.get(s);
                i instanceof Map ? 
                // Re-use a previously created map
                n = i : i && 10 /* ObjectValue */ === Et(i) ? (
                // Convert the existing Protobuf MapValue into a map
                i = new Map(Object.entries(i.mapValue.fields || {})), n.set(s, i), n = i) : (
                // Create an empty map to represent the current nesting level
                i = new Map, n.set(s, i), n = i);
            }
            n.set(t.J(), e);
        }
        /** Returns an ObjectValue with all mutations applied. */    Rt() {
            const t = this.Pt(Z$1.st(), this.It);
            return null != t ? new St(t) : this.Tt;
        }
        /**
         * Applies any overlays from `currentOverlays` that exist at `currentPath`
         * and returns the merged data at `currentPath` (or null if there were no
         * changes).
         *
         * @param currentPath - The path at the current nesting level. Can be set to
         * FieldValue.emptyPath() to represent the root.
         * @param currentOverlays - The overlays at the current nesting level in the
         * same format as `overlayMap`.
         * @returns The merged data at `currentPath` or null if no modifications
         * were applied.
         */    Pt(t, e) {
            let n = !1;
            const s = this.Tt.field(t), i = vt(s) ? // If there is already data at the current path, base our
            Object.assign({}, s.mapValue.fields) : {};
            return e.forEach(((e, s) => {
                if (e instanceof Map) {
                    const r = this.Pt(t.child(s), e);
                    null != r && (i[s] = r, n = !0);
                } else null !== e ? (i[s] = e, n = !0) : i.hasOwnProperty(s) && (delete i[s], n = !0);
            })), n ? {
                mapValue: {
                    fields: i
                }
            } : null;
        }
    }

    /**
     * Returns a FieldMask built from all fields in a MapValue.
     */ function Ct(t) {
        const e = [];
        return nt(t.fields || {}, ((t, n) => {
            const s = new Z$1([ t ]);
            if (vt(n)) {
                const t = Ct(n.mapValue).fields;
                if (0 === t.length) 
                // Preserve the empty map by adding it to the FieldMask.
                e.push(s); else 
                // For nested and non-empty ObjectValues, add the FieldPath of the
                // leaf nodes.
                for (const n of t) e.push(s.child(n));
            } else 
            // For nested and non-empty ObjectValues, add the FieldPath of the leaf
            // nodes.
            e.push(s);
        })), new it(e);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * The result of a lookup for a given path may be an existing document or a
     * marker that this document does not exist at a given version.
     */ class Nt {
        constructor(t, e) {
            this.key = t, this.version = e;
        }
    }

    /**
     * Represents a document in Firestore with a key, version, data and whether the
     * data has local mutations applied to it.
     */ class xt extends Nt {
        constructor(t, e, n, s) {
            super(t, e), this.Vt = n, this.gt = !!s.gt, this.hasCommittedMutations = !!s.hasCommittedMutations;
        }
        field(t) {
            return this.Vt.field(t);
        }
        data() {
            return this.Vt;
        }
        yt() {
            return this.Vt.proto;
        }
        isEqual(t) {
            return t instanceof xt && this.key.isEqual(t.key) && this.version.isEqual(t.version) && this.gt === t.gt && this.hasCommittedMutations === t.hasCommittedMutations && this.Vt.isEqual(t.Vt);
        }
        toString() {
            return `Document(${this.key}, ${this.version}, ${this.Vt.toString()}, {hasLocalMutations: ${this.gt}}), {hasCommittedMutations: ${this.hasCommittedMutations}})`;
        }
        get hasPendingWrites() {
            return this.gt || this.hasCommittedMutations;
        }
    }

    /**
     * Compares the value for field `field` in the provided documents. Throws if
     * the field does not exist in both documents.
     */
    /**
     * A class representing a deleted document.
     * Version is set to 0 if we don't point to any specific time, otherwise it
     * denotes time we know it didn't exist at.
     */
    class $t extends Nt {
        constructor(t, e, n) {
            super(t, e), this.hasCommittedMutations = !(!n || !n.hasCommittedMutations);
        }
        toString() {
            return `NoDocument(${this.key}, ${this.version})`;
        }
        get hasPendingWrites() {
            return this.hasCommittedMutations;
        }
        isEqual(t) {
            return t instanceof $t && t.hasCommittedMutations === this.hasCommittedMutations && t.version.isEqual(this.version) && t.key.isEqual(this.key);
        }
    }

    /**
     * A class representing an existing document whose data is unknown (e.g. a
     * document that was updated without a known base document).
     */ class Ot extends Nt {
        toString() {
            return `UnknownDocument(${this.key}, ${this.version})`;
        }
        get hasPendingWrites() {
            return !0;
        }
        isEqual(t) {
            return t instanceof Ot && t.version.isEqual(this.version) && t.key.isEqual(this.key);
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // Visible for testing
    class kt {
        constructor(t, e = null, n = [], s = [], i = null, r = null, o = null) {
            this.path = t, this.collectionGroup = e, this.orderBy = n, this.filters = s, this.limit = i, 
            this.startAt = r, this.endAt = o, this.bt = null;
        }
    }

    /**
     * Initializes a Target with a path and optional additional query constraints.
     * Path must currently be empty if this is a collection group query.
     *
     * NOTE: you should always construct `Target` from `Query.toTarget` instead of
     * using this factory method, because `Query` provides an implicit `orderBy`
     * property.
     */ function Mt(t, e = null, n = [], s = [], i = null, r = null, o = null) {
        return new kt(t, e, n, s, i, r, o);
    }

    function Ft(t) {
        const e = N$1(t);
        if (null === e.bt) {
            let t = e.path.et();
            null !== e.collectionGroup && (t += "|cg:" + e.collectionGroup), t += "|f:", t += e.filters.map((t => Kt(t))).join(","), 
            t += "|ob:", t += e.orderBy.map((t => function(t) {
                // TODO(b/29183165): Make this collision robust.
                return t.field.et() + t.dir;
            }(t))).join(","), ft(e.limit) || (t += "|l:", t += e.limit), e.startAt && (t += "|lb:", 
            t += Zt(e.startAt)), e.endAt && (t += "|ub:", t += Zt(e.endAt)), e.bt = t;
        }
        return e.bt;
    }

    function Lt(t) {
        let e = t.path.et();
        return null !== t.collectionGroup && (e += " collectionGroup=" + t.collectionGroup), 
        t.filters.length > 0 && (e += `, filters: [${t.filters.map((t => {
        return `${(e = t).field.et()} ${e.op} ${Rt(e.value)}`;
        /** Returns a debug description for `filter`. */
        var e;
        /** Filter that matches on key fields (i.e. '__name__'). */    })).join(", ")}]`), 
        ft(t.limit) || (e += ", limit: " + t.limit), t.orderBy.length > 0 && (e += `, orderBy: [${t.orderBy.map((t => function(t) {
        return `${t.field.et()} (${t.dir})`;
    }(t))).join(", ")}]`), t.startAt && (e += ", startAt: " + Zt(t.startAt)), t.endAt && (e += ", endAt: " + Zt(t.endAt)), 
        `Target(${e})`;
    }

    function Bt(t, e) {
        if (t.limit !== e.limit) return !1;
        if (t.orderBy.length !== e.orderBy.length) return !1;
        for (let n = 0; n < t.orderBy.length; n++) if (!ee(t.orderBy[n], e.orderBy[n])) return !1;
        if (t.filters.length !== e.filters.length) return !1;
        for (let i = 0; i < t.filters.length; i++) if (n = t.filters[i], s = e.filters[i], 
        n.op !== s.op || !n.field.isEqual(s.field) || !Tt(n.value, s.value)) return !1;
        var n, s;
        return t.collectionGroup === e.collectionGroup && (!!t.path.isEqual(e.path) && (!!se(t.startAt, e.startAt) && se(t.endAt, e.endAt)));
    }

    function qt(t) {
        return tt.lt(t.path) && null === t.collectionGroup && 0 === t.filters.length;
    }

    class Ut extends class {} {
        constructor(t, e, n) {
            super(), this.field = t, this.op = e, this.value = n;
        }
        /**
         * Creates a filter based on the provided arguments.
         */    static create(t, e, n) {
            return t.rt() ? "in" /* IN */ === e || "not-in" /* NOT_IN */ === e ? this.vt(t, e, n) : new Qt(t, e, n) : "array-contains" /* ARRAY_CONTAINS */ === e ? new zt(t, n) : "in" /* IN */ === e ? new Ht(t, n) : "not-in" /* NOT_IN */ === e ? new Jt(t, n) : "array-contains-any" /* ARRAY_CONTAINS_ANY */ === e ? new Yt(t, n) : new Ut(t, e, n);
        }
        static vt(t, e, n) {
            return "in" /* IN */ === e ? new Wt(t, n) : new jt(t, n);
        }
        matches(t) {
            const e = t.field(this.field);
            // Types do not have to match in NOT_EQUAL filters.
                    return "!=" /* NOT_EQUAL */ === this.op ? null !== e && this.St(mt(e, this.value)) : null !== e && Et(this.value) === Et(e) && this.St(mt(e, this.value));
            // Only compare types with matching backend order (such as double and int).
            }
        St(t) {
            switch (this.op) {
              case "<" /* LESS_THAN */ :
                return t < 0;

              case "<=" /* LESS_THAN_OR_EQUAL */ :
                return t <= 0;

              case "==" /* EQUAL */ :
                return 0 === t;

              case "!=" /* NOT_EQUAL */ :
                return 0 !== t;

              case ">" /* GREATER_THAN */ :
                return t > 0;

              case ">=" /* GREATER_THAN_OR_EQUAL */ :
                return t >= 0;

              default:
                return D$1();
            }
        }
        Dt() {
            return [ "<" /* LESS_THAN */ , "<=" /* LESS_THAN_OR_EQUAL */ , ">" /* GREATER_THAN */ , ">=" /* GREATER_THAN_OR_EQUAL */ , "!=" /* NOT_EQUAL */ , "not-in" /* NOT_IN */ ].indexOf(this.op) >= 0;
        }
    }

    function Kt(t) {
        // TODO(b/29183165): Technically, this won't be unique if two values have
        // the same description, such as the int 3 and the string "3". So we should
        // add the types in here somehow, too.
        return t.field.et() + t.op.toString() + Rt(t.value);
    }

    class Qt extends Ut {
        constructor(t, e, n) {
            super(t, e, n), this.key = tt.ut(n.referenceValue);
        }
        matches(t) {
            const e = tt.K(t.key, this.key);
            return this.St(e);
        }
    }

    /** Filter that matches on key fields within an array. */ class Wt extends Ut {
        constructor(t, e) {
            super(t, "in" /* IN */ , e), this.keys = Gt("in" /* IN */ , e);
        }
        matches(t) {
            return this.keys.some((e => e.isEqual(t.key)));
        }
    }

    /** Filter that matches on key fields not present within an array. */ class jt extends Ut {
        constructor(t, e) {
            super(t, "not-in" /* NOT_IN */ , e), this.keys = Gt("not-in" /* NOT_IN */ , e);
        }
        matches(t) {
            return !this.keys.some((e => e.isEqual(t.key)));
        }
    }

    function Gt(t, e) {
        var n;
        return ((null === (n = e.arrayValue) || void 0 === n ? void 0 : n.values) || []).map((t => tt.ut(t.referenceValue)));
    }

    /** A Filter that implements the array-contains operator. */ class zt extends Ut {
        constructor(t, e) {
            super(t, "array-contains" /* ARRAY_CONTAINS */ , e);
        }
        matches(t) {
            const e = t.field(this.field);
            return yt(e) && It(e.arrayValue, this.value);
        }
    }

    /** A Filter that implements the IN operator. */ class Ht extends Ut {
        constructor(t, e) {
            super(t, "in" /* IN */ , e);
        }
        matches(t) {
            const e = t.field(this.field);
            return null !== e && It(this.value.arrayValue, e);
        }
    }

    /** A Filter that implements the not-in operator. */ class Jt extends Ut {
        constructor(t, e) {
            super(t, "not-in" /* NOT_IN */ , e);
        }
        matches(t) {
            if (It(this.value.arrayValue, {
                nullValue: "NULL_VALUE"
            })) return !1;
            const e = t.field(this.field);
            return null !== e && !It(this.value.arrayValue, e);
        }
    }

    /** A Filter that implements the array-contains-any operator. */ class Yt extends Ut {
        constructor(t, e) {
            super(t, "array-contains-any" /* ARRAY_CONTAINS_ANY */ , e);
        }
        matches(t) {
            const e = t.field(this.field);
            return !(!yt(e) || !e.arrayValue.values) && e.arrayValue.values.some((t => It(this.value.arrayValue, t)));
        }
    }

    /**
     * Represents a bound of a query.
     *
     * The bound is specified with the given components representing a position and
     * whether it's just before or just after the position (relative to whatever the
     * query order is).
     *
     * The position represents a logical index position for a query. It's a prefix
     * of values for the (potentially implicit) order by clauses of a query.
     *
     * Bound provides a function to determine whether a document comes before or
     * after a bound. This is influenced by whether the position is just before or
     * just after the provided values.
     */ class Xt {
        constructor(t, e) {
            this.position = t, this.before = e;
        }
    }

    function Zt(t) {
        // TODO(b/29183165): Make this collision robust.
        return `${t.before ? "b" : "a"}:${t.position.map((t => Rt(t))).join(",")}`;
    }

    /**
     * An ordering on a field, in some Direction. Direction defaults to ASCENDING.
     */ class te {
        constructor(t, e = "asc" /* ASCENDING */) {
            this.field = t, this.dir = e;
        }
    }

    function ee(t, e) {
        return t.dir === e.dir && t.field.isEqual(e.field);
    }

    /**
     * Returns true if a document sorts before a bound using the provided sort
     * order.
     */ function ne(t, e, n) {
        let s = 0;
        for (let i = 0; i < t.position.length; i++) {
            const r = e[i], o = t.position[i];
            if (r.field.rt()) s = tt.K(tt.ut(o.referenceValue), n.key); else {
                s = mt(o, n.field(r.field));
            }
            if ("desc" /* DESCENDING */ === r.dir && (s *= -1), 0 !== s) break;
        }
        return t.before ? s <= 0 : s < 0;
    }

    function se(t, e) {
        if (null === t) return null === e;
        if (null === e) return !1;
        if (t.before !== e.before || t.position.length !== e.position.length) return !1;
        for (let n = 0; n < t.position.length; n++) {
            if (!Tt(t.position[n], e.position[n])) return !1;
        }
        return !0;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Query encapsulates all the query attributes we support in the SDK. It can
     * be run against the LocalStore, as well as be converted to a `Target` to
     * query the RemoteStore results.
     *
     * Visible for testing.
     */ class ie {
        /**
         * Initializes a Query with a path and optional additional query constraints.
         * Path must currently be empty if this is a collection group query.
         */
        constructor(t, e = null, n = [], s = [], i = null, r = "F" /* First */ , o = null, c = null) {
            this.path = t, this.collectionGroup = e, this.Ct = n, this.filters = s, this.limit = i, 
            this.limitType = r, this.startAt = o, this.endAt = c, this.Nt = null, 
            // The corresponding `Target` of this `Query` instance.
            this.xt = null, this.startAt, this.endAt;
        }
    }

    /** Creates a new Query instance with the options provided. */ function re(t, e, n, s, i, r, o, c) {
        return new ie(t, e, n, s, i, r, o, c);
    }

    /** Creates a new Query for a query that matches all documents at `path` */ function oe(t) {
        return new ie(t);
    }

    /**
     * Helper to convert a collection group query into a collection query at a
     * specific path. This is used when executing collection group queries, since
     * we have to split the query into a set of collection queries at multiple
     * paths.
     */ function ce(t) {
        return !ft(t.limit) && "F" /* First */ === t.limitType;
    }

    function ae(t) {
        return !ft(t.limit) && "L" /* Last */ === t.limitType;
    }

    function ue(t) {
        return t.Ct.length > 0 ? t.Ct[0].field : null;
    }

    function he(t) {
        for (const e of t.filters) if (e.Dt()) return e.field;
        return null;
    }

    /**
     * Checks if any of the provided Operators are included in the query and
     * returns the first one that is, or null if none are.
     */
    /**
     * Returns whether the query matches a collection group rather than a specific
     * collection.
     */
    function le(t) {
        return null !== t.collectionGroup;
    }

    /**
     * Returns the implicit order by constraint that is used to execute the Query,
     * which can be different from the order by constraints the user provided (e.g.
     * the SDK and backend always orders by `__name__`).
     */ function _e(t) {
        const e = N$1(t);
        if (null === e.Nt) {
            e.Nt = [];
            const t = he(e), n = ue(e);
            if (null !== t && null === n) 
            // In order to implicitly add key ordering, we must also add the
            // inequality filter field for it to be a valid query.
            // Note that the default inequality field and key ordering is ascending.
            t.rt() || e.Nt.push(new te(t)), e.Nt.push(new te(Z$1.ot(), "asc" /* ASCENDING */)); else {
                let t = !1;
                for (const n of e.Ct) e.Nt.push(n), n.field.rt() && (t = !0);
                if (!t) {
                    // The order of the implicit key ordering always matches the last
                    // explicit order by
                    const t = e.Ct.length > 0 ? e.Ct[e.Ct.length - 1].dir : "asc" /* ASCENDING */;
                    e.Nt.push(new te(Z$1.ot(), t));
                }
            }
        }
        return e.Nt;
    }

    /**
     * Converts this `Query` instance to it's corresponding `Target` representation.
     */ function fe(t) {
        const e = N$1(t);
        if (!e.xt) if ("F" /* First */ === e.limitType) e.xt = Mt(e.path, e.collectionGroup, _e(e), e.filters, e.limit, e.startAt, e.endAt); else {
            // Flip the orderBy directions since we want the last results
            const t = [];
            for (const n of _e(e)) {
                const e = "desc" /* DESCENDING */ === n.dir ? "asc" /* ASCENDING */ : "desc" /* DESCENDING */;
                t.push(new te(n.field, e));
            }
            // We need to swap the cursors to match the now-flipped query ordering.
                    const n = e.endAt ? new Xt(e.endAt.position, !e.endAt.before) : null, s = e.startAt ? new Xt(e.startAt.position, !e.startAt.before) : null;
            // Now return as a LimitType.First query.
            e.xt = Mt(e.path, e.collectionGroup, t, e.filters, e.limit, n, s);
        }
        return e.xt;
    }

    function de(t, e, n) {
        return new ie(t.path, t.collectionGroup, t.Ct.slice(), t.filters.slice(), e, n, t.startAt, t.endAt);
    }

    function we(t, e) {
        return Bt(fe(t), fe(e)) && t.limitType === e.limitType;
    }

    // TODO(b/29183165): This is used to get a unique string from a query to, for
    // example, use as a dictionary key, but the implementation is subject to
    // collisions. Make it collision-free.
    function Ee(t) {
        return `${Ft(fe(t))}|lt:${t.limitType}`;
    }

    function Te(t) {
        return `Query(target=${Lt(fe(t))}; limitType=${t.limitType})`;
    }

    /** Returns whether `doc` matches the constraints of `query`. */ function Ie(t, e) {
        return function(t, e) {
            const n = e.key.path;
            return null !== t.collectionGroup ? e.key.ht(t.collectionGroup) && t.path.X(n) : tt.lt(t.path) ? t.path.isEqual(n) : t.path.Z(n);
        }
        /**
     * A document must have a value for every ordering clause in order to show up
     * in the results.
     */ (t, e) && function(t, e) {
            for (const n of t.Ct) 
            // order by key always matches
            if (!n.field.rt() && null === e.field(n.field)) return !1;
            return !0;
        }(t, e) && function(t, e) {
            for (const n of t.filters) if (!n.matches(e)) return !1;
            return !0;
        }
        /** Makes sure a document is within the bounds, if provided. */ (t, e) && function(t, e) {
            if (t.startAt && !ne(t.startAt, _e(t), e)) return !1;
            if (t.endAt && ne(t.endAt, _e(t), e)) return !1;
            return !0;
        }
        /**
     * Returns a new comparator function that can be used to compare two documents
     * based on the Query's ordering constraint.
     */ (t, e);
    }

    function me(t) {
        return (e, n) => {
            let s = !1;
            for (const i of _e(t)) {
                const t = Ae(i, e, n);
                if (0 !== t) return t;
                s = s || i.field.rt();
            }
            return 0;
        };
    }

    function Ae(t, e, n) {
        const s = t.field.rt() ? tt.K(e.key, n.key) : function(t, e, n) {
            const s = e.field(t), i = n.field(t);
            return null !== s && null !== i ? mt(s, i) : D$1();
        }(t.field, e, n);
        switch (t.dir) {
          case "asc" /* ASCENDING */ :
            return s;

          case "desc" /* DESCENDING */ :
            return -1 * s;

          default:
            return D$1();
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An immutable set of metadata that the local store tracks for each target.
     */ class Re {
        constructor(
        /** The target being listened to. */
        t, 
        /**
         * The target ID to which the target corresponds; Assigned by the
         * LocalStore for user listens and by the SyncEngine for limbo watches.
         */
        e, 
        /** The purpose of the target. */
        n, 
        /**
         * The sequence number of the last transaction during which this target data
         * was modified.
         */
        s, 
        /** The latest snapshot version seen for this target. */
        i = H$1.min()
        /**
         * The maximum snapshot version at which the associated view
         * contained no limbo documents.
         */ , r = H$1.min()
        /**
         * An opaque, server-assigned token that allows watching a target to be
         * resumed after disconnecting without retransmitting all the data that
         * matches the target. The resume token essentially identifies a point in
         * time from which the server should resume sending results.
         */ , o = rt.Et) {
            this.target = t, this.targetId = e, this.$t = n, this.sequenceNumber = s, this.Ot = i, 
            this.lastLimboFreeSnapshotVersion = r, this.resumeToken = o;
        }
        /** Creates a new target data instance with an updated sequence number. */    kt(t) {
            return new Re(this.target, this.targetId, this.$t, t, this.Ot, this.lastLimboFreeSnapshotVersion, this.resumeToken);
        }
        /**
         * Creates a new target data instance with an updated resume token and
         * snapshot version.
         */    Mt(t, e) {
            return new Re(this.target, this.targetId, this.$t, this.sequenceNumber, e, this.lastLimboFreeSnapshotVersion, t);
        }
        /**
         * Creates a new target data instance with an updated last limbo free
         * snapshot version number.
         */    Ft(t) {
            return new Re(this.target, this.targetId, this.$t, this.sequenceNumber, this.Ot, t, this.resumeToken);
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns an DoubleValue for `value` that is encoded based the serializer's
     * `useProto3Json` setting.
     */ function Pe(t, e) {
        if (t.Lt) {
            if (isNaN(e)) return {
                doubleValue: "NaN"
            };
            if (e === 1 / 0) return {
                doubleValue: "Infinity"
            };
            if (e === -1 / 0) return {
                doubleValue: "-Infinity"
            };
        }
        return {
            doubleValue: dt(e) ? "-0" : e
        };
    }

    /**
     * Returns an IntegerValue for `value`.
     */ function Ve(t) {
        return {
            integerValue: "" + t
        };
    }

    /**
     * Returns a value for a number that's appropriate to put into a proto.
     * The return value is an IntegerValue if it can safely represent the value,
     * otherwise a DoubleValue is returned.
     */ function ge(t, e) {
        return wt(e) ? Ve(e) : Pe(t, e);
    }

    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Used to represent a field transform on a mutation. */ class ye {
        constructor() {
            // Make sure that the structural type of `TransformOperation` is unique.
            // See https://github.com/microsoft/TypeScript/issues/5451
            this.Bt = void 0;
        }
    }

    /**
     * Computes the local transform result against the provided `previousValue`,
     * optionally using the provided localWriteTime.
     */ function pe(t, e, n) {
        return t instanceof Se ? function(t, e) {
            const n = {
                fields: {
                    __type__: {
                        stringValue: "server_timestamp"
                    },
                    __local_write_time__: {
                        timestampValue: {
                            seconds: t.seconds,
                            nanos: t.nanoseconds
                        }
                    }
                }
            };
            return e && (n.fields.__previous_value__ = e), {
                mapValue: n
            };
        }(n, e) : t instanceof De ? Ce(t, e) : t instanceof Ne ? xe(t, e) : function(t, e) {
            // PORTING NOTE: Since JavaScript's integer arithmetic is limited to 53 bit
            // precision and resolves overflows by reducing precision, we do not
            // manually cap overflows at 2^63.
            const n = ve(t, e), s = Oe(n) + Oe(t.qt);
            return gt(n) && gt(t.qt) ? Ve(s) : Pe(t.Ut, s);
        }(t, e);
    }

    /**
     * Computes a final transform result after the transform has been acknowledged
     * by the server, potentially using the server-provided transformResult.
     */ function be(t, e, n) {
        // The server just sends null as the transform result for array operations,
        // so we have to calculate a result the same as we do for local
        // applications.
        return t instanceof De ? Ce(t, e) : t instanceof Ne ? xe(t, e) : n;
    }

    /**
     * If this transform operation is not idempotent, returns the base value to
     * persist for this transform. If a base value is returned, the transform
     * operation is always applied to this base value, even if document has
     * already been updated.
     *
     * Base values provide consistent behavior for non-idempotent transforms and
     * allow us to return the same latency-compensated value even if the backend
     * has already applied the transform operation. The base value is null for
     * idempotent transforms, as they can be re-played even if the backend has
     * already applied them.
     *
     * @returns a base value to store along with the mutation, or null for
     * idempotent transforms.
     */ function ve(t, e) {
        return t instanceof $e ? gt(n = e) || function(t) {
            return !!t && "doubleValue" in t;
        }
        /** Returns true if `value` is either an IntegerValue or a DoubleValue. */ (n) ? e : {
            integerValue: 0
        } : null;
        var n;
    }

    /** Transforms a value into a server-generated timestamp. */
    class Se extends ye {}

    /** Transforms an array value via a union operation. */ class De extends ye {
        constructor(t) {
            super(), this.elements = t;
        }
    }

    function Ce(t, e) {
        const n = ke(e);
        for (const e of t.elements) n.some((t => Tt(t, e))) || n.push(e);
        return {
            arrayValue: {
                values: n
            }
        };
    }

    /** Transforms an array value via a remove operation. */ class Ne extends ye {
        constructor(t) {
            super(), this.elements = t;
        }
    }

    function xe(t, e) {
        let n = ke(e);
        for (const e of t.elements) n = n.filter((t => !Tt(t, e)));
        return {
            arrayValue: {
                values: n
            }
        };
    }

    /**
     * Implements the backend semantics for locally computed NUMERIC_ADD (increment)
     * transforms. Converts all field values to integers or doubles, but unlike the
     * backend does not cap integer values at 2^63. Instead, JavaScript number
     * arithmetic is used and precision loss can occur for values greater than 2^53.
     */ class $e extends ye {
        constructor(t, e) {
            super(), this.Ut = t, this.qt = e;
        }
    }

    function Oe(t) {
        return at(t.integerValue || t.doubleValue);
    }

    function ke(t) {
        return yt(t) && t.arrayValue.values ? t.arrayValue.values.slice() : [];
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** A field path and the TransformOperation to perform upon it. */ class Me {
        constructor(t, e) {
            this.field = t, this.transform = e;
        }
    }

    function Fe(t, e) {
        return t.field.isEqual(e.field) && function(t, e) {
            return t instanceof De && e instanceof De || t instanceof Ne && e instanceof Ne ? j(t.elements, e.elements, Tt) : t instanceof $e && e instanceof $e ? Tt(t.qt, e.qt) : t instanceof Se && e instanceof Se;
        }(t.transform, e.transform);
    }

    /** The result of successfully applying a mutation to the backend. */
    class Le {
        constructor(
        /**
         * The version at which the mutation was committed:
         *
         * - For most operations, this is the updateTime in the WriteResult.
         * - For deletes, the commitTime of the WriteResponse (because deletes are
         *   not stored and have no updateTime).
         *
         * Note that these versions can be different: No-op writes will not change
         * the updateTime even though the commitTime advances.
         */
        t, 
        /**
         * The resulting fields returned from the backend after a mutation
         * containing field transforms has been committed. Contains one FieldValue
         * for each FieldTransform that was in the mutation.
         *
         * Will be null if the mutation did not contain any field transforms.
         */
        e) {
            this.version = t, this.transformResults = e;
        }
    }

    /**
     * Encodes a precondition for a mutation. This follows the model that the
     * backend accepts with the special case of an explicit "empty" precondition
     * (meaning no precondition).
     */ class Be {
        constructor(t, e) {
            this.updateTime = t, this.exists = e;
        }
        /** Creates a new empty Precondition. */    static Kt() {
            return new Be;
        }
        /** Creates a new Precondition with an exists flag. */    static exists(t) {
            return new Be(void 0, t);
        }
        /** Creates a new Precondition based on a version a document exists at. */    static updateTime(t) {
            return new Be(t);
        }
        /** Returns whether this Precondition is empty. */    get Qt() {
            return void 0 === this.updateTime && void 0 === this.exists;
        }
        isEqual(t) {
            return this.exists === t.exists && (this.updateTime ? !!t.updateTime && this.updateTime.isEqual(t.updateTime) : !t.updateTime);
        }
    }

    /**
     * Returns true if the preconditions is valid for the given document
     * (or null if no document is available).
     */ function qe(t, e) {
        return void 0 !== t.updateTime ? e instanceof xt && e.version.isEqual(t.updateTime) : void 0 === t.exists || t.exists === e instanceof xt;
    }

    /**
     * A mutation describes a self-contained change to a document. Mutations can
     * create, replace, delete, and update subsets of documents.
     *
     * Mutations not only act on the value of the document but also its version.
     *
     * For local mutations (mutations that haven't been committed yet), we preserve
     * the existing version for Set and Patch mutations. For Delete mutations, we
     * reset the version to 0.
     *
     * Here's the expected transition table.
     *
     * MUTATION           APPLIED TO            RESULTS IN
     *
     * SetMutation        Document(v3)          Document(v3)
     * SetMutation        NoDocument(v3)        Document(v0)
     * SetMutation        null                  Document(v0)
     * PatchMutation      Document(v3)          Document(v3)
     * PatchMutation      NoDocument(v3)        NoDocument(v3)
     * PatchMutation      null                  null
     * DeleteMutation     Document(v3)          NoDocument(v0)
     * DeleteMutation     NoDocument(v3)        NoDocument(v0)
     * DeleteMutation     null                  NoDocument(v0)
     *
     * For acknowledged mutations, we use the updateTime of the WriteResponse as
     * the resulting version for Set and Patch mutations. As deletes have no
     * explicit update time, we use the commitTime of the WriteResponse for
     * Delete mutations.
     *
     * If a mutation is acknowledged by the backend but fails the precondition check
     * locally, we return an `UnknownDocument` and rely on Watch to send us the
     * updated version.
     *
     * Field transforms are used only with Patch and Set Mutations. We use the
     * `updateTransforms` message to store transforms, rather than the `transforms`s
     * messages.
     *
     * ## Subclassing Notes
     *
     * Subclasses of Mutation need to implement applyToRemoteDocument() and
     * applyToLocalView() to implement the actual behavior of applying the mutation
     * to some source document.
     */ class Ue {}

    /**
     * Applies this mutation to the given MaybeDocument or null for the purposes
     * of computing a new remote document. If the input document doesn't match the
     * expected state (e.g. it is null or outdated), an `UnknownDocument` can be
     * returned.
     *
     * @param mutation - The mutation to apply.
     * @param maybeDoc - The document to mutate. The input document can be null if
     *     the client has no knowledge of the pre-mutation state of the document.
     * @param mutationResult - The result of applying the mutation from the backend.
     * @returns The mutated document. The returned document may be an
     *     UnknownDocument if the mutation could not be applied to the locally
     *     cached base document.
     */ function Ke(t, e, n) {
        return t instanceof ze ? function(t, e, n) {
            // Unlike applySetMutationToLocalView, if we're applying a mutation to a
            // remote document the server has accepted the mutation so the precondition
            // must have held.
            let s = t.value;
            if (n.transformResults) {
                const i = Ye(t.fieldTransforms, e, n.transformResults);
                s = Ze(t.fieldTransforms, s, i);
            }
            return new xt(t.key, n.version, s, {
                hasCommittedMutations: !0
            });
        }(t, e, n) : t instanceof He ? function(t, e, n) {
            if (!qe(t.Wt, e)) 
            // Since the mutation was not rejected, we know that the precondition
            // matched on the backend. We therefore must not have the expected version
            // of the document in our cache and return an UnknownDocument with the
            // known updateTime.
            return new Ot(t.key, n.version);
            const s = n.transformResults ? Ye(t.fieldTransforms, e, n.transformResults) : [], i = Je(t, e, s);
            return new xt(t.key, n.version, i, {
                hasCommittedMutations: !0
            });
        }(t, e, n) : function(t, e, n) {
            // Unlike applyToLocalView, if we're applying a mutation to a remote
            // document the server has accepted the mutation so the precondition must
            // have held.
            return new $t(t.key, n.version, {
                hasCommittedMutations: !0
            });
        }(t, 0, n);
    }

    /**
     * Applies this mutation to the given MaybeDocument or null for the purposes
     * of computing the new local view of a document. Both the input and returned
     * documents can be null.
     *
     * @param mutation - The mutation to apply.
     * @param maybeDoc - The document to mutate. The input document can be null if
     *     the client has no knowledge of the pre-mutation state of the document.
     * @param localWriteTime - A timestamp indicating the local write time of the
     *     batch this mutation is a part of.
     * @returns The mutated document. The returned document may be null, but only
     *     if maybeDoc was null and the mutation would not create a new document.
     */ function Qe(t, e, n) {
        return t instanceof ze ? function(t, e, n) {
            if (!qe(t.Wt, e)) return e;
            let s = t.value;
            const i = Xe(t.fieldTransforms, n, e);
            s = Ze(t.fieldTransforms, s, i);
            const r = Ge(e);
            return new xt(t.key, r, s, {
                gt: !0
            });
        }
        /**
     * A mutation that modifies fields of the document at the given key with the
     * given values. The values are applied through a field mask:
     *
     *  * When a field is in both the mask and the values, the corresponding field
     *    is updated.
     *  * When a field is in neither the mask nor the values, the corresponding
     *    field is unmodified.
     *  * When a field is in the mask but not in the values, the corresponding field
     *    is deleted.
     *  * When a field is not in the mask but is in the values, the values map is
     *    ignored.
     */ (t, e, n) : t instanceof He ? function(t, e, n) {
            if (!qe(t.Wt, e)) return e;
            const s = Ge(e), i = Xe(t.fieldTransforms, n, e), r = Je(t, e, i);
            return new xt(t.key, s, r, {
                gt: !0
            });
        }
        /**
     * Patches the data of document if available or creates a new document. Note
     * that this does not check whether or not the precondition of this patch
     * holds.
     */ (t, e, n) : function(t, e) {
            if (!qe(t.Wt, e)) return e;
            return new $t(t.key, H$1.min());
        }
        /**
     * A mutation that verifies the existence of the document at the given key with
     * the provided precondition.
     *
     * The `verify` operation is only used in Transactions, and this class serves
     * primarily to facilitate serialization into protos.
     */ (t, e);
    }

    /**
     * If this mutation is not idempotent, returns the base value to persist with
     * this mutation. If a base value is returned, the mutation is always applied
     * to this base value, even if document has already been updated.
     *
     * The base value is a sparse object that consists of only the document
     * fields for which this mutation contains a non-idempotent transformation
     * (e.g. a numeric increment). The provided value guarantees consistent
     * behavior for non-idempotent transforms and allow us to return the same
     * latency-compensated value even if the backend has already applied the
     * mutation. The base value is null for idempotent mutations, as they can be
     * re-played even if the backend has already applied them.
     *
     * @returns a base value to store along with the mutation, or null for
     * idempotent mutations.
     */ function We(t, e) {
        return function(t, e) {
            let n = null;
            for (const s of t) {
                const t = e instanceof xt ? e.field(s.field) : void 0, i = ve(s.transform, t || null);
                null != i && (n = null == n ? (new Dt).set(s.field, i) : n.set(s.field, i));
            }
            return n ? n.Rt() : null;
        }(t.fieldTransforms, e);
    }

    function je(t, e) {
        return t.type === e.type && (!!t.key.isEqual(e.key) && (!!t.Wt.isEqual(e.Wt) && (!!function(t, e) {
            return void 0 === t && void 0 === e || !(!t || !e) && j(t, e, ((t, e) => Fe(t, e)));
        }(t.fieldTransforms, e.fieldTransforms) && (0 /* Set */ === t.type ? t.value.isEqual(e.value) : 1 /* Patch */ !== t.type || t.data.isEqual(e.data) && t.jt.isEqual(e.jt)))));
    }

    /**
     * Returns the version from the given document for use as the result of a
     * mutation. Mutations are defined to return the version of the base document
     * only if it is an existing document. Deleted and unknown documents have a
     * post-mutation version of SnapshotVersion.min().
     */ function Ge(t) {
        return t instanceof xt ? t.version : H$1.min();
    }

    /**
     * A mutation that creates or replaces the document at the given key with the
     * object value contents.
     */ class ze extends Ue {
        constructor(t, e, n, s = []) {
            super(), this.key = t, this.value = e, this.Wt = n, this.fieldTransforms = s, this.type = 0 /* Set */;
        }
    }

    class He extends Ue {
        constructor(t, e, n, s, i = []) {
            super(), this.key = t, this.data = e, this.jt = n, this.Wt = s, this.fieldTransforms = i, 
            this.type = 1 /* Patch */;
        }
    }

    function Je(t, e, n) {
        let s;
        return s = e instanceof xt ? e.data() : St.empty(), s = function(t, e) {
            const n = new Dt(e);
            return t.jt.fields.forEach((e => {
                if (!e.Y()) {
                    const s = t.data.field(e);
                    null !== s ? n.set(e, s) : n.delete(e);
                }
            })), n.Rt();
        }
        /**
     * Creates a list of "transform results" (a transform result is a field value
     * representing the result of applying a transform) for use after a mutation
     * containing transforms has been acknowledged by the server.
     *
     * @param fieldTransforms - The field transforms to apply the result to.
     * @param maybeDoc - The current state of the document after applying all
     * previous mutations.
     * @param serverTransformResults - The transform results received by the server.
     * @returns The transform results list.
     */ (t, s), s = Ze(t.fieldTransforms, s, n), s;
    }

    function Ye(t, e, n) {
        const s = [];
        C(t.length === n.length);
        for (let i = 0; i < n.length; i++) {
            const r = t[i], o = r.transform;
            let c = null;
            e instanceof xt && (c = e.field(r.field)), s.push(be(o, c, n[i]));
        }
        return s;
    }

    /**
     * Creates a list of "transform results" (a transform result is a field value
     * representing the result of applying a transform) for use when applying a
     * transform locally.
     *
     * @param fieldTransforms - The field transforms to apply the result to.
     * @param localWriteTime - The local time of the mutation (used to
     *     generate ServerTimestampValues).
     * @param maybeDoc - The current state of the document after applying all
     *     previous mutations.
     * @returns The transform results list.
     */ function Xe(t, e, n) {
        const s = [];
        for (const i of t) {
            const t = i.transform;
            let r = null;
            n instanceof xt && (r = n.field(i.field)), s.push(pe(t, r, e));
        }
        return s;
    }

    function Ze(t, e, n) {
        const s = new Dt(e);
        for (let e = 0; e < t.length; e++) {
            const i = t[e];
            s.set(i.field, n[e]);
        }
        return s.Rt();
    }

    /** A mutation that deletes the document at the given key. */ class tn extends Ue {
        constructor(t, e) {
            super(), this.key = t, this.Wt = e, this.type = 2 /* Delete */ , this.fieldTransforms = [];
        }
    }

    class en extends Ue {
        constructor(t, e) {
            super(), this.key = t, this.Wt = e, this.type = 3 /* Verify */ , this.fieldTransforms = [];
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class nn {
        // TODO(b/33078163): just use simplest form of existence filter for now
        constructor(t) {
            this.count = t;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Error Codes describing the different ways GRPC can fail. These are copied
     * directly from GRPC's sources here:
     *
     * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
     *
     * Important! The names of these identifiers matter because the string forms
     * are used for reverse lookups from the webchannel stream. Do NOT change the
     * names of these identifiers or change this into a const enum.
     */ var sn, rn;

    /**
     * Determines whether an error code represents a permanent error when received
     * in response to a non-write operation.
     *
     * See isPermanentWriteError for classifying write errors.
     */
    function on(t) {
        switch (t) {
          case x$1.OK:
            return D$1();

          case x$1.CANCELLED:
          case x$1.UNKNOWN:
          case x$1.DEADLINE_EXCEEDED:
          case x$1.RESOURCE_EXHAUSTED:
          case x$1.INTERNAL:
          case x$1.UNAVAILABLE:
     // Unauthenticated means something went wrong with our token and we need
            // to retry with new credentials which will happen automatically.
                  case x$1.UNAUTHENTICATED:
            return !1;

          case x$1.INVALID_ARGUMENT:
          case x$1.NOT_FOUND:
          case x$1.ALREADY_EXISTS:
          case x$1.PERMISSION_DENIED:
          case x$1.FAILED_PRECONDITION:
     // Aborted might be retried in some scenarios, but that is dependant on
            // the context and should handled individually by the calling code.
            // See https://cloud.google.com/apis/design/errors.
                  case x$1.ABORTED:
          case x$1.OUT_OF_RANGE:
          case x$1.UNIMPLEMENTED:
          case x$1.DATA_LOSS:
            return !0;

          default:
            return D$1();
        }
    }

    /**
     * Determines whether an error code represents a permanent error when received
     * in response to a write operation.
     *
     * Write operations must be handled specially because as of b/119437764, ABORTED
     * errors on the write stream should be retried too (even though ABORTED errors
     * are not generally retryable).
     *
     * Note that during the initial handshake on the write stream an ABORTED error
     * signals that we should discard our stream token (i.e. it is permanent). This
     * means a handshake error should be classified with isPermanentError, above.
     */
    /**
     * Maps an error Code from GRPC status code number, like 0, 1, or 14. These
     * are not the same as HTTP status codes.
     *
     * @returns The Code equivalent to the given GRPC status code. Fails if there
     *     is no match.
     */
    function cn(t) {
        if (void 0 === t) 
        // This shouldn't normally happen, but in certain error cases (like trying
        // to send invalid proto messages) we may get an error with no GRPC code.
        return b("GRPC error has no .code"), x$1.UNKNOWN;
        switch (t) {
          case sn.OK:
            return x$1.OK;

          case sn.CANCELLED:
            return x$1.CANCELLED;

          case sn.UNKNOWN:
            return x$1.UNKNOWN;

          case sn.DEADLINE_EXCEEDED:
            return x$1.DEADLINE_EXCEEDED;

          case sn.RESOURCE_EXHAUSTED:
            return x$1.RESOURCE_EXHAUSTED;

          case sn.INTERNAL:
            return x$1.INTERNAL;

          case sn.UNAVAILABLE:
            return x$1.UNAVAILABLE;

          case sn.UNAUTHENTICATED:
            return x$1.UNAUTHENTICATED;

          case sn.INVALID_ARGUMENT:
            return x$1.INVALID_ARGUMENT;

          case sn.NOT_FOUND:
            return x$1.NOT_FOUND;

          case sn.ALREADY_EXISTS:
            return x$1.ALREADY_EXISTS;

          case sn.PERMISSION_DENIED:
            return x$1.PERMISSION_DENIED;

          case sn.FAILED_PRECONDITION:
            return x$1.FAILED_PRECONDITION;

          case sn.ABORTED:
            return x$1.ABORTED;

          case sn.OUT_OF_RANGE:
            return x$1.OUT_OF_RANGE;

          case sn.UNIMPLEMENTED:
            return x$1.UNIMPLEMENTED;

          case sn.DATA_LOSS:
            return x$1.DATA_LOSS;

          default:
            return D$1();
        }
    }

    /**
     * Converts an HTTP response's error status to the equivalent error code.
     *
     * @param status - An HTTP error response status ("FAILED_PRECONDITION",
     * "UNKNOWN", etc.)
     * @returns The equivalent Code. Non-matching responses are mapped to
     *     Code.UNKNOWN.
     */ (rn = sn || (sn = {}))[rn.OK = 0] = "OK", rn[rn.CANCELLED = 1] = "CANCELLED", 
    rn[rn.UNKNOWN = 2] = "UNKNOWN", rn[rn.INVALID_ARGUMENT = 3] = "INVALID_ARGUMENT", 
    rn[rn.DEADLINE_EXCEEDED = 4] = "DEADLINE_EXCEEDED", rn[rn.NOT_FOUND = 5] = "NOT_FOUND", 
    rn[rn.ALREADY_EXISTS = 6] = "ALREADY_EXISTS", rn[rn.PERMISSION_DENIED = 7] = "PERMISSION_DENIED", 
    rn[rn.UNAUTHENTICATED = 16] = "UNAUTHENTICATED", rn[rn.RESOURCE_EXHAUSTED = 8] = "RESOURCE_EXHAUSTED", 
    rn[rn.FAILED_PRECONDITION = 9] = "FAILED_PRECONDITION", rn[rn.ABORTED = 10] = "ABORTED", 
    rn[rn.OUT_OF_RANGE = 11] = "OUT_OF_RANGE", rn[rn.UNIMPLEMENTED = 12] = "UNIMPLEMENTED", 
    rn[rn.INTERNAL = 13] = "INTERNAL", rn[rn.UNAVAILABLE = 14] = "UNAVAILABLE", rn[rn.DATA_LOSS = 15] = "DATA_LOSS";

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // An immutable sorted map implementation, based on a Left-leaning Red-Black
    // tree.
    class an {
        constructor(t, e) {
            this.K = t, this.root = e || hn.EMPTY;
        }
        // Returns a copy of the map, with the specified key/value added or replaced.
        Gt(t, e) {
            return new an(this.K, this.root.Gt(t, e, this.K).copy(null, null, hn.zt, null, null));
        }
        // Returns a copy of the map, with the specified key removed.
        remove(t) {
            return new an(this.K, this.root.remove(t, this.K).copy(null, null, hn.zt, null, null));
        }
        // Returns the value of the node with the given key, or null.
        get(t) {
            let e = this.root;
            for (;!e.Y(); ) {
                const n = this.K(t, e.key);
                if (0 === n) return e.value;
                n < 0 ? e = e.left : n > 0 && (e = e.right);
            }
            return null;
        }
        // Returns the index of the element in this sorted map, or -1 if it doesn't
        // exist.
        indexOf(t) {
            // Number of nodes that were pruned when descending right
            let e = 0, n = this.root;
            for (;!n.Y(); ) {
                const s = this.K(t, n.key);
                if (0 === s) return e + n.left.size;
                s < 0 ? n = n.left : (
                // Count all nodes left of the node plus the node itself
                e += n.left.size + 1, n = n.right);
            }
            // Node not found
                    return -1;
        }
        Y() {
            return this.root.Y();
        }
        // Returns the total number of nodes in the map.
        get size() {
            return this.root.size;
        }
        // Returns the minimum key in the map.
        Ht() {
            return this.root.Ht();
        }
        // Returns the maximum key in the map.
        Jt() {
            return this.root.Jt();
        }
        // Traverses the map in key order and calls the specified action function
        // for each key/value pair. If action returns true, traversal is aborted.
        // Returns the first truthy value returned by action, or the last falsey
        // value returned by action.
        Yt(t) {
            return this.root.Yt(t);
        }
        forEach(t) {
            this.Yt(((e, n) => (t(e, n), !1)));
        }
        toString() {
            const t = [];
            return this.Yt(((e, n) => (t.push(`${e}:${n}`), !1))), `{${t.join(", ")}}`;
        }
        // Traverses the map in reverse key order and calls the specified action
        // function for each key/value pair. If action returns true, traversal is
        // aborted.
        // Returns the first truthy value returned by action, or the last falsey
        // value returned by action.
        Xt(t) {
            return this.root.Xt(t);
        }
        // Returns an iterator over the SortedMap.
        Zt() {
            return new un(this.root, null, this.K, !1);
        }
        te(t) {
            return new un(this.root, t, this.K, !1);
        }
        ee() {
            return new un(this.root, null, this.K, !0);
        }
        ne(t) {
            return new un(this.root, t, this.K, !0);
        }
    }

     // end SortedMap
    // An iterator over an LLRBNode.
    class un {
        constructor(t, e, n, s) {
            this.se = s, this.ie = [];
            let i = 1;
            for (;!t.Y(); ) if (i = e ? n(t.key, e) : 1, 
            // flip the comparison if we're going in reverse
            s && (i *= -1), i < 0) 
            // This node is less than our start key. ignore it
            t = this.se ? t.left : t.right; else {
                if (0 === i) {
                    // This node is exactly equal to our start key. Push it on the stack,
                    // but stop iterating;
                    this.ie.push(t);
                    break;
                }
                // This node is greater than our start key, add it to the stack and move
                // to the next one
                this.ie.push(t), t = this.se ? t.right : t.left;
            }
        }
        re() {
            let t = this.ie.pop();
            const e = {
                key: t.key,
                value: t.value
            };
            if (this.se) for (t = t.left; !t.Y(); ) this.ie.push(t), t = t.right; else for (t = t.right; !t.Y(); ) this.ie.push(t), 
            t = t.left;
            return e;
        }
        oe() {
            return this.ie.length > 0;
        }
        ce() {
            if (0 === this.ie.length) return null;
            const t = this.ie[this.ie.length - 1];
            return {
                key: t.key,
                value: t.value
            };
        }
    }

     // end SortedMapIterator
    // Represents a node in a Left-leaning Red-Black tree.
    class hn {
        constructor(t, e, n, s, i) {
            this.key = t, this.value = e, this.color = null != n ? n : hn.RED, this.left = null != s ? s : hn.EMPTY, 
            this.right = null != i ? i : hn.EMPTY, this.size = this.left.size + 1 + this.right.size;
        }
        // Returns a copy of the current node, optionally replacing pieces of it.
        copy(t, e, n, s, i) {
            return new hn(null != t ? t : this.key, null != e ? e : this.value, null != n ? n : this.color, null != s ? s : this.left, null != i ? i : this.right);
        }
        Y() {
            return !1;
        }
        // Traverses the tree in key order and calls the specified action function
        // for each node. If action returns true, traversal is aborted.
        // Returns the first truthy value returned by action, or the last falsey
        // value returned by action.
        Yt(t) {
            return this.left.Yt(t) || t(this.key, this.value) || this.right.Yt(t);
        }
        // Traverses the tree in reverse key order and calls the specified action
        // function for each node. If action returns true, traversal is aborted.
        // Returns the first truthy value returned by action, or the last falsey
        // value returned by action.
        Xt(t) {
            return this.right.Xt(t) || t(this.key, this.value) || this.left.Xt(t);
        }
        // Returns the minimum node in the tree.
        min() {
            return this.left.Y() ? this : this.left.min();
        }
        // Returns the maximum key in the tree.
        Ht() {
            return this.min().key;
        }
        // Returns the maximum key in the tree.
        Jt() {
            return this.right.Y() ? this.key : this.right.Jt();
        }
        // Returns new tree, with the key/value added.
        Gt(t, e, n) {
            let s = this;
            const i = n(t, s.key);
            return s = i < 0 ? s.copy(null, null, null, s.left.Gt(t, e, n), null) : 0 === i ? s.copy(null, e, null, null, null) : s.copy(null, null, null, null, s.right.Gt(t, e, n)), 
            s.ae();
        }
        ue() {
            if (this.left.Y()) return hn.EMPTY;
            let t = this;
            return t.left.he() || t.left.left.he() || (t = t.le()), t = t.copy(null, null, null, t.left.ue(), null), 
            t.ae();
        }
        // Returns new tree, with the specified item removed.
        remove(t, e) {
            let n, s = this;
            if (e(t, s.key) < 0) s.left.Y() || s.left.he() || s.left.left.he() || (s = s.le()), 
            s = s.copy(null, null, null, s.left.remove(t, e), null); else {
                if (s.left.he() && (s = s._e()), s.right.Y() || s.right.he() || s.right.left.he() || (s = s.fe()), 
                0 === e(t, s.key)) {
                    if (s.right.Y()) return hn.EMPTY;
                    n = s.right.min(), s = s.copy(n.key, n.value, null, null, s.right.ue());
                }
                s = s.copy(null, null, null, null, s.right.remove(t, e));
            }
            return s.ae();
        }
        he() {
            return this.color;
        }
        // Returns new tree after performing any needed rotations.
        ae() {
            let t = this;
            return t.right.he() && !t.left.he() && (t = t.de()), t.left.he() && t.left.left.he() && (t = t._e()), 
            t.left.he() && t.right.he() && (t = t.we()), t;
        }
        le() {
            let t = this.we();
            return t.right.left.he() && (t = t.copy(null, null, null, null, t.right._e()), t = t.de(), 
            t = t.we()), t;
        }
        fe() {
            let t = this.we();
            return t.left.left.he() && (t = t._e(), t = t.we()), t;
        }
        de() {
            const t = this.copy(null, null, hn.RED, null, this.right.left);
            return this.right.copy(null, null, this.color, t, null);
        }
        _e() {
            const t = this.copy(null, null, hn.RED, this.left.right, null);
            return this.left.copy(null, null, this.color, null, t);
        }
        we() {
            const t = this.left.copy(null, null, !this.left.color, null, null), e = this.right.copy(null, null, !this.right.color, null, null);
            return this.copy(null, null, !this.color, t, e);
        }
        // For testing.
        Ee() {
            const t = this.Te();
            return Math.pow(2, t) <= this.size + 1;
        }
        // In a balanced RB tree, the black-depth (number of black nodes) from root to
        // leaves is equal on both sides.  This function verifies that or asserts.
        Te() {
            if (this.he() && this.left.he()) throw D$1();
            if (this.right.he()) throw D$1();
            const t = this.left.Te();
            if (t !== this.right.Te()) throw D$1();
            return t + (this.he() ? 0 : 1);
        }
    }

     // end LLRBNode
    // Empty node is shared between all LLRB trees.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    hn.EMPTY = null, hn.RED = !0, hn.zt = !1;

    // end LLRBEmptyNode
    hn.EMPTY = new 
    // Represents an empty node (a leaf node in the Red-Black Tree).
    class {
        constructor() {
            this.size = 0;
        }
        get key() {
            throw D$1();
        }
        get value() {
            throw D$1();
        }
        get color() {
            throw D$1();
        }
        get left() {
            throw D$1();
        }
        get right() {
            throw D$1();
        }
        // Returns a copy of the current node.
        copy(t, e, n, s, i) {
            return this;
        }
        // Returns a copy of the tree, with the specified key/value added.
        Gt(t, e, n) {
            return new hn(t, e);
        }
        // Returns a copy of the tree, with the specified key removed.
        remove(t, e) {
            return this;
        }
        Y() {
            return !0;
        }
        Yt(t) {
            return !1;
        }
        Xt(t) {
            return !1;
        }
        Ht() {
            return null;
        }
        Jt() {
            return null;
        }
        he() {
            return !1;
        }
        // For testing.
        Ee() {
            return !0;
        }
        Te() {
            return 0;
        }
    };

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * SortedSet is an immutable (copy-on-write) collection that holds elements
     * in order specified by the provided comparator.
     *
     * NOTE: if provided comparator returns 0 for two elements, we consider them to
     * be equal!
     */
    class ln {
        constructor(t) {
            this.K = t, this.data = new an(this.K);
        }
        has(t) {
            return null !== this.data.get(t);
        }
        first() {
            return this.data.Ht();
        }
        last() {
            return this.data.Jt();
        }
        get size() {
            return this.data.size;
        }
        indexOf(t) {
            return this.data.indexOf(t);
        }
        /** Iterates elements in order defined by "comparator" */    forEach(t) {
            this.data.Yt(((e, n) => (t(e), !1)));
        }
        /** Iterates over `elem`s such that: range[0] &lt;= elem &lt; range[1]. */    Ie(t, e) {
            const n = this.data.te(t[0]);
            for (;n.oe(); ) {
                const s = n.re();
                if (this.K(s.key, t[1]) >= 0) return;
                e(s.key);
            }
        }
        /**
         * Iterates over `elem`s such that: start &lt;= elem until false is returned.
         */    me(t, e) {
            let n;
            for (n = void 0 !== e ? this.data.te(e) : this.data.Zt(); n.oe(); ) {
                if (!t(n.re().key)) return;
            }
        }
        /** Finds the least element greater than or equal to `elem`. */    Ae(t) {
            const e = this.data.te(t);
            return e.oe() ? e.re().key : null;
        }
        Zt() {
            return new _n(this.data.Zt());
        }
        te(t) {
            return new _n(this.data.te(t));
        }
        /** Inserts or updates an element */    add(t) {
            return this.copy(this.data.remove(t).Gt(t, !0));
        }
        /** Deletes an element */    delete(t) {
            return this.has(t) ? this.copy(this.data.remove(t)) : this;
        }
        Y() {
            return this.data.Y();
        }
        Re(t) {
            let e = this;
            // Make sure `result` always refers to the larger one of the two sets.
                    return e.size < t.size && (e = t, t = this), t.forEach((t => {
                e = e.add(t);
            })), e;
        }
        isEqual(t) {
            if (!(t instanceof ln)) return !1;
            if (this.size !== t.size) return !1;
            const e = this.data.Zt(), n = t.data.Zt();
            for (;e.oe(); ) {
                const t = e.re().key, s = n.re().key;
                if (0 !== this.K(t, s)) return !1;
            }
            return !0;
        }
        tt() {
            const t = [];
            return this.forEach((e => {
                t.push(e);
            })), t;
        }
        toString() {
            const t = [];
            return this.forEach((e => t.push(e))), "SortedSet(" + t.toString() + ")";
        }
        copy(t) {
            const e = new ln(this.K);
            return e.data = t, e;
        }
    }

    class _n {
        constructor(t) {
            this.Pe = t;
        }
        re() {
            return this.Pe.re().key;
        }
        oe() {
            return this.Pe.oe();
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ const fn = new an(tt.K);

    function dn() {
        return fn;
    }

    function wn() {
        return dn();
    }

    const En = new an(tt.K);

    function Tn() {
        return En;
    }

    const In = new an(tt.K);

    function mn() {
        return In;
    }

    const An = new ln(tt.K);

    function Rn(...t) {
        let e = An;
        for (const n of t) e = e.add(n);
        return e;
    }

    const Pn = new ln(W$1);

    function Vn() {
        return Pn;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * DocumentSet is an immutable (copy-on-write) collection that holds documents
     * in order specified by the provided comparator. We always add a document key
     * comparator on top of what is provided to guarantee document equality based on
     * the key.
     */ class gn {
        /** The default ordering is by key if the comparator is omitted */
        constructor(t) {
            // We are adding document key comparator to the end as it's the only
            // guaranteed unique property of a document.
            this.K = t ? (e, n) => t(e, n) || tt.K(e.key, n.key) : (t, e) => tt.K(t.key, e.key), 
            this.Ve = Tn(), this.ge = new an(this.K);
        }
        /**
         * Returns an empty copy of the existing DocumentSet, using the same
         * comparator.
         */    static ye(t) {
            return new gn(t.K);
        }
        has(t) {
            return null != this.Ve.get(t);
        }
        get(t) {
            return this.Ve.get(t);
        }
        first() {
            return this.ge.Ht();
        }
        last() {
            return this.ge.Jt();
        }
        Y() {
            return this.ge.Y();
        }
        /**
         * Returns the index of the provided key in the document set, or -1 if the
         * document key is not present in the set;
         */    indexOf(t) {
            const e = this.Ve.get(t);
            return e ? this.ge.indexOf(e) : -1;
        }
        get size() {
            return this.ge.size;
        }
        /** Iterates documents in order defined by "comparator" */    forEach(t) {
            this.ge.Yt(((e, n) => (t(e), !1)));
        }
        /** Inserts or updates a document with the same key */    add(t) {
            // First remove the element if we have it.
            const e = this.delete(t.key);
            return e.copy(e.Ve.Gt(t.key, t), e.ge.Gt(t, null));
        }
        /** Deletes a document with a given key */    delete(t) {
            const e = this.get(t);
            return e ? this.copy(this.Ve.remove(t), this.ge.remove(e)) : this;
        }
        isEqual(t) {
            if (!(t instanceof gn)) return !1;
            if (this.size !== t.size) return !1;
            const e = this.ge.Zt(), n = t.ge.Zt();
            for (;e.oe(); ) {
                const t = e.re().key, s = n.re().key;
                if (!t.isEqual(s)) return !1;
            }
            return !0;
        }
        toString() {
            const t = [];
            return this.forEach((e => {
                t.push(e.toString());
            })), 0 === t.length ? "DocumentSet ()" : "DocumentSet (\n  " + t.join("  \n") + "\n)";
        }
        copy(t, e) {
            const n = new gn;
            return n.K = this.K, n.Ve = t, n.ge = e, n;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * DocumentChangeSet keeps track of a set of changes to docs in a query, merging
     * duplicate events for the same doc.
     */ class yn {
        constructor() {
            this.pe = new an(tt.K);
        }
        track(t) {
            const e = t.doc.key, n = this.pe.get(e);
            n ? 
            // Merge the new change with the existing change.
            0 /* Added */ !== t.type && 3 /* Metadata */ === n.type ? this.pe = this.pe.Gt(e, t) : 3 /* Metadata */ === t.type && 1 /* Removed */ !== n.type ? this.pe = this.pe.Gt(e, {
                type: n.type,
                doc: t.doc
            }) : 2 /* Modified */ === t.type && 2 /* Modified */ === n.type ? this.pe = this.pe.Gt(e, {
                type: 2 /* Modified */ ,
                doc: t.doc
            }) : 2 /* Modified */ === t.type && 0 /* Added */ === n.type ? this.pe = this.pe.Gt(e, {
                type: 0 /* Added */ ,
                doc: t.doc
            }) : 1 /* Removed */ === t.type && 0 /* Added */ === n.type ? this.pe = this.pe.remove(e) : 1 /* Removed */ === t.type && 2 /* Modified */ === n.type ? this.pe = this.pe.Gt(e, {
                type: 1 /* Removed */ ,
                doc: n.doc
            }) : 0 /* Added */ === t.type && 1 /* Removed */ === n.type ? this.pe = this.pe.Gt(e, {
                type: 2 /* Modified */ ,
                doc: t.doc
            }) : 
            // This includes these cases, which don't make sense:
            // Added->Added
            // Removed->Removed
            // Modified->Added
            // Removed->Modified
            // Metadata->Added
            // Removed->Metadata
            D$1() : this.pe = this.pe.Gt(e, t);
        }
        be() {
            const t = [];
            return this.pe.Yt(((e, n) => {
                t.push(n);
            })), t;
        }
    }

    class pn {
        constructor(t, e, n, s, i, r, o, c) {
            this.query = t, this.docs = e, this.ve = n, this.docChanges = s, this.Se = i, this.fromCache = r, 
            this.De = o, this.Ce = c;
        }
        /** Returns a view snapshot as if all documents in the snapshot were added. */    static Ne(t, e, n, s) {
            const i = [];
            return e.forEach((t => {
                i.push({
                    type: 0 /* Added */ ,
                    doc: t
                });
            })), new pn(t, e, gn.ye(e), i, n, s, 
            /* syncStateChanged= */ !0, 
            /* excludesMetadataChanges= */ !1);
        }
        get hasPendingWrites() {
            return !this.Se.Y();
        }
        isEqual(t) {
            if (!(this.fromCache === t.fromCache && this.De === t.De && this.Se.isEqual(t.Se) && we(this.query, t.query) && this.docs.isEqual(t.docs) && this.ve.isEqual(t.ve))) return !1;
            const e = this.docChanges, n = t.docChanges;
            if (e.length !== n.length) return !1;
            for (let t = 0; t < e.length; t++) if (e[t].type !== n[t].type || !e[t].doc.isEqual(n[t].doc)) return !1;
            return !0;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An event from the RemoteStore. It is split into targetChanges (changes to the
     * state or the set of documents in our watched targets) and documentUpdates
     * (changes to the actual documents).
     */ class bn {
        constructor(
        /**
         * The snapshot version this event brings us up to, or MIN if not set.
         */
        t, 
        /**
         * A map from target to changes to the target. See TargetChange.
         */
        e, 
        /**
         * A set of targets that is known to be inconsistent. Listens for these
         * targets should be re-established without resume tokens.
         */
        n, 
        /**
         * A set of which documents have changed or been deleted, along with the
         * doc's new values (if not deleted).
         */
        s, 
        /**
         * A set of which document updates are due only to limbo resolution targets.
         */
        i) {
            this.Ot = t, this.xe = e, this.$e = n, this.Oe = s, this.ke = i;
        }
        /**
         * HACK: Views require RemoteEvents in order to determine whether the view is
         * CURRENT, but secondary tabs don't receive remote events. So this method is
         * used to create a synthesized RemoteEvent that can be used to apply a
         * CURRENT status change to a View, for queries executed in a different tab.
         */
        // PORTING NOTE: Multi-tab only
        static Me(t, e) {
            const n = new Map;
            return n.set(t, vn.Fe(t, e)), new bn(H$1.min(), n, Vn(), dn(), Rn());
        }
    }

    /**
     * A TargetChange specifies the set of changes for a specific target as part of
     * a RemoteEvent. These changes track which documents are added, modified or
     * removed, as well as the target's resume token and whether the target is
     * marked CURRENT.
     * The actual changes *to* documents are not part of the TargetChange since
     * documents may be part of multiple targets.
     */ class vn {
        constructor(
        /**
         * An opaque, server-assigned token that allows watching a query to be resumed
         * after disconnecting without retransmitting all the data that matches the
         * query. The resume token essentially identifies a point in time from which
         * the server should resume sending results.
         */
        t, 
        /**
         * The "current" (synced) status of this target. Note that "current"
         * has special meaning in the RPC protocol that implies that a target is
         * both up-to-date and consistent with the rest of the watch stream.
         */
        e, 
        /**
         * The set of documents that were newly assigned to this target as part of
         * this remote event.
         */
        n, 
        /**
         * The set of documents that were already assigned to this target but received
         * an update during this remote event.
         */
        s, 
        /**
         * The set of documents that were removed from this target as part of this
         * remote event.
         */
        i) {
            this.resumeToken = t, this.Le = e, this.Be = n, this.qe = s, this.Ue = i;
        }
        /**
         * This method is used to create a synthesized TargetChanges that can be used to
         * apply a CURRENT status change to a View (for queries executed in a different
         * tab) or for new queries (to raise snapshots with correct CURRENT status).
         */    static Fe(t, e) {
            return new vn(rt.Et, e, Rn(), Rn(), Rn());
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Represents a changed document and a list of target ids to which this change
     * applies.
     *
     * If document has been deleted NoDocument will be provided.
     */ class Sn {
        constructor(
        /** The new document applies to all of these targets. */
        t, 
        /** The new document is removed from all of these targets. */
        e, 
        /** The key of the document for this change. */
        n, 
        /**
         * The new document or NoDocument if it was deleted. Is null if the
         * document went out of view without the server sending a new document.
         */
        s) {
            this.Ke = t, this.removedTargetIds = e, this.key = n, this.Qe = s;
        }
    }

    class Dn {
        constructor(t, e) {
            this.targetId = t, this.We = e;
        }
    }

    class Cn {
        constructor(
        /** What kind of change occurred to the watch target. */
        t, 
        /** The target IDs that were added/removed/set. */
        e, 
        /**
         * An opaque, server-assigned token that allows watching a target to be
         * resumed after disconnecting without retransmitting all the data that
         * matches the target. The resume token essentially identifies a point in
         * time from which the server should resume sending results.
         */
        n = rt.Et
        /** An RPC error indicating why the watch failed. */ , s = null) {
            this.state = t, this.targetIds = e, this.resumeToken = n, this.cause = s;
        }
    }

    /** Tracks the internal state of a Watch target. */ class Nn {
        constructor() {
            /**
             * The number of pending responses (adds or removes) that we are waiting on.
             * We only consider targets active that have no pending responses.
             */
            this.je = 0, 
            /**
             * Keeps track of the document changes since the last raised snapshot.
             *
             * These changes are continuously updated as we receive document updates and
             * always reflect the current set of changes against the last issued snapshot.
             */
            this.Ge = On(), 
            /** See public getters for explanations of these fields. */
            this.ze = rt.Et, this.He = !1, 
            /**
             * Whether this target state should be included in the next snapshot. We
             * initialize to true so that newly-added targets are included in the next
             * RemoteEvent.
             */
            this.Je = !0;
        }
        /**
         * Whether this target has been marked 'current'.
         *
         * 'Current' has special meaning in the RPC protocol: It implies that the
         * Watch backend has sent us all changes up to the point at which the target
         * was added and that the target is consistent with the rest of the watch
         * stream.
         */    get Le() {
            return this.He;
        }
        /** The last resume token sent to us for this target. */    get resumeToken() {
            return this.ze;
        }
        /** Whether this target has pending target adds or target removes. */    get Ye() {
            return 0 !== this.je;
        }
        /** Whether we have modified any state that should trigger a snapshot. */    get Xe() {
            return this.Je;
        }
        /**
         * Applies the resume token to the TargetChange, but only when it has a new
         * value. Empty resumeTokens are discarded.
         */    Ze(t) {
            t.wt() > 0 && (this.Je = !0, this.ze = t);
        }
        /**
         * Creates a target change from the current set of changes.
         *
         * To reset the document changes after raising this snapshot, call
         * `clearPendingChanges()`.
         */    tn() {
            let t = Rn(), e = Rn(), n = Rn();
            return this.Ge.forEach(((s, i) => {
                switch (i) {
                  case 0 /* Added */ :
                    t = t.add(s);
                    break;

                  case 2 /* Modified */ :
                    e = e.add(s);
                    break;

                  case 1 /* Removed */ :
                    n = n.add(s);
                    break;

                  default:
                    D$1();
                }
            })), new vn(this.ze, this.He, t, e, n);
        }
        /**
         * Resets the document changes and sets `hasPendingChanges` to false.
         */    en() {
            this.Je = !1, this.Ge = On();
        }
        nn(t, e) {
            this.Je = !0, this.Ge = this.Ge.Gt(t, e);
        }
        sn(t) {
            this.Je = !0, this.Ge = this.Ge.remove(t);
        }
        rn() {
            this.je += 1;
        }
        on() {
            this.je -= 1;
        }
        cn() {
            this.Je = !0, this.He = !0;
        }
    }

    /**
     * A helper class to accumulate watch changes into a RemoteEvent.
     */
    class xn {
        constructor(t) {
            this.an = t, 
            /** The internal state of all tracked targets. */
            this.un = new Map, 
            /** Keeps track of the documents to update since the last raised snapshot. */
            this.hn = dn(), 
            /** A mapping of document keys to their set of target IDs. */
            this.ln = $n(), 
            /**
             * A list of targets with existence filter mismatches. These targets are
             * known to be inconsistent and their listens needs to be re-established by
             * RemoteStore.
             */
            this._n = new ln(W$1);
        }
        /**
         * Processes and adds the DocumentWatchChange to the current set of changes.
         */    fn(t) {
            for (const e of t.Ke) t.Qe instanceof xt ? this.dn(e, t.Qe) : t.Qe instanceof $t && this.wn(e, t.key, t.Qe);
            for (const e of t.removedTargetIds) this.wn(e, t.key, t.Qe);
        }
        /** Processes and adds the WatchTargetChange to the current set of changes. */    En(t) {
            this.Tn(t, (e => {
                const n = this.In(e);
                switch (t.state) {
                  case 0 /* NoChange */ :
                    this.mn(e) && n.Ze(t.resumeToken);
                    break;

                  case 1 /* Added */ :
                    // We need to decrement the number of pending acks needed from watch
                    // for this targetId.
                    n.on(), n.Ye || 
                    // We have a freshly added target, so we need to reset any state
                    // that we had previously. This can happen e.g. when remove and add
                    // back a target for existence filter mismatches.
                    n.en(), n.Ze(t.resumeToken);
                    break;

                  case 2 /* Removed */ :
                    // We need to keep track of removed targets to we can post-filter and
                    // remove any target changes.
                    // We need to decrement the number of pending acks needed from watch
                    // for this targetId.
                    n.on(), n.Ye || this.removeTarget(e);
                    break;

                  case 3 /* Current */ :
                    this.mn(e) && (n.cn(), n.Ze(t.resumeToken));
                    break;

                  case 4 /* Reset */ :
                    this.mn(e) && (
                    // Reset the target and synthesizes removes for all existing
                    // documents. The backend will re-add any documents that still
                    // match the target before it sends the next global snapshot.
                    this.An(e), n.Ze(t.resumeToken));
                    break;

                  default:
                    D$1();
                }
            }));
        }
        /**
         * Iterates over all targetIds that the watch change applies to: either the
         * targetIds explicitly listed in the change or the targetIds of all currently
         * active targets.
         */    Tn(t, e) {
            t.targetIds.length > 0 ? t.targetIds.forEach(e) : this.un.forEach(((t, n) => {
                this.mn(n) && e(n);
            }));
        }
        /**
         * Handles existence filters and synthesizes deletes for filter mismatches.
         * Targets that are invalidated by filter mismatches are added to
         * `pendingTargetResets`.
         */    Rn(t) {
            const e = t.targetId, n = t.We.count, s = this.Pn(e);
            if (s) {
                const t = s.target;
                if (qt(t)) if (0 === n) {
                    // The existence filter told us the document does not exist. We deduce
                    // that this document does not exist and apply a deleted document to
                    // our updates. Without applying this deleted document there might be
                    // another query that will raise this document as part of a snapshot
                    // until it is resolved, essentially exposing inconsistency between
                    // queries.
                    const n = new tt(t.path);
                    this.wn(e, n, new $t(n, H$1.min()));
                } else C(1 === n); else {
                    this.Vn(e) !== n && (
                    // Existence filter mismatch: We reset the mapping and raise a new
                    // snapshot with `isFromCache:true`.
                    this.An(e), this._n = this._n.add(e));
                }
            }
        }
        /**
         * Converts the currently accumulated state into a remote event at the
         * provided snapshot version. Resets the accumulated changes before returning.
         */    gn(t) {
            const e = new Map;
            this.un.forEach(((n, s) => {
                const i = this.Pn(s);
                if (i) {
                    if (n.Le && qt(i.target)) {
                        // Document queries for document that don't exist can produce an empty
                        // result set. To update our local cache, we synthesize a document
                        // delete if we have not previously received the document. This
                        // resolves the limbo state of the document, removing it from
                        // limboDocumentRefs.
                        // TODO(dimond): Ideally we would have an explicit lookup target
                        // instead resulting in an explicit delete message and we could
                        // remove this special logic.
                        const e = new tt(i.target.path);
                        null !== this.hn.get(e) || this.yn(s, e) || this.wn(s, e, new $t(e, t));
                    }
                    n.Xe && (e.set(s, n.tn()), n.en());
                }
            }));
            let n = Rn();
            // We extract the set of limbo-only document updates as the GC logic
            // special-cases documents that do not appear in the target cache.
            
            // TODO(gsoltis): Expand on this comment once GC is available in the JS
            // client.
                    this.ln.forEach(((t, e) => {
                let s = !0;
                e.me((t => {
                    const e = this.Pn(t);
                    return !e || 2 /* LimboResolution */ === e.$t || (s = !1, !1);
                })), s && (n = n.add(t));
            }));
            const s = new bn(t, e, this._n, this.hn, n);
            return this.hn = dn(), this.ln = $n(), this._n = new ln(W$1), s;
        }
        /**
         * Adds the provided document to the internal list of document updates and
         * its document key to the given target's mapping.
         */
        // Visible for testing.
        dn(t, e) {
            if (!this.mn(t)) return;
            const n = this.yn(t, e.key) ? 2 /* Modified */ : 0 /* Added */;
            this.In(t).nn(e.key, n), this.hn = this.hn.Gt(e.key, e), this.ln = this.ln.Gt(e.key, this.pn(e.key).add(t));
        }
        /**
         * Removes the provided document from the target mapping. If the
         * document no longer matches the target, but the document's state is still
         * known (e.g. we know that the document was deleted or we received the change
         * that caused the filter mismatch), the new document can be provided
         * to update the remote document cache.
         */
        // Visible for testing.
        wn(t, e, n) {
            if (!this.mn(t)) return;
            const s = this.In(t);
            this.yn(t, e) ? s.nn(e, 1 /* Removed */) : 
            // The document may have entered and left the target before we raised a
            // snapshot, so we can just ignore the change.
            s.sn(e), this.ln = this.ln.Gt(e, this.pn(e).delete(t)), n && (this.hn = this.hn.Gt(e, n));
        }
        removeTarget(t) {
            this.un.delete(t);
        }
        /**
         * Returns the current count of documents in the target. This includes both
         * the number of documents that the LocalStore considers to be part of the
         * target as well as any accumulated changes.
         */    Vn(t) {
            const e = this.In(t).tn();
            return this.an.bn(t).size + e.Be.size - e.Ue.size;
        }
        /**
         * Increment the number of acks needed from watch before we can consider the
         * server to be 'in-sync' with the client's active targets.
         */    rn(t) {
            this.In(t).rn();
        }
        In(t) {
            let e = this.un.get(t);
            return e || (e = new Nn, this.un.set(t, e)), e;
        }
        pn(t) {
            let e = this.ln.get(t);
            return e || (e = new ln(W$1), this.ln = this.ln.Gt(t, e)), e;
        }
        /**
         * Verifies that the user is still interested in this target (by calling
         * `getTargetDataForTarget()`) and that we are not waiting for pending ADDs
         * from watch.
         */    mn(t) {
            const e = null !== this.Pn(t);
            return e || p$1("WatchChangeAggregator", "Detected inactive target", t), e;
        }
        /**
         * Returns the TargetData for an active target (i.e. a target that the user
         * is still interested in that has no outstanding target change requests).
         */    Pn(t) {
            const e = this.un.get(t);
            return e && e.Ye ? null : this.an.vn(t);
        }
        /**
         * Resets the state of a Watch target to its initial state (e.g. sets
         * 'current' to false, clears the resume token and removes its target mapping
         * from all documents).
         */    An(t) {
            this.un.set(t, new Nn);
            this.an.bn(t).forEach((e => {
                this.wn(t, e, /*updatedDocument=*/ null);
            }));
        }
        /**
         * Returns whether the LocalStore considers the document to be part of the
         * specified target.
         */    yn(t, e) {
            return this.an.bn(t).has(e);
        }
    }

    function $n() {
        return new an(tt.K);
    }

    function On() {
        return new an(tt.K);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ const kn = (() => {
        const t = {
            asc: "ASCENDING",
            desc: "DESCENDING"
        };
        return t;
    })(), Mn = (() => {
        const t = {
            "<": "LESS_THAN",
            "<=": "LESS_THAN_OR_EQUAL",
            ">": "GREATER_THAN",
            ">=": "GREATER_THAN_OR_EQUAL",
            "==": "EQUAL",
            "!=": "NOT_EQUAL",
            "array-contains": "ARRAY_CONTAINS",
            in: "IN",
            "not-in": "NOT_IN",
            "array-contains-any": "ARRAY_CONTAINS_ANY"
        };
        return t;
    })();

    /**
     * This class generates JsonObject values for the Datastore API suitable for
     * sending to either GRPC stub methods or via the JSON/HTTP REST API.
     *
     * The serializer supports both Protobuf.js and Proto3 JSON formats. By
     * setting `useProto3Json` to true, the serializer will use the Proto3 JSON
     * format.
     *
     * For a description of the Proto3 JSON format check
     * https://developers.google.com/protocol-buffers/docs/proto3#json
     *
     * TODO(klimt): We can remove the databaseId argument if we keep the full
     * resource name in documents.
     */
    class Fn {
        constructor(t, e) {
            this.p = t, this.Lt = e;
        }
    }

    /**
     * Returns a value for a Date that's appropriate to put into a proto.
     */
    function Ln(t, e) {
        if (t.Lt) {
            return `${new Date(1e3 * e.seconds).toISOString().replace(/\.\d*/, "").replace("Z", "")}.${("000000000" + e.nanoseconds).slice(-9)}Z`;
        }
        return {
            seconds: "" + e.seconds,
            nanos: e.nanoseconds
        };
    }

    /**
     * Returns a value for bytes that's appropriate to put in a proto.
     *
     * Visible for testing.
     */
    function Bn(t, e) {
        return t.Lt ? e.toBase64() : e.toUint8Array();
    }

    /**
     * Returns a ByteString based on the proto string value.
     */ function qn(t, e) {
        return Ln(t, e.q());
    }

    function Un(t) {
        return C(!!t), H$1.F(function(t) {
            const e = ct(t);
            return new z$1(e.seconds, e.nanos);
        }(t));
    }

    function Kn(t, e) {
        return function(t) {
            return new Y$1([ "projects", t.projectId, "databases", t.database ]);
        }(t).child("documents").child(e).et();
    }

    function Qn(t) {
        const e = Y$1.nt(t);
        return C(Is(e)), e;
    }

    function Wn(t, e) {
        return Kn(t.p, e.path);
    }

    function jn(t, e) {
        const n = Qn(e);
        if (n.get(1) !== t.p.projectId) throw new $(x$1.INVALID_ARGUMENT, "Tried to deserialize key from different project: " + n.get(1) + " vs " + t.p.projectId);
        if (n.get(3) !== t.p.database) throw new $(x$1.INVALID_ARGUMENT, "Tried to deserialize key from different database: " + n.get(3) + " vs " + t.p.database);
        return new tt(Jn(n));
    }

    function Gn(t, e) {
        return Kn(t.p, e);
    }

    function zn(t) {
        const e = Qn(t);
        // In v1beta1 queries for collections at the root did not have a trailing
        // "/documents". In v1 all resource paths contain "/documents". Preserve the
        // ability to read the v1beta1 form for compatibility with queries persisted
        // in the local target cache.
            return 4 === e.length ? Y$1.st() : Jn(e);
    }

    function Hn(t) {
        return new Y$1([ "projects", t.p.projectId, "databases", t.p.database ]).et();
    }

    function Jn(t) {
        return C(t.length > 4 && "documents" === t.get(4)), t.j(5);
    }

    /** Creates a Document proto from key and fields (but no create/update time) */ function Yn(t, e, n) {
        return {
            name: Wn(t, e),
            fields: n.proto.mapValue.fields
        };
    }

    function Xn(t, e, n) {
        const s = jn(t, e.name), i = Un(e.updateTime), r = new St({
            mapValue: {
                fields: e.fields
            }
        });
        return new xt(s, i, r, {
            hasCommittedMutations: !!n
        });
    }

    function Zn(t, e) {
        return "found" in e ? function(t, e) {
            C(!!e.found), e.found.name, e.found.updateTime;
            const n = jn(t, e.found.name), s = Un(e.found.updateTime), i = new St({
                mapValue: {
                    fields: e.found.fields
                }
            });
            return new xt(n, s, i, {});
        }(t, e) : "missing" in e ? function(t, e) {
            C(!!e.missing), C(!!e.readTime);
            const n = jn(t, e.missing), s = Un(e.readTime);
            return new $t(n, s);
        }(t, e) : D$1();
    }

    function ts(t, e) {
        let n;
        if ("targetChange" in e) {
            e.targetChange;
            // proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'
            // if unset
            const s = function(t) {
                return "NO_CHANGE" === t ? 0 /* NoChange */ : "ADD" === t ? 1 /* Added */ : "REMOVE" === t ? 2 /* Removed */ : "CURRENT" === t ? 3 /* Current */ : "RESET" === t ? 4 /* Reset */ : D$1();
            }(e.targetChange.targetChangeType || "NO_CHANGE"), i = e.targetChange.targetIds || [], r = function(t, e) {
                return t.Lt ? (C(void 0 === e || "string" == typeof e), rt.fromBase64String(e || "")) : (C(void 0 === e || e instanceof Uint8Array), 
                rt.fromUint8Array(e || new Uint8Array));
            }(t, e.targetChange.resumeToken), o = e.targetChange.cause, c = o && function(t) {
                const e = void 0 === t.code ? x$1.UNKNOWN : cn(t.code);
                return new $(e, t.message || "");
            }
            /**
     * Returns a value for a number (or null) that's appropriate to put into
     * a google.protobuf.Int32Value proto.
     * DO NOT USE THIS FOR ANYTHING ELSE.
     * This method cheats. It's typed as returning "number" because that's what
     * our generated proto interfaces say Int32Value must be. But GRPC actually
     * expects a { value: <number> } struct.
     */ (o);
            n = new Cn(s, i, r, c || null);
        } else if ("documentChange" in e) {
            e.documentChange;
            const s = e.documentChange;
            s.document, s.document.name, s.document.updateTime;
            const i = jn(t, s.document.name), r = Un(s.document.updateTime), o = new St({
                mapValue: {
                    fields: s.document.fields
                }
            }), c = new xt(i, r, o, {}), a = s.targetIds || [], u = s.removedTargetIds || [];
            n = new Sn(a, u, c.key, c);
        } else if ("documentDelete" in e) {
            e.documentDelete;
            const s = e.documentDelete;
            s.document;
            const i = jn(t, s.document), r = s.readTime ? Un(s.readTime) : H$1.min(), o = new $t(i, r), c = s.removedTargetIds || [];
            n = new Sn([], c, o.key, o);
        } else if ("documentRemove" in e) {
            e.documentRemove;
            const s = e.documentRemove;
            s.document;
            const i = jn(t, s.document), r = s.removedTargetIds || [];
            n = new Sn([], r, i, null);
        } else {
            if (!("filter" in e)) return D$1();
            {
                e.filter;
                const t = e.filter;
                t.targetId;
                const s = t.count || 0, i = new nn(s), r = t.targetId;
                n = new Dn(r, i);
            }
        }
        return n;
    }

    function es(t, e) {
        let n;
        if (e instanceof ze) n = {
            update: Yn(t, e.key, e.value)
        }; else if (e instanceof tn) n = {
            delete: Wn(t, e.key)
        }; else if (e instanceof He) n = {
            update: Yn(t, e.key, e.data),
            updateMask: Ts(e.jt)
        }; else {
            if (!(e instanceof en)) return D$1();
            n = {
                verify: Wn(t, e.key)
            };
        }
        return e.fieldTransforms.length > 0 && (n.updateTransforms = e.fieldTransforms.map((t => function(t, e) {
            const n = e.transform;
            if (n instanceof Se) return {
                fieldPath: e.field.et(),
                setToServerValue: "REQUEST_TIME"
            };
            if (n instanceof De) return {
                fieldPath: e.field.et(),
                appendMissingElements: {
                    values: n.elements
                }
            };
            if (n instanceof Ne) return {
                fieldPath: e.field.et(),
                removeAllFromArray: {
                    values: n.elements
                }
            };
            if (n instanceof $e) return {
                fieldPath: e.field.et(),
                increment: n.qt
            };
            throw D$1();
        }(0, t)))), e.Wt.Qt || (n.currentDocument = function(t, e) {
            return void 0 !== e.updateTime ? {
                updateTime: qn(t, e.updateTime)
            } : void 0 !== e.exists ? {
                exists: e.exists
            } : D$1();
        }(t, e.Wt)), n;
    }

    function ns(t, e) {
        const n = e.currentDocument ? function(t) {
            return void 0 !== t.updateTime ? Be.updateTime(Un(t.updateTime)) : void 0 !== t.exists ? Be.exists(t.exists) : Be.Kt();
        }(e.currentDocument) : Be.Kt(), s = e.updateTransforms ? e.updateTransforms.map((e => function(t, e) {
            let n = null;
            if ("setToServerValue" in e) C("REQUEST_TIME" === e.setToServerValue), n = new Se; else if ("appendMissingElements" in e) {
                const t = e.appendMissingElements.values || [];
                n = new De(t);
            } else if ("removeAllFromArray" in e) {
                const t = e.removeAllFromArray.values || [];
                n = new Ne(t);
            } else "increment" in e ? n = new $e(t, e.increment) : D$1();
            const s = Z$1.ct(e.fieldPath);
            return new Me(s, n);
        }(t, e))) : [];
        if (e.update) {
            e.update.name;
            const i = jn(t, e.update.name), r = new St({
                mapValue: {
                    fields: e.update.fields
                }
            });
            if (e.updateMask) {
                const t = function(t) {
                    const e = t.fieldPaths || [];
                    return new it(e.map((t => Z$1.ct(t))));
                }(e.updateMask);
                return new He(i, r, t, n, s);
            }
            return new ze(i, r, n, s);
        }
        if (e.delete) {
            const s = jn(t, e.delete);
            return new tn(s, n);
        }
        if (e.verify) {
            const s = jn(t, e.verify);
            return new en(s, n);
        }
        return D$1();
    }

    function ss(t, e) {
        return t && t.length > 0 ? (C(void 0 !== e), t.map((t => function(t, e) {
            // NOTE: Deletes don't have an updateTime.
            let n = t.updateTime ? Un(t.updateTime) : Un(e);
            n.isEqual(H$1.min()) && (
            // The Firestore Emulator currently returns an update time of 0 for
            // deletes of non-existing documents (rather than null). This breaks the
            // test "get deleted doc while offline with source=cache" as NoDocuments
            // with version 0 are filtered by IndexedDb's RemoteDocumentCache.
            // TODO(#2149): Remove this when Emulator is fixed
            n = Un(e));
            let s = null;
            return t.transformResults && t.transformResults.length > 0 && (s = t.transformResults), 
            new Le(n, s);
        }(t, e)))) : [];
    }

    function is(t, e) {
        return {
            documents: [ Gn(t, e.path) ]
        };
    }

    function rs(t, e) {
        // Dissect the path into parent, collectionId, and optional key filter.
        const n = {
            structuredQuery: {}
        }, s = e.path;
        null !== e.collectionGroup ? (n.parent = Gn(t, s), n.structuredQuery.from = [ {
            collectionId: e.collectionGroup,
            allDescendants: !0
        } ]) : (n.parent = Gn(t, s.G()), n.structuredQuery.from = [ {
            collectionId: s.J()
        } ]);
        const i = function(t) {
            if (0 === t.length) return;
            const e = t.map((t => 
            // visible for testing
            function(t) {
                if ("==" /* EQUAL */ === t.op) {
                    if (bt(t.value)) return {
                        unaryFilter: {
                            field: fs(t.field),
                            op: "IS_NAN"
                        }
                    };
                    if (pt(t.value)) return {
                        unaryFilter: {
                            field: fs(t.field),
                            op: "IS_NULL"
                        }
                    };
                } else if ("!=" /* NOT_EQUAL */ === t.op) {
                    if (bt(t.value)) return {
                        unaryFilter: {
                            field: fs(t.field),
                            op: "IS_NOT_NAN"
                        }
                    };
                    if (pt(t.value)) return {
                        unaryFilter: {
                            field: fs(t.field),
                            op: "IS_NOT_NULL"
                        }
                    };
                }
                return {
                    fieldFilter: {
                        field: fs(t.field),
                        op: _s(t.op),
                        value: t.value
                    }
                };
            }(t)));
            if (1 === e.length) return e[0];
            return {
                compositeFilter: {
                    op: "AND",
                    filters: e
                }
            };
        }(e.filters);
        i && (n.structuredQuery.where = i);
        const r = function(t) {
            if (0 === t.length) return;
            return t.map((t => 
            // visible for testing
            function(t) {
                return {
                    field: fs(t.field),
                    direction: ls(t.dir)
                };
            }(t)));
        }(e.orderBy);
        r && (n.structuredQuery.orderBy = r);
        const o = function(t, e) {
            return t.Lt || ft(e) ? e : {
                value: e
            };
        }
        /**
     * Returns a number (or null) from a google.protobuf.Int32Value proto.
     */ (t, e.limit);
        return null !== o && (n.structuredQuery.limit = o), e.startAt && (n.structuredQuery.startAt = us(e.startAt)), 
        e.endAt && (n.structuredQuery.endAt = us(e.endAt)), n;
    }

    function os(t) {
        let e = zn(t.parent);
        const n = t.structuredQuery, s = n.from ? n.from.length : 0;
        let i = null;
        if (s > 0) {
            C(1 === s);
            const t = n.from[0];
            t.allDescendants ? i = t.collectionId : e = e.child(t.collectionId);
        }
        let r = [];
        n.where && (r = as(n.where));
        let o = [];
        n.orderBy && (o = n.orderBy.map((t => function(t) {
            return new te(ds(t.field), 
            // visible for testing
            function(t) {
                switch (t) {
                  case "ASCENDING":
                    return "asc" /* ASCENDING */;

                  case "DESCENDING":
                    return "desc" /* DESCENDING */;

                  default:
                    return;
                }
            }
            // visible for testing
            (t.direction));
        }(t))));
        let c = null;
        n.limit && (c = function(t) {
            let e;
            return e = "object" == typeof t ? t.value : t, ft(e) ? null : e;
        }(n.limit));
        let a = null;
        n.startAt && (a = hs(n.startAt));
        let u = null;
        return n.endAt && (u = hs(n.endAt)), re(e, i, o, r, c, "F" /* First */ , a, u);
    }

    function cs(t, e) {
        const n = function(t, e) {
            switch (e) {
              case 0 /* Listen */ :
                return null;

              case 1 /* ExistenceFilterMismatch */ :
                return "existence-filter-mismatch";

              case 2 /* LimboResolution */ :
                return "limbo-document";

              default:
                return D$1();
            }
        }(0, e.$t);
        return null == n ? null : {
            "goog-listen-tags": n
        };
    }

    function as(t) {
        return t ? void 0 !== t.unaryFilter ? [ Es(t) ] : void 0 !== t.fieldFilter ? [ ws(t) ] : void 0 !== t.compositeFilter ? t.compositeFilter.filters.map((t => as(t))).reduce(((t, e) => t.concat(e))) : D$1() : [];
    }

    function us(t) {
        return {
            before: t.before,
            values: t.position
        };
    }

    function hs(t) {
        const e = !!t.before, n = t.values || [];
        return new Xt(n, e);
    }

    // visible for testing
    function ls(t) {
        return kn[t];
    }

    function _s(t) {
        return Mn[t];
    }

    function fs(t) {
        return {
            fieldPath: t.et()
        };
    }

    function ds(t) {
        return Z$1.ct(t.fieldPath);
    }

    function ws(t) {
        return Ut.create(ds(t.fieldFilter.field), function(t) {
            switch (t) {
              case "EQUAL":
                return "==" /* EQUAL */;

              case "NOT_EQUAL":
                return "!=" /* NOT_EQUAL */;

              case "GREATER_THAN":
                return ">" /* GREATER_THAN */;

              case "GREATER_THAN_OR_EQUAL":
                return ">=" /* GREATER_THAN_OR_EQUAL */;

              case "LESS_THAN":
                return "<" /* LESS_THAN */;

              case "LESS_THAN_OR_EQUAL":
                return "<=" /* LESS_THAN_OR_EQUAL */;

              case "ARRAY_CONTAINS":
                return "array-contains" /* ARRAY_CONTAINS */;

              case "IN":
                return "in" /* IN */;

              case "NOT_IN":
                return "not-in" /* NOT_IN */;

              case "ARRAY_CONTAINS_ANY":
                return "array-contains-any" /* ARRAY_CONTAINS_ANY */;

              case "OPERATOR_UNSPECIFIED":
              default:
                return D$1();
            }
        }(t.fieldFilter.op), t.fieldFilter.value);
    }

    function Es(t) {
        switch (t.unaryFilter.op) {
          case "IS_NAN":
            const e = ds(t.unaryFilter.field);
            return Ut.create(e, "==" /* EQUAL */ , {
                doubleValue: NaN
            });

          case "IS_NULL":
            const n = ds(t.unaryFilter.field);
            return Ut.create(n, "==" /* EQUAL */ , {
                nullValue: "NULL_VALUE"
            });

          case "IS_NOT_NAN":
            const s = ds(t.unaryFilter.field);
            return Ut.create(s, "!=" /* NOT_EQUAL */ , {
                doubleValue: NaN
            });

          case "IS_NOT_NULL":
            const i = ds(t.unaryFilter.field);
            return Ut.create(i, "!=" /* NOT_EQUAL */ , {
                nullValue: "NULL_VALUE"
            });

          case "OPERATOR_UNSPECIFIED":
          default:
            return D$1();
        }
    }

    function Ts(t) {
        const e = [];
        return t.fields.forEach((t => e.push(t.et()))), {
            fieldPaths: e
        };
    }

    function Is(t) {
        // Resource names have at least 4 components (project ID, database ID)
        return t.length >= 4 && "projects" === t.get(0) && "databases" === t.get(2);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class ms {
        constructor() {
            this.promise = new Promise(((t, e) => {
                this.resolve = t, this.reject = e;
            }));
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * PersistencePromise is essentially a re-implementation of Promise except
     * it has a .next() method instead of .then() and .next() and .catch() callbacks
     * are executed synchronously when a PersistencePromise resolves rather than
     * asynchronously (Promise implementations use setImmediate() or similar).
     *
     * This is necessary to interoperate with IndexedDB which will automatically
     * commit transactions if control is returned to the event loop without
     * synchronously initiating another operation on the transaction.
     *
     * NOTE: .then() and .catch() only allow a single consumer, unlike normal
     * Promises.
     */ class As {
        constructor(t) {
            // NOTE: next/catchCallback will always point to our own wrapper functions,
            // not the user's raw next() or catch() callbacks.
            this.Sn = null, this.Dn = null, 
            // When the operation resolves, we'll set result or error and mark isDone.
            this.result = void 0, this.error = void 0, this.Cn = !1, 
            // Set to true when .then() or .catch() are called and prevents additional
            // chaining.
            this.Nn = !1, t((t => {
                this.Cn = !0, this.result = t, this.Sn && 
                // value should be defined unless T is Void, but we can't express
                // that in the type system.
                this.Sn(t);
            }), (t => {
                this.Cn = !0, this.error = t, this.Dn && this.Dn(t);
            }));
        }
        catch(t) {
            return this.next(void 0, t);
        }
        next(t, e) {
            return this.Nn && D$1(), this.Nn = !0, this.Cn ? this.error ? this.xn(e, this.error) : this.$n(t, this.result) : new As(((n, s) => {
                this.Sn = e => {
                    this.$n(t, e).next(n, s);
                }, this.Dn = t => {
                    this.xn(e, t).next(n, s);
                };
            }));
        }
        On() {
            return new Promise(((t, e) => {
                this.next(t, e);
            }));
        }
        kn(t) {
            try {
                const e = t();
                return e instanceof As ? e : As.resolve(e);
            } catch (t) {
                return As.reject(t);
            }
        }
        $n(t, e) {
            return t ? this.kn((() => t(e))) : As.resolve(e);
        }
        xn(t, e) {
            return t ? this.kn((() => t(e))) : As.reject(e);
        }
        static resolve(t) {
            return new As(((e, n) => {
                e(t);
            }));
        }
        static reject(t) {
            return new As(((e, n) => {
                n(t);
            }));
        }
        static Mn(
        // Accept all Promise types in waitFor().
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        t) {
            return new As(((e, n) => {
                let s = 0, i = 0, r = !1;
                t.forEach((t => {
                    ++s, t.next((() => {
                        ++i, r && i === s && e();
                    }), (t => n(t)));
                })), r = !0, i === s && e();
            }));
        }
        /**
         * Given an array of predicate functions that asynchronously evaluate to a
         * boolean, implements a short-circuiting `or` between the results. Predicates
         * will be evaluated until one of them returns `true`, then stop. The final
         * result will be whether any of them returned `true`.
         */    static Fn(t) {
            let e = As.resolve(!1);
            for (const n of t) e = e.next((t => t ? As.resolve(t) : n()));
            return e;
        }
        static forEach(t, e) {
            const n = [];
            return t.forEach(((t, s) => {
                n.push(e.call(this, t, s));
            })), this.Mn(n);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // References to `window` are guarded by SimpleDb.isAvailable()
    /* eslint-disable no-restricted-globals */
    /**
     * Wraps an IDBTransaction and exposes a store() method to get a handle to a
     * specific object store.
     */
    class Rs {
        constructor(t, e) {
            this.action = t, this.transaction = e, this.aborted = !1, 
            /**
             * A promise that resolves with the result of the IndexedDb transaction.
             */
            this.Ln = new ms, this.transaction.oncomplete = () => {
                this.Ln.resolve();
            }, this.transaction.onabort = () => {
                e.error ? this.Ln.reject(new gs(t, e.error)) : this.Ln.resolve();
            }, this.transaction.onerror = e => {
                const n = Ss(e.target.error);
                this.Ln.reject(new gs(t, n));
            };
        }
        static open(t, e, n, s) {
            try {
                return new Rs(e, t.transaction(s, n));
            } catch (t) {
                throw new gs(e, t);
            }
        }
        get Bn() {
            return this.Ln.promise;
        }
        abort(t) {
            t && this.Ln.reject(t), this.aborted || (p$1("SimpleDb", "Aborting transaction:", t ? t.message : "Client-initiated abort"), 
            this.aborted = !0, this.transaction.abort());
        }
        /**
         * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All
         * operations performed on the SimpleDbStore happen within the context of this
         * transaction and it cannot be used anymore once the transaction is
         * completed.
         *
         * Note that we can't actually enforce that the KeyType and ValueType are
         * correct, but they allow type safety through the rest of the consuming code.
         */    store(t) {
            const e = this.transaction.objectStore(t);
            return new ps(e);
        }
    }

    /**
     * Provides a wrapper around IndexedDb with a simplified interface that uses
     * Promise-like return values to chain operations. Real promises cannot be used
     * since .then() continuations are executed asynchronously (e.g. via
     * .setImmediate), which would cause IndexedDB to end the transaction.
     * See PersistencePromise for more details.
     */ class Ps {
        /*
         * Creates a new SimpleDb wrapper for IndexedDb database `name`.
         *
         * Note that `version` must not be a downgrade. IndexedDB does not support
         * downgrading the schema version. We currently do not support any way to do
         * versioning outside of IndexedDB's versioning mechanism, as only
         * version-upgrade transactions are allowed to do things like create
         * objectstores.
         */
        constructor(t, e, n) {
            this.name = t, this.version = e, this.qn = n;
            // NOTE: According to https://bugs.webkit.org/show_bug.cgi?id=197050, the
            // bug we're checking for should exist in iOS >= 12.2 and < 13, but for
            // whatever reason it's much harder to hit after 12.2 so we only proactively
            // log on 12.2.
            12.2 === Ps.Un(getUA()) && b("Firestore persistence suffers from a bug in iOS 12.2 Safari that may cause your app to stop working. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");
        }
        /** Deletes the specified database. */    static delete(t) {
            return p$1("SimpleDb", "Removing database:", t), bs(window.indexedDB.deleteDatabase(t)).On();
        }
        /** Returns true if IndexedDB is available in the current environment. */    static Kn() {
            if ("undefined" == typeof indexedDB) return !1;
            if (Ps.Qn()) return !0;
            // We extensively use indexed array values and compound keys,
            // which IE and Edge do not support. However, they still have indexedDB
            // defined on the window, so we need to check for them here and make sure
            // to return that persistence is not enabled for those browsers.
            // For tracking support of this feature, see here:
            // https://developer.microsoft.com/en-us/microsoft-edge/platform/status/indexeddbarraysandmultientrysupport/
            // Check the UA string to find out the browser.
                    const t = getUA(), e = Ps.Un(t), n = 0 < e && e < 10, s = Ps.Wn(t), i = 0 < s && s < 4.5;
            // IE 10
            // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';
            // IE 11
            // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';
            // Edge
            // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML,
            // like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';
            // iOS Safari: Disable for users running iOS version < 10.
                    return !(t.indexOf("MSIE ") > 0 || t.indexOf("Trident/") > 0 || t.indexOf("Edge/") > 0 || n || i);
        }
        /**
         * Returns true if the backing IndexedDB store is the Node IndexedDBShim
         * (see https://github.com/axemclion/IndexedDBShim).
         */    static Qn() {
            var t;
            return "undefined" != typeof process && "YES" === (null === (t = process.env) || void 0 === t ? void 0 : t.jn);
        }
        /** Helper to get a typed SimpleDbStore from a transaction. */    static Gn(t, e) {
            return t.store(e);
        }
        // visible for testing
        /** Parse User Agent to determine iOS version. Returns -1 if not found. */
        static Un(t) {
            const e = t.match(/i(?:phone|pad|pod) os ([\d_]+)/i), n = e ? e[1].split("_").slice(0, 2).join(".") : "-1";
            return Number(n);
        }
        // visible for testing
        /** Parse User Agent to determine Android version. Returns -1 if not found. */
        static Wn(t) {
            const e = t.match(/Android ([\d.]+)/i), n = e ? e[1].split(".").slice(0, 2).join(".") : "-1";
            return Number(n);
        }
        /**
         * Opens the specified database, creating or upgrading it if necessary.
         */    async zn(t) {
            return this.db || (p$1("SimpleDb", "Opening database:", this.name), this.db = await new Promise(((e, n) => {
                // TODO(mikelehen): Investigate browser compatibility.
                // https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB
                // suggests IE9 and older WebKit browsers handle upgrade
                // differently. They expect setVersion, as described here:
                // https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeRequest/setVersion
                const s = indexedDB.open(this.name, this.version);
                s.onsuccess = t => {
                    const n = t.target.result;
                    e(n);
                }, s.onblocked = () => {
                    n(new gs(t, "Cannot upgrade IndexedDB schema while another tab is open. Close all tabs that access Firestore and reload this page to proceed."));
                }, s.onerror = e => {
                    const s = e.target.error;
                    "VersionError" === s.name ? n(new $(x$1.FAILED_PRECONDITION, "A newer version of the Firestore SDK was previously used and so the persisted data is not compatible with the version of the SDK you are now using. The SDK will operate with persistence disabled. If you need persistence, please re-upgrade to a newer version of the SDK or else clear the persisted IndexedDB data for your app to start fresh.")) : n(new gs(t, s));
                }, s.onupgradeneeded = t => {
                    p$1("SimpleDb", 'Database "' + this.name + '" requires upgrade from version:', t.oldVersion);
                    const e = t.target.result;
                    this.qn.Hn(e, s.transaction, t.oldVersion, this.version).next((() => {
                        p$1("SimpleDb", "Database upgrade to version " + this.version + " complete");
                    }));
                };
            }))), this.Jn && (this.db.onversionchange = t => this.Jn(t)), this.db;
        }
        Yn(t) {
            this.Jn = t, this.db && (this.db.onversionchange = e => t(e));
        }
        async runTransaction(t, e, n, s) {
            const i = "readonly" === e;
            let r = 0;
            for (;;) {
                ++r;
                try {
                    this.db = await this.zn(t);
                    const e = Rs.open(this.db, t, i ? "readonly" : "readwrite", n), r = s(e).catch((t => (
                    // Abort the transaction if there was an error.
                    e.abort(t), As.reject(t)))).On();
                    // As noted above, errors are propagated by aborting the transaction. So
                    // we swallow any error here to avoid the browser logging it as unhandled.
                    return r.catch((() => {})), 
                    // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to
                    // fire), but still return the original transactionFnResult back to the
                    // caller.
                    await e.Bn, r;
                } catch (t) {
                    // TODO(schmidt-sebastian): We could probably be smarter about this and
                    // not retry exceptions that are likely unrecoverable (such as quota
                    // exceeded errors).
                    // Note: We cannot use an instanceof check for FirestoreException, since the
                    // exception is wrapped in a generic error by our async/await handling.
                    const e = "FirebaseError" !== t.name && r < 3;
                    if (p$1("SimpleDb", "Transaction failed with error:", t.message, "Retrying:", e), 
                    this.close(), !e) return Promise.reject(t);
                }
            }
        }
        close() {
            this.db && this.db.close(), this.db = void 0;
        }
    }

    /**
     * A controller for iterating over a key range or index. It allows an iterate
     * callback to delete the currently-referenced object, or jump to a new key
     * within the key range or index.
     */ class Vs {
        constructor(t) {
            this.Xn = t, this.Zn = !1, this.ts = null;
        }
        get Cn() {
            return this.Zn;
        }
        get es() {
            return this.ts;
        }
        set cursor(t) {
            this.Xn = t;
        }
        /**
         * This function can be called to stop iteration at any point.
         */    done() {
            this.Zn = !0;
        }
        /**
         * This function can be called to skip to that next key, which could be
         * an index or a primary key.
         */    ns(t) {
            this.ts = t;
        }
        /**
         * Delete the current cursor value from the object store.
         *
         * NOTE: You CANNOT do this with a keysOnly query.
         */    delete() {
            return bs(this.Xn.delete());
        }
    }

    /** An error that wraps exceptions that thrown during IndexedDB execution. */ class gs extends $ {
        constructor(t, e) {
            super(x$1.UNAVAILABLE, `IndexedDB transaction '${t}' failed: ${e}`), this.name = "IndexedDbTransactionError";
        }
    }

    /** Verifies whether `e` is an IndexedDbTransactionError. */ function ys(t) {
        // Use name equality, as instanceof checks on errors don't work with errors
        // that wrap other errors.
        return "IndexedDbTransactionError" === t.name;
    }

    /**
     * A wrapper around an IDBObjectStore providing an API that:
     *
     * 1) Has generic KeyType / ValueType parameters to provide strongly-typed
     * methods for acting against the object store.
     * 2) Deals with IndexedDB's onsuccess / onerror event callbacks, making every
     * method return a PersistencePromise instead.
     * 3) Provides a higher-level API to avoid needing to do excessive wrapping of
     * intermediate IndexedDB types (IDBCursorWithValue, etc.)
     */ class ps {
        constructor(t) {
            this.store = t;
        }
        put(t, e) {
            let n;
            return void 0 !== e ? (p$1("SimpleDb", "PUT", this.store.name, t, e), n = this.store.put(e, t)) : (p$1("SimpleDb", "PUT", this.store.name, "<auto-key>", t), 
            n = this.store.put(t)), bs(n);
        }
        /**
         * Adds a new value into an Object Store and returns the new key. Similar to
         * IndexedDb's `add()`, this method will fail on primary key collisions.
         *
         * @param value - The object to write.
         * @returns The key of the value to add.
         */    add(t) {
            p$1("SimpleDb", "ADD", this.store.name, t, t);
            return bs(this.store.add(t));
        }
        /**
         * Gets the object with the specified key from the specified store, or null
         * if no object exists with the specified key.
         *
         * @key The key of the object to get.
         * @returns The object with the specified key or null if no object exists.
         */    get(t) {
            // We're doing an unsafe cast to ValueType.
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return bs(this.store.get(t)).next((e => (
            // Normalize nonexistence to null.
            void 0 === e && (e = null), p$1("SimpleDb", "GET", this.store.name, t, e), e)));
        }
        delete(t) {
            p$1("SimpleDb", "DELETE", this.store.name, t);
            return bs(this.store.delete(t));
        }
        /**
         * If we ever need more of the count variants, we can add overloads. For now,
         * all we need is to count everything in a store.
         *
         * Returns the number of rows in the store.
         */    count() {
            p$1("SimpleDb", "COUNT", this.store.name);
            return bs(this.store.count());
        }
        ss(t, e) {
            const n = this.cursor(this.options(t, e)), s = [];
            return this.rs(n, ((t, e) => {
                s.push(e);
            })).next((() => s));
        }
        os(t, e) {
            p$1("SimpleDb", "DELETE ALL", this.store.name);
            const n = this.options(t, e);
            n.cs = !1;
            const s = this.cursor(n);
            return this.rs(s, ((t, e, n) => n.delete()));
        }
        us(t, e) {
            let n;
            e ? n = t : (n = {}, e = t);
            const s = this.cursor(n);
            return this.rs(s, e);
        }
        /**
         * Iterates over a store, but waits for the given callback to complete for
         * each entry before iterating the next entry. This allows the callback to do
         * asynchronous work to determine if this iteration should continue.
         *
         * The provided callback should return `true` to continue iteration, and
         * `false` otherwise.
         */    hs(t) {
            const e = this.cursor({});
            return new As(((n, s) => {
                e.onerror = t => {
                    const e = Ss(t.target.error);
                    s(e);
                }, e.onsuccess = e => {
                    const s = e.target.result;
                    s ? t(s.primaryKey, s.value).next((t => {
                        t ? s.continue() : n();
                    })) : n();
                };
            }));
        }
        rs(t, e) {
            const n = [];
            return new As(((s, i) => {
                t.onerror = t => {
                    i(t.target.error);
                }, t.onsuccess = t => {
                    const i = t.target.result;
                    if (!i) return void s();
                    const r = new Vs(i), o = e(i.primaryKey, i.value, r);
                    if (o instanceof As) {
                        const t = o.catch((t => (r.done(), As.reject(t))));
                        n.push(t);
                    }
                    r.Cn ? s() : null === r.es ? i.continue() : i.continue(r.es);
                };
            })).next((() => As.Mn(n)));
        }
        options(t, e) {
            let n;
            return void 0 !== t && ("string" == typeof t ? n = t : e = t), {
                index: n,
                range: e
            };
        }
        cursor(t) {
            let e = "next";
            if (t.reverse && (e = "prev"), t.index) {
                const n = this.store.index(t.index);
                return t.cs ? n.openKeyCursor(t.range, e) : n.openCursor(t.range, e);
            }
            return this.store.openCursor(t.range, e);
        }
    }

    /**
     * Wraps an IDBRequest in a PersistencePromise, using the onsuccess / onerror
     * handlers to resolve / reject the PersistencePromise as appropriate.
     */ function bs(t) {
        return new As(((e, n) => {
            t.onsuccess = t => {
                const n = t.target.result;
                e(n);
            }, t.onerror = t => {
                const e = Ss(t.target.error);
                n(e);
            };
        }));
    }

    // Guard so we only report the error once.
    let vs = !1;

    function Ss(t) {
        const e = Ps.Un(getUA());
        if (e >= 12.2 && e < 13) {
            const e = "An internal error was encountered in the Indexed Database server";
            if (t.message.indexOf(e) >= 0) {
                // Wrap error in a more descriptive one.
                const t = new $("internal", `IOS_INDEXEDDB_BUG1: IndexedDb has thrown '${e}'. This is likely due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.`);
                return vs || (vs = !0, 
                // Throw a global exception outside of this promise chain, for the user to
                // potentially catch.
                setTimeout((() => {
                    throw t;
                }), 0)), t;
            }
        }
        return t;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Represents an operation scheduled to be run in the future on an AsyncQueue.
     *
     * It is created via DelayedOperation.createAndSchedule().
     *
     * Supports cancellation (via cancel()) and early execution (via skipDelay()).
     *
     * Note: We implement `PromiseLike` instead of `Promise`, as the `Promise` type
     * in newer versions of TypeScript defines `finally`, which is not available in
     * IE.
     */
    class Ds {
        constructor(t, e, n, s, i) {
            this.ls = t, this._s = e, this.fs = n, this.op = s, this.ds = i, this.ws = new ms, 
            this.then = this.ws.promise.then.bind(this.ws.promise), 
            // It's normal for the deferred promise to be canceled (due to cancellation)
            // and so we attach a dummy catch callback to avoid
            // 'UnhandledPromiseRejectionWarning' log spam.
            this.ws.promise.catch((t => {}));
        }
        /**
         * Creates and returns a DelayedOperation that has been scheduled to be
         * executed on the provided asyncQueue after the provided delayMs.
         *
         * @param asyncQueue - The queue to schedule the operation on.
         * @param id - A Timer ID identifying the type of operation this is.
         * @param delayMs - The delay (ms) before the operation should be scheduled.
         * @param op - The operation to run.
         * @param removalCallback - A callback to be called synchronously once the
         *   operation is executed or canceled, notifying the AsyncQueue to remove it
         *   from its delayedOperations list.
         *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and
         *   the DelayedOperation class public.
         */    static Es(t, e, n, s, i) {
            const r = Date.now() + n, o = new Ds(t, e, r, s, i);
            return o.start(n), o;
        }
        /**
         * Starts the timer. This is called immediately after construction by
         * createAndSchedule().
         */    start(t) {
            this.Ts = setTimeout((() => this.Is()), t);
        }
        /**
         * Queues the operation to run immediately (if it hasn't already been run or
         * canceled).
         */    As() {
            return this.Is();
        }
        /**
         * Cancels the operation if it hasn't already been executed or canceled. The
         * promise will be rejected.
         *
         * As long as the operation has not yet been run, calling cancel() provides a
         * guarantee that the operation will not be run.
         */    cancel(t) {
            null !== this.Ts && (this.clearTimeout(), this.ws.reject(new $(x$1.CANCELLED, "Operation cancelled" + (t ? ": " + t : ""))));
        }
        Is() {
            this.ls.Rs((() => null !== this.Ts ? (this.clearTimeout(), this.op().then((t => this.ws.resolve(t)))) : Promise.resolve()));
        }
        clearTimeout() {
            null !== this.Ts && (this.ds(this), clearTimeout(this.Ts), this.Ts = null);
        }
    }

    /**
     * Returns a FirestoreError that can be surfaced to the user if the provided
     * error is an IndexedDbTransactionError. Re-throws the error otherwise.
     */ function Cs(t, e) {
        if (b("AsyncQueue", `${e}: ${t}`), ys(t)) return new $(x$1.UNAVAILABLE, `${e}: ${t}`);
        throw t;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ const Ns = "The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.";

    /**
     * A base class representing a persistence transaction, encapsulating both the
     * transaction's sequence numbers as well as a list of onCommitted listeners.
     *
     * When you call Persistence.runTransaction(), it will create a transaction and
     * pass it to your callback. You then pass it to any method that operates
     * on persistence.
     */ class xs {
        constructor() {
            this.Ps = [];
        }
        Vs(t) {
            this.Ps.push(t);
        }
        gs() {
            this.Ps.forEach((t => t()));
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Encodes a resource path into a IndexedDb-compatible string form.
     */
    function $s(t) {
        let e = "";
        for (let n = 0; n < t.length; n++) e.length > 0 && (e = ks(e)), e = Os(t.get(n), e);
        return ks(e);
    }

    /** Encodes a single segment of a resource path into the given result */ function Os(t, e) {
        let n = e;
        const s = t.length;
        for (let e = 0; e < s; e++) {
            const s = t.charAt(e);
            switch (s) {
              case "\0":
                n += "";
                break;

              case "":
                n += "";
                break;

              default:
                n += s;
            }
        }
        return n;
    }

    /** Encodes a path separator into the given result */ function ks(t) {
        return t + "";
    }

    /**
     * Decodes the given IndexedDb-compatible string form of a resource path into
     * a ResourcePath instance. Note that this method is not suitable for use with
     * decoding resource names from the server; those are One Platform format
     * strings.
     */ function Ms(t) {
        // Event the empty path must encode as a path of at least length 2. A path
        // with exactly 2 must be the empty path.
        const e = t.length;
        if (C(e >= 2), 2 === e) return C("" === t.charAt(0) && "" === t.charAt(1)), Y$1.st();
        // Escape characters cannot exist past the second-to-last position in the
        // source value.
            const n = e - 2, s = [];
        let i = "";
        for (let r = 0; r < e; ) {
            // The last two characters of a valid encoded path must be a separator, so
            // there must be an end to this segment.
            const e = t.indexOf("", r);
            (e < 0 || e > n) && D$1();
            switch (t.charAt(e + 1)) {
              case "":
                const n = t.substring(r, e);
                let o;
                0 === i.length ? 
                // Avoid copying for the common case of a segment that excludes \0
                // and \001
                o = n : (i += n, o = i, i = ""), s.push(o);
                break;

              case "":
                i += t.substring(r, e), i += "\0";
                break;

              case "":
                // The escape character can be used in the output to encode itself.
                i += t.substring(r, e + 1);
                break;

              default:
                D$1();
            }
            r = e + 2;
        }
        return new Y$1(s);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Schema Version for the Web client:
     * 1.  Initial version including Mutation Queue, Query Cache, and Remote
     *     Document Cache
     * 2.  Used to ensure a targetGlobal object exists and add targetCount to it. No
     *     longer required because migration 3 unconditionally clears it.
     * 3.  Dropped and re-created Query Cache to deal with cache corruption related
     *     to limbo resolution. Addresses
     *     https://github.com/firebase/firebase-ios-sdk/issues/1548
     * 4.  Multi-Tab Support.
     * 5.  Removal of held write acks.
     * 6.  Create document global for tracking document cache size.
     * 7.  Ensure every cached document has a sentinel row with a sequence number.
     * 8.  Add collection-parent index for Collection Group queries.
     * 9.  Change RemoteDocumentChanges store to be keyed by readTime rather than
     *     an auto-incrementing ID. This is required for Index-Free queries.
     * 10. Rewrite the canonical IDs to the explicit Protobuf-based format.
     * 11. Add bundles and named_queries for bundle support.
     */
    /**
     * Wrapper class to store timestamps (seconds and nanos) in IndexedDb objects.
     */
    class Fs {
        constructor(t, e) {
            this.seconds = t, this.nanoseconds = e;
        }
    }

    /**
     * A singleton object to be stored in the 'owner' store in IndexedDb.
     *
     * A given database can have a single primary tab assigned at a given time. That
     * tab must validate that it is still holding the primary lease before every
     * operation that requires locked access. The primary tab should regularly
     * write an updated timestamp to this lease to prevent other tabs from
     * "stealing" the primary lease
     */ class Ls {
        constructor(t, 
        /** Whether to allow shared access from multiple tabs. */
        e, n) {
            this.ownerId = t, this.allowTabSynchronization = e, this.leaseTimestampMs = n;
        }
    }

    /**
     * Name of the IndexedDb object store.
     *
     * Note that the name 'owner' is chosen to ensure backwards compatibility with
     * older clients that only supported single locked access to the persistence
     * layer.
     */ Ls.store = "owner", 
    /**
     * The key string used for the single object that exists in the
     * DbPrimaryClient store.
     */
    Ls.key = "owner";

    /**
     * An object to be stored in the 'mutationQueues' store in IndexedDb.
     *
     * Each user gets a single queue of MutationBatches to apply to the server.
     * DbMutationQueue tracks the metadata about the queue.
     */
    class Bs {
        constructor(
        /**
         * The normalized user ID to which this queue belongs.
         */
        t, 
        /**
         * An identifier for the highest numbered batch that has been acknowledged
         * by the server. All MutationBatches in this queue with batchIds less
         * than or equal to this value are considered to have been acknowledged by
         * the server.
         *
         * NOTE: this is deprecated and no longer used by the code.
         */
        e, 
        /**
         * A stream token that was previously sent by the server.
         *
         * See StreamingWriteRequest in datastore.proto for more details about
         * usage.
         *
         * After sending this token, earlier tokens may not be used anymore so
         * only a single stream token is retained.
         *
         * NOTE: this is deprecated and no longer used by the code.
         */
        n) {
            this.userId = t, this.lastAcknowledgedBatchId = e, this.lastStreamToken = n;
        }
    }

    /** Name of the IndexedDb object store.  */ Bs.store = "mutationQueues", 
    /** Keys are automatically assigned via the userId property. */
    Bs.keyPath = "userId";

    /**
     * An object to be stored in the 'mutations' store in IndexedDb.
     *
     * Represents a batch of user-level mutations intended to be sent to the server
     * in a single write. Each user-level batch gets a separate DbMutationBatch
     * with a new batchId.
     */
    class qs {
        constructor(
        /**
         * The normalized user ID to which this batch belongs.
         */
        t, 
        /**
         * An identifier for this batch, allocated using an auto-generated key.
         */
        e, 
        /**
         * The local write time of the batch, stored as milliseconds since the
         * epoch.
         */
        n, 
        /**
         * A list of "mutations" that represent a partial base state from when this
         * write batch was initially created. During local application of the write
         * batch, these baseMutations are applied prior to the real writes in order
         * to override certain document fields from the remote document cache. This
         * is necessary in the case of non-idempotent writes (e.g. `increment()`
         * transforms) to make sure that the local view of the modified documents
         * doesn't flicker if the remote document cache receives the result of the
         * non-idempotent write before the write is removed from the queue.
         *
         * These mutations are never sent to the backend.
         */
        s, 
        /**
         * A list of mutations to apply. All mutations will be applied atomically.
         *
         * Mutations are serialized via toMutation().
         */
        i) {
            this.userId = t, this.batchId = e, this.localWriteTimeMs = n, this.baseMutations = s, 
            this.mutations = i;
        }
    }

    /** Name of the IndexedDb object store.  */ qs.store = "mutations", 
    /** Keys are automatically assigned via the userId, batchId properties. */
    qs.keyPath = "batchId", 
    /** The index name for lookup of mutations by user. */
    qs.userMutationsIndex = "userMutationsIndex", 
    /** The user mutations index is keyed by [userId, batchId] pairs. */
    qs.userMutationsKeyPath = [ "userId", "batchId" ];

    /**
     * An object to be stored in the 'documentMutations' store in IndexedDb.
     *
     * A manually maintained index of all the mutation batches that affect a given
     * document key. The rows in this table are references based on the contents of
     * DbMutationBatch.mutations.
     */
    class Us {
        constructor() {}
        /**
         * Creates a [userId] key for use in the DbDocumentMutations index to iterate
         * over all of a user's document mutations.
         */    static prefixForUser(t) {
            return [ t ];
        }
        /**
         * Creates a [userId, encodedPath] key for use in the DbDocumentMutations
         * index to iterate over all at document mutations for a given path or lower.
         */    static prefixForPath(t, e) {
            return [ t, $s(e) ];
        }
        /**
         * Creates a full index key of [userId, encodedPath, batchId] for inserting
         * and deleting into the DbDocumentMutations index.
         */    static key(t, e, n) {
            return [ t, $s(e), n ];
        }
    }

    Us.store = "documentMutations", 
    /**
     * Because we store all the useful information for this store in the key,
     * there is no useful information to store as the value. The raw (unencoded)
     * path cannot be stored because IndexedDb doesn't store prototype
     * information.
     */
    Us.PLACEHOLDER = new Us;

    /**
     * Represents the known absence of a document at a particular version.
     * Stored in IndexedDb as part of a DbRemoteDocument object.
     */
    class Ks {
        constructor(t, e) {
            this.path = t, this.readTime = e;
        }
    }

    /**
     * Represents a document that is known to exist but whose data is unknown.
     * Stored in IndexedDb as part of a DbRemoteDocument object.
     */ class Qs {
        constructor(t, e) {
            this.path = t, this.version = e;
        }
    }

    /**
     * An object to be stored in the 'remoteDocuments' store in IndexedDb.
     * It represents either:
     *
     * - A complete document.
     * - A "no document" representing a document that is known not to exist (at
     * some version).
     * - An "unknown document" representing a document that is known to exist (at
     * some version) but whose contents are unknown.
     *
     * Note: This is the persisted equivalent of a MaybeDocument and could perhaps
     * be made more general if necessary.
     */ class Ws {
        // TODO: We are currently storing full document keys almost three times
        // (once as part of the primary key, once - partly - as `parentPath` and once
        // inside the encoded documents). During our next migration, we should
        // rewrite the primary key as parentPath + document ID which would allow us
        // to drop one value.
        constructor(
        /**
         * Set to an instance of DbUnknownDocument if the data for a document is
         * not known, but it is known that a document exists at the specified
         * version (e.g. it had a successful update applied to it)
         */
        t, 
        /**
         * Set to an instance of a DbNoDocument if it is known that no document
         * exists.
         */
        e, 
        /**
         * Set to an instance of a Document if there's a cached version of the
         * document.
         */
        n, 
        /**
         * Documents that were written to the remote document store based on
         * a write acknowledgment are marked with `hasCommittedMutations`. These
         * documents are potentially inconsistent with the backend's copy and use
         * the write's commit version as their document version.
         */
        s, 
        /**
         * When the document was read from the backend. Undefined for data written
         * prior to schema version 9.
         */
        i, 
        /**
         * The path of the collection this document is part of. Undefined for data
         * written prior to schema version 9.
         */
        r) {
            this.unknownDocument = t, this.noDocument = e, this.document = n, this.hasCommittedMutations = s, 
            this.readTime = i, this.parentPath = r;
        }
    }

    Ws.store = "remoteDocuments", 
    /**
     * An index that provides access to all entries sorted by read time (which
     * corresponds to the last modification time of each row).
     *
     * This index is used to provide a changelog for Multi-Tab.
     */
    Ws.readTimeIndex = "readTimeIndex", Ws.readTimeIndexPath = "readTime", 
    /**
     * An index that provides access to documents in a collection sorted by read
     * time.
     *
     * This index is used to allow the RemoteDocumentCache to fetch newly changed
     * documents in a collection.
     */
    Ws.collectionReadTimeIndex = "collectionReadTimeIndex", Ws.collectionReadTimeIndexPath = [ "parentPath", "readTime" ];

    /**
     * Contains a single entry that has metadata about the remote document cache.
     */
    class js {
        /**
         * @param byteSize - Approximately the total size in bytes of all the
         * documents in the document cache.
         */
        constructor(t) {
            this.byteSize = t;
        }
    }

    js.store = "remoteDocumentGlobal", js.key = "remoteDocumentGlobalKey";

    /**
     * An object to be stored in the 'targets' store in IndexedDb.
     *
     * This is based on and should be kept in sync with the proto used in the iOS
     * client.
     *
     * Each query the client listens to against the server is tracked on disk so
     * that the query can be efficiently resumed on restart.
     */
    class Gs {
        constructor(
        /**
         * An auto-generated sequential numeric identifier for the query.
         *
         * Queries are stored using their canonicalId as the key, but these
         * canonicalIds can be quite long so we additionally assign a unique
         * queryId which can be used by referenced data structures (e.g.
         * indexes) to minimize the on-disk cost.
         */
        t, 
        /**
         * The canonical string representing this query. This is not unique.
         */
        e, 
        /**
         * The last readTime received from the Watch Service for this query.
         *
         * This is the same value as TargetChange.read_time in the protos.
         */
        n, 
        /**
         * An opaque, server-assigned token that allows watching a query to be
         * resumed after disconnecting without retransmitting all the data
         * that matches the query. The resume token essentially identifies a
         * point in time from which the server should resume sending results.
         *
         * This is related to the snapshotVersion in that the resumeToken
         * effectively also encodes that value, but the resumeToken is opaque
         * and sometimes encodes additional information.
         *
         * A consequence of this is that the resumeToken should be used when
         * asking the server to reason about where this client is in the watch
         * stream, but the client should use the snapshotVersion for its own
         * purposes.
         *
         * This is the same value as TargetChange.resume_token in the protos.
         */
        s, 
        /**
         * A sequence number representing the last time this query was
         * listened to, used for garbage collection purposes.
         *
         * Conventionally this would be a timestamp value, but device-local
         * clocks are unreliable and they must be able to create new listens
         * even while disconnected. Instead this should be a monotonically
         * increasing number that's incremented on each listen call.
         *
         * This is different from the queryId since the queryId is an
         * immutable identifier assigned to the Query on first use while
         * lastListenSequenceNumber is updated every time the query is
         * listened to.
         */
        i, 
        /**
         * Denotes the maximum snapshot version at which the associated query view
         * contained no limbo documents.  Undefined for data written prior to
         * schema version 9.
         */
        r, 
        /**
         * The query for this target.
         *
         * Because canonical ids are not unique we must store the actual query. We
         * use the proto to have an object we can persist without having to
         * duplicate translation logic to and from a `Query` object.
         */
        o) {
            this.targetId = t, this.canonicalId = e, this.readTime = n, this.resumeToken = s, 
            this.lastListenSequenceNumber = i, this.lastLimboFreeSnapshotVersion = r, this.query = o;
        }
    }

    Gs.store = "targets", 
    /** Keys are automatically assigned via the targetId property. */
    Gs.keyPath = "targetId", 
    /** The name of the queryTargets index. */
    Gs.queryTargetsIndexName = "queryTargetsIndex", 
    /**
     * The index of all canonicalIds to the targets that they match. This is not
     * a unique mapping because canonicalId does not promise a unique name for all
     * possible queries, so we append the targetId to make the mapping unique.
     */
    Gs.queryTargetsKeyPath = [ "canonicalId", "targetId" ];

    /**
     * An object representing an association between a target and a document, or a
     * sentinel row marking the last sequence number at which a document was used.
     * Each document cached must have a corresponding sentinel row before lru
     * garbage collection is enabled.
     *
     * The target associations and sentinel rows are co-located so that orphaned
     * documents and their sequence numbers can be identified efficiently via a scan
     * of this store.
     */
    class zs {
        constructor(
        /**
         * The targetId identifying a target or 0 for a sentinel row.
         */
        t, 
        /**
         * The path to the document, as encoded in the key.
         */
        e, 
        /**
         * If this is a sentinel row, this should be the sequence number of the last
         * time the document specified by `path` was used. Otherwise, it should be
         * `undefined`.
         */
        n) {
            this.targetId = t, this.path = e, this.sequenceNumber = n;
        }
    }

    /** Name of the IndexedDb object store.  */ zs.store = "targetDocuments", 
    /** Keys are automatically assigned via the targetId, path properties. */
    zs.keyPath = [ "targetId", "path" ], 
    /** The index name for the reverse index. */
    zs.documentTargetsIndex = "documentTargetsIndex", 
    /** We also need to create the reverse index for these properties. */
    zs.documentTargetsKeyPath = [ "path", "targetId" ];

    /**
     * A record of global state tracked across all Targets, tracked separately
     * to avoid the need for extra indexes.
     *
     * This should be kept in-sync with the proto used in the iOS client.
     */
    class Hs {
        constructor(
        /**
         * The highest numbered target id across all targets.
         *
         * See DbTarget.targetId.
         */
        t, 
        /**
         * The highest numbered lastListenSequenceNumber across all targets.
         *
         * See DbTarget.lastListenSequenceNumber.
         */
        e, 
        /**
         * A global snapshot version representing the last consistent snapshot we
         * received from the backend. This is monotonically increasing and any
         * snapshots received from the backend prior to this version (e.g. for
         * targets resumed with a resumeToken) should be suppressed (buffered)
         * until the backend has caught up to this snapshot version again. This
         * prevents our cache from ever going backwards in time.
         */
        n, 
        /**
         * The number of targets persisted.
         */
        s) {
            this.highestTargetId = t, this.highestListenSequenceNumber = e, this.lastRemoteSnapshotVersion = n, 
            this.targetCount = s;
        }
    }

    /**
     * The key string used for the single object that exists in the
     * DbTargetGlobal store.
     */ Hs.key = "targetGlobalKey", Hs.store = "targetGlobal";

    /**
     * An object representing an association between a Collection id (e.g. 'messages')
     * to a parent path (e.g. '/chats/123') that contains it as a (sub)collection.
     * This is used to efficiently find all collections to query when performing
     * a Collection Group query.
     */
    class Js {
        constructor(
        /**
         * The collectionId (e.g. 'messages')
         */
        t, 
        /**
         * The path to the parent (either a document location or an empty path for
         * a root-level collection).
         */
        e) {
            this.collectionId = t, this.parent = e;
        }
    }

    /** Name of the IndexedDb object store. */ Js.store = "collectionParents", 
    /** Keys are automatically assigned via the collectionId, parent properties. */
    Js.keyPath = [ "collectionId", "parent" ];

    /**
     * A record of the metadata state of each client.
     *
     * PORTING NOTE: This is used to synchronize multi-tab state and does not need
     * to be ported to iOS or Android.
     */
    class Ys {
        constructor(
        // Note: Previous schema versions included a field
        // "lastProcessedDocumentChangeId". Don't use anymore.
        /** The auto-generated client id assigned at client startup. */
        t, 
        /** The last time this state was updated. */
        e, 
        /** Whether the client's network connection is enabled. */
        n, 
        /** Whether this client is running in a foreground tab. */
        s) {
            this.clientId = t, this.updateTimeMs = e, this.networkEnabled = n, this.inForeground = s;
        }
    }

    /** Name of the IndexedDb object store. */ Ys.store = "clientMetadata", 
    /** Keys are automatically assigned via the clientId properties. */
    Ys.keyPath = "clientId";

    /**
     * A object representing a bundle loaded by the SDK.
     */
    class Xs {
        constructor(
        /** The ID of the loaded bundle. */
        t, 
        /** The create time of the loaded bundle. */
        e, 
        /** The schema version of the loaded bundle. */
        n) {
            this.bundleId = t, this.createTime = e, this.version = n;
        }
    }

    /** Name of the IndexedDb object store. */ Xs.store = "bundles", Xs.keyPath = "bundleId";

    /**
     * A object representing a named query loaded by the SDK via a bundle.
     */
    class Zs {
        constructor(
        /** The name of the query. */
        t, 
        /** The read time of the results saved in the bundle from the named query. */
        e, 
        /** The query saved in the bundle. */
        n) {
            this.name = t, this.readTime = e, this.bundledQuery = n;
        }
    }

    /** Name of the IndexedDb object store. */ Zs.store = "namedQueries", Zs.keyPath = "name";

    // Visible for testing
    const ti = [ ...[ ...[ ...[ ...[ Bs.store, qs.store, Us.store, Ws.store, Gs.store, Ls.store, Hs.store, zs.store ], Ys.store ], js.store ], Js.store ], Xs.store, Zs.store ];

    // V2 is no longer usable (see comment at top of file)
    // Visible for testing
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class ei extends xs {
        constructor(t, e) {
            super(), this.ys = t, this.ps = e;
        }
    }

    function ni(t, e) {
        const n = N$1(t);
        return Ps.Gn(n.ys, e);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A batch of mutations that will be sent as one unit to the backend.
     */ class si {
        /**
         * @param batchId - The unique ID of this mutation batch.
         * @param localWriteTime - The original write time of this mutation.
         * @param baseMutations - Mutations that are used to populate the base
         * values when this mutation is applied locally. This can be used to locally
         * overwrite values that are persisted in the remote document cache. Base
         * mutations are never sent to the backend.
         * @param mutations - The user-provided mutations in this mutation batch.
         * User-provided mutations are applied both locally and remotely on the
         * backend.
         */
        constructor(t, e, n, s) {
            this.batchId = t, this.bs = e, this.baseMutations = n, this.mutations = s;
        }
        /**
         * Applies all the mutations in this MutationBatch to the specified document
         * to create a new remote document
         *
         * @param docKey - The key of the document to apply mutations to.
         * @param maybeDoc - The document to apply mutations to.
         * @param batchResult - The result of applying the MutationBatch to the
         * backend.
         */    vs(t, e, n) {
            const s = n.Ss;
            for (let n = 0; n < this.mutations.length; n++) {
                const i = this.mutations[n];
                if (i.key.isEqual(t)) {
                    e = Ke(i, e, s[n]);
                }
            }
            return e;
        }
        /**
         * Computes the local view of a document given all the mutations in this
         * batch.
         *
         * @param docKey - The key of the document to apply mutations to.
         * @param maybeDoc - The document to apply mutations to.
         */    Ds(t, e) {
            // First, apply the base state. This allows us to apply non-idempotent
            // transform against a consistent set of values.
            for (const n of this.baseMutations) n.key.isEqual(t) && (e = Qe(n, e, this.bs));
            // Second, apply all user-provided mutations.
                    for (const n of this.mutations) n.key.isEqual(t) && (e = Qe(n, e, this.bs));
            return e;
        }
        /**
         * Computes the local view for all provided documents given the mutations in
         * this batch.
         */    Cs(t) {
            // TODO(mrschmidt): This implementation is O(n^2). If we apply the mutations
            // directly (as done in `applyToLocalView()`), we can reduce the complexity
            // to O(n).
            let e = t;
            return this.mutations.forEach((n => {
                const s = this.Ds(n.key, t.get(n.key));
                s && (e = e.Gt(n.key, s));
            })), e;
        }
        keys() {
            return this.mutations.reduce(((t, e) => t.add(e.key)), Rn());
        }
        isEqual(t) {
            return this.batchId === t.batchId && j(this.mutations, t.mutations, ((t, e) => je(t, e))) && j(this.baseMutations, t.baseMutations, ((t, e) => je(t, e)));
        }
    }

    /** The result of applying a mutation batch to the backend. */ class ii {
        constructor(t, e, n, 
        /**
         * A pre-computed mapping from each mutated document to the resulting
         * version.
         */
        s) {
            this.batch = t, this.Ns = e, this.Ss = n, this.xs = s;
        }
        /**
         * Creates a new MutationBatchResult for the given batch and results. There
         * must be one result for each mutation in the batch. This static factory
         * caches a document=&gt;version mapping (docVersions).
         */    static from(t, e, n) {
            C(t.mutations.length === n.length);
            let s = mn();
            const i = t.mutations;
            for (let t = 0; t < i.length; t++) s = s.Gt(i[t].key, n[t].version);
            return new ii(t, e, n, s);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Serializer for values stored in the LocalStore. */ class ri {
        constructor(t) {
            this.$s = t;
        }
    }

    /** Decodes a remote document from storage locally to a Document. */ function oi(t, e) {
        if (e.document) return Xn(t.$s, e.document, !!e.hasCommittedMutations);
        if (e.noDocument) {
            const t = tt._t(e.noDocument.path), n = li(e.noDocument.readTime);
            return new $t(t, n, {
                hasCommittedMutations: !!e.hasCommittedMutations
            });
        }
        if (e.unknownDocument) {
            const t = tt._t(e.unknownDocument.path), n = li(e.unknownDocument.version);
            return new Ot(t, n);
        }
        return D$1();
    }

    /** Encodes a document for storage locally. */ function ci(t, e, n) {
        const s = ai(n), i = e.key.path.G().tt();
        if (e instanceof xt) {
            const n = function(t, e) {
                return {
                    name: Wn(t, e.key),
                    fields: e.yt().mapValue.fields,
                    updateTime: Ln(t, e.version.q())
                };
            }(t.$s, e), r = e.hasCommittedMutations;
            return new Ws(
            /* unknownDocument= */ null, 
            /* noDocument= */ null, n, r, s, i);
        }
        if (e instanceof $t) {
            const t = e.key.path.tt(), n = hi(e.version), r = e.hasCommittedMutations;
            return new Ws(
            /* unknownDocument= */ null, new Ks(t, n), 
            /* document= */ null, r, s, i);
        }
        if (e instanceof Ot) {
            const t = e.key.path.tt(), n = hi(e.version);
            return new Ws(new Qs(t, n), 
            /* noDocument= */ null, 
            /* document= */ null, 
            /* hasCommittedMutations= */ !0, s, i);
        }
        return D$1();
    }

    function ai(t) {
        const e = t.q();
        return [ e.seconds, e.nanoseconds ];
    }

    function ui(t) {
        const e = new z$1(t[0], t[1]);
        return H$1.F(e);
    }

    function hi(t) {
        const e = t.q();
        return new Fs(e.seconds, e.nanoseconds);
    }

    function li(t) {
        const e = new z$1(t.seconds, t.nanoseconds);
        return H$1.F(e);
    }

    /** Encodes a batch of mutations into a DbMutationBatch for local storage. */
    /** Decodes a DbMutationBatch into a MutationBatch */
    function _i(t, e) {
        const n = (e.baseMutations || []).map((e => ns(t.$s, e)));
        // Squash old transform mutations into existing patch or set mutations.
        // The replacement of representing `transforms` with `update_transforms`
        // on the SDK means that old `transform` mutations stored in IndexedDB need
        // to be updated to `update_transforms`.
        // TODO(b/174608374): Remove this code once we perform a schema migration.
            for (let t = 0; t < e.mutations.length - 1; ++t) {
            const n = e.mutations[t];
            if (t + 1 < e.mutations.length && void 0 !== e.mutations[t + 1].transform) {
                const s = e.mutations[t + 1];
                n.updateTransforms = s.transform.fieldTransforms, e.mutations.splice(t + 1, 1), 
                ++t;
            }
        }
        const s = e.mutations.map((e => ns(t.$s, e))), i = z$1.fromMillis(e.localWriteTimeMs);
        return new si(e.batchId, i, n, s);
    }

    /** Decodes a DbTarget into TargetData */ function fi(t) {
        const e = li(t.readTime), n = void 0 !== t.lastLimboFreeSnapshotVersion ? li(t.lastLimboFreeSnapshotVersion) : H$1.min();
        let s;
        var i;
        return void 0 !== t.query.documents ? (C(1 === (i = t.query).documents.length), 
        s = fe(oe(zn(i.documents[0])))) : s = function(t) {
            return fe(os(t));
        }(t.query), new Re(s, t.targetId, 0 /* Listen */ , t.lastListenSequenceNumber, e, n, rt.fromBase64String(t.resumeToken));
    }

    /** Encodes TargetData into a DbTarget for storage locally. */ function di(t, e) {
        const n = hi(e.Ot), s = hi(e.lastLimboFreeSnapshotVersion);
        let i;
        i = qt(e.target) ? is(t.$s, e.target) : rs(t.$s, e.target);
        // We can't store the resumeToken as a ByteString in IndexedDb, so we
        // convert it to a base64 string for storage.
            const r = e.resumeToken.toBase64();
        // lastListenSequenceNumber is always 0 until we do real GC.
            return new Gs(e.targetId, Ft(e.target), n, r, e.sequenceNumber, s, i);
    }

    /**
     * A helper function for figuring out what kind of query has been stored.
     */
    /**
     * Encodes a `BundledQuery` from bundle proto to a Query object.
     *
     * This reconstructs the original query used to build the bundle being loaded,
     * including features exists only in SDKs (for example: limit-to-last).
     */
    function wi(t) {
        const e = os({
            parent: t.parent,
            structuredQuery: t.structuredQuery
        });
        return "LAST" === t.limitType ? de(e, e.limit, "L" /* Last */) : e;
    }

    /** Encodes a NamedQuery proto object to a NamedQuery model object. */
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class Ei {
        Os(t, e) {
            return Ti(t).get(e).next((t => {
                if (t) return {
                    id: (e = t).bundleId,
                    createTime: li(e.createTime),
                    version: e.version
                };
                /** Encodes a DbBundle to a BundleMetadata object. */
                var e;
                /** Encodes a BundleMetadata to a DbBundle. */        }));
        }
        ks(t, e) {
            return Ti(t).put({
                bundleId: (n = e).id,
                createTime: hi(Un(n.createTime)),
                version: n.version
            });
            var n;
            /** Encodes a DbNamedQuery to a NamedQuery. */    }
        Ms(t, e) {
            return Ii(t).get(e).next((t => {
                if (t) return {
                    name: (e = t).name,
                    query: wi(e.bundledQuery),
                    readTime: li(e.readTime)
                };
                var e;
                /** Encodes a NamedQuery from a bundle proto to a DbNamedQuery. */        }));
        }
        Fs(t, e) {
            return Ii(t).put(function(t) {
                return {
                    name: t.name,
                    readTime: hi(Un(t.readTime)),
                    bundledQuery: t.bundledQuery
                };
            }(e));
        }
    }

    /**
     * Helper to get a typed SimpleDbStore for the bundles object store.
     */ function Ti(t) {
        return ni(t, Xs.store);
    }

    /**
     * Helper to get a typed SimpleDbStore for the namedQueries object store.
     */ function Ii(t) {
        return ni(t, Zs.store);
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An in-memory implementation of IndexManager.
     */ class mi {
        constructor() {
            this.Ls = new Ai;
        }
        Bs(t, e) {
            return this.Ls.add(e), As.resolve();
        }
        qs(t, e) {
            return As.resolve(this.Ls.getEntries(e));
        }
    }

    /**
     * Internal implementation of the collection-parent index exposed by MemoryIndexManager.
     * Also used for in-memory caching by IndexedDbIndexManager and initial index population
     * in indexeddb_schema.ts
     */ class Ai {
        constructor() {
            this.index = {};
        }
        // Returns false if the entry already existed.
        add(t) {
            const e = t.J(), n = t.G(), s = this.index[e] || new ln(Y$1.K), i = !s.has(n);
            return this.index[e] = s.add(n), i;
        }
        has(t) {
            const e = t.J(), n = t.G(), s = this.index[e];
            return s && s.has(n);
        }
        getEntries(t) {
            return (this.index[t] || new ln(Y$1.K)).tt();
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A persisted implementation of IndexManager.
     */ class Ri {
        constructor() {
            /**
             * An in-memory copy of the index entries we've already written since the SDK
             * launched. Used to avoid re-writing the same entry repeatedly.
             *
             * This is *NOT* a complete cache of what's in persistence and so can never be used to
             * satisfy reads.
             */
            this.Us = new Ai;
        }
        /**
         * Adds a new entry to the collection parent index.
         *
         * Repeated calls for the same collectionPath should be avoided within a
         * transaction as IndexedDbIndexManager only caches writes once a transaction
         * has been committed.
         */    Bs(t, e) {
            if (!this.Us.has(e)) {
                const n = e.J(), s = e.G();
                t.Vs((() => {
                    // Add the collection to the in memory cache only if the transaction was
                    // successfully committed.
                    this.Us.add(e);
                }));
                const i = {
                    collectionId: n,
                    parent: $s(s)
                };
                return Pi(t).put(i);
            }
            return As.resolve();
        }
        qs(t, e) {
            const n = [], s = IDBKeyRange.bound([ e, "" ], [ G$1(e), "" ], 
            /*lowerOpen=*/ !1, 
            /*upperOpen=*/ !0);
            return Pi(t).ss(s).next((t => {
                for (const s of t) {
                    // This collectionId guard shouldn't be necessary (and isn't as long
                    // as we're running in a real browser), but there's a bug in
                    // indexeddbshim that breaks our range in our tests running in node:
                    // https://github.com/axemclion/IndexedDBShim/issues/334
                    if (s.collectionId !== e) break;
                    n.push(Ms(s.parent));
                }
                return n;
            }));
        }
    }

    /**
     * Helper to get a typed SimpleDbStore for the collectionParents
     * document store.
     */ function Pi(t) {
        return ni(t, Js.store);
    }

    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ const Vi = {
        Ks: !1,
        Qs: 0,
        Ws: 0,
        js: 0
    };

    class gi {
        constructor(
        // When we attempt to collect, we will only do so if the cache size is greater than this
        // threshold. Passing `COLLECTION_DISABLED` here will cause collection to always be skipped.
        t, 
        // The percentage of sequence numbers that we will attempt to collect
        e, 
        // A cap on the total number of sequence numbers that will be collected. This prevents
        // us from collecting a huge number of sequence numbers if the cache has grown very large.
        n) {
            this.Gs = t, this.zs = e, this.Hs = n;
        }
        static Js(t) {
            return new gi(t, gi.Ys, gi.Xs);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Verifies the error thrown by a LocalStore operation. If a LocalStore
     * operation fails because the primary lease has been taken by another client,
     * we ignore the error (the persistence layer will immediately call
     * `applyPrimaryLease` to propagate the primary state change). All other errors
     * are re-thrown.
     *
     * @param err - An error returned by a LocalStore operation.
     * @returns A Promise that resolves after we recovered, or the original error.
     */
    async function yi(t) {
        if (t.code !== x$1.FAILED_PRECONDITION || t.message !== Ns) throw t;
        p$1("LocalStore", "Unexpectedly lost primary lease");
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A map implementation that uses objects as keys. Objects must have an
     * associated equals function and must be immutable. Entries in the map are
     * stored together with the key being produced from the mapKeyFn. This map
     * automatically handles collisions of keys.
     */ gi.Ys = 10, gi.Xs = 1e3, gi.Zs = new gi(41943040, gi.Ys, gi.Xs), gi.ti = new gi(-1, 0, 0);

    class pi {
        constructor(t, e) {
            this.ei = t, this.ni = e, 
            /**
             * The inner map for a key/value pair. Due to the possibility of collisions we
             * keep a list of entries that we do a linear search through to find an actual
             * match. Note that collisions should be rare, so we still expect near
             * constant time lookups in practice.
             */
            this.si = {};
        }
        /** Get a value for this key, or undefined if it does not exist. */    get(t) {
            const e = this.ei(t), n = this.si[e];
            if (void 0 !== n) for (const [e, s] of n) if (this.ni(e, t)) return s;
        }
        has(t) {
            return void 0 !== this.get(t);
        }
        /** Put this key and value in the map. */    set(t, e) {
            const n = this.ei(t), s = this.si[n];
            if (void 0 !== s) {
                for (let n = 0; n < s.length; n++) if (this.ni(s[n][0], t)) return void (s[n] = [ t, e ]);
                s.push([ t, e ]);
            } else this.si[n] = [ [ t, e ] ];
        }
        /**
         * Remove this key from the map. Returns a boolean if anything was deleted.
         */    delete(t) {
            const e = this.ei(t), n = this.si[e];
            if (void 0 === n) return !1;
            for (let s = 0; s < n.length; s++) if (this.ni(n[s][0], t)) return 1 === n.length ? delete this.si[e] : n.splice(s, 1), 
            !0;
            return !1;
        }
        forEach(t) {
            nt(this.si, ((e, n) => {
                for (const [e, s] of n) t(e, s);
            }));
        }
        Y() {
            return st(this.si);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An in-memory buffer of entries to be written to a RemoteDocumentCache.
     * It can be used to batch up a set of changes to be written to the cache, but
     * additionally supports reading entries back with the `getEntry()` method,
     * falling back to the underlying RemoteDocumentCache if no entry is
     * buffered.
     *
     * Entries added to the cache *must* be read first. This is to facilitate
     * calculating the size delta of the pending changes.
     *
     * PORTING NOTE: This class was implemented then removed from other platforms.
     * If byte-counting ends up being needed on the other platforms, consider
     * porting this class as part of that implementation work.
     */ class bi {
        constructor() {
            // A mapping of document key to the new cache entry that should be written (or null if any
            // existing cache entry should be removed).
            this.ii = new pi((t => t.toString()), ((t, e) => t.isEqual(e))), this.ri = !1;
        }
        oi(t) {
            const e = this.ii.get(t);
            return e ? e.readTime : H$1.min();
        }
        /**
         * Buffers a `RemoteDocumentCache.addEntry()` call.
         *
         * You can only modify documents that have already been retrieved via
         * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
         */    ci(t, e) {
            this.ai(), this.ii.set(t.key, {
                ui: t,
                readTime: e
            });
        }
        /**
         * Buffers a `RemoteDocumentCache.removeEntry()` call.
         *
         * You can only remove documents that have already been retrieved via
         * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
         */    hi(t, e = null) {
            this.ai(), this.ii.set(t, {
                ui: null,
                readTime: e
            });
        }
        /**
         * Looks up an entry in the cache. The buffered changes will first be checked,
         * and if no buffered change applies, this will forward to
         * `RemoteDocumentCache.getEntry()`.
         *
         * @param transaction - The transaction in which to perform any persistence
         *     operations.
         * @param documentKey - The key of the entry to look up.
         * @returns The cached Document or NoDocument entry, or null if we have
         *     nothing cached.
         */    li(t, e) {
            this.ai();
            const n = this.ii.get(e);
            return void 0 !== n ? As.resolve(n.ui) : this._i(t, e);
        }
        /**
         * Looks up several entries in the cache, forwarding to
         * `RemoteDocumentCache.getEntry()`.
         *
         * @param transaction - The transaction in which to perform any persistence
         *     operations.
         * @param documentKeys - The keys of the entries to look up.
         * @returns A map of cached `Document`s or `NoDocument`s, indexed by key. If
         *     an entry cannot be found, the corresponding key will be mapped to a
         *     null value.
         */    getEntries(t, e) {
            return this.fi(t, e);
        }
        /**
         * Applies buffered changes to the underlying RemoteDocumentCache, using
         * the provided transaction.
         */    apply(t) {
            return this.ai(), this.ri = !0, this.di(t);
        }
        /** Helper to assert this.changes is not null  */    ai() {}
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Delete a mutation batch and the associated document mutations.
     * @returns A PersistencePromise of the document mutations that were removed.
     */ function vi(t, e, n) {
        const s = t.store(qs.store), i = t.store(Us.store), r = [], o = IDBKeyRange.only(n.batchId);
        let c = 0;
        const a = s.us({
            range: o
        }, ((t, e, n) => (c++, n.delete())));
        r.push(a.next((() => {
            C(1 === c);
        })));
        const u = [];
        for (const t of n.mutations) {
            const s = Us.key(e, t.key.path, n.batchId);
            r.push(i.delete(s)), u.push(t.key);
        }
        return As.Mn(r).next((() => u));
    }

    /**
     * Returns an approximate size for the given document.
     */ function Si(t) {
        let e;
        if (t.document) e = t.document; else if (t.unknownDocument) e = t.unknownDocument; else {
            if (!t.noDocument) throw D$1();
            e = t.noDocument;
        }
        return JSON.stringify(e).length;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** A mutation queue for a specific user, backed by IndexedDB. */ class Di {
        constructor(
        /**
         * The normalized userId (e.g. null UID => "" userId) used to store /
         * retrieve mutations.
         */
        t, e, n, s) {
            this.userId = t, this.Ut = e, this.wi = n, this.Ei = s, 
            /**
             * Caches the document keys for pending mutation batches. If the mutation
             * has been removed from IndexedDb, the cached value may continue to
             * be used to retrieve the batch's document keys. To remove a cached value
             * locally, `removeCachedMutationKeys()` should be invoked either directly
             * or through `removeMutationBatches()`.
             *
             * With multi-tab, when the primary client acknowledges or rejects a mutation,
             * this cache is used by secondary clients to invalidate the local
             * view of the documents that were previously affected by the mutation.
             */
            // PORTING NOTE: Multi-tab only.
            this.Ti = {};
        }
        /**
         * Creates a new mutation queue for the given user.
         * @param user - The user for which to create a mutation queue.
         * @param serializer - The serializer to use when persisting to IndexedDb.
         */    static Ii(t, e, n, s) {
            // TODO(mcg): Figure out what constraints there are on userIDs
            // In particular, are there any reserved characters? are empty ids allowed?
            // For the moment store these together in the same mutations table assuming
            // that empty userIDs aren't allowed.
            C("" !== t.uid);
            const i = t.t() ? t.uid : "";
            return new Di(i, e, n, s);
        }
        mi(t) {
            let e = !0;
            const n = IDBKeyRange.bound([ this.userId, Number.NEGATIVE_INFINITY ], [ this.userId, Number.POSITIVE_INFINITY ]);
            return Ni(t).us({
                index: qs.userMutationsIndex,
                range: n
            }, ((t, n, s) => {
                e = !1, s.done();
            })).next((() => e));
        }
        Ai(t, e, n, s) {
            const i = xi(t), r = Ni(t);
            // The IndexedDb implementation in Chrome (and Firefox) does not handle
            // compound indices that include auto-generated keys correctly. To ensure
            // that the index entry is added correctly in all browsers, we perform two
            // writes: The first write is used to retrieve the next auto-generated Batch
            // ID, and the second write populates the index and stores the actual
            // mutation batch.
            // See: https://bugs.chromium.org/p/chromium/issues/detail?id=701972
            // We write an empty object to obtain key
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return r.add({}).next((o => {
                C("number" == typeof o);
                const c = new si(o, e, n, s), a = function(t, e, n) {
                    const s = n.baseMutations.map((e => es(t.$s, e))), i = n.mutations.map((e => es(t.$s, e)));
                    return new qs(e, n.batchId, n.bs.toMillis(), s, i);
                }(this.Ut, this.userId, c), u = [];
                let h = new ln(((t, e) => W$1(t.et(), e.et())));
                for (const t of s) {
                    const e = Us.key(this.userId, t.key.path, o);
                    h = h.add(t.key.path.G()), u.push(r.put(a)), u.push(i.put(e, Us.PLACEHOLDER));
                }
                return h.forEach((e => {
                    u.push(this.wi.Bs(t, e));
                })), t.Vs((() => {
                    this.Ti[o] = c.keys();
                })), As.Mn(u).next((() => c));
            }));
        }
        Ri(t, e) {
            return Ni(t).get(e).next((t => t ? (C(t.userId === this.userId), _i(this.Ut, t)) : null));
        }
        /**
         * Returns the document keys for the mutation batch with the given batchId.
         * For primary clients, this method returns `null` after
         * `removeMutationBatches()` has been called. Secondary clients return a
         * cached result until `removeCachedMutationKeys()` is invoked.
         */
        // PORTING NOTE: Multi-tab only.
        Pi(t, e) {
            return this.Ti[e] ? As.resolve(this.Ti[e]) : this.Ri(t, e).next((t => {
                if (t) {
                    const n = t.keys();
                    return this.Ti[e] = n, n;
                }
                return null;
            }));
        }
        Vi(t, e) {
            const n = e + 1, s = IDBKeyRange.lowerBound([ this.userId, n ]);
            let i = null;
            return Ni(t).us({
                index: qs.userMutationsIndex,
                range: s
            }, ((t, e, s) => {
                e.userId === this.userId && (C(e.batchId >= n), i = _i(this.Ut, e)), s.done();
            })).next((() => i));
        }
        gi(t) {
            const e = IDBKeyRange.upperBound([ this.userId, Number.POSITIVE_INFINITY ]);
            let n = -1;
            return Ni(t).us({
                index: qs.userMutationsIndex,
                range: e,
                reverse: !0
            }, ((t, e, s) => {
                n = e.batchId, s.done();
            })).next((() => n));
        }
        yi(t) {
            const e = IDBKeyRange.bound([ this.userId, -1 ], [ this.userId, Number.POSITIVE_INFINITY ]);
            return Ni(t).ss(qs.userMutationsIndex, e).next((t => t.map((t => _i(this.Ut, t)))));
        }
        pi(t, e) {
            // Scan the document-mutation index starting with a prefix starting with
            // the given documentKey.
            const n = Us.prefixForPath(this.userId, e.path), s = IDBKeyRange.lowerBound(n), i = [];
            return xi(t).us({
                range: s
            }, ((n, s, r) => {
                const [o, c, a] = n, u = Ms(c);
                // Only consider rows matching exactly the specific key of
                // interest. Note that because we order by path first, and we
                // order terminators before path separators, we'll encounter all
                // the index rows for documentKey contiguously. In particular, all
                // the rows for documentKey will occur before any rows for
                // documents nested in a subcollection beneath documentKey so we
                // can stop as soon as we hit any such row.
                            if (o === this.userId && e.path.isEqual(u)) 
                // Look up the mutation batch in the store.
                return Ni(t).get(a).next((t => {
                    if (!t) throw D$1();
                    C(t.userId === this.userId), i.push(_i(this.Ut, t));
                }));
                r.done();
            })).next((() => i));
        }
        bi(t, e) {
            let n = new ln(W$1);
            const s = [];
            return e.forEach((e => {
                const i = Us.prefixForPath(this.userId, e.path), r = IDBKeyRange.lowerBound(i), o = xi(t).us({
                    range: r
                }, ((t, s, i) => {
                    const [r, o, c] = t, a = Ms(o);
                    // Only consider rows matching exactly the specific key of
                    // interest. Note that because we order by path first, and we
                    // order terminators before path separators, we'll encounter all
                    // the index rows for documentKey contiguously. In particular, all
                    // the rows for documentKey will occur before any rows for
                    // documents nested in a subcollection beneath documentKey so we
                    // can stop as soon as we hit any such row.
                                    r === this.userId && e.path.isEqual(a) ? n = n.add(c) : i.done();
                }));
                s.push(o);
            })), As.Mn(s).next((() => this.vi(t, n)));
        }
        Si(t, e) {
            const n = e.path, s = n.length + 1, i = Us.prefixForPath(this.userId, n), r = IDBKeyRange.lowerBound(i);
            // Collect up unique batchIDs encountered during a scan of the index. Use a
            // SortedSet to accumulate batch IDs so they can be traversed in order in a
            // scan of the main table.
            let o = new ln(W$1);
            return xi(t).us({
                range: r
            }, ((t, e, i) => {
                const [r, c, a] = t, u = Ms(c);
                r === this.userId && n.X(u) ? 
                // Rows with document keys more than one segment longer than the
                // query path can't be matches. For example, a query on 'rooms'
                // can't match the document /rooms/abc/messages/xyx.
                // TODO(mcg): we'll need a different scanner when we implement
                // ancestor queries.
                u.length === s && (o = o.add(a)) : i.done();
            })).next((() => this.vi(t, o)));
        }
        vi(t, e) {
            const n = [], s = [];
            // TODO(rockwood): Implement this using iterate.
            return e.forEach((e => {
                s.push(Ni(t).get(e).next((t => {
                    if (null === t) throw D$1();
                    C(t.userId === this.userId), n.push(_i(this.Ut, t));
                })));
            })), As.Mn(s).next((() => n));
        }
        Di(t, e) {
            return vi(t.ys, this.userId, e).next((n => (t.Vs((() => {
                this.Ci(e.batchId);
            })), As.forEach(n, (e => this.Ei.Ni(t, e))))));
        }
        /**
         * Clears the cached keys for a mutation batch. This method should be
         * called by secondary clients after they process mutation updates.
         *
         * Note that this method does not have to be called from primary clients as
         * the corresponding cache entries are cleared when an acknowledged or
         * rejected batch is removed from the mutation queue.
         */
        // PORTING NOTE: Multi-tab only
        Ci(t) {
            delete this.Ti[t];
        }
        xi(t) {
            return this.mi(t).next((e => {
                if (!e) return As.resolve();
                // Verify that there are no entries in the documentMutations index if
                // the queue is empty.
                            const n = IDBKeyRange.lowerBound(Us.prefixForUser(this.userId)), s = [];
                return xi(t).us({
                    range: n
                }, ((t, e, n) => {
                    if (t[0] === this.userId) {
                        const e = Ms(t[1]);
                        s.push(e);
                    } else n.done();
                })).next((() => {
                    C(0 === s.length);
                }));
            }));
        }
        $i(t, e) {
            return Ci(t, this.userId, e);
        }
        // PORTING NOTE: Multi-tab only (state is held in memory in other clients).
        /** Returns the mutation queue's metadata from IndexedDb. */
        Oi(t) {
            return $i(t).get(this.userId).next((t => t || new Bs(this.userId, -1, 
            /*lastStreamToken=*/ "")));
        }
    }

    /**
     * @returns true if the mutation queue for the given user contains a pending
     *         mutation for the given key.
     */ function Ci(t, e, n) {
        const s = Us.prefixForPath(e, n.path), i = s[1], r = IDBKeyRange.lowerBound(s);
        let o = !1;
        return xi(t).us({
            range: r,
            cs: !0
        }, ((t, n, s) => {
            const [r, c, /*batchID*/ a] = t;
            r === e && c === i && (o = !0), s.done();
        })).next((() => o));
    }

    /** Returns true if any mutation queue contains the given document. */
    /**
     * Helper to get a typed SimpleDbStore for the mutations object store.
     */
    function Ni(t) {
        return ni(t, qs.store);
    }

    /**
     * Helper to get a typed SimpleDbStore for the mutationQueues object store.
     */ function xi(t) {
        return ni(t, Us.store);
    }

    /**
     * Helper to get a typed SimpleDbStore for the mutationQueues object store.
     */ function $i(t) {
        return ni(t, Bs.store);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Offset to ensure non-overlapping target ids. */
    /**
     * Generates monotonically increasing target IDs for sending targets to the
     * watch stream.
     *
     * The client constructs two generators, one for the target cache, and one for
     * for the sync engine (to generate limbo documents targets). These
     * generators produce non-overlapping IDs (by using even and odd IDs
     * respectively).
     *
     * By separating the target ID space, the query cache can generate target IDs
     * that persist across client restarts, while sync engine can independently
     * generate in-memory target IDs that are transient and can be reused after a
     * restart.
     */
    class Oi {
        constructor(t) {
            this.ki = t;
        }
        next() {
            return this.ki += 2, this.ki;
        }
        static Mi() {
            // The target cache generator must return '2' in its first call to `next()`
            // as there is no differentiation in the protocol layer between an unset
            // number and the number '0'. If we were to sent a target with target ID
            // '0', the backend would consider it unset and replace it with its own ID.
            return new Oi(0);
        }
        static Fi() {
            // Sync engine assigns target IDs for limbo document detection.
            return new Oi(-1);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class ki {
        constructor(t, e) {
            this.Ei = t, this.Ut = e;
        }
        // PORTING NOTE: We don't cache global metadata for the target cache, since
        // some of it (in particular `highestTargetId`) can be modified by secondary
        // tabs. We could perhaps be more granular (and e.g. still cache
        // `lastRemoteSnapshotVersion` in memory) but for simplicity we currently go
        // to IndexedDb whenever we need to read metadata. We can revisit if it turns
        // out to have a meaningful performance impact.
        Li(t) {
            return this.Bi(t).next((e => {
                const n = new Oi(e.highestTargetId);
                return e.highestTargetId = n.next(), this.qi(t, e).next((() => e.highestTargetId));
            }));
        }
        Ui(t) {
            return this.Bi(t).next((t => H$1.F(new z$1(t.lastRemoteSnapshotVersion.seconds, t.lastRemoteSnapshotVersion.nanoseconds))));
        }
        Ki(t) {
            return this.Bi(t).next((t => t.highestListenSequenceNumber));
        }
        Qi(t, e, n) {
            return this.Bi(t).next((s => (s.highestListenSequenceNumber = e, n && (s.lastRemoteSnapshotVersion = n.q()), 
            e > s.highestListenSequenceNumber && (s.highestListenSequenceNumber = e), this.qi(t, s))));
        }
        Wi(t, e) {
            return this.ji(t, e).next((() => this.Bi(t).next((n => (n.targetCount += 1, this.Gi(e, n), 
            this.qi(t, n))))));
        }
        zi(t, e) {
            return this.ji(t, e);
        }
        Hi(t, e) {
            return this.Ji(t, e.targetId).next((() => Mi(t).delete(e.targetId))).next((() => this.Bi(t))).next((e => (C(e.targetCount > 0), 
            e.targetCount -= 1, this.qi(t, e))));
        }
        /**
         * Drops any targets with sequence number less than or equal to the upper bound, excepting those
         * present in `activeTargetIds`. Document associations for the removed targets are also removed.
         * Returns the number of targets removed.
         */    Yi(t, e, n) {
            let s = 0;
            const i = [];
            return Mi(t).us(((r, o) => {
                const c = fi(o);
                c.sequenceNumber <= e && null === n.get(c.targetId) && (s++, i.push(this.Hi(t, c)));
            })).next((() => As.Mn(i))).next((() => s));
        }
        /**
         * Call provided function with each `TargetData` that we have cached.
         */    Tn(t, e) {
            return Mi(t).us(((t, n) => {
                const s = fi(n);
                e(s);
            }));
        }
        Bi(t) {
            return Fi(t).get(Hs.key).next((t => (C(null !== t), t)));
        }
        qi(t, e) {
            return Fi(t).put(Hs.key, e);
        }
        ji(t, e) {
            return Mi(t).put(di(this.Ut, e));
        }
        /**
         * In-place updates the provided metadata to account for values in the given
         * TargetData. Saving is done separately. Returns true if there were any
         * changes to the metadata.
         */    Gi(t, e) {
            let n = !1;
            return t.targetId > e.highestTargetId && (e.highestTargetId = t.targetId, n = !0), 
            t.sequenceNumber > e.highestListenSequenceNumber && (e.highestListenSequenceNumber = t.sequenceNumber, 
            n = !0), n;
        }
        Xi(t) {
            return this.Bi(t).next((t => t.targetCount));
        }
        Zi(t, e) {
            // Iterating by the canonicalId may yield more than one result because
            // canonicalId values are not required to be unique per target. This query
            // depends on the queryTargets index to be efficient.
            const n = Ft(e), s = IDBKeyRange.bound([ n, Number.NEGATIVE_INFINITY ], [ n, Number.POSITIVE_INFINITY ]);
            let i = null;
            return Mi(t).us({
                range: s,
                index: Gs.queryTargetsIndexName
            }, ((t, n, s) => {
                const r = fi(n);
                // After finding a potential match, check that the target is
                // actually equal to the requested target.
                            Bt(e, r.target) && (i = r, s.done());
            })).next((() => i));
        }
        tr(t, e, n) {
            // PORTING NOTE: The reverse index (documentsTargets) is maintained by
            // IndexedDb.
            const s = [], i = Li(t);
            return e.forEach((e => {
                const r = $s(e.path);
                s.push(i.put(new zs(n, r))), s.push(this.Ei.er(t, n, e));
            })), As.Mn(s);
        }
        nr(t, e, n) {
            // PORTING NOTE: The reverse index (documentsTargets) is maintained by
            // IndexedDb.
            const s = Li(t);
            return As.forEach(e, (e => {
                const i = $s(e.path);
                return As.Mn([ s.delete([ n, i ]), this.Ei.sr(t, n, e) ]);
            }));
        }
        Ji(t, e) {
            const n = Li(t), s = IDBKeyRange.bound([ e ], [ e + 1 ], 
            /*lowerOpen=*/ !1, 
            /*upperOpen=*/ !0);
            return n.delete(s);
        }
        ir(t, e) {
            const n = IDBKeyRange.bound([ e ], [ e + 1 ], 
            /*lowerOpen=*/ !1, 
            /*upperOpen=*/ !0), s = Li(t);
            let i = Rn();
            return s.us({
                range: n,
                cs: !0
            }, ((t, e, n) => {
                const s = Ms(t[1]), r = new tt(s);
                i = i.add(r);
            })).next((() => i));
        }
        $i(t, e) {
            const n = $s(e.path), s = IDBKeyRange.bound([ n ], [ G$1(n) ], 
            /*lowerOpen=*/ !1, 
            /*upperOpen=*/ !0);
            let i = 0;
            return Li(t).us({
                index: zs.documentTargetsIndex,
                cs: !0,
                range: s
            }, (([t, e], n, s) => {
                // Having a sentinel row for a document does not count as containing that document;
                // For the target cache, containing the document means the document is part of some
                // target.
                0 !== t && (i++, s.done());
            })).next((() => i > 0));
        }
        /**
         * Looks up a TargetData entry by target ID.
         *
         * @param targetId - The target ID of the TargetData entry to look up.
         * @returns The cached TargetData entry, or null if the cache has no entry for
         * the target.
         */
        // PORTING NOTE: Multi-tab only.
        vn(t, e) {
            return Mi(t).get(e).next((t => t ? fi(t) : null));
        }
    }

    /**
     * Helper to get a typed SimpleDbStore for the queries object store.
     */ function Mi(t) {
        return ni(t, Gs.store);
    }

    /**
     * Helper to get a typed SimpleDbStore for the target globals object store.
     */ function Fi(t) {
        return ni(t, Hs.store);
    }

    /**
     * Helper to get a typed SimpleDbStore for the document target object store.
     */ function Li(t) {
        return ni(t, zs.store);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ function Bi([t, e], [n, s]) {
        const i = W$1(t, n);
        return 0 === i ? W$1(e, s) : i;
    }

    /**
     * Used to calculate the nth sequence number. Keeps a rolling buffer of the
     * lowest n values passed to `addElement`, and finally reports the largest of
     * them in `maxValue`.
     */ class qi {
        constructor(t) {
            this.rr = t, this.buffer = new ln(Bi), this.cr = 0;
        }
        ar() {
            return ++this.cr;
        }
        ur(t) {
            const e = [ t, this.ar() ];
            if (this.buffer.size < this.rr) this.buffer = this.buffer.add(e); else {
                const t = this.buffer.last();
                Bi(e, t) < 0 && (this.buffer = this.buffer.delete(t).add(e));
            }
        }
        get maxValue() {
            // Guaranteed to be non-empty. If we decide we are not collecting any
            // sequence numbers, nthSequenceNumber below short-circuits. If we have
            // decided that we are collecting n sequence numbers, it's because n is some
            // percentage of the existing sequence numbers. That means we should never
            // be in a situation where we are collecting sequence numbers but don't
            // actually have any.
            return this.buffer.last()[0];
        }
    }

    /**
     * This class is responsible for the scheduling of LRU garbage collection. It handles checking
     * whether or not GC is enabled, as well as which delay to use before the next run.
     */ class Ui {
        constructor(t, e) {
            this.hr = t, this.ls = e, this.lr = !1, this._r = null;
        }
        start(t) {
            -1 !== this.hr.params.Gs && this.dr(t);
        }
        stop() {
            this._r && (this._r.cancel(), this._r = null);
        }
        get wr() {
            return null !== this._r;
        }
        dr(t) {
            const e = this.lr ? 3e5 : 6e4;
            p$1("LruGarbageCollector", `Garbage collection scheduled in ${e}ms`), this._r = this.ls.Er("lru_garbage_collection" /* LruGarbageCollection */ , e, (async () => {
                this._r = null, this.lr = !0;
                try {
                    await t.Tr(this.hr);
                } catch (t) {
                    ys(t) ? p$1("LruGarbageCollector", "Ignoring IndexedDB error during garbage collection: ", t) : await yi(t);
                }
                await this.dr(t);
            }));
        }
    }

    /** Implements the steps for LRU garbage collection. */ class Ki {
        constructor(t, e) {
            this.Ir = t, this.params = e;
        }
        mr(t, e) {
            return this.Ir.Ar(t).next((t => Math.floor(e / 100 * t)));
        }
        Rr(t, e) {
            if (0 === e) return As.resolve(U$1.O);
            const n = new qi(e);
            return this.Ir.Tn(t, (t => n.ur(t.sequenceNumber))).next((() => this.Ir.Pr(t, (t => n.ur(t))))).next((() => n.maxValue));
        }
        Yi(t, e, n) {
            return this.Ir.Yi(t, e, n);
        }
        Vr(t, e) {
            return this.Ir.Vr(t, e);
        }
        gr(t, e) {
            return -1 === this.params.Gs ? (p$1("LruGarbageCollector", "Garbage collection skipped; disabled"), 
            As.resolve(Vi)) : this.yr(t).next((n => n < this.params.Gs ? (p$1("LruGarbageCollector", `Garbage collection skipped; Cache size ${n} is lower than threshold ${this.params.Gs}`), 
            Vi) : this.pr(t, e)));
        }
        yr(t) {
            return this.Ir.yr(t);
        }
        pr(t, e) {
            let n, s, i, r, c, a, u;
            const h = Date.now();
            return this.mr(t, this.params.zs).next((e => (
            // Cap at the configured max
            e > this.params.Hs ? (p$1("LruGarbageCollector", `Capping sequence numbers to collect down to the maximum of ${this.params.Hs} from ${e}`), 
            s = this.params.Hs) : s = e, r = Date.now(), this.Rr(t, s)))).next((s => (n = s, 
            c = Date.now(), this.Yi(t, n, e)))).next((e => (i = e, a = Date.now(), this.Vr(t, n)))).next((t => {
                if (u = Date.now(), g() <= LogLevel.DEBUG) {
                    p$1("LruGarbageCollector", `LRU Garbage Collection\n\tCounted targets in ${r - h}ms\n\tDetermined least recently used ${s} in ` + (c - r) + "ms\n" + `\tRemoved ${i} targets in ` + (a - c) + "ms\n" + `\tRemoved ${t} documents in ` + (u - a) + "ms\n" + `Total Duration: ${u - h}ms`);
                }
                return As.resolve({
                    Ks: !0,
                    Qs: s,
                    Ws: i,
                    js: t
                });
            }));
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Provides LRU functionality for IndexedDB persistence. */
    class Qi {
        constructor(t, e) {
            this.db = t, this.hr = function(t, e) {
                return new Ki(t, e);
            }(this, e);
        }
        Ar(t) {
            const e = this.br(t);
            return this.db.vr().Xi(t).next((t => e.next((e => t + e))));
        }
        br(t) {
            let e = 0;
            return this.Pr(t, (t => {
                e++;
            })).next((() => e));
        }
        Tn(t, e) {
            return this.db.vr().Tn(t, e);
        }
        Pr(t, e) {
            return this.Sr(t, ((t, n) => e(n)));
        }
        er(t, e, n) {
            return Wi(t, n);
        }
        sr(t, e, n) {
            return Wi(t, n);
        }
        Yi(t, e, n) {
            return this.db.vr().Yi(t, e, n);
        }
        Ni(t, e) {
            return Wi(t, e);
        }
        /**
         * Returns true if anything would prevent this document from being garbage
         * collected, given that the document in question is not present in any
         * targets and has a sequence number less than or equal to the upper bound for
         * the collection run.
         */    Dr(t, e) {
            return function(t, e) {
                let n = !1;
                return $i(t).hs((s => Ci(t, s, e).next((t => (t && (n = !0), As.resolve(!t)))))).next((() => n));
            }(t, e);
        }
        Vr(t, e) {
            const n = this.db.Nr().Cr(), s = [];
            let i = 0;
            return this.Sr(t, ((r, o) => {
                if (o <= e) {
                    const e = this.Dr(t, r).next((e => {
                        if (!e) 
                        // Our size accounting requires us to read all documents before
                        // removing them.
                        return i++, n.li(t, r).next((() => (n.hi(r), Li(t).delete([ 0, $s(r.path) ]))));
                    }));
                    s.push(e);
                }
            })).next((() => As.Mn(s))).next((() => n.apply(t))).next((() => i));
        }
        removeTarget(t, e) {
            const n = e.kt(t.ps);
            return this.db.vr().zi(t, n);
        }
        $r(t, e) {
            return Wi(t, e);
        }
        /**
         * Call provided function for each document in the cache that is 'orphaned'. Orphaned
         * means not a part of any target, so the only entry in the target-document index for
         * that document will be the sentinel row (targetId 0), which will also have the sequence
         * number for the last time the document was accessed.
         */    Sr(t, e) {
            const n = Li(t);
            let s, i = U$1.O;
            return n.us({
                index: zs.documentTargetsIndex
            }, (([t, n], {path: r, sequenceNumber: o}) => {
                0 === t ? (
                // if nextToReport is valid, report it, this is a new key so the
                // last one must not be a member of any targets.
                i !== U$1.O && e(new tt(Ms(s)), i), 
                // set nextToReport to be this sequence number. It's the next one we
                // might report, if we don't find any targets for this document.
                // Note that the sequence number must be defined when the targetId
                // is 0.
                i = o, s = r) : 
                // set nextToReport to be invalid, we know we don't need to report
                // this one since we found a target for it.
                i = U$1.O;
            })).next((() => {
                // Since we report sequence numbers after getting to the next key, we
                // need to check if the last key we iterated over was an orphaned
                // document and report it.
                i !== U$1.O && e(new tt(Ms(s)), i);
            }));
        }
        yr(t) {
            return this.db.Nr().Or(t);
        }
    }

    function Wi(t, e) {
        return Li(t).put(
        /**
     * @returns A value suitable for writing a sentinel row in the target-document
     * store.
     */
        function(t, e) {
            return new zs(0, $s(t.path), e);
        }(e, t.ps));
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * The RemoteDocumentCache for IndexedDb. To construct, invoke
     * `newIndexedDbRemoteDocumentCache()`.
     */ class ji {
        /**
         * @param serializer - The document serializer.
         * @param indexManager - The query indexes that need to be maintained.
         */
        constructor(t, e) {
            this.Ut = t, this.wi = e;
        }
        /**
         * Adds the supplied entries to the cache.
         *
         * All calls of `addEntry` are required to go through the RemoteDocumentChangeBuffer
         * returned by `newChangeBuffer()` to ensure proper accounting of metadata.
         */    ci(t, e, n) {
            return Hi(t).put(Ji(e), n);
        }
        /**
         * Removes a document from the cache.
         *
         * All calls of `removeEntry`  are required to go through the RemoteDocumentChangeBuffer
         * returned by `newChangeBuffer()` to ensure proper accounting of metadata.
         */    hi(t, e) {
            const n = Hi(t), s = Ji(e);
            return n.delete(s);
        }
        /**
         * Updates the current cache size.
         *
         * Callers to `addEntry()` and `removeEntry()` *must* call this afterwards to update the
         * cache's metadata.
         */    updateMetadata(t, e) {
            return this.getMetadata(t).next((n => (n.byteSize += e, this.kr(t, n))));
        }
        li(t, e) {
            return Hi(t).get(Ji(e)).next((t => this.Mr(t)));
        }
        /**
         * Looks up an entry in the cache.
         *
         * @param documentKey - The key of the entry to look up.
         * @returns The cached MaybeDocument entry and its size, or null if we have
         * nothing cached.
         */    Fr(t, e) {
            return Hi(t).get(Ji(e)).next((t => {
                const e = this.Mr(t);
                return e ? {
                    ui: e,
                    size: Si(t)
                } : null;
            }));
        }
        getEntries(t, e) {
            let n = wn();
            return this.Lr(t, e, ((t, e) => {
                const s = this.Mr(e);
                n = n.Gt(t, s);
            })).next((() => n));
        }
        /**
         * Looks up several entries in the cache.
         *
         * @param documentKeys - The set of keys entries to look up.
         * @returns A map of MaybeDocuments indexed by key (if a document cannot be
         *     found, the key will be mapped to null) and a map of sizes indexed by
         *     key (zero if the key cannot be found).
         */    Br(t, e) {
            let n = wn(), s = new an(tt.K);
            return this.Lr(t, e, ((t, e) => {
                const i = this.Mr(e);
                i ? (n = n.Gt(t, i), s = s.Gt(t, Si(e))) : (n = n.Gt(t, null), s = s.Gt(t, 0));
            })).next((() => ({
                qr: n,
                Ur: s
            })));
        }
        Lr(t, e, n) {
            if (e.Y()) return As.resolve();
            const s = IDBKeyRange.bound(e.first().path.tt(), e.last().path.tt()), i = e.Zt();
            let r = i.re();
            return Hi(t).us({
                range: s
            }, ((t, e, s) => {
                const o = tt._t(t);
                // Go through keys not found in cache.
                            for (;r && tt.K(r, o) < 0; ) n(r, null), r = i.re();
                r && r.isEqual(o) && (
                // Key found in cache.
                n(r, e), r = i.oe() ? i.re() : null), 
                // Skip to the next key (if there is one).
                r ? s.ns(r.path.tt()) : s.done();
            })).next((() => {
                // The rest of the keys are not in the cache. One case where `iterate`
                // above won't go through them is when the cache is empty.
                for (;r; ) n(r, null), r = i.oe() ? i.re() : null;
            }));
        }
        Kr(t, e, n) {
            let s = Tn();
            const i = e.path.length + 1, r = {};
            if (n.isEqual(H$1.min())) {
                // Documents are ordered by key, so we can use a prefix scan to narrow
                // down the documents we need to match the query against.
                const t = e.path.tt();
                r.range = IDBKeyRange.lowerBound(t);
            } else {
                // Execute an index-free query and filter by read time. This is safe
                // since all document changes to queries that have a
                // lastLimboFreeSnapshotVersion (`sinceReadTime`) have a read time set.
                const t = e.path.tt(), s = ai(n);
                r.range = IDBKeyRange.lowerBound([ t, s ], 
                /* open= */ !0), r.index = Ws.collectionReadTimeIndex;
            }
            return Hi(t).us(r, ((t, n, r) => {
                // The query is actually returning any path that starts with the query
                // path prefix which may include documents in subcollections. For
                // example, a query on 'rooms' will return rooms/abc/messages/xyx but we
                // shouldn't match it. Fix this by discarding rows with document keys
                // more than one segment longer than the query path.
                if (t.length !== i) return;
                const o = oi(this.Ut, n);
                e.path.X(o.key.path) ? o instanceof xt && Ie(e, o) && (s = s.Gt(o.key, o)) : r.done();
            })).next((() => s));
        }
        Cr(t) {
            return new Gi(this, !!t && t.Qr);
        }
        Or(t) {
            return this.getMetadata(t).next((t => t.byteSize));
        }
        getMetadata(t) {
            return zi(t).get(js.key).next((t => (C(!!t), t)));
        }
        kr(t, e) {
            return zi(t).put(js.key, e);
        }
        /**
         * Decodes `remoteDoc` and returns the document (or null, if the document
         * corresponds to the format used for sentinel deletes).
         */    Mr(t) {
            if (t) {
                const e = oi(this.Ut, t);
                return e instanceof $t && e.version.isEqual(H$1.min()) ? null : e;
            }
            return null;
        }
    }

    /**
     * Creates a new IndexedDbRemoteDocumentCache.
     *
     * @param serializer - The document serializer.
     * @param indexManager - The query indexes that need to be maintained.
     */
    /**
     * Handles the details of adding and updating documents in the IndexedDbRemoteDocumentCache.
     *
     * Unlike the MemoryRemoteDocumentChangeBuffer, the IndexedDb implementation computes the size
     * delta for all submitted changes. This avoids having to re-read all documents from IndexedDb
     * when we apply the changes.
     */
    class Gi extends bi {
        /**
         * @param documentCache - The IndexedDbRemoteDocumentCache to apply the changes to.
         * @param trackRemovals - Whether to create sentinel deletes that can be tracked by
         * `getNewDocumentChanges()`.
         */
        constructor(t, e) {
            super(), this.Wr = t, this.Qr = e, 
            // A map of document sizes prior to applying the changes in this buffer.
            this.jr = new pi((t => t.toString()), ((t, e) => t.isEqual(e)));
        }
        di(t) {
            const e = [];
            let n = 0, s = new ln(((t, e) => W$1(t.et(), e.et())));
            return this.ii.forEach(((i, r) => {
                const o = this.jr.get(i);
                if (r.ui) {
                    const c = ci(this.Wr.Ut, r.ui, this.oi(i));
                    s = s.add(i.path.G());
                    const a = Si(c);
                    n += a - o, e.push(this.Wr.ci(t, i, c));
                } else if (n -= o, this.Qr) {
                    // In order to track removals, we store a "sentinel delete" in the
                    // RemoteDocumentCache. This entry is represented by a NoDocument
                    // with a version of 0 and ignored by `maybeDecodeDocument()` but
                    // preserved in `getNewDocumentChanges()`.
                    const n = ci(this.Wr.Ut, new $t(i, H$1.min()), this.oi(i));
                    e.push(this.Wr.ci(t, i, n));
                } else e.push(this.Wr.hi(t, i));
            })), s.forEach((n => {
                e.push(this.Wr.wi.Bs(t, n));
            })), e.push(this.Wr.updateMetadata(t, n)), As.Mn(e);
        }
        _i(t, e) {
            // Record the size of everything we load from the cache so we can compute a delta later.
            return this.Wr.Fr(t, e).next((t => null === t ? (this.jr.set(e, 0), null) : (this.jr.set(e, t.size), 
            t.ui)));
        }
        fi(t, e) {
            // Record the size of everything we load from the cache so we can compute
            // a delta later.
            return this.Wr.Br(t, e).next((({qr: t, Ur: e}) => (
            // Note: `getAllFromCache` returns two maps instead of a single map from
            // keys to `DocumentSizeEntry`s. This is to allow returning the
            // `NullableMaybeDocumentMap` directly, without a conversion.
            e.forEach(((t, e) => {
                this.jr.set(t, e);
            })), t)));
        }
    }

    function zi(t) {
        return ni(t, js.store);
    }

    /**
     * Helper to get a typed SimpleDbStore for the remoteDocuments object store.
     */ function Hi(t) {
        return ni(t, Ws.store);
    }

    function Ji(t) {
        return t.path.tt();
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Performs database creation and schema upgrades. */ class Yi {
        constructor(t) {
            this.Ut = t;
        }
        /**
         * Performs database creation and schema upgrades.
         *
         * Note that in production, this method is only ever used to upgrade the schema
         * to SCHEMA_VERSION. Different values of toVersion are only used for testing
         * and local feature development.
         */    Hn(t, e, n, s) {
            C(n < s && n >= 0 && s <= 11);
            const i = new Rs("createOrUpgrade", e);
            n < 1 && s >= 1 && (function(t) {
                t.createObjectStore(Ls.store);
            }(t), function(t) {
                t.createObjectStore(Bs.store, {
                    keyPath: Bs.keyPath
                });
                t.createObjectStore(qs.store, {
                    keyPath: qs.keyPath,
                    autoIncrement: !0
                }).createIndex(qs.userMutationsIndex, qs.userMutationsKeyPath, {
                    unique: !0
                }), t.createObjectStore(Us.store);
            }
            /**
     * Upgrade function to migrate the 'mutations' store from V1 to V3. Loads
     * and rewrites all data.
     */ (t), Xi(t), function(t) {
                t.createObjectStore(Ws.store);
            }(t));
            // Migration 2 to populate the targetGlobal object no longer needed since
            // migration 3 unconditionally clears it.
                    let r = As.resolve();
            return n < 3 && s >= 3 && (
            // Brand new clients don't need to drop and recreate--only clients that
            // potentially have corrupt data.
            0 !== n && (!function(t) {
                t.deleteObjectStore(zs.store), t.deleteObjectStore(Gs.store), t.deleteObjectStore(Hs.store);
            }(t), Xi(t)), r = r.next((() => 
            /**
     * Creates the target global singleton row.
     *
     * @param txn - The version upgrade transaction for indexeddb
     */
            function(t) {
                const e = t.store(Hs.store), n = new Hs(
                /*highestTargetId=*/ 0, 
                /*lastListenSequenceNumber=*/ 0, H$1.min().q(), 
                /*targetCount=*/ 0);
                return e.put(Hs.key, n);
            }
            /**
     * Creates indices on the RemoteDocuments store used for both multi-tab
     * and Index-Free queries.
     */ (i)))), n < 4 && s >= 4 && (0 !== n && (
            // Schema version 3 uses auto-generated keys to generate globally unique
            // mutation batch IDs (this was previously ensured internally by the
            // client). To migrate to the new schema, we have to read all mutations
            // and write them back out. We preserve the existing batch IDs to guarantee
            // consistency with other object stores. Any further mutation batch IDs will
            // be auto-generated.
            r = r.next((() => function(t, e) {
                return e.store(qs.store).ss().next((n => {
                    t.deleteObjectStore(qs.store);
                    t.createObjectStore(qs.store, {
                        keyPath: qs.keyPath,
                        autoIncrement: !0
                    }).createIndex(qs.userMutationsIndex, qs.userMutationsKeyPath, {
                        unique: !0
                    });
                    const s = e.store(qs.store), i = n.map((t => s.put(t)));
                    return As.Mn(i);
                }));
            }(t, i)))), r = r.next((() => {
                !function(t) {
                    t.createObjectStore(Ys.store, {
                        keyPath: Ys.keyPath
                    });
                }(t);
            }))), n < 5 && s >= 5 && (r = r.next((() => this.Gr(i)))), n < 6 && s >= 6 && (r = r.next((() => (function(t) {
                t.createObjectStore(js.store);
            }(t), this.zr(i))))), n < 7 && s >= 7 && (r = r.next((() => this.Hr(i)))), n < 8 && s >= 8 && (r = r.next((() => this.Jr(t, i)))), 
            n < 9 && s >= 9 && (r = r.next((() => {
                // Multi-Tab used to manage its own changelog, but this has been moved
                // to the DbRemoteDocument object store itself. Since the previous change
                // log only contained transient data, we can drop its object store.
                !function(t) {
                    t.objectStoreNames.contains("remoteDocumentChanges") && t.deleteObjectStore("remoteDocumentChanges");
                }(t), function(t) {
                    const e = t.objectStore(Ws.store);
                    e.createIndex(Ws.readTimeIndex, Ws.readTimeIndexPath, {
                        unique: !1
                    }), e.createIndex(Ws.collectionReadTimeIndex, Ws.collectionReadTimeIndexPath, {
                        unique: !1
                    });
                }(e);
            }))), n < 10 && s >= 10 && (r = r.next((() => this.Yr(i)))), n < 11 && s >= 11 && (r = r.next((() => {
                !function(t) {
                    t.createObjectStore(Xs.store, {
                        keyPath: Xs.keyPath
                    });
                }(t), function(t) {
                    t.createObjectStore(Zs.store, {
                        keyPath: Zs.keyPath
                    });
                }
                /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ (t);
            }))), r;
        }
        zr(t) {
            let e = 0;
            return t.store(Ws.store).us(((t, n) => {
                e += Si(n);
            })).next((() => {
                const n = new js(e);
                return t.store(js.store).put(js.key, n);
            }));
        }
        Gr(t) {
            const e = t.store(Bs.store), n = t.store(qs.store);
            return e.ss().next((e => As.forEach(e, (e => {
                const s = IDBKeyRange.bound([ e.userId, -1 ], [ e.userId, e.lastAcknowledgedBatchId ]);
                return n.ss(qs.userMutationsIndex, s).next((n => As.forEach(n, (n => {
                    C(n.userId === e.userId);
                    const s = _i(this.Ut, n);
                    return vi(t, e.userId, s).next((() => {}));
                }))));
            }))));
        }
        /**
         * Ensures that every document in the remote document cache has a corresponding sentinel row
         * with a sequence number. Missing rows are given the most recently used sequence number.
         */    Hr(t) {
            const e = t.store(zs.store), n = t.store(Ws.store);
            return t.store(Hs.store).get(Hs.key).next((t => {
                const s = [];
                return n.us(((n, i) => {
                    const r = new Y$1(n), o = function(t) {
                        return [ 0, $s(t) ];
                    }(r);
                    s.push(e.get(o).next((n => n ? As.resolve() : (n => e.put(new zs(0, $s(n), t.highestListenSequenceNumber)))(r))));
                })).next((() => As.Mn(s)));
            }));
        }
        Jr(t, e) {
            // Create the index.
            t.createObjectStore(Js.store, {
                keyPath: Js.keyPath
            });
            const n = e.store(Js.store), s = new Ai, i = t => {
                if (s.add(t)) {
                    const e = t.J(), s = t.G();
                    return n.put({
                        collectionId: e,
                        parent: $s(s)
                    });
                }
            };
            // Helper to add an index entry iff we haven't already written it.
                    // Index existing remote documents.
            return e.store(Ws.store).us({
                cs: !0
            }, ((t, e) => {
                const n = new Y$1(t);
                return i(n.G());
            })).next((() => e.store(Us.store).us({
                cs: !0
            }, (([t, e, n], s) => {
                const r = Ms(e);
                return i(r.G());
            }))));
        }
        Yr(t) {
            const e = t.store(Gs.store);
            return e.us(((t, n) => {
                const s = fi(n), i = di(this.Ut, s);
                return e.put(i);
            }));
        }
    }

    function Xi(t) {
        t.createObjectStore(zs.store, {
            keyPath: zs.keyPath
        }).createIndex(zs.documentTargetsIndex, zs.documentTargetsKeyPath, {
            unique: !0
        });
        // NOTE: This is unique only because the TargetId is the suffix.
        t.createObjectStore(Gs.store, {
            keyPath: Gs.keyPath
        }).createIndex(Gs.queryTargetsIndexName, Gs.queryTargetsKeyPath, {
            unique: !0
        }), t.createObjectStore(Hs.store);
    }

    const Zi = "Failed to obtain exclusive access to the persistence layer. To allow shared access, multi-tab synchronization has to be enabled in all tabs. If you are using `experimentalForceOwningTab:true`, make sure that only one tab has persistence enabled at any given time.";

    /**
     * Oldest acceptable age in milliseconds for client metadata before the client
     * is considered inactive and its associated data is garbage collected.
     */
    /**
     * An IndexedDB-backed instance of Persistence. Data is stored persistently
     * across sessions.
     *
     * On Web only, the Firestore SDKs support shared access to its persistence
     * layer. This allows multiple browser tabs to read and write to IndexedDb and
     * to synchronize state even without network connectivity. Shared access is
     * currently optional and not enabled unless all clients invoke
     * `enablePersistence()` with `{synchronizeTabs:true}`.
     *
     * In multi-tab mode, if multiple clients are active at the same time, the SDK
     * will designate one client as the “primary client”. An effort is made to pick
     * a visible, network-connected and active client, and this client is
     * responsible for letting other clients know about its presence. The primary
     * client writes a unique client-generated identifier (the client ID) to
     * IndexedDb’s “owner” store every 4 seconds. If the primary client fails to
     * update this entry, another client can acquire the lease and take over as
     * primary.
     *
     * Some persistence operations in the SDK are designated as primary-client only
     * operations. This includes the acknowledgment of mutations and all updates of
     * remote documents. The effects of these operations are written to persistence
     * and then broadcast to other tabs via LocalStorage (see
     * `WebStorageSharedClientState`), which then refresh their state from
     * persistence.
     *
     * Similarly, the primary client listens to notifications sent by secondary
     * clients to discover persistence changes written by secondary clients, such as
     * the addition of new mutations and query targets.
     *
     * If multi-tab is not enabled and another tab already obtained the primary
     * lease, IndexedDbPersistence enters a failed state and all subsequent
     * operations will automatically fail.
     *
     * Additionally, there is an optimization so that when a tab is closed, the
     * primary lease is released immediately (this is especially important to make
     * sure that a refreshed tab is able to immediately re-acquire the primary
     * lease). Unfortunately, IndexedDB cannot be reliably used in window.unload
     * since it is an asynchronous API. So in addition to attempting to give up the
     * lease, the leaseholder writes its client ID to a "zombiedClient" entry in
     * LocalStorage which acts as an indicator that another tab should go ahead and
     * take the primary lease immediately regardless of the current lease timestamp.
     *
     * TODO(b/114226234): Remove `synchronizeTabs` section when multi-tab is no
     * longer optional.
     */
    class tr {
        constructor(
        /**
         * Whether to synchronize the in-memory state of multiple tabs and share
         * access to local persistence.
         */
        t, e, n, s, i, r, o, c, a, 
        /**
         * If set to true, forcefully obtains database access. Existing tabs will
         * no longer be able to access IndexedDB.
         */
        u) {
            if (this.allowTabSynchronization = t, this.persistenceKey = e, this.clientId = n, 
            this.Xr = i, this.window = r, this.document = o, this.Zr = a, this.eo = u, this.no = null, 
            this.so = !1, this.isPrimary = !1, this.networkEnabled = !0, 
            /** Our window.unload handler, if registered. */
            this.io = null, this.inForeground = !1, 
            /** Our 'visibilitychange' listener if registered. */
            this.ro = null, 
            /** The client metadata refresh task. */
            this.oo = null, 
            /** The last time we garbage collected the client metadata object store. */
            this.co = Number.NEGATIVE_INFINITY, 
            /** A listener to notify on primary state changes. */
            this.ao = t => Promise.resolve(), !tr.Kn()) throw new $(x$1.UNIMPLEMENTED, "This platform is either missing IndexedDB or is known to have an incomplete implementation. Offline persistence has been disabled.");
            this.Ei = new Qi(this, s), this.uo = e + "main", this.Ut = new ri(c), this.ho = new Ps(this.uo, 11, new Yi(this.Ut)), 
            this.lo = new ki(this.Ei, this.Ut), this.wi = new Ri, this._o = function(t, e) {
                return new ji(t, e);
            }
            /**
     * Returns the set of documents that have changed since the specified read
     * time.
     */
            // PORTING NOTE: This is only used for multi-tab synchronization.
            (this.Ut, this.wi), this.fo = new Ei, this.window && this.window.localStorage ? this.wo = this.window.localStorage : (this.wo = null, 
            !1 === u && b("IndexedDbPersistence", "LocalStorage is unavailable. As a result, persistence may not work reliably. In particular enablePersistence() could fail immediately after refreshing the page."));
        }
        /**
         * Attempt to start IndexedDb persistence.
         *
         * @returns Whether persistence was enabled.
         */    start() {
            // NOTE: This is expected to fail sometimes (in the case of another tab
            // already having the persistence lock), so it's the first thing we should
            // do.
            return this.Eo().then((() => {
                if (!this.isPrimary && !this.allowTabSynchronization) 
                // Fail `start()` if `synchronizeTabs` is disabled and we cannot
                // obtain the primary lease.
                throw new $(x$1.FAILED_PRECONDITION, Zi);
                return this.To(), this.Io(), this.mo(), this.runTransaction("getHighestListenSequenceNumber", "readonly", (t => this.lo.Ki(t)));
            })).then((t => {
                this.no = new U$1(t, this.Zr);
            })).then((() => {
                this.so = !0;
            })).catch((t => (this.ho && this.ho.close(), Promise.reject(t))));
        }
        /**
         * Registers a listener that gets called when the primary state of the
         * instance changes. Upon registering, this listener is invoked immediately
         * with the current primary state.
         *
         * PORTING NOTE: This is only used for Web multi-tab.
         */    Ao(t) {
            return this.ao = async e => {
                if (this.wr) return t(e);
            }, t(this.isPrimary);
        }
        /**
         * Registers a listener that gets called when the database receives a
         * version change event indicating that it has deleted.
         *
         * PORTING NOTE: This is only used for Web multi-tab.
         */    Ro(t) {
            this.ho.Yn((async e => {
                // Check if an attempt is made to delete IndexedDB.
                null === e.newVersion && await t();
            }));
        }
        /**
         * Adjusts the current network state in the client's metadata, potentially
         * affecting the primary lease.
         *
         * PORTING NOTE: This is only used for Web multi-tab.
         */    Po(t) {
            this.networkEnabled !== t && (this.networkEnabled = t, 
            // Schedule a primary lease refresh for immediate execution. The eventual
            // lease update will be propagated via `primaryStateListener`.
            this.Xr.Rs((async () => {
                this.wr && await this.Eo();
            })));
        }
        /**
         * Updates the client metadata in IndexedDb and attempts to either obtain or
         * extend the primary lease for the local client. Asynchronously notifies the
         * primary state listener if the client either newly obtained or released its
         * primary lease.
         */    Eo() {
            return this.runTransaction("updateClientMetadataAndTryBecomePrimary", "readwrite", (t => nr(t).put(new Ys(this.clientId, Date.now(), this.networkEnabled, this.inForeground)).next((() => {
                if (this.isPrimary) return this.Vo(t).next((t => {
                    t || (this.isPrimary = !1, this.Xr.yo((() => this.ao(!1))));
                }));
            })).next((() => this.po(t))).next((e => this.isPrimary && !e ? this.bo(t).next((() => !1)) : !!e && this.vo(t).next((() => !0)))))).catch((t => {
                if (ys(t)) 
                // Proceed with the existing state. Any subsequent access to
                // IndexedDB will verify the lease.
                return p$1("IndexedDbPersistence", "Failed to extend owner lease: ", t), this.isPrimary;
                if (!this.allowTabSynchronization) throw t;
                return p$1("IndexedDbPersistence", "Releasing owner lease after error during lease refresh", t), 
                /* isPrimary= */ !1;
            })).then((t => {
                this.isPrimary !== t && this.Xr.yo((() => this.ao(t))), this.isPrimary = t;
            }));
        }
        Vo(t) {
            return er(t).get(Ls.key).next((t => As.resolve(this.So(t))));
        }
        Do(t) {
            return nr(t).delete(this.clientId);
        }
        /**
         * If the garbage collection threshold has passed, prunes the
         * RemoteDocumentChanges and the ClientMetadata store based on the last update
         * time of all clients.
         */    async Co() {
            if (this.isPrimary && !this.No(this.co, 18e5)) {
                this.co = Date.now();
                const t = await this.runTransaction("maybeGarbageCollectMultiClientState", "readwrite-primary", (t => {
                    const e = ni(t, Ys.store);
                    return e.ss().next((t => {
                        const n = this.xo(t, 18e5), s = t.filter((t => -1 === n.indexOf(t)));
                        // Delete metadata for clients that are no longer considered active.
                        return As.forEach(s, (t => e.delete(t.clientId))).next((() => s));
                    }));
                })).catch((() => []));
                // Delete potential leftover entries that may continue to mark the
                // inactive clients as zombied in LocalStorage.
                // Ideally we'd delete the IndexedDb and LocalStorage zombie entries for
                // the client atomically, but we can't. So we opt to delete the IndexedDb
                // entries first to avoid potentially reviving a zombied client.
                            if (this.wo) for (const e of t) this.wo.removeItem(this.$o(e.clientId));
            }
        }
        /**
         * Schedules a recurring timer to update the client metadata and to either
         * extend or acquire the primary lease if the client is eligible.
         */    mo() {
            this.oo = this.Xr.Er("client_metadata_refresh" /* ClientMetadataRefresh */ , 4e3, (() => this.Eo().then((() => this.Co())).then((() => this.mo()))));
        }
        /** Checks whether `client` is the local client. */    So(t) {
            return !!t && t.ownerId === this.clientId;
        }
        /**
         * Evaluate the state of all active clients and determine whether the local
         * client is or can act as the holder of the primary lease. Returns whether
         * the client is eligible for the lease, but does not actually acquire it.
         * May return 'false' even if there is no active leaseholder and another
         * (foreground) client should become leaseholder instead.
         */    po(t) {
            if (this.eo) return As.resolve(!0);
            return er(t).get(Ls.key).next((e => {
                // A client is eligible for the primary lease if:
                // - its network is enabled and the client's tab is in the foreground.
                // - its network is enabled and no other client's tab is in the
                //   foreground.
                // - every clients network is disabled and the client's tab is in the
                //   foreground.
                // - every clients network is disabled and no other client's tab is in
                //   the foreground.
                // - the `forceOwningTab` setting was passed in.
                if (null !== e && this.No(e.leaseTimestampMs, 5e3) && !this.Oo(e.ownerId)) {
                    if (this.So(e) && this.networkEnabled) return !0;
                    if (!this.So(e)) {
                        if (!e.allowTabSynchronization) 
                        // Fail the `canActAsPrimary` check if the current leaseholder has
                        // not opted into multi-tab synchronization. If this happens at
                        // client startup, we reject the Promise returned by
                        // `enablePersistence()` and the user can continue to use Firestore
                        // with in-memory persistence.
                        // If this fails during a lease refresh, we will instead block the
                        // AsyncQueue from executing further operations. Note that this is
                        // acceptable since mixing & matching different `synchronizeTabs`
                        // settings is not supported.
                        // TODO(b/114226234): Remove this check when `synchronizeTabs` can
                        // no longer be turned off.
                        throw new $(x$1.FAILED_PRECONDITION, Zi);
                        return !1;
                    }
                }
                return !(!this.networkEnabled || !this.inForeground) || nr(t).ss().next((t => void 0 === this.xo(t, 5e3).find((t => {
                    if (this.clientId !== t.clientId) {
                        const e = !this.networkEnabled && t.networkEnabled, n = !this.inForeground && t.inForeground, s = this.networkEnabled === t.networkEnabled;
                        if (e || n && s) return !0;
                    }
                    return !1;
                }))));
            })).next((t => (this.isPrimary !== t && p$1("IndexedDbPersistence", `Client ${t ? "is" : "is not"} eligible for a primary lease.`), 
            t)));
        }
        async ko() {
            // The shutdown() operations are idempotent and can be called even when
            // start() aborted (e.g. because it couldn't acquire the persistence lease).
            this.so = !1, this.Mo(), this.oo && (this.oo.cancel(), this.oo = null), this.Fo(), 
            this.Lo(), 
            // Use `SimpleDb.runTransaction` directly to avoid failing if another tab
            // has obtained the primary lease.
            await this.ho.runTransaction("shutdown", "readwrite", [ Ls.store, Ys.store ], (t => {
                const e = new ei(t, U$1.O);
                return this.bo(e).next((() => this.Do(e)));
            })), this.ho.close(), 
            // Remove the entry marking the client as zombied from LocalStorage since
            // we successfully deleted its metadata from IndexedDb.
            this.Bo();
        }
        /**
         * Returns clients that are not zombied and have an updateTime within the
         * provided threshold.
         */    xo(t, e) {
            return t.filter((t => this.No(t.updateTimeMs, e) && !this.Oo(t.clientId)));
        }
        /**
         * Returns the IDs of the clients that are currently active. If multi-tab
         * is not supported, returns an array that only contains the local client's
         * ID.
         *
         * PORTING NOTE: This is only used for Web multi-tab.
         */    qo() {
            return this.runTransaction("getActiveClients", "readonly", (t => nr(t).ss().next((t => this.xo(t, 18e5).map((t => t.clientId))))));
        }
        get wr() {
            return this.so;
        }
        Uo(t) {
            return Di.Ii(t, this.Ut, this.wi, this.Ei);
        }
        vr() {
            return this.lo;
        }
        Nr() {
            return this._o;
        }
        Ko() {
            return this.wi;
        }
        Qo() {
            return this.fo;
        }
        runTransaction(t, e, n) {
            p$1("IndexedDbPersistence", "Starting transaction:", t);
            const s = "readonly" === e ? "readonly" : "readwrite";
            let i;
            // Do all transactions as readwrite against all object stores, since we
            // are the only reader/writer.
                    return this.ho.runTransaction(t, s, ti, (s => (i = new ei(s, this.no ? this.no.next() : U$1.O), 
            "readwrite-primary" === e ? this.Vo(i).next((t => !!t || this.po(i))).next((e => {
                if (!e) throw b(`Failed to obtain primary lease for action '${t}'.`), this.isPrimary = !1, 
                this.Xr.yo((() => this.ao(!1))), new $(x$1.FAILED_PRECONDITION, Ns);
                return n(i);
            })).next((t => this.vo(i).next((() => t)))) : this.Wo(i).next((() => n(i)))))).then((t => (i.gs(), 
            t)));
        }
        /**
         * Verifies that the current tab is the primary leaseholder or alternatively
         * that the leaseholder has opted into multi-tab synchronization.
         */
        // TODO(b/114226234): Remove this check when `synchronizeTabs` can no longer
        // be turned off.
        Wo(t) {
            return er(t).get(Ls.key).next((t => {
                if (null !== t && this.No(t.leaseTimestampMs, 5e3) && !this.Oo(t.ownerId) && !this.So(t) && !(this.eo || this.allowTabSynchronization && t.allowTabSynchronization)) throw new $(x$1.FAILED_PRECONDITION, Zi);
            }));
        }
        /**
         * Obtains or extends the new primary lease for the local client. This
         * method does not verify that the client is eligible for this lease.
         */    vo(t) {
            const e = new Ls(this.clientId, this.allowTabSynchronization, Date.now());
            return er(t).put(Ls.key, e);
        }
        static Kn() {
            return Ps.Kn();
        }
        /** Checks the primary lease and removes it if we are the current primary. */    bo(t) {
            const e = er(t);
            return e.get(Ls.key).next((t => this.So(t) ? (p$1("IndexedDbPersistence", "Releasing primary lease."), 
            e.delete(Ls.key)) : As.resolve()));
        }
        /** Verifies that `updateTimeMs` is within `maxAgeMs`. */    No(t, e) {
            const n = Date.now();
            return !(t < n - e) && (!(t > n) || (b(`Detected an update time that is in the future: ${t} > ${n}`), 
            !1));
        }
        To() {
            null !== this.document && "function" == typeof this.document.addEventListener && (this.ro = () => {
                this.Xr.Rs((() => (this.inForeground = "visible" === this.document.visibilityState, 
                this.Eo())));
            }, this.document.addEventListener("visibilitychange", this.ro), this.inForeground = "visible" === this.document.visibilityState);
        }
        Fo() {
            this.ro && (this.document.removeEventListener("visibilitychange", this.ro), this.ro = null);
        }
        /**
         * Attaches a window.unload handler that will synchronously write our
         * clientId to a "zombie client id" location in LocalStorage. This can be used
         * by tabs trying to acquire the primary lease to determine that the lease
         * is no longer valid even if the timestamp is recent. This is particularly
         * important for the refresh case (so the tab correctly re-acquires the
         * primary lease). LocalStorage is used for this rather than IndexedDb because
         * it is a synchronous API and so can be used reliably from  an unload
         * handler.
         */    Io() {
            var t;
            "function" == typeof (null === (t = this.window) || void 0 === t ? void 0 : t.addEventListener) && (this.io = () => {
                // Note: In theory, this should be scheduled on the AsyncQueue since it
                // accesses internal state. We execute this code directly during shutdown
                // to make sure it gets a chance to run.
                this.Mo(), this.Xr.Rs((() => this.ko()));
            }, this.window.addEventListener("unload", this.io));
        }
        Lo() {
            this.io && (this.window.removeEventListener("unload", this.io), this.io = null);
        }
        /**
         * Returns whether a client is "zombied" based on its LocalStorage entry.
         * Clients become zombied when their tab closes without running all of the
         * cleanup logic in `shutdown()`.
         */    Oo(t) {
            var e;
            try {
                const n = null !== (null === (e = this.wo) || void 0 === e ? void 0 : e.getItem(this.$o(t)));
                return p$1("IndexedDbPersistence", `Client '${t}' ${n ? "is" : "is not"} zombied in LocalStorage`), 
                n;
            } catch (t) {
                // Gracefully handle if LocalStorage isn't working.
                return b("IndexedDbPersistence", "Failed to get zombied client id.", t), !1;
            }
        }
        /**
         * Record client as zombied (a client that had its tab closed). Zombied
         * clients are ignored during primary tab selection.
         */    Mo() {
            if (this.wo) try {
                this.wo.setItem(this.$o(this.clientId), String(Date.now()));
            } catch (t) {
                // Gracefully handle if LocalStorage isn't available / working.
                b("Failed to set zombie client id.", t);
            }
        }
        /** Removes the zombied client entry if it exists. */    Bo() {
            if (this.wo) try {
                this.wo.removeItem(this.$o(this.clientId));
            } catch (t) {
                // Ignore
            }
        }
        $o(t) {
            return `firestore_zombie_${this.persistenceKey}_${t}`;
        }
    }

    /**
     * Helper to get a typed SimpleDbStore for the primary client object store.
     */ function er(t) {
        return ni(t, Ls.store);
    }

    /**
     * Helper to get a typed SimpleDbStore for the client metadata object store.
     */ function nr(t) {
        return ni(t, Ys.store);
    }

    /**
     * Generates a string used as a prefix when storing data in IndexedDB and
     * LocalStorage.
     */ function sr(t, e) {
        // Use two different prefix formats:
        //   * firestore / persistenceKey / projectID . databaseID / ...
        //   * firestore / persistenceKey / projectID / ...
        // projectIDs are DNS-compatible names and cannot contain dots
        // so there's no danger of collisions.
        let n = t.projectId;
        return t.S || (n += "." + t.database), "firestore/" + e + "/" + n + "/";
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class ir {
        constructor(t, e) {
            this.progress = t, this.jo = e;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A readonly view of the local state of all documents we're tracking (i.e. we
     * have a cached version in remoteDocumentCache or local mutations for the
     * document). The view is computed by applying the mutations in the
     * MutationQueue to the RemoteDocumentCache.
     */ class rr {
        constructor(t, e, n) {
            this._o = t, this.Go = e, this.wi = n;
        }
        /**
         * Get the local view of the document identified by `key`.
         *
         * @returns Local view of the document or null if we don't have any cached
         * state for it.
         */    zo(t, e) {
            return this.Go.pi(t, e).next((n => this.Ho(t, e, n)));
        }
        /** Internal version of `getDocument` that allows reusing batches. */    Ho(t, e, n) {
            return this._o.li(t, e).next((t => {
                for (const s of n) t = s.Ds(e, t);
                return t;
            }));
        }
        // Returns the view of the given `docs` as they would appear after applying
        // all mutations in the given `batches`.
        Jo(t, e, n) {
            let s = wn();
            return e.forEach(((t, e) => {
                for (const s of n) e = s.Ds(t, e);
                s = s.Gt(t, e);
            })), s;
        }
        /**
         * Gets the local view of the documents identified by `keys`.
         *
         * If we don't have cached state for a document in `keys`, a NoDocument will
         * be stored for that key in the resulting set.
         */    Yo(t, e) {
            return this._o.getEntries(t, e).next((e => this.Xo(t, e)));
        }
        /**
         * Similar to `getDocuments`, but creates the local view from the given
         * `baseDocs` without retrieving documents from the local store.
         */    Xo(t, e) {
            return this.Go.bi(t, e).next((n => {
                const s = this.Jo(t, e, n);
                let i = dn();
                return s.forEach(((t, e) => {
                    // TODO(http://b/32275378): Don't conflate missing / deleted.
                    e || (e = new $t(t, H$1.min())), i = i.Gt(t, e);
                })), i;
            }));
        }
        /**
         * Performs a query against the local view of all documents.
         *
         * @param transaction - The persistence transaction.
         * @param query - The query to match documents against.
         * @param sinceReadTime - If not set to SnapshotVersion.min(), return only
         *     documents that have been read since this snapshot version (exclusive).
         */    Kr(t, e, n) {
            /**
     * Returns whether the query matches a single document by path (rather than a
     * collection).
     */
            return function(t) {
                return tt.lt(t.path) && null === t.collectionGroup && 0 === t.filters.length;
            }(e) ? this.Zo(t, e.path) : le(e) ? this.tc(t, e, n) : this.ec(t, e, n);
        }
        Zo(t, e) {
            // Just do a simple document lookup.
            return this.zo(t, new tt(e)).next((t => {
                let e = Tn();
                return t instanceof xt && (e = e.Gt(t.key, t)), e;
            }));
        }
        tc(t, e, n) {
            const s = e.collectionGroup;
            let i = Tn();
            return this.wi.qs(t, s).next((r => As.forEach(r, (r => {
                const o = function(t, e) {
                    return new ie(e, 
                    /*collectionGroup=*/ null, t.Ct.slice(), t.filters.slice(), t.limit, t.limitType, t.startAt, t.endAt);
                }
                /**
     * Returns true if this query does not specify any query constraints that
     * could remove results.
     */ (e, r.child(s));
                return this.ec(t, o, n).next((t => {
                    t.forEach(((t, e) => {
                        i = i.Gt(t, e);
                    }));
                }));
            })).next((() => i))));
        }
        ec(t, e, n) {
            // Query the remote documents and overlay mutations.
            let s, i;
            return this._o.Kr(t, e, n).next((n => (s = n, this.Go.Si(t, e)))).next((e => (i = e, 
            this.nc(t, i, s).next((t => {
                s = t;
                for (const t of i) for (const e of t.mutations) {
                    const n = e.key, i = Qe(e, s.get(n), t.bs);
                    s = i instanceof xt ? s.Gt(n, i) : s.remove(n);
                }
            }))))).next((() => (
            // Finally, filter out any documents that don't actually match
            // the query.
            s.forEach(((t, n) => {
                Ie(e, n) || (s = s.remove(t));
            })), s)));
        }
        nc(t, e, n) {
            let s = Rn();
            for (const t of e) for (const e of t.mutations) e instanceof He && null === n.get(e.key) && (s = s.add(e.key));
            let i = n;
            return this._o.getEntries(t, s).next((t => (t.forEach(((t, e) => {
                null !== e && e instanceof xt && (i = i.Gt(t, e));
            })), i)));
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A set of changes to what documents are currently in view and out of view for
     * a given query. These changes are sent to the LocalStore by the View (via
     * the SyncEngine) and are used to pin / unpin documents as appropriate.
     */ class or {
        constructor(t, e, n, s) {
            this.targetId = t, this.fromCache = e, this.sc = n, this.ic = s;
        }
        static rc(t, e) {
            let n = Rn(), s = Rn();
            for (const t of e.docChanges) switch (t.type) {
              case 0 /* Added */ :
                n = n.add(t.doc.key);
                break;

              case 1 /* Removed */ :
                s = s.add(t.doc.key);
     // do nothing
                    }
            return new or(t, e.fromCache, n, s);
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A query engine that takes advantage of the target document mapping in the
     * QueryCache. Query execution is optimized by only reading the documents that
     * previously matched a query plus any documents that were edited after the
     * query was last listened to.
     *
     * There are some cases when this optimization is not guaranteed to produce
     * the same results as full collection scans. In these cases, query
     * processing falls back to full scans. These cases are:
     *
     * - Limit queries where a document that matched the query previously no longer
     *   matches the query.
     *
     * - Limit queries where a document edit may cause the document to sort below
     *   another document that is in the local cache.
     *
     * - Queries that have never been CURRENT or free of limbo documents.
     */ class cr {
        /** Sets the document view to query against. */
        oc(t) {
            this.cc = t;
        }
        /** Returns all local documents matching the specified query. */    Kr(t, e, n, s) {
            // Queries that match all documents don't benefit from using
            // key-based lookups. It is more efficient to scan all documents in a
            // collection, rather than to perform individual lookups.
            return function(t) {
                return 0 === t.filters.length && null === t.limit && null == t.startAt && null == t.endAt && (0 === t.Ct.length || 1 === t.Ct.length && t.Ct[0].field.rt());
            }(e) || n.isEqual(H$1.min()) ? this.ac(t, e) : this.cc.Yo(t, s).next((i => {
                const r = this.uc(e, i);
                return (ce(e) || ae(e)) && this.hc(e.limitType, r, s, n) ? this.ac(t, e) : (g() <= LogLevel.DEBUG && p$1("QueryEngine", "Re-using previous result from %s to execute query: %s", n.toString(), Te(e)), 
                this.cc.Kr(t, e, n).next((t => (
                // We merge `previousResults` into `updateResults`, since
                // `updateResults` is already a DocumentMap. If a document is
                // contained in both lists, then its contents are the same.
                r.forEach((e => {
                    t = t.Gt(e.key, e);
                })), t))));
            }));
            // Queries that have never seen a snapshot without limbo free documents
            // should also be run as a full collection scan.
            }
        /** Applies the query filter and sorting to the provided documents.  */    uc(t, e) {
            // Sort the documents and re-apply the query filter since previously
            // matching documents do not necessarily still match the query.
            let n = new ln(me(t));
            return e.forEach(((e, s) => {
                s instanceof xt && Ie(t, s) && (n = n.add(s));
            })), n;
        }
        /**
         * Determines if a limit query needs to be refilled from cache, making it
         * ineligible for index-free execution.
         *
         * @param sortedPreviousResults - The documents that matched the query when it
         * was last synchronized, sorted by the query's comparator.
         * @param remoteKeys - The document keys that matched the query at the last
         * snapshot.
         * @param limboFreeSnapshotVersion - The version of the snapshot when the
         * query was last synchronized.
         */    hc(t, e, n, s) {
            // The query needs to be refilled if a previously matching document no
            // longer matches.
            if (n.size !== e.size) return !0;
            // Limit queries are not eligible for index-free query execution if there is
            // a potential that an older document from cache now sorts before a document
            // that was previously part of the limit. This, however, can only happen if
            // the document at the edge of the limit goes out of limit.
            // If a document that is not the limit boundary sorts differently,
            // the boundary of the limit itself did not change and documents from cache
            // will continue to be "rejected" by this boundary. Therefore, we can ignore
            // any modifications that don't affect the last document.
                    const i = "F" /* First */ === t ? e.last() : e.first();
            return !!i && (i.hasPendingWrites || i.version.L(s) > 0);
        }
        ac(t, e) {
            return g() <= LogLevel.DEBUG && p$1("QueryEngine", "Using full collection scan to execute query:", Te(e)), 
            this.cc.Kr(t, e, H$1.min());
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Implements `LocalStore` interface.
     *
     * Note: some field defined in this class might have public access level, but
     * the class is not exported so they are only accessible from this module.
     * This is useful to implement optional features (like bundles) in free
     * functions, such that they are tree-shakeable.
     */
    class ar {
        constructor(
        /** Manages our in-memory or durable persistence. */
        t, e, n, s) {
            this.persistence = t, this.lc = e, this.Ut = s, 
            /**
             * Maps a targetID to data about its target.
             *
             * PORTING NOTE: We are using an immutable data structure on Web to make re-runs
             * of `applyRemoteEvent()` idempotent.
             */
            this._c = new an(W$1), 
            /** Maps a target to its targetID. */
            // TODO(wuandy): Evaluate if TargetId can be part of Target.
            this.fc = new pi((t => Ft(t)), Bt), 
            /**
             * The read time of the last entry processed by `getNewDocumentChanges()`.
             *
             * PORTING NOTE: This is only used for multi-tab synchronization.
             */
            this.dc = H$1.min(), this.Go = t.Uo(n), this.wc = t.Nr(), this.lo = t.vr(), this.Ec = new rr(this.wc, this.Go, this.persistence.Ko()), 
            this.fo = t.Qo(), this.lc.oc(this.Ec);
        }
        Tr(t) {
            return this.persistence.runTransaction("Collect garbage", "readwrite-primary", (e => t.gr(e, this._c)));
        }
    }

    function ur(
    /** Manages our in-memory or durable persistence. */
    t, e, n, s) {
        return new ar(t, e, n, s);
    }

    /**
     * Tells the LocalStore that the currently authenticated user has changed.
     *
     * In response the local store switches the mutation queue to the new user and
     * returns any resulting document changes.
     */
    // PORTING NOTE: Android and iOS only return the documents affected by the
    // change.
    async function hr(t, e) {
        const n = N$1(t);
        let s = n.Go, i = n.Ec;
        const r = await n.persistence.runTransaction("Handle user change", "readonly", (t => {
            // Swap out the mutation queue, grabbing the pending mutation batches
            // before and after.
            let r;
            return n.Go.yi(t).next((o => (r = o, s = n.persistence.Uo(e), 
            // Recreate our LocalDocumentsView using the new
            // MutationQueue.
            i = new rr(n.wc, s, n.persistence.Ko()), s.yi(t)))).next((e => {
                const n = [], s = [];
                // Union the old/new changed keys.
                let o = Rn();
                for (const t of r) {
                    n.push(t.batchId);
                    for (const e of t.mutations) o = o.add(e.key);
                }
                for (const t of e) {
                    s.push(t.batchId);
                    for (const e of t.mutations) o = o.add(e.key);
                }
                // Return the set of all (potentially) changed documents and the list
                // of mutation batch IDs that were affected by change.
                            return i.Yo(t, o).next((t => ({
                    Tc: t,
                    Ic: n,
                    mc: s
                })));
            }));
        }));
        return n.Go = s, n.Ec = i, n.lc.oc(n.Ec), r;
    }

    /* Accepts locally generated Mutations and commit them to storage. */
    /**
     * Acknowledges the given batch.
     *
     * On the happy path when a batch is acknowledged, the local store will
     *
     *  + remove the batch from the mutation queue;
     *  + apply the changes to the remote document cache;
     *  + recalculate the latency compensated view implied by those changes (there
     *    may be mutations in the queue that affect the documents but haven't been
     *    acknowledged yet); and
     *  + give the changed documents back the sync engine
     *
     * @returns The resulting (modified) documents.
     */
    function lr(t, e) {
        const n = N$1(t);
        return n.persistence.runTransaction("Acknowledge batch", "readwrite-primary", (t => {
            const s = e.batch.keys(), i = n.wc.Cr({
                Qr: !0
            });
            return function(t, e, n, s) {
                const i = n.batch, r = i.keys();
                let o = As.resolve();
                return r.forEach((t => {
                    o = o.next((() => s.li(e, t))).next((e => {
                        let r = e;
                        const o = n.xs.get(t);
                        C(null !== o), (!r || r.version.L(o) < 0) && (r = i.vs(t, r, n), r && 
                        // We use the commitVersion as the readTime rather than the
                        // document's updateTime since the updateTime is not advanced
                        // for updates that do not modify the underlying document.
                        s.ci(r, n.Ns));
                    }));
                })), o.next((() => t.Go.Di(e, i)));
            }
            /** Returns the local view of the documents affected by a mutation batch. */
            // PORTING NOTE: Multi-Tab only.
            (n, t, e, i).next((() => i.apply(t))).next((() => n.Go.xi(t))).next((() => n.Ec.Yo(t, s)));
        }));
    }

    /**
     * Removes mutations from the MutationQueue for the specified batch;
     * LocalDocuments will be recalculated.
     *
     * @returns The resulting modified documents.
     */
    /**
     * Returns the last consistent snapshot processed (used by the RemoteStore to
     * determine whether to buffer incoming snapshots from the backend).
     */
    function _r(t) {
        const e = N$1(t);
        return e.persistence.runTransaction("Get last remote snapshot version", "readonly", (t => e.lo.Ui(t)));
    }

    /**
     * Updates the "ground-state" (remote) documents. We assume that the remote
     * event reflects any write batches that have been acknowledged or rejected
     * (i.e. we do not re-apply local mutations to updates from this event).
     *
     * LocalDocuments are re-calculated if there are remaining mutations in the
     * queue.
     */ function fr(t, e) {
        const n = N$1(t), s = e.Ot;
        let i = n._c;
        return n.persistence.runTransaction("Apply remote event", "readwrite-primary", (t => {
            const r = n.wc.Cr({
                Qr: !0
            });
            // Reset newTargetDataByTargetMap in case this transaction gets re-run.
                    i = n._c;
            const o = [];
            e.xe.forEach(((e, r) => {
                const c = i.get(r);
                if (!c) return;
                // Only update the remote keys if the target is still active. This
                // ensures that we can persist the updated target data along with
                // the updated assignment.
                            o.push(n.lo.nr(t, e.Ue, r).next((() => n.lo.tr(t, e.Be, r))));
                const a = e.resumeToken;
                // Update the resume token if the change includes one.
                            if (a.wt() > 0) {
                    const u = c.Mt(a, s).kt(t.ps);
                    i = i.Gt(r, u), 
                    // Update the target data if there are target changes (or if
                    // sufficient time has passed since the last update).
                    /**
     * Returns true if the newTargetData should be persisted during an update of
     * an active target. TargetData should always be persisted when a target is
     * being released and should not call this function.
     *
     * While the target is active, TargetData updates can be omitted when nothing
     * about the target has changed except metadata like the resume token or
     * snapshot version. Occasionally it's worth the extra write to prevent these
     * values from getting too stale after a crash, but this doesn't have to be
     * too frequent.
     */
                    function(t, e, n) {
                        // Always persist target data if we don't already have a resume token.
                        if (C(e.resumeToken.wt() > 0), 0 === t.resumeToken.wt()) return !0;
                        // Don't allow resume token changes to be buffered indefinitely. This
                        // allows us to be reasonably up-to-date after a crash and avoids needing
                        // to loop over all active queries on shutdown. Especially in the browser
                        // we may not get time to do anything interesting while the current tab is
                        // closing.
                                            if (e.Ot.B() - t.Ot.B() >= 3e8) return !0;
                        // Otherwise if the only thing that has changed about a target is its resume
                        // token it's not worth persisting. Note that the RemoteStore keeps an
                        // in-memory view of the currently active targets which includes the current
                        // resume token, so stream failure or user changes will still use an
                        // up-to-date resume token regardless of what we do here.
                                            return n.Be.size + n.qe.size + n.Ue.size > 0;
                    }
                    /**
     * Notifies local store of the changed views to locally pin documents.
     */ (c, u, e) && o.push(n.lo.zi(t, u));
                }
            }));
            let c = dn();
            // HACK: The only reason we allow a null snapshot version is so that we
            // can synthesize remote events when we get permission denied errors while
            // trying to resolve the state of a locally cached document that is in
            // limbo.
            if (e.Oe.forEach(((s, i) => {
                e.ke.has(s) && o.push(n.persistence.Ei.$r(t, s));
            })), 
            // Each loop iteration only affects its "own" doc, so it's safe to get all the remote
            // documents in advance in a single call.
            o.push(dr(t, r, e.Oe, s, void 0).next((t => {
                c = t;
            }))), !s.isEqual(H$1.min())) {
                const e = n.lo.Ui(t).next((e => n.lo.Qi(t, t.ps, s)));
                o.push(e);
            }
            return As.Mn(o).next((() => r.apply(t))).next((() => n.Ec.Xo(t, c)));
        })).then((t => (n._c = i, t)));
    }

    /**
     * Populates document change buffer with documents from backend or a bundle.
     * Returns the document changes resulting from applying those documents.
     *
     * @param txn - Transaction to use to read existing documents from storage.
     * @param documentBuffer - Document buffer to collect the resulted changes to be
     *        applied to storage.
     * @param documents - Documents to be applied.
     * @param globalVersion - A `SnapshotVersion` representing the read time if all
     *        documents have the same read time.
     * @param documentVersions - A DocumentKey-to-SnapshotVersion map if documents
     *        have their own read time.
     *
     * Note: this function will use `documentVersions` if it is defined;
     * when it is not defined, resorts to `globalVersion`.
     */ function dr(t, e, n, s, 
    // TODO(wuandy): We could add `readTime` to MaybeDocument instead to remove
    // this parameter.
    i) {
        let r = Rn();
        return n.forEach((t => r = r.add(t))), e.getEntries(t, r).next((t => {
            let r = dn();
            return n.forEach(((n, o) => {
                const c = t.get(n), a = (null == i ? void 0 : i.get(n)) || s;
                // Note: The order of the steps below is important, since we want
                // to ensure that rejected limbo resolutions (which fabricate
                // NoDocuments with SnapshotVersion.min()) never add documents to
                // cache.
                o instanceof $t && o.version.isEqual(H$1.min()) ? (
                // NoDocuments with SnapshotVersion.min() are used in manufactured
                // events. We remove these documents from cache since we lost
                // access.
                e.hi(n, a), r = r.Gt(n, o)) : null == c || o.version.L(c.version) > 0 || 0 === o.version.L(c.version) && c.hasPendingWrites ? (e.ci(o, a), 
                r = r.Gt(n, o)) : p$1("LocalStore", "Ignoring outdated watch update for ", n, ". Current version:", c.version, " Watch version:", o.version);
            })), r;
        }));
    }

    /**
     * Gets the mutation batch after the passed in batchId in the mutation queue
     * or null if empty.
     * @param afterBatchId - If provided, the batch to search after.
     * @returns The next mutation or null if there wasn't one.
     */
    function wr(t, e) {
        const n = N$1(t);
        return n.persistence.runTransaction("Get next mutation batch", "readonly", (t => (void 0 === e && (e = -1), 
        n.Go.Vi(t, e))));
    }

    /**
     * Reads the current value of a Document with a given key or null if not
     * found - used for testing.
     */
    /**
     * Assigns the given target an internal ID so that its results can be pinned so
     * they don't get GC'd. A target must be allocated in the local store before
     * the store can be used to manage its view.
     *
     * Allocating an already allocated `Target` will return the existing `TargetData`
     * for that `Target`.
     */
    function Er(t, e) {
        const n = N$1(t);
        return n.persistence.runTransaction("Allocate target", "readwrite", (t => {
            let s;
            return n.lo.Zi(t, e).next((i => i ? (
            // This target has been listened to previously, so reuse the
            // previous targetID.
            // TODO(mcg): freshen last accessed date?
            s = i, As.resolve(s)) : n.lo.Li(t).next((i => (s = new Re(e, i, 0 /* Listen */ , t.ps), 
            n.lo.Wi(t, s).next((() => s)))))));
        })).then((t => {
            // If Multi-Tab is enabled, the existing target data may be newer than
            // the in-memory data
            const s = n._c.get(t.targetId);
            return (null === s || t.Ot.L(s.Ot) > 0) && (n._c = n._c.Gt(t.targetId, t), n.fc.set(e, t.targetId)), 
            t;
        }));
    }

    /**
     * Returns the TargetData as seen by the LocalStore, including updates that may
     * have not yet been persisted to the TargetCache.
     */
    // Visible for testing.
    /**
     * Unpins all the documents associated with the given target. If
     * `keepPersistedTargetData` is set to false and Eager GC enabled, the method
     * directly removes the associated target data from the target cache.
     *
     * Releasing a non-existing `Target` is a no-op.
     */
    // PORTING NOTE: `keepPersistedTargetData` is multi-tab only.
    async function Tr(t, e, n) {
        const s = N$1(t), i = s._c.get(e), r = n ? "readwrite" : "readwrite-primary";
        try {
            n || await s.persistence.runTransaction("Release target", r, (t => s.persistence.Ei.removeTarget(t, i)));
        } catch (t) {
            if (!ys(t)) throw t;
            // All `releaseTarget` does is record the final metadata state for the
            // target, but we've been recording this periodically during target
            // activity. If we lose this write this could cause a very slight
            // difference in the order of target deletion during GC, but we
            // don't define exact LRU semantics so this is acceptable.
            p$1("LocalStore", `Failed to update sequence numbers for target ${e}: ${t}`);
        }
        s._c = s._c.remove(e), s.fc.delete(i.target);
    }

    /**
     * Runs the specified query against the local store and returns the results,
     * potentially taking advantage of query data from previous executions (such
     * as the set of remote keys).
     *
     * @param usePreviousResults - Whether results from previous executions can
     * be used to optimize this query execution.
     */ function Ir(t, e, n) {
        const s = N$1(t);
        let i = H$1.min(), r = Rn();
        return s.persistence.runTransaction("Execute query", "readonly", (t => function(t, e, n) {
            const s = N$1(t), i = s.fc.get(n);
            return void 0 !== i ? As.resolve(s._c.get(i)) : s.lo.Zi(e, n);
        }(s, t, fe(e)).next((e => {
            if (e) return i = e.lastLimboFreeSnapshotVersion, s.lo.ir(t, e.targetId).next((t => {
                r = t;
            }));
        })).next((() => s.lc.Kr(t, e, n ? i : H$1.min(), n ? r : Rn()))).next((t => ({
            documents: t,
            Ac: r
        })))));
    }

    // PORTING NOTE: Multi-Tab only.
    function mr(t, e) {
        const n = N$1(t), s = N$1(n.lo), i = n._c.get(e);
        return i ? Promise.resolve(i.target) : n.persistence.runTransaction("Get target data", "readonly", (t => s.vn(t, e).next((t => t ? t.target : null))));
    }

    /**
     * Returns the set of documents that have been updated since the last call.
     * If this is the first call, returns the set of changes since client
     * initialization. Further invocations will return document that have changed
     * since the prior call.
     */
    // PORTING NOTE: Multi-Tab only.
    function Ar(t) {
        const e = N$1(t);
        return e.persistence.runTransaction("Get new document changes", "readonly", (t => function(t, e, n) {
            const s = N$1(t);
            let i = dn(), r = ai(n);
            const o = Hi(e), c = IDBKeyRange.lowerBound(r, !0);
            return o.us({
                index: Ws.readTimeIndex,
                range: c
            }, ((t, e) => {
                // Unlike `getEntry()` and others, `getNewDocumentChanges()` parses
                // the documents directly since we want to keep sentinel deletes.
                const n = oi(s.Ut, e);
                i = i.Gt(n.key, n), r = e.readTime;
            })).next((() => ({
                jo: i,
                readTime: ui(r)
            })));
        }
        /**
     * Returns the read time of the most recently read document in the cache, or
     * SnapshotVersion.min() if not available.
     */
        // PORTING NOTE: This is only used for multi-tab synchronization.
        (e.wc, t, e.dc))).then((({jo: t, readTime: n}) => (e.dc = n, t)));
    }

    /**
     * Reads the newest document change from persistence and moves the internal
     * synchronization marker forward so that calls to `getNewDocumentChanges()`
     * only return changes that happened after client initialization.
     */
    // PORTING NOTE: Multi-Tab only.
    async function Rr(t) {
        const e = N$1(t);
        return e.persistence.runTransaction("Synchronize last document change read time", "readonly", (t => function(t) {
            const e = Hi(t);
            // If there are no existing entries, we return SnapshotVersion.min().
                    let n = H$1.min();
            return e.us({
                index: Ws.readTimeIndex,
                reverse: !0
            }, ((t, e, s) => {
                e.readTime && (n = ui(e.readTime)), s.done();
            })).next((() => n));
        }(t))).then((t => {
            e.dc = t;
        }));
    }

    /**
     * Creates a new target using the given bundle name, which will be used to
     * hold the keys of all documents from the bundle in query-document mappings.
     * This ensures that the loaded documents do not get garbage collected
     * right away.
     */
    /**
     * Applies the documents from a bundle to the "ground-state" (remote)
     * documents.
     *
     * LocalDocuments are re-calculated if there are remaining mutations in the
     * queue.
     */
    async function Pr(t, e, n, s) {
        const i = N$1(t);
        let r = Rn(), o = dn(), c = mn();
        for (const t of n) {
            const n = e.Rc(t.metadata.name);
            t.document && (r = r.add(n)), o = o.Gt(n, e.Pc(t)), c = c.Gt(n, e.Vc(t.metadata.readTime));
        }
        const a = i.wc.Cr({
            Qr: !0
        }), u = await Er(i, function(t) {
            // It is OK that the path used for the query is not valid, because this will
            // not be read and queried.
            return fe(oe(Y$1.nt(`__bundle__/docs/${t}`)));
        }(s));
        // Allocates a target to hold all document keys from the bundle, such that
        // they will not get garbage collected right away.
            return i.persistence.runTransaction("Apply bundle documents", "readwrite", (t => dr(t, a, o, H$1.min(), c).next((e => (a.apply(t), 
        e))).next((e => i.lo.Ji(t, u.targetId).next((() => i.lo.tr(t, r, u.targetId))).next((() => i.Ec.Xo(t, e)))))));
    }

    /**
     * Returns a promise of a boolean to indicate if the given bundle has already
     * been loaded and the create time is newer than the current loading bundle.
     */
    /**
     * Saves the given `NamedQuery` to local persistence.
     */
    async function Vr(t, e, n = Rn()) {
        // Allocate a target for the named query such that it can be resumed
        // from associated read time if users use it to listen.
        // NOTE: this also means if no corresponding target exists, the new target
        // will remain active and will not get collected, unless users happen to
        // unlisten the query somehow.
        const s = await Er(t, fe(wi(e.bundledQuery))), i = N$1(t);
        return i.persistence.runTransaction("Save named query", "readwrite", (t => {
            const r = Un(e.readTime);
            // Simply save the query itself if it is older than what the SDK already
            // has.
                    if (s.Ot.L(r) >= 0) return i.fo.Fs(t, e);
            // Update existing target data because the query from the bundle is newer.
                    const o = s.Mt(rt.Et, r);
            return i._c = i._c.Gt(o.targetId, o), i.lo.zi(t, o).next((() => i.lo.Ji(t, s.targetId))).next((() => i.lo.tr(t, n, s.targetId))).next((() => i.fo.Fs(t, e)));
        }));
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class gr {
        constructor(t) {
            this.Ut = t, this.gc = new Map, this.yc = new Map;
        }
        Os(t, e) {
            return As.resolve(this.gc.get(e));
        }
        ks(t, e) {
            /** Decodes a BundleMetadata proto into a BundleMetadata object. */
            var n;
            return this.gc.set(e.id, {
                id: (n = e).id,
                version: n.version,
                createTime: Un(n.createTime)
            }), As.resolve();
        }
        Ms(t, e) {
            return As.resolve(this.yc.get(e));
        }
        Fs(t, e) {
            return this.yc.set(e.name, function(t) {
                return {
                    name: t.name,
                    query: wi(t.bundledQuery),
                    readTime: Un(t.readTime)
                };
            }(e)), As.resolve();
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A collection of references to a document from some kind of numbered entity
     * (either a target ID or batch ID). As references are added to or removed from
     * the set corresponding events are emitted to a registered garbage collector.
     *
     * Each reference is represented by a DocumentReference object. Each of them
     * contains enough information to uniquely identify the reference. They are all
     * stored primarily in a set sorted by key. A document is considered garbage if
     * there's no references in that set (this can be efficiently checked thanks to
     * sorting by key).
     *
     * ReferenceSet also keeps a secondary set that contains references sorted by
     * IDs. This one is used to efficiently implement removal of all references by
     * some target ID.
     */ class yr {
        constructor() {
            // A set of outstanding references to a document sorted by key.
            this.bc = new ln(pr.vc), 
            // A set of outstanding references to a document sorted by target id.
            this.Sc = new ln(pr.Dc);
        }
        /** Returns true if the reference set contains no references. */    Y() {
            return this.bc.Y();
        }
        /** Adds a reference to the given document key for the given ID. */    er(t, e) {
            const n = new pr(t, e);
            this.bc = this.bc.add(n), this.Sc = this.Sc.add(n);
        }
        /** Add references to the given document keys for the given ID. */    Cc(t, e) {
            t.forEach((t => this.er(t, e)));
        }
        /**
         * Removes a reference to the given document key for the given
         * ID.
         */    sr(t, e) {
            this.Nc(new pr(t, e));
        }
        xc(t, e) {
            t.forEach((t => this.sr(t, e)));
        }
        /**
         * Clears all references with a given ID. Calls removeRef() for each key
         * removed.
         */    $c(t) {
            const e = new tt(new Y$1([])), n = new pr(e, t), s = new pr(e, t + 1), i = [];
            return this.Sc.Ie([ n, s ], (t => {
                this.Nc(t), i.push(t.key);
            })), i;
        }
        Oc() {
            this.bc.forEach((t => this.Nc(t)));
        }
        Nc(t) {
            this.bc = this.bc.delete(t), this.Sc = this.Sc.delete(t);
        }
        kc(t) {
            const e = new tt(new Y$1([])), n = new pr(e, t), s = new pr(e, t + 1);
            let i = Rn();
            return this.Sc.Ie([ n, s ], (t => {
                i = i.add(t.key);
            })), i;
        }
        $i(t) {
            const e = new pr(t, 0), n = this.bc.Ae(e);
            return null !== n && t.isEqual(n.key);
        }
    }

    class pr {
        constructor(t, e) {
            this.key = t, this.Mc = e;
        }
        /** Compare by key then by ID */    static vc(t, e) {
            return tt.K(t.key, e.key) || W$1(t.Mc, e.Mc);
        }
        /** Compare by ID then by key */    static Dc(t, e) {
            return W$1(t.Mc, e.Mc) || tt.K(t.key, e.key);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class br {
        constructor(t, e) {
            this.wi = t, this.Ei = e, 
            /**
             * The set of all mutations that have been sent but not yet been applied to
             * the backend.
             */
            this.Go = [], 
            /** Next value to use when assigning sequential IDs to each mutation batch. */
            this.Fc = 1, 
            /** An ordered mapping between documents and the mutations batch IDs. */
            this.Lc = new ln(pr.vc);
        }
        mi(t) {
            return As.resolve(0 === this.Go.length);
        }
        Ai(t, e, n, s) {
            const i = this.Fc;
            if (this.Fc++, this.Go.length > 0) {
                this.Go[this.Go.length - 1];
            }
            const r = new si(i, e, n, s);
            this.Go.push(r);
            // Track references by document key and index collection parents.
            for (const e of s) this.Lc = this.Lc.add(new pr(e.key, i)), this.wi.Bs(t, e.key.path.G());
            return As.resolve(r);
        }
        Ri(t, e) {
            return As.resolve(this.Bc(e));
        }
        Vi(t, e) {
            const n = e + 1, s = this.qc(n), i = s < 0 ? 0 : s;
            // The requested batchId may still be out of range so normalize it to the
            // start of the queue.
                    return As.resolve(this.Go.length > i ? this.Go[i] : null);
        }
        gi() {
            return As.resolve(0 === this.Go.length ? -1 : this.Fc - 1);
        }
        yi(t) {
            return As.resolve(this.Go.slice());
        }
        pi(t, e) {
            const n = new pr(e, 0), s = new pr(e, Number.POSITIVE_INFINITY), i = [];
            return this.Lc.Ie([ n, s ], (t => {
                const e = this.Bc(t.Mc);
                i.push(e);
            })), As.resolve(i);
        }
        bi(t, e) {
            let n = new ln(W$1);
            return e.forEach((t => {
                const e = new pr(t, 0), s = new pr(t, Number.POSITIVE_INFINITY);
                this.Lc.Ie([ e, s ], (t => {
                    n = n.add(t.Mc);
                }));
            })), As.resolve(this.Uc(n));
        }
        Si(t, e) {
            // Use the query path as a prefix for testing if a document matches the
            // query.
            const n = e.path, s = n.length + 1;
            // Construct a document reference for actually scanning the index. Unlike
            // the prefix the document key in this reference must have an even number of
            // segments. The empty segment can be used a suffix of the query path
            // because it precedes all other segments in an ordered traversal.
            let i = n;
            tt.lt(i) || (i = i.child(""));
            const r = new pr(new tt(i), 0);
            // Find unique batchIDs referenced by all documents potentially matching the
            // query.
                    let o = new ln(W$1);
            return this.Lc.me((t => {
                const e = t.key.path;
                return !!n.X(e) && (
                // Rows with document keys more than one segment longer than the query
                // path can't be matches. For example, a query on 'rooms' can't match
                // the document /rooms/abc/messages/xyx.
                // TODO(mcg): we'll need a different scanner when we implement
                // ancestor queries.
                e.length === s && (o = o.add(t.Mc)), !0);
            }), r), As.resolve(this.Uc(o));
        }
        Uc(t) {
            // Construct an array of matching batches, sorted by batchID to ensure that
            // multiple mutations affecting the same document key are applied in order.
            const e = [];
            return t.forEach((t => {
                const n = this.Bc(t);
                null !== n && e.push(n);
            })), e;
        }
        Di(t, e) {
            C(0 === this.Kc(e.batchId, "removed")), this.Go.shift();
            let n = this.Lc;
            return As.forEach(e.mutations, (s => {
                const i = new pr(s.key, e.batchId);
                return n = n.delete(i), this.Ei.Ni(t, s.key);
            })).next((() => {
                this.Lc = n;
            }));
        }
        Ci(t) {
            // No-op since the memory mutation queue does not maintain a separate cache.
        }
        $i(t, e) {
            const n = new pr(e, 0), s = this.Lc.Ae(n);
            return As.resolve(e.isEqual(s && s.key));
        }
        xi(t) {
            return this.Go.length, As.resolve();
        }
        /**
         * Finds the index of the given batchId in the mutation queue and asserts that
         * the resulting index is within the bounds of the queue.
         *
         * @param batchId - The batchId to search for
         * @param action - A description of what the caller is doing, phrased in passive
         * form (e.g. "acknowledged" in a routine that acknowledges batches).
         */    Kc(t, e) {
            return this.qc(t);
        }
        /**
         * Finds the index of the given batchId in the mutation queue. This operation
         * is O(1).
         *
         * @returns The computed index of the batch with the given batchId, based on
         * the state of the queue. Note this index can be negative if the requested
         * batchId has already been remvoed from the queue or past the end of the
         * queue if the batchId is larger than the last added batch.
         */    qc(t) {
            if (0 === this.Go.length) 
            // As an index this is past the end of the queue
            return 0;
            // Examine the front of the queue to figure out the difference between the
            // batchId and indexes in the array. Note that since the queue is ordered
            // by batchId, if the first batch has a larger batchId then the requested
            // batchId doesn't exist in the queue.
                    return t - this.Go[0].batchId;
        }
        /**
         * A version of lookupMutationBatch that doesn't return a promise, this makes
         * other functions that uses this code easier to read and more efficent.
         */    Bc(t) {
            const e = this.qc(t);
            if (e < 0 || e >= this.Go.length) return null;
            return this.Go[e];
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * The memory-only RemoteDocumentCache for IndexedDb. To construct, invoke
     * `newMemoryRemoteDocumentCache()`.
     */
    class vr {
        /**
         * @param sizer - Used to assess the size of a document. For eager GC, this is
         * expected to just return 0 to avoid unnecessarily doing the work of
         * calculating the size.
         */
        constructor(t, e) {
            this.wi = t, this.Qc = e, 
            /** Underlying cache of documents and their read times. */
            this.docs = new an(tt.K), 
            /** Size of all cached documents. */
            this.size = 0;
        }
        /**
         * Adds the supplied entry to the cache and updates the cache size as appropriate.
         *
         * All calls of `addEntry`  are required to go through the RemoteDocumentChangeBuffer
         * returned by `newChangeBuffer()`.
         */    ci(t, e, n) {
            const s = e.key, i = this.docs.get(s), r = i ? i.size : 0, o = this.Qc(e);
            return this.docs = this.docs.Gt(s, {
                ui: e,
                size: o,
                readTime: n
            }), this.size += o - r, this.wi.Bs(t, s.path.G());
        }
        /**
         * Removes the specified entry from the cache and updates the cache size as appropriate.
         *
         * All calls of `removeEntry` are required to go through the RemoteDocumentChangeBuffer
         * returned by `newChangeBuffer()`.
         */    hi(t) {
            const e = this.docs.get(t);
            e && (this.docs = this.docs.remove(t), this.size -= e.size);
        }
        li(t, e) {
            const n = this.docs.get(e);
            return As.resolve(n ? n.ui : null);
        }
        getEntries(t, e) {
            let n = wn();
            return e.forEach((t => {
                const e = this.docs.get(t);
                n = n.Gt(t, e ? e.ui : null);
            })), As.resolve(n);
        }
        Kr(t, e, n) {
            let s = Tn();
            // Documents are ordered by key, so we can use a prefix scan to narrow down
            // the documents we need to match the query against.
                    const i = new tt(e.path.child("")), r = this.docs.te(i);
            for (;r.oe(); ) {
                const {key: t, value: {ui: i, readTime: o}} = r.re();
                if (!e.path.X(t.path)) break;
                o.L(n) <= 0 || i instanceof xt && Ie(e, i) && (s = s.Gt(i.key, i));
            }
            return As.resolve(s);
        }
        Wc(t, e) {
            return As.forEach(this.docs, (t => e(t)));
        }
        Cr(t) {
            // `trackRemovals` is ignores since the MemoryRemoteDocumentCache keeps
            // a separate changelog and does not need special handling for removals.
            return new Sr(this);
        }
        Or(t) {
            return As.resolve(this.size);
        }
    }

    /**
     * Creates a new memory-only RemoteDocumentCache.
     *
     * @param indexManager - A class that manages collection group indices.
     * @param sizer - Used to assess the size of a document. For eager GC, this is
     * expected to just return 0 to avoid unnecessarily doing the work of
     * calculating the size.
     */
    /**
     * Handles the details of adding and updating documents in the MemoryRemoteDocumentCache.
     */
    class Sr extends bi {
        constructor(t) {
            super(), this.Wr = t;
        }
        di(t) {
            const e = [];
            return this.ii.forEach(((n, s) => {
                s && s.ui ? e.push(this.Wr.ci(t, s.ui, this.oi(n))) : this.Wr.hi(n);
            })), As.Mn(e);
        }
        _i(t, e) {
            return this.Wr.li(t, e);
        }
        fi(t, e) {
            return this.Wr.getEntries(t, e);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class Dr {
        constructor(t) {
            this.persistence = t, 
            /**
             * Maps a target to the data about that target
             */
            this.jc = new pi((t => Ft(t)), Bt), 
            /** The last received snapshot version. */
            this.lastRemoteSnapshotVersion = H$1.min(), 
            /** The highest numbered target ID encountered. */
            this.highestTargetId = 0, 
            /** The highest sequence number encountered. */
            this.Gc = 0, 
            /**
             * A ordered bidirectional mapping between documents and the remote target
             * IDs.
             */
            this.zc = new yr, this.targetCount = 0, this.Hc = Oi.Mi();
        }
        Tn(t, e) {
            return this.jc.forEach(((t, n) => e(n))), As.resolve();
        }
        Ui(t) {
            return As.resolve(this.lastRemoteSnapshotVersion);
        }
        Ki(t) {
            return As.resolve(this.Gc);
        }
        Li(t) {
            return this.highestTargetId = this.Hc.next(), As.resolve(this.highestTargetId);
        }
        Qi(t, e, n) {
            return n && (this.lastRemoteSnapshotVersion = n), e > this.Gc && (this.Gc = e), 
            As.resolve();
        }
        ji(t) {
            this.jc.set(t.target, t);
            const e = t.targetId;
            e > this.highestTargetId && (this.Hc = new Oi(e), this.highestTargetId = e), t.sequenceNumber > this.Gc && (this.Gc = t.sequenceNumber);
        }
        Wi(t, e) {
            return this.ji(e), this.targetCount += 1, As.resolve();
        }
        zi(t, e) {
            return this.ji(e), As.resolve();
        }
        Hi(t, e) {
            return this.jc.delete(e.target), this.zc.$c(e.targetId), this.targetCount -= 1, 
            As.resolve();
        }
        Yi(t, e, n) {
            let s = 0;
            const i = [];
            return this.jc.forEach(((r, o) => {
                o.sequenceNumber <= e && null === n.get(o.targetId) && (this.jc.delete(r), i.push(this.Ji(t, o.targetId)), 
                s++);
            })), As.Mn(i).next((() => s));
        }
        Xi(t) {
            return As.resolve(this.targetCount);
        }
        Zi(t, e) {
            const n = this.jc.get(e) || null;
            return As.resolve(n);
        }
        tr(t, e, n) {
            return this.zc.Cc(e, n), As.resolve();
        }
        nr(t, e, n) {
            this.zc.xc(e, n);
            const s = this.persistence.Ei, i = [];
            return s && e.forEach((e => {
                i.push(s.Ni(t, e));
            })), As.Mn(i);
        }
        Ji(t, e) {
            return this.zc.$c(e), As.resolve();
        }
        ir(t, e) {
            const n = this.zc.kc(e);
            return As.resolve(n);
        }
        $i(t, e) {
            return As.resolve(this.zc.$i(e));
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A memory-backed instance of Persistence. Data is stored only in RAM and
     * not persisted across sessions.
     */
    class Cr {
        /**
         * The constructor accepts a factory for creating a reference delegate. This
         * allows both the delegate and this instance to have strong references to
         * each other without having nullable fields that would then need to be
         * checked or asserted on every access.
         */
        constructor(t, e) {
            this.Jc = {}, this.no = new U$1(0), this.so = !1, this.so = !0, this.Ei = t(this), 
            this.lo = new Dr(this);
            this.wi = new mi, this._o = function(t, e) {
                return new vr(t, e);
            }(this.wi, (t => this.Ei.Yc(t))), this.Ut = new ri(e), this.fo = new gr(this.Ut);
        }
        start() {
            return Promise.resolve();
        }
        ko() {
            // No durable state to ensure is closed on shutdown.
            return this.so = !1, Promise.resolve();
        }
        get wr() {
            return this.so;
        }
        Ro() {
            // No op.
        }
        Po() {
            // No op.
        }
        Ko() {
            return this.wi;
        }
        Uo(t) {
            let e = this.Jc[t.i()];
            return e || (e = new br(this.wi, this.Ei), this.Jc[t.i()] = e), e;
        }
        vr() {
            return this.lo;
        }
        Nr() {
            return this._o;
        }
        Qo() {
            return this.fo;
        }
        runTransaction(t, e, n) {
            p$1("MemoryPersistence", "Starting transaction:", t);
            const s = new Nr(this.no.next());
            return this.Ei.Xc(), n(s).next((t => this.Ei.Zc(s).next((() => t)))).On().then((t => (s.gs(), 
            t)));
        }
        ta(t, e) {
            return As.Fn(Object.values(this.Jc).map((n => () => n.$i(t, e))));
        }
    }

    /**
     * Memory persistence is not actually transactional, but future implementations
     * may have transaction-scoped state.
     */ class Nr extends xs {
        constructor(t) {
            super(), this.ps = t;
        }
    }

    class xr {
        constructor(t) {
            this.persistence = t, 
            /** Tracks all documents that are active in Query views. */
            this.ea = new yr, 
            /** The list of documents that are potentially GCed after each transaction. */
            this.na = null;
        }
        static sa(t) {
            return new xr(t);
        }
        get ia() {
            if (this.na) return this.na;
            throw D$1();
        }
        er(t, e, n) {
            return this.ea.er(n, e), this.ia.delete(n.toString()), As.resolve();
        }
        sr(t, e, n) {
            return this.ea.sr(n, e), this.ia.add(n.toString()), As.resolve();
        }
        Ni(t, e) {
            return this.ia.add(e.toString()), As.resolve();
        }
        removeTarget(t, e) {
            this.ea.$c(e.targetId).forEach((t => this.ia.add(t.toString())));
            const n = this.persistence.vr();
            return n.ir(t, e.targetId).next((t => {
                t.forEach((t => this.ia.add(t.toString())));
            })).next((() => n.Hi(t, e)));
        }
        Xc() {
            this.na = new Set;
        }
        Zc(t) {
            // Remove newly orphaned documents.
            const e = this.persistence.Nr().Cr();
            return As.forEach(this.ia, (n => {
                const s = tt.at(n);
                return this.ra(t, s).next((t => {
                    t || e.hi(s);
                }));
            })).next((() => (this.na = null, e.apply(t))));
        }
        $r(t, e) {
            return this.ra(t, e).next((t => {
                t ? this.ia.delete(e.toString()) : this.ia.add(e.toString());
            }));
        }
        Yc(t) {
            // For eager GC, we don't care about the document size, there are no size thresholds.
            return 0;
        }
        ra(t, e) {
            return As.Fn([ () => As.resolve(this.ea.$i(e)), () => this.persistence.vr().$i(t, e), () => this.persistence.ta(t, e) ]);
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // The format of the LocalStorage key that stores the client state is:
    //     firestore_clients_<persistence_prefix>_<instance_key>
    /** Assembles the key for a client state in WebStorage */
    function $r(t, e) {
        return `firestore_clients_${t}_${e}`;
    }

    // The format of the WebStorage key that stores the mutation state is:
    //     firestore_mutations_<persistence_prefix>_<batch_id>
    //     (for unauthenticated users)
    // or: firestore_mutations_<persistence_prefix>_<batch_id>_<user_uid>

    // 'user_uid' is last to avoid needing to escape '_' characters that it might
    // contain.
    /** Assembles the key for a mutation batch in WebStorage */
    function Or(t, e, n) {
        let s = `firestore_mutations_${t}_${n}`;
        return e.t() && (s += `_${e.uid}`), s;
    }

    // The format of the WebStorage key that stores a query target's metadata is:
    //     firestore_targets_<persistence_prefix>_<target_id>
    /** Assembles the key for a query state in WebStorage */
    function kr(t, e) {
        return `firestore_targets_${t}_${e}`;
    }

    // The WebStorage prefix that stores the primary tab's online state. The
    // format of the key is:
    //     firestore_online_state_<persistence_prefix>
    /**
     * Holds the state of a mutation batch, including its user ID, batch ID and
     * whether the batch is 'pending', 'acknowledged' or 'rejected'.
     */
    // Visible for testing
    class Mr {
        constructor(t, e, n, s) {
            this.user = t, this.batchId = e, this.state = n, this.error = s;
        }
        /**
         * Parses a MutationMetadata from its JSON representation in WebStorage.
         * Logs a warning and returns null if the format of the data is not valid.
         */    static oa(t, e, n) {
            const s = JSON.parse(n);
            let i, r = "object" == typeof s && -1 !== [ "pending", "acknowledged", "rejected" ].indexOf(s.state) && (void 0 === s.error || "object" == typeof s.error);
            return r && s.error && (r = "string" == typeof s.error.message && "string" == typeof s.error.code, 
            r && (i = new $(s.error.code, s.error.message))), r ? new Mr(t, e, s.state, i) : (b("SharedClientState", `Failed to parse mutation state for ID '${e}': ${n}`), 
            null);
        }
        ca() {
            const t = {
                state: this.state,
                updateTimeMs: Date.now()
            };
            return this.error && (t.error = {
                code: this.error.code,
                message: this.error.message
            }), JSON.stringify(t);
        }
    }

    /**
     * Holds the state of a query target, including its target ID and whether the
     * target is 'not-current', 'current' or 'rejected'.
     */
    // Visible for testing
    class Fr {
        constructor(t, e, n) {
            this.targetId = t, this.state = e, this.error = n;
        }
        /**
         * Parses a QueryTargetMetadata from its JSON representation in WebStorage.
         * Logs a warning and returns null if the format of the data is not valid.
         */    static oa(t, e) {
            const n = JSON.parse(e);
            let s, i = "object" == typeof n && -1 !== [ "not-current", "current", "rejected" ].indexOf(n.state) && (void 0 === n.error || "object" == typeof n.error);
            return i && n.error && (i = "string" == typeof n.error.message && "string" == typeof n.error.code, 
            i && (s = new $(n.error.code, n.error.message))), i ? new Fr(t, n.state, s) : (b("SharedClientState", `Failed to parse target state for ID '${t}': ${e}`), 
            null);
        }
        ca() {
            const t = {
                state: this.state,
                updateTimeMs: Date.now()
            };
            return this.error && (t.error = {
                code: this.error.code,
                message: this.error.message
            }), JSON.stringify(t);
        }
    }

    /**
     * This class represents the immutable ClientState for a client read from
     * WebStorage, containing the list of active query targets.
     */ class Lr {
        constructor(t, e) {
            this.clientId = t, this.activeTargetIds = e;
        }
        /**
         * Parses a RemoteClientState from the JSON representation in WebStorage.
         * Logs a warning and returns null if the format of the data is not valid.
         */    static oa(t, e) {
            const n = JSON.parse(e);
            let s = "object" == typeof n && n.activeTargetIds instanceof Array, i = Vn();
            for (let t = 0; s && t < n.activeTargetIds.length; ++t) s = wt(n.activeTargetIds[t]), 
            i = i.add(n.activeTargetIds[t]);
            return s ? new Lr(t, i) : (b("SharedClientState", `Failed to parse client data for instance '${t}': ${e}`), 
            null);
        }
    }

    /**
     * This class represents the online state for all clients participating in
     * multi-tab. The online state is only written to by the primary client, and
     * used in secondary clients to update their query views.
     */ class Br {
        constructor(t, e) {
            this.clientId = t, this.onlineState = e;
        }
        /**
         * Parses a SharedOnlineState from its JSON representation in WebStorage.
         * Logs a warning and returns null if the format of the data is not valid.
         */    static oa(t) {
            const e = JSON.parse(t);
            return "object" == typeof e && -1 !== [ "Unknown", "Online", "Offline" ].indexOf(e.onlineState) && "string" == typeof e.clientId ? new Br(e.clientId, e.onlineState) : (b("SharedClientState", `Failed to parse online state: ${t}`), 
            null);
        }
    }

    /**
     * Metadata state of the local client. Unlike `RemoteClientState`, this class is
     * mutable and keeps track of all pending mutations, which allows us to
     * update the range of pending mutation batch IDs as new mutations are added or
     * removed.
     *
     * The data in `LocalClientState` is not read from WebStorage and instead
     * updated via its instance methods. The updated state can be serialized via
     * `toWebStorageJSON()`.
     */
    // Visible for testing.
    class qr {
        constructor() {
            this.activeTargetIds = Vn();
        }
        aa(t) {
            this.activeTargetIds = this.activeTargetIds.add(t);
        }
        ua(t) {
            this.activeTargetIds = this.activeTargetIds.delete(t);
        }
        /**
         * Converts this entry into a JSON-encoded format we can use for WebStorage.
         * Does not encode `clientId` as it is part of the key in WebStorage.
         */    ca() {
            const t = {
                activeTargetIds: this.activeTargetIds.tt(),
                updateTimeMs: Date.now()
            };
            return JSON.stringify(t);
        }
    }

    /**
     * `WebStorageSharedClientState` uses WebStorage (window.localStorage) as the
     * backing store for the SharedClientState. It keeps track of all active
     * clients and supports modifications of the local client's data.
     */ class Ur {
        constructor(t, e, n, s, i) {
            this.window = t, this.Xr = e, this.persistenceKey = n, this.ha = s, this.la = null, 
            this._a = null, this.D = null, this.fa = this.da.bind(this), this.wa = new an(W$1), 
            this.wr = !1, 
            /**
             * Captures WebStorage events that occur before `start()` is called. These
             * events are replayed once `WebStorageSharedClientState` is started.
             */
            this.Ea = [];
            // Escape the special characters mentioned here:
            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
            const r = n.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
            this.storage = this.window.localStorage, this.currentUser = i, this.Ta = $r(this.persistenceKey, this.ha), 
            this.Ia = 
            /** Assembles the key for the current sequence number. */
            function(t) {
                return `firestore_sequence_number_${t}`;
            }
            /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ (this.persistenceKey), this.wa = this.wa.Gt(this.ha, new qr), this.ma = new RegExp(`^firestore_clients_${r}_([^_]*)$`), 
            this.Aa = new RegExp(`^firestore_mutations_${r}_(\\d+)(?:_(.*))?$`), this.Ra = new RegExp(`^firestore_targets_${r}_(\\d+)$`), 
            this.Pa = 
            /** Assembles the key for the online state of the primary tab. */
            function(t) {
                return `firestore_online_state_${t}`;
            }
            // The WebStorage prefix that plays as a event to indicate the remote documents
            // might have changed due to some secondary tabs loading a bundle.
            // format of the key is:
            //     firestore_bundle_loaded_<persistenceKey>
            (this.persistenceKey), this.Va = function(t) {
                return `firestore_bundle_loaded_${t}`;
            }
            // The WebStorage key prefix for the key that stores the last sequence number allocated. The key
            // looks like 'firestore_sequence_number_<persistence_prefix>'.
            (this.persistenceKey), 
            // Rather than adding the storage observer during start(), we add the
            // storage observer during initialization. This ensures that we collect
            // events before other components populate their initial state (during their
            // respective start() calls). Otherwise, we might for example miss a
            // mutation that is added after LocalStore's start() processed the existing
            // mutations but before we observe WebStorage events.
            this.window.addEventListener("storage", this.fa);
        }
        /** Returns 'true' if WebStorage is available in the current environment. */    static Kn(t) {
            return !(!t || !t.localStorage);
        }
        async start() {
            // Retrieve the list of existing clients to backfill the data in
            // SharedClientState.
            const t = await this.la.qo();
            for (const e of t) {
                if (e === this.ha) continue;
                const t = this.getItem($r(this.persistenceKey, e));
                if (t) {
                    const n = Lr.oa(e, t);
                    n && (this.wa = this.wa.Gt(n.clientId, n));
                }
            }
            this.ga();
            // Check if there is an existing online state and call the callback handler
            // if applicable.
            const e = this.storage.getItem(this.Pa);
            if (e) {
                const t = this.ya(e);
                t && this.pa(t);
            }
            for (const t of this.Ea) this.da(t);
            this.Ea = [], 
            // Register a window unload hook to remove the client metadata entry from
            // WebStorage even if `shutdown()` was not called.
            this.window.addEventListener("unload", (() => this.ko())), this.wr = !0;
        }
        $(t) {
            this.setItem(this.Ia, JSON.stringify(t));
        }
        ba() {
            return this.va(this.wa);
        }
        Sa(t) {
            let e = !1;
            return this.wa.forEach(((n, s) => {
                s.activeTargetIds.has(t) && (e = !0);
            })), e;
        }
        Da(t) {
            this.Ca(t, "pending");
        }
        Na(t, e, n) {
            this.Ca(t, e, n), 
            // Once a final mutation result is observed by other clients, they no longer
            // access the mutation's metadata entry. Since WebStorage replays events
            // in order, it is safe to delete the entry right after updating it.
            this.xa(t);
        }
        $a(t) {
            let e = "not-current";
            // Lookup an existing query state if the target ID was already registered
            // by another tab
                    if (this.Sa(t)) {
                const n = this.storage.getItem(kr(this.persistenceKey, t));
                if (n) {
                    const s = Fr.oa(t, n);
                    s && (e = s.state);
                }
            }
            return this.Oa.aa(t), this.ga(), e;
        }
        ka(t) {
            this.Oa.ua(t), this.ga();
        }
        Ma(t) {
            return this.Oa.activeTargetIds.has(t);
        }
        Fa(t) {
            this.removeItem(kr(this.persistenceKey, t));
        }
        La(t, e, n) {
            this.Ba(t, e, n);
        }
        qa(t, e, n) {
            e.forEach((t => {
                this.xa(t);
            })), this.currentUser = t, n.forEach((t => {
                this.Da(t);
            }));
        }
        Ua(t) {
            this.Ka(t);
        }
        Qa() {
            this.Wa();
        }
        ko() {
            this.wr && (this.window.removeEventListener("storage", this.fa), this.removeItem(this.Ta), 
            this.wr = !1);
        }
        getItem(t) {
            const e = this.storage.getItem(t);
            return p$1("SharedClientState", "READ", t, e), e;
        }
        setItem(t, e) {
            p$1("SharedClientState", "SET", t, e), this.storage.setItem(t, e);
        }
        removeItem(t) {
            p$1("SharedClientState", "REMOVE", t), this.storage.removeItem(t);
        }
        da(t) {
            // Note: The function is typed to take Event to be interface-compatible with
            // `Window.addEventListener`.
            const e = t;
            if (e.storageArea === this.storage) {
                if (p$1("SharedClientState", "EVENT", e.key, e.newValue), e.key === this.Ta) return void b("Received WebStorage notification for local change. Another client might have garbage-collected our state");
                this.Xr.yo((async () => {
                    if (this.wr) {
                        if (null !== e.key) if (this.ma.test(e.key)) {
                            if (null == e.newValue) {
                                const t = this.ja(e.key);
                                return this.Ga(t, null);
                            }
                            {
                                const t = this.za(e.key, e.newValue);
                                if (t) return this.Ga(t.clientId, t);
                            }
                        } else if (this.Aa.test(e.key)) {
                            if (null !== e.newValue) {
                                const t = this.Ha(e.key, e.newValue);
                                if (t) return this.Ja(t);
                            }
                        } else if (this.Ra.test(e.key)) {
                            if (null !== e.newValue) {
                                const t = this.Ya(e.key, e.newValue);
                                if (t) return this.Xa(t);
                            }
                        } else if (e.key === this.Pa) {
                            if (null !== e.newValue) {
                                const t = this.ya(e.newValue);
                                if (t) return this.pa(t);
                            }
                        } else if (e.key === this.Ia) {
                            const t = function(t) {
                                let e = U$1.O;
                                if (null != t) try {
                                    const n = JSON.parse(t);
                                    C("number" == typeof n), e = n;
                                } catch (t) {
                                    b("SharedClientState", "Failed to read sequence number from WebStorage", t);
                                }
                                return e;
                            }
                            /**
     * `MemorySharedClientState` is a simple implementation of SharedClientState for
     * clients using memory persistence. The state in this class remains fully
     * isolated and no synchronization is performed.
     */ (e.newValue);
                            t !== U$1.O && this.D(t);
                        } else if (e.key === this.Va) return this.la.Za();
                    } else this.Ea.push(e);
                }));
            }
        }
        get Oa() {
            return this.wa.get(this.ha);
        }
        ga() {
            this.setItem(this.Ta, this.Oa.ca());
        }
        Ca(t, e, n) {
            const s = new Mr(this.currentUser, t, e, n), i = Or(this.persistenceKey, this.currentUser, t);
            this.setItem(i, s.ca());
        }
        xa(t) {
            const e = Or(this.persistenceKey, this.currentUser, t);
            this.removeItem(e);
        }
        Ka(t) {
            const e = {
                clientId: this.ha,
                onlineState: t
            };
            this.storage.setItem(this.Pa, JSON.stringify(e));
        }
        Ba(t, e, n) {
            const s = kr(this.persistenceKey, t), i = new Fr(t, e, n);
            this.setItem(s, i.ca());
        }
        Wa() {
            this.setItem(this.Va, "value-not-used");
        }
        /**
         * Parses a client state key in WebStorage. Returns null if the key does not
         * match the expected key format.
         */    ja(t) {
            const e = this.ma.exec(t);
            return e ? e[1] : null;
        }
        /**
         * Parses a client state in WebStorage. Returns 'null' if the value could not
         * be parsed.
         */    za(t, e) {
            const n = this.ja(t);
            return Lr.oa(n, e);
        }
        /**
         * Parses a mutation batch state in WebStorage. Returns 'null' if the value
         * could not be parsed.
         */    Ha(t, e) {
            const n = this.Aa.exec(t), s = Number(n[1]), i = void 0 !== n[2] ? n[2] : null;
            return Mr.oa(new P$1(i), s, e);
        }
        /**
         * Parses a query target state from WebStorage. Returns 'null' if the value
         * could not be parsed.
         */    Ya(t, e) {
            const n = this.Ra.exec(t), s = Number(n[1]);
            return Fr.oa(s, e);
        }
        /**
         * Parses an online state from WebStorage. Returns 'null' if the value
         * could not be parsed.
         */    ya(t) {
            return Br.oa(t);
        }
        async Ja(t) {
            if (t.user.uid === this.currentUser.uid) return this.la.tu(t.batchId, t.state, t.error);
            p$1("SharedClientState", `Ignoring mutation for non-active user ${t.user.uid}`);
        }
        Xa(t) {
            return this.la.eu(t.targetId, t.state, t.error);
        }
        Ga(t, e) {
            const n = e ? this.wa.Gt(t, e) : this.wa.remove(t), s = this.va(this.wa), i = this.va(n), r = [], o = [];
            return i.forEach((t => {
                s.has(t) || r.push(t);
            })), s.forEach((t => {
                i.has(t) || o.push(t);
            })), this.la.nu(r, o).then((() => {
                this.wa = n;
            }));
        }
        pa(t) {
            // We check whether the client that wrote this online state is still active
            // by comparing its client ID to the list of clients kept active in
            // IndexedDb. If a client does not update their IndexedDb client state
            // within 5 seconds, it is considered inactive and we don't emit an online
            // state event.
            this.wa.get(t.clientId) && this._a(t.onlineState);
        }
        va(t) {
            let e = Vn();
            return t.forEach(((t, n) => {
                e = e.Re(n.activeTargetIds);
            })), e;
        }
    }

    class Kr {
        constructor() {
            this.su = new qr, this.iu = {}, this._a = null, this.D = null;
        }
        Da(t) {
            // No op.
        }
        Na(t, e, n) {
            // No op.
        }
        $a(t) {
            return this.su.aa(t), this.iu[t] || "not-current";
        }
        La(t, e, n) {
            this.iu[t] = e;
        }
        ka(t) {
            this.su.ua(t);
        }
        Ma(t) {
            return this.su.activeTargetIds.has(t);
        }
        Fa(t) {
            delete this.iu[t];
        }
        ba() {
            return this.su.activeTargetIds;
        }
        Sa(t) {
            return this.su.activeTargetIds.has(t);
        }
        start() {
            return this.su = new qr, Promise.resolve();
        }
        qa(t, e, n) {
            // No op.
        }
        Ua(t) {
            // No op.
        }
        ko() {}
        $(t) {}
        Qa() {
            // No op.
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class Qr {
        ru(t) {
            // No-op.
        }
        ko() {
            // No-op.
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // References to `window` are guarded by BrowserConnectivityMonitor.isAvailable()
    /* eslint-disable no-restricted-globals */
    /**
     * Browser implementation of ConnectivityMonitor.
     */
    class Wr {
        constructor() {
            this.ou = () => this.cu(), this.au = () => this.uu(), this.hu = [], this.lu();
        }
        ru(t) {
            this.hu.push(t);
        }
        ko() {
            window.removeEventListener("online", this.ou), window.removeEventListener("offline", this.au);
        }
        lu() {
            window.addEventListener("online", this.ou), window.addEventListener("offline", this.au);
        }
        cu() {
            p$1("ConnectivityMonitor", "Network connectivity changed: AVAILABLE");
            for (const t of this.hu) t(0 /* AVAILABLE */);
        }
        uu() {
            p$1("ConnectivityMonitor", "Network connectivity changed: UNAVAILABLE");
            for (const t of this.hu) t(1 /* UNAVAILABLE */);
        }
        // TODO(chenbrian): Consider passing in window either into this component or
        // here for testing via FakeWindow.
        /** Checks that all used attributes of window are available. */
        static Kn() {
            return "undefined" != typeof window && void 0 !== window.addEventListener && void 0 !== window.removeEventListener;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ const jr = {
        BatchGetDocuments: "batchGet",
        Commit: "commit",
        RunQuery: "runQuery"
    };

    /**
     * Maps RPC names to the corresponding REST endpoint name.
     *
     * We use array notation to avoid mangling.
     */
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provides a simple helper class that implements the Stream interface to
     * bridge to other implementations that are streams but do not implement the
     * interface. The stream callbacks are invoked with the callOn... methods.
     */
    class Gr {
        constructor(t) {
            this._u = t._u, this.fu = t.fu;
        }
        du(t) {
            this.wu = t;
        }
        Eu(t) {
            this.Tu = t;
        }
        onMessage(t) {
            this.Iu = t;
        }
        close() {
            this.fu();
        }
        send(t) {
            this._u(t);
        }
        mu() {
            this.wu();
        }
        Au(t) {
            this.Tu(t);
        }
        Ru(t) {
            this.Iu(t);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class zr extends 
    /**
     * Base class for all Rest-based connections to the backend (WebChannel and
     * HTTP).
     */
    class {
        constructor(t) {
            this.Pu = t, this.p = t.p;
            const e = t.ssl ? "https" : "http";
            this.Vu = e + "://" + t.host, this.gu = "projects/" + this.p.projectId + "/databases/" + this.p.database + "/documents";
        }
        yu(t, e, n, s) {
            const i = this.pu(t, e);
            p$1("RestConnection", "Sending: ", i, n);
            const r = {};
            return this.bu(r, s), this.vu(t, i, r, n).then((t => (p$1("RestConnection", "Received: ", t), 
            t)), (e => {
                throw v$1("RestConnection", `${t} failed with error: `, e, "url: ", i, "request:", n), 
                e;
            }));
        }
        Su(t, e, n, s) {
            // The REST API automatically aggregates all of the streamed results, so we
            // can just use the normal invoke() method.
            return this.yu(t, e, n, s);
        }
        /**
         * Modifies the headers for a request, adding any authorization token if
         * present and any additional headers for the request.
         */    bu(t, e) {
            if (t["X-Goog-Api-Client"] = "gl-js/ fire/8.2.9", 
            // Content-Type: text/plain will avoid preflight requests which might
            // mess with CORS and redirects by proxies. If we add custom headers
            // we will need to change this code to potentially use the $httpOverwrite
            // parameter supported by ESF to avoid triggering preflight requests.
            t["Content-Type"] = "text/plain", e) for (const n in e.h) e.h.hasOwnProperty(n) && (t[n] = e.h[n]);
        }
        pu(t, e) {
            const n = jr[t];
            return `${this.Vu}/v1/${e}:${n}`;
        }
    } {
        constructor(t) {
            super(t), this.forceLongPolling = t.forceLongPolling, this.v = t.v;
        }
        vu(t, e, n, s) {
            return new Promise(((i, r) => {
                const o = new XhrIo;
                o.listenOnce(EventType.COMPLETE, (() => {
                    try {
                        switch (o.getLastErrorCode()) {
                          case ErrorCode.NO_ERROR:
                            const e = o.getResponseJson();
                            p$1("Connection", "XHR received:", JSON.stringify(e)), i(e);
                            break;

                          case ErrorCode.TIMEOUT:
                            p$1("Connection", 'RPC "' + t + '" timed out'), r(new $(x$1.DEADLINE_EXCEEDED, "Request time out"));
                            break;

                          case ErrorCode.HTTP_ERROR:
                            const n = o.getStatus();
                            if (p$1("Connection", 'RPC "' + t + '" failed with status:', n, "response text:", o.getResponseText()), 
                            n > 0) {
                                const t = o.getResponseJson().error;
                                if (t && t.status && t.message) {
                                    const e = function(t) {
                                        const e = t.toLowerCase().replace(/_/g, "-");
                                        return Object.values(x$1).indexOf(e) >= 0 ? e : x$1.UNKNOWN;
                                    }(t.status);
                                    r(new $(e, t.message));
                                } else r(new $(x$1.UNKNOWN, "Server responded with status " + o.getStatus()));
                            } else 
                            // If we received an HTTP_ERROR but there's no status code,
                            // it's most probably a connection issue
                            r(new $(x$1.UNAVAILABLE, "Connection failed."));
                            break;

                          default:
                            D$1();
                        }
                    } finally {
                        p$1("Connection", 'RPC "' + t + '" completed.');
                    }
                }));
                const c = JSON.stringify(s);
                o.send(e, "POST", c, n, 15);
            }));
        }
        Du(t, e) {
            const n = [ this.Vu, "/", "google.firestore.v1.Firestore", "/", t, "/channel" ], s = createWebChannelTransport(), i = getStatEventTarget(), r = {
                // Required for backend stickiness, routing behavior is based on this
                // parameter.
                httpSessionIdParam: "gsessionid",
                initMessageHeaders: {},
                messageUrlParams: {
                    // This param is used to improve routing and project isolation by the
                    // backend and must be included in every request.
                    database: `projects/${this.p.projectId}/databases/${this.p.database}`
                },
                sendRawJson: !0,
                supportsCrossDomainXhr: !0,
                internalChannelParams: {
                    // Override the default timeout (randomized between 10-20 seconds) since
                    // a large write batch on a slow internet connection may take a long
                    // time to send to the backend. Rather than have WebChannel impose a
                    // tight timeout which could lead to infinite timeouts and retries, we
                    // set it very large (5-10 minutes) and rely on the browser's builtin
                    // timeouts to kick in if the request isn't working.
                    forwardChannelRequestTimeoutMs: 6e5
                },
                forceLongPolling: this.forceLongPolling,
                detectBufferingProxy: this.v
            };
            this.bu(r.initMessageHeaders, e), 
            // Sending the custom headers we just added to request.initMessageHeaders
            // (Authorization, etc.) will trigger the browser to make a CORS preflight
            // request because the XHR will no longer meet the criteria for a "simple"
            // CORS request:
            // https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests
            // Therefore to avoid the CORS preflight request (an extra network
            // roundtrip), we use the httpHeadersOverwriteParam option to specify that
            // the headers should instead be encoded into a special "$httpHeaders" query
            // parameter, which is recognized by the webchannel backend. This is
            // formally defined here:
            // https://github.com/google/closure-library/blob/b0e1815b13fb92a46d7c9b3c30de5d6a396a3245/closure/goog/net/rpc/httpcors.js#L32
            // TODO(b/145624756): There is a backend bug where $httpHeaders isn't respected if the request
            // doesn't have an Origin header. So we have to exclude a few browser environments that are
            // known to (sometimes) not include an Origin. See
            // https://github.com/firebase/firebase-js-sdk/issues/1491.
            isMobileCordova() || isReactNative() || isElectron() || isIE() || isUWP() || isBrowserExtension() || (r.httpHeadersOverwriteParam = "$httpHeaders");
            const o = n.join("");
            p$1("Connection", "Creating WebChannel: " + o, r);
            const c = s.createWebChannel(o, r);
            // WebChannel supports sending the first message with the handshake - saving
            // a network round trip. However, it will have to call send in the same
            // JS event loop as open. In order to enforce this, we delay actually
            // opening the WebChannel until send is called. Whether we have called
            // open is tracked with this variable.
                    let d = !1, w = !1;
            // A flag to determine whether the stream was closed (by us or through an
            // error/close event) to avoid delivering multiple close events or sending
            // on a closed stream
                    const E = new Gr({
                _u: t => {
                    w ? p$1("Connection", "Not sending because WebChannel is closed:", t) : (d || (p$1("Connection", "Opening WebChannel transport."), 
                    c.open(), d = !0), p$1("Connection", "WebChannel sending:", t), c.send(t));
                },
                fu: () => c.close()
            }), P = (t, e, n) => {
                // TODO(dimond): closure typing seems broken because WebChannel does
                // not implement goog.events.Listenable
                t.listen(e, (t => {
                    try {
                        n(t);
                    } catch (t) {
                        setTimeout((() => {
                            throw t;
                        }), 0);
                    }
                }));
            };
            // Closure events are guarded and exceptions are swallowed, so catch any
            // exception and rethrow using a setTimeout so they become visible again.
            // Note that eventually this function could go away if we are confident
            // enough the code is exception free.
                    return P(c, WebChannel.EventType.OPEN, (() => {
                w || p$1("Connection", "WebChannel transport opened.");
            })), P(c, WebChannel.EventType.CLOSE, (() => {
                w || (w = !0, p$1("Connection", "WebChannel transport closed"), E.Au());
            })), P(c, WebChannel.EventType.ERROR, (t => {
                w || (w = !0, v$1("Connection", "WebChannel transport errored:", t), E.Au(new $(x$1.UNAVAILABLE, "The operation could not be completed")));
            })), P(c, WebChannel.EventType.MESSAGE, (t => {
                var e;
                if (!w) {
                    const n = t.data[0];
                    C(!!n);
                    // TODO(b/35143891): There is a bug in One Platform that caused errors
                    // (and only errors) to be wrapped in an extra array. To be forward
                    // compatible with the bug we need to check either condition. The latter
                    // can be removed once the fix has been rolled out.
                    // Use any because msgData.error is not typed.
                    const s = n, i = s.error || (null === (e = s[0]) || void 0 === e ? void 0 : e.error);
                    if (i) {
                        p$1("Connection", "WebChannel received error:", i);
                        // error.status will be a string like 'OK' or 'NOT_FOUND'.
                        const t = i.status;
                        let e = 
                        /**
     * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.
     *
     * @returns The Code equivalent to the given status string or undefined if
     *     there is no match.
     */
                        function(t) {
                            // lookup by string
                            // eslint-disable-next-line @typescript-eslint/no-explicit-any
                            const e = sn[t];
                            if (void 0 !== e) return cn(e);
                        }(t), n = i.message;
                        void 0 === e && (e = x$1.INTERNAL, n = "Unknown error status: " + t + " with message " + i.message), 
                        // Mark closed so no further events are propagated
                        w = !0, E.Au(new $(e, n)), c.close();
                    } else p$1("Connection", "WebChannel received:", n), E.Ru(n);
                }
            })), P(i, Event.STAT_EVENT, (t => {
                t.stat === Stat.PROXY ? p$1("Connection", "Detected buffering proxy") : t.stat === Stat.NOPROXY && p$1("Connection", "Detected no buffering proxy");
            })), setTimeout((() => {
                // Technically we could/should wait for the WebChannel opened event,
                // but because we want to send the first message with the WebChannel
                // handshake we pretend the channel opened here (asynchronously), and
                // then delay the actual open until the first message is sent.
                E.mu();
            }), 0), E;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Initializes the WebChannelConnection for the browser. */
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** The Platform's 'window' implementation or null if not available. */
    function Hr() {
        // `window` is not always available, e.g. in ReactNative and WebWorkers.
        // eslint-disable-next-line no-restricted-globals
        return "undefined" != typeof window ? window : null;
    }

    /** The Platform's 'document' implementation or null if not available. */ function Jr() {
        // `document` is not always available, e.g. in ReactNative and WebWorkers.
        // eslint-disable-next-line no-restricted-globals
        return "undefined" != typeof document ? document : null;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ function Yr(t) {
        return new Fn(t, /* useProto3Json= */ !0);
    }

    /**
     * An instance of the Platform's 'TextEncoder' implementation.
     */
    /**
     * A helper for running delayed tasks following an exponential backoff curve
     * between attempts.
     *
     * Each delay is made up of a "base" delay which follows the exponential
     * backoff curve, and a +/- 50% "jitter" that is calculated and added to the
     * base delay. This prevents clients from accidentally synchronizing their
     * delays causing spikes of load to the backend.
     */
    class Xr {
        constructor(
        /**
         * The AsyncQueue to run backoff operations on.
         */
        t, 
        /**
         * The ID to use when scheduling backoff operations on the AsyncQueue.
         */
        e, 
        /**
         * The initial delay (used as the base delay on the first retry attempt).
         * Note that jitter will still be applied, so the actual delay could be as
         * little as 0.5*initialDelayMs.
         */
        n = 1e3
        /**
         * The multiplier to use to determine the extended base delay after each
         * attempt.
         */ , s = 1.5
        /**
         * The maximum base delay after which no further backoff is performed.
         * Note that jitter will still be applied, so the actual delay could be as
         * much as 1.5*maxDelayMs.
         */ , i = 6e4) {
            this.Xr = t, this._s = e, this.Cu = n, this.Nu = s, this.xu = i, this.$u = 0, this.Ou = null, 
            /** The last backoff attempt, as epoch milliseconds. */
            this.ku = Date.now(), this.reset();
        }
        /**
         * Resets the backoff delay.
         *
         * The very next backoffAndWait() will have no delay. If it is called again
         * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and
         * subsequent ones will increase according to the backoffFactor.
         */    reset() {
            this.$u = 0;
        }
        /**
         * Resets the backoff delay to the maximum delay (e.g. for use after a
         * RESOURCE_EXHAUSTED error).
         */    Mu() {
            this.$u = this.xu;
        }
        /**
         * Returns a promise that resolves after currentDelayMs, and increases the
         * delay for any subsequent attempts. If there was a pending backoff operation
         * already, it will be canceled.
         */    Fu(t) {
            // Cancel any pending backoff operation.
            this.cancel();
            // First schedule using the current base (which may be 0 and should be
            // honored as such).
            const e = Math.floor(this.$u + this.Lu()), n = Math.max(0, Date.now() - this.ku), s = Math.max(0, e - n);
            // Guard against lastAttemptTime being in the future due to a clock change.
                    s > 0 && p$1("ExponentialBackoff", `Backing off for ${s} ms (base delay: ${this.$u} ms, delay with jitter: ${e} ms, last attempt: ${n} ms ago)`), 
            this.Ou = this.Xr.Er(this._s, s, (() => (this.ku = Date.now(), t()))), 
            // Apply backoff factor to determine next delay and ensure it is within
            // bounds.
            this.$u *= this.Nu, this.$u < this.Cu && (this.$u = this.Cu), this.$u > this.xu && (this.$u = this.xu);
        }
        Bu() {
            null !== this.Ou && (this.Ou.As(), this.Ou = null);
        }
        cancel() {
            null !== this.Ou && (this.Ou.cancel(), this.Ou = null);
        }
        /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */    Lu() {
            return (Math.random() - .5) * this.$u;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A PersistentStream is an abstract base class that represents a streaming RPC
     * to the Firestore backend. It's built on top of the connections own support
     * for streaming RPCs, and adds several critical features for our clients:
     *
     *   - Exponential backoff on failure
     *   - Authentication via CredentialsProvider
     *   - Dispatching all callbacks into the shared worker queue
     *   - Closing idle streams after 60 seconds of inactivity
     *
     * Subclasses of PersistentStream implement serialization of models to and
     * from the JSON representation of the protocol buffers for a specific
     * streaming RPC.
     *
     * ## Starting and Stopping
     *
     * Streaming RPCs are stateful and need to be start()ed before messages can
     * be sent and received. The PersistentStream will call the onOpen() function
     * of the listener once the stream is ready to accept requests.
     *
     * Should a start() fail, PersistentStream will call the registered onClose()
     * listener with a FirestoreError indicating what went wrong.
     *
     * A PersistentStream can be started and stopped repeatedly.
     *
     * Generic types:
     *  SendType: The type of the outgoing message of the underlying
     *    connection stream
     *  ReceiveType: The type of the incoming message of the underlying
     *    connection stream
     *  ListenerType: The type of the listener that will be used for callbacks
     */
    class Zr {
        constructor(t, e, n, s, i, r) {
            this.Xr = t, this.qu = n, this.Uu = s, this.Ku = i, this.listener = r, this.state = 0 /* Initial */ , 
            /**
             * A close count that's incremented every time the stream is closed; used by
             * getCloseGuardedDispatcher() to invalidate callbacks that happen after
             * close.
             */
            this.Qu = 0, this.Wu = null, this.stream = null, this.ju = new Xr(t, e);
        }
        /**
         * Returns true if start() has been called and no error has occurred. True
         * indicates the stream is open or in the process of opening (which
         * encompasses respecting backoff, getting auth tokens, and starting the
         * actual RPC). Use isOpen() to determine if the stream is open and ready for
         * outbound requests.
         */    Gu() {
            return 1 /* Starting */ === this.state || 2 /* Open */ === this.state || 4 /* Backoff */ === this.state;
        }
        /**
         * Returns true if the underlying RPC is open (the onOpen() listener has been
         * called) and the stream is ready for outbound requests.
         */    zu() {
            return 2 /* Open */ === this.state;
        }
        /**
         * Starts the RPC. Only allowed if isStarted() returns false. The stream is
         * not immediately ready for use: onOpen() will be invoked when the RPC is
         * ready for outbound requests, at which point isOpen() will return true.
         *
         * When start returns, isStarted() will return true.
         */    start() {
            3 /* Error */ !== this.state ? this.auth() : this.Hu();
        }
        /**
         * Stops the RPC. This call is idempotent and allowed regardless of the
         * current isStarted() state.
         *
         * When stop returns, isStarted() and isOpen() will both return false.
         */    async stop() {
            this.Gu() && await this.close(0 /* Initial */);
        }
        /**
         * After an error the stream will usually back off on the next attempt to
         * start it. If the error warrants an immediate restart of the stream, the
         * sender can use this to indicate that the receiver should not back off.
         *
         * Each error will call the onClose() listener. That function can decide to
         * inhibit backoff if required.
         */    Ju() {
            this.state = 0 /* Initial */ , this.ju.reset();
        }
        /**
         * Marks this stream as idle. If no further actions are performed on the
         * stream for one minute, the stream will automatically close itself and
         * notify the stream's onClose() handler with Status.OK. The stream will then
         * be in a !isStarted() state, requiring the caller to start the stream again
         * before further use.
         *
         * Only streams that are in state 'Open' can be marked idle, as all other
         * states imply pending network operations.
         */    Yu() {
            // Starts the idle time if we are in state 'Open' and are not yet already
            // running a timer (in which case the previous idle timeout still applies).
            this.zu() && null === this.Wu && (this.Wu = this.Xr.Er(this.qu, 6e4, (() => this.Xu())));
        }
        /** Sends a message to the underlying stream. */    Zu(t) {
            this.th(), this.stream.send(t);
        }
        /** Called by the idle timer when the stream should close due to inactivity. */    async Xu() {
            if (this.zu()) 
            // When timing out an idle stream there's no reason to force the stream into backoff when
            // it restarts so set the stream state to Initial instead of Error.
            return this.close(0 /* Initial */);
        }
        /** Marks the stream as active again. */    th() {
            this.Wu && (this.Wu.cancel(), this.Wu = null);
        }
        /**
         * Closes the stream and cleans up as necessary:
         *
         * * closes the underlying GRPC stream;
         * * calls the onClose handler with the given 'error';
         * * sets internal stream state to 'finalState';
         * * adjusts the backoff timer based on the error
         *
         * A new stream can be opened by calling start().
         *
         * @param finalState - the intended state of the stream after closing.
         * @param error - the error the connection was closed with.
         */    async close(t, e) {
            // Cancel any outstanding timers (they're guaranteed not to execute).
            this.th(), this.ju.cancel(), 
            // Invalidates any stream-related callbacks (e.g. from auth or the
            // underlying stream), guaranteeing they won't execute.
            this.Qu++, 3 /* Error */ !== t ? 
            // If this is an intentional close ensure we don't delay our next connection attempt.
            this.ju.reset() : e && e.code === x$1.RESOURCE_EXHAUSTED ? (
            // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)
            b(e.toString()), b("Using maximum backoff delay to prevent overloading the backend."), 
            this.ju.Mu()) : e && e.code === x$1.UNAUTHENTICATED && 
            // "unauthenticated" error means the token was rejected. Try force refreshing it in case it
            // just expired.
            this.Ku._(), 
            // Clean up the underlying stream because we are no longer interested in events.
            null !== this.stream && (this.eh(), this.stream.close(), this.stream = null), 
            // This state must be assigned before calling onClose() to allow the callback to
            // inhibit backoff or otherwise manipulate the state in its non-started state.
            this.state = t, 
            // Notify the listener that the stream closed.
            await this.listener.Eu(e);
        }
        /**
         * Can be overridden to perform additional cleanup before the stream is closed.
         * Calling super.tearDown() is not required.
         */    eh() {}
        auth() {
            this.state = 1 /* Starting */;
            const t = this.nh(this.Qu), e = this.Qu;
            // TODO(mikelehen): Just use dispatchIfNotClosed, but see TODO below.
                    this.Ku.getToken().then((t => {
                // Stream can be stopped while waiting for authentication.
                // TODO(mikelehen): We really should just use dispatchIfNotClosed
                // and let this dispatch onto the queue, but that opened a spec test can
                // of worms that I don't want to deal with in this PR.
                this.Qu === e && 
                // Normally we'd have to schedule the callback on the AsyncQueue.
                // However, the following calls are safe to be called outside the
                // AsyncQueue since they don't chain asynchronous calls
                this.sh(t);
            }), (e => {
                t((() => {
                    const t = new $(x$1.UNKNOWN, "Fetching auth token failed: " + e.message);
                    return this.ih(t);
                }));
            }));
        }
        sh(t) {
            const e = this.nh(this.Qu);
            this.stream = this.rh(t), this.stream.du((() => {
                e((() => (this.state = 2 /* Open */ , this.listener.du())));
            })), this.stream.Eu((t => {
                e((() => this.ih(t)));
            })), this.stream.onMessage((t => {
                e((() => this.onMessage(t)));
            }));
        }
        Hu() {
            this.state = 4 /* Backoff */ , this.ju.Fu((async () => {
                this.state = 0 /* Initial */ , this.start();
            }));
        }
        // Visible for tests
        ih(t) {
            // In theory the stream could close cleanly, however, in our current model
            // we never expect this to happen because if we stop a stream ourselves,
            // this callback will never be called. To prevent cases where we retry
            // without a backoff accidentally, we set the stream to error in all cases.
            return p$1("PersistentStream", `close with error: ${t}`), this.stream = null, this.close(3 /* Error */ , t);
        }
        /**
         * Returns a "dispatcher" function that dispatches operations onto the
         * AsyncQueue but only runs them if closeCount remains unchanged. This allows
         * us to turn auth / stream callbacks into no-ops if the stream is closed /
         * re-opened, etc.
         */    nh(t) {
            return e => {
                this.Xr.Rs((() => this.Qu === t ? e() : (p$1("PersistentStream", "stream callback skipped by getCloseGuardedDispatcher."), 
                Promise.resolve())));
            };
        }
    }

    /**
     * A PersistentStream that implements the Listen RPC.
     *
     * Once the Listen stream has called the onOpen() listener, any number of
     * listen() and unlisten() calls can be made to control what changes will be
     * sent from the server for ListenResponses.
     */ class to extends Zr {
        constructor(t, e, n, s, i) {
            super(t, "listen_stream_connection_backoff" /* ListenStreamConnectionBackoff */ , "listen_stream_idle" /* ListenStreamIdle */ , e, n, i), 
            this.Ut = s;
        }
        rh(t) {
            return this.Uu.Du("Listen", t);
        }
        onMessage(t) {
            // A successful response means the stream is healthy
            this.ju.reset();
            const e = ts(this.Ut, t), n = function(t) {
                // We have only reached a consistent snapshot for the entire stream if there
                // is a read_time set and it applies to all targets (i.e. the list of
                // targets is empty). The backend is guaranteed to send such responses.
                if (!("targetChange" in t)) return H$1.min();
                const e = t.targetChange;
                return e.targetIds && e.targetIds.length ? H$1.min() : e.readTime ? Un(e.readTime) : H$1.min();
            }(t);
            return this.listener.oh(e, n);
        }
        /**
         * Registers interest in the results of the given target. If the target
         * includes a resumeToken it will be included in the request. Results that
         * affect the target will be streamed back as WatchChange messages that
         * reference the targetId.
         */    ah(t) {
            const e = {};
            e.database = Hn(this.Ut), e.addTarget = function(t, e) {
                let n;
                const s = e.target;
                return n = qt(s) ? {
                    documents: is(t, s)
                } : {
                    query: rs(t, s)
                }, n.targetId = e.targetId, e.resumeToken.wt() > 0 ? n.resumeToken = Bn(t, e.resumeToken) : e.Ot.L(H$1.min()) > 0 && (
                // TODO(wuandy): Consider removing above check because it is most likely true.
                // Right now, many tests depend on this behaviour though (leaving min() out
                // of serialization).
                n.readTime = Ln(t, e.Ot.q())), n;
            }(this.Ut, t);
            const n = cs(this.Ut, t);
            n && (e.labels = n), this.Zu(e);
        }
        /**
         * Unregisters interest in the results of the target associated with the
         * given targetId.
         */    uh(t) {
            const e = {};
            e.database = Hn(this.Ut), e.removeTarget = t, this.Zu(e);
        }
    }

    /**
     * A Stream that implements the Write RPC.
     *
     * The Write RPC requires the caller to maintain special streamToken
     * state in between calls, to help the server understand which responses the
     * client has processed by the time the next request is made. Every response
     * will contain a streamToken; this value must be passed to the next
     * request.
     *
     * After calling start() on this stream, the next request must be a handshake,
     * containing whatever streamToken is on hand. Once a response to this
     * request is received, all pending mutations may be submitted. When
     * submitting multiple batches of mutations at the same time, it's
     * okay to use the same streamToken for the calls to writeMutations.
     *
     * TODO(b/33271235): Use proto types
     */ class eo extends Zr {
        constructor(t, e, n, s, i) {
            super(t, "write_stream_connection_backoff" /* WriteStreamConnectionBackoff */ , "write_stream_idle" /* WriteStreamIdle */ , e, n, i), 
            this.Ut = s, this.hh = !1;
        }
        /**
         * Tracks whether or not a handshake has been successfully exchanged and
         * the stream is ready to accept mutations.
         */    get lh() {
            return this.hh;
        }
        // Override of PersistentStream.start
        start() {
            this.hh = !1, this.lastStreamToken = void 0, super.start();
        }
        eh() {
            this.hh && this._h([]);
        }
        rh(t) {
            return this.Uu.Du("Write", t);
        }
        onMessage(t) {
            if (
            // Always capture the last stream token.
            C(!!t.streamToken), this.lastStreamToken = t.streamToken, this.hh) {
                // A successful first write response means the stream is healthy,
                // Note, that we could consider a successful handshake healthy, however,
                // the write itself might be causing an error we want to back off from.
                this.ju.reset();
                const e = ss(t.writeResults, t.commitTime), n = Un(t.commitTime);
                return this.listener.fh(n, e);
            }
            // The first response is always the handshake response
            return C(!t.writeResults || 0 === t.writeResults.length), this.hh = !0, this.listener.dh();
        }
        /**
         * Sends an initial streamToken to the server, performing the handshake
         * required to make the StreamingWrite RPC work. Subsequent
         * calls should wait until onHandshakeComplete was called.
         */    wh() {
            // TODO(dimond): Support stream resumption. We intentionally do not set the
            // stream token on the handshake, ignoring any stream token we might have.
            const t = {};
            t.database = Hn(this.Ut), this.Zu(t);
        }
        /** Sends a group of mutations to the Firestore backend to apply. */    _h(t) {
            const e = {
                streamToken: this.lastStreamToken,
                writes: t.map((t => es(this.Ut, t)))
            };
            this.Zu(e);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Datastore and its related methods are a wrapper around the external Google
     * Cloud Datastore grpc API, which provides an interface that is more convenient
     * for the rest of the client SDK architecture to consume.
     */
    /**
     * An implementation of Datastore that exposes additional state for internal
     * consumption.
     */
    class no extends class {} {
        constructor(t, e, n) {
            super(), this.credentials = t, this.Uu = e, this.Ut = n, this.Eh = !1;
        }
        Th() {
            if (this.Eh) throw new $(x$1.FAILED_PRECONDITION, "The client has already been terminated.");
        }
        /** Gets an auth token and invokes the provided RPC. */    yu(t, e, n) {
            return this.Th(), this.credentials.getToken().then((s => this.Uu.yu(t, e, n, s))).catch((t => {
                throw t.code === x$1.UNAUTHENTICATED && this.credentials._(), t;
            }));
        }
        /** Gets an auth token and invokes the provided RPC with streamed results. */    Su(t, e, n) {
            return this.Th(), this.credentials.getToken().then((s => this.Uu.Su(t, e, n, s))).catch((t => {
                throw t.code === x$1.UNAUTHENTICATED && this.credentials._(), t;
            }));
        }
        terminate() {
            this.Eh = !1;
        }
    }

    // TODO(firestorexp): Make sure there is only one Datastore instance per
    // firestore-exp client.
    /**
     * A component used by the RemoteStore to track the OnlineState (that is,
     * whether or not the client as a whole should be considered to be online or
     * offline), implementing the appropriate heuristics.
     *
     * In particular, when the client is trying to connect to the backend, we
     * allow up to MAX_WATCH_STREAM_FAILURES within ONLINE_STATE_TIMEOUT_MS for
     * a connection to succeed. If we have too many failures or the timeout elapses,
     * then we set the OnlineState to Offline, and the client will behave as if
     * it is offline (get()s will return cached data, etc.).
     */
    class so {
        constructor(t, e) {
            this.ls = t, this._a = e, 
            /** The current OnlineState. */
            this.state = "Unknown" /* Unknown */ , 
            /**
             * A count of consecutive failures to open the stream. If it reaches the
             * maximum defined by MAX_WATCH_STREAM_FAILURES, we'll set the OnlineState to
             * Offline.
             */
            this.Ih = 0, 
            /**
             * A timer that elapses after ONLINE_STATE_TIMEOUT_MS, at which point we
             * transition from OnlineState.Unknown to OnlineState.Offline without waiting
             * for the stream to actually fail (MAX_WATCH_STREAM_FAILURES times).
             */
            this.mh = null, 
            /**
             * Whether the client should log a warning message if it fails to connect to
             * the backend (initially true, cleared after a successful stream, or if we've
             * logged the message already).
             */
            this.Ah = !0;
        }
        /**
         * Called by RemoteStore when a watch stream is started (including on each
         * backoff attempt).
         *
         * If this is the first attempt, it sets the OnlineState to Unknown and starts
         * the onlineStateTimer.
         */    Rh() {
            0 === this.Ih && (this.Ph("Unknown" /* Unknown */), this.mh = this.ls.Er("online_state_timeout" /* OnlineStateTimeout */ , 1e4, (() => (this.mh = null, 
            this.Vh("Backend didn't respond within 10 seconds."), this.Ph("Offline" /* Offline */), 
            Promise.resolve()))));
        }
        /**
         * Updates our OnlineState as appropriate after the watch stream reports a
         * failure. The first failure moves us to the 'Unknown' state. We then may
         * allow multiple failures (based on MAX_WATCH_STREAM_FAILURES) before we
         * actually transition to the 'Offline' state.
         */    gh(t) {
            "Online" /* Online */ === this.state ? this.Ph("Unknown" /* Unknown */) : (this.Ih++, 
            this.Ih >= 1 && (this.yh(), this.Vh(`Connection failed 1 times. Most recent error: ${t.toString()}`), 
            this.Ph("Offline" /* Offline */)));
        }
        /**
         * Explicitly sets the OnlineState to the specified state.
         *
         * Note that this resets our timers / failure counters, etc. used by our
         * Offline heuristics, so must not be used in place of
         * handleWatchStreamStart() and handleWatchStreamFailure().
         */    set(t) {
            this.yh(), this.Ih = 0, "Online" /* Online */ === t && (
            // We've connected to watch at least once. Don't warn the developer
            // about being offline going forward.
            this.Ah = !1), this.Ph(t);
        }
        Ph(t) {
            t !== this.state && (this.state = t, this._a(t));
        }
        Vh(t) {
            const e = `Could not reach Cloud Firestore backend. ${t}\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.`;
            this.Ah ? (b(e), this.Ah = !1) : p$1("OnlineStateTracker", e);
        }
        yh() {
            null !== this.mh && (this.mh.cancel(), this.mh = null);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class io {
        constructor(
        /**
         * The local store, used to fill the write pipeline with outbound mutations.
         */
        t, 
        /** The client-side proxy for interacting with the backend. */
        e, n, s, i) {
            this.ph = t, this.bh = e, this.ls = n, this.Sh = {}, 
            /**
             * A list of up to MAX_PENDING_WRITES writes that we have fetched from the
             * LocalStore via fillWritePipeline() and have or will send to the write
             * stream.
             *
             * Whenever writePipeline.length > 0 the RemoteStore will attempt to start or
             * restart the write stream. When the stream is established the writes in the
             * pipeline will be sent in order.
             *
             * Writes remain in writePipeline until they are acknowledged by the backend
             * and thus will automatically be re-sent if the stream is interrupted /
             * restarted before they're acknowledged.
             *
             * Write responses from the backend are linked to their originating request
             * purely based on order, and so we can just shift() writes from the front of
             * the writePipeline as we receive responses.
             */
            this.Dh = [], 
            /**
             * A mapping of watched targets that the client cares about tracking and the
             * user has explicitly called a 'listen' for this target.
             *
             * These targets may or may not have been sent to or acknowledged by the
             * server. On re-establishing the listen stream, these targets should be sent
             * to the server. The targets removed with unlistens are removed eagerly
             * without waiting for confirmation from the listen stream.
             */
            this.Ch = new Map, 
            /**
             * A set of reasons for why the RemoteStore may be offline. If empty, the
             * RemoteStore may start its network connections.
             */
            this.Nh = new Set, 
            /**
             * Event handlers that get called when the network is disabled or enabled.
             *
             * PORTING NOTE: These functions are used on the Web client to create the
             * underlying streams (to support tree-shakeable streams). On Android and iOS,
             * the streams are created during construction of RemoteStore.
             */
            this.xh = [], this.$h = i, this.$h.ru((t => {
                n.Rs((async () => {
                    // Porting Note: Unlike iOS, `restartNetwork()` is called even when the
                    // network becomes unreachable as we don't have any other way to tear
                    // down our streams.
                    fo(this) && (p$1("RemoteStore", "Restarting streams for network reachability change."), 
                    await async function(t) {
                        const e = N$1(t);
                        e.Nh.add(4 /* ConnectivityChange */), await oo(e), e.Oh.set("Unknown" /* Unknown */), 
                        e.Nh.delete(4 /* ConnectivityChange */), await ro(e);
                    }(this));
                }));
            })), this.Oh = new so(n, s);
        }
    }

    async function ro(t) {
        if (fo(t)) for (const e of t.xh) await e(/* enabled= */ !0);
    }

    /**
     * Temporarily disables the network. The network can be re-enabled using
     * enableNetwork().
     */ async function oo(t) {
        for (const e of t.xh) await e(/* enabled= */ !1);
    }

    /**
     * Starts new listen for the given target. Uses resume token if provided. It
     * is a no-op if the target of given `TargetData` is already being listened to.
     */
    function co(t, e) {
        const n = N$1(t);
        n.Ch.has(e.targetId) || (
        // Mark this as something the client is currently listening for.
        n.Ch.set(e.targetId, e), _o(n) ? 
        // The listen will be sent in onWatchStreamOpen
        lo(n) : Co(n).zu() && uo(n, e));
    }

    /**
     * Removes the listen from server. It is a no-op if the given target id is
     * not being listened to.
     */ function ao(t, e) {
        const n = N$1(t), s = Co(n);
        n.Ch.delete(e), s.zu() && ho(n, e), 0 === n.Ch.size && (s.zu() ? s.Yu() : fo(n) && 
        // Revert to OnlineState.Unknown if the watch stream is not open and we
        // have no listeners, since without any listens to send we cannot
        // confirm if the stream is healthy and upgrade to OnlineState.Online.
        n.Oh.set("Unknown" /* Unknown */));
    }

    /**
     * We need to increment the the expected number of pending responses we're due
     * from watch so we wait for the ack to process any messages from this target.
     */ function uo(t, e) {
        t.kh.rn(e.targetId), Co(t).ah(e);
    }

    /**
     * We need to increment the expected number of pending responses we're due
     * from watch so we wait for the removal on the server before we process any
     * messages from this target.
     */ function ho(t, e) {
        t.kh.rn(e), Co(t).uh(e);
    }

    function lo(t) {
        t.kh = new xn({
            bn: e => t.Sh.bn(e),
            vn: e => t.Ch.get(e) || null
        }), Co(t).start(), t.Oh.Rh();
    }

    /**
     * Returns whether the watch stream should be started because it's necessary
     * and has not yet been started.
     */ function _o(t) {
        return fo(t) && !Co(t).Gu() && t.Ch.size > 0;
    }

    function fo(t) {
        return 0 === N$1(t).Nh.size;
    }

    function wo(t) {
        t.kh = void 0;
    }

    async function Eo(t) {
        t.Ch.forEach(((e, n) => {
            uo(t, e);
        }));
    }

    async function To(t, e) {
        wo(t), 
        // If we still need the watch stream, retry the connection.
        _o(t) ? (t.Oh.gh(e), lo(t)) : 
        // No need to restart watch stream because there are no active targets.
        // The online state is set to unknown because there is no active attempt
        // at establishing a connection
        t.Oh.set("Unknown" /* Unknown */);
    }

    async function Io(t, e, n) {
        if (
        // Mark the client as online since we got a message from the server
        t.Oh.set("Online" /* Online */), e instanceof Cn && 2 /* Removed */ === e.state && e.cause) 
        // There was an error on a target, don't wait for a consistent snapshot
        // to raise events
        try {
            await 
            /** Handles an error on a target */
            async function(t, e) {
                const n = e.cause;
                for (const s of e.targetIds) 
                // A watched target might have been removed already.
                t.Ch.has(s) && (await t.Sh.Mh(s, n), t.Ch.delete(s), t.kh.removeTarget(s));
            }
            /**
     * Attempts to fill our write pipeline with writes from the LocalStore.
     *
     * Called internally to bootstrap or refill the write pipeline and by
     * SyncEngine whenever there are new mutations to process.
     *
     * Starts the write stream if necessary.
     */ (t, e);
        } catch (n) {
            p$1("RemoteStore", "Failed to remove targets %s: %s ", e.targetIds.join(","), n), 
            await mo(t, n);
        } else if (e instanceof Sn ? t.kh.fn(e) : e instanceof Dn ? t.kh.Rn(e) : t.kh.En(e), 
        !n.isEqual(H$1.min())) try {
            const e = await _r(t.ph);
            n.L(e) >= 0 && 
            // We have received a target change with a global snapshot if the snapshot
            // version is not equal to SnapshotVersion.min().
            await 
            /**
     * Takes a batch of changes from the Datastore, repackages them as a
     * RemoteEvent, and passes that on to the listener, which is typically the
     * SyncEngine.
     */
            function(t, e) {
                const n = t.kh.gn(e);
                // Update in-memory resume tokens. LocalStore will update the
                // persistent view of these when applying the completed RemoteEvent.
                            return n.xe.forEach(((n, s) => {
                    if (n.resumeToken.wt() > 0) {
                        const i = t.Ch.get(s);
                        // A watched target might have been removed already.
                                            i && t.Ch.set(s, i.Mt(n.resumeToken, e));
                    }
                })), 
                // Re-establish listens for the targets that have been invalidated by
                // existence filter mismatches.
                n.$e.forEach((e => {
                    const n = t.Ch.get(e);
                    if (!n) 
                    // A watched target might have been removed already.
                    return;
                    // Clear the resume token for the target, since we're in a known mismatch
                    // state.
                                    t.Ch.set(e, n.Mt(rt.Et, n.Ot)), 
                    // Cause a hard reset by unwatching and rewatching immediately, but
                    // deliberately don't send a resume token so that we get a full update.
                    ho(t, e);
                    // Mark the target we send as being on behalf of an existence filter
                    // mismatch, but don't actually retain that in listenTargets. This ensures
                    // that we flag the first re-listen this way without impacting future
                    // listens of this target (that might happen e.g. on reconnect).
                    const s = new Re(n.target, e, 1 /* ExistenceFilterMismatch */ , n.sequenceNumber);
                    uo(t, s);
                })), t.Sh.Fh(n);
            }(t, n);
        } catch (e) {
            p$1("RemoteStore", "Failed to raise snapshot:", e), await mo(t, e);
        }
    }

    /**
     * Recovery logic for IndexedDB errors that takes the network offline until
     * `op` succeeds. Retries are scheduled with backoff using
     * `enqueueRetryable()`. If `op()` is not provided, IndexedDB access is
     * validated via a generic operation.
     *
     * The returned Promise is resolved once the network is disabled and before
     * any retry attempt.
     */ async function mo(t, e, n) {
        if (!ys(e)) throw e;
        t.Nh.add(1 /* IndexedDbFailed */), 
        // Disable network and raise offline snapshots
        await oo(t), t.Oh.set("Offline" /* Offline */), n || (
        // Use a simple read operation to determine if IndexedDB recovered.
        // Ideally, we would expose a health check directly on SimpleDb, but
        // RemoteStore only has access to persistence through LocalStore.
        n = () => _r(t.ph)), 
        // Probe IndexedDB periodically and re-enable network
        t.ls.yo((async () => {
            p$1("RemoteStore", "Retrying IndexedDB access"), await n(), t.Nh.delete(1 /* IndexedDbFailed */), 
            await ro(t);
        }));
    }

    /**
     * Executes `op`. If `op` fails, takes the network offline until `op`
     * succeeds. Returns after the first attempt.
     */ function Ao(t, e) {
        return e().catch((n => mo(t, n, e)));
    }

    async function Ro(t) {
        const e = N$1(t), n = No(e);
        let s = e.Dh.length > 0 ? e.Dh[e.Dh.length - 1].batchId : -1;
        for (;Po(e); ) try {
            const t = await wr(e.ph, s);
            if (null === t) {
                0 === e.Dh.length && n.Yu();
                break;
            }
            s = t.batchId, Vo(e, t);
        } catch (t) {
            await mo(e, t);
        }
        go(e) && yo(e);
    }

    /**
     * Returns true if we can add to the write pipeline (i.e. the network is
     * enabled and the write pipeline is not full).
     */ function Po(t) {
        return fo(t) && t.Dh.length < 10;
    }

    /**
     * Queues additional writes to be sent to the write stream, sending them
     * immediately if the write stream is established.
     */ function Vo(t, e) {
        t.Dh.push(e);
        const n = No(t);
        n.zu() && n.lh && n._h(e.mutations);
    }

    function go(t) {
        return fo(t) && !No(t).Gu() && t.Dh.length > 0;
    }

    function yo(t) {
        No(t).start();
    }

    async function po(t) {
        No(t).wh();
    }

    async function bo(t) {
        const e = No(t);
        // Send the write pipeline now that the stream is established.
            for (const n of t.Dh) e._h(n.mutations);
    }

    async function vo(t, e, n) {
        const s = t.Dh.shift(), i = ii.from(s, e, n);
        await Ao(t, (() => t.Sh.Lh(i))), 
        // It's possible that with the completion of this mutation another
        // slot has freed up.
        await Ro(t);
    }

    async function So(t, e) {
        // If the write stream closed after the write handshake completes, a write
        // operation failed and we fail the pending operation.
        e && No(t).lh && 
        // This error affects the actual write.
        await async function(t, e) {
            // Only handle permanent errors here. If it's transient, just let the retry
            // logic kick in.
            if (n = e.code, on(n) && n !== x$1.ABORTED) {
                // This was a permanent error, the request itself was the problem
                // so it's not going to succeed if we resend it.
                const n = t.Dh.shift();
                // In this case it's also unlikely that the server itself is melting
                // down -- this was just a bad request so inhibit backoff on the next
                // restart.
                            No(t).Ju(), await Ao(t, (() => t.Sh.Bh(n.batchId, e))), 
                // It's possible that with the completion of this mutation
                // another slot has freed up.
                await Ro(t);
            }
            var n;
        }(t, e), 
        // The write stream might have been started by refilling the write
        // pipeline for failed writes
        go(t) && yo(t);
    }

    /**
     * Toggles the network state when the client gains or loses its primary lease.
     */
    async function Do(t, e) {
        const n = N$1(t);
        e ? (n.Nh.delete(2 /* IsSecondary */), await ro(n)) : e || (n.Nh.add(2 /* IsSecondary */), 
        await oo(n), n.Oh.set("Unknown" /* Unknown */));
    }

    /**
     * If not yet initialized, registers the WatchStream and its network state
     * callback with `remoteStoreImpl`. Returns the existing stream if one is
     * already available.
     *
     * PORTING NOTE: On iOS and Android, the WatchStream gets registered on startup.
     * This is not done on Web to allow it to be tree-shaken.
     */ function Co(t) {
        return t.qh || (
        // Create stream (but note that it is not started yet).
        t.qh = function(t, e, n) {
            const s = N$1(t);
            return s.Th(), new to(e, s.Uu, s.credentials, s.Ut, n);
        }
        /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ (t.bh, t.ls, {
            du: Eo.bind(null, t),
            Eu: To.bind(null, t),
            oh: Io.bind(null, t)
        }), t.xh.push((async e => {
            e ? (t.qh.Ju(), _o(t) ? lo(t) : t.Oh.set("Unknown" /* Unknown */)) : (await t.qh.stop(), 
            wo(t));
        }))), t.qh;
    }

    /**
     * If not yet initialized, registers the WriteStream and its network state
     * callback with `remoteStoreImpl`. Returns the existing stream if one is
     * already available.
     *
     * PORTING NOTE: On iOS and Android, the WriteStream gets registered on startup.
     * This is not done on Web to allow it to be tree-shaken.
     */ function No(t) {
        return t.Uh || (
        // Create stream (but note that it is not started yet).
        t.Uh = function(t, e, n) {
            const s = N$1(t);
            return s.Th(), new eo(e, s.Uu, s.credentials, s.Ut, n);
        }(t.bh, t.ls, {
            du: po.bind(null, t),
            Eu: So.bind(null, t),
            dh: bo.bind(null, t),
            fh: vo.bind(null, t)
        }), t.xh.push((async e => {
            e ? (t.Uh.Ju(), 
            // This will start the write stream if necessary.
            await Ro(t)) : (await t.Uh.stop(), t.Dh.length > 0 && (p$1("RemoteStore", `Stopping write stream with ${t.Dh.length} pending writes`), 
            t.Dh = []));
        }))), t.Uh;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Holds the listeners and the last received ViewSnapshot for a query being
     * tracked by EventManager.
     */ class xo {
        constructor() {
            this.Kh = void 0, this.listeners = [];
        }
    }

    class $o {
        constructor() {
            this.queries = new pi((t => Ee(t)), we), this.onlineState = "Unknown" /* Unknown */ , 
            this.Qh = new Set;
        }
    }

    async function Oo(t, e) {
        const n = N$1(t), s = e.query;
        let i = !1, r = n.queries.get(s);
        if (r || (i = !0, r = new xo), i) try {
            r.Kh = await n.Wh(s);
        } catch (t) {
            const n = Cs(t, `Initialization of query '${Te(e.query)}' failed`);
            return void e.onError(n);
        }
        n.queries.set(s, r), r.listeners.push(e);
        // Run global snapshot listeners if a consistent snapshot has been emitted.
        e.jh(n.onlineState);
        if (r.Kh) {
            e.Gh(r.Kh) && Lo(n);
        }
    }

    async function ko(t, e) {
        const n = N$1(t), s = e.query;
        let i = !1;
        const r = n.queries.get(s);
        if (r) {
            const t = r.listeners.indexOf(e);
            t >= 0 && (r.listeners.splice(t, 1), i = 0 === r.listeners.length);
        }
        if (i) return n.queries.delete(s), n.zh(s);
    }

    function Mo(t, e) {
        const n = N$1(t);
        let s = !1;
        for (const t of e) {
            const e = t.query, i = n.queries.get(e);
            if (i) {
                for (const e of i.listeners) e.Gh(t) && (s = !0);
                i.Kh = t;
            }
        }
        s && Lo(n);
    }

    function Fo(t, e, n) {
        const s = N$1(t), i = s.queries.get(e);
        if (i) for (const t of i.listeners) t.onError(n);
        // Remove all listeners. NOTE: We don't need to call syncEngine.unlisten()
        // after an error.
            s.queries.delete(e);
    }

    // Call all global snapshot listeners that have been set.
    function Lo(t) {
        t.Qh.forEach((t => {
            t.next();
        }));
    }

    /**
     * QueryListener takes a series of internal view snapshots and determines
     * when to raise the event.
     *
     * It uses an Observer to dispatch events.
     */ class Bo {
        constructor(t, e, n) {
            this.query = t, this.Hh = e, 
            /**
             * Initial snapshots (e.g. from cache) may not be propagated to the wrapped
             * observer. This flag is set to true once we've actually raised an event.
             */
            this.Jh = !1, this.Yh = null, this.onlineState = "Unknown" /* Unknown */ , this.options = n || {};
        }
        /**
         * Applies the new ViewSnapshot to this listener, raising a user-facing event
         * if applicable (depending on what changed, whether the user has opted into
         * metadata-only changes, etc.). Returns true if a user-facing event was
         * indeed raised.
         */    Gh(t) {
            if (!this.options.includeMetadataChanges) {
                // Remove the metadata only changes.
                const e = [];
                for (const n of t.docChanges) 3 /* Metadata */ !== n.type && e.push(n);
                t = new pn(t.query, t.docs, t.ve, e, t.Se, t.fromCache, t.De, 
                /* excludesMetadataChanges= */ !0);
            }
            let e = !1;
            return this.Jh ? this.Xh(t) && (this.Hh.next(t), e = !0) : this.Zh(t, this.onlineState) && (this.tl(t), 
            e = !0), this.Yh = t, e;
        }
        onError(t) {
            this.Hh.error(t);
        }
        /** Returns whether a snapshot was raised. */    jh(t) {
            this.onlineState = t;
            let e = !1;
            return this.Yh && !this.Jh && this.Zh(this.Yh, t) && (this.tl(this.Yh), e = !0), 
            e;
        }
        Zh(t, e) {
            // Always raise the first event when we're synced
            if (!t.fromCache) return !0;
            // NOTE: We consider OnlineState.Unknown as online (it should become Offline
            // or Online if we wait long enough).
                    const n = "Offline" /* Offline */ !== e;
            // Don't raise the event if we're online, aren't synced yet (checked
            // above) and are waiting for a sync.
                    return (!this.options.el || !n) && (!t.docs.Y() || "Offline" /* Offline */ === e);
            // Raise data from cache if we have any documents or we are offline
            }
        Xh(t) {
            // We don't need to handle includeDocumentMetadataChanges here because
            // the Metadata only changes have already been stripped out if needed.
            // At this point the only changes we will see are the ones we should
            // propagate.
            if (t.docChanges.length > 0) return !0;
            const e = this.Yh && this.Yh.hasPendingWrites !== t.hasPendingWrites;
            return !(!t.De && !e) && !0 === this.options.includeMetadataChanges;
            // Generally we should have hit one of the cases above, but it's possible
            // to get here if there were only metadata docChanges and they got
            // stripped out.
            }
        tl(t) {
            t = pn.Ne(t.query, t.docs, t.Se, t.fromCache), this.Jh = !0, this.Hh.next(t);
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A complete element in the bundle stream, together with the byte length it
     * occupies in the stream.
     */ class qo {
        constructor(t, 
        // How many bytes this element takes to store in the bundle.
        e) {
            this.payload = t, this.byteLength = e;
        }
        nl() {
            return "metadata" in this.payload;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Helper to convert objects from bundles to model objects in the SDK.
     */ class Uo {
        constructor(t) {
            this.Ut = t;
        }
        Rc(t) {
            return jn(this.Ut, t);
        }
        /**
         * Converts a BundleDocument to a MaybeDocument.
         */    Pc(t) {
            return t.metadata.exists ? Xn(this.Ut, t.document, !1) : new $t(this.Rc(t.metadata.name), this.Vc(t.metadata.readTime));
        }
        Vc(t) {
            return Un(t);
        }
    }

    /**
     * A class to process the elements from a bundle, load them into local
     * storage and provide progress update while loading.
     */ class Ko {
        constructor(t, e, n) {
            this.sl = t, this.ph = e, this.Ut = n, 
            /** Batched queries to be saved into storage */
            this.queries = [], 
            /** Batched documents to be saved into storage */
            this.documents = [], this.progress = Qo(t);
        }
        /**
         * Adds an element from the bundle to the loader.
         *
         * Returns a new progress if adding the element leads to a new progress,
         * otherwise returns null.
         */    il(t) {
            this.progress.bytesLoaded += t.byteLength;
            let e = this.progress.documentsLoaded;
            return t.payload.namedQuery ? this.queries.push(t.payload.namedQuery) : t.payload.documentMetadata ? (this.documents.push({
                metadata: t.payload.documentMetadata
            }), t.payload.documentMetadata.exists || ++e) : t.payload.document && (this.documents[this.documents.length - 1].document = t.payload.document, 
            ++e), e !== this.progress.documentsLoaded ? (this.progress.documentsLoaded = e, 
            Object.assign({}, this.progress)) : null;
        }
        rl(t) {
            const e = new Map, n = new Uo(this.Ut);
            for (const s of t) if (s.metadata.queries) {
                const t = n.Rc(s.metadata.name);
                for (const n of s.metadata.queries) {
                    const s = (e.get(n) || Rn()).add(t);
                    e.set(n, s);
                }
            }
            return e;
        }
        /**
         * Update the progress to 'Success' and return the updated progress.
         */    async complete() {
            const t = await Pr(this.ph, new Uo(this.Ut), this.documents, this.sl.id), e = this.rl(this.documents);
            for (const t of this.queries) await Vr(this.ph, t, e.get(t.name));
            return this.progress.taskState = "Success", new ir(Object.assign({}, this.progress), t);
        }
    }

    /**
     * Returns a `LoadBundleTaskProgress` representing the initial progress of
     * loading a bundle.
     */ function Qo(t) {
        return {
            taskState: "Running",
            documentsLoaded: 0,
            bytesLoaded: 0,
            totalDocuments: t.totalDocuments,
            totalBytes: t.totalBytes
        };
    }

    /**
     * Returns a `LoadBundleTaskProgress` representing the progress that the loading
     * has succeeded.
     */
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class Wo {
        constructor(t) {
            this.key = t;
        }
    }

    class jo {
        constructor(t) {
            this.key = t;
        }
    }

    /**
     * View is responsible for computing the final merged truth of what docs are in
     * a query. It gets notified of local and remote changes to docs, and applies
     * the query filters and limits to determine the most correct possible results.
     */ class Go {
        constructor(t, 
        /** Documents included in the remote target */
        e) {
            this.query = t, this.ol = e, this.cl = null, 
            /**
             * A flag whether the view is current with the backend. A view is considered
             * current after it has seen the current flag from the backend and did not
             * lose consistency within the watch stream (e.g. because of an existence
             * filter mismatch).
             */
            this.Le = !1, 
            /** Documents in the view but not in the remote target */
            this.al = Rn(), 
            /** Document Keys that have local changes */
            this.Se = Rn(), this.ul = me(t), this.hl = new gn(this.ul);
        }
        /**
         * The set of remote documents that the server has told us belongs to the target associated with
         * this view.
         */    get ll() {
            return this.ol;
        }
        /**
         * Iterates over a set of doc changes, applies the query limit, and computes
         * what the new results should be, what the changes were, and whether we may
         * need to go back to the local cache for more results. Does not make any
         * changes to the view.
         * @param docChanges - The doc changes to apply to this view.
         * @param previousChanges - If this is being called with a refill, then start
         *        with this set of docs and changes instead of the current view.
         * @returns a new set of docs, changes, and refill flag.
         */    _l(t, e) {
            const n = e ? e.fl : new yn, s = e ? e.hl : this.hl;
            let i = e ? e.Se : this.Se, r = s, o = !1;
            // Track the last doc in a (full) limit. This is necessary, because some
            // update (a delete, or an update moving a doc past the old limit) might
            // mean there is some other document in the local cache that either should
            // come (1) between the old last limit doc and the new last document, in the
            // case of updates, or (2) after the new last document, in the case of
            // deletes. So we keep this doc at the old limit to compare the updates to.
            // Note that this should never get used in a refill (when previousChanges is
            // set), because there will only be adds -- no deletes or updates.
            const c = ce(this.query) && s.size === this.query.limit ? s.last() : null, a = ae(this.query) && s.size === this.query.limit ? s.first() : null;
            // Drop documents out to meet limit/limitToLast requirement.
            if (t.Yt(((t, e) => {
                const u = s.get(t);
                let h = e instanceof xt ? e : null;
                h && (h = Ie(this.query, h) ? h : null);
                const l = !!u && this.Se.has(u.key), _ = !!h && (h.gt || 
                // We only consider committed mutations for documents that were
                // mutated during the lifetime of the view.
                this.Se.has(h.key) && h.hasCommittedMutations);
                let f = !1;
                // Calculate change
                            if (u && h) {
                    u.data().isEqual(h.data()) ? l !== _ && (n.track({
                        type: 3 /* Metadata */ ,
                        doc: h
                    }), f = !0) : this.dl(u, h) || (n.track({
                        type: 2 /* Modified */ ,
                        doc: h
                    }), f = !0, (c && this.ul(h, c) > 0 || a && this.ul(h, a) < 0) && (
                    // This doc moved from inside the limit to outside the limit.
                    // That means there may be some other doc in the local cache
                    // that should be included instead.
                    o = !0));
                } else !u && h ? (n.track({
                    type: 0 /* Added */ ,
                    doc: h
                }), f = !0) : u && !h && (n.track({
                    type: 1 /* Removed */ ,
                    doc: u
                }), f = !0, (c || a) && (
                // A doc was removed from a full limit query. We'll need to
                // requery from the local cache to see if we know about some other
                // doc that should be in the results.
                o = !0));
                f && (h ? (r = r.add(h), i = _ ? i.add(t) : i.delete(t)) : (r = r.delete(t), i = i.delete(t)));
            })), ce(this.query) || ae(this.query)) for (;r.size > this.query.limit; ) {
                const t = ce(this.query) ? r.last() : r.first();
                r = r.delete(t.key), i = i.delete(t.key), n.track({
                    type: 1 /* Removed */ ,
                    doc: t
                });
            }
            return {
                hl: r,
                fl: n,
                hc: o,
                Se: i
            };
        }
        dl(t, e) {
            // We suppress the initial change event for documents that were modified as
            // part of a write acknowledgment (e.g. when the value of a server transform
            // is applied) as Watch will send us the same document again.
            // By suppressing the event, we only raise two user visible events (one with
            // `hasPendingWrites` and the final state of the document) instead of three
            // (one with `hasPendingWrites`, the modified document with
            // `hasPendingWrites` and the final state of the document).
            return t.gt && e.hasCommittedMutations && !e.gt;
        }
        /**
         * Updates the view with the given ViewDocumentChanges and optionally updates
         * limbo docs and sync state from the provided target change.
         * @param docChanges - The set of changes to make to the view's docs.
         * @param updateLimboDocuments - Whether to update limbo documents based on
         *        this change.
         * @param targetChange - A target change to apply for computing limbo docs and
         *        sync state.
         * @returns A new ViewChange with the given docs, changes, and sync state.
         */
        // PORTING NOTE: The iOS/Android clients always compute limbo document changes.
        di(t, e, n) {
            const s = this.hl;
            this.hl = t.hl, this.Se = t.Se;
            // Sort changes based on type and query comparator
            const i = t.fl.be();
            i.sort(((t, e) => function(t, e) {
                const n = t => {
                    switch (t) {
                      case 0 /* Added */ :
                        return 1;

                      case 2 /* Modified */ :
                      case 3 /* Metadata */ :
                        // A metadata change is converted to a modified change at the public
                        // api layer.  Since we sort by document key and then change type,
                        // metadata and modified changes must be sorted equivalently.
                        return 2;

                      case 1 /* Removed */ :
                        return 0;

                      default:
                        return D$1();
                    }
                };
                return n(t) - n(e);
            }
            /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ (t.type, e.type) || this.ul(t.doc, e.doc))), this.wl(n);
            const r = e ? this.El() : [], o = 0 === this.al.size && this.Le ? 1 /* Synced */ : 0 /* Local */ , c = o !== this.cl;
            if (this.cl = o, 0 !== i.length || c) {
                return {
                    snapshot: new pn(this.query, t.hl, s, i, t.Se, 0 /* Local */ === o, c, 
                    /* excludesMetadataChanges= */ !1),
                    Tl: r
                };
            }
            // no changes
            return {
                Tl: r
            };
        }
        /**
         * Applies an OnlineState change to the view, potentially generating a
         * ViewChange if the view's syncState changes as a result.
         */    jh(t) {
            return this.Le && "Offline" /* Offline */ === t ? (
            // If we're offline, set `current` to false and then call applyChanges()
            // to refresh our syncState and generate a ViewChange as appropriate. We
            // are guaranteed to get a new TargetChange that sets `current` back to
            // true once the client is back online.
            this.Le = !1, this.di({
                hl: this.hl,
                fl: new yn,
                Se: this.Se,
                hc: !1
            }, 
            /* updateLimboDocuments= */ !1)) : {
                Tl: []
            };
        }
        /**
         * Returns whether the doc for the given key should be in limbo.
         */    Il(t) {
            // If the remote end says it's part of this query, it's not in limbo.
            return !this.ol.has(t) && (
            // The local store doesn't think it's a result, so it shouldn't be in limbo.
            !!this.hl.has(t) && !this.hl.get(t).gt);
        }
        /**
         * Updates syncedDocuments, current, and limbo docs based on the given change.
         * Returns the list of changes to which docs are in limbo.
         */    wl(t) {
            t && (t.Be.forEach((t => this.ol = this.ol.add(t))), t.qe.forEach((t => {})), t.Ue.forEach((t => this.ol = this.ol.delete(t))), 
            this.Le = t.Le);
        }
        El() {
            // We can only determine limbo documents when we're in-sync with the server.
            if (!this.Le) return [];
            // TODO(klimt): Do this incrementally so that it's not quadratic when
            // updating many documents.
                    const t = this.al;
            this.al = Rn(), this.hl.forEach((t => {
                this.Il(t.key) && (this.al = this.al.add(t.key));
            }));
            // Diff the new limbo docs with the old limbo docs.
            const e = [];
            return t.forEach((t => {
                this.al.has(t) || e.push(new jo(t));
            })), this.al.forEach((n => {
                t.has(n) || e.push(new Wo(n));
            })), e;
        }
        /**
         * Update the in-memory state of the current view with the state read from
         * persistence.
         *
         * We update the query view whenever a client's primary status changes:
         * - When a client transitions from primary to secondary, it can miss
         *   LocalStorage updates and its query views may temporarily not be
         *   synchronized with the state on disk.
         * - For secondary to primary transitions, the client needs to update the list
         *   of `syncedDocuments` since secondary clients update their query views
         *   based purely on synthesized RemoteEvents.
         *
         * @param queryResult.documents - The documents that match the query according
         * to the LocalStore.
         * @param queryResult.remoteKeys - The keys of the documents that match the
         * query according to the backend.
         *
         * @returns The ViewChange that resulted from this synchronization.
         */
        // PORTING NOTE: Multi-tab only.
        ml(t) {
            this.ol = t.Ac, this.al = Rn();
            const e = this._l(t.documents);
            return this.di(e, /*updateLimboDocuments=*/ !0);
        }
        /**
         * Returns a view snapshot as if this query was just listened to. Contains
         * a document add for every existing document and the `fromCache` and
         * `hasPendingWrites` status of the already established view.
         */
        // PORTING NOTE: Multi-tab only.
        Al() {
            return pn.Ne(this.query, this.hl, this.Se, 0 /* Local */ === this.cl);
        }
    }

    /**
     * QueryView contains all of the data that SyncEngine needs to keep track of for
     * a particular query.
     */
    class zo {
        constructor(
        /**
         * The query itself.
         */
        t, 
        /**
         * The target number created by the client that is used in the watch
         * stream to identify this query.
         */
        e, 
        /**
         * The view is responsible for computing the final merged truth of what
         * docs are in the query. It gets notified of local and remote changes,
         * and applies the query filters and limits to determine the most correct
         * possible results.
         */
        n) {
            this.query = t, this.targetId = e, this.view = n;
        }
    }

    /** Tracks a limbo resolution. */ class Ho {
        constructor(t) {
            this.key = t, 
            /**
             * Set to true once we've received a document. This is used in
             * getRemoteKeysForTarget() and ultimately used by WatchChangeAggregator to
             * decide whether it needs to manufacture a delete event for the target once
             * the target is CURRENT.
             */
            this.Rl = !1;
        }
    }

    /**
     * An implementation of `SyncEngine` coordinating with other parts of SDK.
     *
     * The parts of SyncEngine that act as a callback to RemoteStore need to be
     * registered individually. This is done in `syncEngineWrite()` and
     * `syncEngineListen()` (as well as `applyPrimaryState()`) as these methods
     * serve as entry points to RemoteStore's functionality.
     *
     * Note: some field defined in this class might have public access level, but
     * the class is not exported so they are only accessible from this module.
     * This is useful to implement optional features (like bundles) in free
     * functions, such that they are tree-shakeable.
     */ class Jo {
        constructor(t, e, n, 
        // PORTING NOTE: Manages state synchronization in multi-tab environments.
        s, i, r) {
            this.ph = t, this.Pl = e, this.Vl = n, this.gl = s, this.currentUser = i, this.yl = r, 
            this.pl = {}, this.bl = new pi((t => Ee(t)), we), this.vl = new Map, 
            /**
             * The keys of documents that are in limbo for which we haven't yet started a
             * limbo resolution query. The strings in this set are the result of calling
             * `key.path.canonicalString()` where `key` is a `DocumentKey` object.
             *
             * The `Set` type was chosen because it provides efficient lookup and removal
             * of arbitrary elements and it also maintains insertion order, providing the
             * desired queue-like FIFO semantics.
             */
            this.Sl = new Set, 
            /**
             * Keeps track of the target ID for each document that is in limbo with an
             * active target.
             */
            this.Dl = new an(tt.K), 
            /**
             * Keeps track of the information about an active limbo resolution for each
             * active target ID that was started for the purpose of limbo resolution.
             */
            this.Cl = new Map, this.Nl = new yr, 
            /** Stores user completion handlers, indexed by User and BatchId. */
            this.xl = {}, 
            /** Stores user callbacks waiting for all pending writes to be acknowledged. */
            this.$l = new Map, this.Ol = Oi.Fi(), this.onlineState = "Unknown" /* Unknown */ , 
            // The primary state is set to `true` or `false` immediately after Firestore
            // startup. In the interim, a client should only be considered primary if
            // `isPrimary` is true.
            this.kl = void 0;
        }
        get Ml() {
            return !0 === this.kl;
        }
    }

    /**
     * Initiates the new listen, resolves promise when listen enqueued to the
     * server. All the subsequent view snapshots or errors are sent to the
     * subscribed handlers. Returns the initial snapshot.
     */
    async function Yo(t, e) {
        const n = pc$1(t);
        let s, i;
        const r = n.bl.get(e);
        if (r) 
        // PORTING NOTE: With Multi-Tab Web, it is possible that a query view
        // already exists when EventManager calls us for the first time. This
        // happens when the primary tab is already listening to this query on
        // behalf of another tab and the user of the primary also starts listening
        // to the query. EventManager will not have an assigned target ID in this
        // case and calls `listen` to obtain this ID.
        s = r.targetId, n.gl.$a(s), i = r.view.Al(); else {
            const t = await Er(n.ph, fe(e)), r = n.gl.$a(t.targetId);
            s = t.targetId, i = await Xo(n, e, s, "current" === r), n.Ml && co(n.Pl, t);
        }
        return i;
    }

    /**
     * Registers a view for a previously unknown query and computes its initial
     * snapshot.
     */ async function Xo(t, e, n, s) {
        // PORTING NOTE: On Web only, we inject the code that registers new Limbo
        // targets based on view changes. This allows us to only depend on Limbo
        // changes when user code includes queries.
        t.Fl = (e, n, s) => async function(t, e, n, s) {
            let i = e.view._l(n);
            i.hc && (
            // The query has a limit and some docs were removed, so we need
            // to re-run the query against the local store to make sure we
            // didn't lose any good docs that had been past the limit.
            i = await Ir(t.ph, e.query, 
            /* usePreviousResults= */ !1).then((({documents: t}) => e.view._l(t, i))));
            const r = s && s.xe.get(e.targetId), o = e.view.di(i, 
            /* updateLimboDocuments= */ t.Ml, r);
            return lc$1(t, e.targetId, o.Tl), o.snapshot;
        }(t, e, n, s);
        const i = await Ir(t.ph, e, 
        /* usePreviousResults= */ !0), r = new Go(e, i.Ac), o = r._l(i.documents), c = vn.Fe(n, s && "Offline" /* Offline */ !== t.onlineState), a = r.di(o, 
        /* updateLimboDocuments= */ t.Ml, c);
        lc$1(t, n, a.Tl);
        const u = new zo(e, n, r);
        return t.bl.set(e, u), t.vl.has(n) ? t.vl.get(n).push(e) : t.vl.set(n, [ e ]), a.snapshot;
    }

    /** Stops listening to the query. */ async function Zo(t, e) {
        const n = N$1(t), s = n.bl.get(e), i = n.vl.get(s.targetId);
        if (i.length > 1) return n.vl.set(s.targetId, i.filter((t => !we(t, e)))), void n.bl.delete(e);
        // No other queries are mapped to the target, clean up the query and the target.
            if (n.Ml) {
            // We need to remove the local query target first to allow us to verify
            // whether any other client is still interested in this target.
            n.gl.ka(s.targetId);
            n.gl.Sa(s.targetId) || await Tr(n.ph, s.targetId, 
            /*keepPersistedTargetData=*/ !1).then((() => {
                n.gl.Fa(s.targetId), ao(n.Pl, s.targetId), uc$1(n, s.targetId);
            })).catch(yi);
        } else uc$1(n, s.targetId), await Tr(n.ph, s.targetId, 
        /*keepPersistedTargetData=*/ !0);
    }

    /**
     * Initiates the write of local mutation batch which involves adding the
     * writes to the mutation queue, notifying the remote store about new
     * mutations and raising events for any changes this write caused.
     *
     * The promise returned by this call is resolved when the above steps
     * have completed, *not* when the write was acked by the backend. The
     * userCallback is resolved once the write was acked/rejected by the
     * backend (or failed locally for any other reason).
     */ async function tc(t, e, n) {
        const s = bc$1(t);
        try {
            const t = await function(t, e) {
                const n = N$1(t), s = z$1.now(), i = e.reduce(((t, e) => t.add(e.key)), Rn());
                let r;
                return n.persistence.runTransaction("Locally write mutations", "readwrite", (t => n.Ec.Yo(t, i).next((i => {
                    r = i;
                    // For non-idempotent mutations (such as `FieldValue.increment()`),
                    // we record the base state in a separate patch mutation. This is
                    // later used to guarantee consistent values and prevents flicker
                    // even if the backend sends us an update that already includes our
                    // transform.
                    const o = [];
                    for (const t of e) {
                        const e = We(t, r.get(t.key));
                        null != e && 
                        // NOTE: The base state should only be applied if there's some
                        // existing document to override, so use a Precondition of
                        // exists=true
                        o.push(new He(t.key, e, Ct(e.proto.mapValue), Be.exists(!0)));
                    }
                    return n.Go.Ai(t, s, o, e);
                })))).then((t => {
                    const e = t.Cs(r);
                    return {
                        batchId: t.batchId,
                        ii: e
                    };
                }));
            }(s.ph, e);
            s.gl.Da(t.batchId), function(t, e, n) {
                let s = t.xl[t.currentUser.i()];
                s || (s = new an(W$1));
                s = s.Gt(e, n), t.xl[t.currentUser.i()] = s;
            }
            /**
     * Resolves or rejects the user callback for the given batch and then discards
     * it.
     */ (s, t.batchId, n), await dc$1(s, t.ii), await Ro(s.Pl);
        } catch (t) {
            // If we can't persist the mutation, we reject the user callback and
            // don't send the mutation. The user can then retry the write.
            const e = Cs(t, "Failed to persist write");
            n.reject(e);
        }
    }

    /**
     * Applies one remote event to the sync engine, notifying any views of the
     * changes, and releasing any pending mutation batches that would become
     * visible because of the snapshot version the remote event contains.
     */ async function ec$1(t, e) {
        const n = N$1(t);
        try {
            const t = await fr(n.ph, e);
            // Update `receivedDocument` as appropriate for any limbo targets.
                    e.xe.forEach(((t, e) => {
                const s = n.Cl.get(e);
                s && (
                // Since this is a limbo resolution lookup, it's for a single document
                // and it could be added, modified, or removed, but not a combination.
                C(t.Be.size + t.qe.size + t.Ue.size <= 1), t.Be.size > 0 ? s.Rl = !0 : t.qe.size > 0 ? C(s.Rl) : t.Ue.size > 0 && (C(s.Rl), 
                s.Rl = !1));
            })), await dc$1(n, t, e);
        } catch (t) {
            await yi(t);
        }
    }

    /**
     * Applies an OnlineState change to the sync engine and notifies any views of
     * the change.
     */ function nc$1(t, e, n) {
        const s = N$1(t);
        // If we are the secondary client, we explicitly ignore the remote store's
        // online state (the local client may go offline, even though the primary
        // tab remains online) and only apply the primary tab's online state from
        // SharedClientState.
            if (s.Ml && 0 /* RemoteStore */ === n || !s.Ml && 1 /* SharedClientState */ === n) {
            const t = [];
            s.bl.forEach(((n, s) => {
                const i = s.view.jh(e);
                i.snapshot && t.push(i.snapshot);
            })), function(t, e) {
                const n = N$1(t);
                n.onlineState = e;
                let s = !1;
                n.queries.forEach(((t, n) => {
                    for (const t of n.listeners) 
                    // Run global snapshot listeners if a consistent snapshot has been emitted.
                    t.jh(e) && (s = !0);
                })), s && Lo(n);
            }(s.Vl, e), t.length && s.pl.oh(t), s.onlineState = e, s.Ml && s.gl.Ua(e);
        }
    }

    /**
     * Rejects the listen for the given targetID. This can be triggered by the
     * backend for any active target.
     *
     * @param syncEngine - The sync engine implementation.
     * @param targetId - The targetID corresponds to one previously initiated by the
     * user as part of TargetData passed to listen() on RemoteStore.
     * @param err - A description of the condition that has forced the rejection.
     * Nearly always this will be an indication that the user is no longer
     * authorized to see the data matching the target.
     */ async function sc$1(t, e, n) {
        const s = N$1(t);
        // PORTING NOTE: Multi-tab only.
            s.gl.La(e, "rejected", n);
        const i = s.Cl.get(e), r = i && i.key;
        if (r) {
            // TODO(klimt): We really only should do the following on permission
            // denied errors, but we don't have the cause code here.
            // It's a limbo doc. Create a synthetic event saying it was deleted.
            // This is kind of a hack. Ideally, we would have a method in the local
            // store to purge a document. However, it would be tricky to keep all of
            // the local store's invariants with another method.
            let t = new an(tt.K);
            t = t.Gt(r, new $t(r, H$1.min()));
            const n = Rn().add(r), i = new bn(H$1.min(), 
            /* targetChanges= */ new Map, 
            /* targetMismatches= */ new ln(W$1), t, n);
            await ec$1(s, i), 
            // Since this query failed, we won't want to manually unlisten to it.
            // We only remove it from bookkeeping after we successfully applied the
            // RemoteEvent. If `applyRemoteEvent()` throws, we want to re-listen to
            // this query when the RemoteStore restarts the Watch stream, which should
            // re-trigger the target failure.
            s.Dl = s.Dl.remove(r), s.Cl.delete(e), fc$1(s);
        } else await Tr(s.ph, e, 
        /* keepPersistedTargetData */ !1).then((() => uc$1(s, e, n))).catch(yi);
    }

    async function ic$1(t, e) {
        const n = N$1(t), s = e.batch.batchId;
        try {
            const t = await lr(n.ph, e);
            // The local store may or may not be able to apply the write result and
            // raise events immediately (depending on whether the watcher is caught
            // up), so we raise user callbacks first so that they consistently happen
            // before listen events.
                    ac$1(n, s, /*error=*/ null), cc$1(n, s), n.gl.Na(s, "acknowledged"), await dc$1(n, t);
        } catch (t) {
            await yi(t);
        }
    }

    async function rc$1(t, e, n) {
        const s = N$1(t);
        try {
            const t = await function(t, e) {
                const n = N$1(t);
                return n.persistence.runTransaction("Reject batch", "readwrite-primary", (t => {
                    let s;
                    return n.Go.Ri(t, e).next((e => (C(null !== e), s = e.keys(), n.Go.Di(t, e)))).next((() => n.Go.xi(t))).next((() => n.Ec.Yo(t, s)));
                }));
            }
            /**
     * Returns the largest (latest) batch id in mutation queue that is pending
     * server response.
     *
     * Returns `BATCHID_UNKNOWN` if the queue is empty.
     */ (s.ph, e);
            // The local store may or may not be able to apply the write result and
            // raise events immediately (depending on whether the watcher is caught up),
            // so we raise user callbacks first so that they consistently happen before
            // listen events.
                    ac$1(s, e, n), cc$1(s, e), s.gl.Na(e, "rejected", n), await dc$1(s, t);
        } catch (n) {
            await yi(n);
        }
    }

    /**
     * Registers a user callback that resolves when all pending mutations at the moment of calling
     * are acknowledged .
     */ async function oc$1(t, e) {
        const n = N$1(t);
        fo(n.Pl) || p$1("SyncEngine", "The network is disabled. The task returned by 'awaitPendingWrites()' will not complete until the network is enabled.");
        try {
            const t = await function(t) {
                const e = N$1(t);
                return e.persistence.runTransaction("Get highest unacknowledged batch id", "readonly", (t => e.Go.gi(t)));
            }(n.ph);
            if (-1 === t) 
            // Trigger the callback right away if there is no pending writes at the moment.
            return void e.resolve();
            const s = n.$l.get(t) || [];
            s.push(e), n.$l.set(t, s);
        } catch (t) {
            const n = Cs(t, "Initialization of waitForPendingWrites() operation failed");
            e.reject(n);
        }
    }

    /**
     * Triggers the callbacks that are waiting for this batch id to get acknowledged by server,
     * if there are any.
     */ function cc$1(t, e) {
        (t.$l.get(e) || []).forEach((t => {
            t.resolve();
        })), t.$l.delete(e);
    }

    /** Reject all outstanding callbacks waiting for pending writes to complete. */ function ac$1(t, e, n) {
        const s = N$1(t);
        let i = s.xl[s.currentUser.i()];
        // NOTE: Mutations restored from persistence won't have callbacks, so it's
        // okay for there to be no callback for this ID.
            if (i) {
            const t = i.get(e);
            t && (n ? t.reject(n) : t.resolve(), i = i.remove(e)), s.xl[s.currentUser.i()] = i;
        }
    }

    function uc$1(t, e, n = null) {
        t.gl.ka(e);
        for (const s of t.vl.get(e)) t.bl.delete(s), n && t.pl.Ll(s, n);
        if (t.vl.delete(e), t.Ml) {
            t.Nl.$c(e).forEach((e => {
                t.Nl.$i(e) || 
                // We removed the last reference for this key
                hc$1(t, e);
            }));
        }
    }

    function hc$1(t, e) {
        t.Sl.delete(e.path.et());
        // It's possible that the target already got removed because the query failed. In that case,
        // the key won't exist in `limboTargetsByKey`. Only do the cleanup if we still have the target.
        const n = t.Dl.get(e);
        null !== n && (ao(t.Pl, n), t.Dl = t.Dl.remove(e), t.Cl.delete(n), fc$1(t));
    }

    function lc$1(t, e, n) {
        for (const s of n) if (s instanceof Wo) t.Nl.er(s.key, e), _c(t, s); else if (s instanceof jo) {
            p$1("SyncEngine", "Document no longer in limbo: " + s.key), t.Nl.sr(s.key, e);
            t.Nl.$i(s.key) || 
            // We removed the last reference for this key
            hc$1(t, s.key);
        } else D$1();
    }

    function _c(t, e) {
        const n = e.key, s = n.path.et();
        t.Dl.get(n) || t.Sl.has(s) || (p$1("SyncEngine", "New document in limbo: " + n), t.Sl.add(s), 
        fc$1(t));
    }

    /**
     * Starts listens for documents in limbo that are enqueued for resolution,
     * subject to a maximum number of concurrent resolutions.
     *
     * Without bounding the number of concurrent resolutions, the server can fail
     * with "resource exhausted" errors which can lead to pathological client
     * behavior as seen in https://github.com/firebase/firebase-js-sdk/issues/2683.
     */ function fc$1(t) {
        for (;t.Sl.size > 0 && t.Dl.size < t.yl; ) {
            const e = t.Sl.values().next().value;
            t.Sl.delete(e);
            const n = new tt(Y$1.nt(e)), s = t.Ol.next();
            t.Cl.set(s, new Ho(n)), t.Dl = t.Dl.Gt(n, s), co(t.Pl, new Re(fe(oe(n.path)), s, 2 /* LimboResolution */ , U$1.O));
        }
    }

    async function dc$1(t, e, n) {
        const s = N$1(t), i = [], r = [], o = [];
        s.bl.Y() || (s.bl.forEach(((t, c) => {
            o.push(s.Fl(c, e, n).then((t => {
                if (t) {
                    s.Ml && s.gl.La(c.targetId, t.fromCache ? "not-current" : "current"), i.push(t);
                    const e = or.rc(c.targetId, t);
                    r.push(e);
                }
            })));
        })), await Promise.all(o), s.pl.oh(i), await async function(t, e) {
            const n = N$1(t);
            try {
                await n.persistence.runTransaction("notifyLocalViewChanges", "readwrite", (t => As.forEach(e, (e => As.forEach(e.sc, (s => n.persistence.Ei.er(t, e.targetId, s))).next((() => As.forEach(e.ic, (s => n.persistence.Ei.sr(t, e.targetId, s)))))))));
            } catch (t) {
                if (!ys(t)) throw t;
                // If `notifyLocalViewChanges` fails, we did not advance the sequence
                // number for the documents that were included in this transaction.
                // This might trigger them to be deleted earlier than they otherwise
                // would have, but it should not invalidate the integrity of the data.
                p$1("LocalStore", "Failed to update sequence numbers: " + t);
            }
            for (const t of e) {
                const e = t.targetId;
                if (!t.fromCache) {
                    const t = n._c.get(e), s = t.Ot, i = t.Ft(s);
                    // Advance the last limbo free snapshot version
                                    n._c = n._c.Gt(e, i);
                }
            }
        }(s.ph, r));
    }

    async function wc$1(t, e) {
        const n = N$1(t);
        if (!n.currentUser.isEqual(e)) {
            p$1("SyncEngine", "User change. New user:", e.i());
            const t = await hr(n.ph, e);
            n.currentUser = e, 
            // Fails tasks waiting for pending writes requested by previous user.
            function(t, e) {
                t.$l.forEach((t => {
                    t.forEach((t => {
                        t.reject(new $(x$1.CANCELLED, e));
                    }));
                })), t.$l.clear();
            }(n, "'waitForPendingWrites' promise is rejected due to a user change."), 
            // TODO(b/114226417): Consider calling this only in the primary tab.
            n.gl.qa(e, t.Ic, t.mc), await dc$1(n, t.Tc);
        }
    }

    function Ec$1(t, e) {
        const n = N$1(t), s = n.Cl.get(e);
        if (s && s.Rl) return Rn().add(s.key);
        {
            let t = Rn();
            const s = n.vl.get(e);
            if (!s) return t;
            for (const e of s) {
                const s = n.bl.get(e);
                t = t.Re(s.view.ll);
            }
            return t;
        }
    }

    /**
     * Reconcile the list of synced documents in an existing view with those
     * from persistence.
     */ async function Tc$1(t, e) {
        const n = N$1(t), s = await Ir(n.ph, e.query, 
        /* usePreviousResults= */ !0), i = e.view.ml(s);
        return n.Ml && lc$1(n, e.targetId, i.Tl), i;
    }

    /**
     * Retrieves newly changed documents from remote document cache and raises
     * snapshots if needed.
     */
    // PORTING NOTE: Multi-Tab only.
    async function Ic$1(t) {
        const e = N$1(t);
        return Ar(e.ph).then((t => dc$1(e, t)));
    }

    /** Applies a mutation state to an existing batch.  */
    // PORTING NOTE: Multi-Tab only.
    async function mc$1(t, e, n, s) {
        const i = N$1(t), r = await function(t, e) {
            const n = N$1(t), s = N$1(n.Go);
            return n.persistence.runTransaction("Lookup mutation documents", "readonly", (t => s.Pi(t, e).next((e => e ? n.Ec.Yo(t, e) : As.resolve(null)))));
        }
        // PORTING NOTE: Multi-Tab only.
        (i.ph, e);
        null !== r ? ("pending" === n ? 
        // If we are the primary client, we need to send this write to the
        // backend. Secondary clients will ignore these writes since their remote
        // connection is disabled.
        await Ro(i.Pl) : "acknowledged" === n || "rejected" === n ? (
        // NOTE: Both these methods are no-ops for batches that originated from
        // other clients.
        ac$1(i, e, s || null), cc$1(i, e), function(t, e) {
            N$1(N$1(t).Go).Ci(e);
        }
        // PORTING NOTE: Multi-Tab only.
        (i.ph, e)) : D$1(), await dc$1(i, r)) : 
        // A throttled tab may not have seen the mutation before it was completed
        // and removed from the mutation queue, in which case we won't have cached
        // the affected documents. In this case we can safely ignore the update
        // since that means we didn't apply the mutation locally at all (if we
        // had, we would have cached the affected documents), and so we will just
        // see any resulting document changes via normal remote document updates
        // as applicable.
        p$1("SyncEngine", "Cannot apply mutation batch with id: " + e);
    }

    /** Applies a query target change from a different tab. */
    // PORTING NOTE: Multi-Tab only.
    async function Ac$1(t, e) {
        const n = N$1(t);
        if (pc$1(n), bc$1(n), !0 === e && !0 !== n.kl) {
            // Secondary tabs only maintain Views for their local listeners and the
            // Views internal state may not be 100% populated (in particular
            // secondary tabs don't track syncedDocuments, the set of documents the
            // server considers to be in the target). So when a secondary becomes
            // primary, we need to need to make sure that all views for all targets
            // match the state on disk.
            const t = n.gl.ba(), e = await Rc$1(n, t.tt());
            n.kl = !0, await Do(n.Pl, !0);
            for (const t of e) co(n.Pl, t);
        } else if (!1 === e && !1 !== n.kl) {
            const t = [];
            let e = Promise.resolve();
            n.vl.forEach(((s, i) => {
                n.gl.Ma(i) ? t.push(i) : e = e.then((() => (uc$1(n, i), Tr(n.ph, i, 
                /*keepPersistedTargetData=*/ !0)))), ao(n.Pl, i);
            })), await e, await Rc$1(n, t), 
            // PORTING NOTE: Multi-Tab only.
            function(t) {
                const e = N$1(t);
                e.Cl.forEach(((t, n) => {
                    ao(e.Pl, n);
                })), e.Nl.Oc(), e.Cl = new Map, e.Dl = new an(tt.K);
            }
            /**
     * Reconcile the query views of the provided query targets with the state from
     * persistence. Raises snapshots for any changes that affect the local
     * client and returns the updated state of all target's query data.
     *
     * @param syncEngine - The sync engine implementation
     * @param targets - the list of targets with views that need to be recomputed
     * @param transitionToPrimary - `true` iff the tab transitions from a secondary
     * tab to a primary tab
     */
            // PORTING NOTE: Multi-Tab only.
            (n), n.kl = !1, await Do(n.Pl, !1);
        }
    }

    async function Rc$1(t, e, n) {
        const s = N$1(t), i = [], r = [];
        for (const t of e) {
            let e;
            const n = s.vl.get(t);
            if (n && 0 !== n.length) {
                // For queries that have a local View, we fetch their current state
                // from LocalStore (as the resume token and the snapshot version
                // might have changed) and reconcile their views with the persisted
                // state (the list of syncedDocuments may have gotten out of sync).
                e = await Er(s.ph, fe(n[0]));
                for (const t of n) {
                    const e = s.bl.get(t), n = await Tc$1(s, e);
                    n.snapshot && r.push(n.snapshot);
                }
            } else {
                // For queries that never executed on this client, we need to
                // allocate the target in LocalStore and initialize a new View.
                const n = await mr(s.ph, t);
                e = await Er(s.ph, n), await Xo(s, Pc$1(n), t, 
                /*current=*/ !1);
            }
            i.push(e);
        }
        return s.pl.oh(r), i;
    }

    /**
     * Creates a `Query` object from the specified `Target`. There is no way to
     * obtain the original `Query`, so we synthesize a `Query` from the `Target`
     * object.
     *
     * The synthesized result might be different from the original `Query`, but
     * since the synthesized `Query` should return the same results as the
     * original one (only the presentation of results might differ), the potential
     * difference will not cause issues.
     */
    // PORTING NOTE: Multi-Tab only.
    function Pc$1(t) {
        return re(t.path, t.collectionGroup, t.orderBy, t.filters, t.limit, "F" /* First */ , t.startAt, t.endAt);
    }

    /** Returns the IDs of the clients that are currently active. */
    // PORTING NOTE: Multi-Tab only.
    function Vc$1(t) {
        const e = N$1(t);
        return N$1(N$1(e.ph).persistence).qo();
    }

    /** Applies a query target change from a different tab. */
    // PORTING NOTE: Multi-Tab only.
    async function gc$1(t, e, n, s) {
        const i = N$1(t);
        if (i.kl) 
        // If we receive a target state notification via WebStorage, we are
        // either already secondary or another tab has taken the primary lease.
        p$1("SyncEngine", "Ignoring unexpected query state notification."); else if (i.vl.has(e)) switch (n) {
          case "current":
          case "not-current":
            {
                const t = await Ar(i.ph), s = bn.Me(e, "current" === n);
                await dc$1(i, t, s);
                break;
            }

          case "rejected":
            await Tr(i.ph, e, 
            /* keepPersistedTargetData */ !0), uc$1(i, e, s);
            break;

          default:
            D$1();
        }
    }

    /** Adds or removes Watch targets for queries from different tabs. */ async function yc$1(t, e, n) {
        const s = pc$1(t);
        if (s.kl) {
            for (const t of e) {
                if (s.vl.has(t)) {
                    // A target might have been added in a previous attempt
                    p$1("SyncEngine", "Adding an already active target " + t);
                    continue;
                }
                const e = await mr(s.ph, t), n = await Er(s.ph, e);
                await Xo(s, Pc$1(e), n.targetId, 
                /*current=*/ !1), co(s.Pl, n);
            }
            for (const t of n) 
            // Check that the target is still active since the target might have been
            // removed if it has been rejected by the backend.
            s.vl.has(t) && 
            // Release queries that are still active.
            await Tr(s.ph, t, 
            /* keepPersistedTargetData */ !1).then((() => {
                ao(s.Pl, t), uc$1(s, t);
            })).catch(yi);
        }
    }

    function pc$1(t) {
        const e = N$1(t);
        return e.Pl.Sh.Fh = ec$1.bind(null, e), e.Pl.Sh.bn = Ec$1.bind(null, e), e.Pl.Sh.Mh = sc$1.bind(null, e), 
        e.pl.oh = Mo.bind(null, e.Vl), e.pl.Ll = Fo.bind(null, e.Vl), e;
    }

    function bc$1(t) {
        const e = N$1(t);
        return e.Pl.Sh.Lh = ic$1.bind(null, e), e.Pl.Sh.Bh = rc$1.bind(null, e), e;
    }

    /**
     * Loads a Firestore bundle into the SDK. The returned promise resolves when
     * the bundle finished loading.
     *
     * @param syncEngine - SyncEngine to use.
     * @param bundleReader - Bundle to load into the SDK.
     * @param task - LoadBundleTask used to update the loading progress to public API.
     */ function vc$1(t, e, n) {
        const s = N$1(t);
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
            (async function(t, e, n) {
            try {
                const s = await e.getMetadata();
                if (await function(t, e) {
                    const n = N$1(t), s = Un(e.createTime);
                    return n.persistence.runTransaction("hasNewerBundle", "readonly", (t => n.fo.Os(t, e.id))).then((t => !!t && t.createTime.L(s) >= 0));
                }
                /**
     * Saves the given `BundleMetadata` to local persistence.
     */ (t.ph, s)) return await e.close(), void n.Bl(function(t) {
                    return {
                        taskState: "Success",
                        documentsLoaded: t.totalDocuments,
                        bytesLoaded: t.totalBytes,
                        totalDocuments: t.totalDocuments,
                        totalBytes: t.totalBytes
                    };
                }(s));
                n.ql(Qo(s));
                const i = new Ko(s, t.ph, e.Ut);
                let r = await e.Ul();
                for (;r; ) {
                    const t = await i.il(r);
                    t && n.ql(t), r = await e.Ul();
                }
                const o = await i.complete();
                // TODO(b/160876443): This currently raises snapshots with
                // `fromCache=false` if users already listen to some queries and bundles
                // has newer version.
                            await dc$1(t, o.jo, 
                /* remoteEvent */ void 0), 
                // Save metadata, so loading the same bundle will skip.
                await function(t, e) {
                    const n = N$1(t);
                    return n.persistence.runTransaction("Save bundle", "readwrite", (t => n.fo.ks(t, e)));
                }
                /**
     * Returns a promise of a `NamedQuery` associated with given query name. Promise
     * resolves to undefined if no persisted data can be found.
     */ (t.ph, s), n.Bl(o.progress);
            } catch (t) {
                v$1("SyncEngine", `Loading bundle failed with ${t}`), n.Kl(t);
            }
        }
        /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
        /**
     * Provides all components needed for Firestore with in-memory persistence.
     * Uses EagerGC garbage collection.
     */)(s, e, n).then((() => {
            s.gl.Qa();
        }));
    }

    class Sc$1 {
        constructor() {
            this.synchronizeTabs = !1;
        }
        async initialize(t) {
            this.Ut = Yr(t.Pu.p), this.gl = this.Ql(t), this.persistence = this.Wl(t), await this.persistence.start(), 
            this.jl = this.Gl(t), this.ph = this.zl(t);
        }
        Gl(t) {
            return null;
        }
        zl(t) {
            return ur(this.persistence, new cr, t.Hl, this.Ut);
        }
        Wl(t) {
            return new Cr(xr.sa, this.Ut);
        }
        Ql(t) {
            return new Kr;
        }
        async terminate() {
            this.jl && this.jl.stop(), await this.gl.ko(), await this.persistence.ko();
        }
    }

    /**
     * Provides all components needed for Firestore with IndexedDB persistence.
     */ class Dc$1 extends Sc$1 {
        constructor(t, e, n) {
            super(), this.Jl = t, this.cacheSizeBytes = e, this.forceOwnership = n, this.synchronizeTabs = !1;
        }
        async initialize(t) {
            await super.initialize(t), await Rr(this.ph), await this.Jl.initialize(this, t), 
            // Enqueue writes from a previous session
            await bc$1(this.Jl.la), await Ro(this.Jl.Pl);
        }
        zl(t) {
            return ur(this.persistence, new cr, t.Hl, this.Ut);
        }
        Gl(t) {
            const e = this.persistence.Ei.hr;
            return new Ui(e, t.ls);
        }
        Wl(t) {
            const e = sr(t.Pu.p, t.Pu.persistenceKey), n = void 0 !== this.cacheSizeBytes ? gi.Js(this.cacheSizeBytes) : gi.Zs;
            return new tr(this.synchronizeTabs, e, t.clientId, n, t.ls, Hr(), Jr(), this.Ut, this.gl, !!this.forceOwnership);
        }
        Ql(t) {
            return new Kr;
        }
    }

    /**
     * Provides all components needed for Firestore with multi-tab IndexedDB
     * persistence.
     *
     * In the legacy client, this provider is used to provide both multi-tab and
     * non-multi-tab persistence since we cannot tell at build time whether
     * `synchronizeTabs` will be enabled.
     */ class Cc$1 extends Dc$1 {
        constructor(t, e) {
            super(t, e, /* forceOwnership= */ !1), this.Jl = t, this.cacheSizeBytes = e, this.synchronizeTabs = !0;
        }
        async initialize(t) {
            await super.initialize(t);
            const e = this.Jl.la;
            this.gl instanceof Ur && (this.gl.la = {
                tu: mc$1.bind(null, e),
                eu: gc$1.bind(null, e),
                nu: yc$1.bind(null, e),
                qo: Vc$1.bind(null, e),
                Za: Ic$1.bind(null, e)
            }, await this.gl.start()), 
            // NOTE: This will immediately call the listener, so we make sure to
            // set it after localStore / remoteStore are started.
            await this.persistence.Ao((async t => {
                await Ac$1(this.Jl.la, t), this.jl && (t && !this.jl.wr ? this.jl.start(this.ph) : t || this.jl.stop());
            }));
        }
        Ql(t) {
            const e = Hr();
            if (!Ur.Kn(e)) throw new $(x$1.UNIMPLEMENTED, "IndexedDB persistence is only available on platforms that support LocalStorage.");
            const n = sr(t.Pu.p, t.Pu.persistenceKey);
            return new Ur(e, t.ls, n, t.clientId, t.Hl);
        }
    }

    /**
     * Initializes and wires the components that are needed to interface with the
     * network.
     */ class Nc$1 {
        async initialize(t, e) {
            this.ph || (this.ph = t.ph, this.gl = t.gl, this.bh = this.Yl(e), this.Pl = this.Xl(e), 
            this.Vl = this.Zl(e), this.la = this.t_(e, 
            /* startAsPrimary=*/ !t.synchronizeTabs), this.gl._a = t => nc$1(this.la, t, 1 /* SharedClientState */), 
            this.Pl.Sh.e_ = wc$1.bind(null, this.la), await Do(this.Pl, this.la.Ml));
        }
        Zl(t) {
            return new $o;
        }
        Yl(t) {
            const e = Yr(t.Pu.p), n = (s = t.Pu, new zr(s));
            var s;
            /** Return the Platform-specific connectivity monitor. */        return function(t, e, n) {
                return new no(t, e, n);
            }(t.credentials, n, e);
        }
        Xl(t) {
            return e = this.ph, n = this.bh, s = t.ls, i = t => nc$1(this.la, t, 0 /* RemoteStore */), 
            r = Wr.Kn() ? new Wr : new Qr, new io(e, n, s, i, r);
            var e, n, s, i, r;
            /** Re-enables the network. Idempotent. */    }
        t_(t, e) {
            return function(t, e, n, 
            // PORTING NOTE: Manages state synchronization in multi-tab environments.
            s, i, r, o) {
                const c = new Jo(t, e, n, s, i, r);
                return o && (c.kl = !0), c;
            }(this.ph, this.Pl, this.Vl, this.gl, t.Hl, t.yl, e);
        }
        terminate() {
            return async function(t) {
                const e = N$1(t);
                p$1("RemoteStore", "RemoteStore shutting down."), e.Nh.add(5 /* Shutdown */), await oo(e), 
                e.$h.ko(), 
                // Set the OnlineState to Unknown (rather than Offline) to avoid potentially
                // triggering spurious listener events with cached data, etc.
                e.Oh.set("Unknown" /* Unknown */);
            }(this.Pl);
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * How many bytes to read each time when `ReadableStreamReader.read()` is
     * called. Only applicable for byte streams that we control (e.g. those backed
     * by an UInt8Array).
     */
    /**
     * Builds a `ByteStreamReader` from a UInt8Array.
     * @param source - The data source to use.
     * @param bytesPerRead - How many bytes each `read()` from the returned reader
     *        will read.
     */
    function xc(t, e = 10240) {
        let n = 0;
        return {
            async read() {
                if (n < t.byteLength) {
                    const s = {
                        value: t.slice(n, n + e),
                        done: !1
                    };
                    return n += e, s;
                }
                // TypesScript's lib.dom.d.ts doesn't have proper typings of
                // ReadableStreamReadResult yet.
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                            return {
                    done: !0
                };
            },
            async cancel() {},
            releaseLock() {}
        };
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * On web, a `ReadableStream` is wrapped around by a `ByteStreamReader`.
     */
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /*
     * A wrapper implementation of Observer<T> that will dispatch events
     * asynchronously. To allow immediate silencing, a mute call is added which
     * causes events scheduled to no longer be raised.
     */
    class $c$1 {
        constructor(t) {
            this.observer = t, 
            /**
             * When set to true, will not raise future events. Necessary to deal with
             * async detachment of listener.
             */
            this.muted = !1;
        }
        next(t) {
            this.observer.next && this.n_(this.observer.next, t);
        }
        error(t) {
            this.observer.error ? this.n_(this.observer.error, t) : console.error("Uncaught Error in snapshot listener:", t);
        }
        s_() {
            this.muted = !0;
        }
        n_(t, e) {
            this.muted || setTimeout((() => {
                this.muted || t(e);
            }), 0);
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A class representing a bundle.
     *
     * Takes a bundle stream or buffer, and presents abstractions to read bundled
     * elements out of the underlying content.
     */ class Oc$1 {
        constructor(
        /** The reader to read from underlying binary bundle data source. */
        t, e) {
            this.i_ = t, this.Ut = e, 
            /** Cached bundle metadata. */
            this.metadata = new ms, 
            /**
             * Internal buffer to hold bundle content, accumulating incomplete element
             * content.
             */
            this.buffer = new Uint8Array, this.r_ = new TextDecoder("utf-8"), 
            // Read the metadata (which is the first element).
            this.o_().then((t => {
                t && t.nl() ? this.metadata.resolve(t.payload.metadata) : this.metadata.reject(new Error(`The first element of the bundle is not a metadata, it is\n             ${JSON.stringify(null == t ? void 0 : t.payload)}`));
            }), (t => this.metadata.reject(t)));
        }
        close() {
            return this.i_.cancel();
        }
        async getMetadata() {
            return this.metadata.promise;
        }
        async Ul() {
            // Makes sure metadata is read before proceeding.
            return await this.getMetadata(), this.o_();
        }
        /**
         * Reads from the head of internal buffer, and pulling more data from
         * underlying stream if a complete element cannot be found, until an
         * element(including the prefixed length and the JSON string) is found.
         *
         * Once a complete element is read, it is dropped from internal buffer.
         *
         * Returns either the bundled element, or null if we have reached the end of
         * the stream.
         */    async o_() {
            const t = await this.c_();
            if (null === t) return null;
            const e = this.r_.decode(t), n = Number(e);
            isNaN(n) && this.a_(`length string (${e}) is not valid number`);
            const s = await this.u_(n);
            return new qo(JSON.parse(s), t.length + n);
        }
        /** First index of '{' from the underlying buffer. */    h_() {
            return this.buffer.findIndex((t => t === "{".charCodeAt(0)));
        }
        /**
         * Reads from the beginning of the internal buffer, until the first '{', and
         * return the content.
         *
         * If reached end of the stream, returns a null.
         */    async c_() {
            for (;this.h_() < 0; ) {
                if (await this.l_()) break;
            }
            // Broke out of the loop because underlying stream is closed, and there
            // happens to be no more data to process.
                    if (0 === this.buffer.length) return null;
            const t = this.h_();
            // Broke out of the loop because underlying stream is closed, but still
            // cannot find an open bracket.
                    t < 0 && this.a_("Reached the end of bundle when a length string is expected.");
            const e = this.buffer.slice(0, t);
            // Update the internal buffer to drop the read length.
                    return this.buffer = this.buffer.slice(t), e;
        }
        /**
         * Reads from a specified position from the internal buffer, for a specified
         * number of bytes, pulling more data from the underlying stream if needed.
         *
         * Returns a string decoded from the read bytes.
         */    async u_(t) {
            for (;this.buffer.length < t; ) {
                await this.l_() && this.a_("Reached the end of bundle when more is expected.");
            }
            const e = this.r_.decode(this.buffer.slice(0, t));
            // Update the internal buffer to drop the read json string.
                    return this.buffer = this.buffer.slice(t), e;
        }
        a_(t) {
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            throw this.i_.cancel(), new Error(`Invalid bundle format: ${t}`);
        }
        /**
         * Pulls more data from underlying stream to internal buffer.
         * Returns a boolean indicating whether the stream is finished.
         */    async l_() {
            const t = await this.i_.read();
            if (!t.done) {
                const e = new Uint8Array(this.buffer.length + t.value.length);
                e.set(this.buffer), e.set(t.value, this.buffer.length), this.buffer = e;
            }
            return t.done;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An immutable object representing an array of bytes.
     */
    class kc$1 {
        /** @hideconstructor */
        constructor(t) {
            this.__ = t;
        }
        /**
         * Creates a new `Bytes` object from the given Base64 string, converting it to
         * bytes.
         *
         * @param base64 - The Base64 string used to create the `Bytes` object.
         */    static fromBase64String(t) {
            try {
                return new kc$1(rt.fromBase64String(t));
            } catch (t) {
                throw new $(x$1.INVALID_ARGUMENT, "Failed to construct data from Base64 string: " + t);
            }
        }
        /**
         * Creates a new `Bytes` object from the given Uint8Array.
         *
         * @param array - The Uint8Array used to create the `Bytes` object.
         */    static fromUint8Array(t) {
            return new kc$1(rt.fromUint8Array(t));
        }
        /**
         * Returns the underlying bytes as a Base64-encoded string.
         *
         * @returns The Base64-encoded string created from the `Bytes` object.
         */    toBase64() {
            return this.__.toBase64();
        }
        /**
         * Returns the underlying bytes in a new `Uint8Array`.
         *
         * @returns The Uint8Array created from the `Bytes` object.
         */    toUint8Array() {
            return this.__.toUint8Array();
        }
        /**
         * Returns a string representation of the `Bytes` object.
         *
         * @returns A string representation of the `Bytes` object.
         */    toString() {
            return "Bytes(base64: " + this.toBase64() + ")";
        }
        /**
         * Returns true if this `Bytes` object is equal to the provided one.
         *
         * @param other - The `Bytes` object to compare against.
         * @returns true if this `Bytes` object is equal to the provided one.
         */    isEqual(t) {
            return this.__.isEqual(t.__);
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A `FieldPath` refers to a field in a document. The path may consist of a
     * single field name (referring to a top-level field in the document), or a
     * list of field names (referring to a nested field in the document).
     *
     * Create a `FieldPath` by providing field names. If more than one field
     * name is provided, the path will point to a nested field in a document.
     */ class Mc$1 {
        /**
         * Creates a FieldPath from the provided field names. If more than one field
         * name is provided, the path will point to a nested field in a document.
         *
         * @param fieldNames - A list of field names.
         */
        constructor(...t) {
            for (let e = 0; e < t.length; ++e) if (0 === t[e].length) throw new $(x$1.INVALID_ARGUMENT, "Invalid field name at argument $(i + 1). Field names must not be empty.");
            this.f_ = new Z$1(t);
        }
        /**
         * Returns true if this `FieldPath` is equal to the provided one.
         *
         * @param other - The `FieldPath` to compare against.
         * @returns true if this `FieldPath` is equal to the provided one.
         */    isEqual(t) {
            return this.f_.isEqual(t.f_);
        }
    }

    /**
     * Returns a special sentinel `FieldPath` to refer to the ID of a document.
     * It can be used in queries to sort or filter by the document ID.
     */ function Fc$1() {
        return new Mc$1("__name__");
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Sentinel values that can be used when writing document fields with `set()`
     * or `update()`.
     */ class Lc$1 {
        /**
         * @param _methodName - The public API endpoint that returns this class.
         */
        constructor(t) {
            this._methodName = t;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A class implemented by all API types of the legacy Firestore API which
     * contains a reference to the API type in the firestore-exp API. All internal
     * code unwraps these references, which allows us to only use firestore-exp
     * types in the SDK.
     */ class Bc$1 {
        constructor(t) {
            this.d_ = t;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ function qc$1(t, e, n) {
        if (!n) throw new $(x$1.INVALID_ARGUMENT, `Function ${t}() cannot be called with an empty ${e}.`);
    }

    /**
     * Validates that two boolean options are not set at the same time.
     */
    /**
     * Validates that `path` refers to a document (indicated by the fact it contains
     * an even numbers of segments).
     */
    function Uc$1(t) {
        if (!tt.lt(t)) throw new $(x$1.INVALID_ARGUMENT, `Invalid document reference. Document references must have an even number of segments, but ${t} has ${t.length}.`);
    }

    /**
     * Validates that `path` refers to a collection (indicated by the fact it
     * contains an odd numbers of segments).
     */ function Kc$1(t) {
        if (tt.lt(t)) throw new $(x$1.INVALID_ARGUMENT, `Invalid collection reference. Collection references must have an odd number of segments, but ${t} has ${t.length}.`);
    }

    /**
     * Returns true if it's a non-null object without a custom prototype
     * (i.e. excludes Array, Date, etc.).
     */
    /** Returns a string describing the type / value of the provided input. */
    function Qc$1(t) {
        if (void 0 === t) return "undefined";
        if (null === t) return "null";
        if ("string" == typeof t) return t.length > 20 && (t = `${t.substring(0, 20)}...`), 
        JSON.stringify(t);
        if ("number" == typeof t || "boolean" == typeof t) return "" + t;
        if ("object" == typeof t) {
            if (t instanceof Array) return "an array";
            {
                const e = 
                /** Hacky method to try to get the constructor name for an object. */
                function(t) {
                    if (t.constructor) {
                        const e = /function\s+([^\s(]+)\s*\(/.exec(t.constructor.toString());
                        if (e && e.length > 1) return e[1];
                    }
                    return null;
                }
                /**
     * Casts `obj` to `T`, optionally unwrapping Compat types to expose the
     * underlying instance. Throws if  `obj` is not an instance of `T`.
     *
     * This cast is used in the Lite and Full SDK to verify instance types for
     * arguments passed to the public API.
     */ (t);
                return e ? `a custom ${e} object` : "an object";
            }
        }
        return "function" == typeof t ? "a function" : D$1();
    }

    function Wc$1(t, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    e) {
        if ("_delegate" in t && (
        // Unwrap Compat types
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        t = t.d_), !(t instanceof e)) {
            if (e.name === t.constructor.name) throw new $(x$1.INVALID_ARGUMENT, "Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");
            {
                const n = Qc$1(t);
                throw new $(x$1.INVALID_ARGUMENT, `Expected type '${e.name}', but it was: ${n}`);
            }
        }
        return t;
    }

    function jc$1(t, e) {
        if (e <= 0) throw new $(x$1.INVALID_ARGUMENT, `Function ${t}() requires a positive number, but it was: ${e}.`);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // settings() defaults:
    /**
     * A concrete type describing all the values that can be applied via a
     * user-supplied firestore.Settings object. This is a separate type so that
     * defaults can be supplied and the value can be checked for equality.
     */
    class Gc$1 {
        constructor(t) {
            var e;
            if (void 0 === t.host) {
                if (void 0 !== t.ssl) throw new $(x$1.INVALID_ARGUMENT, "Can't provide ssl option if host option is not set");
                this.host = "firestore.googleapis.com", this.ssl = true;
            } else this.host = t.host, this.ssl = null === (e = t.ssl) || void 0 === e || e;
            if (this.credentials = t.credentials, this.ignoreUndefinedProperties = !!t.ignoreUndefinedProperties, 
            void 0 === t.cacheSizeBytes) this.cacheSizeBytes = 41943040; else {
                if (-1 !== t.cacheSizeBytes && t.cacheSizeBytes < 1048576) throw new $(x$1.INVALID_ARGUMENT, "cacheSizeBytes must be at least 1048576");
                this.cacheSizeBytes = t.cacheSizeBytes;
            }
            this.experimentalForceLongPolling = !!t.experimentalForceLongPolling, this.experimentalAutoDetectLongPolling = !!t.experimentalAutoDetectLongPolling, 
            function(t, e, n, s) {
                if (!0 === e && !0 === s) throw new $(x$1.INVALID_ARGUMENT, `${t} and ${n} cannot be used together.`);
            }("experimentalForceLongPolling", t.experimentalForceLongPolling, "experimentalAutoDetectLongPolling", t.experimentalAutoDetectLongPolling);
        }
        isEqual(t) {
            return this.host === t.host && this.ssl === t.ssl && this.credentials === t.credentials && this.cacheSizeBytes === t.cacheSizeBytes && this.experimentalForceLongPolling === t.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === t.experimentalAutoDetectLongPolling && this.ignoreUndefinedProperties === t.ignoreUndefinedProperties;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ const zc$1 = new Map;

    /**
     * An instance map that ensures only one Datastore exists per Firestore
     * instance.
     */
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * The Cloud Firestore service interface.
     *
     * Do not call this constructor directly. Instead, use {@link getFirestore}.
     */
    class Hc$1 {
        /** @hideconstructor */
        constructor(t, e) {
            this.w_ = "(lite)", this.E_ = new Gc$1({}), this.T_ = !1, t instanceof q$1 ? (this.I_ = t, 
            this.m_ = new k$1) : (this.A_ = t, this.I_ = function(t) {
                if (!Object.prototype.hasOwnProperty.apply(t.options, [ "projectId" ])) throw new $(x$1.INVALID_ARGUMENT, '"projectId" not provided in firebase.initializeApp.');
                return new q$1(t.options.projectId);
            }
            /**
     * Modify this instance to communicate with the Cloud Firestore emulator.
     *
     * Note: This must be called before this instance has been used to do any
     * operations.
     *
     * @param firestore - The Firestore instance to configure to connect to the
     * emulator.
     * @param host - the emulator host (ex: localhost).
     * @param port - the emulator port (ex: 9000).
     */ (t), this.m_ = new M$1(e));
        }
        /**
         * The {@link FirebaseApp} associated with this `Firestore` service
         * instance.
         */    get app() {
            if (!this.A_) throw new $(x$1.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
            return this.A_;
        }
        get R_() {
            return this.T_;
        }
        get P_() {
            return void 0 !== this.V_;
        }
        g_(t) {
            if (this.T_) throw new $(x$1.FAILED_PRECONDITION, "Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");
            this.E_ = new Gc$1(t), void 0 !== t.credentials && (this.m_ = function(t) {
                if (!t) return new k$1;
                switch (t.type) {
                  case "gapi":
                    const e = t.client;
                    // Make sure this really is a Gapi client.
                                    return C(!("object" != typeof e || null === e || !e.auth || !e.auth.getAuthHeaderValueForFirstParty)), 
                    new L$1(e, t.sessionIndex || "0");

                  case "provider":
                    return t.client;

                  default:
                    throw new $(x$1.INVALID_ARGUMENT, "makeCredentialsProvider failed due to invalid credential type");
                }
            }(t.credentials));
        }
        y_() {
            return this.E_;
        }
        p_() {
            return this.T_ = !0, this.E_;
        }
        _delete() {
            return this.V_ || (this.V_ = this.b_()), this.V_;
        }
        toJSON() {
            return {
                app: this.A_,
                p: this.I_,
                settings: this.E_
            };
        }
        /**
         * Terminates all components used by this client. Subclasses can override
         * this method to clean up their own dependencies, but must also call this
         * method.
         *
         * Only ever called once.
         */    b_() {
            /**
     * Removes all components associated with the provided instance. Must be called
     * when the `Firestore` instance is terminated.
     */
            return function(t) {
                const e = zc$1.get(t);
                e && (p$1("ComponentProvider", "Removing Datastore"), zc$1.delete(t), e.terminate());
            }(this), Promise.resolve();
        }
    }

    function Jc$1(t, e, n) {
        const s = (t = Wc$1(t, Hc$1)).y_();
        "firestore.googleapis.com" !== s.host && s.host !== e && v$1("Host has been set in both settings() and useEmulator(), emulator host will be used"), 
        t.g_(Object.assign(Object.assign({}, s), {
            host: `${e}:${n}`,
            ssl: !1
        }));
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A `DocumentReference` refers to a document location in a Firestore database
     * and can be used to write, read, or listen to the location. The document at
     * the referenced location may or may not exist.
     */ class Yc$1 {
        /** @hideconstructor */
        constructor(t, e, n) {
            this.v_ = e, this.S_ = n, 
            /** The type of this Firestore reference. */
            this.type = "document", this.firestore = t;
        }
        get D_() {
            return this.S_.path;
        }
        /**
         * The document's identifier within its collection.
         */    get id() {
            return this.S_.path.J();
        }
        /**
         * A string representing the path of the referenced document (relative
         * to the root of the database).
         */    get path() {
            return this.S_.path.et();
        }
        /**
         * The collection this `DocumentReference` belongs to.
         */    get parent() {
            return new Zc$1(this.firestore, this.v_, this.S_.path.G());
        }
        /**
         * Applies a custom data converter to this `DocumentReference`, allowing you
         * to use your own custom model objects with Firestore. When you call {@link
         * setDoc}, {@link getDoc}, etc. with the returned `DocumentReference`
         * instance, the provided converter will convert between Firestore data and
         * your custom type `U`.
         *
         * @param converter - Converts objects to and from Firestore.
         * @returns A `DocumentReference<U>` that uses the provided converter.
         */    withConverter(t) {
            return new Yc$1(this.firestore, t, this.S_);
        }
    }

    /**
     * A `Query` refers to a Query which you can read or listen to. You can also
     * construct refined `Query` objects by adding filters and ordering.
     */ class Xc$1 {
        // This is the lite version of the Query class in the main SDK.
        /** @hideconstructor protected */
        constructor(t, e, n) {
            this.v_ = e, this.C_ = n, 
            /** The type of this Firestore reference. */
            this.type = "query", this.firestore = t;
        }
        /**
         * Applies a custom data converter to this query, allowing you to use your own
         * custom model objects with Firestore. When you call {@link getDocs} with
         * the returned query, the provided converter will convert between Firestore
         * data and your custom type `U`.
         *
         * @param converter - Converts objects to and from Firestore.
         * @returns A `Query<U>` that uses the provided converter.
         */    withConverter(t) {
            return new Xc$1(this.firestore, t, this.C_);
        }
    }

    /**
     * A `CollectionReference` object can be used for adding documents, getting
     * document references, and querying for documents (using {@link query}).
     */ class Zc$1 extends Xc$1 {
        /** @hideconstructor */
        constructor(t, e, n) {
            super(t, e, oe(n)), this.firestore = t, this.D_ = n, this.type = "collection";
        }
        /** The collection's identifier. */    get id() {
            return this.C_.path.J();
        }
        /**
         * A string representing the path of the referenced collection (relative
         * to the root of the database).
         */    get path() {
            return this.C_.path.et();
        }
        /**
         * A reference to the containing `DocumentReference` if this is a
         * subcollection. If this isn't a subcollection, the reference is null.
         */    get parent() {
            const t = this.D_.G();
            return t.Y() ? null : new Yc$1(this.firestore, 
            /* converter= */ null, new tt(t));
        }
        /**
         * Applies a custom data converter to this CollectionReference, allowing you
         * to use your own custom model objects with Firestore. When you call {@link
         * addDoc} with the returned `CollectionReference` instance, the provided
         * converter will convert between Firestore data and your custom type `U`.
         *
         * @param converter - Converts objects to and from Firestore.
         * @returns A `CollectionReference<U>` that uses the provided converter.
         */    withConverter(t) {
            return new Zc$1(this.firestore, t, this.D_);
        }
    }

    function ta$1(t, e, ...n) {
        if (t instanceof Bc$1 && (t = t.d_), qc$1("collection", "path", e), t instanceof Hc$1) {
            const s = Y$1.nt(e, ...n);
            return Kc$1(s), new Zc$1(t, /* converter= */ null, s);
        }
        {
            if (!(t instanceof Yc$1 || t instanceof Zc$1)) throw new $(x$1.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
            const s = Y$1.nt(t.path, ...n).child(Y$1.nt(e));
            return Kc$1(s), new Zc$1(t.firestore, 
            /* converter= */ null, s);
        }
    }

    // TODO(firestorelite): Consider using ErrorFactory -
    // https://github.com/firebase/firebase-js-sdk/blob/0131e1f/packages/util/src/errors.ts#L106
    /**
     * Creates and returns a new `Query` instance that includes all documents in the
     * database that are contained in a collection or subcollection with the
     * given `collectionId`.
     *
     * @param firestore - A reference to the root Firestore instance.
     * @param collectionId - Identifies the collections to query over. Every
     * collection or subcollection with this ID as the last segment of its path
     * will be included. Cannot contain a slash.
     * @returns The created `Query`.
     */ function ea$1(t, e) {
        if (t = Wc$1(t, Hc$1), qc$1("collectionGroup", "collection id", e), e.indexOf("/") >= 0) throw new $(x$1.INVALID_ARGUMENT, `Invalid collection ID '${e}' passed to function collectionGroup(). Collection IDs must not contain '/'.`);
        return new Xc$1(t, 
        /* converter= */ null, 
        /**
     * Creates a new Query for a collection group query that matches all documents
     * within the provided collection group.
     */
        function(t) {
            return new ie(Y$1.st(), t);
        }(e));
    }

    function na$1(t, e, ...n) {
        if (t instanceof Bc$1 && (t = t.d_), 
        // We allow omission of 'pathString' but explicitly prohibit passing in both
        // 'undefined' and 'null'.
        1 === arguments.length && (e = Q$1.k()), qc$1("doc", "path", e), t instanceof Hc$1) {
            const s = Y$1.nt(e, ...n);
            return Uc$1(s), new Yc$1(t, 
            /* converter= */ null, new tt(s));
        }
        {
            if (!(t instanceof Yc$1 || t instanceof Zc$1)) throw new $(x$1.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
            const s = t.D_.child(Y$1.nt(e, ...n));
            return Uc$1(s), new Yc$1(t.firestore, t instanceof Zc$1 ? t.v_ : null, new tt(s));
        }
    }

    /**
     * Returns true if the provided references are equal.
     *
     * @param left - A reference to compare.
     * @param right - A reference to compare.
     * @returns true if the references point to the same location in the same
     * Firestore database.
     */ function sa$1(t, e) {
        return t instanceof Bc$1 && (t = t.d_), e instanceof Bc$1 && (e = e.d_), (t instanceof Yc$1 || t instanceof Zc$1) && (e instanceof Yc$1 || e instanceof Zc$1) && (t.firestore === e.firestore && t.path === e.path && t.v_ === e.v_);
    }

    /**
     * Returns true if the provided queries point to the same collection and apply
     * the same constraints.
     *
     * @param left - A `Query` to compare.
     * @param right - A `Query` to compare.
     * @returns true if the references point to the same location in the same
     * Firestore database.
     */ function ia(t, e) {
        return t instanceof Bc$1 && (t = t.d_), e instanceof Bc$1 && (e = e.d_), t instanceof Xc$1 && e instanceof Xc$1 && (t.firestore === e.firestore && we(t.C_, e.C_) && t.v_ === e.v_);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An immutable object representing a geographic location in Firestore. The
     * location is represented as latitude/longitude pair.
     *
     * Latitude values are in the range of [-90, 90].
     * Longitude values are in the range of [-180, 180].
     */ class ra$1 {
        /**
         * Creates a new immutable `GeoPoint` object with the provided latitude and
         * longitude values.
         * @param latitude - The latitude as number between -90 and 90.
         * @param longitude - The longitude as number between -180 and 180.
         */
        constructor(t, e) {
            if (!isFinite(t) || t < -90 || t > 90) throw new $(x$1.INVALID_ARGUMENT, "Latitude must be a number between -90 and 90, but was: " + t);
            if (!isFinite(e) || e < -180 || e > 180) throw new $(x$1.INVALID_ARGUMENT, "Longitude must be a number between -180 and 180, but was: " + e);
            this.N_ = t, this.x_ = e;
        }
        /**
         * The latitude of this `GeoPoint` instance.
         */    get latitude() {
            return this.N_;
        }
        /**
         * The longitude of this `GeoPoint` instance.
         */    get longitude() {
            return this.x_;
        }
        /**
         * Returns true if this `GeoPoint` is equal to the provided one.
         *
         * @param other - The `GeoPoint` to compare against.
         * @returns true if this `GeoPoint` is equal to the provided one.
         */    isEqual(t) {
            return this.N_ === t.N_ && this.x_ === t.x_;
        }
        toJSON() {
            return {
                latitude: this.N_,
                longitude: this.x_
            };
        }
        /**
         * Actually private to JS consumers of our API, so this function is prefixed
         * with an underscore.
         */    M(t) {
            return W$1(this.N_, t.N_) || W$1(this.x_, t.x_);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ const oa$1 = /^__.*__$/;

    /** The result of parsing document data (e.g. for a setData call). */ class ca$1 {
        constructor(t, e, n) {
            this.data = t, this.jt = e, this.fieldTransforms = n;
        }
        O_(t, e) {
            return null !== this.jt ? new He(t, this.data, this.jt, e, this.fieldTransforms) : new ze(t, this.data, e, this.fieldTransforms);
        }
    }

    /** The result of parsing "update" data (i.e. for an updateData call). */ class aa$1 {
        constructor(t, 
        // The fieldMask does not include document transforms.
        e, n) {
            this.data = t, this.jt = e, this.fieldTransforms = n;
        }
        O_(t, e) {
            return new He(t, this.data, this.jt, e, this.fieldTransforms);
        }
    }

    function ua$1(t) {
        switch (t) {
          case 0 /* Set */ :
     // fall through
                  case 2 /* MergeSet */ :
     // fall through
                  case 1 /* Update */ :
            return !0;

          case 3 /* Argument */ :
          case 4 /* ArrayArgument */ :
            return !1;

          default:
            throw D$1();
        }
    }

    /** A "context" object passed around while parsing user data. */ class ha$1 {
        /**
         * Initializes a ParseContext with the given source and path.
         *
         * @param settings - The settings for the parser.
         * @param databaseId - The database ID of the Firestore instance.
         * @param serializer - The serializer to use to generate the Value proto.
         * @param ignoreUndefinedProperties - Whether to ignore undefined properties
         * rather than throw.
         * @param fieldTransforms - A mutable list of field transforms encountered
         * while parsing the data.
         * @param fieldMask - A mutable list of field paths encountered while parsing
         * the data.
         *
         * TODO(b/34871131): We don't support array paths right now, so path can be
         * null to indicate the context represents any location within an array (in
         * which case certain features will not work and errors will be somewhat
         * compromised).
         */
        constructor(t, e, n, s, i, r) {
            this.settings = t, this.p = e, this.Ut = n, this.ignoreUndefinedProperties = s, 
            // Minor hack: If fieldTransforms is undefined, we assume this is an
            // external call and we need to validate the entire path.
            void 0 === i && this.k_(), this.fieldTransforms = i || [], this.jt = r || [];
        }
        get path() {
            return this.settings.path;
        }
        get M_() {
            return this.settings.M_;
        }
        /** Returns a new context with the specified settings overwritten. */    F_(t) {
            return new ha$1(Object.assign(Object.assign({}, this.settings), t), this.p, this.Ut, this.ignoreUndefinedProperties, this.fieldTransforms, this.jt);
        }
        L_(t) {
            var e;
            const n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t), s = this.F_({
                path: n,
                B_: !1
            });
            return s.q_(t), s;
        }
        U_(t) {
            var e;
            const n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t), s = this.F_({
                path: n,
                B_: !1
            });
            return s.k_(), s;
        }
        K_(t) {
            // TODO(b/34871131): We don't support array paths right now; so make path
            // undefined.
            return this.F_({
                path: void 0,
                B_: !0
            });
        }
        Q_(t) {
            return Da$1(t, this.settings.methodName, this.settings.W_ || !1, this.path, this.settings.j_);
        }
        /** Returns 'true' if 'fieldPath' was traversed when creating this context. */    contains(t) {
            return void 0 !== this.jt.find((e => t.X(e))) || void 0 !== this.fieldTransforms.find((e => t.X(e.field)));
        }
        k_() {
            // TODO(b/34871131): Remove null check once we have proper paths for fields
            // within arrays.
            if (this.path) for (let t = 0; t < this.path.length; t++) this.q_(this.path.get(t));
        }
        q_(t) {
            if (0 === t.length) throw this.Q_("Document fields must not be empty");
            if (ua$1(this.M_) && oa$1.test(t)) throw this.Q_('Document fields cannot begin and end with "__"');
        }
    }

    /**
     * Helper for parsing raw user input (provided via the API) into internal model
     * classes.
     */ class la {
        constructor(t, e, n) {
            this.p = t, this.ignoreUndefinedProperties = e, this.Ut = n || Yr(t);
        }
        /** Creates a new top-level parse context. */    G_(t, e, n, s = !1) {
            return new ha$1({
                M_: t,
                methodName: e,
                j_: n,
                path: Z$1.st(),
                B_: !1,
                W_: s
            }, this.p, this.Ut, this.ignoreUndefinedProperties);
        }
    }

    function _a$1(t) {
        const e = t.p_(), n = Yr(t.I_);
        return new la(t.I_, !!e.ignoreUndefinedProperties, n);
    }

    /** Parse document data from a set() call. */ function fa$1(t, e, n, s, i, r = {}) {
        const o = t.G_(r.merge || r.mergeFields ? 2 /* MergeSet */ : 0 /* Set */ , e, n, i);
        pa$1("Data must be an object, but it was:", o, s);
        const c = ga(s, o);
        let a, u;
        if (r.merge) a = new it(o.jt), u = o.fieldTransforms; else if (r.mergeFields) {
            const t = [];
            for (const s of r.mergeFields) {
                const i = ba$1(e, s, n);
                if (!o.contains(i)) throw new $(x$1.INVALID_ARGUMENT, `Field '${i}' is specified in your field mask but missing from your input data.`);
                Ca$1(t, i) || t.push(i);
            }
            a = new it(t), u = o.fieldTransforms.filter((t => a.ft(t.field)));
        } else a = null, u = o.fieldTransforms;
        return new ca$1(new St(c), a, u);
    }

    class da$1 extends Lc$1 {
        z_(t) {
            if (2 /* MergeSet */ !== t.M_) throw 1 /* Update */ === t.M_ ? t.Q_(`${this._methodName}() can only appear at the top level of your update data`) : t.Q_(`${this._methodName}() cannot be used with set() unless you pass {merge:true}`);
            // No transform to add for a delete, but we need to add it to our
            // fieldMask so it gets deleted.
            return t.jt.push(t.path), null;
        }
        isEqual(t) {
            return t instanceof da$1;
        }
    }

    /**
     * Creates a child context for parsing SerializableFieldValues.
     *
     * This is different than calling `ParseContext.contextWith` because it keeps
     * the fieldTransforms and fieldMask separate.
     *
     * The created context has its `dataSource` set to `UserDataSource.Argument`.
     * Although these values are used with writes, any elements in these FieldValues
     * are not considered writes since they cannot contain any FieldValue sentinels,
     * etc.
     *
     * @param fieldValue - The sentinel FieldValue for which to create a child
     *     context.
     * @param context - The parent context.
     * @param arrayElement - Whether or not the FieldValue has an array.
     */ function wa$1(t, e, n) {
        return new ha$1({
            M_: 3 /* Argument */ ,
            j_: e.settings.j_,
            methodName: t._methodName,
            B_: n
        }, e.p, e.Ut, e.ignoreUndefinedProperties);
    }

    class Ea$1 extends Lc$1 {
        z_(t) {
            return new Me(t.path, new Se);
        }
        isEqual(t) {
            return t instanceof Ea$1;
        }
    }

    class Ta$1 extends Lc$1 {
        constructor(t, e) {
            super(t), this.H_ = e;
        }
        z_(t) {
            const e = wa$1(this, t, 
            /*array=*/ !0), n = this.H_.map((t => Va$1(t, e))), s = new De(n);
            return new Me(t.path, s);
        }
        isEqual(t) {
            // TODO(mrschmidt): Implement isEquals
            return this === t;
        }
    }

    class Ia$1 extends Lc$1 {
        constructor(t, e) {
            super(t), this.H_ = e;
        }
        z_(t) {
            const e = wa$1(this, t, 
            /*array=*/ !0), n = this.H_.map((t => Va$1(t, e))), s = new Ne(n);
            return new Me(t.path, s);
        }
        isEqual(t) {
            // TODO(mrschmidt): Implement isEquals
            return this === t;
        }
    }

    class ma$1 extends Lc$1 {
        constructor(t, e) {
            super(t), this.J_ = e;
        }
        z_(t) {
            const e = new $e(t.Ut, ge(t.Ut, this.J_));
            return new Me(t.path, e);
        }
        isEqual(t) {
            // TODO(mrschmidt): Implement isEquals
            return this === t;
        }
    }

    /** Parse update data from an update() call. */ function Aa$1(t, e, n, s) {
        const i = t.G_(1 /* Update */ , e, n);
        pa$1("Data must be an object, but it was:", i, s);
        const r = [], o = new Dt;
        nt(s, ((t, s) => {
            const c = Sa$1(e, t, n);
            // For Compat types, we have to "extract" the underlying types before
            // performing validation.
                    s instanceof Bc$1 && (s = s.d_);
            const a = i.U_(c);
            if (s instanceof da$1) 
            // Add it to the field mask, but don't add anything to updateData.
            r.push(c); else {
                const t = Va$1(s, a);
                null != t && (r.push(c), o.set(c, t));
            }
        }));
        const c = new it(r);
        return new aa$1(o.Rt(), c, i.fieldTransforms);
    }

    /** Parse update data from a list of field/value arguments. */ function Ra$1(t, e, n, s, i, r) {
        const o = t.G_(1 /* Update */ , e, n), c = [ ba$1(e, s, n) ], a = [ i ];
        if (r.length % 2 != 0) throw new $(x$1.INVALID_ARGUMENT, `Function ${e}() needs to be called with an even number of arguments that alternate between field names and values.`);
        for (let t = 0; t < r.length; t += 2) c.push(ba$1(e, r[t])), a.push(r[t + 1]);
        const u = [], h = new Dt;
        // We iterate in reverse order to pick the last value for a field if the
        // user specified the field multiple times.
        for (let t = c.length - 1; t >= 0; --t) if (!Ca$1(u, c[t])) {
            const e = c[t];
            let n = a[t];
            // For Compat types, we have to "extract" the underlying types before
            // performing validation.
                    n instanceof Bc$1 && (n = n.d_);
            const s = o.U_(e);
            if (n instanceof da$1) 
            // Add it to the field mask, but don't add anything to updateData.
            u.push(e); else {
                const t = Va$1(n, s);
                null != t && (u.push(e), h.set(e, t));
            }
        }
        const l = new it(u);
        return new aa$1(h.Rt(), l, o.fieldTransforms);
    }

    /**
     * Parse a "query value" (e.g. value in a where filter or a value in a cursor
     * bound).
     *
     * @param allowArrays - Whether the query value is an array that may directly
     * contain additional arrays (e.g. the operand of an `in` query).
     */ function Pa$1(t, e, n, s = !1) {
        return Va$1(n, t.G_(s ? 4 /* ArrayArgument */ : 3 /* Argument */ , e));
    }

    /**
     * Parses user data to Protobuf Values.
     *
     * @param input - Data to be parsed.
     * @param context - A context object representing the current path being parsed,
     * the source of the data being parsed, etc.
     * @returns The parsed value, or null if the value was a FieldValue sentinel
     * that should not be included in the resulting parsed data.
     */ function Va$1(t, e) {
        if (
        // Unwrap the API type from the Compat SDK. This will return the API type
        // from firestore-exp.
        t instanceof Bc$1 && (t = t.d_), ya(t)) return pa$1("Unsupported field value:", e, t), 
        ga(t, e);
        if (t instanceof Lc$1) 
        // FieldValues usually parse into transforms (except FieldValue.delete())
        // in which case we do not want to include this field in our parsed data
        // (as doing so will overwrite the field directly prior to the transform
        // trying to transform it). So we don't add this location to
        // context.fieldMask and we return null as our parsing result.
        /**
     * "Parses" the provided FieldValueImpl, adding any necessary transforms to
     * context.fieldTransforms.
     */
        return function(t, e) {
            // Sentinels are only supported with writes, and not within arrays.
            if (!ua$1(e.M_)) throw e.Q_(`${t._methodName}() can only be used with update() and set()`);
            if (!e.path) throw e.Q_(`${t._methodName}() is not currently supported inside arrays`);
            const n = t.z_(e);
            n && e.fieldTransforms.push(n);
        }
        /**
     * Helper to parse a scalar value (i.e. not an Object, Array, or FieldValue)
     *
     * @returns The parsed value
     */ (t, e), null;
        if (void 0 === t && e.ignoreUndefinedProperties) 
        // If the input is undefined it can never participate in the fieldMask, so
        // don't handle this below. If `ignoreUndefinedProperties` is false,
        // `parseScalarValue` will reject an undefined value.
        return null;
        if (
        // If context.path is null we are inside an array and we don't support
        // field mask paths more granular than the top-level array.
        e.path && e.jt.push(e.path), t instanceof Array) {
            // TODO(b/34871131): Include the path containing the array in the error
            // message.
            // In the case of IN queries, the parsed data is an array (representing
            // the set of values to be included for the IN query) that may directly
            // contain additional arrays (each representing an individual field
            // value), so we disable this validation.
            if (e.settings.B_ && 4 /* ArrayArgument */ !== e.M_) throw e.Q_("Nested arrays are not supported");
            return function(t, e) {
                const n = [];
                let s = 0;
                for (const i of t) {
                    let t = Va$1(i, e.K_(s));
                    null == t && (
                    // Just include nulls in the array for fields being replaced with a
                    // sentinel.
                    t = {
                        nullValue: "NULL_VALUE"
                    }), n.push(t), s++;
                }
                return {
                    arrayValue: {
                        values: n
                    }
                };
            }(t, e);
        }
        return function(t, e) {
            t instanceof Bc$1 && (t = t.d_);
            if (null === t) return {
                nullValue: "NULL_VALUE"
            };
            if ("number" == typeof t) return ge(e.Ut, t);
            if ("boolean" == typeof t) return {
                booleanValue: t
            };
            if ("string" == typeof t) return {
                stringValue: t
            };
            if (t instanceof Date) {
                const n = z$1.fromDate(t);
                return {
                    timestampValue: Ln(e.Ut, n)
                };
            }
            if (t instanceof z$1) {
                // Firestore backend truncates precision down to microseconds. To ensure
                // offline mode works the same with regards to truncation, perform the
                // truncation immediately without waiting for the backend to do that.
                const n = new z$1(t.seconds, 1e3 * Math.floor(t.nanoseconds / 1e3));
                return {
                    timestampValue: Ln(e.Ut, n)
                };
            }
            if (t instanceof ra$1) return {
                geoPointValue: {
                    latitude: t.latitude,
                    longitude: t.longitude
                }
            };
            if (t instanceof kc$1) return {
                bytesValue: Bn(e.Ut, t.__)
            };
            if (t instanceof Yc$1) {
                const n = e.p, s = t.firestore.I_;
                if (!s.isEqual(n)) throw e.Q_(`Document reference is for database ${s.projectId}/${s.database} but should be for database ${n.projectId}/${n.database}`);
                return {
                    referenceValue: Kn(t.firestore.I_ || e.p, t.S_.path)
                };
            }
            throw e.Q_(`Unsupported field value: ${Qc$1(t)}`);
        }
        /**
     * Checks whether an object looks like a JSON object that should be converted
     * into a struct. Normal class/prototype instances are considered to look like
     * JSON objects since they should be converted to a struct value. Arrays, Dates,
     * GeoPoints, etc. are not considered to look like JSON objects since they map
     * to specific FieldValue types other than ObjectValue.
     */ (t, e);
    }

    function ga(t, e) {
        const n = {};
        return st(t) ? 
        // If we encounter an empty object, we explicitly add it to the update
        // mask to ensure that the server creates a map entry.
        e.path && e.path.length > 0 && e.jt.push(e.path) : nt(t, ((t, s) => {
            const i = Va$1(s, e.L_(t));
            null != i && (n[t] = i);
        })), {
            mapValue: {
                fields: n
            }
        };
    }

    function ya(t) {
        return !("object" != typeof t || null === t || t instanceof Array || t instanceof Date || t instanceof z$1 || t instanceof ra$1 || t instanceof kc$1 || t instanceof Yc$1 || t instanceof Lc$1);
    }

    function pa$1(t, e, n) {
        if (!ya(n) || !function(t) {
            return "object" == typeof t && null !== t && (Object.getPrototypeOf(t) === Object.prototype || null === Object.getPrototypeOf(t));
        }(n)) {
            const s = Qc$1(n);
            throw "an object" === s ? e.Q_(t + " a custom object") : e.Q_(t + " " + s);
        }
    }

    /**
     * Helper that calls fromDotSeparatedString() but wraps any error thrown.
     */ function ba$1(t, e, n) {
        if (
        // If required, replace the FieldPath Compat class with with the firestore-exp
        // FieldPath.
        e instanceof Bc$1 && (e = e.d_), e instanceof Mc$1) return e.f_;
        if ("string" == typeof e) return Sa$1(t, e);
        throw Da$1("Field path arguments must be of type string or FieldPath.", t, 
        /* hasConverter= */ !1, 
        /* path= */ void 0, n);
    }

    /**
     * Matches any characters in a field path string that are reserved.
     */ const va$1 = new RegExp("[~\\*/\\[\\]]");

    /**
     * Wraps fromDotSeparatedString with an error message about the method that
     * was thrown.
     * @param methodName - The publicly visible method name
     * @param path - The dot-separated string form of a field path which will be
     * split on dots.
     * @param targetDoc - The document against which the field path will be
     * evaluated.
     */ function Sa$1(t, e, n) {
        if (e.search(va$1) >= 0) throw Da$1(`Invalid field path (${e}). Paths must not contain '~', '*', '/', '[', or ']'`, t, 
        /* hasConverter= */ !1, 
        /* path= */ void 0, n);
        try {
            return new Mc$1(...e.split(".")).f_;
        } catch (s) {
            throw Da$1(`Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`, t, 
            /* hasConverter= */ !1, 
            /* path= */ void 0, n);
        }
    }

    function Da$1(t, e, n, s, i) {
        const r = s && !s.Y(), o = void 0 !== i;
        let c = `Function ${e}() called with invalid data`;
        n && (c += " (via `toFirestore()`)"), c += ". ";
        let a = "";
        return (r || o) && (a += " (found", r && (a += ` in field ${s}`), o && (a += ` in document ${i}`), 
        a += ")"), new $(x$1.INVALID_ARGUMENT, c + t + a);
    }

    /** Checks `haystack` if FieldPath `needle` is present. Runs in O(n). */ function Ca$1(t, e) {
        return t.some((t => t.isEqual(e)));
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Internal transaction object responsible for accumulating the mutations to
     * perform and the base versions for any documents read.
     */ class Na$1 {
        constructor(t) {
            this.bh = t, 
            // The version of each document that was read during this transaction.
            this.Y_ = new Map, this.mutations = [], this.X_ = !1, 
            /**
             * A deferred usage error that occurred previously in this transaction that
             * will cause the transaction to fail once it actually commits.
             */
            this.Z_ = null, 
            /**
             * Set of documents that have been written in the transaction.
             *
             * When there's more than one write to the same key in a transaction, any
             * writes after the first are handled differently.
             */
            this.tf = new Set;
        }
        async ef(t) {
            if (this.nf(), this.mutations.length > 0) throw new $(x$1.INVALID_ARGUMENT, "Firestore transactions require all reads to be executed before all writes.");
            const e = await async function(t, e) {
                const n = N$1(t), s = Hn(n.Ut) + "/documents", i = {
                    documents: e.map((t => Wn(n.Ut, t)))
                }, r = await n.Su("BatchGetDocuments", s, i), o = new Map;
                r.forEach((t => {
                    const e = Zn(n.Ut, t);
                    o.set(e.key.toString(), e);
                }));
                const c = [];
                return e.forEach((t => {
                    const e = o.get(t.toString());
                    C(!!e), c.push(e);
                })), c;
            }(this.bh, t);
            return e.forEach((t => {
                t instanceof $t || t instanceof xt ? this.sf(t) : D$1();
            })), e;
        }
        set(t, e) {
            this.write(e.O_(t, this.Wt(t))), this.tf.add(t.toString());
        }
        update(t, e) {
            try {
                this.write(e.O_(t, this.rf(t)));
            } catch (t) {
                this.Z_ = t;
            }
            this.tf.add(t.toString());
        }
        delete(t) {
            this.write(new tn(t, this.Wt(t))), this.tf.add(t.toString());
        }
        async commit() {
            if (this.nf(), this.Z_) throw this.Z_;
            const t = this.Y_;
            // For each mutation, note that the doc was written.
                    this.mutations.forEach((e => {
                t.delete(e.key.toString());
            })), 
            // For each document that was read but not written to, we want to perform
            // a `verify` operation.
            t.forEach(((t, e) => {
                const n = tt.at(e);
                this.mutations.push(new en(n, this.Wt(n)));
            })), await async function(t, e) {
                const n = N$1(t), s = Hn(n.Ut) + "/documents", i = {
                    writes: e.map((t => es(n.Ut, t)))
                };
                await n.yu("Commit", s, i);
            }(this.bh, this.mutations), this.X_ = !0;
        }
        sf(t) {
            let e;
            if (t instanceof xt) e = t.version; else {
                if (!(t instanceof $t)) throw D$1();
                // For deleted docs, we must use baseVersion 0 when we overwrite them.
                e = H$1.min();
            }
            const n = this.Y_.get(t.key.toString());
            if (n) {
                if (!e.isEqual(n)) 
                // This transaction will fail no matter what.
                throw new $(x$1.ABORTED, "Document version changed between two reads.");
            } else this.Y_.set(t.key.toString(), e);
        }
        /**
         * Returns the version of this document when it was read in this transaction,
         * as a precondition, or no precondition if it was not read.
         */    Wt(t) {
            const e = this.Y_.get(t.toString());
            return !this.tf.has(t.toString()) && e ? Be.updateTime(e) : Be.Kt();
        }
        /**
         * Returns the precondition for a document if the operation is an update.
         */    rf(t) {
            const e = this.Y_.get(t.toString());
            // The first time a document is written, we want to take into account the
            // read time and existence
                    if (!this.tf.has(t.toString()) && e) {
                if (e.isEqual(H$1.min())) 
                // The document doesn't exist, so fail the transaction.
                // This has to be validated locally because you can't send a
                // precondition that a document does not exist without changing the
                // semantics of the backend write to be an insert. This is the reverse
                // of what we want, since we want to assert that the document doesn't
                // exist but then send the update and have it fail. Since we can't
                // express that to the backend, we have to validate locally.
                // Note: this can change once we can send separate verify writes in the
                // transaction.
                throw new $(x$1.INVALID_ARGUMENT, "Can't update a document that doesn't exist.");
                // Document exists, base precondition on document update time.
                            return Be.updateTime(e);
            }
            // Document was not read, so we just use the preconditions for a blind
            // update.
            return Be.exists(!0);
        }
        write(t) {
            this.nf(), this.mutations.push(t);
        }
        nf() {}
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * TransactionRunner encapsulates the logic needed to run and retry transactions
     * with backoff.
     */
    class xa {
        constructor(t, e, n, s) {
            this.ls = t, this.bh = e, this.updateFunction = n, this.ws = s, this.cf = 5, this.ju = new Xr(this.ls, "transaction_retry" /* TransactionRetry */);
        }
        /** Runs the transaction and sets the result on deferred. */    run() {
            this.af();
        }
        af() {
            this.ju.Fu((async () => {
                const t = new Na$1(this.bh), e = this.uf(t);
                e && e.then((e => {
                    this.ls.Rs((() => t.commit().then((() => {
                        this.ws.resolve(e);
                    })).catch((t => {
                        this.hf(t);
                    }))));
                })).catch((t => {
                    this.hf(t);
                }));
            }));
        }
        uf(t) {
            try {
                const e = this.updateFunction(t);
                return !ft(e) && e.catch && e.then ? e : (this.ws.reject(Error("Transaction callback must return a Promise")), 
                null);
            } catch (t) {
                // Do not retry errors thrown by user provided updateFunction.
                return this.ws.reject(t), null;
            }
        }
        hf(t) {
            this.cf > 0 && this.lf(t) ? (this.cf -= 1, this.ls.Rs((() => (this.af(), Promise.resolve())))) : this.ws.reject(t);
        }
        lf(t) {
            if ("FirebaseError" === t.name) {
                // In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and
                // non-matching document versions with ABORTED. These errors should be retried.
                const e = t.code;
                return "aborted" === e || "failed-precondition" === e || !on(e);
            }
            return !1;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * FirestoreClient is a top-level class that constructs and owns all of the
     * pieces of the client SDK architecture. It is responsible for creating the
     * async queue that is shared by all of the other components in the system.
     */
    class $a$1 {
        constructor(t, 
        /**
         * Asynchronous queue responsible for all of our internal processing. When
         * we get incoming work from the user (via public API) or the network
         * (incoming GRPC messages), we should always schedule onto this queue.
         * This ensures all of our work is properly serialized (e.g. we don't
         * start processing a new operation while the previous one is waiting for
         * an async I/O to complete).
         */
        e, n) {
            this.credentials = t, this.ls = e, this.Pu = n, this.user = P$1.UNAUTHENTICATED, this.clientId = Q$1.k(), 
            this._f = () => {}, this.A = new ms, this.credentials.T((t => {
                p$1("FirestoreClient", "Received user=", t.uid), this.user = t, this._f(t), this.A.resolve();
            }));
        }
        async getConfiguration() {
            return await this.A.promise, {
                ls: this.ls,
                Pu: this.Pu,
                clientId: this.clientId,
                credentials: this.credentials,
                Hl: this.user,
                yl: 100
            };
        }
        ff(t) {
            this._f = t, 
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.A.promise.then((() => this._f(this.user)));
        }
        /**
         * Checks that the client has not been terminated. Ensures that other methods on
         * this class cannot be called after the client is terminated.
         */    df() {
            if (this.ls.wf) throw new $(x$1.FAILED_PRECONDITION, "The client has already been terminated.");
        }
        terminate() {
            this.ls.Ef();
            const t = new ms;
            return this.ls.Tf((async () => {
                try {
                    this.If && await this.If.terminate(), this.mf && await this.mf.terminate(), 
                    // `removeChangeListener` must be called after shutting down the
                    // RemoteStore as it will prevent the RemoteStore from retrieving
                    // auth tokens.
                    this.credentials.I(), t.resolve();
                } catch (e) {
                    const n = Cs(e, "Failed to shutdown persistence");
                    t.reject(n);
                }
            })), t.promise;
        }
    }

    async function Oa$1(t, e) {
        t.ls.Af(), p$1("FirestoreClient", "Initializing OfflineComponentProvider");
        const n = await t.getConfiguration();
        await e.initialize(n);
        let s = n.Hl;
        t.ff((n => {
            s.isEqual(n) || (s = n, t.ls.yo((async () => {
                await hr(e.ph, n);
            })));
        })), 
        // When a user calls clearPersistence() in one client, all other clients
        // need to be terminated to allow the delete to succeed.
        e.persistence.Ro((() => t.terminate())), t.mf = e;
    }

    async function ka$1(t, e) {
        t.ls.Af();
        const n = await Ma$1(t);
        p$1("FirestoreClient", "Initializing OnlineComponentProvider");
        const s = await t.getConfiguration();
        await e.initialize(n, s), 
        // The CredentialChangeListener of the online component provider takes
        // precedence over the offline component provider.
        t.ff((n => t.ls.yo((() => async function(t, e) {
            const n = N$1(t);
            n.ls.Af(), p$1("RemoteStore", "RemoteStore received new credentials");
            const s = fo(n);
            // Tear down and re-create our network streams. This will ensure we get a
            // fresh auth token for the new user and re-fill the write pipeline with
            // new mutations from the LocalStore (since mutations are per-user).
                    n.Nh.add(3 /* CredentialChange */), await oo(n), s && 
            // Don't set the network status to Unknown if we are offline.
            n.Oh.set("Unknown" /* Unknown */), await n.Sh.e_(e), n.Nh.delete(3 /* CredentialChange */), 
            await ro(n);
        }(e.Pl, n))))), t.If = e;
    }

    async function Ma$1(t) {
        return t.mf || (p$1("FirestoreClient", "Using default OfflineComponentProvider"), 
        await Oa$1(t, new Sc$1)), t.mf;
    }

    async function Fa$1(t) {
        return t.If || (p$1("FirestoreClient", "Using default OnlineComponentProvider"), await ka$1(t, new Nc$1)), 
        t.If;
    }

    function La$1(t) {
        return Ma$1(t).then((t => t.persistence));
    }

    function Ba$1(t) {
        return Ma$1(t).then((t => t.ph));
    }

    function qa$1(t) {
        return Fa$1(t).then((t => t.Pl));
    }

    function Ua$1(t) {
        return Fa$1(t).then((t => t.la));
    }

    async function Ka$1(t) {
        const e = await Fa$1(t), n = e.Vl;
        return n.Wh = Yo.bind(null, e.la), n.zh = Zo.bind(null, e.la), n;
    }

    /** Enables the network connection and re-enqueues all pending operations. */ function Qa$1(t) {
        return t.ls.enqueue((async () => {
            const e = await La$1(t), n = await qa$1(t);
            return e.Po(!0), function(t) {
                const e = N$1(t);
                return e.Nh.delete(0 /* UserDisabled */), ro(e);
            }(n);
        }));
    }

    /** Disables the network connection. Pending operations will not complete. */ function Wa$1(t) {
        return t.ls.enqueue((async () => {
            const e = await La$1(t), n = await qa$1(t);
            return e.Po(!1), async function(t) {
                const e = N$1(t);
                e.Nh.add(0 /* UserDisabled */), await oo(e), 
                // Set the OnlineState to Offline so get()s return from cache, etc.
                e.Oh.set("Offline" /* Offline */);
            }(n);
        }));
    }

    /**
     * Returns a Promise that resolves when all writes that were pending at the time
     * this method was called received server acknowledgement. An acknowledgement
     * can be either acceptance or rejection.
     */ function ja$1(t, e) {
        const n = new ms;
        return t.ls.Rs((async () => async function(t, e, n) {
            try {
                const s = await function(t, e) {
                    const n = N$1(t);
                    return n.persistence.runTransaction("read document", "readonly", (t => n.Ec.zo(t, e)));
                }(t, e);
                s instanceof xt ? n.resolve(s) : s instanceof $t ? n.resolve(null) : n.reject(new $(x$1.UNAVAILABLE, "Failed to get document from cache. (However, this document may exist on the server. Run again without setting 'source' in the GetOptions to attempt to retrieve the document from the server.)"));
            } catch (t) {
                const s = Cs(t, `Failed to get document '${e} from cache`);
                n.reject(s);
            }
        }
        /**
     * Retrieves a latency-compensated document from the backend via a
     * SnapshotListener.
     */ (await Ba$1(t), e, n))), n.promise;
    }

    function Ga$1(t, e, n = {}) {
        const s = new ms;
        return t.ls.Rs((async () => function(t, e, n, s, i) {
            const r = new $c$1({
                next: r => {
                    // Remove query first before passing event to user to avoid
                    // user actions affecting the now stale query.
                    e.Rs((() => ko(t, o)));
                    const c = r.docs.has(n);
                    !c && r.fromCache ? 
                    // TODO(dimond): If we're online and the document doesn't
                    // exist then we resolve with a doc.exists set to false. If
                    // we're offline however, we reject the Promise in this
                    // case. Two options: 1) Cache the negative response from
                    // the server so we can deliver that even when you're
                    // offline 2) Actually reject the Promise in the online case
                    // if the document doesn't exist.
                    i.reject(new $(x$1.UNAVAILABLE, "Failed to get document because the client is offline.")) : c && r.fromCache && s && "server" === s.source ? i.reject(new $(x$1.UNAVAILABLE, 'Failed to get document from server. (However, this document does exist in the local cache. Run again without setting source to "server" to retrieve the cached document.)')) : i.resolve(r);
                },
                error: t => i.reject(t)
            }), o = new Bo(oe(n.path), r, {
                includeMetadataChanges: !0,
                el: !0
            });
            return Oo(t, o);
        }(await Ka$1(t), t.ls, e, n, s))), s.promise;
    }

    function za$1(t, e) {
        const n = new ms;
        return t.ls.Rs((async () => async function(t, e, n) {
            try {
                const s = await Ir(t, e, 
                /* usePreviousResults= */ !0), i = new Go(e, s.Ac), r = i._l(s.documents), o = i.di(r, 
                /* updateLimboDocuments= */ !1);
                n.resolve(o.snapshot);
            } catch (t) {
                const s = Cs(t, `Failed to execute query '${e} against cache`);
                n.reject(s);
            }
        }
        /**
     * Retrieves a latency-compensated query snapshot from the backend via a
     * SnapshotListener.
     */ (await Ba$1(t), e, n))), n.promise;
    }

    function Ha$1(t, e, n = {}) {
        const s = new ms;
        return t.ls.Rs((async () => function(t, e, n, s, i) {
            const r = new $c$1({
                next: n => {
                    // Remove query first before passing event to user to avoid
                    // user actions affecting the now stale query.
                    e.Rs((() => ko(t, o))), n.fromCache && "server" === s.source ? i.reject(new $(x$1.UNAVAILABLE, 'Failed to get documents from server. (However, these documents may exist in the local cache. Run again without setting source to "server" to retrieve the cached documents.)')) : i.resolve(n);
                },
                error: t => i.reject(t)
            }), o = new Bo(n, r, {
                includeMetadataChanges: !0,
                el: !0
            });
            return Oo(t, o);
        }(await Ka$1(t), t.ls, e, n, s))), s.promise;
    }

    function Ja$1(t, e) {
        const n = new $c$1(e);
        return t.ls.Rs((async () => function(t, e) {
            N$1(t).Qh.add(e), 
            // Immediately fire an initial event, indicating all existing listeners
            // are in-sync.
            e.next();
        }(await Ka$1(t), n))), () => {
            n.s_(), t.ls.Rs((async () => function(t, e) {
                N$1(t).Qh.delete(e);
            }(await Ka$1(t), n)));
        };
    }

    /**
     * Takes an updateFunction in which a set of reads and writes can be performed
     * atomically. In the updateFunction, the client can read and write values
     * using the supplied transaction object. After the updateFunction, all
     * changes will be committed. If a retryable error occurs (ex: some other
     * client has changed any of the data referenced), then the updateFunction
     * will be called again after a backoff. If the updateFunction still fails
     * after all retries, then the transaction will be rejected.
     *
     * The transaction object passed to the updateFunction contains methods for
     * accessing documents and collections. Unlike other datastore access, data
     * accessed with the transaction will not reflect local changes that have not
     * been committed. For this reason, it is required that all reads are
     * performed before any writes. Transactions must be performed while online.
     */ function Ya$1(t, e) {
        const n = new ms;
        return t.ls.Rs((async () => {
            const s = await function(t) {
                return Fa$1(t).then((t => t.bh));
            }(t);
            new xa(t.ls, s, e, n).run();
        })), n.promise;
    }

    function Xa$1(t, e, n, s) {
        const i = function(t, e) {
            let n;
            n = "string" == typeof t ? (new TextEncoder).encode(t) : t;
            return function(t, e) {
                return new Oc$1(t, e);
            }(function(t, e) {
                if (t instanceof Uint8Array) return xc(t, e);
                if (t instanceof ArrayBuffer) return xc(new Uint8Array(t), e);
                if (t instanceof ReadableStream) return t.getReader();
                throw new Error("Source of `toByteStreamReader` has to be a ArrayBuffer or ReadableStream");
            }(n), e);
        }
        /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ (n, Yr(e));
        t.ls.Rs((async () => {
            vc$1(await Ua$1(t), i, s);
        }));
    }

    function Za$1(t, e) {
        return t.ls.enqueue((async () => function(t, e) {
            const n = N$1(t);
            return n.persistence.runTransaction("Get named query", "readonly", (t => n.fo.Ms(t, e)));
        }(await Ba$1(t), e)));
    }

    class tu {
        constructor() {
            // The last promise in the queue.
            this.Rf = Promise.resolve(), 
            // A list of retryable operations. Retryable operations are run in order and
            // retried with backoff.
            this.Pf = [], 
            // Is this AsyncQueue being shut down? Once it is set to true, it will not
            // be changed again.
            this.Vf = !1, 
            // Operations scheduled to be queued in the future. Operations are
            // automatically removed after they are run or canceled.
            this.gf = [], 
            // visible for testing
            this.yf = null, 
            // Flag set while there's an outstanding AsyncQueue operation, used for
            // assertion sanity-checks.
            this.pf = !1, 
            // List of TimerIds to fast-forward delays for.
            this.bf = [], 
            // Backoff timer used to schedule retries for retryable operations
            this.ju = new Xr(this, "async_queue_retry" /* AsyncQueueRetry */), 
            // Visibility handler that triggers an immediate retry of all retryable
            // operations. Meant to speed up recovery when we regain file system access
            // after page comes into foreground.
            this.vf = () => {
                const t = Jr();
                t && p$1("AsyncQueue", "Visibility state changed to " + t.visibilityState), this.ju.Bu();
            };
            const t = Jr();
            t && "function" == typeof t.addEventListener && t.addEventListener("visibilitychange", this.vf);
        }
        get wf() {
            return this.Vf;
        }
        /**
         * Adds a new operation to the queue without waiting for it to complete (i.e.
         * we ignore the Promise result).
         */    Rs(t) {
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.enqueue(t);
        }
        Tf(t) {
            this.Sf(), 
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.Df(t);
        }
        Ef() {
            if (!this.Vf) {
                this.Vf = !0;
                const t = Jr();
                t && "function" == typeof t.removeEventListener && t.removeEventListener("visibilitychange", this.vf);
            }
        }
        enqueue(t) {
            return this.Sf(), this.Vf ? new Promise((t => {})) : this.Df(t);
        }
        yo(t) {
            this.Rs((() => (this.Pf.push(t), this.Cf())));
        }
        /**
         * Runs the next operation from the retryable queue. If the operation fails,
         * reschedules with backoff.
         */    async Cf() {
            if (0 !== this.Pf.length) {
                try {
                    await this.Pf[0](), this.Pf.shift(), this.ju.reset();
                } catch (t) {
                    if (!ys(t)) throw t;
     // Failure will be handled by AsyncQueue
                                    p$1("AsyncQueue", "Operation failed with retryable error: " + t);
                }
                this.Pf.length > 0 && 
                // If there are additional operations, we re-schedule `retryNextOp()`.
                // This is necessary to run retryable operations that failed during
                // their initial attempt since we don't know whether they are already
                // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`
                // needs to  be re-run, we will run `op1`, `op1`, `op2` using the
                // already enqueued calls to `retryNextOp()`. `op3()` will then run in the
                // call scheduled here.
                // Since `backoffAndRun()` cancels an existing backoff and schedules a
                // new backoff on every call, there is only ever a single additional
                // operation in the queue.
                this.ju.Fu((() => this.Cf()));
            }
        }
        Df(t) {
            const e = this.Rf.then((() => (this.pf = !0, t().catch((t => {
                this.yf = t, this.pf = !1;
                // Re-throw the error so that this.tail becomes a rejected Promise and
                // all further attempts to chain (via .then) will just short-circuit
                // and return the rejected Promise.
                throw b("INTERNAL UNHANDLED ERROR: ", 
                /**
     * Chrome includes Error.message in Error.stack. Other browsers do not.
     * This returns expected output of message + stack when available.
     * @param error - Error or FirestoreError
     */
                function(t) {
                    let e = t.message || "";
                    t.stack && (e = t.stack.includes(t.message) ? t.stack : t.message + "\n" + t.stack);
                    return e;
                }
                /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ (t)), t;
            })).then((t => (this.pf = !1, t))))));
            return this.Rf = e, e;
        }
        Er(t, e, n) {
            this.Sf(), 
            // Fast-forward delays for timerIds that have been overriden.
            this.bf.indexOf(t) > -1 && (e = 0);
            const s = Ds.Es(this, t, e, n, (t => this.Nf(t)));
            return this.gf.push(s), s;
        }
        Sf() {
            this.yf && D$1();
        }
        Af() {}
        /**
         * Waits until all currently queued tasks are finished executing. Delayed
         * operations are not run.
         */    async xf() {
            // Operations in the queue prior to draining may have enqueued additional
            // operations. Keep draining the queue until the tail is no longer advanced,
            // which indicates that no more new operations were enqueued and that all
            // operations were executed.
            let t;
            do {
                t = this.Rf, await t;
            } while (t !== this.Rf);
        }
        /**
         * For Tests: Determine if a delayed operation with a particular TimerId
         * exists.
         */    $f(t) {
            for (const e of this.gf) if (e._s === t) return !0;
            return !1;
        }
        /**
         * For Tests: Runs some or all delayed operations early.
         *
         * @param lastTimerId - Delayed operations up to and including this TimerId
         * will be drained. Pass TimerId.All to run all delayed operations.
         * @returns a Promise that resolves once all operations have been run.
         */    Of(t) {
            // Note that draining may generate more delayed ops, so we do that first.
            return this.xf().then((() => {
                // Run ops in the same order they'd run if they ran naturally.
                this.gf.sort(((t, e) => t.fs - e.fs));
                for (const e of this.gf) if (e.As(), "all" /* All */ !== t && e._s === t) break;
                return this.xf();
            }));
        }
        /**
         * For Tests: Skip all subsequent delays for a timer id.
         */    kf(t) {
            this.bf.push(t);
        }
        /** Called once a DelayedOperation is run or canceled. */    Nf(t) {
            // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.
            const e = this.gf.indexOf(t);
            this.gf.splice(e, 1);
        }
    }

    function eu(t) {
        /**
     * Returns true if obj is an object and contains at least one of the specified
     * methods.
     */
        return function(t, e) {
            if ("object" != typeof t || null === t) return !1;
            const n = t;
            for (const t of e) if (t in n && "function" == typeof n[t]) return !0;
            return !1;
        }
        /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
        /**
     * Represents the task of loading a Firestore bundle. It provides progress of bundle
     * loading, as well as task completion and error events.
     *
     * The API is compatible with `Promise<LoadBundleTaskProgress>`.
     */ (t, [ "next", "error", "complete" ]);
    }

    class nu {
        constructor() {
            this.Mf = {}, this.Ff = new ms, this.Lf = {
                taskState: "Running",
                totalBytes: 0,
                totalDocuments: 0,
                bytesLoaded: 0,
                documentsLoaded: 0
            };
        }
        /**
         * Registers functions to listen to bundle loading progress events.
         * @param next - Called when there is a progress update from bundle loading. Typically `next` calls occur
         *   each time a Firestore document is loaded from the bundle.
         * @param error - Called when an error occurs during bundle loading. The task aborts after reporting the
         *   error, and there should be no more updates after this.
         * @param complete - Called when the loading task is complete.
         */    onProgress(t, e, n) {
            this.Mf = {
                next: t,
                error: e,
                complete: n
            };
        }
        /**
         * Implements the `Promise<LoadBundleTaskProgress>.catch` interface.
         *
         * @param onRejected - Called when an error occurs during bundle loading.
         */    catch(t) {
            return this.Ff.promise.catch(t);
        }
        /**
         * Implements the `Promise<LoadBundleTaskProgress>.then` interface.
         *
         * @param onFulfilled - Called on the completion of the loading task with a final `LoadBundleTaskProgress` update.
         *   The update will always have its `taskState` set to `"Success"`.
         * @param onRejected - Called when an error occurs during bundle loading.
         */    then(t, e) {
            return this.Ff.promise.then(t, e);
        }
        /**
         * Notifies all observers that bundle loading has completed, with a provided
         * `LoadBundleTaskProgress` object.
         *
         * @private
         */    Bl(t) {
            this.ql(t), this.Mf.complete && this.Mf.complete(), this.Ff.resolve(t);
        }
        /**
         * Notifies all observers that bundle loading has failed, with a provided
         * `Error` as the reason.
         *
         * @private
         */    Kl(t) {
            this.Lf.taskState = "Error", this.Mf.next && this.Mf.next(this.Lf), this.Mf.error && this.Mf.error(t), 
            this.Ff.reject(t);
        }
        /**
         * Notifies a progress update of loading a bundle.
         * @param progress - The new progress.
         *
         * @private
         */    ql(t) {
            this.Lf = t, this.Mf.next && this.Mf.next(t);
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** DOMException error code constants. */ const su = -1;

    /**
     * The Cloud Firestore service interface.
     *
     * Do not call this constructor directly. Instead, use {@link getFirestore}.
     */
    class iu extends Hc$1 {
        /** @hideconstructor */
        constructor(t, e) {
            super(t, e), this.Bf = new tu, this.w_ = "name" in t ? t.name : "[DEFAULT]";
        }
        b_() {
            return this.qf || 
            // The client must be initialized to ensure that all subsequent API
            // usage throws an exception.
            au(this), this.qf.terminate();
        }
    }

    /**
     * Initializes a new instance of Cloud Firestore with the provided settings.
     * Can only be called before any other function, including
     * {@link getFirestore}. If the custom settings are empty, this function is
     * equivalent to calling {@link getFirestore}.
     *
     * @param app - The {@link FirebaseApp} with which the `Firestore` instance will
     * be associated.
     * @param settings - A settings object to configure the `Firestore` instance.
     * @returns A newly initialized `Firestore` instance.
     */ function ru(e, n) {
        const s = app._getProvider(e, "firestore-exp");
        if (s.isInitialized()) throw new $(x$1.FAILED_PRECONDITION, "Firestore can only be initialized once per app.");
        const i = s.getImmediate();
        if (void 0 !== n.cacheSizeBytes && -1 !== n.cacheSizeBytes && n.cacheSizeBytes < 1048576) throw new $(x$1.INVALID_ARGUMENT, "cacheSizeBytes must be at least 1048576");
        return i.g_(n), i;
    }

    /**
     * Returns the existing instance of Firestore that is associated with the
     * provided {@link FirebaseApp}. If no instance exists, initializes a new
     * instance with default settings.
     *
     * @param app - The {@link FirebaseApp} instance that the returned Firestore
     * instance is associated with.
     * @returns The `Firestore` instance of the provided app.
     */ function ou(e) {
        return app._getProvider(e, "firestore-exp").getImmediate();
    }

    function cu(t) {
        return t.qf || au(t), t.qf.df(), t.qf;
    }

    function au(t) {
        const e = t.p_(), n = function(t, e, n) {
            return new B(t, e, n.host, n.ssl, n.experimentalForceLongPolling, n.experimentalAutoDetectLongPolling);
        }(t.I_, t.w_, e);
        t.qf = new $a$1(t.m_, t.Bf, n);
    }

    /**
     * Attempts to enable persistent storage, if possible.
     *
     * Must be called before any other functions (other than
     * {@link initializeFirestore}, {@link getFirestore} or
     * {@link clearIndexedDbPersistence}.
     *
     * If this fails, `enableIndexedDbPersistence()` will reject the promise it
     * returns. Note that even after this failure, the `Firestore` instance will
     * remain usable, however offline persistence will be disabled.
     *
     * There are several reasons why this can fail, which can be identified by
     * the `code` on the error.
     *
     *   * failed-precondition: The app is already open in another browser tab.
     *   * unimplemented: The browser is incompatible with the offline
     *     persistence implementation.
     *
     * @param firestore - The `Firestore` instance to enable persistence for.
     * @param persistenceSettings - Optional settings object to configure
     * persistence.
     * @returns A promise that represents successfully enabling persistent storage.
     */ function uu(t, e) {
        mu(t = Wc$1(t, iu));
        const n = cu(t), s = t.p_(), i = new Nc$1;
        return lu(n, i, new Dc$1(i, s.cacheSizeBytes, null == e ? void 0 : e.forceOwnership));
    }

    /**
     * Attempts to enable multi-tab persistent storage, if possible. If enabled
     * across all tabs, all operations share access to local persistence, including
     * shared execution of queries and latency-compensated local document updates
     * across all connected instances.
     *
     * If this fails, `enableMultiTabIndexedDbPersistence()` will reject the promise
     * it returns. Note that even after this failure, the `Firestore` instance will
     * remain usable, however offline persistence will be disabled.
     *
     * There are several reasons why this can fail, which can be identified by
     * the `code` on the error.
     *
     *   * failed-precondition: The app is already open in another browser tab and
     *     multi-tab is not enabled.
     *   * unimplemented: The browser is incompatible with the offline
     *     persistence implementation.
     *
     * @param firestore - The `Firestore` instance to enable persistence for.
     * @returns A promise that represents successfully enabling persistent
     * storage.
     */ function hu(t) {
        mu(t = Wc$1(t, iu));
        const e = cu(t), n = t.p_(), s = new Nc$1;
        return lu(e, s, new Cc$1(s, n.cacheSizeBytes));
    }

    /**
     * Registers both the `OfflineComponentProvider` and `OnlineComponentProvider`.
     * If the operation fails with a recoverable error (see
     * `canRecoverFromIndexedDbError()` below), the returned Promise is rejected
     * but the client remains usable.
     */ function lu(t, e, n) {
        const s = new ms;
        return t.ls.enqueue((async () => {
            try {
                await Oa$1(t, n), await ka$1(t, e), s.resolve();
            } catch (t) {
                if (!
                /**
     * Decides whether the provided error allows us to gracefully disable
     * persistence (as opposed to crashing the client).
     */
                function(t) {
                    if ("FirebaseError" === t.name) return t.code === x$1.FAILED_PRECONDITION || t.code === x$1.UNIMPLEMENTED;
                    if ("undefined" != typeof DOMException && t instanceof DOMException) 
                    // There are a few known circumstances where we can open IndexedDb but
                    // trying to read/write will fail (e.g. quota exceeded). For
                    // well-understood cases, we attempt to detect these and then gracefully
                    // fall back to memory persistence.
                    // NOTE: Rather than continue to add to this list, we could decide to
                    // always fall back, with the risk that we might accidentally hide errors
                    // representing actual SDK bugs.
                    // When the browser is out of quota we could get either quota exceeded
                    // or an aborted error depending on whether the error happened during
                    // schema migration.
                    return 22 === t.code || 20 === t.code || 
                    // Firefox Private Browsing mode disables IndexedDb and returns
                    // INVALID_STATE for any usage.
                    11 === t.code;
                    return !0;
                }
                /**
     * Clears the persistent storage. This includes pending writes and cached
     * documents.
     *
     * Must be called while the `Firestore` instance is not started (after the app is
     * terminated or when the app is first initialized). On startup, this function
     * must be called before other functions (other than {@link
     * initializeFirestore} or {@link getFirestore})). If the `Firestore`
     * instance is still running, the promise will be rejected with the error code
     * of `failed-precondition`.
     *
     * Note: `clearIndexedDbPersistence()` is primarily intended to help write
     * reliable tests that use Cloud Firestore. It uses an efficient mechanism for
     * dropping existing data but does not attempt to securely overwrite or
     * otherwise make cached data unrecoverable. For applications that are sensitive
     * to the disclosure of cached data in between user sessions, we strongly
     * recommend not enabling persistence at all.
     *
     * @param firestore - The `Firestore` instance to clear persistence for.
     * @returns A promise that is resolved when the persistent storage is
     * cleared. Otherwise, the promise is rejected with an error.
     */ (t)) throw t;
                console.warn("Error enabling offline persistence. Falling back to persistence disabled: " + t), 
                s.reject(t);
            }
        })).then((() => s.promise));
    }

    function _u(t) {
        if (t.R_ && !t.P_) throw new $(x$1.FAILED_PRECONDITION, "Persistence can only be cleared before a Firestore instance is initialized or after it is terminated.");
        const e = new ms;
        return t.Bf.Tf((async () => {
            try {
                await async function(t) {
                    if (!Ps.Kn()) return Promise.resolve();
                    const e = t + "main";
                    await Ps.delete(e);
                }(sr(t.I_, t.w_)), e.resolve();
            } catch (t) {
                e.reject(t);
            }
        })), e.promise;
    }

    /**
     * Waits until all currently pending writes for the active user have been
     * acknowledged by the backend.
     *
     * The returned Promise resolves immediately if there are no outstanding writes.
     * Otherwise, the Promise waits for all previously issued writes (including
     * those written in a previous app session), but it does not wait for writes
     * that were added after the function is called. If you want to wait for
     * additional writes, call `waitForPendingWrites()` again.
     *
     * Any outstanding `waitForPendingWrites()` Promises are rejected during user
     * changes.
     *
     * @returns A Promise which resolves when all currently pending writes have been
     * acknowledged by the backend.
     */ function fu(t) {
        return function(t) {
            const e = new ms;
            return t.ls.Rs((async () => oc$1(await Ua$1(t), e))), e.promise;
        }(cu(t = Wc$1(t, iu)));
    }

    /**
     * Re-enables use of the network for this Firestore instance after a prior
     * call to {@link disableNetwork}.
     *
     * @returns A promise that is resolved once the network has been enabled.
     */ function du(t) {
        return Qa$1(cu(t = Wc$1(t, iu)));
    }

    /**
     * Disables network usage for this instance. It can be re-enabled via {@link
     * enableNetwork}. While the network is disabled, any snapshot listeners,
     * `getDoc()` or `getDocs()` calls will return results from cache, and any write
     * operations will be queued until the network is restored.
     *
     * @returns A promise that is resolved once the network has been disabled.
     */ function wu(t) {
        return Wa$1(cu(t = Wc$1(t, iu)));
    }

    /**
     * Terminates the provided Firestore instance.
     *
     * After calling `terminate()` only the `clearIndexedDbPersistence()` function
     * may be used. Any other function will throw a `FirestoreError`.
     *
     * To restart after termination, create a new instance of FirebaseFirestore with
     * {@link getFirestore}.
     *
     * Termination does not cancel any pending writes, and any promises that are
     * awaiting a response from the server will not be resolved. If you have
     * persistence enabled, the next time you start this instance, it will resume
     * sending these writes to the server.
     *
     * Note: Under normal circumstances, calling `terminate()` is not required. This
     * function is useful only when you want to force this instance to release all
     * of its resources or in combination with `clearIndexedDbPersistence()` to
     * ensure that all local state is destroyed between test runs.
     *
     * @returns A promise that is resolved when the instance has been successfully
     * terminated.
     */ function Eu(t) {
        return app._removeServiceInstance(t.app, "firestore-exp"), t._delete();
    }

    /**
     * Loads a Firestore bundle into the local cache.
     *
     * @param firestore - The `Firestore` instance to load bundles for for.
     * @param bundleData - An object representing the bundle to be loaded. Valid objects are
     *   `ArrayBuffer`, `ReadableStream<Uint8Array>` or `string`.
     *
     * @return
     *   A `LoadBundleTask` object, which notifies callers with progress updates, and completion
     *   or error events. It can be used as a `Promise<LoadBundleTaskProgress>`.
     */ function Tu(t, e) {
        const n = cu(t = Wc$1(t, iu)), s = new nu;
        return Xa$1(n, t.I_, e, s), s;
    }

    /**
     * Reads a Firestore `Query` from local cache, identified by the given name.
     *
     * The named queries are packaged  into bundles on the server side (along
     * with resulting documents), and loaded to local cache using `loadBundle`. Once in local
     * cache, use this method to extract a `Query` by name.
     */ function Iu(t, e) {
        return Za$1(cu(t = Wc$1(t, iu)), e).then((e => e ? new Xc$1(t, null, e.query) : null));
    }

    function mu(t) {
        if (t.R_ || t.P_) throw new $(x$1.FAILED_PRECONDITION, "Firestore has already been started and persistence can no longer be enabled. You can only enable persistence before calling any other methods on a Firestore object.");
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Converts Firestore's internal types to the JavaScript types that we expose
     * to the user.
     */
    class Au {
        Uf(t, e = "none") {
            switch (Et(t)) {
              case 0 /* NullValue */ :
                return null;

              case 1 /* BooleanValue */ :
                return t.booleanValue;

              case 2 /* NumberValue */ :
                return at(t.integerValue || t.doubleValue);

              case 3 /* TimestampValue */ :
                return this.Kf(t.timestampValue);

              case 4 /* ServerTimestampValue */ :
                return this.Qf(t, e);

              case 5 /* StringValue */ :
                return t.stringValue;

              case 6 /* BlobValue */ :
                return this.Wf(ut(t.bytesValue));

              case 7 /* RefValue */ :
                return this.jf(t.referenceValue);

              case 8 /* GeoPointValue */ :
                return this.Gf(t.geoPointValue);

              case 9 /* ArrayValue */ :
                return this.zf(t.arrayValue, e);

              case 10 /* ObjectValue */ :
                return this.Hf(t.mapValue, e);

              default:
                throw D$1();
            }
        }
        Hf(t, e) {
            const n = {};
            return nt(t.fields || {}, ((t, s) => {
                n[t] = this.Uf(s, e);
            })), n;
        }
        Gf(t) {
            return new ra$1(at(t.latitude), at(t.longitude));
        }
        zf(t, e) {
            return (t.values || []).map((t => this.Uf(t, e)));
        }
        Qf(t, e) {
            switch (e) {
              case "previous":
                const n = lt(t);
                return null == n ? null : this.Uf(n, e);

              case "estimate":
                return this.Kf(_t(t));

              default:
                return null;
            }
        }
        Kf(t) {
            const e = ct(t);
            return new z$1(e.seconds, e.nanos);
        }
        Jf(t, e) {
            const n = Y$1.nt(t);
            C(Is(n));
            const s = new q$1(n.get(1), n.get(3)), i = new tt(n.j(5));
            return s.isEqual(e) || 
            // TODO(b/64130202): Somehow support foreign references.
            b(`Document ${i} contains a document reference within a different database (${s.projectId}/${s.database}) which is not supported. It will be treated as a reference in the current database (${e.projectId}/${e.database}) instead.`), 
            i;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A `DocumentSnapshot` contains data read from a document in your Firestore
     * database. The data can be extracted with `.data()` or `.get(<field>)` to
     * get a specific field.
     *
     * For a `DocumentSnapshot` that points to a non-existing document, any data
     * access will return 'undefined'. You can use the `exists()` method to
     * explicitly verify a document's existence.
     */ class Ru {
        // Note: This class is stripped down version of the DocumentSnapshot in
        // the legacy SDK. The changes are:
        // - No support for SnapshotMetadata.
        // - No support for SnapshotOptions.
        /** @hideconstructor protected */
        constructor(t, e, n, s, i) {
            this.Yf = t, this.Xf = e, this.S_ = n, this.Zf = s, this.v_ = i;
        }
        /** Property of the `DocumentSnapshot` that provides the document's ID. */    get id() {
            return this.S_.path.J();
        }
        /**
         * The `DocumentReference` for the document included in the `DocumentSnapshot`.
         */    get ref() {
            return new Yc$1(this.Yf, this.v_, this.S_);
        }
        /**
         * Signals whether or not the document at the snapshot's location exists.
         *
         * @returns true if the document exists.
         */    exists() {
            return null !== this.Zf;
        }
        /**
         * Retrieves all fields in the document as an `Object`. Returns `undefined` if
         * the document doesn't exist.
         *
         * @returns An `Object` containing all fields in the document or `undefined`
         * if the document doesn't exist.
         */    data() {
            if (this.Zf) {
                if (this.v_) {
                    // We only want to use the converter and create a new DocumentSnapshot
                    // if a converter has been provided.
                    const t = new Pu(this.Yf, this.Xf, this.S_, this.Zf, 
                    /* converter= */ null);
                    return this.v_.fromFirestore(t);
                }
                return this.Xf.Uf(this.Zf.yt());
            }
        }
        /**
         * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
         * document or field doesn't exist.
         *
         * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
         * field.
         * @returns The data at the specified field location or undefined if no such
         * field exists in the document.
         */
        // We are using `any` here to avoid an explicit cast by our users.
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        get(t) {
            if (this.Zf) {
                const e = this.Zf.data().field(Vu("DocumentSnapshot.get", t));
                if (null !== e) return this.Xf.Uf(e);
            }
        }
    }

    /**
     * A `QueryDocumentSnapshot` contains data read from a document in your
     * Firestore database as part of a query. The document is guaranteed to exist
     * and its data can be extracted with `.data()` or `.get(<field>)` to get a
     * specific field.
     *
     * A `QueryDocumentSnapshot` offers the same API surface as a
     * `DocumentSnapshot`. Since query results contain only existing documents, the
     * `exists` property will always be true and `data()` will never return
     * 'undefined'.
     */ class Pu extends Ru {
        /**
         * Retrieves all fields in the document as an `Object`.
         *
         * @override
         * @returns An `Object` containing all fields in the document.
         */
        data() {
            return super.data();
        }
    }

    /**
     * Helper that calls fromDotSeparatedString() but wraps any error thrown.
     */ function Vu(t, e) {
        return "string" == typeof e ? Sa$1(t, e) : e instanceof Bc$1 ? e.d_.f_ : e.f_;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Metadata about a snapshot, describing the state of the snapshot.
     */ class gu {
        /** @hideconstructor */
        constructor(t, e) {
            this.hasPendingWrites = t, this.fromCache = e;
        }
        /**
         * Returns true if this `SnapshotMetadata` is equal to the provided one.
         *
         * @param other - The `SnapshotMetadata` to compare against.
         * @returns true if this `SnapshotMetadata` is equal to the provided one.
         */    isEqual(t) {
            return this.hasPendingWrites === t.hasPendingWrites && this.fromCache === t.fromCache;
        }
    }

    /**
     * A `DocumentSnapshot` contains data read from a document in your Firestore
     * database. The data can be extracted with `.data()` or `.get(<field>)` to
     * get a specific field.
     *
     * For a `DocumentSnapshot` that points to a non-existing document, any data
     * access will return 'undefined'. You can use the `exists()` method to
     * explicitly verify a document's existence.
     */ class yu extends Ru {
        /** @hideconstructor protected */
        constructor(t, e, n, s, i, r) {
            super(t, e, n, s, r), this.Yf = t, this.td = t, this.metadata = i;
        }
        /**
         * Property of the `DocumentSnapshot` that signals whether or not the data
         * exists. True if the document exists.
         */    exists() {
            return super.exists();
        }
        /**
         * Retrieves all fields in the document as an `Object`. Returns `undefined` if
         * the document doesn't exist.
         *
         * By default, `FieldValue.serverTimestamp()` values that have not yet been
         * set to their final value will be returned as `null`. You can override
         * this by passing an options object.
         *
         * @param options - An options object to configure how data is retrieved from
         * the snapshot (for example the desired behavior for server timestamps that
         * have not yet been set to their final value).
         * @returns An `Object` containing all fields in the document or `undefined` if
         * the document doesn't exist.
         */    data(t = {}) {
            if (this.Zf) {
                if (this.v_) {
                    // We only want to use the converter and create a new DocumentSnapshot
                    // if a converter has been provided.
                    const e = new pu(this.Yf, this.Xf, this.S_, this.Zf, this.metadata, 
                    /* converter= */ null);
                    return this.v_.fromFirestore(e, t);
                }
                return this.Xf.Uf(this.Zf.yt(), t.serverTimestamps);
            }
        }
        /**
         * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
         * document or field doesn't exist.
         *
         * By default, a `FieldValue.serverTimestamp()` that has not yet been set to
         * its final value will be returned as `null`. You can override this by
         * passing an options object.
         *
         * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
         * field.
         * @param options - An options object to configure how the field is retrieved
         * from the snapshot (for example the desired behavior for server timestamps
         * that have not yet been set to their final value).
         * @returns The data at the specified field location or undefined if no such
         * field exists in the document.
         */
        // We are using `any` here to avoid an explicit cast by our users.
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        get(t, e = {}) {
            if (this.Zf) {
                const n = this.Zf.data().field(Vu("DocumentSnapshot.get", t));
                if (null !== n) return this.Xf.Uf(n, e.serverTimestamps);
            }
        }
    }

    /**
     * A `QueryDocumentSnapshot` contains data read from a document in your
     * Firestore database as part of a query. The document is guaranteed to exist
     * and its data can be extracted with `.data()` or `.get(<field>)` to get a
     * specific field.
     *
     * A `QueryDocumentSnapshot` offers the same API surface as a
     * `DocumentSnapshot`. Since query results contain only existing documents, the
     * `exists` property will always be true and `data()` will never return
     * 'undefined'.
     */ class pu extends yu {
        /**
         * Retrieves all fields in the document as an `Object`.
         *
         * By default, `FieldValue.serverTimestamp()` values that have not yet been
         * set to their final value will be returned as `null`. You can override
         * this by passing an options object.
         *
         * @override
         * @param options - An options object to configure how data is retrieved from
         * the snapshot (for example the desired behavior for server timestamps that
         * have not yet been set to their final value).
         * @returns An `Object` containing all fields in the document.
         */
        data(t = {}) {
            return super.data(t);
        }
    }

    /**
     * A `QuerySnapshot` contains zero or more `DocumentSnapshot` objects
     * representing the results of a query. The documents can be accessed as an
     * array via the `docs` property or enumerated using the `forEach` method. The
     * number of documents can be determined via the `empty` and `size`
     * properties.
     */ class bu {
        /** @hideconstructor */
        constructor(t, e, n, s) {
            this.Yf = t, this.Xf = e, this.ed = s, this.metadata = new gu(s.hasPendingWrites, s.fromCache), 
            this.query = n;
        }
        /** An array of all the documents in the `QuerySnapshot`. */    get docs() {
            const t = [];
            return this.forEach((e => t.push(e))), t;
        }
        /** The number of documents in the `QuerySnapshot`. */    get size() {
            return this.ed.docs.size;
        }
        /** True if there are no documents in the `QuerySnapshot`. */    get empty() {
            return 0 === this.size;
        }
        /**
         * Enumerates all of the documents in the `QuerySnapshot`.
         *
         * @param callback - A callback to be called with a `QueryDocumentSnapshot` for
         * each document in the snapshot.
         * @param thisArg - The `this` binding for the callback.
         */    forEach(t, e) {
            this.ed.docs.forEach((n => {
                t.call(e, new pu(this.Yf, this.Xf, n.key, n, new gu(this.ed.Se.has(n.key), this.ed.fromCache), this.query.v_));
            }));
        }
        /**
         * Returns an array of the documents changes since the last snapshot. If this
         * is the first snapshot, all documents will be in the list as 'added'
         * changes.
         *
         * @param options - `SnapshotListenOptions` that control whether metadata-only
         * changes (i.e. only `DocumentSnapshot.metadata` changed) should trigger
         * snapshot events.
         */    docChanges(t = {}) {
            const e = !!t.includeMetadataChanges;
            if (e && this.ed.Ce) throw new $(x$1.INVALID_ARGUMENT, "To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");
            return this.nd && this.sd === e || (this.nd = 
            /** Calculates the array of DocumentChanges for a given ViewSnapshot. */
            function(t, e) {
                if (t.ed.ve.Y()) {
                    // Special case the first snapshot because index calculation is easy and
                    // fast
                    let e, n = 0;
                    return t.ed.docChanges.map((s => {
                        const i = new pu(t.Yf, t.Xf, s.doc.key, s.doc, new gu(t.ed.Se.has(s.doc.key), t.ed.fromCache), t.query.v_);
                        return e = s.doc, {
                            type: "added",
                            doc: i,
                            oldIndex: -1,
                            newIndex: n++
                        };
                    }));
                }
                {
                    // A DocumentSet that is updated incrementally as changes are applied to use
                    // to lookup the index of a document.
                    let n = t.ed.ve;
                    return t.ed.docChanges.filter((t => e || 3 /* Metadata */ !== t.type)).map((e => {
                        const s = new pu(t.Yf, t.Xf, e.doc.key, e.doc, new gu(t.ed.Se.has(e.doc.key), t.ed.fromCache), t.query.v_);
                        let i = -1, r = -1;
                        return 0 /* Added */ !== e.type && (i = n.indexOf(e.doc.key), n = n.delete(e.doc.key)), 
                        1 /* Removed */ !== e.type && (n = n.add(e.doc), r = n.indexOf(e.doc.key)), {
                            type: vu(e.type),
                            doc: s,
                            oldIndex: i,
                            newIndex: r
                        };
                    }));
                }
            }(this, e), this.sd = e), this.nd;
        }
    }

    function vu(t) {
        switch (t) {
          case 0 /* Added */ :
            return "added";

          case 2 /* Modified */ :
          case 3 /* Metadata */ :
            return "modified";

          case 1 /* Removed */ :
            return "removed";

          default:
            return D$1();
        }
    }

    // TODO(firestoreexp): Add tests for snapshotEqual with different snapshot
    // metadata
    /**
     * Returns true if the provided snapshots are equal.
     *
     * @param left - A snapshot to compare.
     * @param right - A snapshot to compare.
     * @returns true if the snapshots are equal.
     */ function Su(t, e) {
        return t instanceof yu && e instanceof yu ? t.Yf === e.Yf && t.S_.isEqual(e.S_) && (null === t.Zf ? null === e.Zf : t.Zf.isEqual(e.Zf)) && t.v_ === e.v_ : t instanceof bu && e instanceof bu && (t.Yf === e.Yf && ia(t.query, e.query) && t.metadata.isEqual(e.metadata) && t.ed.isEqual(e.ed));
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ function Du(t) {
        if (ae(t) && 0 === t.Ct.length) throw new $(x$1.UNIMPLEMENTED, "limitToLast() queries require specifying at least one orderBy() clause");
    }

    /**
     * A `QueryConstraint` is used to narrow the set of documents returned by a
     * Firestore query. `QueryConstraint`s are created by invoking {@link where},
     * {@link orderBy}, {@link startAt}, {@link startAfter}, {@link
     * endBefore}, {@link endAt}, {@link limit} or {@link limitToLast} and
     * can then be passed to {@link query} to create a new query instance that
     * also contains this `QueryConstraint`.
     */ class Cu {}

    /**
     * Creates a new immutable instance of `query` that is extended to also include
     * additional query constraints.
     *
     * @param query - The query instance to use as a base for the new constraints.
     * @param queryConstraints - The list of `QueryConstraint`s to apply.
     * @throws if any of the provided query constraints cannot be combined with the
     * existing or new constraints.
     */ function Nu(t, ...e) {
        for (const n of e) t = n.rd(t);
        return t;
    }

    class xu extends Cu {
        constructor(t, e, n) {
            super(), this.od = t, this.ad = e, this.ud = n, this.type = "where";
        }
        rd(t) {
            const e = _a$1(t.firestore), n = function(t, e, n, s, i, r, o) {
                let c;
                if (i.rt()) {
                    if ("array-contains" /* ARRAY_CONTAINS */ === r || "array-contains-any" /* ARRAY_CONTAINS_ANY */ === r) throw new $(x$1.INVALID_ARGUMENT, `Invalid Query. You can't perform '${r}' queries on FieldPath.documentId().`);
                    if ("in" /* IN */ === r || "not-in" /* NOT_IN */ === r) {
                        zu(o, r);
                        const e = [];
                        for (const n of o) e.push(Gu(s, t, n));
                        c = {
                            arrayValue: {
                                values: e
                            }
                        };
                    } else c = Gu(s, t, o);
                } else "in" /* IN */ !== r && "not-in" /* NOT_IN */ !== r && "array-contains-any" /* ARRAY_CONTAINS_ANY */ !== r || zu(o, r), 
                c = Pa$1(n, e, o, 
                /* allowArrays= */ "in" /* IN */ === r || "not-in" /* NOT_IN */ === r);
                const a = Ut.create(i, r, c);
                return function(t, e) {
                    if (e.Dt()) {
                        const n = he(t);
                        if (null !== n && !n.isEqual(e.field)) throw new $(x$1.INVALID_ARGUMENT, `Invalid query. All where filters with an inequality (<, <=, !=, not-in, >, or >=) must be on the same field. But you have inequality filters on '${n.toString()}' and '${e.field.toString()}'`);
                        const s = ue(t);
                        null !== s && Hu(t, e.field, s);
                    }
                    const n = function(t, e) {
                        for (const n of t.filters) if (e.indexOf(n.op) >= 0) return n.op;
                        return null;
                    }(t, 
                    /**
     * Given an operator, returns the set of operators that cannot be used with it.
     *
     * Operators in a query must adhere to the following set of rules:
     * 1. Only one array operator is allowed.
     * 2. Only one disjunctive operator is allowed.
     * 3. NOT_EQUAL cannot be used with another NOT_EQUAL operator.
     * 4. NOT_IN cannot be used with array, disjunctive, or NOT_EQUAL operators.
     *
     * Array operators: ARRAY_CONTAINS, ARRAY_CONTAINS_ANY
     * Disjunctive operators: IN, ARRAY_CONTAINS_ANY, NOT_IN
     */
                    function(t) {
                        switch (t) {
                          case "!=" /* NOT_EQUAL */ :
                            return [ "!=" /* NOT_EQUAL */ , "not-in" /* NOT_IN */ ];

                          case "array-contains" /* ARRAY_CONTAINS */ :
                            return [ "array-contains" /* ARRAY_CONTAINS */ , "array-contains-any" /* ARRAY_CONTAINS_ANY */ , "not-in" /* NOT_IN */ ];

                          case "in" /* IN */ :
                            return [ "array-contains-any" /* ARRAY_CONTAINS_ANY */ , "in" /* IN */ , "not-in" /* NOT_IN */ ];

                          case "array-contains-any" /* ARRAY_CONTAINS_ANY */ :
                            return [ "array-contains" /* ARRAY_CONTAINS */ , "array-contains-any" /* ARRAY_CONTAINS_ANY */ , "in" /* IN */ , "not-in" /* NOT_IN */ ];

                          case "not-in" /* NOT_IN */ :
                            return [ "array-contains" /* ARRAY_CONTAINS */ , "array-contains-any" /* ARRAY_CONTAINS_ANY */ , "in" /* IN */ , "not-in" /* NOT_IN */ , "!=" /* NOT_EQUAL */ ];

                          default:
                            return [];
                        }
                    }(e.op));
                    if (null !== n) 
                    // Special case when it's a duplicate op to give a slightly clearer error message.
                    throw n === e.op ? new $(x$1.INVALID_ARGUMENT, `Invalid query. You cannot use more than one '${e.op.toString()}' filter.`) : new $(x$1.INVALID_ARGUMENT, `Invalid query. You cannot use '${e.op.toString()}' filters with '${n.toString()}' filters.`);
                }(t, a), a;
            }(t.C_, "where", e, t.firestore.I_, this.od, this.ad, this.ud);
            return new Xc$1(t.firestore, t.v_, function(t, e) {
                const n = t.filters.concat([ e ]);
                return new ie(t.path, t.collectionGroup, t.Ct.slice(), n, t.limit, t.limitType, t.startAt, t.endAt);
            }(t.C_, n));
        }
    }

    /**
     * Creates a `QueryConstraint` that enforces that documents must contain the
     * specified field and that the value should satisfy the relation constraint
     * provided.
     *
     * @param fieldPath - The path to compare
     * @param opStr - The operation string (e.g "&lt;", "&lt;=", "==", "&lt;",
     *   "&lt;=", "!=").
     * @param value - The value for comparison
     * @returns The created `Query`.
     */ function $u(t, e, n) {
        const s = e, i = Vu("where", t);
        return new xu(i, s, n);
    }

    class Ou extends Cu {
        constructor(t, e) {
            super(), this.od = t, this.hd = e, this.type = "orderBy";
        }
        rd(t) {
            const e = function(t, e, n) {
                if (null !== t.startAt) throw new $(x$1.INVALID_ARGUMENT, "Invalid query. You must not call startAt() or startAfter() before calling orderBy().");
                if (null !== t.endAt) throw new $(x$1.INVALID_ARGUMENT, "Invalid query. You must not call endAt() or endBefore() before calling orderBy().");
                const s = new te(e, n);
                return function(t, e) {
                    if (null === ue(t)) {
                        // This is the first order by. It must match any inequality.
                        const n = he(t);
                        null !== n && Hu(t, n, e.field);
                    }
                }(t, s), s;
            }
            /**
     * Create a Bound from a query and a document.
     *
     * Note that the Bound will always include the key of the document
     * and so only the provided document will compare equal to the returned
     * position.
     *
     * Will throw if the document does not contain all fields of the order by
     * of the query or if any of the fields in the order by are an uncommitted
     * server timestamp.
     */ (t.C_, this.od, this.hd);
            return new Xc$1(t.firestore, t.v_, function(t, e) {
                // TODO(dimond): validate that orderBy does not list the same key twice.
                const n = t.Ct.concat([ e ]);
                return new ie(t.path, t.collectionGroup, n, t.filters.slice(), t.limit, t.limitType, t.startAt, t.endAt);
            }(t.C_, e));
        }
    }

    /**
     * Creates a `QueryConstraint` that sorts the query result by the
     * specified field, optionally in descending order instead of ascending.
     *
     * @param fieldPath - The field to sort by.
     * @param directionStr - Optional direction to sort by ('asc' or 'desc'). If
     * not specified, order will be ascending.
     * @returns The created `Query`.
     */ function ku(t, e = "asc") {
        const n = e, s = Vu("orderBy", t);
        return new Ou(s, n);
    }

    class Mu extends Cu {
        constructor(t, e, n) {
            super(), this.type = t, this.ld = e, this._d = n;
        }
        rd(t) {
            return new Xc$1(t.firestore, t.v_, de(t.C_, this.ld, this._d));
        }
    }

    /**
     * Creates a `QueryConstraint` that only returns the first matching documents.
     *
     * @param limit - The maximum number of items to return.
     * @returns The created `Query`.
     */ function Fu(t) {
        return jc$1("limit", t), new Mu("limit", t, "F" /* First */);
    }

    /**
     * Creates a `QueryConstraint` that only returns the last matching documents.
     *
     * You must specify at least one `orderBy` clause for `limitToLast` queries,
     * otherwise an exception will be thrown during execution.
     *
     * @param limit - The maximum number of items to return.
     * @returns The created `Query`.
     */ function Lu(t) {
        return jc$1("limitToLast", t), new Mu("limitToLast", t, "L" /* Last */);
    }

    class Bu extends Cu {
        constructor(t, e, n) {
            super(), this.type = t, this.fd = e, this.dd = n;
        }
        rd(t) {
            const e = ju(t, this.type, this.fd, this.dd);
            return new Xc$1(t.firestore, t.v_, function(t, e) {
                return new ie(t.path, t.collectionGroup, t.Ct.slice(), t.filters.slice(), t.limit, t.limitType, e, t.endAt);
            }(t.C_, e));
        }
    }

    function qu(...t) {
        return new Bu("startAt", t, /*before=*/ !0);
    }

    function Uu(...t) {
        return new Bu("startAfter", t, 
        /*before=*/ !1);
    }

    class Ku extends Cu {
        constructor(t, e, n) {
            super(), this.type = t, this.fd = e, this.dd = n;
        }
        rd(t) {
            const e = ju(t, this.type, this.fd, this.dd);
            return new Xc$1(t.firestore, t.v_, function(t, e) {
                return new ie(t.path, t.collectionGroup, t.Ct.slice(), t.filters.slice(), t.limit, t.limitType, t.startAt, e);
            }(t.C_, e));
        }
    }

    function Qu(...t) {
        return new Ku("endBefore", t, /*before=*/ !0);
    }

    function Wu(...t) {
        return new Ku("endAt", t, /*before=*/ !1);
    }

    /** Helper function to create a bound from a document or fields */ function ju(t, e, n, s) {
        if (n[0] instanceof Bc$1 && (n[0] = n[0].d_), n[0] instanceof Ru) return function(t, e, n, s, i) {
            if (!s) throw new $(x$1.NOT_FOUND, `Can't use a DocumentSnapshot that doesn't exist for ${n}().`);
            const r = [];
            // Because people expect to continue/end a query at the exact document
            // provided, we need to use the implicit sort order rather than the explicit
            // sort order, because it's guaranteed to contain the document key. That way
            // the position becomes unambiguous and the query continues/ends exactly at
            // the provided document. Without the key (by using the explicit sort
            // orders), multiple documents could match the position, yielding duplicate
            // results.
                    for (const n of _e(t)) if (n.field.rt()) r.push(Vt(e, s.key)); else {
                const t = s.field(n.field);
                if (ht(t)) throw new $(x$1.INVALID_ARGUMENT, 'Invalid query. You are trying to start or end a query using a document for which the field "' + n.field + '" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');
                if (null === t) {
                    const t = n.field.et();
                    throw new $(x$1.INVALID_ARGUMENT, `Invalid query. You are trying to start or end a query using a document for which the field '${t}' (used as the orderBy) does not exist.`);
                }
                r.push(t);
            }
            return new Xt(r, i);
        }
        /**
     * Converts a list of field values to a Bound for the given query.
     */ (t.C_, t.firestore.I_, e, n[0].Zf, s);
        {
            const i = _a$1(t.firestore);
            return function(t, e, n, s, i, r) {
                // Use explicit order by's because it has to match the query the user made
                const o = t.Ct;
                if (i.length > o.length) throw new $(x$1.INVALID_ARGUMENT, `Too many arguments provided to ${s}(). The number of arguments must be less than or equal to the number of orderBy() clauses`);
                const c = [];
                for (let r = 0; r < i.length; r++) {
                    const a = i[r];
                    if (o[r].field.rt()) {
                        if ("string" != typeof a) throw new $(x$1.INVALID_ARGUMENT, `Invalid query. Expected a string for document ID in ${s}(), but got a ${typeof a}`);
                        if (!le(t) && -1 !== a.indexOf("/")) throw new $(x$1.INVALID_ARGUMENT, `Invalid query. When querying a collection and ordering by FieldPath.documentId(), the value passed to ${s}() must be a plain document ID, but '${a}' contains a slash.`);
                        const n = t.path.child(Y$1.nt(a));
                        if (!tt.lt(n)) throw new $(x$1.INVALID_ARGUMENT, `Invalid query. When querying a collection group and ordering by FieldPath.documentId(), the value passed to ${s}() must result in a valid document path, but '${n}' is not because it contains an odd number of segments.`);
                        const i = new tt(n);
                        c.push(Vt(e, i));
                    } else {
                        const t = Pa$1(n, s, a);
                        c.push(t);
                    }
                }
                return new Xt(c, r);
            }
            /**
     * Parses the given documentIdValue into a ReferenceValue, throwing
     * appropriate errors if the value is anything other than a DocumentReference
     * or String, or if the string is malformed.
     */ (t.C_, t.firestore.I_, i, e, n, s);
        }
    }

    function Gu(t, e, n) {
        if (n instanceof Bc$1 && (n = n.d_), "string" == typeof n) {
            if ("" === n) throw new $(x$1.INVALID_ARGUMENT, "Invalid query. When querying with FieldPath.documentId(), you must provide a valid document ID, but it was an empty string.");
            if (!le(e) && -1 !== n.indexOf("/")) throw new $(x$1.INVALID_ARGUMENT, `Invalid query. When querying a collection by FieldPath.documentId(), you must provide a plain document ID, but '${n}' contains a '/' character.`);
            const s = e.path.child(Y$1.nt(n));
            if (!tt.lt(s)) throw new $(x$1.INVALID_ARGUMENT, `Invalid query. When querying a collection group by FieldPath.documentId(), the value provided must result in a valid document path, but '${s}' is not because it has an odd number of segments (${s.length}).`);
            return Vt(t, new tt(s));
        }
        if (n instanceof Yc$1) return Vt(t, n.S_);
        throw new $(x$1.INVALID_ARGUMENT, `Invalid query. When querying with FieldPath.documentId(), you must provide a valid string or a DocumentReference, but it was: ${Qc$1(n)}.`);
    }

    /**
     * Validates that the value passed into a disjunctive filter satisfies all
     * array requirements.
     */ function zu(t, e) {
        if (!Array.isArray(t) || 0 === t.length) throw new $(x$1.INVALID_ARGUMENT, `Invalid Query. A non-empty array is required for '${e.toString()}' filters.`);
        if (t.length > 10) throw new $(x$1.INVALID_ARGUMENT, `Invalid Query. '${e.toString()}' filters support a maximum of 10 elements in the value array.`);
    }

    function Hu(t, e, n) {
        if (!n.isEqual(e)) throw new $(x$1.INVALID_ARGUMENT, `Invalid query. You have a where filter with an inequality (<, <=, !=, not-in, >, or >=) on field '${e.toString()}' and so you must also use '${e.toString()}' as your first argument to orderBy(), but your first orderBy() is on field '${n.toString()}' instead.`);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Converts custom model object of type T into DocumentData by applying the
     * converter if it exists.
     *
     * This function is used when converting user objects to DocumentData
     * because we want to provide the user with a more specific error message if
     * their set() or fails due to invalid data originating from a toFirestore()
     * call.
     */ function Ju(t, e, n) {
        let s;
        // Cast to `any` in order to satisfy the union type constraint on
        // toFirestore().
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return s = t ? n && (n.merge || n.mergeFields) ? t.toFirestore(e, n) : t.toFirestore(e) : e, 
        s;
    }

    class Yu extends Au {
        constructor(t) {
            super(), this.firestore = t;
        }
        Wf(t) {
            return new kc$1(t);
        }
        jf(t) {
            const e = this.Jf(t, this.firestore.I_);
            return new Yc$1(this.firestore, /* converter= */ null, e);
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A write batch, used to perform multiple writes as a single atomic unit.
     *
     * A `WriteBatch` object can be acquired by calling {@link writeBatch}. It
     * provides methods for adding writes to the write batch. None of the writes
     * will be committed (or visible locally) until {@link WriteBatch#commit} is
     * called.
     */ class Xu {
        /** @hideconstructor */
        constructor(t, e) {
            this.Yf = t, this.wd = e, this.Ed = [], this.Td = !1, this.Id = _a$1(t);
        }
        set(t, e, n) {
            this.md();
            const s = Zu(t, this.Yf), i = Ju(s.v_, e, n), r = fa$1(this.Id, "WriteBatch.set", s.S_, i, null !== s.v_, n);
            return this.Ed.push(r.O_(s.S_, Be.Kt())), this;
        }
        update(t, e, n, ...s) {
            this.md();
            const i = Zu(t, this.Yf);
            // For Compat types, we have to "extract" the underlying types before
            // performing validation.
                    let r;
            return e instanceof Bc$1 && (e = e.d_), r = "string" == typeof e || e instanceof Mc$1 ? Ra$1(this.Id, "WriteBatch.update", i.S_, e, n, s) : Aa$1(this.Id, "WriteBatch.update", i.S_, e), 
            this.Ed.push(r.O_(i.S_, Be.exists(!0))), this;
        }
        /**
         * Deletes the document referred to by the provided {@link DocumentReference}.
         *
         * @param documentRef - A reference to the document to be deleted.
         * @returns This `WriteBatch` instance. Used for chaining method calls.
         */    delete(t) {
            this.md();
            const e = Zu(t, this.Yf);
            return this.Ed = this.Ed.concat(new tn(e.S_, Be.Kt())), this;
        }
        /**
         * Commits all of the writes in this write batch as a single atomic unit.
         *
         * The result of these writes will only be reflected in document reads that
         * occur after the returned Promise resolves. If the client is offline, the
         * write fails. If you would like to see local modifications or buffer writes
         * until the client is online, use the full Firestore SDK.
         *
         * @returns A Promise resolved once all of the writes in the batch have been
         * successfully written to the backend as an atomic unit (note that it won't
         * resolve while you're offline).
         */    commit() {
            return this.md(), this.Td = !0, this.Ed.length > 0 ? this.wd(this.Ed) : Promise.resolve();
        }
        md() {
            if (this.Td) throw new $(x$1.FAILED_PRECONDITION, "A write batch can no longer be used after commit() has been called.");
        }
    }

    function Zu(t, e) {
        if (t instanceof Bc$1 && (t = t.d_), t.firestore !== e) throw new $(x$1.INVALID_ARGUMENT, "Provided document reference is from a different Firestore instance.");
        return t;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // TODO(mrschmidt) Consider using `BaseTransaction` as the base class in the
    // legacy SDK.
    /**
     * A reference to a transaction.
     *
     * The `Transaction` object passed to a transaction's `updateFunction` provides
     * the methods to read and write data within the transaction context. See
     * {@link runTransaction}.
     */
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Reads the document referred to by this `DocumentReference`.
     *
     * Note: `getDoc()` attempts to provide up-to-date data when possible by waiting
     * for data from the server, but it may return cached data or fail if you are
     * offline and the server cannot be reached. To specify this behavior, invoke
     * {@link getDocFromCache} or {@link getDocFromServer}.
     *
     * @param reference - The reference of the document to fetch.
     * @returns A Promise resolved with a `DocumentSnapshot` containing the
     * current document contents.
     */
    function th(t) {
        t = Wc$1(t, Yc$1);
        const e = Wc$1(t.firestore, iu);
        return Ga$1(cu(e), t.S_).then((n => dh(e, t, n)));
    }

    class eh extends Au {
        constructor(t) {
            super(), this.firestore = t;
        }
        Wf(t) {
            return new kc$1(t);
        }
        jf(t) {
            const e = this.Jf(t, this.firestore.I_);
            return new Yc$1(this.firestore, /* converter= */ null, e);
        }
    }

    /**
     * Reads the document referred to by this `DocumentReference` from cache.
     * Returns an error if the document is not currently cached.
     *
     * @returns A Promise resolved with a `DocumentSnapshot` containing the
     * current document contents.
     */ function nh(t) {
        t = Wc$1(t, Yc$1);
        const e = Wc$1(t.firestore, iu), n = cu(e), s = new eh(e);
        return ja$1(n, t.S_).then((n => new yu(e, s, t.S_, n, new gu(n instanceof xt && n.gt, 
        /* fromCache= */ !0), t.v_)));
    }

    /**
     * Reads the document referred to by this `DocumentReference` from the server.
     * Returns an error if the network is not available.
     *
     * @returns A Promise resolved with a `DocumentSnapshot` containing the
     * current document contents.
     */ function sh(t) {
        t = Wc$1(t, Yc$1);
        const e = Wc$1(t.firestore, iu);
        return Ga$1(cu(e), t.S_, {
            source: "server"
        }).then((n => dh(e, t, n)));
    }

    /**
     * Executes the query and returns the results as a `QuerySnapshot`.
     *
     * Note: `getDocs()` attempts to provide up-to-date data when possible by
     * waiting for data from the server, but it may return cached data or fail if
     * you are offline and the server cannot be reached. To specify this behavior,
     * invoke {@link getDocsFromCache} or {@link getDocsFromServer}.
     *
     * @returns A Promise that will be resolved with the results of the query.
     */ function ih(t) {
        t = Wc$1(t, Xc$1);
        const e = Wc$1(t.firestore, iu), n = cu(e), s = new eh(e);
        return Du(t.C_), Ha$1(n, t.C_).then((n => new bu(e, s, t, n)));
    }

    /**
     * Executes the query and returns the results as a `QuerySnapshot` from cache.
     * Returns an error if the document is not currently cached.
     *
     * @returns A Promise that will be resolved with the results of the query.
     */ function rh(t) {
        t = Wc$1(t, Xc$1);
        const e = Wc$1(t.firestore, iu), n = cu(e), s = new eh(e);
        return za$1(n, t.C_).then((n => new bu(e, s, t, n)));
    }

    /**
     * Executes the query and returns the results as a `QuerySnapshot` from the
     * server. Returns an error if the network is not available.
     *
     * @returns A Promise that will be resolved with the results of the query.
     */ function oh(t) {
        t = Wc$1(t, Xc$1);
        const e = Wc$1(t.firestore, iu), n = cu(e), s = new eh(e);
        return Ha$1(n, t.C_, {
            source: "server"
        }).then((n => new bu(e, s, t, n)));
    }

    function ch(t, e, n) {
        t = Wc$1(t, Yc$1);
        const s = Wc$1(t.firestore, iu), i = Ju(t.v_, e, n);
        return fh(s, [ fa$1(_a$1(s), "setDoc", t.S_, i, null !== t.v_, n).O_(t.S_, Be.Kt()) ]);
    }

    function ah(t, e, n, ...s) {
        t = Wc$1(t, Yc$1);
        const i = Wc$1(t.firestore, iu), r = _a$1(i);
        let o;
        // For Compat types, we have to "extract" the underlying types before
        // performing validation.
        e instanceof Bc$1 && (e = e.d_), o = "string" == typeof e || e instanceof Mc$1 ? Ra$1(r, "updateDoc", t.S_, e, n, s) : Aa$1(r, "updateDoc", t.S_, e);
        return fh(i, [ o.O_(t.S_, Be.exists(!0)) ]);
    }

    /**
     * Deletes the document referred to by the specified `DocumentReference`.
     *
     * @param reference - A reference to the document to delete.
     * @returns A Promise resolved once the document has been successfully
     * deleted from the backend (note that it won't resolve while you're offline).
     */ function uh(t) {
        return fh(Wc$1(t.firestore, iu), [ new tn(t.S_, Be.Kt()) ]);
    }

    /**
     * Add a new document to specified `CollectionReference` with the given data,
     * assigning it a document ID automatically.
     *
     * @param reference - A reference to the collection to add this document to.
     * @param data - An Object containing the data for the new document.
     * @returns A Promise resolved with a `DocumentReference` pointing to the
     * newly created document after it has been written to the backend (Note that it
     * won't resolve while you're offline).
     */ function hh(t, e) {
        const n = Wc$1(t.firestore, iu), s = na$1(t), i = Ju(t.v_, e);
        return fh(n, [ fa$1(_a$1(t.firestore), "addDoc", s.S_, i, null !== t.v_, {}).O_(s.S_, Be.exists(!1)) ]).then((() => s));
    }

    function lh(t, ...e) {
        var n, s, i;
        t instanceof Bc$1 && (t = t.d_);
        let r = {
            includeMetadataChanges: !1
        }, o = 0;
        "object" != typeof e[o] || eu(e[o]) || (r = e[o], o++);
        const c = {
            includeMetadataChanges: r.includeMetadataChanges
        };
        if (eu(e[o])) {
            const t = e[o];
            e[o] = null === (n = t.next) || void 0 === n ? void 0 : n.bind(t), e[o + 1] = null === (s = t.error) || void 0 === s ? void 0 : s.bind(t), 
            e[o + 2] = null === (i = t.complete) || void 0 === i ? void 0 : i.bind(t);
        }
        let a, u, h;
        if (t instanceof Yc$1) u = Wc$1(t.firestore, iu), h = oe(t.S_.path), a = {
            next: n => {
                e[o] && e[o](dh(u, t, n));
            },
            error: e[o + 1],
            complete: e[o + 2]
        }; else {
            const n = Wc$1(t, Xc$1);
            u = Wc$1(n.firestore, iu), h = n.C_;
            const s = new eh(u);
            a = {
                next: t => {
                    e[o] && e[o](new bu(u, s, n, t));
                },
                error: e[o + 1],
                complete: e[o + 2]
            }, Du(t.C_);
        }
        return function(t, e, n, s) {
            const i = new $c$1(s), r = new Bo(e, i, n);
            return t.ls.Rs((async () => Oo(await Ka$1(t), r))), () => {
                i.s_(), t.ls.Rs((async () => ko(await Ka$1(t), r)));
            };
        }(cu(u), h, c, a);
    }

    function _h(t, e) {
        return Ja$1(cu(t = Wc$1(t, iu)), eu(e) ? e : {
            next: e
        });
    }

    /** Locally writes `mutations` on the async queue. */ function fh(t, e) {
        return function(t, e) {
            const n = new ms;
            return t.ls.Rs((async () => tc(await Ua$1(t), e, n))), n.promise;
        }(cu(t), e);
    }

    /**
     * Converts a ViewSnapshot that contains the single document specified by `ref`
     * to a DocumentSnapshot.
     */ function dh(t, e, n) {
        const s = n.docs.get(e.S_), i = new eh(t);
        return new yu(t, i, e.S_, s, new gu(n.hasPendingWrites, n.fromCache), e.v_);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A reference to a transaction.
     *
     * The `Transaction` object passed to a transaction's `updateFunction` provides
     * the methods to read and write data within the transaction context. See
     * {@link runTransaction}.
     */ class wh extends class {
        /** @hideconstructor */
        constructor(t, e) {
            this.Yf = t, this.Ad = e, this.Id = _a$1(t);
        }
        /**
         * Reads the document referenced by the provided {@link DocumentReference}.
         *
         * @param documentRef - A reference to the document to be read.
         * @returns A `DocumentSnapshot` with the read data.
         */    get(t) {
            const e = Zu(t, this.Yf), n = new Yu(this.Yf);
            return this.Ad.ef([ e.S_ ]).then((t => {
                if (!t || 1 !== t.length) return D$1();
                const s = t[0];
                if (s instanceof $t) return new Ru(this.Yf, n, e.S_, null, e.v_);
                if (s instanceof xt) return new Ru(this.Yf, n, s.key, s, e.v_);
                throw D$1();
            }));
        }
        set(t, e, n) {
            const s = Zu(t, this.Yf), i = Ju(s.v_, e, n), r = fa$1(this.Id, "Transaction.set", s.S_, i, null !== s.v_, n);
            return this.Ad.set(s.S_, r), this;
        }
        update(t, e, n, ...s) {
            const i = Zu(t, this.Yf);
            // For Compat types, we have to "extract" the underlying types before
            // performing validation.
                    let r;
            return e instanceof Bc$1 && (e = e.d_), r = "string" == typeof e || e instanceof Mc$1 ? Ra$1(this.Id, "Transaction.update", i.S_, e, n, s) : Aa$1(this.Id, "Transaction.update", i.S_, e), 
            this.Ad.update(i.S_, r), this;
        }
        /**
         * Deletes the document referred to by the provided {@link DocumentReference}.
         *
         * @param documentRef - A reference to the document to be deleted.
         * @returns This `Transaction` instance. Used for chaining method calls.
         */    delete(t) {
            const e = Zu(t, this.Yf);
            return this.Ad.delete(e.S_), this;
        }
    } {
        // This class implements the same logic as the Transaction API in the Lite SDK
        // but is subclassed in order to return its own DocumentSnapshot types.
        /** @hideconstructor */
        constructor(t, e) {
            super(t, e), this.Yf = t;
        }
        /**
         * Reads the document referenced by the provided {@link DocumentReference}.
         *
         * @param documentRef - A reference to the document to be read.
         * @returns A `DocumentSnapshot` with the read data.
         */    get(t) {
            const e = Zu(t, this.Yf), n = new eh(this.Yf);
            return super.get(t).then((t => new yu(this.Yf, n, e.S_, t.Zf, new gu(
            /* hasPendingWrites= */ !1, 
            /* fromCache= */ !1), e.v_)));
        }
    }

    /**
     * Executes the given `updateFunction` and then attempts to commit the changes
     * applied within the transaction. If any document read within the transaction
     * has changed, Cloud Firestore retries the `updateFunction`. If it fails to
     * commit after 5 attempts, the transaction fails.
     *
     * The maximum number of writes allowed in a single transaction is 500.
     *
     * @param firestore - A reference to the Firestore database to run this
     * transaction against.
     * @param updateFunction - The function to execute within the transaction
     * context.
     * @returns If the transaction completed successfully or was explicitly aborted
     * (the `updateFunction` returned a failed promise), the promise returned by the
     * `updateFunction `is returned here. Otherwise, if the transaction failed, a
     * rejected promise with the corresponding failure error is returned.
     */ function Eh(t, e) {
        return Ya$1(cu(t), (n => e(new wh(t, n))));
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns a sentinel for use with {@link updateDoc} or
     * {@link setDoc} with `{merge: true}` to mark a field for deletion.
     */ function Th() {
        return new da$1("deleteField");
    }

    /**
     * Returns a sentinel used with {@link setDoc} or {@link updateDoc} to
     * include a server-generated timestamp in the written data.
     */ function Ih() {
        return new Ea$1("serverTimestamp");
    }

    /**
     * Returns a special value that can be used with {@link setDoc} or {@link
     * updateDoc} that tells the server to union the given elements with any array
     * value that already exists on the server. Each specified element that doesn't
     * already exist in the array will be added to the end. If the field being
     * modified is not already an array it will be overwritten with an array
     * containing exactly the specified elements.
     *
     * @param elements - The elements to union into the array.
     * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or
     * `updateDoc()`.
     */ function mh(...t) {
        // NOTE: We don't actually parse the data until it's used in set() or
        // update() since we'd need the Firestore instance to do this.
        return new Ta$1("arrayUnion", t);
    }

    /**
     * Returns a special value that can be used with {@link (setDoc:1)} or {@link
     * updateDoc} that tells the server to remove the given elements from any
     * array value that already exists on the server. All instances of each element
     * specified will be removed from the array. If the field being modified is not
     * already an array it will be overwritten with an empty array.
     *
     * @param elements - The elements to remove from the array.
     * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or
     * `updateDoc()`
     */ function Ah(...t) {
        // NOTE: We don't actually parse the data until it's used in set() or
        // update() since we'd need the Firestore instance to do this.
        return new Ia$1("arrayRemove", t);
    }

    /**
     * Returns a special value that can be used with {@link setDoc} or {@link
     * updateDoc} that tells the server to increment the field's current value by
     * the given value.
     *
     * If either the operand or the current field value uses floating point
     * precision, all arithmetic follows IEEE 754 semantics. If both values are
     * integers, values outside of JavaScript's safe number range
     * (`Number.MIN_SAFE_INTEGER` to `Number.MAX_SAFE_INTEGER`) are also subject to
     * precision loss. Furthermore, once processed by the Firestore backend, all
     * integer operations are capped between -2^63 and 2^63-1.
     *
     * If the current field value is not of type `number`, or if the field does not
     * yet exist, the transformation sets the field to the given value.
     *
     * @param n - The value to increment by.
     * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or
     * `updateDoc()`
     */ function Rh(t) {
        return new ma$1("increment", t);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Creates a write batch, used for performing multiple writes as a single
     * atomic operation. The maximum number of writes allowed in a single WriteBatch
     * is 500.
     *
     * Unlike transactions, write batches are persisted offline and therefore are
     * preferable when you don't need to condition your writes on read data.
     *
     * @returns A `WriteBatch` that can be used to atomically execute multiple
     * writes.
     */ function Ph(t) {
        return cu(t = Wc$1(t, iu)), new Xu(t, (e => fh(t, e)));
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ app._registerComponent(new Component("firestore-exp", (t => ((t, e) => new iu(t, e))(t.getProvider("app-exp").getImmediate(), t.getProvider("auth-internal"))), "PUBLIC" /* PUBLIC */)), 
    app.registerVersion("firestore-exp", "0.0.900", "node");

    exports.Bytes = kc$1;
    exports.CACHE_SIZE_UNLIMITED = su;
    exports.CollectionReference = Zc$1;
    exports.DocumentReference = Yc$1;
    exports.DocumentSnapshot = yu;
    exports.FieldPath = Mc$1;
    exports.FieldValue = Lc$1;
    exports.FirebaseFirestore = iu;
    exports.FirestoreError = $;
    exports.GeoPoint = ra$1;
    exports.LoadBundleTask = nu;
    exports.Query = Xc$1;
    exports.QueryConstraint = Cu;
    exports.QueryDocumentSnapshot = pu;
    exports.QuerySnapshot = bu;
    exports.SnapshotMetadata = gu;
    exports.Timestamp = z$1;
    exports.Transaction = wh;
    exports.WriteBatch = Xu;
    exports.addDoc = hh;
    exports.arrayRemove = Ah;
    exports.arrayUnion = mh;
    exports.clearIndexedDbPersistence = _u;
    exports.collection = ta$1;
    exports.collectionGroup = ea$1;
    exports.deleteDoc = uh;
    exports.deleteField = Th;
    exports.disableNetwork = wu;
    exports.doc = na$1;
    exports.documentId = Fc$1;
    exports.enableIndexedDbPersistence = uu;
    exports.enableMultiTabIndexedDbPersistence = hu;
    exports.enableNetwork = du;
    exports.endAt = Wu;
    exports.endBefore = Qu;
    exports.getDoc = th;
    exports.getDocFromCache = nh;
    exports.getDocFromServer = sh;
    exports.getDocs = ih;
    exports.getDocsFromCache = rh;
    exports.getDocsFromServer = oh;
    exports.getFirestore = ou;
    exports.increment = Rh;
    exports.initializeFirestore = ru;
    exports.limit = Fu;
    exports.limitToLast = Lu;
    exports.loadBundle = Tu;
    exports.namedQuery = Iu;
    exports.onSnapshot = lh;
    exports.onSnapshotsInSync = _h;
    exports.orderBy = ku;
    exports.query = Nu;
    exports.queryEqual = ia;
    exports.refEqual = sa$1;
    exports.runTransaction = Eh;
    exports.serverTimestamp = Ih;
    exports.setDoc = ch;
    exports.setLogLevel = y$1;
    exports.snapshotEqual = Su;
    exports.startAfter = Uu;
    exports.startAt = qu;
    exports.terminate = Eu;
    exports.updateDoc = ah;
    exports.useFirestoreEmulator = Jc$1;
    exports.waitForPendingWrites = fu;
    exports.where = $u;
    exports.writeBatch = Ph;

    Object.defineProperty(exports, '__esModule', { value: true });


              }).apply(this, arguments);
            } catch(err) {
                console.error(err);
                throw new Error(
                  'Cannot instantiate firebase-firestore.js - ' +
                  'be sure to load firebase-app.js first.'
                );
              }

})));


(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@firebase/app')) :
    typeof define === 'function' && define.amd ? define(['exports', '@firebase/app'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.firebase = global.firebase || {}, global.firebase['firestore-lite'] = global.firebase['firestore-lite'] || {}), global.firebase.app));
}(this, (function (exports, app) { 'use strict';

    try {
                (function() {

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ERROR_NAME = 'FirebaseError';
    // Based on code from:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
    var FirebaseError = /** @class */ (function (_super) {
        __extends(FirebaseError, _super);
        function FirebaseError(code, message, customData) {
            var _this = _super.call(this, message) || this;
            _this.code = code;
            _this.customData = customData;
            _this.name = ERROR_NAME;
            // Fix For ES5
            // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
            Object.setPrototypeOf(_this, FirebaseError.prototype);
            // Maintains proper stack trace for where our error was thrown.
            // Only available on V8.
            if (Error.captureStackTrace) {
                Error.captureStackTrace(_this, ErrorFactory.prototype.create);
            }
            return _this;
        }
        return FirebaseError;
    }(Error));
    var ErrorFactory = /** @class */ (function () {
        function ErrorFactory(service, serviceName, errors) {
            this.service = service;
            this.serviceName = serviceName;
            this.errors = errors;
        }
        ErrorFactory.prototype.create = function (code) {
            var data = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                data[_i - 1] = arguments[_i];
            }
            var customData = data[0] || {};
            var fullCode = this.service + "/" + code;
            var template = this.errors[code];
            var message = template ? replaceTemplate(template, customData) : 'Error';
            // Service Name: Error message (service/code).
            var fullMessage = this.serviceName + ": " + message + " (" + fullCode + ").";
            var error = new FirebaseError(fullCode, fullMessage, customData);
            return error;
        };
        return ErrorFactory;
    }());
    function replaceTemplate(template, data) {
        return template.replace(PATTERN, function (_, key) {
            var value = data[key];
            return value != null ? String(value) : "<" + key + "?>";
        });
    }
    var PATTERN = /\{\$([^}]+)}/g;

    /**
     * Component for service name T, e.g. `auth`, `auth-internal`
     */
    var Component = /** @class */ (function () {
        /**
         *
         * @param name The public service name, e.g. app, auth, firestore, database
         * @param instanceFactory Service factory responsible for creating the public interface
         * @param type whether the service provided by the component is public or private
         */
        function Component(name, instanceFactory, type) {
            this.name = name;
            this.instanceFactory = instanceFactory;
            this.type = type;
            this.multipleInstances = false;
            /**
             * Properties to be added to the service namespace
             */
            this.serviceProps = {};
            this.instantiationMode = "LAZY" /* LAZY */;
        }
        Component.prototype.setInstantiationMode = function (mode) {
            this.instantiationMode = mode;
            return this;
        };
        Component.prototype.setMultipleInstances = function (multipleInstances) {
            this.multipleInstances = multipleInstances;
            return this;
        };
        Component.prototype.setServiceProps = function (props) {
            this.serviceProps = props;
            return this;
        };
        return Component;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a;
    /**
     * The JS SDK supports 5 log levels and also allows a user the ability to
     * silence the logs altogether.
     *
     * The order is a follows:
     * DEBUG < VERBOSE < INFO < WARN < ERROR
     *
     * All of the log types above the current log level will be captured (i.e. if
     * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
     * `VERBOSE` logs will not)
     */
    var LogLevel;
    (function (LogLevel) {
        LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
        LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
        LogLevel[LogLevel["INFO"] = 2] = "INFO";
        LogLevel[LogLevel["WARN"] = 3] = "WARN";
        LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
        LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
    })(LogLevel || (LogLevel = {}));
    var levelStringToEnum = {
        'debug': LogLevel.DEBUG,
        'verbose': LogLevel.VERBOSE,
        'info': LogLevel.INFO,
        'warn': LogLevel.WARN,
        'error': LogLevel.ERROR,
        'silent': LogLevel.SILENT
    };
    /**
     * The default log level
     */
    var defaultLogLevel = LogLevel.INFO;
    /**
     * By default, `console.debug` is not displayed in the developer console (in
     * chrome). To avoid forcing users to have to opt-in to these logs twice
     * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
     * logs to the `console.log` function.
     */
    var ConsoleMethod = (_a = {},
        _a[LogLevel.DEBUG] = 'log',
        _a[LogLevel.VERBOSE] = 'log',
        _a[LogLevel.INFO] = 'info',
        _a[LogLevel.WARN] = 'warn',
        _a[LogLevel.ERROR] = 'error',
        _a);
    /**
     * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
     * messages on to their corresponding console counterparts (if the log method
     * is supported by the current log level)
     */
    var defaultLogHandler = function (instance, logType) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        if (logType < instance.logLevel) {
            return;
        }
        var now = new Date().toISOString();
        var method = ConsoleMethod[logType];
        if (method) {
            console[method].apply(console, __spreadArrays(["[" + now + "]  " + instance.name + ":"], args));
        }
        else {
            throw new Error("Attempted to log a message with an invalid logType (value: " + logType + ")");
        }
    };
    var Logger = /** @class */ (function () {
        /**
         * Gives you an instance of a Logger to capture messages according to
         * Firebase's logging scheme.
         *
         * @param name The name that the logs will be associated with
         */
        function Logger(name) {
            this.name = name;
            /**
             * The log level of the given Logger instance.
             */
            this._logLevel = defaultLogLevel;
            /**
             * The main (internal) log handler for the Logger instance.
             * Can be set to a new function in internal package code but not by user.
             */
            this._logHandler = defaultLogHandler;
            /**
             * The optional, additional, user-defined log handler for the Logger instance.
             */
            this._userLogHandler = null;
        }
        Object.defineProperty(Logger.prototype, "logLevel", {
            get: function () {
                return this._logLevel;
            },
            set: function (val) {
                if (!(val in LogLevel)) {
                    throw new TypeError("Invalid value \"" + val + "\" assigned to `logLevel`");
                }
                this._logLevel = val;
            },
            enumerable: false,
            configurable: true
        });
        // Workaround for setter/getter having to be the same type.
        Logger.prototype.setLogLevel = function (val) {
            this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;
        };
        Object.defineProperty(Logger.prototype, "logHandler", {
            get: function () {
                return this._logHandler;
            },
            set: function (val) {
                if (typeof val !== 'function') {
                    throw new TypeError('Value assigned to `logHandler` must be a function');
                }
                this._logHandler = val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Logger.prototype, "userLogHandler", {
            get: function () {
                return this._userLogHandler;
            },
            set: function (val) {
                this._userLogHandler = val;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * The functions below are all based on the `console` interface
         */
        Logger.prototype.debug = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.DEBUG], args));
            this._logHandler.apply(this, __spreadArrays([this, LogLevel.DEBUG], args));
        };
        Logger.prototype.log = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.VERBOSE], args));
            this._logHandler.apply(this, __spreadArrays([this, LogLevel.VERBOSE], args));
        };
        Logger.prototype.info = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.INFO], args));
            this._logHandler.apply(this, __spreadArrays([this, LogLevel.INFO], args));
        };
        Logger.prototype.warn = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.WARN], args));
            this._logHandler.apply(this, __spreadArrays([this, LogLevel.WARN], args));
        };
        Logger.prototype.error = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.ERROR], args));
            this._logHandler.apply(this, __spreadArrays([this, LogLevel.ERROR], args));
        };
        return Logger;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Simple wrapper around a nullable UID. Mostly exists to make code more
     * readable.
     */
    class u {
        constructor(t) {
            this.uid = t;
        }
        t() {
            return null != this.uid;
        }
        /**
         * Returns a key representing this user, suitable for inclusion in a
         * dictionary.
         */    i() {
            return this.t() ? "uid:" + this.uid : "anonymous-user";
        }
        isEqual(t) {
            return t.uid === this.uid;
        }
    }

    /** A user with a null UID. */ u.UNAUTHENTICATED = new u(null), 
    // TODO(mikelehen): Look into getting a proper uid-equivalent for
    // non-FirebaseAuth providers.
    u.o = new u("google-credentials-uid"), u.u = new u("first-party-uid");

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const c = new Logger("@firebase/firestore");

    /**
     * Sets the verbosity of Cloud Firestore logs (debug, error, or silent).
     *
     * @param logLevel - The verbosity you set for activity and error logging. Can
     *   be any of the following values:
     *
     *   <ul>
     *     <li>`debug` for the most verbose logging level, primarily for
     *     debugging.</li>
     *     <li>`error` to log errors only.</li>
     *     <li><code>`silent` to turn off logging.</li>
     *   </ul>
     */ function a(t) {
        c.setLogLevel(t);
    }

    function h(t, ...n) {
        if (c.logLevel <= LogLevel.DEBUG) {
            const e = n.map(d);
            c.debug(`Firestore (8.2.9): ${t}`, ...e);
        }
    }

    function l(t, ...n) {
        if (c.logLevel <= LogLevel.ERROR) {
            const e = n.map(d);
            c.error(`Firestore (8.2.9): ${t}`, ...e);
        }
    }

    function f(t, ...n) {
        if (c.logLevel <= LogLevel.WARN) {
            const e = n.map(d);
            c.warn(`Firestore (8.2.9): ${t}`, ...e);
        }
    }

    /**
     * Converts an additional log parameter to a string representation.
     */ function d(t) {
        if ("string" == typeof t) return t;
        try {
            return n = t, JSON.stringify(n);
        } catch (n) {
            // Converting to JSON failed, just log the object directly
            return t;
        }
        /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
        /** Formats an object as a JSON string, suitable for logging. */
        var n;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Unconditionally fails, throwing an Error with the given message.
     * Messages are stripped in production builds.
     *
     * Returns `never` and can be used in expressions:
     * @example
     * let futureVar = fail('not implemented yet');
     */ function _(t = "Unexpected state") {
        // Log the failure in addition to throw an exception, just in case the
        // exception is swallowed.
        const n = "FIRESTORE (8.2.9) INTERNAL ASSERTION FAILED: " + t;
        // NOTE: We don't use FirestoreError here because these are internal failures
        // that cannot be handled by the user. (Also it would create a circular
        // dependency between the error and assert modules which doesn't work.)
        throw l(n), new Error(n);
    }

    /**
     * Fails if the given assertion condition is false, throwing an Error with the
     * given message if it did.
     *
     * Messages are stripped in production builds.
     */ function w(t, n) {
        t || _();
    }

    /**
     * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an
     * instance of `T` before casting.
     */ function m(t, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    n) {
        return t;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ const p = "ok", y = "cancelled", E = "unknown", I = "invalid-argument", T = "deadline-exceeded", A = "not-found", P = "already-exists", R = "permission-denied", V = "unauthenticated", g = "resource-exhausted", b = "failed-precondition", v = "aborted", N = "out-of-range", $ = "unimplemented", D = "internal", F = "unavailable", S = "data-loss";

    /** An error returned by a Firestore operation. */ class x extends Error {
        /** @hideconstructor */
        constructor(t, n) {
            super(n), this.code = t, this.message = n, this.name = "FirebaseError", 
            // HACK: We write a toString property directly because Error is not a real
            // class and so inheritance does not work correctly. We could alternatively
            // do the same "back-door inheritance" trick that FirebaseError does.
            this.toString = () => `${this.name}: [code=${this.code}]: ${this.message}`;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class q {
        constructor(t, n) {
            this.user = n, this.type = "OAuth", this.h = {}, 
            // Set the headers using Object Literal notation to avoid minification
            this.h.Authorization = `Bearer ${t}`;
        }
    }

    /** A CredentialsProvider that always yields an empty token. */ class O {
        constructor() {
            /**
             * Stores the listener registered with setChangeListener()
             * This isn't actually necessary since the UID never changes, but we use this
             * to verify the listen contract is adhered to in tests.
             */
            this.l = null;
        }
        getToken() {
            return Promise.resolve(null);
        }
        _() {}
        m(t) {
            this.l = t, 
            // Fire with initial user.
            t(u.UNAUTHENTICATED);
        }
        p() {
            this.l = null;
        }
    }

    class C {
        constructor(t) {
            /**
             * The auth token listener registered with FirebaseApp, retained here so we
             * can unregister it.
             */
            this.I = null, 
            /** Tracks the current User. */
            this.currentUser = u.UNAUTHENTICATED, this.T = !1, 
            /**
             * Counter used to detect if the token changed while a getToken request was
             * outstanding.
             */
            this.A = 0, 
            /** The listener registered with setChangeListener(). */
            this.l = null, this.forceRefresh = !1, this.I = () => {
                this.A++, this.currentUser = this.P(), this.T = !0, this.l && this.l(this.currentUser);
            }, this.A = 0, this.auth = t.getImmediate({
                optional: !0
            }), this.auth ? this.auth.addAuthTokenListener(this.I) : (
            // if auth is not available, invoke tokenListener once with null token
            this.I(null), t.get().then((t => {
                this.auth = t, this.I && 
                // tokenListener can be removed by removeChangeListener()
                this.auth.addAuthTokenListener(this.I);
            }), (() => {})));
        }
        getToken() {
            // Take note of the current value of the tokenCounter so that this method
            // can fail (with an ABORTED error) if there is a token change while the
            // request is outstanding.
            const t = this.A, n = this.forceRefresh;
            return this.forceRefresh = !1, this.auth ? this.auth.getToken(n).then((n => 
            // Cancel the request since the token changed while the request was
            // outstanding so the response is potentially for a previous user (which
            // user, we can't be sure).
            this.A !== t ? (h("FirebaseCredentialsProvider", "getToken aborted due to token change."), 
            this.getToken()) : n ? (w("string" == typeof n.accessToken), new q(n.accessToken, this.currentUser)) : null)) : Promise.resolve(null);
        }
        _() {
            this.forceRefresh = !0;
        }
        m(t) {
            this.l = t, 
            // Fire the initial event
            this.T && t(this.currentUser);
        }
        p() {
            this.auth && this.auth.removeAuthTokenListener(this.I), this.I = null, this.l = null;
        }
        // Auth.getUid() can return null even with a user logged in. It is because
        // getUid() is synchronous, but the auth code populating Uid is asynchronous.
        // This method should only be called in the AuthTokenListener callback
        // to guarantee to get the actual user.
        P() {
            const t = this.auth && this.auth.getUid();
            return w(null === t || "string" == typeof t), new u(t);
        }
    }

    /*
     * FirstPartyToken provides a fresh token each time its value
     * is requested, because if the token is too old, requests will be rejected.
     * Technically this may no longer be necessary since the SDK should gracefully
     * recover from unauthenticated errors (see b/33147818 for context), but it's
     * safer to keep the implementation as-is.
     */ class L {
        constructor(t, n) {
            this.R = t, this.V = n, this.type = "FirstParty", this.user = u.u;
        }
        get h() {
            const t = {
                "X-Goog-AuthUser": this.V
            }, n = this.R.auth.getAuthHeaderValueForFirstParty([]);
            // Use array notation to prevent minification
                    return n && (t.Authorization = n), t;
        }
    }

    /*
     * Provides user credentials required for the Firestore JavaScript SDK
     * to authenticate the user, using technique that is only available
     * to applications hosted by Google.
     */ class U {
        constructor(t, n) {
            this.R = t, this.V = n;
        }
        getToken() {
            return Promise.resolve(new L(this.R, this.V));
        }
        m(t) {
            // Fire with initial uid.
            t(u.u);
        }
        p() {}
        _() {}
    }

    /**
     * Builds a CredentialsProvider depending on the type of
     * the credentials passed in.
     */
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class j {
        /**
         * Constructs a DatabaseInfo using the provided host, databaseId and
         * persistenceKey.
         *
         * @param databaseId - The database to use.
         * @param persistenceKey - A unique identifier for this Firestore's local
         * storage (used in conjunction with the databaseId).
         * @param host - The Firestore backend host to connect to.
         * @param ssl - Whether to use SSL when connecting.
         * @param forceLongPolling - Whether to use the forceLongPolling option
         * when using WebChannel as the network transport.
         * @param autoDetectLongPolling - Whether to use the detectBufferingProxy
         * option when using WebChannel as the network transport.
         */
        constructor(t, n, e, s, r, i) {
            this.g = t, this.persistenceKey = n, this.host = e, this.ssl = s, this.forceLongPolling = r, 
            this.v = i;
        }
    }

    /** The default database name for a project. */
    /** Represents the database ID a Firestore client is associated with. */
    class M {
        constructor(t, n) {
            this.projectId = t, this.database = n || "(default)";
        }
        get N() {
            return "(default)" === this.database;
        }
        isEqual(t) {
            return t instanceof M && t.projectId === this.projectId && t.database === this.database;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Path represents an ordered sequence of string segments.
     */
    class B {
        constructor(t, n, e) {
            void 0 === n ? n = 0 : n > t.length && _(), void 0 === e ? e = t.length - n : e > t.length - n && _(), 
            this.segments = t, this.offset = n, this.$ = e;
        }
        get length() {
            return this.$;
        }
        isEqual(t) {
            return 0 === B.D(this, t);
        }
        child(t) {
            const n = this.segments.slice(this.offset, this.limit());
            return t instanceof B ? t.forEach((t => {
                n.push(t);
            })) : n.push(t), this.F(n);
        }
        /** The index of one past the last segment of the path. */    limit() {
            return this.offset + this.length;
        }
        S(t) {
            return t = void 0 === t ? 1 : t, this.F(this.segments, this.offset + t, this.length - t);
        }
        q() {
            return this.F(this.segments, this.offset, this.length - 1);
        }
        O() {
            return this.segments[this.offset];
        }
        C() {
            return this.get(this.length - 1);
        }
        get(t) {
            return this.segments[this.offset + t];
        }
        L() {
            return 0 === this.length;
        }
        U(t) {
            if (t.length < this.length) return !1;
            for (let n = 0; n < this.length; n++) if (this.get(n) !== t.get(n)) return !1;
            return !0;
        }
        j(t) {
            if (this.length + 1 !== t.length) return !1;
            for (let n = 0; n < this.length; n++) if (this.get(n) !== t.get(n)) return !1;
            return !0;
        }
        forEach(t) {
            for (let n = this.offset, e = this.limit(); n < e; n++) t(this.segments[n]);
        }
        M() {
            return this.segments.slice(this.offset, this.limit());
        }
        static D(t, n) {
            const e = Math.min(t.length, n.length);
            for (let s = 0; s < e; s++) {
                const e = t.get(s), r = n.get(s);
                if (e < r) return -1;
                if (e > r) return 1;
            }
            return t.length < n.length ? -1 : t.length > n.length ? 1 : 0;
        }
    }

    /**
     * A slash-separated path for navigating resources (documents and collections)
     * within Firestore.
     */ class k extends B {
        F(t, n, e) {
            return new k(t, n, e);
        }
        B() {
            // NOTE: The client is ignorant of any path segments containing escape
            // sequences (e.g. __id123__) and just passes them through raw (they exist
            // for legacy reasons and should not be used frequently).
            return this.M().join("/");
        }
        toString() {
            return this.B();
        }
        /**
         * Creates a resource path from the given slash-delimited string. If multiple
         * arguments are provided, all components are combined. Leading and trailing
         * slashes from all components are ignored.
         */    static k(...t) {
            // NOTE: The client is ignorant of any path segments containing escape
            // sequences (e.g. __id123__) and just passes them through raw (they exist
            // for legacy reasons and should not be used frequently).
            const n = [];
            for (const e of t) {
                if (e.indexOf("//") >= 0) throw new x(I, `Invalid segment (${e}). Paths must not contain // in them.`);
                // Strip leading and traling slashed.
                            n.push(...e.split("/").filter((t => t.length > 0)));
            }
            return new k(n);
        }
        static W() {
            return new k([]);
        }
    }

    const Q = /^[_a-zA-Z][_a-zA-Z0-9]*$/;

    /** A dot-separated path for navigating sub-objects within a document. */ class W extends B {
        F(t, n, e) {
            return new W(t, n, e);
        }
        /**
         * Returns true if the string could be used as a segment in a field path
         * without escaping.
         */    static G(t) {
            return Q.test(t);
        }
        B() {
            return this.M().map((t => (t = t.replace(/\\/g, "\\\\").replace(/`/g, "\\`"), W.G(t) || (t = "`" + t + "`"), 
            t))).join(".");
        }
        toString() {
            return this.B();
        }
        /**
         * Returns true if this field references the key of a document.
         */    Y() {
            return 1 === this.length && "__name__" === this.get(0);
        }
        /**
         * The field designating the key of a document.
         */    static H() {
            return new W([ "__name__" ]);
        }
        /**
         * Parses a field string from the given server-formatted string.
         *
         * - Splitting the empty string is not allowed (for now at least).
         * - Empty segments within the string (e.g. if there are two consecutive
         *   separators) are not allowed.
         *
         * TODO(b/37244157): we should make this more strict. Right now, it allows
         * non-identifier path components, even if they aren't escaped.
         */    static K(t) {
            const n = [];
            let e = "", s = 0;
            const r = () => {
                if (0 === e.length) throw new x(I, `Invalid field path (${t}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);
                n.push(e), e = "";
            };
            let i = !1;
            for (;s < t.length; ) {
                const n = t[s];
                if ("\\" === n) {
                    if (s + 1 === t.length) throw new x(I, "Path has trailing escape character: " + t);
                    const n = t[s + 1];
                    if ("\\" !== n && "." !== n && "`" !== n) throw new x(I, "Path has invalid escape sequence: " + t);
                    e += n, s += 2;
                } else "`" === n ? (i = !i, s++) : "." !== n || i ? (e += n, s++) : (r(), s++);
            }
            if (r(), i) throw new x(I, "Unterminated ` in path: " + t);
            return new W(n);
        }
        static W() {
            return new W([]);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class z {
        constructor(t) {
            this.path = t;
        }
        static J(t) {
            return new z(k.k(t));
        }
        static Z(t) {
            return new z(k.k(t).S(5));
        }
        /** Returns true if the document is in the specified collectionId. */    X(t) {
            return this.path.length >= 2 && this.path.get(this.path.length - 2) === t;
        }
        isEqual(t) {
            return null !== t && 0 === k.D(this.path, t.path);
        }
        toString() {
            return this.path.toString();
        }
        static D(t, n) {
            return k.D(t.path, n.path);
        }
        static tt(t) {
            return t.length % 2 == 0;
        }
        /**
         * Creates and returns a new document key with the given segments.
         *
         * @param segments - The segments of the path to the document
         * @returns A new instance of DocumentKey
         */    static nt(t) {
            return new z(new k(t.slice()));
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ function G(t, n, e) {
        if (!e) throw new x(I, `Function ${t}() cannot be called with an empty ${n}.`);
    }

    /**
     * Validates that two boolean options are not set at the same time.
     */
    /**
     * Validates that `path` refers to a document (indicated by the fact it contains
     * an even numbers of segments).
     */
    function Y(t) {
        if (!z.tt(t)) throw new x(I, `Invalid document reference. Document references must have an even number of segments, but ${t} has ${t.length}.`);
    }

    /**
     * Validates that `path` refers to a collection (indicated by the fact it
     * contains an odd numbers of segments).
     */ function H(t) {
        if (z.tt(t)) throw new x(I, `Invalid collection reference. Collection references must have an odd number of segments, but ${t} has ${t.length}.`);
    }

    /**
     * Returns true if it's a non-null object without a custom prototype
     * (i.e. excludes Array, Date, etc.).
     */
    /** Returns a string describing the type / value of the provided input. */
    function K(t) {
        if (void 0 === t) return "undefined";
        if (null === t) return "null";
        if ("string" == typeof t) return t.length > 20 && (t = `${t.substring(0, 20)}...`), 
        JSON.stringify(t);
        if ("number" == typeof t || "boolean" == typeof t) return "" + t;
        if ("object" == typeof t) {
            if (t instanceof Array) return "an array";
            {
                const n = 
                /** Hacky method to try to get the constructor name for an object. */
                function(t) {
                    if (t.constructor) {
                        const n = /function\s+([^\s(]+)\s*\(/.exec(t.constructor.toString());
                        if (n && n.length > 1) return n[1];
                    }
                    return null;
                }
                /**
     * Casts `obj` to `T`, optionally unwrapping Compat types to expose the
     * underlying instance. Throws if  `obj` is not an instance of `T`.
     *
     * This cast is used in the Lite and Full SDK to verify instance types for
     * arguments passed to the public API.
     */ (t);
                return n ? `a custom ${n} object` : "an object";
            }
        }
        return "function" == typeof t ? "a function" : _();
    }

    function J(t, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    n) {
        if ("_delegate" in t && (
        // Unwrap Compat types
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        t = t.et), !(t instanceof n)) {
            if (n.name === t.constructor.name) throw new x(I, "Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");
            {
                const e = K(t);
                throw new x(I, `Expected type '${n.name}', but it was: ${e}`);
            }
        }
        return t;
    }

    function Z(t, n) {
        if (n <= 0) throw new x(I, `Function ${t}() requires a positive number, but it was: ${n}.`);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns whether a variable is either undefined or null.
     */ function X(t) {
        return null == t;
    }

    /** Returns whether the value represents -0. */ function tt(t) {
        // Detect if the value is -0.0. Based on polyfill from
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
        return 0 === t && 1 / t == -1 / 0;
    }

    /**
     * Returns whether a value is an integer and in the safe integer range
     * @param value - The value to test for being an integer and in the safe range
     */
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const nt = {
        BatchGetDocuments: "batchGet",
        Commit: "commit",
        RunQuery: "runQuery"
    };

    /**
     * Maps RPC names to the corresponding REST endpoint name.
     *
     * We use array notation to avoid mangling.
     */
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Error Codes describing the different ways GRPC can fail. These are copied
     * directly from GRPC's sources here:
     *
     * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
     *
     * Important! The names of these identifiers matter because the string forms
     * are used for reverse lookups from the webchannel stream. Do NOT change the
     * names of these identifiers or change this into a const enum.
     */
    var et, st;

    /**
     * Converts an HTTP Status Code to the equivalent error code.
     *
     * @param status - An HTTP Status Code, like 200, 404, 503, etc.
     * @returns The equivalent Code. Unknown status codes are mapped to
     *     Code.UNKNOWN.
     */
    function rt(t) {
        if (void 0 === t) return l("RPC_ERROR", "HTTP error has no status"), E;
        // The canonical error codes for Google APIs [1] specify mapping onto HTTP
        // status codes but the mapping is not bijective. In each case of ambiguity
        // this function chooses a primary error.
        
        // [1]
        // https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto
            switch (t) {
          case 200:
            // OK
            return p;

          case 400:
            // Bad Request
            return b;

            // Other possibilities based on the forward mapping
            // return Code.INVALID_ARGUMENT;
            // return Code.OUT_OF_RANGE;
                  case 401:
            // Unauthorized
            return V;

          case 403:
            // Forbidden
            return R;

          case 404:
            // Not Found
            return A;

          case 409:
            // Conflict
            return v;

            // Other possibilities:
            // return Code.ALREADY_EXISTS;
                  case 416:
            // Range Not Satisfiable
            return N;

          case 429:
            // Too Many Requests
            return g;

          case 499:
            // Client Closed Request
            return y;

          case 500:
            // Internal Server Error
            return E;

            // Other possibilities:
            // return Code.INTERNAL;
            // return Code.DATA_LOSS;
                  case 501:
            // Unimplemented
            return $;

          case 503:
            // Service Unavailable
            return F;

          case 504:
            // Gateway Timeout
            return T;

          default:
            return t >= 200 && t < 300 ? p : t >= 400 && t < 500 ? b : t >= 500 && t < 600 ? D : E;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A Rest-based connection that relies on the native HTTP stack
     * (e.g. `fetch` or a polyfill).
     */ (st = et || (et = {}))[st.OK = 0] = "OK", st[st.CANCELLED = 1] = "CANCELLED", 
    st[st.UNKNOWN = 2] = "UNKNOWN", st[st.INVALID_ARGUMENT = 3] = "INVALID_ARGUMENT", 
    st[st.DEADLINE_EXCEEDED = 4] = "DEADLINE_EXCEEDED", st[st.NOT_FOUND = 5] = "NOT_FOUND", 
    st[st.ALREADY_EXISTS = 6] = "ALREADY_EXISTS", st[st.PERMISSION_DENIED = 7] = "PERMISSION_DENIED", 
    st[st.UNAUTHENTICATED = 16] = "UNAUTHENTICATED", st[st.RESOURCE_EXHAUSTED = 8] = "RESOURCE_EXHAUSTED", 
    st[st.FAILED_PRECONDITION = 9] = "FAILED_PRECONDITION", st[st.ABORTED = 10] = "ABORTED", 
    st[st.OUT_OF_RANGE = 11] = "OUT_OF_RANGE", st[st.UNIMPLEMENTED = 12] = "UNIMPLEMENTED", 
    st[st.INTERNAL = 13] = "INTERNAL", st[st.UNAVAILABLE = 14] = "UNAVAILABLE", st[st.DATA_LOSS = 15] = "DATA_LOSS";

    class it extends 
    /**
     * Base class for all Rest-based connections to the backend (WebChannel and
     * HTTP).
     */
    class {
        constructor(t) {
            this.st = t, this.g = t.g;
            const n = t.ssl ? "https" : "http";
            this.rt = n + "://" + t.host, this.it = "projects/" + this.g.projectId + "/databases/" + this.g.database + "/documents";
        }
        ot(t, n, e, s) {
            const r = this.ut(t, n);
            h("RestConnection", "Sending: ", r, e);
            const i = {};
            return this.ct(i, s), this.at(t, r, i, e).then((t => (h("RestConnection", "Received: ", t), 
            t)), (n => {
                throw f("RestConnection", `${t} failed with error: `, n, "url: ", r, "request:", e), 
                n;
            }));
        }
        ht(t, n, e, s) {
            // The REST API automatically aggregates all of the streamed results, so we
            // can just use the normal invoke() method.
            return this.ot(t, n, e, s);
        }
        /**
         * Modifies the headers for a request, adding any authorization token if
         * present and any additional headers for the request.
         */    ct(t, n) {
            if (t["X-Goog-Api-Client"] = "gl-js/ fire/8.2.9", 
            // Content-Type: text/plain will avoid preflight requests which might
            // mess with CORS and redirects by proxies. If we add custom headers
            // we will need to change this code to potentially use the $httpOverwrite
            // parameter supported by ESF to avoid triggering preflight requests.
            t["Content-Type"] = "text/plain", n) for (const e in n.h) n.h.hasOwnProperty(e) && (t[e] = n.h[e]);
        }
        ut(t, n) {
            const e = nt[t];
            return `${this.rt}/v1/${n}:${e}`;
        }
    } {
        /**
         * @param databaseInfo - The connection info.
         * @param fetchImpl - `fetch` or a Polyfill that implements the fetch API.
         */
        constructor(t, n) {
            super(t), this.lt = n;
        }
        ft(t, n) {
            throw new Error("Not supported by FetchConnection");
        }
        async at(t, n, e, s) {
            const r = JSON.stringify(s);
            let i;
            try {
                i = await this.lt(n, {
                    method: "POST",
                    headers: e,
                    body: r
                });
            } catch (t) {
                throw new x(rt(t.status), "Request failed with error: " + t.statusText);
            }
            if (!i.ok) throw new x(rt(i.status), "Request failed with error: " + i.statusText);
            return i.json();
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class ot {
        constructor() {
            this.promise = new Promise(((t, n) => {
                this.resolve = t, this.reject = n;
            }));
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Initializes the HTTP connection for the REST API. */
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Generates `nBytes` of random bytes.
     *
     * If `nBytes < 0` , an error will be thrown.
     */
    function ut(t) {
        // Polyfills for IE and WebWorker by using `self` and `msCrypto` when `crypto` is not available.
        const n = 
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        "undefined" != typeof self && (self.crypto || self.msCrypto), e = new Uint8Array(t);
        if (n && "function" == typeof n.getRandomValues) n.getRandomValues(e); else 
        // Falls back to Math.random
        for (let n = 0; n < t; n++) e[n] = Math.floor(256 * Math.random());
        return e;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class ct {
        static dt() {
            // Alphanumeric characters
            const t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", n = Math.floor(256 / t.length) * t.length;
            // The largest byte value that is a multiple of `char.length`.
                    let e = "";
            for (;e.length < 20; ) {
                const s = ut(40);
                for (let r = 0; r < s.length; ++r) 
                // Only accept values that are [0, maxMultiple), this ensures they can
                // be evenly mapped to indices of `chars` via a modulo operation.
                e.length < 20 && s[r] < n && (e += t.charAt(s[r] % t.length));
            }
            return e;
        }
    }

    function at(t, n) {
        return t < n ? -1 : t > n ? 1 : 0;
    }

    /** Helper to compare arrays using isEqual(). */ function ht(t, n, e) {
        return t.length === n.length && t.every(((t, s) => e(t, n[s])));
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // The earliest date supported by Firestore timestamps (0001-01-01T00:00:00Z).
    /**
     * A `Timestamp` represents a point in time independent of any time zone or
     * calendar, represented as seconds and fractions of seconds at nanosecond
     * resolution in UTC Epoch time.
     *
     * It is encoded using the Proleptic Gregorian Calendar which extends the
     * Gregorian calendar backwards to year one. It is encoded assuming all minutes
     * are 60 seconds long, i.e. leap seconds are "smeared" so that no leap second
     * table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to
     * 9999-12-31T23:59:59.999999999Z.
     *
     * For examples and further specifications, refer to the
     * {@link https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto | Timestamp definition}.
     */
    class lt {
        /**
         * Creates a new timestamp.
         *
         * @param seconds - The number of seconds of UTC time since Unix epoch
         *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
         *     9999-12-31T23:59:59Z inclusive.
         * @param nanoseconds - The non-negative fractions of a second at nanosecond
         *     resolution. Negative second values with fractions must still have
         *     non-negative nanoseconds values that count forward in time. Must be
         *     from 0 to 999,999,999 inclusive.
         */
        constructor(t, n) {
            if (this.seconds = t, this.nanoseconds = n, n < 0) throw new x(I, "Timestamp nanoseconds out of range: " + n);
            if (n >= 1e9) throw new x(I, "Timestamp nanoseconds out of range: " + n);
            if (t < -62135596800) throw new x(I, "Timestamp seconds out of range: " + t);
            // This will break in the year 10,000.
                    if (t >= 253402300800) throw new x(I, "Timestamp seconds out of range: " + t);
        }
        /**
         * Creates a new timestamp with the current date, with millisecond precision.
         *
         * @returns a new timestamp representing the current date.
         */    static now() {
            return lt.fromMillis(Date.now());
        }
        /**
         * Creates a new timestamp from the given date.
         *
         * @param date - The date to initialize the `Timestamp` from.
         * @returns A new `Timestamp` representing the same point in time as the given
         *     date.
         */    static fromDate(t) {
            return lt.fromMillis(t.getTime());
        }
        /**
         * Creates a new timestamp from the given number of milliseconds.
         *
         * @param milliseconds - Number of milliseconds since Unix epoch
         *     1970-01-01T00:00:00Z.
         * @returns A new `Timestamp` representing the same point in time as the given
         *     number of milliseconds.
         */    static fromMillis(t) {
            const n = Math.floor(t / 1e3);
            return new lt(n, 1e6 * (t - 1e3 * n));
        }
        /**
         * Converts a `Timestamp` to a JavaScript `Date` object. This conversion causes
         * a loss of precision since `Date` objects only support millisecond precision.
         *
         * @returns JavaScript `Date` object representing the same point in time as
         *     this `Timestamp`, with millisecond precision.
         */    toDate() {
            return new Date(this.toMillis());
        }
        /**
         * Converts a `Timestamp` to a numeric timestamp (in milliseconds since
         * epoch). This operation causes a loss of precision.
         *
         * @returns The point in time corresponding to this timestamp, represented as
         *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.
         */    toMillis() {
            return 1e3 * this.seconds + this.nanoseconds / 1e6;
        }
        _t(t) {
            return this.seconds === t.seconds ? at(this.nanoseconds, t.nanoseconds) : at(this.seconds, t.seconds);
        }
        /**
         * Returns true if this `Timestamp` is equal to the provided one.
         *
         * @param other - The `Timestamp` to compare against.
         * @returns true if this `Timestamp` is equal to the provided one.
         */    isEqual(t) {
            return t.seconds === this.seconds && t.nanoseconds === this.nanoseconds;
        }
        toString() {
            return "Timestamp(seconds=" + this.seconds + ", nanoseconds=" + this.nanoseconds + ")";
        }
        toJSON() {
            return {
                seconds: this.seconds,
                nanoseconds: this.nanoseconds
            };
        }
        /**
         * Converts this object to a primitive string, which allows Timestamp objects to be compared
         * using the `>`, `<=`, `>=` and `>` operators.
         */    valueOf() {
            // This method returns a string of the form <seconds>.<nanoseconds> where <seconds> is
            // translated to have a non-negative value and both <seconds> and <nanoseconds> are left-padded
            // with zeroes to be a consistent length. Strings with this format then have a lexiographical
            // ordering that matches the expected ordering. The <seconds> translation is done to avoid
            // having a leading negative sign (i.e. a leading '-' character) in its string representation,
            // which would affect its lexiographical ordering.
            const t = this.seconds - -62135596800;
            // Note: Up to 12 decimal digits are required to represent all valid 'seconds' values.
                    return String(t).padStart(12, "0") + "." + String(this.nanoseconds).padStart(9, "0");
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A version of a document in Firestore. This corresponds to the version
     * timestamp, such as update_time or read_time.
     */ class ft {
        constructor(t) {
            this.timestamp = t;
        }
        static wt(t) {
            return new ft(t);
        }
        static min() {
            return new ft(new lt(0, 0));
        }
        yt(t) {
            return this.timestamp._t(t.timestamp);
        }
        isEqual(t) {
            return this.timestamp.isEqual(t.timestamp);
        }
        /** Returns a number representation of the version for use in spec tests. */    Et() {
            // Convert to microseconds.
            return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;
        }
        toString() {
            return "SnapshotVersion(" + this.timestamp.toString() + ")";
        }
        It() {
            return this.timestamp;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ function dt(t) {
        let n = 0;
        for (const e in t) Object.prototype.hasOwnProperty.call(t, e) && n++;
        return n;
    }

    function _t(t, n) {
        for (const e in t) Object.prototype.hasOwnProperty.call(t, e) && n(e, t[e]);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provides a set of fields that can be used to partially patch a document.
     * FieldMask is used in conjunction with ObjectValue.
     * Examples:
     *   foo - Overwrites foo entirely with the provided value. If foo is not
     *         present in the companion ObjectValue, the field is deleted.
     *   foo.bar - Overwrites only the field bar of the object foo.
     *             If foo is not an object, foo is replaced with an object
     *             containing foo
     */
    class wt {
        constructor(t) {
            this.fields = t, 
            // TODO(dimond): validation of FieldMask
            // Sort the field mask to support `FieldMask.isEqual()` and assert below.
            t.sort(W.D);
        }
        /**
         * Verifies that `fieldPath` is included by at least one field in this field
         * mask.
         *
         * This is an O(n) operation, where `n` is the size of the field mask.
         */    Tt(t) {
            for (const n of this.fields) if (n.U(t)) return !0;
            return !1;
        }
        isEqual(t) {
            return ht(this.fields, t.fields, ((t, n) => t.isEqual(n)));
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Converts a Base64 encoded string to a binary string. */
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Immutable class that represents a "proto" byte string.
     *
     * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when
     * sent on the wire. This class abstracts away this differentiation by holding
     * the proto byte string in a common class that must be converted into a string
     * before being sent as a proto.
     */
    class mt {
        constructor(t) {
            this.At = t;
        }
        static fromBase64String(t) {
            const n = atob(t);
            return new mt(n);
        }
        static fromUint8Array(t) {
            const n = 
            /**
     * Helper function to convert an Uint8array to a binary string.
     */
            function(t) {
                let n = "";
                for (let e = 0; e < t.length; ++e) n += String.fromCharCode(t[e]);
                return n;
            }
            /**
     * Helper function to convert a binary string to an Uint8Array.
     */ (t);
            return new mt(n);
        }
        toBase64() {
            return t = this.At, btoa(t);
            /** Converts a binary string to a Base64 encoded string. */
            var t;
        }
        toUint8Array() {
            return function(t) {
                const n = new Uint8Array(t.length);
                for (let e = 0; e < t.length; e++) n[e] = t.charCodeAt(e);
                return n;
            }
            /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
            // A RegExp matching ISO 8601 UTC timestamps with optional fraction.
            (this.At);
        }
        Pt() {
            return 2 * this.At.length;
        }
        yt(t) {
            return at(this.At, t.At);
        }
        isEqual(t) {
            return this.At === t.At;
        }
    }

    mt.Rt = new mt("");

    const pt = new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);

    /**
     * Converts the possible Proto values for a timestamp value into a "seconds and
     * nanos" representation.
     */ function yt(t) {
        // The json interface (for the browser) will return an iso timestamp string,
        // while the proto js library (for node) will return a
        // google.protobuf.Timestamp instance.
        if (w(!!t), "string" == typeof t) {
            // The date string can have higher precision (nanos) than the Date class
            // (millis), so we do some custom parsing here.
            // Parse the nanos right out of the string.
            let n = 0;
            const e = pt.exec(t);
            if (w(!!e), e[1]) {
                // Pad the fraction out to 9 digits (nanos).
                let t = e[1];
                t = (t + "000000000").substr(0, 9), n = Number(t);
            }
            // Parse the date to get the seconds.
                    const s = new Date(t);
            return {
                seconds: Math.floor(s.getTime() / 1e3),
                nanos: n
            };
        }
        return {
            seconds: Et(t.seconds),
            nanos: Et(t.nanos)
        };
    }

    /**
     * Converts the possible Proto types for numbers into a JavaScript number.
     * Returns 0 if the value is not numeric.
     */ function Et(t) {
        // TODO(bjornick): Handle int64 greater than 53 bits.
        return "number" == typeof t ? t : "string" == typeof t ? Number(t) : 0;
    }

    /** Converts the possible Proto types for Blobs into a ByteString. */ function It(t) {
        return "string" == typeof t ? mt.fromBase64String(t) : mt.fromUint8Array(t);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Represents a locally-applied ServerTimestamp.
     *
     * Server Timestamps are backed by MapValues that contain an internal field
     * `__type__` with a value of `server_timestamp`. The previous value and local
     * write time are stored in its `__previous_value__` and `__local_write_time__`
     * fields respectively.
     *
     * Notes:
     * - ServerTimestampValue instances are created as the result of applying a
     *   transform. They can only exist in the local view of a document. Therefore
     *   they do not need to be parsed or serialized.
     * - When evaluated locally (e.g. for snapshot.data()), they by default
     *   evaluate to `null`. This behavior can be configured by passing custom
     *   FieldValueOptions to value().
     * - With respect to other ServerTimestampValues, they sort by their
     *   localWriteTime.
     */ function Tt(t) {
        var n, e;
        return "server_timestamp" === (null === (e = ((null === (n = null == t ? void 0 : t.mapValue) || void 0 === n ? void 0 : n.fields) || {}).__type__) || void 0 === e ? void 0 : e.stringValue);
    }

    /**
     * Returns the value of the field before this ServerTimestamp was set.
     *
     * Preserving the previous values allows the user to display the last resoled
     * value until the backend responds with the timestamp.
     */ function At(t) {
        const n = t.mapValue.fields.__previous_value__;
        return Tt(n) ? At(n) : n;
    }

    /**
     * Returns the local time at which this timestamp was first set.
     */ function Pt(t) {
        const n = yt(t.mapValue.fields.__local_write_time__.timestampValue);
        return new lt(n.seconds, n.nanos);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Extracts the backend's type order for the provided value. */ function Rt(t) {
        return "nullValue" in t ? 0 /* NullValue */ : "booleanValue" in t ? 1 /* BooleanValue */ : "integerValue" in t || "doubleValue" in t ? 2 /* NumberValue */ : "timestampValue" in t ? 3 /* TimestampValue */ : "stringValue" in t ? 5 /* StringValue */ : "bytesValue" in t ? 6 /* BlobValue */ : "referenceValue" in t ? 7 /* RefValue */ : "geoPointValue" in t ? 8 /* GeoPointValue */ : "arrayValue" in t ? 9 /* ArrayValue */ : "mapValue" in t ? Tt(t) ? 4 /* ServerTimestampValue */ : 10 /* ObjectValue */ : _();
    }

    /** Tests `left` and `right` for equality based on the backend semantics. */ function Vt(t, n) {
        const e = Rt(t);
        if (e !== Rt(n)) return !1;
        switch (e) {
          case 0 /* NullValue */ :
            return !0;

          case 1 /* BooleanValue */ :
            return t.booleanValue === n.booleanValue;

          case 4 /* ServerTimestampValue */ :
            return Pt(t).isEqual(Pt(n));

          case 3 /* TimestampValue */ :
            return function(t, n) {
                if ("string" == typeof t.timestampValue && "string" == typeof n.timestampValue && t.timestampValue.length === n.timestampValue.length) 
                // Use string equality for ISO 8601 timestamps
                return t.timestampValue === n.timestampValue;
                const e = yt(t.timestampValue), s = yt(n.timestampValue);
                return e.seconds === s.seconds && e.nanos === s.nanos;
            }(t, n);

          case 5 /* StringValue */ :
            return t.stringValue === n.stringValue;

          case 6 /* BlobValue */ :
            return function(t, n) {
                return It(t.bytesValue).isEqual(It(n.bytesValue));
            }(t, n);

          case 7 /* RefValue */ :
            return t.referenceValue === n.referenceValue;

          case 8 /* GeoPointValue */ :
            return function(t, n) {
                return Et(t.geoPointValue.latitude) === Et(n.geoPointValue.latitude) && Et(t.geoPointValue.longitude) === Et(n.geoPointValue.longitude);
            }(t, n);

          case 2 /* NumberValue */ :
            return function(t, n) {
                if ("integerValue" in t && "integerValue" in n) return Et(t.integerValue) === Et(n.integerValue);
                if ("doubleValue" in t && "doubleValue" in n) {
                    const e = Et(t.doubleValue), s = Et(n.doubleValue);
                    return e === s ? tt(e) === tt(s) : isNaN(e) && isNaN(s);
                }
                return !1;
            }(t, n);

          case 9 /* ArrayValue */ :
            return ht(t.arrayValue.values || [], n.arrayValue.values || [], Vt);

          case 10 /* ObjectValue */ :
            return function(t, n) {
                const e = t.mapValue.fields || {}, s = n.mapValue.fields || {};
                if (dt(e) !== dt(s)) return !1;
                for (const t in e) if (e.hasOwnProperty(t) && (void 0 === s[t] || !Vt(e[t], s[t]))) return !1;
                return !0;
            }
            /** Returns true if the ArrayValue contains the specified element. */ (t, n);

          default:
            return _();
        }
    }

    function gt(t, n) {
        return void 0 !== (t.values || []).find((t => Vt(t, n)));
    }

    function bt(t, n) {
        const e = Rt(t), s = Rt(n);
        if (e !== s) return at(e, s);
        switch (e) {
          case 0 /* NullValue */ :
            return 0;

          case 1 /* BooleanValue */ :
            return at(t.booleanValue, n.booleanValue);

          case 2 /* NumberValue */ :
            return function(t, n) {
                const e = Et(t.integerValue || t.doubleValue), s = Et(n.integerValue || n.doubleValue);
                return e < s ? -1 : e > s ? 1 : e === s ? 0 : 
                // one or both are NaN.
                isNaN(e) ? isNaN(s) ? 0 : -1 : 1;
            }(t, n);

          case 3 /* TimestampValue */ :
            return vt(t.timestampValue, n.timestampValue);

          case 4 /* ServerTimestampValue */ :
            return vt(Pt(t), Pt(n));

          case 5 /* StringValue */ :
            return at(t.stringValue, n.stringValue);

          case 6 /* BlobValue */ :
            return function(t, n) {
                const e = It(t), s = It(n);
                return e.yt(s);
            }(t.bytesValue, n.bytesValue);

          case 7 /* RefValue */ :
            return function(t, n) {
                const e = t.split("/"), s = n.split("/");
                for (let t = 0; t < e.length && t < s.length; t++) {
                    const n = at(e[t], s[t]);
                    if (0 !== n) return n;
                }
                return at(e.length, s.length);
            }(t.referenceValue, n.referenceValue);

          case 8 /* GeoPointValue */ :
            return function(t, n) {
                const e = at(Et(t.latitude), Et(n.latitude));
                if (0 !== e) return e;
                return at(Et(t.longitude), Et(n.longitude));
            }(t.geoPointValue, n.geoPointValue);

          case 9 /* ArrayValue */ :
            return function(t, n) {
                const e = t.values || [], s = n.values || [];
                for (let t = 0; t < e.length && t < s.length; ++t) {
                    const n = bt(e[t], s[t]);
                    if (n) return n;
                }
                return at(e.length, s.length);
            }(t.arrayValue, n.arrayValue);

          case 10 /* ObjectValue */ :
            return function(t, n) {
                const e = t.fields || {}, s = Object.keys(e), r = n.fields || {}, i = Object.keys(r);
                // Even though MapValues are likely sorted correctly based on their insertion
                // order (e.g. when received from the backend), local modifications can bring
                // elements out of order. We need to re-sort the elements to ensure that
                // canonical IDs are independent of insertion order.
                s.sort(), i.sort();
                for (let t = 0; t < s.length && t < i.length; ++t) {
                    const n = at(s[t], i[t]);
                    if (0 !== n) return n;
                    const o = bt(e[s[t]], r[i[t]]);
                    if (0 !== o) return o;
                }
                return at(s.length, i.length);
            }
            /** Returns a reference value for the provided database and key. */ (t.mapValue, n.mapValue);

          default:
            throw _();
        }
    }

    function vt(t, n) {
        if ("string" == typeof t && "string" == typeof n && t.length === n.length) return at(t, n);
        const e = yt(t), s = yt(n), r = at(e.seconds, s.seconds);
        return 0 !== r ? r : at(e.nanos, s.nanos);
    }

    function Nt(t, n) {
        return {
            referenceValue: `projects/${t.projectId}/databases/${t.database}/documents/${n.path.B()}`
        };
    }

    /** Returns true if `value` is an ArrayValue. */ function $t(t) {
        return !!t && "arrayValue" in t;
    }

    /** Returns true if `value` is a NullValue. */ function Dt(t) {
        return !!t && "nullValue" in t;
    }

    /** Returns true if `value` is NaN. */ function Ft(t) {
        return !!t && "doubleValue" in t && isNaN(Number(t.doubleValue));
    }

    /** Returns true if `value` is a MapValue. */ function St(t) {
        return !!t && "mapValue" in t;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An ObjectValue represents a MapValue in the Firestore Proto and offers the
     * ability to add and remove fields (via the ObjectValueBuilder).
     */ class xt {
        constructor(t) {
            this.proto = t;
        }
        static empty() {
            return new xt({
                mapValue: {}
            });
        }
        /**
         * Returns the value at the given path or null.
         *
         * @param path - the path to search
         * @returns The value at the path or if there it doesn't exist.
         */    field(t) {
            if (t.L()) return this.proto;
            {
                let n = this.proto;
                for (let e = 0; e < t.length - 1; ++e) {
                    if (!n.mapValue.fields) return null;
                    if (n = n.mapValue.fields[t.get(e)], !St(n)) return null;
                }
                return n = (n.mapValue.fields || {})[t.C()], n || null;
            }
        }
        isEqual(t) {
            return Vt(this.proto, t.proto);
        }
    }

    /**
     * An ObjectValueBuilder provides APIs to set and delete fields from an
     * ObjectValue.
     */ class qt {
        /**
         * @param baseObject - The object to mutate.
         */
        constructor(t = xt.empty()) {
            this.Vt = t, 
            /** A map that contains the accumulated changes in this builder. */
            this.gt = new Map;
        }
        /**
         * Sets the field to the provided value.
         *
         * @param path - The field path to set.
         * @param value - The value to set.
         * @returns The current Builder instance.
         */    set(t, n) {
            return this.bt(t, n), this;
        }
        /**
         * Removes the field at the specified path. If there is no field at the
         * specified path, nothing is changed.
         *
         * @param path - The field path to remove.
         * @returns The current Builder instance.
         */    delete(t) {
            return this.bt(t, null), this;
        }
        /**
         * Adds `value` to the overlay map at `path`. Creates nested map entries if
         * needed.
         */    bt(t, n) {
            let e = this.gt;
            for (let n = 0; n < t.length - 1; ++n) {
                const s = t.get(n);
                let r = e.get(s);
                r instanceof Map ? 
                // Re-use a previously created map
                e = r : r && 10 /* ObjectValue */ === Rt(r) ? (
                // Convert the existing Protobuf MapValue into a map
                r = new Map(Object.entries(r.mapValue.fields || {})), e.set(s, r), e = r) : (
                // Create an empty map to represent the current nesting level
                r = new Map, e.set(s, r), e = r);
            }
            e.set(t.C(), n);
        }
        /** Returns an ObjectValue with all mutations applied. */    vt() {
            const t = this.Nt(W.W(), this.gt);
            return null != t ? new xt(t) : this.Vt;
        }
        /**
         * Applies any overlays from `currentOverlays` that exist at `currentPath`
         * and returns the merged data at `currentPath` (or null if there were no
         * changes).
         *
         * @param currentPath - The path at the current nesting level. Can be set to
         * FieldValue.emptyPath() to represent the root.
         * @param currentOverlays - The overlays at the current nesting level in the
         * same format as `overlayMap`.
         * @returns The merged data at `currentPath` or null if no modifications
         * were applied.
         */    Nt(t, n) {
            let e = !1;
            const s = this.Vt.field(t), r = St(s) ? // If there is already data at the current path, base our
            Object.assign({}, s.mapValue.fields) : {};
            return n.forEach(((n, s) => {
                if (n instanceof Map) {
                    const i = this.Nt(t.child(s), n);
                    null != i && (r[s] = i, e = !0);
                } else null !== n ? (r[s] = n, e = !0) : r.hasOwnProperty(s) && (delete r[s], e = !0);
            })), e ? {
                mapValue: {
                    fields: r
                }
            } : null;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * The result of a lookup for a given path may be an existing document or a
     * marker that this document does not exist at a given version.
     */ class Ot {
        constructor(t, n) {
            this.key = t, this.version = n;
        }
    }

    /**
     * Represents a document in Firestore with a key, version, data and whether the
     * data has local mutations applied to it.
     */ class Ct extends Ot {
        constructor(t, n, e, s) {
            super(t, n), this.$t = e, this.Dt = !!s.Dt, this.hasCommittedMutations = !!s.hasCommittedMutations;
        }
        field(t) {
            return this.$t.field(t);
        }
        data() {
            return this.$t;
        }
        Ft() {
            return this.$t.proto;
        }
        isEqual(t) {
            return t instanceof Ct && this.key.isEqual(t.key) && this.version.isEqual(t.version) && this.Dt === t.Dt && this.hasCommittedMutations === t.hasCommittedMutations && this.$t.isEqual(t.$t);
        }
        toString() {
            return `Document(${this.key}, ${this.version}, ${this.$t.toString()}, {hasLocalMutations: ${this.Dt}}), {hasCommittedMutations: ${this.hasCommittedMutations}})`;
        }
        get hasPendingWrites() {
            return this.Dt || this.hasCommittedMutations;
        }
    }

    /**
     * A class representing a deleted document.
     * Version is set to 0 if we don't point to any specific time, otherwise it
     * denotes time we know it didn't exist at.
     */ class Lt extends Ot {
        constructor(t, n, e) {
            super(t, n), this.hasCommittedMutations = !(!e || !e.hasCommittedMutations);
        }
        toString() {
            return `NoDocument(${this.key}, ${this.version})`;
        }
        get hasPendingWrites() {
            return this.hasCommittedMutations;
        }
        isEqual(t) {
            return t instanceof Lt && t.hasCommittedMutations === this.hasCommittedMutations && t.version.isEqual(this.version) && t.key.isEqual(this.key);
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // Visible for testing
    class Ut {
        constructor(t, n = null, e = [], s = [], r = null, i = null, o = null) {
            this.path = t, this.collectionGroup = n, this.orderBy = e, this.filters = s, this.limit = r, 
            this.startAt = i, this.endAt = o, this.St = null;
        }
    }

    /**
     * Initializes a Target with a path and optional additional query constraints.
     * Path must currently be empty if this is a collection group query.
     *
     * NOTE: you should always construct `Target` from `Query.toTarget` instead of
     * using this factory method, because `Query` provides an implicit `orderBy`
     * property.
     */ function jt(t, n = null, e = [], s = [], r = null, i = null, o = null) {
        return new Ut(t, n, e, s, r, i, o);
    }

    class Mt extends class {} {
        constructor(t, n, e) {
            super(), this.field = t, this.op = n, this.value = e;
        }
        /**
         * Creates a filter based on the provided arguments.
         */    static create(t, n, e) {
            return t.Y() ? "in" /* IN */ === n || "not-in" /* NOT_IN */ === n ? this.xt(t, n, e) : new Bt(t, n, e) : "array-contains" /* ARRAY_CONTAINS */ === n ? new zt(t, e) : "in" /* IN */ === n ? new Gt(t, e) : "not-in" /* NOT_IN */ === n ? new Yt(t, e) : "array-contains-any" /* ARRAY_CONTAINS_ANY */ === n ? new Ht(t, e) : new Mt(t, n, e);
        }
        static xt(t, n, e) {
            return "in" /* IN */ === n ? new kt(t, e) : new Qt(t, e);
        }
        matches(t) {
            const n = t.field(this.field);
            // Types do not have to match in NOT_EQUAL filters.
                    return "!=" /* NOT_EQUAL */ === this.op ? null !== n && this.qt(bt(n, this.value)) : null !== n && Rt(this.value) === Rt(n) && this.qt(bt(n, this.value));
            // Only compare types with matching backend order (such as double and int).
            }
        qt(t) {
            switch (this.op) {
              case "<" /* LESS_THAN */ :
                return t < 0;

              case "<=" /* LESS_THAN_OR_EQUAL */ :
                return t <= 0;

              case "==" /* EQUAL */ :
                return 0 === t;

              case "!=" /* NOT_EQUAL */ :
                return 0 !== t;

              case ">" /* GREATER_THAN */ :
                return t > 0;

              case ">=" /* GREATER_THAN_OR_EQUAL */ :
                return t >= 0;

              default:
                return _();
            }
        }
        Ot() {
            return [ "<" /* LESS_THAN */ , "<=" /* LESS_THAN_OR_EQUAL */ , ">" /* GREATER_THAN */ , ">=" /* GREATER_THAN_OR_EQUAL */ , "!=" /* NOT_EQUAL */ , "not-in" /* NOT_IN */ ].indexOf(this.op) >= 0;
        }
    }

    /** Filter that matches on key fields (i.e. '__name__'). */
    class Bt extends Mt {
        constructor(t, n, e) {
            super(t, n, e), this.key = z.Z(e.referenceValue);
        }
        matches(t) {
            const n = z.D(t.key, this.key);
            return this.qt(n);
        }
    }

    /** Filter that matches on key fields within an array. */ class kt extends Mt {
        constructor(t, n) {
            super(t, "in" /* IN */ , n), this.keys = Wt("in" /* IN */ , n);
        }
        matches(t) {
            return this.keys.some((n => n.isEqual(t.key)));
        }
    }

    /** Filter that matches on key fields not present within an array. */ class Qt extends Mt {
        constructor(t, n) {
            super(t, "not-in" /* NOT_IN */ , n), this.keys = Wt("not-in" /* NOT_IN */ , n);
        }
        matches(t) {
            return !this.keys.some((n => n.isEqual(t.key)));
        }
    }

    function Wt(t, n) {
        var e;
        return ((null === (e = n.arrayValue) || void 0 === e ? void 0 : e.values) || []).map((t => z.Z(t.referenceValue)));
    }

    /** A Filter that implements the array-contains operator. */ class zt extends Mt {
        constructor(t, n) {
            super(t, "array-contains" /* ARRAY_CONTAINS */ , n);
        }
        matches(t) {
            const n = t.field(this.field);
            return $t(n) && gt(n.arrayValue, this.value);
        }
    }

    /** A Filter that implements the IN operator. */ class Gt extends Mt {
        constructor(t, n) {
            super(t, "in" /* IN */ , n);
        }
        matches(t) {
            const n = t.field(this.field);
            return null !== n && gt(this.value.arrayValue, n);
        }
    }

    /** A Filter that implements the not-in operator. */ class Yt extends Mt {
        constructor(t, n) {
            super(t, "not-in" /* NOT_IN */ , n);
        }
        matches(t) {
            if (gt(this.value.arrayValue, {
                nullValue: "NULL_VALUE"
            })) return !1;
            const n = t.field(this.field);
            return null !== n && !gt(this.value.arrayValue, n);
        }
    }

    /** A Filter that implements the array-contains-any operator. */ class Ht extends Mt {
        constructor(t, n) {
            super(t, "array-contains-any" /* ARRAY_CONTAINS_ANY */ , n);
        }
        matches(t) {
            const n = t.field(this.field);
            return !(!$t(n) || !n.arrayValue.values) && n.arrayValue.values.some((t => gt(this.value.arrayValue, t)));
        }
    }

    /**
     * Represents a bound of a query.
     *
     * The bound is specified with the given components representing a position and
     * whether it's just before or just after the position (relative to whatever the
     * query order is).
     *
     * The position represents a logical index position for a query. It's a prefix
     * of values for the (potentially implicit) order by clauses of a query.
     *
     * Bound provides a function to determine whether a document comes before or
     * after a bound. This is influenced by whether the position is just before or
     * just after the provided values.
     */ class Kt {
        constructor(t, n) {
            this.position = t, this.before = n;
        }
    }

    /**
     * An ordering on a field, in some Direction. Direction defaults to ASCENDING.
     */ class Jt {
        constructor(t, n = "asc" /* ASCENDING */) {
            this.field = t, this.dir = n;
        }
    }

    function Zt(t, n) {
        return t.dir === n.dir && t.field.isEqual(n.field);
    }

    function Xt(t, n) {
        if (null === t) return null === n;
        if (null === n) return !1;
        if (t.before !== n.before || t.position.length !== n.position.length) return !1;
        for (let e = 0; e < t.position.length; e++) {
            if (!Vt(t.position[e], n.position[e])) return !1;
        }
        return !0;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Query encapsulates all the query attributes we support in the SDK. It can
     * be run against the LocalStore, as well as be converted to a `Target` to
     * query the RemoteStore results.
     *
     * Visible for testing.
     */ class tn {
        /**
         * Initializes a Query with a path and optional additional query constraints.
         * Path must currently be empty if this is a collection group query.
         */
        constructor(t, n = null, e = [], s = [], r = null, i = "F" /* First */ , o = null, u = null) {
            this.path = t, this.collectionGroup = n, this.Ct = e, this.filters = s, this.limit = r, 
            this.limitType = i, this.startAt = o, this.endAt = u, this.Lt = null, 
            // The corresponding `Target` of this `Query` instance.
            this.Ut = null, this.startAt, this.endAt;
        }
    }

    /** Creates a new Query for a query that matches all documents at `path` */ function nn(t) {
        return !X(t.limit) && "L" /* Last */ === t.limitType;
    }

    function en(t) {
        return t.Ct.length > 0 ? t.Ct[0].field : null;
    }

    function sn(t) {
        for (const n of t.filters) if (n.Ot()) return n.field;
        return null;
    }

    /**
     * Checks if any of the provided Operators are included in the query and
     * returns the first one that is, or null if none are.
     */
    /**
     * Returns whether the query matches a collection group rather than a specific
     * collection.
     */
    function rn(t) {
        return null !== t.collectionGroup;
    }

    /**
     * Returns the implicit order by constraint that is used to execute the Query,
     * which can be different from the order by constraints the user provided (e.g.
     * the SDK and backend always orders by `__name__`).
     */ function on(t) {
        const n = m(t);
        if (null === n.Lt) {
            n.Lt = [];
            const t = sn(n), e = en(n);
            if (null !== t && null === e) 
            // In order to implicitly add key ordering, we must also add the
            // inequality filter field for it to be a valid query.
            // Note that the default inequality field and key ordering is ascending.
            t.Y() || n.Lt.push(new Jt(t)), n.Lt.push(new Jt(W.H(), "asc" /* ASCENDING */)); else {
                let t = !1;
                for (const e of n.Ct) n.Lt.push(e), e.field.Y() && (t = !0);
                if (!t) {
                    // The order of the implicit key ordering always matches the last
                    // explicit order by
                    const t = n.Ct.length > 0 ? n.Ct[n.Ct.length - 1].dir : "asc" /* ASCENDING */;
                    n.Lt.push(new Jt(W.H(), t));
                }
            }
        }
        return n.Lt;
    }

    /**
     * Converts this `Query` instance to it's corresponding `Target` representation.
     */ function un(t) {
        const n = m(t);
        if (!n.Ut) if ("F" /* First */ === n.limitType) n.Ut = jt(n.path, n.collectionGroup, on(n), n.filters, n.limit, n.startAt, n.endAt); else {
            // Flip the orderBy directions since we want the last results
            const t = [];
            for (const e of on(n)) {
                const n = "desc" /* DESCENDING */ === e.dir ? "asc" /* ASCENDING */ : "desc" /* DESCENDING */;
                t.push(new Jt(e.field, n));
            }
            // We need to swap the cursors to match the now-flipped query ordering.
                    const e = n.endAt ? new Kt(n.endAt.position, !n.endAt.before) : null, s = n.startAt ? new Kt(n.startAt.position, !n.startAt.before) : null;
            // Now return as a LimitType.First query.
            n.Ut = jt(n.path, n.collectionGroup, t, n.filters, n.limit, e, s);
        }
        return n.Ut;
    }

    function cn(t, n) {
        return function(t, n) {
            if (t.limit !== n.limit) return !1;
            if (t.orderBy.length !== n.orderBy.length) return !1;
            for (let e = 0; e < t.orderBy.length; e++) if (!Zt(t.orderBy[e], n.orderBy[e])) return !1;
            if (t.filters.length !== n.filters.length) return !1;
            for (let r = 0; r < t.filters.length; r++) if (e = t.filters[r], s = n.filters[r], 
            e.op !== s.op || !e.field.isEqual(s.field) || !Vt(e.value, s.value)) return !1;
            var e, s;
            return t.collectionGroup === n.collectionGroup && !!t.path.isEqual(n.path) && !!Xt(t.startAt, n.startAt) && Xt(t.endAt, n.endAt);
        }(un(t), un(n)) && t.limitType === n.limitType;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns an DoubleValue for `value` that is encoded based the serializer's
     * `useProto3Json` setting.
     */
    /**
     * Returns a value for a number that's appropriate to put into a proto.
     * The return value is an IntegerValue if it can safely represent the value,
     * otherwise a DoubleValue is returned.
     */
    function an(t, n) {
        return function(t) {
            return "number" == typeof t && Number.isInteger(t) && !tt(t) && t <= Number.MAX_SAFE_INTEGER && t >= Number.MIN_SAFE_INTEGER;
        }(n) ? 
        /**
     * Returns an IntegerValue for `value`.
     */
        function(t) {
            return {
                integerValue: "" + t
            };
        }(n) : function(t, n) {
            if (t.jt) {
                if (isNaN(n)) return {
                    doubleValue: "NaN"
                };
                if (n === 1 / 0) return {
                    doubleValue: "Infinity"
                };
                if (n === -1 / 0) return {
                    doubleValue: "-Infinity"
                };
            }
            return {
                doubleValue: tt(n) ? "-0" : n
            };
        }(t, n);
    }

    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Used to represent a field transform on a mutation. */ class hn {
        constructor() {
            // Make sure that the structural type of `TransformOperation` is unique.
            // See https://github.com/microsoft/TypeScript/issues/5451
            this.Mt = void 0;
        }
    }

    /** Transforms a value into a server-generated timestamp. */ class ln extends hn {}

    /** Transforms an array value via a union operation. */ class fn extends hn {
        constructor(t) {
            super(), this.elements = t;
        }
    }

    /** Transforms an array value via a remove operation. */ class dn extends hn {
        constructor(t) {
            super(), this.elements = t;
        }
    }

    /**
     * Implements the backend semantics for locally computed NUMERIC_ADD (increment)
     * transforms. Converts all field values to integers or doubles, but unlike the
     * backend does not cap integer values at 2^63. Instead, JavaScript number
     * arithmetic is used and precision loss can occur for values greater than 2^53.
     */ class _n extends hn {
        constructor(t, n) {
            super(), this.Bt = t, this.kt = n;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** A field path and the TransformOperation to perform upon it. */ class wn {
        constructor(t, n) {
            this.field = t, this.transform = n;
        }
    }

    /**
     * Encodes a precondition for a mutation. This follows the model that the
     * backend accepts with the special case of an explicit "empty" precondition
     * (meaning no precondition).
     */ class mn {
        constructor(t, n) {
            this.updateTime = t, this.exists = n;
        }
        /** Creates a new empty Precondition. */    static Qt() {
            return new mn;
        }
        /** Creates a new Precondition with an exists flag. */    static exists(t) {
            return new mn(void 0, t);
        }
        /** Creates a new Precondition based on a version a document exists at. */    static updateTime(t) {
            return new mn(t);
        }
        /** Returns whether this Precondition is empty. */    get Wt() {
            return void 0 === this.updateTime && void 0 === this.exists;
        }
        isEqual(t) {
            return this.exists === t.exists && (this.updateTime ? !!t.updateTime && this.updateTime.isEqual(t.updateTime) : !t.updateTime);
        }
    }

    /**
     * A mutation describes a self-contained change to a document. Mutations can
     * create, replace, delete, and update subsets of documents.
     *
     * Mutations not only act on the value of the document but also its version.
     *
     * For local mutations (mutations that haven't been committed yet), we preserve
     * the existing version for Set and Patch mutations. For Delete mutations, we
     * reset the version to 0.
     *
     * Here's the expected transition table.
     *
     * MUTATION           APPLIED TO            RESULTS IN
     *
     * SetMutation        Document(v3)          Document(v3)
     * SetMutation        NoDocument(v3)        Document(v0)
     * SetMutation        null                  Document(v0)
     * PatchMutation      Document(v3)          Document(v3)
     * PatchMutation      NoDocument(v3)        NoDocument(v3)
     * PatchMutation      null                  null
     * DeleteMutation     Document(v3)          NoDocument(v0)
     * DeleteMutation     NoDocument(v3)        NoDocument(v0)
     * DeleteMutation     null                  NoDocument(v0)
     *
     * For acknowledged mutations, we use the updateTime of the WriteResponse as
     * the resulting version for Set and Patch mutations. As deletes have no
     * explicit update time, we use the commitTime of the WriteResponse for
     * Delete mutations.
     *
     * If a mutation is acknowledged by the backend but fails the precondition check
     * locally, we return an `UnknownDocument` and rely on Watch to send us the
     * updated version.
     *
     * Field transforms are used only with Patch and Set Mutations. We use the
     * `updateTransforms` message to store transforms, rather than the `transforms`s
     * messages.
     *
     * ## Subclassing Notes
     *
     * Subclasses of Mutation need to implement applyToRemoteDocument() and
     * applyToLocalView() to implement the actual behavior of applying the mutation
     * to some source document.
     */ class pn {}

    /**
     * A mutation that creates or replaces the document at the given key with the
     * object value contents.
     */ class yn extends pn {
        constructor(t, n, e, s = []) {
            super(), this.key = t, this.value = n, this.zt = e, this.fieldTransforms = s, this.type = 0 /* Set */;
        }
    }

    /**
     * A mutation that modifies fields of the document at the given key with the
     * given values. The values are applied through a field mask:
     *
     *  * When a field is in both the mask and the values, the corresponding field
     *    is updated.
     *  * When a field is in neither the mask nor the values, the corresponding
     *    field is unmodified.
     *  * When a field is in the mask but not in the values, the corresponding field
     *    is deleted.
     *  * When a field is not in the mask but is in the values, the values map is
     *    ignored.
     */ class En extends pn {
        constructor(t, n, e, s, r = []) {
            super(), this.key = t, this.data = n, this.Gt = e, this.zt = s, this.fieldTransforms = r, 
            this.type = 1 /* Patch */;
        }
    }

    /** A mutation that deletes the document at the given key. */ class In extends pn {
        constructor(t, n) {
            super(), this.key = t, this.zt = n, this.type = 2 /* Delete */ , this.fieldTransforms = [];
        }
    }

    /**
     * A mutation that verifies the existence of the document at the given key with
     * the provided precondition.
     *
     * The `verify` operation is only used in Transactions, and this class serves
     * primarily to facilitate serialization into protos.
     */ class Tn extends pn {
        constructor(t, n) {
            super(), this.key = t, this.zt = n, this.type = 3 /* Verify */ , this.fieldTransforms = [];
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ const An = (() => {
        const t = {
            asc: "ASCENDING",
            desc: "DESCENDING"
        };
        return t;
    })(), Pn = (() => {
        const t = {
            "<": "LESS_THAN",
            "<=": "LESS_THAN_OR_EQUAL",
            ">": "GREATER_THAN",
            ">=": "GREATER_THAN_OR_EQUAL",
            "==": "EQUAL",
            "!=": "NOT_EQUAL",
            "array-contains": "ARRAY_CONTAINS",
            in: "IN",
            "not-in": "NOT_IN",
            "array-contains-any": "ARRAY_CONTAINS_ANY"
        };
        return t;
    })();

    /**
     * This class generates JsonObject values for the Datastore API suitable for
     * sending to either GRPC stub methods or via the JSON/HTTP REST API.
     *
     * The serializer supports both Protobuf.js and Proto3 JSON formats. By
     * setting `useProto3Json` to true, the serializer will use the Proto3 JSON
     * format.
     *
     * For a description of the Proto3 JSON format check
     * https://developers.google.com/protocol-buffers/docs/proto3#json
     *
     * TODO(klimt): We can remove the databaseId argument if we keep the full
     * resource name in documents.
     */
    class Rn {
        constructor(t, n) {
            this.g = t, this.jt = n;
        }
    }

    /**
     * Returns a value for a number (or null) that's appropriate to put into
     * a google.protobuf.Int32Value proto.
     * DO NOT USE THIS FOR ANYTHING ELSE.
     * This method cheats. It's typed as returning "number" because that's what
     * our generated proto interfaces say Int32Value must be. But GRPC actually
     * expects a { value: <number> } struct.
     */
    /**
     * Returns a value for a Date that's appropriate to put into a proto.
     */
    function Vn(t, n) {
        if (t.jt) {
            return `${new Date(1e3 * n.seconds).toISOString().replace(/\.\d*/, "").replace("Z", "")}.${("000000000" + n.nanoseconds).slice(-9)}Z`;
        }
        return {
            seconds: "" + n.seconds,
            nanos: n.nanoseconds
        };
    }

    /**
     * Returns a value for bytes that's appropriate to put in a proto.
     *
     * Visible for testing.
     */
    function gn(t, n) {
        return t.jt ? n.toBase64() : n.toUint8Array();
    }

    function bn(t, n) {
        return Vn(t, n.It());
    }

    function vn(t) {
        return w(!!t), ft.wt(function(t) {
            const n = yt(t);
            return new lt(n.seconds, n.nanos);
        }(t));
    }

    function Nn(t, n) {
        return function(t) {
            return new k([ "projects", t.projectId, "databases", t.database ]);
        }(t).child("documents").child(n).B();
    }

    function $n(t, n) {
        return Nn(t.g, n.path);
    }

    function Dn(t, n) {
        const e = function(t) {
            const n = k.k(t);
            return w(kn(n)), n;
        }(n);
        if (e.get(1) !== t.g.projectId) throw new x(I, "Tried to deserialize key from different project: " + e.get(1) + " vs " + t.g.projectId);
        if (e.get(3) !== t.g.database) throw new x(I, "Tried to deserialize key from different database: " + e.get(3) + " vs " + t.g.database);
        return new z((w((s = e).length > 4 && "documents" === s.get(4)), s.S(5)));
        var s;
        /** Creates a Document proto from key and fields (but no create/update time) */}

    function Fn(t, n) {
        return Nn(t.g, n);
    }

    function Sn(t) {
        return new k([ "projects", t.g.projectId, "databases", t.g.database ]).B();
    }

    function xn(t, n, e) {
        return {
            name: $n(t, n),
            fields: e.proto.mapValue.fields
        };
    }

    function qn(t, n) {
        return "found" in n ? function(t, n) {
            w(!!n.found), n.found.name, n.found.updateTime;
            const e = Dn(t, n.found.name), s = vn(n.found.updateTime), r = new xt({
                mapValue: {
                    fields: n.found.fields
                }
            });
            return new Ct(e, s, r, {});
        }(t, n) : "missing" in n ? function(t, n) {
            w(!!n.missing), w(!!n.readTime);
            const e = Dn(t, n.missing), s = vn(n.readTime);
            return new Lt(e, s);
        }(t, n) : _();
    }

    function On(t, n) {
        let e;
        if (n instanceof yn) e = {
            update: xn(t, n.key, n.value)
        }; else if (n instanceof In) e = {
            delete: $n(t, n.key)
        }; else if (n instanceof En) e = {
            update: xn(t, n.key, n.data),
            updateMask: Bn(n.Gt)
        }; else {
            if (!(n instanceof Tn)) return _();
            e = {
                verify: $n(t, n.key)
            };
        }
        return n.fieldTransforms.length > 0 && (e.updateTransforms = n.fieldTransforms.map((t => function(t, n) {
            const e = n.transform;
            if (e instanceof ln) return {
                fieldPath: n.field.B(),
                setToServerValue: "REQUEST_TIME"
            };
            if (e instanceof fn) return {
                fieldPath: n.field.B(),
                appendMissingElements: {
                    values: e.elements
                }
            };
            if (e instanceof dn) return {
                fieldPath: n.field.B(),
                removeAllFromArray: {
                    values: e.elements
                }
            };
            if (e instanceof _n) return {
                fieldPath: n.field.B(),
                increment: e.kt
            };
            throw _();
        }(0, t)))), n.zt.Wt || (e.currentDocument = function(t, n) {
            return void 0 !== n.updateTime ? {
                updateTime: bn(t, n.updateTime)
            } : void 0 !== n.exists ? {
                exists: n.exists
            } : _();
        }(t, n.zt)), e;
    }

    function Cn(t, n) {
        // Dissect the path into parent, collectionId, and optional key filter.
        const e = {
            structuredQuery: {}
        }, s = n.path;
        null !== n.collectionGroup ? (e.parent = Fn(t, s), e.structuredQuery.from = [ {
            collectionId: n.collectionGroup,
            allDescendants: !0
        } ]) : (e.parent = Fn(t, s.q()), e.structuredQuery.from = [ {
            collectionId: s.C()
        } ]);
        const r = function(t) {
            if (0 === t.length) return;
            const n = t.map((t => 
            // visible for testing
            function(t) {
                if ("==" /* EQUAL */ === t.op) {
                    if (Ft(t.value)) return {
                        unaryFilter: {
                            field: Mn(t.field),
                            op: "IS_NAN"
                        }
                    };
                    if (Dt(t.value)) return {
                        unaryFilter: {
                            field: Mn(t.field),
                            op: "IS_NULL"
                        }
                    };
                } else if ("!=" /* NOT_EQUAL */ === t.op) {
                    if (Ft(t.value)) return {
                        unaryFilter: {
                            field: Mn(t.field),
                            op: "IS_NOT_NAN"
                        }
                    };
                    if (Dt(t.value)) return {
                        unaryFilter: {
                            field: Mn(t.field),
                            op: "IS_NOT_NULL"
                        }
                    };
                }
                return {
                    fieldFilter: {
                        field: Mn(t.field),
                        op: jn(t.op),
                        value: t.value
                    }
                };
            }(t)));
            if (1 === n.length) return n[0];
            return {
                compositeFilter: {
                    op: "AND",
                    filters: n
                }
            };
        }(n.filters);
        r && (e.structuredQuery.where = r);
        const i = function(t) {
            if (0 === t.length) return;
            return t.map((t => 
            // visible for testing
            function(t) {
                return {
                    field: Mn(t.field),
                    direction: Un(t.dir)
                };
            }(t)));
        }(n.orderBy);
        i && (e.structuredQuery.orderBy = i);
        const o = function(t, n) {
            return t.jt || X(n) ? n : {
                value: n
            };
        }(t, n.limit);
        return null !== o && (e.structuredQuery.limit = o), n.startAt && (e.structuredQuery.startAt = Ln(n.startAt)), 
        n.endAt && (e.structuredQuery.endAt = Ln(n.endAt)), e;
    }

    function Ln(t) {
        return {
            before: t.before,
            values: t.position
        };
    }

    // visible for testing
    function Un(t) {
        return An[t];
    }

    // visible for testing
    function jn(t) {
        return Pn[t];
    }

    function Mn(t) {
        return {
            fieldPath: t.B()
        };
    }

    function Bn(t) {
        const n = [];
        return t.fields.forEach((t => n.push(t.B()))), {
            fieldPaths: n
        };
    }

    function kn(t) {
        // Resource names have at least 4 components (project ID, database ID)
        return t.length >= 4 && "projects" === t.get(0) && "databases" === t.get(2);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ function Qn(t) {
        return new Rn(t, /* useProto3Json= */ !0);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Verifies whether `e` is an IndexedDbTransactionError. */
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Represents an operation scheduled to be run in the future on an AsyncQueue.
     *
     * It is created via DelayedOperation.createAndSchedule().
     *
     * Supports cancellation (via cancel()) and early execution (via skipDelay()).
     *
     * Note: We implement `PromiseLike` instead of `Promise`, as the `Promise` type
     * in newer versions of TypeScript defines `finally`, which is not available in
     * IE.
     */
    class Wn {
        constructor(t, n, e, s, r) {
            this.Yt = t, this.Ht = n, this.Kt = e, this.op = s, this.Jt = r, this.Zt = new ot, 
            this.then = this.Zt.promise.then.bind(this.Zt.promise), 
            // It's normal for the deferred promise to be canceled (due to cancellation)
            // and so we attach a dummy catch callback to avoid
            // 'UnhandledPromiseRejectionWarning' log spam.
            this.Zt.promise.catch((t => {}));
        }
        /**
         * Creates and returns a DelayedOperation that has been scheduled to be
         * executed on the provided asyncQueue after the provided delayMs.
         *
         * @param asyncQueue - The queue to schedule the operation on.
         * @param id - A Timer ID identifying the type of operation this is.
         * @param delayMs - The delay (ms) before the operation should be scheduled.
         * @param op - The operation to run.
         * @param removalCallback - A callback to be called synchronously once the
         *   operation is executed or canceled, notifying the AsyncQueue to remove it
         *   from its delayedOperations list.
         *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and
         *   the DelayedOperation class public.
         */    static Xt(t, n, e, s, r) {
            const i = Date.now() + e, o = new Wn(t, n, i, s, r);
            return o.start(e), o;
        }
        /**
         * Starts the timer. This is called immediately after construction by
         * createAndSchedule().
         */    start(t) {
            this.tn = setTimeout((() => this.nn()), t);
        }
        /**
         * Queues the operation to run immediately (if it hasn't already been run or
         * canceled).
         */    en() {
            return this.nn();
        }
        /**
         * Cancels the operation if it hasn't already been executed or canceled. The
         * promise will be rejected.
         *
         * As long as the operation has not yet been run, calling cancel() provides a
         * guarantee that the operation will not be run.
         */    cancel(t) {
            null !== this.tn && (this.clearTimeout(), this.Zt.reject(new x(y, "Operation cancelled" + (t ? ": " + t : ""))));
        }
        nn() {
            this.Yt.sn((() => null !== this.tn ? (this.clearTimeout(), this.op().then((t => this.Zt.resolve(t)))) : Promise.resolve()));
        }
        clearTimeout() {
            null !== this.tn && (this.Jt(this), clearTimeout(this.tn), this.tn = null);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A helper for running delayed tasks following an exponential backoff curve
     * between attempts.
     *
     * Each delay is made up of a "base" delay which follows the exponential
     * backoff curve, and a +/- 50% "jitter" that is calculated and added to the
     * base delay. This prevents clients from accidentally synchronizing their
     * delays causing spikes of load to the backend.
     */
    class zn {
        constructor(
        /**
         * The AsyncQueue to run backoff operations on.
         */
        t, 
        /**
         * The ID to use when scheduling backoff operations on the AsyncQueue.
         */
        n, 
        /**
         * The initial delay (used as the base delay on the first retry attempt).
         * Note that jitter will still be applied, so the actual delay could be as
         * little as 0.5*initialDelayMs.
         */
        e = 1e3
        /**
         * The multiplier to use to determine the extended base delay after each
         * attempt.
         */ , s = 1.5
        /**
         * The maximum base delay after which no further backoff is performed.
         * Note that jitter will still be applied, so the actual delay could be as
         * much as 1.5*maxDelayMs.
         */ , r = 6e4) {
            this.rn = t, this.Ht = n, this.on = e, this.un = s, this.cn = r, this.an = 0, this.hn = null, 
            /** The last backoff attempt, as epoch milliseconds. */
            this.ln = Date.now(), this.reset();
        }
        /**
         * Resets the backoff delay.
         *
         * The very next backoffAndWait() will have no delay. If it is called again
         * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and
         * subsequent ones will increase according to the backoffFactor.
         */    reset() {
            this.an = 0;
        }
        /**
         * Resets the backoff delay to the maximum delay (e.g. for use after a
         * RESOURCE_EXHAUSTED error).
         */    fn() {
            this.an = this.cn;
        }
        /**
         * Returns a promise that resolves after currentDelayMs, and increases the
         * delay for any subsequent attempts. If there was a pending backoff operation
         * already, it will be canceled.
         */    dn(t) {
            // Cancel any pending backoff operation.
            this.cancel();
            // First schedule using the current base (which may be 0 and should be
            // honored as such).
            const n = Math.floor(this.an + this._n()), e = Math.max(0, Date.now() - this.ln), s = Math.max(0, n - e);
            // Guard against lastAttemptTime being in the future due to a clock change.
                    s > 0 && h("ExponentialBackoff", `Backing off for ${s} ms (base delay: ${this.an} ms, delay with jitter: ${n} ms, last attempt: ${e} ms ago)`), 
            this.hn = this.rn.wn(this.Ht, s, (() => (this.ln = Date.now(), t()))), 
            // Apply backoff factor to determine next delay and ensure it is within
            // bounds.
            this.an *= this.un, this.an < this.on && (this.an = this.on), this.an > this.cn && (this.an = this.cn);
        }
        mn() {
            null !== this.hn && (this.hn.en(), this.hn = null);
        }
        cancel() {
            null !== this.hn && (this.hn.cancel(), this.hn = null);
        }
        /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */    _n() {
            return (Math.random() - .5) * this.an;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Datastore and its related methods are a wrapper around the external Google
     * Cloud Datastore grpc API, which provides an interface that is more convenient
     * for the rest of the client SDK architecture to consume.
     */
    /**
     * An implementation of Datastore that exposes additional state for internal
     * consumption.
     */
    class Gn extends class {} {
        constructor(t, n, e) {
            super(), this.credentials = t, this.pn = n, this.Bt = e, this.yn = !1;
        }
        En() {
            if (this.yn) throw new x(b, "The client has already been terminated.");
        }
        /** Gets an auth token and invokes the provided RPC. */    ot(t, n, e) {
            return this.En(), this.credentials.getToken().then((s => this.pn.ot(t, n, e, s))).catch((t => {
                throw t.code === V && this.credentials._(), t;
            }));
        }
        /** Gets an auth token and invokes the provided RPC with streamed results. */    ht(t, n, e) {
            return this.En(), this.credentials.getToken().then((s => this.pn.ht(t, n, e, s))).catch((t => {
                throw t.code === V && this.credentials._(), t;
            }));
        }
        terminate() {
            this.yn = !1;
        }
    }

    // TODO(firestorexp): Make sure there is only one Datastore instance per
    // firestore-exp client.
    async function Yn(t, n) {
        const e = m(t), s = Sn(e.Bt) + "/documents", r = {
            writes: n.map((t => On(e.Bt, t)))
        };
        await e.ot("Commit", s, r);
    }

    async function Hn(t, n) {
        const e = m(t), s = Sn(e.Bt) + "/documents", r = {
            documents: n.map((t => $n(e.Bt, t)))
        }, i = await e.ht("BatchGetDocuments", s, r), o = new Map;
        i.forEach((t => {
            const n = qn(e.Bt, t);
            o.set(n.key.toString(), n);
        }));
        const u = [];
        return n.forEach((t => {
            const n = o.get(t.toString());
            w(!!n), u.push(n);
        })), u;
    }

    async function Kn(t, n) {
        const e = m(t), s = Cn(e.Bt, un(n));
        return (await e.ht("RunQuery", s.parent, {
            structuredQuery: s.structuredQuery
        })).filter((t => !!t.document)).map((t => function(t, n, e) {
            const s = Dn(t, n.name), r = vn(n.updateTime), i = new xt({
                mapValue: {
                    fields: n.fields
                }
            });
            return new Ct(s, r, i, {
                hasCommittedMutations: !!e
            });
        }(e.Bt, t.document, void 0)));
    }

    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A concrete type describing all the values that can be applied via a
     * user-supplied firestore.Settings object. This is a separate type so that
     * defaults can be supplied and the value can be checked for equality.
     */
    class Jn {
        constructor(t) {
            var n;
            if (void 0 === t.host) {
                if (void 0 !== t.ssl) throw new x(I, "Can't provide ssl option if host option is not set");
                this.host = "firestore.googleapis.com", this.ssl = true;
            } else this.host = t.host, this.ssl = null === (n = t.ssl) || void 0 === n || n;
            if (this.credentials = t.credentials, this.ignoreUndefinedProperties = !!t.ignoreUndefinedProperties, 
            void 0 === t.cacheSizeBytes) this.cacheSizeBytes = 41943040; else {
                if (-1 !== t.cacheSizeBytes && t.cacheSizeBytes < 1048576) throw new x(I, "cacheSizeBytes must be at least 1048576");
                this.cacheSizeBytes = t.cacheSizeBytes;
            }
            this.experimentalForceLongPolling = !!t.experimentalForceLongPolling, this.experimentalAutoDetectLongPolling = !!t.experimentalAutoDetectLongPolling, 
            function(t, n, e, s) {
                if (!0 === n && !0 === s) throw new x(I, `${t} and ${e} cannot be used together.`);
            }("experimentalForceLongPolling", t.experimentalForceLongPolling, "experimentalAutoDetectLongPolling", t.experimentalAutoDetectLongPolling);
        }
        isEqual(t) {
            return this.host === t.host && this.ssl === t.ssl && this.credentials === t.credentials && this.cacheSizeBytes === t.cacheSizeBytes && this.experimentalForceLongPolling === t.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === t.experimentalAutoDetectLongPolling && this.ignoreUndefinedProperties === t.ignoreUndefinedProperties;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ const Zn = new Map;

    /**
     * An instance map that ensures only one Datastore exists per Firestore
     * instance.
     */
    /**
     * Returns an initialized and started Datastore for the given Firestore
     * instance. Callers must invoke removeComponents() when the Firestore
     * instance is terminated.
     */
    function Xn(t) {
        if (t.In) throw new x(b, "The client has already been terminated.");
        if (!Zn.has(t)) {
            h("ComponentProvider", "Initializing Datastore");
            const r = function(t) {
                return new it(t, fetch.bind(null));
            }((n = t.Tn, e = t.An, s = t.Pn(), new j(n, e, s.host, s.ssl, s.experimentalForceLongPolling, s.experimentalAutoDetectLongPolling))), i = Qn(t.Tn), o = function(t, n, e) {
                return new Gn(t, n, e);
            }(t.Rn, r, i);
            Zn.set(t, o);
        }
        var n, e, s;
        /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
        /**
     * The Cloud Firestore service interface.
     *
     * Do not call this constructor directly. Instead, use {@link getFirestore}.
     */    return Zn.get(t);
    }

    /**
     * Removes all components associated with the provided instance. Must be called
     * when the `Firestore` instance is terminated.
     */ class te {
        /** @hideconstructor */
        constructor(t, n) {
            this.An = "(lite)", this.Vn = new Jn({}), this.gn = !1, t instanceof M ? (this.Tn = t, 
            this.Rn = new O) : (this.bn = t, this.Tn = function(t) {
                if (!Object.prototype.hasOwnProperty.apply(t.options, [ "projectId" ])) throw new x(I, '"projectId" not provided in firebase.initializeApp.');
                return new M(t.options.projectId);
            }
            /**
     * Initializes a new instance of Cloud Firestore with the provided settings.
     * Can only be called before any other functions, including
     * {@link getFirestore}. If the custom settings are empty, this function is
     * equivalent to calling {@link getFirestore}.
     *
     * @param app - The {@link FirebaseApp} with which the `Firestore` instance will
     * be associated.
     * @param settings - A settings object to configure the `Firestore` instance.
     * @returns A newly initialized Firestore instance.
     */ (t), this.Rn = new C(n));
        }
        /**
         * The {@link FirebaseApp} associated with this `Firestore` service
         * instance.
         */    get app() {
            if (!this.bn) throw new x(b, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
            return this.bn;
        }
        get vn() {
            return this.gn;
        }
        get In() {
            return void 0 !== this.Nn;
        }
        $n(t) {
            if (this.gn) throw new x(b, "Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");
            this.Vn = new Jn(t), void 0 !== t.credentials && (this.Rn = function(t) {
                if (!t) return new O;
                switch (t.type) {
                  case "gapi":
                    const n = t.client;
                    // Make sure this really is a Gapi client.
                                    return w(!("object" != typeof n || null === n || !n.auth || !n.auth.getAuthHeaderValueForFirstParty)), 
                    new U(n, t.sessionIndex || "0");

                  case "provider":
                    return t.client;

                  default:
                    throw new x(I, "makeCredentialsProvider failed due to invalid credential type");
                }
            }(t.credentials));
        }
        Dn() {
            return this.Vn;
        }
        Pn() {
            return this.gn = !0, this.Vn;
        }
        _delete() {
            return this.Nn || (this.Nn = this.Fn()), this.Nn;
        }
        toJSON() {
            return {
                app: this.bn,
                g: this.Tn,
                settings: this.Vn
            };
        }
        /**
         * Terminates all components used by this client. Subclasses can override
         * this method to clean up their own dependencies, but must also call this
         * method.
         *
         * Only ever called once.
         */    Fn() {
            return function(t) {
                const n = Zn.get(t);
                n && (h("ComponentProvider", "Removing Datastore"), Zn.delete(t), n.terminate());
            }(this), Promise.resolve();
        }
    }

    function ne(n, e) {
        const s = app._getProvider(n, "firestore/lite");
        if (s.isInitialized()) throw new x(b, "Firestore can only be initialized once per app.");
        const r = s.getImmediate();
        return r.$n(e), r;
    }

    /**
     * Returns the existing instance of Firestore that is associated with the
     * provided {@link FirebaseApp}. If no instance exists, initializes a new
     * instance with default settings.
     *
     * @param app - The {@link FirebaseApp} instance that the returned Firestore
     * instance is associated with.
     * @returns The `Firestore` instance of the provided app.
     */ function ee(n) {
        return app._getProvider(n, "firestore/lite").getImmediate();
    }

    /**
     * Modify this instance to communicate with the Cloud Firestore emulator.
     *
     * Note: This must be called before this instance has been used to do any
     * operations.
     *
     * @param firestore - The Firestore instance to configure to connect to the
     * emulator.
     * @param host - the emulator host (ex: localhost).
     * @param port - the emulator port (ex: 9000).
     */ function se(t, n, e) {
        const s = (t = J(t, te)).Dn();
        "firestore.googleapis.com" !== s.host && s.host !== n && f("Host has been set in both settings() and useEmulator(), emulator host will be used"), 
        t.$n(Object.assign(Object.assign({}, s), {
            host: `${n}:${e}`,
            ssl: !1
        }));
    }

    /**
     * Terminates the provided Firestore instance.
     *
     * After calling `terminate()` only the `clearIndexedDbPersistence()` functions
     * may be used. Any other function will throw a `FirestoreError`. Termination
     * does not cancel any pending writes, and any promises that are awaiting a
     * response from the server will not be resolved.
     *
     * To restart after termination, create a new instance of FirebaseFirestore with
     * {@link getFirestore}.
     *
     * Note: Under normal circumstances, calling `terminate()` is not required. This
     * function is useful only when you want to force this instance to release all of
     * its resources or in combination with {@link clearIndexedDbPersistence} to
     * ensure that all local state is destroyed between test runs.
     *
     * @param firestore - The Firestore instance to terminate.
     * @returns A promise that is resolved when the instance has been successfully
     * terminated.
     */ function re(t) {
        return t = J(t, te), app._removeServiceInstance(t.app, "firestore/lite"), t._delete();
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A class implemented by all API types of the legacy Firestore API which
     * contains a reference to the API type in the firestore-exp API. All internal
     * code unwraps these references, which allows us to only use firestore-exp
     * types in the SDK.
     */
    class ie {
        constructor(t) {
            this.et = t;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A `DocumentReference` refers to a document location in a Firestore database
     * and can be used to write, read, or listen to the location. The document at
     * the referenced location may or may not exist.
     */ class oe {
        /** @hideconstructor */
        constructor(t, n, e) {
            this.Sn = n, this.xn = e, 
            /** The type of this Firestore reference. */
            this.type = "document", this.firestore = t;
        }
        get qn() {
            return this.xn.path;
        }
        /**
         * The document's identifier within its collection.
         */    get id() {
            return this.xn.path.C();
        }
        /**
         * A string representing the path of the referenced document (relative
         * to the root of the database).
         */    get path() {
            return this.xn.path.B();
        }
        /**
         * The collection this `DocumentReference` belongs to.
         */    get parent() {
            return new ce(this.firestore, this.Sn, this.xn.path.q());
        }
        /**
         * Applies a custom data converter to this `DocumentReference`, allowing you
         * to use your own custom model objects with Firestore. When you call {@link
         * setDoc}, {@link getDoc}, etc. with the returned `DocumentReference`
         * instance, the provided converter will convert between Firestore data and
         * your custom type `U`.
         *
         * @param converter - Converts objects to and from Firestore.
         * @returns A `DocumentReference<U>` that uses the provided converter.
         */    withConverter(t) {
            return new oe(this.firestore, t, this.xn);
        }
    }

    /**
     * A `Query` refers to a Query which you can read or listen to. You can also
     * construct refined `Query` objects by adding filters and ordering.
     */ class ue {
        // This is the lite version of the Query class in the main SDK.
        /** @hideconstructor protected */
        constructor(t, n, e) {
            this.Sn = n, this.On = e, 
            /** The type of this Firestore reference. */
            this.type = "query", this.firestore = t;
        }
        /**
         * Applies a custom data converter to this query, allowing you to use your own
         * custom model objects with Firestore. When you call {@link getDocs} with
         * the returned query, the provided converter will convert between Firestore
         * data and your custom type `U`.
         *
         * @param converter - Converts objects to and from Firestore.
         * @returns A `Query<U>` that uses the provided converter.
         */    withConverter(t) {
            return new ue(this.firestore, t, this.On);
        }
    }

    /**
     * A `CollectionReference` object can be used for adding documents, getting
     * document references, and querying for documents (using {@link query}).
     */ class ce extends ue {
        /** @hideconstructor */
        constructor(t, n, e) {
            super(t, n, new tn(e)), this.firestore = t, this.qn = e, this.type = "collection";
        }
        /** The collection's identifier. */    get id() {
            return this.On.path.C();
        }
        /**
         * A string representing the path of the referenced collection (relative
         * to the root of the database).
         */    get path() {
            return this.On.path.B();
        }
        /**
         * A reference to the containing `DocumentReference` if this is a
         * subcollection. If this isn't a subcollection, the reference is null.
         */    get parent() {
            const t = this.qn.q();
            return t.L() ? null : new oe(this.firestore, 
            /* converter= */ null, new z(t));
        }
        /**
         * Applies a custom data converter to this CollectionReference, allowing you
         * to use your own custom model objects with Firestore. When you call {@link
         * addDoc} with the returned `CollectionReference` instance, the provided
         * converter will convert between Firestore data and your custom type `U`.
         *
         * @param converter - Converts objects to and from Firestore.
         * @returns A `CollectionReference<U>` that uses the provided converter.
         */    withConverter(t) {
            return new ce(this.firestore, t, this.qn);
        }
    }

    function ae(t, n, ...e) {
        if (t instanceof ie && (t = t.et), G("collection", "path", n), t instanceof te) {
            const s = k.k(n, ...e);
            return H(s), new ce(t, /* converter= */ null, s);
        }
        {
            if (!(t instanceof oe || t instanceof ce)) throw new x(I, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
            const s = k.k(t.path, ...e).child(k.k(n));
            return H(s), new ce(t.firestore, 
            /* converter= */ null, s);
        }
    }

    // TODO(firestorelite): Consider using ErrorFactory -
    // https://github.com/firebase/firebase-js-sdk/blob/0131e1f/packages/util/src/errors.ts#L106
    /**
     * Creates and returns a new `Query` instance that includes all documents in the
     * database that are contained in a collection or subcollection with the
     * given `collectionId`.
     *
     * @param firestore - A reference to the root Firestore instance.
     * @param collectionId - Identifies the collections to query over. Every
     * collection or subcollection with this ID as the last segment of its path
     * will be included. Cannot contain a slash.
     * @returns The created `Query`.
     */ function he(t, n) {
        if (t = J(t, te), G("collectionGroup", "collection id", n), n.indexOf("/") >= 0) throw new x(I, `Invalid collection ID '${n}' passed to function collectionGroup(). Collection IDs must not contain '/'.`);
        return new ue(t, 
        /* converter= */ null, 
        /**
     * Creates a new Query for a collection group query that matches all documents
     * within the provided collection group.
     */
        function(t) {
            return new tn(k.W(), t);
        }(n));
    }

    function le(t, n, ...e) {
        if (t instanceof ie && (t = t.et), 
        // We allow omission of 'pathString' but explicitly prohibit passing in both
        // 'undefined' and 'null'.
        1 === arguments.length && (n = ct.dt()), G("doc", "path", n), t instanceof te) {
            const s = k.k(n, ...e);
            return Y(s), new oe(t, 
            /* converter= */ null, new z(s));
        }
        {
            if (!(t instanceof oe || t instanceof ce)) throw new x(I, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
            const s = t.qn.child(k.k(n, ...e));
            return Y(s), new oe(t.firestore, t instanceof ce ? t.Sn : null, new z(s));
        }
    }

    /**
     * Returns true if the provided references are equal.
     *
     * @param left - A reference to compare.
     * @param right - A reference to compare.
     * @returns true if the references point to the same location in the same
     * Firestore database.
     */ function fe(t, n) {
        return t instanceof ie && (t = t.et), n instanceof ie && (n = n.et), (t instanceof oe || t instanceof ce) && (n instanceof oe || n instanceof ce) && (t.firestore === n.firestore && t.path === n.path && t.Sn === n.Sn);
    }

    /**
     * Returns true if the provided queries point to the same collection and apply
     * the same constraints.
     *
     * @param left - A `Query` to compare.
     * @param right - A `Query` to compare.
     * @returns true if the references point to the same location in the same
     * Firestore database.
     */ function de(t, n) {
        return t instanceof ie && (t = t.et), n instanceof ie && (n = n.et), t instanceof ue && n instanceof ue && (t.firestore === n.firestore && cn(t.On, n.On) && t.Sn === n.Sn);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An immutable object representing an array of bytes.
     */ class _e {
        /** @hideconstructor */
        constructor(t) {
            this.Cn = t;
        }
        /**
         * Creates a new `Bytes` object from the given Base64 string, converting it to
         * bytes.
         *
         * @param base64 - The Base64 string used to create the `Bytes` object.
         */    static fromBase64String(t) {
            try {
                return new _e(mt.fromBase64String(t));
            } catch (t) {
                throw new x(I, "Failed to construct data from Base64 string: " + t);
            }
        }
        /**
         * Creates a new `Bytes` object from the given Uint8Array.
         *
         * @param array - The Uint8Array used to create the `Bytes` object.
         */    static fromUint8Array(t) {
            return new _e(mt.fromUint8Array(t));
        }
        /**
         * Returns the underlying bytes as a Base64-encoded string.
         *
         * @returns The Base64-encoded string created from the `Bytes` object.
         */    toBase64() {
            return this.Cn.toBase64();
        }
        /**
         * Returns the underlying bytes in a new `Uint8Array`.
         *
         * @returns The Uint8Array created from the `Bytes` object.
         */    toUint8Array() {
            return this.Cn.toUint8Array();
        }
        /**
         * Returns a string representation of the `Bytes` object.
         *
         * @returns A string representation of the `Bytes` object.
         */    toString() {
            return "Bytes(base64: " + this.toBase64() + ")";
        }
        /**
         * Returns true if this `Bytes` object is equal to the provided one.
         *
         * @param other - The `Bytes` object to compare against.
         * @returns true if this `Bytes` object is equal to the provided one.
         */    isEqual(t) {
            return this.Cn.isEqual(t.Cn);
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A `FieldPath` refers to a field in a document. The path may consist of a
     * single field name (referring to a top-level field in the document), or a
     * list of field names (referring to a nested field in the document).
     *
     * Create a `FieldPath` by providing field names. If more than one field
     * name is provided, the path will point to a nested field in a document.
     */ class we {
        /**
         * Creates a FieldPath from the provided field names. If more than one field
         * name is provided, the path will point to a nested field in a document.
         *
         * @param fieldNames - A list of field names.
         */
        constructor(...t) {
            for (let n = 0; n < t.length; ++n) if (0 === t[n].length) throw new x(I, "Invalid field name at argument $(i + 1). Field names must not be empty.");
            this.Ln = new W(t);
        }
        /**
         * Returns true if this `FieldPath` is equal to the provided one.
         *
         * @param other - The `FieldPath` to compare against.
         * @returns true if this `FieldPath` is equal to the provided one.
         */    isEqual(t) {
            return this.Ln.isEqual(t.Ln);
        }
    }

    /**
     * Returns a special sentinel `FieldPath` to refer to the ID of a document.
     * It can be used in queries to sort or filter by the document ID.
     */ function me() {
        return new we("__name__");
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Sentinel values that can be used when writing document fields with `set()`
     * or `update()`.
     */ class pe {
        /**
         * @param _methodName - The public API endpoint that returns this class.
         */
        constructor(t) {
            this._methodName = t;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An immutable object representing a geographic location in Firestore. The
     * location is represented as latitude/longitude pair.
     *
     * Latitude values are in the range of [-90, 90].
     * Longitude values are in the range of [-180, 180].
     */ class ye {
        /**
         * Creates a new immutable `GeoPoint` object with the provided latitude and
         * longitude values.
         * @param latitude - The latitude as number between -90 and 90.
         * @param longitude - The longitude as number between -180 and 180.
         */
        constructor(t, n) {
            if (!isFinite(t) || t < -90 || t > 90) throw new x(I, "Latitude must be a number between -90 and 90, but was: " + t);
            if (!isFinite(n) || n < -180 || n > 180) throw new x(I, "Longitude must be a number between -180 and 180, but was: " + n);
            this.Un = t, this.jn = n;
        }
        /**
         * The latitude of this `GeoPoint` instance.
         */    get latitude() {
            return this.Un;
        }
        /**
         * The longitude of this `GeoPoint` instance.
         */    get longitude() {
            return this.jn;
        }
        /**
         * Returns true if this `GeoPoint` is equal to the provided one.
         *
         * @param other - The `GeoPoint` to compare against.
         * @returns true if this `GeoPoint` is equal to the provided one.
         */    isEqual(t) {
            return this.Un === t.Un && this.jn === t.jn;
        }
        toJSON() {
            return {
                latitude: this.Un,
                longitude: this.jn
            };
        }
        /**
         * Actually private to JS consumers of our API, so this function is prefixed
         * with an underscore.
         */    _t(t) {
            return at(this.Un, t.Un) || at(this.jn, t.jn);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ const Ee = /^__.*__$/;

    /** The result of parsing document data (e.g. for a setData call). */ class Ie {
        constructor(t, n, e) {
            this.data = t, this.Gt = n, this.fieldTransforms = e;
        }
        Mn(t, n) {
            return null !== this.Gt ? new En(t, this.data, this.Gt, n, this.fieldTransforms) : new yn(t, this.data, n, this.fieldTransforms);
        }
    }

    /** The result of parsing "update" data (i.e. for an updateData call). */ class Te {
        constructor(t, 
        // The fieldMask does not include document transforms.
        n, e) {
            this.data = t, this.Gt = n, this.fieldTransforms = e;
        }
        Mn(t, n) {
            return new En(t, this.data, this.Gt, n, this.fieldTransforms);
        }
    }

    function Ae(t) {
        switch (t) {
          case 0 /* Set */ :
     // fall through
                  case 2 /* MergeSet */ :
     // fall through
                  case 1 /* Update */ :
            return !0;

          case 3 /* Argument */ :
          case 4 /* ArrayArgument */ :
            return !1;

          default:
            throw _();
        }
    }

    /** A "context" object passed around while parsing user data. */ class Pe {
        /**
         * Initializes a ParseContext with the given source and path.
         *
         * @param settings - The settings for the parser.
         * @param databaseId - The database ID of the Firestore instance.
         * @param serializer - The serializer to use to generate the Value proto.
         * @param ignoreUndefinedProperties - Whether to ignore undefined properties
         * rather than throw.
         * @param fieldTransforms - A mutable list of field transforms encountered
         * while parsing the data.
         * @param fieldMask - A mutable list of field paths encountered while parsing
         * the data.
         *
         * TODO(b/34871131): We don't support array paths right now, so path can be
         * null to indicate the context represents any location within an array (in
         * which case certain features will not work and errors will be somewhat
         * compromised).
         */
        constructor(t, n, e, s, r, i) {
            this.settings = t, this.g = n, this.Bt = e, this.ignoreUndefinedProperties = s, 
            // Minor hack: If fieldTransforms is undefined, we assume this is an
            // external call and we need to validate the entire path.
            void 0 === r && this.Bn(), this.fieldTransforms = r || [], this.Gt = i || [];
        }
        get path() {
            return this.settings.path;
        }
        get kn() {
            return this.settings.kn;
        }
        /** Returns a new context with the specified settings overwritten. */    Qn(t) {
            return new Pe(Object.assign(Object.assign({}, this.settings), t), this.g, this.Bt, this.ignoreUndefinedProperties, this.fieldTransforms, this.Gt);
        }
        Wn(t) {
            var n;
            const e = null === (n = this.path) || void 0 === n ? void 0 : n.child(t), s = this.Qn({
                path: e,
                zn: !1
            });
            return s.Gn(t), s;
        }
        Yn(t) {
            var n;
            const e = null === (n = this.path) || void 0 === n ? void 0 : n.child(t), s = this.Qn({
                path: e,
                zn: !1
            });
            return s.Bn(), s;
        }
        Hn(t) {
            // TODO(b/34871131): We don't support array paths right now; so make path
            // undefined.
            return this.Qn({
                path: void 0,
                zn: !0
            });
        }
        Kn(t) {
            return ke(t, this.settings.methodName, this.settings.Jn || !1, this.path, this.settings.Zn);
        }
        /** Returns 'true' if 'fieldPath' was traversed when creating this context. */    contains(t) {
            return void 0 !== this.Gt.find((n => t.U(n))) || void 0 !== this.fieldTransforms.find((n => t.U(n.field)));
        }
        Bn() {
            // TODO(b/34871131): Remove null check once we have proper paths for fields
            // within arrays.
            if (this.path) for (let t = 0; t < this.path.length; t++) this.Gn(this.path.get(t));
        }
        Gn(t) {
            if (0 === t.length) throw this.Kn("Document fields must not be empty");
            if (Ae(this.kn) && Ee.test(t)) throw this.Kn('Document fields cannot begin and end with "__"');
        }
    }

    /**
     * Helper for parsing raw user input (provided via the API) into internal model
     * classes.
     */ class Re {
        constructor(t, n, e) {
            this.g = t, this.ignoreUndefinedProperties = n, this.Bt = e || Qn(t);
        }
        /** Creates a new top-level parse context. */    Xn(t, n, e, s = !1) {
            return new Pe({
                kn: t,
                methodName: n,
                Zn: e,
                path: W.W(),
                zn: !1,
                Jn: s
            }, this.g, this.Bt, this.ignoreUndefinedProperties);
        }
    }

    function Ve(t) {
        const n = t.Pn(), e = Qn(t.Tn);
        return new Re(t.Tn, !!n.ignoreUndefinedProperties, e);
    }

    /** Parse document data from a set() call. */ function ge(t, n, e, s, r, i = {}) {
        const o = t.Xn(i.merge || i.mergeFields ? 2 /* MergeSet */ : 0 /* Set */ , n, e, r);
        Ue("Data must be an object, but it was:", o, s);
        const u = Ce(s, o);
        let c, a;
        if (i.merge) c = new wt(o.Gt), a = o.fieldTransforms; else if (i.mergeFields) {
            const t = [];
            for (const s of i.mergeFields) {
                const r = je(n, s, e);
                if (!o.contains(r)) throw new x(I, `Field '${r}' is specified in your field mask but missing from your input data.`);
                Qe(t, r) || t.push(r);
            }
            c = new wt(t), a = o.fieldTransforms.filter((t => c.Tt(t.field)));
        } else c = null, a = o.fieldTransforms;
        return new Ie(new xt(u), c, a);
    }

    class be extends pe {
        te(t) {
            if (2 /* MergeSet */ !== t.kn) throw 1 /* Update */ === t.kn ? t.Kn(`${this._methodName}() can only appear at the top level of your update data`) : t.Kn(`${this._methodName}() cannot be used with set() unless you pass {merge:true}`);
            // No transform to add for a delete, but we need to add it to our
            // fieldMask so it gets deleted.
            return t.Gt.push(t.path), null;
        }
        isEqual(t) {
            return t instanceof be;
        }
    }

    /**
     * Creates a child context for parsing SerializableFieldValues.
     *
     * This is different than calling `ParseContext.contextWith` because it keeps
     * the fieldTransforms and fieldMask separate.
     *
     * The created context has its `dataSource` set to `UserDataSource.Argument`.
     * Although these values are used with writes, any elements in these FieldValues
     * are not considered writes since they cannot contain any FieldValue sentinels,
     * etc.
     *
     * @param fieldValue - The sentinel FieldValue for which to create a child
     *     context.
     * @param context - The parent context.
     * @param arrayElement - Whether or not the FieldValue has an array.
     */ function ve(t, n, e) {
        return new Pe({
            kn: 3 /* Argument */ ,
            Zn: n.settings.Zn,
            methodName: t._methodName,
            zn: e
        }, n.g, n.Bt, n.ignoreUndefinedProperties);
    }

    class Ne extends pe {
        te(t) {
            return new wn(t.path, new ln);
        }
        isEqual(t) {
            return t instanceof Ne;
        }
    }

    class $e extends pe {
        constructor(t, n) {
            super(t), this.ne = n;
        }
        te(t) {
            const n = ve(this, t, 
            /*array=*/ !0), e = this.ne.map((t => Oe(t, n))), s = new fn(e);
            return new wn(t.path, s);
        }
        isEqual(t) {
            // TODO(mrschmidt): Implement isEquals
            return this === t;
        }
    }

    class De extends pe {
        constructor(t, n) {
            super(t), this.ne = n;
        }
        te(t) {
            const n = ve(this, t, 
            /*array=*/ !0), e = this.ne.map((t => Oe(t, n))), s = new dn(e);
            return new wn(t.path, s);
        }
        isEqual(t) {
            // TODO(mrschmidt): Implement isEquals
            return this === t;
        }
    }

    class Fe extends pe {
        constructor(t, n) {
            super(t), this.ee = n;
        }
        te(t) {
            const n = new _n(t.Bt, an(t.Bt, this.ee));
            return new wn(t.path, n);
        }
        isEqual(t) {
            // TODO(mrschmidt): Implement isEquals
            return this === t;
        }
    }

    /** Parse update data from an update() call. */ function Se(t, n, e, s) {
        const r = t.Xn(1 /* Update */ , n, e);
        Ue("Data must be an object, but it was:", r, s);
        const i = [], o = new qt;
        _t(s, ((t, s) => {
            const u = Be(n, t, e);
            // For Compat types, we have to "extract" the underlying types before
            // performing validation.
                    s instanceof ie && (s = s.et);
            const c = r.Yn(u);
            if (s instanceof be) 
            // Add it to the field mask, but don't add anything to updateData.
            i.push(u); else {
                const t = Oe(s, c);
                null != t && (i.push(u), o.set(u, t));
            }
        }));
        const u = new wt(i);
        return new Te(o.vt(), u, r.fieldTransforms);
    }

    /** Parse update data from a list of field/value arguments. */ function xe(t, n, e, s, r, i) {
        const o = t.Xn(1 /* Update */ , n, e), u = [ je(n, s, e) ], c = [ r ];
        if (i.length % 2 != 0) throw new x(I, `Function ${n}() needs to be called with an even number of arguments that alternate between field names and values.`);
        for (let t = 0; t < i.length; t += 2) u.push(je(n, i[t])), c.push(i[t + 1]);
        const a = [], h = new qt;
        // We iterate in reverse order to pick the last value for a field if the
        // user specified the field multiple times.
        for (let t = u.length - 1; t >= 0; --t) if (!Qe(a, u[t])) {
            const n = u[t];
            let e = c[t];
            // For Compat types, we have to "extract" the underlying types before
            // performing validation.
                    e instanceof ie && (e = e.et);
            const s = o.Yn(n);
            if (e instanceof be) 
            // Add it to the field mask, but don't add anything to updateData.
            a.push(n); else {
                const t = Oe(e, s);
                null != t && (a.push(n), h.set(n, t));
            }
        }
        const l = new wt(a);
        return new Te(h.vt(), l, o.fieldTransforms);
    }

    /**
     * Parse a "query value" (e.g. value in a where filter or a value in a cursor
     * bound).
     *
     * @param allowArrays - Whether the query value is an array that may directly
     * contain additional arrays (e.g. the operand of an `in` query).
     */ function qe(t, n, e, s = !1) {
        return Oe(e, t.Xn(s ? 4 /* ArrayArgument */ : 3 /* Argument */ , n));
    }

    /**
     * Parses user data to Protobuf Values.
     *
     * @param input - Data to be parsed.
     * @param context - A context object representing the current path being parsed,
     * the source of the data being parsed, etc.
     * @returns The parsed value, or null if the value was a FieldValue sentinel
     * that should not be included in the resulting parsed data.
     */ function Oe(t, n) {
        if (
        // Unwrap the API type from the Compat SDK. This will return the API type
        // from firestore-exp.
        t instanceof ie && (t = t.et), Le(t)) return Ue("Unsupported field value:", n, t), 
        Ce(t, n);
        if (t instanceof pe) 
        // FieldValues usually parse into transforms (except FieldValue.delete())
        // in which case we do not want to include this field in our parsed data
        // (as doing so will overwrite the field directly prior to the transform
        // trying to transform it). So we don't add this location to
        // context.fieldMask and we return null as our parsing result.
        /**
     * "Parses" the provided FieldValueImpl, adding any necessary transforms to
     * context.fieldTransforms.
     */
        return function(t, n) {
            // Sentinels are only supported with writes, and not within arrays.
            if (!Ae(n.kn)) throw n.Kn(`${t._methodName}() can only be used with update() and set()`);
            if (!n.path) throw n.Kn(`${t._methodName}() is not currently supported inside arrays`);
            const e = t.te(n);
            e && n.fieldTransforms.push(e);
        }
        /**
     * Helper to parse a scalar value (i.e. not an Object, Array, or FieldValue)
     *
     * @returns The parsed value
     */ (t, n), null;
        if (void 0 === t && n.ignoreUndefinedProperties) 
        // If the input is undefined it can never participate in the fieldMask, so
        // don't handle this below. If `ignoreUndefinedProperties` is false,
        // `parseScalarValue` will reject an undefined value.
        return null;
        if (
        // If context.path is null we are inside an array and we don't support
        // field mask paths more granular than the top-level array.
        n.path && n.Gt.push(n.path), t instanceof Array) {
            // TODO(b/34871131): Include the path containing the array in the error
            // message.
            // In the case of IN queries, the parsed data is an array (representing
            // the set of values to be included for the IN query) that may directly
            // contain additional arrays (each representing an individual field
            // value), so we disable this validation.
            if (n.settings.zn && 4 /* ArrayArgument */ !== n.kn) throw n.Kn("Nested arrays are not supported");
            return function(t, n) {
                const e = [];
                let s = 0;
                for (const r of t) {
                    let t = Oe(r, n.Hn(s));
                    null == t && (
                    // Just include nulls in the array for fields being replaced with a
                    // sentinel.
                    t = {
                        nullValue: "NULL_VALUE"
                    }), e.push(t), s++;
                }
                return {
                    arrayValue: {
                        values: e
                    }
                };
            }(t, n);
        }
        return function(t, n) {
            t instanceof ie && (t = t.et);
            if (null === t) return {
                nullValue: "NULL_VALUE"
            };
            if ("number" == typeof t) return an(n.Bt, t);
            if ("boolean" == typeof t) return {
                booleanValue: t
            };
            if ("string" == typeof t) return {
                stringValue: t
            };
            if (t instanceof Date) {
                const e = lt.fromDate(t);
                return {
                    timestampValue: Vn(n.Bt, e)
                };
            }
            if (t instanceof lt) {
                // Firestore backend truncates precision down to microseconds. To ensure
                // offline mode works the same with regards to truncation, perform the
                // truncation immediately without waiting for the backend to do that.
                const e = new lt(t.seconds, 1e3 * Math.floor(t.nanoseconds / 1e3));
                return {
                    timestampValue: Vn(n.Bt, e)
                };
            }
            if (t instanceof ye) return {
                geoPointValue: {
                    latitude: t.latitude,
                    longitude: t.longitude
                }
            };
            if (t instanceof _e) return {
                bytesValue: gn(n.Bt, t.Cn)
            };
            if (t instanceof oe) {
                const e = n.g, s = t.firestore.Tn;
                if (!s.isEqual(e)) throw n.Kn(`Document reference is for database ${s.projectId}/${s.database} but should be for database ${e.projectId}/${e.database}`);
                return {
                    referenceValue: Nn(t.firestore.Tn || n.g, t.xn.path)
                };
            }
            throw n.Kn(`Unsupported field value: ${K(t)}`);
        }
        /**
     * Checks whether an object looks like a JSON object that should be converted
     * into a struct. Normal class/prototype instances are considered to look like
     * JSON objects since they should be converted to a struct value. Arrays, Dates,
     * GeoPoints, etc. are not considered to look like JSON objects since they map
     * to specific FieldValue types other than ObjectValue.
     */ (t, n);
    }

    function Ce(t, n) {
        const e = {};
        return !function(t) {
            for (const n in t) if (Object.prototype.hasOwnProperty.call(t, n)) return !1;
            return !0;
        }(t) ? _t(t, ((t, s) => {
            const r = Oe(s, n.Wn(t));
            null != r && (e[t] = r);
        })) : 
        // If we encounter an empty object, we explicitly add it to the update
        // mask to ensure that the server creates a map entry.
        n.path && n.path.length > 0 && n.Gt.push(n.path), {
            mapValue: {
                fields: e
            }
        };
    }

    function Le(t) {
        return !("object" != typeof t || null === t || t instanceof Array || t instanceof Date || t instanceof lt || t instanceof ye || t instanceof _e || t instanceof oe || t instanceof pe);
    }

    function Ue(t, n, e) {
        if (!Le(e) || !function(t) {
            return "object" == typeof t && null !== t && (Object.getPrototypeOf(t) === Object.prototype || null === Object.getPrototypeOf(t));
        }(e)) {
            const s = K(e);
            throw "an object" === s ? n.Kn(t + " a custom object") : n.Kn(t + " " + s);
        }
    }

    /**
     * Helper that calls fromDotSeparatedString() but wraps any error thrown.
     */ function je(t, n, e) {
        if (
        // If required, replace the FieldPath Compat class with with the firestore-exp
        // FieldPath.
        n instanceof ie && (n = n.et), n instanceof we) return n.Ln;
        if ("string" == typeof n) return Be(t, n);
        throw ke("Field path arguments must be of type string or FieldPath.", t, 
        /* hasConverter= */ !1, 
        /* path= */ void 0, e);
    }

    /**
     * Matches any characters in a field path string that are reserved.
     */ const Me = new RegExp("[~\\*/\\[\\]]");

    /**
     * Wraps fromDotSeparatedString with an error message about the method that
     * was thrown.
     * @param methodName - The publicly visible method name
     * @param path - The dot-separated string form of a field path which will be
     * split on dots.
     * @param targetDoc - The document against which the field path will be
     * evaluated.
     */ function Be(t, n, e) {
        if (n.search(Me) >= 0) throw ke(`Invalid field path (${n}). Paths must not contain '~', '*', '/', '[', or ']'`, t, 
        /* hasConverter= */ !1, 
        /* path= */ void 0, e);
        try {
            return new we(...n.split(".")).Ln;
        } catch (s) {
            throw ke(`Invalid field path (${n}). Paths must not be empty, begin with '.', end with '.', or contain '..'`, t, 
            /* hasConverter= */ !1, 
            /* path= */ void 0, e);
        }
    }

    function ke(t, n, e, s, r) {
        const i = s && !s.L(), o = void 0 !== r;
        let u = `Function ${n}() called with invalid data`;
        e && (u += " (via `toFirestore()`)"), u += ". ";
        let c = "";
        return (i || o) && (c += " (found", i && (c += ` in field ${s}`), o && (c += ` in document ${r}`), 
        c += ")"), new x(I, u + t + c);
    }

    /** Checks `haystack` if FieldPath `needle` is present. Runs in O(n). */ function Qe(t, n) {
        return t.some((t => t.isEqual(n)));
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Converts Firestore's internal types to the JavaScript types that we expose
     * to the user.
     */
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A `DocumentSnapshot` contains data read from a document in your Firestore
     * database. The data can be extracted with `.data()` or `.get(<field>)` to
     * get a specific field.
     *
     * For a `DocumentSnapshot` that points to a non-existing document, any data
     * access will return 'undefined'. You can use the `exists()` method to
     * explicitly verify a document's existence.
     */
    class We {
        // Note: This class is stripped down version of the DocumentSnapshot in
        // the legacy SDK. The changes are:
        // - No support for SnapshotMetadata.
        // - No support for SnapshotOptions.
        /** @hideconstructor protected */
        constructor(t, n, e, s, r) {
            this.se = t, this.re = n, this.xn = e, this.ie = s, this.Sn = r;
        }
        /** Property of the `DocumentSnapshot` that provides the document's ID. */    get id() {
            return this.xn.path.C();
        }
        /**
         * The `DocumentReference` for the document included in the `DocumentSnapshot`.
         */    get ref() {
            return new oe(this.se, this.Sn, this.xn);
        }
        /**
         * Signals whether or not the document at the snapshot's location exists.
         *
         * @returns true if the document exists.
         */    exists() {
            return null !== this.ie;
        }
        /**
         * Retrieves all fields in the document as an `Object`. Returns `undefined` if
         * the document doesn't exist.
         *
         * @returns An `Object` containing all fields in the document or `undefined`
         * if the document doesn't exist.
         */    data() {
            if (this.ie) {
                if (this.Sn) {
                    // We only want to use the converter and create a new DocumentSnapshot
                    // if a converter has been provided.
                    const t = new ze(this.se, this.re, this.xn, this.ie, 
                    /* converter= */ null);
                    return this.Sn.fromFirestore(t);
                }
                return this.re.oe(this.ie.Ft());
            }
        }
        /**
         * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
         * document or field doesn't exist.
         *
         * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
         * field.
         * @returns The data at the specified field location or undefined if no such
         * field exists in the document.
         */
        // We are using `any` here to avoid an explicit cast by our users.
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        get(t) {
            if (this.ie) {
                const n = this.ie.data().field(He("DocumentSnapshot.get", t));
                if (null !== n) return this.re.oe(n);
            }
        }
    }

    /**
     * A `QueryDocumentSnapshot` contains data read from a document in your
     * Firestore database as part of a query. The document is guaranteed to exist
     * and its data can be extracted with `.data()` or `.get(<field>)` to get a
     * specific field.
     *
     * A `QueryDocumentSnapshot` offers the same API surface as a
     * `DocumentSnapshot`. Since query results contain only existing documents, the
     * `exists` property will always be true and `data()` will never return
     * 'undefined'.
     */ class ze extends We {
        /**
         * Retrieves all fields in the document as an `Object`.
         *
         * @override
         * @returns An `Object` containing all fields in the document.
         */
        data() {
            return super.data();
        }
    }

    /**
     * A `QuerySnapshot` contains zero or more `DocumentSnapshot` objects
     * representing the results of a query. The documents can be accessed as an
     * array via the `docs` property or enumerated using the `forEach` method. The
     * number of documents can be determined via the `empty` and `size`
     * properties.
     */ class Ge {
        /** @hideconstructor */
        constructor(t, n) {
            this.ue = n, this.query = t;
        }
        /** An array of all the documents in the `QuerySnapshot`. */    get docs() {
            return [ ...this.ue ];
        }
        /** The number of documents in the `QuerySnapshot`. */    get size() {
            return this.docs.length;
        }
        /** True if there are no documents in the `QuerySnapshot`. */    get empty() {
            return 0 === this.docs.length;
        }
        /**
         * Enumerates all of the documents in the `QuerySnapshot`.
         *
         * @param callback - A callback to be called with a `QueryDocumentSnapshot` for
         * each document in the snapshot.
         * @param thisArg - The `this` binding for the callback.
         */    forEach(t, n) {
            this.ue.forEach(t, n);
        }
    }

    /**
     * Returns true if the provided snapshots are equal.
     *
     * @param left - A snapshot to compare.
     * @param right - A snapshot to compare.
     * @returns true if the snapshots are equal.
     */ function Ye(t, n) {
        return t instanceof ie && (t = t.et), n instanceof ie && (n = n.et), t instanceof We && n instanceof We ? t.se === n.se && t.xn.isEqual(n.xn) && (null === t.ie ? null === n.ie : t.ie.isEqual(n.ie)) && t.Sn === n.Sn : t instanceof Ge && n instanceof Ge && (de(t.query, n.query) && ht(t.docs, n.docs, Ye));
    }

    /**
     * Helper that calls fromDotSeparatedString() but wraps any error thrown.
     */ function He(t, n) {
        return "string" == typeof n ? Be(t, n) : n instanceof ie ? n.et.Ln : n.Ln;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A `QueryConstraint` is used to narrow the set of documents returned by a
     * Firestore query. `QueryConstraint`s are created by invoking {@link where},
     * {@link orderBy}, {@link startAt}, {@link startAfter}, {@link
     * endBefore}, {@link endAt}, {@link limit} or {@link limitToLast} and
     * can then be passed to {@link query} to create a new query instance that
     * also contains this `QueryConstraint`.
     */
    class Ke {}

    /**
     * Creates a new immutable instance of `query` that is extended to also include
     * additional query constraints.
     *
     * @param query - The query instance to use as a base for the new constraints.
     * @param queryConstraints - The list of `QueryConstraint`s to apply.
     * @throws if any of the provided query constraints cannot be combined with the
     * existing or new constraints.
     */ function Je(t, ...n) {
        for (const e of n) t = e.ce(t);
        return t;
    }

    class Ze extends Ke {
        constructor(t, n, e) {
            super(), this.ae = t, this.he = n, this.le = e, this.type = "where";
        }
        ce(t) {
            const n = Ve(t.firestore), e = function(t, n, e, s, r, i, o) {
                let u;
                if (r.Y()) {
                    if ("array-contains" /* ARRAY_CONTAINS */ === i || "array-contains-any" /* ARRAY_CONTAINS_ANY */ === i) throw new x(I, `Invalid Query. You can't perform '${i}' queries on FieldPath.documentId().`);
                    if ("in" /* IN */ === i || "not-in" /* NOT_IN */ === i) {
                        ds(o, i);
                        const n = [];
                        for (const e of o) n.push(fs(s, t, e));
                        u = {
                            arrayValue: {
                                values: n
                            }
                        };
                    } else u = fs(s, t, o);
                } else "in" /* IN */ !== i && "not-in" /* NOT_IN */ !== i && "array-contains-any" /* ARRAY_CONTAINS_ANY */ !== i || ds(o, i), 
                u = qe(e, n, o, 
                /* allowArrays= */ "in" /* IN */ === i || "not-in" /* NOT_IN */ === i);
                const c = Mt.create(r, i, u);
                return function(t, n) {
                    if (n.Ot()) {
                        const e = sn(t);
                        if (null !== e && !e.isEqual(n.field)) throw new x(I, `Invalid query. All where filters with an inequality (<, <=, !=, not-in, >, or >=) must be on the same field. But you have inequality filters on '${e.toString()}' and '${n.field.toString()}'`);
                        const s = en(t);
                        null !== s && _s(t, n.field, s);
                    }
                    const e = function(t, n) {
                        for (const e of t.filters) if (n.indexOf(e.op) >= 0) return e.op;
                        return null;
                    }(t, 
                    /**
     * Given an operator, returns the set of operators that cannot be used with it.
     *
     * Operators in a query must adhere to the following set of rules:
     * 1. Only one array operator is allowed.
     * 2. Only one disjunctive operator is allowed.
     * 3. NOT_EQUAL cannot be used with another NOT_EQUAL operator.
     * 4. NOT_IN cannot be used with array, disjunctive, or NOT_EQUAL operators.
     *
     * Array operators: ARRAY_CONTAINS, ARRAY_CONTAINS_ANY
     * Disjunctive operators: IN, ARRAY_CONTAINS_ANY, NOT_IN
     */
                    function(t) {
                        switch (t) {
                          case "!=" /* NOT_EQUAL */ :
                            return [ "!=" /* NOT_EQUAL */ , "not-in" /* NOT_IN */ ];

                          case "array-contains" /* ARRAY_CONTAINS */ :
                            return [ "array-contains" /* ARRAY_CONTAINS */ , "array-contains-any" /* ARRAY_CONTAINS_ANY */ , "not-in" /* NOT_IN */ ];

                          case "in" /* IN */ :
                            return [ "array-contains-any" /* ARRAY_CONTAINS_ANY */ , "in" /* IN */ , "not-in" /* NOT_IN */ ];

                          case "array-contains-any" /* ARRAY_CONTAINS_ANY */ :
                            return [ "array-contains" /* ARRAY_CONTAINS */ , "array-contains-any" /* ARRAY_CONTAINS_ANY */ , "in" /* IN */ , "not-in" /* NOT_IN */ ];

                          case "not-in" /* NOT_IN */ :
                            return [ "array-contains" /* ARRAY_CONTAINS */ , "array-contains-any" /* ARRAY_CONTAINS_ANY */ , "in" /* IN */ , "not-in" /* NOT_IN */ , "!=" /* NOT_EQUAL */ ];

                          default:
                            return [];
                        }
                    }(n.op));
                    if (null !== e) 
                    // Special case when it's a duplicate op to give a slightly clearer error message.
                    throw e === n.op ? new x(I, `Invalid query. You cannot use more than one '${n.op.toString()}' filter.`) : new x(I, `Invalid query. You cannot use '${n.op.toString()}' filters with '${e.toString()}' filters.`);
                }(t, c), c;
            }(t.On, "where", n, t.firestore.Tn, this.ae, this.he, this.le);
            return new ue(t.firestore, t.Sn, function(t, n) {
                const e = t.filters.concat([ n ]);
                return new tn(t.path, t.collectionGroup, t.Ct.slice(), e, t.limit, t.limitType, t.startAt, t.endAt);
            }(t.On, e));
        }
    }

    /**
     * Creates a `QueryConstraint` that enforces that documents must contain the
     * specified field and that the value should satisfy the relation constraint
     * provided.
     *
     * @param fieldPath - The path to compare
     * @param opStr - The operation string (e.g "&lt;", "&lt;=", "==", "&lt;",
     *   "&lt;=", "!=").
     * @param value - The value for comparison
     * @returns The created `Query`.
     */ function Xe(t, n, e) {
        const s = n, r = He("where", t);
        return new Ze(r, s, e);
    }

    class ts extends Ke {
        constructor(t, n) {
            super(), this.ae = t, this.fe = n, this.type = "orderBy";
        }
        ce(t) {
            const n = function(t, n, e) {
                if (null !== t.startAt) throw new x(I, "Invalid query. You must not call startAt() or startAfter() before calling orderBy().");
                if (null !== t.endAt) throw new x(I, "Invalid query. You must not call endAt() or endBefore() before calling orderBy().");
                const s = new Jt(n, e);
                return function(t, n) {
                    if (null === en(t)) {
                        // This is the first order by. It must match any inequality.
                        const e = sn(t);
                        null !== e && _s(t, e, n.field);
                    }
                }(t, s), s;
            }
            /**
     * Create a Bound from a query and a document.
     *
     * Note that the Bound will always include the key of the document
     * and so only the provided document will compare equal to the returned
     * position.
     *
     * Will throw if the document does not contain all fields of the order by
     * of the query or if any of the fields in the order by are an uncommitted
     * server timestamp.
     */ (t.On, this.ae, this.fe);
            return new ue(t.firestore, t.Sn, function(t, n) {
                // TODO(dimond): validate that orderBy does not list the same key twice.
                const e = t.Ct.concat([ n ]);
                return new tn(t.path, t.collectionGroup, e, t.filters.slice(), t.limit, t.limitType, t.startAt, t.endAt);
            }(t.On, n));
        }
    }

    /**
     * Creates a `QueryConstraint` that sorts the query result by the
     * specified field, optionally in descending order instead of ascending.
     *
     * @param fieldPath - The field to sort by.
     * @param directionStr - Optional direction to sort by ('asc' or 'desc'). If
     * not specified, order will be ascending.
     * @returns The created `Query`.
     */ function ns(t, n = "asc") {
        const e = n, s = He("orderBy", t);
        return new ts(s, e);
    }

    class es extends Ke {
        constructor(t, n, e) {
            super(), this.type = t, this.de = n, this._e = e;
        }
        ce(t) {
            return new ue(t.firestore, t.Sn, function(t, n, e) {
                return new tn(t.path, t.collectionGroup, t.Ct.slice(), t.filters.slice(), n, e, t.startAt, t.endAt);
            }(t.On, this.de, this._e));
        }
    }

    /**
     * Creates a `QueryConstraint` that only returns the first matching documents.
     *
     * @param limit - The maximum number of items to return.
     * @returns The created `Query`.
     */ function ss(t) {
        return Z("limit", t), new es("limit", t, "F" /* First */);
    }

    /**
     * Creates a `QueryConstraint` that only returns the last matching documents.
     *
     * You must specify at least one `orderBy` clause for `limitToLast` queries,
     * otherwise an exception will be thrown during execution.
     *
     * @param limit - The maximum number of items to return.
     * @returns The created `Query`.
     */ function rs(t) {
        return Z("limitToLast", t), new es("limitToLast", t, "L" /* Last */);
    }

    class is extends Ke {
        constructor(t, n, e) {
            super(), this.type = t, this.we = n, this.me = e;
        }
        ce(t) {
            const n = ls(t, this.type, this.we, this.me);
            return new ue(t.firestore, t.Sn, function(t, n) {
                return new tn(t.path, t.collectionGroup, t.Ct.slice(), t.filters.slice(), t.limit, t.limitType, n, t.endAt);
            }(t.On, n));
        }
    }

    function os(...t) {
        return new is("startAt", t, /*before=*/ !0);
    }

    function us(...t) {
        return new is("startAfter", t, 
        /*before=*/ !1);
    }

    class cs extends Ke {
        constructor(t, n, e) {
            super(), this.type = t, this.we = n, this.me = e;
        }
        ce(t) {
            const n = ls(t, this.type, this.we, this.me);
            return new ue(t.firestore, t.Sn, function(t, n) {
                return new tn(t.path, t.collectionGroup, t.Ct.slice(), t.filters.slice(), t.limit, t.limitType, t.startAt, n);
            }(t.On, n));
        }
    }

    function as(...t) {
        return new cs("endBefore", t, /*before=*/ !0);
    }

    function hs(...t) {
        return new cs("endAt", t, /*before=*/ !1);
    }

    /** Helper function to create a bound from a document or fields */ function ls(t, n, e, s) {
        if (e[0] instanceof ie && (e[0] = e[0].et), e[0] instanceof We) return function(t, n, e, s, r) {
            if (!s) throw new x(A, `Can't use a DocumentSnapshot that doesn't exist for ${e}().`);
            const i = [];
            // Because people expect to continue/end a query at the exact document
            // provided, we need to use the implicit sort order rather than the explicit
            // sort order, because it's guaranteed to contain the document key. That way
            // the position becomes unambiguous and the query continues/ends exactly at
            // the provided document. Without the key (by using the explicit sort
            // orders), multiple documents could match the position, yielding duplicate
            // results.
                    for (const e of on(t)) if (e.field.Y()) i.push(Nt(n, s.key)); else {
                const t = s.field(e.field);
                if (Tt(t)) throw new x(I, 'Invalid query. You are trying to start or end a query using a document for which the field "' + e.field + '" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');
                if (null === t) {
                    const t = e.field.B();
                    throw new x(I, `Invalid query. You are trying to start or end a query using a document for which the field '${t}' (used as the orderBy) does not exist.`);
                }
                i.push(t);
            }
            return new Kt(i, r);
        }
        /**
     * Converts a list of field values to a Bound for the given query.
     */ (t.On, t.firestore.Tn, n, e[0].ie, s);
        {
            const r = Ve(t.firestore);
            return function(t, n, e, s, r, i) {
                // Use explicit order by's because it has to match the query the user made
                const o = t.Ct;
                if (r.length > o.length) throw new x(I, `Too many arguments provided to ${s}(). The number of arguments must be less than or equal to the number of orderBy() clauses`);
                const u = [];
                for (let i = 0; i < r.length; i++) {
                    const c = r[i];
                    if (o[i].field.Y()) {
                        if ("string" != typeof c) throw new x(I, `Invalid query. Expected a string for document ID in ${s}(), but got a ${typeof c}`);
                        if (!rn(t) && -1 !== c.indexOf("/")) throw new x(I, `Invalid query. When querying a collection and ordering by FieldPath.documentId(), the value passed to ${s}() must be a plain document ID, but '${c}' contains a slash.`);
                        const e = t.path.child(k.k(c));
                        if (!z.tt(e)) throw new x(I, `Invalid query. When querying a collection group and ordering by FieldPath.documentId(), the value passed to ${s}() must result in a valid document path, but '${e}' is not because it contains an odd number of segments.`);
                        const r = new z(e);
                        u.push(Nt(n, r));
                    } else {
                        const t = qe(e, s, c);
                        u.push(t);
                    }
                }
                return new Kt(u, i);
            }
            /**
     * Parses the given documentIdValue into a ReferenceValue, throwing
     * appropriate errors if the value is anything other than a DocumentReference
     * or String, or if the string is malformed.
     */ (t.On, t.firestore.Tn, r, n, e, s);
        }
    }

    function fs(t, n, e) {
        if (e instanceof ie && (e = e.et), "string" == typeof e) {
            if ("" === e) throw new x(I, "Invalid query. When querying with FieldPath.documentId(), you must provide a valid document ID, but it was an empty string.");
            if (!rn(n) && -1 !== e.indexOf("/")) throw new x(I, `Invalid query. When querying a collection by FieldPath.documentId(), you must provide a plain document ID, but '${e}' contains a '/' character.`);
            const s = n.path.child(k.k(e));
            if (!z.tt(s)) throw new x(I, `Invalid query. When querying a collection group by FieldPath.documentId(), the value provided must result in a valid document path, but '${s}' is not because it has an odd number of segments (${s.length}).`);
            return Nt(t, new z(s));
        }
        if (e instanceof oe) return Nt(t, e.xn);
        throw new x(I, `Invalid query. When querying with FieldPath.documentId(), you must provide a valid string or a DocumentReference, but it was: ${K(e)}.`);
    }

    /**
     * Validates that the value passed into a disjunctive filter satisfies all
     * array requirements.
     */ function ds(t, n) {
        if (!Array.isArray(t) || 0 === t.length) throw new x(I, `Invalid Query. A non-empty array is required for '${n.toString()}' filters.`);
        if (t.length > 10) throw new x(I, `Invalid Query. '${n.toString()}' filters support a maximum of 10 elements in the value array.`);
    }

    function _s(t, n, e) {
        if (!e.isEqual(n)) throw new x(I, `Invalid query. You have a where filter with an inequality (<, <=, !=, not-in, >, or >=) on field '${n.toString()}' and so you must also use '${n.toString()}' as your first argument to orderBy(), but your first orderBy() is on field '${e.toString()}' instead.`);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Converts custom model object of type T into DocumentData by applying the
     * converter if it exists.
     *
     * This function is used when converting user objects to DocumentData
     * because we want to provide the user with a more specific error message if
     * their set() or fails due to invalid data originating from a toFirestore()
     * call.
     */ function ws(t, n, e) {
        let s;
        // Cast to `any` in order to satisfy the union type constraint on
        // toFirestore().
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return s = t ? e && (e.merge || e.mergeFields) ? t.toFirestore(n, e) : t.toFirestore(n) : n, 
        s;
    }

    class ms extends class {
        oe(t, n = "none") {
            switch (Rt(t)) {
              case 0 /* NullValue */ :
                return null;

              case 1 /* BooleanValue */ :
                return t.booleanValue;

              case 2 /* NumberValue */ :
                return Et(t.integerValue || t.doubleValue);

              case 3 /* TimestampValue */ :
                return this.pe(t.timestampValue);

              case 4 /* ServerTimestampValue */ :
                return this.ye(t, n);

              case 5 /* StringValue */ :
                return t.stringValue;

              case 6 /* BlobValue */ :
                return this.Ee(It(t.bytesValue));

              case 7 /* RefValue */ :
                return this.Ie(t.referenceValue);

              case 8 /* GeoPointValue */ :
                return this.Te(t.geoPointValue);

              case 9 /* ArrayValue */ :
                return this.Ae(t.arrayValue, n);

              case 10 /* ObjectValue */ :
                return this.Pe(t.mapValue, n);

              default:
                throw _();
            }
        }
        Pe(t, n) {
            const e = {};
            return _t(t.fields || {}, ((t, s) => {
                e[t] = this.oe(s, n);
            })), e;
        }
        Te(t) {
            return new ye(Et(t.latitude), Et(t.longitude));
        }
        Ae(t, n) {
            return (t.values || []).map((t => this.oe(t, n)));
        }
        ye(t, n) {
            switch (n) {
              case "previous":
                const e = At(t);
                return null == e ? null : this.oe(e, n);

              case "estimate":
                return this.pe(Pt(t));

              default:
                return null;
            }
        }
        pe(t) {
            const n = yt(t);
            return new lt(n.seconds, n.nanos);
        }
        Re(t, n) {
            const e = k.k(t);
            w(kn(e));
            const s = new M(e.get(1), e.get(3)), r = new z(e.S(5));
            return s.isEqual(n) || 
            // TODO(b/64130202): Somehow support foreign references.
            l(`Document ${r} contains a document reference within a different database (${s.projectId}/${s.database}) which is not supported. It will be treated as a reference in the current database (${n.projectId}/${n.database}) instead.`), 
            r;
        }
    } {
        constructor(t) {
            super(), this.firestore = t;
        }
        Ee(t) {
            return new _e(t);
        }
        Ie(t) {
            const n = this.Re(t, this.firestore.Tn);
            return new oe(this.firestore, /* converter= */ null, n);
        }
    }

    /**
     * Reads the document referred to by the specified document reference.
     *
     * All documents are directly fetched from the server, even if the document was
     * previously read or modified. Recent modifications are only reflected in the
     * retrieved `DocumentSnapshot` if they have already been applied by the
     * backend. If the client is offline, the read fails. If you like to use
     * caching or see local modifications, please use the full Firestore SDK.
     *
     * @param reference - The reference of the document to fetch.
     * @returns A Promise resolved with a `DocumentSnapshot` containing the current
     * document contents.
     */ function ps(t) {
        const n = Xn((t = J(t, oe)).firestore), e = new ms(t.firestore);
        return Hn(n, [ t.xn ]).then((n => {
            w(1 === n.length);
            const s = n[0];
            return new We(t.firestore, e, t.xn, s instanceof Ct ? s : null, t.Sn);
        }));
    }

    /**
     * Executes the query and returns the results as a {@link QuerySnapshot}.
     *
     * All queries are executed directly by the server, even if the the query was
     * previously executed. Recent modifications are only reflected in the retrieved
     * results if they have already been applied by the backend. If the client is
     * offline, the operation fails. To see previously cached result and local
     * modifications, use the full Firestore SDK.
     *
     * @param query - The `Query` to execute.
     * @returns A Promise that will be resolved with the results of the query.
     */ function ys(t) {
        !function(t) {
            if (nn(t) && 0 === t.Ct.length) throw new x($, "limitToLast() queries require specifying at least one orderBy() clause");
        }((t = J(t, ue)).On);
        const n = Xn(t.firestore), e = new ms(t.firestore);
        return Kn(n, t.On).then((n => {
            const s = n.map((n => new ze(t.firestore, e, n.key, n, t.Sn)));
            return nn(t.On) && 
            // Limit to last queries reverse the orderBy constraint that was
            // specified by the user. As such, we need to reverse the order of the
            // results to return the documents in the expected order.
            s.reverse(), new Ge(t, s);
        }));
    }

    function Es(t, n, e) {
        const s = ws((t = J(t, oe)).Sn, n, e), r = ge(Ve(t.firestore), "setDoc", t.xn, s, null !== t.Sn, e);
        return Yn(Xn(t.firestore), [ r.Mn(t.xn, mn.Qt()) ]);
    }

    function Is(t, n, e, ...s) {
        const r = Ve((t = J(t, oe)).firestore);
        // For Compat types, we have to "extract" the underlying types before
        // performing validation.
            let i;
        n instanceof ie && (n = n.et), i = "string" == typeof n || n instanceof we ? xe(r, "updateDoc", t.xn, n, e, s) : Se(r, "updateDoc", t.xn, n);
        return Yn(Xn(t.firestore), [ i.Mn(t.xn, mn.exists(!0)) ]);
    }

    /**
     * Deletes the document referred to by the specified `DocumentReference`.
     *
     * The deletion will only be reflected in document reads that occur after the
     * returned Promise resolves. If the client is offline, the
     * delete fails. If you would like to see local modifications or buffer writes
     * until the client is online, use the full Firestore SDK.
     *
     * @param reference - A reference to the document to delete.
     * @returns A Promise resolved once the document has been successfully
     * deleted from the backend.
     */ function Ts(t) {
        return Yn(Xn((t = J(t, oe)).firestore), [ new In(t.xn, mn.Qt()) ]);
    }

    /**
     * Add a new document to specified `CollectionReference` with the given data,
     * assigning it a document ID automatically.
     *
     * The result of this write will only be reflected in document reads that occur
     * after the returned Promise resolves. If the client is offline, the
     * write fails. If you would like to see local modifications or buffer writes
     * until the client is online, use the full Firestore SDK.
     *
     * @param reference - A reference to the collection to add this document to.
     * @param data - An Object containing the data for the new document.
     * @returns A Promise resolved with a `DocumentReference` pointing to the
     * newly created document after it has been written to the backend.
     */ function As(t, n) {
        const e = le(t = J(t, ce)), s = ws(t.Sn, n), r = ge(Ve(t.firestore), "addDoc", e.xn, s, null !== e.Sn, {});
        return Yn(Xn(t.firestore), [ r.Mn(e.xn, mn.exists(!1)) ]).then((() => e));
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns a sentinel for use with {@link updateDoc} or
     * {@link setDoc} with `{merge: true}` to mark a field for deletion.
     */ function Ps() {
        return new be("deleteField");
    }

    /**
     * Returns a sentinel used with {@link setDoc} or {@link updateDoc} to
     * include a server-generated timestamp in the written data.
     */ function Rs() {
        return new Ne("serverTimestamp");
    }

    /**
     * Returns a special value that can be used with {@link setDoc} or {@link
     * updateDoc} that tells the server to union the given elements with any array
     * value that already exists on the server. Each specified element that doesn't
     * already exist in the array will be added to the end. If the field being
     * modified is not already an array it will be overwritten with an array
     * containing exactly the specified elements.
     *
     * @param elements - The elements to union into the array.
     * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or
     * `updateDoc()`.
     */ function Vs(...t) {
        // NOTE: We don't actually parse the data until it's used in set() or
        // update() since we'd need the Firestore instance to do this.
        return new $e("arrayUnion", t);
    }

    /**
     * Returns a special value that can be used with {@link (setDoc:1)} or {@link
     * updateDoc} that tells the server to remove the given elements from any
     * array value that already exists on the server. All instances of each element
     * specified will be removed from the array. If the field being modified is not
     * already an array it will be overwritten with an empty array.
     *
     * @param elements - The elements to remove from the array.
     * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or
     * `updateDoc()`
     */ function gs(...t) {
        // NOTE: We don't actually parse the data until it's used in set() or
        // update() since we'd need the Firestore instance to do this.
        return new De("arrayRemove", t);
    }

    /**
     * Returns a special value that can be used with {@link setDoc} or {@link
     * updateDoc} that tells the server to increment the field's current value by
     * the given value.
     *
     * If either the operand or the current field value uses floating point
     * precision, all arithmetic follows IEEE 754 semantics. If both values are
     * integers, values outside of JavaScript's safe number range
     * (`Number.MIN_SAFE_INTEGER` to `Number.MAX_SAFE_INTEGER`) are also subject to
     * precision loss. Furthermore, once processed by the Firestore backend, all
     * integer operations are capped between -2^63 and 2^63-1.
     *
     * If the current field value is not of type `number`, or if the field does not
     * yet exist, the transformation sets the field to the given value.
     *
     * @param n - The value to increment by.
     * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or
     * `updateDoc()`
     */ function bs(t) {
        return new Fe("increment", t);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A write batch, used to perform multiple writes as a single atomic unit.
     *
     * A `WriteBatch` object can be acquired by calling {@link writeBatch}. It
     * provides methods for adding writes to the write batch. None of the writes
     * will be committed (or visible locally) until {@link WriteBatch#commit} is
     * called.
     */ class vs {
        /** @hideconstructor */
        constructor(t, n) {
            this.se = t, this.Ve = n, this.ge = [], this.be = !1, this.ve = Ve(t);
        }
        set(t, n, e) {
            this.Ne();
            const s = Ns(t, this.se), r = ws(s.Sn, n, e), i = ge(this.ve, "WriteBatch.set", s.xn, r, null !== s.Sn, e);
            return this.ge.push(i.Mn(s.xn, mn.Qt())), this;
        }
        update(t, n, e, ...s) {
            this.Ne();
            const r = Ns(t, this.se);
            // For Compat types, we have to "extract" the underlying types before
            // performing validation.
                    let i;
            return n instanceof ie && (n = n.et), i = "string" == typeof n || n instanceof we ? xe(this.ve, "WriteBatch.update", r.xn, n, e, s) : Se(this.ve, "WriteBatch.update", r.xn, n), 
            this.ge.push(i.Mn(r.xn, mn.exists(!0))), this;
        }
        /**
         * Deletes the document referred to by the provided {@link DocumentReference}.
         *
         * @param documentRef - A reference to the document to be deleted.
         * @returns This `WriteBatch` instance. Used for chaining method calls.
         */    delete(t) {
            this.Ne();
            const n = Ns(t, this.se);
            return this.ge = this.ge.concat(new In(n.xn, mn.Qt())), this;
        }
        /**
         * Commits all of the writes in this write batch as a single atomic unit.
         *
         * The result of these writes will only be reflected in document reads that
         * occur after the returned Promise resolves. If the client is offline, the
         * write fails. If you would like to see local modifications or buffer writes
         * until the client is online, use the full Firestore SDK.
         *
         * @returns A Promise resolved once all of the writes in the batch have been
         * successfully written to the backend as an atomic unit (note that it won't
         * resolve while you're offline).
         */    commit() {
            return this.Ne(), this.be = !0, this.ge.length > 0 ? this.Ve(this.ge) : Promise.resolve();
        }
        Ne() {
            if (this.be) throw new x(b, "A write batch can no longer be used after commit() has been called.");
        }
    }

    function Ns(t, n) {
        if (t instanceof ie && (t = t.et), t.firestore !== n) throw new x(I, "Provided document reference is from a different Firestore instance.");
        return t;
    }

    /**
     * Creates a write batch, used for performing multiple writes as a single
     * atomic operation. The maximum number of writes allowed in a single WriteBatch
     * is 500.
     *
     * The result of these writes will only be reflected in document reads that
     * occur after the returned Promise resolves. If the client is offline, the
     * write fails. If you would like to see local modifications or buffer writes
     * until the client is online, use the full Firestore SDK.
     *
     * @returns A `WriteBatch` that can be used to atomically execute multiple
     * writes.
     */ function $s(t) {
        const n = Xn(t = J(t, te));
        return new vs(t, (t => Yn(n, t)));
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Internal transaction object responsible for accumulating the mutations to
     * perform and the base versions for any documents read.
     */ class Ds {
        constructor(t) {
            this.$e = t, 
            // The version of each document that was read during this transaction.
            this.De = new Map, this.mutations = [], this.Fe = !1, 
            /**
             * A deferred usage error that occurred previously in this transaction that
             * will cause the transaction to fail once it actually commits.
             */
            this.Se = null, 
            /**
             * Set of documents that have been written in the transaction.
             *
             * When there's more than one write to the same key in a transaction, any
             * writes after the first are handled differently.
             */
            this.xe = new Set;
        }
        async qe(t) {
            if (this.Oe(), this.mutations.length > 0) throw new x(I, "Firestore transactions require all reads to be executed before all writes.");
            const n = await Hn(this.$e, t);
            return n.forEach((t => {
                t instanceof Lt || t instanceof Ct ? this.Ce(t) : _();
            })), n;
        }
        set(t, n) {
            this.write(n.Mn(t, this.zt(t))), this.xe.add(t.toString());
        }
        update(t, n) {
            try {
                this.write(n.Mn(t, this.Le(t)));
            } catch (t) {
                this.Se = t;
            }
            this.xe.add(t.toString());
        }
        delete(t) {
            this.write(new In(t, this.zt(t))), this.xe.add(t.toString());
        }
        async commit() {
            if (this.Oe(), this.Se) throw this.Se;
            const t = this.De;
            // For each mutation, note that the doc was written.
                    this.mutations.forEach((n => {
                t.delete(n.key.toString());
            })), 
            // For each document that was read but not written to, we want to perform
            // a `verify` operation.
            t.forEach(((t, n) => {
                const e = z.J(n);
                this.mutations.push(new Tn(e, this.zt(e)));
            })), await Yn(this.$e, this.mutations), this.Fe = !0;
        }
        Ce(t) {
            let n;
            if (t instanceof Ct) n = t.version; else {
                if (!(t instanceof Lt)) throw _();
                // For deleted docs, we must use baseVersion 0 when we overwrite them.
                n = ft.min();
            }
            const e = this.De.get(t.key.toString());
            if (e) {
                if (!n.isEqual(e)) 
                // This transaction will fail no matter what.
                throw new x(v, "Document version changed between two reads.");
            } else this.De.set(t.key.toString(), n);
        }
        /**
         * Returns the version of this document when it was read in this transaction,
         * as a precondition, or no precondition if it was not read.
         */    zt(t) {
            const n = this.De.get(t.toString());
            return !this.xe.has(t.toString()) && n ? mn.updateTime(n) : mn.Qt();
        }
        /**
         * Returns the precondition for a document if the operation is an update.
         */    Le(t) {
            const n = this.De.get(t.toString());
            // The first time a document is written, we want to take into account the
            // read time and existence
                    if (!this.xe.has(t.toString()) && n) {
                if (n.isEqual(ft.min())) 
                // The document doesn't exist, so fail the transaction.
                // This has to be validated locally because you can't send a
                // precondition that a document does not exist without changing the
                // semantics of the backend write to be an insert. This is the reverse
                // of what we want, since we want to assert that the document doesn't
                // exist but then send the update and have it fail. Since we can't
                // express that to the backend, we have to validate locally.
                // Note: this can change once we can send separate verify writes in the
                // transaction.
                throw new x(I, "Can't update a document that doesn't exist.");
                // Document exists, base precondition on document update time.
                            return mn.updateTime(n);
            }
            // Document was not read, so we just use the preconditions for a blind
            // update.
            return mn.exists(!0);
        }
        write(t) {
            this.Oe(), this.mutations.push(t);
        }
        Oe() {}
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * TransactionRunner encapsulates the logic needed to run and retry transactions
     * with backoff.
     */
    class Fs {
        constructor(t, n, e, s) {
            this.Yt = t, this.$e = n, this.updateFunction = e, this.Zt = s, this.Ue = 5, this.je = new zn(this.Yt, "transaction_retry" /* TransactionRetry */);
        }
        /** Runs the transaction and sets the result on deferred. */    run() {
            this.Me();
        }
        Me() {
            this.je.dn((async () => {
                const t = new Ds(this.$e), n = this.Be(t);
                n && n.then((n => {
                    this.Yt.sn((() => t.commit().then((() => {
                        this.Zt.resolve(n);
                    })).catch((t => {
                        this.ke(t);
                    }))));
                })).catch((t => {
                    this.ke(t);
                }));
            }));
        }
        Be(t) {
            try {
                const n = this.updateFunction(t);
                return !X(n) && n.catch && n.then ? n : (this.Zt.reject(Error("Transaction callback must return a Promise")), 
                null);
            } catch (t) {
                // Do not retry errors thrown by user provided updateFunction.
                return this.Zt.reject(t), null;
            }
        }
        ke(t) {
            this.Ue > 0 && this.Qe(t) ? (this.Ue -= 1, this.Yt.sn((() => (this.Me(), Promise.resolve())))) : this.Zt.reject(t);
        }
        Qe(t) {
            if ("FirebaseError" === t.name) {
                // In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and
                // non-matching document versions with ABORTED. These errors should be retried.
                const n = t.code;
                return "aborted" === n || "failed-precondition" === n || !
                /**
     * Determines whether an error code represents a permanent error when received
     * in response to a non-write operation.
     *
     * See isPermanentWriteError for classifying write errors.
     */
                function(t) {
                    switch (t) {
                      case p:
                        return _();

                      case y:
                      case E:
                      case T:
                      case g:
                      case D:
                      case F:
     // Unauthenticated means something went wrong with our token and we need
                        // to retry with new credentials which will happen automatically.
                                          case V:
                        return !1;

                      case I:
                      case A:
                      case P:
                      case R:
                      case b:
     // Aborted might be retried in some scenarios, but that is dependant on
                        // the context and should handled individually by the calling code.
                        // See https://cloud.google.com/apis/design/errors.
                                          case v:
                      case N:
                      case $:
                      case S:
                        return !0;

                      default:
                        return _();
                    }
                }(n);
            }
            return !1;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** The Platform's 'document' implementation or null if not available. */ function Ss() {
        // `document` is not always available, e.g. in ReactNative and WebWorkers.
        // eslint-disable-next-line no-restricted-globals
        return "undefined" != typeof document ? document : null;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class xs {
        constructor() {
            // The last promise in the queue.
            this.We = Promise.resolve(), 
            // A list of retryable operations. Retryable operations are run in order and
            // retried with backoff.
            this.ze = [], 
            // Is this AsyncQueue being shut down? Once it is set to true, it will not
            // be changed again.
            this.Ge = !1, 
            // Operations scheduled to be queued in the future. Operations are
            // automatically removed after they are run or canceled.
            this.Ye = [], 
            // visible for testing
            this.He = null, 
            // Flag set while there's an outstanding AsyncQueue operation, used for
            // assertion sanity-checks.
            this.Ke = !1, 
            // List of TimerIds to fast-forward delays for.
            this.Je = [], 
            // Backoff timer used to schedule retries for retryable operations
            this.je = new zn(this, "async_queue_retry" /* AsyncQueueRetry */), 
            // Visibility handler that triggers an immediate retry of all retryable
            // operations. Meant to speed up recovery when we regain file system access
            // after page comes into foreground.
            this.Ze = () => {
                const t = Ss();
                t && h("AsyncQueue", "Visibility state changed to " + t.visibilityState), this.je.mn();
            };
            const t = Ss();
            t && "function" == typeof t.addEventListener && t.addEventListener("visibilitychange", this.Ze);
        }
        get Xe() {
            return this.Ge;
        }
        /**
         * Adds a new operation to the queue without waiting for it to complete (i.e.
         * we ignore the Promise result).
         */    sn(t) {
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.enqueue(t);
        }
        ts(t) {
            this.ns(), 
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.es(t);
        }
        ss() {
            if (!this.Ge) {
                this.Ge = !0;
                const t = Ss();
                t && "function" == typeof t.removeEventListener && t.removeEventListener("visibilitychange", this.Ze);
            }
        }
        enqueue(t) {
            return this.ns(), this.Ge ? new Promise((t => {})) : this.es(t);
        }
        rs(t) {
            this.sn((() => (this.ze.push(t), this.os())));
        }
        /**
         * Runs the next operation from the retryable queue. If the operation fails,
         * reschedules with backoff.
         */    async os() {
            if (0 !== this.ze.length) {
                try {
                    await this.ze[0](), this.ze.shift(), this.je.reset();
                } catch (t) {
                    if (!function(t) {
                        // Use name equality, as instanceof checks on errors don't work with errors
                        // that wrap other errors.
                        return "IndexedDbTransactionError" === t.name;
                    }(t)) throw t;
     // Failure will be handled by AsyncQueue
                                    h("AsyncQueue", "Operation failed with retryable error: " + t);
                }
                this.ze.length > 0 && 
                // If there are additional operations, we re-schedule `retryNextOp()`.
                // This is necessary to run retryable operations that failed during
                // their initial attempt since we don't know whether they are already
                // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`
                // needs to  be re-run, we will run `op1`, `op1`, `op2` using the
                // already enqueued calls to `retryNextOp()`. `op3()` will then run in the
                // call scheduled here.
                // Since `backoffAndRun()` cancels an existing backoff and schedules a
                // new backoff on every call, there is only ever a single additional
                // operation in the queue.
                this.je.dn((() => this.os()));
            }
        }
        es(t) {
            const n = this.We.then((() => (this.Ke = !0, t().catch((t => {
                this.He = t, this.Ke = !1;
                // Re-throw the error so that this.tail becomes a rejected Promise and
                // all further attempts to chain (via .then) will just short-circuit
                // and return the rejected Promise.
                throw l("INTERNAL UNHANDLED ERROR: ", 
                /**
     * Chrome includes Error.message in Error.stack. Other browsers do not.
     * This returns expected output of message + stack when available.
     * @param error - Error or FirestoreError
     */
                function(t) {
                    let n = t.message || "";
                    t.stack && (n = t.stack.includes(t.message) ? t.stack : t.message + "\n" + t.stack);
                    return n;
                }
                /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
                // TODO(mrschmidt) Consider using `BaseTransaction` as the base class in the
                // legacy SDK.
                /**
     * A reference to a transaction.
     *
     * The `Transaction` object passed to a transaction's `updateFunction` provides
     * the methods to read and write data within the transaction context. See
     * {@link runTransaction}.
     */ (t)), t;
            })).then((t => (this.Ke = !1, t))))));
            return this.We = n, n;
        }
        wn(t, n, e) {
            this.ns(), 
            // Fast-forward delays for timerIds that have been overriden.
            this.Je.indexOf(t) > -1 && (n = 0);
            const s = Wn.Xt(this, t, n, e, (t => this.us(t)));
            return this.Ye.push(s), s;
        }
        ns() {
            this.He && _();
        }
        cs() {}
        /**
         * Waits until all currently queued tasks are finished executing. Delayed
         * operations are not run.
         */    async hs() {
            // Operations in the queue prior to draining may have enqueued additional
            // operations. Keep draining the queue until the tail is no longer advanced,
            // which indicates that no more new operations were enqueued and that all
            // operations were executed.
            let t;
            do {
                t = this.We, await t;
            } while (t !== this.We);
        }
        /**
         * For Tests: Determine if a delayed operation with a particular TimerId
         * exists.
         */    ls(t) {
            for (const n of this.Ye) if (n.Ht === t) return !0;
            return !1;
        }
        /**
         * For Tests: Runs some or all delayed operations early.
         *
         * @param lastTimerId - Delayed operations up to and including this TimerId
         * will be drained. Pass TimerId.All to run all delayed operations.
         * @returns a Promise that resolves once all operations have been run.
         */    fs(t) {
            // Note that draining may generate more delayed ops, so we do that first.
            return this.hs().then((() => {
                // Run ops in the same order they'd run if they ran naturally.
                this.Ye.sort(((t, n) => t.Kt - n.Kt));
                for (const n of this.Ye) if (n.en(), "all" /* All */ !== t && n.Ht === t) break;
                return this.hs();
            }));
        }
        /**
         * For Tests: Skip all subsequent delays for a timer id.
         */    ds(t) {
            this.Je.push(t);
        }
        /** Called once a DelayedOperation is run or canceled. */    us(t) {
            // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.
            const n = this.Ye.indexOf(t);
            this.Ye.splice(n, 1);
        }
    }

    class qs {
        /** @hideconstructor */
        constructor(t, n) {
            this.se = t, this._s = n, this.ve = Ve(t);
        }
        /**
         * Reads the document referenced by the provided {@link DocumentReference}.
         *
         * @param documentRef - A reference to the document to be read.
         * @returns A `DocumentSnapshot` with the read data.
         */    get(t) {
            const n = Ns(t, this.se), e = new ms(this.se);
            return this._s.qe([ n.xn ]).then((t => {
                if (!t || 1 !== t.length) return _();
                const s = t[0];
                if (s instanceof Lt) return new We(this.se, e, n.xn, null, n.Sn);
                if (s instanceof Ct) return new We(this.se, e, s.key, s, n.Sn);
                throw _();
            }));
        }
        set(t, n, e) {
            const s = Ns(t, this.se), r = ws(s.Sn, n, e), i = ge(this.ve, "Transaction.set", s.xn, r, null !== s.Sn, e);
            return this._s.set(s.xn, i), this;
        }
        update(t, n, e, ...s) {
            const r = Ns(t, this.se);
            // For Compat types, we have to "extract" the underlying types before
            // performing validation.
                    let i;
            return n instanceof ie && (n = n.et), i = "string" == typeof n || n instanceof we ? xe(this.ve, "Transaction.update", r.xn, n, e, s) : Se(this.ve, "Transaction.update", r.xn, n), 
            this._s.update(r.xn, i), this;
        }
        /**
         * Deletes the document referred to by the provided {@link DocumentReference}.
         *
         * @param documentRef - A reference to the document to be deleted.
         * @returns This `Transaction` instance. Used for chaining method calls.
         */    delete(t) {
            const n = Ns(t, this.se);
            return this._s.delete(n.xn), this;
        }
    }

    /**
     * Executes the given `updateFunction` and then attempts to commit the changes
     * applied within the transaction. If any document read within the transaction
     * has changed, Cloud Firestore retries the `updateFunction`. If it fails to
     * commit after 5 attempts, the transaction fails.
     *
     * The maximum number of writes allowed in a single transaction is 500.
     *
     * @param firestore - A reference to the Firestore database to run this
     * transaction against.
     * @param updateFunction - The function to execute within the transaction
     * context.
     * @returns If the transaction completed successfully or was explicitly aborted
     * (the `updateFunction` returned a failed promise), the promise returned by the
     * `updateFunction `is returned here. Otherwise, if the transaction failed, a
     * rejected promise with the corresponding failure error is returned.
     */ function Os(t, n) {
        const e = Xn(t = J(t, te)), s = new ot;
        return new Fs(new xs, e, (e => n(new qs(t, e))), s).run(), s.promise;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ app._registerComponent(new Component("firestore/lite", (t => ((t, n) => new te(t, n))(t.getProvider("app-exp").getImmediate(), t.getProvider("auth-internal"))), "PUBLIC" /* PUBLIC */)), 
    app.registerVersion("firestore-lite", "0.0.900", "node");

    exports.Bytes = _e;
    exports.CollectionReference = ce;
    exports.DocumentReference = oe;
    exports.DocumentSnapshot = We;
    exports.FieldPath = we;
    exports.FieldValue = pe;
    exports.FirebaseFirestore = te;
    exports.FirestoreError = x;
    exports.GeoPoint = ye;
    exports.Query = ue;
    exports.QueryConstraint = Ke;
    exports.QueryDocumentSnapshot = ze;
    exports.QuerySnapshot = Ge;
    exports.Timestamp = lt;
    exports.Transaction = qs;
    exports.WriteBatch = vs;
    exports.addDoc = As;
    exports.arrayRemove = gs;
    exports.arrayUnion = Vs;
    exports.collection = ae;
    exports.collectionGroup = he;
    exports.deleteDoc = Ts;
    exports.deleteField = Ps;
    exports.doc = le;
    exports.documentId = me;
    exports.endAt = hs;
    exports.endBefore = as;
    exports.getDoc = ps;
    exports.getDocs = ys;
    exports.getFirestore = ee;
    exports.increment = bs;
    exports.initializeFirestore = ne;
    exports.limit = ss;
    exports.limitToLast = rs;
    exports.orderBy = ns;
    exports.query = Je;
    exports.queryEqual = de;
    exports.refEqual = fe;
    exports.runTransaction = Os;
    exports.serverTimestamp = Rs;
    exports.setDoc = Es;
    exports.setLogLevel = a;
    exports.snapshotEqual = Ye;
    exports.startAfter = us;
    exports.startAt = os;
    exports.terminate = re;
    exports.updateDoc = Is;
    exports.useFirestoreEmulator = se;
    exports.where = Xe;
    exports.writeBatch = $s;

    Object.defineProperty(exports, '__esModule', { value: true });


              }).apply(this, arguments);
            } catch(err) {
                console.error(err);
                throw new Error(
                  'Cannot instantiate firebase-firestore-lite.js - ' +
                  'be sure to load firebase-app.js first.'
                );
              }

})));


(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@firebase/app')) :
    typeof define === 'function' && define.amd ? define(['exports', '@firebase/app'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.firebase = global.firebase || {}, global.firebase.storage = global.firebase.storage || {}), global.firebase.app));
}(this, (function (exports, app) { 'use strict';

    try {
                (function() {

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ERROR_NAME = 'FirebaseError';
    // Based on code from:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
    var FirebaseError = /** @class */ (function (_super) {
        __extends(FirebaseError, _super);
        function FirebaseError(code, message, customData) {
            var _this = _super.call(this, message) || this;
            _this.code = code;
            _this.customData = customData;
            _this.name = ERROR_NAME;
            // Fix For ES5
            // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
            Object.setPrototypeOf(_this, FirebaseError.prototype);
            // Maintains proper stack trace for where our error was thrown.
            // Only available on V8.
            if (Error.captureStackTrace) {
                Error.captureStackTrace(_this, ErrorFactory.prototype.create);
            }
            return _this;
        }
        return FirebaseError;
    }(Error));
    var ErrorFactory = /** @class */ (function () {
        function ErrorFactory(service, serviceName, errors) {
            this.service = service;
            this.serviceName = serviceName;
            this.errors = errors;
        }
        ErrorFactory.prototype.create = function (code) {
            var data = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                data[_i - 1] = arguments[_i];
            }
            var customData = data[0] || {};
            var fullCode = this.service + "/" + code;
            var template = this.errors[code];
            var message = template ? replaceTemplate(template, customData) : 'Error';
            // Service Name: Error message (service/code).
            var fullMessage = this.serviceName + ": " + message + " (" + fullCode + ").";
            var error = new FirebaseError(fullCode, fullMessage, customData);
            return error;
        };
        return ErrorFactory;
    }());
    function replaceTemplate(template, data) {
        return template.replace(PATTERN, function (_, key) {
            var value = data[key];
            return value != null ? String(value) : "<" + key + "?>";
        });
    }
    var PATTERN = /\{\$([^}]+)}/g;

    /**
     * Component for service name T, e.g. `auth`, `auth-internal`
     */
    var Component = /** @class */ (function () {
        /**
         *
         * @param name The public service name, e.g. app, auth, firestore, database
         * @param instanceFactory Service factory responsible for creating the public interface
         * @param type whether the service provided by the component is public or private
         */
        function Component(name, instanceFactory, type) {
            this.name = name;
            this.instanceFactory = instanceFactory;
            this.type = type;
            this.multipleInstances = false;
            /**
             * Properties to be added to the service namespace
             */
            this.serviceProps = {};
            this.instantiationMode = "LAZY" /* LAZY */;
        }
        Component.prototype.setInstantiationMode = function (mode) {
            this.instantiationMode = mode;
            return this;
        };
        Component.prototype.setMultipleInstances = function (multipleInstances) {
            this.multipleInstances = multipleInstances;
            return this;
        };
        Component.prototype.setServiceProps = function (props) {
            this.serviceProps = props;
            return this;
        };
        return Component;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Error codes for requests made by the the XhrIo wrapper.
     */
    var ErrorCode;
    (function (ErrorCode) {
        ErrorCode[ErrorCode["NO_ERROR"] = 0] = "NO_ERROR";
        ErrorCode[ErrorCode["NETWORK_ERROR"] = 1] = "NETWORK_ERROR";
        ErrorCode[ErrorCode["ABORT"] = 2] = "ABORT";
    })(ErrorCode || (ErrorCode = {}));

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @fileoverview Constants used in the Firebase Storage library.
     */
    /**
     * Domain name for firebase storage.
     */
    const DEFAULT_HOST = 'firebasestorage.googleapis.com';
    /**
     * The key in Firebase config json for the storage bucket.
     */
    const CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';
    /**
     * 2 minutes
     *
     * The timeout for all operations except upload.
     */
    const DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;
    /**
     * 10 minutes
     *
     * The timeout for upload.
     */
    const DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;

    /**
     * An error returned by the Firebase Storage SDK.
     * @public
     */
    class FirebaseStorageError extends FirebaseError {
        /**
         * @param code - A StorageErrorCode string to be prefixed with 'storage/' and
         *  added to the end of the message.
         * @param message  - Error message.
         */
        constructor(code, message) {
            super(prependCode(code), `Firebase Storage: ${message} (${prependCode(code)})`);
            /**
             * Stores custom error data unque to FirebaseStorageError.
             */
            this.customData = { serverResponse: null };
            // Without this, `instanceof FirebaseStorageError`, in tests for example,
            // returns false.
            Object.setPrototypeOf(this, FirebaseStorageError.prototype);
        }
        /**
         * Compares a StorageErrorCode against this error's code, filtering out the prefix.
         */
        _codeEquals(code) {
            return prependCode(code) === this.code;
        }
        /**
         * Error message including serverResponse if available.
         */
        get message() {
            if (this.customData.serverResponse) {
                return `${this.message}\n${this.customData.serverResponse}`;
            }
            else {
                return this.message;
            }
        }
        /**
         * Optional response message that was added by the server.
         */
        get serverResponse() {
            return this.customData.serverResponse;
        }
        set serverResponse(serverResponse) {
            this.customData.serverResponse = serverResponse;
        }
    }
    function prependCode(code) {
        return 'storage/' + code;
    }
    function unknown() {
        const message = 'An unknown error occurred, please check the error payload for ' +
            'server response.';
        return new FirebaseStorageError("unknown" /* UNKNOWN */, message);
    }
    function objectNotFound(path) {
        return new FirebaseStorageError("object-not-found" /* OBJECT_NOT_FOUND */, "Object '" + path + "' does not exist.");
    }
    function quotaExceeded(bucket) {
        return new FirebaseStorageError("quota-exceeded" /* QUOTA_EXCEEDED */, "Quota for bucket '" +
            bucket +
            "' exceeded, please view quota on " +
            'https://firebase.google.com/pricing/.');
    }
    function unauthenticated() {
        const message = 'User is not authenticated, please authenticate using Firebase ' +
            'Authentication and try again.';
        return new FirebaseStorageError("unauthenticated" /* UNAUTHENTICATED */, message);
    }
    function unauthorized(path) {
        return new FirebaseStorageError("unauthorized" /* UNAUTHORIZED */, "User does not have permission to access '" + path + "'.");
    }
    function retryLimitExceeded() {
        return new FirebaseStorageError("retry-limit-exceeded" /* RETRY_LIMIT_EXCEEDED */, 'Max retry time for operation exceeded, please try again.');
    }
    function canceled() {
        return new FirebaseStorageError("canceled" /* CANCELED */, 'User canceled the upload/download.');
    }
    function invalidUrl(url) {
        return new FirebaseStorageError("invalid-url" /* INVALID_URL */, "Invalid URL '" + url + "'.");
    }
    function invalidDefaultBucket(bucket) {
        return new FirebaseStorageError("invalid-default-bucket" /* INVALID_DEFAULT_BUCKET */, "Invalid default bucket '" + bucket + "'.");
    }
    function noDefaultBucket() {
        return new FirebaseStorageError("no-default-bucket" /* NO_DEFAULT_BUCKET */, 'No default bucket ' +
            "found. Did you set the '" +
            CONFIG_STORAGE_BUCKET_KEY +
            "' property when initializing the app?");
    }
    function cannotSliceBlob() {
        return new FirebaseStorageError("cannot-slice-blob" /* CANNOT_SLICE_BLOB */, 'Cannot slice blob for upload. Please retry the upload.');
    }
    function serverFileWrongSize() {
        return new FirebaseStorageError("server-file-wrong-size" /* SERVER_FILE_WRONG_SIZE */, 'Server recorded incorrect upload file size, please retry the upload.');
    }
    function noDownloadURL() {
        return new FirebaseStorageError("no-download-url" /* NO_DOWNLOAD_URL */, 'The given file does not have any download URLs.');
    }
    function invalidArgument(message) {
        return new FirebaseStorageError("invalid-argument" /* INVALID_ARGUMENT */, message);
    }
    function appDeleted() {
        return new FirebaseStorageError("app-deleted" /* APP_DELETED */, 'The Firebase app was deleted.');
    }
    /**
     * @param name - The name of the operation that was invalid.
     */
    function invalidRootOperation(name) {
        return new FirebaseStorageError("invalid-root-operation" /* INVALID_ROOT_OPERATION */, "The operation '" +
            name +
            "' cannot be performed on a root reference, create a non-root " +
            "reference using child, such as .child('file.png').");
    }
    /**
     * @param format - The format that was not valid.
     * @param message - A message describing the format violation.
     */
    function invalidFormat(format, message) {
        return new FirebaseStorageError("invalid-format" /* INVALID_FORMAT */, "String does not match format '" + format + "': " + message);
    }
    /**
     * @param message - A message describing the internal error.
     */
    function internalError(message) {
        throw new FirebaseStorageError("internal-error" /* INTERNAL_ERROR */, 'Internal error: ' + message);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * We use this instead of goog.net.XhrIo because goog.net.XhrIo is hyuuuuge and
     * doesn't work in React Native on Android.
     */
    class NetworkXhrIo {
        constructor() {
            this.sent_ = false;
            this.xhr_ = new XMLHttpRequest();
            this.errorCode_ = ErrorCode.NO_ERROR;
            this.sendPromise_ = new Promise(resolve => {
                this.xhr_.addEventListener('abort', () => {
                    this.errorCode_ = ErrorCode.ABORT;
                    resolve(this);
                });
                this.xhr_.addEventListener('error', () => {
                    this.errorCode_ = ErrorCode.NETWORK_ERROR;
                    resolve(this);
                });
                this.xhr_.addEventListener('load', () => {
                    resolve(this);
                });
            });
        }
        /**
         * @override
         */
        send(url, method, body, headers) {
            if (this.sent_) {
                throw internalError('cannot .send() more than once');
            }
            this.sent_ = true;
            this.xhr_.open(method, url, true);
            if (headers !== undefined) {
                for (const key in headers) {
                    if (headers.hasOwnProperty(key)) {
                        this.xhr_.setRequestHeader(key, headers[key].toString());
                    }
                }
            }
            if (body !== undefined) {
                this.xhr_.send(body);
            }
            else {
                this.xhr_.send();
            }
            return this.sendPromise_;
        }
        /**
         * @override
         */
        getErrorCode() {
            if (!this.sent_) {
                throw internalError('cannot .getErrorCode() before sending');
            }
            return this.errorCode_;
        }
        /**
         * @override
         */
        getStatus() {
            if (!this.sent_) {
                throw internalError('cannot .getStatus() before sending');
            }
            try {
                return this.xhr_.status;
            }
            catch (e) {
                return -1;
            }
        }
        /**
         * @override
         */
        getResponseText() {
            if (!this.sent_) {
                throw internalError('cannot .getResponseText() before sending');
            }
            return this.xhr_.responseText;
        }
        /**
         * Aborts the request.
         * @override
         */
        abort() {
            this.xhr_.abort();
        }
        /**
         * @override
         */
        getResponseHeader(header) {
            return this.xhr_.getResponseHeader(header);
        }
        /**
         * @override
         */
        addUploadProgressListener(listener) {
            if (this.xhr_.upload != null) {
                this.xhr_.upload.addEventListener('progress', listener);
            }
        }
        /**
         * @override
         */
        removeUploadProgressListener(listener) {
            if (this.xhr_.upload != null) {
                this.xhr_.upload.removeEventListener('progress', listener);
            }
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Factory-like class for creating XhrIo instances.
     */
    class XhrIoPool {
        createXhrIo() {
            return new NetworkXhrIo();
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Firebase Storage location data.
     */
    class Location {
        constructor(bucket, path) {
            this.bucket = bucket;
            this.path_ = path;
        }
        get path() {
            return this.path_;
        }
        get isRoot() {
            return this.path.length === 0;
        }
        fullServerUrl() {
            const encode = encodeURIComponent;
            return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);
        }
        bucketOnlyServerUrl() {
            const encode = encodeURIComponent;
            return '/b/' + encode(this.bucket) + '/o';
        }
        static makeFromBucketSpec(bucketString) {
            let bucketLocation;
            try {
                bucketLocation = Location.makeFromUrl(bucketString);
            }
            catch (e) {
                // Not valid URL, use as-is. This lets you put bare bucket names in
                // config.
                return new Location(bucketString, '');
            }
            if (bucketLocation.path === '') {
                return bucketLocation;
            }
            else {
                throw invalidDefaultBucket(bucketString);
            }
        }
        static makeFromUrl(url) {
            let location = null;
            const bucketDomain = '([A-Za-z0-9.\\-_]+)';
            function gsModify(loc) {
                if (loc.path.charAt(loc.path.length - 1) === '/') {
                    loc.path_ = loc.path_.slice(0, -1);
                }
            }
            const gsPath = '(/(.*))?$';
            const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');
            const gsIndices = { bucket: 1, path: 3 };
            function httpModify(loc) {
                loc.path_ = decodeURIComponent(loc.path);
            }
            const version = 'v[A-Za-z0-9_]+';
            const firebaseStorageHost = DEFAULT_HOST.replace(/[.]/g, '\\.');
            const firebaseStoragePath = '(/([^?#]*).*)?$';
            const firebaseStorageRegExp = new RegExp(`^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`, 'i');
            const firebaseStorageIndices = { bucket: 1, path: 3 };
            const cloudStorageHost = '(?:storage.googleapis.com|storage.cloud.google.com)';
            const cloudStoragePath = '([^?#]*)';
            const cloudStorageRegExp = new RegExp(`^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`, 'i');
            const cloudStorageIndices = { bucket: 1, path: 2 };
            const groups = [
                { regex: gsRegex, indices: gsIndices, postModify: gsModify },
                {
                    regex: firebaseStorageRegExp,
                    indices: firebaseStorageIndices,
                    postModify: httpModify
                },
                {
                    regex: cloudStorageRegExp,
                    indices: cloudStorageIndices,
                    postModify: httpModify
                }
            ];
            for (let i = 0; i < groups.length; i++) {
                const group = groups[i];
                const captures = group.regex.exec(url);
                if (captures) {
                    const bucketValue = captures[group.indices.bucket];
                    let pathValue = captures[group.indices.path];
                    if (!pathValue) {
                        pathValue = '';
                    }
                    location = new Location(bucketValue, pathValue);
                    group.postModify(location);
                    break;
                }
            }
            if (location == null) {
                throw invalidUrl(url);
            }
            return location;
        }
    }

    /**
     * A request whose promise always fails.
     */
    class FailRequest {
        constructor(error) {
            this.promise_ = Promise.reject(error);
        }
        /** @inheritDoc */
        getPromise() {
            return this.promise_;
        }
        /** @inheritDoc */
        cancel(_appDelete = false) { }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @param f May be invoked
     *     before the function returns.
     * @param callback Get all the arguments passed to the function
     *     passed to f, including the initial boolean.
     */
    function start(f, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    callback, timeout) {
        // TODO(andysoto): make this code cleaner (probably refactor into an actual
        // type instead of a bunch of functions with state shared in the closure)
        let waitSeconds = 1;
        // Would type this as "number" but that doesn't work for Node so ¯\_(ツ)_/¯
        // TODO: find a way to exclude Node type definition for storage because storage only works in browser
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        let timeoutId = null;
        let hitTimeout = false;
        let cancelState = 0;
        function canceled() {
            return cancelState === 2;
        }
        let triggeredCallback = false;
        function triggerCallback(...args) {
            if (!triggeredCallback) {
                triggeredCallback = true;
                callback.apply(null, args);
            }
        }
        function callWithDelay(millis) {
            timeoutId = setTimeout(() => {
                timeoutId = null;
                f(handler, canceled());
            }, millis);
        }
        function handler(success, ...args) {
            if (triggeredCallback) {
                return;
            }
            if (success) {
                triggerCallback.call(null, success, ...args);
                return;
            }
            const mustStop = canceled() || hitTimeout;
            if (mustStop) {
                triggerCallback.call(null, success, ...args);
                return;
            }
            if (waitSeconds < 64) {
                /* TODO(andysoto): don't back off so quickly if we know we're offline. */
                waitSeconds *= 2;
            }
            let waitMillis;
            if (cancelState === 1) {
                cancelState = 2;
                waitMillis = 0;
            }
            else {
                waitMillis = (waitSeconds + Math.random()) * 1000;
            }
            callWithDelay(waitMillis);
        }
        let stopped = false;
        function stop(wasTimeout) {
            if (stopped) {
                return;
            }
            stopped = true;
            if (triggeredCallback) {
                return;
            }
            if (timeoutId !== null) {
                if (!wasTimeout) {
                    cancelState = 2;
                }
                clearTimeout(timeoutId);
                callWithDelay(0);
            }
            else {
                if (!wasTimeout) {
                    cancelState = 1;
                }
            }
        }
        callWithDelay(0);
        setTimeout(() => {
            hitTimeout = true;
            stop(true);
        }, timeout);
        return stop;
    }
    /**
     * Stops the retry loop from repeating.
     * If the function is currently "in between" retries, it is invoked immediately
     * with the second parameter as "true". Otherwise, it will be invoked once more
     * after the current invocation finishes iff the current invocation would have
     * triggered another retry.
     */
    function stop(id) {
        id(false);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function isJustDef(p) {
        return p !== void 0;
    }
    // eslint-disable-next-line @typescript-eslint/ban-types
    function isFunction(p) {
        return typeof p === 'function';
    }
    function isNonArrayObject(p) {
        return typeof p === 'object' && !Array.isArray(p);
    }
    function isString(p) {
        return typeof p === 'string' || p instanceof String;
    }
    function isNativeBlob(p) {
        return isNativeBlobDefined() && p instanceof Blob;
    }
    function isNativeBlobDefined() {
        return typeof Blob !== 'undefined';
    }
    function validateNumber(argument, minValue, maxValue, value) {
        if (value < minValue) {
            throw invalidArgument(`Invalid value for '${argument}'. Expected ${minValue} or greater.`);
        }
        if (value > maxValue) {
            throw invalidArgument(`Invalid value for '${argument}'. Expected ${maxValue} or less.`);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function makeUrl(urlPart) {
        return `https://${DEFAULT_HOST}/v0${urlPart}`;
    }
    function makeQueryString(params) {
        const encode = encodeURIComponent;
        let queryPart = '?';
        for (const key in params) {
            if (params.hasOwnProperty(key)) {
                const nextPart = encode(key) + '=' + encode(params[key]);
                queryPart = queryPart + nextPart + '&';
            }
        }
        // Chop off the extra '&' or '?' on the end
        queryPart = queryPart.slice(0, -1);
        return queryPart;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class NetworkRequest {
        constructor(url, method, headers, body, successCodes, additionalRetryCodes, callback, errorCallback, timeout, progressCallback, pool) {
            this.pendingXhr_ = null;
            this.backoffId_ = null;
            this.canceled_ = false;
            this.appDelete_ = false;
            this.url_ = url;
            this.method_ = method;
            this.headers_ = headers;
            this.body_ = body;
            this.successCodes_ = successCodes.slice();
            this.additionalRetryCodes_ = additionalRetryCodes.slice();
            this.callback_ = callback;
            this.errorCallback_ = errorCallback;
            this.progressCallback_ = progressCallback;
            this.timeout_ = timeout;
            this.pool_ = pool;
            this.promise_ = new Promise((resolve, reject) => {
                this.resolve_ = resolve;
                this.reject_ = reject;
                this.start_();
            });
        }
        /**
         * Actually starts the retry loop.
         */
        start_() {
            const self = this;
            function doTheRequest(backoffCallback, canceled) {
                if (canceled) {
                    backoffCallback(false, new RequestEndStatus(false, null, true));
                    return;
                }
                const xhr = self.pool_.createXhrIo();
                self.pendingXhr_ = xhr;
                function progressListener(progressEvent) {
                    const loaded = progressEvent.loaded;
                    const total = progressEvent.lengthComputable ? progressEvent.total : -1;
                    if (self.progressCallback_ !== null) {
                        self.progressCallback_(loaded, total);
                    }
                }
                if (self.progressCallback_ !== null) {
                    xhr.addUploadProgressListener(progressListener);
                }
                // eslint-disable-next-line @typescript-eslint/no-floating-promises
                xhr
                    .send(self.url_, self.method_, self.body_, self.headers_)
                    .then((xhr) => {
                    if (self.progressCallback_ !== null) {
                        xhr.removeUploadProgressListener(progressListener);
                    }
                    self.pendingXhr_ = null;
                    xhr = xhr;
                    const hitServer = xhr.getErrorCode() === ErrorCode.NO_ERROR;
                    const status = xhr.getStatus();
                    if (!hitServer || self.isRetryStatusCode_(status)) {
                        const wasCanceled = xhr.getErrorCode() === ErrorCode.ABORT;
                        backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));
                        return;
                    }
                    const successCode = self.successCodes_.indexOf(status) !== -1;
                    backoffCallback(true, new RequestEndStatus(successCode, xhr));
                });
            }
            /**
             * @param requestWentThrough - True if the request eventually went
             *     through, false if it hit the retry limit or was canceled.
             */
            function backoffDone(requestWentThrough, status) {
                const resolve = self.resolve_;
                const reject = self.reject_;
                const xhr = status.xhr;
                if (status.wasSuccessCode) {
                    try {
                        const result = self.callback_(xhr, xhr.getResponseText());
                        if (isJustDef(result)) {
                            resolve(result);
                        }
                        else {
                            resolve();
                        }
                    }
                    catch (e) {
                        reject(e);
                    }
                }
                else {
                    if (xhr !== null) {
                        const err = unknown();
                        err.serverResponse = xhr.getResponseText();
                        if (self.errorCallback_) {
                            reject(self.errorCallback_(xhr, err));
                        }
                        else {
                            reject(err);
                        }
                    }
                    else {
                        if (status.canceled) {
                            const err = self.appDelete_ ? appDeleted() : canceled();
                            reject(err);
                        }
                        else {
                            const err = retryLimitExceeded();
                            reject(err);
                        }
                    }
                }
            }
            if (this.canceled_) {
                backoffDone(false, new RequestEndStatus(false, null, true));
            }
            else {
                this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);
            }
        }
        /** @inheritDoc */
        getPromise() {
            return this.promise_;
        }
        /** @inheritDoc */
        cancel(appDelete) {
            this.canceled_ = true;
            this.appDelete_ = appDelete || false;
            if (this.backoffId_ !== null) {
                stop(this.backoffId_);
            }
            if (this.pendingXhr_ !== null) {
                this.pendingXhr_.abort();
            }
        }
        isRetryStatusCode_(status) {
            // The codes for which to retry came from this page:
            // https://cloud.google.com/storage/docs/exponential-backoff
            const isFiveHundredCode = status >= 500 && status < 600;
            const extraRetryCodes = [
                // Request Timeout: web server didn't receive full request in time.
                408,
                // Too Many Requests: you're getting rate-limited, basically.
                429
            ];
            const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;
            const isRequestSpecificRetryCode = this.additionalRetryCodes_.indexOf(status) !== -1;
            return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;
        }
    }
    /**
     * A collection of information about the result of a network request.
     * @param opt_canceled - Defaults to false.
     */
    class RequestEndStatus {
        constructor(wasSuccessCode, xhr, canceled) {
            this.wasSuccessCode = wasSuccessCode;
            this.xhr = xhr;
            this.canceled = !!canceled;
        }
    }
    function addAuthHeader_(headers, authToken) {
        if (authToken !== null && authToken.length > 0) {
            headers['Authorization'] = 'Firebase ' + authToken;
        }
    }
    function addVersionHeader_(headers, firebaseVersion) {
        headers['X-Firebase-Storage-Version'] =
            'webjs/' + (firebaseVersion !== null && firebaseVersion !== void 0 ? firebaseVersion : 'AppManager');
    }
    function addGmpidHeader_(headers, appId) {
        if (appId) {
            headers['X-Firebase-GMPID'] = appId;
        }
    }
    function makeRequest(requestInfo, appId, authToken, pool, firebaseVersion) {
        const queryPart = makeQueryString(requestInfo.urlParams);
        const url = requestInfo.url + queryPart;
        const headers = Object.assign({}, requestInfo.headers);
        addGmpidHeader_(headers, appId);
        addAuthHeader_(headers, authToken);
        addVersionHeader_(headers, firebaseVersion);
        return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, pool);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function getBlobBuilder() {
        if (typeof BlobBuilder !== 'undefined') {
            return BlobBuilder;
        }
        else if (typeof WebKitBlobBuilder !== 'undefined') {
            return WebKitBlobBuilder;
        }
        else {
            return undefined;
        }
    }
    /**
     * Concatenates one or more values together and converts them to a Blob.
     *
     * @param args The values that will make up the resulting blob.
     * @return The blob.
     */
    function getBlob(...args) {
        const BlobBuilder = getBlobBuilder();
        if (BlobBuilder !== undefined) {
            const bb = new BlobBuilder();
            for (let i = 0; i < args.length; i++) {
                bb.append(args[i]);
            }
            return bb.getBlob();
        }
        else {
            if (isNativeBlobDefined()) {
                return new Blob(args);
            }
            else {
                throw new FirebaseStorageError("unsupported-environment" /* UNSUPPORTED_ENVIRONMENT */, "This browser doesn't seem to support creating Blobs");
            }
        }
    }
    /**
     * Slices the blob. The returned blob contains data from the start byte
     * (inclusive) till the end byte (exclusive). Negative indices cannot be used.
     *
     * @param blob The blob to be sliced.
     * @param start Index of the starting byte.
     * @param end Index of the ending byte.
     * @return The blob slice or null if not supported.
     */
    function sliceBlob(blob, start, end) {
        if (blob.webkitSlice) {
            return blob.webkitSlice(start, end);
        }
        else if (blob.mozSlice) {
            return blob.mozSlice(start, end);
        }
        else if (blob.slice) {
            return blob.slice(start, end);
        }
        return null;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An enumeration of the possible string formats for upload.
     * @public
     */
    const StringFormat = {
        /**
         * Indicates the string should be interpreted "raw", that is, as normal text.
         * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte
         * sequence.
         * Example: The string 'Hello! \\ud83d\\ude0a' becomes the byte sequence
         * 48 65 6c 6c 6f 21 20 f0 9f 98 8a
         */
        RAW: 'raw',
        /**
         * Indicates the string should be interpreted as base64-encoded data.
         * Padding characters (trailing '='s) are optional.
         * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence
         * ad 69 8e fb e1 3a b7 bf eb 97
         */
        BASE64: 'base64',
        /**
         * Indicates the string should be interpreted as base64url-encoded data.
         * Padding characters (trailing '='s) are optional.
         * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence
         * ad 69 8e fb e1 3a b7 bf eb 97
         */
        BASE64URL: 'base64url',
        /**
         * Indicates the string is a data URL, such as one obtained from
         * canvas.toDataURL().
         * Example: the string 'data:application/octet-stream;base64,aaaa'
         * becomes the byte sequence
         * 69 a6 9a
         * (the content-type "application/octet-stream" is also applied, but can
         * be overridden in the metadata object).
         */
        DATA_URL: 'data_url'
    };
    class StringData {
        constructor(data, contentType) {
            this.data = data;
            this.contentType = contentType || null;
        }
    }
    function dataFromString(format, stringData) {
        switch (format) {
            case StringFormat.RAW:
                return new StringData(utf8Bytes_(stringData));
            case StringFormat.BASE64:
            case StringFormat.BASE64URL:
                return new StringData(base64Bytes_(format, stringData));
            case StringFormat.DATA_URL:
                return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));
            // do nothing
        }
        // assert(false);
        throw unknown();
    }
    function utf8Bytes_(value) {
        const b = [];
        for (let i = 0; i < value.length; i++) {
            let c = value.charCodeAt(i);
            if (c <= 127) {
                b.push(c);
            }
            else {
                if (c <= 2047) {
                    b.push(192 | (c >> 6), 128 | (c & 63));
                }
                else {
                    if ((c & 64512) === 55296) {
                        // The start of a surrogate pair.
                        const valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;
                        if (!valid) {
                            // The second surrogate wasn't there.
                            b.push(239, 191, 189);
                        }
                        else {
                            const hi = c;
                            const lo = value.charCodeAt(++i);
                            c = 65536 | ((hi & 1023) << 10) | (lo & 1023);
                            b.push(240 | (c >> 18), 128 | ((c >> 12) & 63), 128 | ((c >> 6) & 63), 128 | (c & 63));
                        }
                    }
                    else {
                        if ((c & 64512) === 56320) {
                            // Invalid low surrogate.
                            b.push(239, 191, 189);
                        }
                        else {
                            b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));
                        }
                    }
                }
            }
        }
        return new Uint8Array(b);
    }
    function percentEncodedBytes_(value) {
        let decoded;
        try {
            decoded = decodeURIComponent(value);
        }
        catch (e) {
            throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');
        }
        return utf8Bytes_(decoded);
    }
    function base64Bytes_(format, value) {
        switch (format) {
            case StringFormat.BASE64: {
                const hasMinus = value.indexOf('-') !== -1;
                const hasUnder = value.indexOf('_') !== -1;
                if (hasMinus || hasUnder) {
                    const invalidChar = hasMinus ? '-' : '_';
                    throw invalidFormat(format, "Invalid character '" +
                        invalidChar +
                        "' found: is it base64url encoded?");
                }
                break;
            }
            case StringFormat.BASE64URL: {
                const hasPlus = value.indexOf('+') !== -1;
                const hasSlash = value.indexOf('/') !== -1;
                if (hasPlus || hasSlash) {
                    const invalidChar = hasPlus ? '+' : '/';
                    throw invalidFormat(format, "Invalid character '" + invalidChar + "' found: is it base64 encoded?");
                }
                value = value.replace(/-/g, '+').replace(/_/g, '/');
                break;
            }
            // do nothing
        }
        let bytes;
        try {
            bytes = atob(value);
        }
        catch (e) {
            throw invalidFormat(format, 'Invalid character found');
        }
        const array = new Uint8Array(bytes.length);
        for (let i = 0; i < bytes.length; i++) {
            array[i] = bytes.charCodeAt(i);
        }
        return array;
    }
    class DataURLParts {
        constructor(dataURL) {
            this.base64 = false;
            this.contentType = null;
            const matches = dataURL.match(/^data:([^,]+)?,/);
            if (matches === null) {
                throw invalidFormat(StringFormat.DATA_URL, "Must be formatted 'data:[<mediatype>][;base64],<data>");
            }
            const middle = matches[1] || null;
            if (middle != null) {
                this.base64 = endsWith(middle, ';base64');
                this.contentType = this.base64
                    ? middle.substring(0, middle.length - ';base64'.length)
                    : middle;
            }
            this.rest = dataURL.substring(dataURL.indexOf(',') + 1);
        }
    }
    function dataURLBytes_(dataUrl) {
        const parts = new DataURLParts(dataUrl);
        if (parts.base64) {
            return base64Bytes_(StringFormat.BASE64, parts.rest);
        }
        else {
            return percentEncodedBytes_(parts.rest);
        }
    }
    function dataURLContentType_(dataUrl) {
        const parts = new DataURLParts(dataUrl);
        return parts.contentType;
    }
    function endsWith(s, end) {
        const longEnough = s.length >= end.length;
        if (!longEnough) {
            return false;
        }
        return s.substring(s.length - end.length) === end;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @param opt_elideCopy - If true, doesn't copy mutable input data
     *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be
     *     modified after this blob's construction.
     */
    class FbsBlob {
        constructor(data, elideCopy) {
            let size = 0;
            let blobType = '';
            if (isNativeBlob(data)) {
                this.data_ = data;
                size = data.size;
                blobType = data.type;
            }
            else if (data instanceof ArrayBuffer) {
                if (elideCopy) {
                    this.data_ = new Uint8Array(data);
                }
                else {
                    this.data_ = new Uint8Array(data.byteLength);
                    this.data_.set(new Uint8Array(data));
                }
                size = this.data_.length;
            }
            else if (data instanceof Uint8Array) {
                if (elideCopy) {
                    this.data_ = data;
                }
                else {
                    this.data_ = new Uint8Array(data.length);
                    this.data_.set(data);
                }
                size = data.length;
            }
            this.size_ = size;
            this.type_ = blobType;
        }
        size() {
            return this.size_;
        }
        type() {
            return this.type_;
        }
        slice(startByte, endByte) {
            if (isNativeBlob(this.data_)) {
                const realBlob = this.data_;
                const sliced = sliceBlob(realBlob, startByte, endByte);
                if (sliced === null) {
                    return null;
                }
                return new FbsBlob(sliced);
            }
            else {
                const slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);
                return new FbsBlob(slice, true);
            }
        }
        static getBlob(...args) {
            if (isNativeBlobDefined()) {
                const blobby = args.map((val) => {
                    if (val instanceof FbsBlob) {
                        return val.data_;
                    }
                    else {
                        return val;
                    }
                });
                return new FbsBlob(getBlob.apply(null, blobby));
            }
            else {
                const uint8Arrays = args.map((val) => {
                    if (isString(val)) {
                        return dataFromString(StringFormat.RAW, val).data;
                    }
                    else {
                        // Blobs don't exist, so this has to be a Uint8Array.
                        return val.data_;
                    }
                });
                let finalLength = 0;
                uint8Arrays.forEach((array) => {
                    finalLength += array.byteLength;
                });
                const merged = new Uint8Array(finalLength);
                let index = 0;
                uint8Arrays.forEach((array) => {
                    for (let i = 0; i < array.length; i++) {
                        merged[index++] = array[i];
                    }
                });
                return new FbsBlob(merged, true);
            }
        }
        uploadData() {
            return this.data_;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns the Object resulting from parsing the given JSON, or null if the
     * given string does not represent a JSON object.
     */
    function jsonObjectOrNull(s) {
        let obj;
        try {
            obj = JSON.parse(s);
        }
        catch (e) {
            return null;
        }
        if (isNonArrayObject(obj)) {
            return obj;
        }
        else {
            return null;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @fileoverview Contains helper methods for manipulating paths.
     */
    /**
     * @return Null if the path is already at the root.
     */
    function parent(path) {
        if (path.length === 0) {
            return null;
        }
        const index = path.lastIndexOf('/');
        if (index === -1) {
            return '';
        }
        const newPath = path.slice(0, index);
        return newPath;
    }
    function child(path, childPath) {
        const canonicalChildPath = childPath
            .split('/')
            .filter(component => component.length > 0)
            .join('/');
        if (path.length === 0) {
            return canonicalChildPath;
        }
        else {
            return path + '/' + canonicalChildPath;
        }
    }
    /**
     * Returns the last component of a path.
     * '/foo/bar' -> 'bar'
     * '/foo/bar/baz/' -> 'baz/'
     * '/a' -> 'a'
     */
    function lastComponent(path) {
        const index = path.lastIndexOf('/', path.length - 2);
        if (index === -1) {
            return path;
        }
        else {
            return path.slice(index + 1);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function noXform_(metadata, value) {
        return value;
    }
    class Mapping {
        constructor(server, local, writable, xform) {
            this.server = server;
            this.local = local || server;
            this.writable = !!writable;
            this.xform = xform || noXform_;
        }
    }
    let mappings_ = null;
    function xformPath(fullPath) {
        if (!isString(fullPath) || fullPath.length < 2) {
            return fullPath;
        }
        else {
            return lastComponent(fullPath);
        }
    }
    function getMappings() {
        if (mappings_) {
            return mappings_;
        }
        const mappings = [];
        mappings.push(new Mapping('bucket'));
        mappings.push(new Mapping('generation'));
        mappings.push(new Mapping('metageneration'));
        mappings.push(new Mapping('name', 'fullPath', true));
        function mappingsXformPath(_metadata, fullPath) {
            return xformPath(fullPath);
        }
        const nameMapping = new Mapping('name');
        nameMapping.xform = mappingsXformPath;
        mappings.push(nameMapping);
        /**
         * Coerces the second param to a number, if it is defined.
         */
        function xformSize(_metadata, size) {
            if (size !== undefined) {
                return Number(size);
            }
            else {
                return size;
            }
        }
        const sizeMapping = new Mapping('size');
        sizeMapping.xform = xformSize;
        mappings.push(sizeMapping);
        mappings.push(new Mapping('timeCreated'));
        mappings.push(new Mapping('updated'));
        mappings.push(new Mapping('md5Hash', null, true));
        mappings.push(new Mapping('cacheControl', null, true));
        mappings.push(new Mapping('contentDisposition', null, true));
        mappings.push(new Mapping('contentEncoding', null, true));
        mappings.push(new Mapping('contentLanguage', null, true));
        mappings.push(new Mapping('contentType', null, true));
        mappings.push(new Mapping('metadata', 'customMetadata', true));
        mappings_ = mappings;
        return mappings_;
    }
    function addRef(metadata, service) {
        function generateRef() {
            const bucket = metadata['bucket'];
            const path = metadata['fullPath'];
            const loc = new Location(bucket, path);
            return service._makeStorageReference(loc);
        }
        Object.defineProperty(metadata, 'ref', { get: generateRef });
    }
    function fromResource(service, resource, mappings) {
        const metadata = {};
        metadata['type'] = 'file';
        const len = mappings.length;
        for (let i = 0; i < len; i++) {
            const mapping = mappings[i];
            metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);
        }
        addRef(metadata, service);
        return metadata;
    }
    function fromResourceString(service, resourceString, mappings) {
        const obj = jsonObjectOrNull(resourceString);
        if (obj === null) {
            return null;
        }
        const resource = obj;
        return fromResource(service, resource, mappings);
    }
    function downloadUrlFromResourceString(metadata, resourceString) {
        const obj = jsonObjectOrNull(resourceString);
        if (obj === null) {
            return null;
        }
        if (!isString(obj['downloadTokens'])) {
            // This can happen if objects are uploaded through GCS and retrieved
            // through list, so we don't want to throw an Error.
            return null;
        }
        const tokens = obj['downloadTokens'];
        if (tokens.length === 0) {
            return null;
        }
        const encode = encodeURIComponent;
        const tokensList = tokens.split(',');
        const urls = tokensList.map((token) => {
            const bucket = metadata['bucket'];
            const path = metadata['fullPath'];
            const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);
            const base = makeUrl(urlPart);
            const queryString = makeQueryString({
                alt: 'media',
                token
            });
            return base + queryString;
        });
        return urls[0];
    }
    function toResourceString(metadata, mappings) {
        const resource = {};
        const len = mappings.length;
        for (let i = 0; i < len; i++) {
            const mapping = mappings[i];
            if (mapping.writable) {
                resource[mapping.server] = metadata[mapping.local];
            }
        }
        return JSON.stringify(resource);
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const PREFIXES_KEY = 'prefixes';
    const ITEMS_KEY = 'items';
    function fromBackendResponse(service, bucket, resource) {
        const listResult = {
            prefixes: [],
            items: [],
            nextPageToken: resource['nextPageToken']
        };
        if (resource[PREFIXES_KEY]) {
            for (const path of resource[PREFIXES_KEY]) {
                const pathWithoutTrailingSlash = path.replace(/\/$/, '');
                const reference = service._makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));
                listResult.prefixes.push(reference);
            }
        }
        if (resource[ITEMS_KEY]) {
            for (const item of resource[ITEMS_KEY]) {
                const reference = service._makeStorageReference(new Location(bucket, item['name']));
                listResult.items.push(reference);
            }
        }
        return listResult;
    }
    function fromResponseString(service, bucket, resourceString) {
        const obj = jsonObjectOrNull(resourceString);
        if (obj === null) {
            return null;
        }
        const resource = obj;
        return fromBackendResponse(service, bucket, resource);
    }

    class RequestInfo {
        constructor(url, method, 
        /**
         * Returns the value with which to resolve the request's promise. Only called
         * if the request is successful. Throw from this function to reject the
         * returned Request's promise with the thrown error.
         * Note: The XhrIo passed to this function may be reused after this callback
         * returns. Do not keep a reference to it in any way.
         */
        handler, timeout) {
            this.url = url;
            this.method = method;
            this.handler = handler;
            this.timeout = timeout;
            this.urlParams = {};
            this.headers = {};
            this.body = null;
            this.errorHandler = null;
            /**
             * Called with the current number of bytes uploaded and total size (-1 if not
             * computable) of the request body (i.e. used to report upload progress).
             */
            this.progressCallback = null;
            this.successCodes = [200];
            this.additionalRetryCodes = [];
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Throws the UNKNOWN FirebaseStorageError if cndn is false.
     */
    function handlerCheck(cndn) {
        if (!cndn) {
            throw unknown();
        }
    }
    function metadataHandler(service, mappings) {
        function handler(xhr, text) {
            const metadata = fromResourceString(service, text, mappings);
            handlerCheck(metadata !== null);
            return metadata;
        }
        return handler;
    }
    function listHandler(service, bucket) {
        function handler(xhr, text) {
            const listResult = fromResponseString(service, bucket, text);
            handlerCheck(listResult !== null);
            return listResult;
        }
        return handler;
    }
    function downloadUrlHandler(service, mappings) {
        function handler(xhr, text) {
            const metadata = fromResourceString(service, text, mappings);
            handlerCheck(metadata !== null);
            return downloadUrlFromResourceString(metadata, text);
        }
        return handler;
    }
    function sharedErrorHandler(location) {
        function errorHandler(xhr, err) {
            let newErr;
            if (xhr.getStatus() === 401) {
                newErr = unauthenticated();
            }
            else {
                if (xhr.getStatus() === 402) {
                    newErr = quotaExceeded(location.bucket);
                }
                else {
                    if (xhr.getStatus() === 403) {
                        newErr = unauthorized(location.path);
                    }
                    else {
                        newErr = err;
                    }
                }
            }
            newErr.serverResponse = err.serverResponse;
            return newErr;
        }
        return errorHandler;
    }
    function objectErrorHandler(location) {
        const shared = sharedErrorHandler(location);
        function errorHandler(xhr, err) {
            let newErr = shared(xhr, err);
            if (xhr.getStatus() === 404) {
                newErr = objectNotFound(location.path);
            }
            newErr.serverResponse = err.serverResponse;
            return newErr;
        }
        return errorHandler;
    }
    function getMetadata(service, location, mappings) {
        const urlPart = location.fullServerUrl();
        const url = makeUrl(urlPart);
        const method = 'GET';
        const timeout = service.maxOperationRetryTime;
        const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);
        requestInfo.errorHandler = objectErrorHandler(location);
        return requestInfo;
    }
    function list(service, location, delimiter, pageToken, maxResults) {
        const urlParams = {};
        if (location.isRoot) {
            urlParams['prefix'] = '';
        }
        else {
            urlParams['prefix'] = location.path + '/';
        }
        if (delimiter && delimiter.length > 0) {
            urlParams['delimiter'] = delimiter;
        }
        if (pageToken) {
            urlParams['pageToken'] = pageToken;
        }
        if (maxResults) {
            urlParams['maxResults'] = maxResults;
        }
        const urlPart = location.bucketOnlyServerUrl();
        const url = makeUrl(urlPart);
        const method = 'GET';
        const timeout = service.maxOperationRetryTime;
        const requestInfo = new RequestInfo(url, method, listHandler(service, location.bucket), timeout);
        requestInfo.urlParams = urlParams;
        requestInfo.errorHandler = sharedErrorHandler(location);
        return requestInfo;
    }
    function getDownloadUrl(service, location, mappings) {
        const urlPart = location.fullServerUrl();
        const url = makeUrl(urlPart);
        const method = 'GET';
        const timeout = service.maxOperationRetryTime;
        const requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);
        requestInfo.errorHandler = objectErrorHandler(location);
        return requestInfo;
    }
    function updateMetadata(service, location, metadata, mappings) {
        const urlPart = location.fullServerUrl();
        const url = makeUrl(urlPart);
        const method = 'PATCH';
        const body = toResourceString(metadata, mappings);
        const headers = { 'Content-Type': 'application/json; charset=utf-8' };
        const timeout = service.maxOperationRetryTime;
        const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);
        requestInfo.headers = headers;
        requestInfo.body = body;
        requestInfo.errorHandler = objectErrorHandler(location);
        return requestInfo;
    }
    function deleteObject(service, location) {
        const urlPart = location.fullServerUrl();
        const url = makeUrl(urlPart);
        const method = 'DELETE';
        const timeout = service.maxOperationRetryTime;
        function handler(_xhr, _text) { }
        const requestInfo = new RequestInfo(url, method, handler, timeout);
        requestInfo.successCodes = [200, 204];
        requestInfo.errorHandler = objectErrorHandler(location);
        return requestInfo;
    }
    function determineContentType_(metadata, blob) {
        return ((metadata && metadata['contentType']) ||
            (blob && blob.type()) ||
            'application/octet-stream');
    }
    function metadataForUpload_(location, blob, metadata) {
        const metadataClone = Object.assign({}, metadata);
        metadataClone['fullPath'] = location.path;
        metadataClone['size'] = blob.size();
        if (!metadataClone['contentType']) {
            metadataClone['contentType'] = determineContentType_(null, blob);
        }
        return metadataClone;
    }
    /**
     * Prepare RequestInfo for uploads as Content-Type: multipart.
     */
    function multipartUpload(service, location, mappings, blob, metadata) {
        const urlPart = location.bucketOnlyServerUrl();
        const headers = {
            'X-Goog-Upload-Protocol': 'multipart'
        };
        function genBoundary() {
            let str = '';
            for (let i = 0; i < 2; i++) {
                str = str + Math.random().toString().slice(2);
            }
            return str;
        }
        const boundary = genBoundary();
        headers['Content-Type'] = 'multipart/related; boundary=' + boundary;
        const metadata_ = metadataForUpload_(location, blob, metadata);
        const metadataString = toResourceString(metadata_, mappings);
        const preBlobPart = '--' +
            boundary +
            '\r\n' +
            'Content-Type: application/json; charset=utf-8\r\n\r\n' +
            metadataString +
            '\r\n--' +
            boundary +
            '\r\n' +
            'Content-Type: ' +
            metadata_['contentType'] +
            '\r\n\r\n';
        const postBlobPart = '\r\n--' + boundary + '--';
        const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);
        if (body === null) {
            throw cannotSliceBlob();
        }
        const urlParams = { name: metadata_['fullPath'] };
        const url = makeUrl(urlPart);
        const method = 'POST';
        const timeout = service.maxUploadRetryTime;
        const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);
        requestInfo.urlParams = urlParams;
        requestInfo.headers = headers;
        requestInfo.body = body.uploadData();
        requestInfo.errorHandler = sharedErrorHandler(location);
        return requestInfo;
    }
    /**
     * @param current The number of bytes that have been uploaded so far.
     * @param total The total number of bytes in the upload.
     * @param opt_finalized True if the server has finished the upload.
     * @param opt_metadata The upload metadata, should
     *     only be passed if opt_finalized is true.
     */
    class ResumableUploadStatus {
        constructor(current, total, finalized, metadata) {
            this.current = current;
            this.total = total;
            this.finalized = !!finalized;
            this.metadata = metadata || null;
        }
    }
    function checkResumeHeader_(xhr, allowed) {
        let status = null;
        try {
            status = xhr.getResponseHeader('X-Goog-Upload-Status');
        }
        catch (e) {
            handlerCheck(false);
        }
        const allowedStatus = allowed || ['active'];
        handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);
        return status;
    }
    function createResumableUpload(service, location, mappings, blob, metadata) {
        const urlPart = location.bucketOnlyServerUrl();
        const metadataForUpload = metadataForUpload_(location, blob, metadata);
        const urlParams = { name: metadataForUpload['fullPath'] };
        const url = makeUrl(urlPart);
        const method = 'POST';
        const headers = {
            'X-Goog-Upload-Protocol': 'resumable',
            'X-Goog-Upload-Command': 'start',
            'X-Goog-Upload-Header-Content-Length': blob.size(),
            'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType'],
            'Content-Type': 'application/json; charset=utf-8'
        };
        const body = toResourceString(metadataForUpload, mappings);
        const timeout = service.maxUploadRetryTime;
        function handler(xhr) {
            checkResumeHeader_(xhr);
            let url;
            try {
                url = xhr.getResponseHeader('X-Goog-Upload-URL');
            }
            catch (e) {
                handlerCheck(false);
            }
            handlerCheck(isString(url));
            return url;
        }
        const requestInfo = new RequestInfo(url, method, handler, timeout);
        requestInfo.urlParams = urlParams;
        requestInfo.headers = headers;
        requestInfo.body = body;
        requestInfo.errorHandler = sharedErrorHandler(location);
        return requestInfo;
    }
    /**
     * @param url From a call to fbs.requests.createResumableUpload.
     */
    function getResumableUploadStatus(service, location, url, blob) {
        const headers = { 'X-Goog-Upload-Command': 'query' };
        function handler(xhr) {
            const status = checkResumeHeader_(xhr, ['active', 'final']);
            let sizeString = null;
            try {
                sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');
            }
            catch (e) {
                handlerCheck(false);
            }
            if (!sizeString) {
                // null or empty string
                handlerCheck(false);
            }
            const size = Number(sizeString);
            handlerCheck(!isNaN(size));
            return new ResumableUploadStatus(size, blob.size(), status === 'final');
        }
        const method = 'POST';
        const timeout = service.maxUploadRetryTime;
        const requestInfo = new RequestInfo(url, method, handler, timeout);
        requestInfo.headers = headers;
        requestInfo.errorHandler = sharedErrorHandler(location);
        return requestInfo;
    }
    /**
     * Any uploads via the resumable upload API must transfer a number of bytes
     * that is a multiple of this number.
     */
    const RESUMABLE_UPLOAD_CHUNK_SIZE = 256 * 1024;
    /**
     * @param url From a call to fbs.requests.createResumableUpload.
     * @param chunkSize Number of bytes to upload.
     * @param status The previous status.
     *     If not passed or null, we start from the beginning.
     * @throws fbs.Error If the upload is already complete, the passed in status
     *     has a final size inconsistent with the blob, or the blob cannot be sliced
     *     for upload.
     */
    function continueResumableUpload(location, service, url, blob, chunkSize, mappings, status, progressCallback) {
        // TODO(andysoto): standardize on internal asserts
        // assert(!(opt_status && opt_status.finalized));
        const status_ = new ResumableUploadStatus(0, 0);
        if (status) {
            status_.current = status.current;
            status_.total = status.total;
        }
        else {
            status_.current = 0;
            status_.total = blob.size();
        }
        if (blob.size() !== status_.total) {
            throw serverFileWrongSize();
        }
        const bytesLeft = status_.total - status_.current;
        let bytesToUpload = bytesLeft;
        if (chunkSize > 0) {
            bytesToUpload = Math.min(bytesToUpload, chunkSize);
        }
        const startByte = status_.current;
        const endByte = startByte + bytesToUpload;
        const uploadCommand = bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';
        const headers = {
            'X-Goog-Upload-Command': uploadCommand,
            'X-Goog-Upload-Offset': status_.current
        };
        const body = blob.slice(startByte, endByte);
        if (body === null) {
            throw cannotSliceBlob();
        }
        function handler(xhr, text) {
            // TODO(andysoto): Verify the MD5 of each uploaded range:
            // the 'x-range-md5' header comes back with status code 308 responses.
            // We'll only be able to bail out though, because you can't re-upload a
            // range that you previously uploaded.
            const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);
            const newCurrent = status_.current + bytesToUpload;
            const size = blob.size();
            let metadata;
            if (uploadStatus === 'final') {
                metadata = metadataHandler(service, mappings)(xhr, text);
            }
            else {
                metadata = null;
            }
            return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);
        }
        const method = 'POST';
        const timeout = service.maxUploadRetryTime;
        const requestInfo = new RequestInfo(url, method, handler, timeout);
        requestInfo.headers = headers;
        requestInfo.body = body.uploadData();
        requestInfo.progressCallback = progressCallback || null;
        requestInfo.errorHandler = sharedErrorHandler(location);
        return requestInfo;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Represents the current state of a running upload.
     */
    const TaskState = {
        /** The task is currently transferring data. */
        RUNNING: 'running',
        /** The task was paused by the user. */
        PAUSED: 'paused',
        /** The task completed successfully. */
        SUCCESS: 'success',
        /** The task was canceled. */
        CANCELED: 'canceled',
        /** The task failed with an error. */
        ERROR: 'error'
    };
    function taskStateFromInternalTaskState(state) {
        switch (state) {
            case "running" /* RUNNING */:
            case "pausing" /* PAUSING */:
            case "canceling" /* CANCELING */:
                return TaskState.RUNNING;
            case "paused" /* PAUSED */:
                return TaskState.PAUSED;
            case "success" /* SUCCESS */:
                return TaskState.SUCCESS;
            case "canceled" /* CANCELED */:
                return TaskState.CANCELED;
            case "error" /* ERROR */:
                return TaskState.ERROR;
            default:
                // TODO(andysoto): assert(false);
                return TaskState.ERROR;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class Observer {
        constructor(nextOrObserver, error, complete) {
            const asFunctions = isFunction(nextOrObserver) || error != null || complete != null;
            if (asFunctions) {
                this.next = nextOrObserver;
                this.error = error;
                this.complete = complete;
            }
            else {
                const observer = nextOrObserver;
                this.next = observer.next;
                this.error = observer.error;
                this.complete = observer.complete;
            }
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns a function that invokes f with its arguments asynchronously as a
     * microtask, i.e. as soon as possible after the current script returns back
     * into browser code.
     */
    // eslint-disable-next-line @typescript-eslint/ban-types
    function async(f) {
        return (...argsToForward) => {
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            Promise.resolve().then(() => f(...argsToForward));
        };
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Represents a blob being uploaded. Can be used to pause/resume/cancel the
     * upload and manage callbacks for various events.
     * @public
     */
    class UploadTask {
        /**
         * @param ref - The firebaseStorage.Reference object this task came
         *     from, untyped to avoid cyclic dependencies.
         * @param blob - The blob to upload.
         */
        constructor(ref, blob, metadata = null) {
            /**
             * Number of bytes transferred so far.
             */
            this._transferred = 0;
            this._needToFetchStatus = false;
            this._needToFetchMetadata = false;
            this._observers = [];
            this._error = undefined;
            this._uploadUrl = undefined;
            this._request = undefined;
            this._chunkMultiplier = 1;
            this._resolve = undefined;
            this._reject = undefined;
            this._ref = ref;
            this._blob = blob;
            this._metadata = metadata;
            this._mappings = getMappings();
            this._resumable = this._shouldDoResumable(this._blob);
            this._state = "running" /* RUNNING */;
            this._errorHandler = error => {
                this._request = undefined;
                this._chunkMultiplier = 1;
                if (error._codeEquals("canceled" /* CANCELED */)) {
                    this._needToFetchStatus = true;
                    this.completeTransitions_();
                }
                else {
                    this._error = error;
                    this._transition("error" /* ERROR */);
                }
            };
            this._metadataErrorHandler = error => {
                this._request = undefined;
                if (error._codeEquals("canceled" /* CANCELED */)) {
                    this.completeTransitions_();
                }
                else {
                    this._error = error;
                    this._transition("error" /* ERROR */);
                }
            };
            this._promise = new Promise((resolve, reject) => {
                this._resolve = resolve;
                this._reject = reject;
                this._start();
            });
            // Prevent uncaught rejections on the internal promise from bubbling out
            // to the top level with a dummy handler.
            this._promise.then(null, () => { });
        }
        _makeProgressCallback() {
            const sizeBefore = this._transferred;
            return loaded => this._updateProgress(sizeBefore + loaded);
        }
        _shouldDoResumable(blob) {
            return blob.size() > 256 * 1024;
        }
        _start() {
            if (this._state !== "running" /* RUNNING */) {
                // This can happen if someone pauses us in a resume callback, for example.
                return;
            }
            if (this._request !== undefined) {
                return;
            }
            if (this._resumable) {
                if (this._uploadUrl === undefined) {
                    this._createResumable();
                }
                else {
                    if (this._needToFetchStatus) {
                        this._fetchStatus();
                    }
                    else {
                        if (this._needToFetchMetadata) {
                            // Happens if we miss the metadata on upload completion.
                            this._fetchMetadata();
                        }
                        else {
                            this._continueUpload();
                        }
                    }
                }
            }
            else {
                this._oneShotUpload();
            }
        }
        _resolveToken(callback) {
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this._ref.storage._getAuthToken().then(authToken => {
                switch (this._state) {
                    case "running" /* RUNNING */:
                        callback(authToken);
                        break;
                    case "canceling" /* CANCELING */:
                        this._transition("canceled" /* CANCELED */);
                        break;
                    case "pausing" /* PAUSING */:
                        this._transition("paused" /* PAUSED */);
                        break;
                }
            });
        }
        // TODO(andysoto): assert false
        _createResumable() {
            this._resolveToken(authToken => {
                const requestInfo = createResumableUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);
                const createRequest = this._ref.storage._makeRequest(requestInfo, authToken);
                this._request = createRequest;
                createRequest.getPromise().then((url) => {
                    this._request = undefined;
                    this._uploadUrl = url;
                    this._needToFetchStatus = false;
                    this.completeTransitions_();
                }, this._errorHandler);
            });
        }
        _fetchStatus() {
            // TODO(andysoto): assert(this.uploadUrl_ !== null);
            const url = this._uploadUrl;
            this._resolveToken(authToken => {
                const requestInfo = getResumableUploadStatus(this._ref.storage, this._ref._location, url, this._blob);
                const statusRequest = this._ref.storage._makeRequest(requestInfo, authToken);
                this._request = statusRequest;
                statusRequest.getPromise().then(status => {
                    status = status;
                    this._request = undefined;
                    this._updateProgress(status.current);
                    this._needToFetchStatus = false;
                    if (status.finalized) {
                        this._needToFetchMetadata = true;
                    }
                    this.completeTransitions_();
                }, this._errorHandler);
            });
        }
        _continueUpload() {
            const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;
            const status = new ResumableUploadStatus(this._transferred, this._blob.size());
            // TODO(andysoto): assert(this.uploadUrl_ !== null);
            const url = this._uploadUrl;
            this._resolveToken(authToken => {
                let requestInfo;
                try {
                    requestInfo = continueResumableUpload(this._ref._location, this._ref.storage, url, this._blob, chunkSize, this._mappings, status, this._makeProgressCallback());
                }
                catch (e) {
                    this._error = e;
                    this._transition("error" /* ERROR */);
                    return;
                }
                const uploadRequest = this._ref.storage._makeRequest(requestInfo, authToken);
                this._request = uploadRequest;
                uploadRequest.getPromise().then((newStatus) => {
                    this._increaseMultiplier();
                    this._request = undefined;
                    this._updateProgress(newStatus.current);
                    if (newStatus.finalized) {
                        this._metadata = newStatus.metadata;
                        this._transition("success" /* SUCCESS */);
                    }
                    else {
                        this.completeTransitions_();
                    }
                }, this._errorHandler);
            });
        }
        _increaseMultiplier() {
            const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;
            // Max chunk size is 32M.
            if (currentSize < 32 * 1024 * 1024) {
                this._chunkMultiplier *= 2;
            }
        }
        _fetchMetadata() {
            this._resolveToken(authToken => {
                const requestInfo = getMetadata(this._ref.storage, this._ref._location, this._mappings);
                const metadataRequest = this._ref.storage._makeRequest(requestInfo, authToken);
                this._request = metadataRequest;
                metadataRequest.getPromise().then(metadata => {
                    this._request = undefined;
                    this._metadata = metadata;
                    this._transition("success" /* SUCCESS */);
                }, this._metadataErrorHandler);
            });
        }
        _oneShotUpload() {
            this._resolveToken(authToken => {
                const requestInfo = multipartUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);
                const multipartRequest = this._ref.storage._makeRequest(requestInfo, authToken);
                this._request = multipartRequest;
                multipartRequest.getPromise().then(metadata => {
                    this._request = undefined;
                    this._metadata = metadata;
                    this._updateProgress(this._blob.size());
                    this._transition("success" /* SUCCESS */);
                }, this._errorHandler);
            });
        }
        _updateProgress(transferred) {
            const old = this._transferred;
            this._transferred = transferred;
            // A progress update can make the "transferred" value smaller (e.g. a
            // partial upload not completed by server, after which the "transferred"
            // value may reset to the value at the beginning of the request).
            if (this._transferred !== old) {
                this._notifyObservers();
            }
        }
        _transition(state) {
            if (this._state === state) {
                return;
            }
            switch (state) {
                case "canceling" /* CANCELING */:
                    // TODO(andysoto):
                    // assert(this.state_ === InternalTaskState.RUNNING ||
                    //        this.state_ === InternalTaskState.PAUSING);
                    this._state = state;
                    if (this._request !== undefined) {
                        this._request.cancel();
                    }
                    break;
                case "pausing" /* PAUSING */:
                    // TODO(andysoto):
                    // assert(this.state_ === InternalTaskState.RUNNING);
                    this._state = state;
                    if (this._request !== undefined) {
                        this._request.cancel();
                    }
                    break;
                case "running" /* RUNNING */:
                    // TODO(andysoto):
                    // assert(this.state_ === InternalTaskState.PAUSED ||
                    //        this.state_ === InternalTaskState.PAUSING);
                    const wasPaused = this._state === "paused" /* PAUSED */;
                    this._state = state;
                    if (wasPaused) {
                        this._notifyObservers();
                        this._start();
                    }
                    break;
                case "paused" /* PAUSED */:
                    // TODO(andysoto):
                    // assert(this.state_ === InternalTaskState.PAUSING);
                    this._state = state;
                    this._notifyObservers();
                    break;
                case "canceled" /* CANCELED */:
                    // TODO(andysoto):
                    // assert(this.state_ === InternalTaskState.PAUSED ||
                    //        this.state_ === InternalTaskState.CANCELING);
                    this._error = canceled();
                    this._state = state;
                    this._notifyObservers();
                    break;
                case "error" /* ERROR */:
                    // TODO(andysoto):
                    // assert(this.state_ === InternalTaskState.RUNNING ||
                    //        this.state_ === InternalTaskState.PAUSING ||
                    //        this.state_ === InternalTaskState.CANCELING);
                    this._state = state;
                    this._notifyObservers();
                    break;
                case "success" /* SUCCESS */:
                    // TODO(andysoto):
                    // assert(this.state_ === InternalTaskState.RUNNING ||
                    //        this.state_ === InternalTaskState.PAUSING ||
                    //        this.state_ === InternalTaskState.CANCELING);
                    this._state = state;
                    this._notifyObservers();
                    break;
            }
        }
        completeTransitions_() {
            switch (this._state) {
                case "pausing" /* PAUSING */:
                    this._transition("paused" /* PAUSED */);
                    break;
                case "canceling" /* CANCELING */:
                    this._transition("canceled" /* CANCELED */);
                    break;
                case "running" /* RUNNING */:
                    this._start();
                    break;
            }
        }
        /**
         * A snapshot of the current task state.
         */
        get snapshot() {
            const externalState = taskStateFromInternalTaskState(this._state);
            return {
                bytesTransferred: this._transferred,
                totalBytes: this._blob.size(),
                state: externalState,
                metadata: this._metadata,
                task: this,
                ref: this._ref
            };
        }
        /**
         * Adds a callback for an event.
         * @param type - The type of event to listen for.
         * @param nextOrObserver -
         *     The `next` function, which gets called for each item in
         *     the event stream, or an observer object with some or all of these three
         *     properties (`next`, `error`, `complete`).
         * @param error - A function that gets called with a `FirebaseStorageError`
         *     if the event stream ends due to an error.
         * @param completed - A function that gets called if the
         *     event stream ends normally.
         * @returns
         *     If only the event argument is passed, returns a function you can use to
         *     add callbacks (see the examples above). If more than just the event
         *     argument is passed, returns a function you can call to unregister the
         *     callbacks.
         */
        on(type, nextOrObserver, error, completed) {
            const observer = new Observer(nextOrObserver, error, completed);
            this._addObserver(observer);
            return () => {
                this._removeObserver(observer);
            };
        }
        /**
         * This object behaves like a Promise, and resolves with its snapshot data
         * when the upload completes.
         * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.
         * @param onRejected - The rejection callback.
         */
        then(onFulfilled, onRejected) {
            // These casts are needed so that TypeScript can infer the types of the
            // resulting Promise.
            return this._promise.then(onFulfilled, onRejected);
        }
        /**
         * Equivalent to calling `then(null, onRejected)`.
         */
        catch(onRejected) {
            return this.then(null, onRejected);
        }
        /**
         * Adds the given observer.
         */
        _addObserver(observer) {
            this._observers.push(observer);
            this._notifyObserver(observer);
        }
        /**
         * Removes the given observer.
         */
        _removeObserver(observer) {
            const i = this._observers.indexOf(observer);
            if (i !== -1) {
                this._observers.splice(i, 1);
            }
        }
        _notifyObservers() {
            this._finishPromise();
            const observers = this._observers.slice();
            observers.forEach(observer => {
                this._notifyObserver(observer);
            });
        }
        _finishPromise() {
            if (this._resolve !== undefined) {
                let triggered = true;
                switch (taskStateFromInternalTaskState(this._state)) {
                    case TaskState.SUCCESS:
                        async(this._resolve.bind(null, this.snapshot))();
                        break;
                    case TaskState.CANCELED:
                    case TaskState.ERROR:
                        const toCall = this._reject;
                        async(toCall.bind(null, this._error))();
                        break;
                    default:
                        triggered = false;
                        break;
                }
                if (triggered) {
                    this._resolve = undefined;
                    this._reject = undefined;
                }
            }
        }
        _notifyObserver(observer) {
            const externalState = taskStateFromInternalTaskState(this._state);
            switch (externalState) {
                case TaskState.RUNNING:
                case TaskState.PAUSED:
                    if (observer.next) {
                        async(observer.next.bind(observer, this.snapshot))();
                    }
                    break;
                case TaskState.SUCCESS:
                    if (observer.complete) {
                        async(observer.complete.bind(observer))();
                    }
                    break;
                case TaskState.CANCELED:
                case TaskState.ERROR:
                    if (observer.error) {
                        async(observer.error.bind(observer, this._error))();
                    }
                    break;
                default:
                    // TODO(andysoto): assert(false);
                    if (observer.error) {
                        async(observer.error.bind(observer, this._error))();
                    }
            }
        }
        /**
         * Resumes a paused task. Has no effect on a currently running or failed task.
         * @returns True if the operation took effect, false if ignored.
         */
        resume() {
            const valid = this._state === "paused" /* PAUSED */ ||
                this._state === "pausing" /* PAUSING */;
            if (valid) {
                this._transition("running" /* RUNNING */);
            }
            return valid;
        }
        /**
         * Pauses a currently running task. Has no effect on a paused or failed task.
         * @returns True if the operation took effect, false if ignored.
         */
        pause() {
            const valid = this._state === "running" /* RUNNING */;
            if (valid) {
                this._transition("pausing" /* PAUSING */);
            }
            return valid;
        }
        /**
         * Cancels a currently running or paused task. Has no effect on a complete or
         * failed task.
         * @returns True if the operation took effect, false if ignored.
         */
        cancel() {
            const valid = this._state === "running" /* RUNNING */ ||
                this._state === "pausing" /* PAUSING */;
            if (valid) {
                this._transition("canceling" /* CANCELING */);
            }
            return valid;
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provides methods to interact with a bucket in the Firebase Storage service.
     * @public
     * @param _location - An fbs.location, or the URL at
     *     which to base this object, in one of the following forms:
     *         gs://<bucket>/<object-path>
     *         http[s]://firebasestorage.googleapis.com/
     *                     <api-version>/b/<bucket>/o/<object-path>
     *     Any query or fragment strings will be ignored in the http[s]
     *     format. If no value is passed, the storage object will use a URL based on
     *     the project ID of the base firebase.App instance.
     */
    class Reference {
        constructor(_service, location) {
            this._service = _service;
            if (location instanceof Location) {
                this._location = location;
            }
            else {
                this._location = Location.makeFromUrl(location);
            }
        }
        /**
         * Returns the URL for the bucket and path this object references,
         *     in the form gs://<bucket>/<object-path>
         * @override
         */
        toString() {
            return 'gs://' + this._location.bucket + '/' + this._location.path;
        }
        _newRef(service, location) {
            return new Reference(service, location);
        }
        /**
         * A reference to the root of this object's bucket.
         */
        get root() {
            const location = new Location(this._location.bucket, '');
            return this._newRef(this._service, location);
        }
        /**
         * The name of the bucket containing this reference's object.
         */
        get bucket() {
            return this._location.bucket;
        }
        /**
         * The full path of this object.
         */
        get fullPath() {
            return this._location.path;
        }
        /**
         * The short name of this object, which is the last component of the full path.
         * For example, if fullPath is 'full/path/image.png', name is 'image.png'.
         */
        get name() {
            return lastComponent(this._location.path);
        }
        /**
         * The `StorageService` instance this `StorageReference` is associated with.
         */
        get storage() {
            return this._service;
        }
        /**
         * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if
         * this reference is the root.
         */
        get parent() {
            const newPath = parent(this._location.path);
            if (newPath === null) {
                return null;
            }
            const location = new Location(this._location.bucket, newPath);
            return new Reference(this._service, location);
        }
        /**
         * Utility function to throw an error in methods that do not accept a root reference.
         */
        _throwIfRoot(name) {
            if (this._location.path === '') {
                throw invalidRootOperation(name);
            }
        }
    }
    /**
     * Uploads data to this object's location.
     * The upload is not resumable.
     *
     * @param ref - StorageReference where data should be uploaded.
     * @param data - The data to upload.
     * @param metadata - Metadata for the newly uploaded data.
     * @returns A Promise containing an UploadResult
     */
    function uploadBytes(ref, data, metadata) {
        ref._throwIfRoot('uploadBytes');
        return ref.storage
            ._getAuthToken()
            .then(authToken => {
            const requestInfo = multipartUpload(ref.storage, ref._location, getMappings(), new FbsBlob(data, true), metadata);
            const multipartRequest = ref.storage._makeRequest(requestInfo, authToken);
            return multipartRequest.getPromise();
        })
            .then(finalMetadata => {
            return {
                metadata: finalMetadata,
                ref
            };
        });
    }
    /**
     * Uploads data to this object's location.
     * The upload can be paused and resumed, and exposes progress updates.
     * @public
     * @param ref - StorageReference where data should be uploaded.
     * @param data - The data to upload.
     * @param metadata - Metadata for the newly uploaded data.
     * @returns An UploadTask
     */
    function uploadBytesResumable(ref, data, metadata) {
        ref._throwIfRoot('uploadBytesResumable');
        return new UploadTask(ref, new FbsBlob(data), metadata);
    }
    /**
     * Uploads a string to this object's location.
     * The upload is not resumable.
     * @public
     * @param ref - StorageReference where string should be uploaded.
     * @param value - The string to upload.
     * @param format - The format of the string to upload.
     * @param metadata - Metadata for the newly uploaded string.
     * @returns A Promise containing an UploadResult
     */
    function uploadString(ref, value, format = StringFormat.RAW, metadata) {
        ref._throwIfRoot('uploadString');
        const data = dataFromString(format, value);
        const metadataClone = Object.assign({}, metadata);
        if (metadataClone['contentType'] == null && data.contentType != null) {
            metadataClone['contentType'] = data.contentType;
        }
        return uploadBytes(ref, data.data, metadataClone);
    }
    /**
     * List all items (files) and prefixes (folders) under this storage reference.
     *
     * This is a helper method for calling list() repeatedly until there are
     * no more results. The default pagination size is 1000.
     *
     * Note: The results may not be consistent if objects are changed while this
     * operation is running.
     *
     * Warning: listAll may potentially consume too many resources if there are
     * too many results.
     * @public
     * @param ref - StorageReference to get list from.
     *
     * @returns A Promise that resolves with all the items and prefixes under
     *      the current storage reference. `prefixes` contains references to
     *      sub-directories and `items` contains references to objects in this
     *      folder. `nextPageToken` is never returned.
     */
    function listAll(ref) {
        const accumulator = {
            prefixes: [],
            items: []
        };
        return listAllHelper(ref, accumulator).then(() => accumulator);
    }
    /**
     * Separated from listAll because async functions can't use "arguments".
     * @param ref
     * @param accumulator
     * @param pageToken
     */
    async function listAllHelper(ref, accumulator, pageToken) {
        const opt = {
            // maxResults is 1000 by default.
            pageToken
        };
        const nextPage = await list$1(ref, opt);
        accumulator.prefixes.push(...nextPage.prefixes);
        accumulator.items.push(...nextPage.items);
        if (nextPage.nextPageToken != null) {
            await listAllHelper(ref, accumulator, nextPage.nextPageToken);
        }
    }
    /**
     * List items (files) and prefixes (folders) under this storage reference.
     *
     * List API is only available for Firebase Rules Version 2.
     *
     * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'
     * delimited folder structure.
     * Refer to GCS's List API if you want to learn more.
     *
     * To adhere to Firebase Rules's Semantics, Firebase Storage does not
     * support objects whose paths end with "/" or contain two consecutive
     * "/"s. Firebase Storage List API will filter these unsupported objects.
     * list() may fail if there are too many unsupported objects in the bucket.
     * @public
     *
     * @param ref - StorageReference to get list from.
     * @param options - See ListOptions for details.
     * @returns A Promise that resolves with the items and prefixes.
     *      `prefixes` contains references to sub-folders and `items`
     *      contains references to objects in this folder. `nextPageToken`
     *      can be used to get the rest of the results.
     */
    async function list$1(ref, options) {
        if (options != null) {
            if (typeof options.maxResults === 'number') {
                validateNumber('options.maxResults', 
                /* minValue= */ 1, 
                /* maxValue= */ 1000, options.maxResults);
            }
        }
        const authToken = await ref.storage._getAuthToken();
        const op = options || {};
        const requestInfo = list(ref.storage, ref._location, 
        /*delimiter= */ '/', op.pageToken, op.maxResults);
        return ref.storage._makeRequest(requestInfo, authToken).getPromise();
    }
    /**
     * A promise that resolves with the metadata for this object. If this
     * object doesn't exist or metadata cannot be retreived, the promise is
     * rejected.
     * @public
     * @param ref - StorageReference to get metadata from.
     */
    async function getMetadata$1(ref) {
        ref._throwIfRoot('getMetadata');
        const authToken = await ref.storage._getAuthToken();
        const requestInfo = getMetadata(ref.storage, ref._location, getMappings());
        return ref.storage._makeRequest(requestInfo, authToken).getPromise();
    }
    /**
     * Updates the metadata for this object.
     * @public
     * @param ref - StorageReference to update metadata for.
     * @param metadata - The new metadata for the object.
     *     Only values that have been explicitly set will be changed. Explicitly
     *     setting a value to null will remove the metadata.
     * @returns A promise that resolves
     *     with the new metadata for this object.
     *     See `firebaseStorage.Reference.prototype.getMetadata`
     */
    async function updateMetadata$1(ref, metadata) {
        ref._throwIfRoot('updateMetadata');
        const authToken = await ref.storage._getAuthToken();
        const requestInfo = updateMetadata(ref.storage, ref._location, metadata, getMappings());
        return ref.storage._makeRequest(requestInfo, authToken).getPromise();
    }
    /**
     * Returns the download URL for the given Reference.
     * @public
     * @returns A promise that resolves with the download
     *     URL for this object.
     */
    async function getDownloadURL(ref) {
        ref._throwIfRoot('getDownloadURL');
        const authToken = await ref.storage._getAuthToken();
        const requestInfo = getDownloadUrl(ref.storage, ref._location, getMappings());
        return ref.storage
            ._makeRequest(requestInfo, authToken)
            .getPromise()
            .then(url => {
            if (url === null) {
                throw noDownloadURL();
            }
            return url;
        });
    }
    /**
     * Deletes the object at this location.
     * @public
     * @param ref - StorageReference for object to delete.
     * @returns A promise that resolves if the deletion succeeds.
     */
    async function deleteObject$1(ref) {
        ref._throwIfRoot('deleteObject');
        const authToken = await ref.storage._getAuthToken();
        const requestInfo = deleteObject(ref.storage, ref._location);
        return ref.storage._makeRequest(requestInfo, authToken).getPromise();
    }
    /**
     * Returns reference for object obtained by appending `childPath` to `ref`.
     *
     * @param ref - StorageReference to get child of.
     * @param childPath - Child path from provided ref.
     * @returns A reference to the object obtained by
     * appending childPath, removing any duplicate, beginning, or trailing
     * slashes.
     */
    function _getChild(ref, childPath) {
        const newPath = child(ref._location.path, childPath);
        const location = new Location(ref._location.bucket, newPath);
        return new Reference(ref.storage, location);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function isUrl(path) {
        return /^[A-Za-z]+:\/\//.test(path);
    }
    /**
     * Returns a firebaseStorage.Reference for the given url.
     */
    function refFromURL(service, url) {
        return new Reference(service, url);
    }
    /**
     * Returns a firebaseStorage.Reference for the given path in the default
     * bucket.
     */
    function refFromPath(ref, path) {
        if (ref instanceof StorageService) {
            const service = ref;
            if (service._bucket == null) {
                throw noDefaultBucket();
            }
            const reference = new Reference(service, service._bucket);
            if (path != null) {
                return refFromPath(reference, path);
            }
            else {
                return reference;
            }
        }
        else {
            // ref is a Reference
            if (path !== undefined) {
                if (path.includes('..')) {
                    throw invalidArgument('`path` param cannot contain ".."');
                }
                return _getChild(ref, path);
            }
            else {
                return ref;
            }
        }
    }
    function ref(serviceOrRef, pathOrUrl) {
        if (pathOrUrl && isUrl(pathOrUrl)) {
            if (serviceOrRef instanceof StorageService) {
                return refFromURL(serviceOrRef, pathOrUrl);
            }
            else {
                throw invalidArgument('To use ref(service, url), the first argument must be a Storage instance.');
            }
        }
        else {
            return refFromPath(serviceOrRef, pathOrUrl);
        }
    }
    function extractBucket(config) {
        const bucketString = config === null || config === void 0 ? void 0 : config[CONFIG_STORAGE_BUCKET_KEY];
        if (bucketString == null) {
            return null;
        }
        return Location.makeFromBucketSpec(bucketString);
    }
    /**
     * A service that provides Firebase Storage Reference instances.
     * @public
     * @param opt_url - gs:// url to a custom Storage Bucket
     */
    class StorageService {
        constructor(
        /**
         * FirebaseApp associated with this StorageService instance.
         */
        app, _authProvider, _pool, _url, _firebaseVersion) {
            this.app = app;
            this._authProvider = _authProvider;
            this._pool = _pool;
            this._url = _url;
            this._firebaseVersion = _firebaseVersion;
            this._bucket = null;
            this._appId = null;
            this._deleted = false;
            this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;
            this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;
            this._requests = new Set();
            if (_url != null) {
                this._bucket = Location.makeFromBucketSpec(_url);
            }
            else {
                this._bucket = extractBucket(this.app.options);
            }
        }
        /**
         * The maximum time to retry uploads in milliseconds.
         */
        get maxUploadRetryTime() {
            return this._maxUploadRetryTime;
        }
        set maxUploadRetryTime(time) {
            validateNumber('time', 
            /* minValue=*/ 0, 
            /* maxValue= */ Number.POSITIVE_INFINITY, time);
            this._maxUploadRetryTime = time;
        }
        /**
         * The maximum time to retry operations other than uploads or downloads in
         * milliseconds.
         */
        get maxOperationRetryTime() {
            return this._maxOperationRetryTime;
        }
        set maxOperationRetryTime(time) {
            validateNumber('time', 
            /* minValue=*/ 0, 
            /* maxValue= */ Number.POSITIVE_INFINITY, time);
            this._maxOperationRetryTime = time;
        }
        async _getAuthToken() {
            const auth = this._authProvider.getImmediate({ optional: true });
            if (auth) {
                const tokenData = await auth.getToken();
                if (tokenData !== null) {
                    return tokenData.accessToken;
                }
            }
            return null;
        }
        /**
         * Stop running requests and prevent more from being created.
         */
        _delete() {
            this._deleted = true;
            this._requests.forEach(request => request.cancel());
            this._requests.clear();
            return Promise.resolve();
        }
        /**
         * Returns a new firebaseStorage.Reference object referencing this StorageService
         * at the given Location.
         */
        _makeStorageReference(loc) {
            return new Reference(this, loc);
        }
        /**
         * @param requestInfo - HTTP RequestInfo object
         * @param authToken - Firebase auth token
         */
        _makeRequest(requestInfo, authToken) {
            if (!this._deleted) {
                const request = makeRequest(requestInfo, this._appId, authToken, this._pool, this._firebaseVersion);
                this._requests.add(request);
                // Request removes itself from set when complete.
                request.getPromise().then(() => this._requests.delete(request), () => this._requests.delete(request));
                return request;
            }
            else {
                return new FailRequest(appDeleted());
            }
        }
    }

    const name = "@firebase/storage";
    const version = "0.0.900";

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Uploads data to this object's location.
     * The upload is not resumable.
     * @public
     * @param ref - StorageReference where data should be uploaded.
     * @param data - The data to upload.
     * @param metadata - Metadata for the data to upload.
     * @returns A Promise containing an UploadResult
     */
    function uploadBytes$1(ref, data, metadata) {
        return uploadBytes(ref, data, metadata);
    }
    /**
     * Uploads a string to this object's location.
     * The upload is not resumable.
     * @public
     * @param ref - StorageReference where string should be uploaded.
     * @param value - The string to upload.
     * @param format - The format of the string to upload.
     * @param metadata - Metadata for the string to upload.
     * @returns A Promise containing an UploadResult
     */
    function uploadString$1(ref, value, format, metadata) {
        return uploadString(ref, value, format, metadata);
    }
    /**
     * Uploads data to this object's location.
     * The upload can be paused and resumed, and exposes progress updates.
     * @public
     * @param ref - StorageReference where data should be uploaded.
     * @param data - The data to upload.
     * @param metadata - Metadata for the data to upload.
     * @returns An UploadTask
     */
    function uploadBytesResumable$1(ref, data, metadata) {
        return uploadBytesResumable(ref, data, metadata);
    }
    /**
     * A promise that resolves with the metadata for this object. If this
     * object doesn't exist or metadata cannot be retreived, the promise is
     * rejected.
     * @public
     * @param ref - StorageReference to get metadata from.
     */
    function getMetadata$2(ref) {
        return getMetadata$1(ref);
    }
    /**
     * Updates the metadata for this object.
     * @public
     * @param ref - StorageReference to update metadata for.
     * @param metadata - The new metadata for the object.
     *     Only values that have been explicitly set will be changed. Explicitly
     *     setting a value to null will remove the metadata.
     * @returns A promise that resolves with the new metadata for this object.
     */
    function updateMetadata$2(ref, metadata) {
        return updateMetadata$1(ref, metadata);
    }
    /**
     * List items (files) and prefixes (folders) under this storage reference.
     *
     * List API is only available for Firebase Rules Version 2.
     *
     * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'
     * delimited folder structure.
     * Refer to GCS's List API if you want to learn more.
     *
     * To adhere to Firebase Rules's Semantics, Firebase Storage does not
     * support objects whose paths end with "/" or contain two consecutive
     * "/"s. Firebase Storage List API will filter these unsupported objects.
     * list() may fail if there are too many unsupported objects in the bucket.
     * @public
     *
     * @param ref - StorageReference to get list from.
     * @param options - See ListOptions for details.
     * @returns A Promise that resolves with the items and prefixes.
     *      `prefixes` contains references to sub-folders and `items`
     *      contains references to objects in this folder. `nextPageToken`
     *      can be used to get the rest of the results.
     */
    function list$2(ref, options) {
        return list$1(ref, options);
    }
    /**
     * List all items (files) and prefixes (folders) under this storage reference.
     *
     * This is a helper method for calling list() repeatedly until there are
     * no more results. The default pagination size is 1000.
     *
     * Note: The results may not be consistent if objects are changed while this
     * operation is running.
     *
     * Warning: listAll may potentially consume too many resources if there are
     * too many results.
     * @public
     * @param ref - StorageReference to get list from.
     *
     * @returns A Promise that resolves with all the items and prefixes under
     *      the current storage reference. `prefixes` contains references to
     *      sub-directories and `items` contains references to objects in this
     *      folder. `nextPageToken` is never returned.
     */
    function listAll$1(ref) {
        return listAll(ref);
    }
    /**
     * Returns the download URL for the given Reference.
     * @public
     * @returns A promise that resolves with the download
     *     URL for this object.
     */
    function getDownloadURL$1(ref) {
        return getDownloadURL(ref);
    }
    /**
     * Deletes the object at this location.
     * @public
     * @param ref - StorageReference for object to delete.
     * @returns A promise that resolves if the deletion succeeds.
     */
    function deleteObject$2(ref) {
        return deleteObject$1(ref);
    }
    function ref$1(serviceOrRef, pathOrUrl) {
        return ref(serviceOrRef, pathOrUrl);
    }
    /**
     * Type constant for Firebase Storage.
     */
    const STORAGE_TYPE = 'storage-exp';
    /**
     * Gets a Firebase StorageService instance for the given Firebase app.
     * @public
     * @param app - Firebase app to get Storage instance for.
     * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.
     * If not passed, uses the app's default Storage Bucket.
     * @returns A Firebase StorageService instance.
     */
    function getStorage(app$1, bucketUrl) {
        // Dependencies
        const storageProvider = app._getProvider(app$1, STORAGE_TYPE);
        const storageInstance = storageProvider.getImmediate({
            identifier: bucketUrl
        });
        return storageInstance;
    }
    function factory(container, url) {
        const app$1 = container.getProvider('app-exp').getImmediate();
        const authProvider = container.getProvider('auth-internal');
        return new StorageService(app$1, authProvider, new XhrIoPool(), url, app.SDK_VERSION);
    }
    function registerStorage() {
        app._registerComponent(new Component(STORAGE_TYPE, factory, "PUBLIC" /* PUBLIC */).setMultipleInstances(true));
        app.registerVersion(name, version);
    }
    registerStorage();

    exports.StringFormat = StringFormat;
    exports.deleteObject = deleteObject$2;
    exports.getDownloadURL = getDownloadURL$1;
    exports.getMetadata = getMetadata$2;
    exports.getStorage = getStorage;
    exports.list = list$2;
    exports.listAll = listAll$1;
    exports.ref = ref$1;
    exports.updateMetadata = updateMetadata$2;
    exports.uploadBytes = uploadBytes$1;
    exports.uploadBytesResumable = uploadBytesResumable$1;
    exports.uploadString = uploadString$1;

    Object.defineProperty(exports, '__esModule', { value: true });


              }).apply(this, arguments);
            } catch(err) {
                console.error(err);
                throw new Error(
                  'Cannot instantiate firebase-storage.js - ' +
                  'be sure to load firebase-app.js first.'
                );
              }

})));


(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@firebase/app')) :
    typeof define === 'function' && define.amd ? define(['exports', '@firebase/app'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.firebase = global.firebase || {}, global.firebase.performance = global.firebase.performance || {}), global.firebase.app));
}(this, (function (exports, app) { 'use strict';

    try {
                (function() {

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }

    /**
     * This method checks if indexedDB is supported by current browser/service worker context
     * @return true if indexedDB is supported by current browser/service worker context
     */
    function isIndexedDBAvailable() {
        return 'indexedDB' in self && indexedDB != null;
    }
    /**
     * This method validates browser context for indexedDB by opening a dummy indexedDB database and reject
     * if errors occur during the database open operation.
     */
    function validateIndexedDBOpenable() {
        return new Promise(function (resolve, reject) {
            try {
                var preExist_1 = true;
                var DB_CHECK_NAME_1 = 'validate-browser-context-for-indexeddb-analytics-module';
                var request_1 = window.indexedDB.open(DB_CHECK_NAME_1);
                request_1.onsuccess = function () {
                    request_1.result.close();
                    // delete database only when it doesn't pre-exist
                    if (!preExist_1) {
                        window.indexedDB.deleteDatabase(DB_CHECK_NAME_1);
                    }
                    resolve(true);
                };
                request_1.onupgradeneeded = function () {
                    preExist_1 = false;
                };
                request_1.onerror = function () {
                    var _a;
                    reject(((_a = request_1.error) === null || _a === void 0 ? void 0 : _a.message) || '');
                };
            }
            catch (error) {
                reject(error);
            }
        });
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ERROR_NAME = 'FirebaseError';
    // Based on code from:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
    var FirebaseError = /** @class */ (function (_super) {
        __extends(FirebaseError, _super);
        function FirebaseError(code, message, customData) {
            var _this = _super.call(this, message) || this;
            _this.code = code;
            _this.customData = customData;
            _this.name = ERROR_NAME;
            // Fix For ES5
            // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
            Object.setPrototypeOf(_this, FirebaseError.prototype);
            // Maintains proper stack trace for where our error was thrown.
            // Only available on V8.
            if (Error.captureStackTrace) {
                Error.captureStackTrace(_this, ErrorFactory.prototype.create);
            }
            return _this;
        }
        return FirebaseError;
    }(Error));
    var ErrorFactory = /** @class */ (function () {
        function ErrorFactory(service, serviceName, errors) {
            this.service = service;
            this.serviceName = serviceName;
            this.errors = errors;
        }
        ErrorFactory.prototype.create = function (code) {
            var data = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                data[_i - 1] = arguments[_i];
            }
            var customData = data[0] || {};
            var fullCode = this.service + "/" + code;
            var template = this.errors[code];
            var message = template ? replaceTemplate(template, customData) : 'Error';
            // Service Name: Error message (service/code).
            var fullMessage = this.serviceName + ": " + message + " (" + fullCode + ").";
            var error = new FirebaseError(fullCode, fullMessage, customData);
            return error;
        };
        return ErrorFactory;
    }());
    function replaceTemplate(template, data) {
        return template.replace(PATTERN, function (_, key) {
            var value = data[key];
            return value != null ? String(value) : "<" + key + "?>";
        });
    }
    var PATTERN = /\{\$([^}]+)}/g;

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    function __spreadArrays$1() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a;
    /**
     * The JS SDK supports 5 log levels and also allows a user the ability to
     * silence the logs altogether.
     *
     * The order is a follows:
     * DEBUG < VERBOSE < INFO < WARN < ERROR
     *
     * All of the log types above the current log level will be captured (i.e. if
     * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
     * `VERBOSE` logs will not)
     */
    var LogLevel;
    (function (LogLevel) {
        LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
        LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
        LogLevel[LogLevel["INFO"] = 2] = "INFO";
        LogLevel[LogLevel["WARN"] = 3] = "WARN";
        LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
        LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
    })(LogLevel || (LogLevel = {}));
    var levelStringToEnum = {
        'debug': LogLevel.DEBUG,
        'verbose': LogLevel.VERBOSE,
        'info': LogLevel.INFO,
        'warn': LogLevel.WARN,
        'error': LogLevel.ERROR,
        'silent': LogLevel.SILENT
    };
    /**
     * The default log level
     */
    var defaultLogLevel = LogLevel.INFO;
    /**
     * By default, `console.debug` is not displayed in the developer console (in
     * chrome). To avoid forcing users to have to opt-in to these logs twice
     * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
     * logs to the `console.log` function.
     */
    var ConsoleMethod = (_a = {},
        _a[LogLevel.DEBUG] = 'log',
        _a[LogLevel.VERBOSE] = 'log',
        _a[LogLevel.INFO] = 'info',
        _a[LogLevel.WARN] = 'warn',
        _a[LogLevel.ERROR] = 'error',
        _a);
    /**
     * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
     * messages on to their corresponding console counterparts (if the log method
     * is supported by the current log level)
     */
    var defaultLogHandler = function (instance, logType) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        if (logType < instance.logLevel) {
            return;
        }
        var now = new Date().toISOString();
        var method = ConsoleMethod[logType];
        if (method) {
            console[method].apply(console, __spreadArrays$1(["[" + now + "]  " + instance.name + ":"], args));
        }
        else {
            throw new Error("Attempted to log a message with an invalid logType (value: " + logType + ")");
        }
    };
    var Logger = /** @class */ (function () {
        /**
         * Gives you an instance of a Logger to capture messages according to
         * Firebase's logging scheme.
         *
         * @param name The name that the logs will be associated with
         */
        function Logger(name) {
            this.name = name;
            /**
             * The log level of the given Logger instance.
             */
            this._logLevel = defaultLogLevel;
            /**
             * The main (internal) log handler for the Logger instance.
             * Can be set to a new function in internal package code but not by user.
             */
            this._logHandler = defaultLogHandler;
            /**
             * The optional, additional, user-defined log handler for the Logger instance.
             */
            this._userLogHandler = null;
        }
        Object.defineProperty(Logger.prototype, "logLevel", {
            get: function () {
                return this._logLevel;
            },
            set: function (val) {
                if (!(val in LogLevel)) {
                    throw new TypeError("Invalid value \"" + val + "\" assigned to `logLevel`");
                }
                this._logLevel = val;
            },
            enumerable: false,
            configurable: true
        });
        // Workaround for setter/getter having to be the same type.
        Logger.prototype.setLogLevel = function (val) {
            this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;
        };
        Object.defineProperty(Logger.prototype, "logHandler", {
            get: function () {
                return this._logHandler;
            },
            set: function (val) {
                if (typeof val !== 'function') {
                    throw new TypeError('Value assigned to `logHandler` must be a function');
                }
                this._logHandler = val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Logger.prototype, "userLogHandler", {
            get: function () {
                return this._userLogHandler;
            },
            set: function (val) {
                this._userLogHandler = val;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * The functions below are all based on the `console` interface
         */
        Logger.prototype.debug = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$1([this, LogLevel.DEBUG], args));
            this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.DEBUG], args));
        };
        Logger.prototype.log = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$1([this, LogLevel.VERBOSE], args));
            this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.VERBOSE], args));
        };
        Logger.prototype.info = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$1([this, LogLevel.INFO], args));
            this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.INFO], args));
        };
        Logger.prototype.warn = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$1([this, LogLevel.WARN], args));
            this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.WARN], args));
        };
        Logger.prototype.error = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$1([this, LogLevel.ERROR], args));
            this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.ERROR], args));
        };
        return Logger;
    }());

    /**
     * Component for service name T, e.g. `auth`, `auth-internal`
     */
    var Component = /** @class */ (function () {
        /**
         *
         * @param name The public service name, e.g. app, auth, firestore, database
         * @param instanceFactory Service factory responsible for creating the public interface
         * @param type whether the service provided by the component is public or private
         */
        function Component(name, instanceFactory, type) {
            this.name = name;
            this.instanceFactory = instanceFactory;
            this.type = type;
            this.multipleInstances = false;
            /**
             * Properties to be added to the service namespace
             */
            this.serviceProps = {};
            this.instantiationMode = "LAZY" /* LAZY */;
        }
        Component.prototype.setInstantiationMode = function (mode) {
            this.instantiationMode = mode;
            return this;
        };
        Component.prototype.setMultipleInstances = function (multipleInstances) {
            this.multipleInstances = multipleInstances;
            return this;
        };
        Component.prototype.setServiceProps = function (props) {
            this.serviceProps = props;
            return this;
        };
        return Component;
    }());

    function toArray(arr) {
      return Array.prototype.slice.call(arr);
    }

    function promisifyRequest(request) {
      return new Promise(function(resolve, reject) {
        request.onsuccess = function() {
          resolve(request.result);
        };

        request.onerror = function() {
          reject(request.error);
        };
      });
    }

    function promisifyRequestCall(obj, method, args) {
      var request;
      var p = new Promise(function(resolve, reject) {
        request = obj[method].apply(obj, args);
        promisifyRequest(request).then(resolve, reject);
      });

      p.request = request;
      return p;
    }

    function promisifyCursorRequestCall(obj, method, args) {
      var p = promisifyRequestCall(obj, method, args);
      return p.then(function(value) {
        if (!value) return;
        return new Cursor(value, p.request);
      });
    }

    function proxyProperties(ProxyClass, targetProp, properties) {
      properties.forEach(function(prop) {
        Object.defineProperty(ProxyClass.prototype, prop, {
          get: function() {
            return this[targetProp][prop];
          },
          set: function(val) {
            this[targetProp][prop] = val;
          }
        });
      });
    }

    function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {
      properties.forEach(function(prop) {
        if (!(prop in Constructor.prototype)) return;
        ProxyClass.prototype[prop] = function() {
          return promisifyRequestCall(this[targetProp], prop, arguments);
        };
      });
    }

    function proxyMethods(ProxyClass, targetProp, Constructor, properties) {
      properties.forEach(function(prop) {
        if (!(prop in Constructor.prototype)) return;
        ProxyClass.prototype[prop] = function() {
          return this[targetProp][prop].apply(this[targetProp], arguments);
        };
      });
    }

    function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {
      properties.forEach(function(prop) {
        if (!(prop in Constructor.prototype)) return;
        ProxyClass.prototype[prop] = function() {
          return promisifyCursorRequestCall(this[targetProp], prop, arguments);
        };
      });
    }

    function Index(index) {
      this._index = index;
    }

    proxyProperties(Index, '_index', [
      'name',
      'keyPath',
      'multiEntry',
      'unique'
    ]);

    proxyRequestMethods(Index, '_index', IDBIndex, [
      'get',
      'getKey',
      'getAll',
      'getAllKeys',
      'count'
    ]);

    proxyCursorRequestMethods(Index, '_index', IDBIndex, [
      'openCursor',
      'openKeyCursor'
    ]);

    function Cursor(cursor, request) {
      this._cursor = cursor;
      this._request = request;
    }

    proxyProperties(Cursor, '_cursor', [
      'direction',
      'key',
      'primaryKey',
      'value'
    ]);

    proxyRequestMethods(Cursor, '_cursor', IDBCursor, [
      'update',
      'delete'
    ]);

    // proxy 'next' methods
    ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {
      if (!(methodName in IDBCursor.prototype)) return;
      Cursor.prototype[methodName] = function() {
        var cursor = this;
        var args = arguments;
        return Promise.resolve().then(function() {
          cursor._cursor[methodName].apply(cursor._cursor, args);
          return promisifyRequest(cursor._request).then(function(value) {
            if (!value) return;
            return new Cursor(value, cursor._request);
          });
        });
      };
    });

    function ObjectStore(store) {
      this._store = store;
    }

    ObjectStore.prototype.createIndex = function() {
      return new Index(this._store.createIndex.apply(this._store, arguments));
    };

    ObjectStore.prototype.index = function() {
      return new Index(this._store.index.apply(this._store, arguments));
    };

    proxyProperties(ObjectStore, '_store', [
      'name',
      'keyPath',
      'indexNames',
      'autoIncrement'
    ]);

    proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [
      'put',
      'add',
      'delete',
      'clear',
      'get',
      'getAll',
      'getKey',
      'getAllKeys',
      'count'
    ]);

    proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [
      'openCursor',
      'openKeyCursor'
    ]);

    proxyMethods(ObjectStore, '_store', IDBObjectStore, [
      'deleteIndex'
    ]);

    function Transaction(idbTransaction) {
      this._tx = idbTransaction;
      this.complete = new Promise(function(resolve, reject) {
        idbTransaction.oncomplete = function() {
          resolve();
        };
        idbTransaction.onerror = function() {
          reject(idbTransaction.error);
        };
        idbTransaction.onabort = function() {
          reject(idbTransaction.error);
        };
      });
    }

    Transaction.prototype.objectStore = function() {
      return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));
    };

    proxyProperties(Transaction, '_tx', [
      'objectStoreNames',
      'mode'
    ]);

    proxyMethods(Transaction, '_tx', IDBTransaction, [
      'abort'
    ]);

    function UpgradeDB(db, oldVersion, transaction) {
      this._db = db;
      this.oldVersion = oldVersion;
      this.transaction = new Transaction(transaction);
    }

    UpgradeDB.prototype.createObjectStore = function() {
      return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));
    };

    proxyProperties(UpgradeDB, '_db', [
      'name',
      'version',
      'objectStoreNames'
    ]);

    proxyMethods(UpgradeDB, '_db', IDBDatabase, [
      'deleteObjectStore',
      'close'
    ]);

    function DB(db) {
      this._db = db;
    }

    DB.prototype.transaction = function() {
      return new Transaction(this._db.transaction.apply(this._db, arguments));
    };

    proxyProperties(DB, '_db', [
      'name',
      'version',
      'objectStoreNames'
    ]);

    proxyMethods(DB, '_db', IDBDatabase, [
      'close'
    ]);

    // Add cursor iterators
    // TODO: remove this once browsers do the right thing with promises
    ['openCursor', 'openKeyCursor'].forEach(function(funcName) {
      [ObjectStore, Index].forEach(function(Constructor) {
        // Don't create iterateKeyCursor if openKeyCursor doesn't exist.
        if (!(funcName in Constructor.prototype)) return;

        Constructor.prototype[funcName.replace('open', 'iterate')] = function() {
          var args = toArray(arguments);
          var callback = args[args.length - 1];
          var nativeObject = this._store || this._index;
          var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));
          request.onsuccess = function() {
            callback(request.result);
          };
        };
      });
    });

    // polyfill getAll
    [Index, ObjectStore].forEach(function(Constructor) {
      if (Constructor.prototype.getAll) return;
      Constructor.prototype.getAll = function(query, count) {
        var instance = this;
        var items = [];

        return new Promise(function(resolve) {
          instance.iterateCursor(query, function(cursor) {
            if (!cursor) {
              resolve(items);
              return;
            }
            items.push(cursor.value);

            if (count !== undefined && items.length == count) {
              resolve(items);
              return;
            }
            cursor.continue();
          });
        });
      };
    });

    function openDb(name, version, upgradeCallback) {
      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);
      var request = p.request;

      if (request) {
        request.onupgradeneeded = function(event) {
          if (upgradeCallback) {
            upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));
          }
        };
      }

      return p.then(function(db) {
        return new DB(db);
      });
    }

    var name = "@firebase/installations-exp";
    var version = "0.0.900";

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var PENDING_TIMEOUT_MS = 10000;
    var PACKAGE_VERSION = "w:" + version;
    var INTERNAL_AUTH_VERSION = 'FIS_v2';
    var INSTALLATIONS_API_URL = 'https://firebaseinstallations.googleapis.com/v1';
    var TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour
    var SERVICE = 'installations';
    var SERVICE_NAME = 'Installations';

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a$1;
    var ERROR_DESCRIPTION_MAP = (_a$1 = {},
        _a$1["missing-app-config-values" /* MISSING_APP_CONFIG_VALUES */] = 'Missing App configuration value: "{$valueName}"',
        _a$1["not-registered" /* NOT_REGISTERED */] = 'Firebase Installation is not registered.',
        _a$1["installation-not-found" /* INSTALLATION_NOT_FOUND */] = 'Firebase Installation not found.',
        _a$1["request-failed" /* REQUEST_FAILED */] = '{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"',
        _a$1["app-offline" /* APP_OFFLINE */] = 'Could not process request. Application offline.',
        _a$1["delete-pending-registration" /* DELETE_PENDING_REGISTRATION */] = "Can't delete installation while there is a pending registration request.",
        _a$1);
    var ERROR_FACTORY = new ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);
    /** Returns true if error is a FirebaseError that is based on an error from the server. */
    function isServerError(error) {
        return (error instanceof FirebaseError &&
            error.code.includes("request-failed" /* REQUEST_FAILED */));
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function getInstallationsEndpoint(_a) {
        var projectId = _a.projectId;
        return INSTALLATIONS_API_URL + "/projects/" + projectId + "/installations";
    }
    function extractAuthTokenInfoFromResponse(response) {
        return {
            token: response.token,
            requestStatus: 2 /* COMPLETED */,
            expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),
            creationTime: Date.now()
        };
    }
    function getErrorFromResponse(requestName, response) {
        return __awaiter(this, void 0, void 0, function () {
            var responseJson, errorData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, response.json()];
                    case 1:
                        responseJson = _a.sent();
                        errorData = responseJson.error;
                        return [2 /*return*/, ERROR_FACTORY.create("request-failed" /* REQUEST_FAILED */, {
                                requestName: requestName,
                                serverCode: errorData.code,
                                serverMessage: errorData.message,
                                serverStatus: errorData.status
                            })];
                }
            });
        });
    }
    function getHeaders(_a) {
        var apiKey = _a.apiKey;
        return new Headers({
            'Content-Type': 'application/json',
            Accept: 'application/json',
            'x-goog-api-key': apiKey
        });
    }
    function getHeadersWithAuth(appConfig, _a) {
        var refreshToken = _a.refreshToken;
        var headers = getHeaders(appConfig);
        headers.append('Authorization', getAuthorizationHeader(refreshToken));
        return headers;
    }
    /**
     * Calls the passed in fetch wrapper and returns the response.
     * If the returned response has a status of 5xx, re-runs the function once and
     * returns the response.
     */
    function retryIfServerError(fn) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, fn()];
                    case 1:
                        result = _a.sent();
                        if (result.status >= 500 && result.status < 600) {
                            // Internal Server Error. Retry request.
                            return [2 /*return*/, fn()];
                        }
                        return [2 /*return*/, result];
                }
            });
        });
    }
    function getExpiresInFromResponseExpiresIn(responseExpiresIn) {
        // This works because the server will never respond with fractions of a second.
        return Number(responseExpiresIn.replace('s', '000'));
    }
    function getAuthorizationHeader(refreshToken) {
        return INTERNAL_AUTH_VERSION + " " + refreshToken;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function createInstallationRequest(appConfig, _a) {
        var fid = _a.fid;
        return __awaiter(this, void 0, void 0, function () {
            var endpoint, headers, body, request, response, responseValue, registeredInstallationEntry;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        endpoint = getInstallationsEndpoint(appConfig);
                        headers = getHeaders(appConfig);
                        body = {
                            fid: fid,
                            authVersion: INTERNAL_AUTH_VERSION,
                            appId: appConfig.appId,
                            sdkVersion: PACKAGE_VERSION
                        };
                        request = {
                            method: 'POST',
                            headers: headers,
                            body: JSON.stringify(body)
                        };
                        return [4 /*yield*/, retryIfServerError(function () { return fetch(endpoint, request); })];
                    case 1:
                        response = _b.sent();
                        if (!response.ok) return [3 /*break*/, 3];
                        return [4 /*yield*/, response.json()];
                    case 2:
                        responseValue = _b.sent();
                        registeredInstallationEntry = {
                            fid: responseValue.fid || fid,
                            registrationStatus: 2 /* COMPLETED */,
                            refreshToken: responseValue.refreshToken,
                            authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)
                        };
                        return [2 /*return*/, registeredInstallationEntry];
                    case 3: return [4 /*yield*/, getErrorFromResponse('Create Installation', response)];
                    case 4: throw _b.sent();
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Returns a promise that resolves after given time passes. */
    function sleep(ms) {
        return new Promise(function (resolve) {
            setTimeout(resolve, ms);
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function bufferToBase64UrlSafe(array) {
        var b64 = btoa(String.fromCharCode.apply(String, __spread(array)));
        return b64.replace(/\+/g, '-').replace(/\//g, '_');
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var VALID_FID_PATTERN = /^[cdef][\w-]{21}$/;
    var INVALID_FID = '';
    /**
     * Generates a new FID using random values from Web Crypto API.
     * Returns an empty string if FID generation fails for any reason.
     */
    function generateFid() {
        try {
            // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5
            // bytes. our implementation generates a 17 byte array instead.
            var fidByteArray = new Uint8Array(17);
            var crypto_1 = self.crypto || self.msCrypto;
            crypto_1.getRandomValues(fidByteArray);
            // Replace the first 4 random bits with the constant FID header of 0b0111.
            fidByteArray[0] = 112 + (fidByteArray[0] % 16);
            var fid = encode(fidByteArray);
            return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;
        }
        catch (_a) {
            // FID generation errored
            return INVALID_FID;
        }
    }
    /** Converts a FID Uint8Array to a base64 string representation. */
    function encode(fidByteArray) {
        var b64String = bufferToBase64UrlSafe(fidByteArray);
        // Remove the 23rd character that was added because of the extra 4 bits at the
        // end of our 17 byte array, and the '=' padding.
        return b64String.substr(0, 22);
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Returns a string key that can be used to identify the app. */
    function getKey(appConfig) {
        return appConfig.appName + "!" + appConfig.appId;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var fidChangeCallbacks = new Map();
    /**
     * Calls the onIdChange callbacks with the new FID value, and broadcasts the
     * change to other tabs.
     */
    function fidChanged(appConfig, fid) {
        var key = getKey(appConfig);
        callFidChangeCallbacks(key, fid);
        broadcastFidChange(key, fid);
    }
    function callFidChangeCallbacks(key, fid) {
        var e_1, _a;
        var callbacks = fidChangeCallbacks.get(key);
        if (!callbacks) {
            return;
        }
        try {
            for (var callbacks_1 = __values(callbacks), callbacks_1_1 = callbacks_1.next(); !callbacks_1_1.done; callbacks_1_1 = callbacks_1.next()) {
                var callback = callbacks_1_1.value;
                callback(fid);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (callbacks_1_1 && !callbacks_1_1.done && (_a = callbacks_1.return)) _a.call(callbacks_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    function broadcastFidChange(key, fid) {
        var channel = getBroadcastChannel();
        if (channel) {
            channel.postMessage({ key: key, fid: fid });
        }
        closeBroadcastChannel();
    }
    var broadcastChannel = null;
    /** Opens and returns a BroadcastChannel if it is supported by the browser. */
    function getBroadcastChannel() {
        if (!broadcastChannel && 'BroadcastChannel' in self) {
            broadcastChannel = new BroadcastChannel('[Firebase] FID Change');
            broadcastChannel.onmessage = function (e) {
                callFidChangeCallbacks(e.data.key, e.data.fid);
            };
        }
        return broadcastChannel;
    }
    function closeBroadcastChannel() {
        if (fidChangeCallbacks.size === 0 && broadcastChannel) {
            broadcastChannel.close();
            broadcastChannel = null;
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DATABASE_NAME = 'firebase-installations-database';
    var DATABASE_VERSION = 1;
    var OBJECT_STORE_NAME = 'firebase-installations-store';
    var dbPromise = null;
    function getDbPromise() {
        if (!dbPromise) {
            dbPromise = openDb(DATABASE_NAME, DATABASE_VERSION, function (upgradeDB) {
                // We don't use 'break' in this switch statement, the fall-through
                // behavior is what we want, because if there are multiple versions between
                // the old version and the current version, we want ALL the migrations
                // that correspond to those versions to run, not only the last one.
                // eslint-disable-next-line default-case
                switch (upgradeDB.oldVersion) {
                    case 0:
                        upgradeDB.createObjectStore(OBJECT_STORE_NAME);
                }
            });
        }
        return dbPromise;
    }
    /** Assigns or overwrites the record for the given key with the given value. */
    function set(appConfig, value) {
        return __awaiter(this, void 0, void 0, function () {
            var key, db, tx, objectStore, oldValue;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = getKey(appConfig);
                        return [4 /*yield*/, getDbPromise()];
                    case 1:
                        db = _a.sent();
                        tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
                        objectStore = tx.objectStore(OBJECT_STORE_NAME);
                        return [4 /*yield*/, objectStore.get(key)];
                    case 2:
                        oldValue = _a.sent();
                        return [4 /*yield*/, objectStore.put(value, key)];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, tx.complete];
                    case 4:
                        _a.sent();
                        if (!oldValue || oldValue.fid !== value.fid) {
                            fidChanged(appConfig, value.fid);
                        }
                        return [2 /*return*/, value];
                }
            });
        });
    }
    /** Removes record(s) from the objectStore that match the given key. */
    function remove(appConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var key, db, tx;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = getKey(appConfig);
                        return [4 /*yield*/, getDbPromise()];
                    case 1:
                        db = _a.sent();
                        tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
                        return [4 /*yield*/, tx.objectStore(OBJECT_STORE_NAME).delete(key)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, tx.complete];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    }
    /**
     * Atomically updates a record with the result of updateFn, which gets
     * called with the current value. If newValue is undefined, the record is
     * deleted instead.
     * @return Updated value
     */
    function update(appConfig, updateFn) {
        return __awaiter(this, void 0, void 0, function () {
            var key, db, tx, store, oldValue, newValue;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = getKey(appConfig);
                        return [4 /*yield*/, getDbPromise()];
                    case 1:
                        db = _a.sent();
                        tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
                        store = tx.objectStore(OBJECT_STORE_NAME);
                        return [4 /*yield*/, store.get(key)];
                    case 2:
                        oldValue = _a.sent();
                        newValue = updateFn(oldValue);
                        if (!(newValue === undefined)) return [3 /*break*/, 4];
                        return [4 /*yield*/, store.delete(key)];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 4: return [4 /*yield*/, store.put(newValue, key)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [4 /*yield*/, tx.complete];
                    case 7:
                        _a.sent();
                        if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {
                            fidChanged(appConfig, newValue.fid);
                        }
                        return [2 /*return*/, newValue];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Updates and returns the InstallationEntry from the database.
     * Also triggers a registration request if it is necessary and possible.
     */
    function getInstallationEntry(appConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var registrationPromise, installationEntry;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, update(appConfig, function (oldEntry) {
                            var installationEntry = updateOrCreateInstallationEntry(oldEntry);
                            var entryWithPromise = triggerRegistrationIfNecessary(appConfig, installationEntry);
                            registrationPromise = entryWithPromise.registrationPromise;
                            return entryWithPromise.installationEntry;
                        })];
                    case 1:
                        installationEntry = _b.sent();
                        if (!(installationEntry.fid === INVALID_FID)) return [3 /*break*/, 3];
                        _a = {};
                        return [4 /*yield*/, registrationPromise];
                    case 2: 
                    // FID generation failed. Waiting for the FID from the server.
                    return [2 /*return*/, (_a.installationEntry = _b.sent(), _a)];
                    case 3: return [2 /*return*/, {
                            installationEntry: installationEntry,
                            registrationPromise: registrationPromise
                        }];
                }
            });
        });
    }
    /**
     * Creates a new Installation Entry if one does not exist.
     * Also clears timed out pending requests.
     */
    function updateOrCreateInstallationEntry(oldEntry) {
        var entry = oldEntry || {
            fid: generateFid(),
            registrationStatus: 0 /* NOT_STARTED */
        };
        return clearTimedOutRequest(entry);
    }
    /**
     * If the Firebase Installation is not registered yet, this will trigger the
     * registration and return an InProgressInstallationEntry.
     *
     * If registrationPromise does not exist, the installationEntry is guaranteed
     * to be registered.
     */
    function triggerRegistrationIfNecessary(appConfig, installationEntry) {
        if (installationEntry.registrationStatus === 0 /* NOT_STARTED */) {
            if (!navigator.onLine) {
                // Registration required but app is offline.
                var registrationPromiseWithError = Promise.reject(ERROR_FACTORY.create("app-offline" /* APP_OFFLINE */));
                return {
                    installationEntry: installationEntry,
                    registrationPromise: registrationPromiseWithError
                };
            }
            // Try registering. Change status to IN_PROGRESS.
            var inProgressEntry = {
                fid: installationEntry.fid,
                registrationStatus: 1 /* IN_PROGRESS */,
                registrationTime: Date.now()
            };
            var registrationPromise = registerInstallation(appConfig, inProgressEntry);
            return { installationEntry: inProgressEntry, registrationPromise: registrationPromise };
        }
        else if (installationEntry.registrationStatus === 1 /* IN_PROGRESS */) {
            return {
                installationEntry: installationEntry,
                registrationPromise: waitUntilFidRegistration(appConfig)
            };
        }
        else {
            return { installationEntry: installationEntry };
        }
    }
    /** This will be executed only once for each new Firebase Installation. */
    function registerInstallation(appConfig, installationEntry) {
        return __awaiter(this, void 0, void 0, function () {
            var registeredInstallationEntry, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 7]);
                        return [4 /*yield*/, createInstallationRequest(appConfig, installationEntry)];
                    case 1:
                        registeredInstallationEntry = _a.sent();
                        return [2 /*return*/, set(appConfig, registeredInstallationEntry)];
                    case 2:
                        e_1 = _a.sent();
                        if (!(isServerError(e_1) && e_1.customData.serverCode === 409)) return [3 /*break*/, 4];
                        // Server returned a "FID can not be used" error.
                        // Generate a new ID next time.
                        return [4 /*yield*/, remove(appConfig)];
                    case 3:
                        // Server returned a "FID can not be used" error.
                        // Generate a new ID next time.
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 4: 
                    // Registration failed. Set FID as not registered.
                    return [4 /*yield*/, set(appConfig, {
                            fid: installationEntry.fid,
                            registrationStatus: 0 /* NOT_STARTED */
                        })];
                    case 5:
                        // Registration failed. Set FID as not registered.
                        _a.sent();
                        _a.label = 6;
                    case 6: throw e_1;
                    case 7: return [2 /*return*/];
                }
            });
        });
    }
    /** Call if FID registration is pending in another request. */
    function waitUntilFidRegistration(appConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var entry, _a, installationEntry, registrationPromise;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, updateInstallationRequest(appConfig)];
                    case 1:
                        entry = _b.sent();
                        _b.label = 2;
                    case 2:
                        if (!(entry.registrationStatus === 1 /* IN_PROGRESS */)) return [3 /*break*/, 5];
                        // createInstallation request still in progress.
                        return [4 /*yield*/, sleep(100)];
                    case 3:
                        // createInstallation request still in progress.
                        _b.sent();
                        return [4 /*yield*/, updateInstallationRequest(appConfig)];
                    case 4:
                        entry = _b.sent();
                        return [3 /*break*/, 2];
                    case 5:
                        if (!(entry.registrationStatus === 0 /* NOT_STARTED */)) return [3 /*break*/, 7];
                        return [4 /*yield*/, getInstallationEntry(appConfig)];
                    case 6:
                        _a = _b.sent(), installationEntry = _a.installationEntry, registrationPromise = _a.registrationPromise;
                        if (registrationPromise) {
                            return [2 /*return*/, registrationPromise];
                        }
                        else {
                            // if there is no registrationPromise, entry is registered.
                            return [2 /*return*/, installationEntry];
                        }
                    case 7: return [2 /*return*/, entry];
                }
            });
        });
    }
    /**
     * Called only if there is a CreateInstallation request in progress.
     *
     * Updates the InstallationEntry in the DB based on the status of the
     * CreateInstallation request.
     *
     * Returns the updated InstallationEntry.
     */
    function updateInstallationRequest(appConfig) {
        return update(appConfig, function (oldEntry) {
            if (!oldEntry) {
                throw ERROR_FACTORY.create("installation-not-found" /* INSTALLATION_NOT_FOUND */);
            }
            return clearTimedOutRequest(oldEntry);
        });
    }
    function clearTimedOutRequest(entry) {
        if (hasInstallationRequestTimedOut(entry)) {
            return {
                fid: entry.fid,
                registrationStatus: 0 /* NOT_STARTED */
            };
        }
        return entry;
    }
    function hasInstallationRequestTimedOut(installationEntry) {
        return (installationEntry.registrationStatus === 1 /* IN_PROGRESS */ &&
            installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now());
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function generateAuthTokenRequest(_a, installationEntry) {
        var appConfig = _a.appConfig, platformLoggerProvider = _a.platformLoggerProvider;
        return __awaiter(this, void 0, void 0, function () {
            var endpoint, headers, platformLogger, body, request, response, responseValue, completedAuthToken;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);
                        headers = getHeadersWithAuth(appConfig, installationEntry);
                        platformLogger = platformLoggerProvider.getImmediate({
                            optional: true
                        });
                        if (platformLogger) {
                            headers.append('x-firebase-client', platformLogger.getPlatformInfoString());
                        }
                        body = {
                            installation: {
                                sdkVersion: PACKAGE_VERSION
                            }
                        };
                        request = {
                            method: 'POST',
                            headers: headers,
                            body: JSON.stringify(body)
                        };
                        return [4 /*yield*/, retryIfServerError(function () { return fetch(endpoint, request); })];
                    case 1:
                        response = _b.sent();
                        if (!response.ok) return [3 /*break*/, 3];
                        return [4 /*yield*/, response.json()];
                    case 2:
                        responseValue = _b.sent();
                        completedAuthToken = extractAuthTokenInfoFromResponse(responseValue);
                        return [2 /*return*/, completedAuthToken];
                    case 3: return [4 /*yield*/, getErrorFromResponse('Generate Auth Token', response)];
                    case 4: throw _b.sent();
                }
            });
        });
    }
    function getGenerateAuthTokenEndpoint(appConfig, _a) {
        var fid = _a.fid;
        return getInstallationsEndpoint(appConfig) + "/" + fid + "/authTokens:generate";
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns a valid authentication token for the installation. Generates a new
     * token if one doesn't exist, is expired or about to expire.
     *
     * Should only be called if the Firebase Installation is registered.
     */
    function refreshAuthToken(installations, forceRefresh) {
        if (forceRefresh === void 0) { forceRefresh = false; }
        return __awaiter(this, void 0, void 0, function () {
            var tokenPromise, entry, authToken, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, update(installations.appConfig, function (oldEntry) {
                            if (!isEntryRegistered(oldEntry)) {
                                throw ERROR_FACTORY.create("not-registered" /* NOT_REGISTERED */);
                            }
                            var oldAuthToken = oldEntry.authToken;
                            if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {
                                // There is a valid token in the DB.
                                return oldEntry;
                            }
                            else if (oldAuthToken.requestStatus === 1 /* IN_PROGRESS */) {
                                // There already is a token request in progress.
                                tokenPromise = waitUntilAuthTokenRequest(installations, forceRefresh);
                                return oldEntry;
                            }
                            else {
                                // No token or token expired.
                                if (!navigator.onLine) {
                                    throw ERROR_FACTORY.create("app-offline" /* APP_OFFLINE */);
                                }
                                var inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);
                                tokenPromise = fetchAuthTokenFromServer(installations, inProgressEntry);
                                return inProgressEntry;
                            }
                        })];
                    case 1:
                        entry = _b.sent();
                        if (!tokenPromise) return [3 /*break*/, 3];
                        return [4 /*yield*/, tokenPromise];
                    case 2:
                        _a = _b.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        _a = entry.authToken;
                        _b.label = 4;
                    case 4:
                        authToken = _a;
                        return [2 /*return*/, authToken];
                }
            });
        });
    }
    /**
     * Call only if FID is registered and Auth Token request is in progress.
     *
     * Waits until the current pending request finishes. If the request times out,
     * tries once in this thread as well.
     */
    function waitUntilAuthTokenRequest(installations, forceRefresh) {
        return __awaiter(this, void 0, void 0, function () {
            var entry, authToken;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, updateAuthTokenRequest(installations.appConfig)];
                    case 1:
                        entry = _a.sent();
                        _a.label = 2;
                    case 2:
                        if (!(entry.authToken.requestStatus === 1 /* IN_PROGRESS */)) return [3 /*break*/, 5];
                        // generateAuthToken still in progress.
                        return [4 /*yield*/, sleep(100)];
                    case 3:
                        // generateAuthToken still in progress.
                        _a.sent();
                        return [4 /*yield*/, updateAuthTokenRequest(installations.appConfig)];
                    case 4:
                        entry = _a.sent();
                        return [3 /*break*/, 2];
                    case 5:
                        authToken = entry.authToken;
                        if (authToken.requestStatus === 0 /* NOT_STARTED */) {
                            // The request timed out or failed in a different call. Try again.
                            return [2 /*return*/, refreshAuthToken(installations, forceRefresh)];
                        }
                        else {
                            return [2 /*return*/, authToken];
                        }
                }
            });
        });
    }
    /**
     * Called only if there is a GenerateAuthToken request in progress.
     *
     * Updates the InstallationEntry in the DB based on the status of the
     * GenerateAuthToken request.
     *
     * Returns the updated InstallationEntry.
     */
    function updateAuthTokenRequest(appConfig) {
        return update(appConfig, function (oldEntry) {
            if (!isEntryRegistered(oldEntry)) {
                throw ERROR_FACTORY.create("not-registered" /* NOT_REGISTERED */);
            }
            var oldAuthToken = oldEntry.authToken;
            if (hasAuthTokenRequestTimedOut(oldAuthToken)) {
                return __assign(__assign({}, oldEntry), { authToken: { requestStatus: 0 /* NOT_STARTED */ } });
            }
            return oldEntry;
        });
    }
    function fetchAuthTokenFromServer(installations, installationEntry) {
        return __awaiter(this, void 0, void 0, function () {
            var authToken, updatedInstallationEntry, e_1, updatedInstallationEntry;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 8]);
                        return [4 /*yield*/, generateAuthTokenRequest(installations, installationEntry)];
                    case 1:
                        authToken = _a.sent();
                        updatedInstallationEntry = __assign(__assign({}, installationEntry), { authToken: authToken });
                        return [4 /*yield*/, set(installations.appConfig, updatedInstallationEntry)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, authToken];
                    case 3:
                        e_1 = _a.sent();
                        if (!(isServerError(e_1) &&
                            (e_1.customData.serverCode === 401 || e_1.customData.serverCode === 404))) return [3 /*break*/, 5];
                        // Server returned a "FID not found" or a "Invalid authentication" error.
                        // Generate a new ID next time.
                        return [4 /*yield*/, remove(installations.appConfig)];
                    case 4:
                        // Server returned a "FID not found" or a "Invalid authentication" error.
                        // Generate a new ID next time.
                        _a.sent();
                        return [3 /*break*/, 7];
                    case 5:
                        updatedInstallationEntry = __assign(__assign({}, installationEntry), { authToken: { requestStatus: 0 /* NOT_STARTED */ } });
                        return [4 /*yield*/, set(installations.appConfig, updatedInstallationEntry)];
                    case 6:
                        _a.sent();
                        _a.label = 7;
                    case 7: throw e_1;
                    case 8: return [2 /*return*/];
                }
            });
        });
    }
    function isEntryRegistered(installationEntry) {
        return (installationEntry !== undefined &&
            installationEntry.registrationStatus === 2 /* COMPLETED */);
    }
    function isAuthTokenValid(authToken) {
        return (authToken.requestStatus === 2 /* COMPLETED */ &&
            !isAuthTokenExpired(authToken));
    }
    function isAuthTokenExpired(authToken) {
        var now = Date.now();
        return (now < authToken.creationTime ||
            authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER);
    }
    /** Returns an updated InstallationEntry with an InProgressAuthToken. */
    function makeAuthTokenRequestInProgressEntry(oldEntry) {
        var inProgressAuthToken = {
            requestStatus: 1 /* IN_PROGRESS */,
            requestTime: Date.now()
        };
        return __assign(__assign({}, oldEntry), { authToken: inProgressAuthToken });
    }
    function hasAuthTokenRequestTimedOut(authToken) {
        return (authToken.requestStatus === 1 /* IN_PROGRESS */ &&
            authToken.requestTime + PENDING_TIMEOUT_MS < Date.now());
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Creates a Firebase Installation if there isn't one for the app and
     * returns the Installation ID.
     *
     * @public
     */
    function getId(installations) {
        return __awaiter(this, void 0, void 0, function () {
            var installationsImpl, _a, installationEntry, registrationPromise;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        installationsImpl = installations;
                        return [4 /*yield*/, getInstallationEntry(installationsImpl.appConfig)];
                    case 1:
                        _a = _b.sent(), installationEntry = _a.installationEntry, registrationPromise = _a.registrationPromise;
                        if (registrationPromise) {
                            registrationPromise.catch(console.error);
                        }
                        else {
                            // If the installation is already registered, update the authentication
                            // token if needed.
                            refreshAuthToken(installationsImpl).catch(console.error);
                        }
                        return [2 /*return*/, installationEntry.fid];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns an Installation auth token, identifying the current Firebase Installation.
     *
     * @public
     */
    function getToken(installations, forceRefresh) {
        if (forceRefresh === void 0) { forceRefresh = false; }
        return __awaiter(this, void 0, void 0, function () {
            var installationsImpl, authToken;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        installationsImpl = installations;
                        return [4 /*yield*/, completeInstallationRegistration(installationsImpl.appConfig)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, refreshAuthToken(installationsImpl, forceRefresh)];
                    case 2:
                        authToken = _a.sent();
                        return [2 /*return*/, authToken.token];
                }
            });
        });
    }
    function completeInstallationRegistration(appConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var registrationPromise;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, getInstallationEntry(appConfig)];
                    case 1:
                        registrationPromise = (_a.sent()).registrationPromise;
                        if (!registrationPromise) return [3 /*break*/, 3];
                        // A createInstallation request is in progress. Wait until it finishes.
                        return [4 /*yield*/, registrationPromise];
                    case 2:
                        // A createInstallation request is in progress. Wait until it finishes.
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function extractAppConfig(app) {
        var e_1, _a;
        if (!app || !app.options) {
            throw getMissingValueError('App Configuration');
        }
        if (!app.name) {
            throw getMissingValueError('App Name');
        }
        // Required app config keys
        var configKeys = [
            'projectId',
            'apiKey',
            'appId'
        ];
        try {
            for (var configKeys_1 = __values(configKeys), configKeys_1_1 = configKeys_1.next(); !configKeys_1_1.done; configKeys_1_1 = configKeys_1.next()) {
                var keyName = configKeys_1_1.value;
                if (!app.options[keyName]) {
                    throw getMissingValueError(keyName);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (configKeys_1_1 && !configKeys_1_1.done && (_a = configKeys_1.return)) _a.call(configKeys_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return {
            appName: app.name,
            projectId: app.options.projectId,
            apiKey: app.options.apiKey,
            appId: app.options.appId
        };
    }
    function getMissingValueError(valueName) {
        return ERROR_FACTORY.create("missing-app-config-values" /* MISSING_APP_CONFIG_VALUES */, {
            valueName: valueName
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var INSTALLATIONS_NAME = 'installations-exp';
    var INSTALLATIONS_NAME_INTERNAL = 'installations-exp-internal';
    var publicFactory = function (container) {
        var app$1 = container.getProvider('app-exp').getImmediate();
        // Throws if app isn't configured properly.
        var appConfig = extractAppConfig(app$1);
        var platformLoggerProvider = app._getProvider(app$1, 'platform-logger');
        var installationsImpl = {
            app: app$1,
            appConfig: appConfig,
            platformLoggerProvider: platformLoggerProvider,
            _delete: function () { return Promise.resolve(); }
        };
        return installationsImpl;
    };
    var internalFactory = function (container) {
        var app$1 = container.getProvider('app-exp').getImmediate();
        // Internal FIS instance relies on public FIS instance.
        var installations = app._getProvider(app$1, INSTALLATIONS_NAME).getImmediate();
        var installationsInternal = {
            getId: function () { return getId(installations); },
            getToken: function (forceRefresh) { return getToken(installations, forceRefresh); }
        };
        return installationsInternal;
    };
    function registerInstallations() {
        app._registerComponent(new Component(INSTALLATIONS_NAME, publicFactory, "PUBLIC" /* PUBLIC */));
        app._registerComponent(new Component(INSTALLATIONS_NAME_INTERNAL, internalFactory, "PRIVATE" /* PRIVATE */));
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    registerInstallations();
    app.registerVersion(name, version);

    var name$1 = "@firebase/performance-exp";
    var version$1 = "0.0.900";

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var SDK_VERSION = version$1;
    /** The prefix for start User Timing marks used for creating Traces. */
    var TRACE_START_MARK_PREFIX = 'FB-PERF-TRACE-START';
    /** The prefix for stop User Timing marks used for creating Traces. */
    var TRACE_STOP_MARK_PREFIX = 'FB-PERF-TRACE-STOP';
    /** The prefix for User Timing measure used for creating Traces. */
    var TRACE_MEASURE_PREFIX = 'FB-PERF-TRACE-MEASURE';
    /** The prefix for out of the box page load Trace name. */
    var OOB_TRACE_PAGE_LOAD_PREFIX = '_wt_';
    var FIRST_PAINT_COUNTER_NAME = '_fp';
    var FIRST_CONTENTFUL_PAINT_COUNTER_NAME = '_fcp';
    var FIRST_INPUT_DELAY_COUNTER_NAME = '_fid';
    var CONFIG_LOCAL_STORAGE_KEY = '@firebase/performance/config';
    var CONFIG_EXPIRY_LOCAL_STORAGE_KEY = '@firebase/performance/configexpire';
    var SERVICE$1 = 'performance';
    var SERVICE_NAME$1 = 'Performance';

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a$2;
    var ERROR_DESCRIPTION_MAP$1 = (_a$2 = {},
        _a$2["trace started" /* TRACE_STARTED_BEFORE */] = 'Trace {$traceName} was started before.',
        _a$2["trace stopped" /* TRACE_STOPPED_BEFORE */] = 'Trace {$traceName} is not running.',
        _a$2["nonpositive trace startTime" /* NONPOSITIVE_TRACE_START_TIME */] = 'Trace {$traceName} startTime should be positive.',
        _a$2["nonpositive trace duration" /* NONPOSITIVE_TRACE_DURATION */] = 'Trace {$traceName} duration should be positive.',
        _a$2["no window" /* NO_WINDOW */] = 'Window is not available.',
        _a$2["no app id" /* NO_APP_ID */] = 'App id is not available.',
        _a$2["no project id" /* NO_PROJECT_ID */] = 'Project id is not available.',
        _a$2["no api key" /* NO_API_KEY */] = 'Api key is not available.',
        _a$2["invalid cc log" /* INVALID_CC_LOG */] = 'Attempted to queue invalid cc event',
        _a$2["FB not default" /* FB_NOT_DEFAULT */] = 'Performance can only start when Firebase app instance is the default one.',
        _a$2["RC response not ok" /* RC_NOT_OK */] = 'RC response is not ok',
        _a$2["invalid attribute name" /* INVALID_ATTRIBUTE_NAME */] = 'Attribute name {$attributeName} is invalid.',
        _a$2["invalid attribute value" /* INVALID_ATTRIBUTE_VALUE */] = 'Attribute value {$attributeValue} is invalid.',
        _a$2["invalid custom metric name" /* INVALID_CUSTOM_METRIC_NAME */] = 'Custom metric name {$customMetricName} is invalid',
        _a$2["invalid String merger input" /* INVALID_STRING_MERGER_PARAMETER */] = 'Input for String merger is invalid, contact support team to resolve.',
        _a$2["already initialized" /* ALREADY_INITIALIZED */] = 'Performance can only be initialized once.',
        _a$2);
    var ERROR_FACTORY$1 = new ErrorFactory(SERVICE$1, SERVICE_NAME$1, ERROR_DESCRIPTION_MAP$1);

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var consoleLogger = new Logger(SERVICE_NAME$1);
    consoleLogger.logLevel = LogLevel.INFO;

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var apiInstance;
    var windowInstance;
    /**
     * This class holds a reference to various browser related objects injected by
     * set methods.
     */
    var Api = /** @class */ (function () {
        function Api(window) {
            this.window = window;
            if (!window) {
                throw ERROR_FACTORY$1.create("no window" /* NO_WINDOW */);
            }
            this.performance = window.performance;
            this.PerformanceObserver = window.PerformanceObserver;
            this.windowLocation = window.location;
            this.navigator = window.navigator;
            this.document = window.document;
            if (this.navigator && this.navigator.cookieEnabled) {
                // If user blocks cookies on the browser, accessing localStorage will
                // throw an exception.
                this.localStorage = window.localStorage;
            }
            if (window.perfMetrics && window.perfMetrics.onFirstInputDelay) {
                this.onFirstInputDelay = window.perfMetrics.onFirstInputDelay;
            }
        }
        Api.prototype.getUrl = function () {
            // Do not capture the string query part of url.
            return this.windowLocation.href.split('?')[0];
        };
        Api.prototype.mark = function (name) {
            if (!this.performance || !this.performance.mark) {
                return;
            }
            this.performance.mark(name);
        };
        Api.prototype.measure = function (measureName, mark1, mark2) {
            if (!this.performance || !this.performance.measure) {
                return;
            }
            this.performance.measure(measureName, mark1, mark2);
        };
        Api.prototype.getEntriesByType = function (type) {
            if (!this.performance || !this.performance.getEntriesByType) {
                return [];
            }
            return this.performance.getEntriesByType(type);
        };
        Api.prototype.getEntriesByName = function (name) {
            if (!this.performance || !this.performance.getEntriesByName) {
                return [];
            }
            return this.performance.getEntriesByName(name);
        };
        Api.prototype.getTimeOrigin = function () {
            // Polyfill the time origin with performance.timing.navigationStart.
            return (this.performance &&
                (this.performance.timeOrigin || this.performance.timing.navigationStart));
        };
        Api.prototype.requiredApisAvailable = function () {
            if (!fetch ||
                !Promise ||
                !this.navigator ||
                !this.navigator.cookieEnabled) {
                consoleLogger.info('Firebase Performance cannot start if browser does not support fetch and Promise or cookie is disabled.');
                return false;
            }
            if (!isIndexedDBAvailable()) {
                consoleLogger.info('IndexedDB is not supported by current browswer');
                return false;
            }
            return true;
        };
        Api.prototype.setupObserver = function (entryType, callback) {
            if (!this.PerformanceObserver) {
                return;
            }
            var observer = new this.PerformanceObserver(function (list) {
                for (var _i = 0, _a = list.getEntries(); _i < _a.length; _i++) {
                    var entry = _a[_i];
                    // `entry` is a PerformanceEntry instance.
                    callback(entry);
                }
            });
            // Start observing the entry types you care about.
            observer.observe({ entryTypes: [entryType] });
        };
        Api.getInstance = function () {
            if (apiInstance === undefined) {
                apiInstance = new Api(windowInstance);
            }
            return apiInstance;
        };
        return Api;
    }());
    function setupApi(window) {
        windowInstance = window;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var iid;
    function getIidPromise(installationsService) {
        var iidPromise = installationsService.getId();
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        iidPromise.then(function (iidVal) {
            iid = iidVal;
        });
        return iidPromise;
    }
    // This method should be used after the iid is retrieved by getIidPromise method.
    function getIid() {
        return iid;
    }
    function getAuthTokenPromise(installationsService) {
        var authTokenPromise = installationsService.getToken();
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        authTokenPromise.then(function (authTokenVal) {
        });
        return authTokenPromise;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function mergeStrings(part1, part2) {
        var sizeDiff = part1.length - part2.length;
        if (sizeDiff < 0 || sizeDiff > 1) {
            throw ERROR_FACTORY$1.create("invalid String merger input" /* INVALID_STRING_MERGER_PARAMETER */);
        }
        var resultArray = [];
        for (var i = 0; i < part1.length; i++) {
            resultArray.push(part1.charAt(i));
            if (part2.length > i) {
                resultArray.push(part2.charAt(i));
            }
        }
        return resultArray.join('');
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var settingsServiceInstance;
    var SettingsService = /** @class */ (function () {
        function SettingsService() {
            // The variable which controls logging of automatic traces and HTTP/S network monitoring.
            this.instrumentationEnabled = true;
            // The variable which controls logging of custom traces.
            this.dataCollectionEnabled = true;
            // Configuration flags set through remote config.
            this.loggingEnabled = false;
            // Sampling rate between 0 and 1.
            this.tracesSamplingRate = 1;
            this.networkRequestsSamplingRate = 1;
            // Address of logging service.
            this.logEndPointUrl = 'https://firebaselogging.googleapis.com/v0cc/log?format=json_proto';
            // Performance event transport endpoint URL which should be compatible with proto3.
            // New Address for transport service, not configurable via Remote Config.
            this.flTransportEndpointUrl = mergeStrings('hts/frbslgigp.ogepscmv/ieo/eaylg', 'tp:/ieaeogn-agolai.o/1frlglgc/o');
            this.transportKey = mergeStrings('AzSC8r6ReiGqFMyfvgow', 'Iayx0u-XT3vksVM-pIV');
            // Source type for performance event logs.
            this.logSource = 462;
            // Flags which control per session logging of traces and network requests.
            this.logTraceAfterSampling = false;
            this.logNetworkAfterSampling = false;
            // TTL of config retrieved from remote config in hours.
            this.configTimeToLive = 12;
        }
        SettingsService.prototype.getFlTransportFullUrl = function () {
            return this.flTransportEndpointUrl.concat('?key=', this.transportKey);
        };
        SettingsService.getInstance = function () {
            if (settingsServiceInstance === undefined) {
                settingsServiceInstance = new SettingsService();
            }
            return settingsServiceInstance;
        };
        return SettingsService;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var VisibilityState;
    (function (VisibilityState) {
        VisibilityState[VisibilityState["UNKNOWN"] = 0] = "UNKNOWN";
        VisibilityState[VisibilityState["VISIBLE"] = 1] = "VISIBLE";
        VisibilityState[VisibilityState["HIDDEN"] = 2] = "HIDDEN";
    })(VisibilityState || (VisibilityState = {}));
    var RESERVED_ATTRIBUTE_PREFIXES = ['firebase_', 'google_', 'ga_'];
    var ATTRIBUTE_FORMAT_REGEX = new RegExp('^[a-zA-Z]\\w*$');
    var MAX_ATTRIBUTE_NAME_LENGTH = 40;
    var MAX_ATTRIBUTE_VALUE_LENGTH = 100;
    function getServiceWorkerStatus() {
        var navigator = Api.getInstance().navigator;
        if ('serviceWorker' in navigator) {
            if (navigator.serviceWorker.controller) {
                return 2 /* CONTROLLED */;
            }
            else {
                return 3 /* UNCONTROLLED */;
            }
        }
        else {
            return 1 /* UNSUPPORTED */;
        }
    }
    function getVisibilityState() {
        var document = Api.getInstance().document;
        var visibilityState = document.visibilityState;
        switch (visibilityState) {
            case 'visible':
                return VisibilityState.VISIBLE;
            case 'hidden':
                return VisibilityState.HIDDEN;
            default:
                return VisibilityState.UNKNOWN;
        }
    }
    function getEffectiveConnectionType() {
        var navigator = Api.getInstance().navigator;
        var navigatorConnection = navigator.connection;
        var effectiveType = navigatorConnection && navigatorConnection.effectiveType;
        switch (effectiveType) {
            case 'slow-2g':
                return 1 /* CONNECTION_SLOW_2G */;
            case '2g':
                return 2 /* CONNECTION_2G */;
            case '3g':
                return 3 /* CONNECTION_3G */;
            case '4g':
                return 4 /* CONNECTION_4G */;
            default:
                return 0 /* UNKNOWN */;
        }
    }
    function isValidCustomAttributeName(name) {
        if (name.length === 0 || name.length > MAX_ATTRIBUTE_NAME_LENGTH) {
            return false;
        }
        var matchesReservedPrefix = RESERVED_ATTRIBUTE_PREFIXES.some(function (prefix) {
            return name.startsWith(prefix);
        });
        return !matchesReservedPrefix && !!name.match(ATTRIBUTE_FORMAT_REGEX);
    }
    function isValidCustomAttributeValue(value) {
        return value.length !== 0 && value.length <= MAX_ATTRIBUTE_VALUE_LENGTH;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function getAppId(firebaseApp) {
        var _a;
        var appId = (_a = firebaseApp.options) === null || _a === void 0 ? void 0 : _a.appId;
        if (!appId) {
            throw ERROR_FACTORY$1.create("no app id" /* NO_APP_ID */);
        }
        return appId;
    }
    function getProjectId(firebaseApp) {
        var _a;
        var projectId = (_a = firebaseApp.options) === null || _a === void 0 ? void 0 : _a.projectId;
        if (!projectId) {
            throw ERROR_FACTORY$1.create("no project id" /* NO_PROJECT_ID */);
        }
        return projectId;
    }
    function getApiKey(firebaseApp) {
        var _a;
        var apiKey = (_a = firebaseApp.options) === null || _a === void 0 ? void 0 : _a.apiKey;
        if (!apiKey) {
            throw ERROR_FACTORY$1.create("no api key" /* NO_API_KEY */);
        }
        return apiKey;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var REMOTE_CONFIG_SDK_VERSION = '0.0.1';
    // These values will be used if the remote config object is successfully
    // retrieved, but the template does not have these fields.
    var DEFAULT_CONFIGS = {
        loggingEnabled: true
    };
    var FIS_AUTH_PREFIX = 'FIREBASE_INSTALLATIONS_AUTH';
    function getConfig(performanceController, iid) {
        var config = getStoredConfig();
        if (config) {
            processConfig(config);
            return Promise.resolve();
        }
        return getRemoteConfig(performanceController, iid)
            .then(processConfig)
            .then(function (config) { return storeConfig(config); }, 
        /** Do nothing for error, use defaults set in settings service. */
        function () { });
    }
    function getStoredConfig() {
        var localStorage = Api.getInstance().localStorage;
        if (!localStorage) {
            return;
        }
        var expiryString = localStorage.getItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY);
        if (!expiryString || !configValid(expiryString)) {
            return;
        }
        var configStringified = localStorage.getItem(CONFIG_LOCAL_STORAGE_KEY);
        if (!configStringified) {
            return;
        }
        try {
            var configResponse = JSON.parse(configStringified);
            return configResponse;
        }
        catch (_a) {
            return;
        }
    }
    function storeConfig(config) {
        var localStorage = Api.getInstance().localStorage;
        if (!config || !localStorage) {
            return;
        }
        localStorage.setItem(CONFIG_LOCAL_STORAGE_KEY, JSON.stringify(config));
        localStorage.setItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY, String(Date.now() +
            SettingsService.getInstance().configTimeToLive * 60 * 60 * 1000));
    }
    var COULD_NOT_GET_CONFIG_MSG = 'Could not fetch config, will use default configs';
    function getRemoteConfig(performanceController, iid) {
        // Perf needs auth token only to retrieve remote config.
        return getAuthTokenPromise(performanceController.installations)
            .then(function (authToken) {
            var projectId = getProjectId(performanceController.app);
            var apiKey = getApiKey(performanceController.app);
            var configEndPoint = "https://firebaseremoteconfig.googleapis.com/v1/projects/" + projectId + "/namespaces/fireperf:fetch?key=" + apiKey;
            var request = new Request(configEndPoint, {
                method: 'POST',
                headers: { Authorization: FIS_AUTH_PREFIX + " " + authToken },
                /* eslint-disable camelcase */
                body: JSON.stringify({
                    app_instance_id: iid,
                    app_instance_id_token: authToken,
                    app_id: getAppId(performanceController.app),
                    app_version: SDK_VERSION,
                    sdk_version: REMOTE_CONFIG_SDK_VERSION
                })
                /* eslint-enable camelcase */
            });
            return fetch(request).then(function (response) {
                if (response.ok) {
                    return response.json();
                }
                // In case response is not ok. This will be caught by catch.
                throw ERROR_FACTORY$1.create("RC response not ok" /* RC_NOT_OK */);
            });
        })
            .catch(function () {
            consoleLogger.info(COULD_NOT_GET_CONFIG_MSG);
            return undefined;
        });
    }
    /**
     * Processes config coming either from calling RC or from local storage.
     * This method only runs if call is successful or config in storage
     * is valid.
     */
    function processConfig(config) {
        if (!config) {
            return config;
        }
        var settingsServiceInstance = SettingsService.getInstance();
        var entries = config.entries || {};
        if (entries.fpr_enabled !== undefined) {
            // TODO: Change the assignment of loggingEnabled once the received type is
            // known.
            settingsServiceInstance.loggingEnabled =
                String(entries.fpr_enabled) === 'true';
        }
        else {
            // Config retrieved successfully, but there is no fpr_enabled in template.
            // Use secondary configs value.
            settingsServiceInstance.loggingEnabled = DEFAULT_CONFIGS.loggingEnabled;
        }
        if (entries.fpr_log_source) {
            settingsServiceInstance.logSource = Number(entries.fpr_log_source);
        }
        if (entries.fpr_log_endpoint_url) {
            settingsServiceInstance.logEndPointUrl = entries.fpr_log_endpoint_url;
        }
        // Key from Remote Config has to be non-empty string, otherwsie use local value.
        if (entries.fpr_log_transport_key) {
            settingsServiceInstance.transportKey = entries.fpr_log_transport_key;
        }
        if (entries.fpr_vc_network_request_sampling_rate !== undefined) {
            settingsServiceInstance.networkRequestsSamplingRate = Number(entries.fpr_vc_network_request_sampling_rate);
        }
        if (entries.fpr_vc_trace_sampling_rate !== undefined) {
            settingsServiceInstance.tracesSamplingRate = Number(entries.fpr_vc_trace_sampling_rate);
        }
        // Set the per session trace and network logging flags.
        settingsServiceInstance.logTraceAfterSampling = shouldLogAfterSampling(settingsServiceInstance.tracesSamplingRate);
        settingsServiceInstance.logNetworkAfterSampling = shouldLogAfterSampling(settingsServiceInstance.networkRequestsSamplingRate);
        return config;
    }
    function configValid(expiry) {
        return Number(expiry) > Date.now();
    }
    function shouldLogAfterSampling(samplingRate) {
        return Math.random() <= samplingRate;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var initializationStatus = 1 /* notInitialized */;
    var initializationPromise;
    function getInitializationPromise(performanceController) {
        initializationStatus = 2 /* initializationPending */;
        initializationPromise =
            initializationPromise || initializePerf(performanceController);
        return initializationPromise;
    }
    function isPerfInitialized() {
        return initializationStatus === 3 /* initialized */;
    }
    function initializePerf(performanceController) {
        return getDocumentReadyComplete()
            .then(function () { return getIidPromise(performanceController.installations); })
            .then(function (iid) { return getConfig(performanceController, iid); })
            .then(function () { return changeInitializationStatus(); }, function () { return changeInitializationStatus(); });
    }
    /**
     * Returns a promise which resolves whenever the document readystate is complete or
     * immediately if it is called after page load complete.
     */
    function getDocumentReadyComplete() {
        var document = Api.getInstance().document;
        return new Promise(function (resolve) {
            if (document && document.readyState !== 'complete') {
                var handler_1 = function () {
                    if (document.readyState === 'complete') {
                        document.removeEventListener('readystatechange', handler_1);
                        resolve();
                    }
                };
                document.addEventListener('readystatechange', handler_1);
            }
            else {
                resolve();
            }
        });
    }
    function changeInitializationStatus() {
        initializationStatus = 3 /* initialized */;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DEFAULT_SEND_INTERVAL_MS = 10 * 1000;
    var INITIAL_SEND_TIME_DELAY_MS = 5.5 * 1000;
    // If end point does not work, the call will be tried for these many times.
    var DEFAULT_REMAINING_TRIES = 3;
    var MAX_EVENT_COUNT_PER_REQUEST = 1000;
    var remainingTries = DEFAULT_REMAINING_TRIES;
    /* eslint-enable camelcase */
    var queue = [];
    var isTransportSetup = false;
    function setupTransportService() {
        if (!isTransportSetup) {
            processQueue(INITIAL_SEND_TIME_DELAY_MS);
            isTransportSetup = true;
        }
    }
    function processQueue(timeOffset) {
        setTimeout(function () {
            // If there is no remainingTries left, stop retrying.
            if (remainingTries === 0) {
                return;
            }
            // If there are no events to process, wait for DEFAULT_SEND_INTERVAL_MS and try again.
            if (!queue.length) {
                return processQueue(DEFAULT_SEND_INTERVAL_MS);
            }
            dispatchQueueEvents();
        }, timeOffset);
    }
    function dispatchQueueEvents() {
        // Extract events up to the maximum cap of single logRequest from top of "official queue".
        // The staged events will be used for current logRequest attempt, remaining events will be kept
        // for next attempt.
        var staged = queue.splice(0, MAX_EVENT_COUNT_PER_REQUEST);
        /* eslint-disable camelcase */
        // We will pass the JSON serialized event to the backend.
        var log_event = staged.map(function (evt) { return ({
            source_extension_json_proto3: evt.message,
            event_time_ms: String(evt.eventTime)
        }); });
        var data = {
            request_time_ms: String(Date.now()),
            client_info: {
                client_type: 1,
                js_client_info: {}
            },
            log_source: SettingsService.getInstance().logSource,
            log_event: log_event
        };
        /* eslint-enable camelcase */
        sendEventsToFl(data, staged).catch(function () {
            // If the request fails for some reason, add the events that were attempted
            // back to the primary queue to retry later.
            queue = __spreadArrays(staged, queue);
            remainingTries--;
            consoleLogger.info("Tries left: " + remainingTries + ".");
            processQueue(DEFAULT_SEND_INTERVAL_MS);
        });
    }
    function sendEventsToFl(data, staged) {
        return postToFlEndpoint(data)
            .then(function (res) {
            if (!res.ok) {
                consoleLogger.info('Call to Firebase backend failed.');
            }
            return res.json();
        })
            .then(function (res) {
            // Find the next call wait time from the response.
            var transportWait = Number(res.nextRequestWaitMillis);
            var requestOffset = DEFAULT_SEND_INTERVAL_MS;
            if (!isNaN(transportWait)) {
                requestOffset = Math.max(transportWait, requestOffset);
            }
            // Delete request if response include RESPONSE_ACTION_UNKNOWN or DELETE_REQUEST action.
            // Otherwise, retry request using normal scheduling if response include RETRY_REQUEST_LATER.
            var logResponseDetails = res.logResponseDetails;
            if (Array.isArray(logResponseDetails) &&
                logResponseDetails.length > 0 &&
                logResponseDetails[0].responseAction === 'RETRY_REQUEST_LATER') {
                queue = __spreadArrays(staged, queue);
                consoleLogger.info("Retry transport request later.");
            }
            remainingTries = DEFAULT_REMAINING_TRIES;
            // Schedule the next process.
            processQueue(requestOffset);
        });
    }
    function postToFlEndpoint(data) {
        var flTransportFullUrl = SettingsService.getInstance().getFlTransportFullUrl();
        return fetch(flTransportFullUrl, {
            method: 'POST',
            body: JSON.stringify(data)
        });
    }
    function addToQueue(evt) {
        if (!evt.eventTime || !evt.message) {
            throw ERROR_FACTORY$1.create("invalid cc log" /* INVALID_CC_LOG */);
        }
        // Add the new event to the queue.
        queue = __spreadArrays(queue, [evt]);
    }
    /** Log handler for cc service to send the performance logs to the server. */
    function transportHandler(
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    serializer) {
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var message = serializer.apply(void 0, args);
            addToQueue({
                message: message,
                eventTime: Date.now()
            });
        };
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /* eslint-enble camelcase */
    var logger;
    // This method is not called before initialization.
    function sendLog(resource, resourceType) {
        if (!logger) {
            logger = transportHandler(serializer);
        }
        logger(resource, resourceType);
    }
    function logTrace(trace) {
        var settingsService = SettingsService.getInstance();
        // Do not log if trace is auto generated and instrumentation is disabled.
        if (!settingsService.instrumentationEnabled && trace.isAuto) {
            return;
        }
        // Do not log if trace is custom and data collection is disabled.
        if (!settingsService.dataCollectionEnabled && !trace.isAuto) {
            return;
        }
        // Do not log if required apis are not available.
        if (!Api.getInstance().requiredApisAvailable()) {
            return;
        }
        // Only log the page load auto traces if page is visible.
        if (trace.isAuto && getVisibilityState() !== VisibilityState.VISIBLE) {
            return;
        }
        if (isPerfInitialized()) {
            sendTraceLog(trace);
        }
        else {
            // Custom traces can be used before the initialization but logging
            // should wait until after.
            getInitializationPromise(trace.performanceController).then(function () { return sendTraceLog(trace); }, function () { return sendTraceLog(trace); });
        }
    }
    function sendTraceLog(trace) {
        if (!getIid()) {
            return;
        }
        var settingsService = SettingsService.getInstance();
        if (!settingsService.loggingEnabled ||
            !settingsService.logTraceAfterSampling) {
            return;
        }
        setTimeout(function () { return sendLog(trace, 1 /* Trace */); }, 0);
    }
    function logNetworkRequest(networkRequest) {
        var settingsService = SettingsService.getInstance();
        // Do not log network requests if instrumentation is disabled.
        if (!settingsService.instrumentationEnabled) {
            return;
        }
        // Do not log the js sdk's call to transport service domain to avoid unnecessary cycle.
        // Need to blacklist both old and new endpoints to avoid migration gap.
        var networkRequestUrl = networkRequest.url;
        // Blacklist old log endpoint and new transport endpoint.
        // Because Performance SDK doesn't instrument requests sent from SDK itself.
        var logEndpointUrl = settingsService.logEndPointUrl.split('?')[0];
        var flEndpointUrl = settingsService.flTransportEndpointUrl.split('?')[0];
        if (networkRequestUrl === logEndpointUrl ||
            networkRequestUrl === flEndpointUrl) {
            return;
        }
        if (!settingsService.loggingEnabled ||
            !settingsService.logNetworkAfterSampling) {
            return;
        }
        setTimeout(function () { return sendLog(networkRequest, 0 /* NetworkRequest */); }, 0);
    }
    function serializer(resource, resourceType) {
        if (resourceType === 0 /* NetworkRequest */) {
            return serializeNetworkRequest(resource);
        }
        return serializeTrace(resource);
    }
    function serializeNetworkRequest(networkRequest) {
        var networkRequestMetric = {
            url: networkRequest.url,
            http_method: networkRequest.httpMethod || 0,
            http_response_code: 200,
            response_payload_bytes: networkRequest.responsePayloadBytes,
            client_start_time_us: networkRequest.startTimeUs,
            time_to_response_initiated_us: networkRequest.timeToResponseInitiatedUs,
            time_to_response_completed_us: networkRequest.timeToResponseCompletedUs
        };
        var perfMetric = {
            application_info: getApplicationInfo(networkRequest.performanceController.app),
            network_request_metric: networkRequestMetric
        };
        return JSON.stringify(perfMetric);
    }
    function serializeTrace(trace) {
        var traceMetric = {
            name: trace.name,
            is_auto: trace.isAuto,
            client_start_time_us: trace.startTimeUs,
            duration_us: trace.durationUs
        };
        if (Object.keys(trace.counters).length !== 0) {
            traceMetric.counters = trace.counters;
        }
        var customAttributes = trace.getAttributes();
        if (Object.keys(customAttributes).length !== 0) {
            traceMetric.custom_attributes = customAttributes;
        }
        var perfMetric = {
            application_info: getApplicationInfo(trace.performanceController.app),
            trace_metric: traceMetric
        };
        return JSON.stringify(perfMetric);
    }
    function getApplicationInfo(firebaseApp) {
        return {
            google_app_id: getAppId(firebaseApp),
            app_instance_id: getIid(),
            web_app_info: {
                sdk_version: SDK_VERSION,
                page_url: Api.getInstance().getUrl(),
                service_worker_status: getServiceWorkerStatus(),
                visibility_state: getVisibilityState(),
                effective_connection_type: getEffectiveConnectionType()
            },
            application_process_state: 0
        };
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var MAX_METRIC_NAME_LENGTH = 100;
    var RESERVED_AUTO_PREFIX = '_';
    var oobMetrics = [
        FIRST_PAINT_COUNTER_NAME,
        FIRST_CONTENTFUL_PAINT_COUNTER_NAME,
        FIRST_INPUT_DELAY_COUNTER_NAME
    ];
    /**
     * Returns true if the metric is custom and does not start with reserved prefix, or if
     * the metric is one of out of the box page load trace metrics.
     */
    function isValidMetricName(name, traceName) {
        if (name.length === 0 || name.length > MAX_METRIC_NAME_LENGTH) {
            return false;
        }
        return ((traceName &&
            traceName.startsWith(OOB_TRACE_PAGE_LOAD_PREFIX) &&
            oobMetrics.indexOf(name) > -1) ||
            !name.startsWith(RESERVED_AUTO_PREFIX));
    }
    /**
     * Converts the provided value to an integer value to be used in case of a metric.
     * @param providedValue Provided number value of the metric that needs to be converted to an integer.
     *
     * @returns Converted integer number to be set for the metric.
     */
    function convertMetricValueToInteger(providedValue) {
        var valueAsInteger = Math.floor(providedValue);
        if (valueAsInteger < providedValue) {
            consoleLogger.info("Metric value should be an Integer, setting the value as : " + valueAsInteger + ".");
        }
        return valueAsInteger;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var Trace = /** @class */ (function () {
        /**
         * @param performanceController The performance controller running.
         * @param name The name of the trace.
         * @param isAuto If the trace is auto-instrumented.
         * @param traceMeasureName The name of the measure marker in user timing specification. This field
         * is only set when the trace is built for logging when the user directly uses the user timing
         * api (performance.mark and performance.measure).
         */
        function Trace(performanceController, name, isAuto, traceMeasureName) {
            if (isAuto === void 0) { isAuto = false; }
            this.performanceController = performanceController;
            this.name = name;
            this.isAuto = isAuto;
            this.state = 1 /* UNINITIALIZED */;
            this.customAttributes = {};
            this.counters = {};
            this.api = Api.getInstance();
            this.randomId = Math.floor(Math.random() * 1000000);
            if (!this.isAuto) {
                this.traceStartMark = TRACE_START_MARK_PREFIX + "-" + this.randomId + "-" + this.name;
                this.traceStopMark = TRACE_STOP_MARK_PREFIX + "-" + this.randomId + "-" + this.name;
                this.traceMeasure =
                    traceMeasureName ||
                        TRACE_MEASURE_PREFIX + "-" + this.randomId + "-" + this.name;
                if (traceMeasureName) {
                    // For the case of direct user timing traces, no start stop will happen. The measure object
                    // is already available.
                    this.calculateTraceMetrics();
                }
            }
        }
        /**
         * Starts a trace. The measurement of the duration starts at this point.
         */
        Trace.prototype.start = function () {
            if (this.state !== 1 /* UNINITIALIZED */) {
                throw ERROR_FACTORY$1.create("trace started" /* TRACE_STARTED_BEFORE */, {
                    traceName: this.name
                });
            }
            this.api.mark(this.traceStartMark);
            this.state = 2 /* RUNNING */;
        };
        /**
         * Stops the trace. The measurement of the duration of the trace stops at this point and trace
         * is logged.
         */
        Trace.prototype.stop = function () {
            if (this.state !== 2 /* RUNNING */) {
                throw ERROR_FACTORY$1.create("trace stopped" /* TRACE_STOPPED_BEFORE */, {
                    traceName: this.name
                });
            }
            this.state = 3 /* TERMINATED */;
            this.api.mark(this.traceStopMark);
            this.api.measure(this.traceMeasure, this.traceStartMark, this.traceStopMark);
            this.calculateTraceMetrics();
            logTrace(this);
        };
        /**
         * Records a trace with predetermined values. If this method is used a trace is created and logged
         * directly. No need to use start and stop methods.
         * @param startTime Trace start time since epoch in millisec
         * @param duration The duraction of the trace in millisec
         * @param options An object which can optionally hold maps of custom metrics and custom attributes
         */
        Trace.prototype.record = function (startTime, duration, options) {
            if (startTime <= 0) {
                throw ERROR_FACTORY$1.create("nonpositive trace startTime" /* NONPOSITIVE_TRACE_START_TIME */, {
                    traceName: this.name
                });
            }
            if (duration <= 0) {
                throw ERROR_FACTORY$1.create("nonpositive trace duration" /* NONPOSITIVE_TRACE_DURATION */, {
                    traceName: this.name
                });
            }
            this.durationUs = Math.floor(duration * 1000);
            this.startTimeUs = Math.floor(startTime * 1000);
            if (options && options.attributes) {
                this.customAttributes = __assign({}, options.attributes);
            }
            if (options && options.metrics) {
                for (var _i = 0, _a = Object.keys(options.metrics); _i < _a.length; _i++) {
                    var metric = _a[_i];
                    if (!isNaN(Number(options.metrics[metric]))) {
                        this.counters[metric] = Number(Math.floor(options.metrics[metric]));
                    }
                }
            }
            logTrace(this);
        };
        /**
         * Increments a custom metric by a certain number or 1 if number not specified. Will create a new
         * custom metric if one with the given name does not exist. The value will be floored down to an
         * integer.
         * @param counter Name of the custom metric
         * @param numAsInteger Increment by value
         */
        Trace.prototype.incrementMetric = function (counter, numAsInteger) {
            if (numAsInteger === void 0) { numAsInteger = 1; }
            if (this.counters[counter] === undefined) {
                this.putMetric(counter, numAsInteger);
            }
            else {
                this.putMetric(counter, this.counters[counter] + numAsInteger);
            }
        };
        /**
         * Sets a custom metric to a specified value. Will create a new custom metric if one with the
         * given name does not exist. The value will be floored down to an integer.
         * @param counter Name of the custom metric
         * @param numAsInteger Set custom metric to this value
         */
        Trace.prototype.putMetric = function (counter, numAsInteger) {
            if (isValidMetricName(counter, this.name)) {
                this.counters[counter] = convertMetricValueToInteger(numAsInteger);
            }
            else {
                throw ERROR_FACTORY$1.create("invalid custom metric name" /* INVALID_CUSTOM_METRIC_NAME */, {
                    customMetricName: counter
                });
            }
        };
        /**
         * Returns the value of the custom metric by that name. If a custom metric with that name does
         * not exist will return zero.
         * @param counter
         */
        Trace.prototype.getMetric = function (counter) {
            return this.counters[counter] || 0;
        };
        /**
         * Sets a custom attribute of a trace to a certain value.
         * @param attr
         * @param value
         */
        Trace.prototype.putAttribute = function (attr, value) {
            var isValidName = isValidCustomAttributeName(attr);
            var isValidValue = isValidCustomAttributeValue(value);
            if (isValidName && isValidValue) {
                this.customAttributes[attr] = value;
                return;
            }
            // Throw appropriate error when the attribute name or value is invalid.
            if (!isValidName) {
                throw ERROR_FACTORY$1.create("invalid attribute name" /* INVALID_ATTRIBUTE_NAME */, {
                    attributeName: attr
                });
            }
            if (!isValidValue) {
                throw ERROR_FACTORY$1.create("invalid attribute value" /* INVALID_ATTRIBUTE_VALUE */, {
                    attributeValue: value
                });
            }
        };
        /**
         * Retrieves the value a custom attribute of a trace is set to.
         * @param attr
         */
        Trace.prototype.getAttribute = function (attr) {
            return this.customAttributes[attr];
        };
        Trace.prototype.removeAttribute = function (attr) {
            if (this.customAttributes[attr] === undefined) {
                return;
            }
            delete this.customAttributes[attr];
        };
        Trace.prototype.getAttributes = function () {
            return __assign({}, this.customAttributes);
        };
        Trace.prototype.setStartTime = function (startTime) {
            this.startTimeUs = startTime;
        };
        Trace.prototype.setDuration = function (duration) {
            this.durationUs = duration;
        };
        /**
         * Calculates and assigns the duration and start time of the trace using the measure performance
         * entry.
         */
        Trace.prototype.calculateTraceMetrics = function () {
            var perfMeasureEntries = this.api.getEntriesByName(this.traceMeasure);
            var perfMeasureEntry = perfMeasureEntries && perfMeasureEntries[0];
            if (perfMeasureEntry) {
                this.durationUs = Math.floor(perfMeasureEntry.duration * 1000);
                this.startTimeUs = Math.floor((perfMeasureEntry.startTime + this.api.getTimeOrigin()) * 1000);
            }
        };
        /**
         * @param navigationTimings A single element array which contains the navigationTIming object of
         * the page load
         * @param paintTimings A array which contains paintTiming object of the page load
         * @param firstInputDelay First input delay in millisec
         */
        Trace.createOobTrace = function (performanceController, navigationTimings, paintTimings, firstInputDelay) {
            var route = Api.getInstance().getUrl();
            if (!route) {
                return;
            }
            var trace = new Trace(performanceController, OOB_TRACE_PAGE_LOAD_PREFIX + route, true);
            var timeOriginUs = Math.floor(Api.getInstance().getTimeOrigin() * 1000);
            trace.setStartTime(timeOriginUs);
            // navigationTimings includes only one element.
            if (navigationTimings && navigationTimings[0]) {
                trace.setDuration(Math.floor(navigationTimings[0].duration * 1000));
                trace.putMetric('domInteractive', Math.floor(navigationTimings[0].domInteractive * 1000));
                trace.putMetric('domContentLoadedEventEnd', Math.floor(navigationTimings[0].domContentLoadedEventEnd * 1000));
                trace.putMetric('loadEventEnd', Math.floor(navigationTimings[0].loadEventEnd * 1000));
            }
            var FIRST_PAINT = 'first-paint';
            var FIRST_CONTENTFUL_PAINT = 'first-contentful-paint';
            if (paintTimings) {
                var firstPaint = paintTimings.find(function (paintObject) { return paintObject.name === FIRST_PAINT; });
                if (firstPaint && firstPaint.startTime) {
                    trace.putMetric(FIRST_PAINT_COUNTER_NAME, Math.floor(firstPaint.startTime * 1000));
                }
                var firstContentfulPaint = paintTimings.find(function (paintObject) { return paintObject.name === FIRST_CONTENTFUL_PAINT; });
                if (firstContentfulPaint && firstContentfulPaint.startTime) {
                    trace.putMetric(FIRST_CONTENTFUL_PAINT_COUNTER_NAME, Math.floor(firstContentfulPaint.startTime * 1000));
                }
                if (firstInputDelay) {
                    trace.putMetric(FIRST_INPUT_DELAY_COUNTER_NAME, Math.floor(firstInputDelay * 1000));
                }
            }
            logTrace(trace);
        };
        Trace.createUserTimingTrace = function (performanceController, measureName) {
            var trace = new Trace(performanceController, measureName, false, measureName);
            logTrace(trace);
        };
        return Trace;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function createNetworkRequestEntry(performanceController, entry) {
        var performanceEntry = entry;
        if (!performanceEntry || performanceEntry.responseStart === undefined) {
            return;
        }
        var timeOrigin = Api.getInstance().getTimeOrigin();
        var startTimeUs = Math.floor((performanceEntry.startTime + timeOrigin) * 1000);
        var timeToResponseInitiatedUs = performanceEntry.responseStart
            ? Math.floor((performanceEntry.responseStart - performanceEntry.startTime) * 1000)
            : undefined;
        var timeToResponseCompletedUs = Math.floor((performanceEntry.responseEnd - performanceEntry.startTime) * 1000);
        // Remove the query params from logged network request url.
        var url = performanceEntry.name && performanceEntry.name.split('?')[0];
        var networkRequest = {
            performanceController: performanceController,
            url: url,
            responsePayloadBytes: performanceEntry.transferSize,
            startTimeUs: startTimeUs,
            timeToResponseInitiatedUs: timeToResponseInitiatedUs,
            timeToResponseCompletedUs: timeToResponseCompletedUs
        };
        logNetworkRequest(networkRequest);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var FID_WAIT_TIME_MS = 5000;
    function setupOobResources(performanceController) {
        // Do not initialize unless iid is available.
        if (!getIid()) {
            return;
        }
        // The load event might not have fired yet, and that means performance navigation timing
        // object has a duration of 0. The setup should run after all current tasks in js queue.
        setTimeout(function () { return setupOobTraces(performanceController); }, 0);
        setTimeout(function () { return setupNetworkRequests(performanceController); }, 0);
        setTimeout(function () { return setupUserTimingTraces(performanceController); }, 0);
    }
    function setupNetworkRequests(performanceController) {
        var api = Api.getInstance();
        var resources = api.getEntriesByType('resource');
        for (var _i = 0, resources_1 = resources; _i < resources_1.length; _i++) {
            var resource = resources_1[_i];
            createNetworkRequestEntry(performanceController, resource);
        }
        api.setupObserver('resource', function (entry) {
            return createNetworkRequestEntry(performanceController, entry);
        });
    }
    function setupOobTraces(performanceController) {
        var api = Api.getInstance();
        var navigationTimings = api.getEntriesByType('navigation');
        var paintTimings = api.getEntriesByType('paint');
        // If First Input Desly polyfill is added to the page, report the fid value.
        // https://github.com/GoogleChromeLabs/first-input-delay
        if (api.onFirstInputDelay) {
            // If the fid call back is not called for certain time, continue without it.
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            var timeoutId_1 = setTimeout(function () {
                Trace.createOobTrace(performanceController, navigationTimings, paintTimings);
                timeoutId_1 = undefined;
            }, FID_WAIT_TIME_MS);
            api.onFirstInputDelay(function (fid) {
                if (timeoutId_1) {
                    clearTimeout(timeoutId_1);
                    Trace.createOobTrace(performanceController, navigationTimings, paintTimings, fid);
                }
            });
        }
        else {
            Trace.createOobTrace(performanceController, navigationTimings, paintTimings);
        }
    }
    function setupUserTimingTraces(performanceController) {
        var api = Api.getInstance();
        // Run through the measure performance entries collected up to this point.
        var measures = api.getEntriesByType('measure');
        for (var _i = 0, measures_1 = measures; _i < measures_1.length; _i++) {
            var measure = measures_1[_i];
            createUserTimingTrace(performanceController, measure);
        }
        // Setup an observer to capture the measures from this point on.
        api.setupObserver('measure', function (entry) {
            return createUserTimingTrace(performanceController, entry);
        });
    }
    function createUserTimingTrace(performanceController, measure) {
        var measureName = measure.name;
        // Do not create a trace, if the user timing marks and measures are created by the sdk itself.
        if (measureName.substring(0, TRACE_MEASURE_PREFIX.length) ===
            TRACE_MEASURE_PREFIX) {
            return;
        }
        Trace.createUserTimingTrace(performanceController, measureName);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var PerformanceController = /** @class */ (function () {
        function PerformanceController(app, installations) {
            this.app = app;
            this.installations = installations;
            this.initialized = false;
        }
        /**
         * This method *must* be called internally as part of creating a
         * PerformanceController instance.
         *
         * Currently it's not possible to pass the settings object through the
         * constructor using Components, so this method exists to be called with the
         * desired settings, to ensure nothing is collected without the user's
         * consent.
         */
        PerformanceController.prototype._init = function (settings) {
            var _this = this;
            if (this.initialized) {
                return;
            }
            if ((settings === null || settings === void 0 ? void 0 : settings.dataCollectionEnabled) !== undefined) {
                this.dataCollectionEnabled = settings.dataCollectionEnabled;
            }
            if ((settings === null || settings === void 0 ? void 0 : settings.instrumentationEnabled) !== undefined) {
                this.instrumentationEnabled = settings.instrumentationEnabled;
            }
            if (Api.getInstance().requiredApisAvailable()) {
                validateIndexedDBOpenable()
                    .then(function (isAvailable) {
                    if (isAvailable) {
                        setupTransportService();
                        getInitializationPromise(_this).then(function () { return setupOobResources(_this); }, function () { return setupOobResources(_this); });
                        _this.initialized = true;
                    }
                })
                    .catch(function (error) {
                    consoleLogger.info("Environment doesn't support IndexedDB: " + error);
                });
            }
            else {
                consoleLogger.info('Firebase Performance cannot start if the browser does not support ' +
                    '"Fetch" and "Promise", or cookies are disabled.');
            }
        };
        Object.defineProperty(PerformanceController.prototype, "instrumentationEnabled", {
            get: function () {
                return SettingsService.getInstance().instrumentationEnabled;
            },
            set: function (val) {
                SettingsService.getInstance().instrumentationEnabled = val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PerformanceController.prototype, "dataCollectionEnabled", {
            get: function () {
                return SettingsService.getInstance().dataCollectionEnabled;
            },
            set: function (val) {
                SettingsService.getInstance().dataCollectionEnabled = val;
            },
            enumerable: false,
            configurable: true
        });
        return PerformanceController;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DEFAULT_ENTRY_NAME = '[DEFAULT]';
    /**
     * Returns a FirebasePerformance instance for the given app.
     * @param app - The FirebaseApp to use.
     * @public
     */
    function getPerformance(app$1) {
        var provider = app._getProvider(app$1, 'performance-exp');
        var perfInstance = provider.getImmediate();
        return perfInstance;
    }
    /**
     * Returns a FirebasePerformance instance for the given app. Can only be called once.
     * @param app - The FirebaseApp to use.
     * @param settings - Optional settings for the Performance instance.
     * @public
     */
    function initializePerformance(app$1, settings) {
        var provider = app._getProvider(app$1, 'performance-exp');
        // throw if an instance was already created.
        // It could happen if initializePerformance() is called more than once, or getPerformance() is called first.
        if (provider.isInitialized()) {
            throw ERROR_FACTORY$1.create("already initialized" /* ALREADY_INITIALIZED */);
        }
        var perfInstance = provider.getImmediate();
        perfInstance._init(settings);
        return perfInstance;
    }
    /**
     * Returns a new PerformanceTrace instance.
     * @param performance - The FirebasePerformance instance to use.
     * @param name - The name of the trace.
     * @public
     */
    function trace(performance, name) {
        return new Trace(performance, name);
    }
    var factory = function (container) {
        // Dependencies
        var app = container.getProvider('app-exp').getImmediate();
        var installations = container
            .getProvider('installations-exp-internal')
            .getImmediate();
        if (app.name !== DEFAULT_ENTRY_NAME) {
            throw ERROR_FACTORY$1.create("FB not default" /* FB_NOT_DEFAULT */);
        }
        if (typeof window === 'undefined') {
            throw ERROR_FACTORY$1.create("no window" /* NO_WINDOW */);
        }
        setupApi(window);
        return new PerformanceController(app, installations);
    };
    function registerPerformance() {
        app._registerComponent(new Component('performance-exp', factory, "PUBLIC" /* PUBLIC */));
    }
    registerPerformance();
    app.registerVersion(name$1, version$1);

    exports.getPerformance = getPerformance;
    exports.initializePerformance = initializePerformance;
    exports.trace = trace;

    Object.defineProperty(exports, '__esModule', { value: true });


              }).apply(this, arguments);
            } catch(err) {
                console.error(err);
                throw new Error(
                  'Cannot instantiate firebase-performance.js - ' +
                  'be sure to load firebase-app.js first.'
                );
              }

})));


(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@firebase/app')) :
    typeof define === 'function' && define.amd ? define(['exports', '@firebase/app'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.firebase = global.firebase || {}, global.firebase['remote-config'] = global.firebase['remote-config'] || {}), global.firebase.app));
}(this, (function (exports, app) { 'use strict';

    try {
                (function() {

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ERROR_NAME = 'FirebaseError';
    // Based on code from:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
    var FirebaseError = /** @class */ (function (_super) {
        __extends(FirebaseError, _super);
        function FirebaseError(code, message, customData) {
            var _this = _super.call(this, message) || this;
            _this.code = code;
            _this.customData = customData;
            _this.name = ERROR_NAME;
            // Fix For ES5
            // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
            Object.setPrototypeOf(_this, FirebaseError.prototype);
            // Maintains proper stack trace for where our error was thrown.
            // Only available on V8.
            if (Error.captureStackTrace) {
                Error.captureStackTrace(_this, ErrorFactory.prototype.create);
            }
            return _this;
        }
        return FirebaseError;
    }(Error));
    var ErrorFactory = /** @class */ (function () {
        function ErrorFactory(service, serviceName, errors) {
            this.service = service;
            this.serviceName = serviceName;
            this.errors = errors;
        }
        ErrorFactory.prototype.create = function (code) {
            var data = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                data[_i - 1] = arguments[_i];
            }
            var customData = data[0] || {};
            var fullCode = this.service + "/" + code;
            var template = this.errors[code];
            var message = template ? replaceTemplate(template, customData) : 'Error';
            // Service Name: Error message (service/code).
            var fullMessage = this.serviceName + ": " + message + " (" + fullCode + ").";
            var error = new FirebaseError(fullCode, fullMessage, customData);
            return error;
        };
        return ErrorFactory;
    }());
    function replaceTemplate(template, data) {
        return template.replace(PATTERN, function (_, key) {
            var value = data[key];
            return value != null ? String(value) : "<" + key + "?>";
        });
    }
    var PATTERN = /\{\$([^}]+)}/g;

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * The amount of milliseconds to exponentially increase.
     */
    var DEFAULT_INTERVAL_MILLIS = 1000;
    /**
     * The factor to backoff by.
     * Should be a number greater than 1.
     */
    var DEFAULT_BACKOFF_FACTOR = 2;
    /**
     * The maximum milliseconds to increase to.
     *
     * <p>Visible for testing
     */
    var MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000; // Four hours, like iOS and Android.
    /**
     * The percentage of backoff time to randomize by.
     * See
     * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic
     * for context.
     *
     * <p>Visible for testing
     */
    var RANDOM_FACTOR = 0.5;
    /**
     * Based on the backoff method from
     * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.
     * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.
     */
    function calculateBackoffMillis(backoffCount, intervalMillis, backoffFactor) {
        if (intervalMillis === void 0) { intervalMillis = DEFAULT_INTERVAL_MILLIS; }
        if (backoffFactor === void 0) { backoffFactor = DEFAULT_BACKOFF_FACTOR; }
        // Calculates an exponentially increasing value.
        // Deviation: calculates value from count and a constant interval, so we only need to save value
        // and count to restore state.
        var currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);
        // A random "fuzz" to avoid waves of retries.
        // Deviation: randomFactor is required.
        var randomWait = Math.round(
        // A fraction of the backoff value to add/subtract.
        // Deviation: changes multiplication order to improve readability.
        RANDOM_FACTOR *
            currBaseValue *
            // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines
            // if we add or subtract.
            (Math.random() - 0.5) *
            2);
        // Limits backoff to max to avoid effectively permanent backoff.
        return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);
    }

    /**
     * Component for service name T, e.g. `auth`, `auth-internal`
     */
    var Component = /** @class */ (function () {
        /**
         *
         * @param name The public service name, e.g. app, auth, firestore, database
         * @param instanceFactory Service factory responsible for creating the public interface
         * @param type whether the service provided by the component is public or private
         */
        function Component(name, instanceFactory, type) {
            this.name = name;
            this.instanceFactory = instanceFactory;
            this.type = type;
            this.multipleInstances = false;
            /**
             * Properties to be added to the service namespace
             */
            this.serviceProps = {};
            this.instantiationMode = "LAZY" /* LAZY */;
        }
        Component.prototype.setInstantiationMode = function (mode) {
            this.instantiationMode = mode;
            return this;
        };
        Component.prototype.setMultipleInstances = function (multipleInstances) {
            this.multipleInstances = multipleInstances;
            return this;
        };
        Component.prototype.setServiceProps = function (props) {
            this.serviceProps = props;
            return this;
        };
        return Component;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a;
    /**
     * The JS SDK supports 5 log levels and also allows a user the ability to
     * silence the logs altogether.
     *
     * The order is a follows:
     * DEBUG < VERBOSE < INFO < WARN < ERROR
     *
     * All of the log types above the current log level will be captured (i.e. if
     * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
     * `VERBOSE` logs will not)
     */
    var LogLevel;
    (function (LogLevel) {
        LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
        LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
        LogLevel[LogLevel["INFO"] = 2] = "INFO";
        LogLevel[LogLevel["WARN"] = 3] = "WARN";
        LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
        LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
    })(LogLevel || (LogLevel = {}));
    var levelStringToEnum = {
        'debug': LogLevel.DEBUG,
        'verbose': LogLevel.VERBOSE,
        'info': LogLevel.INFO,
        'warn': LogLevel.WARN,
        'error': LogLevel.ERROR,
        'silent': LogLevel.SILENT
    };
    /**
     * The default log level
     */
    var defaultLogLevel = LogLevel.INFO;
    /**
     * By default, `console.debug` is not displayed in the developer console (in
     * chrome). To avoid forcing users to have to opt-in to these logs twice
     * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
     * logs to the `console.log` function.
     */
    var ConsoleMethod = (_a = {},
        _a[LogLevel.DEBUG] = 'log',
        _a[LogLevel.VERBOSE] = 'log',
        _a[LogLevel.INFO] = 'info',
        _a[LogLevel.WARN] = 'warn',
        _a[LogLevel.ERROR] = 'error',
        _a);
    /**
     * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
     * messages on to their corresponding console counterparts (if the log method
     * is supported by the current log level)
     */
    var defaultLogHandler = function (instance, logType) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        if (logType < instance.logLevel) {
            return;
        }
        var now = new Date().toISOString();
        var method = ConsoleMethod[logType];
        if (method) {
            console[method].apply(console, __spreadArrays(["[" + now + "]  " + instance.name + ":"], args));
        }
        else {
            throw new Error("Attempted to log a message with an invalid logType (value: " + logType + ")");
        }
    };
    var Logger = /** @class */ (function () {
        /**
         * Gives you an instance of a Logger to capture messages according to
         * Firebase's logging scheme.
         *
         * @param name The name that the logs will be associated with
         */
        function Logger(name) {
            this.name = name;
            /**
             * The log level of the given Logger instance.
             */
            this._logLevel = defaultLogLevel;
            /**
             * The main (internal) log handler for the Logger instance.
             * Can be set to a new function in internal package code but not by user.
             */
            this._logHandler = defaultLogHandler;
            /**
             * The optional, additional, user-defined log handler for the Logger instance.
             */
            this._userLogHandler = null;
        }
        Object.defineProperty(Logger.prototype, "logLevel", {
            get: function () {
                return this._logLevel;
            },
            set: function (val) {
                if (!(val in LogLevel)) {
                    throw new TypeError("Invalid value \"" + val + "\" assigned to `logLevel`");
                }
                this._logLevel = val;
            },
            enumerable: false,
            configurable: true
        });
        // Workaround for setter/getter having to be the same type.
        Logger.prototype.setLogLevel = function (val) {
            this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;
        };
        Object.defineProperty(Logger.prototype, "logHandler", {
            get: function () {
                return this._logHandler;
            },
            set: function (val) {
                if (typeof val !== 'function') {
                    throw new TypeError('Value assigned to `logHandler` must be a function');
                }
                this._logHandler = val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Logger.prototype, "userLogHandler", {
            get: function () {
                return this._userLogHandler;
            },
            set: function (val) {
                this._userLogHandler = val;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * The functions below are all based on the `console` interface
         */
        Logger.prototype.debug = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.DEBUG], args));
            this._logHandler.apply(this, __spreadArrays([this, LogLevel.DEBUG], args));
        };
        Logger.prototype.log = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.VERBOSE], args));
            this._logHandler.apply(this, __spreadArrays([this, LogLevel.VERBOSE], args));
        };
        Logger.prototype.info = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.INFO], args));
            this._logHandler.apply(this, __spreadArrays([this, LogLevel.INFO], args));
        };
        Logger.prototype.warn = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.WARN], args));
            this._logHandler.apply(this, __spreadArrays([this, LogLevel.WARN], args));
        };
        Logger.prototype.error = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.ERROR], args));
            this._logHandler.apply(this, __spreadArrays([this, LogLevel.ERROR], args));
        };
        return Logger;
    }());

    var name = "@firebase/remote-config-exp";
    var version = "0.0.900";

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Shims a minimal AbortSignal.
     *
     * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects
     * of networking, such as retries. Firebase doesn't use AbortController enough to justify a
     * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be
     * swapped out if/when we do.
     */
    var RemoteConfigAbortSignal = /** @class */ (function () {
        function RemoteConfigAbortSignal() {
            this.listeners = [];
        }
        RemoteConfigAbortSignal.prototype.addEventListener = function (listener) {
            this.listeners.push(listener);
        };
        RemoteConfigAbortSignal.prototype.abort = function () {
            this.listeners.forEach(function (listener) { return listener(); });
        };
        return RemoteConfigAbortSignal;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var RC_COMPONENT_NAME = 'remote-config-exp';

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a$1;
    var ERROR_DESCRIPTION_MAP = (_a$1 = {},
        _a$1["registration-window" /* REGISTRATION_WINDOW */] = 'Undefined window object. This SDK only supports usage in a browser environment.',
        _a$1["registration-project-id" /* REGISTRATION_PROJECT_ID */] = 'Undefined project identifier. Check Firebase app initialization.',
        _a$1["registration-api-key" /* REGISTRATION_API_KEY */] = 'Undefined API key. Check Firebase app initialization.',
        _a$1["registration-app-id" /* REGISTRATION_APP_ID */] = 'Undefined app identifier. Check Firebase app initialization.',
        _a$1["storage-open" /* STORAGE_OPEN */] = 'Error thrown when opening storage. Original error: {$originalErrorMessage}.',
        _a$1["storage-get" /* STORAGE_GET */] = 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',
        _a$1["storage-set" /* STORAGE_SET */] = 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',
        _a$1["storage-delete" /* STORAGE_DELETE */] = 'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.',
        _a$1["fetch-client-network" /* FETCH_NETWORK */] = 'Fetch client failed to connect to a network. Check Internet connection.' +
            ' Original error: {$originalErrorMessage}.',
        _a$1["fetch-timeout" /* FETCH_TIMEOUT */] = 'The config fetch request timed out. ' +
            ' Configure timeout using "fetchTimeoutMillis" SDK setting.',
        _a$1["fetch-throttle" /* FETCH_THROTTLE */] = 'The config fetch request timed out while in an exponential backoff state.' +
            ' Configure timeout using "fetchTimeoutMillis" SDK setting.' +
            ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',
        _a$1["fetch-client-parse" /* FETCH_PARSE */] = 'Fetch client could not parse response.' +
            ' Original error: {$originalErrorMessage}.',
        _a$1["fetch-status" /* FETCH_STATUS */] = 'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',
        _a$1);
    var ERROR_FACTORY = new ErrorFactory('remoteconfig' /* service */, 'Remote Config' /* service name */, ERROR_DESCRIPTION_MAP);
    // Note how this is like typeof/instanceof, but for ErrorCode.
    function hasErrorCode(e, errorCode) {
        return e instanceof FirebaseError && e.code.indexOf(errorCode) !== -1;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DEFAULT_VALUE_FOR_BOOLEAN = false;
    var DEFAULT_VALUE_FOR_STRING = '';
    var DEFAULT_VALUE_FOR_NUMBER = 0;
    var BOOLEAN_TRUTHY_VALUES = ['1', 'true', 't', 'yes', 'y', 'on'];
    var Value = /** @class */ (function () {
        function Value(_source, _value) {
            if (_value === void 0) { _value = DEFAULT_VALUE_FOR_STRING; }
            this._source = _source;
            this._value = _value;
        }
        Value.prototype.asString = function () {
            return this._value;
        };
        Value.prototype.asBoolean = function () {
            if (this._source === 'static') {
                return DEFAULT_VALUE_FOR_BOOLEAN;
            }
            return BOOLEAN_TRUTHY_VALUES.indexOf(this._value.toLowerCase()) >= 0;
        };
        Value.prototype.asNumber = function () {
            if (this._source === 'static') {
                return DEFAULT_VALUE_FOR_NUMBER;
            }
            var num = Number(this._value);
            if (isNaN(num)) {
                num = DEFAULT_VALUE_FOR_NUMBER;
            }
            return num;
        };
        Value.prototype.getSource = function () {
            return this._source;
        };
        return Value;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     *
     * @param app - the firebase app instance
     * @returns a remote config instance
     *
     * @public
     */
    function getRemoteConfig(app$1) {
        var rcProvider = app._getProvider(app$1, RC_COMPONENT_NAME);
        return rcProvider.getImmediate();
    }
    /**
     * Makes the last fetched config available to the getters.
     * @param remoteConfig - the remote config instance
     * @returns A promise which resolves to true if the current call activated the fetched configs.
     * If the fetched configs were already activated, the promise will resolve to false.
     *
     * @public
     */
    function activate(remoteConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var rc, _a, lastSuccessfulFetchResponse, activeConfigEtag;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        rc = remoteConfig;
                        return [4 /*yield*/, Promise.all([
                                rc._storage.getLastSuccessfulFetchResponse(),
                                rc._storage.getActiveConfigEtag()
                            ])];
                    case 1:
                        _a = _b.sent(), lastSuccessfulFetchResponse = _a[0], activeConfigEtag = _a[1];
                        if (!lastSuccessfulFetchResponse ||
                            !lastSuccessfulFetchResponse.config ||
                            !lastSuccessfulFetchResponse.eTag ||
                            lastSuccessfulFetchResponse.eTag === activeConfigEtag) {
                            // Either there is no successful fetched config, or is the same as current active
                            // config.
                            return [2 /*return*/, false];
                        }
                        return [4 /*yield*/, Promise.all([
                                rc._storageCache.setActiveConfig(lastSuccessfulFetchResponse.config),
                                rc._storage.setActiveConfigEtag(lastSuccessfulFetchResponse.eTag)
                            ])];
                    case 2:
                        _b.sent();
                        return [2 /*return*/, true];
                }
            });
        });
    }
    /**
     * Ensures the last activated config are available to the getters.
     * @param remoteConfig - the remote config instance
     *
     * @returns A promise that resolves when the last activated config is available to the getters
     * @public
     */
    function ensureInitialized(remoteConfig) {
        var rc = remoteConfig;
        if (!rc._initializePromise) {
            rc._initializePromise = rc._storageCache.loadFromStorage().then(function () {
                rc._isInitializationComplete = true;
            });
        }
        return rc._initializePromise;
    }
    /**
     * Fetches and caches configuration from the Remote Config service.
     * @param remoteConfig - the remote config instance
     * @public
     */
    function fetchConfig(remoteConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var rc, abortSignal, e_1, lastFetchStatus;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        rc = remoteConfig;
                        abortSignal = new RemoteConfigAbortSignal();
                        setTimeout(function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.
                                abortSignal.abort();
                                return [2 /*return*/];
                            });
                        }); }, rc.settings.fetchTimeoutMillis);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, , 6]);
                        return [4 /*yield*/, rc._client.fetch({
                                cacheMaxAgeMillis: rc.settings.minimumFetchIntervalMillis,
                                signal: abortSignal
                            })];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, rc._storageCache.setLastFetchStatus('success')];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 4:
                        e_1 = _a.sent();
                        lastFetchStatus = hasErrorCode(e_1, "fetch-throttle" /* FETCH_THROTTLE */)
                            ? 'throttle'
                            : 'failure';
                        return [4 /*yield*/, rc._storageCache.setLastFetchStatus(lastFetchStatus)];
                    case 5:
                        _a.sent();
                        throw e_1;
                    case 6: return [2 /*return*/];
                }
            });
        });
    }
    /**
     * Gets all config.
     *
     * @param remoteConfig - the remote config instance
     * @returns all config
     *
     * @public
     */
    function getAll(remoteConfig) {
        var rc = remoteConfig;
        return getAllKeys(rc._storageCache.getActiveConfig(), rc.defaultConfig).reduce(function (allConfigs, key) {
            allConfigs[key] = getValue(remoteConfig, key);
            return allConfigs;
        }, {});
    }
    /**
     * Gets the value for the given key as a boolean.
     *
     * Convenience method for calling <code>remoteConfig.getValue(key).asBoolean()</code>.
     *
     * @param remoteConfig - the remote config instance
     * @param key - the name of the parameter
     *
     * @returns the value for the given key as a boolean
     * @public
     */
    function getBoolean(remoteConfig, key) {
        return getValue(remoteConfig, key).asBoolean();
    }
    /**
     * Gets the value for the given key as a number.
     *
     * Convenience method for calling <code>remoteConfig.getValue(key).asNumber()</code>.
     *
     * @param remoteConfig - the remote config instance
     * @param key - the name of the parameter
     *
     * @returns the value for the given key as a number
     *
     * @public
     */
    function getNumber(remoteConfig, key) {
        return getValue(remoteConfig, key).asNumber();
    }
    /**
     * Gets the value for the given key as a String.
     * Convenience method for calling <code>remoteConfig.getValue(key).asString()</code>.
     *
     * @param remoteConfig - the remote config instance
     * @param key - the name of the parameter
     *
     * @returns the value for the given key as a String
     *
     * @public
     */
    function getString(remoteConfig, key) {
        return getValue(remoteConfig, key).asString();
    }
    /**
     * Gets the {@link @firebase/remote-config-types#Value} for the given key.
     *
     * @param remoteConfig - the remote config instance
     * @param key - the name of the parameter
     *
     * @returns the value for the given key
     *
     * @public
     */
    function getValue(remoteConfig, key) {
        var rc = remoteConfig;
        if (!rc._isInitializationComplete) {
            rc._logger.debug("A value was requested for key \"" + key + "\" before SDK initialization completed." +
                ' Await on ensureInitialized if the intent was to get a previously activated value.');
        }
        var activeConfig = rc._storageCache.getActiveConfig();
        if (activeConfig && activeConfig[key] !== undefined) {
            return new Value('remote', activeConfig[key]);
        }
        else if (rc.defaultConfig && rc.defaultConfig[key] !== undefined) {
            return new Value('default', String(rc.defaultConfig[key]));
        }
        rc._logger.debug("Returning static value for key \"" + key + "\"." +
            ' Define a default or remote value if this is unintentional.');
        return new Value('static');
    }
    /**
     * Defines the log level to use.
     *
     * @param remoteConfig - the remote config instance
     * @param logLevel - the log level to set
     *
     * @public
     */
    function setLogLevel(remoteConfig, logLevel) {
        var rc = remoteConfig;
        switch (logLevel) {
            case 'debug':
                rc._logger.logLevel = LogLevel.DEBUG;
                break;
            case 'silent':
                rc._logger.logLevel = LogLevel.SILENT;
                break;
            default:
                rc._logger.logLevel = LogLevel.ERROR;
        }
    }
    /**
     * Dedupes and returns an array of all the keys of the received objects.
     */
    function getAllKeys(obj1, obj2) {
        if (obj1 === void 0) { obj1 = {}; }
        if (obj2 === void 0) { obj2 = {}; }
        return Object.keys(__assign(__assign({}, obj1), obj2));
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Implements the {@link RemoteConfigClient} abstraction with success response caching.
     *
     * <p>Comparable to the browser's Cache API for responses, but the Cache API requires a Service
     * Worker, which requires HTTPS, which would significantly complicate SDK installation. Also, the
     * Cache API doesn't support matching entries by time.
     */
    var CachingClient = /** @class */ (function () {
        function CachingClient(client, storage, storageCache, logger) {
            this.client = client;
            this.storage = storage;
            this.storageCache = storageCache;
            this.logger = logger;
        }
        /**
         * Returns true if the age of the cached fetched configs is less than or equal to
         * {@link Settings#minimumFetchIntervalInSeconds}.
         *
         * <p>This is comparable to passing `headers = { 'Cache-Control': max-age <maxAge> }` to the
         * native Fetch API.
         *
         * <p>Visible for testing.
         */
        CachingClient.prototype.isCachedDataFresh = function (cacheMaxAgeMillis, lastSuccessfulFetchTimestampMillis) {
            // Cache can only be fresh if it's populated.
            if (!lastSuccessfulFetchTimestampMillis) {
                this.logger.debug('Config fetch cache check. Cache unpopulated.');
                return false;
            }
            // Calculates age of cache entry.
            var cacheAgeMillis = Date.now() - lastSuccessfulFetchTimestampMillis;
            var isCachedDataFresh = cacheAgeMillis <= cacheMaxAgeMillis;
            this.logger.debug('Config fetch cache check.' +
                (" Cache age millis: " + cacheAgeMillis + ".") +
                (" Cache max age millis (minimumFetchIntervalMillis setting): " + cacheMaxAgeMillis + ".") +
                (" Is cache hit: " + isCachedDataFresh + "."));
            return isCachedDataFresh;
        };
        CachingClient.prototype.fetch = function (request) {
            return __awaiter(this, void 0, void 0, function () {
                var _a, lastSuccessfulFetchTimestampMillis, lastSuccessfulFetchResponse, response, storageOperations;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, Promise.all([
                                this.storage.getLastSuccessfulFetchTimestampMillis(),
                                this.storage.getLastSuccessfulFetchResponse()
                            ])];
                        case 1:
                            _a = _b.sent(), lastSuccessfulFetchTimestampMillis = _a[0], lastSuccessfulFetchResponse = _a[1];
                            // Exits early on cache hit.
                            if (lastSuccessfulFetchResponse &&
                                this.isCachedDataFresh(request.cacheMaxAgeMillis, lastSuccessfulFetchTimestampMillis)) {
                                return [2 /*return*/, lastSuccessfulFetchResponse];
                            }
                            // Deviates from pure decorator by not honoring a passed ETag since we don't have a public API
                            // that allows the caller to pass an ETag.
                            request.eTag =
                                lastSuccessfulFetchResponse && lastSuccessfulFetchResponse.eTag;
                            return [4 /*yield*/, this.client.fetch(request)];
                        case 2:
                            response = _b.sent();
                            storageOperations = [
                                // Uses write-through cache for consistency with synchronous public API.
                                this.storageCache.setLastSuccessfulFetchTimestampMillis(Date.now())
                            ];
                            if (response.status === 200) {
                                // Caches response only if it has changed, ie non-304 responses.
                                storageOperations.push(this.storage.setLastSuccessfulFetchResponse(response));
                            }
                            return [4 /*yield*/, Promise.all(storageOperations)];
                        case 3:
                            _b.sent();
                            return [2 /*return*/, response];
                    }
                });
            });
        };
        return CachingClient;
    }());

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Attempts to get the most accurate browser language setting.
     *
     * <p>Adapted from getUserLanguage in packages/auth/src/utils.js for TypeScript.
     *
     * <p>Defers default language specification to server logic for consistency.
     *
     * @param navigatorLanguage Enables tests to override read-only {@link NavigatorLanguage}.
     */
    function getUserLanguage(navigatorLanguage) {
        if (navigatorLanguage === void 0) { navigatorLanguage = navigator; }
        return (
        // Most reliable, but only supported in Chrome/Firefox.
        (navigatorLanguage.languages && navigatorLanguage.languages[0]) ||
            // Supported in most browsers, but returns the language of the browser
            // UI, not the language set in browser settings.
            navigatorLanguage.language
        // Polyfill otherwise.
        );
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Implements the Client abstraction for the Remote Config REST API.
     */
    var RestClient = /** @class */ (function () {
        function RestClient(firebaseInstallations, sdkVersion, namespace, projectId, apiKey, appId) {
            this.firebaseInstallations = firebaseInstallations;
            this.sdkVersion = sdkVersion;
            this.namespace = namespace;
            this.projectId = projectId;
            this.apiKey = apiKey;
            this.appId = appId;
        }
        /**
         * Fetches from the Remote Config REST API.
         *
         * @throws a {@link ErrorCode.FETCH_NETWORK} error if {@link GlobalFetch#fetch} can't
         * connect to the network.
         * @throws a {@link ErrorCode.FETCH_PARSE} error if {@link Response#json} can't parse the
         * fetch response.
         * @throws a {@link ErrorCode.FETCH_STATUS} error if the service returns an HTTP error status.
         */
        RestClient.prototype.fetch = function (request) {
            return __awaiter(this, void 0, void 0, function () {
                var _a, installationId, installationToken, urlBase, url, headers, requestBody, options, fetchPromise, timeoutPromise, response, originalError_1, errorCode, status, responseEtag, config, state, responseBody, originalError_2;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, Promise.all([
                                this.firebaseInstallations.getId(),
                                this.firebaseInstallations.getToken()
                            ])];
                        case 1:
                            _a = _b.sent(), installationId = _a[0], installationToken = _a[1];
                            urlBase = window.FIREBASE_REMOTE_CONFIG_URL_BASE ||
                                'https://firebaseremoteconfig.googleapis.com';
                            url = urlBase + "/v1/projects/" + this.projectId + "/namespaces/" + this.namespace + ":fetch?key=" + this.apiKey;
                            headers = {
                                'Content-Type': 'application/json',
                                'Content-Encoding': 'gzip',
                                // Deviates from pure decorator by not passing max-age header since we don't currently have
                                // service behavior using that header.
                                'If-None-Match': request.eTag || '*'
                            };
                            requestBody = {
                                /* eslint-disable camelcase */
                                sdk_version: this.sdkVersion,
                                app_instance_id: installationId,
                                app_instance_id_token: installationToken,
                                app_id: this.appId,
                                language_code: getUserLanguage()
                                /* eslint-enable camelcase */
                            };
                            options = {
                                method: 'POST',
                                headers: headers,
                                body: JSON.stringify(requestBody)
                            };
                            fetchPromise = fetch(url, options);
                            timeoutPromise = new Promise(function (_resolve, reject) {
                                // Maps async event listener to Promise API.
                                request.signal.addEventListener(function () {
                                    // Emulates https://heycam.github.io/webidl/#aborterror
                                    var error = new Error('The operation was aborted.');
                                    error.name = 'AbortError';
                                    reject(error);
                                });
                            });
                            _b.label = 2;
                        case 2:
                            _b.trys.push([2, 5, , 6]);
                            return [4 /*yield*/, Promise.race([fetchPromise, timeoutPromise])];
                        case 3:
                            _b.sent();
                            return [4 /*yield*/, fetchPromise];
                        case 4:
                            response = _b.sent();
                            return [3 /*break*/, 6];
                        case 5:
                            originalError_1 = _b.sent();
                            errorCode = "fetch-client-network" /* FETCH_NETWORK */;
                            if (originalError_1.name === 'AbortError') {
                                errorCode = "fetch-timeout" /* FETCH_TIMEOUT */;
                            }
                            throw ERROR_FACTORY.create(errorCode, {
                                originalErrorMessage: originalError_1.message
                            });
                        case 6:
                            status = response.status;
                            responseEtag = response.headers.get('ETag') || undefined;
                            if (!(response.status === 200)) return [3 /*break*/, 11];
                            responseBody = void 0;
                            _b.label = 7;
                        case 7:
                            _b.trys.push([7, 9, , 10]);
                            return [4 /*yield*/, response.json()];
                        case 8:
                            responseBody = _b.sent();
                            return [3 /*break*/, 10];
                        case 9:
                            originalError_2 = _b.sent();
                            throw ERROR_FACTORY.create("fetch-client-parse" /* FETCH_PARSE */, {
                                originalErrorMessage: originalError_2.message
                            });
                        case 10:
                            config = responseBody['entries'];
                            state = responseBody['state'];
                            _b.label = 11;
                        case 11:
                            // Normalizes based on legacy state.
                            if (state === 'INSTANCE_STATE_UNSPECIFIED') {
                                status = 500;
                            }
                            else if (state === 'NO_CHANGE') {
                                status = 304;
                            }
                            else if (state === 'NO_TEMPLATE' || state === 'EMPTY_CONFIG') {
                                // These cases can be fixed remotely, so normalize to safe value.
                                config = {};
                            }
                            // Normalize to exception-based control flow for non-success cases.
                            // Encapsulates HTTP specifics in this class as much as possible. Status is still the best for
                            // differentiating success states (200 from 304; the state body param is undefined in a
                            // standard 304).
                            if (status !== 304 && status !== 200) {
                                throw ERROR_FACTORY.create("fetch-status" /* FETCH_STATUS */, {
                                    httpStatus: status
                                });
                            }
                            return [2 /*return*/, { status: status, eTag: responseEtag, config: config }];
                    }
                });
            });
        };
        return RestClient;
    }());

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Supports waiting on a backoff by:
     *
     * <ul>
     *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>
     *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>
     *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled
     *       request appear the same.</li>
     * </ul>
     *
     * <p>Visible for testing.
     */
    function setAbortableTimeout(signal, throttleEndTimeMillis) {
        return new Promise(function (resolve, reject) {
            // Derives backoff from given end time, normalizing negative numbers to zero.
            var backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);
            var timeout = setTimeout(resolve, backoffMillis);
            // Adds listener, rather than sets onabort, because signal is a shared object.
            signal.addEventListener(function () {
                clearTimeout(timeout);
                // If the request completes before this timeout, the rejection has no effect.
                reject(ERROR_FACTORY.create("fetch-throttle" /* FETCH_THROTTLE */, {
                    throttleEndTimeMillis: throttleEndTimeMillis
                }));
            });
        });
    }
    /**
     * Returns true if the {@link Error} indicates a fetch request may succeed later.
     */
    function isRetriableError(e) {
        if (!(e instanceof FirebaseError) || !e.customData) {
            return false;
        }
        // Uses string index defined by ErrorData, which FirebaseError implements.
        var httpStatus = Number(e.customData['httpStatus']);
        return (httpStatus === 429 ||
            httpStatus === 500 ||
            httpStatus === 503 ||
            httpStatus === 504);
    }
    /**
     * Decorates a Client with retry logic.
     *
     * <p>Comparable to CachingClient, but uses backoff logic instead of cache max age and doesn't cache
     * responses (because the SDK has no use for error responses).
     */
    var RetryingClient = /** @class */ (function () {
        function RetryingClient(client, storage) {
            this.client = client;
            this.storage = storage;
        }
        RetryingClient.prototype.fetch = function (request) {
            return __awaiter(this, void 0, void 0, function () {
                var throttleMetadata;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.storage.getThrottleMetadata()];
                        case 1:
                            throttleMetadata = (_a.sent()) || {
                                backoffCount: 0,
                                throttleEndTimeMillis: Date.now()
                            };
                            return [2 /*return*/, this.attemptFetch(request, throttleMetadata)];
                    }
                });
            });
        };
        /**
         * A recursive helper for attempting a fetch request repeatedly.
         *
         * @throws any non-retriable errors.
         */
        RetryingClient.prototype.attemptFetch = function (request, _a) {
            var throttleEndTimeMillis = _a.throttleEndTimeMillis, backoffCount = _a.backoffCount;
            return __awaiter(this, void 0, void 0, function () {
                var response, e_1, throttleMetadata;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: 
                        // Starts with a (potentially zero) timeout to support resumption from stored state.
                        // Ensures the throttle end time is honored if the last attempt timed out.
                        // Note the SDK will never make a request if the fetch timeout expires at this point.
                        return [4 /*yield*/, setAbortableTimeout(request.signal, throttleEndTimeMillis)];
                        case 1:
                            // Starts with a (potentially zero) timeout to support resumption from stored state.
                            // Ensures the throttle end time is honored if the last attempt timed out.
                            // Note the SDK will never make a request if the fetch timeout expires at this point.
                            _b.sent();
                            _b.label = 2;
                        case 2:
                            _b.trys.push([2, 5, , 7]);
                            return [4 /*yield*/, this.client.fetch(request)];
                        case 3:
                            response = _b.sent();
                            // Note the SDK only clears throttle state if response is success or non-retriable.
                            return [4 /*yield*/, this.storage.deleteThrottleMetadata()];
                        case 4:
                            // Note the SDK only clears throttle state if response is success or non-retriable.
                            _b.sent();
                            return [2 /*return*/, response];
                        case 5:
                            e_1 = _b.sent();
                            if (!isRetriableError(e_1)) {
                                throw e_1;
                            }
                            throttleMetadata = {
                                throttleEndTimeMillis: Date.now() + calculateBackoffMillis(backoffCount),
                                backoffCount: backoffCount + 1
                            };
                            // Persists state.
                            return [4 /*yield*/, this.storage.setThrottleMetadata(throttleMetadata)];
                        case 6:
                            // Persists state.
                            _b.sent();
                            return [2 /*return*/, this.attemptFetch(request, throttleMetadata)];
                        case 7: return [2 /*return*/];
                    }
                });
            });
        };
        return RetryingClient;
    }());

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DEFAULT_FETCH_TIMEOUT_MILLIS = 60 * 1000; // One minute
    var DEFAULT_CACHE_MAX_AGE_MILLIS = 12 * 60 * 60 * 1000; // Twelve hours.
    /**
     * Encapsulates business logic mapping network and storage dependencies to the public SDK API.
     *
     * See {@link https://github.com/FirebasePrivate/firebase-js-sdk/blob/master/packages/firebase/index.d.ts|interface documentation} for method descriptions.
     */
    var RemoteConfig = /** @class */ (function () {
        function RemoteConfig(
        // Required by FirebaseServiceFactory interface.
        app, 
        // JS doesn't support private yet
        // (https://github.com/tc39/proposal-class-fields#private-fields), so we hint using an
        // underscore prefix.
        /**
         * @internal
         */
        _client, 
        /**
         * @internal
         */
        _storageCache, 
        /**
         * @internal
         */
        _storage, 
        /**
         * @internal
         */
        _logger) {
            this.app = app;
            this._client = _client;
            this._storageCache = _storageCache;
            this._storage = _storage;
            this._logger = _logger;
            /**
             * Tracks completion of initialization promise.
             * @internal
             */
            this._isInitializationComplete = false;
            this.settings = {
                fetchTimeoutMillis: DEFAULT_FETCH_TIMEOUT_MILLIS,
                minimumFetchIntervalMillis: DEFAULT_CACHE_MAX_AGE_MILLIS
            };
            this.defaultConfig = {};
        }
        Object.defineProperty(RemoteConfig.prototype, "fetchTimeMillis", {
            get: function () {
                return this._storageCache.getLastSuccessfulFetchTimestampMillis() || -1;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RemoteConfig.prototype, "lastFetchStatus", {
            get: function () {
                return this._storageCache.getLastFetchStatus() || 'no-fetch-yet';
            },
            enumerable: false,
            configurable: true
        });
        return RemoteConfig;
    }());

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Converts an error event associated with a {@link IDBRequest} to a {@link FirebaseError}.
     */
    function toFirebaseError(event, errorCode) {
        var originalError = event.target.error || undefined;
        return ERROR_FACTORY.create(errorCode, {
            originalErrorMessage: originalError && originalError.message
        });
    }
    /**
     * A general-purpose store keyed by app + namespace + {@link
     * ProjectNamespaceKeyFieldValue}.
     *
     * <p>The Remote Config SDK can be used with multiple app installations, and each app can interact
     * with multiple namespaces, so this store uses app (ID + name) and namespace as common parent keys
     * for a set of key-value pairs. See {@link Storage#createCompositeKey}.
     *
     * <p>Visible for testing.
     */
    var APP_NAMESPACE_STORE = 'app_namespace_store';
    var DB_NAME = 'firebase_remote_config';
    var DB_VERSION = 1;
    // Visible for testing.
    function openDatabase() {
        return new Promise(function (resolve, reject) {
            var request = indexedDB.open(DB_NAME, DB_VERSION);
            request.onerror = function (event) {
                reject(toFirebaseError(event, "storage-open" /* STORAGE_OPEN */));
            };
            request.onsuccess = function (event) {
                resolve(event.target.result);
            };
            request.onupgradeneeded = function (event) {
                var db = event.target.result;
                // We don't use 'break' in this switch statement, the fall-through
                // behavior is what we want, because if there are multiple versions between
                // the old version and the current version, we want ALL the migrations
                // that correspond to those versions to run, not only the last one.
                // eslint-disable-next-line default-case
                switch (event.oldVersion) {
                    case 0:
                        db.createObjectStore(APP_NAMESPACE_STORE, {
                            keyPath: 'compositeKey'
                        });
                }
            };
        });
    }
    /**
     * Abstracts data persistence.
     */
    var Storage = /** @class */ (function () {
        /**
         * @param appId enables storage segmentation by app (ID + name).
         * @param appName enables storage segmentation by app (ID + name).
         * @param namespace enables storage segmentation by namespace.
         */
        function Storage(appId, appName, namespace, openDbPromise) {
            if (openDbPromise === void 0) { openDbPromise = openDatabase(); }
            this.appId = appId;
            this.appName = appName;
            this.namespace = namespace;
            this.openDbPromise = openDbPromise;
        }
        Storage.prototype.getLastFetchStatus = function () {
            return this.get('last_fetch_status');
        };
        Storage.prototype.setLastFetchStatus = function (status) {
            return this.set('last_fetch_status', status);
        };
        // This is comparable to a cache entry timestamp. If we need to expire other data, we could
        // consider adding timestamp to all storage records and an optional max age arg to getters.
        Storage.prototype.getLastSuccessfulFetchTimestampMillis = function () {
            return this.get('last_successful_fetch_timestamp_millis');
        };
        Storage.prototype.setLastSuccessfulFetchTimestampMillis = function (timestamp) {
            return this.set('last_successful_fetch_timestamp_millis', timestamp);
        };
        Storage.prototype.getLastSuccessfulFetchResponse = function () {
            return this.get('last_successful_fetch_response');
        };
        Storage.prototype.setLastSuccessfulFetchResponse = function (response) {
            return this.set('last_successful_fetch_response', response);
        };
        Storage.prototype.getActiveConfig = function () {
            return this.get('active_config');
        };
        Storage.prototype.setActiveConfig = function (config) {
            return this.set('active_config', config);
        };
        Storage.prototype.getActiveConfigEtag = function () {
            return this.get('active_config_etag');
        };
        Storage.prototype.setActiveConfigEtag = function (etag) {
            return this.set('active_config_etag', etag);
        };
        Storage.prototype.getThrottleMetadata = function () {
            return this.get('throttle_metadata');
        };
        Storage.prototype.setThrottleMetadata = function (metadata) {
            return this.set('throttle_metadata', metadata);
        };
        Storage.prototype.deleteThrottleMetadata = function () {
            return this.delete('throttle_metadata');
        };
        Storage.prototype.get = function (key) {
            return __awaiter(this, void 0, void 0, function () {
                var db;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.openDbPromise];
                        case 1:
                            db = _a.sent();
                            return [2 /*return*/, new Promise(function (resolve, reject) {
                                    var transaction = db.transaction([APP_NAMESPACE_STORE], 'readonly');
                                    var objectStore = transaction.objectStore(APP_NAMESPACE_STORE);
                                    var compositeKey = _this.createCompositeKey(key);
                                    try {
                                        var request = objectStore.get(compositeKey);
                                        request.onerror = function (event) {
                                            reject(toFirebaseError(event, "storage-get" /* STORAGE_GET */));
                                        };
                                        request.onsuccess = function (event) {
                                            var result = event.target.result;
                                            if (result) {
                                                resolve(result.value);
                                            }
                                            else {
                                                resolve(undefined);
                                            }
                                        };
                                    }
                                    catch (e) {
                                        reject(ERROR_FACTORY.create("storage-get" /* STORAGE_GET */, {
                                            originalErrorMessage: e && e.message
                                        }));
                                    }
                                })];
                    }
                });
            });
        };
        Storage.prototype.set = function (key, value) {
            return __awaiter(this, void 0, void 0, function () {
                var db;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.openDbPromise];
                        case 1:
                            db = _a.sent();
                            return [2 /*return*/, new Promise(function (resolve, reject) {
                                    var transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');
                                    var objectStore = transaction.objectStore(APP_NAMESPACE_STORE);
                                    var compositeKey = _this.createCompositeKey(key);
                                    try {
                                        var request = objectStore.put({
                                            compositeKey: compositeKey,
                                            value: value
                                        });
                                        request.onerror = function (event) {
                                            reject(toFirebaseError(event, "storage-set" /* STORAGE_SET */));
                                        };
                                        request.onsuccess = function () {
                                            resolve();
                                        };
                                    }
                                    catch (e) {
                                        reject(ERROR_FACTORY.create("storage-set" /* STORAGE_SET */, {
                                            originalErrorMessage: e && e.message
                                        }));
                                    }
                                })];
                    }
                });
            });
        };
        Storage.prototype.delete = function (key) {
            return __awaiter(this, void 0, void 0, function () {
                var db;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.openDbPromise];
                        case 1:
                            db = _a.sent();
                            return [2 /*return*/, new Promise(function (resolve, reject) {
                                    var transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');
                                    var objectStore = transaction.objectStore(APP_NAMESPACE_STORE);
                                    var compositeKey = _this.createCompositeKey(key);
                                    try {
                                        var request = objectStore.delete(compositeKey);
                                        request.onerror = function (event) {
                                            reject(toFirebaseError(event, "storage-delete" /* STORAGE_DELETE */));
                                        };
                                        request.onsuccess = function () {
                                            resolve();
                                        };
                                    }
                                    catch (e) {
                                        reject(ERROR_FACTORY.create("storage-delete" /* STORAGE_DELETE */, {
                                            originalErrorMessage: e && e.message
                                        }));
                                    }
                                })];
                    }
                });
            });
        };
        // Facilitates composite key functionality (which is unsupported in IE).
        Storage.prototype.createCompositeKey = function (key) {
            return [this.appId, this.appName, this.namespace, key].join();
        };
        return Storage;
    }());

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A memory cache layer over storage to support the SDK's synchronous read requirements.
     */
    var StorageCache = /** @class */ (function () {
        function StorageCache(storage) {
            this.storage = storage;
        }
        /**
         * Memory-only getters
         */
        StorageCache.prototype.getLastFetchStatus = function () {
            return this.lastFetchStatus;
        };
        StorageCache.prototype.getLastSuccessfulFetchTimestampMillis = function () {
            return this.lastSuccessfulFetchTimestampMillis;
        };
        StorageCache.prototype.getActiveConfig = function () {
            return this.activeConfig;
        };
        /**
         * Read-ahead getter
         */
        StorageCache.prototype.loadFromStorage = function () {
            return __awaiter(this, void 0, void 0, function () {
                var lastFetchStatusPromise, lastSuccessfulFetchTimestampMillisPromise, activeConfigPromise, lastFetchStatus, lastSuccessfulFetchTimestampMillis, activeConfig;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            lastFetchStatusPromise = this.storage.getLastFetchStatus();
                            lastSuccessfulFetchTimestampMillisPromise = this.storage.getLastSuccessfulFetchTimestampMillis();
                            activeConfigPromise = this.storage.getActiveConfig();
                            return [4 /*yield*/, lastFetchStatusPromise];
                        case 1:
                            lastFetchStatus = _a.sent();
                            if (lastFetchStatus) {
                                this.lastFetchStatus = lastFetchStatus;
                            }
                            return [4 /*yield*/, lastSuccessfulFetchTimestampMillisPromise];
                        case 2:
                            lastSuccessfulFetchTimestampMillis = _a.sent();
                            if (lastSuccessfulFetchTimestampMillis) {
                                this.lastSuccessfulFetchTimestampMillis = lastSuccessfulFetchTimestampMillis;
                            }
                            return [4 /*yield*/, activeConfigPromise];
                        case 3:
                            activeConfig = _a.sent();
                            if (activeConfig) {
                                this.activeConfig = activeConfig;
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Write-through setters
         */
        StorageCache.prototype.setLastFetchStatus = function (status) {
            this.lastFetchStatus = status;
            return this.storage.setLastFetchStatus(status);
        };
        StorageCache.prototype.setLastSuccessfulFetchTimestampMillis = function (timestampMillis) {
            this.lastSuccessfulFetchTimestampMillis = timestampMillis;
            return this.storage.setLastSuccessfulFetchTimestampMillis(timestampMillis);
        };
        StorageCache.prototype.setActiveConfig = function (activeConfig) {
            this.activeConfig = activeConfig;
            return this.storage.setActiveConfig(activeConfig);
        };
        return StorageCache;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function registerRemoteConfig() {
        app._registerComponent(new Component(RC_COMPONENT_NAME, remoteConfigFactory, "PUBLIC" /* PUBLIC */).setMultipleInstances(true));
        app.registerVersion(name, version);
        function remoteConfigFactory(container, namespace) {
            /* Dependencies */
            // getImmediate for FirebaseApp will always succeed
            var app$1 = container.getProvider('app-exp').getImmediate();
            // The following call will always succeed because rc has `import '@firebase/installations'`
            var installations = container
                .getProvider('installations-exp-internal')
                .getImmediate();
            // Guards against the SDK being used in non-browser environments.
            if (typeof window === 'undefined') {
                throw ERROR_FACTORY.create("registration-window" /* REGISTRATION_WINDOW */);
            }
            // Normalizes optional inputs.
            var _a = app$1.options, projectId = _a.projectId, apiKey = _a.apiKey, appId = _a.appId;
            if (!projectId) {
                throw ERROR_FACTORY.create("registration-project-id" /* REGISTRATION_PROJECT_ID */);
            }
            if (!apiKey) {
                throw ERROR_FACTORY.create("registration-api-key" /* REGISTRATION_API_KEY */);
            }
            if (!appId) {
                throw ERROR_FACTORY.create("registration-app-id" /* REGISTRATION_APP_ID */);
            }
            namespace = namespace || 'firebase';
            var storage = new Storage(appId, app$1.name, namespace);
            var storageCache = new StorageCache(storage);
            var logger = new Logger(name);
            // Sets ERROR as the default log level.
            // See RemoteConfig#setLogLevel for corresponding normalization to ERROR log level.
            logger.logLevel = LogLevel.ERROR;
            var restClient = new RestClient(installations, 
            // Uses the JS SDK version, by which the RC package version can be deduced, if necessary.
            app.SDK_VERSION, namespace, projectId, apiKey, appId);
            var retryingClient = new RetryingClient(restClient, storage);
            var cachingClient = new CachingClient(retryingClient, storage, storageCache, logger);
            var remoteConfigInstance = new RemoteConfig(app$1, cachingClient, storageCache, storage, logger);
            // Starts warming cache.
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            ensureInitialized(remoteConfigInstance);
            return remoteConfigInstance;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // This API is put in a separate file, so we can stub fetchConfig and activate in tests.
    // It's not possible to stub standalone functions from the same module.
    /**
     *
     * Performs fetch and activate operations, as a convenience.
     *
     * @param remoteConfig - the remote config instance
     *
     * @returns A promise which resolves to true if the current call activated the fetched configs.
     * If the fetched configs were already activated, the promise will resolve to false.
     *
     * @public
     */
    function fetchAndActivate(remoteConfig) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, fetchConfig(remoteConfig)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, activate(remoteConfig)];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** register component and version */
    registerRemoteConfig();

    exports.activate = activate;
    exports.ensureInitialized = ensureInitialized;
    exports.fetchAndActivate = fetchAndActivate;
    exports.fetchConfig = fetchConfig;
    exports.getAll = getAll;
    exports.getBoolean = getBoolean;
    exports.getNumber = getNumber;
    exports.getRemoteConfig = getRemoteConfig;
    exports.getString = getString;
    exports.getValue = getValue;
    exports.setLogLevel = setLogLevel;

    Object.defineProperty(exports, '__esModule', { value: true });


              }).apply(this, arguments);
            } catch(err) {
                console.error(err);
                throw new Error(
                  'Cannot instantiate firebase-remote-config.js - ' +
                  'be sure to load firebase-app.js first.'
                );
              }

})));


(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@firebase/app')) :
    typeof define === 'function' && define.amd ? define(['exports', '@firebase/app'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.firebase = global.firebase || {}, global.firebase.messaging = global.firebase.messaging || {}), global.firebase.app));
}(this, (function (exports, app) { 'use strict';

    try {
                (function() {

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ERROR_NAME = 'FirebaseError';
    // Based on code from:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
    var FirebaseError = /** @class */ (function (_super) {
        __extends(FirebaseError, _super);
        function FirebaseError(code, message, customData) {
            var _this = _super.call(this, message) || this;
            _this.code = code;
            _this.customData = customData;
            _this.name = ERROR_NAME;
            // Fix For ES5
            // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
            Object.setPrototypeOf(_this, FirebaseError.prototype);
            // Maintains proper stack trace for where our error was thrown.
            // Only available on V8.
            if (Error.captureStackTrace) {
                Error.captureStackTrace(_this, ErrorFactory.prototype.create);
            }
            return _this;
        }
        return FirebaseError;
    }(Error));
    var ErrorFactory = /** @class */ (function () {
        function ErrorFactory(service, serviceName, errors) {
            this.service = service;
            this.serviceName = serviceName;
            this.errors = errors;
        }
        ErrorFactory.prototype.create = function (code) {
            var data = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                data[_i - 1] = arguments[_i];
            }
            var customData = data[0] || {};
            var fullCode = this.service + "/" + code;
            var template = this.errors[code];
            var message = template ? replaceTemplate(template, customData) : 'Error';
            // Service Name: Error message (service/code).
            var fullMessage = this.serviceName + ": " + message + " (" + fullCode + ").";
            var error = new FirebaseError(fullCode, fullMessage, customData);
            return error;
        };
        return ErrorFactory;
    }());
    function replaceTemplate(template, data) {
        return template.replace(PATTERN, function (_, key) {
            var value = data[key];
            return value != null ? String(value) : "<" + key + "?>";
        });
    }
    var PATTERN = /\{\$([^}]+)}/g;

    /**
     * Component for service name T, e.g. `auth`, `auth-internal`
     */
    var Component = /** @class */ (function () {
        /**
         *
         * @param name The public service name, e.g. app, auth, firestore, database
         * @param instanceFactory Service factory responsible for creating the public interface
         * @param type whether the service provided by the component is public or private
         */
        function Component(name, instanceFactory, type) {
            this.name = name;
            this.instanceFactory = instanceFactory;
            this.type = type;
            this.multipleInstances = false;
            /**
             * Properties to be added to the service namespace
             */
            this.serviceProps = {};
            this.instantiationMode = "LAZY" /* LAZY */;
        }
        Component.prototype.setInstantiationMode = function (mode) {
            this.instantiationMode = mode;
            return this;
        };
        Component.prototype.setMultipleInstances = function (multipleInstances) {
            this.multipleInstances = multipleInstances;
            return this;
        };
        Component.prototype.setServiceProps = function (props) {
            this.serviceProps = props;
            return this;
        };
        return Component;
    }());

    function toArray(arr) {
      return Array.prototype.slice.call(arr);
    }

    function promisifyRequest(request) {
      return new Promise(function(resolve, reject) {
        request.onsuccess = function() {
          resolve(request.result);
        };

        request.onerror = function() {
          reject(request.error);
        };
      });
    }

    function promisifyRequestCall(obj, method, args) {
      var request;
      var p = new Promise(function(resolve, reject) {
        request = obj[method].apply(obj, args);
        promisifyRequest(request).then(resolve, reject);
      });

      p.request = request;
      return p;
    }

    function promisifyCursorRequestCall(obj, method, args) {
      var p = promisifyRequestCall(obj, method, args);
      return p.then(function(value) {
        if (!value) return;
        return new Cursor(value, p.request);
      });
    }

    function proxyProperties(ProxyClass, targetProp, properties) {
      properties.forEach(function(prop) {
        Object.defineProperty(ProxyClass.prototype, prop, {
          get: function() {
            return this[targetProp][prop];
          },
          set: function(val) {
            this[targetProp][prop] = val;
          }
        });
      });
    }

    function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {
      properties.forEach(function(prop) {
        if (!(prop in Constructor.prototype)) return;
        ProxyClass.prototype[prop] = function() {
          return promisifyRequestCall(this[targetProp], prop, arguments);
        };
      });
    }

    function proxyMethods(ProxyClass, targetProp, Constructor, properties) {
      properties.forEach(function(prop) {
        if (!(prop in Constructor.prototype)) return;
        ProxyClass.prototype[prop] = function() {
          return this[targetProp][prop].apply(this[targetProp], arguments);
        };
      });
    }

    function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {
      properties.forEach(function(prop) {
        if (!(prop in Constructor.prototype)) return;
        ProxyClass.prototype[prop] = function() {
          return promisifyCursorRequestCall(this[targetProp], prop, arguments);
        };
      });
    }

    function Index(index) {
      this._index = index;
    }

    proxyProperties(Index, '_index', [
      'name',
      'keyPath',
      'multiEntry',
      'unique'
    ]);

    proxyRequestMethods(Index, '_index', IDBIndex, [
      'get',
      'getKey',
      'getAll',
      'getAllKeys',
      'count'
    ]);

    proxyCursorRequestMethods(Index, '_index', IDBIndex, [
      'openCursor',
      'openKeyCursor'
    ]);

    function Cursor(cursor, request) {
      this._cursor = cursor;
      this._request = request;
    }

    proxyProperties(Cursor, '_cursor', [
      'direction',
      'key',
      'primaryKey',
      'value'
    ]);

    proxyRequestMethods(Cursor, '_cursor', IDBCursor, [
      'update',
      'delete'
    ]);

    // proxy 'next' methods
    ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {
      if (!(methodName in IDBCursor.prototype)) return;
      Cursor.prototype[methodName] = function() {
        var cursor = this;
        var args = arguments;
        return Promise.resolve().then(function() {
          cursor._cursor[methodName].apply(cursor._cursor, args);
          return promisifyRequest(cursor._request).then(function(value) {
            if (!value) return;
            return new Cursor(value, cursor._request);
          });
        });
      };
    });

    function ObjectStore(store) {
      this._store = store;
    }

    ObjectStore.prototype.createIndex = function() {
      return new Index(this._store.createIndex.apply(this._store, arguments));
    };

    ObjectStore.prototype.index = function() {
      return new Index(this._store.index.apply(this._store, arguments));
    };

    proxyProperties(ObjectStore, '_store', [
      'name',
      'keyPath',
      'indexNames',
      'autoIncrement'
    ]);

    proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [
      'put',
      'add',
      'delete',
      'clear',
      'get',
      'getAll',
      'getKey',
      'getAllKeys',
      'count'
    ]);

    proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [
      'openCursor',
      'openKeyCursor'
    ]);

    proxyMethods(ObjectStore, '_store', IDBObjectStore, [
      'deleteIndex'
    ]);

    function Transaction(idbTransaction) {
      this._tx = idbTransaction;
      this.complete = new Promise(function(resolve, reject) {
        idbTransaction.oncomplete = function() {
          resolve();
        };
        idbTransaction.onerror = function() {
          reject(idbTransaction.error);
        };
        idbTransaction.onabort = function() {
          reject(idbTransaction.error);
        };
      });
    }

    Transaction.prototype.objectStore = function() {
      return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));
    };

    proxyProperties(Transaction, '_tx', [
      'objectStoreNames',
      'mode'
    ]);

    proxyMethods(Transaction, '_tx', IDBTransaction, [
      'abort'
    ]);

    function UpgradeDB(db, oldVersion, transaction) {
      this._db = db;
      this.oldVersion = oldVersion;
      this.transaction = new Transaction(transaction);
    }

    UpgradeDB.prototype.createObjectStore = function() {
      return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));
    };

    proxyProperties(UpgradeDB, '_db', [
      'name',
      'version',
      'objectStoreNames'
    ]);

    proxyMethods(UpgradeDB, '_db', IDBDatabase, [
      'deleteObjectStore',
      'close'
    ]);

    function DB(db) {
      this._db = db;
    }

    DB.prototype.transaction = function() {
      return new Transaction(this._db.transaction.apply(this._db, arguments));
    };

    proxyProperties(DB, '_db', [
      'name',
      'version',
      'objectStoreNames'
    ]);

    proxyMethods(DB, '_db', IDBDatabase, [
      'close'
    ]);

    // Add cursor iterators
    // TODO: remove this once browsers do the right thing with promises
    ['openCursor', 'openKeyCursor'].forEach(function(funcName) {
      [ObjectStore, Index].forEach(function(Constructor) {
        // Don't create iterateKeyCursor if openKeyCursor doesn't exist.
        if (!(funcName in Constructor.prototype)) return;

        Constructor.prototype[funcName.replace('open', 'iterate')] = function() {
          var args = toArray(arguments);
          var callback = args[args.length - 1];
          var nativeObject = this._store || this._index;
          var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));
          request.onsuccess = function() {
            callback(request.result);
          };
        };
      });
    });

    // polyfill getAll
    [Index, ObjectStore].forEach(function(Constructor) {
      if (Constructor.prototype.getAll) return;
      Constructor.prototype.getAll = function(query, count) {
        var instance = this;
        var items = [];

        return new Promise(function(resolve) {
          instance.iterateCursor(query, function(cursor) {
            if (!cursor) {
              resolve(items);
              return;
            }
            items.push(cursor.value);

            if (count !== undefined && items.length == count) {
              resolve(items);
              return;
            }
            cursor.continue();
          });
        });
      };
    });

    function openDb(name, version, upgradeCallback) {
      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);
      var request = p.request;

      if (request) {
        request.onupgradeneeded = function(event) {
          if (upgradeCallback) {
            upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));
          }
        };
      }

      return p.then(function(db) {
        return new DB(db);
      });
    }

    function deleteDb(name) {
      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);
    }

    var name = "@firebase/installations-exp";
    var version = "0.0.900";

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var PENDING_TIMEOUT_MS = 10000;
    var PACKAGE_VERSION = "w:" + version;
    var INTERNAL_AUTH_VERSION = 'FIS_v2';
    var INSTALLATIONS_API_URL = 'https://firebaseinstallations.googleapis.com/v1';
    var TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour
    var SERVICE = 'installations';
    var SERVICE_NAME = 'Installations';

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a;
    var ERROR_DESCRIPTION_MAP = (_a = {},
        _a["missing-app-config-values" /* MISSING_APP_CONFIG_VALUES */] = 'Missing App configuration value: "{$valueName}"',
        _a["not-registered" /* NOT_REGISTERED */] = 'Firebase Installation is not registered.',
        _a["installation-not-found" /* INSTALLATION_NOT_FOUND */] = 'Firebase Installation not found.',
        _a["request-failed" /* REQUEST_FAILED */] = '{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"',
        _a["app-offline" /* APP_OFFLINE */] = 'Could not process request. Application offline.',
        _a["delete-pending-registration" /* DELETE_PENDING_REGISTRATION */] = "Can't delete installation while there is a pending registration request.",
        _a);
    var ERROR_FACTORY = new ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);
    /** Returns true if error is a FirebaseError that is based on an error from the server. */
    function isServerError(error) {
        return (error instanceof FirebaseError &&
            error.code.includes("request-failed" /* REQUEST_FAILED */));
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function getInstallationsEndpoint(_a) {
        var projectId = _a.projectId;
        return INSTALLATIONS_API_URL + "/projects/" + projectId + "/installations";
    }
    function extractAuthTokenInfoFromResponse(response) {
        return {
            token: response.token,
            requestStatus: 2 /* COMPLETED */,
            expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),
            creationTime: Date.now()
        };
    }
    function getErrorFromResponse(requestName, response) {
        return __awaiter(this, void 0, void 0, function () {
            var responseJson, errorData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, response.json()];
                    case 1:
                        responseJson = _a.sent();
                        errorData = responseJson.error;
                        return [2 /*return*/, ERROR_FACTORY.create("request-failed" /* REQUEST_FAILED */, {
                                requestName: requestName,
                                serverCode: errorData.code,
                                serverMessage: errorData.message,
                                serverStatus: errorData.status
                            })];
                }
            });
        });
    }
    function getHeaders(_a) {
        var apiKey = _a.apiKey;
        return new Headers({
            'Content-Type': 'application/json',
            Accept: 'application/json',
            'x-goog-api-key': apiKey
        });
    }
    function getHeadersWithAuth(appConfig, _a) {
        var refreshToken = _a.refreshToken;
        var headers = getHeaders(appConfig);
        headers.append('Authorization', getAuthorizationHeader(refreshToken));
        return headers;
    }
    /**
     * Calls the passed in fetch wrapper and returns the response.
     * If the returned response has a status of 5xx, re-runs the function once and
     * returns the response.
     */
    function retryIfServerError(fn) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, fn()];
                    case 1:
                        result = _a.sent();
                        if (result.status >= 500 && result.status < 600) {
                            // Internal Server Error. Retry request.
                            return [2 /*return*/, fn()];
                        }
                        return [2 /*return*/, result];
                }
            });
        });
    }
    function getExpiresInFromResponseExpiresIn(responseExpiresIn) {
        // This works because the server will never respond with fractions of a second.
        return Number(responseExpiresIn.replace('s', '000'));
    }
    function getAuthorizationHeader(refreshToken) {
        return INTERNAL_AUTH_VERSION + " " + refreshToken;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function createInstallationRequest(appConfig, _a) {
        var fid = _a.fid;
        return __awaiter(this, void 0, void 0, function () {
            var endpoint, headers, body, request, response, responseValue, registeredInstallationEntry;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        endpoint = getInstallationsEndpoint(appConfig);
                        headers = getHeaders(appConfig);
                        body = {
                            fid: fid,
                            authVersion: INTERNAL_AUTH_VERSION,
                            appId: appConfig.appId,
                            sdkVersion: PACKAGE_VERSION
                        };
                        request = {
                            method: 'POST',
                            headers: headers,
                            body: JSON.stringify(body)
                        };
                        return [4 /*yield*/, retryIfServerError(function () { return fetch(endpoint, request); })];
                    case 1:
                        response = _b.sent();
                        if (!response.ok) return [3 /*break*/, 3];
                        return [4 /*yield*/, response.json()];
                    case 2:
                        responseValue = _b.sent();
                        registeredInstallationEntry = {
                            fid: responseValue.fid || fid,
                            registrationStatus: 2 /* COMPLETED */,
                            refreshToken: responseValue.refreshToken,
                            authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)
                        };
                        return [2 /*return*/, registeredInstallationEntry];
                    case 3: return [4 /*yield*/, getErrorFromResponse('Create Installation', response)];
                    case 4: throw _b.sent();
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Returns a promise that resolves after given time passes. */
    function sleep(ms) {
        return new Promise(function (resolve) {
            setTimeout(resolve, ms);
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function bufferToBase64UrlSafe(array) {
        var b64 = btoa(String.fromCharCode.apply(String, __spread(array)));
        return b64.replace(/\+/g, '-').replace(/\//g, '_');
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var VALID_FID_PATTERN = /^[cdef][\w-]{21}$/;
    var INVALID_FID = '';
    /**
     * Generates a new FID using random values from Web Crypto API.
     * Returns an empty string if FID generation fails for any reason.
     */
    function generateFid() {
        try {
            // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5
            // bytes. our implementation generates a 17 byte array instead.
            var fidByteArray = new Uint8Array(17);
            var crypto_1 = self.crypto || self.msCrypto;
            crypto_1.getRandomValues(fidByteArray);
            // Replace the first 4 random bits with the constant FID header of 0b0111.
            fidByteArray[0] = 112 + (fidByteArray[0] % 16);
            var fid = encode(fidByteArray);
            return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;
        }
        catch (_a) {
            // FID generation errored
            return INVALID_FID;
        }
    }
    /** Converts a FID Uint8Array to a base64 string representation. */
    function encode(fidByteArray) {
        var b64String = bufferToBase64UrlSafe(fidByteArray);
        // Remove the 23rd character that was added because of the extra 4 bits at the
        // end of our 17 byte array, and the '=' padding.
        return b64String.substr(0, 22);
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Returns a string key that can be used to identify the app. */
    function getKey(appConfig) {
        return appConfig.appName + "!" + appConfig.appId;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var fidChangeCallbacks = new Map();
    /**
     * Calls the onIdChange callbacks with the new FID value, and broadcasts the
     * change to other tabs.
     */
    function fidChanged(appConfig, fid) {
        var key = getKey(appConfig);
        callFidChangeCallbacks(key, fid);
        broadcastFidChange(key, fid);
    }
    function callFidChangeCallbacks(key, fid) {
        var e_1, _a;
        var callbacks = fidChangeCallbacks.get(key);
        if (!callbacks) {
            return;
        }
        try {
            for (var callbacks_1 = __values(callbacks), callbacks_1_1 = callbacks_1.next(); !callbacks_1_1.done; callbacks_1_1 = callbacks_1.next()) {
                var callback = callbacks_1_1.value;
                callback(fid);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (callbacks_1_1 && !callbacks_1_1.done && (_a = callbacks_1.return)) _a.call(callbacks_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    function broadcastFidChange(key, fid) {
        var channel = getBroadcastChannel();
        if (channel) {
            channel.postMessage({ key: key, fid: fid });
        }
        closeBroadcastChannel();
    }
    var broadcastChannel = null;
    /** Opens and returns a BroadcastChannel if it is supported by the browser. */
    function getBroadcastChannel() {
        if (!broadcastChannel && 'BroadcastChannel' in self) {
            broadcastChannel = new BroadcastChannel('[Firebase] FID Change');
            broadcastChannel.onmessage = function (e) {
                callFidChangeCallbacks(e.data.key, e.data.fid);
            };
        }
        return broadcastChannel;
    }
    function closeBroadcastChannel() {
        if (fidChangeCallbacks.size === 0 && broadcastChannel) {
            broadcastChannel.close();
            broadcastChannel = null;
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DATABASE_NAME = 'firebase-installations-database';
    var DATABASE_VERSION = 1;
    var OBJECT_STORE_NAME = 'firebase-installations-store';
    var dbPromise = null;
    function getDbPromise() {
        if (!dbPromise) {
            dbPromise = openDb(DATABASE_NAME, DATABASE_VERSION, function (upgradeDB) {
                // We don't use 'break' in this switch statement, the fall-through
                // behavior is what we want, because if there are multiple versions between
                // the old version and the current version, we want ALL the migrations
                // that correspond to those versions to run, not only the last one.
                // eslint-disable-next-line default-case
                switch (upgradeDB.oldVersion) {
                    case 0:
                        upgradeDB.createObjectStore(OBJECT_STORE_NAME);
                }
            });
        }
        return dbPromise;
    }
    /** Assigns or overwrites the record for the given key with the given value. */
    function set(appConfig, value) {
        return __awaiter(this, void 0, void 0, function () {
            var key, db, tx, objectStore, oldValue;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = getKey(appConfig);
                        return [4 /*yield*/, getDbPromise()];
                    case 1:
                        db = _a.sent();
                        tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
                        objectStore = tx.objectStore(OBJECT_STORE_NAME);
                        return [4 /*yield*/, objectStore.get(key)];
                    case 2:
                        oldValue = _a.sent();
                        return [4 /*yield*/, objectStore.put(value, key)];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, tx.complete];
                    case 4:
                        _a.sent();
                        if (!oldValue || oldValue.fid !== value.fid) {
                            fidChanged(appConfig, value.fid);
                        }
                        return [2 /*return*/, value];
                }
            });
        });
    }
    /** Removes record(s) from the objectStore that match the given key. */
    function remove(appConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var key, db, tx;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = getKey(appConfig);
                        return [4 /*yield*/, getDbPromise()];
                    case 1:
                        db = _a.sent();
                        tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
                        return [4 /*yield*/, tx.objectStore(OBJECT_STORE_NAME).delete(key)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, tx.complete];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    }
    /**
     * Atomically updates a record with the result of updateFn, which gets
     * called with the current value. If newValue is undefined, the record is
     * deleted instead.
     * @return Updated value
     */
    function update(appConfig, updateFn) {
        return __awaiter(this, void 0, void 0, function () {
            var key, db, tx, store, oldValue, newValue;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = getKey(appConfig);
                        return [4 /*yield*/, getDbPromise()];
                    case 1:
                        db = _a.sent();
                        tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
                        store = tx.objectStore(OBJECT_STORE_NAME);
                        return [4 /*yield*/, store.get(key)];
                    case 2:
                        oldValue = _a.sent();
                        newValue = updateFn(oldValue);
                        if (!(newValue === undefined)) return [3 /*break*/, 4];
                        return [4 /*yield*/, store.delete(key)];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 4: return [4 /*yield*/, store.put(newValue, key)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [4 /*yield*/, tx.complete];
                    case 7:
                        _a.sent();
                        if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {
                            fidChanged(appConfig, newValue.fid);
                        }
                        return [2 /*return*/, newValue];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Updates and returns the InstallationEntry from the database.
     * Also triggers a registration request if it is necessary and possible.
     */
    function getInstallationEntry(appConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var registrationPromise, installationEntry;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, update(appConfig, function (oldEntry) {
                            var installationEntry = updateOrCreateInstallationEntry(oldEntry);
                            var entryWithPromise = triggerRegistrationIfNecessary(appConfig, installationEntry);
                            registrationPromise = entryWithPromise.registrationPromise;
                            return entryWithPromise.installationEntry;
                        })];
                    case 1:
                        installationEntry = _b.sent();
                        if (!(installationEntry.fid === INVALID_FID)) return [3 /*break*/, 3];
                        _a = {};
                        return [4 /*yield*/, registrationPromise];
                    case 2: 
                    // FID generation failed. Waiting for the FID from the server.
                    return [2 /*return*/, (_a.installationEntry = _b.sent(), _a)];
                    case 3: return [2 /*return*/, {
                            installationEntry: installationEntry,
                            registrationPromise: registrationPromise
                        }];
                }
            });
        });
    }
    /**
     * Creates a new Installation Entry if one does not exist.
     * Also clears timed out pending requests.
     */
    function updateOrCreateInstallationEntry(oldEntry) {
        var entry = oldEntry || {
            fid: generateFid(),
            registrationStatus: 0 /* NOT_STARTED */
        };
        return clearTimedOutRequest(entry);
    }
    /**
     * If the Firebase Installation is not registered yet, this will trigger the
     * registration and return an InProgressInstallationEntry.
     *
     * If registrationPromise does not exist, the installationEntry is guaranteed
     * to be registered.
     */
    function triggerRegistrationIfNecessary(appConfig, installationEntry) {
        if (installationEntry.registrationStatus === 0 /* NOT_STARTED */) {
            if (!navigator.onLine) {
                // Registration required but app is offline.
                var registrationPromiseWithError = Promise.reject(ERROR_FACTORY.create("app-offline" /* APP_OFFLINE */));
                return {
                    installationEntry: installationEntry,
                    registrationPromise: registrationPromiseWithError
                };
            }
            // Try registering. Change status to IN_PROGRESS.
            var inProgressEntry = {
                fid: installationEntry.fid,
                registrationStatus: 1 /* IN_PROGRESS */,
                registrationTime: Date.now()
            };
            var registrationPromise = registerInstallation(appConfig, inProgressEntry);
            return { installationEntry: inProgressEntry, registrationPromise: registrationPromise };
        }
        else if (installationEntry.registrationStatus === 1 /* IN_PROGRESS */) {
            return {
                installationEntry: installationEntry,
                registrationPromise: waitUntilFidRegistration(appConfig)
            };
        }
        else {
            return { installationEntry: installationEntry };
        }
    }
    /** This will be executed only once for each new Firebase Installation. */
    function registerInstallation(appConfig, installationEntry) {
        return __awaiter(this, void 0, void 0, function () {
            var registeredInstallationEntry, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 7]);
                        return [4 /*yield*/, createInstallationRequest(appConfig, installationEntry)];
                    case 1:
                        registeredInstallationEntry = _a.sent();
                        return [2 /*return*/, set(appConfig, registeredInstallationEntry)];
                    case 2:
                        e_1 = _a.sent();
                        if (!(isServerError(e_1) && e_1.customData.serverCode === 409)) return [3 /*break*/, 4];
                        // Server returned a "FID can not be used" error.
                        // Generate a new ID next time.
                        return [4 /*yield*/, remove(appConfig)];
                    case 3:
                        // Server returned a "FID can not be used" error.
                        // Generate a new ID next time.
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 4: 
                    // Registration failed. Set FID as not registered.
                    return [4 /*yield*/, set(appConfig, {
                            fid: installationEntry.fid,
                            registrationStatus: 0 /* NOT_STARTED */
                        })];
                    case 5:
                        // Registration failed. Set FID as not registered.
                        _a.sent();
                        _a.label = 6;
                    case 6: throw e_1;
                    case 7: return [2 /*return*/];
                }
            });
        });
    }
    /** Call if FID registration is pending in another request. */
    function waitUntilFidRegistration(appConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var entry, _a, installationEntry, registrationPromise;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, updateInstallationRequest(appConfig)];
                    case 1:
                        entry = _b.sent();
                        _b.label = 2;
                    case 2:
                        if (!(entry.registrationStatus === 1 /* IN_PROGRESS */)) return [3 /*break*/, 5];
                        // createInstallation request still in progress.
                        return [4 /*yield*/, sleep(100)];
                    case 3:
                        // createInstallation request still in progress.
                        _b.sent();
                        return [4 /*yield*/, updateInstallationRequest(appConfig)];
                    case 4:
                        entry = _b.sent();
                        return [3 /*break*/, 2];
                    case 5:
                        if (!(entry.registrationStatus === 0 /* NOT_STARTED */)) return [3 /*break*/, 7];
                        return [4 /*yield*/, getInstallationEntry(appConfig)];
                    case 6:
                        _a = _b.sent(), installationEntry = _a.installationEntry, registrationPromise = _a.registrationPromise;
                        if (registrationPromise) {
                            return [2 /*return*/, registrationPromise];
                        }
                        else {
                            // if there is no registrationPromise, entry is registered.
                            return [2 /*return*/, installationEntry];
                        }
                    case 7: return [2 /*return*/, entry];
                }
            });
        });
    }
    /**
     * Called only if there is a CreateInstallation request in progress.
     *
     * Updates the InstallationEntry in the DB based on the status of the
     * CreateInstallation request.
     *
     * Returns the updated InstallationEntry.
     */
    function updateInstallationRequest(appConfig) {
        return update(appConfig, function (oldEntry) {
            if (!oldEntry) {
                throw ERROR_FACTORY.create("installation-not-found" /* INSTALLATION_NOT_FOUND */);
            }
            return clearTimedOutRequest(oldEntry);
        });
    }
    function clearTimedOutRequest(entry) {
        if (hasInstallationRequestTimedOut(entry)) {
            return {
                fid: entry.fid,
                registrationStatus: 0 /* NOT_STARTED */
            };
        }
        return entry;
    }
    function hasInstallationRequestTimedOut(installationEntry) {
        return (installationEntry.registrationStatus === 1 /* IN_PROGRESS */ &&
            installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now());
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function generateAuthTokenRequest(_a, installationEntry) {
        var appConfig = _a.appConfig, platformLoggerProvider = _a.platformLoggerProvider;
        return __awaiter(this, void 0, void 0, function () {
            var endpoint, headers, platformLogger, body, request, response, responseValue, completedAuthToken;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);
                        headers = getHeadersWithAuth(appConfig, installationEntry);
                        platformLogger = platformLoggerProvider.getImmediate({
                            optional: true
                        });
                        if (platformLogger) {
                            headers.append('x-firebase-client', platformLogger.getPlatformInfoString());
                        }
                        body = {
                            installation: {
                                sdkVersion: PACKAGE_VERSION
                            }
                        };
                        request = {
                            method: 'POST',
                            headers: headers,
                            body: JSON.stringify(body)
                        };
                        return [4 /*yield*/, retryIfServerError(function () { return fetch(endpoint, request); })];
                    case 1:
                        response = _b.sent();
                        if (!response.ok) return [3 /*break*/, 3];
                        return [4 /*yield*/, response.json()];
                    case 2:
                        responseValue = _b.sent();
                        completedAuthToken = extractAuthTokenInfoFromResponse(responseValue);
                        return [2 /*return*/, completedAuthToken];
                    case 3: return [4 /*yield*/, getErrorFromResponse('Generate Auth Token', response)];
                    case 4: throw _b.sent();
                }
            });
        });
    }
    function getGenerateAuthTokenEndpoint(appConfig, _a) {
        var fid = _a.fid;
        return getInstallationsEndpoint(appConfig) + "/" + fid + "/authTokens:generate";
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns a valid authentication token for the installation. Generates a new
     * token if one doesn't exist, is expired or about to expire.
     *
     * Should only be called if the Firebase Installation is registered.
     */
    function refreshAuthToken(installations, forceRefresh) {
        if (forceRefresh === void 0) { forceRefresh = false; }
        return __awaiter(this, void 0, void 0, function () {
            var tokenPromise, entry, authToken, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, update(installations.appConfig, function (oldEntry) {
                            if (!isEntryRegistered(oldEntry)) {
                                throw ERROR_FACTORY.create("not-registered" /* NOT_REGISTERED */);
                            }
                            var oldAuthToken = oldEntry.authToken;
                            if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {
                                // There is a valid token in the DB.
                                return oldEntry;
                            }
                            else if (oldAuthToken.requestStatus === 1 /* IN_PROGRESS */) {
                                // There already is a token request in progress.
                                tokenPromise = waitUntilAuthTokenRequest(installations, forceRefresh);
                                return oldEntry;
                            }
                            else {
                                // No token or token expired.
                                if (!navigator.onLine) {
                                    throw ERROR_FACTORY.create("app-offline" /* APP_OFFLINE */);
                                }
                                var inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);
                                tokenPromise = fetchAuthTokenFromServer(installations, inProgressEntry);
                                return inProgressEntry;
                            }
                        })];
                    case 1:
                        entry = _b.sent();
                        if (!tokenPromise) return [3 /*break*/, 3];
                        return [4 /*yield*/, tokenPromise];
                    case 2:
                        _a = _b.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        _a = entry.authToken;
                        _b.label = 4;
                    case 4:
                        authToken = _a;
                        return [2 /*return*/, authToken];
                }
            });
        });
    }
    /**
     * Call only if FID is registered and Auth Token request is in progress.
     *
     * Waits until the current pending request finishes. If the request times out,
     * tries once in this thread as well.
     */
    function waitUntilAuthTokenRequest(installations, forceRefresh) {
        return __awaiter(this, void 0, void 0, function () {
            var entry, authToken;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, updateAuthTokenRequest(installations.appConfig)];
                    case 1:
                        entry = _a.sent();
                        _a.label = 2;
                    case 2:
                        if (!(entry.authToken.requestStatus === 1 /* IN_PROGRESS */)) return [3 /*break*/, 5];
                        // generateAuthToken still in progress.
                        return [4 /*yield*/, sleep(100)];
                    case 3:
                        // generateAuthToken still in progress.
                        _a.sent();
                        return [4 /*yield*/, updateAuthTokenRequest(installations.appConfig)];
                    case 4:
                        entry = _a.sent();
                        return [3 /*break*/, 2];
                    case 5:
                        authToken = entry.authToken;
                        if (authToken.requestStatus === 0 /* NOT_STARTED */) {
                            // The request timed out or failed in a different call. Try again.
                            return [2 /*return*/, refreshAuthToken(installations, forceRefresh)];
                        }
                        else {
                            return [2 /*return*/, authToken];
                        }
                }
            });
        });
    }
    /**
     * Called only if there is a GenerateAuthToken request in progress.
     *
     * Updates the InstallationEntry in the DB based on the status of the
     * GenerateAuthToken request.
     *
     * Returns the updated InstallationEntry.
     */
    function updateAuthTokenRequest(appConfig) {
        return update(appConfig, function (oldEntry) {
            if (!isEntryRegistered(oldEntry)) {
                throw ERROR_FACTORY.create("not-registered" /* NOT_REGISTERED */);
            }
            var oldAuthToken = oldEntry.authToken;
            if (hasAuthTokenRequestTimedOut(oldAuthToken)) {
                return __assign(__assign({}, oldEntry), { authToken: { requestStatus: 0 /* NOT_STARTED */ } });
            }
            return oldEntry;
        });
    }
    function fetchAuthTokenFromServer(installations, installationEntry) {
        return __awaiter(this, void 0, void 0, function () {
            var authToken, updatedInstallationEntry, e_1, updatedInstallationEntry;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 8]);
                        return [4 /*yield*/, generateAuthTokenRequest(installations, installationEntry)];
                    case 1:
                        authToken = _a.sent();
                        updatedInstallationEntry = __assign(__assign({}, installationEntry), { authToken: authToken });
                        return [4 /*yield*/, set(installations.appConfig, updatedInstallationEntry)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, authToken];
                    case 3:
                        e_1 = _a.sent();
                        if (!(isServerError(e_1) &&
                            (e_1.customData.serverCode === 401 || e_1.customData.serverCode === 404))) return [3 /*break*/, 5];
                        // Server returned a "FID not found" or a "Invalid authentication" error.
                        // Generate a new ID next time.
                        return [4 /*yield*/, remove(installations.appConfig)];
                    case 4:
                        // Server returned a "FID not found" or a "Invalid authentication" error.
                        // Generate a new ID next time.
                        _a.sent();
                        return [3 /*break*/, 7];
                    case 5:
                        updatedInstallationEntry = __assign(__assign({}, installationEntry), { authToken: { requestStatus: 0 /* NOT_STARTED */ } });
                        return [4 /*yield*/, set(installations.appConfig, updatedInstallationEntry)];
                    case 6:
                        _a.sent();
                        _a.label = 7;
                    case 7: throw e_1;
                    case 8: return [2 /*return*/];
                }
            });
        });
    }
    function isEntryRegistered(installationEntry) {
        return (installationEntry !== undefined &&
            installationEntry.registrationStatus === 2 /* COMPLETED */);
    }
    function isAuthTokenValid(authToken) {
        return (authToken.requestStatus === 2 /* COMPLETED */ &&
            !isAuthTokenExpired(authToken));
    }
    function isAuthTokenExpired(authToken) {
        var now = Date.now();
        return (now < authToken.creationTime ||
            authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER);
    }
    /** Returns an updated InstallationEntry with an InProgressAuthToken. */
    function makeAuthTokenRequestInProgressEntry(oldEntry) {
        var inProgressAuthToken = {
            requestStatus: 1 /* IN_PROGRESS */,
            requestTime: Date.now()
        };
        return __assign(__assign({}, oldEntry), { authToken: inProgressAuthToken });
    }
    function hasAuthTokenRequestTimedOut(authToken) {
        return (authToken.requestStatus === 1 /* IN_PROGRESS */ &&
            authToken.requestTime + PENDING_TIMEOUT_MS < Date.now());
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Creates a Firebase Installation if there isn't one for the app and
     * returns the Installation ID.
     *
     * @public
     */
    function getId(installations) {
        return __awaiter(this, void 0, void 0, function () {
            var installationsImpl, _a, installationEntry, registrationPromise;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        installationsImpl = installations;
                        return [4 /*yield*/, getInstallationEntry(installationsImpl.appConfig)];
                    case 1:
                        _a = _b.sent(), installationEntry = _a.installationEntry, registrationPromise = _a.registrationPromise;
                        if (registrationPromise) {
                            registrationPromise.catch(console.error);
                        }
                        else {
                            // If the installation is already registered, update the authentication
                            // token if needed.
                            refreshAuthToken(installationsImpl).catch(console.error);
                        }
                        return [2 /*return*/, installationEntry.fid];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns an Installation auth token, identifying the current Firebase Installation.
     *
     * @public
     */
    function getToken(installations, forceRefresh) {
        if (forceRefresh === void 0) { forceRefresh = false; }
        return __awaiter(this, void 0, void 0, function () {
            var installationsImpl, authToken;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        installationsImpl = installations;
                        return [4 /*yield*/, completeInstallationRegistration(installationsImpl.appConfig)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, refreshAuthToken(installationsImpl, forceRefresh)];
                    case 2:
                        authToken = _a.sent();
                        return [2 /*return*/, authToken.token];
                }
            });
        });
    }
    function completeInstallationRegistration(appConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var registrationPromise;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, getInstallationEntry(appConfig)];
                    case 1:
                        registrationPromise = (_a.sent()).registrationPromise;
                        if (!registrationPromise) return [3 /*break*/, 3];
                        // A createInstallation request is in progress. Wait until it finishes.
                        return [4 /*yield*/, registrationPromise];
                    case 2:
                        // A createInstallation request is in progress. Wait until it finishes.
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function extractAppConfig(app) {
        var e_1, _a;
        if (!app || !app.options) {
            throw getMissingValueError('App Configuration');
        }
        if (!app.name) {
            throw getMissingValueError('App Name');
        }
        // Required app config keys
        var configKeys = [
            'projectId',
            'apiKey',
            'appId'
        ];
        try {
            for (var configKeys_1 = __values(configKeys), configKeys_1_1 = configKeys_1.next(); !configKeys_1_1.done; configKeys_1_1 = configKeys_1.next()) {
                var keyName = configKeys_1_1.value;
                if (!app.options[keyName]) {
                    throw getMissingValueError(keyName);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (configKeys_1_1 && !configKeys_1_1.done && (_a = configKeys_1.return)) _a.call(configKeys_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return {
            appName: app.name,
            projectId: app.options.projectId,
            apiKey: app.options.apiKey,
            appId: app.options.appId
        };
    }
    function getMissingValueError(valueName) {
        return ERROR_FACTORY.create("missing-app-config-values" /* MISSING_APP_CONFIG_VALUES */, {
            valueName: valueName
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var INSTALLATIONS_NAME = 'installations-exp';
    var INSTALLATIONS_NAME_INTERNAL = 'installations-exp-internal';
    var publicFactory = function (container) {
        var app$1 = container.getProvider('app-exp').getImmediate();
        // Throws if app isn't configured properly.
        var appConfig = extractAppConfig(app$1);
        var platformLoggerProvider = app._getProvider(app$1, 'platform-logger');
        var installationsImpl = {
            app: app$1,
            appConfig: appConfig,
            platformLoggerProvider: platformLoggerProvider,
            _delete: function () { return Promise.resolve(); }
        };
        return installationsImpl;
    };
    var internalFactory = function (container) {
        var app$1 = container.getProvider('app-exp').getImmediate();
        // Internal FIS instance relies on public FIS instance.
        var installations = app._getProvider(app$1, INSTALLATIONS_NAME).getImmediate();
        var installationsInternal = {
            getId: function () { return getId(installations); },
            getToken: function (forceRefresh) { return getToken(installations, forceRefresh); }
        };
        return installationsInternal;
    };
    function registerInstallations() {
        app._registerComponent(new Component(INSTALLATIONS_NAME, publicFactory, "PUBLIC" /* PUBLIC */));
        app._registerComponent(new Component(INSTALLATIONS_NAME_INTERNAL, internalFactory, "PRIVATE" /* PRIVATE */));
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    registerInstallations();
    app.registerVersion(name, version);

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a$1;
    var ERROR_MAP = (_a$1 = {},
        _a$1["missing-app-config-values" /* MISSING_APP_CONFIG_VALUES */] = 'Missing App configuration value: "{$valueName}"',
        _a$1["only-available-in-window" /* AVAILABLE_IN_WINDOW */] = 'This method is available in a Window context.',
        _a$1["only-available-in-sw" /* AVAILABLE_IN_SW */] = 'This method is available in a service worker context.',
        _a$1["permission-default" /* PERMISSION_DEFAULT */] = 'The notification permission was not granted and dismissed instead.',
        _a$1["permission-blocked" /* PERMISSION_BLOCKED */] = 'The notification permission was not granted and blocked instead.',
        _a$1["unsupported-browser" /* UNSUPPORTED_BROWSER */] = "This browser doesn't support the API's required to use the firebase SDK.",
        _a$1["failed-service-worker-registration" /* FAILED_DEFAULT_REGISTRATION */] = 'We are unable to register the default service worker. {$browserErrorMessage}',
        _a$1["token-subscribe-failed" /* TOKEN_SUBSCRIBE_FAILED */] = 'A problem occurred while subscribing the user to FCM: {$errorInfo}',
        _a$1["token-subscribe-no-token" /* TOKEN_SUBSCRIBE_NO_TOKEN */] = 'FCM returned no token when subscribing the user to push.',
        _a$1["token-unsubscribe-failed" /* TOKEN_UNSUBSCRIBE_FAILED */] = 'A problem occurred while unsubscribing the ' +
            'user from FCM: {$errorInfo}',
        _a$1["token-update-failed" /* TOKEN_UPDATE_FAILED */] = 'A problem occurred while updating the user from FCM: {$errorInfo}',
        _a$1["token-update-no-token" /* TOKEN_UPDATE_NO_TOKEN */] = 'FCM returned no token when updating the user to push.',
        _a$1["use-sw-after-get-token" /* USE_SW_AFTER_GET_TOKEN */] = 'The useServiceWorker() method may only be called once and must be ' +
            'called before calling getToken() to ensure your service worker is used.',
        _a$1["invalid-sw-registration" /* INVALID_SW_REGISTRATION */] = 'The input to useServiceWorker() must be a ServiceWorkerRegistration.',
        _a$1["invalid-bg-handler" /* INVALID_BG_HANDLER */] = 'The input to setBackgroundMessageHandler() must be a function.',
        _a$1["invalid-vapid-key" /* INVALID_VAPID_KEY */] = 'The public VAPID key must be a string.',
        _a$1["use-vapid-key-after-get-token" /* USE_VAPID_KEY_AFTER_GET_TOKEN */] = 'The usePublicVapidKey() method may only be called once and must be ' +
            'called before calling getToken() to ensure your VAPID key is used.',
        _a$1);
    var ERROR_FACTORY$1 = new ErrorFactory('messaging', 'Messaging', ERROR_MAP);

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function extractAppConfig$1(app) {
        var e_1, _a;
        if (!app || !app.options) {
            throw getMissingValueError$1('App Configuration Object');
        }
        if (!app.name) {
            throw getMissingValueError$1('App Name');
        }
        // Required app config keys
        var configKeys = [
            'projectId',
            'apiKey',
            'appId',
            'messagingSenderId'
        ];
        var options = app.options;
        try {
            for (var configKeys_1 = __values(configKeys), configKeys_1_1 = configKeys_1.next(); !configKeys_1_1.done; configKeys_1_1 = configKeys_1.next()) {
                var keyName = configKeys_1_1.value;
                if (!options[keyName]) {
                    throw getMissingValueError$1(keyName);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (configKeys_1_1 && !configKeys_1_1.done && (_a = configKeys_1.return)) _a.call(configKeys_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return {
            appName: app.name,
            projectId: options.projectId,
            apiKey: options.apiKey,
            appId: options.appId,
            senderId: options.messagingSenderId
        };
    }
    function getMissingValueError$1(valueName) {
        return ERROR_FACTORY$1.create("missing-app-config-values" /* MISSING_APP_CONFIG_VALUES */, {
            valueName: valueName
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var MessagingService = /** @class */ (function () {
        function MessagingService(app, installations, analyticsProvider) {
            this.onBackgroundMessageHandler = null;
            this.onMessageHandler = null;
            var appConfig = extractAppConfig$1(app);
            this.firebaseDependencies = {
                app: app,
                appConfig: appConfig,
                installations: installations,
                analyticsProvider: analyticsProvider
            };
        }
        MessagingService.prototype._delete = function () {
            return this.deleteService();
        };
        return MessagingService;
    }());

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function isSupported() {
        if (self && 'ServiceWorkerGlobalScope' in self) {
            // Running in ServiceWorker context
            return isSWControllerSupported();
        }
        else {
            // Assume we are in the window context.
            return isWindowControllerSupported();
        }
    }
    /**
     * Checks to see if the required APIs exist.
     */
    function isWindowControllerSupported() {
        return ('indexedDB' in window &&
            indexedDB !== null &&
            navigator.cookieEnabled &&
            'serviceWorker' in navigator &&
            'PushManager' in window &&
            'Notification' in window &&
            'fetch' in window &&
            ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&
            PushSubscription.prototype.hasOwnProperty('getKey'));
    }
    /**
     * Checks to see if the required APIs exist within SW Context.
     */
    function isSWControllerSupported() {
        return ('indexedDB' in self &&
            indexedDB !== null &&
            'PushManager' in self &&
            'Notification' in self &&
            ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&
            PushSubscription.prototype.hasOwnProperty('getKey'));
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var messagingFactory = function (container) {
        if (!isSupported()) {
            throw ERROR_FACTORY$1.create("unsupported-browser" /* UNSUPPORTED_BROWSER */);
        }
        return new MessagingService(container.getProvider('app-exp').getImmediate(), container.getProvider('installations-exp-internal').getImmediate(), container.getProvider('analytics-internal'));
    };
    function registerMessaging() {
        app._registerComponent(new Component('messaging-exp', messagingFactory, "PUBLIC" /* PUBLIC */));
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function arrayToBase64(array) {
        var uint8Array = new Uint8Array(array);
        var base64String = btoa(String.fromCharCode.apply(String, __spread(uint8Array)));
        return base64String.replace(/=/g, '').replace(/\+/g, '-').replace(/\//g, '_');
    }
    function base64ToArray(base64String) {
        var padding = '='.repeat((4 - (base64String.length % 4)) % 4);
        var base64 = (base64String + padding)
            .replace(/\-/g, '+')
            .replace(/_/g, '/');
        var rawData = atob(base64);
        var outputArray = new Uint8Array(rawData.length);
        for (var i = 0; i < rawData.length; ++i) {
            outputArray[i] = rawData.charCodeAt(i);
        }
        return outputArray;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var OLD_DB_NAME = 'fcm_token_details_db';
    /**
     * The last DB version of 'fcm_token_details_db' was 4. This is one higher, so that the upgrade
     * callback is called for all versions of the old DB.
     */
    var OLD_DB_VERSION = 5;
    var OLD_OBJECT_STORE_NAME = 'fcm_token_object_Store';
    function migrateOldDatabase(senderId) {
        return __awaiter(this, void 0, void 0, function () {
            var databases, dbNames, tokenDetails, db;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!('databases' in indexedDB)) return [3 /*break*/, 2];
                        return [4 /*yield*/, indexedDB.databases()];
                    case 1:
                        databases = _a.sent();
                        dbNames = databases.map(function (db) { return db.name; });
                        if (!dbNames.includes(OLD_DB_NAME)) {
                            // old DB didn't exist, no need to open.
                            return [2 /*return*/, null];
                        }
                        _a.label = 2;
                    case 2:
                        tokenDetails = null;
                        return [4 /*yield*/, openDb(OLD_DB_NAME, OLD_DB_VERSION, function (db) { return __awaiter(_this, void 0, void 0, function () {
                                var objectStore, value, oldDetails, oldDetails, oldDetails;
                                var _a;
                                return __generator(this, function (_b) {
                                    switch (_b.label) {
                                        case 0:
                                            if (db.oldVersion < 2) {
                                                // Database too old, skip migration.
                                                return [2 /*return*/];
                                            }
                                            if (!db.objectStoreNames.contains(OLD_OBJECT_STORE_NAME)) {
                                                // Database did not exist. Nothing to do.
                                                return [2 /*return*/];
                                            }
                                            objectStore = db.transaction.objectStore(OLD_OBJECT_STORE_NAME);
                                            return [4 /*yield*/, objectStore.index('fcmSenderId').get(senderId)];
                                        case 1:
                                            value = _b.sent();
                                            return [4 /*yield*/, objectStore.clear()];
                                        case 2:
                                            _b.sent();
                                            if (!value) {
                                                // No entry in the database, nothing to migrate.
                                                return [2 /*return*/];
                                            }
                                            if (db.oldVersion === 2) {
                                                oldDetails = value;
                                                if (!oldDetails.auth || !oldDetails.p256dh || !oldDetails.endpoint) {
                                                    return [2 /*return*/];
                                                }
                                                tokenDetails = {
                                                    token: oldDetails.fcmToken,
                                                    createTime: (_a = oldDetails.createTime) !== null && _a !== void 0 ? _a : Date.now(),
                                                    subscriptionOptions: {
                                                        auth: oldDetails.auth,
                                                        p256dh: oldDetails.p256dh,
                                                        endpoint: oldDetails.endpoint,
                                                        swScope: oldDetails.swScope,
                                                        vapidKey: typeof oldDetails.vapidKey === 'string'
                                                            ? oldDetails.vapidKey
                                                            : arrayToBase64(oldDetails.vapidKey)
                                                    }
                                                };
                                            }
                                            else if (db.oldVersion === 3) {
                                                oldDetails = value;
                                                tokenDetails = {
                                                    token: oldDetails.fcmToken,
                                                    createTime: oldDetails.createTime,
                                                    subscriptionOptions: {
                                                        auth: arrayToBase64(oldDetails.auth),
                                                        p256dh: arrayToBase64(oldDetails.p256dh),
                                                        endpoint: oldDetails.endpoint,
                                                        swScope: oldDetails.swScope,
                                                        vapidKey: arrayToBase64(oldDetails.vapidKey)
                                                    }
                                                };
                                            }
                                            else if (db.oldVersion === 4) {
                                                oldDetails = value;
                                                tokenDetails = {
                                                    token: oldDetails.fcmToken,
                                                    createTime: oldDetails.createTime,
                                                    subscriptionOptions: {
                                                        auth: arrayToBase64(oldDetails.auth),
                                                        p256dh: arrayToBase64(oldDetails.p256dh),
                                                        endpoint: oldDetails.endpoint,
                                                        swScope: oldDetails.swScope,
                                                        vapidKey: arrayToBase64(oldDetails.vapidKey)
                                                    }
                                                };
                                            }
                                            return [2 /*return*/];
                                    }
                                });
                            }); })];
                    case 3:
                        db = _a.sent();
                        db.close();
                        // Delete all old databases.
                        return [4 /*yield*/, deleteDb(OLD_DB_NAME)];
                    case 4:
                        // Delete all old databases.
                        _a.sent();
                        return [4 /*yield*/, deleteDb('fcm_vapid_details_db')];
                    case 5:
                        _a.sent();
                        return [4 /*yield*/, deleteDb('undefined')];
                    case 6:
                        _a.sent();
                        return [2 /*return*/, checkTokenDetails(tokenDetails) ? tokenDetails : null];
                }
            });
        });
    }
    function checkTokenDetails(tokenDetails) {
        if (!tokenDetails || !tokenDetails.subscriptionOptions) {
            return false;
        }
        var subscriptionOptions = tokenDetails.subscriptionOptions;
        return (typeof tokenDetails.createTime === 'number' &&
            tokenDetails.createTime > 0 &&
            typeof tokenDetails.token === 'string' &&
            tokenDetails.token.length > 0 &&
            typeof subscriptionOptions.auth === 'string' &&
            subscriptionOptions.auth.length > 0 &&
            typeof subscriptionOptions.p256dh === 'string' &&
            subscriptionOptions.p256dh.length > 0 &&
            typeof subscriptionOptions.endpoint === 'string' &&
            subscriptionOptions.endpoint.length > 0 &&
            typeof subscriptionOptions.swScope === 'string' &&
            subscriptionOptions.swScope.length > 0 &&
            typeof subscriptionOptions.vapidKey === 'string' &&
            subscriptionOptions.vapidKey.length > 0);
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // Exported for tests.
    var DATABASE_NAME$1 = 'firebase-messaging-database';
    var DATABASE_VERSION$1 = 1;
    var OBJECT_STORE_NAME$1 = 'firebase-messaging-store';
    var dbPromise$1 = null;
    function getDbPromise$1() {
        if (!dbPromise$1) {
            dbPromise$1 = openDb(DATABASE_NAME$1, DATABASE_VERSION$1, function (upgradeDb) {
                // We don't use 'break' in this switch statement, the fall-through behavior is what we want,
                // because if there are multiple versions between the old version and the current version, we
                // want ALL the migrations that correspond to those versions to run, not only the last one.
                // eslint-disable-next-line default-case
                switch (upgradeDb.oldVersion) {
                    case 0:
                        upgradeDb.createObjectStore(OBJECT_STORE_NAME$1);
                }
            });
        }
        return dbPromise$1;
    }
    /** Gets record(s) from the objectStore that match the given key. */
    function dbGet(firebaseDependencies) {
        return __awaiter(this, void 0, void 0, function () {
            var key, db, tokenDetails, oldTokenDetails;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = getKey$1(firebaseDependencies);
                        return [4 /*yield*/, getDbPromise$1()];
                    case 1:
                        db = _a.sent();
                        return [4 /*yield*/, db
                                .transaction(OBJECT_STORE_NAME$1)
                                .objectStore(OBJECT_STORE_NAME$1)
                                .get(key)];
                    case 2:
                        tokenDetails = _a.sent();
                        if (!tokenDetails) return [3 /*break*/, 3];
                        return [2 /*return*/, tokenDetails];
                    case 3: return [4 /*yield*/, migrateOldDatabase(firebaseDependencies.appConfig.senderId)];
                    case 4:
                        oldTokenDetails = _a.sent();
                        if (!oldTokenDetails) return [3 /*break*/, 6];
                        return [4 /*yield*/, dbSet(firebaseDependencies, oldTokenDetails)];
                    case 5:
                        _a.sent();
                        return [2 /*return*/, oldTokenDetails];
                    case 6: return [2 /*return*/];
                }
            });
        });
    }
    /** Assigns or overwrites the record for the given key with the given value. */
    function dbSet(firebaseDependencies, tokenDetails) {
        return __awaiter(this, void 0, void 0, function () {
            var key, db, tx;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = getKey$1(firebaseDependencies);
                        return [4 /*yield*/, getDbPromise$1()];
                    case 1:
                        db = _a.sent();
                        tx = db.transaction(OBJECT_STORE_NAME$1, 'readwrite');
                        return [4 /*yield*/, tx.objectStore(OBJECT_STORE_NAME$1).put(tokenDetails, key)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, tx.complete];
                    case 3:
                        _a.sent();
                        return [2 /*return*/, tokenDetails];
                }
            });
        });
    }
    /** Removes record(s) from the objectStore that match the given key. */
    function dbRemove(firebaseDependencies) {
        return __awaiter(this, void 0, void 0, function () {
            var key, db, tx;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = getKey$1(firebaseDependencies);
                        return [4 /*yield*/, getDbPromise$1()];
                    case 1:
                        db = _a.sent();
                        tx = db.transaction(OBJECT_STORE_NAME$1, 'readwrite');
                        return [4 /*yield*/, tx.objectStore(OBJECT_STORE_NAME$1).delete(key)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, tx.complete];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    }
    function getKey$1(_a) {
        var appConfig = _a.appConfig;
        return appConfig.appId;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DEFAULT_SW_PATH = '/firebase-messaging-sw.js';
    var DEFAULT_SW_SCOPE = '/firebase-cloud-messaging-push-scope';
    var DEFAULT_VAPID_KEY = 'BDOU99-h67HcA6JeFXHbSNMu7e2yNNu3RzoMj8TM4W88jITfq7ZmPvIM1Iv-4_l2LxQcYwhqby2xGpWwzjfAnG4';
    var ENDPOINT = 'https://fcmregistrations.googleapis.com/v1';
    var CONSOLE_CAMPAIGN_ID = 'google.c.a.c_id';
    var CONSOLE_CAMPAIGN_NAME = 'google.c.a.c_l';
    var CONSOLE_CAMPAIGN_TIME = 'google.c.a.ts';
    /** Set to '1' if Analytics is enabled for the campaign */
    var CONSOLE_CAMPAIGN_ANALYTICS_ENABLED = 'google.c.a.e';

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function requestGetToken(firebaseDependencies, subscriptionOptions) {
        return __awaiter(this, void 0, void 0, function () {
            var headers, body, subscribeOptions, responseData, response, err_1, message;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, getHeaders$1(firebaseDependencies)];
                    case 1:
                        headers = _a.sent();
                        body = getBody(subscriptionOptions);
                        subscribeOptions = {
                            method: 'POST',
                            headers: headers,
                            body: JSON.stringify(body)
                        };
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 5, , 6]);
                        return [4 /*yield*/, fetch(getEndpoint(firebaseDependencies.appConfig), subscribeOptions)];
                    case 3:
                        response = _a.sent();
                        return [4 /*yield*/, response.json()];
                    case 4:
                        responseData = _a.sent();
                        return [3 /*break*/, 6];
                    case 5:
                        err_1 = _a.sent();
                        throw ERROR_FACTORY$1.create("token-subscribe-failed" /* TOKEN_SUBSCRIBE_FAILED */, {
                            errorInfo: err_1
                        });
                    case 6:
                        if (responseData.error) {
                            message = responseData.error.message;
                            throw ERROR_FACTORY$1.create("token-subscribe-failed" /* TOKEN_SUBSCRIBE_FAILED */, {
                                errorInfo: message
                            });
                        }
                        if (!responseData.token) {
                            throw ERROR_FACTORY$1.create("token-subscribe-no-token" /* TOKEN_SUBSCRIBE_NO_TOKEN */);
                        }
                        return [2 /*return*/, responseData.token];
                }
            });
        });
    }
    function requestUpdateToken(firebaseDependencies, tokenDetails) {
        return __awaiter(this, void 0, void 0, function () {
            var headers, body, updateOptions, responseData, response, err_2, message;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, getHeaders$1(firebaseDependencies)];
                    case 1:
                        headers = _a.sent();
                        body = getBody(tokenDetails.subscriptionOptions);
                        updateOptions = {
                            method: 'PATCH',
                            headers: headers,
                            body: JSON.stringify(body)
                        };
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 5, , 6]);
                        return [4 /*yield*/, fetch(getEndpoint(firebaseDependencies.appConfig) + "/" + tokenDetails.token, updateOptions)];
                    case 3:
                        response = _a.sent();
                        return [4 /*yield*/, response.json()];
                    case 4:
                        responseData = _a.sent();
                        return [3 /*break*/, 6];
                    case 5:
                        err_2 = _a.sent();
                        throw ERROR_FACTORY$1.create("token-update-failed" /* TOKEN_UPDATE_FAILED */, {
                            errorInfo: err_2
                        });
                    case 6:
                        if (responseData.error) {
                            message = responseData.error.message;
                            throw ERROR_FACTORY$1.create("token-update-failed" /* TOKEN_UPDATE_FAILED */, {
                                errorInfo: message
                            });
                        }
                        if (!responseData.token) {
                            throw ERROR_FACTORY$1.create("token-update-no-token" /* TOKEN_UPDATE_NO_TOKEN */);
                        }
                        return [2 /*return*/, responseData.token];
                }
            });
        });
    }
    function requestDeleteToken(firebaseDependencies, token) {
        return __awaiter(this, void 0, void 0, function () {
            var headers, unsubscribeOptions, response, responseData, message, err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, getHeaders$1(firebaseDependencies)];
                    case 1:
                        headers = _a.sent();
                        unsubscribeOptions = {
                            method: 'DELETE',
                            headers: headers
                        };
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 5, , 6]);
                        return [4 /*yield*/, fetch(getEndpoint(firebaseDependencies.appConfig) + "/" + token, unsubscribeOptions)];
                    case 3:
                        response = _a.sent();
                        return [4 /*yield*/, response.json()];
                    case 4:
                        responseData = _a.sent();
                        if (responseData.error) {
                            message = responseData.error.message;
                            throw ERROR_FACTORY$1.create("token-unsubscribe-failed" /* TOKEN_UNSUBSCRIBE_FAILED */, {
                                errorInfo: message
                            });
                        }
                        return [3 /*break*/, 6];
                    case 5:
                        err_3 = _a.sent();
                        throw ERROR_FACTORY$1.create("token-unsubscribe-failed" /* TOKEN_UNSUBSCRIBE_FAILED */, {
                            errorInfo: err_3
                        });
                    case 6: return [2 /*return*/];
                }
            });
        });
    }
    function getEndpoint(_a) {
        var projectId = _a.projectId;
        return ENDPOINT + "/projects/" + projectId + "/registrations";
    }
    function getHeaders$1(_a) {
        var appConfig = _a.appConfig, installations = _a.installations;
        return __awaiter(this, void 0, void 0, function () {
            var authToken;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, installations.getToken()];
                    case 1:
                        authToken = _b.sent();
                        return [2 /*return*/, new Headers({
                                'Content-Type': 'application/json',
                                Accept: 'application/json',
                                'x-goog-api-key': appConfig.apiKey,
                                'x-goog-firebase-installations-auth': "FIS " + authToken
                            })];
                }
            });
        });
    }
    function getBody(_a) {
        var p256dh = _a.p256dh, auth = _a.auth, endpoint = _a.endpoint, vapidKey = _a.vapidKey;
        var body = {
            web: {
                endpoint: endpoint,
                auth: auth,
                p256dh: p256dh
            }
        };
        if (vapidKey !== DEFAULT_VAPID_KEY) {
            body.web.applicationPubKey = vapidKey;
        }
        return body;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // UpdateRegistration will be called once every week.
    var TOKEN_EXPIRATION_MS = 7 * 24 * 60 * 60 * 1000; // 7 days
    function getTokenInternal(messaging) {
        return __awaiter(this, void 0, void 0, function () {
            var pushSubscription, subscriptionOptions, tokenDetails, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, getPushSubscription(messaging.swRegistration, messaging.vapidKey)];
                    case 1:
                        pushSubscription = _a.sent();
                        subscriptionOptions = {
                            vapidKey: messaging.vapidKey,
                            swScope: messaging.swRegistration.scope,
                            endpoint: pushSubscription.endpoint,
                            auth: arrayToBase64(pushSubscription.getKey('auth')),
                            p256dh: arrayToBase64(pushSubscription.getKey('p256dh'))
                        };
                        return [4 /*yield*/, dbGet(messaging.firebaseDependencies)];
                    case 2:
                        tokenDetails = _a.sent();
                        if (!!tokenDetails) return [3 /*break*/, 3];
                        // No token, get a new one.
                        return [2 /*return*/, getNewToken(messaging.firebaseDependencies, subscriptionOptions)];
                    case 3:
                        if (!!isTokenValid(tokenDetails.subscriptionOptions, subscriptionOptions)) return [3 /*break*/, 8];
                        _a.label = 4;
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, requestDeleteToken(messaging.firebaseDependencies, tokenDetails.token)];
                    case 5:
                        _a.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        e_1 = _a.sent();
                        // Suppress errors because of #2364
                        console.warn(e_1);
                        return [3 /*break*/, 7];
                    case 7: return [2 /*return*/, getNewToken(messaging.firebaseDependencies, subscriptionOptions)];
                    case 8:
                        if (Date.now() >= tokenDetails.createTime + TOKEN_EXPIRATION_MS) {
                            // Weekly token refresh
                            return [2 /*return*/, updateToken(messaging, {
                                    token: tokenDetails.token,
                                    createTime: Date.now(),
                                    subscriptionOptions: subscriptionOptions
                                })];
                        }
                        else {
                            // Valid token, nothing to do.
                            return [2 /*return*/, tokenDetails.token];
                        }
                    case 9: return [2 /*return*/];
                }
            });
        });
    }
    /**
     * This method deletes the token from the database, unsubscribes the token from FCM, and unregisters
     * the push subscription if it exists.
     */
    function deleteTokenInternal(messaging) {
        return __awaiter(this, void 0, void 0, function () {
            var tokenDetails, pushSubscription;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, dbGet(messaging.firebaseDependencies)];
                    case 1:
                        tokenDetails = _a.sent();
                        if (!tokenDetails) return [3 /*break*/, 4];
                        return [4 /*yield*/, requestDeleteToken(messaging.firebaseDependencies, tokenDetails.token)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, dbRemove(messaging.firebaseDependencies)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [4 /*yield*/, messaging.swRegistration.pushManager.getSubscription()];
                    case 5:
                        pushSubscription = _a.sent();
                        if (pushSubscription) {
                            return [2 /*return*/, pushSubscription.unsubscribe()];
                        }
                        // If there's no SW, consider it a success.
                        return [2 /*return*/, true];
                }
            });
        });
    }
    function updateToken(messaging, tokenDetails) {
        return __awaiter(this, void 0, void 0, function () {
            var updatedToken, updatedTokenDetails, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 5]);
                        return [4 /*yield*/, requestUpdateToken(messaging.firebaseDependencies, tokenDetails)];
                    case 1:
                        updatedToken = _a.sent();
                        updatedTokenDetails = __assign(__assign({}, tokenDetails), { token: updatedToken, createTime: Date.now() });
                        return [4 /*yield*/, dbSet(messaging.firebaseDependencies, updatedTokenDetails)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, updatedToken];
                    case 3:
                        e_2 = _a.sent();
                        return [4 /*yield*/, deleteTokenInternal(messaging)];
                    case 4:
                        _a.sent();
                        throw e_2;
                    case 5: return [2 /*return*/];
                }
            });
        });
    }
    function getNewToken(firebaseDependencies, subscriptionOptions) {
        return __awaiter(this, void 0, void 0, function () {
            var token, tokenDetails;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, requestGetToken(firebaseDependencies, subscriptionOptions)];
                    case 1:
                        token = _a.sent();
                        tokenDetails = {
                            token: token,
                            createTime: Date.now(),
                            subscriptionOptions: subscriptionOptions
                        };
                        return [4 /*yield*/, dbSet(firebaseDependencies, tokenDetails)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, tokenDetails.token];
                }
            });
        });
    }
    /**
     * Gets a PushSubscription for the current user.
     */
    function getPushSubscription(swRegistration, vapidKey) {
        return __awaiter(this, void 0, void 0, function () {
            var subscription;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, swRegistration.pushManager.getSubscription()];
                    case 1:
                        subscription = _a.sent();
                        if (subscription) {
                            return [2 /*return*/, subscription];
                        }
                        return [2 /*return*/, swRegistration.pushManager.subscribe({
                                userVisibleOnly: true,
                                // Chrome <= 75 doesn't support base64-encoded VAPID key. For backward compatibility, VAPID key
                                // submitted to pushManager#subscribe must be of type Uint8Array.
                                applicationServerKey: base64ToArray(vapidKey)
                            })];
                }
            });
        });
    }
    /**
     * Checks if the saved tokenDetails object matches the configuration provided.
     */
    function isTokenValid(dbOptions, currentOptions) {
        var isVapidKeyEqual = currentOptions.vapidKey === dbOptions.vapidKey;
        var isEndpointEqual = currentOptions.endpoint === dbOptions.endpoint;
        var isAuthEqual = currentOptions.auth === dbOptions.auth;
        var isP256dhEqual = currentOptions.p256dh === dbOptions.p256dh;
        return isVapidKeyEqual && isEndpointEqual && isAuthEqual && isP256dhEqual;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function registerDefaultSw(messaging) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, e_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        _a = messaging;
                        return [4 /*yield*/, navigator.serviceWorker.register(DEFAULT_SW_PATH, {
                                scope: DEFAULT_SW_SCOPE
                            })];
                    case 1:
                        _a.swRegistration = _b.sent();
                        // The timing when browser updates sw when sw has an update is unreliable from experiment. It
                        // leads to version conflict when the SDK upgrades to a newer version in the main page, but sw
                        // is stuck with the old version. For example,
                        // https://github.com/firebase/firebase-js-sdk/issues/2590 The following line reliably updates
                        // sw if there was an update.
                        messaging.swRegistration.update().catch(function () {
                            /* it is non blocking and we don't care if it failed */
                        });
                        return [3 /*break*/, 3];
                    case 2:
                        e_1 = _b.sent();
                        throw ERROR_FACTORY$1.create("failed-service-worker-registration" /* FAILED_DEFAULT_REGISTRATION */, {
                            browserErrorMessage: e_1.message
                        });
                    case 3: return [2 /*return*/];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function deleteToken(messaging) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!navigator) {
                            throw ERROR_FACTORY$1.create("only-available-in-window" /* AVAILABLE_IN_WINDOW */);
                        }
                        if (!!messaging.swRegistration) return [3 /*break*/, 2];
                        return [4 /*yield*/, registerDefaultSw(messaging)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/, deleteTokenInternal(messaging)];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
     * in compliance with the License. You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under the License
     * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
     * or implied. See the License for the specific language governing permissions and limitations under
     * the License.
     */
    var MessageType;
    (function (MessageType) {
        MessageType["PUSH_RECEIVED"] = "push-received";
        MessageType["NOTIFICATION_CLICKED"] = "notification-clicked";
    })(MessageType || (MessageType = {}));

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function externalizePayload(internalPayload) {
        var payload = {
            from: internalPayload.from,
            // eslint-disable-next-line camelcase
            collapseKey: internalPayload.collapse_key
        };
        propagateNotificationPayload(payload, internalPayload);
        propagateDataPayload(payload, internalPayload);
        propagateFcmOptions(payload, internalPayload);
        return payload;
    }
    function propagateNotificationPayload(payload, messagePayloadInternal) {
        if (!messagePayloadInternal.notification) {
            return;
        }
        payload.notification = {};
        var title = messagePayloadInternal.notification.title;
        if (!!title) {
            payload.notification.title = title;
        }
        var body = messagePayloadInternal.notification.body;
        if (!!body) {
            payload.notification.body = body;
        }
        var image = messagePayloadInternal.notification.image;
        if (!!image) {
            payload.notification.image = image;
        }
    }
    function propagateDataPayload(payload, messagePayloadInternal) {
        if (!messagePayloadInternal.data) {
            return;
        }
        payload.data = messagePayloadInternal.data;
    }
    function propagateFcmOptions(payload, messagePayloadInternal) {
        if (!messagePayloadInternal.fcmOptions) {
            return;
        }
        payload.fcmOptions = {};
        var link = messagePayloadInternal.fcmOptions.link;
        if (!!link) {
            payload.fcmOptions.link = link;
        }
        // eslint-disable-next-line camelcase
        var analyticsLabel = messagePayloadInternal.fcmOptions.analytics_label;
        if (!!analyticsLabel) {
            payload.fcmOptions.analyticsLabel = analyticsLabel;
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function isConsoleMessage(data) {
        // This message has a campaign ID, meaning it was sent using the Firebase Console.
        return typeof data === 'object' && !!data && CONSOLE_CAMPAIGN_ID in data;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function logToScion(messaging, messageType, data) {
        return __awaiter(this, void 0, void 0, function () {
            var eventType, analytics;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        eventType = getEventType(messageType);
                        return [4 /*yield*/, messaging.firebaseDependencies.analyticsProvider.get()];
                    case 1:
                        analytics = _a.sent();
                        analytics.logEvent(eventType, {
                            /* eslint-disable camelcase */
                            message_id: data[CONSOLE_CAMPAIGN_ID],
                            message_name: data[CONSOLE_CAMPAIGN_NAME],
                            message_time: data[CONSOLE_CAMPAIGN_TIME],
                            message_device_time: Math.floor(Date.now() / 1000)
                            /* eslint-enable camelcase */
                        });
                        return [2 /*return*/];
                }
            });
        });
    }
    function getEventType(messageType) {
        switch (messageType) {
            case MessageType.NOTIFICATION_CLICKED:
                return 'notification_open';
            case MessageType.PUSH_RECEIVED:
                return 'notification_foreground';
            default:
                throw new Error();
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function messageEventListener(messaging, event) {
        return __awaiter(this, void 0, void 0, function () {
            var internalPayload, dataPayload;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        internalPayload = event.data;
                        if (!internalPayload.isFirebaseMessaging) {
                            return [2 /*return*/];
                        }
                        if (messaging.onMessageHandler &&
                            internalPayload.messageType === MessageType.PUSH_RECEIVED) {
                            if (typeof messaging.onMessageHandler === 'function') {
                                messaging.onMessageHandler(externalizePayload(internalPayload));
                            }
                            else {
                                messaging.onMessageHandler.next(externalizePayload(internalPayload));
                            }
                        }
                        dataPayload = internalPayload.data;
                        if (!(isConsoleMessage(dataPayload) &&
                            dataPayload[CONSOLE_CAMPAIGN_ANALYTICS_ENABLED] === '1')) return [3 /*break*/, 2];
                        return [4 /*yield*/, logToScion(messaging, internalPayload.messageType, dataPayload)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function updateSwReg(messaging, swRegistration) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(!swRegistration && !messaging.swRegistration)) return [3 /*break*/, 2];
                        return [4 /*yield*/, registerDefaultSw(messaging)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        if (!swRegistration && !!messaging.swRegistration) {
                            return [2 /*return*/];
                        }
                        if (!(swRegistration instanceof ServiceWorkerRegistration)) {
                            throw ERROR_FACTORY$1.create("invalid-sw-registration" /* INVALID_SW_REGISTRATION */);
                        }
                        messaging.swRegistration = swRegistration;
                        return [2 /*return*/];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function updateVapidKey(messaging, vapidKey) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!!vapidKey) {
                    messaging.vapidKey = vapidKey;
                }
                else if (!messaging.vapidKey) {
                    messaging.vapidKey = DEFAULT_VAPID_KEY;
                }
                return [2 /*return*/];
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function getToken$1(messaging, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!navigator) {
                            throw ERROR_FACTORY$1.create("only-available-in-window" /* AVAILABLE_IN_WINDOW */);
                        }
                        navigator.serviceWorker.addEventListener('message', function (e) {
                            return messageEventListener(messaging, e);
                        });
                        if (!(Notification.permission === 'default')) return [3 /*break*/, 2];
                        return [4 /*yield*/, Notification.requestPermission()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        if (Notification.permission !== 'granted') {
                            throw ERROR_FACTORY$1.create("permission-blocked" /* PERMISSION_BLOCKED */);
                        }
                        return [4 /*yield*/, updateVapidKey(messaging, options === null || options === void 0 ? void 0 : options.vapidKey)];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, updateSwReg(messaging, options === null || options === void 0 ? void 0 : options.serviceWorkerRegistration)];
                    case 4:
                        _a.sent();
                        return [2 /*return*/, getTokenInternal(messaging)];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function onMessage(messaging, nextOrObserver) {
        if (!navigator) {
            throw ERROR_FACTORY$1.create("only-available-in-window" /* AVAILABLE_IN_WINDOW */);
        }
        navigator.serviceWorker.addEventListener('message', function (e) {
            return messageEventListener(messaging, e);
        });
        messaging.onMessageHandler = nextOrObserver;
        return function () {
            messaging.onMessageHandler = null;
        };
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Retrieves a firebase messaging instance.
     *
     * @return the firebase messaging instance associated with the provided firebase app.
     */
    function getMessaging(app$1) {
        var messagingProvider = app._getProvider(app$1, 'messaging-exp');
        return messagingProvider.getImmediate();
    }
    /**
     * Subscribes the messaging instance to push notifications. Returns an FCM registration token
     * that can be used to send push messages to that messaging instance.
     *
     * If a notification permission isn't already granted, this method asks the user for permission.
     * The returned promise rejects if the user does not allow the app to show notifications.
     *
     * @param messaging: the messaging instance.
     * @param options.vapidKey The public server key provided to push services. It is used to
     * authenticate the push subscribers to receive push messages only from sending servers that
     * hold the corresponding private key. If it is not provided, a default VAPID key is used. Note
     * that some push services (Chrome Push Service) require a non-default VAPID key. Therefore, it
     * is recommended to generate and import a VAPID key for your project with
     * {@link https://firebase.google.com/docs/cloud-messaging/js/client#configure_web_credentials_with_fcm Configure Web Credentials with FCM}.
     * See
     * {@link https://developers.google.com/web/fundamentals/push-notifications/web-push-protocol The Web Push Protocol}
     * for details on web push services.}
     *
     * @param options.serviceWorkerRegistration The service worker registration for receiving push
     * messaging. If the registration is not provided explicitly, you need to have a
     * `firebase-messaging-sw.js` at your root location. See
     * {@link https://firebase.google.com/docs/cloud-messaging/js/client#retrieve-the-current-registration-token Retrieve the current registration token}
     * for more details.
     *
     * @return The promise resolves with an FCM registration token.
     *
     */
    function getToken$1$1(messaging, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, getToken$1(messaging, options)];
            });
        });
    }
    /**
     * Deletes the registration token associated with this messaging instance and unsubscribes the
     * messaging instance from the push subscription.
     *
     * @param messaging: the messaging instance.
     *
     * @return The promise resolves when the token has been successfully deleted.
     */
    function deleteToken$1(messaging) {
        return deleteToken(messaging);
    }
    /**
     * When a push message is received and the user is currently on a page for your origin, the
     * message is passed to the page and an `onMessage()` event is dispatched with the payload of
     * the push message.
     *
     *
     * @param messaging: the messaging instance.
     * @param
     *     nextOrObserver This function, or observer object with `next` defined,
     *     is called when a message is received and the user is currently viewing your page.
     * @return To stop listening for messages execute this returned function.
     */
    function onMessage$1(messaging, nextOrObserver) {
        return onMessage(messaging, nextOrObserver);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    registerMessaging();

    exports.deleteToken = deleteToken$1;
    exports.getMessaging = getMessaging;
    exports.getToken = getToken$1$1;
    exports.onMessage = onMessage$1;

    Object.defineProperty(exports, '__esModule', { value: true });


              }).apply(this, arguments);
            } catch(err) {
                console.error(err);
                throw new Error(
                  'Cannot instantiate firebase-messaging.js - ' +
                  'be sure to load firebase-app.js first.'
                );
              }

})));


(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@firebase/app')) :
    typeof define === 'function' && define.amd ? define(['exports', '@firebase/app'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.firebase = global.firebase || {}, global.firebase.database = global.firebase.database || {}), global.firebase.app));
}(this, (function (exports, app) { 'use strict';

    try {
                (function() {

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.
     */
    var CONSTANTS = {
        /**
         * @define {boolean} Whether this is the client Node.js SDK.
         */
        NODE_CLIENT: false,
        /**
         * @define {boolean} Whether this is the Admin Node.js SDK.
         */
        NODE_ADMIN: false,
        /**
         * Firebase SDK Version
         */
        SDK_VERSION: '${JSCORE_VERSION}'
    };

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Throws an error if the provided assertion is falsy
     */
    var assert = function (assertion, message) {
        if (!assertion) {
            throw assertionError(message);
        }
    };
    /**
     * Returns an Error object suitable for throwing.
     */
    var assertionError = function (message) {
        return new Error('Firebase Database (' +
            CONSTANTS.SDK_VERSION +
            ') INTERNAL ASSERT FAILED: ' +
            message);
    };

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var stringToByteArray = function (str) {
        // TODO(user): Use native implementations if/when available
        var out = [];
        var p = 0;
        for (var i = 0; i < str.length; i++) {
            var c = str.charCodeAt(i);
            if (c < 128) {
                out[p++] = c;
            }
            else if (c < 2048) {
                out[p++] = (c >> 6) | 192;
                out[p++] = (c & 63) | 128;
            }
            else if ((c & 0xfc00) === 0xd800 &&
                i + 1 < str.length &&
                (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {
                // Surrogate Pair
                c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);
                out[p++] = (c >> 18) | 240;
                out[p++] = ((c >> 12) & 63) | 128;
                out[p++] = ((c >> 6) & 63) | 128;
                out[p++] = (c & 63) | 128;
            }
            else {
                out[p++] = (c >> 12) | 224;
                out[p++] = ((c >> 6) & 63) | 128;
                out[p++] = (c & 63) | 128;
            }
        }
        return out;
    };
    /**
     * Turns an array of numbers into the string given by the concatenation of the
     * characters to which the numbers correspond.
     * @param bytes Array of numbers representing characters.
     * @return Stringification of the array.
     */
    var byteArrayToString = function (bytes) {
        // TODO(user): Use native implementations if/when available
        var out = [];
        var pos = 0, c = 0;
        while (pos < bytes.length) {
            var c1 = bytes[pos++];
            if (c1 < 128) {
                out[c++] = String.fromCharCode(c1);
            }
            else if (c1 > 191 && c1 < 224) {
                var c2 = bytes[pos++];
                out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
            }
            else if (c1 > 239 && c1 < 365) {
                // Surrogate Pair
                var c2 = bytes[pos++];
                var c3 = bytes[pos++];
                var c4 = bytes[pos++];
                var u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -
                    0x10000;
                out[c++] = String.fromCharCode(0xd800 + (u >> 10));
                out[c++] = String.fromCharCode(0xdc00 + (u & 1023));
            }
            else {
                var c2 = bytes[pos++];
                var c3 = bytes[pos++];
                out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
            }
        }
        return out.join('');
    };
    // We define it as an object literal instead of a class because a class compiled down to es5 can't
    // be treeshaked. https://github.com/rollup/rollup/issues/1691
    // Static lookup maps, lazily populated by init_()
    var base64 = {
        /**
         * Maps bytes to characters.
         */
        byteToCharMap_: null,
        /**
         * Maps characters to bytes.
         */
        charToByteMap_: null,
        /**
         * Maps bytes to websafe characters.
         * @private
         */
        byteToCharMapWebSafe_: null,
        /**
         * Maps websafe characters to bytes.
         * @private
         */
        charToByteMapWebSafe_: null,
        /**
         * Our default alphabet, shared between
         * ENCODED_VALS and ENCODED_VALS_WEBSAFE
         */
        ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',
        /**
         * Our default alphabet. Value 64 (=) is special; it means "nothing."
         */
        get ENCODED_VALS() {
            return this.ENCODED_VALS_BASE + '+/=';
        },
        /**
         * Our websafe alphabet.
         */
        get ENCODED_VALS_WEBSAFE() {
            return this.ENCODED_VALS_BASE + '-_.';
        },
        /**
         * Whether this browser supports the atob and btoa functions. This extension
         * started at Mozilla but is now implemented by many browsers. We use the
         * ASSUME_* variables to avoid pulling in the full useragent detection library
         * but still allowing the standard per-browser compilations.
         *
         */
        HAS_NATIVE_SUPPORT: typeof atob === 'function',
        /**
         * Base64-encode an array of bytes.
         *
         * @param input An array of bytes (numbers with
         *     value in [0, 255]) to encode.
         * @param webSafe Boolean indicating we should use the
         *     alternative alphabet.
         * @return The base64 encoded string.
         */
        encodeByteArray: function (input, webSafe) {
            if (!Array.isArray(input)) {
                throw Error('encodeByteArray takes an array as a parameter');
            }
            this.init_();
            var byteToCharMap = webSafe
                ? this.byteToCharMapWebSafe_
                : this.byteToCharMap_;
            var output = [];
            for (var i = 0; i < input.length; i += 3) {
                var byte1 = input[i];
                var haveByte2 = i + 1 < input.length;
                var byte2 = haveByte2 ? input[i + 1] : 0;
                var haveByte3 = i + 2 < input.length;
                var byte3 = haveByte3 ? input[i + 2] : 0;
                var outByte1 = byte1 >> 2;
                var outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);
                var outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);
                var outByte4 = byte3 & 0x3f;
                if (!haveByte3) {
                    outByte4 = 64;
                    if (!haveByte2) {
                        outByte3 = 64;
                    }
                }
                output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
            }
            return output.join('');
        },
        /**
         * Base64-encode a string.
         *
         * @param input A string to encode.
         * @param webSafe If true, we should use the
         *     alternative alphabet.
         * @return The base64 encoded string.
         */
        encodeString: function (input, webSafe) {
            // Shortcut for Mozilla browsers that implement
            // a native base64 encoder in the form of "btoa/atob"
            if (this.HAS_NATIVE_SUPPORT && !webSafe) {
                return btoa(input);
            }
            return this.encodeByteArray(stringToByteArray(input), webSafe);
        },
        /**
         * Base64-decode a string.
         *
         * @param input to decode.
         * @param webSafe True if we should use the
         *     alternative alphabet.
         * @return string representing the decoded value.
         */
        decodeString: function (input, webSafe) {
            // Shortcut for Mozilla browsers that implement
            // a native base64 encoder in the form of "btoa/atob"
            if (this.HAS_NATIVE_SUPPORT && !webSafe) {
                return atob(input);
            }
            return byteArrayToString(this.decodeStringToByteArray(input, webSafe));
        },
        /**
         * Base64-decode a string.
         *
         * In base-64 decoding, groups of four characters are converted into three
         * bytes.  If the encoder did not apply padding, the input length may not
         * be a multiple of 4.
         *
         * In this case, the last group will have fewer than 4 characters, and
         * padding will be inferred.  If the group has one or two characters, it decodes
         * to one byte.  If the group has three characters, it decodes to two bytes.
         *
         * @param input Input to decode.
         * @param webSafe True if we should use the web-safe alphabet.
         * @return bytes representing the decoded value.
         */
        decodeStringToByteArray: function (input, webSafe) {
            this.init_();
            var charToByteMap = webSafe
                ? this.charToByteMapWebSafe_
                : this.charToByteMap_;
            var output = [];
            for (var i = 0; i < input.length;) {
                var byte1 = charToByteMap[input.charAt(i++)];
                var haveByte2 = i < input.length;
                var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
                ++i;
                var haveByte3 = i < input.length;
                var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
                ++i;
                var haveByte4 = i < input.length;
                var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
                ++i;
                if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
                    throw Error();
                }
                var outByte1 = (byte1 << 2) | (byte2 >> 4);
                output.push(outByte1);
                if (byte3 !== 64) {
                    var outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);
                    output.push(outByte2);
                    if (byte4 !== 64) {
                        var outByte3 = ((byte3 << 6) & 0xc0) | byte4;
                        output.push(outByte3);
                    }
                }
            }
            return output;
        },
        /**
         * Lazy static initialization function. Called before
         * accessing any of the static map variables.
         * @private
         */
        init_: function () {
            if (!this.byteToCharMap_) {
                this.byteToCharMap_ = {};
                this.charToByteMap_ = {};
                this.byteToCharMapWebSafe_ = {};
                this.charToByteMapWebSafe_ = {};
                // We want quick mappings back and forth, so we precompute two maps.
                for (var i = 0; i < this.ENCODED_VALS.length; i++) {
                    this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
                    this.charToByteMap_[this.byteToCharMap_[i]] = i;
                    this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
                    this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;
                    // Be forgiving when decoding and correctly decode both encodings.
                    if (i >= this.ENCODED_VALS_BASE.length) {
                        this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
                        this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
                    }
                }
            }
        }
    };
    /**
     * URL-safe base64 encoding
     */
    var base64Encode = function (str) {
        var utf8Bytes = stringToByteArray(str);
        return base64.encodeByteArray(utf8Bytes, true);
    };
    /**
     * URL-safe base64 decoding
     *
     * NOTE: DO NOT use the global atob() function - it does NOT support the
     * base64Url variant encoding.
     *
     * @param str To be decoded
     * @return Decoded result, if possible
     */
    var base64Decode = function (str) {
        try {
            return base64.decodeString(str, true);
        }
        catch (e) {
            console.error('base64Decode failed: ', e);
        }
        return null;
    };

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Do a deep-copy of basic JavaScript Objects or Arrays.
     */
    function deepCopy(value) {
        return deepExtend(undefined, value);
    }
    /**
     * Copy properties from source to target (recursively allows extension
     * of Objects and Arrays).  Scalar values in the target are over-written.
     * If target is undefined, an object of the appropriate type will be created
     * (and returned).
     *
     * We recursively copy all child properties of plain Objects in the source- so
     * that namespace- like dictionaries are merged.
     *
     * Note that the target can be a function, in which case the properties in
     * the source Object are copied onto it as static properties of the Function.
     *
     * Note: we don't merge __proto__ to prevent prototype pollution
     */
    function deepExtend(target, source) {
        if (!(source instanceof Object)) {
            return source;
        }
        switch (source.constructor) {
            case Date:
                // Treat Dates like scalars; if the target date object had any child
                // properties - they will be lost!
                var dateValue = source;
                return new Date(dateValue.getTime());
            case Object:
                if (target === undefined) {
                    target = {};
                }
                break;
            case Array:
                // Always copy the array source and overwrite the target.
                target = [];
                break;
            default:
                // Not a plain Object - treat it as a scalar.
                return source;
        }
        for (var prop in source) {
            // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202
            if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {
                continue;
            }
            target[prop] = deepExtend(target[prop], source[prop]);
        }
        return target;
    }
    function isValidKey(key) {
        return key !== '__proto__';
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var Deferred = /** @class */ (function () {
        function Deferred() {
            var _this = this;
            this.reject = function () { };
            this.resolve = function () { };
            this.promise = new Promise(function (resolve, reject) {
                _this.resolve = resolve;
                _this.reject = reject;
            });
        }
        /**
         * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around
         * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
         * and returns a node-style callback which will resolve or reject the Deferred's promise.
         */
        Deferred.prototype.wrapCallback = function (callback) {
            var _this = this;
            return function (error, value) {
                if (error) {
                    _this.reject(error);
                }
                else {
                    _this.resolve(value);
                }
                if (typeof callback === 'function') {
                    // Attaching noop handler just in case developer wasn't expecting
                    // promises
                    _this.promise.catch(function () { });
                    // Some of our callbacks don't expect a value and our own tests
                    // assert that the parameter length is 1
                    if (callback.length === 1) {
                        callback(error);
                    }
                    else {
                        callback(error, value);
                    }
                }
            };
        };
        return Deferred;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns navigator.userAgent string or '' if it's not defined.
     * @return user agent string
     */
    function getUA() {
        if (typeof navigator !== 'undefined' &&
            typeof navigator['userAgent'] === 'string') {
            return navigator['userAgent'];
        }
        else {
            return '';
        }
    }
    /**
     * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.
     *
     * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap
     * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally
     * wait for a callback.
     */
    function isMobileCordova() {
        return (typeof window !== 'undefined' &&
            // @ts-ignore Setting up an broadly applicable index signature for Window
            // just to deal with this case would probably be a bad idea.
            !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&
            /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));
    }
    /**
     * Detect React Native.
     *
     * @return true if ReactNative environment is detected.
     */
    function isReactNative() {
        return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');
    }
    /**
     * Detect whether the current SDK build is the Node version.
     *
     * @return true if it's the Node SDK build.
     */
    function isNodeSdk() {
        return  CONSTANTS.NODE_ADMIN === true;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ERROR_NAME = 'FirebaseError';
    // Based on code from:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
    var FirebaseError = /** @class */ (function (_super) {
        __extends(FirebaseError, _super);
        function FirebaseError(code, message, customData) {
            var _this = _super.call(this, message) || this;
            _this.code = code;
            _this.customData = customData;
            _this.name = ERROR_NAME;
            // Fix For ES5
            // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
            Object.setPrototypeOf(_this, FirebaseError.prototype);
            // Maintains proper stack trace for where our error was thrown.
            // Only available on V8.
            if (Error.captureStackTrace) {
                Error.captureStackTrace(_this, ErrorFactory.prototype.create);
            }
            return _this;
        }
        return FirebaseError;
    }(Error));
    var ErrorFactory = /** @class */ (function () {
        function ErrorFactory(service, serviceName, errors) {
            this.service = service;
            this.serviceName = serviceName;
            this.errors = errors;
        }
        ErrorFactory.prototype.create = function (code) {
            var data = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                data[_i - 1] = arguments[_i];
            }
            var customData = data[0] || {};
            var fullCode = this.service + "/" + code;
            var template = this.errors[code];
            var message = template ? replaceTemplate(template, customData) : 'Error';
            // Service Name: Error message (service/code).
            var fullMessage = this.serviceName + ": " + message + " (" + fullCode + ").";
            var error = new FirebaseError(fullCode, fullMessage, customData);
            return error;
        };
        return ErrorFactory;
    }());
    function replaceTemplate(template, data) {
        return template.replace(PATTERN, function (_, key) {
            var value = data[key];
            return value != null ? String(value) : "<" + key + "?>";
        });
    }
    var PATTERN = /\{\$([^}]+)}/g;

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Evaluates a JSON string into a javascript object.
     *
     * @param {string} str A string containing JSON.
     * @return {*} The javascript object representing the specified JSON.
     */
    function jsonEval(str) {
        return JSON.parse(str);
    }
    /**
     * Returns JSON representing a javascript object.
     * @param {*} data Javascript object to be stringified.
     * @return {string} The JSON contents of the object.
     */
    function stringify(data) {
        return JSON.stringify(data);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Decodes a Firebase auth. token into constituent parts.
     *
     * Notes:
     * - May return with invalid / incomplete claims if there's no native base64 decoding support.
     * - Doesn't check if the token is actually valid.
     */
    var decode = function (token) {
        var header = {}, claims = {}, data = {}, signature = '';
        try {
            var parts = token.split('.');
            header = jsonEval(base64Decode(parts[0]) || '');
            claims = jsonEval(base64Decode(parts[1]) || '');
            signature = parts[2];
            data = claims['d'] || {};
            delete claims['d'];
        }
        catch (e) { }
        return {
            header: header,
            claims: claims,
            data: data,
            signature: signature
        };
    };
    /**
     * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.
     *
     * Notes:
     * - May return a false negative if there's no native base64 decoding support.
     * - Doesn't check if the token is actually valid.
     */
    var isValidFormat = function (token) {
        var decoded = decode(token), claims = decoded.claims;
        return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');
    };
    /**
     * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.
     *
     * Notes:
     * - May return a false negative if there's no native base64 decoding support.
     * - Doesn't check if the token is actually valid.
     */
    var isAdmin = function (token) {
        var claims = decode(token).claims;
        return typeof claims === 'object' && claims['admin'] === true;
    };

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function contains(obj, key) {
        return Object.prototype.hasOwnProperty.call(obj, key);
    }
    function safeGet(obj, key) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
            return obj[key];
        }
        else {
            return undefined;
        }
    }
    function isEmpty(obj) {
        for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
                return false;
            }
        }
        return true;
    }
    function map(obj, fn, contextObj) {
        var res = {};
        for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
                res[key] = fn.call(contextObj, obj[key], key, obj);
            }
        }
        return res;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a
     * params object (e.g. {arg: 'val', arg2: 'val2'})
     * Note: You must prepend it with ? when adding it to a URL.
     */
    function querystring(querystringParams) {
        var params = [];
        var _loop_1 = function (key, value) {
            if (Array.isArray(value)) {
                value.forEach(function (arrayVal) {
                    params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));
                });
            }
            else {
                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
            }
        };
        for (var _i = 0, _a = Object.entries(querystringParams); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            _loop_1(key, value);
        }
        return params.length ? '&' + params.join('&') : '';
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @fileoverview SHA-1 cryptographic hash.
     * Variable names follow the notation in FIPS PUB 180-3:
     * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.
     *
     * Usage:
     *   var sha1 = new sha1();
     *   sha1.update(bytes);
     *   var hash = sha1.digest();
     *
     * Performance:
     *   Chrome 23:   ~400 Mbit/s
     *   Firefox 16:  ~250 Mbit/s
     *
     */
    /**
     * SHA-1 cryptographic hash constructor.
     *
     * The properties declared here are discussed in the above algorithm document.
     * @constructor
     * @final
     * @struct
     */
    var Sha1 = /** @class */ (function () {
        function Sha1() {
            /**
             * Holds the previous values of accumulated variables a-e in the compress_
             * function.
             * @private
             */
            this.chain_ = [];
            /**
             * A buffer holding the partially computed hash result.
             * @private
             */
            this.buf_ = [];
            /**
             * An array of 80 bytes, each a part of the message to be hashed.  Referred to
             * as the message schedule in the docs.
             * @private
             */
            this.W_ = [];
            /**
             * Contains data needed to pad messages less than 64 bytes.
             * @private
             */
            this.pad_ = [];
            /**
             * @private {number}
             */
            this.inbuf_ = 0;
            /**
             * @private {number}
             */
            this.total_ = 0;
            this.blockSize = 512 / 8;
            this.pad_[0] = 128;
            for (var i = 1; i < this.blockSize; ++i) {
                this.pad_[i] = 0;
            }
            this.reset();
        }
        Sha1.prototype.reset = function () {
            this.chain_[0] = 0x67452301;
            this.chain_[1] = 0xefcdab89;
            this.chain_[2] = 0x98badcfe;
            this.chain_[3] = 0x10325476;
            this.chain_[4] = 0xc3d2e1f0;
            this.inbuf_ = 0;
            this.total_ = 0;
        };
        /**
         * Internal compress helper function.
         * @param buf Block to compress.
         * @param offset Offset of the block in the buffer.
         * @private
         */
        Sha1.prototype.compress_ = function (buf, offset) {
            if (!offset) {
                offset = 0;
            }
            var W = this.W_;
            // get 16 big endian words
            if (typeof buf === 'string') {
                for (var i = 0; i < 16; i++) {
                    // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS
                    // have a bug that turns the post-increment ++ operator into pre-increment
                    // during JIT compilation.  We have code that depends heavily on SHA-1 for
                    // correctness and which is affected by this bug, so I've removed all uses
                    // of post-increment ++ in which the result value is used.  We can revert
                    // this change once the Safari bug
                    // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and
                    // most clients have been updated.
                    W[i] =
                        (buf.charCodeAt(offset) << 24) |
                            (buf.charCodeAt(offset + 1) << 16) |
                            (buf.charCodeAt(offset + 2) << 8) |
                            buf.charCodeAt(offset + 3);
                    offset += 4;
                }
            }
            else {
                for (var i = 0; i < 16; i++) {
                    W[i] =
                        (buf[offset] << 24) |
                            (buf[offset + 1] << 16) |
                            (buf[offset + 2] << 8) |
                            buf[offset + 3];
                    offset += 4;
                }
            }
            // expand to 80 words
            for (var i = 16; i < 80; i++) {
                var t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
                W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;
            }
            var a = this.chain_[0];
            var b = this.chain_[1];
            var c = this.chain_[2];
            var d = this.chain_[3];
            var e = this.chain_[4];
            var f, k;
            // TODO(user): Try to unroll this loop to speed up the computation.
            for (var i = 0; i < 80; i++) {
                if (i < 40) {
                    if (i < 20) {
                        f = d ^ (b & (c ^ d));
                        k = 0x5a827999;
                    }
                    else {
                        f = b ^ c ^ d;
                        k = 0x6ed9eba1;
                    }
                }
                else {
                    if (i < 60) {
                        f = (b & c) | (d & (b | c));
                        k = 0x8f1bbcdc;
                    }
                    else {
                        f = b ^ c ^ d;
                        k = 0xca62c1d6;
                    }
                }
                var t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;
                e = d;
                d = c;
                c = ((b << 30) | (b >>> 2)) & 0xffffffff;
                b = a;
                a = t;
            }
            this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;
            this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;
            this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;
            this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;
            this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;
        };
        Sha1.prototype.update = function (bytes, length) {
            // TODO(johnlenz): tighten the function signature and remove this check
            if (bytes == null) {
                return;
            }
            if (length === undefined) {
                length = bytes.length;
            }
            var lengthMinusBlock = length - this.blockSize;
            var n = 0;
            // Using local instead of member variables gives ~5% speedup on Firefox 16.
            var buf = this.buf_;
            var inbuf = this.inbuf_;
            // The outer while loop should execute at most twice.
            while (n < length) {
                // When we have no data in the block to top up, we can directly process the
                // input buffer (assuming it contains sufficient data). This gives ~25%
                // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that
                // the data is provided in large chunks (or in multiples of 64 bytes).
                if (inbuf === 0) {
                    while (n <= lengthMinusBlock) {
                        this.compress_(bytes, n);
                        n += this.blockSize;
                    }
                }
                if (typeof bytes === 'string') {
                    while (n < length) {
                        buf[inbuf] = bytes.charCodeAt(n);
                        ++inbuf;
                        ++n;
                        if (inbuf === this.blockSize) {
                            this.compress_(buf);
                            inbuf = 0;
                            // Jump to the outer loop so we use the full-block optimization.
                            break;
                        }
                    }
                }
                else {
                    while (n < length) {
                        buf[inbuf] = bytes[n];
                        ++inbuf;
                        ++n;
                        if (inbuf === this.blockSize) {
                            this.compress_(buf);
                            inbuf = 0;
                            // Jump to the outer loop so we use the full-block optimization.
                            break;
                        }
                    }
                }
            }
            this.inbuf_ = inbuf;
            this.total_ += length;
        };
        /** @override */
        Sha1.prototype.digest = function () {
            var digest = [];
            var totalBits = this.total_ * 8;
            // Add pad 0x80 0x00*.
            if (this.inbuf_ < 56) {
                this.update(this.pad_, 56 - this.inbuf_);
            }
            else {
                this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));
            }
            // Add # bits.
            for (var i = this.blockSize - 1; i >= 56; i--) {
                this.buf_[i] = totalBits & 255;
                totalBits /= 256; // Don't use bit-shifting here!
            }
            this.compress_(this.buf_);
            var n = 0;
            for (var i = 0; i < 5; i++) {
                for (var j = 24; j >= 0; j -= 8) {
                    digest[n] = (this.chain_[i] >> j) & 255;
                    ++n;
                }
            }
            return digest;
        };
        return Sha1;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Check to make sure the appropriate number of arguments are provided for a public function.
     * Throws an error if it fails.
     *
     * @param fnName The function name
     * @param minCount The minimum number of arguments to allow for the function call
     * @param maxCount The maximum number of argument to allow for the function call
     * @param argCount The actual number of arguments provided.
     */
    var validateArgCount = function (fnName, minCount, maxCount, argCount) {
        var argError;
        if (argCount < minCount) {
            argError = 'at least ' + minCount;
        }
        else if (argCount > maxCount) {
            argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;
        }
        if (argError) {
            var error = fnName +
                ' failed: Was called with ' +
                argCount +
                (argCount === 1 ? ' argument.' : ' arguments.') +
                ' Expects ' +
                argError +
                '.';
            throw new Error(error);
        }
    };
    /**
     * Generates a string to prefix an error message about failed argument validation
     *
     * @param fnName The function name
     * @param argumentNumber The index of the argument
     * @param optional Whether or not the argument is optional
     * @return The prefix to add to the error thrown for validation.
     */
    function errorPrefix(fnName, argumentNumber, optional) {
        var argName = '';
        switch (argumentNumber) {
            case 1:
                argName = optional ? 'first' : 'First';
                break;
            case 2:
                argName = optional ? 'second' : 'Second';
                break;
            case 3:
                argName = optional ? 'third' : 'Third';
                break;
            case 4:
                argName = optional ? 'fourth' : 'Fourth';
                break;
            default:
                throw new Error('errorPrefix called with argumentNumber > 4.  Need to update it?');
        }
        var error = fnName + ' failed: ';
        error += argName + ' argument ';
        return error;
    }
    function validateCallback(fnName, argumentNumber, 
    // eslint-disable-next-line @typescript-eslint/ban-types
    callback, optional) {
        if (optional && !callback) {
            return;
        }
        if (typeof callback !== 'function') {
            throw new Error(errorPrefix(fnName, argumentNumber, optional) +
                'must be a valid function.');
        }
    }
    function validateContextObject(fnName, argumentNumber, context, optional) {
        if (optional && !context) {
            return;
        }
        if (typeof context !== 'object' || context === null) {
            throw new Error(errorPrefix(fnName, argumentNumber, optional) +
                'must be a valid context object.');
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they
    // automatically replaced '\r\n' with '\n', and they didn't handle surrogate pairs,
    // so it's been modified.
    // Note that not all Unicode characters appear as single characters in JavaScript strings.
    // fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters
    // use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first
    // character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate
    // pair).
    // See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3
    /**
     * @param {string} str
     * @return {Array}
     */
    var stringToByteArray$1 = function (str) {
        var out = [];
        var p = 0;
        for (var i = 0; i < str.length; i++) {
            var c = str.charCodeAt(i);
            // Is this the lead surrogate in a surrogate pair?
            if (c >= 0xd800 && c <= 0xdbff) {
                var high = c - 0xd800; // the high 10 bits.
                i++;
                assert(i < str.length, 'Surrogate pair missing trail surrogate.');
                var low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.
                c = 0x10000 + (high << 10) + low;
            }
            if (c < 128) {
                out[p++] = c;
            }
            else if (c < 2048) {
                out[p++] = (c >> 6) | 192;
                out[p++] = (c & 63) | 128;
            }
            else if (c < 65536) {
                out[p++] = (c >> 12) | 224;
                out[p++] = ((c >> 6) & 63) | 128;
                out[p++] = (c & 63) | 128;
            }
            else {
                out[p++] = (c >> 18) | 240;
                out[p++] = ((c >> 12) & 63) | 128;
                out[p++] = ((c >> 6) & 63) | 128;
                out[p++] = (c & 63) | 128;
            }
        }
        return out;
    };
    /**
     * Calculate length without actually converting; useful for doing cheaper validation.
     * @param {string} str
     * @return {number}
     */
    var stringLength = function (str) {
        var p = 0;
        for (var i = 0; i < str.length; i++) {
            var c = str.charCodeAt(i);
            if (c < 128) {
                p++;
            }
            else if (c < 2048) {
                p += 2;
            }
            else if (c >= 0xd800 && c <= 0xdbff) {
                // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.
                p += 4;
                i++; // skip trail surrogate.
            }
            else {
                p += 3;
            }
        }
        return p;
    };

    /**
     * Component for service name T, e.g. `auth`, `auth-internal`
     */
    var Component = /** @class */ (function () {
        /**
         *
         * @param name The public service name, e.g. app, auth, firestore, database
         * @param instanceFactory Service factory responsible for creating the public interface
         * @param type whether the service provided by the component is public or private
         */
        function Component(name, instanceFactory, type) {
            this.name = name;
            this.instanceFactory = instanceFactory;
            this.type = type;
            this.multipleInstances = false;
            /**
             * Properties to be added to the service namespace
             */
            this.serviceProps = {};
            this.instantiationMode = "LAZY" /* LAZY */;
        }
        Component.prototype.setInstantiationMode = function (mode) {
            this.instantiationMode = mode;
            return this;
        };
        Component.prototype.setMultipleInstances = function (multipleInstances) {
            this.multipleInstances = multipleInstances;
            return this;
        };
        Component.prototype.setServiceProps = function (props) {
            this.serviceProps = props;
            return this;
        };
        return Component;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a;
    /**
     * The JS SDK supports 5 log levels and also allows a user the ability to
     * silence the logs altogether.
     *
     * The order is a follows:
     * DEBUG < VERBOSE < INFO < WARN < ERROR
     *
     * All of the log types above the current log level will be captured (i.e. if
     * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
     * `VERBOSE` logs will not)
     */
    var LogLevel;
    (function (LogLevel) {
        LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
        LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
        LogLevel[LogLevel["INFO"] = 2] = "INFO";
        LogLevel[LogLevel["WARN"] = 3] = "WARN";
        LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
        LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
    })(LogLevel || (LogLevel = {}));
    var levelStringToEnum = {
        'debug': LogLevel.DEBUG,
        'verbose': LogLevel.VERBOSE,
        'info': LogLevel.INFO,
        'warn': LogLevel.WARN,
        'error': LogLevel.ERROR,
        'silent': LogLevel.SILENT
    };
    /**
     * The default log level
     */
    var defaultLogLevel = LogLevel.INFO;
    /**
     * By default, `console.debug` is not displayed in the developer console (in
     * chrome). To avoid forcing users to have to opt-in to these logs twice
     * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
     * logs to the `console.log` function.
     */
    var ConsoleMethod = (_a = {},
        _a[LogLevel.DEBUG] = 'log',
        _a[LogLevel.VERBOSE] = 'log',
        _a[LogLevel.INFO] = 'info',
        _a[LogLevel.WARN] = 'warn',
        _a[LogLevel.ERROR] = 'error',
        _a);
    /**
     * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
     * messages on to their corresponding console counterparts (if the log method
     * is supported by the current log level)
     */
    var defaultLogHandler = function (instance, logType) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        if (logType < instance.logLevel) {
            return;
        }
        var now = new Date().toISOString();
        var method = ConsoleMethod[logType];
        if (method) {
            console[method].apply(console, __spreadArrays(["[" + now + "]  " + instance.name + ":"], args));
        }
        else {
            throw new Error("Attempted to log a message with an invalid logType (value: " + logType + ")");
        }
    };
    var Logger = /** @class */ (function () {
        /**
         * Gives you an instance of a Logger to capture messages according to
         * Firebase's logging scheme.
         *
         * @param name The name that the logs will be associated with
         */
        function Logger(name) {
            this.name = name;
            /**
             * The log level of the given Logger instance.
             */
            this._logLevel = defaultLogLevel;
            /**
             * The main (internal) log handler for the Logger instance.
             * Can be set to a new function in internal package code but not by user.
             */
            this._logHandler = defaultLogHandler;
            /**
             * The optional, additional, user-defined log handler for the Logger instance.
             */
            this._userLogHandler = null;
        }
        Object.defineProperty(Logger.prototype, "logLevel", {
            get: function () {
                return this._logLevel;
            },
            set: function (val) {
                if (!(val in LogLevel)) {
                    throw new TypeError("Invalid value \"" + val + "\" assigned to `logLevel`");
                }
                this._logLevel = val;
            },
            enumerable: false,
            configurable: true
        });
        // Workaround for setter/getter having to be the same type.
        Logger.prototype.setLogLevel = function (val) {
            this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;
        };
        Object.defineProperty(Logger.prototype, "logHandler", {
            get: function () {
                return this._logHandler;
            },
            set: function (val) {
                if (typeof val !== 'function') {
                    throw new TypeError('Value assigned to `logHandler` must be a function');
                }
                this._logHandler = val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Logger.prototype, "userLogHandler", {
            get: function () {
                return this._userLogHandler;
            },
            set: function (val) {
                this._userLogHandler = val;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * The functions below are all based on the `console` interface
         */
        Logger.prototype.debug = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.DEBUG], args));
            this._logHandler.apply(this, __spreadArrays([this, LogLevel.DEBUG], args));
        };
        Logger.prototype.log = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.VERBOSE], args));
            this._logHandler.apply(this, __spreadArrays([this, LogLevel.VERBOSE], args));
        };
        Logger.prototype.info = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.INFO], args));
            this._logHandler.apply(this, __spreadArrays([this, LogLevel.INFO], args));
        };
        Logger.prototype.warn = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.WARN], args));
            this._logHandler.apply(this, __spreadArrays([this, LogLevel.WARN], args));
        };
        Logger.prototype.error = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.ERROR], args));
            this._logHandler.apply(this, __spreadArrays([this, LogLevel.ERROR], args));
        };
        return Logger;
    }());

    var version = "0.0.900";

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics$1 = function(d, b) {
        extendStatics$1 = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics$1(d, b);
    };

    function __extends$1(d, b) {
        extendStatics$1(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Wraps a DOM Storage object and:
     * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.
     * - prefixes names with "firebase:" to avoid collisions with app data.
     *
     * We automatically (see storage.js) create two such wrappers, one for sessionStorage,
     * and one for localStorage.
     *
     */
    var DOMStorageWrapper = /** @class */ (function () {
        /**
         * @param domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)
         */
        function DOMStorageWrapper(domStorage_) {
            this.domStorage_ = domStorage_;
            // Use a prefix to avoid collisions with other stuff saved by the app.
            this.prefix_ = 'firebase:';
        }
        /**
         * @param key The key to save the value under
         * @param value The value being stored, or null to remove the key.
         */
        DOMStorageWrapper.prototype.set = function (key, value) {
            if (value == null) {
                this.domStorage_.removeItem(this.prefixedName_(key));
            }
            else {
                this.domStorage_.setItem(this.prefixedName_(key), stringify(value));
            }
        };
        /**
         * @return The value that was stored under this key, or null
         */
        DOMStorageWrapper.prototype.get = function (key) {
            var storedVal = this.domStorage_.getItem(this.prefixedName_(key));
            if (storedVal == null) {
                return null;
            }
            else {
                return jsonEval(storedVal);
            }
        };
        DOMStorageWrapper.prototype.remove = function (key) {
            this.domStorage_.removeItem(this.prefixedName_(key));
        };
        DOMStorageWrapper.prototype.prefixedName_ = function (name) {
            return this.prefix_ + name;
        };
        DOMStorageWrapper.prototype.toString = function () {
            return this.domStorage_.toString();
        };
        return DOMStorageWrapper;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An in-memory storage implementation that matches the API of DOMStorageWrapper
     * (TODO: create interface for both to implement).
     */
    var MemoryStorage = /** @class */ (function () {
        function MemoryStorage() {
            this.cache_ = {};
            this.isInMemoryStorage = true;
        }
        MemoryStorage.prototype.set = function (key, value) {
            if (value == null) {
                delete this.cache_[key];
            }
            else {
                this.cache_[key] = value;
            }
        };
        MemoryStorage.prototype.get = function (key) {
            if (contains(this.cache_, key)) {
                return this.cache_[key];
            }
            return null;
        };
        MemoryStorage.prototype.remove = function (key) {
            delete this.cache_[key];
        };
        return MemoryStorage;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.
     * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change
     * to reflect this type
     *
     * @param domStorageName Name of the underlying storage object
     *   (e.g. 'localStorage' or 'sessionStorage').
     * @return Turning off type information until a common interface is defined.
     */
    var createStoragefor = function (domStorageName) {
        try {
            // NOTE: just accessing "localStorage" or "window['localStorage']" may throw a security exception,
            // so it must be inside the try/catch.
            if (typeof window !== 'undefined' &&
                typeof window[domStorageName] !== 'undefined') {
                // Need to test cache. Just because it's here doesn't mean it works
                var domStorage = window[domStorageName];
                domStorage.setItem('firebase:sentinel', 'cache');
                domStorage.removeItem('firebase:sentinel');
                return new DOMStorageWrapper(domStorage);
            }
        }
        catch (e) { }
        // Failed to create wrapper.  Just return in-memory storage.
        // TODO: log?
        return new MemoryStorage();
    };
    /** A storage object that lasts across sessions */
    var PersistentStorage = createStoragefor('localStorage');
    /** A storage object that only lasts one session */
    var SessionStorage = createStoragefor('sessionStorage');

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var logClient = new Logger('@firebase/database');
    /**
     * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).
     */
    var LUIDGenerator = (function () {
        var id = 1;
        return function () {
            return id++;
        };
    })();
    /**
     * Sha1 hash of the input string
     * @param str The string to hash
     * @return {!string} The resulting hash
     */
    var sha1 = function (str) {
        var utf8Bytes = stringToByteArray$1(str);
        var sha1 = new Sha1();
        sha1.update(utf8Bytes);
        var sha1Bytes = sha1.digest();
        return base64.encodeByteArray(sha1Bytes);
    };
    var buildLogMessage_ = function () {
        var varArgs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            varArgs[_i] = arguments[_i];
        }
        var message = '';
        for (var i = 0; i < varArgs.length; i++) {
            var arg = varArgs[i];
            if (Array.isArray(arg) ||
                (arg &&
                    typeof arg === 'object' &&
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    typeof arg.length === 'number')) {
                message += buildLogMessage_.apply(null, arg);
            }
            else if (typeof arg === 'object') {
                message += stringify(arg);
            }
            else {
                message += arg;
            }
            message += ' ';
        }
        return message;
    };
    /**
     * Use this for all debug messages in Firebase.
     */
    var logger = null;
    /**
     * Flag to check for log availability on first log message
     */
    var firstLog_ = true;
    /**
     * The implementation of Firebase.enableLogging (defined here to break dependencies)
     * @param logger_ A flag to turn on logging, or a custom logger
     * @param persistent Whether or not to persist logging settings across refreshes
     */
    var enableLogging = function (logger_, persistent) {
        assert(!persistent || logger_ === true || logger_ === false, "Can't turn on custom loggers persistently.");
        if (logger_ === true) {
            logClient.logLevel = LogLevel.VERBOSE;
            logger = logClient.log.bind(logClient);
            if (persistent) {
                SessionStorage.set('logging_enabled', true);
            }
        }
        else if (typeof logger_ === 'function') {
            logger = logger_;
        }
        else {
            logger = null;
            SessionStorage.remove('logging_enabled');
        }
    };
    var log = function () {
        var varArgs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            varArgs[_i] = arguments[_i];
        }
        if (firstLog_ === true) {
            firstLog_ = false;
            if (logger === null && SessionStorage.get('logging_enabled') === true) {
                enableLogging(true);
            }
        }
        if (logger) {
            var message = buildLogMessage_.apply(null, varArgs);
            logger(message);
        }
    };
    var logWrapper = function (prefix) {
        return function () {
            var varArgs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                varArgs[_i] = arguments[_i];
            }
            log.apply(void 0, __spread([prefix], varArgs));
        };
    };
    var error = function () {
        var varArgs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            varArgs[_i] = arguments[_i];
        }
        var message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_.apply(void 0, __spread(varArgs));
        logClient.error(message);
    };
    var fatal = function () {
        var varArgs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            varArgs[_i] = arguments[_i];
        }
        var message = "FIREBASE FATAL ERROR: " + buildLogMessage_.apply(void 0, __spread(varArgs));
        logClient.error(message);
        throw new Error(message);
    };
    var warn = function () {
        var varArgs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            varArgs[_i] = arguments[_i];
        }
        var message = 'FIREBASE WARNING: ' + buildLogMessage_.apply(void 0, __spread(varArgs));
        logClient.warn(message);
    };
    /**
     * Logs a warning if the containing page uses https. Called when a call to new Firebase
     * does not use https.
     */
    var warnIfPageIsSecure = function () {
        // Be very careful accessing browser globals. Who knows what may or may not exist.
        if (typeof window !== 'undefined' &&
            window.location &&
            window.location.protocol &&
            window.location.protocol.indexOf('https:') !== -1) {
            warn('Insecure Firebase access from a secure page. ' +
                'Please use https in calls to new Firebase().');
        }
    };
    /**
     * Returns true if data is NaN, or +/- Infinity.
     */
    var isInvalidJSONNumber = function (data) {
        return (typeof data === 'number' &&
            (data !== data || // NaN
                data === Number.POSITIVE_INFINITY ||
                data === Number.NEGATIVE_INFINITY));
    };
    var executeWhenDOMReady = function (fn) {
        if ( document.readyState === 'complete') {
            fn();
        }
        else {
            // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which
            // fire before onload), but fall back to onload.
            var called_1 = false;
            var wrappedFn_1 = function () {
                if (!document.body) {
                    setTimeout(wrappedFn_1, Math.floor(10));
                    return;
                }
                if (!called_1) {
                    called_1 = true;
                    fn();
                }
            };
            if (document.addEventListener) {
                document.addEventListener('DOMContentLoaded', wrappedFn_1, false);
                // fallback to onload.
                window.addEventListener('load', wrappedFn_1, false);
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
            }
            else if (document.attachEvent) {
                // IE.
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                document.attachEvent('onreadystatechange', function () {
                    if (document.readyState === 'complete') {
                        wrappedFn_1();
                    }
                });
                // fallback to onload.
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                window.attachEvent('onload', wrappedFn_1);
                // jQuery has an extra hack for IE that we could employ (based on
                // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.
                // I'm hoping we don't need it.
            }
        }
    };
    /**
     * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names
     */
    var MIN_NAME = '[MIN_NAME]';
    /**
     * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names
     */
    var MAX_NAME = '[MAX_NAME]';
    /**
     * Compares valid Firebase key names, plus min and max name
     */
    var nameCompare = function (a, b) {
        if (a === b) {
            return 0;
        }
        else if (a === MIN_NAME || b === MAX_NAME) {
            return -1;
        }
        else if (b === MIN_NAME || a === MAX_NAME) {
            return 1;
        }
        else {
            var aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);
            if (aAsInt !== null) {
                if (bAsInt !== null) {
                    return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;
                }
                else {
                    return -1;
                }
            }
            else if (bAsInt !== null) {
                return 1;
            }
            else {
                return a < b ? -1 : 1;
            }
        }
    };
    /**
     * @return {!number} comparison result.
     */
    var stringCompare = function (a, b) {
        if (a === b) {
            return 0;
        }
        else if (a < b) {
            return -1;
        }
        else {
            return 1;
        }
    };
    var requireKey = function (key, obj) {
        if (obj && key in obj) {
            return obj[key];
        }
        else {
            throw new Error('Missing required key (' + key + ') in object: ' + stringify(obj));
        }
    };
    var ObjectToUniqueKey = function (obj) {
        if (typeof obj !== 'object' || obj === null) {
            return stringify(obj);
        }
        var keys = [];
        // eslint-disable-next-line guard-for-in
        for (var k in obj) {
            keys.push(k);
        }
        // Export as json, but with the keys sorted.
        keys.sort();
        var key = '{';
        for (var i = 0; i < keys.length; i++) {
            if (i !== 0) {
                key += ',';
            }
            key += stringify(keys[i]);
            key += ':';
            key += ObjectToUniqueKey(obj[keys[i]]);
        }
        key += '}';
        return key;
    };
    /**
     * Splits a string into a number of smaller segments of maximum size
     * @param str The string
     * @param segsize The maximum number of chars in the string.
     * @return The string, split into appropriately-sized chunks
     */
    var splitStringBySize = function (str, segsize) {
        var len = str.length;
        if (len <= segsize) {
            return [str];
        }
        var dataSegs = [];
        for (var c = 0; c < len; c += segsize) {
            if (c + segsize > len) {
                dataSegs.push(str.substring(c, len));
            }
            else {
                dataSegs.push(str.substring(c, c + segsize));
            }
        }
        return dataSegs;
    };
    /**
     * Apply a function to each (key, value) pair in an object or
     * apply a function to each (index, value) pair in an array
     * @param obj The object or array to iterate over
     * @param fn The function to apply
     */
    function each(obj, fn) {
        for (var key in obj) {
            if (obj.hasOwnProperty(key)) {
                fn(key, obj[key]);
            }
        }
    }
    /**
     * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)
     * I made one modification at the end and removed the NaN / Infinity
     * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.
     * @param v A double
     *
     */
    var doubleToIEEE754String = function (v) {
        assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL
        var ebits = 11, fbits = 52;
        var bias = (1 << (ebits - 1)) - 1;
        var s, e, f, ln, i;
        // Compute sign, exponent, fraction
        // Skip NaN / Infinity handling --MJL.
        if (v === 0) {
            e = 0;
            f = 0;
            s = 1 / v === -Infinity ? 1 : 0;
        }
        else {
            s = v < 0;
            v = Math.abs(v);
            if (v >= Math.pow(2, 1 - bias)) {
                // Normalized
                ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);
                e = ln + bias;
                f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));
            }
            else {
                // Denormalized
                e = 0;
                f = Math.round(v / Math.pow(2, 1 - bias - fbits));
            }
        }
        // Pack sign, exponent, fraction
        var bits = [];
        for (i = fbits; i; i -= 1) {
            bits.push(f % 2 ? 1 : 0);
            f = Math.floor(f / 2);
        }
        for (i = ebits; i; i -= 1) {
            bits.push(e % 2 ? 1 : 0);
            e = Math.floor(e / 2);
        }
        bits.push(s ? 1 : 0);
        bits.reverse();
        var str = bits.join('');
        // Return the data as a hex string. --MJL
        var hexByteString = '';
        for (i = 0; i < 64; i += 8) {
            var hexByte = parseInt(str.substr(i, 8), 2).toString(16);
            if (hexByte.length === 1) {
                hexByte = '0' + hexByte;
            }
            hexByteString = hexByteString + hexByte;
        }
        return hexByteString.toLowerCase();
    };
    /**
     * Used to detect if we're in a Chrome content script (which executes in an
     * isolated environment where long-polling doesn't work).
     */
    var isChromeExtensionContentScript = function () {
        return !!(typeof window === 'object' &&
            window['chrome'] &&
            window['chrome']['extension'] &&
            !/^chrome/.test(window.location.href));
    };
    /**
     * Used to detect if we're in a Windows 8 Store app.
     */
    var isWindowsStoreApp = function () {
        // Check for the presence of a couple WinRT globals
        return typeof Windows === 'object' && typeof Windows.UI === 'object';
    };
    /**
     * Converts a server error code to a Javascript Error
     */
    var errorForServerCode = function (code, query) {
        var reason = 'Unknown Error';
        if (code === 'too_big') {
            reason =
                'The data requested exceeds the maximum size ' +
                    'that can be accessed with a single request.';
        }
        else if (code === 'permission_denied') {
            reason = "Client doesn't have permission to access the desired data.";
        }
        else if (code === 'unavailable') {
            reason = 'The service is unavailable';
        }
        var error = new Error(code + ' at ' + query.path.toString() + ': ' + reason);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        error.code = code.toUpperCase();
        return error;
    };
    /**
     * Used to test for integer-looking strings
     */
    var INTEGER_REGEXP_ = new RegExp('^-?(0*)\\d{1,10}$');
    /**
     * For use in keys, the minimum possible 32-bit integer.
     */
    var INTEGER_32_MIN = -2147483648;
    /**
     * For use in kyes, the maximum possible 32-bit integer.
     */
    var INTEGER_32_MAX = 2147483647;
    /**
     * If the string contains a 32-bit integer, return it.  Else return null.
     */
    var tryParseInt = function (str) {
        if (INTEGER_REGEXP_.test(str)) {
            var intVal = Number(str);
            if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {
                return intVal;
            }
        }
        return null;
    };
    /**
     * Helper to run some code but catch any exceptions and re-throw them later.
     * Useful for preventing user callbacks from breaking internal code.
     *
     * Re-throwing the exception from a setTimeout is a little evil, but it's very
     * convenient (we don't have to try to figure out when is a safe point to
     * re-throw it), and the behavior seems reasonable:
     *
     * * If you aren't pausing on exceptions, you get an error in the console with
     *   the correct stack trace.
     * * If you're pausing on all exceptions, the debugger will pause on your
     *   exception and then again when we rethrow it.
     * * If you're only pausing on uncaught exceptions, the debugger will only pause
     *   on us re-throwing it.
     *
     * @param fn The code to guard.
     */
    var exceptionGuard = function (fn) {
        try {
            fn();
        }
        catch (e) {
            // Re-throw exception when it's safe.
            setTimeout(function () {
                // It used to be that "throw e" would result in a good console error with
                // relevant context, but as of Chrome 39, you just get the firebase.js
                // file/line number where we re-throw it, which is useless. So we log
                // e.stack explicitly.
                var stack = e.stack || '';
                warn('Exception was thrown by user callback.', stack);
                throw e;
            }, Math.floor(0));
        }
    };
    /**
     * @return {boolean} true if we think we're currently being crawled.
     */
    var beingCrawled = function () {
        var userAgent = (typeof window === 'object' &&
            window['navigator'] &&
            window['navigator']['userAgent']) ||
            '';
        // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we
        // believe to support JavaScript/AJAX rendering.
        // NOTE: Google Webmaster Tools doesn't really belong, but their "This is how a visitor to your website
        // would have seen the page" is flaky if we don't treat it as a crawler.
        return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);
    };
    /**
     * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.
     *
     * It is removed with clearTimeout() as normal.
     *
     * @param fn Function to run.
     * @param time Milliseconds to wait before running.
     * @return The setTimeout() return value.
     */
    var setTimeoutNonBlocking = function (fn, time) {
        var timeout = setTimeout(fn, time);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        if (typeof timeout === 'object' && timeout['unref']) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            timeout['unref']();
        }
        return timeout;
    };

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An immutable object representing a parsed path.  It's immutable so that you
     * can pass them around to other functions without worrying about them changing
     * it.
     */
    var Path = /** @class */ (function () {
        /**
         * @param pathOrString Path string to parse, or another path, or the raw
         * tokens array
         */
        function Path(pathOrString, pieceNum) {
            if (pieceNum === void 0) {
                this.pieces_ = pathOrString.split('/');
                // Remove empty pieces.
                var copyTo = 0;
                for (var i = 0; i < this.pieces_.length; i++) {
                    if (this.pieces_[i].length > 0) {
                        this.pieces_[copyTo] = this.pieces_[i];
                        copyTo++;
                    }
                }
                this.pieces_.length = copyTo;
                this.pieceNum_ = 0;
            }
            else {
                this.pieces_ = pathOrString;
                this.pieceNum_ = pieceNum;
            }
        }
        Path.prototype.toString = function () {
            var pathString = '';
            for (var i = this.pieceNum_; i < this.pieces_.length; i++) {
                if (this.pieces_[i] !== '') {
                    pathString += '/' + this.pieces_[i];
                }
            }
            return pathString || '/';
        };
        return Path;
    }());
    function newEmptyPath() {
        return new Path('');
    }
    function pathGetFront(path) {
        if (path.pieceNum_ >= path.pieces_.length) {
            return null;
        }
        return path.pieces_[path.pieceNum_];
    }
    /**
     * @return The number of segments in this path
     */
    function pathGetLength(path) {
        return path.pieces_.length - path.pieceNum_;
    }
    function pathPopFront(path) {
        var pieceNum = path.pieceNum_;
        if (pieceNum < path.pieces_.length) {
            pieceNum++;
        }
        return new Path(path.pieces_, pieceNum);
    }
    function pathGetBack(path) {
        if (path.pieceNum_ < path.pieces_.length) {
            return path.pieces_[path.pieces_.length - 1];
        }
        return null;
    }
    function pathToUrlEncodedString(path) {
        var pathString = '';
        for (var i = path.pieceNum_; i < path.pieces_.length; i++) {
            if (path.pieces_[i] !== '') {
                pathString += '/' + encodeURIComponent(String(path.pieces_[i]));
            }
        }
        return pathString || '/';
    }
    /**
     * Shallow copy of the parts of the path.
     *
     */
    function pathSlice(path, begin) {
        if (begin === void 0) { begin = 0; }
        return path.pieces_.slice(path.pieceNum_ + begin);
    }
    function pathParent(path) {
        if (path.pieceNum_ >= path.pieces_.length) {
            return null;
        }
        var pieces = [];
        for (var i = path.pieceNum_; i < path.pieces_.length - 1; i++) {
            pieces.push(path.pieces_[i]);
        }
        return new Path(pieces, 0);
    }
    function pathChild(path, childPathObj) {
        var pieces = [];
        for (var i = path.pieceNum_; i < path.pieces_.length; i++) {
            pieces.push(path.pieces_[i]);
        }
        if (childPathObj instanceof Path) {
            for (var i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {
                pieces.push(childPathObj.pieces_[i]);
            }
        }
        else {
            var childPieces = childPathObj.split('/');
            for (var i = 0; i < childPieces.length; i++) {
                if (childPieces[i].length > 0) {
                    pieces.push(childPieces[i]);
                }
            }
        }
        return new Path(pieces, 0);
    }
    /**
     * @return True if there are no segments in this path
     */
    function pathIsEmpty(path) {
        return path.pieceNum_ >= path.pieces_.length;
    }
    /**
     * @return The path from outerPath to innerPath
     */
    function newRelativePath(outerPath, innerPath) {
        var outer = pathGetFront(outerPath), inner = pathGetFront(innerPath);
        if (outer === null) {
            return innerPath;
        }
        else if (outer === inner) {
            return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));
        }
        else {
            throw new Error('INTERNAL ERROR: innerPath (' +
                innerPath +
                ') is not within ' +
                'outerPath (' +
                outerPath +
                ')');
        }
    }
    /**
     * @return -1, 0, 1 if left is less, equal, or greater than the right.
     */
    function pathCompare(left, right) {
        var leftKeys = pathSlice(left, 0);
        var rightKeys = pathSlice(right, 0);
        for (var i = 0; i < leftKeys.length && i < rightKeys.length; i++) {
            var cmp = nameCompare(leftKeys[i], rightKeys[i]);
            if (cmp !== 0) {
                return cmp;
            }
        }
        if (leftKeys.length === rightKeys.length) {
            return 0;
        }
        return leftKeys.length < rightKeys.length ? -1 : 1;
    }
    /**
     * @return true if paths are the same.
     */
    function pathEquals(path, other) {
        if (pathGetLength(path) !== pathGetLength(other)) {
            return false;
        }
        for (var i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {
            if (path.pieces_[i] !== other.pieces_[j]) {
                return false;
            }
        }
        return true;
    }
    /**
     * @return True if this path is a parent (or the same as) other
     */
    function pathContains(path, other) {
        var i = path.pieceNum_;
        var j = other.pieceNum_;
        if (pathGetLength(path) > pathGetLength(other)) {
            return false;
        }
        while (i < path.pieces_.length) {
            if (path.pieces_[i] !== other.pieces_[j]) {
                return false;
            }
            ++i;
            ++j;
        }
        return true;
    }
    /**
     * Dynamic (mutable) path used to count path lengths.
     *
     * This class is used to efficiently check paths for valid
     * length (in UTF8 bytes) and depth (used in path validation).
     *
     * Throws Error exception if path is ever invalid.
     *
     * The definition of a path always begins with '/'.
     */
    var ValidationPath = /** @class */ (function () {
        /**
         * @param path Initial Path.
         * @param errorPrefix_ Prefix for any error messages.
         */
        function ValidationPath(path, errorPrefix_) {
            this.errorPrefix_ = errorPrefix_;
            this.parts_ = pathSlice(path, 0);
            /** Initialize to number of '/' chars needed in path. */
            this.byteLength_ = Math.max(1, this.parts_.length);
            for (var i = 0; i < this.parts_.length; i++) {
                this.byteLength_ += stringLength(this.parts_[i]);
            }
            this.checkValid_();
        }
        Object.defineProperty(ValidationPath, "MAX_PATH_DEPTH", {
            /** @const {number} Maximum key depth. */
            get: function () {
                return 32;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ValidationPath, "MAX_PATH_LENGTH_BYTES", {
            /** @const {number} Maximum number of (UTF8) bytes in a Firebase path. */
            get: function () {
                return 768;
            },
            enumerable: false,
            configurable: true
        });
        /** @param child */
        ValidationPath.prototype.push = function (child) {
            // Count the needed '/'
            if (this.parts_.length > 0) {
                this.byteLength_ += 1;
            }
            this.parts_.push(child);
            this.byteLength_ += stringLength(child);
            this.checkValid_();
        };
        ValidationPath.prototype.pop = function () {
            var last = this.parts_.pop();
            this.byteLength_ -= stringLength(last);
            // Un-count the previous '/'
            if (this.parts_.length > 0) {
                this.byteLength_ -= 1;
            }
        };
        ValidationPath.prototype.checkValid_ = function () {
            if (this.byteLength_ > ValidationPath.MAX_PATH_LENGTH_BYTES) {
                throw new Error(this.errorPrefix_ +
                    'has a key path longer than ' +
                    ValidationPath.MAX_PATH_LENGTH_BYTES +
                    ' bytes (' +
                    this.byteLength_ +
                    ').');
            }
            if (this.parts_.length > ValidationPath.MAX_PATH_DEPTH) {
                throw new Error(this.errorPrefix_ +
                    'path specified exceeds the maximum depth that can be written (' +
                    ValidationPath.MAX_PATH_DEPTH +
                    ') or object contains a cycle ' +
                    this.toErrorString());
            }
        };
        /**
         * String for use in error messages - uses '.' notation for path.
         */
        ValidationPath.prototype.toErrorString = function () {
            if (this.parts_.length === 0) {
                return '';
            }
            return "in property '" + this.parts_.join('.') + "'";
        };
        return ValidationPath;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var MAX_NODE;
    function setMaxNode(val) {
        MAX_NODE = val;
    }
    var priorityHashText = function (priority) {
        if (typeof priority === 'number') {
            return 'number:' + doubleToIEEE754String(priority);
        }
        else {
            return 'string:' + priority;
        }
    };
    /**
     * Validates that a priority snapshot Node is valid.
     */
    var validatePriorityNode = function (priorityNode) {
        if (priorityNode.isLeafNode()) {
            var val = priorityNode.val();
            assert(typeof val === 'string' ||
                typeof val === 'number' ||
                (typeof val === 'object' && contains(val, '.sv')), 'Priority must be a string or number.');
        }
        else {
            assert(priorityNode === MAX_NODE || priorityNode.isEmpty(), 'priority of unexpected type.');
        }
        // Don't call getPriority() on MAX_NODE to avoid hitting assertion.
        assert(priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(), "Priority nodes can't have a priority of their own.");
    };

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var __childrenNodeConstructor;
    /**
     * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It
     * implements Node and stores the value of the node (a string,
     * number, or boolean) accessible via getValue().
     */
    var LeafNode = /** @class */ (function () {
        /**
         * @param value_ The value to store in this leaf node. The object type is
         * possible in the event of a deferred value
         * @param priorityNode_ The priority of this node.
         */
        function LeafNode(value_, priorityNode_) {
            if (priorityNode_ === void 0) { priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE; }
            this.value_ = value_;
            this.priorityNode_ = priorityNode_;
            this.lazyHash_ = null;
            assert(this.value_ !== undefined && this.value_ !== null, "LeafNode shouldn't be created with null/undefined value.");
            validatePriorityNode(this.priorityNode_);
        }
        Object.defineProperty(LeafNode, "__childrenNodeConstructor", {
            get: function () {
                return __childrenNodeConstructor;
            },
            set: function (val) {
                __childrenNodeConstructor = val;
            },
            enumerable: false,
            configurable: true
        });
        /** @inheritDoc */
        LeafNode.prototype.isLeafNode = function () {
            return true;
        };
        /** @inheritDoc */
        LeafNode.prototype.getPriority = function () {
            return this.priorityNode_;
        };
        /** @inheritDoc */
        LeafNode.prototype.updatePriority = function (newPriorityNode) {
            return new LeafNode(this.value_, newPriorityNode);
        };
        /** @inheritDoc */
        LeafNode.prototype.getImmediateChild = function (childName) {
            // Hack to treat priority as a regular child
            if (childName === '.priority') {
                return this.priorityNode_;
            }
            else {
                return LeafNode.__childrenNodeConstructor.EMPTY_NODE;
            }
        };
        /** @inheritDoc */
        LeafNode.prototype.getChild = function (path) {
            if (pathIsEmpty(path)) {
                return this;
            }
            else if (pathGetFront(path) === '.priority') {
                return this.priorityNode_;
            }
            else {
                return LeafNode.__childrenNodeConstructor.EMPTY_NODE;
            }
        };
        /**
         * @inheritDoc
         */
        LeafNode.prototype.hasChild = function () {
            return false;
        };
        /** @inheritDoc */
        LeafNode.prototype.getPredecessorChildName = function (childName, childNode) {
            return null;
        };
        /** @inheritDoc */
        LeafNode.prototype.updateImmediateChild = function (childName, newChildNode) {
            if (childName === '.priority') {
                return this.updatePriority(newChildNode);
            }
            else if (newChildNode.isEmpty() && childName !== '.priority') {
                return this;
            }
            else {
                return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);
            }
        };
        /** @inheritDoc */
        LeafNode.prototype.updateChild = function (path, newChildNode) {
            var front = pathGetFront(path);
            if (front === null) {
                return newChildNode;
            }
            else if (newChildNode.isEmpty() && front !== '.priority') {
                return this;
            }
            else {
                assert(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');
                return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));
            }
        };
        /** @inheritDoc */
        LeafNode.prototype.isEmpty = function () {
            return false;
        };
        /** @inheritDoc */
        LeafNode.prototype.numChildren = function () {
            return 0;
        };
        /** @inheritDoc */
        LeafNode.prototype.forEachChild = function (index, action) {
            return false;
        };
        /**
         * @inheritDoc
         */
        LeafNode.prototype.val = function (exportFormat) {
            if (exportFormat && !this.getPriority().isEmpty()) {
                return {
                    '.value': this.getValue(),
                    '.priority': this.getPriority().val()
                };
            }
            else {
                return this.getValue();
            }
        };
        /** @inheritDoc */
        LeafNode.prototype.hash = function () {
            if (this.lazyHash_ === null) {
                var toHash = '';
                if (!this.priorityNode_.isEmpty()) {
                    toHash +=
                        'priority:' +
                            priorityHashText(this.priorityNode_.val()) +
                            ':';
                }
                var type = typeof this.value_;
                toHash += type + ':';
                if (type === 'number') {
                    toHash += doubleToIEEE754String(this.value_);
                }
                else {
                    toHash += this.value_;
                }
                this.lazyHash_ = sha1(toHash);
            }
            return this.lazyHash_;
        };
        /**
         * Returns the value of the leaf node.
         * @return The value of the node.
         */
        LeafNode.prototype.getValue = function () {
            return this.value_;
        };
        /**
         * @inheritDoc
         */
        LeafNode.prototype.compareTo = function (other) {
            if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {
                return 1;
            }
            else if (other instanceof LeafNode.__childrenNodeConstructor) {
                return -1;
            }
            else {
                assert(other.isLeafNode(), 'Unknown node type');
                return this.compareToLeafNode_(other);
            }
        };
        /**
         * Comparison specifically for two leaf nodes
         */
        LeafNode.prototype.compareToLeafNode_ = function (otherLeaf) {
            var otherLeafType = typeof otherLeaf.value_;
            var thisLeafType = typeof this.value_;
            var otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);
            var thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);
            assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);
            assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);
            if (otherIndex === thisIndex) {
                // Same type, compare values
                if (thisLeafType === 'object') {
                    // Deferred value nodes are all equal, but we should also never get to this point...
                    return 0;
                }
                else {
                    // Note that this works because true > false, all others are number or string comparisons
                    if (this.value_ < otherLeaf.value_) {
                        return -1;
                    }
                    else if (this.value_ === otherLeaf.value_) {
                        return 0;
                    }
                    else {
                        return 1;
                    }
                }
            }
            else {
                return thisIndex - otherIndex;
            }
        };
        /**
         * @inheritDoc
         */
        LeafNode.prototype.withIndex = function () {
            return this;
        };
        /**
         * @inheritDoc
         */
        LeafNode.prototype.isIndexed = function () {
            return true;
        };
        /**
         * @inheritDoc
         */
        LeafNode.prototype.equals = function (other) {
            /**
             * @inheritDoc
             */
            if (other === this) {
                return true;
            }
            else if (other.isLeafNode()) {
                var otherLeaf = other;
                return (this.value_ === otherLeaf.value_ &&
                    this.priorityNode_.equals(otherLeaf.priorityNode_));
            }
            else {
                return false;
            }
        };
        /**
         * The sort order for comparing leaf nodes of different types. If two leaf nodes have
         * the same type, the comparison falls back to their value
         */
        LeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];
        return LeafNode;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An iterator over an LLRBNode.
     */
    var SortedMapIterator = /** @class */ (function () {
        /**
         * @param node Node to iterate.
         * @param isReverse_ Whether or not to iterate in reverse
         * @param resultGenerator_
         */
        function SortedMapIterator(node, startKey, comparator, isReverse_, resultGenerator_) {
            if (resultGenerator_ === void 0) { resultGenerator_ = null; }
            this.isReverse_ = isReverse_;
            this.resultGenerator_ = resultGenerator_;
            this.nodeStack_ = [];
            var cmp = 1;
            while (!node.isEmpty()) {
                node = node;
                cmp = startKey ? comparator(node.key, startKey) : 1;
                // flip the comparison if we're going in reverse
                if (isReverse_) {
                    cmp *= -1;
                }
                if (cmp < 0) {
                    // This node is less than our start key. ignore it
                    if (this.isReverse_) {
                        node = node.left;
                    }
                    else {
                        node = node.right;
                    }
                }
                else if (cmp === 0) {
                    // This node is exactly equal to our start key. Push it on the stack, but stop iterating;
                    this.nodeStack_.push(node);
                    break;
                }
                else {
                    // This node is greater than our start key, add it to the stack and move to the next one
                    this.nodeStack_.push(node);
                    if (this.isReverse_) {
                        node = node.right;
                    }
                    else {
                        node = node.left;
                    }
                }
            }
        }
        SortedMapIterator.prototype.getNext = function () {
            if (this.nodeStack_.length === 0) {
                return null;
            }
            var node = this.nodeStack_.pop();
            var result;
            if (this.resultGenerator_) {
                result = this.resultGenerator_(node.key, node.value);
            }
            else {
                result = { key: node.key, value: node.value };
            }
            if (this.isReverse_) {
                node = node.left;
                while (!node.isEmpty()) {
                    this.nodeStack_.push(node);
                    node = node.right;
                }
            }
            else {
                node = node.right;
                while (!node.isEmpty()) {
                    this.nodeStack_.push(node);
                    node = node.left;
                }
            }
            return result;
        };
        SortedMapIterator.prototype.hasNext = function () {
            return this.nodeStack_.length > 0;
        };
        SortedMapIterator.prototype.peek = function () {
            if (this.nodeStack_.length === 0) {
                return null;
            }
            var node = this.nodeStack_[this.nodeStack_.length - 1];
            if (this.resultGenerator_) {
                return this.resultGenerator_(node.key, node.value);
            }
            else {
                return { key: node.key, value: node.value };
            }
        };
        return SortedMapIterator;
    }());
    /**
     * Represents a node in a Left-leaning Red-Black tree.
     */
    var LLRBNode = /** @class */ (function () {
        /**
         * @param key Key associated with this node.
         * @param value Value associated with this node.
         * @param color Whether this node is red.
         * @param left Left child.
         * @param right Right child.
         */
        function LLRBNode(key, value, color, left, right) {
            this.key = key;
            this.value = value;
            this.color = color != null ? color : LLRBNode.RED;
            this.left =
                left != null ? left : SortedMap.EMPTY_NODE;
            this.right =
                right != null ? right : SortedMap.EMPTY_NODE;
        }
        /**
         * Returns a copy of the current node, optionally replacing pieces of it.
         *
         * @param key New key for the node, or null.
         * @param value New value for the node, or null.
         * @param color New color for the node, or null.
         * @param left New left child for the node, or null.
         * @param right New right child for the node, or null.
         * @return The node copy.
         */
        LLRBNode.prototype.copy = function (key, value, color, left, right) {
            return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);
        };
        /**
         * @return The total number of nodes in the tree.
         */
        LLRBNode.prototype.count = function () {
            return this.left.count() + 1 + this.right.count();
        };
        /**
         * @return True if the tree is empty.
         */
        LLRBNode.prototype.isEmpty = function () {
            return false;
        };
        /**
         * Traverses the tree in key order and calls the specified action function
         * for each node.
         *
         * @param action Callback function to be called for each
         *   node.  If it returns true, traversal is aborted.
         * @return The first truthy value returned by action, or the last falsey
         *   value returned by action
         */
        LLRBNode.prototype.inorderTraversal = function (action) {
            return (this.left.inorderTraversal(action) ||
                !!action(this.key, this.value) ||
                this.right.inorderTraversal(action));
        };
        /**
         * Traverses the tree in reverse key order and calls the specified action function
         * for each node.
         *
         * @param action Callback function to be called for each
         * node.  If it returns true, traversal is aborted.
         * @return True if traversal was aborted.
         */
        LLRBNode.prototype.reverseTraversal = function (action) {
            return (this.right.reverseTraversal(action) ||
                action(this.key, this.value) ||
                this.left.reverseTraversal(action));
        };
        /**
         * @return The minimum node in the tree.
         */
        LLRBNode.prototype.min_ = function () {
            if (this.left.isEmpty()) {
                return this;
            }
            else {
                return this.left.min_();
            }
        };
        /**
         * @return The maximum key in the tree.
         */
        LLRBNode.prototype.minKey = function () {
            return this.min_().key;
        };
        /**
         * @return The maximum key in the tree.
         */
        LLRBNode.prototype.maxKey = function () {
            if (this.right.isEmpty()) {
                return this.key;
            }
            else {
                return this.right.maxKey();
            }
        };
        /**
         * @param key Key to insert.
         * @param value Value to insert.
         * @param comparator Comparator.
         * @return New tree, with the key/value added.
         */
        LLRBNode.prototype.insert = function (key, value, comparator) {
            var n = this;
            var cmp = comparator(key, n.key);
            if (cmp < 0) {
                n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);
            }
            else if (cmp === 0) {
                n = n.copy(null, value, null, null, null);
            }
            else {
                n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));
            }
            return n.fixUp_();
        };
        /**
         * @return New tree, with the minimum key removed.
         */
        LLRBNode.prototype.removeMin_ = function () {
            if (this.left.isEmpty()) {
                return SortedMap.EMPTY_NODE;
            }
            var n = this;
            if (!n.left.isRed_() && !n.left.left.isRed_()) {
                n = n.moveRedLeft_();
            }
            n = n.copy(null, null, null, n.left.removeMin_(), null);
            return n.fixUp_();
        };
        /**
         * @param key The key of the item to remove.
         * @param comparator Comparator.
         * @return New tree, with the specified item removed.
         */
        LLRBNode.prototype.remove = function (key, comparator) {
            var n, smallest;
            n = this;
            if (comparator(key, n.key) < 0) {
                if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {
                    n = n.moveRedLeft_();
                }
                n = n.copy(null, null, null, n.left.remove(key, comparator), null);
            }
            else {
                if (n.left.isRed_()) {
                    n = n.rotateRight_();
                }
                if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {
                    n = n.moveRedRight_();
                }
                if (comparator(key, n.key) === 0) {
                    if (n.right.isEmpty()) {
                        return SortedMap.EMPTY_NODE;
                    }
                    else {
                        smallest = n.right.min_();
                        n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());
                    }
                }
                n = n.copy(null, null, null, null, n.right.remove(key, comparator));
            }
            return n.fixUp_();
        };
        /**
         * @return Whether this is a RED node.
         */
        LLRBNode.prototype.isRed_ = function () {
            return this.color;
        };
        /**
         * @return New tree after performing any needed rotations.
         */
        LLRBNode.prototype.fixUp_ = function () {
            var n = this;
            if (n.right.isRed_() && !n.left.isRed_()) {
                n = n.rotateLeft_();
            }
            if (n.left.isRed_() && n.left.left.isRed_()) {
                n = n.rotateRight_();
            }
            if (n.left.isRed_() && n.right.isRed_()) {
                n = n.colorFlip_();
            }
            return n;
        };
        /**
         * @return New tree, after moveRedLeft.
         */
        LLRBNode.prototype.moveRedLeft_ = function () {
            var n = this.colorFlip_();
            if (n.right.left.isRed_()) {
                n = n.copy(null, null, null, null, n.right.rotateRight_());
                n = n.rotateLeft_();
                n = n.colorFlip_();
            }
            return n;
        };
        /**
         * @return New tree, after moveRedRight.
         */
        LLRBNode.prototype.moveRedRight_ = function () {
            var n = this.colorFlip_();
            if (n.left.left.isRed_()) {
                n = n.rotateRight_();
                n = n.colorFlip_();
            }
            return n;
        };
        /**
         * @return New tree, after rotateLeft.
         */
        LLRBNode.prototype.rotateLeft_ = function () {
            var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);
            return this.right.copy(null, null, this.color, nl, null);
        };
        /**
         * @return New tree, after rotateRight.
         */
        LLRBNode.prototype.rotateRight_ = function () {
            var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);
            return this.left.copy(null, null, this.color, null, nr);
        };
        /**
         * @return Newt ree, after colorFlip.
         */
        LLRBNode.prototype.colorFlip_ = function () {
            var left = this.left.copy(null, null, !this.left.color, null, null);
            var right = this.right.copy(null, null, !this.right.color, null, null);
            return this.copy(null, null, !this.color, left, right);
        };
        /**
         * For testing.
         *
         * @return True if all is well.
         */
        LLRBNode.prototype.checkMaxDepth_ = function () {
            var blackDepth = this.check_();
            return Math.pow(2.0, blackDepth) <= this.count() + 1;
        };
        LLRBNode.prototype.check_ = function () {
            if (this.isRed_() && this.left.isRed_()) {
                throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');
            }
            if (this.right.isRed_()) {
                throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');
            }
            var blackDepth = this.left.check_();
            if (blackDepth !== this.right.check_()) {
                throw new Error('Black depths differ');
            }
            else {
                return blackDepth + (this.isRed_() ? 0 : 1);
            }
        };
        LLRBNode.RED = true;
        LLRBNode.BLACK = false;
        return LLRBNode;
    }());
    /**
     * Represents an empty node (a leaf node in the Red-Black Tree).
     */
    var LLRBEmptyNode = /** @class */ (function () {
        function LLRBEmptyNode() {
        }
        /**
         * Returns a copy of the current node.
         *
         * @return The node copy.
         */
        LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {
            return this;
        };
        /**
         * Returns a copy of the tree, with the specified key/value added.
         *
         * @param key Key to be added.
         * @param value Value to be added.
         * @param comparator Comparator.
         * @return New tree, with item added.
         */
        LLRBEmptyNode.prototype.insert = function (key, value, comparator) {
            return new LLRBNode(key, value, null);
        };
        /**
         * Returns a copy of the tree, with the specified key removed.
         *
         * @param key The key to remove.
         * @param comparator Comparator.
         * @return New tree, with item removed.
         */
        LLRBEmptyNode.prototype.remove = function (key, comparator) {
            return this;
        };
        /**
         * @return The total number of nodes in the tree.
         */
        LLRBEmptyNode.prototype.count = function () {
            return 0;
        };
        /**
         * @return True if the tree is empty.
         */
        LLRBEmptyNode.prototype.isEmpty = function () {
            return true;
        };
        /**
         * Traverses the tree in key order and calls the specified action function
         * for each node.
         *
         * @param action Callback function to be called for each
         * node.  If it returns true, traversal is aborted.
         * @return True if traversal was aborted.
         */
        LLRBEmptyNode.prototype.inorderTraversal = function (action) {
            return false;
        };
        /**
         * Traverses the tree in reverse key order and calls the specified action function
         * for each node.
         *
         * @param action Callback function to be called for each
         * node.  If it returns true, traversal is aborted.
         * @return True if traversal was aborted.
         */
        LLRBEmptyNode.prototype.reverseTraversal = function (action) {
            return false;
        };
        LLRBEmptyNode.prototype.minKey = function () {
            return null;
        };
        LLRBEmptyNode.prototype.maxKey = function () {
            return null;
        };
        LLRBEmptyNode.prototype.check_ = function () {
            return 0;
        };
        /**
         * @return Whether this node is red.
         */
        LLRBEmptyNode.prototype.isRed_ = function () {
            return false;
        };
        return LLRBEmptyNode;
    }());
    /**
     * An immutable sorted map implementation, based on a Left-leaning Red-Black
     * tree.
     */
    var SortedMap = /** @class */ (function () {
        /**
         * @param comparator_ Key comparator.
         * @param root_ (Optional) Root node for the map.
         */
        function SortedMap(comparator_, root_) {
            if (root_ === void 0) { root_ = SortedMap.EMPTY_NODE; }
            this.comparator_ = comparator_;
            this.root_ = root_;
        }
        /**
         * Returns a copy of the map, with the specified key/value added or replaced.
         * (TODO: We should perhaps rename this method to 'put')
         *
         * @param key Key to be added.
         * @param value Value to be added.
         * @return New map, with item added.
         */
        SortedMap.prototype.insert = function (key, value) {
            return new SortedMap(this.comparator_, this.root_
                .insert(key, value, this.comparator_)
                .copy(null, null, LLRBNode.BLACK, null, null));
        };
        /**
         * Returns a copy of the map, with the specified key removed.
         *
         * @param key The key to remove.
         * @return New map, with item removed.
         */
        SortedMap.prototype.remove = function (key) {
            return new SortedMap(this.comparator_, this.root_
                .remove(key, this.comparator_)
                .copy(null, null, LLRBNode.BLACK, null, null));
        };
        /**
         * Returns the value of the node with the given key, or null.
         *
         * @param key The key to look up.
         * @return The value of the node with the given key, or null if the
         * key doesn't exist.
         */
        SortedMap.prototype.get = function (key) {
            var cmp;
            var node = this.root_;
            while (!node.isEmpty()) {
                cmp = this.comparator_(key, node.key);
                if (cmp === 0) {
                    return node.value;
                }
                else if (cmp < 0) {
                    node = node.left;
                }
                else if (cmp > 0) {
                    node = node.right;
                }
            }
            return null;
        };
        /**
         * Returns the key of the item *before* the specified key, or null if key is the first item.
         * @param key The key to find the predecessor of
         * @return The predecessor key.
         */
        SortedMap.prototype.getPredecessorKey = function (key) {
            var cmp, node = this.root_, rightParent = null;
            while (!node.isEmpty()) {
                cmp = this.comparator_(key, node.key);
                if (cmp === 0) {
                    if (!node.left.isEmpty()) {
                        node = node.left;
                        while (!node.right.isEmpty()) {
                            node = node.right;
                        }
                        return node.key;
                    }
                    else if (rightParent) {
                        return rightParent.key;
                    }
                    else {
                        return null; // first item.
                    }
                }
                else if (cmp < 0) {
                    node = node.left;
                }
                else if (cmp > 0) {
                    rightParent = node;
                    node = node.right;
                }
            }
            throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');
        };
        /**
         * @return True if the map is empty.
         */
        SortedMap.prototype.isEmpty = function () {
            return this.root_.isEmpty();
        };
        /**
         * @return The total number of nodes in the map.
         */
        SortedMap.prototype.count = function () {
            return this.root_.count();
        };
        /**
         * @return The minimum key in the map.
         */
        SortedMap.prototype.minKey = function () {
            return this.root_.minKey();
        };
        /**
         * @return The maximum key in the map.
         */
        SortedMap.prototype.maxKey = function () {
            return this.root_.maxKey();
        };
        /**
         * Traverses the map in key order and calls the specified action function
         * for each key/value pair.
         *
         * @param action Callback function to be called
         * for each key/value pair.  If action returns true, traversal is aborted.
         * @return The first truthy value returned by action, or the last falsey
         *   value returned by action
         */
        SortedMap.prototype.inorderTraversal = function (action) {
            return this.root_.inorderTraversal(action);
        };
        /**
         * Traverses the map in reverse key order and calls the specified action function
         * for each key/value pair.
         *
         * @param action Callback function to be called
         * for each key/value pair.  If action returns true, traversal is aborted.
         * @return True if the traversal was aborted.
         */
        SortedMap.prototype.reverseTraversal = function (action) {
            return this.root_.reverseTraversal(action);
        };
        /**
         * Returns an iterator over the SortedMap.
         * @return The iterator.
         */
        SortedMap.prototype.getIterator = function (resultGenerator) {
            return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);
        };
        SortedMap.prototype.getIteratorFrom = function (key, resultGenerator) {
            return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);
        };
        SortedMap.prototype.getReverseIteratorFrom = function (key, resultGenerator) {
            return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);
        };
        SortedMap.prototype.getReverseIterator = function (resultGenerator) {
            return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);
        };
        /**
         * Always use the same empty node, to reduce memory.
         */
        SortedMap.EMPTY_NODE = new LLRBEmptyNode();
        return SortedMap;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var NamedNode = /** @class */ (function () {
        function NamedNode(name, node) {
            this.name = name;
            this.node = node;
        }
        NamedNode.Wrap = function (name, node) {
            return new NamedNode(name, node);
        };
        return NamedNode;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var Index = /** @class */ (function () {
        function Index() {
        }
        /**
         * @return A standalone comparison function for
         * this index
         */
        Index.prototype.getCompare = function () {
            return this.compare.bind(this);
        };
        /**
         * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,
         * it's possible that the changes are isolated to parts of the snapshot that are not indexed.
         *
         *
         * @return True if the portion of the snapshot being indexed changed between oldNode and newNode
         */
        Index.prototype.indexedValueChanged = function (oldNode, newNode) {
            var oldWrapped = new NamedNode(MIN_NAME, oldNode);
            var newWrapped = new NamedNode(MIN_NAME, newNode);
            return this.compare(oldWrapped, newWrapped) !== 0;
        };
        /**
         * @return a node wrapper that will sort equal to or less than
         * any other node wrapper, using this index
         */
        Index.prototype.minPost = function () {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return NamedNode.MIN;
        };
        return Index;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var nodeFromJSON;
    var MAX_NODE$1;
    function setNodeFromJSON(val) {
        nodeFromJSON = val;
    }
    function setMaxNode$1(val) {
        MAX_NODE$1 = val;
    }
    var PriorityIndex = /** @class */ (function (_super) {
        __extends$1(PriorityIndex, _super);
        function PriorityIndex() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @inheritDoc
         */
        PriorityIndex.prototype.compare = function (a, b) {
            var aPriority = a.node.getPriority();
            var bPriority = b.node.getPriority();
            var indexCmp = aPriority.compareTo(bPriority);
            if (indexCmp === 0) {
                return nameCompare(a.name, b.name);
            }
            else {
                return indexCmp;
            }
        };
        /**
         * @inheritDoc
         */
        PriorityIndex.prototype.isDefinedOn = function (node) {
            return !node.getPriority().isEmpty();
        };
        /**
         * @inheritDoc
         */
        PriorityIndex.prototype.indexedValueChanged = function (oldNode, newNode) {
            return !oldNode.getPriority().equals(newNode.getPriority());
        };
        /**
         * @inheritDoc
         */
        PriorityIndex.prototype.minPost = function () {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return NamedNode.MIN;
        };
        /**
         * @inheritDoc
         */
        PriorityIndex.prototype.maxPost = function () {
            return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));
        };
        PriorityIndex.prototype.makePost = function (indexValue, name) {
            var priorityNode = nodeFromJSON(indexValue);
            return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));
        };
        /**
         * @return String representation for inclusion in a query spec
         */
        PriorityIndex.prototype.toString = function () {
            return '.priority';
        };
        return PriorityIndex;
    }(Index));
    var PRIORITY_INDEX = new PriorityIndex();

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var __EMPTY_NODE;
    var KeyIndex = /** @class */ (function (_super) {
        __extends$1(KeyIndex, _super);
        function KeyIndex() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(KeyIndex, "__EMPTY_NODE", {
            get: function () {
                return __EMPTY_NODE;
            },
            set: function (val) {
                __EMPTY_NODE = val;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * @inheritDoc
         */
        KeyIndex.prototype.compare = function (a, b) {
            return nameCompare(a.name, b.name);
        };
        /**
         * @inheritDoc
         */
        KeyIndex.prototype.isDefinedOn = function (node) {
            // We could probably return true here (since every node has a key), but it's never called
            // so just leaving unimplemented for now.
            throw assertionError('KeyIndex.isDefinedOn not expected to be called.');
        };
        /**
         * @inheritDoc
         */
        KeyIndex.prototype.indexedValueChanged = function (oldNode, newNode) {
            return false; // The key for a node never changes.
        };
        /**
         * @inheritDoc
         */
        KeyIndex.prototype.minPost = function () {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return NamedNode.MIN;
        };
        /**
         * @inheritDoc
         */
        KeyIndex.prototype.maxPost = function () {
            // TODO: This should really be created once and cached in a static property, but
            // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.
            return new NamedNode(MAX_NAME, __EMPTY_NODE);
        };
        KeyIndex.prototype.makePost = function (indexValue, name) {
            assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');
            // We just use empty node, but it'll never be compared, since our comparator only looks at name.
            return new NamedNode(indexValue, __EMPTY_NODE);
        };
        /**
         * @return String representation for inclusion in a query spec
         */
        KeyIndex.prototype.toString = function () {
            return '.key';
        };
        return KeyIndex;
    }(Index));
    var KEY_INDEX = new KeyIndex();

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var LOG_2 = Math.log(2);
    var Base12Num = /** @class */ (function () {
        function Base12Num(length) {
            var logBase2 = function (num) {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                return parseInt((Math.log(num) / LOG_2), 10);
            };
            var bitMask = function (bits) { return parseInt(Array(bits + 1).join('1'), 2); };
            this.count = logBase2(length + 1);
            this.current_ = this.count - 1;
            var mask = bitMask(this.count);
            this.bits_ = (length + 1) & mask;
        }
        Base12Num.prototype.nextBitIsOne = function () {
            //noinspection JSBitwiseOperatorUsage
            var result = !(this.bits_ & (0x1 << this.current_));
            this.current_--;
            return result;
        };
        return Base12Num;
    }());
    /**
     * Takes a list of child nodes and constructs a SortedSet using the given comparison
     * function
     *
     * Uses the algorithm described in the paper linked here:
     * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458
     *
     * @param childList Unsorted list of children
     * @param cmp The comparison method to be used
     * @param keyFn An optional function to extract K from a node wrapper, if K's
     * type is not NamedNode
     * @param mapSortFn An optional override for comparator used by the generated sorted map
     */
    var buildChildSet = function (childList, cmp, keyFn, mapSortFn) {
        childList.sort(cmp);
        var buildBalancedTree = function (low, high) {
            var length = high - low;
            var namedNode;
            var key;
            if (length === 0) {
                return null;
            }
            else if (length === 1) {
                namedNode = childList[low];
                key = keyFn ? keyFn(namedNode) : namedNode;
                return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                var middle = parseInt((length / 2), 10) + low;
                var left = buildBalancedTree(low, middle);
                var right = buildBalancedTree(middle + 1, high);
                namedNode = childList[middle];
                key = keyFn ? keyFn(namedNode) : namedNode;
                return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);
            }
        };
        var buildFrom12Array = function (base12) {
            var node = null;
            var root = null;
            var index = childList.length;
            var buildPennant = function (chunkSize, color) {
                var low = index - chunkSize;
                var high = index;
                index -= chunkSize;
                var childTree = buildBalancedTree(low + 1, high);
                var namedNode = childList[low];
                var key = keyFn ? keyFn(namedNode) : namedNode;
                attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));
            };
            var attachPennant = function (pennant) {
                if (node) {
                    node.left = pennant;
                    node = pennant;
                }
                else {
                    root = pennant;
                    node = pennant;
                }
            };
            for (var i = 0; i < base12.count; ++i) {
                var isOne = base12.nextBitIsOne();
                // The number of nodes taken in each slice is 2^(arr.length - (i + 1))
                var chunkSize = Math.pow(2, base12.count - (i + 1));
                if (isOne) {
                    buildPennant(chunkSize, LLRBNode.BLACK);
                }
                else {
                    // current == 2
                    buildPennant(chunkSize, LLRBNode.BLACK);
                    buildPennant(chunkSize, LLRBNode.RED);
                }
            }
            return root;
        };
        var base12 = new Base12Num(childList.length);
        var root = buildFrom12Array(base12);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return new SortedMap(mapSortFn || cmp, root);
    };

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _defaultIndexMap;
    var fallbackObject = {};
    var IndexMap = /** @class */ (function () {
        function IndexMap(indexes_, indexSet_) {
            this.indexes_ = indexes_;
            this.indexSet_ = indexSet_;
        }
        Object.defineProperty(IndexMap, "Default", {
            /**
             * The default IndexMap for nodes without a priority
             */
            get: function () {
                assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');
                _defaultIndexMap =
                    _defaultIndexMap ||
                        new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });
                return _defaultIndexMap;
            },
            enumerable: false,
            configurable: true
        });
        IndexMap.prototype.get = function (indexKey) {
            var sortedMap = safeGet(this.indexes_, indexKey);
            if (!sortedMap) {
                throw new Error('No index defined for ' + indexKey);
            }
            if (sortedMap instanceof SortedMap) {
                return sortedMap;
            }
            else {
                // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the
                // regular child map
                return null;
            }
        };
        IndexMap.prototype.hasIndex = function (indexDefinition) {
            return contains(this.indexSet_, indexDefinition.toString());
        };
        IndexMap.prototype.addIndex = function (indexDefinition, existingChildren) {
            assert(indexDefinition !== KEY_INDEX, "KeyIndex always exists and isn't meant to be added to the IndexMap.");
            var childList = [];
            var sawIndexedValue = false;
            var iter = existingChildren.getIterator(NamedNode.Wrap);
            var next = iter.getNext();
            while (next) {
                sawIndexedValue =
                    sawIndexedValue || indexDefinition.isDefinedOn(next.node);
                childList.push(next);
                next = iter.getNext();
            }
            var newIndex;
            if (sawIndexedValue) {
                newIndex = buildChildSet(childList, indexDefinition.getCompare());
            }
            else {
                newIndex = fallbackObject;
            }
            var indexName = indexDefinition.toString();
            var newIndexSet = __assign({}, this.indexSet_);
            newIndexSet[indexName] = indexDefinition;
            var newIndexes = __assign({}, this.indexes_);
            newIndexes[indexName] = newIndex;
            return new IndexMap(newIndexes, newIndexSet);
        };
        /**
         * Ensure that this node is properly tracked in any indexes that we're maintaining
         */
        IndexMap.prototype.addToIndexes = function (namedNode, existingChildren) {
            var _this = this;
            var newIndexes = map(this.indexes_, function (indexedChildren, indexName) {
                var index = safeGet(_this.indexSet_, indexName);
                assert(index, 'Missing index implementation for ' + indexName);
                if (indexedChildren === fallbackObject) {
                    // Check to see if we need to index everything
                    if (index.isDefinedOn(namedNode.node)) {
                        // We need to build this index
                        var childList = [];
                        var iter = existingChildren.getIterator(NamedNode.Wrap);
                        var next = iter.getNext();
                        while (next) {
                            if (next.name !== namedNode.name) {
                                childList.push(next);
                            }
                            next = iter.getNext();
                        }
                        childList.push(namedNode);
                        return buildChildSet(childList, index.getCompare());
                    }
                    else {
                        // No change, this remains a fallback
                        return fallbackObject;
                    }
                }
                else {
                    var existingSnap = existingChildren.get(namedNode.name);
                    var newChildren = indexedChildren;
                    if (existingSnap) {
                        newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));
                    }
                    return newChildren.insert(namedNode, namedNode.node);
                }
            });
            return new IndexMap(newIndexes, this.indexSet_);
        };
        /**
         * Create a new IndexMap instance with the given value removed
         */
        IndexMap.prototype.removeFromIndexes = function (namedNode, existingChildren) {
            var newIndexes = map(this.indexes_, function (indexedChildren) {
                if (indexedChildren === fallbackObject) {
                    // This is the fallback. Just return it, nothing to do in this case
                    return indexedChildren;
                }
                else {
                    var existingSnap = existingChildren.get(namedNode.name);
                    if (existingSnap) {
                        return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));
                    }
                    else {
                        // No record of this child
                        return indexedChildren;
                    }
                }
            });
            return new IndexMap(newIndexes, this.indexSet_);
        };
        return IndexMap;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function NAME_ONLY_COMPARATOR(left, right) {
        return nameCompare(left.name, right.name);
    }
    function NAME_COMPARATOR(left, right) {
        return nameCompare(left, right);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // TODO: For memory savings, don't store priorityNode_ if it's empty.
    var EMPTY_NODE;
    /**
     * ChildrenNode is a class for storing internal nodes in a DataSnapshot
     * (i.e. nodes with children).  It implements Node and stores the
     * list of children in the children property, sorted by child name.
     */
    var ChildrenNode = /** @class */ (function () {
        /**
         * @param children_ List of children of this node..
         * @param priorityNode_ The priority of this node (as a snapshot node).
         */
        function ChildrenNode(children_, priorityNode_, indexMap_) {
            this.children_ = children_;
            this.priorityNode_ = priorityNode_;
            this.indexMap_ = indexMap_;
            this.lazyHash_ = null;
            /**
             * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use
             * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own
             * class instead of an empty ChildrenNode.
             */
            if (this.priorityNode_) {
                validatePriorityNode(this.priorityNode_);
            }
            if (this.children_.isEmpty()) {
                assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');
            }
        }
        Object.defineProperty(ChildrenNode, "EMPTY_NODE", {
            get: function () {
                return (EMPTY_NODE ||
                    (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));
            },
            enumerable: false,
            configurable: true
        });
        /** @inheritDoc */
        ChildrenNode.prototype.isLeafNode = function () {
            return false;
        };
        /** @inheritDoc */
        ChildrenNode.prototype.getPriority = function () {
            return this.priorityNode_ || EMPTY_NODE;
        };
        /** @inheritDoc */
        ChildrenNode.prototype.updatePriority = function (newPriorityNode) {
            if (this.children_.isEmpty()) {
                // Don't allow priorities on empty nodes
                return this;
            }
            else {
                return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);
            }
        };
        /** @inheritDoc */
        ChildrenNode.prototype.getImmediateChild = function (childName) {
            // Hack to treat priority as a regular child
            if (childName === '.priority') {
                return this.getPriority();
            }
            else {
                var child = this.children_.get(childName);
                return child === null ? EMPTY_NODE : child;
            }
        };
        /** @inheritDoc */
        ChildrenNode.prototype.getChild = function (path) {
            var front = pathGetFront(path);
            if (front === null) {
                return this;
            }
            return this.getImmediateChild(front).getChild(pathPopFront(path));
        };
        /** @inheritDoc */
        ChildrenNode.prototype.hasChild = function (childName) {
            return this.children_.get(childName) !== null;
        };
        /** @inheritDoc */
        ChildrenNode.prototype.updateImmediateChild = function (childName, newChildNode) {
            assert(newChildNode, 'We should always be passing snapshot nodes');
            if (childName === '.priority') {
                return this.updatePriority(newChildNode);
            }
            else {
                var namedNode = new NamedNode(childName, newChildNode);
                var newChildren = void 0, newIndexMap = void 0;
                if (newChildNode.isEmpty()) {
                    newChildren = this.children_.remove(childName);
                    newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);
                }
                else {
                    newChildren = this.children_.insert(childName, newChildNode);
                    newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);
                }
                var newPriority = newChildren.isEmpty()
                    ? EMPTY_NODE
                    : this.priorityNode_;
                return new ChildrenNode(newChildren, newPriority, newIndexMap);
            }
        };
        /** @inheritDoc */
        ChildrenNode.prototype.updateChild = function (path, newChildNode) {
            var front = pathGetFront(path);
            if (front === null) {
                return newChildNode;
            }
            else {
                assert(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');
                var newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);
                return this.updateImmediateChild(front, newImmediateChild);
            }
        };
        /** @inheritDoc */
        ChildrenNode.prototype.isEmpty = function () {
            return this.children_.isEmpty();
        };
        /** @inheritDoc */
        ChildrenNode.prototype.numChildren = function () {
            return this.children_.count();
        };
        /** @inheritDoc */
        ChildrenNode.prototype.val = function (exportFormat) {
            if (this.isEmpty()) {
                return null;
            }
            var obj = {};
            var numKeys = 0, maxKey = 0, allIntegerKeys = true;
            this.forEachChild(PRIORITY_INDEX, function (key, childNode) {
                obj[key] = childNode.val(exportFormat);
                numKeys++;
                if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {
                    maxKey = Math.max(maxKey, Number(key));
                }
                else {
                    allIntegerKeys = false;
                }
            });
            if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {
                // convert to array.
                var array = [];
                // eslint-disable-next-line guard-for-in
                for (var key in obj) {
                    array[key] = obj[key];
                }
                return array;
            }
            else {
                if (exportFormat && !this.getPriority().isEmpty()) {
                    obj['.priority'] = this.getPriority().val();
                }
                return obj;
            }
        };
        /** @inheritDoc */
        ChildrenNode.prototype.hash = function () {
            if (this.lazyHash_ === null) {
                var toHash_1 = '';
                if (!this.getPriority().isEmpty()) {
                    toHash_1 +=
                        'priority:' +
                            priorityHashText(this.getPriority().val()) +
                            ':';
                }
                this.forEachChild(PRIORITY_INDEX, function (key, childNode) {
                    var childHash = childNode.hash();
                    if (childHash !== '') {
                        toHash_1 += ':' + key + ':' + childHash;
                    }
                });
                this.lazyHash_ = toHash_1 === '' ? '' : sha1(toHash_1);
            }
            return this.lazyHash_;
        };
        /** @inheritDoc */
        ChildrenNode.prototype.getPredecessorChildName = function (childName, childNode, index) {
            var idx = this.resolveIndex_(index);
            if (idx) {
                var predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));
                return predecessor ? predecessor.name : null;
            }
            else {
                return this.children_.getPredecessorKey(childName);
            }
        };
        ChildrenNode.prototype.getFirstChildName = function (indexDefinition) {
            var idx = this.resolveIndex_(indexDefinition);
            if (idx) {
                var minKey = idx.minKey();
                return minKey && minKey.name;
            }
            else {
                return this.children_.minKey();
            }
        };
        ChildrenNode.prototype.getFirstChild = function (indexDefinition) {
            var minKey = this.getFirstChildName(indexDefinition);
            if (minKey) {
                return new NamedNode(minKey, this.children_.get(minKey));
            }
            else {
                return null;
            }
        };
        /**
         * Given an index, return the key name of the largest value we have, according to that index
         */
        ChildrenNode.prototype.getLastChildName = function (indexDefinition) {
            var idx = this.resolveIndex_(indexDefinition);
            if (idx) {
                var maxKey = idx.maxKey();
                return maxKey && maxKey.name;
            }
            else {
                return this.children_.maxKey();
            }
        };
        ChildrenNode.prototype.getLastChild = function (indexDefinition) {
            var maxKey = this.getLastChildName(indexDefinition);
            if (maxKey) {
                return new NamedNode(maxKey, this.children_.get(maxKey));
            }
            else {
                return null;
            }
        };
        /**
         * @inheritDoc
         */
        ChildrenNode.prototype.forEachChild = function (index, action) {
            var idx = this.resolveIndex_(index);
            if (idx) {
                return idx.inorderTraversal(function (wrappedNode) {
                    return action(wrappedNode.name, wrappedNode.node);
                });
            }
            else {
                return this.children_.inorderTraversal(action);
            }
        };
        ChildrenNode.prototype.getIterator = function (indexDefinition) {
            return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);
        };
        ChildrenNode.prototype.getIteratorFrom = function (startPost, indexDefinition) {
            var idx = this.resolveIndex_(indexDefinition);
            if (idx) {
                return idx.getIteratorFrom(startPost, function (key) { return key; });
            }
            else {
                var iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);
                var next = iterator.peek();
                while (next != null && indexDefinition.compare(next, startPost) < 0) {
                    iterator.getNext();
                    next = iterator.peek();
                }
                return iterator;
            }
        };
        ChildrenNode.prototype.getReverseIterator = function (indexDefinition) {
            return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);
        };
        ChildrenNode.prototype.getReverseIteratorFrom = function (endPost, indexDefinition) {
            var idx = this.resolveIndex_(indexDefinition);
            if (idx) {
                return idx.getReverseIteratorFrom(endPost, function (key) {
                    return key;
                });
            }
            else {
                var iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);
                var next = iterator.peek();
                while (next != null && indexDefinition.compare(next, endPost) > 0) {
                    iterator.getNext();
                    next = iterator.peek();
                }
                return iterator;
            }
        };
        /**
         * @inheritDoc
         */
        ChildrenNode.prototype.compareTo = function (other) {
            if (this.isEmpty()) {
                if (other.isEmpty()) {
                    return 0;
                }
                else {
                    return -1;
                }
            }
            else if (other.isLeafNode() || other.isEmpty()) {
                return 1;
            }
            else if (other === MAX_NODE$2) {
                return -1;
            }
            else {
                // Must be another node with children.
                return 0;
            }
        };
        /**
         * @inheritDoc
         */
        ChildrenNode.prototype.withIndex = function (indexDefinition) {
            if (indexDefinition === KEY_INDEX ||
                this.indexMap_.hasIndex(indexDefinition)) {
                return this;
            }
            else {
                var newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);
                return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);
            }
        };
        /**
         * @inheritDoc
         */
        ChildrenNode.prototype.isIndexed = function (index) {
            return index === KEY_INDEX || this.indexMap_.hasIndex(index);
        };
        /**
         * @inheritDoc
         */
        ChildrenNode.prototype.equals = function (other) {
            if (other === this) {
                return true;
            }
            else if (other.isLeafNode()) {
                return false;
            }
            else {
                var otherChildrenNode = other;
                if (!this.getPriority().equals(otherChildrenNode.getPriority())) {
                    return false;
                }
                else if (this.children_.count() === otherChildrenNode.children_.count()) {
                    var thisIter = this.getIterator(PRIORITY_INDEX);
                    var otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);
                    var thisCurrent = thisIter.getNext();
                    var otherCurrent = otherIter.getNext();
                    while (thisCurrent && otherCurrent) {
                        if (thisCurrent.name !== otherCurrent.name ||
                            !thisCurrent.node.equals(otherCurrent.node)) {
                            return false;
                        }
                        thisCurrent = thisIter.getNext();
                        otherCurrent = otherIter.getNext();
                    }
                    return thisCurrent === null && otherCurrent === null;
                }
                else {
                    return false;
                }
            }
        };
        /**
         * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used
         * instead.
         *
         */
        ChildrenNode.prototype.resolveIndex_ = function (indexDefinition) {
            if (indexDefinition === KEY_INDEX) {
                return null;
            }
            else {
                return this.indexMap_.get(indexDefinition.toString());
            }
        };
        ChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\d*)$/;
        return ChildrenNode;
    }());
    var MaxNode = /** @class */ (function (_super) {
        __extends$1(MaxNode, _super);
        function MaxNode() {
            return _super.call(this, new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default) || this;
        }
        MaxNode.prototype.compareTo = function (other) {
            if (other === this) {
                return 0;
            }
            else {
                return 1;
            }
        };
        MaxNode.prototype.equals = function (other) {
            // Not that we every compare it, but MAX_NODE is only ever equal to itself
            return other === this;
        };
        MaxNode.prototype.getPriority = function () {
            return this;
        };
        MaxNode.prototype.getImmediateChild = function (childName) {
            return ChildrenNode.EMPTY_NODE;
        };
        MaxNode.prototype.isEmpty = function () {
            return false;
        };
        return MaxNode;
    }(ChildrenNode));
    /**
     * Marker that will sort higher than any other snapshot.
     */
    var MAX_NODE$2 = new MaxNode();
    Object.defineProperties(NamedNode, {
        MIN: {
            value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)
        },
        MAX: {
            value: new NamedNode(MAX_NAME, MAX_NODE$2)
        }
    });
    /**
     * Reference Extensions
     */
    KeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;
    LeafNode.__childrenNodeConstructor = ChildrenNode;
    setMaxNode(MAX_NODE$2);
    setMaxNode$1(MAX_NODE$2);

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var USE_HINZE = true;
    /**
     * Constructs a snapshot node representing the passed JSON and returns it.
     * @param json JSON to create a node for.
     * @param priority Optional priority to use.  This will be ignored if the
     * passed JSON contains a .priority property.
     */
    function nodeFromJSON$1(json, priority) {
        if (priority === void 0) { priority = null; }
        if (json === null) {
            return ChildrenNode.EMPTY_NODE;
        }
        if (typeof json === 'object' && '.priority' in json) {
            priority = json['.priority'];
        }
        assert(priority === null ||
            typeof priority === 'string' ||
            typeof priority === 'number' ||
            (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);
        if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {
            json = json['.value'];
        }
        // Valid leaf nodes include non-objects or server-value wrapper objects
        if (typeof json !== 'object' || '.sv' in json) {
            var jsonLeaf = json;
            return new LeafNode(jsonLeaf, nodeFromJSON$1(priority));
        }
        if (!(json instanceof Array) && USE_HINZE) {
            var children_1 = [];
            var childrenHavePriority_1 = false;
            var hinzeJsonObj = json;
            each(hinzeJsonObj, function (key, child) {
                if (key.substring(0, 1) !== '.') {
                    // Ignore metadata nodes
                    var childNode = nodeFromJSON$1(child);
                    if (!childNode.isEmpty()) {
                        childrenHavePriority_1 =
                            childrenHavePriority_1 || !childNode.getPriority().isEmpty();
                        children_1.push(new NamedNode(key, childNode));
                    }
                }
            });
            if (children_1.length === 0) {
                return ChildrenNode.EMPTY_NODE;
            }
            var childSet = buildChildSet(children_1, NAME_ONLY_COMPARATOR, function (namedNode) { return namedNode.name; }, NAME_COMPARATOR);
            if (childrenHavePriority_1) {
                var sortedChildSet = buildChildSet(children_1, PRIORITY_INDEX.getCompare());
                return new ChildrenNode(childSet, nodeFromJSON$1(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));
            }
            else {
                return new ChildrenNode(childSet, nodeFromJSON$1(priority), IndexMap.Default);
            }
        }
        else {
            var node_1 = ChildrenNode.EMPTY_NODE;
            each(json, function (key, childData) {
                if (contains(json, key)) {
                    if (key.substring(0, 1) !== '.') {
                        // ignore metadata nodes.
                        var childNode = nodeFromJSON$1(childData);
                        if (childNode.isLeafNode() || !childNode.isEmpty()) {
                            node_1 = node_1.updateImmediateChild(key, childNode);
                        }
                    }
                }
            });
            return node_1.updatePriority(nodeFromJSON$1(priority));
        }
    }
    setNodeFromJSON(nodeFromJSON$1);

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ExistingValueProvider = /** @class */ (function () {
        function ExistingValueProvider(node_) {
            this.node_ = node_;
        }
        ExistingValueProvider.prototype.getImmediateChild = function (childName) {
            var child = this.node_.getImmediateChild(childName);
            return new ExistingValueProvider(child);
        };
        ExistingValueProvider.prototype.node = function () {
            return this.node_;
        };
        return ExistingValueProvider;
    }());
    var DeferredValueProvider = /** @class */ (function () {
        function DeferredValueProvider(syncTree, path) {
            this.syncTree_ = syncTree;
            this.path_ = path;
        }
        DeferredValueProvider.prototype.getImmediateChild = function (childName) {
            var childPath = pathChild(this.path_, childName);
            return new DeferredValueProvider(this.syncTree_, childPath);
        };
        DeferredValueProvider.prototype.node = function () {
            return this.syncTree_.calcCompleteEventCache(this.path_);
        };
        return DeferredValueProvider;
    }());
    /**
     * Generate placeholders for deferred values.
     */
    var generateWithValues = function (values) {
        values = values || {};
        values['timestamp'] = values['timestamp'] || new Date().getTime();
        return values;
    };
    /**
     * Value to use when firing local events. When writing server values, fire
     * local events with an approximate value, otherwise return value as-is.
     */
    var resolveDeferredLeafValue = function (value, existingVal, serverValues) {
        if (!value || typeof value !== 'object') {
            return value;
        }
        assert('.sv' in value, 'Unexpected leaf node or priority contents');
        if (typeof value['.sv'] === 'string') {
            return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);
        }
        else if (typeof value['.sv'] === 'object') {
            return resolveComplexDeferredValue(value['.sv'], existingVal);
        }
        else {
            assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));
        }
    };
    var resolveScalarDeferredValue = function (op, existing, serverValues) {
        switch (op) {
            case 'timestamp':
                return serverValues['timestamp'];
            default:
                assert(false, 'Unexpected server value: ' + op);
        }
    };
    var resolveComplexDeferredValue = function (op, existing, unused) {
        if (!op.hasOwnProperty('increment')) {
            assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));
        }
        var delta = op['increment'];
        if (typeof delta !== 'number') {
            assert(false, 'Unexpected increment value: ' + delta);
        }
        var existingNode = existing.node();
        assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');
        // Incrementing a non-number sets the value to the incremented amount
        if (!existingNode.isLeafNode()) {
            return delta;
        }
        var leaf = existingNode;
        var existingVal = leaf.getValue();
        if (typeof existingVal !== 'number') {
            return delta;
        }
        // No need to do over/underflow arithmetic here because JS only handles floats under the covers
        return existingVal + delta;
    };
    /**
     * Recursively replace all deferred values and priorities in the tree with the
     * specified generated replacement values.
     * @param path path to which write is relative
     * @param node new data written at path
     * @param syncTree current data
     */
    var resolveDeferredValueTree = function (path, node, syncTree, serverValues) {
        return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);
    };
    /**
     * Recursively replace all deferred values and priorities in the node with the
     * specified generated replacement values.  If there are no server values in the node,
     * it'll be returned as-is.
     */
    var resolveDeferredValueSnapshot = function (node, existing, serverValues) {
        return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);
    };
    function resolveDeferredValue(node, existingVal, serverValues) {
        var rawPri = node.getPriority().val();
        var priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);
        var newNode;
        if (node.isLeafNode()) {
            var leafNode = node;
            var value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);
            if (value !== leafNode.getValue() ||
                priority !== leafNode.getPriority().val()) {
                return new LeafNode(value, nodeFromJSON$1(priority));
            }
            else {
                return node;
            }
        }
        else {
            var childrenNode = node;
            newNode = childrenNode;
            if (priority !== childrenNode.getPriority().val()) {
                newNode = newNode.updatePriority(new LeafNode(priority));
            }
            childrenNode.forEachChild(PRIORITY_INDEX, function (childName, childNode) {
                var newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);
                if (newChildNode !== childNode) {
                    newNode = newNode.updateImmediateChild(childName, newChildNode);
                }
            });
            return newNode;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Helper class to store a sparse set of snapshots.
     */
    var SparseSnapshotTree = /** @class */ (function () {
        function SparseSnapshotTree() {
            this.value = null;
            this.children = new Map();
        }
        /**
         * Gets the node stored at the given path if one exists.
         *
         * @param path Path to look up snapshot for.
         * @return The retrieved node, or null.
         */
        SparseSnapshotTree.prototype.find = function (path) {
            if (this.value != null) {
                return this.value.getChild(path);
            }
            else if (!pathIsEmpty(path) && this.children.size > 0) {
                var childKey = pathGetFront(path);
                path = pathPopFront(path);
                if (this.children.has(childKey)) {
                    var childTree = this.children.get(childKey);
                    return childTree.find(path);
                }
                else {
                    return null;
                }
            }
            else {
                return null;
            }
        };
        /**
         * Stores the given node at the specified path. If there is already a node
         * at a shallower path, it merges the new data into that snapshot node.
         *
         * @param path Path to look up snapshot for.
         * @param data The new data, or null.
         */
        SparseSnapshotTree.prototype.remember = function (path, data) {
            if (pathIsEmpty(path)) {
                this.value = data;
                this.children.clear();
            }
            else if (this.value !== null) {
                this.value = this.value.updateChild(path, data);
            }
            else {
                var childKey = pathGetFront(path);
                if (!this.children.has(childKey)) {
                    this.children.set(childKey, new SparseSnapshotTree());
                }
                var child = this.children.get(childKey);
                path = pathPopFront(path);
                child.remember(path, data);
            }
        };
        /**
         * Purge the data at path from the cache.
         *
         * @param path Path to look up snapshot for.
         * @return True if this node should now be removed.
         */
        SparseSnapshotTree.prototype.forget = function (path) {
            if (pathIsEmpty(path)) {
                this.value = null;
                this.children.clear();
                return true;
            }
            else {
                if (this.value !== null) {
                    if (this.value.isLeafNode()) {
                        // We're trying to forget a node that doesn't exist
                        return false;
                    }
                    else {
                        var value = this.value;
                        this.value = null;
                        var self_1 = this;
                        value.forEachChild(PRIORITY_INDEX, function (key, tree) {
                            self_1.remember(new Path(key), tree);
                        });
                        return this.forget(path);
                    }
                }
                else if (this.children.size > 0) {
                    var childKey = pathGetFront(path);
                    path = pathPopFront(path);
                    if (this.children.has(childKey)) {
                        var safeToRemove = this.children.get(childKey).forget(path);
                        if (safeToRemove) {
                            this.children.delete(childKey);
                        }
                    }
                    return this.children.size === 0;
                }
                else {
                    return true;
                }
            }
        };
        /**
         * Recursively iterates through all of the stored tree and calls the
         * callback on each one.
         *
         * @param prefixPath Path to look up node for.
         * @param func The function to invoke for each tree.
         */
        SparseSnapshotTree.prototype.forEachTree = function (prefixPath, func) {
            if (this.value !== null) {
                func(prefixPath, this.value);
            }
            else {
                this.forEachChild(function (key, tree) {
                    var path = new Path(prefixPath.toString() + '/' + key);
                    tree.forEachTree(path, func);
                });
            }
        };
        /**
         * Iterates through each immediate child and triggers the callback.
         *
         * @param func The function to invoke for each child.
         */
        SparseSnapshotTree.prototype.forEachChild = function (func) {
            this.children.forEach(function (tree, key) {
                func(key, tree);
            });
        };
        return SparseSnapshotTree;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     *
     * @enum
     */
    var OperationType;
    (function (OperationType) {
        OperationType[OperationType["OVERWRITE"] = 0] = "OVERWRITE";
        OperationType[OperationType["MERGE"] = 1] = "MERGE";
        OperationType[OperationType["ACK_USER_WRITE"] = 2] = "ACK_USER_WRITE";
        OperationType[OperationType["LISTEN_COMPLETE"] = 3] = "LISTEN_COMPLETE";
    })(OperationType || (OperationType = {}));
    function newOperationSourceUser() {
        return {
            fromUser: true,
            fromServer: false,
            queryId: null,
            tagged: false
        };
    }
    function newOperationSourceServer() {
        return {
            fromUser: false,
            fromServer: true,
            queryId: null,
            tagged: false
        };
    }
    function newOperationSourceServerTaggedQuery(queryId) {
        return {
            fromUser: false,
            fromServer: true,
            queryId: queryId,
            tagged: true
        };
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var AckUserWrite = /** @class */ (function () {
        /**
         * @param affectedTree A tree containing true for each affected path. Affected paths can't overlap.
         */
        function AckUserWrite(
        /** @inheritDoc */ path, 
        /** @inheritDoc */ affectedTree, 
        /** @inheritDoc */ revert) {
            this.path = path;
            this.affectedTree = affectedTree;
            this.revert = revert;
            /** @inheritDoc */
            this.type = OperationType.ACK_USER_WRITE;
            /** @inheritDoc */
            this.source = newOperationSourceUser();
        }
        /**
         * @inheritDoc
         */
        AckUserWrite.prototype.operationForChild = function (childName) {
            if (!pathIsEmpty(this.path)) {
                assert(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');
                return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);
            }
            else if (this.affectedTree.value != null) {
                assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');
                // All child locations are affected as well; just return same operation.
                return this;
            }
            else {
                var childTree = this.affectedTree.subtree(new Path(childName));
                return new AckUserWrite(newEmptyPath(), childTree, this.revert);
            }
        };
        return AckUserWrite;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var emptyChildrenSingleton;
    /**
     * Singleton empty children collection.
     *
     */
    var EmptyChildren = function () {
        if (!emptyChildrenSingleton) {
            emptyChildrenSingleton = new SortedMap(stringCompare);
        }
        return emptyChildrenSingleton;
    };
    /**
     * A tree with immutable elements.
     */
    var ImmutableTree = /** @class */ (function () {
        function ImmutableTree(value, children) {
            if (children === void 0) { children = EmptyChildren(); }
            this.value = value;
            this.children = children;
        }
        ImmutableTree.fromObject = function (obj) {
            var tree = new ImmutableTree(null);
            each(obj, function (childPath, childSnap) {
                tree = tree.set(new Path(childPath), childSnap);
            });
            return tree;
        };
        /**
         * True if the value is empty and there are no children
         */
        ImmutableTree.prototype.isEmpty = function () {
            return this.value === null && this.children.isEmpty();
        };
        /**
         * Given a path and predicate, return the first node and the path to that node
         * where the predicate returns true.
         *
         * TODO Do a perf test -- If we're creating a bunch of {path: value:} objects
         * on the way back out, it may be better to pass down a pathSoFar obj.
         *
         * @param relativePath The remainder of the path
         * @param predicate The predicate to satisfy to return a node
         */
        ImmutableTree.prototype.findRootMostMatchingPathAndValue = function (relativePath, predicate) {
            if (this.value != null && predicate(this.value)) {
                return { path: newEmptyPath(), value: this.value };
            }
            else {
                if (pathIsEmpty(relativePath)) {
                    return null;
                }
                else {
                    var front = pathGetFront(relativePath);
                    var child = this.children.get(front);
                    if (child !== null) {
                        var childExistingPathAndValue = child.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);
                        if (childExistingPathAndValue != null) {
                            var fullPath = pathChild(new Path(front), childExistingPathAndValue.path);
                            return { path: fullPath, value: childExistingPathAndValue.value };
                        }
                        else {
                            return null;
                        }
                    }
                    else {
                        return null;
                    }
                }
            }
        };
        /**
         * Find, if it exists, the shortest subpath of the given path that points a defined
         * value in the tree
         */
        ImmutableTree.prototype.findRootMostValueAndPath = function (relativePath) {
            return this.findRootMostMatchingPathAndValue(relativePath, function () { return true; });
        };
        /**
         * @return The subtree at the given path
         */
        ImmutableTree.prototype.subtree = function (relativePath) {
            if (pathIsEmpty(relativePath)) {
                return this;
            }
            else {
                var front = pathGetFront(relativePath);
                var childTree = this.children.get(front);
                if (childTree !== null) {
                    return childTree.subtree(pathPopFront(relativePath));
                }
                else {
                    return new ImmutableTree(null);
                }
            }
        };
        /**
         * Sets a value at the specified path.
         *
         * @param relativePath Path to set value at.
         * @param toSet Value to set.
         * @return Resulting tree.
         */
        ImmutableTree.prototype.set = function (relativePath, toSet) {
            if (pathIsEmpty(relativePath)) {
                return new ImmutableTree(toSet, this.children);
            }
            else {
                var front = pathGetFront(relativePath);
                var child = this.children.get(front) || new ImmutableTree(null);
                var newChild = child.set(pathPopFront(relativePath), toSet);
                var newChildren = this.children.insert(front, newChild);
                return new ImmutableTree(this.value, newChildren);
            }
        };
        /**
         * Removes the value at the specified path.
         *
         * @param relativePath Path to value to remove.
         * @return Resulting tree.
         */
        ImmutableTree.prototype.remove = function (relativePath) {
            if (pathIsEmpty(relativePath)) {
                if (this.children.isEmpty()) {
                    return new ImmutableTree(null);
                }
                else {
                    return new ImmutableTree(null, this.children);
                }
            }
            else {
                var front = pathGetFront(relativePath);
                var child = this.children.get(front);
                if (child) {
                    var newChild = child.remove(pathPopFront(relativePath));
                    var newChildren = void 0;
                    if (newChild.isEmpty()) {
                        newChildren = this.children.remove(front);
                    }
                    else {
                        newChildren = this.children.insert(front, newChild);
                    }
                    if (this.value === null && newChildren.isEmpty()) {
                        return new ImmutableTree(null);
                    }
                    else {
                        return new ImmutableTree(this.value, newChildren);
                    }
                }
                else {
                    return this;
                }
            }
        };
        /**
         * Gets a value from the tree.
         *
         * @param relativePath Path to get value for.
         * @return Value at path, or null.
         */
        ImmutableTree.prototype.get = function (relativePath) {
            if (pathIsEmpty(relativePath)) {
                return this.value;
            }
            else {
                var front = pathGetFront(relativePath);
                var child = this.children.get(front);
                if (child) {
                    return child.get(pathPopFront(relativePath));
                }
                else {
                    return null;
                }
            }
        };
        /**
         * Replace the subtree at the specified path with the given new tree.
         *
         * @param relativePath Path to replace subtree for.
         * @param newTree New tree.
         * @return Resulting tree.
         */
        ImmutableTree.prototype.setTree = function (relativePath, newTree) {
            if (pathIsEmpty(relativePath)) {
                return newTree;
            }
            else {
                var front = pathGetFront(relativePath);
                var child = this.children.get(front) || new ImmutableTree(null);
                var newChild = child.setTree(pathPopFront(relativePath), newTree);
                var newChildren = void 0;
                if (newChild.isEmpty()) {
                    newChildren = this.children.remove(front);
                }
                else {
                    newChildren = this.children.insert(front, newChild);
                }
                return new ImmutableTree(this.value, newChildren);
            }
        };
        /**
         * Performs a depth first fold on this tree. Transforms a tree into a single
         * value, given a function that operates on the path to a node, an optional
         * current value, and a map of child names to folded subtrees
         */
        ImmutableTree.prototype.fold = function (fn) {
            return this.fold_(newEmptyPath(), fn);
        };
        /**
         * Recursive helper for public-facing fold() method
         */
        ImmutableTree.prototype.fold_ = function (pathSoFar, fn) {
            var accum = {};
            this.children.inorderTraversal(function (childKey, childTree) {
                accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);
            });
            return fn(pathSoFar, this.value, accum);
        };
        /**
         * Find the first matching value on the given path. Return the result of applying f to it.
         */
        ImmutableTree.prototype.findOnPath = function (path, f) {
            return this.findOnPath_(path, newEmptyPath(), f);
        };
        ImmutableTree.prototype.findOnPath_ = function (pathToFollow, pathSoFar, f) {
            var result = this.value ? f(pathSoFar, this.value) : false;
            if (result) {
                return result;
            }
            else {
                if (pathIsEmpty(pathToFollow)) {
                    return null;
                }
                else {
                    var front = pathGetFront(pathToFollow);
                    var nextChild = this.children.get(front);
                    if (nextChild) {
                        return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);
                    }
                    else {
                        return null;
                    }
                }
            }
        };
        ImmutableTree.prototype.foreachOnPath = function (path, f) {
            return this.foreachOnPath_(path, newEmptyPath(), f);
        };
        ImmutableTree.prototype.foreachOnPath_ = function (pathToFollow, currentRelativePath, f) {
            if (pathIsEmpty(pathToFollow)) {
                return this;
            }
            else {
                if (this.value) {
                    f(currentRelativePath, this.value);
                }
                var front = pathGetFront(pathToFollow);
                var nextChild = this.children.get(front);
                if (nextChild) {
                    return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);
                }
                else {
                    return new ImmutableTree(null);
                }
            }
        };
        /**
         * Calls the given function for each node in the tree that has a value.
         *
         * @param f A function to be called with the path from the root of the tree to
         * a node, and the value at that node. Called in depth-first order.
         */
        ImmutableTree.prototype.foreach = function (f) {
            this.foreach_(newEmptyPath(), f);
        };
        ImmutableTree.prototype.foreach_ = function (currentRelativePath, f) {
            this.children.inorderTraversal(function (childName, childTree) {
                childTree.foreach_(pathChild(currentRelativePath, childName), f);
            });
            if (this.value) {
                f(currentRelativePath, this.value);
            }
        };
        ImmutableTree.prototype.foreachChild = function (f) {
            this.children.inorderTraversal(function (childName, childTree) {
                if (childTree.value) {
                    f(childName, childTree.value);
                }
            });
        };
        return ImmutableTree;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ListenComplete = /** @class */ (function () {
        function ListenComplete(source, path) {
            this.source = source;
            this.path = path;
            /** @inheritDoc */
            this.type = OperationType.LISTEN_COMPLETE;
        }
        ListenComplete.prototype.operationForChild = function (childName) {
            if (pathIsEmpty(this.path)) {
                return new ListenComplete(this.source, newEmptyPath());
            }
            else {
                return new ListenComplete(this.source, pathPopFront(this.path));
            }
        };
        return ListenComplete;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var Overwrite = /** @class */ (function () {
        function Overwrite(source, path, snap) {
            this.source = source;
            this.path = path;
            this.snap = snap;
            /** @inheritDoc */
            this.type = OperationType.OVERWRITE;
        }
        Overwrite.prototype.operationForChild = function (childName) {
            if (pathIsEmpty(this.path)) {
                return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));
            }
            else {
                return new Overwrite(this.source, pathPopFront(this.path), this.snap);
            }
        };
        return Overwrite;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var Merge = /** @class */ (function () {
        function Merge(
        /** @inheritDoc */ source, 
        /** @inheritDoc */ path, 
        /** @inheritDoc */ children) {
            this.source = source;
            this.path = path;
            this.children = children;
            /** @inheritDoc */
            this.type = OperationType.MERGE;
        }
        /**
         * @inheritDoc
         */
        Merge.prototype.operationForChild = function (childName) {
            if (pathIsEmpty(this.path)) {
                var childTree = this.children.subtree(new Path(childName));
                if (childTree.isEmpty()) {
                    // This child is unaffected
                    return null;
                }
                else if (childTree.value) {
                    // We have a snapshot for the child in question.  This becomes an overwrite of the child.
                    return new Overwrite(this.source, newEmptyPath(), childTree.value);
                }
                else {
                    // This is a merge at a deeper level
                    return new Merge(this.source, newEmptyPath(), childTree);
                }
            }
            else {
                assert(pathGetFront(this.path) === childName, "Can't get a merge for a child not on the path of the operation");
                return new Merge(this.source, pathPopFront(this.path), this.children);
            }
        };
        /**
         * @inheritDoc
         */
        Merge.prototype.toString = function () {
            return ('Operation(' +
                this.path +
                ': ' +
                this.source.toString() +
                ' merge: ' +
                this.children.toString() +
                ')');
        };
        return Merge;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully
     * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.
     * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks
     * whether a node potentially had children removed due to a filter.
     */
    var CacheNode = /** @class */ (function () {
        function CacheNode(node_, fullyInitialized_, filtered_) {
            this.node_ = node_;
            this.fullyInitialized_ = fullyInitialized_;
            this.filtered_ = filtered_;
        }
        /**
         * Returns whether this node was fully initialized with either server data or a complete overwrite by the client
         */
        CacheNode.prototype.isFullyInitialized = function () {
            return this.fullyInitialized_;
        };
        /**
         * Returns whether this node is potentially missing children due to a filter applied to the node
         */
        CacheNode.prototype.isFiltered = function () {
            return this.filtered_;
        };
        CacheNode.prototype.isCompleteForPath = function (path) {
            if (pathIsEmpty(path)) {
                return this.isFullyInitialized() && !this.filtered_;
            }
            var childKey = pathGetFront(path);
            return this.isCompleteForChild(childKey);
        };
        CacheNode.prototype.isCompleteForChild = function (key) {
            return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));
        };
        CacheNode.prototype.getNode = function () {
            return this.node_;
        };
        return CacheNode;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Stores the data we have cached for a view.
     *
     * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).
     */
    var ViewCache = /** @class */ (function () {
        function ViewCache(eventCache_, serverCache_) {
            this.eventCache_ = eventCache_;
            this.serverCache_ = serverCache_;
        }
        ViewCache.prototype.updateEventSnap = function (eventSnap, complete, filtered) {
            return new ViewCache(new CacheNode(eventSnap, complete, filtered), this.serverCache_);
        };
        ViewCache.prototype.updateServerSnap = function (serverSnap, complete, filtered) {
            return new ViewCache(this.eventCache_, new CacheNode(serverSnap, complete, filtered));
        };
        ViewCache.prototype.getEventCache = function () {
            return this.eventCache_;
        };
        ViewCache.prototype.getCompleteEventSnap = function () {
            return this.eventCache_.isFullyInitialized()
                ? this.eventCache_.getNode()
                : null;
        };
        ViewCache.prototype.getServerCache = function () {
            return this.serverCache_;
        };
        ViewCache.prototype.getCompleteServerSnap = function () {
            return this.serverCache_.isFullyInitialized()
                ? this.serverCache_.getNode()
                : null;
        };
        return ViewCache;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function changeValue(snapshotNode) {
        return { type: "value" /* VALUE */, snapshotNode: snapshotNode };
    }
    function changeChildAdded(childName, snapshotNode) {
        return { type: "child_added" /* CHILD_ADDED */, snapshotNode: snapshotNode, childName: childName };
    }
    function changeChildRemoved(childName, snapshotNode) {
        return { type: "child_removed" /* CHILD_REMOVED */, snapshotNode: snapshotNode, childName: childName };
    }
    function changeChildChanged(childName, snapshotNode, oldSnap) {
        return {
            type: "child_changed" /* CHILD_CHANGED */,
            snapshotNode: snapshotNode,
            childName: childName,
            oldSnap: oldSnap
        };
    }
    function changeChildMoved(childName, snapshotNode) {
        return { type: "child_moved" /* CHILD_MOVED */, snapshotNode: snapshotNode, childName: childName };
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Doesn't really filter nodes but applies an index to the node and keeps track of any changes
     */
    var IndexedFilter = /** @class */ (function () {
        function IndexedFilter(index_) {
            this.index_ = index_;
        }
        IndexedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {
            assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');
            var oldChild = snap.getImmediateChild(key);
            // Check if anything actually changed.
            if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {
                // There's an edge case where a child can enter or leave the view because affectedPath was set to null.
                // In this case, affectedPath will appear null in both the old and new snapshots.  So we need
                // to avoid treating these cases as "nothing changed."
                if (oldChild.isEmpty() === newChild.isEmpty()) {
                    // Nothing changed.
                    // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.
                    //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');
                    return snap;
                }
            }
            if (optChangeAccumulator != null) {
                if (newChild.isEmpty()) {
                    if (snap.hasChild(key)) {
                        optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));
                    }
                    else {
                        assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');
                    }
                }
                else if (oldChild.isEmpty()) {
                    optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));
                }
                else {
                    optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));
                }
            }
            if (snap.isLeafNode() && newChild.isEmpty()) {
                return snap;
            }
            else {
                // Make sure the node is indexed
                return snap.updateImmediateChild(key, newChild).withIndex(this.index_);
            }
        };
        /**
         * @inheritDoc
         */
        IndexedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {
            if (optChangeAccumulator != null) {
                if (!oldSnap.isLeafNode()) {
                    oldSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {
                        if (!newSnap.hasChild(key)) {
                            optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));
                        }
                    });
                }
                if (!newSnap.isLeafNode()) {
                    newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {
                        if (oldSnap.hasChild(key)) {
                            var oldChild = oldSnap.getImmediateChild(key);
                            if (!oldChild.equals(childNode)) {
                                optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));
                            }
                        }
                        else {
                            optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));
                        }
                    });
                }
            }
            return newSnap.withIndex(this.index_);
        };
        /**
         * @inheritDoc
         */
        IndexedFilter.prototype.updatePriority = function (oldSnap, newPriority) {
            if (oldSnap.isEmpty()) {
                return ChildrenNode.EMPTY_NODE;
            }
            else {
                return oldSnap.updatePriority(newPriority);
            }
        };
        /**
         * @inheritDoc
         */
        IndexedFilter.prototype.filtersNodes = function () {
            return false;
        };
        /**
         * @inheritDoc
         */
        IndexedFilter.prototype.getIndexedFilter = function () {
            return this;
        };
        /**
         * @inheritDoc
         */
        IndexedFilter.prototype.getIndex = function () {
            return this.index_;
        };
        return IndexedFilter;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ChildChangeAccumulator = /** @class */ (function () {
        function ChildChangeAccumulator() {
            this.changeMap = new Map();
        }
        ChildChangeAccumulator.prototype.trackChildChange = function (change) {
            var type = change.type;
            var childKey = change.childName;
            assert(type === "child_added" /* CHILD_ADDED */ ||
                type === "child_changed" /* CHILD_CHANGED */ ||
                type === "child_removed" /* CHILD_REMOVED */, 'Only child changes supported for tracking');
            assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');
            var oldChange = this.changeMap.get(childKey);
            if (oldChange) {
                var oldType = oldChange.type;
                if (type === "child_added" /* CHILD_ADDED */ &&
                    oldType === "child_removed" /* CHILD_REMOVED */) {
                    this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));
                }
                else if (type === "child_removed" /* CHILD_REMOVED */ &&
                    oldType === "child_added" /* CHILD_ADDED */) {
                    this.changeMap.delete(childKey);
                }
                else if (type === "child_removed" /* CHILD_REMOVED */ &&
                    oldType === "child_changed" /* CHILD_CHANGED */) {
                    this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));
                }
                else if (type === "child_changed" /* CHILD_CHANGED */ &&
                    oldType === "child_added" /* CHILD_ADDED */) {
                    this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));
                }
                else if (type === "child_changed" /* CHILD_CHANGED */ &&
                    oldType === "child_changed" /* CHILD_CHANGED */) {
                    this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));
                }
                else {
                    throw assertionError('Illegal combination of changes: ' +
                        change +
                        ' occurred after ' +
                        oldChange);
                }
            }
            else {
                this.changeMap.set(childKey, change);
            }
        };
        ChildChangeAccumulator.prototype.getChanges = function () {
            return Array.from(this.changeMap.values());
        };
        return ChildChangeAccumulator;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An implementation of CompleteChildSource that never returns any additional children
     */
    // eslint-disable-next-line @typescript-eslint/naming-convention
    var NoCompleteChildSource_ = /** @class */ (function () {
        function NoCompleteChildSource_() {
        }
        /**
         * @inheritDoc
         */
        NoCompleteChildSource_.prototype.getCompleteChild = function (childKey) {
            return null;
        };
        /**
         * @inheritDoc
         */
        NoCompleteChildSource_.prototype.getChildAfterChild = function (index, child, reverse) {
            return null;
        };
        return NoCompleteChildSource_;
    }());
    /**
     * Singleton instance.
     */
    var NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();
    /**
     * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or
     * old event caches available to calculate complete children.
     */
    var WriteTreeCompleteChildSource = /** @class */ (function () {
        function WriteTreeCompleteChildSource(writes_, viewCache_, optCompleteServerCache_) {
            if (optCompleteServerCache_ === void 0) { optCompleteServerCache_ = null; }
            this.writes_ = writes_;
            this.viewCache_ = viewCache_;
            this.optCompleteServerCache_ = optCompleteServerCache_;
        }
        /**
         * @inheritDoc
         */
        WriteTreeCompleteChildSource.prototype.getCompleteChild = function (childKey) {
            var node = this.viewCache_.getEventCache();
            if (node.isCompleteForChild(childKey)) {
                return node.getNode().getImmediateChild(childKey);
            }
            else {
                var serverNode = this.optCompleteServerCache_ != null
                    ? new CacheNode(this.optCompleteServerCache_, true, false)
                    : this.viewCache_.getServerCache();
                return this.writes_.calcCompleteChild(childKey, serverNode);
            }
        };
        /**
         * @inheritDoc
         */
        WriteTreeCompleteChildSource.prototype.getChildAfterChild = function (index, child, reverse) {
            var completeServerData = this.optCompleteServerCache_ != null
                ? this.optCompleteServerCache_
                : this.viewCache_.getCompleteServerSnap();
            var nodes = this.writes_.calcIndexedSlice(completeServerData, child, 1, reverse, index);
            if (nodes.length === 0) {
                return null;
            }
            else {
                return nodes[0];
            }
        };
        return WriteTreeCompleteChildSource;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ProcessorResult = /** @class */ (function () {
        function ProcessorResult(viewCache, changes) {
            this.viewCache = viewCache;
            this.changes = changes;
        }
        return ProcessorResult;
    }());
    /**
     */
    var ViewProcessor = /** @class */ (function () {
        function ViewProcessor(filter_) {
            this.filter_ = filter_;
        }
        ViewProcessor.prototype.assertIndexed = function (viewCache) {
            assert(viewCache.getEventCache().getNode().isIndexed(this.filter_.getIndex()), 'Event snap not indexed');
            assert(viewCache.getServerCache().getNode().isIndexed(this.filter_.getIndex()), 'Server snap not indexed');
        };
        ViewProcessor.prototype.applyOperation = function (oldViewCache, operation, writesCache, completeCache) {
            var accumulator = new ChildChangeAccumulator();
            var newViewCache, filterServerNode;
            if (operation.type === OperationType.OVERWRITE) {
                var overwrite = operation;
                if (overwrite.source.fromUser) {
                    newViewCache = this.applyUserOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);
                }
                else {
                    assert(overwrite.source.fromServer, 'Unknown source.');
                    // We filter the node if it's a tagged update or the node has been previously filtered  and the
                    // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered
                    // again
                    filterServerNode =
                        overwrite.source.tagged ||
                            (oldViewCache.getServerCache().isFiltered() &&
                                !pathIsEmpty(overwrite.path));
                    newViewCache = this.applyServerOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);
                }
            }
            else if (operation.type === OperationType.MERGE) {
                var merge = operation;
                if (merge.source.fromUser) {
                    newViewCache = this.applyUserMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);
                }
                else {
                    assert(merge.source.fromServer, 'Unknown source.');
                    // We filter the node if it's a tagged update or the node has been previously filtered
                    filterServerNode =
                        merge.source.tagged || oldViewCache.getServerCache().isFiltered();
                    newViewCache = this.applyServerMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);
                }
            }
            else if (operation.type === OperationType.ACK_USER_WRITE) {
                var ackUserWrite = operation;
                if (!ackUserWrite.revert) {
                    newViewCache = this.ackUserWrite_(oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);
                }
                else {
                    newViewCache = this.revertUserWrite_(oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);
                }
            }
            else if (operation.type === OperationType.LISTEN_COMPLETE) {
                newViewCache = this.listenComplete_(oldViewCache, operation.path, writesCache, accumulator);
            }
            else {
                throw assertionError('Unknown operation type: ' + operation.type);
            }
            var changes = accumulator.getChanges();
            ViewProcessor.maybeAddValueEvent_(oldViewCache, newViewCache, changes);
            return new ProcessorResult(newViewCache, changes);
        };
        ViewProcessor.maybeAddValueEvent_ = function (oldViewCache, newViewCache, accumulator) {
            var eventSnap = newViewCache.getEventCache();
            if (eventSnap.isFullyInitialized()) {
                var isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();
                var oldCompleteSnap = oldViewCache.getCompleteEventSnap();
                if (accumulator.length > 0 ||
                    !oldViewCache.getEventCache().isFullyInitialized() ||
                    (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||
                    !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {
                    accumulator.push(changeValue(newViewCache.getCompleteEventSnap()));
                }
            }
        };
        ViewProcessor.prototype.generateEventCacheAfterServerEvent_ = function (viewCache, changePath, writesCache, source, accumulator) {
            var oldEventSnap = viewCache.getEventCache();
            if (writesCache.shadowingWrite(changePath) != null) {
                // we have a shadowing write, ignore changes
                return viewCache;
            }
            else {
                var newEventCache = void 0, serverNode = void 0;
                if (pathIsEmpty(changePath)) {
                    // TODO: figure out how this plays with "sliding ack windows"
                    assert(viewCache.getServerCache().isFullyInitialized(), 'If change path is empty, we must have complete server data');
                    if (viewCache.getServerCache().isFiltered()) {
                        // We need to special case this, because we need to only apply writes to complete children, or
                        // we might end up raising events for incomplete children. If the server data is filtered deep
                        // writes cannot be guaranteed to be complete
                        var serverCache = viewCache.getCompleteServerSnap();
                        var completeChildren = serverCache instanceof ChildrenNode
                            ? serverCache
                            : ChildrenNode.EMPTY_NODE;
                        var completeEventChildren = writesCache.calcCompleteEventChildren(completeChildren);
                        newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeEventChildren, accumulator);
                    }
                    else {
                        var completeNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());
                        newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeNode, accumulator);
                    }
                }
                else {
                    var childKey = pathGetFront(changePath);
                    if (childKey === '.priority') {
                        assert(pathGetLength(changePath) === 1, "Can't have a priority with additional path components");
                        var oldEventNode = oldEventSnap.getNode();
                        serverNode = viewCache.getServerCache().getNode();
                        // we might have overwrites for this priority
                        var updatedPriority = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventNode, serverNode);
                        if (updatedPriority != null) {
                            newEventCache = this.filter_.updatePriority(oldEventNode, updatedPriority);
                        }
                        else {
                            // priority didn't change, keep old node
                            newEventCache = oldEventSnap.getNode();
                        }
                    }
                    else {
                        var childChangePath = pathPopFront(changePath);
                        // update child
                        var newEventChild = void 0;
                        if (oldEventSnap.isCompleteForChild(childKey)) {
                            serverNode = viewCache.getServerCache().getNode();
                            var eventChildUpdate = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventSnap.getNode(), serverNode);
                            if (eventChildUpdate != null) {
                                newEventChild = oldEventSnap
                                    .getNode()
                                    .getImmediateChild(childKey)
                                    .updateChild(childChangePath, eventChildUpdate);
                            }
                            else {
                                // Nothing changed, just keep the old child
                                newEventChild = oldEventSnap
                                    .getNode()
                                    .getImmediateChild(childKey);
                            }
                        }
                        else {
                            newEventChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());
                        }
                        if (newEventChild != null) {
                            newEventCache = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);
                        }
                        else {
                            // no complete child available or no change
                            newEventCache = oldEventSnap.getNode();
                        }
                    }
                }
                return viewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), this.filter_.filtersNodes());
            }
        };
        ViewProcessor.prototype.applyServerOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {
            var oldServerSnap = oldViewCache.getServerCache();
            var newServerCache;
            var serverFilter = filterServerNode
                ? this.filter_
                : this.filter_.getIndexedFilter();
            if (pathIsEmpty(changePath)) {
                newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);
            }
            else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {
                // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update
                var newServerNode = oldServerSnap
                    .getNode()
                    .updateChild(changePath, changedSnap);
                newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);
            }
            else {
                var childKey = pathGetFront(changePath);
                if (!oldServerSnap.isCompleteForPath(changePath) &&
                    pathGetLength(changePath) > 1) {
                    // We don't update incomplete nodes with updates intended for other listeners
                    return oldViewCache;
                }
                var childChangePath = pathPopFront(changePath);
                var childNode = oldServerSnap.getNode().getImmediateChild(childKey);
                var newChildNode = childNode.updateChild(childChangePath, changedSnap);
                if (childKey === '.priority') {
                    newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);
                }
                else {
                    newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);
                }
            }
            var newViewCache = oldViewCache.updateServerSnap(newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());
            var source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);
            return this.generateEventCacheAfterServerEvent_(newViewCache, changePath, writesCache, source, accumulator);
        };
        ViewProcessor.prototype.applyUserOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {
            var oldEventSnap = oldViewCache.getEventCache();
            var newViewCache, newEventCache;
            var source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);
            if (pathIsEmpty(changePath)) {
                newEventCache = this.filter_.updateFullNode(oldViewCache.getEventCache().getNode(), changedSnap, accumulator);
                newViewCache = oldViewCache.updateEventSnap(newEventCache, true, this.filter_.filtersNodes());
            }
            else {
                var childKey = pathGetFront(changePath);
                if (childKey === '.priority') {
                    newEventCache = this.filter_.updatePriority(oldViewCache.getEventCache().getNode(), changedSnap);
                    newViewCache = oldViewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());
                }
                else {
                    var childChangePath = pathPopFront(changePath);
                    var oldChild = oldEventSnap.getNode().getImmediateChild(childKey);
                    var newChild = void 0;
                    if (pathIsEmpty(childChangePath)) {
                        // Child overwrite, we can replace the child
                        newChild = changedSnap;
                    }
                    else {
                        var childNode = source.getCompleteChild(childKey);
                        if (childNode != null) {
                            if (pathGetBack(childChangePath) === '.priority' &&
                                childNode.getChild(pathParent(childChangePath)).isEmpty()) {
                                // This is a priority update on an empty node. If this node exists on the server, the
                                // server will send down the priority in the update, so ignore for now
                                newChild = childNode;
                            }
                            else {
                                newChild = childNode.updateChild(childChangePath, changedSnap);
                            }
                        }
                        else {
                            // There is no complete child node available
                            newChild = ChildrenNode.EMPTY_NODE;
                        }
                    }
                    if (!oldChild.equals(newChild)) {
                        var newEventSnap = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);
                        newViewCache = oldViewCache.updateEventSnap(newEventSnap, oldEventSnap.isFullyInitialized(), this.filter_.filtersNodes());
                    }
                    else {
                        newViewCache = oldViewCache;
                    }
                }
            }
            return newViewCache;
        };
        ViewProcessor.cacheHasChild_ = function (viewCache, childKey) {
            return viewCache.getEventCache().isCompleteForChild(childKey);
        };
        ViewProcessor.prototype.applyUserMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, accumulator) {
            var _this = this;
            // HACK: In the case of a limit query, there may be some changes that bump things out of the
            // window leaving room for new items.  It's important we process these changes first, so we
            // iterate the changes twice, first processing any that affect items currently in view.
            // TODO: I consider an item "in view" if cacheHasChild is true, which checks both the server
            // and event snap.  I'm not sure if this will result in edge cases when a child is in one but
            // not the other.
            var curViewCache = viewCache;
            changedChildren.foreach(function (relativePath, childNode) {
                var writePath = pathChild(path, relativePath);
                if (ViewProcessor.cacheHasChild_(viewCache, pathGetFront(writePath))) {
                    curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);
                }
            });
            changedChildren.foreach(function (relativePath, childNode) {
                var writePath = pathChild(path, relativePath);
                if (!ViewProcessor.cacheHasChild_(viewCache, pathGetFront(writePath))) {
                    curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);
                }
            });
            return curViewCache;
        };
        ViewProcessor.prototype.applyMerge_ = function (node, merge) {
            merge.foreach(function (relativePath, childNode) {
                node = node.updateChild(relativePath, childNode);
            });
            return node;
        };
        ViewProcessor.prototype.applyServerMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {
            var _this = this;
            // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and
            // wait for the complete data update coming soon.
            if (viewCache.getServerCache().getNode().isEmpty() &&
                !viewCache.getServerCache().isFullyInitialized()) {
                return viewCache;
            }
            // HACK: In the case of a limit query, there may be some changes that bump things out of the
            // window leaving room for new items.  It's important we process these changes first, so we
            // iterate the changes twice, first processing any that affect items currently in view.
            // TODO: I consider an item "in view" if cacheHasChild is true, which checks both the server
            // and event snap.  I'm not sure if this will result in edge cases when a child is in one but
            // not the other.
            var curViewCache = viewCache;
            var viewMergeTree;
            if (pathIsEmpty(path)) {
                viewMergeTree = changedChildren;
            }
            else {
                viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);
            }
            var serverNode = viewCache.getServerCache().getNode();
            viewMergeTree.children.inorderTraversal(function (childKey, childTree) {
                if (serverNode.hasChild(childKey)) {
                    var serverChild = viewCache
                        .getServerCache()
                        .getNode()
                        .getImmediateChild(childKey);
                    var newChild = _this.applyMerge_(serverChild, childTree);
                    curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);
                }
            });
            viewMergeTree.children.inorderTraversal(function (childKey, childMergeTree) {
                var isUnknownDeepMerge = !viewCache.getServerCache().isCompleteForChild(childKey) &&
                    childMergeTree.value == null;
                if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {
                    var serverChild = viewCache
                        .getServerCache()
                        .getNode()
                        .getImmediateChild(childKey);
                    var newChild = _this.applyMerge_(serverChild, childMergeTree);
                    curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);
                }
            });
            return curViewCache;
        };
        ViewProcessor.prototype.ackUserWrite_ = function (viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {
            if (writesCache.shadowingWrite(ackPath) != null) {
                return viewCache;
            }
            // Only filter server node if it is currently filtered
            var filterServerNode = viewCache.getServerCache().isFiltered();
            // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update
            // now that it won't be shadowed.
            var serverCache = viewCache.getServerCache();
            if (affectedTree.value != null) {
                // This is an overwrite.
                if ((pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||
                    serverCache.isCompleteForPath(ackPath)) {
                    return this.applyServerOverwrite_(viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);
                }
                else if (pathIsEmpty(ackPath)) {
                    // This is a goofy edge case where we are acking data at this location but don't have full data.  We
                    // should just re-apply whatever we have in our cache as a merge.
                    var changedChildren_1 = new ImmutableTree(null);
                    serverCache.getNode().forEachChild(KEY_INDEX, function (name, node) {
                        changedChildren_1 = changedChildren_1.set(new Path(name), node);
                    });
                    return this.applyServerMerge_(viewCache, ackPath, changedChildren_1, writesCache, completeCache, filterServerNode, accumulator);
                }
                else {
                    return viewCache;
                }
            }
            else {
                // This is a merge.
                var changedChildren_2 = new ImmutableTree(null);
                affectedTree.foreach(function (mergePath, value) {
                    var serverCachePath = pathChild(ackPath, mergePath);
                    if (serverCache.isCompleteForPath(serverCachePath)) {
                        changedChildren_2 = changedChildren_2.set(mergePath, serverCache.getNode().getChild(serverCachePath));
                    }
                });
                return this.applyServerMerge_(viewCache, ackPath, changedChildren_2, writesCache, completeCache, filterServerNode, accumulator);
            }
        };
        ViewProcessor.prototype.listenComplete_ = function (viewCache, path, writesCache, accumulator) {
            var oldServerNode = viewCache.getServerCache();
            var newViewCache = viewCache.updateServerSnap(oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());
            return this.generateEventCacheAfterServerEvent_(newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);
        };
        ViewProcessor.prototype.revertUserWrite_ = function (viewCache, path, writesCache, completeServerCache, accumulator) {
            var complete;
            if (writesCache.shadowingWrite(path) != null) {
                return viewCache;
            }
            else {
                var source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);
                var oldEventCache = viewCache.getEventCache().getNode();
                var newEventCache = void 0;
                if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {
                    var newNode = void 0;
                    if (viewCache.getServerCache().isFullyInitialized()) {
                        newNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());
                    }
                    else {
                        var serverChildren = viewCache.getServerCache().getNode();
                        assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');
                        newNode = writesCache.calcCompleteEventChildren(serverChildren);
                    }
                    newNode = newNode;
                    newEventCache = this.filter_.updateFullNode(oldEventCache, newNode, accumulator);
                }
                else {
                    var childKey = pathGetFront(path);
                    var newChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());
                    if (newChild == null &&
                        viewCache.getServerCache().isCompleteForChild(childKey)) {
                        newChild = oldEventCache.getImmediateChild(childKey);
                    }
                    if (newChild != null) {
                        newEventCache = this.filter_.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);
                    }
                    else if (viewCache.getEventCache().getNode().hasChild(childKey)) {
                        // No complete child available, delete the existing one, if any
                        newEventCache = this.filter_.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);
                    }
                    else {
                        newEventCache = oldEventCache;
                    }
                    if (newEventCache.isEmpty() &&
                        viewCache.getServerCache().isFullyInitialized()) {
                        // We might have reverted all child writes. Maybe the old event was a leaf node
                        complete = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());
                        if (complete.isLeafNode()) {
                            newEventCache = this.filter_.updateFullNode(newEventCache, complete, accumulator);
                        }
                    }
                }
                complete =
                    viewCache.getServerCache().isFullyInitialized() ||
                        writesCache.shadowingWrite(newEmptyPath()) != null;
                return viewCache.updateEventSnap(newEventCache, complete, this.filter_.filtersNodes());
            }
        };
        return ViewProcessor;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An EventGenerator is used to convert "raw" changes (Change) as computed by the
     * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()
     * for details.
     *
     */
    var EventGenerator = /** @class */ (function () {
        function EventGenerator(query_) {
            this.query_ = query_;
            this.index_ = this.query_.getQueryParams().getIndex();
        }
        return EventGenerator;
    }());
    /**
     * Given a set of raw changes (no moved events and prevName not specified yet), and a set of
     * EventRegistrations that should be notified of these changes, generate the actual events to be raised.
     *
     * Notes:
     *  - child_moved events will be synthesized at this time for any child_changed events that affect
     *    our index.
     *  - prevName will be calculated based on the index ordering.
     */
    function eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {
        var events = [];
        var moves = [];
        changes.forEach(function (change) {
            if (change.type === "child_changed" /* CHILD_CHANGED */ &&
                eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {
                moves.push(changeChildMoved(change.childName, change.snapshotNode));
            }
        });
        eventGeneratorGenerateEventsForType(eventGenerator, events, "child_removed" /* CHILD_REMOVED */, changes, eventRegistrations, eventCache);
        eventGeneratorGenerateEventsForType(eventGenerator, events, "child_added" /* CHILD_ADDED */, changes, eventRegistrations, eventCache);
        eventGeneratorGenerateEventsForType(eventGenerator, events, "child_moved" /* CHILD_MOVED */, moves, eventRegistrations, eventCache);
        eventGeneratorGenerateEventsForType(eventGenerator, events, "child_changed" /* CHILD_CHANGED */, changes, eventRegistrations, eventCache);
        eventGeneratorGenerateEventsForType(eventGenerator, events, "value" /* VALUE */, changes, eventRegistrations, eventCache);
        return events;
    }
    /**
     * Given changes of a single change type, generate the corresponding events.
     */
    function eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {
        var filteredChanges = changes.filter(function (change) { return change.type === eventType; });
        filteredChanges.sort(function (a, b) {
            return eventGeneratorCompareChanges(eventGenerator, a, b);
        });
        filteredChanges.forEach(function (change) {
            var materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);
            registrations.forEach(function (registration) {
                if (registration.respondsTo(change.type)) {
                    events.push(registration.createEvent(materializedChange, eventGenerator.query_));
                }
            });
        });
    }
    function eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {
        if (change.type === 'value' || change.type === 'child_removed') {
            return change;
        }
        else {
            change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);
            return change;
        }
    }
    function eventGeneratorCompareChanges(eventGenerator, a, b) {
        if (a.childName == null || b.childName == null) {
            throw assertionError('Should only compare child_ events.');
        }
        var aWrapped = new NamedNode(a.childName, a.snapshotNode);
        var bWrapped = new NamedNode(b.childName, b.snapshotNode);
        return eventGenerator.index_.compare(aWrapped, bWrapped);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // Modeled after base64 web-safe chars, but ordered by ASCII.
    var PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';
    var MIN_PUSH_CHAR = '-';
    var MAX_PUSH_CHAR = 'z';
    var MAX_KEY_LEN = 786;
    /**
     * Fancy ID generator that creates 20-character string identifiers with the
     * following properties:
     *
     * 1. They're based on timestamp so that they sort *after* any existing ids.
     * 2. They contain 72-bits of random data after the timestamp so that IDs won't
     *    collide with other clients' IDs.
     * 3. They sort *lexicographically* (so the timestamp is converted to characters
     *    that will sort properly).
     * 4. They're monotonically increasing. Even if you generate more than one in
     *    the same timestamp, the latter ones will sort after the former ones. We do
     *    this by using the previous random bits but "incrementing" them by 1 (only
     *    in the case of a timestamp collision).
     */
    var nextPushId = (function () {
        // Timestamp of last push, used to prevent local collisions if you push twice
        // in one ms.
        var lastPushTime = 0;
        // We generate 72-bits of randomness which get turned into 12 characters and
        // appended to the timestamp to prevent collisions with other clients. We
        // store the last characters we generated because in the event of a collision,
        // we'll use those same characters except "incremented" by one.
        var lastRandChars = [];
        return function (now) {
            var duplicateTime = now === lastPushTime;
            lastPushTime = now;
            var i;
            var timeStampChars = new Array(8);
            for (i = 7; i >= 0; i--) {
                timeStampChars[i] = PUSH_CHARS.charAt(now % 64);
                // NOTE: Can't use << here because javascript will convert to int and lose
                // the upper bits.
                now = Math.floor(now / 64);
            }
            assert(now === 0, 'Cannot push at time == 0');
            var id = timeStampChars.join('');
            if (!duplicateTime) {
                for (i = 0; i < 12; i++) {
                    lastRandChars[i] = Math.floor(Math.random() * 64);
                }
            }
            else {
                // If the timestamp hasn't changed since last push, use the same random
                // number, except incremented by 1.
                for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {
                    lastRandChars[i] = 0;
                }
                lastRandChars[i]++;
            }
            for (i = 0; i < 12; i++) {
                id += PUSH_CHARS.charAt(lastRandChars[i]);
            }
            assert(id.length === 20, 'nextPushId: Length should be 20.');
            return id;
        };
    })();
    var successor = function (key) {
        if (key === '' + INTEGER_32_MAX) {
            // See https://firebase.google.com/docs/database/web/lists-of-data#data-order
            return MIN_PUSH_CHAR;
        }
        var keyAsInt = tryParseInt(key);
        if (keyAsInt != null) {
            return '' + (keyAsInt + 1);
        }
        var next = new Array(key.length);
        for (var i_1 = 0; i_1 < next.length; i_1++) {
            next[i_1] = key.charAt(i_1);
        }
        if (next.length < MAX_KEY_LEN) {
            next.push(MIN_PUSH_CHAR);
            return next.join('');
        }
        var i = next.length - 1;
        while (i >= 0 && next[i] === MAX_PUSH_CHAR) {
            i--;
        }
        // `successor` was called on the largest possible key, so return the
        // MAX_NAME, which sorts larger than all keys.
        if (i === -1) {
            return MAX_NAME;
        }
        var source = next[i];
        var sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);
        next[i] = sourcePlusOne;
        return next.slice(0, i + 1).join('');
    };
    // `key` is assumed to be non-empty.
    var predecessor = function (key) {
        if (key === '' + INTEGER_32_MIN) {
            return MIN_NAME;
        }
        var keyAsInt = tryParseInt(key);
        if (keyAsInt != null) {
            return '' + (keyAsInt - 1);
        }
        var next = new Array(key.length);
        for (var i = 0; i < next.length; i++) {
            next[i] = key.charAt(i);
        }
        // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically
        // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller
        // than that, `predecessor(predecessor(key))`, is
        //
        // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \
        //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }
        //
        // analogous to increment/decrement for base-10 integers.
        //
        // This works because lexigographic comparison works character-by-character,
        // using length as a tie-breaker if one key is a prefix of the other.
        if (next[next.length - 1] === MIN_PUSH_CHAR) {
            if (next.length === 1) {
                // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey
                return '' + INTEGER_32_MAX;
            }
            delete next[next.length - 1];
            return next.join('');
        }
        // Replace the last character with it's immediate predecessor, and
        // fill the suffix of the key with MAX_PUSH_CHAR. This is the
        // lexicographically largest possible key smaller than `key`.
        next[next.length - 1] = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(next[next.length - 1]) - 1);
        return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);
    };

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ValueIndex = /** @class */ (function (_super) {
        __extends$1(ValueIndex, _super);
        function ValueIndex() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @inheritDoc
         */
        ValueIndex.prototype.compare = function (a, b) {
            var indexCmp = a.node.compareTo(b.node);
            if (indexCmp === 0) {
                return nameCompare(a.name, b.name);
            }
            else {
                return indexCmp;
            }
        };
        /**
         * @inheritDoc
         */
        ValueIndex.prototype.isDefinedOn = function (node) {
            return true;
        };
        /**
         * @inheritDoc
         */
        ValueIndex.prototype.indexedValueChanged = function (oldNode, newNode) {
            return !oldNode.equals(newNode);
        };
        /**
         * @inheritDoc
         */
        ValueIndex.prototype.minPost = function () {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return NamedNode.MIN;
        };
        /**
         * @inheritDoc
         */
        ValueIndex.prototype.maxPost = function () {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return NamedNode.MAX;
        };
        ValueIndex.prototype.makePost = function (indexValue, name) {
            var valueNode = nodeFromJSON$1(indexValue);
            return new NamedNode(name, valueNode);
        };
        /**
         * @return String representation for inclusion in a query spec
         */
        ValueIndex.prototype.toString = function () {
            return '.value';
        };
        return ValueIndex;
    }(Index));
    var VALUE_INDEX = new ValueIndex();

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var PathIndex = /** @class */ (function (_super) {
        __extends$1(PathIndex, _super);
        function PathIndex(indexPath_) {
            var _this = _super.call(this) || this;
            _this.indexPath_ = indexPath_;
            assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', "Can't create PathIndex with empty path or .priority key");
            return _this;
        }
        PathIndex.prototype.extractChild = function (snap) {
            return snap.getChild(this.indexPath_);
        };
        /**
         * @inheritDoc
         */
        PathIndex.prototype.isDefinedOn = function (node) {
            return !node.getChild(this.indexPath_).isEmpty();
        };
        /**
         * @inheritDoc
         */
        PathIndex.prototype.compare = function (a, b) {
            var aChild = this.extractChild(a.node);
            var bChild = this.extractChild(b.node);
            var indexCmp = aChild.compareTo(bChild);
            if (indexCmp === 0) {
                return nameCompare(a.name, b.name);
            }
            else {
                return indexCmp;
            }
        };
        /**
         * @inheritDoc
         */
        PathIndex.prototype.makePost = function (indexValue, name) {
            var valueNode = nodeFromJSON$1(indexValue);
            var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);
            return new NamedNode(name, node);
        };
        /**
         * @inheritDoc
         */
        PathIndex.prototype.maxPost = function () {
            var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE$2);
            return new NamedNode(MAX_NAME, node);
        };
        /**
         * @inheritDoc
         */
        PathIndex.prototype.toString = function () {
            return pathSlice(this.indexPath_, 0).join('/');
        };
        return PathIndex;
    }(Index));

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node
     */
    var RangedFilter = /** @class */ (function () {
        function RangedFilter(params) {
            this.indexedFilter_ = new IndexedFilter(params.getIndex());
            this.index_ = params.getIndex();
            this.startPost_ = RangedFilter.getStartPost_(params);
            this.endPost_ = RangedFilter.getEndPost_(params);
        }
        RangedFilter.prototype.getStartPost = function () {
            return this.startPost_;
        };
        RangedFilter.prototype.getEndPost = function () {
            return this.endPost_;
        };
        RangedFilter.prototype.matches = function (node) {
            return (this.index_.compare(this.getStartPost(), node) <= 0 &&
                this.index_.compare(node, this.getEndPost()) <= 0);
        };
        /**
         * @inheritDoc
         */
        RangedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {
            if (!this.matches(new NamedNode(key, newChild))) {
                newChild = ChildrenNode.EMPTY_NODE;
            }
            return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);
        };
        /**
         * @inheritDoc
         */
        RangedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {
            if (newSnap.isLeafNode()) {
                // Make sure we have a children node with the correct index, not a leaf node;
                newSnap = ChildrenNode.EMPTY_NODE;
            }
            var filtered = newSnap.withIndex(this.index_);
            // Don't support priorities on queries
            filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);
            var self = this;
            newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {
                if (!self.matches(new NamedNode(key, childNode))) {
                    filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);
                }
            });
            return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);
        };
        /**
         * @inheritDoc
         */
        RangedFilter.prototype.updatePriority = function (oldSnap, newPriority) {
            // Don't support priorities on queries
            return oldSnap;
        };
        /**
         * @inheritDoc
         */
        RangedFilter.prototype.filtersNodes = function () {
            return true;
        };
        /**
         * @inheritDoc
         */
        RangedFilter.prototype.getIndexedFilter = function () {
            return this.indexedFilter_;
        };
        /**
         * @inheritDoc
         */
        RangedFilter.prototype.getIndex = function () {
            return this.index_;
        };
        RangedFilter.getStartPost_ = function (params) {
            if (params.hasStart()) {
                var startName = params.getIndexStartName();
                return params.getIndex().makePost(params.getIndexStartValue(), startName);
            }
            else {
                return params.getIndex().minPost();
            }
        };
        RangedFilter.getEndPost_ = function (params) {
            if (params.hasEnd()) {
                var endName = params.getIndexEndName();
                return params.getIndex().makePost(params.getIndexEndValue(), endName);
            }
            else {
                return params.getIndex().maxPost();
            }
        };
        return RangedFilter;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible
     */
    var LimitedFilter = /** @class */ (function () {
        function LimitedFilter(params) {
            this.rangedFilter_ = new RangedFilter(params);
            this.index_ = params.getIndex();
            this.limit_ = params.getLimit();
            this.reverse_ = !params.isViewFromLeft();
        }
        /**
         * @inheritDoc
         */
        LimitedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {
            if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {
                newChild = ChildrenNode.EMPTY_NODE;
            }
            if (snap.getImmediateChild(key).equals(newChild)) {
                // No change
                return snap;
            }
            else if (snap.numChildren() < this.limit_) {
                return this.rangedFilter_
                    .getIndexedFilter()
                    .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);
            }
            else {
                return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);
            }
        };
        /**
         * @inheritDoc
         */
        LimitedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {
            var filtered;
            if (newSnap.isLeafNode() || newSnap.isEmpty()) {
                // Make sure we have a children node with the correct index, not a leaf node;
                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);
            }
            else {
                if (this.limit_ * 2 < newSnap.numChildren() &&
                    newSnap.isIndexed(this.index_)) {
                    // Easier to build up a snapshot, since what we're given has more than twice the elements we want
                    filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);
                    // anchor to the startPost, endPost, or last element as appropriate
                    var iterator = void 0;
                    if (this.reverse_) {
                        iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);
                    }
                    else {
                        iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);
                    }
                    var count = 0;
                    while (iterator.hasNext() && count < this.limit_) {
                        var next = iterator.getNext();
                        var inRange = void 0;
                        if (this.reverse_) {
                            inRange =
                                this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;
                        }
                        else {
                            inRange =
                                this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;
                        }
                        if (inRange) {
                            filtered = filtered.updateImmediateChild(next.name, next.node);
                            count++;
                        }
                        else {
                            // if we have reached the end post, we cannot keep adding elemments
                            break;
                        }
                    }
                }
                else {
                    // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one
                    filtered = newSnap.withIndex(this.index_);
                    // Don't support priorities on queries
                    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);
                    var startPost = void 0;
                    var endPost = void 0;
                    var cmp = void 0;
                    var iterator = void 0;
                    if (this.reverse_) {
                        iterator = filtered.getReverseIterator(this.index_);
                        startPost = this.rangedFilter_.getEndPost();
                        endPost = this.rangedFilter_.getStartPost();
                        var indexCompare_1 = this.index_.getCompare();
                        cmp = function (a, b) { return indexCompare_1(b, a); };
                    }
                    else {
                        iterator = filtered.getIterator(this.index_);
                        startPost = this.rangedFilter_.getStartPost();
                        endPost = this.rangedFilter_.getEndPost();
                        cmp = this.index_.getCompare();
                    }
                    var count = 0;
                    var foundStartPost = false;
                    while (iterator.hasNext()) {
                        var next = iterator.getNext();
                        if (!foundStartPost && cmp(startPost, next) <= 0) {
                            // start adding
                            foundStartPost = true;
                        }
                        var inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;
                        if (inRange) {
                            count++;
                        }
                        else {
                            filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);
                        }
                    }
                }
            }
            return this.rangedFilter_
                .getIndexedFilter()
                .updateFullNode(oldSnap, filtered, optChangeAccumulator);
        };
        /**
         * @inheritDoc
         */
        LimitedFilter.prototype.updatePriority = function (oldSnap, newPriority) {
            // Don't support priorities on queries
            return oldSnap;
        };
        /**
         * @inheritDoc
         */
        LimitedFilter.prototype.filtersNodes = function () {
            return true;
        };
        /**
         * @inheritDoc
         */
        LimitedFilter.prototype.getIndexedFilter = function () {
            return this.rangedFilter_.getIndexedFilter();
        };
        /**
         * @inheritDoc
         */
        LimitedFilter.prototype.getIndex = function () {
            return this.index_;
        };
        LimitedFilter.prototype.fullLimitUpdateChild_ = function (snap, childKey, childSnap, source, changeAccumulator) {
            // TODO: rename all cache stuff etc to general snap terminology
            var cmp;
            if (this.reverse_) {
                var indexCmp_1 = this.index_.getCompare();
                cmp = function (a, b) { return indexCmp_1(b, a); };
            }
            else {
                cmp = this.index_.getCompare();
            }
            var oldEventCache = snap;
            assert(oldEventCache.numChildren() === this.limit_, '');
            var newChildNamedNode = new NamedNode(childKey, childSnap);
            var windowBoundary = this.reverse_
                ? oldEventCache.getFirstChild(this.index_)
                : oldEventCache.getLastChild(this.index_);
            var inRange = this.rangedFilter_.matches(newChildNamedNode);
            if (oldEventCache.hasChild(childKey)) {
                var oldChildSnap = oldEventCache.getImmediateChild(childKey);
                var nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);
                while (nextChild != null &&
                    (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {
                    // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't
                    // been applied to the limited filter yet. Ignore this next child which will be updated later in
                    // the limited filter...
                    nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);
                }
                var compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);
                var remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;
                if (remainsInWindow) {
                    if (changeAccumulator != null) {
                        changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));
                    }
                    return oldEventCache.updateImmediateChild(childKey, childSnap);
                }
                else {
                    if (changeAccumulator != null) {
                        changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));
                    }
                    var newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);
                    var nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);
                    if (nextChildInRange) {
                        if (changeAccumulator != null) {
                            changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));
                        }
                        return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);
                    }
                    else {
                        return newEventCache;
                    }
                }
            }
            else if (childSnap.isEmpty()) {
                // we're deleting a node, but it was not in the window, so ignore it
                return snap;
            }
            else if (inRange) {
                if (cmp(windowBoundary, newChildNamedNode) >= 0) {
                    if (changeAccumulator != null) {
                        changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));
                        changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));
                    }
                    return oldEventCache
                        .updateImmediateChild(childKey, childSnap)
                        .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);
                }
                else {
                    return snap;
                }
            }
            else {
                return snap;
            }
        };
        return LimitedFilter;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a
     * range to be returned for a particular location. It is assumed that validation of parameters is done at the
     * user-facing API level, so it is not done here.
     */
    var QueryParams = /** @class */ (function () {
        function QueryParams() {
            this.limitSet_ = false;
            this.startSet_ = false;
            this.startNameSet_ = false;
            this.startAfterSet_ = false;
            this.endSet_ = false;
            this.endNameSet_ = false;
            this.endBeforeSet_ = false;
            this.limit_ = 0;
            this.viewFrom_ = '';
            this.indexStartValue_ = null;
            this.indexStartName_ = '';
            this.indexEndValue_ = null;
            this.indexEndName_ = '';
            this.index_ = PRIORITY_INDEX;
        }
        QueryParams.prototype.hasStart = function () {
            return this.startSet_;
        };
        QueryParams.prototype.hasStartAfter = function () {
            return this.startAfterSet_;
        };
        QueryParams.prototype.hasEndBefore = function () {
            return this.endBeforeSet_;
        };
        /**
         * @return True if it would return from left.
         */
        QueryParams.prototype.isViewFromLeft = function () {
            if (this.viewFrom_ === '') {
                // limit(), rather than limitToFirst or limitToLast was called.
                // This means that only one of startSet_ and endSet_ is true. Use them
                // to calculate which side of the view to anchor to. If neither is set,
                // anchor to the end.
                return this.startSet_;
            }
            else {
                return this.viewFrom_ === "l" /* VIEW_FROM_LEFT */;
            }
        };
        /**
         * Only valid to call if hasStart() returns true
         */
        QueryParams.prototype.getIndexStartValue = function () {
            assert(this.startSet_, 'Only valid if start has been set');
            return this.indexStartValue_;
        };
        /**
         * Only valid to call if hasStart() returns true.
         * Returns the starting key name for the range defined by these query parameters
         */
        QueryParams.prototype.getIndexStartName = function () {
            assert(this.startSet_, 'Only valid if start has been set');
            if (this.startNameSet_) {
                return this.indexStartName_;
            }
            else {
                return MIN_NAME;
            }
        };
        QueryParams.prototype.hasEnd = function () {
            return this.endSet_;
        };
        /**
         * Only valid to call if hasEnd() returns true.
         */
        QueryParams.prototype.getIndexEndValue = function () {
            assert(this.endSet_, 'Only valid if end has been set');
            return this.indexEndValue_;
        };
        /**
         * Only valid to call if hasEnd() returns true.
         * Returns the end key name for the range defined by these query parameters
         */
        QueryParams.prototype.getIndexEndName = function () {
            assert(this.endSet_, 'Only valid if end has been set');
            if (this.endNameSet_) {
                return this.indexEndName_;
            }
            else {
                return MAX_NAME;
            }
        };
        QueryParams.prototype.hasLimit = function () {
            return this.limitSet_;
        };
        /**
         * @return True if a limit has been set and it has been explicitly anchored
         */
        QueryParams.prototype.hasAnchoredLimit = function () {
            return this.limitSet_ && this.viewFrom_ !== '';
        };
        /**
         * Only valid to call if hasLimit() returns true
         */
        QueryParams.prototype.getLimit = function () {
            assert(this.limitSet_, 'Only valid if limit has been set');
            return this.limit_;
        };
        QueryParams.prototype.getIndex = function () {
            return this.index_;
        };
        QueryParams.prototype.loadsAllData = function () {
            return !(this.startSet_ || this.endSet_ || this.limitSet_);
        };
        QueryParams.prototype.isDefault = function () {
            return this.loadsAllData() && this.index_ === PRIORITY_INDEX;
        };
        QueryParams.prototype.copy = function () {
            var copy = new QueryParams();
            copy.limitSet_ = this.limitSet_;
            copy.limit_ = this.limit_;
            copy.startSet_ = this.startSet_;
            copy.indexStartValue_ = this.indexStartValue_;
            copy.startNameSet_ = this.startNameSet_;
            copy.indexStartName_ = this.indexStartName_;
            copy.endSet_ = this.endSet_;
            copy.indexEndValue_ = this.indexEndValue_;
            copy.endNameSet_ = this.endNameSet_;
            copy.indexEndName_ = this.indexEndName_;
            copy.index_ = this.index_;
            copy.viewFrom_ = this.viewFrom_;
            return copy;
        };
        return QueryParams;
    }());
    function queryParamsGetNodeFilter(queryParams) {
        if (queryParams.loadsAllData()) {
            return new IndexedFilter(queryParams.getIndex());
        }
        else if (queryParams.hasLimit()) {
            return new LimitedFilter(queryParams);
        }
        else {
            return new RangedFilter(queryParams);
        }
    }
    function queryParamsLimitToFirst(queryParams, newLimit) {
        var newParams = queryParams.copy();
        newParams.limitSet_ = true;
        newParams.limit_ = newLimit;
        newParams.viewFrom_ = "l" /* VIEW_FROM_LEFT */;
        return newParams;
    }
    function queryParamsLimitToLast(queryParams, newLimit) {
        var newParams = queryParams.copy();
        newParams.limitSet_ = true;
        newParams.limit_ = newLimit;
        newParams.viewFrom_ = "r" /* VIEW_FROM_RIGHT */;
        return newParams;
    }
    function queryParamsStartAt(queryParams, indexValue, key) {
        var newParams = queryParams.copy();
        newParams.startSet_ = true;
        if (indexValue === undefined) {
            indexValue = null;
        }
        newParams.indexStartValue_ = indexValue;
        if (key != null) {
            newParams.startNameSet_ = true;
            newParams.indexStartName_ = key;
        }
        else {
            newParams.startNameSet_ = false;
            newParams.indexStartName_ = '';
        }
        return newParams;
    }
    function queryParamsStartAfter(queryParams, indexValue, key) {
        var params;
        if (queryParams.index_ === KEY_INDEX) {
            if (typeof indexValue === 'string') {
                indexValue = successor(indexValue);
            }
            params = queryParamsStartAt(queryParams, indexValue, key);
        }
        else {
            var childKey = void 0;
            if (key == null) {
                childKey = MAX_NAME;
            }
            else {
                childKey = successor(key);
            }
            params = queryParamsStartAt(queryParams, indexValue, childKey);
        }
        params.startAfterSet_ = true;
        return params;
    }
    function queryParamsEndAt(queryParams, indexValue, key) {
        var newParams = queryParams.copy();
        newParams.endSet_ = true;
        if (indexValue === undefined) {
            indexValue = null;
        }
        newParams.indexEndValue_ = indexValue;
        if (key !== undefined) {
            newParams.endNameSet_ = true;
            newParams.indexEndName_ = key;
        }
        else {
            newParams.endNameSet_ = false;
            newParams.indexEndName_ = '';
        }
        return newParams;
    }
    function queryParamsEndBefore(queryParams, indexValue, key) {
        var childKey;
        var params;
        if (queryParams.index_ === KEY_INDEX) {
            if (typeof indexValue === 'string') {
                indexValue = predecessor(indexValue);
            }
            params = queryParamsEndAt(queryParams, indexValue, key);
        }
        else {
            if (key == null) {
                childKey = MIN_NAME;
            }
            else {
                childKey = predecessor(key);
            }
            params = queryParamsEndAt(queryParams, indexValue, childKey);
        }
        params.endBeforeSet_ = true;
        return params;
    }
    function queryParamsOrderBy(queryParams, index) {
        var newParams = queryParams.copy();
        newParams.index_ = index;
        return newParams;
    }
    /**
     * Returns a set of REST query string parameters representing this query.
     *
     * @return query string parameters
     */
    function queryParamsToRestQueryStringParameters(queryParams) {
        var qs = {};
        if (queryParams.isDefault()) {
            return qs;
        }
        var orderBy;
        if (queryParams.index_ === PRIORITY_INDEX) {
            orderBy = "$priority" /* PRIORITY_INDEX */;
        }
        else if (queryParams.index_ === VALUE_INDEX) {
            orderBy = "$value" /* VALUE_INDEX */;
        }
        else if (queryParams.index_ === KEY_INDEX) {
            orderBy = "$key" /* KEY_INDEX */;
        }
        else {
            assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');
            orderBy = queryParams.index_.toString();
        }
        qs["orderBy" /* ORDER_BY */] = stringify(orderBy);
        if (queryParams.startSet_) {
            qs["startAt" /* START_AT */] = stringify(queryParams.indexStartValue_);
            if (queryParams.startNameSet_) {
                qs["startAt" /* START_AT */] +=
                    ',' + stringify(queryParams.indexStartName_);
            }
        }
        if (queryParams.endSet_) {
            qs["endAt" /* END_AT */] = stringify(queryParams.indexEndValue_);
            if (queryParams.endNameSet_) {
                qs["endAt" /* END_AT */] +=
                    ',' + stringify(queryParams.indexEndName_);
            }
        }
        if (queryParams.limitSet_) {
            if (queryParams.isViewFromLeft()) {
                qs["limitToFirst" /* LIMIT_TO_FIRST */] = queryParams.limit_;
            }
            else {
                qs["limitToLast" /* LIMIT_TO_LAST */] = queryParams.limit_;
            }
        }
        return qs;
    }
    function queryParamsGetQueryObject(queryParams) {
        var obj = {};
        if (queryParams.startSet_) {
            obj["sp" /* INDEX_START_VALUE */] =
                queryParams.indexStartValue_;
            if (queryParams.startNameSet_) {
                obj["sn" /* INDEX_START_NAME */] =
                    queryParams.indexStartName_;
            }
        }
        if (queryParams.endSet_) {
            obj["ep" /* INDEX_END_VALUE */] = queryParams.indexEndValue_;
            if (queryParams.endNameSet_) {
                obj["en" /* INDEX_END_NAME */] = queryParams.indexEndName_;
            }
        }
        if (queryParams.limitSet_) {
            obj["l" /* LIMIT */] = queryParams.limit_;
            var viewFrom = queryParams.viewFrom_;
            if (viewFrom === '') {
                if (queryParams.isViewFromLeft()) {
                    viewFrom = "l" /* VIEW_FROM_LEFT */;
                }
                else {
                    viewFrom = "r" /* VIEW_FROM_RIGHT */;
                }
            }
            obj["vf" /* VIEW_FROM */] = viewFrom;
        }
        // For now, priority index is the default, so we only specify if it's some other index
        if (queryParams.index_ !== PRIORITY_INDEX) {
            obj["i" /* INDEX */] = queryParams.index_.toString();
        }
        return obj;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A view represents a specific location and query that has 1 or more event registrations.
     *
     * It does several things:
     *  - Maintains the list of event registrations for this location/query.
     *  - Maintains a cache of the data visible for this location/query.
     *  - Applies new operations (via applyOperation), updates the cache, and based on the event
     *    registrations returns the set of events to be raised.
     */
    var View = /** @class */ (function () {
        function View(query_, initialViewCache) {
            this.query_ = query_;
            this.eventRegistrations_ = [];
            var params = this.query_.getQueryParams();
            var indexFilter = new IndexedFilter(params.getIndex());
            var filter = queryParamsGetNodeFilter(params);
            this.processor_ = new ViewProcessor(filter);
            var initialServerCache = initialViewCache.getServerCache();
            var initialEventCache = initialViewCache.getEventCache();
            // Don't filter server node with other filter than index, wait for tagged listen
            var serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);
            var eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);
            var newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());
            var newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());
            this.viewCache_ = new ViewCache(newEventCache, newServerCache);
            this.eventGenerator_ = new EventGenerator(this.query_);
        }
        View.prototype.getQuery = function () {
            return this.query_;
        };
        View.prototype.getServerCache = function () {
            return this.viewCache_.getServerCache().getNode();
        };
        View.prototype.getCompleteNode = function () {
            return this.viewCache_.getCompleteEventSnap();
        };
        View.prototype.getCompleteServerCache = function (path) {
            var cache = this.viewCache_.getCompleteServerSnap();
            if (cache) {
                // If this isn't a "loadsAllData" view, then cache isn't actually a complete cache and
                // we need to see if it contains the child we're interested in.
                if (this.query_.getQueryParams().loadsAllData() ||
                    (!pathIsEmpty(path) &&
                        !cache.getImmediateChild(pathGetFront(path)).isEmpty())) {
                    return cache.getChild(path);
                }
            }
            return null;
        };
        View.prototype.isEmpty = function () {
            return this.eventRegistrations_.length === 0;
        };
        View.prototype.addEventRegistration = function (eventRegistration) {
            this.eventRegistrations_.push(eventRegistration);
        };
        /**
         * @param eventRegistration If null, remove all callbacks.
         * @param cancelError If a cancelError is provided, appropriate cancel events will be returned.
         * @return Cancel events, if cancelError was provided.
         */
        View.prototype.removeEventRegistration = function (eventRegistration, cancelError) {
            var cancelEvents = [];
            if (cancelError) {
                assert(eventRegistration == null, 'A cancel should cancel all event registrations.');
                var path_1 = this.query_.path;
                this.eventRegistrations_.forEach(function (registration) {
                    var maybeEvent = registration.createCancelEvent(cancelError, path_1);
                    if (maybeEvent) {
                        cancelEvents.push(maybeEvent);
                    }
                });
            }
            if (eventRegistration) {
                var remaining = [];
                for (var i = 0; i < this.eventRegistrations_.length; ++i) {
                    var existing = this.eventRegistrations_[i];
                    if (!existing.matches(eventRegistration)) {
                        remaining.push(existing);
                    }
                    else if (eventRegistration.hasAnyCallback()) {
                        // We're removing just this one
                        remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));
                        break;
                    }
                }
                this.eventRegistrations_ = remaining;
            }
            else {
                this.eventRegistrations_ = [];
            }
            return cancelEvents;
        };
        /**
         * Applies the given Operation, updates our cache, and returns the appropriate events.
         */
        View.prototype.applyOperation = function (operation, writesCache, completeServerCache) {
            if (operation.type === OperationType.MERGE &&
                operation.source.queryId !== null) {
                assert(this.viewCache_.getCompleteServerSnap(), 'We should always have a full cache before handling merges');
                assert(this.viewCache_.getCompleteEventSnap(), 'Missing event cache, even though we have a server cache');
            }
            var oldViewCache = this.viewCache_;
            var result = this.processor_.applyOperation(oldViewCache, operation, writesCache, completeServerCache);
            this.processor_.assertIndexed(result.viewCache);
            assert(result.viewCache.getServerCache().isFullyInitialized() ||
                !oldViewCache.getServerCache().isFullyInitialized(), 'Once a server snap is complete, it should never go back');
            this.viewCache_ = result.viewCache;
            return this.generateEventsForChanges_(result.changes, result.viewCache.getEventCache().getNode(), null);
        };
        View.prototype.getInitialEvents = function (registration) {
            var eventSnap = this.viewCache_.getEventCache();
            var initialChanges = [];
            if (!eventSnap.getNode().isLeafNode()) {
                var eventNode = eventSnap.getNode();
                eventNode.forEachChild(PRIORITY_INDEX, function (key, childNode) {
                    initialChanges.push(changeChildAdded(key, childNode));
                });
            }
            if (eventSnap.isFullyInitialized()) {
                initialChanges.push(changeValue(eventSnap.getNode()));
            }
            return this.generateEventsForChanges_(initialChanges, eventSnap.getNode(), registration);
        };
        View.prototype.generateEventsForChanges_ = function (changes, eventCache, eventRegistration) {
            var registrations = eventRegistration
                ? [eventRegistration]
                : this.eventRegistrations_;
            return eventGeneratorGenerateEventsForChanges(this.eventGenerator_, changes, eventCache, registrations);
        };
        return View;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var __referenceConstructor;
    /**
     * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to
     * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes
     * and user writes (set, transaction, update).
     *
     * It's responsible for:
     *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).
     *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,
     *    applyUserOverwrite, etc.)
     */
    var SyncPoint = /** @class */ (function () {
        function SyncPoint() {
            /**
             * The Views being tracked at this location in the tree, stored as a map where the key is a
             * queryId and the value is the View for that query.
             *
             * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).
             */
            this.views = new Map();
        }
        Object.defineProperty(SyncPoint, "__referenceConstructor", {
            get: function () {
                assert(__referenceConstructor, 'Reference.ts has not been loaded');
                return __referenceConstructor;
            },
            set: function (val) {
                assert(!__referenceConstructor, '__referenceConstructor has already been defined');
                __referenceConstructor = val;
            },
            enumerable: false,
            configurable: true
        });
        SyncPoint.prototype.isEmpty = function () {
            return this.views.size === 0;
        };
        SyncPoint.prototype.applyOperation = function (operation, writesCache, optCompleteServerCache) {
            var e_1, _a;
            var queryId = operation.source.queryId;
            if (queryId !== null) {
                var view = this.views.get(queryId);
                assert(view != null, 'SyncTree gave us an op for an invalid query.');
                return view.applyOperation(operation, writesCache, optCompleteServerCache);
            }
            else {
                var events = [];
                try {
                    for (var _b = __values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var view = _c.value;
                        events = events.concat(view.applyOperation(operation, writesCache, optCompleteServerCache));
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                return events;
            }
        };
        /**
         * Get a view for the specified query.
         *
         * @param query The query to return a view for
         * @param writesCache
         * @param serverCache
         * @param serverCacheComplete
         * @return Events to raise.
         */
        SyncPoint.prototype.getView = function (query, writesCache, serverCache, serverCacheComplete) {
            var queryId = query.queryIdentifier();
            var view = this.views.get(queryId);
            if (!view) {
                // TODO: make writesCache take flag for complete server node
                var eventCache = writesCache.calcCompleteEventCache(serverCacheComplete ? serverCache : null);
                var eventCacheComplete = false;
                if (eventCache) {
                    eventCacheComplete = true;
                }
                else if (serverCache instanceof ChildrenNode) {
                    eventCache = writesCache.calcCompleteEventChildren(serverCache);
                    eventCacheComplete = false;
                }
                else {
                    eventCache = ChildrenNode.EMPTY_NODE;
                    eventCacheComplete = false;
                }
                var viewCache = new ViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));
                return new View(query, viewCache);
            }
            return view;
        };
        /**
         * Add an event callback for the specified query.
         *
         * @param query
         * @param eventRegistration
         * @param writesCache
         * @param serverCache Complete server cache, if we have it.
         * @param serverCacheComplete
         * @return Events to raise.
         */
        SyncPoint.prototype.addEventRegistration = function (query, eventRegistration, writesCache, serverCache, serverCacheComplete) {
            var view = this.getView(query, writesCache, serverCache, serverCacheComplete);
            if (!this.views.has(query.queryIdentifier())) {
                this.views.set(query.queryIdentifier(), view);
            }
            // This is guaranteed to exist now, we just created anything that was missing
            view.addEventRegistration(eventRegistration);
            return view.getInitialEvents(eventRegistration);
        };
        /**
         * Remove event callback(s).  Return cancelEvents if a cancelError is specified.
         *
         * If query is the default query, we'll check all views for the specified eventRegistration.
         * If eventRegistration is null, we'll remove all callbacks for the specified view(s).
         *
         * @param eventRegistration If null, remove all callbacks.
         * @param cancelError If a cancelError is provided, appropriate cancel events will be returned.
         * @return removed queries and any cancel events
         */
        SyncPoint.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {
            var e_2, _a;
            var queryId = query.queryIdentifier();
            var removed = [];
            var cancelEvents = [];
            var hadCompleteView = this.hasCompleteView();
            if (queryId === 'default') {
                try {
                    // When you do ref.off(...), we search all views for the registration to remove.
                    for (var _b = __values(this.views.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var _d = __read(_c.value, 2), viewQueryId = _d[0], view = _d[1];
                        cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));
                        if (view.isEmpty()) {
                            this.views.delete(viewQueryId);
                            // We'll deal with complete views later.
                            if (!view.getQuery().getQueryParams().loadsAllData()) {
                                removed.push(view.getQuery());
                            }
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
            else {
                // remove the callback from the specific view.
                var view = this.views.get(queryId);
                if (view) {
                    cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));
                    if (view.isEmpty()) {
                        this.views.delete(queryId);
                        // We'll deal with complete views later.
                        if (!view.getQuery().getQueryParams().loadsAllData()) {
                            removed.push(view.getQuery());
                        }
                    }
                }
            }
            if (hadCompleteView && !this.hasCompleteView()) {
                // We removed our last complete view.
                removed.push(new SyncPoint.__referenceConstructor(query.repo, query.path));
            }
            return { removed: removed, events: cancelEvents };
        };
        SyncPoint.prototype.getQueryViews = function () {
            var e_3, _a;
            var result = [];
            try {
                for (var _b = __values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var view = _c.value;
                    if (!view.getQuery().getQueryParams().loadsAllData()) {
                        result.push(view);
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
            return result;
        };
        /**
         * @param path The path to the desired complete snapshot
         * @return A complete cache, if it exists
         */
        SyncPoint.prototype.getCompleteServerCache = function (path) {
            var e_4, _a;
            var serverCache = null;
            try {
                for (var _b = __values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var view = _c.value;
                    serverCache = serverCache || view.getCompleteServerCache(path);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_4) throw e_4.error; }
            }
            return serverCache;
        };
        SyncPoint.prototype.viewForQuery = function (query) {
            var params = query.getQueryParams();
            if (params.loadsAllData()) {
                return this.getCompleteView();
            }
            else {
                var queryId = query.queryIdentifier();
                return this.views.get(queryId);
            }
        };
        SyncPoint.prototype.viewExistsForQuery = function (query) {
            return this.viewForQuery(query) != null;
        };
        SyncPoint.prototype.hasCompleteView = function () {
            return this.getCompleteView() != null;
        };
        SyncPoint.prototype.getCompleteView = function () {
            var e_5, _a;
            try {
                for (var _b = __values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var view = _c.value;
                    if (view.getQuery().getQueryParams().loadsAllData()) {
                        return view;
                    }
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_5) throw e_5.error; }
            }
            return null;
        };
        return SyncPoint;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with
     * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write
     * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write
     * to reflect the write added.
     */
    var CompoundWrite = /** @class */ (function () {
        function CompoundWrite(writeTree_) {
            this.writeTree_ = writeTree_;
        }
        CompoundWrite.empty = function () {
            return new CompoundWrite(new ImmutableTree(null));
        };
        return CompoundWrite;
    }());
    function compoundWriteAddWrite(compoundWrite, path, node) {
        if (pathIsEmpty(path)) {
            return new CompoundWrite(new ImmutableTree(node));
        }
        else {
            var rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);
            if (rootmost != null) {
                var rootMostPath = rootmost.path;
                var value = rootmost.value;
                var relativePath = newRelativePath(rootMostPath, path);
                value = value.updateChild(relativePath, node);
                return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));
            }
            else {
                var subtree = new ImmutableTree(node);
                var newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);
                return new CompoundWrite(newWriteTree);
            }
        }
    }
    function compoundWriteAddWrites(compoundWrite, path, updates) {
        var newWrite = compoundWrite;
        each(updates, function (childKey, node) {
            newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);
        });
        return newWrite;
    }
    /**
     * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher
     * location, which must be removed by calling this method with that path.
     *
     * @param compoundWrite The CompoundWrite to remove.
     * @param path The path at which a write and all deeper writes should be removed
     * @return The new CompoundWrite with the removed path
     */
    function compoundWriteRemoveWrite(compoundWrite, path) {
        if (pathIsEmpty(path)) {
            return CompoundWrite.empty();
        }
        else {
            var newWriteTree = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));
            return new CompoundWrite(newWriteTree);
        }
    }
    /**
     * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be
     * considered "complete".
     *
     * @param compoundWrite The CompoundWrite to check.
     * @param path The path to check for
     * @return Whether there is a complete write at that path
     */
    function compoundWriteHasCompleteWrite(compoundWrite, path) {
        return compoundWriteGetCompleteNode(compoundWrite, path) != null;
    }
    /**
     * Returns a node for a path if and only if the node is a "complete" overwrite at that path. This will not aggregate
     * writes from deeper paths, but will return child nodes from a more shallow path.
     *
     * @param compoundWrite The CompoundWrite to get the node from.
     * @param path The path to get a complete write
     * @return The node if complete at that path, or null otherwise.
     */
    function compoundWriteGetCompleteNode(compoundWrite, path) {
        var rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);
        if (rootmost != null) {
            return compoundWrite.writeTree_
                .get(rootmost.path)
                .getChild(newRelativePath(rootmost.path, path));
        }
        else {
            return null;
        }
    }
    /**
     * Returns all children that are guaranteed to be a complete overwrite.
     *
     * @param compoundWrite The CompoundWrite to get children from.
     * @return A list of all complete children.
     */
    function compoundWriteGetCompleteChildren(compoundWrite) {
        var children = [];
        var node = compoundWrite.writeTree_.value;
        if (node != null) {
            // If it's a leaf node, it has no children; so nothing to do.
            if (!node.isLeafNode()) {
                node.forEachChild(PRIORITY_INDEX, function (childName, childNode) {
                    children.push(new NamedNode(childName, childNode));
                });
            }
        }
        else {
            compoundWrite.writeTree_.children.inorderTraversal(function (childName, childTree) {
                if (childTree.value != null) {
                    children.push(new NamedNode(childName, childTree.value));
                }
            });
        }
        return children;
    }
    function compoundWriteChildCompoundWrite(compoundWrite, path) {
        if (pathIsEmpty(path)) {
            return compoundWrite;
        }
        else {
            var shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);
            if (shadowingNode != null) {
                return new CompoundWrite(new ImmutableTree(shadowingNode));
            }
            else {
                return new CompoundWrite(compoundWrite.writeTree_.subtree(path));
            }
        }
    }
    /**
     * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.
     * @return Whether this CompoundWrite is empty
     */
    function compoundWriteIsEmpty(compoundWrite) {
        return compoundWrite.writeTree_.isEmpty();
    }
    /**
     * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the
     * node
     * @param node The node to apply this CompoundWrite to
     * @return The node with all writes applied
     */
    function compoundWriteApply(compoundWrite, node) {
        return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);
    }
    function applySubtreeWrite(relativePath, writeTree, node) {
        if (writeTree.value != null) {
            // Since there a write is always a leaf, we're done here
            return node.updateChild(relativePath, writeTree.value);
        }
        else {
            var priorityWrite_1 = null;
            writeTree.children.inorderTraversal(function (childKey, childTree) {
                if (childKey === '.priority') {
                    // Apply priorities at the end so we don't update priorities for either empty nodes or forget
                    // to apply priorities to empty nodes that are later filled
                    assert(childTree.value !== null, 'Priority writes must always be leaf nodes');
                    priorityWrite_1 = childTree.value;
                }
                else {
                    node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);
                }
            });
            // If there was a priority write, we only apply it if the node is not empty
            if (!node.getChild(relativePath).isEmpty() && priorityWrite_1 !== null) {
                node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite_1);
            }
            return node;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them
     * with underlying server data (to create "event cache" data).  Pending writes are added with addOverwrite()
     * and addMerge(), and removed with removeWrite().
     */
    var WriteTree = /** @class */ (function () {
        function WriteTree() {
            /**
             * A tree tracking the result of applying all visible writes.  This does not include transactions with
             * applyLocally=false or writes that are completely shadowed by other writes.
             */
            this.visibleWrites_ = CompoundWrite.empty();
            /**
             * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary
             * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also
             * used by transactions).
             */
            this.allWrites_ = [];
            this.lastWriteId_ = -1;
        }
        /**
         * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.
         *
         */
        WriteTree.prototype.childWrites = function (path) {
            return new WriteTreeRef(path, this);
        };
        /**
         * Record a new overwrite from user code.
         *
         * @param visible This is set to false by some transactions. It should be excluded from event caches
         */
        WriteTree.prototype.addOverwrite = function (path, snap, writeId, visible) {
            assert(writeId > this.lastWriteId_, 'Stacking an older write on top of newer ones');
            if (visible === undefined) {
                visible = true;
            }
            this.allWrites_.push({
                path: path,
                snap: snap,
                writeId: writeId,
                visible: visible
            });
            if (visible) {
                this.visibleWrites_ = compoundWriteAddWrite(this.visibleWrites_, path, snap);
            }
            this.lastWriteId_ = writeId;
        };
        /**
         * Record a new merge from user code.
         */
        WriteTree.prototype.addMerge = function (path, changedChildren, writeId) {
            assert(writeId > this.lastWriteId_, 'Stacking an older merge on top of newer ones');
            this.allWrites_.push({
                path: path,
                children: changedChildren,
                writeId: writeId,
                visible: true
            });
            this.visibleWrites_ = compoundWriteAddWrites(this.visibleWrites_, path, changedChildren);
            this.lastWriteId_ = writeId;
        };
        WriteTree.prototype.getWrite = function (writeId) {
            for (var i = 0; i < this.allWrites_.length; i++) {
                var record = this.allWrites_[i];
                if (record.writeId === writeId) {
                    return record;
                }
            }
            return null;
        };
        /**
         * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates
         * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.
         *
         * @return true if the write may have been visible (meaning we'll need to reevaluate / raise
         * events as a result).
         */
        WriteTree.prototype.removeWrite = function (writeId) {
            // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied
            // out of order.
            //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;
            //assert(validClear, "Either we don't have this write, or it's the first one in the queue");
            var _this = this;
            var idx = this.allWrites_.findIndex(function (s) {
                return s.writeId === writeId;
            });
            assert(idx >= 0, 'removeWrite called with nonexistent writeId.');
            var writeToRemove = this.allWrites_[idx];
            this.allWrites_.splice(idx, 1);
            var removedWriteWasVisible = writeToRemove.visible;
            var removedWriteOverlapsWithOtherWrites = false;
            var i = this.allWrites_.length - 1;
            while (removedWriteWasVisible && i >= 0) {
                var currentWrite = this.allWrites_[i];
                if (currentWrite.visible) {
                    if (i >= idx &&
                        this.recordContainsPath_(currentWrite, writeToRemove.path)) {
                        // The removed write was completely shadowed by a subsequent write.
                        removedWriteWasVisible = false;
                    }
                    else if (pathContains(writeToRemove.path, currentWrite.path)) {
                        // Either we're covering some writes or they're covering part of us (depending on which came first).
                        removedWriteOverlapsWithOtherWrites = true;
                    }
                }
                i--;
            }
            if (!removedWriteWasVisible) {
                return false;
            }
            else if (removedWriteOverlapsWithOtherWrites) {
                // There's some shadowing going on. Just rebuild the visible writes from scratch.
                this.resetTree_();
                return true;
            }
            else {
                // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.
                if (writeToRemove.snap) {
                    this.visibleWrites_ = compoundWriteRemoveWrite(this.visibleWrites_, writeToRemove.path);
                }
                else {
                    var children = writeToRemove.children;
                    each(children, function (childName) {
                        _this.visibleWrites_ = compoundWriteRemoveWrite(_this.visibleWrites_, pathChild(writeToRemove.path, childName));
                    });
                }
                return true;
            }
        };
        /**
         * Return a complete snapshot for the given path if there's visible write data at that path, else null.
         * No server data is considered.
         *
         */
        WriteTree.prototype.getCompleteWriteData = function (path) {
            return compoundWriteGetCompleteNode(this.visibleWrites_, path);
        };
        /**
         * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden
         * writes), attempt to calculate a complete snapshot for the given path
         *
         * @param writeIdsToExclude An optional set to be excluded
         * @param includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false
         */
        WriteTree.prototype.calcCompleteEventCache = function (treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {
            if (!writeIdsToExclude && !includeHiddenWrites) {
                var shadowingNode = compoundWriteGetCompleteNode(this.visibleWrites_, treePath);
                if (shadowingNode != null) {
                    return shadowingNode;
                }
                else {
                    var subMerge = compoundWriteChildCompoundWrite(this.visibleWrites_, treePath);
                    if (compoundWriteIsEmpty(subMerge)) {
                        return completeServerCache;
                    }
                    else if (completeServerCache == null &&
                        !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {
                        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow
                        return null;
                    }
                    else {
                        var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;
                        return compoundWriteApply(subMerge, layeredCache);
                    }
                }
            }
            else {
                var merge = compoundWriteChildCompoundWrite(this.visibleWrites_, treePath);
                if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {
                    return completeServerCache;
                }
                else {
                    // If the server cache is null, and we don't have a complete cache, we need to return null
                    if (!includeHiddenWrites &&
                        completeServerCache == null &&
                        !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {
                        return null;
                    }
                    else {
                        var filter = function (write) {
                            return ((write.visible || includeHiddenWrites) &&
                                (!writeIdsToExclude ||
                                    !~writeIdsToExclude.indexOf(write.writeId)) &&
                                (pathContains(write.path, treePath) ||
                                    pathContains(treePath, write.path)));
                        };
                        var mergeAtPath = WriteTree.layerTree_(this.allWrites_, filter, treePath);
                        var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;
                        return compoundWriteApply(mergeAtPath, layeredCache);
                    }
                }
            }
        };
        /**
         * With optional, underlying server data, attempt to return a children node of children that we have complete data for.
         * Used when creating new views, to pre-fill their complete event children snapshot.
         */
        WriteTree.prototype.calcCompleteEventChildren = function (treePath, completeServerChildren) {
            var completeChildren = ChildrenNode.EMPTY_NODE;
            var topLevelSet = compoundWriteGetCompleteNode(this.visibleWrites_, treePath);
            if (topLevelSet) {
                if (!topLevelSet.isLeafNode()) {
                    // we're shadowing everything. Return the children.
                    topLevelSet.forEachChild(PRIORITY_INDEX, function (childName, childSnap) {
                        completeChildren = completeChildren.updateImmediateChild(childName, childSnap);
                    });
                }
                return completeChildren;
            }
            else if (completeServerChildren) {
                // Layer any children we have on top of this
                // We know we don't have a top-level set, so just enumerate existing children
                var merge_1 = compoundWriteChildCompoundWrite(this.visibleWrites_, treePath);
                completeServerChildren.forEachChild(PRIORITY_INDEX, function (childName, childNode) {
                    var node = compoundWriteApply(compoundWriteChildCompoundWrite(merge_1, new Path(childName)), childNode);
                    completeChildren = completeChildren.updateImmediateChild(childName, node);
                });
                // Add any complete children we have from the set
                compoundWriteGetCompleteChildren(merge_1).forEach(function (namedNode) {
                    completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);
                });
                return completeChildren;
            }
            else {
                // We don't have anything to layer on top of. Layer on any children we have
                // Note that we can return an empty snap if we have a defined delete
                var merge = compoundWriteChildCompoundWrite(this.visibleWrites_, treePath);
                compoundWriteGetCompleteChildren(merge).forEach(function (namedNode) {
                    completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);
                });
                return completeChildren;
            }
        };
        /**
         * Given that the underlying server data has updated, determine what, if anything, needs to be
         * applied to the event cache.
         *
         * Possibilities:
         *
         * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data
         *
         * 2. Some write is completely shadowing. No events to be raised
         *
         * 3. Is partially shadowed. Events
         *
         * Either existingEventSnap or existingServerSnap must exist
         */
        WriteTree.prototype.calcEventCacheAfterServerOverwrite = function (treePath, childPath, existingEventSnap, existingServerSnap) {
            assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');
            var path = pathChild(treePath, childPath);
            if (compoundWriteHasCompleteWrite(this.visibleWrites_, path)) {
                // At this point we can probably guarantee that we're in case 2, meaning no events
                // May need to check visibility while doing the findRootMostValueAndPath call
                return null;
            }
            else {
                // No complete shadowing. We're either partially shadowing or not shadowing at all.
                var childMerge = compoundWriteChildCompoundWrite(this.visibleWrites_, path);
                if (compoundWriteIsEmpty(childMerge)) {
                    // We're not shadowing at all. Case 1
                    return existingServerSnap.getChild(childPath);
                }
                else {
                    // This could be more efficient if the serverNode + updates doesn't change the eventSnap
                    // However this is tricky to find out, since user updates don't necessary change the server
                    // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server
                    // adds nodes, but doesn't change any existing writes. It is therefore not enough to
                    // only check if the updates change the serverNode.
                    // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?
                    return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));
                }
            }
        };
        /**
         * Returns a complete child for a given server snap after applying all user writes or null if there is no
         * complete child for this ChildKey.
         */
        WriteTree.prototype.calcCompleteChild = function (treePath, childKey, existingServerSnap) {
            var path = pathChild(treePath, childKey);
            var shadowingNode = compoundWriteGetCompleteNode(this.visibleWrites_, path);
            if (shadowingNode != null) {
                return shadowingNode;
            }
            else {
                if (existingServerSnap.isCompleteForChild(childKey)) {
                    var childMerge = compoundWriteChildCompoundWrite(this.visibleWrites_, path);
                    return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));
                }
                else {
                    return null;
                }
            }
        };
        /**
         * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at
         * a higher path, this will return the child of that write relative to the write and this path.
         * Returns null if there is no write at this path.
         */
        WriteTree.prototype.shadowingWrite = function (path) {
            return compoundWriteGetCompleteNode(this.visibleWrites_, path);
        };
        /**
         * This method is used when processing child remove events on a query. If we can, we pull in children that were outside
         * the window, but may now be in the window.
         */
        WriteTree.prototype.calcIndexedSlice = function (treePath, completeServerData, startPost, count, reverse, index) {
            var toIterate;
            var merge = compoundWriteChildCompoundWrite(this.visibleWrites_, treePath);
            var shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());
            if (shadowingNode != null) {
                toIterate = shadowingNode;
            }
            else if (completeServerData != null) {
                toIterate = compoundWriteApply(merge, completeServerData);
            }
            else {
                // no children to iterate on
                return [];
            }
            toIterate = toIterate.withIndex(index);
            if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {
                var nodes = [];
                var cmp = index.getCompare();
                var iter = reverse
                    ? toIterate.getReverseIteratorFrom(startPost, index)
                    : toIterate.getIteratorFrom(startPost, index);
                var next = iter.getNext();
                while (next && nodes.length < count) {
                    if (cmp(next, startPost) !== 0) {
                        nodes.push(next);
                    }
                    next = iter.getNext();
                }
                return nodes;
            }
            else {
                return [];
            }
        };
        WriteTree.prototype.recordContainsPath_ = function (writeRecord, path) {
            if (writeRecord.snap) {
                return pathContains(writeRecord.path, path);
            }
            else {
                for (var childName in writeRecord.children) {
                    if (writeRecord.children.hasOwnProperty(childName) &&
                        pathContains(pathChild(writeRecord.path, childName), path)) {
                        return true;
                    }
                }
                return false;
            }
        };
        /**
         * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots
         */
        WriteTree.prototype.resetTree_ = function () {
            this.visibleWrites_ = WriteTree.layerTree_(this.allWrites_, WriteTree.DefaultFilter_, newEmptyPath());
            if (this.allWrites_.length > 0) {
                this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;
            }
            else {
                this.lastWriteId_ = -1;
            }
        };
        /**
         * The default filter used when constructing the tree. Keep everything that's visible.
         */
        WriteTree.DefaultFilter_ = function (write) {
            return write.visible;
        };
        /**
         * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of
         * event data at that path.
         */
        WriteTree.layerTree_ = function (writes, filter, treeRoot) {
            var compoundWrite = CompoundWrite.empty();
            for (var i = 0; i < writes.length; ++i) {
                var write = writes[i];
                // Theory, a later set will either:
                // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction
                // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction
                if (filter(write)) {
                    var writePath = write.path;
                    var relativePath = void 0;
                    if (write.snap) {
                        if (pathContains(treeRoot, writePath)) {
                            relativePath = newRelativePath(treeRoot, writePath);
                            compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);
                        }
                        else if (pathContains(writePath, treeRoot)) {
                            relativePath = newRelativePath(writePath, treeRoot);
                            compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));
                        }
                        else ;
                    }
                    else if (write.children) {
                        if (pathContains(treeRoot, writePath)) {
                            relativePath = newRelativePath(treeRoot, writePath);
                            compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);
                        }
                        else if (pathContains(writePath, treeRoot)) {
                            relativePath = newRelativePath(writePath, treeRoot);
                            if (pathIsEmpty(relativePath)) {
                                compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);
                            }
                            else {
                                var child = safeGet(write.children, pathGetFront(relativePath));
                                if (child) {
                                    // There exists a child in this node that matches the root path
                                    var deepNode = child.getChild(pathPopFront(relativePath));
                                    compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);
                                }
                            }
                        }
                        else ;
                    }
                    else {
                        throw assertionError('WriteRecord should have .snap or .children');
                    }
                }
            }
            return compoundWrite;
        };
        return WriteTree;
    }());
    /**
     * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods
     * just proxy to the underlying WriteTree.
     *
     */
    var WriteTreeRef = /** @class */ (function () {
        function WriteTreeRef(path, writeTree) {
            this.treePath_ = path;
            this.writeTree_ = writeTree;
        }
        /**
         * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used
         * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node
         * can lead to a more expensive calculation.
         *
         * @param writeIdsToExclude Optional writes to exclude.
         * @param includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false
         */
        WriteTreeRef.prototype.calcCompleteEventCache = function (completeServerCache, writeIdsToExclude, includeHiddenWrites) {
            return this.writeTree_.calcCompleteEventCache(this.treePath_, completeServerCache, writeIdsToExclude, includeHiddenWrites);
        };
        /**
         * If possible, returns a children node containing all of the complete children we have data for. The returned data is a
         * mix of the given server data and write data.
         *
         */
        WriteTreeRef.prototype.calcCompleteEventChildren = function (completeServerChildren) {
            return this.writeTree_.calcCompleteEventChildren(this.treePath_, completeServerChildren);
        };
        /**
         * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,
         * if anything, needs to be applied to the event cache.
         *
         * Possibilities:
         *
         * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data
         *
         * 2. Some write is completely shadowing. No events to be raised
         *
         * 3. Is partially shadowed. Events should be raised
         *
         * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert
         *
         *
         */
        WriteTreeRef.prototype.calcEventCacheAfterServerOverwrite = function (path, existingEventSnap, existingServerSnap) {
            return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_, path, existingEventSnap, existingServerSnap);
        };
        /**
         * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at
         * a higher path, this will return the child of that write relative to the write and this path.
         * Returns null if there is no write at this path.
         *
         */
        WriteTreeRef.prototype.shadowingWrite = function (path) {
            return this.writeTree_.shadowingWrite(pathChild(this.treePath_, path));
        };
        /**
         * This method is used when processing child remove events on a query. If we can, we pull in children that were outside
         * the window, but may now be in the window
         */
        WriteTreeRef.prototype.calcIndexedSlice = function (completeServerData, startPost, count, reverse, index) {
            return this.writeTree_.calcIndexedSlice(this.treePath_, completeServerData, startPost, count, reverse, index);
        };
        /**
         * Returns a complete child for a given server snap after applying all user writes or null if there is no
         * complete child for this ChildKey.
         */
        WriteTreeRef.prototype.calcCompleteChild = function (childKey, existingServerCache) {
            return this.writeTree_.calcCompleteChild(this.treePath_, childKey, existingServerCache);
        };
        /**
         * Return a WriteTreeRef for a child.
         */
        WriteTreeRef.prototype.child = function (childName) {
            return new WriteTreeRef(pathChild(this.treePath_, childName), this.writeTree_);
        };
        return WriteTreeRef;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * SyncTree is the central class for managing event callback registration, data caching, views
     * (query processing), and event generation.  There are typically two SyncTree instances for
     * each Repo, one for the normal Firebase data, and one for the .info data.
     *
     * It has a number of responsibilities, including:
     *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).
     *  - Applying and caching data changes for user set(), transaction(), and update() calls
     *    (applyUserOverwrite(), applyUserMerge()).
     *  - Applying and caching data changes for server data changes (applyServerOverwrite(),
     *    applyServerMerge()).
     *  - Generating user-facing events for server and user changes (all of the apply* methods
     *    return the set of events that need to be raised as a result).
     *  - Maintaining the appropriate set of server listens to ensure we are always subscribed
     *    to the correct set of paths and queries to satisfy the current set of user event
     *    callbacks (listens are started/stopped using the provided listenProvider).
     *
     * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual
     * events are returned to the caller rather than raised synchronously.
     *
     */
    var SyncTree = /** @class */ (function () {
        /**
         * @param listenProvider_ Used by SyncTree to start / stop listening
         *   to server data.
         */
        function SyncTree(listenProvider_) {
            this.listenProvider_ = listenProvider_;
            /**
             * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.
             */
            this.syncPointTree_ = new ImmutableTree(null);
            /**
             * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).
             */
            this.pendingWriteTree_ = new WriteTree();
            this.tagToQueryMap = new Map();
            this.queryToTagMap = new Map();
        }
        /**
         * Apply the data changes for a user-generated set() or transaction() call.
         *
         * @return Events to raise.
         */
        SyncTree.prototype.applyUserOverwrite = function (path, newData, writeId, visible) {
            // Record pending write.
            this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);
            if (!visible) {
                return [];
            }
            else {
                return this.applyOperationToSyncPoints_(new Overwrite(newOperationSourceUser(), path, newData));
            }
        };
        /**
         * Apply the data from a user-generated update() call
         *
         * @return Events to raise.
         */
        SyncTree.prototype.applyUserMerge = function (path, changedChildren, writeId) {
            // Record pending merge.
            this.pendingWriteTree_.addMerge(path, changedChildren, writeId);
            var changeTree = ImmutableTree.fromObject(changedChildren);
            return this.applyOperationToSyncPoints_(new Merge(newOperationSourceUser(), path, changeTree));
        };
        /**
         * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().
         *
         * @param revert True if the given write failed and needs to be reverted
         * @return Events to raise.
         */
        SyncTree.prototype.ackUserWrite = function (writeId, revert) {
            if (revert === void 0) { revert = false; }
            var write = this.pendingWriteTree_.getWrite(writeId);
            var needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);
            if (!needToReevaluate) {
                return [];
            }
            else {
                var affectedTree_1 = new ImmutableTree(null);
                if (write.snap != null) {
                    // overwrite
                    affectedTree_1 = affectedTree_1.set(newEmptyPath(), true);
                }
                else {
                    each(write.children, function (pathString) {
                        affectedTree_1 = affectedTree_1.set(new Path(pathString), true);
                    });
                }
                return this.applyOperationToSyncPoints_(new AckUserWrite(write.path, affectedTree_1, revert));
            }
        };
        /**
         * Apply new server data for the specified path..
         *
         * @return Events to raise.
         */
        SyncTree.prototype.applyServerOverwrite = function (path, newData) {
            return this.applyOperationToSyncPoints_(new Overwrite(newOperationSourceServer(), path, newData));
        };
        /**
         * Apply new server data to be merged in at the specified path.
         *
         * @return Events to raise.
         */
        SyncTree.prototype.applyServerMerge = function (path, changedChildren) {
            var changeTree = ImmutableTree.fromObject(changedChildren);
            return this.applyOperationToSyncPoints_(new Merge(newOperationSourceServer(), path, changeTree));
        };
        /**
         * Apply a listen complete for a query
         *
         * @return Events to raise.
         */
        SyncTree.prototype.applyListenComplete = function (path) {
            return this.applyOperationToSyncPoints_(new ListenComplete(newOperationSourceServer(), path));
        };
        /**
         * Apply new server data for the specified tagged query.
         *
         * @return Events to raise.
         */
        SyncTree.prototype.applyTaggedQueryOverwrite = function (path, snap, tag) {
            var queryKey = this.queryKeyForTag_(tag);
            if (queryKey != null) {
                var r = SyncTree.parseQueryKey_(queryKey);
                var queryPath = r.path, queryId = r.queryId;
                var relativePath = newRelativePath(queryPath, path);
                var op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);
                return this.applyTaggedOperation_(queryPath, op);
            }
            else {
                // Query must have been removed already
                return [];
            }
        };
        /**
         * Apply server data to be merged in for the specified tagged query.
         *
         * @return Events to raise.
         */
        SyncTree.prototype.applyTaggedQueryMerge = function (path, changedChildren, tag) {
            var queryKey = this.queryKeyForTag_(tag);
            if (queryKey) {
                var r = SyncTree.parseQueryKey_(queryKey);
                var queryPath = r.path, queryId = r.queryId;
                var relativePath = newRelativePath(queryPath, path);
                var changeTree = ImmutableTree.fromObject(changedChildren);
                var op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);
                return this.applyTaggedOperation_(queryPath, op);
            }
            else {
                // We've already removed the query. No big deal, ignore the update
                return [];
            }
        };
        /**
         * Apply a listen complete for a tagged query
         *
         * @return Events to raise.
         */
        SyncTree.prototype.applyTaggedListenComplete = function (path, tag) {
            var queryKey = this.queryKeyForTag_(tag);
            if (queryKey) {
                var r = SyncTree.parseQueryKey_(queryKey);
                var queryPath = r.path, queryId = r.queryId;
                var relativePath = newRelativePath(queryPath, path);
                var op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);
                return this.applyTaggedOperation_(queryPath, op);
            }
            else {
                // We've already removed the query. No big deal, ignore the update
                return [];
            }
        };
        /**
         * Add an event callback for the specified query.
         *
         * @return Events to raise.
         */
        SyncTree.prototype.addEventRegistration = function (query, eventRegistration) {
            var path = query.path;
            var serverCache = null;
            var foundAncestorDefaultView = false;
            // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.
            // Consider optimizing this once there's a better understanding of what actual behavior will be.
            this.syncPointTree_.foreachOnPath(path, function (pathToSyncPoint, sp) {
                var relativePath = newRelativePath(pathToSyncPoint, path);
                serverCache = serverCache || sp.getCompleteServerCache(relativePath);
                foundAncestorDefaultView =
                    foundAncestorDefaultView || sp.hasCompleteView();
            });
            var syncPoint = this.syncPointTree_.get(path);
            if (!syncPoint) {
                syncPoint = new SyncPoint();
                this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);
            }
            else {
                foundAncestorDefaultView =
                    foundAncestorDefaultView || syncPoint.hasCompleteView();
                serverCache =
                    serverCache || syncPoint.getCompleteServerCache(newEmptyPath());
            }
            var serverCacheComplete;
            if (serverCache != null) {
                serverCacheComplete = true;
            }
            else {
                serverCacheComplete = false;
                serverCache = ChildrenNode.EMPTY_NODE;
                var subtree = this.syncPointTree_.subtree(path);
                subtree.foreachChild(function (childName, childSyncPoint) {
                    var completeCache = childSyncPoint.getCompleteServerCache(newEmptyPath());
                    if (completeCache) {
                        serverCache = serverCache.updateImmediateChild(childName, completeCache);
                    }
                });
            }
            var viewAlreadyExists = syncPoint.viewExistsForQuery(query);
            if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {
                // We need to track a tag for this query
                var queryKey = SyncTree.makeQueryKey_(query);
                assert(!this.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');
                var tag = SyncTree.getNextQueryTag_();
                this.queryToTagMap.set(queryKey, tag);
                this.tagToQueryMap.set(tag, queryKey);
            }
            var writesCache = this.pendingWriteTree_.childWrites(path);
            var events = syncPoint.addEventRegistration(query, eventRegistration, writesCache, serverCache, serverCacheComplete);
            if (!viewAlreadyExists && !foundAncestorDefaultView) {
                var view = syncPoint.viewForQuery(query);
                events = events.concat(this.setupListener_(query, view));
            }
            return events;
        };
        /**
         * Remove event callback(s).
         *
         * If query is the default query, we'll check all queries for the specified eventRegistration.
         * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.
         *
         * @param eventRegistration If null, all callbacks are removed.
         * @param cancelError If a cancelError is provided, appropriate cancel events will be returned.
         * @return Cancel events, if cancelError was provided.
         */
        SyncTree.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {
            var _this = this;
            // Find the syncPoint first. Then deal with whether or not it has matching listeners
            var path = query.path;
            var maybeSyncPoint = this.syncPointTree_.get(path);
            var cancelEvents = [];
            // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without
            // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and
            // not loadsAllData().
            if (maybeSyncPoint &&
                (query.queryIdentifier() === 'default' ||
                    maybeSyncPoint.viewExistsForQuery(query))) {
                var removedAndEvents = maybeSyncPoint.removeEventRegistration(query, eventRegistration, cancelError);
                if (maybeSyncPoint.isEmpty()) {
                    this.syncPointTree_ = this.syncPointTree_.remove(path);
                }
                var removed = removedAndEvents.removed;
                cancelEvents = removedAndEvents.events;
                // We may have just removed one of many listeners and can short-circuit this whole process
                // We may also not have removed a default listener, in which case all of the descendant listeners should already be
                // properly set up.
                //
                // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of
                // queryId === 'default'
                var removingDefault = -1 !==
                    removed.findIndex(function (query) {
                        return query.getQueryParams().loadsAllData();
                    });
                var covered = this.syncPointTree_.findOnPath(path, function (relativePath, parentSyncPoint) {
                    return parentSyncPoint.hasCompleteView();
                });
                if (removingDefault && !covered) {
                    var subtree = this.syncPointTree_.subtree(path);
                    // There are potentially child listeners. Determine what if any listens we need to send before executing the
                    // removal
                    if (!subtree.isEmpty()) {
                        // We need to fold over our subtree and collect the listeners to send
                        var newViews = this.collectDistinctViewsForSubTree_(subtree);
                        // Ok, we've collected all the listens we need. Set them up.
                        for (var i = 0; i < newViews.length; ++i) {
                            var view = newViews[i], newQuery = view.getQuery();
                            var listener = this.createListenerForView_(view);
                            this.listenProvider_.startListening(SyncTree.queryForListening_(newQuery), this.tagForQuery_(newQuery), listener.hashFn, listener.onComplete);
                        }
                    }
                }
                // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query
                // The above block has us covered in terms of making sure we're set up on listens lower in the tree.
                // Also, note that if we have a cancelError, it's already been removed at the provider level.
                if (!covered && removed.length > 0 && !cancelError) {
                    // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one
                    // default. Otherwise, we need to iterate through and cancel each individual query
                    if (removingDefault) {
                        // We don't tag default listeners
                        var defaultTag = null;
                        this.listenProvider_.stopListening(SyncTree.queryForListening_(query), defaultTag);
                    }
                    else {
                        removed.forEach(function (queryToRemove) {
                            var tagToRemove = _this.queryToTagMap.get(SyncTree.makeQueryKey_(queryToRemove));
                            _this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToRemove), tagToRemove);
                        });
                    }
                }
                // Now, clear all of the tags we're tracking for the removed listens
                this.removeTags_(removed);
            }
            return cancelEvents;
        };
        /**
         * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a
         * listener above it, we will get a false "null". This shouldn't be a problem because transactions will always
         * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->
         *     <incremented total> as the write is applied locally and then acknowledged at the server.
         *
         * Note: this method will *include* hidden writes from transaction with applyLocally set to false.
         *
         * @param path The path to the data we want
         * @param writeIdsToExclude A specific set to be excluded
         */
        SyncTree.prototype.calcCompleteEventCache = function (path, writeIdsToExclude) {
            var includeHiddenSets = true;
            var writeTree = this.pendingWriteTree_;
            var serverCache = this.syncPointTree_.findOnPath(path, function (pathSoFar, syncPoint) {
                var relativePath = newRelativePath(pathSoFar, path);
                var serverCache = syncPoint.getCompleteServerCache(relativePath);
                if (serverCache) {
                    return serverCache;
                }
            });
            return writeTree.calcCompleteEventCache(path, serverCache, writeIdsToExclude, includeHiddenSets);
        };
        SyncTree.prototype.getServerValue = function (query) {
            var path = query.path;
            var serverCache = null;
            // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.
            // Consider optimizing this once there's a better understanding of what actual behavior will be.
            this.syncPointTree_.foreachOnPath(path, function (pathToSyncPoint, sp) {
                var relativePath = newRelativePath(pathToSyncPoint, path);
                serverCache = serverCache || sp.getCompleteServerCache(relativePath);
            });
            var syncPoint = this.syncPointTree_.get(path);
            if (!syncPoint) {
                syncPoint = new SyncPoint();
                this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);
            }
            else {
                serverCache =
                    serverCache || syncPoint.getCompleteServerCache(newEmptyPath());
            }
            var serverCacheComplete = serverCache != null;
            var serverCacheNode = serverCacheComplete
                ? new CacheNode(serverCache, true, false)
                : null;
            var writesCache = this.pendingWriteTree_.childWrites(query.path);
            var view = syncPoint.getView(query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);
            return view.getCompleteNode();
        };
        /**
         * This collapses multiple unfiltered views into a single view, since we only need a single
         * listener for them.
         */
        SyncTree.prototype.collectDistinctViewsForSubTree_ = function (subtree) {
            return subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {
                if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {
                    var completeView = maybeChildSyncPoint.getCompleteView();
                    return [completeView];
                }
                else {
                    // No complete view here, flatten any deeper listens into an array
                    var views_1 = [];
                    if (maybeChildSyncPoint) {
                        views_1 = maybeChildSyncPoint.getQueryViews();
                    }
                    each(childMap, function (_key, childViews) {
                        views_1 = views_1.concat(childViews);
                    });
                    return views_1;
                }
            });
        };
        SyncTree.prototype.removeTags_ = function (queries) {
            for (var j = 0; j < queries.length; ++j) {
                var removedQuery = queries[j];
                if (!removedQuery.getQueryParams().loadsAllData()) {
                    // We should have a tag for this
                    var removedQueryKey = SyncTree.makeQueryKey_(removedQuery);
                    var removedQueryTag = this.queryToTagMap.get(removedQueryKey);
                    this.queryToTagMap.delete(removedQueryKey);
                    this.tagToQueryMap.delete(removedQueryTag);
                }
            }
        };
        /**
         * Normalizes a query to a query we send the server for listening
         *
         * @return The normalized query
         */
        SyncTree.queryForListening_ = function (query) {
            if (query.getQueryParams().loadsAllData() &&
                !query.getQueryParams().isDefault()) {
                // We treat queries that load all data as default queries
                // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits
                // from Query
                return query.getRef();
            }
            else {
                return query;
            }
        };
        /**
         * For a given new listen, manage the de-duplication of outstanding subscriptions.
         *
         * @return This method can return events to support synchronous data sources
         */
        SyncTree.prototype.setupListener_ = function (query, view) {
            var path = query.path;
            var tag = this.tagForQuery_(query);
            var listener = this.createListenerForView_(view);
            var events = this.listenProvider_.startListening(SyncTree.queryForListening_(query), tag, listener.hashFn, listener.onComplete);
            var subtree = this.syncPointTree_.subtree(path);
            // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we
            // may need to shadow other listens as well.
            if (tag) {
                assert(!subtree.value.hasCompleteView(), "If we're adding a query, it shouldn't be shadowed");
            }
            else {
                // Shadow everything at or below this location, this is a default listener.
                var queriesToStop = subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {
                    if (!pathIsEmpty(relativePath) &&
                        maybeChildSyncPoint &&
                        maybeChildSyncPoint.hasCompleteView()) {
                        return [maybeChildSyncPoint.getCompleteView().getQuery()];
                    }
                    else {
                        // No default listener here, flatten any deeper queries into an array
                        var queries_1 = [];
                        if (maybeChildSyncPoint) {
                            queries_1 = queries_1.concat(maybeChildSyncPoint.getQueryViews().map(function (view) { return view.getQuery(); }));
                        }
                        each(childMap, function (_key, childQueries) {
                            queries_1 = queries_1.concat(childQueries);
                        });
                        return queries_1;
                    }
                });
                for (var i = 0; i < queriesToStop.length; ++i) {
                    var queryToStop = queriesToStop[i];
                    this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToStop), this.tagForQuery_(queryToStop));
                }
            }
            return events;
        };
        SyncTree.prototype.createListenerForView_ = function (view) {
            var _this = this;
            var query = view.getQuery();
            var tag = this.tagForQuery_(query);
            return {
                hashFn: function () {
                    var cache = view.getServerCache() || ChildrenNode.EMPTY_NODE;
                    return cache.hash();
                },
                onComplete: function (status) {
                    if (status === 'ok') {
                        if (tag) {
                            return _this.applyTaggedListenComplete(query.path, tag);
                        }
                        else {
                            return _this.applyListenComplete(query.path);
                        }
                    }
                    else {
                        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.
                        // Note that this may need to be scoped to just this listener if we change permissions on filtered children
                        var error = errorForServerCode(status, query);
                        return _this.removeEventRegistration(query, 
                        /*eventRegistration*/ null, error);
                    }
                }
            };
        };
        /**
         * Given a query, computes a "queryKey" suitable for use in our queryToTagMap_.
         */
        SyncTree.makeQueryKey_ = function (query) {
            return query.path.toString() + '$' + query.queryIdentifier();
        };
        /**
         * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.
         */
        SyncTree.parseQueryKey_ = function (queryKey) {
            var splitIndex = queryKey.indexOf('$');
            assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');
            return {
                queryId: queryKey.substr(splitIndex + 1),
                path: new Path(queryKey.substr(0, splitIndex))
            };
        };
        /**
         * Return the query associated with the given tag, if we have one
         */
        SyncTree.prototype.queryKeyForTag_ = function (tag) {
            return this.tagToQueryMap.get(tag);
        };
        /**
         * Return the tag associated with the given query.
         */
        SyncTree.prototype.tagForQuery_ = function (query) {
            var queryKey = SyncTree.makeQueryKey_(query);
            return this.queryToTagMap.get(queryKey);
        };
        /**
         * Static accessor for query tags.
         */
        SyncTree.getNextQueryTag_ = function () {
            return SyncTree.nextQueryTag_++;
        };
        /**
         * A helper method to apply tagged operations
         */
        SyncTree.prototype.applyTaggedOperation_ = function (queryPath, operation) {
            var syncPoint = this.syncPointTree_.get(queryPath);
            assert(syncPoint, "Missing sync point for query tag that we're tracking");
            var writesCache = this.pendingWriteTree_.childWrites(queryPath);
            return syncPoint.applyOperation(operation, writesCache, 
            /*serverCache=*/ null);
        };
        /**
         * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.
         *
         * NOTES:
         * - Descendant SyncPoints will be visited first (since we raise events depth-first).
         *
         * - We call applyOperation() on each SyncPoint passing three things:
         *   1. A version of the Operation that has been made relative to the SyncPoint location.
         *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.
         *   3. A snapshot Node with cached server data, if we have it.
         *
         * - We concatenate all of the events returned by each SyncPoint and return the result.
         */
        SyncTree.prototype.applyOperationToSyncPoints_ = function (operation) {
            return this.applyOperationHelper_(operation, this.syncPointTree_, 
            /*serverCache=*/ null, this.pendingWriteTree_.childWrites(newEmptyPath()));
        };
        /**
         * Recursive helper for applyOperationToSyncPoints_
         */
        SyncTree.prototype.applyOperationHelper_ = function (operation, syncPointTree, serverCache, writesCache) {
            if (pathIsEmpty(operation.path)) {
                return this.applyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);
            }
            else {
                var syncPoint = syncPointTree.get(newEmptyPath());
                // If we don't have cached server data, see if we can get it from this SyncPoint.
                if (serverCache == null && syncPoint != null) {
                    serverCache = syncPoint.getCompleteServerCache(newEmptyPath());
                }
                var events = [];
                var childName = pathGetFront(operation.path);
                var childOperation = operation.operationForChild(childName);
                var childTree = syncPointTree.children.get(childName);
                if (childTree && childOperation) {
                    var childServerCache = serverCache
                        ? serverCache.getImmediateChild(childName)
                        : null;
                    var childWritesCache = writesCache.child(childName);
                    events = events.concat(this.applyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));
                }
                if (syncPoint) {
                    events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));
                }
                return events;
            }
        };
        /**
         * Recursive helper for applyOperationToSyncPoints_
         */
        SyncTree.prototype.applyOperationDescendantsHelper_ = function (operation, syncPointTree, serverCache, writesCache) {
            var _this = this;
            var syncPoint = syncPointTree.get(newEmptyPath());
            // If we don't have cached server data, see if we can get it from this SyncPoint.
            if (serverCache == null && syncPoint != null) {
                serverCache = syncPoint.getCompleteServerCache(newEmptyPath());
            }
            var events = [];
            syncPointTree.children.inorderTraversal(function (childName, childTree) {
                var childServerCache = serverCache
                    ? serverCache.getImmediateChild(childName)
                    : null;
                var childWritesCache = writesCache.child(childName);
                var childOperation = operation.operationForChild(childName);
                if (childOperation) {
                    events = events.concat(_this.applyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));
                }
            });
            if (syncPoint) {
                events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));
            }
            return events;
        };
        /**
         * Static tracker for next query tag.
         */
        SyncTree.nextQueryTag_ = 1;
        return SyncTree;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Mutable object which basically just stores a reference to the "latest" immutable snapshot.
     */
    var SnapshotHolder = /** @class */ (function () {
        function SnapshotHolder() {
            this.rootNode_ = ChildrenNode.EMPTY_NODE;
        }
        SnapshotHolder.prototype.getNode = function (path) {
            return this.rootNode_.getChild(path);
        };
        SnapshotHolder.prototype.updateSnapshot = function (path, newSnapshotNode) {
            this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);
        };
        return SnapshotHolder;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Tracks a collection of stats.
     */
    var StatsCollection = /** @class */ (function () {
        function StatsCollection() {
            this.counters_ = {};
        }
        StatsCollection.prototype.incrementCounter = function (name, amount) {
            if (amount === void 0) { amount = 1; }
            if (!contains(this.counters_, name)) {
                this.counters_[name] = 0;
            }
            this.counters_[name] += amount;
        };
        StatsCollection.prototype.get = function () {
            return deepCopy(this.counters_);
        };
        return StatsCollection;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var StatsManager = /** @class */ (function () {
        function StatsManager() {
        }
        StatsManager.getCollection = function (repoInfo) {
            var hashString = repoInfo.toString();
            if (!this.collections_[hashString]) {
                this.collections_[hashString] = new StatsCollection();
            }
            return this.collections_[hashString];
        };
        StatsManager.getOrCreateReporter = function (repoInfo, creatorFunction) {
            var hashString = repoInfo.toString();
            if (!this.reporters_[hashString]) {
                this.reporters_[hashString] = creatorFunction();
            }
            return this.reporters_[hashString];
        };
        StatsManager.collections_ = {};
        StatsManager.reporters_ = {};
        return StatsManager;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns the delta from the previous call to get stats.
     *
     * @param collection_ The collection to "listen" to.
     */
    var StatsListener = /** @class */ (function () {
        function StatsListener(collection_) {
            this.collection_ = collection_;
            this.last_ = null;
        }
        StatsListener.prototype.get = function () {
            var newStats = this.collection_.get();
            var delta = __assign({}, newStats);
            if (this.last_) {
                each(this.last_, function (stat, value) {
                    delta[stat] = delta[stat] - value;
                });
            }
            this.last_ = newStats;
            return delta;
        };
        return StatsListener;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably
    // happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10
    // seconds to try to ensure the Firebase connection is established / settled.
    var FIRST_STATS_MIN_TIME = 10 * 1000;
    var FIRST_STATS_MAX_TIME = 30 * 1000;
    // We'll continue to report stats on average every 5 minutes.
    var REPORT_STATS_INTERVAL = 5 * 60 * 1000;
    var StatsReporter = /** @class */ (function () {
        /**
         * @param collection
         * @param server_
         */
        function StatsReporter(collection, server_) {
            this.server_ = server_;
            this.statsToReport_ = {};
            this.statsListener_ = new StatsListener(collection);
            var timeout = FIRST_STATS_MIN_TIME +
                (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();
            setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));
        }
        StatsReporter.prototype.includeStat = function (stat) {
            this.statsToReport_[stat] = true;
        };
        StatsReporter.prototype.reportStats_ = function () {
            var _this = this;
            var stats = this.statsListener_.get();
            var reportedStats = {};
            var haveStatsToReport = false;
            each(stats, function (stat, value) {
                if (value > 0 && contains(_this.statsToReport_, stat)) {
                    reportedStats[stat] = value;
                    haveStatsToReport = true;
                }
            });
            if (haveStatsToReport) {
                this.server_.reportStats(reportedStats);
            }
            // queue our next run.
            setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));
        };
        return StatsReporter;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * The event queue serves a few purposes:
     * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more
     *    events being queued.
     * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,
     *    raiseQueuedEvents() is called again, the "inner" call will pick up raising events where the "outer" call
     *    left off, ensuring that the events are still raised synchronously and in order.
     * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued
     *    events are raised synchronously.
     *
     * NOTE: This can all go away if/when we move to async events.
     *
     */
    var EventQueue = /** @class */ (function () {
        function EventQueue() {
            this.eventLists_ = [];
            /**
             * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.
             */
            this.recursionDepth_ = 0;
        }
        return EventQueue;
    }());
    /**
     * @param eventDataList The new events to queue.
     */
    function eventQueueQueueEvents(eventQueue, eventDataList) {
        // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.
        var currList = null;
        for (var i = 0; i < eventDataList.length; i++) {
            var data = eventDataList[i];
            var path = data.getPath();
            if (currList !== null && !pathEquals(path, currList.path)) {
                eventQueue.eventLists_.push(currList);
                currList = null;
            }
            if (currList === null) {
                currList = { events: [], path: path };
            }
            currList.events.push(data);
        }
        if (currList) {
            eventQueue.eventLists_.push(currList);
        }
    }
    /**
     * Queues the specified events and synchronously raises all events (including previously queued ones)
     * for the specified path.
     *
     * It is assumed that the new events are all for the specified path.
     *
     * @param path The path to raise events for.
     * @param eventDataList The new events to raise.
     */
    function eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {
        eventQueueQueueEvents(eventQueue, eventDataList);
        eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, function (eventPath) {
            return pathEquals(eventPath, path);
        });
    }
    /**
     * Queues the specified events and synchronously raises all events (including previously queued ones) for
     * locations related to the specified change path (i.e. all ancestors and descendants).
     *
     * It is assumed that the new events are all related (ancestor or descendant) to the specified path.
     *
     * @param changedPath The path to raise events for.
     * @param eventDataList The events to raise
     */
    function eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {
        eventQueueQueueEvents(eventQueue, eventDataList);
        eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, function (eventPath) {
            return pathContains(eventPath, changedPath) ||
                pathContains(changedPath, eventPath);
        });
    }
    function eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {
        eventQueue.recursionDepth_++;
        var sentAll = true;
        for (var i = 0; i < eventQueue.eventLists_.length; i++) {
            var eventList = eventQueue.eventLists_[i];
            if (eventList) {
                var eventPath = eventList.path;
                if (predicate(eventPath)) {
                    eventListRaise(eventQueue.eventLists_[i]);
                    eventQueue.eventLists_[i] = null;
                }
                else {
                    sentAll = false;
                }
            }
        }
        if (sentAll) {
            eventQueue.eventLists_ = [];
        }
        eventQueue.recursionDepth_--;
    }
    /**
     * Iterates through the list and raises each event
     */
    function eventListRaise(eventList) {
        for (var i = 0; i < eventList.events.length; i++) {
            var eventData = eventList.events[i];
            if (eventData !== null) {
                eventList.events[i] = null;
                var eventFn = eventData.getEventRunner();
                if (logger) {
                    log('event: ' + eventData.toString());
                }
                exceptionGuard(eventFn);
            }
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Base class to be used if you want to emit events. Call the constructor with
     * the set of allowed event names.
     */
    var EventEmitter = /** @class */ (function () {
        function EventEmitter(allowedEvents_) {
            this.allowedEvents_ = allowedEvents_;
            this.listeners_ = {};
            assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');
        }
        /**
         * To be called by derived classes to trigger events.
         */
        EventEmitter.prototype.trigger = function (eventType) {
            var varArgs = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                varArgs[_i - 1] = arguments[_i];
            }
            if (Array.isArray(this.listeners_[eventType])) {
                // Clone the list, since callbacks could add/remove listeners.
                var listeners = __spread(this.listeners_[eventType]);
                for (var i = 0; i < listeners.length; i++) {
                    listeners[i].callback.apply(listeners[i].context, varArgs);
                }
            }
        };
        EventEmitter.prototype.on = function (eventType, callback, context) {
            this.validateEventType_(eventType);
            this.listeners_[eventType] = this.listeners_[eventType] || [];
            this.listeners_[eventType].push({ callback: callback, context: context });
            var eventData = this.getInitialEvent(eventType);
            if (eventData) {
                callback.apply(context, eventData);
            }
        };
        EventEmitter.prototype.off = function (eventType, callback, context) {
            this.validateEventType_(eventType);
            var listeners = this.listeners_[eventType] || [];
            for (var i = 0; i < listeners.length; i++) {
                if (listeners[i].callback === callback &&
                    (!context || context === listeners[i].context)) {
                    listeners.splice(i, 1);
                    return;
                }
            }
        };
        EventEmitter.prototype.validateEventType_ = function (eventType) {
            assert(this.allowedEvents_.find(function (et) {
                return et === eventType;
            }), 'Unknown event: ' + eventType);
        };
        return EventEmitter;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var VisibilityMonitor = /** @class */ (function (_super) {
        __extends$1(VisibilityMonitor, _super);
        function VisibilityMonitor() {
            var _this = _super.call(this, ['visible']) || this;
            var hidden;
            var visibilityChange;
            if (typeof document !== 'undefined' &&
                typeof document.addEventListener !== 'undefined') {
                if (typeof document['hidden'] !== 'undefined') {
                    // Opera 12.10 and Firefox 18 and later support
                    visibilityChange = 'visibilitychange';
                    hidden = 'hidden';
                }
                else if (typeof document['mozHidden'] !== 'undefined') {
                    visibilityChange = 'mozvisibilitychange';
                    hidden = 'mozHidden';
                }
                else if (typeof document['msHidden'] !== 'undefined') {
                    visibilityChange = 'msvisibilitychange';
                    hidden = 'msHidden';
                }
                else if (typeof document['webkitHidden'] !== 'undefined') {
                    visibilityChange = 'webkitvisibilitychange';
                    hidden = 'webkitHidden';
                }
            }
            // Initially, we always assume we are visible. This ensures that in browsers
            // without page visibility support or in cases where we are never visible
            // (e.g. chrome extension), we act as if we are visible, i.e. don't delay
            // reconnects
            _this.visible_ = true;
            if (visibilityChange) {
                document.addEventListener(visibilityChange, function () {
                    var visible = !document[hidden];
                    if (visible !== _this.visible_) {
                        _this.visible_ = visible;
                        _this.trigger('visible', visible);
                    }
                }, false);
            }
            return _this;
        }
        VisibilityMonitor.getInstance = function () {
            return new VisibilityMonitor();
        };
        VisibilityMonitor.prototype.getInitialEvent = function (eventType) {
            assert(eventType === 'visible', 'Unknown event type: ' + eventType);
            return [this.visible_];
        };
        return VisibilityMonitor;
    }(EventEmitter));

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Monitors online state (as reported by window.online/offline events).
     *
     * The expectation is that this could have many false positives (thinks we are online
     * when we're not), but no false negatives.  So we can safely use it to determine when
     * we definitely cannot reach the internet.
     */
    var OnlineMonitor = /** @class */ (function (_super) {
        __extends$1(OnlineMonitor, _super);
        function OnlineMonitor() {
            var _this = _super.call(this, ['online']) || this;
            _this.online_ = true;
            // We've had repeated complaints that Cordova apps can get stuck "offline", e.g.
            // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810
            // It would seem that the 'online' event does not always fire consistently. So we disable it
            // for Cordova.
            if (typeof window !== 'undefined' &&
                typeof window.addEventListener !== 'undefined' &&
                !isMobileCordova()) {
                window.addEventListener('online', function () {
                    if (!_this.online_) {
                        _this.online_ = true;
                        _this.trigger('online', true);
                    }
                }, false);
                window.addEventListener('offline', function () {
                    if (_this.online_) {
                        _this.online_ = false;
                        _this.trigger('online', false);
                    }
                }, false);
            }
            return _this;
        }
        OnlineMonitor.getInstance = function () {
            return new OnlineMonitor();
        };
        OnlineMonitor.prototype.getInitialEvent = function (eventType) {
            assert(eventType === 'online', 'Unknown event type: ' + eventType);
            return [this.online_];
        };
        OnlineMonitor.prototype.currentlyOnline = function () {
            return this.online_;
        };
        return OnlineMonitor;
    }(EventEmitter));

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var PROTOCOL_VERSION = '5';
    var VERSION_PARAM = 'v';
    var TRANSPORT_SESSION_PARAM = 's';
    var REFERER_PARAM = 'r';
    var FORGE_REF = 'f';
    // Matches console.firebase.google.com, firebase-console-*.corp.google.com and
    // firebase.corp.google.com
    var FORGE_DOMAIN_RE = /(console\.firebase|firebase-console-\w+\.corp|firebase\.corp)\.google\.com/;
    var LAST_SESSION_PARAM = 'ls';
    var APPLICATION_ID_PARAM = 'p';
    var WEBSOCKET = 'websocket';
    var LONG_POLLING = 'long_polling';

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * This class ensures the packets from the server arrive in order
     * This class takes data from the server and ensures it gets passed into the callbacks in order.
     */
    var PacketReceiver = /** @class */ (function () {
        /**
         * @param onMessage_
         */
        function PacketReceiver(onMessage_) {
            this.onMessage_ = onMessage_;
            this.pendingResponses = [];
            this.currentResponseNum = 0;
            this.closeAfterResponse = -1;
            this.onClose = null;
        }
        PacketReceiver.prototype.closeAfter = function (responseNum, callback) {
            this.closeAfterResponse = responseNum;
            this.onClose = callback;
            if (this.closeAfterResponse < this.currentResponseNum) {
                this.onClose();
                this.onClose = null;
            }
        };
        /**
         * Each message from the server comes with a response number, and an array of data. The responseNumber
         * allows us to ensure that we process them in the right order, since we can't be guaranteed that all
         * browsers will respond in the same order as the requests we sent
         */
        PacketReceiver.prototype.handleResponse = function (requestNum, data) {
            var _this = this;
            this.pendingResponses[requestNum] = data;
            var _loop_1 = function () {
                var toProcess = this_1.pendingResponses[this_1.currentResponseNum];
                delete this_1.pendingResponses[this_1.currentResponseNum];
                var _loop_2 = function (i) {
                    if (toProcess[i]) {
                        exceptionGuard(function () {
                            _this.onMessage_(toProcess[i]);
                        });
                    }
                };
                for (var i = 0; i < toProcess.length; ++i) {
                    _loop_2(i);
                }
                if (this_1.currentResponseNum === this_1.closeAfterResponse) {
                    if (this_1.onClose) {
                        this_1.onClose();
                        this_1.onClose = null;
                    }
                    return "break";
                }
                this_1.currentResponseNum++;
            };
            var this_1 = this;
            while (this.pendingResponses[this.currentResponseNum]) {
                var state_1 = _loop_1();
                if (state_1 === "break")
                    break;
            }
        };
        return PacketReceiver;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // URL query parameters associated with longpolling
    var FIREBASE_LONGPOLL_START_PARAM = 'start';
    var FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';
    var FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';
    var FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';
    var FIREBASE_LONGPOLL_ID_PARAM = 'id';
    var FIREBASE_LONGPOLL_PW_PARAM = 'pw';
    var FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';
    var FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';
    var FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';
    var FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';
    var FIREBASE_LONGPOLL_DATA_PARAM = 'd';
    var FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';
    //Data size constants.
    //TODO: Perf: the maximum length actually differs from browser to browser.
    // We should check what browser we're on and set accordingly.
    var MAX_URL_DATA_SIZE = 1870;
    var SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=
    var MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;
    /**
     * Keepalive period
     * send a fresh request at minimum every 25 seconds. Opera has a maximum request
     * length of 30 seconds that we can't exceed.
     */
    var KEEPALIVE_REQUEST_INTERVAL = 25000;
    /**
     * How long to wait before aborting a long-polling connection attempt.
     */
    var LP_CONNECT_TIMEOUT = 30000;
    /**
     * This class manages a single long-polling connection.
     */
    var BrowserPollConnection = /** @class */ (function () {
        /**
         * @param connId An identifier for this connection, used for logging
         * @param repoInfo The info for the endpoint to send data to.
         * @param applicationId The Firebase App ID for this project.
         * @param transportSessionId Optional transportSessionid if we are reconnecting for an existing
         *                                         transport session
         * @param lastSessionId Optional lastSessionId if the PersistentConnection has already created a
         *                                     connection previously
         */
        function BrowserPollConnection(connId, repoInfo, applicationId, transportSessionId, lastSessionId) {
            this.connId = connId;
            this.repoInfo = repoInfo;
            this.applicationId = applicationId;
            this.transportSessionId = transportSessionId;
            this.lastSessionId = lastSessionId;
            this.bytesSent = 0;
            this.bytesReceived = 0;
            this.everConnected_ = false;
            this.log_ = logWrapper(connId);
            this.stats_ = StatsManager.getCollection(repoInfo);
            this.urlFn = function (params) {
                return repoInfo.connectionURL(LONG_POLLING, params);
            };
        }
        /**
         * @param onMessage Callback when messages arrive
         * @param onDisconnect Callback with connection lost.
         */
        BrowserPollConnection.prototype.open = function (onMessage, onDisconnect) {
            var _this = this;
            this.curSegmentNum = 0;
            this.onDisconnect_ = onDisconnect;
            this.myPacketOrderer = new PacketReceiver(onMessage);
            this.isClosed_ = false;
            this.connectTimeoutTimer_ = setTimeout(function () {
                _this.log_('Timed out trying to connect.');
                // Make sure we clear the host cache
                _this.onClosed_();
                _this.connectTimeoutTimer_ = null;
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
            }, Math.floor(LP_CONNECT_TIMEOUT));
            // Ensure we delay the creation of the iframe until the DOM is loaded.
            executeWhenDOMReady(function () {
                if (_this.isClosed_) {
                    return;
                }
                //Set up a callback that gets triggered once a connection is set up.
                _this.scriptTagHolder = new FirebaseIFrameScriptHolder(function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    var _a = __read(args, 5), command = _a[0], arg1 = _a[1], arg2 = _a[2], arg3 = _a[3], arg4 = _a[4];
                    _this.incrementIncomingBytes_(args);
                    if (!_this.scriptTagHolder) {
                        return; // we closed the connection.
                    }
                    if (_this.connectTimeoutTimer_) {
                        clearTimeout(_this.connectTimeoutTimer_);
                        _this.connectTimeoutTimer_ = null;
                    }
                    _this.everConnected_ = true;
                    if (command === FIREBASE_LONGPOLL_START_PARAM) {
                        _this.id = arg1;
                        _this.password = arg2;
                    }
                    else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {
                        // Don't clear the host cache. We got a response from the server, so we know it's reachable
                        if (arg1) {
                            // We aren't expecting any more data (other than what the server's already in the process of sending us
                            // through our already open polls), so don't send any more.
                            _this.scriptTagHolder.sendNewPolls = false;
                            // arg1 in this case is the last response number sent by the server. We should try to receive
                            // all of the responses up to this one before closing
                            _this.myPacketOrderer.closeAfter(arg1, function () {
                                _this.onClosed_();
                            });
                        }
                        else {
                            _this.onClosed_();
                        }
                    }
                    else {
                        throw new Error('Unrecognized command received: ' + command);
                    }
                }, function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    var _a = __read(args, 2), pN = _a[0], data = _a[1];
                    _this.incrementIncomingBytes_(args);
                    _this.myPacketOrderer.handleResponse(pN, data);
                }, function () {
                    _this.onClosed_();
                }, _this.urlFn);
                //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results
                //from cache.
                var urlParams = {};
                urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';
                urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);
                if (_this.scriptTagHolder.uniqueCallbackIdentifier) {
                    urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = _this.scriptTagHolder.uniqueCallbackIdentifier;
                }
                urlParams[VERSION_PARAM] = PROTOCOL_VERSION;
                if (_this.transportSessionId) {
                    urlParams[TRANSPORT_SESSION_PARAM] = _this.transportSessionId;
                }
                if (_this.lastSessionId) {
                    urlParams[LAST_SESSION_PARAM] = _this.lastSessionId;
                }
                if (_this.applicationId) {
                    urlParams[APPLICATION_ID_PARAM] = _this.applicationId;
                }
                if (typeof location !== 'undefined' &&
                    location.hostname &&
                    FORGE_DOMAIN_RE.test(location.hostname)) {
                    urlParams[REFERER_PARAM] = FORGE_REF;
                }
                var connectURL = _this.urlFn(urlParams);
                _this.log_('Connecting via long-poll to ' + connectURL);
                _this.scriptTagHolder.addTag(connectURL, function () {
                    /* do nothing */
                });
            });
        };
        /**
         * Call this when a handshake has completed successfully and we want to consider the connection established
         */
        BrowserPollConnection.prototype.start = function () {
            this.scriptTagHolder.startLongPoll(this.id, this.password);
            this.addDisconnectPingFrame(this.id, this.password);
        };
        /**
         * Forces long polling to be considered as a potential transport
         */
        BrowserPollConnection.forceAllow = function () {
            BrowserPollConnection.forceAllow_ = true;
        };
        /**
         * Forces longpolling to not be considered as a potential transport
         */
        BrowserPollConnection.forceDisallow = function () {
            BrowserPollConnection.forceDisallow_ = true;
        };
        // Static method, use string literal so it can be accessed in a generic way
        BrowserPollConnection.isAvailable = function () {
            if (BrowserPollConnection.forceAllow_) {
                return true;
            }
            else {
                // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in
                // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).
                return (!BrowserPollConnection.forceDisallow_ &&
                    typeof document !== 'undefined' &&
                    document.createElement != null &&
                    !isChromeExtensionContentScript() &&
                    !isWindowsStoreApp());
            }
        };
        /**
         * No-op for polling
         */
        BrowserPollConnection.prototype.markConnectionHealthy = function () { };
        /**
         * Stops polling and cleans up the iframe
         */
        BrowserPollConnection.prototype.shutdown_ = function () {
            this.isClosed_ = true;
            if (this.scriptTagHolder) {
                this.scriptTagHolder.close();
                this.scriptTagHolder = null;
            }
            //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.
            if (this.myDisconnFrame) {
                document.body.removeChild(this.myDisconnFrame);
                this.myDisconnFrame = null;
            }
            if (this.connectTimeoutTimer_) {
                clearTimeout(this.connectTimeoutTimer_);
                this.connectTimeoutTimer_ = null;
            }
        };
        /**
         * Triggered when this transport is closed
         */
        BrowserPollConnection.prototype.onClosed_ = function () {
            if (!this.isClosed_) {
                this.log_('Longpoll is closing itself');
                this.shutdown_();
                if (this.onDisconnect_) {
                    this.onDisconnect_(this.everConnected_);
                    this.onDisconnect_ = null;
                }
            }
        };
        /**
         * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server
         * that we've left.
         */
        BrowserPollConnection.prototype.close = function () {
            if (!this.isClosed_) {
                this.log_('Longpoll is being closed.');
                this.shutdown_();
            }
        };
        /**
         * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then
         * broken into chunks (since URLs have a small maximum length).
         * @param data The JSON data to transmit.
         */
        BrowserPollConnection.prototype.send = function (data) {
            var dataStr = stringify(data);
            this.bytesSent += dataStr.length;
            this.stats_.incrementCounter('bytes_sent', dataStr.length);
            //first, lets get the base64-encoded data
            var base64data = base64Encode(dataStr);
            //We can only fit a certain amount in each URL, so we need to split this request
            //up into multiple pieces if it doesn't fit in one request.
            var dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);
            //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number
            //of segments so that we can reassemble the packet on the server.
            for (var i = 0; i < dataSegs.length; i++) {
                this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);
                this.curSegmentNum++;
            }
        };
        /**
         * This is how we notify the server that we're leaving.
         * We aren't able to send requests with DHTML on a window close event, but we can
         * trigger XHR requests in some browsers (everything but Opera basically).
         */
        BrowserPollConnection.prototype.addDisconnectPingFrame = function (id, pw) {
            this.myDisconnFrame = document.createElement('iframe');
            var urlParams = {};
            urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';
            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;
            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;
            this.myDisconnFrame.src = this.urlFn(urlParams);
            this.myDisconnFrame.style.display = 'none';
            document.body.appendChild(this.myDisconnFrame);
        };
        /**
         * Used to track the bytes received by this client
         */
        BrowserPollConnection.prototype.incrementIncomingBytes_ = function (args) {
            // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.
            var bytesReceived = stringify(args).length;
            this.bytesReceived += bytesReceived;
            this.stats_.incrementCounter('bytes_received', bytesReceived);
        };
        return BrowserPollConnection;
    }());
    /*********************************************************************************************
     * A wrapper around an iframe that is used as a long-polling script holder.
     *********************************************************************************************/
    var FirebaseIFrameScriptHolder = /** @class */ (function () {
        /**
         * @param commandCB - The callback to be called when control commands are recevied from the server.
         * @param onMessageCB - The callback to be triggered when responses arrive from the server.
         * @param onDisconnect - The callback to be triggered when this tag holder is closed
         * @param urlFn - A function that provides the URL of the endpoint to send data to.
         */
        function FirebaseIFrameScriptHolder(commandCB, onMessageCB, onDisconnect, urlFn) {
            this.onDisconnect = onDisconnect;
            this.urlFn = urlFn;
            //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause
            //problems in some browsers.
            this.outstandingRequests = new Set();
            //A queue of the pending segments waiting for transmission to the server.
            this.pendingSegs = [];
            //A serial number. We use this for two things:
            // 1) A way to ensure the browser doesn't cache responses to polls
            // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The
            //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute
            //    JSONP code in the order it was added to the iframe.
            this.currentSerial = Math.floor(Math.random() * 100000000);
            // This gets set to false when we're "closing down" the connection (e.g. we're switching transports but there's still
            // incoming data from the server that we're waiting for).
            this.sendNewPolls = true;
            {
                //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the
                //iframes where we put the long-polling script tags. We have two callbacks:
                //   1) Command Callback - Triggered for control issues, like starting a connection.
                //   2) Message Callback - Triggered when new data arrives.
                this.uniqueCallbackIdentifier = LUIDGenerator();
                window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;
                window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB;
                //Create an iframe for us to add script tags to.
                this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();
                // Set the iframe's contents.
                var script = '';
                // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient
                // for ie9, but ie8 needs to do it again in the document itself.
                if (this.myIFrame.src &&
                    this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {
                    var currentDomain = document.domain;
                    script = '<script>document.domain="' + currentDomain + '";</script>';
                }
                var iframeContents = '<html><body>' + script + '</body></html>';
                try {
                    this.myIFrame.doc.open();
                    this.myIFrame.doc.write(iframeContents);
                    this.myIFrame.doc.close();
                }
                catch (e) {
                    log('frame writing exception');
                    if (e.stack) {
                        log(e.stack);
                    }
                    log(e);
                }
            }
        }
        /**
         * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can
         * actually use.
         */
        FirebaseIFrameScriptHolder.createIFrame_ = function () {
            var iframe = document.createElement('iframe');
            iframe.style.display = 'none';
            // This is necessary in order to initialize the document inside the iframe
            if (document.body) {
                document.body.appendChild(iframe);
                try {
                    // If document.domain has been modified in IE, this will throw an error, and we need to set the
                    // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute
                    // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.
                    var a = iframe.contentWindow.document;
                    if (!a) {
                        // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.
                        log('No IE domain setting required');
                    }
                }
                catch (e) {
                    var domain = document.domain;
                    iframe.src =
                        "javascript:void((function(){document.open();document.domain='" +
                            domain +
                            "';document.close();})())";
                }
            }
            else {
                // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this
                // never gets hit.
                throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';
            }
            // Get the document of the iframe in a browser-specific way.
            if (iframe.contentDocument) {
                iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari
            }
            else if (iframe.contentWindow) {
                iframe.doc = iframe.contentWindow.document; // Internet Explorer
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
            }
            else if (iframe.document) {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                iframe.doc = iframe.document; //others?
            }
            return iframe;
        };
        /**
         * Cancel all outstanding queries and remove the frame.
         */
        FirebaseIFrameScriptHolder.prototype.close = function () {
            var _this = this;
            //Mark this iframe as dead, so no new requests are sent.
            this.alive = false;
            if (this.myIFrame) {
                //We have to actually remove all of the html inside this iframe before removing it from the
                //window, or IE will continue loading and executing the script tags we've already added, which
                //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.
                this.myIFrame.doc.body.innerHTML = '';
                setTimeout(function () {
                    if (_this.myIFrame !== null) {
                        document.body.removeChild(_this.myIFrame);
                        _this.myIFrame = null;
                    }
                }, Math.floor(0));
            }
            // Protect from being called recursively.
            var onDisconnect = this.onDisconnect;
            if (onDisconnect) {
                this.onDisconnect = null;
                onDisconnect();
            }
        };
        /**
         * Actually start the long-polling session by adding the first script tag(s) to the iframe.
         * @param id - The ID of this connection
         * @param pw - The password for this connection
         */
        FirebaseIFrameScriptHolder.prototype.startLongPoll = function (id, pw) {
            this.myID = id;
            this.myPW = pw;
            this.alive = true;
            //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.
            while (this.newRequest_()) { }
        };
        /**
         * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't
         * too many outstanding requests and we are still alive.
         *
         * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if
         * needed.
         */
        FirebaseIFrameScriptHolder.prototype.newRequest_ = function () {
            // We keep one outstanding request open all the time to receive data, but if we need to send data
            // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically
            // close the old request.
            if (this.alive &&
                this.sendNewPolls &&
                this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {
                //construct our url
                this.currentSerial++;
                var urlParams = {};
                urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;
                urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;
                urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;
                var theURL = this.urlFn(urlParams);
                //Now add as much data as we can.
                var curDataString = '';
                var i = 0;
                while (this.pendingSegs.length > 0) {
                    //first, lets see if the next segment will fit.
                    var nextSeg = this.pendingSegs[0];
                    if (nextSeg.d.length +
                        SEG_HEADER_SIZE +
                        curDataString.length <=
                        MAX_URL_DATA_SIZE) {
                        //great, the segment will fit. Lets append it.
                        var theSeg = this.pendingSegs.shift();
                        curDataString =
                            curDataString +
                                '&' +
                                FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +
                                i +
                                '=' +
                                theSeg.seg +
                                '&' +
                                FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +
                                i +
                                '=' +
                                theSeg.ts +
                                '&' +
                                FIREBASE_LONGPOLL_DATA_PARAM +
                                i +
                                '=' +
                                theSeg.d;
                        i++;
                    }
                    else {
                        break;
                    }
                }
                theURL = theURL + curDataString;
                this.addLongPollTag_(theURL, this.currentSerial);
                return true;
            }
            else {
                return false;
            }
        };
        /**
         * Queue a packet for transmission to the server.
         * @param segnum - A sequential id for this packet segment used for reassembly
         * @param totalsegs - The total number of segments in this packet
         * @param data - The data for this segment.
         */
        FirebaseIFrameScriptHolder.prototype.enqueueSegment = function (segnum, totalsegs, data) {
            //add this to the queue of segments to send.
            this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });
            //send the data immediately if there isn't already data being transmitted, unless
            //startLongPoll hasn't been called yet.
            if (this.alive) {
                this.newRequest_();
            }
        };
        /**
         * Add a script tag for a regular long-poll request.
         * @param url - The URL of the script tag.
         * @param serial - The serial number of the request.
         */
        FirebaseIFrameScriptHolder.prototype.addLongPollTag_ = function (url, serial) {
            var _this = this;
            //remember that we sent this request.
            this.outstandingRequests.add(serial);
            var doNewRequest = function () {
                _this.outstandingRequests.delete(serial);
                _this.newRequest_();
            };
            // If this request doesn't return on its own accord (by the server sending us some data), we'll
            // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.
            var keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));
            var readyStateCB = function () {
                // Request completed.  Cancel the keepalive.
                clearTimeout(keepaliveTimeout);
                // Trigger a new request so we can continue receiving data.
                doNewRequest();
            };
            this.addTag(url, readyStateCB);
        };
        /**
         * Add an arbitrary script tag to the iframe.
         * @param url - The URL for the script tag source.
         * @param loadCB - A callback to be triggered once the script has loaded.
         */
        FirebaseIFrameScriptHolder.prototype.addTag = function (url, loadCB) {
            var _this = this;
            {
                setTimeout(function () {
                    try {
                        // if we're already closed, don't add this poll
                        if (!_this.sendNewPolls) {
                            return;
                        }
                        var newScript_1 = _this.myIFrame.doc.createElement('script');
                        newScript_1.type = 'text/javascript';
                        newScript_1.async = true;
                        newScript_1.src = url;
                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        newScript_1.onload = newScript_1.onreadystatechange = function () {
                            // eslint-disable-next-line @typescript-eslint/no-explicit-any
                            var rstate = newScript_1.readyState;
                            if (!rstate || rstate === 'loaded' || rstate === 'complete') {
                                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                                newScript_1.onload = newScript_1.onreadystatechange = null;
                                if (newScript_1.parentNode) {
                                    newScript_1.parentNode.removeChild(newScript_1);
                                }
                                loadCB();
                            }
                        };
                        newScript_1.onerror = function () {
                            log('Long-poll script failed to load: ' + url);
                            _this.sendNewPolls = false;
                            _this.close();
                        };
                        _this.myIFrame.doc.body.appendChild(newScript_1);
                    }
                    catch (e) {
                        // TODO: we should make this error visible somehow
                    }
                }, Math.floor(1));
            }
        };
        return FirebaseIFrameScriptHolder;
    }());

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** The semver (www.semver.org) version of the SDK. */
    var SDK_VERSION = '';

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var WEBSOCKET_MAX_FRAME_SIZE = 16384;
    var WEBSOCKET_KEEPALIVE_INTERVAL = 45000;
    var WebSocketImpl = null;
    if (typeof MozWebSocket !== 'undefined') {
        WebSocketImpl = MozWebSocket;
    }
    else if (typeof WebSocket !== 'undefined') {
        WebSocketImpl = WebSocket;
    }
    /**
     * Create a new websocket connection with the given callbacks.
     */
    var WebSocketConnection = /** @class */ (function () {
        /**
         * @param connId identifier for this transport
         * @param repoInfo The info for the websocket endpoint.
         * @param applicationId The Firebase App ID for this project.
         * @param transportSessionId Optional transportSessionId if this is connecting to an existing transport
         *                                         session
         * @param lastSessionId Optional lastSessionId if there was a previous connection
         */
        function WebSocketConnection(connId, repoInfo, applicationId, transportSessionId, lastSessionId) {
            this.connId = connId;
            this.applicationId = applicationId;
            this.keepaliveTimer = null;
            this.frames = null;
            this.totalFrames = 0;
            this.bytesSent = 0;
            this.bytesReceived = 0;
            this.log_ = logWrapper(this.connId);
            this.stats_ = StatsManager.getCollection(repoInfo);
            this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId);
            this.nodeAdmin = repoInfo.nodeAdmin;
        }
        /**
         * @param repoInfo The info for the websocket endpoint.
         * @param transportSessionId Optional transportSessionId if this is connecting to an existing transport
         *                                         session
         * @param lastSessionId Optional lastSessionId if there was a previous connection
         * @return connection url
         */
        WebSocketConnection.connectionURL_ = function (repoInfo, transportSessionId, lastSessionId) {
            var urlParams = {};
            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;
            if (
                typeof location !== 'undefined' &&
                location.hostname &&
                FORGE_DOMAIN_RE.test(location.hostname)) {
                urlParams[REFERER_PARAM] = FORGE_REF;
            }
            if (transportSessionId) {
                urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;
            }
            if (lastSessionId) {
                urlParams[LAST_SESSION_PARAM] = lastSessionId;
            }
            return repoInfo.connectionURL(WEBSOCKET, urlParams);
        };
        /**
         * @param onMessage Callback when messages arrive
         * @param onDisconnect Callback with connection lost.
         */
        WebSocketConnection.prototype.open = function (onMessage, onDisconnect) {
            var _this = this;
            this.onDisconnect = onDisconnect;
            this.onMessage = onMessage;
            this.log_('Websocket connecting to ' + this.connURL);
            this.everConnected_ = false;
            // Assume failure until proven otherwise.
            PersistentStorage.set('previous_websocket_failure', true);
            try {
                var device, options, env, proxy; if (isNodeSdk()) ;
                else {
                    var options = {
                        headers: {
                            'X-Firebase-GMPID': this.applicationId || ''
                        }
                    };
                    this.mySock = new WebSocketImpl(this.connURL, [], options);
                }
            }
            catch (e) {
                this.log_('Error instantiating WebSocket.');
                var error = e.message || e.data;
                if (error) {
                    this.log_(error);
                }
                this.onClosed_();
                return;
            }
            this.mySock.onopen = function () {
                _this.log_('Websocket connected.');
                _this.everConnected_ = true;
            };
            this.mySock.onclose = function () {
                _this.log_('Websocket connection was disconnected.');
                _this.mySock = null;
                _this.onClosed_();
            };
            this.mySock.onmessage = function (m) {
                _this.handleIncomingFrame(m);
            };
            this.mySock.onerror = function (e) {
                _this.log_('WebSocket error.  Closing connection.');
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                var error = e.message || e.data;
                if (error) {
                    _this.log_(error);
                }
                _this.onClosed_();
            };
        };
        /**
         * No-op for websockets, we don't need to do anything once the connection is confirmed as open
         */
        WebSocketConnection.prototype.start = function () { };
        WebSocketConnection.forceDisallow = function () {
            WebSocketConnection.forceDisallow_ = true;
        };
        WebSocketConnection.isAvailable = function () {
            var isOldAndroid = false;
            if (typeof navigator !== 'undefined' && navigator.userAgent) {
                var oldAndroidRegex = /Android ([0-9]{0,}\.[0-9]{0,})/;
                var oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);
                if (oldAndroidMatch && oldAndroidMatch.length > 1) {
                    if (parseFloat(oldAndroidMatch[1]) < 4.4) {
                        isOldAndroid = true;
                    }
                }
            }
            return (!isOldAndroid &&
                WebSocketImpl !== null &&
                !WebSocketConnection.forceDisallow_);
        };
        /**
         * Returns true if we previously failed to connect with this transport.
         */
        WebSocketConnection.previouslyFailed = function () {
            // If our persistent storage is actually only in-memory storage,
            // we default to assuming that it previously failed to be safe.
            return (PersistentStorage.isInMemoryStorage ||
                PersistentStorage.get('previous_websocket_failure') === true);
        };
        WebSocketConnection.prototype.markConnectionHealthy = function () {
            PersistentStorage.remove('previous_websocket_failure');
        };
        WebSocketConnection.prototype.appendFrame_ = function (data) {
            this.frames.push(data);
            if (this.frames.length === this.totalFrames) {
                var fullMess = this.frames.join('');
                this.frames = null;
                var jsonMess = jsonEval(fullMess);
                //handle the message
                this.onMessage(jsonMess);
            }
        };
        /**
         * @param frameCount The number of frames we are expecting from the server
         */
        WebSocketConnection.prototype.handleNewFrameCount_ = function (frameCount) {
            this.totalFrames = frameCount;
            this.frames = [];
        };
        /**
         * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1
         * @return Any remaining data to be process, or null if there is none
         */
        WebSocketConnection.prototype.extractFrameCount_ = function (data) {
            assert(this.frames === null, 'We already have a frame buffer');
            // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced
            // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508
            if (data.length <= 6) {
                var frameCount = Number(data);
                if (!isNaN(frameCount)) {
                    this.handleNewFrameCount_(frameCount);
                    return null;
                }
            }
            this.handleNewFrameCount_(1);
            return data;
        };
        /**
         * Process a websocket frame that has arrived from the server.
         * @param mess The frame data
         */
        WebSocketConnection.prototype.handleIncomingFrame = function (mess) {
            if (this.mySock === null) {
                return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.
            }
            var data = mess['data'];
            this.bytesReceived += data.length;
            this.stats_.incrementCounter('bytes_received', data.length);
            this.resetKeepAlive();
            if (this.frames !== null) {
                // we're buffering
                this.appendFrame_(data);
            }
            else {
                // try to parse out a frame count, otherwise, assume 1 and process it
                var remainingData = this.extractFrameCount_(data);
                if (remainingData !== null) {
                    this.appendFrame_(remainingData);
                }
            }
        };
        /**
         * Send a message to the server
         * @param data The JSON object to transmit
         */
        WebSocketConnection.prototype.send = function (data) {
            this.resetKeepAlive();
            var dataStr = stringify(data);
            this.bytesSent += dataStr.length;
            this.stats_.incrementCounter('bytes_sent', dataStr.length);
            //We can only fit a certain amount in each websocket frame, so we need to split this request
            //up into multiple pieces if it doesn't fit in one request.
            var dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);
            //Send the length header
            if (dataSegs.length > 1) {
                this.sendString_(String(dataSegs.length));
            }
            //Send the actual data in segments.
            for (var i = 0; i < dataSegs.length; i++) {
                this.sendString_(dataSegs[i]);
            }
        };
        WebSocketConnection.prototype.shutdown_ = function () {
            this.isClosed_ = true;
            if (this.keepaliveTimer) {
                clearInterval(this.keepaliveTimer);
                this.keepaliveTimer = null;
            }
            if (this.mySock) {
                this.mySock.close();
                this.mySock = null;
            }
        };
        WebSocketConnection.prototype.onClosed_ = function () {
            if (!this.isClosed_) {
                this.log_('WebSocket is closing itself');
                this.shutdown_();
                // since this is an internal close, trigger the close listener
                if (this.onDisconnect) {
                    this.onDisconnect(this.everConnected_);
                    this.onDisconnect = null;
                }
            }
        };
        /**
         * External-facing close handler.
         * Close the websocket and kill the connection.
         */
        WebSocketConnection.prototype.close = function () {
            if (!this.isClosed_) {
                this.log_('WebSocket is being closed');
                this.shutdown_();
            }
        };
        /**
         * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after
         * the last activity.
         */
        WebSocketConnection.prototype.resetKeepAlive = function () {
            var _this = this;
            clearInterval(this.keepaliveTimer);
            this.keepaliveTimer = setInterval(function () {
                //If there has been no websocket activity for a while, send a no-op
                if (_this.mySock) {
                    _this.sendString_('0');
                }
                _this.resetKeepAlive();
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
            }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));
        };
        /**
         * Send a string over the websocket.
         *
         * @param str String to send.
         */
        WebSocketConnection.prototype.sendString_ = function (str) {
            // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()
            // calls for some unknown reason.  We treat these as an error and disconnect.
            // See https://app.asana.com/0/58926111402292/68021340250410
            try {
                this.mySock.send(str);
            }
            catch (e) {
                this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');
                setTimeout(this.onClosed_.bind(this), 0);
            }
        };
        /**
         * Number of response before we consider the connection "healthy."
         */
        WebSocketConnection.responsesRequiredToBeHealthy = 2;
        /**
         * Time to wait for the connection te become healthy before giving up.
         */
        WebSocketConnection.healthyTimeout = 30000;
        return WebSocketConnection;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Currently simplistic, this class manages what transport a Connection should use at various stages of its
     * lifecycle.
     *
     * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if
     * they are available.
     */
    var TransportManager = /** @class */ (function () {
        /**
         * @param repoInfo Metadata around the namespace we're connecting to
         */
        function TransportManager(repoInfo) {
            this.initTransports_(repoInfo);
        }
        Object.defineProperty(TransportManager, "ALL_TRANSPORTS", {
            get: function () {
                return [BrowserPollConnection, WebSocketConnection];
            },
            enumerable: false,
            configurable: true
        });
        TransportManager.prototype.initTransports_ = function (repoInfo) {
            var e_1, _a;
            var isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();
            var isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();
            if (repoInfo.webSocketOnly) {
                if (!isWebSocketsAvailable) {
                    warn("wss:// URL used, but browser isn't known to support websockets.  Trying anyway.");
                }
                isSkipPollConnection = true;
            }
            if (isSkipPollConnection) {
                this.transports_ = [WebSocketConnection];
            }
            else {
                var transports = (this.transports_ = []);
                try {
                    for (var _b = __values(TransportManager.ALL_TRANSPORTS), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var transport = _c.value;
                        if (transport && transport['isAvailable']()) {
                            transports.push(transport);
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        };
        /**
         * @return The constructor for the initial transport to use
         */
        TransportManager.prototype.initialTransport = function () {
            if (this.transports_.length > 0) {
                return this.transports_[0];
            }
            else {
                throw new Error('No transports available');
            }
        };
        /**
         * @return The constructor for the next transport, or null
         */
        TransportManager.prototype.upgradeTransport = function () {
            if (this.transports_.length > 1) {
                return this.transports_[1];
            }
            else {
                return null;
            }
        };
        return TransportManager;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // Abort upgrade attempt if it takes longer than 60s.
    var UPGRADE_TIMEOUT = 60000;
    // For some transports (WebSockets), we need to "validate" the transport by exchanging a few requests and responses.
    // If we haven't sent enough requests within 5s, we'll start sending noop ping requests.
    var DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;
    // If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)
    // then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout
    // but we've sent/received enough bytes, we don't cancel the connection.
    var BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;
    var BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;
    var MESSAGE_TYPE = 't';
    var MESSAGE_DATA = 'd';
    var CONTROL_SHUTDOWN = 's';
    var CONTROL_RESET = 'r';
    var CONTROL_ERROR = 'e';
    var CONTROL_PONG = 'o';
    var SWITCH_ACK = 'a';
    var END_TRANSMISSION = 'n';
    var PING = 'p';
    var SERVER_HELLO = 'h';
    /**
     * Creates a new real-time connection to the server using whichever method works
     * best in the current browser.
     */
    var Connection = /** @class */ (function () {
        /**
         * @param id - an id for this connection
         * @param repoInfo_ - the info for the endpoint to connect to
         * @param applicationId_ - the Firebase App ID for this project
         * @param onMessage_ - the callback to be triggered when a server-push message arrives
         * @param onReady_ - the callback to be triggered when this connection is ready to send messages.
         * @param onDisconnect_ - the callback to be triggered when a connection was lost
         * @param onKill_ - the callback to be triggered when this connection has permanently shut down.
         * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server
         */
        function Connection(id, repoInfo_, applicationId_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {
            this.id = id;
            this.repoInfo_ = repoInfo_;
            this.applicationId_ = applicationId_;
            this.onMessage_ = onMessage_;
            this.onReady_ = onReady_;
            this.onDisconnect_ = onDisconnect_;
            this.onKill_ = onKill_;
            this.lastSessionId = lastSessionId;
            this.connectionCount = 0;
            this.pendingDataMessages = [];
            this.state_ = 0 /* CONNECTING */;
            this.log_ = logWrapper('c:' + this.id + ':');
            this.transportManager_ = new TransportManager(repoInfo_);
            this.log_('Connection created');
            this.start_();
        }
        /**
         * Starts a connection attempt
         */
        Connection.prototype.start_ = function () {
            var _this = this;
            var conn = this.transportManager_.initialTransport();
            this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, undefined, this.lastSessionId);
            // For certain transports (WebSockets), we need to send and receive several messages back and forth before we
            // can consider the transport healthy.
            this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;
            var onMessageReceived = this.connReceiver_(this.conn_);
            var onConnectionLost = this.disconnReceiver_(this.conn_);
            this.tx_ = this.conn_;
            this.rx_ = this.conn_;
            this.secondaryConn_ = null;
            this.isHealthy_ = false;
            /*
             * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.
             * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.
             * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should
             * still have the context of your originating frame.
             */
            setTimeout(function () {
                // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it
                _this.conn_ && _this.conn_.open(onMessageReceived, onConnectionLost);
            }, Math.floor(0));
            var healthyTimeoutMS = conn['healthyTimeout'] || 0;
            if (healthyTimeoutMS > 0) {
                this.healthyTimeout_ = setTimeoutNonBlocking(function () {
                    _this.healthyTimeout_ = null;
                    if (!_this.isHealthy_) {
                        if (_this.conn_ &&
                            _this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {
                            _this.log_('Connection exceeded healthy timeout but has received ' +
                                _this.conn_.bytesReceived +
                                ' bytes.  Marking connection healthy.');
                            _this.isHealthy_ = true;
                            _this.conn_.markConnectionHealthy();
                        }
                        else if (_this.conn_ &&
                            _this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {
                            _this.log_('Connection exceeded healthy timeout but has sent ' +
                                _this.conn_.bytesSent +
                                ' bytes.  Leaving connection alive.');
                            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to
                            // the server.
                        }
                        else {
                            _this.log_('Closing unhealthy connection after timeout.');
                            _this.close();
                        }
                    }
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                }, Math.floor(healthyTimeoutMS));
            }
        };
        Connection.prototype.nextTransportId_ = function () {
            return 'c:' + this.id + ':' + this.connectionCount++;
        };
        Connection.prototype.disconnReceiver_ = function (conn) {
            var _this = this;
            return function (everConnected) {
                if (conn === _this.conn_) {
                    _this.onConnectionLost_(everConnected);
                }
                else if (conn === _this.secondaryConn_) {
                    _this.log_('Secondary connection lost.');
                    _this.onSecondaryConnectionLost_();
                }
                else {
                    _this.log_('closing an old connection');
                }
            };
        };
        Connection.prototype.connReceiver_ = function (conn) {
            var _this = this;
            return function (message) {
                if (_this.state_ !== 2 /* DISCONNECTED */) {
                    if (conn === _this.rx_) {
                        _this.onPrimaryMessageReceived_(message);
                    }
                    else if (conn === _this.secondaryConn_) {
                        _this.onSecondaryMessageReceived_(message);
                    }
                    else {
                        _this.log_('message on old connection');
                    }
                }
            };
        };
        /**
         * @param dataMsg An arbitrary data message to be sent to the server
         */
        Connection.prototype.sendRequest = function (dataMsg) {
            // wrap in a data message envelope and send it on
            var msg = { t: 'd', d: dataMsg };
            this.sendData_(msg);
        };
        Connection.prototype.tryCleanupConnection = function () {
            if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {
                this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);
                this.conn_ = this.secondaryConn_;
                this.secondaryConn_ = null;
                // the server will shutdown the old connection
            }
        };
        Connection.prototype.onSecondaryControl_ = function (controlData) {
            if (MESSAGE_TYPE in controlData) {
                var cmd = controlData[MESSAGE_TYPE];
                if (cmd === SWITCH_ACK) {
                    this.upgradeIfSecondaryHealthy_();
                }
                else if (cmd === CONTROL_RESET) {
                    // Most likely the session wasn't valid. Abandon the switch attempt
                    this.log_('Got a reset on secondary, closing it');
                    this.secondaryConn_.close();
                    // If we were already using this connection for something, than we need to fully close
                    if (this.tx_ === this.secondaryConn_ ||
                        this.rx_ === this.secondaryConn_) {
                        this.close();
                    }
                }
                else if (cmd === CONTROL_PONG) {
                    this.log_('got pong on secondary.');
                    this.secondaryResponsesRequired_--;
                    this.upgradeIfSecondaryHealthy_();
                }
            }
        };
        Connection.prototype.onSecondaryMessageReceived_ = function (parsedData) {
            var layer = requireKey('t', parsedData);
            var data = requireKey('d', parsedData);
            if (layer === 'c') {
                this.onSecondaryControl_(data);
            }
            else if (layer === 'd') {
                // got a data message, but we're still second connection. Need to buffer it up
                this.pendingDataMessages.push(data);
            }
            else {
                throw new Error('Unknown protocol layer: ' + layer);
            }
        };
        Connection.prototype.upgradeIfSecondaryHealthy_ = function () {
            if (this.secondaryResponsesRequired_ <= 0) {
                this.log_('Secondary connection is healthy.');
                this.isHealthy_ = true;
                this.secondaryConn_.markConnectionHealthy();
                this.proceedWithUpgrade_();
            }
            else {
                // Send a ping to make sure the connection is healthy.
                this.log_('sending ping on secondary.');
                this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });
            }
        };
        Connection.prototype.proceedWithUpgrade_ = function () {
            // tell this connection to consider itself open
            this.secondaryConn_.start();
            // send ack
            this.log_('sending client ack on secondary');
            this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });
            // send end packet on primary transport, switch to sending on this one
            // can receive on this one, buffer responses until end received on primary transport
            this.log_('Ending transmission on primary');
            this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });
            this.tx_ = this.secondaryConn_;
            this.tryCleanupConnection();
        };
        Connection.prototype.onPrimaryMessageReceived_ = function (parsedData) {
            // Must refer to parsedData properties in quotes, so closure doesn't touch them.
            var layer = requireKey('t', parsedData);
            var data = requireKey('d', parsedData);
            if (layer === 'c') {
                this.onControl_(data);
            }
            else if (layer === 'd') {
                this.onDataMessage_(data);
            }
        };
        Connection.prototype.onDataMessage_ = function (message) {
            this.onPrimaryResponse_();
            // We don't do anything with data messages, just kick them up a level
            this.onMessage_(message);
        };
        Connection.prototype.onPrimaryResponse_ = function () {
            if (!this.isHealthy_) {
                this.primaryResponsesRequired_--;
                if (this.primaryResponsesRequired_ <= 0) {
                    this.log_('Primary connection is healthy.');
                    this.isHealthy_ = true;
                    this.conn_.markConnectionHealthy();
                }
            }
        };
        Connection.prototype.onControl_ = function (controlData) {
            var cmd = requireKey(MESSAGE_TYPE, controlData);
            if (MESSAGE_DATA in controlData) {
                var payload = controlData[MESSAGE_DATA];
                if (cmd === SERVER_HELLO) {
                    this.onHandshake_(payload);
                }
                else if (cmd === END_TRANSMISSION) {
                    this.log_('recvd end transmission on primary');
                    this.rx_ = this.secondaryConn_;
                    for (var i = 0; i < this.pendingDataMessages.length; ++i) {
                        this.onDataMessage_(this.pendingDataMessages[i]);
                    }
                    this.pendingDataMessages = [];
                    this.tryCleanupConnection();
                }
                else if (cmd === CONTROL_SHUTDOWN) {
                    // This was previously the 'onKill' callback passed to the lower-level connection
                    // payload in this case is the reason for the shutdown. Generally a human-readable error
                    this.onConnectionShutdown_(payload);
                }
                else if (cmd === CONTROL_RESET) {
                    // payload in this case is the host we should contact
                    this.onReset_(payload);
                }
                else if (cmd === CONTROL_ERROR) {
                    error('Server Error: ' + payload);
                }
                else if (cmd === CONTROL_PONG) {
                    this.log_('got pong on primary.');
                    this.onPrimaryResponse_();
                    this.sendPingOnPrimaryIfNecessary_();
                }
                else {
                    error('Unknown control packet command: ' + cmd);
                }
            }
        };
        /**
         * @param handshake The handshake data returned from the server
         */
        Connection.prototype.onHandshake_ = function (handshake) {
            var timestamp = handshake.ts;
            var version = handshake.v;
            var host = handshake.h;
            this.sessionId = handshake.s;
            this.repoInfo_.updateHost(host);
            // if we've already closed the connection, then don't bother trying to progress further
            if (this.state_ === 0 /* CONNECTING */) {
                this.conn_.start();
                this.onConnectionEstablished_(this.conn_, timestamp);
                if (PROTOCOL_VERSION !== version) {
                    warn('Protocol version mismatch detected');
                }
                // TODO: do we want to upgrade? when? maybe a delay?
                this.tryStartUpgrade_();
            }
        };
        Connection.prototype.tryStartUpgrade_ = function () {
            var conn = this.transportManager_.upgradeTransport();
            if (conn) {
                this.startUpgrade_(conn);
            }
        };
        Connection.prototype.startUpgrade_ = function (conn) {
            var _this = this;
            this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.sessionId);
            // For certain transports (WebSockets), we need to send and receive several messages back and forth before we
            // can consider the transport healthy.
            this.secondaryResponsesRequired_ =
                conn['responsesRequiredToBeHealthy'] || 0;
            var onMessage = this.connReceiver_(this.secondaryConn_);
            var onDisconnect = this.disconnReceiver_(this.secondaryConn_);
            this.secondaryConn_.open(onMessage, onDisconnect);
            // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.
            setTimeoutNonBlocking(function () {
                if (_this.secondaryConn_) {
                    _this.log_('Timed out trying to upgrade.');
                    _this.secondaryConn_.close();
                }
            }, Math.floor(UPGRADE_TIMEOUT));
        };
        Connection.prototype.onReset_ = function (host) {
            this.log_('Reset packet received.  New host: ' + host);
            this.repoInfo_.updateHost(host);
            // TODO: if we're already "connected", we need to trigger a disconnect at the next layer up.
            // We don't currently support resets after the connection has already been established
            if (this.state_ === 1 /* CONNECTED */) {
                this.close();
            }
            else {
                // Close whatever connections we have open and start again.
                this.closeConnections_();
                this.start_();
            }
        };
        Connection.prototype.onConnectionEstablished_ = function (conn, timestamp) {
            var _this = this;
            this.log_('Realtime connection established.');
            this.conn_ = conn;
            this.state_ = 1 /* CONNECTED */;
            if (this.onReady_) {
                this.onReady_(timestamp, this.sessionId);
                this.onReady_ = null;
            }
            // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,
            // send some pings.
            if (this.primaryResponsesRequired_ === 0) {
                this.log_('Primary connection is healthy.');
                this.isHealthy_ = true;
            }
            else {
                setTimeoutNonBlocking(function () {
                    _this.sendPingOnPrimaryIfNecessary_();
                }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));
            }
        };
        Connection.prototype.sendPingOnPrimaryIfNecessary_ = function () {
            // If the connection isn't considered healthy yet, we'll send a noop ping packet request.
            if (!this.isHealthy_ && this.state_ === 1 /* CONNECTED */) {
                this.log_('sending ping on primary.');
                this.sendData_({ t: 'c', d: { t: PING, d: {} } });
            }
        };
        Connection.prototype.onSecondaryConnectionLost_ = function () {
            var conn = this.secondaryConn_;
            this.secondaryConn_ = null;
            if (this.tx_ === conn || this.rx_ === conn) {
                // we are relying on this connection already in some capacity. Therefore, a failure is real
                this.close();
            }
        };
        /**
         * @param everConnected Whether or not the connection ever reached a server. Used to determine if
         * we should flush the host cache
         */
        Connection.prototype.onConnectionLost_ = function (everConnected) {
            this.conn_ = null;
            // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting
            // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.
            if (!everConnected && this.state_ === 0 /* CONNECTING */) {
                this.log_('Realtime connection failed.');
                // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away
                if (this.repoInfo_.isCacheableHost()) {
                    PersistentStorage.remove('host:' + this.repoInfo_.host);
                    // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com
                    this.repoInfo_.internalHost = this.repoInfo_.host;
                }
            }
            else if (this.state_ === 1 /* CONNECTED */) {
                this.log_('Realtime connection lost.');
            }
            this.close();
        };
        Connection.prototype.onConnectionShutdown_ = function (reason) {
            this.log_('Connection shutdown command received. Shutting down...');
            if (this.onKill_) {
                this.onKill_(reason);
                this.onKill_ = null;
            }
            // We intentionally don't want to fire onDisconnect (kill is a different case),
            // so clear the callback.
            this.onDisconnect_ = null;
            this.close();
        };
        Connection.prototype.sendData_ = function (data) {
            if (this.state_ !== 1 /* CONNECTED */) {
                throw 'Connection is not connected';
            }
            else {
                this.tx_.send(data);
            }
        };
        /**
         * Cleans up this connection, calling the appropriate callbacks
         */
        Connection.prototype.close = function () {
            if (this.state_ !== 2 /* DISCONNECTED */) {
                this.log_('Closing realtime connection.');
                this.state_ = 2 /* DISCONNECTED */;
                this.closeConnections_();
                if (this.onDisconnect_) {
                    this.onDisconnect_();
                    this.onDisconnect_ = null;
                }
            }
        };
        Connection.prototype.closeConnections_ = function () {
            this.log_('Shutting down all connections');
            if (this.conn_) {
                this.conn_.close();
                this.conn_ = null;
            }
            if (this.secondaryConn_) {
                this.secondaryConn_.close();
                this.secondaryConn_ = null;
            }
            if (this.healthyTimeout_) {
                clearTimeout(this.healthyTimeout_);
                this.healthyTimeout_ = null;
            }
        };
        return Connection;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Interface defining the set of actions that can be performed against the Firebase server
     * (basically corresponds to our wire protocol).
     *
     * @interface
     */
    var ServerActions = /** @class */ (function () {
        function ServerActions() {
        }
        ServerActions.prototype.put = function (pathString, data, onComplete, hash) { };
        ServerActions.prototype.merge = function (pathString, data, onComplete, hash) { };
        /**
         * Refreshes the auth token for the current connection.
         * @param token The authentication token
         */
        ServerActions.prototype.refreshAuthToken = function (token) { };
        ServerActions.prototype.onDisconnectPut = function (pathString, data, onComplete) { };
        ServerActions.prototype.onDisconnectMerge = function (pathString, data, onComplete) { };
        ServerActions.prototype.onDisconnectCancel = function (pathString, onComplete) { };
        ServerActions.prototype.reportStats = function (stats) { };
        return ServerActions;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var RECONNECT_MIN_DELAY = 1000;
    var RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)
    var GET_CONNECT_TIMEOUT = 3 * 1000;
    var RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)
    var RECONNECT_DELAY_MULTIPLIER = 1.3;
    var RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.
    var SERVER_KILL_INTERRUPT_REASON = 'server_kill';
    // If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.
    var INVALID_AUTH_TOKEN_THRESHOLD = 3;
    /**
     * Firebase connection.  Abstracts wire protocol and handles reconnecting.
     *
     * NOTE: All JSON objects sent to the realtime connection must have property names enclosed
     * in quotes to make sure the closure compiler does not minify them.
     */
    var PersistentConnection = /** @class */ (function (_super) {
        __extends$1(PersistentConnection, _super);
        /**
         * @param repoInfo_ Data about the namespace we are connecting to
         * @param applicationId_ The Firebase App ID for this project
         * @param onDataUpdate_ A callback for new data from the server
         */
        function PersistentConnection(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, authOverride_) {
            var _this = _super.call(this) || this;
            _this.repoInfo_ = repoInfo_;
            _this.applicationId_ = applicationId_;
            _this.onDataUpdate_ = onDataUpdate_;
            _this.onConnectStatus_ = onConnectStatus_;
            _this.onServerInfoUpdate_ = onServerInfoUpdate_;
            _this.authTokenProvider_ = authTokenProvider_;
            _this.authOverride_ = authOverride_;
            // Used for diagnostic logging.
            _this.id = PersistentConnection.nextPersistentConnectionId_++;
            _this.log_ = logWrapper('p:' + _this.id + ':');
            _this.interruptReasons_ = {};
            /** Map<path, Map<queryId, ListenSpec>> */
            _this.listens = new Map();
            _this.outstandingPuts_ = [];
            _this.outstandingGets_ = [];
            _this.outstandingPutCount_ = 0;
            _this.outstandingGetCount_ = 0;
            _this.onDisconnectRequestQueue_ = [];
            _this.connected_ = false;
            _this.reconnectDelay_ = RECONNECT_MIN_DELAY;
            _this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;
            _this.securityDebugCallback_ = null;
            _this.lastSessionId = null;
            _this.establishConnectionTimer_ = null;
            _this.visible_ = false;
            // Before we get connected, we keep a queue of pending messages to send.
            _this.requestCBHash_ = {};
            _this.requestNumber_ = 0;
            _this.realtime_ = null;
            _this.authToken_ = null;
            _this.forceTokenRefresh_ = false;
            _this.invalidAuthTokenCount_ = 0;
            _this.firstConnection_ = true;
            _this.lastConnectionAttemptTime_ = null;
            _this.lastConnectionEstablishedTime_ = null;
            if (authOverride_ && !isNodeSdk()) {
                throw new Error('Auth override specified in options, but not supported on non Node.js platforms');
            }
            _this.scheduleConnect_(0);
            VisibilityMonitor.getInstance().on('visible', _this.onVisible_, _this);
            if (repoInfo_.host.indexOf('fblocal') === -1) {
                OnlineMonitor.getInstance().on('online', _this.onOnline_, _this);
            }
            return _this;
        }
        PersistentConnection.prototype.sendRequest = function (action, body, onResponse) {
            var curReqNum = ++this.requestNumber_;
            var msg = { r: curReqNum, a: action, b: body };
            this.log_(stringify(msg));
            assert(this.connected_, "sendRequest call when we're not connected not allowed.");
            this.realtime_.sendRequest(msg);
            if (onResponse) {
                this.requestCBHash_[curReqNum] = onResponse;
            }
        };
        PersistentConnection.prototype.get = function (query) {
            var _this = this;
            var deferred = new Deferred();
            var request = {
                p: query.path.toString(),
                q: query.queryObject()
            };
            var outstandingGet = {
                action: 'g',
                request: request,
                onComplete: function (message) {
                    var payload = message['d'];
                    if (message['s'] === 'ok') {
                        _this.onDataUpdate_(request['p'], payload, 
                        /*isMerge*/ false, 
                        /*tag*/ null);
                        deferred.resolve(payload);
                    }
                    else {
                        deferred.reject(payload);
                    }
                }
            };
            this.outstandingGets_.push(outstandingGet);
            this.outstandingGetCount_++;
            var index = this.outstandingGets_.length - 1;
            if (!this.connected_) {
                setTimeout(function () {
                    var get = _this.outstandingGets_[index];
                    if (get === undefined || outstandingGet !== get) {
                        return;
                    }
                    delete _this.outstandingGets_[index];
                    _this.outstandingGetCount_--;
                    if (_this.outstandingGetCount_ === 0) {
                        _this.outstandingGets_ = [];
                    }
                    _this.log_('get ' + index + ' timed out on connection');
                    deferred.reject(new Error('Client is offline.'));
                }, GET_CONNECT_TIMEOUT);
            }
            if (this.connected_) {
                this.sendGet_(index);
            }
            return deferred.promise;
        };
        /**
         * @inheritDoc
         */
        PersistentConnection.prototype.listen = function (query, currentHashFn, tag, onComplete) {
            var queryId = query.queryIdentifier();
            var pathString = query.path.toString();
            this.log_('Listen called for ' + pathString + ' ' + queryId);
            if (!this.listens.has(pathString)) {
                this.listens.set(pathString, new Map());
            }
            assert(query.getQueryParams().isDefault() ||
                !query.getQueryParams().loadsAllData(), 'listen() called for non-default but complete query');
            assert(!this.listens.get(pathString).has(queryId), 'listen() called twice for same path/queryId.');
            var listenSpec = {
                onComplete: onComplete,
                hashFn: currentHashFn,
                query: query,
                tag: tag
            };
            this.listens.get(pathString).set(queryId, listenSpec);
            if (this.connected_) {
                this.sendListen_(listenSpec);
            }
        };
        PersistentConnection.prototype.sendGet_ = function (index) {
            var _this = this;
            var get = this.outstandingGets_[index];
            this.sendRequest('g', get.request, function (message) {
                delete _this.outstandingGets_[index];
                _this.outstandingGetCount_--;
                if (_this.outstandingGetCount_ === 0) {
                    _this.outstandingGets_ = [];
                }
                if (get.onComplete) {
                    get.onComplete(message);
                }
            });
        };
        PersistentConnection.prototype.sendListen_ = function (listenSpec) {
            var _this = this;
            var query = listenSpec.query;
            var pathString = query.path.toString();
            var queryId = query.queryIdentifier();
            this.log_('Listen on ' + pathString + ' for ' + queryId);
            var req = { /*path*/ p: pathString };
            var action = 'q';
            // Only bother to send query if it's non-default.
            if (listenSpec.tag) {
                req['q'] = query.queryObject();
                req['t'] = listenSpec.tag;
            }
            req[ /*hash*/'h'] = listenSpec.hashFn();
            this.sendRequest(action, req, function (message) {
                var payload = message[ /*data*/'d'];
                var status = message[ /*status*/'s'];
                // print warnings in any case...
                PersistentConnection.warnOnListenWarnings_(payload, query);
                var currentListenSpec = _this.listens.get(pathString) &&
                    _this.listens.get(pathString).get(queryId);
                // only trigger actions if the listen hasn't been removed and readded
                if (currentListenSpec === listenSpec) {
                    _this.log_('listen response', message);
                    if (status !== 'ok') {
                        _this.removeListen_(pathString, queryId);
                    }
                    if (listenSpec.onComplete) {
                        listenSpec.onComplete(status, payload);
                    }
                }
            });
        };
        PersistentConnection.warnOnListenWarnings_ = function (payload, query) {
            if (payload && typeof payload === 'object' && contains(payload, 'w')) {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                var warnings = safeGet(payload, 'w');
                if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {
                    var indexSpec = '".indexOn": "' + query.getQueryParams().getIndex().toString() + '"';
                    var indexPath = query.path.toString();
                    warn("Using an unspecified index. Your data will be downloaded and " +
                        ("filtered on the client. Consider adding " + indexSpec + " at ") +
                        (indexPath + " to your security rules for better performance."));
                }
            }
        };
        /**
         * @inheritDoc
         */
        PersistentConnection.prototype.refreshAuthToken = function (token) {
            this.authToken_ = token;
            this.log_('Auth token refreshed');
            if (this.authToken_) {
                this.tryAuth();
            }
            else {
                //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete
                //the credential so we dont become authenticated next time we connect.
                if (this.connected_) {
                    this.sendRequest('unauth', {}, function () { });
                }
            }
            this.reduceReconnectDelayIfAdminCredential_(token);
        };
        PersistentConnection.prototype.reduceReconnectDelayIfAdminCredential_ = function (credential) {
            // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).
            // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.
            var isFirebaseSecret = credential && credential.length === 40;
            if (isFirebaseSecret || isAdmin(credential)) {
                this.log_('Admin auth credential detected.  Reducing max reconnect time.');
                this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;
            }
        };
        /**
         * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like
         * a auth revoked (the connection is closed).
         */
        PersistentConnection.prototype.tryAuth = function () {
            var _this = this;
            if (this.connected_ && this.authToken_) {
                var token_1 = this.authToken_;
                var authMethod = isValidFormat(token_1) ? 'auth' : 'gauth';
                var requestData = { cred: token_1 };
                if (this.authOverride_ === null) {
                    requestData['noauth'] = true;
                }
                else if (typeof this.authOverride_ === 'object') {
                    requestData['authvar'] = this.authOverride_;
                }
                this.sendRequest(authMethod, requestData, function (res) {
                    var status = res[ /*status*/'s'];
                    var data = res[ /*data*/'d'] || 'error';
                    if (_this.authToken_ === token_1) {
                        if (status === 'ok') {
                            _this.invalidAuthTokenCount_ = 0;
                        }
                        else {
                            // Triggers reconnect and force refresh for auth token
                            _this.onAuthRevoked_(status, data);
                        }
                    }
                });
            }
        };
        /**
         * @inheritDoc
         */
        PersistentConnection.prototype.unlisten = function (query, tag) {
            var pathString = query.path.toString();
            var queryId = query.queryIdentifier();
            this.log_('Unlisten called for ' + pathString + ' ' + queryId);
            assert(query.getQueryParams().isDefault() ||
                !query.getQueryParams().loadsAllData(), 'unlisten() called for non-default but complete query');
            var listen = this.removeListen_(pathString, queryId);
            if (listen && this.connected_) {
                this.sendUnlisten_(pathString, queryId, query.queryObject(), tag);
            }
        };
        PersistentConnection.prototype.sendUnlisten_ = function (pathString, queryId, queryObj, tag) {
            this.log_('Unlisten on ' + pathString + ' for ' + queryId);
            var req = { /*path*/ p: pathString };
            var action = 'n';
            // Only bother sending queryId if it's non-default.
            if (tag) {
                req['q'] = queryObj;
                req['t'] = tag;
            }
            this.sendRequest(action, req);
        };
        /**
         * @inheritDoc
         */
        PersistentConnection.prototype.onDisconnectPut = function (pathString, data, onComplete) {
            if (this.connected_) {
                this.sendOnDisconnect_('o', pathString, data, onComplete);
            }
            else {
                this.onDisconnectRequestQueue_.push({
                    pathString: pathString,
                    action: 'o',
                    data: data,
                    onComplete: onComplete
                });
            }
        };
        /**
         * @inheritDoc
         */
        PersistentConnection.prototype.onDisconnectMerge = function (pathString, data, onComplete) {
            if (this.connected_) {
                this.sendOnDisconnect_('om', pathString, data, onComplete);
            }
            else {
                this.onDisconnectRequestQueue_.push({
                    pathString: pathString,
                    action: 'om',
                    data: data,
                    onComplete: onComplete
                });
            }
        };
        /**
         * @inheritDoc
         */
        PersistentConnection.prototype.onDisconnectCancel = function (pathString, onComplete) {
            if (this.connected_) {
                this.sendOnDisconnect_('oc', pathString, null, onComplete);
            }
            else {
                this.onDisconnectRequestQueue_.push({
                    pathString: pathString,
                    action: 'oc',
                    data: null,
                    onComplete: onComplete
                });
            }
        };
        PersistentConnection.prototype.sendOnDisconnect_ = function (action, pathString, data, onComplete) {
            var request = { /*path*/ p: pathString, /*data*/ d: data };
            this.log_('onDisconnect ' + action, request);
            this.sendRequest(action, request, function (response) {
                if (onComplete) {
                    setTimeout(function () {
                        onComplete(response[ /*status*/'s'], response[ /* data */'d']);
                    }, Math.floor(0));
                }
            });
        };
        /**
         * @inheritDoc
         */
        PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {
            this.putInternal('p', pathString, data, onComplete, hash);
        };
        /**
         * @inheritDoc
         */
        PersistentConnection.prototype.merge = function (pathString, data, onComplete, hash) {
            this.putInternal('m', pathString, data, onComplete, hash);
        };
        PersistentConnection.prototype.putInternal = function (action, pathString, data, onComplete, hash) {
            var request = {
                /*path*/ p: pathString,
                /*data*/ d: data
            };
            if (hash !== undefined) {
                request[ /*hash*/'h'] = hash;
            }
            // TODO: Only keep track of the most recent put for a given path?
            this.outstandingPuts_.push({
                action: action,
                request: request,
                onComplete: onComplete
            });
            this.outstandingPutCount_++;
            var index = this.outstandingPuts_.length - 1;
            if (this.connected_) {
                this.sendPut_(index);
            }
            else {
                this.log_('Buffering put: ' + pathString);
            }
        };
        PersistentConnection.prototype.sendPut_ = function (index) {
            var _this = this;
            var action = this.outstandingPuts_[index].action;
            var request = this.outstandingPuts_[index].request;
            var onComplete = this.outstandingPuts_[index].onComplete;
            this.outstandingPuts_[index].queued = this.connected_;
            this.sendRequest(action, request, function (message) {
                _this.log_(action + ' response', message);
                delete _this.outstandingPuts_[index];
                _this.outstandingPutCount_--;
                // Clean up array occasionally.
                if (_this.outstandingPutCount_ === 0) {
                    _this.outstandingPuts_ = [];
                }
                if (onComplete) {
                    onComplete(message[ /*status*/'s'], message[ /* data */'d']);
                }
            });
        };
        /**
         * @inheritDoc
         */
        PersistentConnection.prototype.reportStats = function (stats) {
            var _this = this;
            // If we're not connected, we just drop the stats.
            if (this.connected_) {
                var request = { /*counters*/ c: stats };
                this.log_('reportStats', request);
                this.sendRequest(/*stats*/ 's', request, function (result) {
                    var status = result[ /*status*/'s'];
                    if (status !== 'ok') {
                        var errorReason = result[ /* data */'d'];
                        _this.log_('reportStats', 'Error sending stats: ' + errorReason);
                    }
                });
            }
        };
        PersistentConnection.prototype.onDataMessage_ = function (message) {
            if ('r' in message) {
                // this is a response
                this.log_('from server: ' + stringify(message));
                var reqNum = message['r'];
                var onResponse = this.requestCBHash_[reqNum];
                if (onResponse) {
                    delete this.requestCBHash_[reqNum];
                    onResponse(message[ /*body*/'b']);
                }
            }
            else if ('error' in message) {
                throw 'A server-side error has occurred: ' + message['error'];
            }
            else if ('a' in message) {
                // a and b are action and body, respectively
                this.onDataPush_(message['a'], message['b']);
            }
        };
        PersistentConnection.prototype.onDataPush_ = function (action, body) {
            this.log_('handleServerMessage', action, body);
            if (action === 'd') {
                this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], 
                /*isMerge*/ false, body['t']);
            }
            else if (action === 'm') {
                this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], 
                /*isMerge=*/ true, body['t']);
            }
            else if (action === 'c') {
                this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);
            }
            else if (action === 'ac') {
                this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);
            }
            else if (action === 'sd') {
                this.onSecurityDebugPacket_(body);
            }
            else {
                error('Unrecognized action received from server: ' +
                    stringify(action) +
                    '\nAre you using the latest client?');
            }
        };
        PersistentConnection.prototype.onReady_ = function (timestamp, sessionId) {
            this.log_('connection ready');
            this.connected_ = true;
            this.lastConnectionEstablishedTime_ = new Date().getTime();
            this.handleTimestamp_(timestamp);
            this.lastSessionId = sessionId;
            if (this.firstConnection_) {
                this.sendConnectStats_();
            }
            this.restoreState_();
            this.firstConnection_ = false;
            this.onConnectStatus_(true);
        };
        PersistentConnection.prototype.scheduleConnect_ = function (timeout) {
            var _this = this;
            assert(!this.realtime_, "Scheduling a connect when we're already connected/ing?");
            if (this.establishConnectionTimer_) {
                clearTimeout(this.establishConnectionTimer_);
            }
            // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating "Security Error" in
            // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).
            this.establishConnectionTimer_ = setTimeout(function () {
                _this.establishConnectionTimer_ = null;
                _this.establishConnection_();
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
            }, Math.floor(timeout));
        };
        PersistentConnection.prototype.onVisible_ = function (visible) {
            // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.
            if (visible &&
                !this.visible_ &&
                this.reconnectDelay_ === this.maxReconnectDelay_) {
                this.log_('Window became visible.  Reducing delay.');
                this.reconnectDelay_ = RECONNECT_MIN_DELAY;
                if (!this.realtime_) {
                    this.scheduleConnect_(0);
                }
            }
            this.visible_ = visible;
        };
        PersistentConnection.prototype.onOnline_ = function (online) {
            if (online) {
                this.log_('Browser went online.');
                this.reconnectDelay_ = RECONNECT_MIN_DELAY;
                if (!this.realtime_) {
                    this.scheduleConnect_(0);
                }
            }
            else {
                this.log_('Browser went offline.  Killing connection.');
                if (this.realtime_) {
                    this.realtime_.close();
                }
            }
        };
        PersistentConnection.prototype.onRealtimeDisconnect_ = function () {
            this.log_('data client disconnected');
            this.connected_ = false;
            this.realtime_ = null;
            // Since we don't know if our sent transactions succeeded or not, we need to cancel them.
            this.cancelSentTransactions_();
            // Clear out the pending requests.
            this.requestCBHash_ = {};
            if (this.shouldReconnect_()) {
                if (!this.visible_) {
                    this.log_("Window isn't visible.  Delaying reconnect.");
                    this.reconnectDelay_ = this.maxReconnectDelay_;
                    this.lastConnectionAttemptTime_ = new Date().getTime();
                }
                else if (this.lastConnectionEstablishedTime_) {
                    // If we've been connected long enough, reset reconnect delay to minimum.
                    var timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;
                    if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {
                        this.reconnectDelay_ = RECONNECT_MIN_DELAY;
                    }
                    this.lastConnectionEstablishedTime_ = null;
                }
                var timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;
                var reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);
                reconnectDelay = Math.random() * reconnectDelay;
                this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');
                this.scheduleConnect_(reconnectDelay);
                // Adjust reconnect delay for next time.
                this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);
            }
            this.onConnectStatus_(false);
        };
        PersistentConnection.prototype.establishConnection_ = function () {
            var _this = this;
            if (this.shouldReconnect_()) {
                this.log_('Making a connection attempt');
                this.lastConnectionAttemptTime_ = new Date().getTime();
                this.lastConnectionEstablishedTime_ = null;
                var onDataMessage_1 = this.onDataMessage_.bind(this);
                var onReady_1 = this.onReady_.bind(this);
                var onDisconnect_1 = this.onRealtimeDisconnect_.bind(this);
                var connId_1 = this.id + ':' + PersistentConnection.nextConnectionId_++;
                var self_1 = this;
                var lastSessionId_1 = this.lastSessionId;
                var canceled_1 = false;
                var connection_1 = null;
                var closeFn_1 = function () {
                    if (connection_1) {
                        connection_1.close();
                    }
                    else {
                        canceled_1 = true;
                        onDisconnect_1();
                    }
                };
                var sendRequestFn = function (msg) {
                    assert(connection_1, "sendRequest call when we're not connected not allowed.");
                    connection_1.sendRequest(msg);
                };
                this.realtime_ = {
                    close: closeFn_1,
                    sendRequest: sendRequestFn
                };
                var forceRefresh = this.forceTokenRefresh_;
                this.forceTokenRefresh_ = false;
                // First fetch auth token, and establish connection after fetching the token was successful
                this.authTokenProvider_
                    .getToken(forceRefresh)
                    .then(function (result) {
                    if (!canceled_1) {
                        log('getToken() completed. Creating connection.');
                        self_1.authToken_ = result && result.accessToken;
                        connection_1 = new Connection(connId_1, self_1.repoInfo_, self_1.applicationId_, onDataMessage_1, onReady_1, onDisconnect_1, 
                        /* onKill= */ function (reason) {
                            warn(reason + ' (' + self_1.repoInfo_.toString() + ')');
                            self_1.interrupt(SERVER_KILL_INTERRUPT_REASON);
                        }, lastSessionId_1);
                    }
                    else {
                        log('getToken() completed but was canceled');
                    }
                })
                    .then(null, function (error) {
                    self_1.log_('Failed to get token: ' + error);
                    if (!canceled_1) {
                        if (_this.repoInfo_.nodeAdmin) {
                            // This may be a critical error for the Admin Node.js SDK, so log a warning.
                            // But getToken() may also just have temporarily failed, so we still want to
                            // continue retrying.
                            warn(error);
                        }
                        closeFn_1();
                    }
                });
            }
        };
        PersistentConnection.prototype.interrupt = function (reason) {
            log('Interrupting connection for reason: ' + reason);
            this.interruptReasons_[reason] = true;
            if (this.realtime_) {
                this.realtime_.close();
            }
            else {
                if (this.establishConnectionTimer_) {
                    clearTimeout(this.establishConnectionTimer_);
                    this.establishConnectionTimer_ = null;
                }
                if (this.connected_) {
                    this.onRealtimeDisconnect_();
                }
            }
        };
        PersistentConnection.prototype.resume = function (reason) {
            log('Resuming connection for reason: ' + reason);
            delete this.interruptReasons_[reason];
            if (isEmpty(this.interruptReasons_)) {
                this.reconnectDelay_ = RECONNECT_MIN_DELAY;
                if (!this.realtime_) {
                    this.scheduleConnect_(0);
                }
            }
        };
        PersistentConnection.prototype.handleTimestamp_ = function (timestamp) {
            var delta = timestamp - new Date().getTime();
            this.onServerInfoUpdate_({ serverTimeOffset: delta });
        };
        PersistentConnection.prototype.cancelSentTransactions_ = function () {
            for (var i = 0; i < this.outstandingPuts_.length; i++) {
                var put = this.outstandingPuts_[i];
                if (put && /*hash*/ 'h' in put.request && put.queued) {
                    if (put.onComplete) {
                        put.onComplete('disconnect');
                    }
                    delete this.outstandingPuts_[i];
                    this.outstandingPutCount_--;
                }
            }
            // Clean up array occasionally.
            if (this.outstandingPutCount_ === 0) {
                this.outstandingPuts_ = [];
            }
        };
        PersistentConnection.prototype.onListenRevoked_ = function (pathString, query) {
            // Remove the listen and manufacture a "permission_denied" error for the failed listen.
            var queryId;
            if (!query) {
                queryId = 'default';
            }
            else {
                queryId = query.map(function (q) { return ObjectToUniqueKey(q); }).join('$');
            }
            var listen = this.removeListen_(pathString, queryId);
            if (listen && listen.onComplete) {
                listen.onComplete('permission_denied');
            }
        };
        PersistentConnection.prototype.removeListen_ = function (pathString, queryId) {
            var normalizedPathString = new Path(pathString).toString(); // normalize path.
            var listen;
            if (this.listens.has(normalizedPathString)) {
                var map = this.listens.get(normalizedPathString);
                listen = map.get(queryId);
                map.delete(queryId);
                if (map.size === 0) {
                    this.listens.delete(normalizedPathString);
                }
            }
            else {
                // all listens for this path has already been removed
                listen = undefined;
            }
            return listen;
        };
        PersistentConnection.prototype.onAuthRevoked_ = function (statusCode, explanation) {
            log('Auth token revoked: ' + statusCode + '/' + explanation);
            this.authToken_ = null;
            this.forceTokenRefresh_ = true;
            this.realtime_.close();
            if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {
                // We'll wait a couple times before logging the warning / increasing the
                // retry period since oauth tokens will report as "invalid" if they're
                // just expired. Plus there may be transient issues that resolve themselves.
                this.invalidAuthTokenCount_++;
                if (this.invalidAuthTokenCount_ >= INVALID_AUTH_TOKEN_THRESHOLD) {
                    // Set a long reconnect delay because recovery is unlikely
                    this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;
                    // Notify the auth token provider that the token is invalid, which will log
                    // a warning
                    this.authTokenProvider_.notifyForInvalidToken();
                }
            }
        };
        PersistentConnection.prototype.onSecurityDebugPacket_ = function (body) {
            if (this.securityDebugCallback_) {
                this.securityDebugCallback_(body);
            }
            else {
                if ('msg' in body) {
                    console.log('FIREBASE: ' + body['msg'].replace('\n', '\nFIREBASE: '));
                }
            }
        };
        PersistentConnection.prototype.restoreState_ = function () {
            var e_1, _a, e_2, _b;
            //Re-authenticate ourselves if we have a credential stored.
            this.tryAuth();
            try {
                // Puts depend on having received the corresponding data update from the server before they complete, so we must
                // make sure to send listens before puts.
                for (var _c = __values(this.listens.values()), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var queries = _d.value;
                    try {
                        for (var _e = (e_2 = void 0, __values(queries.values())), _f = _e.next(); !_f.done; _f = _e.next()) {
                            var listenSpec = _f.value;
                            this.sendListen_(listenSpec);
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
            for (var i = 0; i < this.outstandingPuts_.length; i++) {
                if (this.outstandingPuts_[i]) {
                    this.sendPut_(i);
                }
            }
            while (this.onDisconnectRequestQueue_.length) {
                var request = this.onDisconnectRequestQueue_.shift();
                this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);
            }
            for (var i = 0; i < this.outstandingGets_.length; i++) {
                if (this.outstandingGets_[i]) {
                    this.sendGet_(i);
                }
            }
        };
        /**
         * Sends client stats for first connection
         */
        PersistentConnection.prototype.sendConnectStats_ = function () {
            var stats = {};
            var clientName = 'js';
            stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\./g, '-')] = 1;
            if (isMobileCordova()) {
                stats['framework.cordova'] = 1;
            }
            else if (isReactNative()) {
                stats['framework.reactnative'] = 1;
            }
            this.reportStats(stats);
        };
        PersistentConnection.prototype.shouldReconnect_ = function () {
            var online = OnlineMonitor.getInstance().currentlyOnline();
            return isEmpty(this.interruptReasons_) && online;
        };
        PersistentConnection.nextPersistentConnectionId_ = 0;
        /**
         * Counter for number of connections created. Mainly used for tagging in the logs
         */
        PersistentConnection.nextConnectionId_ = 0;
        return PersistentConnection;
    }(ServerActions));

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An implementation of ServerActions that communicates with the server via REST requests.
     * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full
     * persistent connection (using WebSockets or long-polling)
     */
    var ReadonlyRestClient = /** @class */ (function (_super) {
        __extends$1(ReadonlyRestClient, _super);
        /**
         * @param repoInfo_ Data about the namespace we are connecting to
         * @param onDataUpdate_ A callback for new data from the server
         */
        function ReadonlyRestClient(repoInfo_, onDataUpdate_, authTokenProvider_) {
            var _this = _super.call(this) || this;
            _this.repoInfo_ = repoInfo_;
            _this.onDataUpdate_ = onDataUpdate_;
            _this.authTokenProvider_ = authTokenProvider_;
            /** @private {function(...[*])} */
            _this.log_ = logWrapper('p:rest:');
            /**
             * We don't actually need to track listens, except to prevent us calling an onComplete for a listen
             * that's been removed. :-/
             */
            _this.listens_ = {};
            return _this;
        }
        ReadonlyRestClient.prototype.reportStats = function (stats) {
            throw new Error('Method not implemented.');
        };
        ReadonlyRestClient.getListenId_ = function (query, tag) {
            if (tag !== undefined) {
                return 'tag$' + tag;
            }
            else {
                assert(query.getQueryParams().isDefault(), "should have a tag if it's not a default query.");
                return query.path.toString();
            }
        };
        /** @inheritDoc */
        ReadonlyRestClient.prototype.listen = function (query, currentHashFn, tag, onComplete) {
            var _this = this;
            var pathString = query.path.toString();
            this.log_('Listen called for ' + pathString + ' ' + query.queryIdentifier());
            // Mark this listener so we can tell if it's removed.
            var listenId = ReadonlyRestClient.getListenId_(query, tag);
            var thisListen = {};
            this.listens_[listenId] = thisListen;
            var queryStringParameters = queryParamsToRestQueryStringParameters(query.getQueryParams());
            this.restRequest_(pathString + '.json', queryStringParameters, function (error, result) {
                var data = result;
                if (error === 404) {
                    data = null;
                    error = null;
                }
                if (error === null) {
                    _this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);
                }
                if (safeGet(_this.listens_, listenId) === thisListen) {
                    var status_1;
                    if (!error) {
                        status_1 = 'ok';
                    }
                    else if (error === 401) {
                        status_1 = 'permission_denied';
                    }
                    else {
                        status_1 = 'rest_error:' + error;
                    }
                    onComplete(status_1, null);
                }
            });
        };
        /** @inheritDoc */
        ReadonlyRestClient.prototype.unlisten = function (query, tag) {
            var listenId = ReadonlyRestClient.getListenId_(query, tag);
            delete this.listens_[listenId];
        };
        ReadonlyRestClient.prototype.get = function (query) {
            var _this = this;
            var queryStringParameters = queryParamsToRestQueryStringParameters(query.getQueryParams());
            var pathString = query.path.toString();
            var deferred = new Deferred();
            this.restRequest_(pathString + '.json', queryStringParameters, function (error, result) {
                var data = result;
                if (error === 404) {
                    data = null;
                    error = null;
                }
                if (error === null) {
                    _this.onDataUpdate_(pathString, data, 
                    /*isMerge=*/ false, 
                    /*tag=*/ null);
                    deferred.resolve(data);
                }
                else {
                    deferred.reject(new Error(data));
                }
            });
            return deferred.promise;
        };
        /** @inheritDoc */
        ReadonlyRestClient.prototype.refreshAuthToken = function (token) {
            // no-op since we just always call getToken.
        };
        /**
         * Performs a REST request to the given path, with the provided query string parameters,
         * and any auth credentials we have.
         */
        ReadonlyRestClient.prototype.restRequest_ = function (pathString, queryStringParameters, callback) {
            var _this = this;
            if (queryStringParameters === void 0) { queryStringParameters = {}; }
            queryStringParameters['format'] = 'export';
            this.authTokenProvider_
                .getToken(/*forceRefresh=*/ false)
                .then(function (authTokenData) {
                var authToken = authTokenData && authTokenData.accessToken;
                if (authToken) {
                    queryStringParameters['auth'] = authToken;
                }
                var url = (_this.repoInfo_.secure ? 'https://' : 'http://') +
                    _this.repoInfo_.host +
                    pathString +
                    '?' +
                    'ns=' +
                    _this.repoInfo_.namespace +
                    querystring(queryStringParameters);
                _this.log_('Sending REST request for ' + url);
                var xhr = new XMLHttpRequest();
                xhr.onreadystatechange = function () {
                    if (callback && xhr.readyState === 4) {
                        _this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);
                        var res = null;
                        if (xhr.status >= 200 && xhr.status < 300) {
                            try {
                                res = jsonEval(xhr.responseText);
                            }
                            catch (e) {
                                warn('Failed to parse JSON response for ' +
                                    url +
                                    ': ' +
                                    xhr.responseText);
                            }
                            callback(null, res);
                        }
                        else {
                            // 401 and 404 are expected.
                            if (xhr.status !== 401 && xhr.status !== 404) {
                                warn('Got unsuccessful REST response for ' +
                                    url +
                                    ' Status: ' +
                                    xhr.status);
                            }
                            callback(xhr.status);
                        }
                        callback = null;
                    }
                };
                xhr.open('GET', url, /*asynchronous=*/ true);
                xhr.send();
            });
        };
        return ReadonlyRestClient;
    }(ServerActions));

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A class that holds metadata about a Repo object
     */
    var RepoInfo = /** @class */ (function () {
        /**
         * @param host Hostname portion of the url for the repo
         * @param secure Whether or not this repo is accessed over ssl
         * @param namespace The namespace represented by the repo
         * @param webSocketOnly Whether to prefer websockets over all other transports (used by Nest).
         * @param nodeAdmin Whether this instance uses Admin SDK credentials
         * @param persistenceKey Override the default session persistence storage key
         */
        function RepoInfo(host, secure, namespace, webSocketOnly, nodeAdmin, persistenceKey, includeNamespaceInQueryParams) {
            if (nodeAdmin === void 0) { nodeAdmin = false; }
            if (persistenceKey === void 0) { persistenceKey = ''; }
            if (includeNamespaceInQueryParams === void 0) { includeNamespaceInQueryParams = false; }
            this.secure = secure;
            this.namespace = namespace;
            this.webSocketOnly = webSocketOnly;
            this.nodeAdmin = nodeAdmin;
            this.persistenceKey = persistenceKey;
            this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;
            this.host = host.toLowerCase();
            this.domain = this.host.substr(this.host.indexOf('.') + 1);
            this.internalHost =
                PersistentStorage.get('host:' + host) || this.host;
        }
        RepoInfo.prototype.needsQueryParam = function () {
            return (this.host !== this.internalHost ||
                this.isCustomHost() ||
                this.includeNamespaceInQueryParams);
        };
        RepoInfo.prototype.isCacheableHost = function () {
            return this.internalHost.substr(0, 2) === 's-';
        };
        RepoInfo.prototype.isDemoHost = function () {
            return this.domain === 'firebaseio-demo.com';
        };
        RepoInfo.prototype.isCustomHost = function () {
            return (this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com');
        };
        RepoInfo.prototype.updateHost = function (newHost) {
            if (newHost !== this.internalHost) {
                this.internalHost = newHost;
                if (this.isCacheableHost()) {
                    PersistentStorage.set('host:' + this.host, this.internalHost);
                }
            }
        };
        /**
         * Returns the websocket URL for this repo
         * @param type of connection
         * @param params list
         * @return The URL for this repo
         */
        RepoInfo.prototype.connectionURL = function (type, params) {
            assert(typeof type === 'string', 'typeof type must == string');
            assert(typeof params === 'object', 'typeof params must == object');
            var connURL;
            if (type === WEBSOCKET) {
                connURL =
                    (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';
            }
            else if (type === LONG_POLLING) {
                connURL =
                    (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';
            }
            else {
                throw new Error('Unknown connection type: ' + type);
            }
            if (this.needsQueryParam()) {
                params['ns'] = this.namespace;
            }
            var pairs = [];
            each(params, function (key, value) {
                pairs.push(key + '=' + value);
            });
            return connURL + pairs.join('&');
        };
        /** @return {string} */
        RepoInfo.prototype.toString = function () {
            var str = this.toURLString();
            if (this.persistenceKey) {
                str += '<' + this.persistenceKey + '>';
            }
            return str;
        };
        /** @return {string} */
        RepoInfo.prototype.toURLString = function () {
            var protocol = this.secure ? 'https://' : 'http://';
            var query = this.includeNamespaceInQueryParams
                ? "?ns=" + this.namespace
                : '';
            return "" + protocol + this.host + "/" + query;
        };
        return RepoInfo;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function decodePath(pathString) {
        var pathStringDecoded = '';
        var pieces = pathString.split('/');
        for (var i = 0; i < pieces.length; i++) {
            if (pieces[i].length > 0) {
                var piece = pieces[i];
                try {
                    piece = decodeURIComponent(piece.replace(/\+/g, ' '));
                }
                catch (e) { }
                pathStringDecoded += '/' + piece;
            }
        }
        return pathStringDecoded;
    }
    /**
     * @return key value hash
     */
    function decodeQuery(queryString) {
        var e_1, _a;
        var results = {};
        if (queryString.charAt(0) === '?') {
            queryString = queryString.substring(1);
        }
        try {
            for (var _b = __values(queryString.split('&')), _c = _b.next(); !_c.done; _c = _b.next()) {
                var segment = _c.value;
                if (segment.length === 0) {
                    continue;
                }
                var kv = segment.split('=');
                if (kv.length === 2) {
                    results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);
                }
                else {
                    warn("Invalid query segment '" + segment + "' in query '" + queryString + "'");
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return results;
    }
    var parseRepoInfo = function (dataURL, nodeAdmin) {
        var parsedUrl = parseDatabaseURL(dataURL), namespace = parsedUrl.namespace;
        if (parsedUrl.domain === 'firebase.com') {
            fatal(parsedUrl.host +
                ' is no longer supported. ' +
                'Please use <YOUR FIREBASE>.firebaseio.com instead');
        }
        // Catch common error of uninitialized namespace value.
        if ((!namespace || namespace === 'undefined') &&
            parsedUrl.domain !== 'localhost') {
            fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');
        }
        if (!parsedUrl.secure) {
            warnIfPageIsSecure();
        }
        var webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';
        return {
            repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, nodeAdmin, webSocketOnly, 
            /*persistenceKey=*/ '', 
            /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain),
            path: new Path(parsedUrl.pathString)
        };
    };
    var parseDatabaseURL = function (dataURL) {
        // Default to empty strings in the event of a malformed string.
        var host = '', domain = '', subdomain = '', pathString = '', namespace = '';
        // Always default to SSL, unless otherwise specified.
        var secure = true, scheme = 'https', port = 443;
        // Don't do any validation here. The caller is responsible for validating the result of parsing.
        if (typeof dataURL === 'string') {
            // Parse scheme.
            var colonInd = dataURL.indexOf('//');
            if (colonInd >= 0) {
                scheme = dataURL.substring(0, colonInd - 1);
                dataURL = dataURL.substring(colonInd + 2);
            }
            // Parse host, path, and query string.
            var slashInd = dataURL.indexOf('/');
            if (slashInd === -1) {
                slashInd = dataURL.length;
            }
            var questionMarkInd = dataURL.indexOf('?');
            if (questionMarkInd === -1) {
                questionMarkInd = dataURL.length;
            }
            host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));
            if (slashInd < questionMarkInd) {
                // For pathString, questionMarkInd will always come after slashInd
                pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));
            }
            var queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));
            // If we have a port, use scheme for determining if it's secure.
            colonInd = host.indexOf(':');
            if (colonInd >= 0) {
                secure = scheme === 'https' || scheme === 'wss';
                port = parseInt(host.substring(colonInd + 1), 10);
            }
            else {
                colonInd = host.length;
            }
            var hostWithoutPort = host.slice(0, colonInd);
            if (hostWithoutPort.toLowerCase() === 'localhost') {
                domain = 'localhost';
            }
            else if (hostWithoutPort.split('.').length <= 2) {
                domain = hostWithoutPort;
            }
            else {
                // Interpret the subdomain of a 3 or more component URL as the namespace name.
                var dotInd = host.indexOf('.');
                subdomain = host.substring(0, dotInd).toLowerCase();
                domain = host.substring(dotInd + 1);
                // Normalize namespaces to lowercase to share storage / connection.
                namespace = subdomain;
            }
            // Always treat the value of the `ns` as the namespace name if it is present.
            if ('ns' in queryParams) {
                namespace = queryParams['ns'];
            }
        }
        return {
            host: host,
            port: port,
            domain: domain,
            subdomain: subdomain,
            secure: secure,
            scheme: scheme,
            pathString: pathString,
            namespace: namespace
        };
    };

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * True for invalid Firebase keys
     */
    var INVALID_KEY_REGEX_ = /[\[\].#$\/\u0000-\u001F\u007F]/;
    /**
     * True for invalid Firebase paths.
     * Allows '/' in paths.
     */
    var INVALID_PATH_REGEX_ = /[\[\].#$\u0000-\u001F\u007F]/;
    /**
     * Maximum number of characters to allow in leaf value
     */
    var MAX_LEAF_SIZE_ = 10 * 1024 * 1024;
    var isValidKey$1 = function (key) {
        return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));
    };
    var isValidPathString = function (pathString) {
        return (typeof pathString === 'string' &&
            pathString.length !== 0 &&
            !INVALID_PATH_REGEX_.test(pathString));
    };
    var isValidRootPathString = function (pathString) {
        if (pathString) {
            // Allow '/.info/' at the beginning.
            pathString = pathString.replace(/^\/*\.info(\/|$)/, '/');
        }
        return isValidPathString(pathString);
    };
    var isValidPriority = function (priority) {
        return (priority === null ||
            typeof priority === 'string' ||
            (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||
            (priority &&
                typeof priority === 'object' &&
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                contains(priority, '.sv')));
    };
    /**
     * Pre-validate a datum passed as an argument to Firebase function.
     */
    var validateFirebaseDataArg = function (fnName, argumentNumber, data, path, optional) {
        if (optional && data === undefined) {
            return;
        }
        validateFirebaseData(errorPrefix(fnName, argumentNumber, optional), data, path);
    };
    /**
     * Validate a data object client-side before sending to server.
     */
    var validateFirebaseData = function (errorPrefix, data, path_) {
        var path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;
        if (data === undefined) {
            throw new Error(errorPrefix + 'contains undefined ' + path.toErrorString());
        }
        if (typeof data === 'function') {
            throw new Error(errorPrefix +
                'contains a function ' +
                path.toErrorString() +
                ' with contents = ' +
                data.toString());
        }
        if (isInvalidJSONNumber(data)) {
            throw new Error(errorPrefix + 'contains ' + data.toString() + ' ' + path.toErrorString());
        }
        // Check max leaf size, but try to avoid the utf8 conversion if we can.
        if (typeof data === 'string' &&
            data.length > MAX_LEAF_SIZE_ / 3 &&
            stringLength(data) > MAX_LEAF_SIZE_) {
            throw new Error(errorPrefix +
                'contains a string greater than ' +
                MAX_LEAF_SIZE_ +
                ' utf8 bytes ' +
                path.toErrorString() +
                " ('" +
                data.substring(0, 50) +
                "...')");
        }
        // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON
        // to save extra walking of large objects.
        if (data && typeof data === 'object') {
            var hasDotValue_1 = false;
            var hasActualChild_1 = false;
            each(data, function (key, value) {
                if (key === '.value') {
                    hasDotValue_1 = true;
                }
                else if (key !== '.priority' && key !== '.sv') {
                    hasActualChild_1 = true;
                    if (!isValidKey$1(key)) {
                        throw new Error(errorPrefix +
                            ' contains an invalid key (' +
                            key +
                            ') ' +
                            path.toErrorString() +
                            '.  Keys must be non-empty strings ' +
                            'and can\'t contain ".", "#", "$", "/", "[", or "]"');
                    }
                }
                path.push(key);
                validateFirebaseData(errorPrefix, value, path);
                path.pop();
            });
            if (hasDotValue_1 && hasActualChild_1) {
                throw new Error(errorPrefix +
                    ' contains ".value" child ' +
                    path.toErrorString() +
                    ' in addition to actual children.');
            }
        }
    };
    /**
     * Pre-validate paths passed in the firebase function.
     */
    var validateFirebaseMergePaths = function (errorPrefix, mergePaths) {
        var i, curPath;
        for (i = 0; i < mergePaths.length; i++) {
            curPath = mergePaths[i];
            var keys = pathSlice(curPath);
            for (var j = 0; j < keys.length; j++) {
                if (keys[j] === '.priority' && j === keys.length - 1) ;
                else if (!isValidKey$1(keys[j])) {
                    throw new Error(errorPrefix +
                        'contains an invalid key (' +
                        keys[j] +
                        ') in path ' +
                        curPath.toString() +
                        '. Keys must be non-empty strings ' +
                        'and can\'t contain ".", "#", "$", "/", "[", or "]"');
                }
            }
        }
        // Check that update keys are not descendants of each other.
        // We rely on the property that sorting guarantees that ancestors come
        // right before descendants.
        mergePaths.sort(pathCompare);
        var prevPath = null;
        for (i = 0; i < mergePaths.length; i++) {
            curPath = mergePaths[i];
            if (prevPath !== null && pathContains(prevPath, curPath)) {
                throw new Error(errorPrefix +
                    'contains a path ' +
                    prevPath.toString() +
                    ' that is ancestor of another path ' +
                    curPath.toString());
            }
            prevPath = curPath;
        }
    };
    /**
     * pre-validate an object passed as an argument to firebase function (
     * must be an object - e.g. for firebase.update()).
     */
    var validateFirebaseMergeDataArg = function (fnName, argumentNumber, data, path, optional) {
        if (optional && data === undefined) {
            return;
        }
        var errorPrefix$1 = errorPrefix(fnName, argumentNumber, optional);
        if (!(data && typeof data === 'object') || Array.isArray(data)) {
            throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');
        }
        var mergePaths = [];
        each(data, function (key, value) {
            var curPath = new Path(key);
            validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));
            if (pathGetBack(curPath) === '.priority') {
                if (!isValidPriority(value)) {
                    throw new Error(errorPrefix$1 +
                        "contains an invalid value for '" +
                        curPath.toString() +
                        "', which must be a valid " +
                        'Firebase priority (a string, finite number, server value, or null).');
                }
            }
            mergePaths.push(curPath);
        });
        validateFirebaseMergePaths(errorPrefix$1, mergePaths);
    };
    var validatePriority = function (fnName, argumentNumber, priority, optional) {
        if (optional && priority === undefined) {
            return;
        }
        if (isInvalidJSONNumber(priority)) {
            throw new Error(errorPrefix(fnName, argumentNumber, optional) +
                'is ' +
                priority.toString() +
                ', but must be a valid Firebase priority (a string, finite number, ' +
                'server value, or null).');
        }
        // Special case to allow importing data with a .sv.
        if (!isValidPriority(priority)) {
            throw new Error(errorPrefix(fnName, argumentNumber, optional) +
                'must be a valid Firebase priority ' +
                '(a string, finite number, server value, or null).');
        }
    };
    var validateEventType = function (fnName, argumentNumber, eventType, optional) {
        if (optional && eventType === undefined) {
            return;
        }
        switch (eventType) {
            case 'value':
            case 'child_added':
            case 'child_removed':
            case 'child_changed':
            case 'child_moved':
                break;
            default:
                throw new Error(errorPrefix(fnName, argumentNumber, optional) +
                    'must be a valid event type = "value", "child_added", "child_removed", ' +
                    '"child_changed", or "child_moved".');
        }
    };
    var validateKey = function (fnName, argumentNumber, key, optional) {
        if (optional && key === undefined) {
            return;
        }
        if (!isValidKey$1(key)) {
            throw new Error(errorPrefix(fnName, argumentNumber, optional) +
                'was an invalid key = "' +
                key +
                '".  Firebase keys must be non-empty strings and ' +
                'can\'t contain ".", "#", "$", "/", "[", or "]").');
        }
    };
    var validatePathString = function (fnName, argumentNumber, pathString, optional) {
        if (optional && pathString === undefined) {
            return;
        }
        if (!isValidPathString(pathString)) {
            throw new Error(errorPrefix(fnName, argumentNumber, optional) +
                'was an invalid path = "' +
                pathString +
                '". Paths must be non-empty strings and ' +
                'can\'t contain ".", "#", "$", "[", or "]"');
        }
    };
    var validateRootPathString = function (fnName, argumentNumber, pathString, optional) {
        if (pathString) {
            // Allow '/.info/' at the beginning.
            pathString = pathString.replace(/^\/*\.info(\/|$)/, '/');
        }
        validatePathString(fnName, argumentNumber, pathString, optional);
    };
    var validateWritablePath = function (fnName, path) {
        if (pathGetFront(path) === '.info') {
            throw new Error(fnName + " failed = Can't modify data under /.info/");
        }
    };
    var validateUrl = function (fnName, argumentNumber, parsedUrl) {
        // TODO = Validate server better.
        var pathString = parsedUrl.path.toString();
        if (!(typeof parsedUrl.repoInfo.host === 'string') ||
            parsedUrl.repoInfo.host.length === 0 ||
            (!isValidKey$1(parsedUrl.repoInfo.namespace) &&
                parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||
            (pathString.length !== 0 && !isValidRootPathString(pathString))) {
            throw new Error(errorPrefix(fnName, argumentNumber, false) +
                'must be a valid firebase URL and ' +
                'the path can\'t contain ".", "#", "$", "[", or "]".');
        }
    };
    var validateBoolean = function (fnName, argumentNumber, bool, optional) {
        if (optional && bool === undefined) {
            return;
        }
        if (typeof bool !== 'boolean') {
            throw new Error(errorPrefix(fnName, argumentNumber, optional) + 'must be a boolean.');
        }
    };

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var OnDisconnect = /** @class */ (function () {
        function OnDisconnect(repo_, path_) {
            this.repo_ = repo_;
            this.path_ = path_;
        }
        OnDisconnect.prototype.cancel = function (onComplete) {
            validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);
            validateCallback('OnDisconnect.cancel', 1, onComplete, true);
            var deferred = new Deferred();
            repoOnDisconnectCancel(this.repo_, this.path_, deferred.wrapCallback(onComplete));
            return deferred.promise;
        };
        OnDisconnect.prototype.remove = function (onComplete) {
            validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);
            validateWritablePath('OnDisconnect.remove', this.path_);
            validateCallback('OnDisconnect.remove', 1, onComplete, true);
            var deferred = new Deferred();
            repoOnDisconnectSet(this.repo_, this.path_, null, deferred.wrapCallback(onComplete));
            return deferred.promise;
        };
        OnDisconnect.prototype.set = function (value, onComplete) {
            validateArgCount('OnDisconnect.set', 1, 2, arguments.length);
            validateWritablePath('OnDisconnect.set', this.path_);
            validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);
            validateCallback('OnDisconnect.set', 2, onComplete, true);
            var deferred = new Deferred();
            repoOnDisconnectSet(this.repo_, this.path_, value, deferred.wrapCallback(onComplete));
            return deferred.promise;
        };
        OnDisconnect.prototype.setWithPriority = function (value, priority, onComplete) {
            validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);
            validateWritablePath('OnDisconnect.setWithPriority', this.path_);
            validateFirebaseDataArg('OnDisconnect.setWithPriority', 1, value, this.path_, false);
            validatePriority('OnDisconnect.setWithPriority', 2, priority, false);
            validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);
            var deferred = new Deferred();
            repoOnDisconnectSetWithPriority(this.repo_, this.path_, value, priority, deferred.wrapCallback(onComplete));
            return deferred.promise;
        };
        OnDisconnect.prototype.update = function (objectToMerge, onComplete) {
            validateArgCount('OnDisconnect.update', 1, 2, arguments.length);
            validateWritablePath('OnDisconnect.update', this.path_);
            if (Array.isArray(objectToMerge)) {
                var newObjectToMerge = {};
                for (var i = 0; i < objectToMerge.length; ++i) {
                    newObjectToMerge['' + i] = objectToMerge[i];
                }
                objectToMerge = newObjectToMerge;
                warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +
                    'existing data, or an Object with integer keys if you really do want to only update some of the children.');
            }
            validateFirebaseMergeDataArg('OnDisconnect.update', 1, objectToMerge, this.path_, false);
            validateCallback('OnDisconnect.update', 2, onComplete, true);
            var deferred = new Deferred();
            repoOnDisconnectUpdate(this.repo_, this.path_, objectToMerge, deferred.wrapCallback(onComplete));
            return deferred.promise;
        };
        return OnDisconnect;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var TransactionResult = /** @class */ (function () {
        /**
         * A type for the resolve value of Firebase.transaction.
         */
        function TransactionResult(committed, snapshot) {
            this.committed = committed;
            this.snapshot = snapshot;
        }
        // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary
        // for end-users
        TransactionResult.prototype.toJSON = function () {
            validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);
            return { committed: this.committed, snapshot: this.snapshot.toJSON() };
        };
        return TransactionResult;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Class representing a firebase data snapshot.  It wraps a SnapshotNode and
     * surfaces the public methods (val, forEach, etc.) we want to expose.
     */
    var DataSnapshot = /** @class */ (function () {
        /**
         * @param node_ A SnapshotNode to wrap.
         * @param ref_ The ref of the location this snapshot came from.
         * @param index_ The iteration order for this snapshot
         */
        function DataSnapshot(node_, ref_, index_) {
            this.node_ = node_;
            this.ref_ = ref_;
            this.index_ = index_;
        }
        /**
         * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is
         * empty.
         *
         * @return JSON representation of the DataSnapshot contents, or null if empty.
         */
        DataSnapshot.prototype.val = function () {
            validateArgCount('DataSnapshot.val', 0, 0, arguments.length);
            return this.node_.val();
        };
        /**
         * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting
         * the entire node contents.
         * @return JSON representation of the DataSnapshot contents, or null if empty.
         */
        DataSnapshot.prototype.exportVal = function () {
            validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);
            return this.node_.val(true);
        };
        // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary
        // for end-users
        DataSnapshot.prototype.toJSON = function () {
            // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content
            validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);
            return this.exportVal();
        };
        /**
         * Returns whether the snapshot contains a non-null value.
         *
         * @return Whether the snapshot contains a non-null value, or is empty.
         */
        DataSnapshot.prototype.exists = function () {
            validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);
            return !this.node_.isEmpty();
        };
        /**
         * Returns a DataSnapshot of the specified child node's contents.
         *
         * @param childPathString Path to a child.
         * @return DataSnapshot for child node.
         */
        DataSnapshot.prototype.child = function (childPathString) {
            validateArgCount('DataSnapshot.child', 0, 1, arguments.length);
            // Ensure the childPath is a string (can be a number)
            childPathString = String(childPathString);
            validatePathString('DataSnapshot.child', 1, childPathString, false);
            var childPath = new Path(childPathString);
            var childRef = this.ref_.child(childPath);
            return new DataSnapshot(this.node_.getChild(childPath), childRef, PRIORITY_INDEX);
        };
        /**
         * Returns whether the snapshot contains a child at the specified path.
         *
         * @param childPathString Path to a child.
         * @return Whether the child exists.
         */
        DataSnapshot.prototype.hasChild = function (childPathString) {
            validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);
            validatePathString('DataSnapshot.hasChild', 1, childPathString, false);
            var childPath = new Path(childPathString);
            return !this.node_.getChild(childPath).isEmpty();
        };
        /**
         * Returns the priority of the object, or null if no priority was set.
         *
         * @return The priority.
         */
        DataSnapshot.prototype.getPriority = function () {
            validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);
            // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)
            return this.node_.getPriority().val();
        };
        /**
         * Iterates through child nodes and calls the specified action for each one.
         *
         * @param action Callback function to be called
         * for each child.
         * @return True if forEach was canceled by action returning true for
         * one of the child nodes.
         */
        DataSnapshot.prototype.forEach = function (action) {
            var _this = this;
            validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);
            validateCallback('DataSnapshot.forEach', 1, action, false);
            if (this.node_.isLeafNode()) {
                return false;
            }
            var childrenNode = this.node_;
            // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...
            return !!childrenNode.forEachChild(this.index_, function (key, node) {
                return action(new DataSnapshot(node, _this.ref_.child(key), PRIORITY_INDEX));
            });
        };
        /**
         * Returns whether this DataSnapshot has children.
         * @return True if the DataSnapshot contains 1 or more child nodes.
         */
        DataSnapshot.prototype.hasChildren = function () {
            validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);
            if (this.node_.isLeafNode()) {
                return false;
            }
            else {
                return !this.node_.isEmpty();
            }
        };
        Object.defineProperty(DataSnapshot.prototype, "key", {
            get: function () {
                return this.ref_.getKey();
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Returns the number of children for this DataSnapshot.
         * @return The number of children that this DataSnapshot contains.
         */
        DataSnapshot.prototype.numChildren = function () {
            validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);
            return this.node_.numChildren();
        };
        /**
         * @return The Firebase reference for the location this snapshot's data came
         * from.
         */
        DataSnapshot.prototype.getRef = function () {
            validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);
            return this.ref_;
        };
        Object.defineProperty(DataSnapshot.prototype, "ref", {
            get: function () {
                return this.getRef();
            },
            enumerable: false,
            configurable: true
        });
        return DataSnapshot;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Encapsulates the data needed to raise an event
     */
    var DataEvent = /** @class */ (function () {
        /**
         * @param eventType One of: value, child_added, child_changed, child_moved, child_removed
         * @param eventRegistration The function to call to with the event data. User provided
         * @param snapshot The data backing the event
         * @param prevName Optional, the name of the previous child for child_* events.
         */
        function DataEvent(eventType, eventRegistration, snapshot, prevName) {
            this.eventType = eventType;
            this.eventRegistration = eventRegistration;
            this.snapshot = snapshot;
            this.prevName = prevName;
        }
        /**
         * @inheritDoc
         */
        DataEvent.prototype.getPath = function () {
            var ref = this.snapshot.getRef();
            if (this.eventType === 'value') {
                return ref.path;
            }
            else {
                return ref.getParent().path;
            }
        };
        /**
         * @inheritDoc
         */
        DataEvent.prototype.getEventType = function () {
            return this.eventType;
        };
        /**
         * @inheritDoc
         */
        DataEvent.prototype.getEventRunner = function () {
            return this.eventRegistration.getEventRunner(this);
        };
        /**
         * @inheritDoc
         */
        DataEvent.prototype.toString = function () {
            return (this.getPath().toString() +
                ':' +
                this.eventType +
                ':' +
                stringify(this.snapshot.exportVal()));
        };
        return DataEvent;
    }());
    var CancelEvent = /** @class */ (function () {
        function CancelEvent(eventRegistration, error, path) {
            this.eventRegistration = eventRegistration;
            this.error = error;
            this.path = path;
        }
        /**
         * @inheritDoc
         */
        CancelEvent.prototype.getPath = function () {
            return this.path;
        };
        /**
         * @inheritDoc
         */
        CancelEvent.prototype.getEventType = function () {
            return 'cancel';
        };
        /**
         * @inheritDoc
         */
        CancelEvent.prototype.getEventRunner = function () {
            return this.eventRegistration.getEventRunner(this);
        };
        /**
         * @inheritDoc
         */
        CancelEvent.prototype.toString = function () {
            return this.path.toString() + ':cancel';
        };
        return CancelEvent;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Represents registration for 'value' events.
     */
    var ValueEventRegistration = /** @class */ (function () {
        function ValueEventRegistration(callback_, cancelCallback_, context_) {
            this.callback_ = callback_;
            this.cancelCallback_ = cancelCallback_;
            this.context_ = context_;
        }
        /**
         * @inheritDoc
         */
        ValueEventRegistration.prototype.respondsTo = function (eventType) {
            return eventType === 'value';
        };
        /**
         * @inheritDoc
         */
        ValueEventRegistration.prototype.createEvent = function (change, query) {
            var index = query.getQueryParams().getIndex();
            return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, query.getRef(), index));
        };
        /**
         * @inheritDoc
         */
        ValueEventRegistration.prototype.getEventRunner = function (eventData) {
            var ctx = this.context_;
            if (eventData.getEventType() === 'cancel') {
                assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');
                var cancelCB_1 = this.cancelCallback_;
                return function () {
                    // We know that error exists, we checked above that this is a cancel event
                    cancelCB_1.call(ctx, eventData.error);
                };
            }
            else {
                var cb_1 = this.callback_;
                return function () {
                    cb_1.call(ctx, eventData.snapshot);
                };
            }
        };
        /**
         * @inheritDoc
         */
        ValueEventRegistration.prototype.createCancelEvent = function (error, path) {
            if (this.cancelCallback_) {
                return new CancelEvent(this, error, path);
            }
            else {
                return null;
            }
        };
        /**
         * @inheritDoc
         */
        ValueEventRegistration.prototype.matches = function (other) {
            if (!(other instanceof ValueEventRegistration)) {
                return false;
            }
            else if (!other.callback_ || !this.callback_) {
                // If no callback specified, we consider it to match any callback.
                return true;
            }
            else {
                return (other.callback_ === this.callback_ && other.context_ === this.context_);
            }
        };
        /**
         * @inheritDoc
         */
        ValueEventRegistration.prototype.hasAnyCallback = function () {
            return this.callback_ !== null;
        };
        return ValueEventRegistration;
    }());
    /**
     * Represents the registration of 1 or more child_xxx events.
     *
     * Currently, it is always exactly 1 child_xxx event, but the idea is we might let you
     * register a group of callbacks together in the future.
     */
    var ChildEventRegistration = /** @class */ (function () {
        function ChildEventRegistration(callbacks_, cancelCallback_, context_) {
            this.callbacks_ = callbacks_;
            this.cancelCallback_ = cancelCallback_;
            this.context_ = context_;
        }
        /**
         * @inheritDoc
         */
        ChildEventRegistration.prototype.respondsTo = function (eventType) {
            var eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;
            eventToCheck =
                eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;
            return contains(this.callbacks_, eventToCheck);
        };
        /**
         * @inheritDoc
         */
        ChildEventRegistration.prototype.createCancelEvent = function (error, path) {
            if (this.cancelCallback_) {
                return new CancelEvent(this, error, path);
            }
            else {
                return null;
            }
        };
        /**
         * @inheritDoc
         */
        ChildEventRegistration.prototype.createEvent = function (change, query) {
            assert(change.childName != null, 'Child events should have a childName.');
            var ref = query.getRef().child(change.childName);
            var index = query.getQueryParams().getIndex();
            return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, ref, index), change.prevName);
        };
        /**
         * @inheritDoc
         */
        ChildEventRegistration.prototype.getEventRunner = function (eventData) {
            var ctx = this.context_;
            if (eventData.getEventType() === 'cancel') {
                assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');
                var cancelCB_2 = this.cancelCallback_;
                return function () {
                    // We know that error exists, we checked above that this is a cancel event
                    cancelCB_2.call(ctx, eventData.error);
                };
            }
            else {
                var cb_2 = this.callbacks_[eventData.eventType];
                return function () {
                    cb_2.call(ctx, eventData.snapshot, eventData.prevName);
                };
            }
        };
        /**
         * @inheritDoc
         */
        ChildEventRegistration.prototype.matches = function (other) {
            var _this = this;
            if (other instanceof ChildEventRegistration) {
                if (!this.callbacks_ || !other.callbacks_) {
                    return true;
                }
                else if (this.context_ === other.context_) {
                    var otherKeys = Object.keys(other.callbacks_);
                    var thisKeys = Object.keys(this.callbacks_);
                    var otherCount = otherKeys.length;
                    var thisCount = thisKeys.length;
                    if (otherCount === thisCount) {
                        // If count is 1, do an exact match on eventType, if either is defined but null, it's a match.
                        // If event types don't match, not a match
                        // If count is not 1, exact match across all
                        if (otherCount === 1) {
                            var otherKey = otherKeys[0];
                            var thisKey = thisKeys[0];
                            return (thisKey === otherKey &&
                                (!other.callbacks_[otherKey] ||
                                    !this.callbacks_[thisKey] ||
                                    other.callbacks_[otherKey] === this.callbacks_[thisKey]));
                        }
                        else {
                            // Exact match on each key.
                            return thisKeys.every(function (eventType) {
                                return other.callbacks_[eventType] === _this.callbacks_[eventType];
                            });
                        }
                    }
                }
            }
            return false;
        };
        /**
         * @inheritDoc
         */
        ChildEventRegistration.prototype.hasAnyCallback = function () {
            return this.callbacks_ !== null;
        };
        return ChildEventRegistration;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var __referenceConstructor$1;
    /**
     * A Query represents a filter to be applied to a firebase location.  This object purely represents the
     * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.
     *
     * Since every Firebase reference is a query, Firebase inherits from this object.
     */
    var Query = /** @class */ (function () {
        function Query(repo, path, queryParams_, orderByCalled_) {
            this.repo = repo;
            this.path = path;
            this.queryParams_ = queryParams_;
            this.orderByCalled_ = orderByCalled_;
        }
        Object.defineProperty(Query, "__referenceConstructor", {
            get: function () {
                assert(__referenceConstructor$1, 'Reference.ts has not been loaded');
                return __referenceConstructor$1;
            },
            set: function (val) {
                __referenceConstructor$1 = val;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Validates start/end values for queries.
         */
        Query.validateQueryEndpoints_ = function (params) {
            var startNode = null;
            var endNode = null;
            if (params.hasStart()) {
                startNode = params.getIndexStartValue();
            }
            if (params.hasEnd()) {
                endNode = params.getIndexEndValue();
            }
            if (params.getIndex() === KEY_INDEX) {
                var tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +
                    'startAt(), endAt(), or equalTo().';
                var wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +
                    'endAt(), endBefore(), or equalTo() must be a string.';
                if (params.hasStart()) {
                    var startName = params.getIndexStartName();
                    if (startName !== MIN_NAME) {
                        throw new Error(tooManyArgsError);
                    }
                    else if (typeof startNode !== 'string') {
                        throw new Error(wrongArgTypeError);
                    }
                }
                if (params.hasEnd()) {
                    var endName = params.getIndexEndName();
                    if (endName !== MAX_NAME) {
                        throw new Error(tooManyArgsError);
                    }
                    else if (typeof endNode !== 'string') {
                        throw new Error(wrongArgTypeError);
                    }
                }
            }
            else if (params.getIndex() === PRIORITY_INDEX) {
                if ((startNode != null && !isValidPriority(startNode)) ||
                    (endNode != null && !isValidPriority(endNode))) {
                    throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +
                        'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +
                        '(null, a number, or a string).');
                }
            }
            else {
                assert(params.getIndex() instanceof PathIndex ||
                    params.getIndex() === VALUE_INDEX, 'unknown index type.');
                if ((startNode != null && typeof startNode === 'object') ||
                    (endNode != null && typeof endNode === 'object')) {
                    throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +
                        'equalTo() cannot be an object.');
                }
            }
        };
        /**
         * Validates that limit* has been called with the correct combination of parameters
         */
        Query.validateLimit_ = function (params) {
            if (params.hasStart() &&
                params.hasEnd() &&
                params.hasLimit() &&
                !params.hasAnchoredLimit()) {
                throw new Error("Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use " +
                    'limitToFirst() or limitToLast() instead.');
            }
        };
        /**
         * Validates that no other order by call has been made
         */
        Query.prototype.validateNoPreviousOrderByCall_ = function (fnName) {
            if (this.orderByCalled_ === true) {
                throw new Error(fnName + ": You can't combine multiple orderBy calls.");
            }
        };
        Query.prototype.getQueryParams = function () {
            return this.queryParams_;
        };
        Query.prototype.getRef = function () {
            validateArgCount('Query.ref', 0, 0, arguments.length);
            // This is a slight hack. We cannot goog.require('fb.api.Firebase'), since Firebase requires fb.api.Query.
            // However, we will always export 'Firebase' to the global namespace, so it's guaranteed to exist by the time this
            // method gets called.
            return new Query.__referenceConstructor(this.repo, this.path);
        };
        Query.prototype.on = function (eventType, callback, cancelCallbackOrContext, context) {
            validateArgCount('Query.on', 2, 4, arguments.length);
            validateEventType('Query.on', 1, eventType, false);
            validateCallback('Query.on', 2, callback, false);
            var ret = Query.getCancelAndContextArgs_('Query.on', cancelCallbackOrContext, context);
            if (eventType === 'value') {
                this.onValueEvent(callback, ret.cancel, ret.context);
            }
            else {
                var callbacks = {};
                callbacks[eventType] = callback;
                this.onChildEvent(callbacks, ret.cancel, ret.context);
            }
            return callback;
        };
        Query.prototype.onValueEvent = function (callback, cancelCallback, context) {
            var container = new ValueEventRegistration(callback, cancelCallback || null, context || null);
            repoAddEventCallbackForQuery(this.repo, this, container);
        };
        Query.prototype.onChildEvent = function (callbacks, cancelCallback, context) {
            var container = new ChildEventRegistration(callbacks, cancelCallback, context);
            repoAddEventCallbackForQuery(this.repo, this, container);
        };
        Query.prototype.off = function (eventType, callback, context) {
            validateArgCount('Query.off', 0, 3, arguments.length);
            validateEventType('Query.off', 1, eventType, true);
            validateCallback('Query.off', 2, callback, true);
            validateContextObject('Query.off', 3, context, true);
            var container = null;
            var callbacks = null;
            if (eventType === 'value') {
                var valueCallback = callback || null;
                container = new ValueEventRegistration(valueCallback, null, context || null);
            }
            else if (eventType) {
                if (callback) {
                    callbacks = {};
                    callbacks[eventType] = callback;
                }
                container = new ChildEventRegistration(callbacks, null, context || null);
            }
            repoRemoveEventCallbackForQuery(this.repo, this, container);
        };
        /**
         * Get the server-value for this query, or return a cached value if not connected.
         */
        Query.prototype.get = function () {
            return repoGetValue(this.repo, this);
        };
        /**
         * Attaches a listener, waits for the first event, and then removes the listener
         */
        Query.prototype.once = function (eventType, userCallback, failureCallbackOrContext, context) {
            var _this = this;
            validateArgCount('Query.once', 1, 4, arguments.length);
            validateEventType('Query.once', 1, eventType, false);
            validateCallback('Query.once', 2, userCallback, true);
            var ret = Query.getCancelAndContextArgs_('Query.once', failureCallbackOrContext, context);
            // TODO: Implement this more efficiently (in particular, use 'get' wire protocol for 'value' event)
            // TODO: consider actually wiring the callbacks into the promise. We cannot do this without a breaking change
            // because the API currently expects callbacks will be called synchronously if the data is cached, but this is
            // against the Promise specification.
            var firstCall = true;
            var deferred = new Deferred();
            // A dummy error handler in case a user wasn't expecting promises
            deferred.promise.catch(function () { });
            var onceCallback = function (snapshot) {
                // NOTE: Even though we unsubscribe, we may get called multiple times if a single action (e.g. set() with JSON)
                // triggers multiple events (e.g. child_added or child_changed).
                if (firstCall) {
                    firstCall = false;
                    _this.off(eventType, onceCallback);
                    if (userCallback) {
                        userCallback.bind(ret.context)(snapshot);
                    }
                    deferred.resolve(snapshot);
                }
            };
            this.on(eventType, onceCallback, 
            /*cancel=*/ function (err) {
                _this.off(eventType, onceCallback);
                if (ret.cancel) {
                    ret.cancel.bind(ret.context)(err);
                }
                deferred.reject(err);
            });
            return deferred.promise;
        };
        /**
         * Set a limit and anchor it to the start of the window.
         */
        Query.prototype.limitToFirst = function (limit) {
            validateArgCount('Query.limitToFirst', 1, 1, arguments.length);
            if (typeof limit !== 'number' ||
                Math.floor(limit) !== limit ||
                limit <= 0) {
                throw new Error('Query.limitToFirst: First argument must be a positive integer.');
            }
            if (this.queryParams_.hasLimit()) {
                throw new Error('Query.limitToFirst: Limit was already set (by another call to limit, ' +
                    'limitToFirst, or limitToLast).');
            }
            return new Query(this.repo, this.path, queryParamsLimitToFirst(this.queryParams_, limit), this.orderByCalled_);
        };
        /**
         * Set a limit and anchor it to the end of the window.
         */
        Query.prototype.limitToLast = function (limit) {
            validateArgCount('Query.limitToLast', 1, 1, arguments.length);
            if (typeof limit !== 'number' ||
                Math.floor(limit) !== limit ||
                limit <= 0) {
                throw new Error('Query.limitToLast: First argument must be a positive integer.');
            }
            if (this.queryParams_.hasLimit()) {
                throw new Error('Query.limitToLast: Limit was already set (by another call to limit, ' +
                    'limitToFirst, or limitToLast).');
            }
            return new Query(this.repo, this.path, queryParamsLimitToLast(this.queryParams_, limit), this.orderByCalled_);
        };
        /**
         * Given a child path, return a new query ordered by the specified grandchild path.
         */
        Query.prototype.orderByChild = function (path) {
            validateArgCount('Query.orderByChild', 1, 1, arguments.length);
            if (path === '$key') {
                throw new Error('Query.orderByChild: "$key" is invalid.  Use Query.orderByKey() instead.');
            }
            else if (path === '$priority') {
                throw new Error('Query.orderByChild: "$priority" is invalid.  Use Query.orderByPriority() instead.');
            }
            else if (path === '$value') {
                throw new Error('Query.orderByChild: "$value" is invalid.  Use Query.orderByValue() instead.');
            }
            validatePathString('Query.orderByChild', 1, path, false);
            this.validateNoPreviousOrderByCall_('Query.orderByChild');
            var parsedPath = new Path(path);
            if (pathIsEmpty(parsedPath)) {
                throw new Error('Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.');
            }
            var index = new PathIndex(parsedPath);
            var newParams = queryParamsOrderBy(this.queryParams_, index);
            Query.validateQueryEndpoints_(newParams);
            return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);
        };
        /**
         * Return a new query ordered by the KeyIndex
         */
        Query.prototype.orderByKey = function () {
            validateArgCount('Query.orderByKey', 0, 0, arguments.length);
            this.validateNoPreviousOrderByCall_('Query.orderByKey');
            var newParams = queryParamsOrderBy(this.queryParams_, KEY_INDEX);
            Query.validateQueryEndpoints_(newParams);
            return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);
        };
        /**
         * Return a new query ordered by the PriorityIndex
         */
        Query.prototype.orderByPriority = function () {
            validateArgCount('Query.orderByPriority', 0, 0, arguments.length);
            this.validateNoPreviousOrderByCall_('Query.orderByPriority');
            var newParams = queryParamsOrderBy(this.queryParams_, PRIORITY_INDEX);
            Query.validateQueryEndpoints_(newParams);
            return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);
        };
        /**
         * Return a new query ordered by the ValueIndex
         */
        Query.prototype.orderByValue = function () {
            validateArgCount('Query.orderByValue', 0, 0, arguments.length);
            this.validateNoPreviousOrderByCall_('Query.orderByValue');
            var newParams = queryParamsOrderBy(this.queryParams_, VALUE_INDEX);
            Query.validateQueryEndpoints_(newParams);
            return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);
        };
        Query.prototype.startAt = function (value, name) {
            if (value === void 0) { value = null; }
            validateArgCount('Query.startAt', 0, 2, arguments.length);
            validateFirebaseDataArg('Query.startAt', 1, value, this.path, true);
            validateKey('Query.startAt', 2, name, true);
            var newParams = queryParamsStartAt(this.queryParams_, value, name);
            Query.validateLimit_(newParams);
            Query.validateQueryEndpoints_(newParams);
            if (this.queryParams_.hasStart()) {
                throw new Error('Query.startAt: Starting point was already set (by another call to startAt ' +
                    'or equalTo).');
            }
            // Calling with no params tells us to start at the beginning.
            if (value === undefined) {
                value = null;
                name = null;
            }
            return new Query(this.repo, this.path, newParams, this.orderByCalled_);
        };
        Query.prototype.startAfter = function (value, name) {
            if (value === void 0) { value = null; }
            validateArgCount('Query.startAfter', 0, 2, arguments.length);
            validateFirebaseDataArg('Query.startAfter', 1, value, this.path, false);
            validateKey('Query.startAfter', 2, name, true);
            var newParams = queryParamsStartAfter(this.queryParams_, value, name);
            Query.validateLimit_(newParams);
            Query.validateQueryEndpoints_(newParams);
            if (this.queryParams_.hasStart()) {
                throw new Error('Query.startAfter: Starting point was already set (by another call to startAt, startAfter ' +
                    'or equalTo).');
            }
            return new Query(this.repo, this.path, newParams, this.orderByCalled_);
        };
        Query.prototype.endAt = function (value, name) {
            if (value === void 0) { value = null; }
            validateArgCount('Query.endAt', 0, 2, arguments.length);
            validateFirebaseDataArg('Query.endAt', 1, value, this.path, true);
            validateKey('Query.endAt', 2, name, true);
            var newParams = queryParamsEndAt(this.queryParams_, value, name);
            Query.validateLimit_(newParams);
            Query.validateQueryEndpoints_(newParams);
            if (this.queryParams_.hasEnd()) {
                throw new Error('Query.endAt: Ending point was already set (by another call to endAt, endBefore, or ' +
                    'equalTo).');
            }
            return new Query(this.repo, this.path, newParams, this.orderByCalled_);
        };
        Query.prototype.endBefore = function (value, name) {
            if (value === void 0) { value = null; }
            validateArgCount('Query.endBefore', 0, 2, arguments.length);
            validateFirebaseDataArg('Query.endBefore', 1, value, this.path, false);
            validateKey('Query.endBefore', 2, name, true);
            var newParams = queryParamsEndBefore(this.queryParams_, value, name);
            Query.validateLimit_(newParams);
            Query.validateQueryEndpoints_(newParams);
            if (this.queryParams_.hasEnd()) {
                throw new Error('Query.endBefore: Ending point was already set (by another call to endAt, endBefore, or ' +
                    'equalTo).');
            }
            return new Query(this.repo, this.path, newParams, this.orderByCalled_);
        };
        /**
         * Load the selection of children with exactly the specified value, and, optionally,
         * the specified name.
         */
        Query.prototype.equalTo = function (value, name) {
            validateArgCount('Query.equalTo', 1, 2, arguments.length);
            validateFirebaseDataArg('Query.equalTo', 1, value, this.path, false);
            validateKey('Query.equalTo', 2, name, true);
            if (this.queryParams_.hasStart()) {
                throw new Error('Query.equalTo: Starting point was already set (by another call to startAt/startAfter or ' +
                    'equalTo).');
            }
            if (this.queryParams_.hasEnd()) {
                throw new Error('Query.equalTo: Ending point was already set (by another call to endAt/endBefore or ' +
                    'equalTo).');
            }
            return this.startAt(value, name).endAt(value, name);
        };
        /**
         * @return URL for this location.
         */
        Query.prototype.toString = function () {
            validateArgCount('Query.toString', 0, 0, arguments.length);
            return this.repo.toString() + pathToUrlEncodedString(this.path);
        };
        // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary
        // for end-users.
        Query.prototype.toJSON = function () {
            // An optional spacer argument is unnecessary for a string.
            validateArgCount('Query.toJSON', 0, 1, arguments.length);
            return this.toString();
        };
        /**
         * An object representation of the query parameters used by this Query.
         */
        Query.prototype.queryObject = function () {
            return queryParamsGetQueryObject(this.queryParams_);
        };
        Query.prototype.queryIdentifier = function () {
            var obj = this.queryObject();
            var id = ObjectToUniqueKey(obj);
            return id === '{}' ? 'default' : id;
        };
        /**
         * Return true if this query and the provided query are equivalent; otherwise, return false.
         */
        Query.prototype.isEqual = function (other) {
            validateArgCount('Query.isEqual', 1, 1, arguments.length);
            if (!(other instanceof Query)) {
                var error = 'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';
                throw new Error(error);
            }
            var sameRepo = this.repo === other.repo;
            var samePath = pathEquals(this.path, other.path);
            var sameQueryIdentifier = this.queryIdentifier() === other.queryIdentifier();
            return sameRepo && samePath && sameQueryIdentifier;
        };
        /**
         * Helper used by .on and .once to extract the context and or cancel arguments.
         * @param fnName The function name (on or once)
         *
         */
        Query.getCancelAndContextArgs_ = function (fnName, cancelOrContext, context) {
            var ret = { cancel: null, context: null };
            if (cancelOrContext && context) {
                ret.cancel = cancelOrContext;
                validateCallback(fnName, 3, ret.cancel, true);
                ret.context = context;
                validateContextObject(fnName, 4, ret.context, true);
            }
            else if (cancelOrContext) {
                // we have either a cancel callback or a context.
                if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {
                    // it's a context!
                    ret.context = cancelOrContext;
                }
                else if (typeof cancelOrContext === 'function') {
                    ret.cancel = cancelOrContext;
                }
                else {
                    throw new Error(errorPrefix(fnName, 3, true) +
                        ' must either be a cancel callback or a context object.');
                }
            }
            return ret;
        };
        Object.defineProperty(Query.prototype, "ref", {
            get: function () {
                return this.getRef();
            },
            enumerable: false,
            configurable: true
        });
        return Query;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var Reference = /** @class */ (function (_super) {
        __extends$1(Reference, _super);
        /**
         * Call options:
         *   new Reference(Repo, Path) or
         *   new Reference(url: string, string|RepoManager)
         *
         * Externally - this is the firebase.database.Reference type.
         */
        function Reference(repo, path) {
            var _this = this;
            if (!(repo instanceof Repo)) {
                throw new Error('new Reference() no longer supported - use app.database().');
            }
            // call Query's constructor, passing in the repo and path.
            _this = _super.call(this, repo, path, new QueryParams(), false) || this;
            return _this;
        }
        /** @return {?string} */
        Reference.prototype.getKey = function () {
            validateArgCount('Reference.key', 0, 0, arguments.length);
            if (pathIsEmpty(this.path)) {
                return null;
            }
            else {
                return pathGetBack(this.path);
            }
        };
        Reference.prototype.child = function (pathString) {
            validateArgCount('Reference.child', 1, 1, arguments.length);
            if (typeof pathString === 'number') {
                pathString = String(pathString);
            }
            else if (!(pathString instanceof Path)) {
                if (pathGetFront(this.path) === null) {
                    validateRootPathString('Reference.child', 1, pathString, false);
                }
                else {
                    validatePathString('Reference.child', 1, pathString, false);
                }
            }
            return new Reference(this.repo, pathChild(this.path, pathString));
        };
        /** @return {?Reference} */
        Reference.prototype.getParent = function () {
            validateArgCount('Reference.parent', 0, 0, arguments.length);
            var parentPath = pathParent(this.path);
            return parentPath === null ? null : new Reference(this.repo, parentPath);
        };
        /** @return {!Reference} */
        Reference.prototype.getRoot = function () {
            validateArgCount('Reference.root', 0, 0, arguments.length);
            var ref = this;
            while (ref.getParent() !== null) {
                ref = ref.getParent();
            }
            return ref;
        };
        /** @return {!Database} */
        Reference.prototype.databaseProp = function () {
            return repoGetDatabase(this.repo);
        };
        Reference.prototype.set = function (newVal, onComplete) {
            validateArgCount('Reference.set', 1, 2, arguments.length);
            validateWritablePath('Reference.set', this.path);
            validateFirebaseDataArg('Reference.set', 1, newVal, this.path, false);
            validateCallback('Reference.set', 2, onComplete, true);
            var deferred = new Deferred();
            repoSetWithPriority(this.repo, this.path, newVal, 
            /*priority=*/ null, deferred.wrapCallback(onComplete));
            return deferred.promise;
        };
        Reference.prototype.update = function (objectToMerge, onComplete) {
            validateArgCount('Reference.update', 1, 2, arguments.length);
            validateWritablePath('Reference.update', this.path);
            if (Array.isArray(objectToMerge)) {
                var newObjectToMerge = {};
                for (var i = 0; i < objectToMerge.length; ++i) {
                    newObjectToMerge['' + i] = objectToMerge[i];
                }
                objectToMerge = newObjectToMerge;
                warn('Passing an Array to Firebase.update() is deprecated. ' +
                    'Use set() if you want to overwrite the existing data, or ' +
                    'an Object with integer keys if you really do want to ' +
                    'only update some of the children.');
            }
            validateFirebaseMergeDataArg('Reference.update', 1, objectToMerge, this.path, false);
            validateCallback('Reference.update', 2, onComplete, true);
            var deferred = new Deferred();
            repoUpdate(this.repo, this.path, objectToMerge, deferred.wrapCallback(onComplete));
            return deferred.promise;
        };
        Reference.prototype.setWithPriority = function (newVal, newPriority, onComplete) {
            validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);
            validateWritablePath('Reference.setWithPriority', this.path);
            validateFirebaseDataArg('Reference.setWithPriority', 1, newVal, this.path, false);
            validatePriority('Reference.setWithPriority', 2, newPriority, false);
            validateCallback('Reference.setWithPriority', 3, onComplete, true);
            if (this.getKey() === '.length' || this.getKey() === '.keys') {
                throw ('Reference.setWithPriority failed: ' +
                    this.getKey() +
                    ' is a read-only object.');
            }
            var deferred = new Deferred();
            repoSetWithPriority(this.repo, this.path, newVal, newPriority, deferred.wrapCallback(onComplete));
            return deferred.promise;
        };
        Reference.prototype.remove = function (onComplete) {
            validateArgCount('Reference.remove', 0, 1, arguments.length);
            validateWritablePath('Reference.remove', this.path);
            validateCallback('Reference.remove', 1, onComplete, true);
            return this.set(null, onComplete);
        };
        Reference.prototype.transaction = function (transactionUpdate, onComplete, applyLocally) {
            validateArgCount('Reference.transaction', 1, 3, arguments.length);
            validateWritablePath('Reference.transaction', this.path);
            validateCallback('Reference.transaction', 1, transactionUpdate, false);
            validateCallback('Reference.transaction', 2, onComplete, true);
            // NOTE: applyLocally is an internal-only option for now.  We need to decide if we want to keep it and how
            // to expose it.
            validateBoolean('Reference.transaction', 3, applyLocally, true);
            if (this.getKey() === '.length' || this.getKey() === '.keys') {
                throw ('Reference.transaction failed: ' +
                    this.getKey() +
                    ' is a read-only object.');
            }
            if (applyLocally === undefined) {
                applyLocally = true;
            }
            var deferred = new Deferred();
            if (typeof onComplete === 'function') {
                deferred.promise.catch(function () { });
            }
            var promiseComplete = function (error, committed, snapshot) {
                if (error) {
                    deferred.reject(error);
                }
                else {
                    deferred.resolve(new TransactionResult(committed, snapshot));
                }
                if (typeof onComplete === 'function') {
                    onComplete(error, committed, snapshot);
                }
            };
            repoStartTransaction(this.repo, this.path, transactionUpdate, promiseComplete, applyLocally);
            return deferred.promise;
        };
        Reference.prototype.setPriority = function (priority, onComplete) {
            validateArgCount('Reference.setPriority', 1, 2, arguments.length);
            validateWritablePath('Reference.setPriority', this.path);
            validatePriority('Reference.setPriority', 1, priority, false);
            validateCallback('Reference.setPriority', 2, onComplete, true);
            var deferred = new Deferred();
            repoSetWithPriority(this.repo, pathChild(this.path, '.priority'), priority, null, deferred.wrapCallback(onComplete));
            return deferred.promise;
        };
        Reference.prototype.push = function (value, onComplete) {
            validateArgCount('Reference.push', 0, 2, arguments.length);
            validateWritablePath('Reference.push', this.path);
            validateFirebaseDataArg('Reference.push', 1, value, this.path, true);
            validateCallback('Reference.push', 2, onComplete, true);
            var now = repoServerTime(this.repo);
            var name = nextPushId(now);
            // push() returns a ThennableReference whose promise is fulfilled with a regular Reference.
            // We use child() to create handles to two different references. The first is turned into a
            // ThennableReference below by adding then() and catch() methods and is used as the
            // return value of push(). The second remains a regular Reference and is used as the fulfilled
            // value of the first ThennableReference.
            var thennablePushRef = this.child(name);
            var pushRef = this.child(name);
            var promise;
            if (value != null) {
                promise = thennablePushRef.set(value, onComplete).then(function () { return pushRef; });
            }
            else {
                promise = Promise.resolve(pushRef);
            }
            thennablePushRef.then = promise.then.bind(promise);
            thennablePushRef.catch = promise.then.bind(promise, undefined);
            if (typeof onComplete === 'function') {
                promise.catch(function () { });
            }
            return thennablePushRef;
        };
        Reference.prototype.onDisconnect = function () {
            validateWritablePath('Reference.onDisconnect', this.path);
            return new OnDisconnect(this.repo, this.path);
        };
        Object.defineProperty(Reference.prototype, "database", {
            get: function () {
                return this.databaseProp();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Reference.prototype, "key", {
            get: function () {
                return this.getKey();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Reference.prototype, "parent", {
            get: function () {
                return this.getParent();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Reference.prototype, "root", {
            get: function () {
                return this.getRoot();
            },
            enumerable: false,
            configurable: true
        });
        return Reference;
    }(Query));
    /**
     * Define reference constructor in various modules
     *
     * We are doing this here to avoid several circular
     * dependency issues
     */
    Query.__referenceConstructor = Reference;
    SyncPoint.__referenceConstructor = Reference;

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Class representing a firebase database.
     */
    var Database = /** @class */ (function () {
        /**
         * The constructor should not be called by users of our public API.
         */
        function Database(repoInternal_) {
            var _this = this;
            this.repoInternal_ = repoInternal_;
            /** Track if the instance has been used (root or repo accessed) */
            this.instanceStarted_ = false;
            this.INTERNAL = {
                delete: function () { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        this.checkDeleted_('delete');
                        RepoManager.getInstance().deleteRepo(this.repo_);
                        this.repoInternal_ = null;
                        this.rootInternal_ = null;
                        return [2 /*return*/];
                    });
                }); }
            };
            if (!(repoInternal_ instanceof Repo)) {
                fatal("Don't call new Database() directly - please use firebase.database().");
            }
        }
        Object.defineProperty(Database.prototype, "repo_", {
            get: function () {
                if (!this.instanceStarted_) {
                    repoStart(this.repoInternal_);
                    this.instanceStarted_ = true;
                }
                return this.repoInternal_;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Database.prototype, "root_", {
            get: function () {
                if (!this.rootInternal_) {
                    this.rootInternal_ = new Reference(this.repo_, newEmptyPath());
                }
                return this.rootInternal_;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Database.prototype, "app", {
            get: function () {
                return this.repo_.app;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Modify this instance to communicate with the Realtime Database emulator.
         *
         * <p>Note: This method must be called before performing any other operation.
         *
         * @param host the emulator host (ex: localhost)
         * @param port the emulator port (ex: 8080)
         */
        Database.prototype.useEmulator = function (host, port) {
            this.checkDeleted_('useEmulator');
            if (this.instanceStarted_) {
                fatal('Cannot call useEmulator() after instance has already been initialized.');
                return;
            }
            // Modify the repo to apply emulator settings
            RepoManager.getInstance().applyEmulatorSettings(this.repoInternal_, host, port);
        };
        Database.prototype.ref = function (path) {
            this.checkDeleted_('ref');
            validateArgCount('database.ref', 0, 1, arguments.length);
            if (path instanceof Reference) {
                return this.refFromURL(path.toString());
            }
            return path !== undefined ? this.root_.child(path) : this.root_;
        };
        /**
         * Returns a reference to the root or the path specified in url.
         * We throw a exception if the url is not in the same domain as the
         * current repo.
         * @return Firebase reference.
         */
        Database.prototype.refFromURL = function (url) {
            /** @const {string} */
            var apiName = 'database.refFromURL';
            this.checkDeleted_(apiName);
            validateArgCount(apiName, 1, 1, arguments.length);
            var parsedURL = parseRepoInfo(url, this.repo_.repoInfo_.nodeAdmin);
            validateUrl(apiName, 1, parsedURL);
            var repoInfo = parsedURL.repoInfo;
            if (!this.repo_.repoInfo_.isCustomHost() &&
                repoInfo.host !== this.repo_.repoInfo_.host) {
                fatal(apiName +
                    ': Host name does not match the current database: ' +
                    '(found ' +
                    repoInfo.host +
                    ' but expected ' +
                    this.repo_.repoInfo_.host +
                    ')');
            }
            return this.ref(parsedURL.path.toString());
        };
        Database.prototype.checkDeleted_ = function (apiName) {
            if (this.repoInternal_ === null) {
                fatal('Cannot call ' + apiName + ' on a deleted database.');
            }
        };
        // Make individual repo go offline.
        Database.prototype.goOffline = function () {
            validateArgCount('database.goOffline', 0, 0, arguments.length);
            this.checkDeleted_('goOffline');
            repoInterrupt(this.repo_);
        };
        Database.prototype.goOnline = function () {
            validateArgCount('database.goOnline', 0, 0, arguments.length);
            this.checkDeleted_('goOnline');
            repoResume(this.repo_);
        };
        Database.ServerValue = {
            TIMESTAMP: {
                '.sv': 'timestamp'
            },
            increment: function (delta) {
                return {
                    '.sv': {
                        'increment': delta
                    }
                };
            }
        };
        return Database;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Node in a Tree.
     */
    var TreeNode = /** @class */ (function () {
        function TreeNode() {
            // TODO: Consider making accessors that create children and value lazily or
            // separate Internal / Leaf 'types'.
            this.children = {};
            this.childCount = 0;
            this.value = null;
        }
        return TreeNode;
    }());
    /**
     * A light-weight tree, traversable by path.  Nodes can have both values and children.
     * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty
     * children.
     */
    var Tree = /** @class */ (function () {
        /**
         * @param name_ Optional name of the node.
         * @param parent_ Optional parent node.
         * @param node_ Optional node to wrap.
         */
        function Tree(name_, parent_, node_) {
            if (name_ === void 0) { name_ = ''; }
            if (parent_ === void 0) { parent_ = null; }
            if (node_ === void 0) { node_ = new TreeNode(); }
            this.name_ = name_;
            this.parent_ = parent_;
            this.node_ = node_;
        }
        /**
         * Returns a sub-Tree for the given path.
         *
         * @param pathObj Path to look up.
         * @return Tree for path.
         */
        Tree.prototype.subTree = function (pathObj) {
            // TODO: Require pathObj to be Path?
            var path = pathObj instanceof Path ? pathObj : new Path(pathObj);
            var child = this, next = pathGetFront(path);
            while (next !== null) {
                var childNode = safeGet(child.node_.children, next) || new TreeNode();
                child = new Tree(next, child, childNode);
                path = pathPopFront(path);
                next = pathGetFront(path);
            }
            return child;
        };
        /**
         * Returns the data associated with this tree node.
         *
         * @return The data or null if no data exists.
         */
        Tree.prototype.getValue = function () {
            return this.node_.value;
        };
        /**
         * Sets data to this tree node.
         *
         * @param value Value to set.
         */
        Tree.prototype.setValue = function (value) {
            assert(typeof value !== 'undefined', 'Cannot set value to undefined');
            this.node_.value = value;
            this.updateParents_();
        };
        /**
         * Clears the contents of the tree node (its value and all children).
         */
        Tree.prototype.clear = function () {
            this.node_.value = null;
            this.node_.children = {};
            this.node_.childCount = 0;
            this.updateParents_();
        };
        /**
         * @return Whether the tree has any children.
         */
        Tree.prototype.hasChildren = function () {
            return this.node_.childCount > 0;
        };
        /**
         * @return Whethe rthe tree is empty (no value or children).
         */
        Tree.prototype.isEmpty = function () {
            return this.getValue() === null && !this.hasChildren();
        };
        /**
         * Calls action for each child of this tree node.
         *
         * @param action Action to be called for each child.
         */
        Tree.prototype.forEachChild = function (action) {
            var _this = this;
            each(this.node_.children, function (child, childTree) {
                action(new Tree(child, _this, childTree));
            });
        };
        /**
         * Does a depth-first traversal of this node's descendants, calling action for each one.
         *
         * @param action Action to be called for each child.
         * @param includeSelf Whether to call action on this node as well. Defaults to
         *   false.
         * @param childrenFirst Whether to call action on children before calling it on
         *   parent.
         */
        Tree.prototype.forEachDescendant = function (action, includeSelf, childrenFirst) {
            if (includeSelf && !childrenFirst) {
                action(this);
            }
            this.forEachChild(function (child) {
                child.forEachDescendant(action, /*includeSelf=*/ true, childrenFirst);
            });
            if (includeSelf && childrenFirst) {
                action(this);
            }
        };
        /**
         * Calls action on each ancestor node.
         *
         * @param action Action to be called on each parent; return
         *   true to abort.
         * @param includeSelf Whether to call action on this node as well.
         * @return true if the action callback returned true.
         */
        Tree.prototype.forEachAncestor = function (action, includeSelf) {
            var node = includeSelf ? this : this.parent();
            while (node !== null) {
                if (action(node)) {
                    return true;
                }
                node = node.parent();
            }
            return false;
        };
        /**
         * Does a depth-first traversal of this node's descendants.  When a descendant with a value
         * is found, action is called on it and traversal does not continue inside the node.
         * Action is *not* called on this node.
         *
         * @param action Action to be called for each child.
         */
        Tree.prototype.forEachImmediateDescendantWithValue = function (action) {
            this.forEachChild(function (child) {
                if (child.getValue() !== null) {
                    action(child);
                }
                else {
                    child.forEachImmediateDescendantWithValue(action);
                }
            });
        };
        /**
         * @return The path of this tree node, as a Path.
         */
        Tree.prototype.path = function () {
            return new Path(this.parent_ === null
                ? this.name_
                : this.parent_.path() + '/' + this.name_);
        };
        /**
         * @return The name of the tree node.
         */
        Tree.prototype.name = function () {
            return this.name_;
        };
        /**
         * @return The parent tree node, or null if this is the root of the tree.
         */
        Tree.prototype.parent = function () {
            return this.parent_;
        };
        /**
         * Adds or removes this child from its parent based on whether it's empty or not.
         */
        Tree.prototype.updateParents_ = function () {
            if (this.parent_ !== null) {
                this.parent_.updateChild_(this.name_, this);
            }
        };
        /**
         * Adds or removes the passed child to this tree node, depending on whether it's empty.
         *
         * @param childName The name of the child to update.
         * @param child The child to update.
         */
        Tree.prototype.updateChild_ = function (childName, child) {
            var childEmpty = child.isEmpty();
            var childExists = contains(this.node_.children, childName);
            if (childEmpty && childExists) {
                delete this.node_.children[childName];
                this.node_.childCount--;
                this.updateParents_();
            }
            else if (!childEmpty && !childExists) {
                this.node_.children[childName] = child.node_;
                this.node_.childCount++;
                this.updateParents_();
            }
        };
        return Tree;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var INTERRUPT_REASON = 'repo_interrupt';
    /**
     * If a transaction does not succeed after 25 retries, we abort it. Among other
     * things this ensure that if there's ever a bug causing a mismatch between
     * client / server hashes for some data, we won't retry indefinitely.
     */
    var MAX_TRANSACTION_RETRIES = 25;
    /**
     * A connection to a single data repository.
     */
    var Repo = /** @class */ (function () {
        function Repo(repoInfo_, forceRestClient_, app, authTokenProvider_) {
            this.repoInfo_ = repoInfo_;
            this.forceRestClient_ = forceRestClient_;
            this.app = app;
            this.authTokenProvider_ = authTokenProvider_;
            this.dataUpdateCount = 0;
            this.statsListener_ = null;
            this.eventQueue_ = new EventQueue();
            this.nextWriteId_ = 1;
            this.interceptServerDataCallback_ = null;
            /** A list of data pieces and paths to be set when this client disconnects. */
            this.onDisconnect_ = new SparseSnapshotTree();
            /** Stores queues of outstanding transactions for Firebase locations. */
            this.transactionQueueTree_ = new Tree();
            // TODO: This should be @private but it's used by test_access.js and internal.js
            this.persistentConnection_ = null;
            // This key is intentionally not updated if RepoInfo is later changed or replaced
            this.key = this.repoInfo_.toURLString();
        }
        /**
         * @return The URL corresponding to the root of this Firebase.
         */
        Repo.prototype.toString = function () {
            return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);
        };
        return Repo;
    }());
    function repoStart(repo) {
        repo.stats_ = StatsManager.getCollection(repo.repoInfo_);
        if (repo.forceRestClient_ || beingCrawled()) {
            repo.server_ = new ReadonlyRestClient(repo.repoInfo_, function (pathString, data, isMerge, tag) {
                repoOnDataUpdate(repo, pathString, data, isMerge, tag);
            }, repo.authTokenProvider_);
            // Minor hack: Fire onConnect immediately, since there's no actual connection.
            setTimeout(function () { return repoOnConnectStatus(repo, /* connectStatus= */ true); }, 0);
        }
        else {
            var authOverride = repo.app.options['databaseAuthVariableOverride'];
            // Validate authOverride
            if (typeof authOverride !== 'undefined' && authOverride !== null) {
                if (typeof authOverride !== 'object') {
                    throw new Error('Only objects are supported for option databaseAuthVariableOverride');
                }
                try {
                    stringify(authOverride);
                }
                catch (e) {
                    throw new Error('Invalid authOverride provided: ' + e);
                }
            }
            repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, repo.app.options.appId, function (pathString, data, isMerge, tag) {
                repoOnDataUpdate(repo, pathString, data, isMerge, tag);
            }, function (connectStatus) {
                repoOnConnectStatus(repo, connectStatus);
            }, function (updates) {
                repoOnServerInfoUpdate(repo, updates);
            }, repo.authTokenProvider_, authOverride);
            repo.server_ = repo.persistentConnection_;
        }
        repo.authTokenProvider_.addTokenChangeListener(function (token) {
            repo.server_.refreshAuthToken(token);
        });
        // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),
        // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.
        repo.statsReporter_ = StatsManager.getOrCreateReporter(repo.repoInfo_, function () { return new StatsReporter(repo.stats_, repo.server_); });
        // Used for .info.
        repo.infoData_ = new SnapshotHolder();
        repo.infoSyncTree_ = new SyncTree({
            startListening: function (query, tag, currentHashFn, onComplete) {
                var infoEvents = [];
                var node = repo.infoData_.getNode(query.path);
                // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events
                // on initial data...
                if (!node.isEmpty()) {
                    infoEvents = repo.infoSyncTree_.applyServerOverwrite(query.path, node);
                    setTimeout(function () {
                        onComplete('ok');
                    }, 0);
                }
                return infoEvents;
            },
            stopListening: function () { }
        });
        repoUpdateInfo(repo, 'connected', false);
        repo.serverSyncTree_ = new SyncTree({
            startListening: function (query, tag, currentHashFn, onComplete) {
                repo.server_.listen(query, currentHashFn, tag, function (status, data) {
                    var events = onComplete(status, data);
                    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query.path, events);
                });
                // No synchronous events for network-backed sync trees
                return [];
            },
            stopListening: function (query, tag) {
                repo.server_.unlisten(query, tag);
            }
        });
    }
    /**
     * @return The time in milliseconds, taking the server offset into account if we have one.
     */
    function repoServerTime(repo) {
        var offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));
        var offset = offsetNode.val() || 0;
        return new Date().getTime() + offset;
    }
    /**
     * Generate ServerValues using some variables from the repo object.
     */
    function repoGenerateServerValues(repo) {
        return generateWithValues({
            timestamp: repoServerTime(repo)
        });
    }
    /**
     * Called by realtime when we get new messages from the server.
     */
    function repoOnDataUpdate(repo, pathString, data, isMerge, tag) {
        // For testing.
        repo.dataUpdateCount++;
        var path = new Path(pathString);
        data = repo.interceptServerDataCallback_
            ? repo.interceptServerDataCallback_(pathString, data)
            : data;
        var events = [];
        if (tag) {
            if (isMerge) {
                var taggedChildren = map(data, function (raw) { return nodeFromJSON$1(raw); });
                events = repo.serverSyncTree_.applyTaggedQueryMerge(path, taggedChildren, tag);
            }
            else {
                var taggedSnap = nodeFromJSON$1(data);
                events = repo.serverSyncTree_.applyTaggedQueryOverwrite(path, taggedSnap, tag);
            }
        }
        else if (isMerge) {
            var changedChildren = map(data, function (raw) { return nodeFromJSON$1(raw); });
            events = repo.serverSyncTree_.applyServerMerge(path, changedChildren);
        }
        else {
            var snap = nodeFromJSON$1(data);
            events = repo.serverSyncTree_.applyServerOverwrite(path, snap);
        }
        var affectedPath = path;
        if (events.length > 0) {
            // Since we have a listener outstanding for each transaction, receiving any events
            // is a proxy for some change having occurred.
            affectedPath = repoRerunTransactions(repo, path);
        }
        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);
    }
    function repoOnConnectStatus(repo, connectStatus) {
        repoUpdateInfo(repo, 'connected', connectStatus);
        if (connectStatus === false) {
            repoRunOnDisconnectEvents(repo);
        }
    }
    function repoOnServerInfoUpdate(repo, updates) {
        each(updates, function (key, value) {
            repoUpdateInfo(repo, key, value);
        });
    }
    function repoUpdateInfo(repo, pathString, value) {
        var path = new Path('/.info/' + pathString);
        var newNode = nodeFromJSON$1(value);
        repo.infoData_.updateSnapshot(path, newNode);
        var events = repo.infoSyncTree_.applyServerOverwrite(path, newNode);
        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);
    }
    function repoGetNextWriteId(repo) {
        return repo.nextWriteId_++;
    }
    /**
     * The purpose of `getValue` is to return the latest known value
     * satisfying `query`.
     *
     * This method will first check for in-memory cached values
     * belonging to active listeners. If they are found, such values
     * are considered to be the most up-to-date.
     *
     * If the client is not connected, this method will try to
     * establish a connection and request the value for `query`. If
     * the client is not able to retrieve the query result, it reports
     * an error.
     *
     * @param query - The query to surface a value for.
     */
    function repoGetValue(repo, query) {
        // Only active queries are cached. There is no persisted cache.
        var cached = repo.serverSyncTree_.getServerValue(query);
        if (cached != null) {
            return Promise.resolve(new DataSnapshot(cached, query.getRef(), query.getQueryParams().getIndex()));
        }
        return repo.server_.get(query).then(function (payload) {
            var node = nodeFromJSON$1(payload);
            var events = repo.serverSyncTree_.applyServerOverwrite(query.path, node);
            eventQueueRaiseEventsAtPath(repo.eventQueue_, query.path, events);
            return Promise.resolve(new DataSnapshot(node, query.getRef(), query.getQueryParams().getIndex()));
        }, function (err) {
            repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);
            return Promise.reject(new Error(err));
        });
    }
    function repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {
        repoLog(repo, 'set', {
            path: path.toString(),
            value: newVal,
            priority: newPriority
        });
        // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or
        // (b) store unresolved paths on JSON parse
        var serverValues = repoGenerateServerValues(repo);
        var newNodeUnresolved = nodeFromJSON$1(newVal, newPriority);
        var existing = repo.serverSyncTree_.calcCompleteEventCache(path);
        var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);
        var writeId = repoGetNextWriteId(repo);
        var events = repo.serverSyncTree_.applyUserOverwrite(path, newNode, writeId, true);
        eventQueueQueueEvents(repo.eventQueue_, events);
        repo.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), function (status, errorReason) {
            var success = status === 'ok';
            if (!success) {
                warn('set at ' + path + ' failed: ' + status);
            }
            var clearEvents = repo.serverSyncTree_.ackUserWrite(writeId, !success);
            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);
            repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
        });
        var affectedPath = repoAbortTransactions(repo, path);
        repoRerunTransactions(repo, affectedPath);
        // We queued the events above, so just flush the queue here
        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);
    }
    function repoUpdate(repo, path, childrenToMerge, onComplete) {
        repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });
        // Start with our existing data and merge each child into it.
        var empty = true;
        var serverValues = repoGenerateServerValues(repo);
        var changedChildren = {};
        each(childrenToMerge, function (changedKey, changedValue) {
            empty = false;
            changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON$1(changedValue), repo.serverSyncTree_, serverValues);
        });
        if (!empty) {
            var writeId_1 = repoGetNextWriteId(repo);
            var events = repo.serverSyncTree_.applyUserMerge(path, changedChildren, writeId_1);
            eventQueueQueueEvents(repo.eventQueue_, events);
            repo.server_.merge(path.toString(), childrenToMerge, function (status, errorReason) {
                var success = status === 'ok';
                if (!success) {
                    warn('update at ' + path + ' failed: ' + status);
                }
                var clearEvents = repo.serverSyncTree_.ackUserWrite(writeId_1, !success);
                var affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;
                eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);
                repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
            });
            each(childrenToMerge, function (changedPath) {
                var affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));
                repoRerunTransactions(repo, affectedPath);
            });
            // We queued the events above, so just flush the queue here
            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);
        }
        else {
            log("update() called with empty data.  Don't do anything.");
            repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);
        }
    }
    /**
     * Applies all of the changes stored up in the onDisconnect_ tree.
     */
    function repoRunOnDisconnectEvents(repo) {
        repoLog(repo, 'onDisconnectEvents');
        var serverValues = repoGenerateServerValues(repo);
        var resolvedOnDisconnectTree = new SparseSnapshotTree();
        repo.onDisconnect_.forEachTree(newEmptyPath(), function (path, node) {
            var resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);
            resolvedOnDisconnectTree.remember(path, resolved);
        });
        var events = [];
        resolvedOnDisconnectTree.forEachTree(newEmptyPath(), function (path, snap) {
            events = events.concat(repo.serverSyncTree_.applyServerOverwrite(path, snap));
            var affectedPath = repoAbortTransactions(repo, path);
            repoRerunTransactions(repo, affectedPath);
        });
        repo.onDisconnect_ = new SparseSnapshotTree();
        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);
    }
    function repoOnDisconnectCancel(repo, path, onComplete) {
        repo.server_.onDisconnectCancel(path.toString(), function (status, errorReason) {
            if (status === 'ok') {
                repo.onDisconnect_.forget(path);
            }
            repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
        });
    }
    function repoOnDisconnectSet(repo, path, value, onComplete) {
        var newNode = nodeFromJSON$1(value);
        repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), function (status, errorReason) {
            if (status === 'ok') {
                repo.onDisconnect_.remember(path, newNode);
            }
            repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
        });
    }
    function repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {
        var newNode = nodeFromJSON$1(value, priority);
        repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), function (status, errorReason) {
            if (status === 'ok') {
                repo.onDisconnect_.remember(path, newNode);
            }
            repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
        });
    }
    function repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {
        if (isEmpty(childrenToMerge)) {
            log("onDisconnect().update() called with empty data.  Don't do anything.");
            repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);
            return;
        }
        repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, function (status, errorReason) {
            if (status === 'ok') {
                each(childrenToMerge, function (childName, childNode) {
                    var newChildNode = nodeFromJSON$1(childNode);
                    repo.onDisconnect_.remember(pathChild(path, childName), newChildNode);
                });
            }
            repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
        });
    }
    function repoAddEventCallbackForQuery(repo, query, eventRegistration) {
        var events;
        if (pathGetFront(query.path) === '.info') {
            events = repo.infoSyncTree_.addEventRegistration(query, eventRegistration);
        }
        else {
            events = repo.serverSyncTree_.addEventRegistration(query, eventRegistration);
        }
        eventQueueRaiseEventsAtPath(repo.eventQueue_, query.path, events);
    }
    function repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {
        // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof
        // a little bit by handling the return values anyways.
        var events;
        if (pathGetFront(query.path) === '.info') {
            events = repo.infoSyncTree_.removeEventRegistration(query, eventRegistration);
        }
        else {
            events = repo.serverSyncTree_.removeEventRegistration(query, eventRegistration);
        }
        eventQueueRaiseEventsAtPath(repo.eventQueue_, query.path, events);
    }
    function repoInterrupt(repo) {
        if (repo.persistentConnection_) {
            repo.persistentConnection_.interrupt(INTERRUPT_REASON);
        }
    }
    function repoResume(repo) {
        if (repo.persistentConnection_) {
            repo.persistentConnection_.resume(INTERRUPT_REASON);
        }
    }
    function repoLog(repo) {
        var varArgs = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            varArgs[_i - 1] = arguments[_i];
        }
        var prefix = '';
        if (repo.persistentConnection_) {
            prefix = repo.persistentConnection_.id + ':';
        }
        log.apply(void 0, __spread([prefix], varArgs));
    }
    function repoCallOnCompleteCallback(repo, callback, status, errorReason) {
        if (callback) {
            exceptionGuard(function () {
                if (status === 'ok') {
                    callback(null);
                }
                else {
                    var code = (status || 'error').toUpperCase();
                    var message = code;
                    if (errorReason) {
                        message += ': ' + errorReason;
                    }
                    var error = new Error(message);
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    error.code = code;
                    callback(error);
                }
            });
        }
    }
    function repoGetDatabase(repo) {
        return repo.__database || (repo.__database = new Database(repo));
    }
    /**
     * Creates a new transaction, adds it to the transactions we're tracking, and
     * sends it to the server if possible.
     *
     * @param path Path at which to do transaction.
     * @param transactionUpdate Update callback.
     * @param onComplete Completion callback.
     * @param applyLocally Whether or not to make intermediate results visible
     */
    function repoStartTransaction(repo, path, transactionUpdate, onComplete, applyLocally) {
        repoLog(repo, 'transaction on ' + path);
        // Add a watch to make sure we get server updates.
        var valueCallback = function () { };
        var watchRef = new Reference(repo, path);
        watchRef.on('value', valueCallback);
        var unwatcher = function () {
            watchRef.off('value', valueCallback);
        };
        // Initialize transaction.
        var transaction = {
            path: path,
            update: transactionUpdate,
            onComplete: onComplete,
            // One of TransactionStatus enums.
            status: null,
            // Used when combining transactions at different locations to figure out
            // which one goes first.
            order: LUIDGenerator(),
            // Whether to raise local events for this transaction.
            applyLocally: applyLocally,
            // Count of how many times we've retried the transaction.
            retryCount: 0,
            // Function to call to clean up our .on() listener.
            unwatcher: unwatcher,
            // Stores why a transaction was aborted.
            abortReason: null,
            currentWriteId: null,
            currentInputSnapshot: null,
            currentOutputSnapshotRaw: null,
            currentOutputSnapshotResolved: null
        };
        // Run transaction initially.
        var currentState = repoGetLatestState(repo, path, undefined);
        transaction.currentInputSnapshot = currentState;
        var newVal = transaction.update(currentState.val());
        if (newVal === undefined) {
            // Abort transaction.
            transaction.unwatcher();
            transaction.currentOutputSnapshotRaw = null;
            transaction.currentOutputSnapshotResolved = null;
            if (transaction.onComplete) {
                // We just set the input snapshot, so this cast should be safe
                var snapshot = new DataSnapshot(transaction.currentInputSnapshot, new Reference(repo, transaction.path), PRIORITY_INDEX);
                transaction.onComplete(null, false, snapshot);
            }
        }
        else {
            validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);
            // Mark as run and add to our queue.
            transaction.status = 0 /* RUN */;
            var queueNode = repo.transactionQueueTree_.subTree(path);
            var nodeQueue = queueNode.getValue() || [];
            nodeQueue.push(transaction);
            queueNode.setValue(nodeQueue);
            // Update visibleData and raise events
            // Note: We intentionally raise events after updating all of our
            // transaction state, since the user could start new transactions from the
            // event callbacks.
            var priorityForNode = void 0;
            if (typeof newVal === 'object' &&
                newVal !== null &&
                contains(newVal, '.priority')) {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                priorityForNode = safeGet(newVal, '.priority');
                assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +
                    'Priority must be a valid string, finite number, server value, or null.');
            }
            else {
                var currentNode = repo.serverSyncTree_.calcCompleteEventCache(path) ||
                    ChildrenNode.EMPTY_NODE;
                priorityForNode = currentNode.getPriority().val();
            }
            var serverValues = repoGenerateServerValues(repo);
            var newNodeUnresolved = nodeFromJSON$1(newVal, priorityForNode);
            var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);
            transaction.currentOutputSnapshotRaw = newNodeUnresolved;
            transaction.currentOutputSnapshotResolved = newNode;
            transaction.currentWriteId = repoGetNextWriteId(repo);
            var events = repo.serverSyncTree_.applyUserOverwrite(path, newNode, transaction.currentWriteId, transaction.applyLocally);
            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);
            repoSendReadyTransactions(repo, repo.transactionQueueTree_);
        }
    }
    /**
     * @param excludeSets A specific set to exclude
     */
    function repoGetLatestState(repo, path, excludeSets) {
        return (repo.serverSyncTree_.calcCompleteEventCache(path, excludeSets) ||
            ChildrenNode.EMPTY_NODE);
    }
    /**
     * Sends any already-run transactions that aren't waiting for outstanding
     * transactions to complete.
     *
     * Externally it's called with no arguments, but it calls itself recursively
     * with a particular transactionQueueTree node to recurse through the tree.
     *
     * @param node transactionQueueTree node to start at.
     */
    function repoSendReadyTransactions(repo, node) {
        if (node === void 0) { node = repo.transactionQueueTree_; }
        // Before recursing, make sure any completed transactions are removed.
        if (!node) {
            repoPruneCompletedTransactionsBelowNode(repo, node);
        }
        if (node.getValue() !== null) {
            var queue = repoBuildTransactionQueue(repo, node);
            assert(queue.length > 0, 'Sending zero length transaction queue');
            var allRun = queue.every(function (transaction) { return transaction.status === 0 /* RUN */; });
            // If they're all run (and not sent), we can send them.  Else, we must wait.
            if (allRun) {
                repoSendTransactionQueue(repo, node.path(), queue);
            }
        }
        else if (node.hasChildren()) {
            node.forEachChild(function (childNode) {
                repoSendReadyTransactions(repo, childNode);
            });
        }
    }
    /**
     * Given a list of run transactions, send them to the server and then handle
     * the result (success or failure).
     *
     * @param path The location of the queue.
     * @param queue Queue of transactions under the specified location.
     */
    function repoSendTransactionQueue(repo, path, queue) {
        // Mark transactions as sent and increment retry count!
        var setsToIgnore = queue.map(function (txn) {
            return txn.currentWriteId;
        });
        var latestState = repoGetLatestState(repo, path, setsToIgnore);
        var snapToSend = latestState;
        var latestHash = latestState.hash();
        for (var i = 0; i < queue.length; i++) {
            var txn = queue[i];
            assert(txn.status === 0 /* RUN */, 'tryToSendTransactionQueue_: items in queue should all be run.');
            txn.status = 1 /* SENT */;
            txn.retryCount++;
            var relativePath = newRelativePath(path, txn.path);
            // If we've gotten to this point, the output snapshot must be defined.
            snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */, txn.currentOutputSnapshotRaw);
        }
        var dataToSend = snapToSend.val(true);
        var pathToSend = path;
        // Send the put.
        repo.server_.put(pathToSend.toString(), dataToSend, function (status) {
            repoLog(repo, 'transaction put response', {
                path: pathToSend.toString(),
                status: status
            });
            var events = [];
            if (status === 'ok') {
                // Queue up the callbacks and fire them after cleaning up all of our
                // transaction state, since the callback could trigger more
                // transactions or sets.
                var callbacks = [];
                for (var i = 0; i < queue.length; i++) {
                    queue[i].status = 2 /* COMPLETED */;
                    events = events.concat(repo.serverSyncTree_.ackUserWrite(queue[i].currentWriteId));
                    if (queue[i].onComplete) {
                        // We never unset the output snapshot, and given that this
                        // transaction is complete, it should be set
                        var node = queue[i].currentOutputSnapshotResolved;
                        var ref = new Reference(repo, queue[i].path);
                        var snapshot = new DataSnapshot(node, ref, PRIORITY_INDEX);
                        callbacks.push(queue[i].onComplete.bind(null, null, true, snapshot));
                    }
                    queue[i].unwatcher();
                }
                // Now remove the completed transactions.
                repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_.subTree(path));
                // There may be pending transactions that we can now send.
                repoSendReadyTransactions(repo, repo.transactionQueueTree_);
                eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);
                // Finally, trigger onComplete callbacks.
                for (var i = 0; i < callbacks.length; i++) {
                    exceptionGuard(callbacks[i]);
                }
            }
            else {
                // transactions are no longer sent.  Update their status appropriately.
                if (status === 'datastale') {
                    for (var i = 0; i < queue.length; i++) {
                        if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) {
                            queue[i].status = 4 /* NEEDS_ABORT */;
                        }
                        else {
                            queue[i].status = 0 /* RUN */;
                        }
                    }
                }
                else {
                    warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);
                    for (var i = 0; i < queue.length; i++) {
                        queue[i].status = 4 /* NEEDS_ABORT */;
                        queue[i].abortReason = status;
                    }
                }
                repoRerunTransactions(repo, path);
            }
        }, latestHash);
    }
    /**
     * Finds all transactions dependent on the data at changedPath and reruns them.
     *
     * Should be called any time cached data changes.
     *
     * Return the highest path that was affected by rerunning transactions. This
     * is the path at which events need to be raised for.
     *
     * @param changedPath The path in mergedData that changed.
     * @return The rootmost path that was affected by rerunning transactions.
     */
    function repoRerunTransactions(repo, changedPath) {
        var rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);
        var path = rootMostTransactionNode.path();
        var queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);
        repoRerunTransactionQueue(repo, queue, path);
        return path;
    }
    /**
     * Does all the work of rerunning transactions (as well as cleans up aborted
     * transactions and whatnot).
     *
     * @param queue The queue of transactions to run.
     * @param path The path the queue is for.
     */
    function repoRerunTransactionQueue(repo, queue, path) {
        if (queue.length === 0) {
            return; // Nothing to do!
        }
        // Queue up the callbacks and fire them after cleaning up all of our
        // transaction state, since the callback could trigger more transactions or
        // sets.
        var callbacks = [];
        var events = [];
        // Ignore all of the sets we're going to re-run.
        var txnsToRerun = queue.filter(function (q) {
            return q.status === 0 /* RUN */;
        });
        var setsToIgnore = txnsToRerun.map(function (q) {
            return q.currentWriteId;
        });
        for (var i = 0; i < queue.length; i++) {
            var transaction = queue[i];
            var relativePath = newRelativePath(path, transaction.path);
            var abortTransaction = false, abortReason = void 0;
            assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');
            if (transaction.status === 4 /* NEEDS_ABORT */) {
                abortTransaction = true;
                abortReason = transaction.abortReason;
                events = events.concat(repo.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));
            }
            else if (transaction.status === 0 /* RUN */) {
                if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {
                    abortTransaction = true;
                    abortReason = 'maxretry';
                    events = events.concat(repo.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));
                }
                else {
                    // This code reruns a transaction
                    var currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);
                    transaction.currentInputSnapshot = currentNode;
                    var newData = queue[i].update(currentNode.val());
                    if (newData !== undefined) {
                        validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);
                        var newDataNode = nodeFromJSON$1(newData);
                        var hasExplicitPriority = typeof newData === 'object' &&
                            newData != null &&
                            contains(newData, '.priority');
                        if (!hasExplicitPriority) {
                            // Keep the old priority if there wasn't a priority explicitly specified.
                            newDataNode = newDataNode.updatePriority(currentNode.getPriority());
                        }
                        var oldWriteId = transaction.currentWriteId;
                        var serverValues = repoGenerateServerValues(repo);
                        var newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);
                        transaction.currentOutputSnapshotRaw = newDataNode;
                        transaction.currentOutputSnapshotResolved = newNodeResolved;
                        transaction.currentWriteId = repoGetNextWriteId(repo);
                        // Mutates setsToIgnore in place
                        setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);
                        events = events.concat(repo.serverSyncTree_.applyUserOverwrite(transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));
                        events = events.concat(repo.serverSyncTree_.ackUserWrite(oldWriteId, true));
                    }
                    else {
                        abortTransaction = true;
                        abortReason = 'nodata';
                        events = events.concat(repo.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));
                    }
                }
            }
            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);
            events = [];
            if (abortTransaction) {
                // Abort.
                queue[i].status = 2 /* COMPLETED */;
                // Removing a listener can trigger pruning which can muck with
                // mergedData/visibleData (as it prunes data). So defer the unwatcher
                // until we're done.
                (function (unwatcher) {
                    setTimeout(unwatcher, Math.floor(0));
                })(queue[i].unwatcher);
                if (queue[i].onComplete) {
                    if (abortReason === 'nodata') {
                        var ref = new Reference(repo, queue[i].path);
                        // We set this field immediately, so it's safe to cast to an actual snapshot
                        var lastInput /** @type {!Node} */ = queue[i].currentInputSnapshot;
                        var snapshot = new DataSnapshot(lastInput, ref, PRIORITY_INDEX);
                        callbacks.push(queue[i].onComplete.bind(null, null, false, snapshot));
                    }
                    else {
                        callbacks.push(queue[i].onComplete.bind(null, new Error(abortReason), false, null));
                    }
                }
            }
        }
        // Clean up completed transactions.
        repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);
        // Now fire callbacks, now that we're in a good, known state.
        for (var i = 0; i < callbacks.length; i++) {
            exceptionGuard(callbacks[i]);
        }
        // Try to send the transaction result to the server.
        repoSendReadyTransactions(repo, repo.transactionQueueTree_);
    }
    /**
     * Returns the rootmost ancestor node of the specified path that has a pending
     * transaction on it, or just returns the node for the given path if there are
     * no pending transactions on any ancestor.
     *
     * @param path The location to start at.
     * @return The rootmost node with a transaction.
     */
    function repoGetAncestorTransactionNode(repo, path) {
        var front;
        // Start at the root and walk deeper into the tree towards path until we
        // find a node with pending transactions.
        var transactionNode = repo.transactionQueueTree_;
        front = pathGetFront(path);
        while (front !== null && transactionNode.getValue() === null) {
            transactionNode = transactionNode.subTree(front);
            path = pathPopFront(path);
            front = pathGetFront(path);
        }
        return transactionNode;
    }
    /**
     * Builds the queue of all transactions at or below the specified
     * transactionNode.
     *
     * @param transactionNode
     * @return The generated queue.
     */
    function repoBuildTransactionQueue(repo, transactionNode) {
        // Walk any child transaction queues and aggregate them into a single queue.
        var transactionQueue = [];
        repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue);
        // Sort them by the order the transactions were created.
        transactionQueue.sort(function (a, b) {
            return a.order - b.order;
        });
        return transactionQueue;
    }
    function repoAggregateTransactionQueuesForNode(repo, node, queue) {
        var nodeQueue = node.getValue();
        if (nodeQueue !== null) {
            for (var i = 0; i < nodeQueue.length; i++) {
                queue.push(nodeQueue[i]);
            }
        }
        node.forEachChild(function (child) {
            repoAggregateTransactionQueuesForNode(repo, child, queue);
        });
    }
    /**
     * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.
     */
    function repoPruneCompletedTransactionsBelowNode(repo, node) {
        var queue = node.getValue();
        if (queue) {
            var to = 0;
            for (var from = 0; from < queue.length; from++) {
                if (queue[from].status !== 2 /* COMPLETED */) {
                    queue[to] = queue[from];
                    to++;
                }
            }
            queue.length = to;
            node.setValue(queue.length > 0 ? queue : null);
        }
        node.forEachChild(function (childNode) {
            repoPruneCompletedTransactionsBelowNode(repo, childNode);
        });
    }
    /**
     * Aborts all transactions on ancestors or descendants of the specified path.
     * Called when doing a set() or update() since we consider them incompatible
     * with transactions.
     *
     * @param path Path for which we want to abort related transactions.
     */
    function repoAbortTransactions(repo, path) {
        var affectedPath = repoGetAncestorTransactionNode(repo, path).path();
        var transactionNode = repo.transactionQueueTree_.subTree(path);
        transactionNode.forEachAncestor(function (node) {
            repoAbortTransactionsOnNode(repo, node);
        });
        repoAbortTransactionsOnNode(repo, transactionNode);
        transactionNode.forEachDescendant(function (node) {
            repoAbortTransactionsOnNode(repo, node);
        });
        return affectedPath;
    }
    /**
     * Abort transactions stored in this transaction queue node.
     *
     * @param node Node to abort transactions for.
     */
    function repoAbortTransactionsOnNode(repo, node) {
        var queue = node.getValue();
        if (queue !== null) {
            // Queue up the callbacks and fire them after cleaning up all of our
            // transaction state, since the callback could trigger more transactions
            // or sets.
            var callbacks = [];
            // Go through queue.  Any already-sent transactions must be marked for
            // abort, while the unsent ones can be immediately aborted and removed.
            var events = [];
            var lastSent = -1;
            for (var i = 0; i < queue.length; i++) {
                if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) ;
                else if (queue[i].status === 1 /* SENT */) {
                    assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');
                    lastSent = i;
                    // Mark transaction for abort when it comes back.
                    queue[i].status = 3 /* SENT_NEEDS_ABORT */;
                    queue[i].abortReason = 'set';
                }
                else {
                    assert(queue[i].status === 0 /* RUN */, 'Unexpected transaction status in abort');
                    // We can abort it immediately.
                    queue[i].unwatcher();
                    events = events.concat(repo.serverSyncTree_.ackUserWrite(queue[i].currentWriteId, true));
                    if (queue[i].onComplete) {
                        var snapshot = null;
                        callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, snapshot));
                    }
                }
            }
            if (lastSent === -1) {
                // We're not waiting for any sent transactions.  We can clear the queue.
                node.setValue(null);
            }
            else {
                // Remove the transactions we aborted.
                queue.length = lastSent + 1;
            }
            // Now fire the callbacks.
            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, node.path(), events);
            for (var i = 0; i < callbacks.length; i++) {
                exceptionGuard(callbacks[i]);
            }
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Abstraction around FirebaseApp's token fetching capabilities.
     */
    var FirebaseAuthTokenProvider = /** @class */ (function () {
        function FirebaseAuthTokenProvider(app_, authProvider_) {
            var _this = this;
            this.app_ = app_;
            this.authProvider_ = authProvider_;
            this.auth_ = null;
            this.auth_ = authProvider_.getImmediate({ optional: true });
            if (!this.auth_) {
                authProvider_.get().then(function (auth) { return (_this.auth_ = auth); });
            }
        }
        FirebaseAuthTokenProvider.prototype.getToken = function (forceRefresh) {
            if (!this.auth_) {
                return Promise.resolve(null);
            }
            return this.auth_.getToken(forceRefresh).catch(function (error) {
                // TODO: Need to figure out all the cases this is raised and whether
                // this makes sense.
                if (error && error.code === 'auth/token-not-initialized') {
                    log('Got auth/token-not-initialized error.  Treating as null token.');
                    return null;
                }
                else {
                    return Promise.reject(error);
                }
            });
        };
        FirebaseAuthTokenProvider.prototype.addTokenChangeListener = function (listener) {
            // TODO: We might want to wrap the listener and call it with no args to
            // avoid a leaky abstraction, but that makes removing the listener harder.
            if (this.auth_) {
                this.auth_.addAuthTokenListener(listener);
            }
            else {
                setTimeout(function () { return listener(null); }, 0);
                this.authProvider_
                    .get()
                    .then(function (auth) { return auth.addAuthTokenListener(listener); });
            }
        };
        FirebaseAuthTokenProvider.prototype.removeTokenChangeListener = function (listener) {
            this.authProvider_
                .get()
                .then(function (auth) { return auth.removeAuthTokenListener(listener); });
        };
        FirebaseAuthTokenProvider.prototype.notifyForInvalidToken = function () {
            var errorMessage = 'Provided authentication credentials for the app named "' +
                this.app_.name +
                '" are invalid. This usually indicates your app was not ' +
                'initialized correctly. ';
            if ('credential' in this.app_.options) {
                errorMessage +=
                    'Make sure the "credential" property provided to initializeApp() ' +
                        'is authorized to access the specified "databaseURL" and is from the correct ' +
                        'project.';
            }
            else if ('serviceAccount' in this.app_.options) {
                errorMessage +=
                    'Make sure the "serviceAccount" property provided to initializeApp() ' +
                        'is authorized to access the specified "databaseURL" and is from the correct ' +
                        'project.';
            }
            else {
                errorMessage +=
                    'Make sure the "apiKey" and "databaseURL" properties provided to ' +
                        'initializeApp() match the values provided for your app at ' +
                        'https://console.firebase.google.com/.';
            }
            warn(errorMessage);
        };
        return FirebaseAuthTokenProvider;
    }());
    /* Auth token provider that the Admin SDK uses to connect to the Emulator. */
    var EmulatorAdminTokenProvider = /** @class */ (function () {
        function EmulatorAdminTokenProvider() {
        }
        EmulatorAdminTokenProvider.prototype.getToken = function (forceRefresh) {
            return Promise.resolve({
                accessToken: EmulatorAdminTokenProvider.EMULATOR_AUTH_TOKEN
            });
        };
        EmulatorAdminTokenProvider.prototype.addTokenChangeListener = function (listener) {
            // Invoke the listener immediately to match the behavior in Firebase Auth
            // (see packages/auth/src/auth.js#L1807)
            listener(EmulatorAdminTokenProvider.EMULATOR_AUTH_TOKEN);
        };
        EmulatorAdminTokenProvider.prototype.removeTokenChangeListener = function (listener) { };
        EmulatorAdminTokenProvider.prototype.notifyForInvalidToken = function () { };
        EmulatorAdminTokenProvider.EMULATOR_AUTH_TOKEN = 'owner';
        return EmulatorAdminTokenProvider;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * This variable is also defined in the firebase node.js admin SDK. Before
     * modifying this definition, consult the definition in:
     *
     * https://github.com/firebase/firebase-admin-node
     *
     * and make sure the two are consistent.
     */
    var FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';
    var _staticInstance;
    /**
     * Creates and caches Repo instances.
     */
    var RepoManager = /** @class */ (function () {
        function RepoManager() {
            this.repos_ = {};
            /**
             * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).
             */
            this.useRestClient_ = false;
        }
        RepoManager.getInstance = function () {
            if (!_staticInstance) {
                _staticInstance = new RepoManager();
            }
            return _staticInstance;
        };
        // TODO(koss): Remove these functions unless used in tests?
        RepoManager.prototype.interrupt = function () {
            var e_1, _a, e_2, _b;
            try {
                for (var _c = __values(Object.keys(this.repos_)), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var appName = _d.value;
                    try {
                        for (var _e = (e_2 = void 0, __values(Object.keys(this.repos_[appName]))), _f = _e.next(); !_f.done; _f = _e.next()) {
                            var dbUrl = _f.value;
                            repoInterrupt(this.repos_[appName][dbUrl]);
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        RepoManager.prototype.resume = function () {
            var e_3, _a, e_4, _b;
            try {
                for (var _c = __values(Object.keys(this.repos_)), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var appName = _d.value;
                    try {
                        for (var _e = (e_4 = void 0, __values(Object.keys(this.repos_[appName]))), _f = _e.next(); !_f.done; _f = _e.next()) {
                            var dbUrl = _f.value;
                            repoResume(this.repos_[appName][dbUrl]);
                        }
                    }
                    catch (e_4_1) { e_4 = { error: e_4_1 }; }
                    finally {
                        try {
                            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                        }
                        finally { if (e_4) throw e_4.error; }
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_3) throw e_3.error; }
            }
        };
        /**
         * Update an existing repo in place to point to a new host/port.
         */
        RepoManager.prototype.applyEmulatorSettings = function (repo, host, port) {
            repo.repoInfo_ = new RepoInfo(host + ":" + port, 
            /* secure= */ false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams);
            if (repo.repoInfo_.nodeAdmin) {
                repo.authTokenProvider_ = new EmulatorAdminTokenProvider();
            }
        };
        /**
         * This function should only ever be called to CREATE a new database instance.
         */
        RepoManager.prototype.databaseFromApp = function (app, authProvider, url, nodeAdmin) {
            var dbUrl = url || app.options.databaseURL;
            if (dbUrl === undefined) {
                if (!app.options.projectId) {
                    fatal("Can't determine Firebase Database URL. Be sure to include " +
                        ' a Project ID when calling firebase.initializeApp().');
                }
                log('Using default host for project ', app.options.projectId);
                dbUrl = app.options.projectId + "-default-rtdb.firebaseio.com";
            }
            var parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);
            var repoInfo = parsedUrl.repoInfo;
            var isEmulator;
            var dbEmulatorHost = undefined;
            if (typeof process !== 'undefined') {
                dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];
            }
            if (dbEmulatorHost) {
                isEmulator = true;
                dbUrl = "http://" + dbEmulatorHost + "?ns=" + repoInfo.namespace;
                parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);
                repoInfo = parsedUrl.repoInfo;
            }
            else {
                isEmulator = !parsedUrl.repoInfo.secure;
            }
            var authTokenProvider = nodeAdmin && isEmulator
                ? new EmulatorAdminTokenProvider()
                : new FirebaseAuthTokenProvider(app, authProvider);
            validateUrl('Invalid Firebase Database URL', 1, parsedUrl);
            if (!pathIsEmpty(parsedUrl.path)) {
                fatal('Database URL must point to the root of a Firebase Database ' +
                    '(not including a child path).');
            }
            var repo = this.createRepo(repoInfo, app, authTokenProvider);
            return repoGetDatabase(repo);
        };
        /**
         * Remove the repo and make sure it is disconnected.
         *
         */
        RepoManager.prototype.deleteRepo = function (repo) {
            var appRepos = safeGet(this.repos_, repo.app.name);
            // This should never happen...
            if (!appRepos || safeGet(appRepos, repo.key) !== repo) {
                fatal("Database " + repo.app.name + "(" + repo.repoInfo_ + ") has already been deleted.");
            }
            repoInterrupt(repo);
            delete appRepos[repo.key];
        };
        /**
         * Ensures a repo doesn't already exist and then creates one using the
         * provided app.
         *
         * @param repoInfo The metadata about the Repo
         * @return The Repo object for the specified server / repoName.
         */
        RepoManager.prototype.createRepo = function (repoInfo, app, authTokenProvider) {
            var appRepos = safeGet(this.repos_, app.name);
            if (!appRepos) {
                appRepos = {};
                this.repos_[app.name] = appRepos;
            }
            var repo = safeGet(appRepos, repoInfo.toURLString());
            if (repo) {
                fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');
            }
            repo = new Repo(repoInfo, this.useRestClient_, app, authTokenProvider);
            appRepos[repoInfo.toURLString()] = repo;
            return repo;
        };
        /**
         * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.
         */
        RepoManager.prototype.forceRestClient = function (forceRestClient) {
            this.useRestClient_ = forceRestClient;
        };
        return RepoManager;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Class representing a Firebase Realtime Database.
     */
    var FirebaseDatabase = /** @class */ (function () {
        function FirebaseDatabase(app, authProvider, databaseUrl) {
            this.app = app;
            this._delegate = RepoManager.getInstance().databaseFromApp(this.app, authProvider, databaseUrl);
        }
        /**
         * Modify this instance to communicate with the Realtime Database emulator.
         *
         * <p>Note: This method must be called before performing any other operation.
         *
         * @param host - the emulator host (ex: localhost)
         * @param port - the emulator port (ex: 8080)
         */
        FirebaseDatabase.prototype.useEmulator = function (host, port) {
            this._delegate.useEmulator(host, port);
        };
        FirebaseDatabase.prototype.ref = function (path) {
            return typeof path === 'string'
                ? this._delegate.ref(path)
                : this._delegate.ref(path);
        };
        /**
         * Returns a reference to the root or the path specified in url.
         * We throw a exception if the url is not in the same domain as the
         * current repo.
         * @param url - A URL that refers to a database location.
         * @returns A Firebase reference.
         */
        FirebaseDatabase.prototype.refFromURL = function (url) {
            return this._delegate.refFromURL(url);
        };
        FirebaseDatabase.prototype.goOffline = function () {
            this._delegate.goOffline();
        };
        FirebaseDatabase.prototype.goOnline = function () {
            this._delegate.goOnline();
        };
        FirebaseDatabase.prototype._delete = function () {
            return this._delegate.INTERNAL.delete();
        };
        FirebaseDatabase.prototype._setDatabaseUrl = function (url) { };
        FirebaseDatabase.ServerValue = Database.ServerValue;
        return FirebaseDatabase;
    }());
    var ServerValue = Database.ServerValue;
    /**
     * Returns the instance of the Realtime Database SDK that is associated
     * with the provided {@link FirebaseApp}. Initializes a new instance with
     * with default settings if no instance exists or if the existing instance uses
     * a custom database URL.
     *
     * @param app - The {@link FirebaseApp} instance that the returned Realtime
     * Database instance is associated with.
     * @param url - The URL of the Realtime Database instance to connect to. If not
     * provided, the SDK connects to the default instance of the Firebase App.
     * @returns The `FirebaseDatabase` instance of the provided app.
     */
    function getDatabase(app$1, url) {
        return app._getProvider(app$1, 'database-exp').getImmediate({
            identifier: url
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function registerDatabase() {
        app._registerComponent(new Component('database-exp', function (container, url) {
            var app = container.getProvider('app-exp').getImmediate();
            var authProvider = container.getProvider('auth-internal');
            return new FirebaseDatabase(app, authProvider, url);
        }, "PUBLIC" /* PUBLIC */).setMultipleInstances(true));
        app.registerVersion('database-exp', version, 'node');
    }
    registerDatabase();

    exports.ServerValue = ServerValue;
    exports.enableLogging = enableLogging;
    exports.getDatabase = getDatabase;

    Object.defineProperty(exports, '__esModule', { value: true });


              }).apply(this, arguments);
            } catch(err) {
                console.error(err);
                throw new Error(
                  'Cannot instantiate firebase-database.js - ' +
                  'be sure to load firebase-app.js first.'
                );
              }

})));


//# sourceMappingURL=firebase.js.map
