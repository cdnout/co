"use strict";var polyline={};function py2_round(e){return Math.floor(Math.abs(e)+.5)*(0<=e?1:-1)}function encode(e,o,r){var n=(e=py2_round(e*r))-(o=py2_round(o*r));n<<=1,e-o<0&&(n=~n);for(var t="";32<=n;)t+=String.fromCharCode(63+(32|31&n)),n>>=5;return t+=String.fromCharCode(n+63)}function flipped(e){for(var o=[],r=0;r<e.length;r++){var n=e[r].slice();o.push([n[1],n[0]])}return o}polyline.decode=function(e,o){for(var r,n=0,t=0,i=0,l=[],u=0,p=0,d=null,c=Math.pow(10,Number.isInteger(o)?o:5);n<e.length;){for(d=null,p=u=0;p|=(31&(d=e.charCodeAt(n++)-63))<<u,u+=5,32<=d;);for(r=1&p?~(p>>1):p>>1,u=p=0;p|=(31&(d=e.charCodeAt(n++)-63))<<u,u+=5,32<=d;);t+=r,i+=1&p?~(p>>1):p>>1,l.push([t/c,i/c])}return l},polyline.encode=function(e,o){if(!e.length)return"";for(var r=Math.pow(10,Number.isInteger(o)?o:5),n=encode(e[0][0],0,r)+encode(e[0][1],0,r),t=1;t<e.length;t++){var i=e[t],l=e[t-1];n+=encode(i[0],l[0],r),n+=encode(i[1],l[1],r)}return n},polyline.fromGeoJSON=function(e,o){if(e&&"Feature"===e.type&&(e=e.geometry),!e||"LineString"!==e.type)throw new Error("Input must be a GeoJSON LineString");return polyline.encode(flipped(e.coordinates),o)},polyline.toGeoJSON=function(e,o){return{type:"LineString",coordinates:flipped(polyline.decode(e,o))}},"object"==typeof module&&module.exports&&(module.exports=polyline);