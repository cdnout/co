"use strict";exports.__esModule=!0,exports.serializeWindow=serializeWindow,exports.deserializeWindow=deserializeWindow,exports.ProxyWindow=void 0;var _src=require("cross-domain-utils/src"),_src2=require("zalgo-promise/src"),_src3=require("belter/src"),_src4=require("universal-serialize/src"),_conf=require("../conf"),_global=require("../global"),_lib=require("../lib"),_bridge=require("../bridge");function cleanupProxyWindows(){const i=(0,_global.globalStore)("idToProxyWindow");for(const e of i.keys())i.get(e).shouldClean()&&i.del(e)}function getSerializedWindow(i,{send:e,id:o=(0,_src3.uniqueID)()}){let n=i.then(i=>{if((0,_src.isSameDomain)(i))return(0,_src.assertSameDomain)(i).name});const s=i.then(i=>{if((0,_src.isWindowClosed)(i))throw new Error("Window is closed, can not determine type");return(0,_src.getOpener)(i)?_src.WINDOW_TYPE.POPUP:_src.WINDOW_TYPE.IFRAME});return n.catch(_src3.noop),s.catch(_src3.noop),{id:o,getType:()=>s,getInstanceID:(0,_src3.memoizePromise)(()=>i.then(i=>(0,_lib.getWindowInstanceID)(i,{send:e}))),close:()=>i.then(_src.closeWindow),getName:()=>i.then(i=>{if(!(0,_src.isWindowClosed)(i))return(0,_src.isSameDomain)(i)?(0,_src.assertSameDomain)(i).name:n}),focus:()=>i.then(i=>{i.focus()}),isClosed:()=>i.then(i=>(0,_src.isWindowClosed)(i)),setLocation:e=>i.then(i=>{const o=`${window.location.protocol}//${window.location.host}`;if(0===e.indexOf("/"))e=`${o}${e}`;else if(!e.match(/^https?:\/\//)&&0!==e.indexOf(o))throw new Error(`Expected url to be http or https url, or absolute path, got ${JSON.stringify(e)}`);if((0,_src.isSameDomain)(i))try{if(i.location&&"function"==typeof i.location.replace)return void i.location.replace(e)}catch(i){}i.location=e}),setName:e=>i.then(i=>{__POST_ROBOT__.__IE_POPUP_SUPPORT__&&(0,_bridge.linkWindow)({win:i,name:e});const o=(0,_src.isSameDomain)(i),s=(0,_src.getFrameForWindow)(i);if(!o)throw new Error(`Can not set name for cross-domain window: ${e}`);(0,_src.assertSameDomain)(i).name=e,s&&s.setAttribute("name",e),n=_src2.ZalgoPromise.resolve(e)})}}class ProxyWindow{constructor({send:i,win:e,serializedWindow:o}){this.id=void 0,this.isProxyWindow=!0,this.serializedWindow=void 0,this.actualWindow=void 0,this.actualWindowPromise=void 0,this.send=void 0,this.name=void 0,this.actualWindowPromise=new _src2.ZalgoPromise,this.serializedWindow=o||getSerializedWindow(this.actualWindowPromise,{send:i}),(0,_global.globalStore)("idToProxyWindow").set(this.getID(),this),e&&this.setWindow(e,{send:i})}getID(){return this.serializedWindow.id}getType(){return this.serializedWindow.getType()}isPopup(){return this.getType().then(i=>i===_src.WINDOW_TYPE.POPUP)}setLocation(i){return this.serializedWindow.setLocation(i).then(()=>this)}getName(){return this.serializedWindow.getName()}setName(i){return this.serializedWindow.setName(i).then(()=>this)}close(){return this.serializedWindow.close().then(()=>this)}focus(){const i=this.isPopup(),e=this.getName(),o=_src2.ZalgoPromise.hash({isPopup:i,name:e}).then(({isPopup:i,name:e})=>{i&&e&&window.open("",e)}),n=this.serializedWindow.focus();return _src2.ZalgoPromise.all([o,n]).then(()=>this)}isClosed(){return this.serializedWindow.isClosed()}getWindow(){return this.actualWindow}setWindow(i,{send:e}){this.actualWindow=i,this.actualWindowPromise.resolve(this.actualWindow),this.serializedWindow=getSerializedWindow(this.actualWindowPromise,{send:e,id:this.getID()}),(0,_global.windowStore)("winToProxyWindow").set(i,this)}awaitWindow(){return this.actualWindowPromise}matchWindow(i,{send:e}){return _src2.ZalgoPromise.try(()=>this.actualWindow?i===this.actualWindow:_src2.ZalgoPromise.hash({proxyInstanceID:this.getInstanceID(),knownWindowInstanceID:(0,_lib.getWindowInstanceID)(i,{send:e})}).then(({proxyInstanceID:o,knownWindowInstanceID:n})=>{const s=o===n;return s&&this.setWindow(i,{send:e}),s}))}unwrap(){return this.actualWindow||this}getInstanceID(){return this.serializedWindow.getInstanceID()}shouldClean(){return Boolean(this.actualWindow&&(0,_src.isWindowClosed)(this.actualWindow))}serialize(){return this.serializedWindow}static unwrap(i){return ProxyWindow.isProxyWindow(i)?i.unwrap():i}static serialize(i,{send:e}){return cleanupProxyWindows(),ProxyWindow.toProxyWindow(i,{send:e}).serialize()}static deserialize(i,{send:e}){return cleanupProxyWindows(),(0,_global.globalStore)("idToProxyWindow").get(i.id)||new ProxyWindow({serializedWindow:i,send:e})}static isProxyWindow(i){return Boolean(i&&!(0,_src.isWindow)(i)&&i.isProxyWindow)}static toProxyWindow(i,{send:e}){if(cleanupProxyWindows(),ProxyWindow.isProxyWindow(i))return i;const o=i;return(0,_global.windowStore)("winToProxyWindow").get(o)||new ProxyWindow({win:o,send:e})}}function serializeWindow(i,e,o,{send:n}){return(0,_src4.serializeType)(_conf.SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW,ProxyWindow.serialize(o,{send:n}))}function deserializeWindow(i,e,o,{send:n}){return ProxyWindow.deserialize(o,{send:n})}exports.ProxyWindow=ProxyWindow;