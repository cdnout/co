"use strict";exports.__esModule=!0,exports.resetListeners=resetListeners,exports.addResponseListener=addResponseListener,exports.getResponseListener=getResponseListener,exports.deleteResponseListener=deleteResponseListener,exports.cancelResponseListeners=cancelResponseListeners,exports.markResponseListenerErrored=markResponseListenerErrored,exports.isResponseListenerErrored=isResponseListenerErrored,exports.getRequestListener=getRequestListener,exports.addRequestListener=addRequestListener;var _src=require("cross-domain-utils/src"),_src2=require("belter/src"),_global=require("../global"),_conf=require("../conf");function resetListeners(){const e=(0,_global.globalStore)("responseListeners"),r=(0,_global.globalStore)("erroredResponseListeners");e.reset(),r.reset()}const __DOMAIN_REGEX__="__domain_regex__";function addResponseListener(e,r){(0,_global.globalStore)("responseListeners").set(e,r)}function getResponseListener(e){return(0,_global.globalStore)("responseListeners").get(e)}function deleteResponseListener(e){(0,_global.globalStore)("responseListeners").del(e)}function cancelResponseListeners(){const e=(0,_global.globalStore)("responseListeners");for(const r of e.keys()){const s=e.get(r);s&&(s.cancelled=!0),e.del(r)}}function markResponseListenerErrored(e){(0,_global.globalStore)("erroredResponseListeners").set(e,!0)}function isResponseListenerErrored(e){return(0,_global.globalStore)("erroredResponseListeners").has(e)}function getRequestListener({name:e,win:r,domain:s}){const t=(0,_global.windowStore)("requestListeners");if(r===_conf.WILDCARD&&(r=null),s===_conf.WILDCARD&&(s=null),!e)throw new Error("Name required to get request listener");for(const n of[r,(0,_global.getWildcard)()]){if(!n)continue;const r=t.get(n);if(!r)continue;const o=r[e];if(o){if(s&&"string"==typeof s){if(o[s])return o[s];if(o[__DOMAIN_REGEX__])for(const{regex:e,listener:r}of o[__DOMAIN_REGEX__])if((0,_src.matchDomain)(e,s))return r}if(o[_conf.WILDCARD])return o[_conf.WILDCARD]}}}function addRequestListener({name:e,win:r,domain:s},t){const n=(0,_global.windowStore)("requestListeners");if(!e||"string"!=typeof e)throw new Error("Name required to add request listener");if(Array.isArray(r)){const n=[];for(const o of r)n.push(addRequestListener({name:e,domain:s,win:o},t));return{cancel(){for(const e of n)e.cancel()}}}if(Array.isArray(s)){const n=[];for(const o of s)n.push(addRequestListener({name:e,win:r,domain:o},t));return{cancel(){for(const e of n)e.cancel()}}}const o=getRequestListener({name:e,win:r,domain:s});if(r&&r!==_conf.WILDCARD||(r=(0,_global.getWildcard)()),s=s||_conf.WILDCARD,o)throw r&&s?new Error(`Request listener already exists for ${e} on domain ${s.toString()} for ${r===(0,_global.getWildcard)()?"wildcard":"specified"} window`):r?new Error(`Request listener already exists for ${e} for ${r===(0,_global.getWildcard)()?"wildcard":"specified"} window`):s?new Error(`Request listener already exists for ${e} on domain ${s.toString()}`):new Error(`Request listener already exists for ${e}`);const i=n.getOrSet(r,()=>({})),l=(0,_src2.getOrSet)(i,e,()=>({})),a=s.toString();let c,d;return(0,_src2.isRegex)(s)?(c=(0,_src2.getOrSet)(l,__DOMAIN_REGEX__,()=>[]),d={regex:s,listener:t},c.push(d)):l[a]=t,{cancel(){delete l[a],d&&(c.splice(c.indexOf(d,1)),c.length||delete l[__DOMAIN_REGEX__]),Object.keys(l).length||delete i[e],r&&!Object.keys(i).length&&n.del(r)}}}