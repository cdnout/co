"use strict";exports.__esModule=!0,exports.handleRequest=handleRequest,exports.handleAck=handleAck,exports.handleResponse=handleResponse;var _src=require("zalgo-promise/src"),_src2=require("cross-domain-utils/src"),_src3=require("belter/src"),_conf=require("../../conf"),_send=require("../send"),_listeners=require("../listeners");function handleRequest(e,n,r,{on:o,send:s}){const t=(0,_listeners.getRequestListener)({name:r.name,win:e,domain:n}),i=r.name===_conf.MESSAGE_NAME.METHOD&&r.data&&"string"==typeof r.data.name?`${r.data.name}()`:r.name;function a(t,a,c){return _src.ZalgoPromise.flush().then(()=>{if(!r.fireAndForget&&!(0,_src2.isWindowClosed)(e)){__DEBUG__&&(t===_conf.MESSAGE_ACK.SUCCESS?console.info("respond::res",i,n,"\n\n",a):t===_conf.MESSAGE_ACK.ERROR&&console.error("respond::err",i,n,"\n\n",c));try{return(0,_send.sendMessage)(e,n,{id:(0,_src3.uniqueID)(),origin:(0,_src2.getDomain)(window),type:_conf.MESSAGE_TYPE.RESPONSE,hash:r.hash,name:r.name,ack:t,data:a,error:c},{on:o,send:s})}catch(e){throw new Error(`Send response message failed for ${i} in ${(0,_src2.getDomain)()}\n\n${(0,_src3.stringifyError)(e)}`)}}})}return __DEBUG__&&console.info("receive::req",i,n,"\n\n",r.data),_src.ZalgoPromise.all([_src.ZalgoPromise.flush().then(()=>{if(!r.fireAndForget&&!(0,_src2.isWindowClosed)(e))try{return(0,_send.sendMessage)(e,n,{id:(0,_src3.uniqueID)(),origin:(0,_src2.getDomain)(window),type:_conf.MESSAGE_TYPE.ACK,hash:r.hash,name:r.name},{on:o,send:s})}catch(e){throw new Error(`Send ack message failed for ${i} in ${(0,_src2.getDomain)()}\n\n${(0,_src3.stringifyError)(e)}`)}}),_src.ZalgoPromise.try(()=>{if(!t)throw new Error(`No handler found for post message: ${r.name} from ${n} in ${window.location.protocol}//${window.location.host}${window.location.pathname}`);if(!(0,_src2.matchDomain)(t.domain,n))throw new Error(`Request origin ${n} does not match domain ${t.domain.toString()}`);const o=r.data;return t.handler({source:e,origin:n,data:o})}).then(e=>a(_conf.MESSAGE_ACK.SUCCESS,e),e=>a(_conf.MESSAGE_ACK.ERROR,null,e))]).then(_src3.noop).catch(e=>{if(t&&t.handleError)return t.handleError(e);throw e})}function handleAck(e,n,r){if((0,_listeners.isResponseListenerErrored)(r.hash))return;const o=(0,_listeners.getResponseListener)(r.hash);if(!o)throw new Error(`No handler found for post message ack for message: ${r.name} from ${n} in ${window.location.protocol}//${window.location.host}${window.location.pathname}`);try{if(!(0,_src2.matchDomain)(o.domain,n))throw new Error(`Ack origin ${n} does not match domain ${o.domain.toString()}`);if(e!==o.win)throw new Error("Ack source does not match registered window")}catch(e){o.promise.reject(e)}o.ack=!0}function handleResponse(e,n,r){if((0,_listeners.isResponseListenerErrored)(r.hash))return;const o=(0,_listeners.getResponseListener)(r.hash);if(!o)throw new Error(`No handler found for post message response for message: ${r.name} from ${n} in ${window.location.protocol}//${window.location.host}${window.location.pathname}`);if(!(0,_src2.matchDomain)(o.domain,n))throw new Error(`Response origin ${n} does not match domain ${(0,_src2.stringifyDomainPattern)(o.domain)}`);if(e!==o.win)throw new Error("Response source does not match registered window");(0,_listeners.deleteResponseListener)(r.hash);const s=r.name===_conf.MESSAGE_NAME.METHOD&&r.data&&"string"==typeof r.data.name?`${r.data.name}()`:r.name;r.ack===_conf.MESSAGE_ACK.ERROR?(__DEBUG__&&console.error("receive::err",s,n,"\n\n",r.error),o.promise.reject(r.error)):r.ack===_conf.MESSAGE_ACK.SUCCESS&&(__DEBUG__&&console.info("receive::res",s,n,"\n\n",r.data),o.promise.resolve({source:e,origin:n,data:r.data}))}