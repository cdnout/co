/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/JClic.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@babel/runtime/helpers/assertThisInitialized.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/assertThisInitialized.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

module.exports = _assertThisInitialized;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/classCallCheck.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/classCallCheck.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

module.exports = _classCallCheck;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/createClass.js":
/*!************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/createClass.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

module.exports = _createClass;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/defineProperty.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/defineProperty.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

module.exports = _defineProperty;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/getPrototypeOf.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _getPrototypeOf(o) {
  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

module.exports = _getPrototypeOf;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/inherits.js":
/*!*********************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/inherits.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var setPrototypeOf = __webpack_require__(/*! ./setPrototypeOf */ "./node_modules/@babel/runtime/helpers/setPrototypeOf.js");

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) setPrototypeOf(subClass, superClass);
}

module.exports = _inherits;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/objectSpread.js":
/*!*************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/objectSpread.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var defineProperty = __webpack_require__(/*! ./defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? Object(arguments[i]) : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      defineProperty(target, key, source[key]);
    });
  }

  return target;
}

module.exports = _objectSpread;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");

var assertThisInitialized = __webpack_require__(/*! ./assertThisInitialized */ "./node_modules/@babel/runtime/helpers/assertThisInitialized.js");

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return assertThisInitialized(self);
}

module.exports = _possibleConstructorReturn;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/setPrototypeOf.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/setPrototypeOf.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _setPrototypeOf(o, p) {
  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

module.exports = _setPrototypeOf;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/typeof.js":
/*!*******************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/typeof.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

module.exports = _typeof;

/***/ }),

/***/ "./node_modules/@francesc/basic-midi-player-js/module/midiplayer.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@francesc/basic-midi-player-js/module/midiplayer.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var require;var require;(function(f){if(true){module.exports=f()}else { var g; }})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return require(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){

function ADSR(audioContext) {
  const node = audioContext.createGain()

  const voltage = node._voltage = getVoltage(audioContext)
  const value = scale(voltage)
  const startValue = scale(voltage)
  const endValue = scale(voltage)

  node._startAmount = scale(startValue)
  node._endAmount = scale(endValue)

  node._multiplier = scale(value)
  node._multiplier.connect(node)
  node._startAmount.connect(node)
  node._endAmount.connect(node)

  node.value = value.gain
  node.startValue = startValue.gain
  node.endValue = endValue.gain

  node.startValue.value = 0
  node.endValue.value = 0

  Object.defineProperties(node, props)
  return node
}

const props = {

  attack: { value: 0, writable: true },
  decay: { value: 0, writable: true },
  sustain: { value: 1, writable: true },
  release: { value: 0, writable: true },

  getReleaseDuration: {
    value: function () {
      return this.release
    }
  },

  start: {
    value: function (at) {
      const target = this._multiplier.gain
      const startAmount = this._startAmount.gain
      const endAmount = this._endAmount.gain

      this._voltage.start(at)
      this._decayFrom = this._decayFrom = at + this.attack
      this._startedAt = at

      const sustain = this.sustain

      target.cancelScheduledValues(at)
      startAmount.cancelScheduledValues(at)
      endAmount.cancelScheduledValues(at)

      endAmount.setValueAtTime(0, at)

      if (this.attack) {
        target.setValueAtTime(0, at)
        target.linearRampToValueAtTime(1, at + this.attack)

        startAmount.setValueAtTime(1, at)
        startAmount.linearRampToValueAtTime(0, at + this.attack)
      } else {
        target.setValueAtTime(1, at)
        startAmount.setValueAtTime(0, at)
      }

      if (this.decay) {
        target.setTargetAtTime(sustain, this._decayFrom, getTimeConstant(this.decay))
      }
    }
  },

  stop: {
    value: function (at, isTarget) {
      if (isTarget) {
        at = at - this.release
      }

      const endTime = at + this.release
      if (this.release) {

        const target = this._multiplier.gain
        const startAmount = this._startAmount.gain
        const endAmount = this._endAmount.gain

        target.cancelScheduledValues(at)
        startAmount.cancelScheduledValues(at)
        endAmount.cancelScheduledValues(at)

        const expFalloff = getTimeConstant(this.release)

        // truncate attack (required as linearRamp is removed by cancelScheduledValues)
        if (this.attack && at < this._decayFrom) {
          const valueAtTime = getValue(0, 1, this._startedAt, this._decayFrom, at)
          target.linearRampToValueAtTime(valueAtTime, at)
          startAmount.linearRampToValueAtTime(1 - valueAtTime, at)
          startAmount.setTargetAtTime(0, at, expFalloff)
        }

        endAmount.setTargetAtTime(1, at, expFalloff)
        target.setTargetAtTime(0, at, expFalloff)
      }

      this._voltage.stop(endTime)
      return endTime
    }
  },

  onended: {
    get: function () {
      return this._voltage.onended
    },
    set: function (value) {
      this._voltage.onended = value
    }
  }

}

const flat = new Float32Array([1, 1])
function getVoltage(context) {
  const voltage = context.createBufferSource()
  const buffer = context.createBuffer(1, 2, context.sampleRate)
  buffer.getChannelData(0).set(flat)
  voltage.buffer = buffer
  voltage.loop = true
  return voltage
}

function scale(node) {
  const gain = node.context.createGain()
  node.connect(gain)
  return gain
}

function getTimeConstant(time) {
  return Math.log(time + 1) / Math.log(100)
}

function getValue(start, end, fromTime, toTime, at) {
  const difference = end - start
  const time = toTime - fromTime
  const truncateTime = at - fromTime
  const phase = truncateTime / time
  let value = start + phase * difference

  if (value <= start) {
    value = start
  }
  if (value >= end) {
    value = end
  }

  return value
}

module.exports = ADSR

},{}],2:[function(require,module,exports){
'use strict'

// DECODE UTILITIES
function b64ToUint6(nChr) {
  return nChr > 64 && nChr < 91 ? nChr - 65
    : nChr > 96 && nChr < 123 ? nChr - 71
      : nChr > 47 && nChr < 58 ? nChr + 4
        : nChr === 43 ? 62
          : nChr === 47 ? 63
            : 0
}

// Decode Base64 to Uint8Array
// ---------------------------
function decode(sBase64, nBlocksSize) {
  const sB64Enc = sBase64.replace(/[^A-Za-z0-9\+\/]/g, '')
  const nInLen = sB64Enc.length
  const nOutLen = nBlocksSize
    ? Math.ceil((nInLen * 3 + 1 >> 2) / nBlocksSize) * nBlocksSize
    : nInLen * 3 + 1 >> 2
  const taBytes = new Uint8Array(nOutLen)

  for (let nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {
    nMod4 = nInIdx & 3
    nUint24 |= b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4
    if (nMod4 === 3 || nInLen - nInIdx === 1) {
      for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++ , nOutIdx++) {
        taBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255
      }
      nUint24 = 0
    }
  }
  return taBytes
}

module.exports = { decode }

},{}],3:[function(require,module,exports){
/* global XMLHttpRequest */
'use strict'

/**
 * Given a url and a return type, returns a promise to the content of the url
 * Basically it wraps a XMLHttpRequest into a Promise
 *
 * @param {String} url
 * @param {String} type - can be 'text' or 'arraybuffer'
 * @return {Promise}
 */
module.exports = function (url, type) {
  return new Promise(function (done, reject) {
    const req = new XMLHttpRequest()
    if (type)
      req.responseType = type

    req.open('GET', url)
    req.onload = function () {
      if (req.status === 200)
        done(req.response)
      reject(Error(req.statusText))
    }
    req.onerror = () => reject(Error('Network Error'))
    req.send()
  })
}

},{}],4:[function(require,module,exports){
'use strict'

const base64 = require('./base64')
const fetch = require('./fetch')

// Given a regex, return a function that test if against a string
function fromRegex(r) {
  return function (o) { return typeof o === 'string' && r.test(o) }
}
// Try to apply a prefix to a name
function prefix(pre, name) {
  return typeof pre === 'string' ? pre + name
    : typeof pre === 'function' ? pre(name)
      : name
}

/**
 * Load one or more audio files
 *
 *
 * Possible option keys:
 *
 * - __from__ {Function|String}: a function or string to convert from file names to urls.
 * If is a string it will be prefixed to the name:
 * `load(ac, 'snare.mp3', { from: 'http://audio.net/samples/' })`
 * If it's a function it receives the file name and should return the url as string.
 * - __only__ {Array} - when loading objects, if provided, only the given keys
 * will be included in the decoded object:
 * `load(ac, 'piano.json', { only: ['C2', 'D2'] })`
 *
 * @param {AudioContext} ac - the audio context
 * @param {Object} source - the object to be loaded
 * @param {Object} options - (Optional) the load options for that object
 * @param {Object} defaultValue - (Optional) the default value to return as
 * in a promise if not valid loader found
 */
function load(ac, source, options, defVal) {
  const loader =
    // Basic audio loading
    isArrayBuffer(source) ? loadArrayBuffer
      : isAudioFileName(source) ? loadAudioFile
        : isPromise(source) ? loadPromise
          // Compound objects
          : isArray(source) ? loadArrayData
            : isObject(source) ? loadObjectData
              : isJsonFileName(source) ? loadJsonFile
                // Base64 encoded audio
                : isBase64Audio(source) ? loadBase64Audio
                  : isJsFileName(source) ? loadMidiJSFile
                    : null

  const opts = options || {}
  return loader ? loader(ac, source, opts)
    : defVal ? Promise.resolve(defVal)
      : Promise.reject(`Source not valid (${source})`)
}
load.fetch = fetch

// BASIC AUDIO LOADING
// ===================

// Load (decode) an array buffer
function isArrayBuffer(o) { return o instanceof ArrayBuffer }

function loadArrayBuffer(ac, array, _options) {
  return new Promise(function (done, reject) {
    ac.decodeAudioData(array,
      function (buffer) { done(buffer) },
      function () { reject(`Can't decode audio data (${array.slice(0, 30)}...)`) }
    )
  })
}

// Load an audio filename
const isAudioFileName = fromRegex(/\.(mp3|wav|ogg)(\?.*)?$/i)

function loadAudioFile(ac, name, options) {
  const url = prefix(options.from, name)
  return load(ac, load.fetch(url, 'arraybuffer'), options)
}

// Load the result of a promise
function isPromise(o) { return o && typeof o.then === 'function' }

function loadPromise(ac, promise, options) {
  return promise.then(function (value) {
    return load(ac, value, options)
  })
}

// COMPOUND OBJECTS
// ================

// Try to load all the items of an array
const isArray = Array.isArray

function loadArrayData(ac, array, options) {
  return Promise.all(array.map(data => load(ac, data, options, data)))
}

// Try to load all the values of a key/value object
function isObject(o) { return o && typeof o === 'object' }

function loadObjectData(ac, obj, options) {
  const dest = {}
  const promises = Object.keys(obj).map(function (key) {
    if (options.only && options.only.indexOf(key) === -1)
      return null
    const value = obj[key]
    return load(ac, value, options, value)
      .then(audio => {
        dest[key] = audio
      })
  })
  return Promise.all(promises)
    .then(() => dest)
}

// Load the content of a JSON file
const isJsonFileName = fromRegex(/\.json(\?.*)?$/i)

function loadJsonFile(ac, name, options) {
  const url = prefix(options.from, name)
  return load(ac, load.fetch(url, 'text').then(JSON.parse), options)
}

// BASE64 ENCODED FORMATS
// ======================

// Load strings with Base64 encoded audio
const isBase64Audio = fromRegex(/^data:audio/)

function loadBase64Audio(ac, source, options) {
  const i = source.indexOf(',')
  return load(ac, base64.decode(source.slice(i + 1)).buffer, options)
}

// Load .js files with MidiJS soundfont prerendered audio
const isJsFileName = fromRegex(/\.js(\?.*)?$/i)

function loadMidiJSFile(ac, name, options) {
  const url = prefix(options.from, name)
  return load(ac, load.fetch(url, 'text').then(midiJsToJson), options)
}

// convert a MIDI.js javascript soundfont file to json
function midiJsToJson(data) {
  let begin = data.indexOf('MIDI.Soundfont.')
  if (begin < 0)
    throw Error('Invalid MIDI.js Soundfont format')
  begin = data.indexOf('=', begin) + 2
  const end = data.lastIndexOf(',')
  return JSON.parse(data.slice(begin, end) + '}')
}

module.exports = { load }

},{"./base64":2,"./fetch":3}],5:[function(require,module,exports){
/**
 * Constants used in player.
 */
const Constants = {
	VERSION: '2.0.4',
	NOTES: [],
	CIRCLE_OF_FOURTHS: ['C', 'F', 'Bb', 'Eb', 'Ab', 'Db', 'Gb', 'Cb', 'Fb', 'Bbb', 'Ebb', 'Abb'],
	CIRCLE_OF_FIFTHS: ['C', 'G', 'D', 'A', 'E', 'B', 'F#', 'C#', 'G#', 'D#', 'A#', 'E#']
};

// Builds notes object for reference against binary values.
const allNotes = [['C'], ['C#', 'Db'], ['D'], ['D#', 'Eb'], ['E'], ['F'], ['F#', 'Gb'], ['G'], ['G#', 'Ab'], ['A'], ['A#', 'Bb'], ['B']];
let counter = 0;

// All available octaves.
for (let i = -1; i <= 9; i++) {
	allNotes.forEach(noteGroup => {
		noteGroup.forEach(note => Constants.NOTES[counter] = note + i);
		counter++;
	});
}

module.exports.Constants = Constants;

},{}],6:[function(require,module,exports){
const Player = require('./player');
const Soundfont = require('./soundfont-player/index');
//const AcousticGrandPiano = require('./soundfonts/acoustic_grand_piano-mp3');

module.exports = {
    Player: Player.Player,
    Soundfont: Soundfont.Soundfont,
    //AcousticGrandPiano
}


},{"./player":8,"./soundfont-player/index":14}],7:[function(require,module,exports){
'use strict'

// util
const fillStr = (s, num) => Array(num + 1).join(s)
const isNum = x => typeof x === 'number'
const isStr = x => typeof x === 'string'
const isDef = x => typeof x !== 'undefined'
const midiToFreq = (midi, tuning) => Math.pow(2, (midi - 69) / 12) * (tuning || 440)

const REGEX = /^([a-gA-G])(#{1,}|b{1,}|x{1,}|)(-?\d*)\s*(.*)\s*$/
/**
 * A regex for matching note strings in scientific notation.
 *
 * @name regex
 * @function
 * @return {RegExp} the regexp used to parse the note name
 *
 * The note string should have the form `letter[accidentals][octave][element]`
 * where:
 *
 * - letter: (Required) is a letter from A to G either upper or lower case
 * - accidentals: (Optional) can be one or more `b` (flats), `#` (sharps) or `x` (double sharps).
 * They can NOT be mixed.
 * - octave: (Optional) a positive or negative integer
 * - element: (Optional) additionally anything after the duration is considered to
 * be the element name (for example: 'C2 dorian')
 *
 * The executed regex contains (by array index):
 *
 * - 0: the complete string
 * - 1: the note letter
 * - 2: the optional accidentals
 * - 3: the optional octave
 * - 4: the rest of the string (trimmed)
 *
 * @example
 * var parser = require('note-parser')
 * parser.regex.exec('c#4')
 * // => ['c#4', 'c', '#', '4', '']
 * parser.regex.exec('c#4 major')
 * // => ['c#4major', 'c', '#', '4', 'major']
 * parser.regex().exec('CMaj7')
 * // => ['CMaj7', 'C', '', '', 'Maj7']
 */
function regex() { return REGEX };

const SEMITONES = [0, 2, 4, 5, 7, 9, 11]
/**
 * Parse a note name in scientific notation an return it's components,
 * and some numeric properties including midi number and frequency.
 *
 * @name parse
 * @function
 * @param {String} note - the note string to be parsed
 * @param {Boolean} isTonic - true the strings it's supposed to contain a note number
 * and some category (for example an scale: 'C# major'). It's false by default,
 * but when true, en extra tonicOf property is returned with the category ('major')
 * @param {Float} tunning - The frequency of A4 note to calculate frequencies.
 * By default it 440.
 * @return {Object} the parsed note name or null if not a valid note
 *
 * The parsed note name object will ALWAYS contains:
 * - letter: the uppercase letter of the note
 * - acc: the accidentals of the note (only sharps or flats)
 * - pc: the pitch class (letter + acc)
 * - step: s a numeric representation of the letter. It's an integer from 0 to 6
 * where 0 = C, 1 = D ... 6 = B
 * - alt: a numeric representation of the accidentals. 0 means no alteration,
 * positive numbers are for sharps and negative for flats
 * - chroma: a numeric representation of the pitch class. It's like midi for
 * pitch classes. 0 = C, 1 = C#, 2 = D ... 11 = B. Can be used to find enharmonics
 * since, for example, chroma of 'Cb' and 'B' are both 11
 *
 * If the note has octave, the parser object will contain:
 * - oct: the octave number (as integer)
 * - midi: the midi number
 * - freq: the frequency (using tuning parameter as base)
 *
 * If the parameter `isTonic` is set to true, the parsed object will contain:
 * - tonicOf: the rest of the string that follows note name (left and right trimmed)
 *
 * @example
 * var parse = require('note-parser').parse
 * parse('Cb4')
 * // => { letter: 'C', acc: 'b', pc: 'Cb', step: 0, alt: -1, chroma: -1,
 *         oct: 4, midi: 59, freq: 246.94165062806206 }
 * // if no octave, no midi, no freq
 * parse('fx')
 * // => { letter: 'F', acc: '##', pc: 'F##', step: 3, alt: 2, chroma: 7 })
 */
function parse(str, isTonic, tuning) {
  if (typeof str !== 'string')
    return null
  const m = REGEX.exec(str)
  if (!m || (!isTonic && m[4]))
    return null

  const p = { letter: m[1].toUpperCase(), acc: m[2].replace(/x/g, '##') }
  p.pc = p.letter + p.acc
  p.step = (p.letter.charCodeAt(0) + 3) % 7
  p.alt = p.acc[0] === 'b' ? -p.acc.length : p.acc.length
  const pos = SEMITONES[p.step] + p.alt
  p.chroma = pos < 0 ? 12 + pos : pos % 12
  if (m[3]) { // has octave
    p.oct = +m[3]
    p.midi = pos + 12 * (p.oct + 1)
    p.freq = midiToFreq(p.midi, tuning)
  }
  if (isTonic)
    p.tonicOf = m[4]
  return p
}

const LETTERS = 'CDEFGAB'
const accStr = n => !isNum(n) ? '' : n < 0 ? fillStr('b', -n) : fillStr('#', n)
const octStr = n => !isNum(n) ? '' : '' + n

/**
 * Create a string from a parsed object or `step, alteration, octave` parameters
 * @param {Object} obj - the parsed data object
 * @return {String} a note string or null if not valid parameters
 * @since 1.2
 * @example
 * parser.build(parser.parse('cb2')) // => 'Cb2'
 *
 * @example
 * // it accepts (step, alteration, octave) parameters:
 * parser.build(3) // => 'F'
 * parser.build(3, -1) // => 'Fb'
 * parser.build(3, -1, 4) // => 'Fb4'
 */
function build(s, a, o) {
  if (s === null || typeof s === 'undefined')
    return null
  if (s.step)
    return build(s.step, s.alt, s.oct)
  if (s < 0 || s > 6)
    return null
  return LETTERS.charAt(s) + accStr(a) + octStr(o)
}

/**
 * Get midi of a note
 *
 * @name midi
 * @function
 * @param {String|Integer} note - the note name or midi number
 * @return {Integer} the midi number of the note or null if not a valid note
 * or the note does NOT contains octave
 * @example
 * var parser = require('note-parser')
 * parser.midi('A4') // => 69
 * parser.midi('A') // => null
 * @example
 * // midi numbers are bypassed (even as strings)
 * parser.midi(60) // => 60
 * parser.midi('60') // => 60
 */
function midi(note) {
  if ((isNum(note) || isStr(note)) && note >= 0 && note < 128)
    return +note
  const p = parse(note)
  return p && isDef(p.midi) ? p.midi : null
}

/**
 * Get freq of a note in hertzs (in a well tempered 440Hz A4)
 *
 * @name freq
 * @function
 * @param {String} note - the note name or note midi number
 * @param {String} tuning - (Optional) the A4 frequency (440 by default)
 * @return {Float} the freq of the number if hertzs or null if not valid note
 * @example
 * var parser = require('note-parser')
 * parser.freq('A4') // => 440
 * parser.freq('A') // => null
 * @example
 * // can change tuning (440 by default)
 * parser.freq('A4', 444) // => 444
 * parser.freq('A3', 444) // => 222
 * @example
 * // it accepts midi numbers (as numbers and as strings)
 * parser.freq(69) // => 440
 * parser.freq('69', 442) // => 442
 */
function freq(note, tuning) {
  const m = midi(note)
  return m === null ? null : midiToFreq(m, tuning)
}

const letter = src => (parse(src) || {}).letter
const acc = src => (parse(src) || {}).acc
const pc = src => (parse(src) || {}).pc
const step = src => (parse(src) || {}).step
const alt = src => (parse(src) || {}).alt
const chroma = src => (parse(src) || {}).chroma
const oct = src => (parse(src) || {}).oct

module.exports = {
  regex,
  parse,
  build,
  midi,
  freq,
  letter,
  acc,
  pc,
  step,
  alt,
  chroma,
  oct,
}

},{}],8:[function(require,module,exports){
const Utils = require('./utils').Utils;
const Track = require('./track').Track;

// Polyfill Uint8Array.forEach: Doesn't exist on Safari <10
if (!Uint8Array.prototype.forEach) {
	Object.defineProperty(Uint8Array.prototype, 'forEach', {
		value: Array.prototype.forEach
	});
}

/**
 * Main player class.  Contains methods to load files, start, stop.
 * @param {function} - Callback to fire for each MIDI event.  Can also be added with on('midiEvent', fn)
 * @param {array} - Array buffer of MIDI file (optional).
 */
class Player {
	constructor(eventHandler, buffer) {
		this.sampleRate = 5; // milliseconds
		this.startTime = 0;
		this.buffer = buffer || null;
		this.division;
		this.format;
		this.setIntervalId = false;
		this.tracks = [];
		this.instruments = [];
		this.defaultTempo = 120;
		this.tempo = null;
		this.startTick = 0;
		this.tick = 0;
		this.lastTick = null;
		this.inLoop = false;
		this.totalTicks = 0;
		this.events = [];
		this.totalEvents = 0;
		this.eventListeners = {};

		if (typeof (eventHandler) === 'function') this.on('midiEvent', eventHandler);
	}

	/**
	 * Load a file into the player (Node.js only).
	 * @param {string} path - Path of file.
	 * @return {Player}
	 */
	loadFile(path) {
		const fs = require('fs');
		this.buffer = fs.readFileSync(path);
		return this.fileLoaded();
	}

	/**
	 * Load an array buffer into the player.
	 * @param {array} arrayBuffer - Array buffer of file to be loaded.
	 * @return {Player}
	 */
	loadArrayBuffer(arrayBuffer) {
		this.buffer = new Uint8Array(arrayBuffer);
		return this.fileLoaded();
	}

	/**
	 * Load a data URI into the player.
	 * @param {string} dataUri - Data URI to be loaded.
	 * @return {Player}
	 */
	loadDataUri(dataUri) {
		// convert base64 to raw binary data held in a string.
		// doesn't handle URLEncoded DataURIs - see SO answer #6850276 for code that does this
		const byteString = window.atob(dataUri.split(',')[1]);

		// write the bytes of the string to an ArrayBuffer
		const ia = new Uint8Array(byteString.length);
		for (let i = 0; i < byteString.length; i++)
			ia[i] = byteString.charCodeAt(i);

		this.buffer = ia;
		return this.fileLoaded();
	}

	/**
	 * Get filesize of loaded file in number of bytes.
	 * @return {number} - The filesize.
	 */
	getFilesize() {
		return this.buffer ? this.buffer.length : 0;
	}

	/**
	 * Sets default tempo, parses file for necessary information, and does a dry run to calculate total length.
	 * Populates this.events & this.totalTicks.
	 * @return {Player}
	 */
	fileLoaded() {
		if (!this.validate()) throw 'Invalid MIDI file; should start with MThd';
		return this.setTempo(this.defaultTempo).getDivision().getFormat().getTracks().dryRun();
	}

	/**
	 * Validates file using simple means - first four bytes should == MThd.
	 * @return {boolean}
	 */
	validate() {
		return Utils.bytesToLetters(this.buffer.subarray(0, 4)) === 'MThd';
	}

	/**
	 * Gets MIDI file format for loaded file.
	 * @return {Player}
	 */
	getFormat() {
		/*
		MIDI files come in 3 variations:
		Format 0 which contain a single track
		Format 1 which contain one or more simultaneous tracks
		(ie all tracks are to be played simultaneously).
		Format 2 which contain one or more independant tracks
		(ie each track is to be played independantly of the others).
		return Utils.bytesToNumber(this.buffer.subarray(8, 10));
		*/

		this.format = Utils.bytesToNumber(this.buffer.subarray(8, 10));
		return this;
	}

	/**
	 * Parses out tracks, places them in this.tracks and initializes this.pointers
	 * @return {Player}
	 */
	getTracks() {
		this.tracks = [];
		let trackOffset = 0;
		while (trackOffset < this.buffer.length) {
			if (Utils.bytesToLetters(this.buffer.subarray(trackOffset, trackOffset + 4)) == 'MTrk') {
				let trackLength = Utils.bytesToNumber(this.buffer.subarray(trackOffset + 4, trackOffset + 8));
				this.tracks.push(new Track(this.tracks.length, this.buffer.subarray(trackOffset + 8, trackOffset + 8 + trackLength)));
			}

			trackOffset += Utils.bytesToNumber(this.buffer.subarray(trackOffset + 4, trackOffset + 8)) + 8;
		}
		return this;
	}

	/**
	 * Enables a track for playing.
	 * @param {number} trackNumber - Track number
	 * @return {Player}
	 */
	enableTrack(trackNumber) {
		this.tracks[trackNumber - 1].enable();
		return this;
	}

	/**
	 * Disables a track for playing.
	 * @param {number} - Track number
	 * @return {Player}
	 */
	disableTrack(trackNumber) {
		this.tracks[trackNumber - 1].disable();
		return this;
	}

	/**
	 * Gets quarter note division of loaded MIDI file.
	 * @return {Player}
	 */
	getDivision() {
		this.division = Utils.bytesToNumber(this.buffer.subarray(12, 14));
		return this;
	}

	/**
	 * The main play loop.
	 * @param {boolean} - Indicates whether or not this is being called simply for parsing purposes.  Disregards timing if so.
	 * @return {undefined}
	 */
	playLoop(dryRun) {
		if (!this.inLoop) {
			this.inLoop = true;
			this.tick = this.getCurrentTick();

			this.tracks.forEach(function (track) {
				// Handle next event
				if (!dryRun && this.endOfFile()) {
					//console.log('end of file')
					this.triggerPlayerEvent('endOfFile');
					this.stop();
				} else {
					let event = track.handleEvent(this.tick, dryRun);

					if (dryRun && event) {
						if (event.hasOwnProperty('name') && event.name === 'Set Tempo') {
							// Grab tempo if available.
							this.setTempo(event.data);
						}
						if (event.hasOwnProperty('name') && event.name === 'Program Change') {
							if (!this.instruments.includes(event.value)) {
								this.instruments.push(event.value);
							}
						}
					} else if (event) this.emitEvent(event);
				}

			}, this);

			if (!dryRun) this.triggerPlayerEvent('playing', { tick: this.tick });
			this.inLoop = false;
		}
	}

	/**
	 * Setter for tempo.
	 * @param {number} - Tempo in bpm (defaults to 120)
	 */
	setTempo(tempo) {
		this.tempo = tempo;
		return this;
	}

	/**
	 * Setter for startTime.
	 * @param {number} - UTC timestamp
	 */
	setStartTime(startTime) {
		this.startTime = startTime;
	}

	/**
	 * Start playing loaded MIDI file if not already playing.
	 * @return {Player}
	 */
	play() {
		if (this.isPlaying())
			throw 'Already playing...';

		// Initialize
		if (!this.startTime)
			this.startTime = (new Date()).getTime();

		// Start play loop
		//window.requestAnimationFrame(this.playLoop.bind(this));
		this.setIntervalId = window.setInterval(this.playLoop.bind(this), this.sampleRate);

		return this;
	}

	/**
	 * Pauses playback if playing.
	 * @return {Player}
	 */
	pause() {
		clearInterval(this.setIntervalId);
		this.setIntervalId = false;
		this.startTick = this.tick;
		this.startTime = 0;
		return this;
	}

	/**
	 * Stops playback if playing.
	 * @return {Player}
	 */
	stop() {
		clearInterval(this.setIntervalId);
		this.setIntervalId = false;
		this.startTick = 0;
		this.startTime = 0;
		this.resetTracks();
		return this;
	}

	/**
	 * Skips player pointer to specified tick.
	 * @param {number} - Tick to skip to.
	 * @return {Player}
	 */
	skipToTick(tick) {
		this.stop();
		this.startTick = tick;

		// Need to set track event indexes to the nearest possible event to the specified tick.
		this.tracks.forEach(function (track) {
			track.setEventIndexByTick(tick);
		});
		return this;
	}

	/**
	 * Skips player pointer to specified percentage.
	 * @param {number} - Percent value in integer format.
	 * @return {Player}
	 */
	skipToPercent(percent) {
		if (percent < 0 || percent > 100) throw 'Percent must be number between 1 and 100.';
		this.skipToTick(Math.round(percent / 100 * this.totalTicks));
		return this;
	}

	/**
	 * Skips player pointer to specified seconds.
	 * @param {number} - Seconds to skip to.
	 * @return {Player}
	 */
	skipToSeconds(seconds) {
		const songTime = this.getSongTime();
		if (seconds < 0 || seconds > songTime)
			throw `${seconds} seconds not within song time of ${songTime}`;
		this.skipToPercent(seconds / songTime * 100);
		return this;
	}

	/**
	 * Checks if player is playing
	 * @return {boolean}
	 */
	isPlaying() {
		return this.setIntervalId > 0 || typeof this.setIntervalId === 'object';
	}

	/**
	 * Plays the loaded MIDI file without regard for timing and saves events in this.events.  Essentially used as a parser.
	 * @return {Player}
	 */
	dryRun() {
		// Reset tracks first
		this.resetTracks();
		while (!this.endOfFile())
			this.playLoop(true);
		this.events = this.getEvents();
		this.totalEvents = this.getTotalEvents();
		this.totalTicks = this.getTotalTicks();
		this.startTick = 0;
		this.startTime = 0;

		// Leave tracks in pristine condish
		this.resetTracks();

		//console.log('Song time: ' + this.getSongTime() + ' seconds / ' + this.totalTicks + ' ticks.');

		this.triggerPlayerEvent('fileLoaded', this);
		return this;
	}

	/**
	 * Resets play pointers for all tracks.
	 * @return {Player}
	 */
	resetTracks() {
		this.tracks.forEach(track => track.reset());
		return this;
	}

	/**
	 * Gets an array of events grouped by track.
	 * @return {array}
	 */
	getEvents() {
		return this.tracks.map(track => track.events);
	}

	/**
	 * Gets total number of ticks in the loaded MIDI file.
	 * @return {number}
	 */
	getTotalTicks() {
		return Math.max.apply(null, this.tracks.map(track => track.delta));
	}

	/**
	 * Gets total number of events in the loaded MIDI file.
	 * @return {number}
	 */
	getTotalEvents() {
		return this.tracks.reduce(
			(a, b) => { return { events: { length: a.events.length + b.events.length } } },
			{ events: { length: 0 } }
		).events.length;
	}

	/**
	 * Gets song duration in seconds.
	 * @return {number}
	 */
	getSongTime() {
		return this.totalTicks / this.division / this.tempo * 60;
	}

	/**
	 * Gets remaining number of seconds in playback.
	 * @return {number}
	 */
	getSongTimeRemaining() {
		return Math.round((this.totalTicks - this.tick) / this.division / this.tempo * 60);
	}

	/**
	 * Gets remaining percent of playback.
	 * @return {number}
	 */
	getSongPercentRemaining() {
		return Math.round(this.getSongTimeRemaining() / this.getSongTime() * 100);
	}

	/**
	 * Number of bytes processed in the loaded MIDI file.
	 * @return {number}
	 */
	bytesProcessed() {
		// Currently assume header chunk is strictly 14 bytes
		return 14 + this.tracks.length * 8 + this.tracks.reduce((a, b) => { return { pointer: a.pointer + b.pointer } }, { pointer: 0 }).pointer;
	}

	/**
	 * Number of events played up to this point.
	 * @return {number}
	 */
	eventsPlayed() {
		return this.tracks.reduce((a, b) => { return { eventIndex: a.eventIndex + b.eventIndex } }, { eventIndex: 0 }).eventIndex;
	}

	/**
	 * Determines if the player pointer has reached the end of the loaded MIDI file.
	 * Used in two ways:
	 * 1. If playing result is based on loaded JSON events.
	 * 2. If parsing (dryRun) it's based on the actual buffer length vs bytes processed.
	 * @return {boolean}
	 */
	endOfFile() {
		if (this.isPlaying())
			return this.eventsPlayed() == this.totalEvents;

		return this.bytesProcessed() == this.buffer.length;
	}

	/**
	 * Gets the current tick number in playback.
	 * @return {number}
	 */
	getCurrentTick() {
		return Math.round(((new Date()).getTime() - this.startTime) / 1000 * (this.division * (this.tempo / 60))) + this.startTick;
	}

	/**
	 * Sends MIDI event out to listener.
	 * @param {object}
	 * @return {Player}
	 */
	emitEvent(event) {
		this.triggerPlayerEvent('midiEvent', event);
		return this;
	}

	/**
	 * Subscribes events to listeners
	 * @param {string} - Name of event to subscribe to.
	 * @param {function} - Callback to fire when event is broadcast.
	 * @return {Player}
	 */
	on(playerEvent, fn) {
		if (!this.eventListeners.hasOwnProperty(playerEvent))
			this.eventListeners[playerEvent] = [];
		this.eventListeners[playerEvent].push(fn);
		return this;
	}

	/**
	 * Broadcasts event to trigger subscribed callbacks.
	 * @param {string} - Name of event.
	 * @param {object} - Data to be passed to subscriber callback.
	 * @return {Player}
	 */
	triggerPlayerEvent(playerEvent, data) {
		if (this.eventListeners.hasOwnProperty(playerEvent))
			this.eventListeners[playerEvent].forEach(fn => fn(data || {}));
		return this;
	}

}

module.exports = { Player }

},{"./track":15,"./utils":16,"fs":undefined}],9:[function(require,module,exports){

module.exports = function (player) {
  /**
   * Adds a listener of an event
   * @chainable
   * @param {String} event - the event name
   * @param {Function} callback - the event handler
   * @return {SamplePlayer} the player
   * @example
   * player.on('start', function(time, note) {
   *   console.log(time, note)
   * })
   */
  player.on = function (event, cb) {
    if (arguments.length === 1 && typeof event === 'function') return player.on('event', event)
    var prop = 'on' + event
    var old = player[prop]
    player[prop] = old ? chain(old, cb) : cb
    return player
  }
  return player
}

function chain (fn1, fn2) {
  return function (a, b, c, d) { fn1(a, b, c, d); fn2(a, b, c, d) }
}

},{}],10:[function(require,module,exports){
'use strict'

const player = require('./player')
const events = require('./events')
const notes = require('./notes')
const scheduler = require('./scheduler')
//const midi = require('./midi')

function SamplePlayer(ac, source, options) {
  //return midi(scheduler(notes(events(player(ac, source, options)))))
  return scheduler(notes(events(player(ac, source, options))))
}

module.exports = { SamplePlayer }

},{"./events":9,"./notes":11,"./player":12,"./scheduler":13}],11:[function(require,module,exports){
'use strict'

var note = require('../note-parser/index')
var isMidi = function (n) { return n !== null && n !== [] && n >= 0 && n < 129 }
var toMidi = function (n) { return isMidi(n) ? +n : note.midi(n) }

// Adds note name to midi conversion
module.exports = function (player) {
  if (player.buffers) {
    var map = player.opts.map
    var toKey = typeof map === 'function' ? map : toMidi
    var mapper = function (name) {
      return name ? toKey(name) || name : null
    }

    player.buffers = mapBuffers(player.buffers, mapper)
    var start = player.start
    player.start = function (name, when, options) {
      var key = mapper(name)
      var dec = key % 1
      if (dec) {
        key = Math.floor(key)
        options = Object.assign(options || {}, { cents: Math.floor(dec * 100) })
      }
      return start(key, when, options)
    }
  }
  return player
}

function mapBuffers(buffers, toKey) {
  return Object.keys(buffers).reduce(function (mapped, name) {
    mapped[toKey(name)] = buffers[name]
    return mapped
  }, {})
}

},{"../note-parser/index":7}],12:[function(require,module,exports){
/* global AudioBuffer */
'use strict'

const ADSR = require('../adsr/index')

const EMPTY = {}
const DEFAULTS = {
  gain: 1,
  attack: 0.01,
  decay: 0.1,
  sustain: 0.9,
  release: 0.3,
  loop: false,
  cents: 0,
  loopStart: 0,
  loopEnd: 0
}

/**
 * Create a sample player.
 *
 * @param {AudioContext} ac - the audio context
 * @param {ArrayBuffer|Object<String,ArrayBuffer>} source
 * @param {Onject} options - (Optional) an options object
 * @return {player} the player
 * @example
 * const SamplePlayer = require('sample-player')
 * const ac = new AudioContext()
 * const snare = SamplePlayer(ac, <AudioBuffer>)
 * snare.play()
 */
function SamplePlayer(ac, source, options) {
  let connected = false
  let nextId = 0
  let tracked = {}
  const out = ac.createGain()
  out.gain.value = 1

  const opts = Object.assign({}, DEFAULTS, options)

  /**
   * @namespace
   */
  const player = { context: ac, out, opts }
  if (source instanceof AudioBuffer)
    player.buffer = source
  else
    player.buffers = source

  /**
   * Start a sample buffer.
   *
   * The returned object has a function `stop(when)` to stop the sound.
   *
   * @param {String} name - the name of the buffer. If the source of the
   * SamplePlayer is one sample buffer, this parameter is not required
   * @param {Float} when - (Optional) when to start (current time if by default)
   * @param {Object} options - additional sample playing options
   * @return {AudioNode} an audio node with a `stop` function
   * @example
   * var sample = player(ac, <AudioBuffer>).connect(ac.destination)
   * sample.start()
   * sample.start(5, { gain: 0.7 }) // name not required since is only one AudioBuffer
   * @example
   * var drums = player(ac, { snare: <AudioBuffer>, kick: <AudioBuffer>, ... }).connect(ac.destination)
   * drums.start('snare')
   * drums.start('snare', 0, { gain: 0.3 })
   */
  player.start = function (name, when, options) {
    // if only one buffer, reorder arguments
    if (player.buffer && name !== null)
      return player.start(null, name, when)

    var buffer = name ? player.buffers[name] : player.buffer
    if (!buffer) {
      console.warn(`Buffer ${name} not found.`)
      return
    } else if (!connected) {
      console.warn('SamplePlayer not connected to any node.')
      return
    }

    const opts = options || EMPTY
    when = Math.max(ac.currentTime, when || 0)
    player.emit('start', when, name, opts)
    var node = createNode(name, buffer, opts)
    node.id = track(name, node)
    node.env.start(when)
    node.source.start(when)
    player.emit('started', when, node.id, node)
    if (opts.duration)
      node.stop(when + opts.duration)
    return node
  }

  // NOTE: start will be override so we can't copy the function reference
  // this is obviously not a good design, so this code will be gone soon.
  /**
   * An alias for `player.start`
   * @see player.start
   * @since 0.3.0
   */
  player.play = function (name, when, options) {
    return player.start(name, when, options)
  }

  /**
   * Stop some or all samples
   *
   * @param {Float} when - (Optional) an absolute time in seconds (or currentTime
   * if not specified)
   * @param {Array} nodes - (Optional) an array of nodes or nodes ids to stop
   * @return {Array} an array of ids of the stoped samples
   *
   * @example
   * var longSound = player(ac, <AudioBuffer>).connect(ac.destination)
   * longSound.start(ac.currentTime)
   * longSound.start(ac.currentTime + 1)
   * longSound.start(ac.currentTime + 2)
   * longSound.stop(ac.currentTime + 3) // stop the three sounds
   */
  player.stop = function (when, ids) {
    ids = ids || Object.keys(tracked)
    return ids.map(function (id) {
      const node = tracked[id]
      if (!node) return null
      node.stop(when)
      return node.id
    })
  }
  /**
   * Connect the player to a destination node
   *
   * @param {AudioNode} destination - the destination node
   * @return {AudioPlayer} the player
   * @chainable
   * @example
   * var sample = player(ac, <AudioBuffer>).connect(ac.destination)
   */
  player.connect = function (dest) {
    connected = true
    out.connect(dest)
    return player
  }

  player.emit = function (event, when, obj, opts) {
    if (player.onevent) player.onevent(event, when, obj, opts)
    const fn = player['on' + event]
    if (fn) fn(when, obj, opts)
  }

  return player

  // =============== PRIVATE FUNCTIONS ============== //

  function track(name, node) {
    node.id = nextId++
    tracked[node.id] = node
    node.source.onended = function () {
      const now = ac.currentTime
      node.source.disconnect()
      node.env.disconnect()
      node.disconnect()
      player.emit('ended', now, node.id, node)
    }
    return node.id
  }

  function createNode(name, buffer, options) {
    const node = ac.createGain()
    node.gain.value = 0 // the envelope will control the gain
    node.connect(out)

    node.env = envelope(ac, options, opts)
    node.env.connect(node.gain)

    node.source = ac.createBufferSource()
    node.source.buffer = buffer
    node.source.connect(node)
    node.source.loop = options.loop || opts.loop
    node.source.playbackRate.value = centsToRate(options.cents || opts.cents)
    node.source.loopStart = options.loopStart || opts.loopStart
    node.source.loopEnd = options.loopEnd || opts.loopEnd
    node.stop = function (when) {
      const time = when || ac.currentTime
      player.emit('stop', time, name)
      const stopAt = node.env.stop(time)
      node.source.stop(stopAt)
    }
    return node
  }
}

function isNum(x) { return typeof x === 'number' }

const PARAMS = ['attack', 'decay', 'sustain', 'release']

function envelope(ac, options, opts) {
  const env = ADSR(ac)
  const adsr = options.adsr || opts.adsr
  PARAMS.forEach(function (name, i) {
    if (adsr) env[name] = adsr[i]
    else env[name] = options[name] || opts[name]
  })
  env.value.value = isNum(options.gain) ? options.gain
    : isNum(opts.gain) ? opts.gain : 1
  return env
}

/*
 * Get playback rate for a given pitch change (in cents)
 * Basic [math](http://www.birdsoft.demon.co.uk/music/samplert.htm):
 * f2 = f1 * 2^( C / 1200 )
 */
function centsToRate(cents) { return cents ? Math.pow(2, cents / 1200) : 1 }

module.exports = SamplePlayer

},{"../adsr/index":1}],13:[function(require,module,exports){
'use strict'

var isArr = Array.isArray
var isObj = function (o) { return o && typeof o === 'object' }
var OPTS = {}

module.exports = function (player) {
  /**
   * Schedule a list of events to be played at specific time.
   *
   * It supports three formats of events for the events list:
   *
   * - An array with [time, note]
   * - An array with [time, object]
   * - An object with { time: ?, [name|note|midi|key]: ? }
   *
   * @param {Float} time - an absolute time to start (or AudioContext's
   * currentTime if provided number is 0)
   * @param {Array} events - the events list.
   * @return {Array} an array of ids
   *
   * @example
   * // Event format: [time, note]
   * var piano = player(ac, ...).connect(ac.destination)
   * piano.schedule(0, [ [0, 'C2'], [0.5, 'C3'], [1, 'C4'] ])
   *
   * @example
   * // Event format: an object { time: ?, name: ? }
   * var drums = player(ac, ...).connect(ac.destination)
   * drums.schedule(0, [
   *   { name: 'kick', time: 0 },
   *   { name: 'snare', time: 0.5 },
   *   { name: 'kick', time: 1 },
   *   { name: 'snare', time: 1.5 }
   * ])
   */
  player.schedule = function (time, events) {
    var now = player.context.currentTime
    var when = time < now ? now : time
    player.emit('schedule', when, events)
    var t, o, note, opts
    return events.map(function (event) {
      if (!event) return null
      else if (isArr(event)) {
        t = event[0]; o = event[1]
      } else {
        t = event.time; o = event
      }

      if (isObj(o)) {
        note = o.name || o.key || o.note || o.midi || null
        opts = o
      } else {
        note = o
        opts = OPTS
      }

      return player.start(note, when + (t || 0), opts)
    })
  }
  return player
}

},{}],14:[function(require,module,exports){
'use strict'

const load = require('../audio-loader/index').load
const player = require('../sample-player/index').SamplePlayer

/**
 * Load a soundfont instrument. It returns a promise that resolves to a
 * instrument object.
 *
 * The instrument object returned by the promise has the following properties:
 *
 * - name: the instrument name
 * - play: A function to play notes from the buffer with the signature
 * `play(note, time, duration, options)`
 *
 *
 * The valid options are:
 *
 * - `format`: the soundfont format. 'mp3' by default. Can be 'ogg'
 * - `soundfont`: the soundfont name. 'MusyngKite' by default. Can be 'FluidR3_GM'
 * - `nameToUrl` <Function>: a function to convert from instrument names to URL
 * - `destination`: by default Soundfont uses the `audioContext.destination` but you can override it.
 * - `gain`: the gain of the player (1 by default)
 * - `notes`: an array of the notes to decode. It can be an array of strings
 * with note names or an array of numbers with midi note numbers. This is a
 * performance option: since decoding mp3 is a cpu intensive process, you can limit
 * limit the number of notes you want and reduce the time to load the instrument.
 *
 * @param {AudioContext} ac - the audio context
 * @param {String} name - the instrument name. For example: 'acoustic_grand_piano'
 * @param {Object} options - (Optional) the same options as Soundfont.loadBuffers
 * @return {Promise}
 *
 * @example
 * var Soundfont = require('sounfont-player')
 * Soundfont.instrument('marimba').then(function (marimba) {
 *   marimba.play('C4')
 * })
 */
function instrument(ac, source, options = {}) {
  if (arguments.length === 1)
    return function (n, o) { return instrument(ac, n, o) }

  let instName = '', instUrl = '';
  if (typeof source === 'string') {
    instName = source
    const isUrl = options.isSoundfontURL || isSoundfontURL
    const toUrl = options.nameToUrl || nameToUrl
    instUrl = isUrl(source) ? source : toUrl(source, options.soundfont, options.format)
    source = instUrl
  }

  return load(ac, source, { only: options.only || options.notes })
    .then(buffers => {
      const p = player(ac, buffers, options).connect(options.destination ? options.destination : ac.destination)
      p.url = instUrl
      p.name = instName
      return p
    })
}

function isSoundfontURL(name) {
  return /\.js(\?.*)?$/i.test(name)
}

/**
 * Given an instrument name returns a URL to to the Benjamin Gleitzman's
 * package of [pre-rendered sound fonts](https://github.com/gleitz/midi-js-soundfonts)
 *
 * @param {String} name - instrument name
 * @param {String} soundfont - (Optional) the soundfont name. One of 'FluidR3_GM'
 * or 'MusyngKite' ('MusyngKite' by default)
 * @param {String} format - (Optional) Can be 'mp3' or 'ogg' (mp3 by default)
 * @returns {String} the Soundfont file url
 * @example
 * var Soundfont = require('soundfont-player')
 * Soundfont.nameToUrl('marimba', 'mp3')
 */
function nameToUrl(name, sf, format) {
  format = format === 'ogg' ? format : 'mp3'
  sf = sf === 'FluidR3_GM' ? sf : 'MusyngKite'
  return 'https://gleitz.github.io/midi-js-soundfonts/' + sf + '/' + name + '-' + format + '.js'
}

const Soundfont = {
  instrument,
  nameToUrl,
}

module.exports = { Soundfont }

},{"../audio-loader/index":4,"../sample-player/index":10}],15:[function(require,module,exports){
const Constants = require('./constants').Constants;
const Utils = require('./utils').Utils;

/**
 * Class representing a track.  Contains methods for parsing events and keeping track of pointer.
 */
class Track {
	constructor(index, data) {
		this.enabled = true;
		this.eventIndex = 0;
		this.pointer = 0;
		this.lastTick = 0;
		this.lastStatus = null;
		this.index = index;
		this.data = data;
		this.delta = 0;
		this.runningDelta = 0;
		this.events = [];
	}

	/**
	 * Resets all stateful track informaion used during playback.
	 * @return {Track}
	 */
	reset() {
		this.enabled = true;
		this.eventIndex = 0;
		this.pointer = 0;
		this.lastTick = 0;
		this.lastStatus = null;
		this.delta = 0;
		this.runningDelta = 0;
		return this;
	}

	/**
	 * Sets this track to be enabled during playback.
	 * @return {Track}
	 */
	enable() {
		this.enabled = true;
		return this;
	}

	/**
	 * Sets this track to be disabled during playback.
	 * @return {Track}
	 */
	disable() {
		this.enabled = false;
		return this;
	}

	/**
	 * Sets the track event index to the nearest event to the given tick.
	 * @param {number} tick
	 * @return {Track}
	 */
	setEventIndexByTick(tick) {
		tick = tick || 0;

		for (let i in this.events) {
			if (this.events[i].tick >= tick) {
				this.eventIndex = i;
				return this;
			}
		}
	}

	/**
	 * Gets byte located at pointer position.
	 * @return {number}
	 */
	getCurrentByte() {
		return this.data[this.pointer];
	}

	/**
	 * Gets count of delta bytes and current pointer position.
	 * @return {number}
	 */
	getDeltaByteCount() {
		// Get byte count of delta VLV
		// http://www.ccarh.org/courses/253/handout/vlv/
		// If byte is greater or equal to 80h (128 decimal) then the next byte
		// is also part of the VLV,
		// else byte is the last byte in a VLV.
		let currentByte = this.getCurrentByte();
		let byteCount = 1;

		while (currentByte >= 128) {
			currentByte = this.data[this.pointer + byteCount];
			byteCount++;
		}

		return byteCount;
	}

	/**
	 * Get delta value at current pointer position.
	 * @return {number}
	 */
	getDelta() {
		return Utils.readVarInt(this.data.subarray(this.pointer, this.pointer + this.getDeltaByteCount()));
	}

	/**
	 * Handles event within a given track starting at specified index
	 * @param {number} currentTick
	 * @param {boolean} dryRun - If true events will be parsed and returned regardless of time.
	 */
	handleEvent(currentTick, dryRun) {
		dryRun = dryRun || false;

		if (dryRun) {
			const elapsedTicks = currentTick - this.lastTick;
			const delta = this.getDelta();
			const eventReady = elapsedTicks >= delta;

			if (this.pointer < this.data.length && (dryRun || eventReady)) {
				const event = this.parseEvent();
				if (this.enabled)
					return event;
				// Recursively call this function for each event ahead that has 0 delta time?
			}

		} else {
			// Let's actually play the MIDI from the generated JSON events created by the dry run.
			if (this.events[this.eventIndex] && this.events[this.eventIndex].tick <= currentTick) {
				this.eventIndex++;
				if (this.enabled)
					return this.events[this.eventIndex - 1];
			}
		}

		return null;
	}

	/**
	 * Get string data from event.
	 * @param {number} eventStartIndex
	 * @return {string}
	 */
	getStringData(eventStartIndex) {
		//const currentByte = this.pointer;
		const byteCount = 1;
		const length = Utils.readVarInt(this.data.subarray(eventStartIndex + 2, eventStartIndex + 2 + byteCount));
		//const stringLength = length;

		return Utils.bytesToLetters(this.data.subarray(eventStartIndex + byteCount + 2, eventStartIndex + byteCount + length + 2));
	}

	/**
	 * Parses event into JSON and advances pointer for the track
	 * @return {object}
	 */
	parseEvent() {
		const eventStartIndex = this.pointer + this.getDeltaByteCount();
		const eventJson = {};
		const deltaByteCount = this.getDeltaByteCount();
		eventJson.track = this.index + 1;
		eventJson.delta = this.getDelta();
		this.lastTick = this.lastTick + eventJson.delta;
		this.runningDelta += eventJson.delta;
		eventJson.tick = this.runningDelta;
		eventJson.byteIndex = this.pointer;

		//eventJson.raw = event;
		if (this.data[eventStartIndex] == 0xff) {
			// Meta Event

			// If this is a meta event we should emit the data and immediately move to the next event
			// otherwise if we let it run through the next cycle a slight delay will accumulate if multiple tracks
			// are being played simultaneously

			switch (this.data[eventStartIndex + 1]) {
				case 0x00: // Sequence Number
					eventJson.name = 'Sequence Number';
					break;
				case 0x01: // Text Event
					eventJson.name = 'Text Event';
					eventJson.string = this.getStringData(eventStartIndex);
					break;
				case 0x02: // Copyright Notice
					eventJson.name = 'Copyright Notice';
					break;
				case 0x03: // Sequence/Track Name
					eventJson.name = 'Sequence/Track Name';
					eventJson.string = this.getStringData(eventStartIndex);
					break;
				case 0x04: // Instrument Name
					eventJson.name = 'Instrument Name';
					eventJson.string = this.getStringData(eventStartIndex);
					break;
				case 0x05: // Lyric
					eventJson.name = 'Lyric';
					eventJson.string = this.getStringData(eventStartIndex);
					break;
				case 0x06: // Marker
					eventJson.name = 'Marker';
					break;
				case 0x07: // Cue Point
					eventJson.name = 'Cue Point';
					eventJson.string = this.getStringData(eventStartIndex);
					break;
				case 0x09: // Device Name
					eventJson.name = 'Device Name';
					eventJson.string = this.getStringData(eventStartIndex);
					break;
				case 0x20: // MIDI Channel Prefix
					eventJson.name = 'MIDI Channel Prefix';
					break;
				case 0x21: // MIDI Port
					eventJson.name = 'MIDI Port';
					eventJson.data = Utils.bytesToNumber([this.data[eventStartIndex + 3]]);
					break;
				case 0x2F: // End of Track
					eventJson.name = 'End of Track';
					break;
				case 0x51: // Set Tempo
					eventJson.name = 'Set Tempo';
					eventJson.data = Math.round(60000000 / Utils.bytesToNumber(this.data.subarray(eventStartIndex + 3, eventStartIndex + 6)));
					this.tempo = eventJson.data;
					break;
				case 0x54: // SMTPE Offset
					eventJson.name = 'SMTPE Offset';
					break;
				case 0x58: // Time Signature
					// FF 58 04 nn dd cc bb
					eventJson.name = 'Time Signature';
					eventJson.data = this.data.subarray(eventStartIndex + 3, eventStartIndex + 7);
					eventJson.timeSignature = "" + eventJson.data[0] + "/" + Math.pow(2, eventJson.data[1]);
					break;
				case 0x59: // Key Signature
					// FF 59 02 sf mi
					eventJson.name = 'Key Signature';
					eventJson.data = this.data.subarray(eventStartIndex + 3, eventStartIndex + 5);

					if (eventJson.data[0] >= 0) {
						eventJson.keySignature = Constants.CIRCLE_OF_FIFTHS[eventJson.data[0]];

					} else if (eventJson.data[0] < 0) {
						eventJson.keySignature = Constants.CIRCLE_OF_FOURTHS[Math.abs(eventJson.data[0])];
					}

					if (eventJson.data[1] == 0) {
						eventJson.keySignature += ' Major';

					} else if (eventJson.data[1] == 1) {
						eventJson.keySignature += ' Minor';
					}

					break;
				case 0x7F: // Sequencer-Specific Meta-event
					eventJson.name = 'Sequencer-Specific Meta-event';
					break;
				default:
					eventJson.name = `Unknown: ${this.data[eventStartIndex + 1].toString(16)}`;
					break;
			}

			const length = this.data[this.pointer + deltaByteCount + 2];
			// Some meta events will have vlv that needs to be handled

			this.pointer += deltaByteCount + 3 + length;

		} else if (this.data[eventStartIndex] == 0xf0) {
			// Sysex
			eventJson.name = 'Sysex';
			const length = this.data[this.pointer + deltaByteCount + 1];
			this.pointer += deltaByteCount + 2 + length;

		} else {
			// Voice event
			if (this.data[eventStartIndex] < 0x80) {
				// Running status
				eventJson.running = true;
				eventJson.noteNumber = this.data[eventStartIndex];
				eventJson.noteName = Constants.NOTES[this.data[eventStartIndex]];
				eventJson.velocity = this.data[eventStartIndex + 1];

				if (this.lastStatus <= 0x8f) {
					eventJson.name = 'Note off';
					eventJson.channel = this.lastStatus - 0x80 + 1;

				} else if (this.lastStatus <= 0x9f) {
					eventJson.name = 'Note on';
					eventJson.channel = this.lastStatus - 0x90 + 1;
				}

				this.pointer += deltaByteCount + 2;

			} else {
				this.lastStatus = this.data[eventStartIndex];

				if (this.data[eventStartIndex] <= 0x8f) {
					// Note off
					eventJson.name = 'Note off';
					eventJson.channel = this.lastStatus - 0x80 + 1;
					eventJson.noteNumber = this.data[eventStartIndex + 1];
					eventJson.noteName = Constants.NOTES[this.data[eventStartIndex + 1]];
					eventJson.velocity = Math.round(this.data[eventStartIndex + 2] / 127 * 100);
					this.pointer += deltaByteCount + 3;

				} else if (this.data[eventStartIndex] <= 0x9f) {
					// Note on
					eventJson.name = 'Note on';
					eventJson.channel = this.lastStatus - 0x90 + 1;
					eventJson.noteNumber = this.data[eventStartIndex + 1];
					eventJson.noteName = Constants.NOTES[this.data[eventStartIndex + 1]];
					eventJson.velocity = Math.round(this.data[eventStartIndex + 2] / 127 * 100);
					this.pointer += deltaByteCount + 3;

				} else if (this.data[eventStartIndex] <= 0xaf) {
					// Polyphonic Key Pressure
					eventJson.name = 'Polyphonic Key Pressure';
					eventJson.channel = this.lastStatus - 0xa0 + 1;
					eventJson.note = Constants.NOTES[this.data[eventStartIndex + 1]];
					eventJson.pressure = event[2];
					this.pointer += deltaByteCount + 3;

				} else if (this.data[eventStartIndex] <= 0xbf) {
					// Controller Change
					eventJson.name = 'Controller Change';
					eventJson.channel = this.lastStatus - 0xb0 + 1;
					eventJson.number = this.data[eventStartIndex + 1];
					eventJson.value = this.data[eventStartIndex + 2];
					this.pointer += deltaByteCount + 3;

				} else if (this.data[eventStartIndex] <= 0xcf) {
					// Program Change
					eventJson.name = 'Program Change';
					eventJson.channel = this.lastStatus - 0xc0 + 1;
					eventJson.value = this.data[eventStartIndex + 1];
					this.pointer += deltaByteCount + 2;

				} else if (this.data[eventStartIndex] <= 0xdf) {
					// Channel Key Pressure
					eventJson.name = 'Channel Key Pressure';
					eventJson.channel = this.lastStatus - 0xd0 + 1;
					this.pointer += deltaByteCount + 2;

				} else if (this.data[eventStartIndex] <= 0xef) {
					// Pitch Bend
					eventJson.name = 'Pitch Bend';
					eventJson.channel = this.lastStatus - 0xe0 + 1;
					this.pointer += deltaByteCount + 3;

				} else {
					eventJson.name = `Unknown.  Pointer: ${this.pointer.toString()} ${eventStartIndex.toString()} ${this.data.length}`;
				}
			}
		}

		this.delta += eventJson.delta;
		this.events.push(eventJson);

		return eventJson;
	}

	/**
	 * Returns true if pointer has reached the end of the track.
	 * @param {boolean}
	 */
	endOfTrack() {
		if (this.data[this.pointer + 1] == 0xff && this.data[this.pointer + 2] == 0x2f && this.data[this.pointer + 3] == 0x00)
			return true;

		return false;
	}
}

module.exports = { Track }

},{"./constants":5,"./utils":16}],16:[function(require,module,exports){
/**
 * Contains misc static utility methods.
 */
class Utils {

	/**
	 * Converts a single byte to a hex string.
	 * @param {number} byte
	 * @return {string}
	 */
	static byteToHex(byte) {
		// Ensure hex string always has two chars
		return `0${byte.toString(16)}`.slice(-2);
	}

	/**
	 * Converts an array of bytes to a hex string.
	 * @param {array} byteArray
	 * @return {string}
	 */
	static bytesToHex(byteArray) {
		const hex = [];
		byteArray.forEach(byte => hex.push(Utils.byteToHex(byte)));
		return hex.join('');
	}

	/**
	 * Converts a hex string to a number.
	 * @param {string} hexString
	 * @return {number}
	 */
	static hexToNumber(hexString) {
		return parseInt(hexString, 16);
	}

	/**
	 * Converts an array of bytes to a number.
	 * @param {array} byteArray
	 * @return {number}
	 */
	static bytesToNumber(byteArray) {
		return Utils.hexToNumber(Utils.bytesToHex(byteArray));
	}

	/**
	 * Converts an array of bytes to letters.
	 * @param {array} byteArray
	 * @return {string}
	 */
	static bytesToLetters(byteArray) {
		const letters = [];
		byteArray.forEach(byte => letters.push(String.fromCharCode(byte)));
		return letters.join('');
	}

	/**
	 * Converts a decimal to it's binary representation.
	 * @param {number} dec
	 * @return {string}
	 */
	static decToBinary(dec) {
		return (dec >>> 0).toString(2);
	}

	/**
	 * Reads a variable length value.
	 * @param {array} byteArray
	 * @return {number}
	 */
	static readVarInt(byteArray) {
		let result = 0;
		byteArray.forEach(number => {
			var b = number;
			if (b & 0x80) {
				result += (b & 0x7f);
				result <<= 7;
			} else {
				/* b is the last byte */
				result += b;
			}
		});

		return result;
	}

	/**
	 * Decodes base-64 encoded string
	 * @param {string} string
	 * @return {string}
	 */
	/* Only for NodeJS!
	static atob(string) {
		if (typeof atob === 'function') return atob(string);
		return new Buffer(string, 'base64').toString('binary');
	}
	*/
}

module.exports = { Utils }
},{}]},{},[6])(6)
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,


/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(/*! base64-js */ "./node_modules/base64-js/index.js")
var ieee754 = __webpack_require__(/*! ieee754 */ "./node_modules/ieee754/index.js")
var isArray = __webpack_require__(/*! isarray */ "./node_modules/isarray/index.js")

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/clipboard-js/clipboard.js":
/*!************************************************!*\
  !*** ./node_modules/clipboard-js/clipboard.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(setImmediate) {//  Import support https://stackoverflow.com/questions/13673346/supporting-both-commonjs-and-amd
(function(name, definition) {
    if (true) { module.exports = definition(); }
    else {}
}("clipboard", function() {
  if (typeof document === 'undefined' || !document.addEventListener) {
    return null;
  }

  var clipboard = {};

  clipboard.copy = (function() {
    var _intercept = false;
    var _data = null; // Map from data type (e.g. "text/html") to value.
    var _bogusSelection = false;

    function cleanup() {
      _intercept = false;
      _data = null;
      if (_bogusSelection) {
        window.getSelection().removeAllRanges();
      }
      _bogusSelection = false;
    }

    document.addEventListener("copy", function(e) {
      if (_intercept) {
        for (var key in _data) {
          e.clipboardData.setData(key, _data[key]);
        }
        e.preventDefault();
      }
    });

    // Workaround for Safari: https://bugs.webkit.org/show_bug.cgi?id=156529
    function bogusSelect() {
      var sel = document.getSelection();
      // If "nothing" is selected...
      if (!document.queryCommandEnabled("copy") && sel.isCollapsed) {
        // ... temporarily select the entire body.
        //
        // We select the entire body because:
        // - it's guaranteed to exist,
        // - it works (unlike, say, document.head, or phantom element that is
        //   not inserted into the DOM),
        // - it doesn't seem to flicker (due to the synchronous copy event), and
        // - it avoids modifying the DOM (can trigger mutation observers).
        //
        // Because we can't do proper feature detection (we already checked
        // document.queryCommandEnabled("copy") , which actually gives a false
        // negative for Blink when nothing is selected) and UA sniffing is not
        // reliable (a lot of UA strings contain "Safari"), this will also
        // happen for some browsers other than Safari. :-()
        var range = document.createRange();
        range.selectNodeContents(document.body);
        sel.removeAllRanges();
        sel.addRange(range);
        _bogusSelection = true;
      }
    };

    return function(data) {
      return new Promise(function(resolve, reject) {
        _intercept = true;
        if (typeof data === "string") {
          _data = {"text/plain": data};
        } else if (data instanceof Node) {
          _data = {"text/html": new XMLSerializer().serializeToString(data)};
        } else if (data instanceof Object){
          _data = data;
        } else {
          reject("Invalid data type. Must be string, DOM node, or an object mapping MIME types to strings.")
        }

        function triggerCopy(tryBogusSelect) {
          try {
            if (document.execCommand("copy")) {
              // document.execCommand is synchronous: http://www.w3.org/TR/2015/WD-clipboard-apis-20150421/#integration-with-rich-text-editing-apis
              // So we can call resolve() back here.
              cleanup();
              resolve();
            }
            else {
              if (!tryBogusSelect) {
                bogusSelect();
                triggerCopy(true);
              } else {
                cleanup();
                throw new Error("Unable to copy. Perhaps it's not available in your browser?");
              }
            }
          } catch (e) {
            cleanup();
            reject(e);
          }
        }
        triggerCopy(false);

      });
    };
  })();

  clipboard.paste = (function() {
    var _intercept = false;
    var _resolve;
    var _dataType;

    document.addEventListener("paste", function(e) {
      if (_intercept) {
        _intercept = false;
        e.preventDefault();
        var resolve = _resolve;
        _resolve = null;
        resolve(e.clipboardData.getData(_dataType));
      }
    });

    return function(dataType) {
      return new Promise(function(resolve, reject) {
        _intercept = true;
        _resolve = resolve;
        _dataType = dataType || "text/plain";
        try {
          if (!document.execCommand("paste")) {
            _intercept = false;
            reject(new Error("Unable to paste. Pasting only works in Internet Explorer at the moment."));
          }
        } catch (e) {
          _intercept = false;
          reject(new Error(e));
        }
      });
    };
  })();

  // Handle IE behaviour.
  if (typeof ClipboardEvent === "undefined" &&
      typeof window.clipboardData !== "undefined" &&
      typeof window.clipboardData.setData !== "undefined") {

    /*! promise-polyfill 2.0.1 */
    (function(a){function b(a,b){return function(){a.apply(b,arguments)}}function c(a){if("object"!=typeof this)throw new TypeError("Promises must be constructed via new");if("function"!=typeof a)throw new TypeError("not a function");this._state=null,this._value=null,this._deferreds=[],i(a,b(e,this),b(f,this))}function d(a){var b=this;return null===this._state?void this._deferreds.push(a):void j(function(){var c=b._state?a.onFulfilled:a.onRejected;if(null===c)return void(b._state?a.resolve:a.reject)(b._value);var d;try{d=c(b._value)}catch(e){return void a.reject(e)}a.resolve(d)})}function e(a){try{if(a===this)throw new TypeError("A promise cannot be resolved with itself.");if(a&&("object"==typeof a||"function"==typeof a)){var c=a.then;if("function"==typeof c)return void i(b(c,a),b(e,this),b(f,this))}this._state=!0,this._value=a,g.call(this)}catch(d){f.call(this,d)}}function f(a){this._state=!1,this._value=a,g.call(this)}function g(){for(var a=0,b=this._deferreds.length;b>a;a++)d.call(this,this._deferreds[a]);this._deferreds=null}function h(a,b,c,d){this.onFulfilled="function"==typeof a?a:null,this.onRejected="function"==typeof b?b:null,this.resolve=c,this.reject=d}function i(a,b,c){var d=!1;try{a(function(a){d||(d=!0,b(a))},function(a){d||(d=!0,c(a))})}catch(e){if(d)return;d=!0,c(e)}}var j=c.immediateFn||"function"==typeof setImmediate&&setImmediate||function(a){setTimeout(a,1)},k=Array.isArray||function(a){return"[object Array]"===Object.prototype.toString.call(a)};c.prototype["catch"]=function(a){return this.then(null,a)},c.prototype.then=function(a,b){var e=this;return new c(function(c,f){d.call(e,new h(a,b,c,f))})},c.all=function(){var a=Array.prototype.slice.call(1===arguments.length&&k(arguments[0])?arguments[0]:arguments);return new c(function(b,c){function d(f,g){try{if(g&&("object"==typeof g||"function"==typeof g)){var h=g.then;if("function"==typeof h)return void h.call(g,function(a){d(f,a)},c)}a[f]=g,0===--e&&b(a)}catch(i){c(i)}}if(0===a.length)return b([]);for(var e=a.length,f=0;f<a.length;f++)d(f,a[f])})},c.resolve=function(a){return a&&"object"==typeof a&&a.constructor===c?a:new c(function(b){b(a)})},c.reject=function(a){return new c(function(b,c){c(a)})},c.race=function(a){return new c(function(b,c){for(var d=0,e=a.length;e>d;d++)a[d].then(b,c)})}, true&&module.exports?module.exports=c:a.Promise||(a.Promise=c)})(this);

    clipboard.copy = function(data) {
      return new Promise(function(resolve, reject) {
        // IE supports string and URL types: https://msdn.microsoft.com/en-us/library/ms536744(v=vs.85).aspx
        // We only support the string type for now.
        if (typeof data !== "string" && !("text/plain" in data)) {
          throw new Error("You must provide a text/plain type.");
        }

        var strData = (typeof data === "string" ? data : data["text/plain"]);
        var copySucceeded = window.clipboardData.setData("Text", strData);
        if (copySucceeded) {
          resolve();
        } else {
          reject(new Error("Copying was rejected."));
        }
      });
    };

    clipboard.paste = function() {
      return new Promise(function(resolve, reject) {
        var strData = window.clipboardData.getData("Text");
        if (strData) {
          resolve(strData);
        } else {
          // The user rejected the paste request.
          reject(new Error("Pasting was rejected."));
        }
      });
    };
  }

  return clipboard;
}));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../timers-browserify/main.js */ "./node_modules/timers-browserify/main.js").setImmediate))

/***/ }),

/***/ "./node_modules/i18next/dist/cjs/i18next.js":
/*!**************************************************!*\
  !*** ./node_modules/i18next/dist/cjs/i18next.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
var _objectSpread = __webpack_require__(/*! @babel/runtime/helpers/objectSpread */ "./node_modules/@babel/runtime/helpers/objectSpread.js");
var _classCallCheck = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
var _createClass = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
var _possibleConstructorReturn = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js");
var _getPrototypeOf = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js");
var _assertThisInitialized = __webpack_require__(/*! @babel/runtime/helpers/assertThisInitialized */ "./node_modules/@babel/runtime/helpers/assertThisInitialized.js");
var _inherits = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js");

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _typeof__default = /*#__PURE__*/_interopDefaultLegacy(_typeof);
var _objectSpread__default = /*#__PURE__*/_interopDefaultLegacy(_objectSpread);
var _classCallCheck__default = /*#__PURE__*/_interopDefaultLegacy(_classCallCheck);
var _createClass__default = /*#__PURE__*/_interopDefaultLegacy(_createClass);
var _possibleConstructorReturn__default = /*#__PURE__*/_interopDefaultLegacy(_possibleConstructorReturn);
var _getPrototypeOf__default = /*#__PURE__*/_interopDefaultLegacy(_getPrototypeOf);
var _assertThisInitialized__default = /*#__PURE__*/_interopDefaultLegacy(_assertThisInitialized);
var _inherits__default = /*#__PURE__*/_interopDefaultLegacy(_inherits);

var consoleLogger = {
  type: 'logger',
  log: function log(args) {
    this.output('log', args);
  },
  warn: function warn(args) {
    this.output('warn', args);
  },
  error: function error(args) {
    this.output('error', args);
  },
  output: function output(type, args) {
    if (console && console[type]) console[type].apply(console, args);
  }
};

var Logger = function () {
  function Logger(concreteLogger) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck__default['default'](this, Logger);

    this.init(concreteLogger, options);
  }

  _createClass__default['default'](Logger, [{
    key: "init",
    value: function init(concreteLogger) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      this.prefix = options.prefix || 'i18next:';
      this.logger = concreteLogger || consoleLogger;
      this.options = options;
      this.debug = options.debug;
    }
  }, {
    key: "setDebug",
    value: function setDebug(bool) {
      this.debug = bool;
    }
  }, {
    key: "log",
    value: function log() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return this.forward(args, 'log', '', true);
    }
  }, {
    key: "warn",
    value: function warn() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return this.forward(args, 'warn', '', true);
    }
  }, {
    key: "error",
    value: function error() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      return this.forward(args, 'error', '');
    }
  }, {
    key: "deprecate",
    value: function deprecate() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      return this.forward(args, 'warn', 'WARNING DEPRECATED: ', true);
    }
  }, {
    key: "forward",
    value: function forward(args, lvl, prefix, debugOnly) {
      if (debugOnly && !this.debug) return null;
      if (typeof args[0] === 'string') args[0] = "".concat(prefix).concat(this.prefix, " ").concat(args[0]);
      return this.logger[lvl](args);
    }
  }, {
    key: "create",
    value: function create(moduleName) {
      return new Logger(this.logger, _objectSpread__default['default']({}, {
        prefix: "".concat(this.prefix, ":").concat(moduleName, ":")
      }, this.options));
    }
  }]);

  return Logger;
}();

var baseLogger = new Logger();

var EventEmitter = function () {
  function EventEmitter() {
    _classCallCheck__default['default'](this, EventEmitter);

    this.observers = {};
  }

  _createClass__default['default'](EventEmitter, [{
    key: "on",
    value: function on(events, listener) {
      var _this = this;

      events.split(' ').forEach(function (event) {
        _this.observers[event] = _this.observers[event] || [];

        _this.observers[event].push(listener);
      });
      return this;
    }
  }, {
    key: "off",
    value: function off(event, listener) {
      if (!this.observers[event]) return;

      if (!listener) {
        delete this.observers[event];
        return;
      }

      this.observers[event] = this.observers[event].filter(function (l) {
        return l !== listener;
      });
    }
  }, {
    key: "emit",
    value: function emit(event) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      if (this.observers[event]) {
        var cloned = [].concat(this.observers[event]);
        cloned.forEach(function (observer) {
          observer.apply(void 0, args);
        });
      }

      if (this.observers['*']) {
        var _cloned = [].concat(this.observers['*']);

        _cloned.forEach(function (observer) {
          observer.apply(observer, [event].concat(args));
        });
      }
    }
  }]);

  return EventEmitter;
}();

function defer() {
  var res;
  var rej;
  var promise = new Promise(function (resolve, reject) {
    res = resolve;
    rej = reject;
  });
  promise.resolve = res;
  promise.reject = rej;
  return promise;
}
function makeString(object) {
  if (object == null) return '';
  return '' + object;
}
function copy(a, s, t) {
  a.forEach(function (m) {
    if (s[m]) t[m] = s[m];
  });
}

function getLastOfPath(object, path, Empty) {
  function cleanKey(key) {
    return key && key.indexOf('###') > -1 ? key.replace(/###/g, '.') : key;
  }

  function canNotTraverseDeeper() {
    return !object || typeof object === 'string';
  }

  var stack = typeof path !== 'string' ? [].concat(path) : path.split('.');

  while (stack.length > 1) {
    if (canNotTraverseDeeper()) return {};
    var key = cleanKey(stack.shift());
    if (!object[key] && Empty) object[key] = new Empty();

    if (Object.prototype.hasOwnProperty.call(object, key)) {
      object = object[key];
    } else {
      object = {};
    }
  }

  if (canNotTraverseDeeper()) return {};
  return {
    obj: object,
    k: cleanKey(stack.shift())
  };
}

function setPath(object, path, newValue) {
  var _getLastOfPath = getLastOfPath(object, path, Object),
      obj = _getLastOfPath.obj,
      k = _getLastOfPath.k;

  obj[k] = newValue;
}
function pushPath(object, path, newValue, concat) {
  var _getLastOfPath2 = getLastOfPath(object, path, Object),
      obj = _getLastOfPath2.obj,
      k = _getLastOfPath2.k;

  obj[k] = obj[k] || [];
  if (concat) obj[k] = obj[k].concat(newValue);
  if (!concat) obj[k].push(newValue);
}
function getPath(object, path) {
  var _getLastOfPath3 = getLastOfPath(object, path),
      obj = _getLastOfPath3.obj,
      k = _getLastOfPath3.k;

  if (!obj) return undefined;
  return obj[k];
}
function getPathWithDefaults(data, defaultData, key) {
  var value = getPath(data, key);

  if (value !== undefined) {
    return value;
  }

  return getPath(defaultData, key);
}
function deepExtend(target, source, overwrite) {
  for (var prop in source) {
    if (prop !== '__proto__' && prop !== 'constructor') {
      if (prop in target) {
        if (typeof target[prop] === 'string' || target[prop] instanceof String || typeof source[prop] === 'string' || source[prop] instanceof String) {
          if (overwrite) target[prop] = source[prop];
        } else {
          deepExtend(target[prop], source[prop], overwrite);
        }
      } else {
        target[prop] = source[prop];
      }
    }
  }

  return target;
}
function regexEscape(str) {
  return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
}
var _entityMap = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  "'": '&#39;',
  '/': '&#x2F;'
};
function escape(data) {
  if (typeof data === 'string') {
    return data.replace(/[&<>"'\/]/g, function (s) {
      return _entityMap[s];
    });
  }

  return data;
}
var isIE10 = typeof window !== 'undefined' && window.navigator && window.navigator.userAgent && window.navigator.userAgent.indexOf('MSIE') > -1;

var ResourceStore = function (_EventEmitter) {
  _inherits__default['default'](ResourceStore, _EventEmitter);

  function ResourceStore(data) {
    var _this;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      ns: ['translation'],
      defaultNS: 'translation'
    };

    _classCallCheck__default['default'](this, ResourceStore);

    _this = _possibleConstructorReturn__default['default'](this, _getPrototypeOf__default['default'](ResourceStore).call(this));

    if (isIE10) {
      EventEmitter.call(_assertThisInitialized__default['default'](_this));
    }

    _this.data = data || {};
    _this.options = options;

    if (_this.options.keySeparator === undefined) {
      _this.options.keySeparator = '.';
    }

    return _this;
  }

  _createClass__default['default'](ResourceStore, [{
    key: "addNamespaces",
    value: function addNamespaces(ns) {
      if (this.options.ns.indexOf(ns) < 0) {
        this.options.ns.push(ns);
      }
    }
  }, {
    key: "removeNamespaces",
    value: function removeNamespaces(ns) {
      var index = this.options.ns.indexOf(ns);

      if (index > -1) {
        this.options.ns.splice(index, 1);
      }
    }
  }, {
    key: "getResource",
    value: function getResource(lng, ns, key) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      var keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
      var path = [lng, ns];
      if (key && typeof key !== 'string') path = path.concat(key);
      if (key && typeof key === 'string') path = path.concat(keySeparator ? key.split(keySeparator) : key);

      if (lng.indexOf('.') > -1) {
        path = lng.split('.');
      }

      return getPath(this.data, path);
    }
  }, {
    key: "addResource",
    value: function addResource(lng, ns, key, value) {
      var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {
        silent: false
      };
      var keySeparator = this.options.keySeparator;
      if (keySeparator === undefined) keySeparator = '.';
      var path = [lng, ns];
      if (key) path = path.concat(keySeparator ? key.split(keySeparator) : key);

      if (lng.indexOf('.') > -1) {
        path = lng.split('.');
        value = ns;
        ns = path[1];
      }

      this.addNamespaces(ns);
      setPath(this.data, path, value);
      if (!options.silent) this.emit('added', lng, ns, key, value);
    }
  }, {
    key: "addResources",
    value: function addResources(lng, ns, resources) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {
        silent: false
      };

      for (var m in resources) {
        if (typeof resources[m] === 'string' || Object.prototype.toString.apply(resources[m]) === '[object Array]') this.addResource(lng, ns, m, resources[m], {
          silent: true
        });
      }

      if (!options.silent) this.emit('added', lng, ns, resources);
    }
  }, {
    key: "addResourceBundle",
    value: function addResourceBundle(lng, ns, resources, deep, overwrite) {
      var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {
        silent: false
      };
      var path = [lng, ns];

      if (lng.indexOf('.') > -1) {
        path = lng.split('.');
        deep = resources;
        resources = ns;
        ns = path[1];
      }

      this.addNamespaces(ns);
      var pack = getPath(this.data, path) || {};

      if (deep) {
        deepExtend(pack, resources, overwrite);
      } else {
        pack = _objectSpread__default['default']({}, pack, resources);
      }

      setPath(this.data, path, pack);
      if (!options.silent) this.emit('added', lng, ns, resources);
    }
  }, {
    key: "removeResourceBundle",
    value: function removeResourceBundle(lng, ns) {
      if (this.hasResourceBundle(lng, ns)) {
        delete this.data[lng][ns];
      }

      this.removeNamespaces(ns);
      this.emit('removed', lng, ns);
    }
  }, {
    key: "hasResourceBundle",
    value: function hasResourceBundle(lng, ns) {
      return this.getResource(lng, ns) !== undefined;
    }
  }, {
    key: "getResourceBundle",
    value: function getResourceBundle(lng, ns) {
      if (!ns) ns = this.options.defaultNS;
      if (this.options.compatibilityAPI === 'v1') return _objectSpread__default['default']({}, {}, this.getResource(lng, ns));
      return this.getResource(lng, ns);
    }
  }, {
    key: "getDataByLanguage",
    value: function getDataByLanguage(lng) {
      return this.data[lng];
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return this.data;
    }
  }]);

  return ResourceStore;
}(EventEmitter);

var postProcessor = {
  processors: {},
  addPostProcessor: function addPostProcessor(module) {
    this.processors[module.name] = module;
  },
  handle: function handle(processors, value, key, options, translator) {
    var _this = this;

    processors.forEach(function (processor) {
      if (_this.processors[processor]) value = _this.processors[processor].process(value, key, options, translator);
    });
    return value;
  }
};

var checkedLoadedFor = {};

var Translator = function (_EventEmitter) {
  _inherits__default['default'](Translator, _EventEmitter);

  function Translator(services) {
    var _this;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck__default['default'](this, Translator);

    _this = _possibleConstructorReturn__default['default'](this, _getPrototypeOf__default['default'](Translator).call(this));

    if (isIE10) {
      EventEmitter.call(_assertThisInitialized__default['default'](_this));
    }

    copy(['resourceStore', 'languageUtils', 'pluralResolver', 'interpolator', 'backendConnector', 'i18nFormat', 'utils'], services, _assertThisInitialized__default['default'](_this));
    _this.options = options;

    if (_this.options.keySeparator === undefined) {
      _this.options.keySeparator = '.';
    }

    _this.logger = baseLogger.create('translator');
    return _this;
  }

  _createClass__default['default'](Translator, [{
    key: "changeLanguage",
    value: function changeLanguage(lng) {
      if (lng) this.language = lng;
    }
  }, {
    key: "exists",
    value: function exists(key) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
        interpolation: {}
      };
      var resolved = this.resolve(key, options);
      return resolved && resolved.res !== undefined;
    }
  }, {
    key: "extractFromKey",
    value: function extractFromKey(key, options) {
      var nsSeparator = options.nsSeparator !== undefined ? options.nsSeparator : this.options.nsSeparator;
      if (nsSeparator === undefined) nsSeparator = ':';
      var keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
      var namespaces = options.ns || this.options.defaultNS;

      if (nsSeparator && key.indexOf(nsSeparator) > -1) {
        var m = key.match(this.interpolator.nestingRegexp);

        if (m && m.length > 0) {
          return {
            key: key,
            namespaces: namespaces
          };
        }

        var parts = key.split(nsSeparator);
        if (nsSeparator !== keySeparator || nsSeparator === keySeparator && this.options.ns.indexOf(parts[0]) > -1) namespaces = parts.shift();
        key = parts.join(keySeparator);
      }

      if (typeof namespaces === 'string') namespaces = [namespaces];
      return {
        key: key,
        namespaces: namespaces
      };
    }
  }, {
    key: "translate",
    value: function translate(keys, options, lastKey) {
      var _this2 = this;

      if (_typeof__default['default'](options) !== 'object' && this.options.overloadTranslationOptionHandler) {
        options = this.options.overloadTranslationOptionHandler(arguments);
      }

      if (!options) options = {};
      if (keys === undefined || keys === null) return '';
      if (!Array.isArray(keys)) keys = [String(keys)];
      var keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;

      var _this$extractFromKey = this.extractFromKey(keys[keys.length - 1], options),
          key = _this$extractFromKey.key,
          namespaces = _this$extractFromKey.namespaces;

      var namespace = namespaces[namespaces.length - 1];
      var lng = options.lng || this.language;
      var appendNamespaceToCIMode = options.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;

      if (lng && lng.toLowerCase() === 'cimode') {
        if (appendNamespaceToCIMode) {
          var nsSeparator = options.nsSeparator || this.options.nsSeparator;
          return namespace + nsSeparator + key;
        }

        return key;
      }

      var resolved = this.resolve(keys, options);
      var res = resolved && resolved.res;
      var resUsedKey = resolved && resolved.usedKey || key;
      var resExactUsedKey = resolved && resolved.exactUsedKey || key;
      var resType = Object.prototype.toString.apply(res);
      var noObject = ['[object Number]', '[object Function]', '[object RegExp]'];
      var joinArrays = options.joinArrays !== undefined ? options.joinArrays : this.options.joinArrays;
      var handleAsObjectInI18nFormat = !this.i18nFormat || this.i18nFormat.handleAsObject;
      var handleAsObject = typeof res !== 'string' && typeof res !== 'boolean' && typeof res !== 'number';

      if (handleAsObjectInI18nFormat && res && handleAsObject && noObject.indexOf(resType) < 0 && !(typeof joinArrays === 'string' && resType === '[object Array]')) {
        if (!options.returnObjects && !this.options.returnObjects) {
          this.logger.warn('accessing an object - but returnObjects options is not enabled!');
          return this.options.returnedObjectHandler ? this.options.returnedObjectHandler(resUsedKey, res, options) : "key '".concat(key, " (").concat(this.language, ")' returned an object instead of string.");
        }

        if (keySeparator) {
          var resTypeIsArray = resType === '[object Array]';
          var copy = resTypeIsArray ? [] : {};
          var newKeyToUse = resTypeIsArray ? resExactUsedKey : resUsedKey;

          for (var m in res) {
            if (Object.prototype.hasOwnProperty.call(res, m)) {
              var deepKey = "".concat(newKeyToUse).concat(keySeparator).concat(m);
              copy[m] = this.translate(deepKey, _objectSpread__default['default']({}, options, {
                joinArrays: false,
                ns: namespaces
              }));
              if (copy[m] === deepKey) copy[m] = res[m];
            }
          }

          res = copy;
        }
      } else if (handleAsObjectInI18nFormat && typeof joinArrays === 'string' && resType === '[object Array]') {
        res = res.join(joinArrays);
        if (res) res = this.extendTranslation(res, keys, options, lastKey);
      } else {
        var usedDefault = false;
        var usedKey = false;

        if (!this.isValidLookup(res) && options.defaultValue !== undefined) {
          usedDefault = true;

          if (options.count !== undefined) {
            var suffix = this.pluralResolver.getSuffix(lng, options.count);
            res = options["defaultValue".concat(suffix)];
          }

          if (!res) res = options.defaultValue;
        }

        if (!this.isValidLookup(res)) {
          usedKey = true;
          res = key;
        }

        var updateMissing = options.defaultValue && options.defaultValue !== res && this.options.updateMissing;

        if (usedKey || usedDefault || updateMissing) {
          this.logger.log(updateMissing ? 'updateKey' : 'missingKey', lng, namespace, key, updateMissing ? options.defaultValue : res);

          if (keySeparator) {
            var fk = this.resolve(key, _objectSpread__default['default']({}, options, {
              keySeparator: false
            }));
            if (fk && fk.res) this.logger.warn('Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.');
          }

          var lngs = [];
          var fallbackLngs = this.languageUtils.getFallbackCodes(this.options.fallbackLng, options.lng || this.language);

          if (this.options.saveMissingTo === 'fallback' && fallbackLngs && fallbackLngs[0]) {
            for (var i = 0; i < fallbackLngs.length; i++) {
              lngs.push(fallbackLngs[i]);
            }
          } else if (this.options.saveMissingTo === 'all') {
            lngs = this.languageUtils.toResolveHierarchy(options.lng || this.language);
          } else {
            lngs.push(options.lng || this.language);
          }

          var send = function send(l, k) {
            if (_this2.options.missingKeyHandler) {
              _this2.options.missingKeyHandler(l, namespace, k, updateMissing ? options.defaultValue : res, updateMissing, options);
            } else if (_this2.backendConnector && _this2.backendConnector.saveMissing) {
              _this2.backendConnector.saveMissing(l, namespace, k, updateMissing ? options.defaultValue : res, updateMissing, options);
            }

            _this2.emit('missingKey', l, namespace, k, res);
          };

          if (this.options.saveMissing) {
            var needsPluralHandling = options.count !== undefined && typeof options.count !== 'string';

            if (this.options.saveMissingPlurals && needsPluralHandling) {
              lngs.forEach(function (l) {
                var plurals = _this2.pluralResolver.getPluralFormsOfKey(l, key);

                plurals.forEach(function (p) {
                  return send([l], p);
                });
              });
            } else {
              send(lngs, key);
            }
          }
        }

        res = this.extendTranslation(res, keys, options, resolved, lastKey);
        if (usedKey && res === key && this.options.appendNamespaceToMissingKey) res = "".concat(namespace, ":").concat(key);
        if (usedKey && this.options.parseMissingKeyHandler) res = this.options.parseMissingKeyHandler(res);
      }

      return res;
    }
  }, {
    key: "extendTranslation",
    value: function extendTranslation(res, key, options, resolved, lastKey) {
      var _this3 = this;

      if (this.i18nFormat && this.i18nFormat.parse) {
        res = this.i18nFormat.parse(res, options, resolved.usedLng, resolved.usedNS, resolved.usedKey, {
          resolved: resolved
        });
      } else if (!options.skipInterpolation) {
        if (options.interpolation) this.interpolator.init(_objectSpread__default['default']({}, options, {
          interpolation: _objectSpread__default['default']({}, this.options.interpolation, options.interpolation)
        }));
        var skipOnVariables = options.interpolation && options.interpolation.skipOnVariables || this.options.interpolation.skipOnVariables;
        var nestBef;

        if (skipOnVariables) {
          var nb = res.match(this.interpolator.nestingRegexp);
          nestBef = nb && nb.length;
        }

        var data = options.replace && typeof options.replace !== 'string' ? options.replace : options;
        if (this.options.interpolation.defaultVariables) data = _objectSpread__default['default']({}, this.options.interpolation.defaultVariables, data);
        res = this.interpolator.interpolate(res, data, options.lng || this.language, options);

        if (skipOnVariables) {
          var na = res.match(this.interpolator.nestingRegexp);
          var nestAft = na && na.length;
          if (nestBef < nestAft) options.nest = false;
        }

        if (options.nest !== false) res = this.interpolator.nest(res, function () {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          if (lastKey && lastKey[0] === args[0] && !options.context) {
            _this3.logger.warn("It seems you are nesting recursively key: ".concat(args[0], " in key: ").concat(key[0]));

            return null;
          }

          return _this3.translate.apply(_this3, args.concat([key]));
        }, options);
        if (options.interpolation) this.interpolator.reset();
      }

      var postProcess = options.postProcess || this.options.postProcess;
      var postProcessorNames = typeof postProcess === 'string' ? [postProcess] : postProcess;

      if (res !== undefined && res !== null && postProcessorNames && postProcessorNames.length && options.applyPostProcessor !== false) {
        res = postProcessor.handle(postProcessorNames, res, key, this.options && this.options.postProcessPassResolved ? _objectSpread__default['default']({
          i18nResolved: resolved
        }, options) : options, this);
      }

      return res;
    }
  }, {
    key: "resolve",
    value: function resolve(keys) {
      var _this4 = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var found;
      var usedKey;
      var exactUsedKey;
      var usedLng;
      var usedNS;
      if (typeof keys === 'string') keys = [keys];
      keys.forEach(function (k) {
        if (_this4.isValidLookup(found)) return;

        var extracted = _this4.extractFromKey(k, options);

        var key = extracted.key;
        usedKey = key;
        var namespaces = extracted.namespaces;
        if (_this4.options.fallbackNS) namespaces = namespaces.concat(_this4.options.fallbackNS);
        var needsPluralHandling = options.count !== undefined && typeof options.count !== 'string';
        var needsContextHandling = options.context !== undefined && typeof options.context === 'string' && options.context !== '';
        var codes = options.lngs ? options.lngs : _this4.languageUtils.toResolveHierarchy(options.lng || _this4.language, options.fallbackLng);
        namespaces.forEach(function (ns) {
          if (_this4.isValidLookup(found)) return;
          usedNS = ns;

          if (!checkedLoadedFor["".concat(codes[0], "-").concat(ns)] && _this4.utils && _this4.utils.hasLoadedNamespace && !_this4.utils.hasLoadedNamespace(usedNS)) {
            checkedLoadedFor["".concat(codes[0], "-").concat(ns)] = true;

            _this4.logger.warn("key \"".concat(usedKey, "\" for languages \"").concat(codes.join(', '), "\" won't get resolved as namespace \"").concat(usedNS, "\" was not yet loaded"), 'This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!');
          }

          codes.forEach(function (code) {
            if (_this4.isValidLookup(found)) return;
            usedLng = code;
            var finalKey = key;
            var finalKeys = [finalKey];

            if (_this4.i18nFormat && _this4.i18nFormat.addLookupKeys) {
              _this4.i18nFormat.addLookupKeys(finalKeys, key, code, ns, options);
            } else {
              var pluralSuffix;
              if (needsPluralHandling) pluralSuffix = _this4.pluralResolver.getSuffix(code, options.count);
              if (needsPluralHandling && needsContextHandling) finalKeys.push(finalKey + pluralSuffix);
              if (needsContextHandling) finalKeys.push(finalKey += "".concat(_this4.options.contextSeparator).concat(options.context));
              if (needsPluralHandling) finalKeys.push(finalKey += pluralSuffix);
            }

            var possibleKey;

            while (possibleKey = finalKeys.pop()) {
              if (!_this4.isValidLookup(found)) {
                exactUsedKey = possibleKey;
                found = _this4.getResource(code, ns, possibleKey, options);
              }
            }
          });
        });
      });
      return {
        res: found,
        usedKey: usedKey,
        exactUsedKey: exactUsedKey,
        usedLng: usedLng,
        usedNS: usedNS
      };
    }
  }, {
    key: "isValidLookup",
    value: function isValidLookup(res) {
      return res !== undefined && !(!this.options.returnNull && res === null) && !(!this.options.returnEmptyString && res === '');
    }
  }, {
    key: "getResource",
    value: function getResource(code, ns, key) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      if (this.i18nFormat && this.i18nFormat.getResource) return this.i18nFormat.getResource(code, ns, key, options);
      return this.resourceStore.getResource(code, ns, key, options);
    }
  }]);

  return Translator;
}(EventEmitter);

function capitalize(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}

var LanguageUtil = function () {
  function LanguageUtil(options) {
    _classCallCheck__default['default'](this, LanguageUtil);

    this.options = options;
    this.whitelist = this.options.supportedLngs || false;
    this.supportedLngs = this.options.supportedLngs || false;
    this.logger = baseLogger.create('languageUtils');
  }

  _createClass__default['default'](LanguageUtil, [{
    key: "getScriptPartFromCode",
    value: function getScriptPartFromCode(code) {
      if (!code || code.indexOf('-') < 0) return null;
      var p = code.split('-');
      if (p.length === 2) return null;
      p.pop();
      if (p[p.length - 1].toLowerCase() === 'x') return null;
      return this.formatLanguageCode(p.join('-'));
    }
  }, {
    key: "getLanguagePartFromCode",
    value: function getLanguagePartFromCode(code) {
      if (!code || code.indexOf('-') < 0) return code;
      var p = code.split('-');
      return this.formatLanguageCode(p[0]);
    }
  }, {
    key: "formatLanguageCode",
    value: function formatLanguageCode(code) {
      if (typeof code === 'string' && code.indexOf('-') > -1) {
        var specialCases = ['hans', 'hant', 'latn', 'cyrl', 'cans', 'mong', 'arab'];
        var p = code.split('-');

        if (this.options.lowerCaseLng) {
          p = p.map(function (part) {
            return part.toLowerCase();
          });
        } else if (p.length === 2) {
          p[0] = p[0].toLowerCase();
          p[1] = p[1].toUpperCase();
          if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());
        } else if (p.length === 3) {
          p[0] = p[0].toLowerCase();
          if (p[1].length === 2) p[1] = p[1].toUpperCase();
          if (p[0] !== 'sgn' && p[2].length === 2) p[2] = p[2].toUpperCase();
          if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());
          if (specialCases.indexOf(p[2].toLowerCase()) > -1) p[2] = capitalize(p[2].toLowerCase());
        }

        return p.join('-');
      }

      return this.options.cleanCode || this.options.lowerCaseLng ? code.toLowerCase() : code;
    }
  }, {
    key: "isWhitelisted",
    value: function isWhitelisted(code) {
      this.logger.deprecate('languageUtils.isWhitelisted', 'function "isWhitelisted" will be renamed to "isSupportedCode" in the next major - please make sure to rename it\'s usage asap.');
      return this.isSupportedCode(code);
    }
  }, {
    key: "isSupportedCode",
    value: function isSupportedCode(code) {
      if (this.options.load === 'languageOnly' || this.options.nonExplicitSupportedLngs) {
        code = this.getLanguagePartFromCode(code);
      }

      return !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(code) > -1;
    }
  }, {
    key: "getBestMatchFromCodes",
    value: function getBestMatchFromCodes(codes) {
      var _this = this;

      if (!codes) return null;
      var found;
      codes.forEach(function (code) {
        if (found) return;

        var cleanedLng = _this.formatLanguageCode(code);

        if (!_this.options.supportedLngs || _this.isSupportedCode(cleanedLng)) found = cleanedLng;
      });

      if (!found && this.options.supportedLngs) {
        codes.forEach(function (code) {
          if (found) return;

          var lngOnly = _this.getLanguagePartFromCode(code);

          if (_this.isSupportedCode(lngOnly)) return found = lngOnly;
          found = _this.options.supportedLngs.find(function (supportedLng) {
            if (supportedLng.indexOf(lngOnly) === 0) return supportedLng;
          });
        });
      }

      if (!found) found = this.getFallbackCodes(this.options.fallbackLng)[0];
      return found;
    }
  }, {
    key: "getFallbackCodes",
    value: function getFallbackCodes(fallbacks, code) {
      if (!fallbacks) return [];
      if (typeof fallbacks === 'function') fallbacks = fallbacks(code);
      if (typeof fallbacks === 'string') fallbacks = [fallbacks];
      if (Object.prototype.toString.apply(fallbacks) === '[object Array]') return fallbacks;
      if (!code) return fallbacks["default"] || [];
      var found = fallbacks[code];
      if (!found) found = fallbacks[this.getScriptPartFromCode(code)];
      if (!found) found = fallbacks[this.formatLanguageCode(code)];
      if (!found) found = fallbacks[this.getLanguagePartFromCode(code)];
      if (!found) found = fallbacks["default"];
      return found || [];
    }
  }, {
    key: "toResolveHierarchy",
    value: function toResolveHierarchy(code, fallbackCode) {
      var _this2 = this;

      var fallbackCodes = this.getFallbackCodes(fallbackCode || this.options.fallbackLng || [], code);
      var codes = [];

      var addCode = function addCode(c) {
        if (!c) return;

        if (_this2.isSupportedCode(c)) {
          codes.push(c);
        } else {
          _this2.logger.warn("rejecting language code not found in supportedLngs: ".concat(c));
        }
      };

      if (typeof code === 'string' && code.indexOf('-') > -1) {
        if (this.options.load !== 'languageOnly') addCode(this.formatLanguageCode(code));
        if (this.options.load !== 'languageOnly' && this.options.load !== 'currentOnly') addCode(this.getScriptPartFromCode(code));
        if (this.options.load !== 'currentOnly') addCode(this.getLanguagePartFromCode(code));
      } else if (typeof code === 'string') {
        addCode(this.formatLanguageCode(code));
      }

      fallbackCodes.forEach(function (fc) {
        if (codes.indexOf(fc) < 0) addCode(_this2.formatLanguageCode(fc));
      });
      return codes;
    }
  }]);

  return LanguageUtil;
}();

var sets = [{
  lngs: ['ach', 'ak', 'am', 'arn', 'br', 'fil', 'gun', 'ln', 'mfe', 'mg', 'mi', 'oc', 'pt', 'pt-BR', 'tg', 'ti', 'tr', 'uz', 'wa'],
  nr: [1, 2],
  fc: 1
}, {
  lngs: ['af', 'an', 'ast', 'az', 'bg', 'bn', 'ca', 'da', 'de', 'dev', 'el', 'en', 'eo', 'es', 'et', 'eu', 'fi', 'fo', 'fur', 'fy', 'gl', 'gu', 'ha', 'hi', 'hu', 'hy', 'ia', 'it', 'kn', 'ku', 'lb', 'mai', 'ml', 'mn', 'mr', 'nah', 'nap', 'nb', 'ne', 'nl', 'nn', 'no', 'nso', 'pa', 'pap', 'pms', 'ps', 'pt-PT', 'rm', 'sco', 'se', 'si', 'so', 'son', 'sq', 'sv', 'sw', 'ta', 'te', 'tk', 'ur', 'yo'],
  nr: [1, 2],
  fc: 2
}, {
  lngs: ['ay', 'bo', 'cgg', 'fa', 'ht', 'id', 'ja', 'jbo', 'ka', 'kk', 'km', 'ko', 'ky', 'lo', 'ms', 'sah', 'su', 'th', 'tt', 'ug', 'vi', 'wo', 'zh'],
  nr: [1],
  fc: 3
}, {
  lngs: ['be', 'bs', 'cnr', 'dz', 'hr', 'ru', 'sr', 'uk'],
  nr: [1, 2, 5],
  fc: 4
}, {
  lngs: ['ar'],
  nr: [0, 1, 2, 3, 11, 100],
  fc: 5
}, {
  lngs: ['cs', 'sk'],
  nr: [1, 2, 5],
  fc: 6
}, {
  lngs: ['csb', 'pl'],
  nr: [1, 2, 5],
  fc: 7
}, {
  lngs: ['cy'],
  nr: [1, 2, 3, 8],
  fc: 8
}, {
  lngs: ['fr'],
  nr: [1, 2],
  fc: 9
}, {
  lngs: ['ga'],
  nr: [1, 2, 3, 7, 11],
  fc: 10
}, {
  lngs: ['gd'],
  nr: [1, 2, 3, 20],
  fc: 11
}, {
  lngs: ['is'],
  nr: [1, 2],
  fc: 12
}, {
  lngs: ['jv'],
  nr: [0, 1],
  fc: 13
}, {
  lngs: ['kw'],
  nr: [1, 2, 3, 4],
  fc: 14
}, {
  lngs: ['lt'],
  nr: [1, 2, 10],
  fc: 15
}, {
  lngs: ['lv'],
  nr: [1, 2, 0],
  fc: 16
}, {
  lngs: ['mk'],
  nr: [1, 2],
  fc: 17
}, {
  lngs: ['mnk'],
  nr: [0, 1, 2],
  fc: 18
}, {
  lngs: ['mt'],
  nr: [1, 2, 11, 20],
  fc: 19
}, {
  lngs: ['or'],
  nr: [2, 1],
  fc: 2
}, {
  lngs: ['ro'],
  nr: [1, 2, 20],
  fc: 20
}, {
  lngs: ['sl'],
  nr: [5, 1, 2, 3],
  fc: 21
}, {
  lngs: ['he', 'iw'],
  nr: [1, 2, 20, 21],
  fc: 22
}];
var _rulesPluralsTypes = {
  1: function _(n) {
    return Number(n > 1);
  },
  2: function _(n) {
    return Number(n != 1);
  },
  3: function _(n) {
    return 0;
  },
  4: function _(n) {
    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
  },
  5: function _(n) {
    return Number(n == 0 ? 0 : n == 1 ? 1 : n == 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5);
  },
  6: function _(n) {
    return Number(n == 1 ? 0 : n >= 2 && n <= 4 ? 1 : 2);
  },
  7: function _(n) {
    return Number(n == 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
  },
  8: function _(n) {
    return Number(n == 1 ? 0 : n == 2 ? 1 : n != 8 && n != 11 ? 2 : 3);
  },
  9: function _(n) {
    return Number(n >= 2);
  },
  10: function _(n) {
    return Number(n == 1 ? 0 : n == 2 ? 1 : n < 7 ? 2 : n < 11 ? 3 : 4);
  },
  11: function _(n) {
    return Number(n == 1 || n == 11 ? 0 : n == 2 || n == 12 ? 1 : n > 2 && n < 20 ? 2 : 3);
  },
  12: function _(n) {
    return Number(n % 10 != 1 || n % 100 == 11);
  },
  13: function _(n) {
    return Number(n !== 0);
  },
  14: function _(n) {
    return Number(n == 1 ? 0 : n == 2 ? 1 : n == 3 ? 2 : 3);
  },
  15: function _(n) {
    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
  },
  16: function _(n) {
    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n !== 0 ? 1 : 2);
  },
  17: function _(n) {
    return Number(n == 1 || n % 10 == 1 && n % 100 != 11 ? 0 : 1);
  },
  18: function _(n) {
    return Number(n == 0 ? 0 : n == 1 ? 1 : 2);
  },
  19: function _(n) {
    return Number(n == 1 ? 0 : n == 0 || n % 100 > 1 && n % 100 < 11 ? 1 : n % 100 > 10 && n % 100 < 20 ? 2 : 3);
  },
  20: function _(n) {
    return Number(n == 1 ? 0 : n == 0 || n % 100 > 0 && n % 100 < 20 ? 1 : 2);
  },
  21: function _(n) {
    return Number(n % 100 == 1 ? 1 : n % 100 == 2 ? 2 : n % 100 == 3 || n % 100 == 4 ? 3 : 0);
  },
  22: function _(n) {
    return Number(n == 1 ? 0 : n == 2 ? 1 : (n < 0 || n > 10) && n % 10 == 0 ? 2 : 3);
  }
};

function createRules() {
  var rules = {};
  sets.forEach(function (set) {
    set.lngs.forEach(function (l) {
      rules[l] = {
        numbers: set.nr,
        plurals: _rulesPluralsTypes[set.fc]
      };
    });
  });
  return rules;
}

var PluralResolver = function () {
  function PluralResolver(languageUtils) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck__default['default'](this, PluralResolver);

    this.languageUtils = languageUtils;
    this.options = options;
    this.logger = baseLogger.create('pluralResolver');
    this.rules = createRules();
  }

  _createClass__default['default'](PluralResolver, [{
    key: "addRule",
    value: function addRule(lng, obj) {
      this.rules[lng] = obj;
    }
  }, {
    key: "getRule",
    value: function getRule(code) {
      return this.rules[code] || this.rules[this.languageUtils.getLanguagePartFromCode(code)];
    }
  }, {
    key: "needsPlural",
    value: function needsPlural(code) {
      var rule = this.getRule(code);
      return rule && rule.numbers.length > 1;
    }
  }, {
    key: "getPluralFormsOfKey",
    value: function getPluralFormsOfKey(code, key) {
      var _this = this;

      var ret = [];
      var rule = this.getRule(code);
      if (!rule) return ret;
      rule.numbers.forEach(function (n) {
        var suffix = _this.getSuffix(code, n);

        ret.push("".concat(key).concat(suffix));
      });
      return ret;
    }
  }, {
    key: "getSuffix",
    value: function getSuffix(code, count) {
      var _this2 = this;

      var rule = this.getRule(code);

      if (rule) {
        var idx = rule.noAbs ? rule.plurals(count) : rule.plurals(Math.abs(count));
        var suffix = rule.numbers[idx];

        if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
          if (suffix === 2) {
            suffix = 'plural';
          } else if (suffix === 1) {
            suffix = '';
          }
        }

        var returnSuffix = function returnSuffix() {
          return _this2.options.prepend && suffix.toString() ? _this2.options.prepend + suffix.toString() : suffix.toString();
        };

        if (this.options.compatibilityJSON === 'v1') {
          if (suffix === 1) return '';
          if (typeof suffix === 'number') return "_plural_".concat(suffix.toString());
          return returnSuffix();
        } else if (this.options.compatibilityJSON === 'v2') {
          return returnSuffix();
        } else if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
          return returnSuffix();
        }

        return this.options.prepend && idx.toString() ? this.options.prepend + idx.toString() : idx.toString();
      }

      this.logger.warn("no plural rule found for: ".concat(code));
      return '';
    }
  }]);

  return PluralResolver;
}();

var Interpolator = function () {
  function Interpolator() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck__default['default'](this, Interpolator);

    this.logger = baseLogger.create('interpolator');
    this.options = options;

    this.format = options.interpolation && options.interpolation.format || function (value) {
      return value;
    };

    this.init(options);
  }

  _createClass__default['default'](Interpolator, [{
    key: "init",
    value: function init() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      if (!options.interpolation) options.interpolation = {
        escapeValue: true
      };
      var iOpts = options.interpolation;
      this.escape = iOpts.escape !== undefined ? iOpts.escape : escape;
      this.escapeValue = iOpts.escapeValue !== undefined ? iOpts.escapeValue : true;
      this.useRawValueToEscape = iOpts.useRawValueToEscape !== undefined ? iOpts.useRawValueToEscape : false;
      this.prefix = iOpts.prefix ? regexEscape(iOpts.prefix) : iOpts.prefixEscaped || '{{';
      this.suffix = iOpts.suffix ? regexEscape(iOpts.suffix) : iOpts.suffixEscaped || '}}';
      this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || ',';
      this.unescapePrefix = iOpts.unescapeSuffix ? '' : iOpts.unescapePrefix || '-';
      this.unescapeSuffix = this.unescapePrefix ? '' : iOpts.unescapeSuffix || '';
      this.nestingPrefix = iOpts.nestingPrefix ? regexEscape(iOpts.nestingPrefix) : iOpts.nestingPrefixEscaped || regexEscape('$t(');
      this.nestingSuffix = iOpts.nestingSuffix ? regexEscape(iOpts.nestingSuffix) : iOpts.nestingSuffixEscaped || regexEscape(')');
      this.nestingOptionsSeparator = iOpts.nestingOptionsSeparator ? iOpts.nestingOptionsSeparator : iOpts.nestingOptionsSeparator || ',';
      this.maxReplaces = iOpts.maxReplaces ? iOpts.maxReplaces : 1000;
      this.alwaysFormat = iOpts.alwaysFormat !== undefined ? iOpts.alwaysFormat : false;
      this.resetRegExp();
    }
  }, {
    key: "reset",
    value: function reset() {
      if (this.options) this.init(this.options);
    }
  }, {
    key: "resetRegExp",
    value: function resetRegExp() {
      var regexpStr = "".concat(this.prefix, "(.+?)").concat(this.suffix);
      this.regexp = new RegExp(regexpStr, 'g');
      var regexpUnescapeStr = "".concat(this.prefix).concat(this.unescapePrefix, "(.+?)").concat(this.unescapeSuffix).concat(this.suffix);
      this.regexpUnescape = new RegExp(regexpUnescapeStr, 'g');
      var nestingRegexpStr = "".concat(this.nestingPrefix, "(.+?)").concat(this.nestingSuffix);
      this.nestingRegexp = new RegExp(nestingRegexpStr, 'g');
    }
  }, {
    key: "interpolate",
    value: function interpolate(str, data, lng, options) {
      var _this = this;

      var match;
      var value;
      var replaces;
      var defaultData = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {};

      function regexSafe(val) {
        return val.replace(/\$/g, '$$$$');
      }

      var handleFormat = function handleFormat(key) {
        if (key.indexOf(_this.formatSeparator) < 0) {
          var path = getPathWithDefaults(data, defaultData, key);
          return _this.alwaysFormat ? _this.format(path, undefined, lng) : path;
        }

        var p = key.split(_this.formatSeparator);
        var k = p.shift().trim();
        var f = p.join(_this.formatSeparator).trim();
        return _this.format(getPathWithDefaults(data, defaultData, k), f, lng, options);
      };

      this.resetRegExp();
      var missingInterpolationHandler = options && options.missingInterpolationHandler || this.options.missingInterpolationHandler;
      var skipOnVariables = options && options.interpolation && options.interpolation.skipOnVariables || this.options.interpolation.skipOnVariables;
      var todos = [{
        regex: this.regexpUnescape,
        safeValue: function safeValue(val) {
          return regexSafe(val);
        }
      }, {
        regex: this.regexp,
        safeValue: function safeValue(val) {
          return _this.escapeValue ? regexSafe(_this.escape(val)) : regexSafe(val);
        }
      }];
      todos.forEach(function (todo) {
        replaces = 0;

        while (match = todo.regex.exec(str)) {
          value = handleFormat(match[1].trim());

          if (value === undefined) {
            if (typeof missingInterpolationHandler === 'function') {
              var temp = missingInterpolationHandler(str, match, options);
              value = typeof temp === 'string' ? temp : '';
            } else if (skipOnVariables) {
              value = match[0];
              continue;
            } else {
              _this.logger.warn("missed to pass in variable ".concat(match[1], " for interpolating ").concat(str));

              value = '';
            }
          } else if (typeof value !== 'string' && !_this.useRawValueToEscape) {
            value = makeString(value);
          }

          str = str.replace(match[0], todo.safeValue(value));
          todo.regex.lastIndex = 0;
          replaces++;

          if (replaces >= _this.maxReplaces) {
            break;
          }
        }
      });
      return str;
    }
  }, {
    key: "nest",
    value: function nest(str, fc) {
      var _this2 = this;

      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var match;
      var value;

      var clonedOptions = _objectSpread__default['default']({}, options);

      clonedOptions.applyPostProcessor = false;
      delete clonedOptions.defaultValue;

      function handleHasOptions(key, inheritedOptions) {
        var sep = this.nestingOptionsSeparator;
        if (key.indexOf(sep) < 0) return key;
        var c = key.split(new RegExp("".concat(sep, "[ ]*{")));
        var optionsString = "{".concat(c[1]);
        key = c[0];
        optionsString = this.interpolate(optionsString, clonedOptions);
        optionsString = optionsString.replace(/'/g, '"');

        try {
          clonedOptions = JSON.parse(optionsString);
          if (inheritedOptions) clonedOptions = _objectSpread__default['default']({}, inheritedOptions, clonedOptions);
        } catch (e) {
          this.logger.warn("failed parsing options string in nesting for key ".concat(key), e);
          return "".concat(key).concat(sep).concat(optionsString);
        }

        delete clonedOptions.defaultValue;
        return key;
      }

      while (match = this.nestingRegexp.exec(str)) {
        var formatters = [];
        var doReduce = false;

        if (match[0].includes(this.formatSeparator) && !/{.*}/.test(match[1])) {
          var r = match[1].split(this.formatSeparator).map(function (elem) {
            return elem.trim();
          });
          match[1] = r.shift();
          formatters = r;
          doReduce = true;
        }

        value = fc(handleHasOptions.call(this, match[1].trim(), clonedOptions), clonedOptions);
        if (value && match[0] === str && typeof value !== 'string') return value;
        if (typeof value !== 'string') value = makeString(value);

        if (!value) {
          this.logger.warn("missed to resolve ".concat(match[1], " for nesting ").concat(str));
          value = '';
        }

        if (doReduce) {
          value = formatters.reduce(function (v, f) {
            return _this2.format(v, f, options.lng, options);
          }, value.trim());
        }

        str = str.replace(match[0], value);
        this.regexp.lastIndex = 0;
      }

      return str;
    }
  }]);

  return Interpolator;
}();

function remove(arr, what) {
  var found = arr.indexOf(what);

  while (found !== -1) {
    arr.splice(found, 1);
    found = arr.indexOf(what);
  }
}

var Connector = function (_EventEmitter) {
  _inherits__default['default'](Connector, _EventEmitter);

  function Connector(backend, store, services) {
    var _this;

    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

    _classCallCheck__default['default'](this, Connector);

    _this = _possibleConstructorReturn__default['default'](this, _getPrototypeOf__default['default'](Connector).call(this));

    if (isIE10) {
      EventEmitter.call(_assertThisInitialized__default['default'](_this));
    }

    _this.backend = backend;
    _this.store = store;
    _this.services = services;
    _this.languageUtils = services.languageUtils;
    _this.options = options;
    _this.logger = baseLogger.create('backendConnector');
    _this.state = {};
    _this.queue = [];

    if (_this.backend && _this.backend.init) {
      _this.backend.init(services, options.backend, options);
    }

    return _this;
  }

  _createClass__default['default'](Connector, [{
    key: "queueLoad",
    value: function queueLoad(languages, namespaces, options, callback) {
      var _this2 = this;

      var toLoad = [];
      var pending = [];
      var toLoadLanguages = [];
      var toLoadNamespaces = [];
      languages.forEach(function (lng) {
        var hasAllNamespaces = true;
        namespaces.forEach(function (ns) {
          var name = "".concat(lng, "|").concat(ns);

          if (!options.reload && _this2.store.hasResourceBundle(lng, ns)) {
            _this2.state[name] = 2;
          } else if (_this2.state[name] < 0) ; else if (_this2.state[name] === 1) {
            if (pending.indexOf(name) < 0) pending.push(name);
          } else {
            _this2.state[name] = 1;
            hasAllNamespaces = false;
            if (pending.indexOf(name) < 0) pending.push(name);
            if (toLoad.indexOf(name) < 0) toLoad.push(name);
            if (toLoadNamespaces.indexOf(ns) < 0) toLoadNamespaces.push(ns);
          }
        });
        if (!hasAllNamespaces) toLoadLanguages.push(lng);
      });

      if (toLoad.length || pending.length) {
        this.queue.push({
          pending: pending,
          loaded: {},
          errors: [],
          callback: callback
        });
      }

      return {
        toLoad: toLoad,
        pending: pending,
        toLoadLanguages: toLoadLanguages,
        toLoadNamespaces: toLoadNamespaces
      };
    }
  }, {
    key: "loaded",
    value: function loaded(name, err, data) {
      var s = name.split('|');
      var lng = s[0];
      var ns = s[1];
      if (err) this.emit('failedLoading', lng, ns, err);

      if (data) {
        this.store.addResourceBundle(lng, ns, data);
      }

      this.state[name] = err ? -1 : 2;
      var loaded = {};
      this.queue.forEach(function (q) {
        pushPath(q.loaded, [lng], ns);
        remove(q.pending, name);
        if (err) q.errors.push(err);

        if (q.pending.length === 0 && !q.done) {
          Object.keys(q.loaded).forEach(function (l) {
            if (!loaded[l]) loaded[l] = [];

            if (q.loaded[l].length) {
              q.loaded[l].forEach(function (ns) {
                if (loaded[l].indexOf(ns) < 0) loaded[l].push(ns);
              });
            }
          });
          q.done = true;

          if (q.errors.length) {
            q.callback(q.errors);
          } else {
            q.callback();
          }
        }
      });
      this.emit('loaded', loaded);
      this.queue = this.queue.filter(function (q) {
        return !q.done;
      });
    }
  }, {
    key: "read",
    value: function read(lng, ns, fcName) {
      var _this3 = this;

      var tried = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var wait = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 350;
      var callback = arguments.length > 5 ? arguments[5] : undefined;
      if (!lng.length) return callback(null, {});
      return this.backend[fcName](lng, ns, function (err, data) {
        if (err && data && tried < 5) {
          setTimeout(function () {
            _this3.read.call(_this3, lng, ns, fcName, tried + 1, wait * 2, callback);
          }, wait);
          return;
        }

        callback(err, data);
      });
    }
  }, {
    key: "prepareLoading",
    value: function prepareLoading(languages, namespaces) {
      var _this4 = this;

      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var callback = arguments.length > 3 ? arguments[3] : undefined;

      if (!this.backend) {
        this.logger.warn('No backend was added via i18next.use. Will not load resources.');
        return callback && callback();
      }

      if (typeof languages === 'string') languages = this.languageUtils.toResolveHierarchy(languages);
      if (typeof namespaces === 'string') namespaces = [namespaces];
      var toLoad = this.queueLoad(languages, namespaces, options, callback);

      if (!toLoad.toLoad.length) {
        if (!toLoad.pending.length) callback();
        return null;
      }

      toLoad.toLoad.forEach(function (name) {
        _this4.loadOne(name);
      });
    }
  }, {
    key: "load",
    value: function load(languages, namespaces, callback) {
      this.prepareLoading(languages, namespaces, {}, callback);
    }
  }, {
    key: "reload",
    value: function reload(languages, namespaces, callback) {
      this.prepareLoading(languages, namespaces, {
        reload: true
      }, callback);
    }
  }, {
    key: "loadOne",
    value: function loadOne(name) {
      var _this5 = this;

      var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      var s = name.split('|');
      var lng = s[0];
      var ns = s[1];
      this.read(lng, ns, 'read', undefined, undefined, function (err, data) {
        if (err) _this5.logger.warn("".concat(prefix, "loading namespace ").concat(ns, " for language ").concat(lng, " failed"), err);
        if (!err && data) _this5.logger.log("".concat(prefix, "loaded namespace ").concat(ns, " for language ").concat(lng), data);

        _this5.loaded(name, err, data);
      });
    }
  }, {
    key: "saveMissing",
    value: function saveMissing(languages, namespace, key, fallbackValue, isUpdate) {
      var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};

      if (this.services.utils && this.services.utils.hasLoadedNamespace && !this.services.utils.hasLoadedNamespace(namespace)) {
        this.logger.warn("did not save key \"".concat(key, "\" as the namespace \"").concat(namespace, "\" was not yet loaded"), 'This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!');
        return;
      }

      if (key === undefined || key === null || key === '') return;

      if (this.backend && this.backend.create) {
        this.backend.create(languages, namespace, key, fallbackValue, null, _objectSpread__default['default']({}, options, {
          isUpdate: isUpdate
        }));
      }

      if (!languages || !languages[0]) return;
      this.store.addResource(languages[0], namespace, key, fallbackValue);
    }
  }]);

  return Connector;
}(EventEmitter);

function get() {
  return {
    debug: false,
    initImmediate: true,
    ns: ['translation'],
    defaultNS: ['translation'],
    fallbackLng: ['dev'],
    fallbackNS: false,
    whitelist: false,
    nonExplicitWhitelist: false,
    supportedLngs: false,
    nonExplicitSupportedLngs: false,
    load: 'all',
    preload: false,
    simplifyPluralSuffix: true,
    keySeparator: '.',
    nsSeparator: ':',
    pluralSeparator: '_',
    contextSeparator: '_',
    partialBundledLanguages: false,
    saveMissing: false,
    updateMissing: false,
    saveMissingTo: 'fallback',
    saveMissingPlurals: true,
    missingKeyHandler: false,
    missingInterpolationHandler: false,
    postProcess: false,
    postProcessPassResolved: false,
    returnNull: true,
    returnEmptyString: true,
    returnObjects: false,
    joinArrays: false,
    returnedObjectHandler: false,
    parseMissingKeyHandler: false,
    appendNamespaceToMissingKey: false,
    appendNamespaceToCIMode: false,
    overloadTranslationOptionHandler: function handle(args) {
      var ret = {};
      if (_typeof__default['default'](args[1]) === 'object') ret = args[1];
      if (typeof args[1] === 'string') ret.defaultValue = args[1];
      if (typeof args[2] === 'string') ret.tDescription = args[2];

      if (_typeof__default['default'](args[2]) === 'object' || _typeof__default['default'](args[3]) === 'object') {
        var options = args[3] || args[2];
        Object.keys(options).forEach(function (key) {
          ret[key] = options[key];
        });
      }

      return ret;
    },
    interpolation: {
      escapeValue: true,
      format: function format(value, _format, lng, options) {
        return value;
      },
      prefix: '{{',
      suffix: '}}',
      formatSeparator: ',',
      unescapePrefix: '-',
      nestingPrefix: '$t(',
      nestingSuffix: ')',
      nestingOptionsSeparator: ',',
      maxReplaces: 1000,
      skipOnVariables: false
    }
  };
}
function transformOptions(options) {
  if (typeof options.ns === 'string') options.ns = [options.ns];
  if (typeof options.fallbackLng === 'string') options.fallbackLng = [options.fallbackLng];
  if (typeof options.fallbackNS === 'string') options.fallbackNS = [options.fallbackNS];

  if (options.whitelist) {
    if (options.whitelist && options.whitelist.indexOf('cimode') < 0) {
      options.whitelist = options.whitelist.concat(['cimode']);
    }

    options.supportedLngs = options.whitelist;
  }

  if (options.nonExplicitWhitelist) {
    options.nonExplicitSupportedLngs = options.nonExplicitWhitelist;
  }

  if (options.supportedLngs && options.supportedLngs.indexOf('cimode') < 0) {
    options.supportedLngs = options.supportedLngs.concat(['cimode']);
  }

  return options;
}

function noop() {}

var I18n = function (_EventEmitter) {
  _inherits__default['default'](I18n, _EventEmitter);

  function I18n() {
    var _this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var callback = arguments.length > 1 ? arguments[1] : undefined;

    _classCallCheck__default['default'](this, I18n);

    _this = _possibleConstructorReturn__default['default'](this, _getPrototypeOf__default['default'](I18n).call(this));

    if (isIE10) {
      EventEmitter.call(_assertThisInitialized__default['default'](_this));
    }

    _this.options = transformOptions(options);
    _this.services = {};
    _this.logger = baseLogger;
    _this.modules = {
      external: []
    };

    if (callback && !_this.isInitialized && !options.isClone) {
      if (!_this.options.initImmediate) {
        _this.init(options, callback);

        return _possibleConstructorReturn__default['default'](_this, _assertThisInitialized__default['default'](_this));
      }

      setTimeout(function () {
        _this.init(options, callback);
      }, 0);
    }

    return _this;
  }

  _createClass__default['default'](I18n, [{
    key: "init",
    value: function init() {
      var _this2 = this;

      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var callback = arguments.length > 1 ? arguments[1] : undefined;

      if (typeof options === 'function') {
        callback = options;
        options = {};
      }

      if (options.whitelist && !options.supportedLngs) {
        this.logger.deprecate('whitelist', 'option "whitelist" will be renamed to "supportedLngs" in the next major - please make sure to rename this option asap.');
      }

      if (options.nonExplicitWhitelist && !options.nonExplicitSupportedLngs) {
        this.logger.deprecate('whitelist', 'options "nonExplicitWhitelist" will be renamed to "nonExplicitSupportedLngs" in the next major - please make sure to rename this option asap.');
      }

      this.options = _objectSpread__default['default']({}, get(), this.options, transformOptions(options));
      this.format = this.options.interpolation.format;
      if (!callback) callback = noop;

      function createClassOnDemand(ClassOrObject) {
        if (!ClassOrObject) return null;
        if (typeof ClassOrObject === 'function') return new ClassOrObject();
        return ClassOrObject;
      }

      if (!this.options.isClone) {
        if (this.modules.logger) {
          baseLogger.init(createClassOnDemand(this.modules.logger), this.options);
        } else {
          baseLogger.init(null, this.options);
        }

        var lu = new LanguageUtil(this.options);
        this.store = new ResourceStore(this.options.resources, this.options);
        var s = this.services;
        s.logger = baseLogger;
        s.resourceStore = this.store;
        s.languageUtils = lu;
        s.pluralResolver = new PluralResolver(lu, {
          prepend: this.options.pluralSeparator,
          compatibilityJSON: this.options.compatibilityJSON,
          simplifyPluralSuffix: this.options.simplifyPluralSuffix
        });
        s.interpolator = new Interpolator(this.options);
        s.utils = {
          hasLoadedNamespace: this.hasLoadedNamespace.bind(this)
        };
        s.backendConnector = new Connector(createClassOnDemand(this.modules.backend), s.resourceStore, s, this.options);
        s.backendConnector.on('*', function (event) {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }

          _this2.emit.apply(_this2, [event].concat(args));
        });

        if (this.modules.languageDetector) {
          s.languageDetector = createClassOnDemand(this.modules.languageDetector);
          s.languageDetector.init(s, this.options.detection, this.options);
        }

        if (this.modules.i18nFormat) {
          s.i18nFormat = createClassOnDemand(this.modules.i18nFormat);
          if (s.i18nFormat.init) s.i18nFormat.init(this);
        }

        this.translator = new Translator(this.services, this.options);
        this.translator.on('*', function (event) {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }

          _this2.emit.apply(_this2, [event].concat(args));
        });
        this.modules.external.forEach(function (m) {
          if (m.init) m.init(_this2);
        });
      }

      if (this.options.fallbackLng && !this.services.languageDetector && !this.options.lng) {
        var codes = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
        if (codes.length > 0 && codes[0] !== 'dev') this.options.lng = codes[0];
      }

      if (!this.services.languageDetector && !this.options.lng) {
        this.logger.warn('init: no languageDetector is used and no lng is defined');
      }

      var storeApi = ['getResource', 'hasResourceBundle', 'getResourceBundle', 'getDataByLanguage'];
      storeApi.forEach(function (fcName) {
        _this2[fcName] = function () {
          var _this2$store;

          return (_this2$store = _this2.store)[fcName].apply(_this2$store, arguments);
        };
      });
      var storeApiChained = ['addResource', 'addResources', 'addResourceBundle', 'removeResourceBundle'];
      storeApiChained.forEach(function (fcName) {
        _this2[fcName] = function () {
          var _this2$store2;

          (_this2$store2 = _this2.store)[fcName].apply(_this2$store2, arguments);

          return _this2;
        };
      });
      var deferred = defer();

      var load = function load() {
        _this2.changeLanguage(_this2.options.lng, function (err, t) {
          _this2.isInitialized = true;
          if (!_this2.options.isClone) _this2.logger.log('initialized', _this2.options);

          _this2.emit('initialized', _this2.options);

          deferred.resolve(t);
          callback(err, t);
        });
      };

      if (this.options.resources || !this.options.initImmediate) {
        load();
      } else {
        setTimeout(load, 0);
      }

      return deferred;
    }
  }, {
    key: "loadResources",
    value: function loadResources(language) {
      var _this3 = this;

      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;
      var usedCallback = callback;
      var usedLng = typeof language === 'string' ? language : this.language;
      if (typeof language === 'function') usedCallback = language;

      if (!this.options.resources || this.options.partialBundledLanguages) {
        if (usedLng && usedLng.toLowerCase() === 'cimode') return usedCallback();
        var toLoad = [];

        var append = function append(lng) {
          if (!lng) return;

          var lngs = _this3.services.languageUtils.toResolveHierarchy(lng);

          lngs.forEach(function (l) {
            if (toLoad.indexOf(l) < 0) toLoad.push(l);
          });
        };

        if (!usedLng) {
          var fallbacks = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
          fallbacks.forEach(function (l) {
            return append(l);
          });
        } else {
          append(usedLng);
        }

        if (this.options.preload) {
          this.options.preload.forEach(function (l) {
            return append(l);
          });
        }

        this.services.backendConnector.load(toLoad, this.options.ns, usedCallback);
      } else {
        usedCallback(null);
      }
    }
  }, {
    key: "reloadResources",
    value: function reloadResources(lngs, ns, callback) {
      var deferred = defer();
      if (!lngs) lngs = this.languages;
      if (!ns) ns = this.options.ns;
      if (!callback) callback = noop;
      this.services.backendConnector.reload(lngs, ns, function (err) {
        deferred.resolve();
        callback(err);
      });
      return deferred;
    }
  }, {
    key: "use",
    value: function use(module) {
      if (!module) throw new Error('You are passing an undefined module! Please check the object you are passing to i18next.use()');
      if (!module.type) throw new Error('You are passing a wrong module! Please check the object you are passing to i18next.use()');

      if (module.type === 'backend') {
        this.modules.backend = module;
      }

      if (module.type === 'logger' || module.log && module.warn && module.error) {
        this.modules.logger = module;
      }

      if (module.type === 'languageDetector') {
        this.modules.languageDetector = module;
      }

      if (module.type === 'i18nFormat') {
        this.modules.i18nFormat = module;
      }

      if (module.type === 'postProcessor') {
        postProcessor.addPostProcessor(module);
      }

      if (module.type === '3rdParty') {
        this.modules.external.push(module);
      }

      return this;
    }
  }, {
    key: "changeLanguage",
    value: function changeLanguage(lng, callback) {
      var _this4 = this;

      this.isLanguageChangingTo = lng;
      var deferred = defer();
      this.emit('languageChanging', lng);

      var done = function done(err, l) {
        if (l) {
          _this4.language = l;
          _this4.languages = _this4.services.languageUtils.toResolveHierarchy(l);

          _this4.translator.changeLanguage(l);

          _this4.isLanguageChangingTo = undefined;

          _this4.emit('languageChanged', l);

          _this4.logger.log('languageChanged', l);
        } else {
          _this4.isLanguageChangingTo = undefined;
        }

        deferred.resolve(function () {
          return _this4.t.apply(_this4, arguments);
        });
        if (callback) callback(err, function () {
          return _this4.t.apply(_this4, arguments);
        });
      };

      var setLng = function setLng(lngs) {
        var l = typeof lngs === 'string' ? lngs : _this4.services.languageUtils.getBestMatchFromCodes(lngs);

        if (l) {
          if (!_this4.language) {
            _this4.language = l;
            _this4.languages = _this4.services.languageUtils.toResolveHierarchy(l);
          }

          if (!_this4.translator.language) _this4.translator.changeLanguage(l);
          if (_this4.services.languageDetector) _this4.services.languageDetector.cacheUserLanguage(l);
        }

        _this4.loadResources(l, function (err) {
          done(err, l);
        });
      };

      if (!lng && this.services.languageDetector && !this.services.languageDetector.async) {
        setLng(this.services.languageDetector.detect());
      } else if (!lng && this.services.languageDetector && this.services.languageDetector.async) {
        this.services.languageDetector.detect(setLng);
      } else {
        setLng(lng);
      }

      return deferred;
    }
  }, {
    key: "getFixedT",
    value: function getFixedT(lng, ns) {
      var _this5 = this;

      var fixedT = function fixedT(key, opts) {
        var options;

        if (_typeof__default['default'](opts) !== 'object') {
          for (var _len3 = arguments.length, rest = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
            rest[_key3 - 2] = arguments[_key3];
          }

          options = _this5.options.overloadTranslationOptionHandler([key, opts].concat(rest));
        } else {
          options = _objectSpread__default['default']({}, opts);
        }

        options.lng = options.lng || fixedT.lng;
        options.lngs = options.lngs || fixedT.lngs;
        options.ns = options.ns || fixedT.ns;
        return _this5.t(key, options);
      };

      if (typeof lng === 'string') {
        fixedT.lng = lng;
      } else {
        fixedT.lngs = lng;
      }

      fixedT.ns = ns;
      return fixedT;
    }
  }, {
    key: "t",
    value: function t() {
      var _this$translator;

      return this.translator && (_this$translator = this.translator).translate.apply(_this$translator, arguments);
    }
  }, {
    key: "exists",
    value: function exists() {
      var _this$translator2;

      return this.translator && (_this$translator2 = this.translator).exists.apply(_this$translator2, arguments);
    }
  }, {
    key: "setDefaultNamespace",
    value: function setDefaultNamespace(ns) {
      this.options.defaultNS = ns;
    }
  }, {
    key: "hasLoadedNamespace",
    value: function hasLoadedNamespace(ns) {
      var _this6 = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (!this.isInitialized) {
        this.logger.warn('hasLoadedNamespace: i18next was not initialized', this.languages);
        return false;
      }

      if (!this.languages || !this.languages.length) {
        this.logger.warn('hasLoadedNamespace: i18n.languages were undefined or empty', this.languages);
        return false;
      }

      var lng = this.languages[0];
      var fallbackLng = this.options ? this.options.fallbackLng : false;
      var lastLng = this.languages[this.languages.length - 1];
      if (lng.toLowerCase() === 'cimode') return true;

      var loadNotPending = function loadNotPending(l, n) {
        var loadState = _this6.services.backendConnector.state["".concat(l, "|").concat(n)];

        return loadState === -1 || loadState === 2;
      };

      if (options.precheck) {
        var preResult = options.precheck(this, loadNotPending);
        if (preResult !== undefined) return preResult;
      }

      if (this.hasResourceBundle(lng, ns)) return true;
      if (!this.services.backendConnector.backend) return true;
      if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns))) return true;
      return false;
    }
  }, {
    key: "loadNamespaces",
    value: function loadNamespaces(ns, callback) {
      var _this7 = this;

      var deferred = defer();

      if (!this.options.ns) {
        callback && callback();
        return Promise.resolve();
      }

      if (typeof ns === 'string') ns = [ns];
      ns.forEach(function (n) {
        if (_this7.options.ns.indexOf(n) < 0) _this7.options.ns.push(n);
      });
      this.loadResources(function (err) {
        deferred.resolve();
        if (callback) callback(err);
      });
      return deferred;
    }
  }, {
    key: "loadLanguages",
    value: function loadLanguages(lngs, callback) {
      var deferred = defer();
      if (typeof lngs === 'string') lngs = [lngs];
      var preloaded = this.options.preload || [];
      var newLngs = lngs.filter(function (lng) {
        return preloaded.indexOf(lng) < 0;
      });

      if (!newLngs.length) {
        if (callback) callback();
        return Promise.resolve();
      }

      this.options.preload = preloaded.concat(newLngs);
      this.loadResources(function (err) {
        deferred.resolve();
        if (callback) callback(err);
      });
      return deferred;
    }
  }, {
    key: "dir",
    value: function dir(lng) {
      if (!lng) lng = this.languages && this.languages.length > 0 ? this.languages[0] : this.language;
      if (!lng) return 'rtl';
      var rtlLngs = ['ar', 'shu', 'sqr', 'ssh', 'xaa', 'yhd', 'yud', 'aao', 'abh', 'abv', 'acm', 'acq', 'acw', 'acx', 'acy', 'adf', 'ads', 'aeb', 'aec', 'afb', 'ajp', 'apc', 'apd', 'arb', 'arq', 'ars', 'ary', 'arz', 'auz', 'avl', 'ayh', 'ayl', 'ayn', 'ayp', 'bbz', 'pga', 'he', 'iw', 'ps', 'pbt', 'pbu', 'pst', 'prp', 'prd', 'ug', 'ur', 'ydd', 'yds', 'yih', 'ji', 'yi', 'hbo', 'men', 'xmn', 'fa', 'jpr', 'peo', 'pes', 'prs', 'dv', 'sam'];
      return rtlLngs.indexOf(this.services.languageUtils.getLanguagePartFromCode(lng)) >= 0 ? 'rtl' : 'ltr';
    }
  }, {
    key: "createInstance",
    value: function createInstance() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var callback = arguments.length > 1 ? arguments[1] : undefined;
      return new I18n(options, callback);
    }
  }, {
    key: "cloneInstance",
    value: function cloneInstance() {
      var _this8 = this;

      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;

      var mergedOptions = _objectSpread__default['default']({}, this.options, options, {
        isClone: true
      });

      var clone = new I18n(mergedOptions);
      var membersToCopy = ['store', 'services', 'language'];
      membersToCopy.forEach(function (m) {
        clone[m] = _this8[m];
      });
      clone.services = _objectSpread__default['default']({}, this.services);
      clone.services.utils = {
        hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
      };
      clone.translator = new Translator(clone.services, clone.options);
      clone.translator.on('*', function (event) {
        for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
          args[_key4 - 1] = arguments[_key4];
        }

        clone.emit.apply(clone, [event].concat(args));
      });
      clone.init(mergedOptions, callback);
      clone.translator.options = clone.options;
      clone.translator.backendConnector.services.utils = {
        hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
      };
      return clone;
    }
  }]);

  return I18n;
}(EventEmitter);

var i18next = new I18n();

module.exports = i18next;


/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),

/***/ "./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery JavaScript Library v3.5.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2020-05-04T22:49Z
 */
( function( global, factory ) {

	"use strict";

	if (  true && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var flat = arr.flat ? function( array ) {
	return arr.flat.call( array );
} : function( array ) {
	return arr.concat.apply( [], array );
};


var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

      // Support: Chrome <=57, Firefox <=52
      // In some browsers, typeof returns "function" for HTML <object> elements
      // (i.e., `typeof document.createElement( "object" ) === "function"`).
      // We don't want to classify *any* DOM node as a function.
      return typeof obj === "function" && typeof obj.nodeType !== "number";
  };


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};


var document = window.document;



	var preservedScriptAttributes = {
		type: true,
		src: true,
		nonce: true,
		noModule: true
	};

	function DOMEval( code, node, doc ) {
		doc = doc || document;

		var i, val,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {

				// Support: Firefox 64+, Edge 18+
				// Some browsers don't support the "nonce" property on scripts.
				// On the other hand, just using `getAttribute` is not enough as
				// the `nonce` attribute is reset to an empty string whenever it
				// becomes browsing-context connected.
				// See https://github.com/whatwg/html/issues/2369
				// See https://html.spec.whatwg.org/#nonce-attributes
				// The `node.getAttribute` check was added for the sake of
				// `jQuery.globalEval` so that it can fake a nonce-containing node
				// via an object.
				val = node[ i ] || node.getAttribute && node.getAttribute( i );
				if ( val ) {
					script.setAttribute( i, val );
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.5.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	even: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return ( i + 1 ) % 2;
		} ) );
	},

	odd: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return i % 2;
		} ) );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				copy = options[ name ];

				// Prevent Object.prototype pollution
				// Prevent never-ending loop
				if ( name === "__proto__" || target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {
					src = target[ name ];

					// Ensure proper type for the source value
					if ( copyIsArray && !Array.isArray( src ) ) {
						clone = [];
					} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {
						clone = {};
					} else {
						clone = src;
					}
					copyIsArray = false;

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a provided context; falls back to the global one
	// if not specified.
	globalEval: function( code, options, doc ) {
		DOMEval( code, { nonce: options && options.nonce }, doc );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return flat( ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( _i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.5
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2020-03-14
 */
( function( window ) {
var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	nonnativeSelectorCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ( {} ).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	pushNative = arr.push,
	push = arr.push,
	slice = arr.slice,

	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[ i ] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|" +
		"ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
	identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace +
		"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +

		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +

		// "Attribute values must be CSS identifiers [capture 5]
		// or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" +
		whitespace + "*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +

		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +

		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +

		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" +
		whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace +
		"*" ),
	rdescend = new RegExp( whitespace + "|>" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" +
			whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" +
			whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),

		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace +
			"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace +
			"*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rhtml = /HTML$/i,
	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g" ),
	funescape = function( escape, nonHex ) {
		var high = "0x" + escape.slice( 1 ) - 0x10000;

		return nonHex ?

			// Strip the backslash prefix from a non-hex escape sequence
			nonHex :

			// Replace a hexadecimal escape sequence with the encoded Unicode code point
			// Support: IE <=11+
			// For values outside the Basic Multilingual Plane (BMP), manually construct a
			// surrogate pair
			high < 0 ?
				String.fromCharCode( high + 0x10000 ) :
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" +
				ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	inDisabledFieldset = addCombinator(
		function( elem ) {
			return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		( arr = slice.call( preferredDoc.childNodes ) ),
		preferredDoc.childNodes
	);

	// Support: Android<4.0
	// Detect silently failing push.apply
	// eslint-disable-next-line no-unused-expressions
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			pushNative.apply( target, slice.call( els ) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;

			// Can't trust NodeList.length
			while ( ( target[ j++ ] = els[ i++ ] ) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {
		setDocument( context );
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {

				// ID selector
				if ( ( m = match[ 1 ] ) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( ( elem = context.getElementById( m ) ) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && ( elem = newContext.getElementById( m ) ) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[ 2 ] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( ( m = match[ 3 ] ) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!nonnativeSelectorCache[ selector + " " ] &&
				( !rbuggyQSA || !rbuggyQSA.test( selector ) ) &&

				// Support: IE 8 only
				// Exclude object elements
				( nodeType !== 1 || context.nodeName.toLowerCase() !== "object" ) ) {

				newSelector = selector;
				newContext = context;

				// qSA considers elements outside a scoping root when evaluating child or
				// descendant combinators, which is not what we want.
				// In such cases, we work around the behavior by prefixing every selector in the
				// list with an ID selector referencing the scope context.
				// The technique has to be used as well when a leading combinator is used
				// as such selectors are not recognized by querySelectorAll.
				// Thanks to Andrew Dupont for this technique.
				if ( nodeType === 1 &&
					( rdescend.test( selector ) || rcombinators.test( selector ) ) ) {

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;

					// We can use :scope instead of the ID hack if the browser
					// supports it & if we're not changing the context.
					if ( newContext !== context || !support.scope ) {

						// Capture the context ID, setting it first if necessary
						if ( ( nid = context.getAttribute( "id" ) ) ) {
							nid = nid.replace( rcssescape, fcssescape );
						} else {
							context.setAttribute( "id", ( nid = expando ) );
						}
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[ i ] = ( nid ? "#" + nid : ":scope" ) + " " +
							toSelector( groups[ i ] );
					}
					newSelector = groups.join( "," );
				}

				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch ( qsaError ) {
					nonnativeSelectorCache( selector, true );
				} finally {
					if ( nid === expando ) {
						context.removeAttribute( "id" );
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {

		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {

			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return ( cache[ key + " " ] = value );
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement( "fieldset" );

	try {
		return !!fn( el );
	} catch ( e ) {
		return false;
	} finally {

		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}

		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split( "|" ),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[ i ] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( ( cur = cur.nextSibling ) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return ( name === "input" || name === "button" ) && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
					inDisabledFieldset( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction( function( argument ) {
		argument = +argument;
		return markFunction( function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ ( j = matchIndexes[ i ] ) ] ) {
					seed[ j ] = !( matches[ j ] = seed[ j ] );
				}
			}
		} );
	} );
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	var namespace = elem.namespaceURI,
		docElem = ( elem.ownerDocument || elem ).documentElement;

	// Support: IE <=8
	// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
	// https://bugs.jquery.com/ticket/4833
	return !rhtml.test( namespace || docElem && docElem.nodeName || "HTML" );
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9 - 11+, Edge 12 - 18+
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( preferredDoc != document &&
		( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	// Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,
	// Safari 4 - 5 only, Opera <=11.6 - 12.x only
	// IE/Edge & older browsers don't support the :scope pseudo-class.
	// Support: Safari 6.0 only
	// Safari 6.0 supports :scope but it's an alias of :root there.
	support.scope = assert( function( el ) {
		docElem.appendChild( el ).appendChild( document.createElement( "div" ) );
		return typeof el.querySelectorAll !== "undefined" &&
			!el.querySelectorAll( ":scope fieldset div" ).length;
	} );

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert( function( el ) {
		el.className = "i";
		return !el.getAttribute( "className" );
	} );

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert( function( el ) {
		el.appendChild( document.createComment( "" ) );
		return !el.getElementsByTagName( "*" ).length;
	} );

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert( function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	} );

	// ID filter and find
	if ( support.getById ) {
		Expr.filter[ "ID" ] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute( "id" ) === attrId;
			};
		};
		Expr.find[ "ID" ] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter[ "ID" ] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode( "id" );
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find[ "ID" ] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode( "id" );
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( ( elem = elems[ i++ ] ) ) {
						node = elem.getAttributeNode( "id" );
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find[ "TAG" ] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,

				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( ( elem = results[ i++ ] ) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find[ "CLASS" ] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( ( support.qsa = rnative.test( document.querySelectorAll ) ) ) {

		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert( function( el ) {

			var input;

			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll( "[msallowcapture^='']" ).length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll( "[selected]" ).length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push( "~=" );
			}

			// Support: IE 11+, Edge 15 - 18+
			// IE 11/Edge don't find elements on a `[name='']` query in some cases.
			// Adding a temporary attribute to the document before the selection works
			// around the issue.
			// Interestingly, IE 10 & older don't seem to have the issue.
			input = document.createElement( "input" );
			input.setAttribute( "name", "" );
			el.appendChild( input );
			if ( !el.querySelectorAll( "[name='']" ).length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*name" + whitespace + "*=" +
					whitespace + "*(?:''|\"\")" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll( ":checked" ).length ) {
				rbuggyQSA.push( ":checked" );
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push( ".#.+[+~]" );
			}

			// Support: Firefox <=3.6 - 5 only
			// Old Firefox doesn't throw on a badly-escaped identifier.
			el.querySelectorAll( "\\\f" );
			rbuggyQSA.push( "[\\r\\n\\f]" );
		} );

		assert( function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement( "input" );
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll( "[name=d]" ).length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll( ":enabled" ).length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll( ":disabled" ).length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: Opera 10 - 11 only
			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll( "*,:x" );
			rbuggyQSA.push( ",.*:" );
		} );
	}

	if ( ( support.matchesSelector = rnative.test( ( matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector ) ) ) ) {

		assert( function( el ) {

			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		} );
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( "|" ) );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join( "|" ) );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			) );
		} :
		function( a, b ) {
			if ( b ) {
				while ( ( b = b.parentNode ) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		// Support: IE 11+, Edge 17 - 18+
		// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
		// two documents; shallow comparisons work.
		// eslint-disable-next-line eqeqeq
		compare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {

			// Choose the first element that is related to our preferred document
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( a == document || a.ownerDocument == preferredDoc &&
				contains( preferredDoc, a ) ) {
				return -1;
			}

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( b == document || b.ownerDocument == preferredDoc &&
				contains( preferredDoc, b ) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {

		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			/* eslint-disable eqeqeq */
			return a == document ? -1 :
				b == document ? 1 :
				/* eslint-enable eqeqeq */
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( ( cur = cur.parentNode ) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( ( cur = cur.parentNode ) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[ i ] === bp[ i ] ) {
			i++;
		}

		return i ?

			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[ i ], bp[ i ] ) :

			// Otherwise nodes in our document sort first
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			/* eslint-disable eqeqeq */
			ap[ i ] == preferredDoc ? -1 :
			bp[ i ] == preferredDoc ? 1 :
			/* eslint-enable eqeqeq */
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	setDocument( elem );

	if ( support.matchesSelector && documentIsHTML &&
		!nonnativeSelectorCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||

				// As well, disconnected nodes are said to be in a document
				// fragment in IE 9
				elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch ( e ) {
			nonnativeSelectorCache( expr, true );
		}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( context.ownerDocument || context ) != document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( elem.ownerDocument || elem ) != document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],

		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			( val = elem.getAttributeNode( name ) ) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return ( sel + "" ).replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( ( elem = results[ i++ ] ) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {

		// If no nodeType, this is expected to be an array
		while ( ( node = elem[ i++ ] ) ) {

			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {

		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {

			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}

	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[ 1 ] = match[ 1 ].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[ 3 ] = ( match[ 3 ] || match[ 4 ] ||
				match[ 5 ] || "" ).replace( runescape, funescape );

			if ( match[ 2 ] === "~=" ) {
				match[ 3 ] = " " + match[ 3 ] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {

			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[ 1 ] = match[ 1 ].toLowerCase();

			if ( match[ 1 ].slice( 0, 3 ) === "nth" ) {

				// nth-* requires argument
				if ( !match[ 3 ] ) {
					Sizzle.error( match[ 0 ] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[ 4 ] = +( match[ 4 ] ?
					match[ 5 ] + ( match[ 6 ] || 1 ) :
					2 * ( match[ 3 ] === "even" || match[ 3 ] === "odd" ) );
				match[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === "odd" );

				// other types prohibit arguments
			} else if ( match[ 3 ] ) {
				Sizzle.error( match[ 0 ] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[ 6 ] && match[ 2 ];

			if ( matchExpr[ "CHILD" ].test( match[ 0 ] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[ 3 ] ) {
				match[ 2 ] = match[ 4 ] || match[ 5 ] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&

				// Get excess from tokenize (recursively)
				( excess = tokenize( unquoted, true ) ) &&

				// advance to the next closing parenthesis
				( excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length ) ) {

				// excess is a negative index
				match[ 0 ] = match[ 0 ].slice( 0, excess );
				match[ 2 ] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() {
					return true;
				} :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				( pattern = new RegExp( "(^|" + whitespace +
					")" + className + "(" + whitespace + "|$)" ) ) && classCache(
						className, function( elem ) {
							return pattern.test(
								typeof elem.className === "string" && elem.className ||
								typeof elem.getAttribute !== "undefined" &&
									elem.getAttribute( "class" ) ||
								""
							);
				} );
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				/* eslint-disable max-len */

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
				/* eslint-enable max-len */

			};
		},

		"CHILD": function( type, what, _argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, _context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( ( node = node[ dir ] ) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}

								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || ( node[ expando ] = {} );

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								( outerCache[ node.uniqueID ] = {} );

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( ( node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								( diff = nodeIndex = 0 ) || start.pop() ) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {

							// Use previously-cached element index if available
							if ( useCache ) {

								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || ( node[ expando ] = {} );

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									( outerCache[ node.uniqueID ] = {} );

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {

								// Use the same loop as above to seek `elem` from the start
								while ( ( node = ++nodeIndex && node && node[ dir ] ||
									( diff = nodeIndex = 0 ) || start.pop() ) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] ||
												( node[ expando ] = {} );

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												( outerCache[ node.uniqueID ] = {} );

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {

			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction( function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[ i ] );
							seed[ idx ] = !( matches[ idx ] = matched[ i ] );
						}
					} ) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {

		// Potentially complex pseudos
		"not": markFunction( function( selector ) {

			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction( function( seed, matches, _context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( ( elem = unmatched[ i ] ) ) {
							seed[ i ] = !( matches[ i ] = elem );
						}
					}
				} ) :
				function( elem, _context, xml ) {
					input[ 0 ] = elem;
					matcher( input, null, xml, results );

					// Don't keep the element (issue #299)
					input[ 0 ] = null;
					return !results.pop();
				};
		} ),

		"has": markFunction( function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		} ),

		"contains": markFunction( function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;
			};
		} ),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {

			// lang value must be a valid identifier
			if ( !ridentifier.test( lang || "" ) ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( ( elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute( "xml:lang" ) || elem.getAttribute( "lang" ) ) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );
				return false;
			};
		} ),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement &&
				( !document.hasFocus || document.hasFocus() ) &&
				!!( elem.type || elem.href || ~elem.tabIndex );
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {

			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return ( nodeName === "input" && !!elem.checked ) ||
				( nodeName === "option" && !!elem.selected );
		},

		"selected": function( elem ) {

			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				// eslint-disable-next-line no-unused-expressions
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {

			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos[ "empty" ]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( ( attr = elem.getAttribute( "type" ) ) == null ||
					attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo( function() {
			return [ 0 ];
		} ),

		"last": createPositionalPseudo( function( _matchIndexes, length ) {
			return [ length - 1 ];
		} ),

		"eq": createPositionalPseudo( function( _matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		} ),

		"even": createPositionalPseudo( function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"odd": createPositionalPseudo( function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"lt": createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ?
				argument + length :
				argument > length ?
					length :
					argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"gt": createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} )
	}
};

Expr.pseudos[ "nth" ] = Expr.pseudos[ "eq" ];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || ( match = rcomma.exec( soFar ) ) ) {
			if ( match ) {

				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[ 0 ].length ) || soFar;
			}
			groups.push( ( tokens = [] ) );
		}

		matched = false;

		// Combinators
		if ( ( match = rcombinators.exec( soFar ) ) ) {
			matched = match.shift();
			tokens.push( {
				value: matched,

				// Cast descendant combinators to space
				type: match[ 0 ].replace( rtrim, " " )
			} );
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||
				( match = preFilters[ type ]( match ) ) ) ) {
				matched = match.shift();
				tokens.push( {
					value: matched,
					type: type,
					matches: match
				} );
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :

			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[ i ].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?

		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( ( elem = elem[ dir ] ) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || ( elem[ expando ] = {} );

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] ||
							( outerCache[ elem.uniqueID ] = {} );

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( ( oldCache = uniqueCache[ key ] ) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return ( newCache[ 2 ] = oldCache[ 2 ] );
						} else {

							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[ i ]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[ 0 ];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[ i ], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( ( elem = unmatched[ i ] ) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction( function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts(
				selector || "*",
				context.nodeType ? [ context ] : context,
				[]
			),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?

				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( ( elem = temp[ i ] ) ) {
					matcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {

					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( ( elem = matcherOut[ i ] ) ) {

							// Restore matcherIn since elem is not yet a final match
							temp.push( ( matcherIn[ i ] = elem ) );
						}
					}
					postFinder( null, ( matcherOut = [] ), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( ( elem = matcherOut[ i ] ) &&
						( temp = postFinder ? indexOf( seed, elem ) : preMap[ i ] ) > -1 ) {

						seed[ temp ] = !( results[ temp ] = elem );
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	} );
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[ 0 ].type ],
		implicitRelative = leadingRelative || Expr.relative[ " " ],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				( checkContext = context ).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );

			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {
			matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];
		} else {
			matcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {

				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[ j ].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(

					// If the preceding token was a descendant combinator, insert an implicit any-element `*`
					tokens
						.slice( 0, i - 1 )
						.concat( { value: tokens[ i - 2 ].type === " " ? "*" : "" } )
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,

				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find[ "TAG" ]( "*", outermost ),

				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),
				len = elems.length;

			if ( outermost ) {

				// Support: IE 11+, Edge 17 - 18+
				// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
				// two documents; shallow comparisons work.
				// eslint-disable-next-line eqeqeq
				outermostContext = context == document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;

					// Support: IE 11+, Edge 17 - 18+
					// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
					// two documents; shallow comparisons work.
					// eslint-disable-next-line eqeqeq
					if ( !context && elem.ownerDocument != document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( ( matcher = elementMatchers[ j++ ] ) ) {
						if ( matcher( elem, context || document, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {

					// They will have gone through all possible matchers
					if ( ( elem = !matcher && elem ) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( ( matcher = setMatchers[ j++ ] ) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {

					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !( unmatched[ i ] || setMatched[ i ] ) ) {
								setMatched[ i ] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {

		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[ i ] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache(
			selector,
			matcherFromGroupMatchers( elementMatchers, setMatchers )
		);

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( ( selector = compiled.selector || selector ) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[ 0 ] = match[ 0 ].slice( 0 );
		if ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === "ID" &&
			context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {

			context = ( Expr.find[ "ID" ]( token.matches[ 0 ]
				.replace( runescape, funescape ), context ) || [] )[ 0 ];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr[ "needsContext" ].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[ i ];

			// Abort if we hit a combinator
			if ( Expr.relative[ ( type = token.type ) ] ) {
				break;
			}
			if ( ( find = Expr.find[ type ] ) ) {

				// Search, expanding context for leading sibling combinators
				if ( ( seed = find(
					token.matches[ 0 ].replace( runescape, funescape ),
					rsibling.test( tokens[ 0 ].type ) && testContext( context.parentNode ) ||
						context
				) ) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split( "" ).sort( sortOrder ).join( "" ) === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert( function( el ) {

	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement( "fieldset" ) ) & 1;
} );

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert( function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute( "href" ) === "#";
} ) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	} );
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert( function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
} ) ) {
	addHandle( "value", function( elem, _name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	} );
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert( function( el ) {
	return el.getAttribute( "disabled" ) == null;
} ) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
				( val = elem.getAttributeNode( name ) ) && val.specified ?
					val.value :
					null;
		}
	} );
}

return Sizzle;

} )( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

};
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, _i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, _i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, _i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		if ( elem.contentDocument != null &&

			// Support: IE 11+
			// <object> elements with no `data` attribute has an object
			// `contentDocument` with a `null` prototype.
			getProto( elem.contentDocument ) ) {

			return elem.contentDocument;
		}

		// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
		// Treat the template element as a regular one in browsers that
		// don't support it.
		if ( nodeName( elem, "template" ) ) {
			elem = elem.content || elem;
		}

		return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( _i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, _key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( _all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (#9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var documentElement = document.documentElement;



	var isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem );
		},
		composed = { composed: true };

	// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
	// Check attachment across shadow DOM boundaries when possible (gh-3504)
	// Support: iOS 10.0-10.2 only
	// Early iOS 10 versions support `attachShadow` but not `getRootNode`,
	// leading to errors. We need to check for `getRootNode`.
	if ( documentElement.getRootNode ) {
		isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem ) ||
				elem.getRootNode( composed ) === elem.ownerDocument;
		};
	}
var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			isAttached( elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};



function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = elem.nodeType &&
			( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]*)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

	// Support: IE <=9 only
	// IE <=9 replaces <option> tags with their contents when inserted outside of
	// the select element.
	div.innerHTML = "<option></option>";
	support.option = !!div.lastChild;
} )();


// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// Support: IE <=9 only
if ( !support.option ) {
	wrapMap.optgroup = wrapMap.option = [ 1, "<select multiple='multiple'>", "</select>" ];
}


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, attached, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		attached = isAttached( elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( attached ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 - 11+
// focus() and blur() are asynchronous, except when they are no-op.
// So expect focus to be synchronous when the element is already active,
// and blur to be synchronous when the element is not already active.
// (focus and blur are always synchronous in other supported browsers,
// this just defines when we can count on it).
function expectSync( elem, type ) {
	return ( elem === safeActiveElement() ) === ( type === "focus" );
}

// Support: IE <=9 only
// Accessing document.activeElement can throw unexpectedly
// https://bugs.jquery.com/ticket/13393
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Only attach events to objects that accept data
		if ( !acceptData( elem ) ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = Object.create( null );
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( nativeEvent ),

			handlers = (
					dataPriv.get( this, "events" ) || Object.create( null )
				)[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// If the event is namespaced, then each handler is only invoked if it is
				// specially universal or its namespaces are a superset of the event's.
				if ( !event.rnamespace || handleObj.namespace === false ||
					event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		click: {

			// Utilize native event to ensure correct state for checkable inputs
			setup: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Claim the first handler
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					// dataPriv.set( el, "click", ... )
					leverageNative( el, "click", returnTrue );
				}

				// Return false to allow normal processing in the caller
				return false;
			},
			trigger: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Force setup before triggering a click
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					leverageNative( el, "click" );
				}

				// Return non-false to allow normal event-path propagation
				return true;
			},

			// For cross-browser consistency, suppress native .click() on links
			// Also prevent it if we're currently inside a leveraged native-event stack
			_default: function( event ) {
				var target = event.target;
				return rcheckableType.test( target.type ) &&
					target.click && nodeName( target, "input" ) &&
					dataPriv.get( target, "click" ) ||
					nodeName( target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

// Ensure the presence of an event listener that handles manually-triggered
// synthetic events by interrupting progress until reinvoked in response to
// *native* events that it fires directly, ensuring that state changes have
// already occurred before other listeners are invoked.
function leverageNative( el, type, expectSync ) {

	// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
	if ( !expectSync ) {
		if ( dataPriv.get( el, type ) === undefined ) {
			jQuery.event.add( el, type, returnTrue );
		}
		return;
	}

	// Register the controller as a special universal handler for all event namespaces
	dataPriv.set( el, type, false );
	jQuery.event.add( el, type, {
		namespace: false,
		handler: function( event ) {
			var notAsync, result,
				saved = dataPriv.get( this, type );

			if ( ( event.isTrigger & 1 ) && this[ type ] ) {

				// Interrupt processing of the outer synthetic .trigger()ed event
				// Saved data should be false in such cases, but might be a leftover capture object
				// from an async native handler (gh-4350)
				if ( !saved.length ) {

					// Store arguments for use when handling the inner native event
					// There will always be at least one argument (an event object), so this array
					// will not be confused with a leftover capture object.
					saved = slice.call( arguments );
					dataPriv.set( this, type, saved );

					// Trigger the native event and capture its result
					// Support: IE <=9 - 11+
					// focus() and blur() are asynchronous
					notAsync = expectSync( this, type );
					this[ type ]();
					result = dataPriv.get( this, type );
					if ( saved !== result || notAsync ) {
						dataPriv.set( this, type, false );
					} else {
						result = {};
					}
					if ( saved !== result ) {

						// Cancel the outer synthetic event
						event.stopImmediatePropagation();
						event.preventDefault();
						return result.value;
					}

				// If this is an inner synthetic event for an event with a bubbling surrogate
				// (focus or blur), assume that the surrogate already propagated from triggering the
				// native event and prevent that from happening again here.
				// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
				// bubbling surrogate propagates *after* the non-bubbling base), but that seems
				// less bad than duplication.
				} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {
					event.stopPropagation();
				}

			// If this is a native event triggered above, everything is now in order
			// Fire an inner synthetic event with the original arguments
			} else if ( saved.length ) {

				// ...and capture the result
				dataPriv.set( this, type, {
					value: jQuery.event.trigger(

						// Support: IE <=9 - 11+
						// Extend with the prototype to reset the above stopImmediatePropagation()
						jQuery.extend( saved[ 0 ], jQuery.Event.prototype ),
						saved.slice( 1 ),
						this
					)
				} );

				// Abort handling of the native event
				event.stopImmediatePropagation();
			}
		}
	} );
}

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	code: true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			if ( button & 1 ) {
				return 1;
			}

			if ( button & 2 ) {
				return 3;
			}

			if ( button & 4 ) {
				return 2;
			}

			return 0;
		}

		return event.which;
	}
}, jQuery.event.addProp );

jQuery.each( { focus: "focusin", blur: "focusout" }, function( type, delegateType ) {
	jQuery.event.special[ type ] = {

		// Utilize native event if possible so blur/focus sequence is correct
		setup: function() {

			// Claim the first handler
			// dataPriv.set( this, "focus", ... )
			// dataPriv.set( this, "blur", ... )
			leverageNative( this, type, expectSync );

			// Return false to allow normal processing in the caller
			return false;
		},
		trigger: function() {

			// Force setup before trigger
			leverageNative( this, type );

			// Return non-false to allow normal event-path propagation
			return true;
		},

		delegateType: delegateType
	};
} );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.get( src );
		events = pdataOld.events;

		if ( events ) {
			dataPriv.remove( dest, "handle events" );

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = flat( args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl && !node.noModule ) {
								jQuery._evalUrl( node.src, {
									nonce: node.nonce || node.getAttribute( "nonce" )
								}, doc );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), node, doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && isAttached( node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html;
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = isAttached( elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var swap = function( elem, options, callback ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.call( elem );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		// Support: Chrome <=64
		// Don't get tricked when zoom affects offsetWidth (gh-4029)
		div.style.position = "absolute";
		scrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableTrDimensionsVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		},

		// Support: IE 9 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Behavior in IE 9 is more subtle than in newer versions & it passes
		// some versions of this test; make sure not to make it pass there!
		reliableTrDimensions: function() {
			var table, tr, trChild, trStyle;
			if ( reliableTrDimensionsVal == null ) {
				table = document.createElement( "table" );
				tr = document.createElement( "tr" );
				trChild = document.createElement( "div" );

				table.style.cssText = "position:absolute;left:-11111px";
				tr.style.height = "1px";
				trChild.style.height = "9px";

				documentElement
					.appendChild( table )
					.appendChild( tr )
					.appendChild( trChild );

				trStyle = window.getComputedStyle( tr );
				reliableTrDimensionsVal = parseInt( trStyle.height ) > 3;

				documentElement.removeChild( table );
			}
			return reliableTrDimensionsVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !isAttached( elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style,
	vendorProps = {};

// Return a vendor-prefixed property or undefined
function vendorPropName( name ) {

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a potentially-mapped jQuery.cssProps or vendor prefixed property
function finalPropName( name ) {
	var final = jQuery.cssProps[ name ] || vendorProps[ name ];

	if ( final ) {
		return final;
	}
	if ( name in emptyStyle ) {
		return name;
	}
	return vendorProps[ name ] = vendorPropName( name ) || name;
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	};

function setPositiveNumber( _elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		if ( box === "margin" ) {
			delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5

		// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
		// Use an explicit zero to avoid NaN (gh-3964)
		) ) || 0;
	}

	return delta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),

		// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
		// Fake content-box until we know it's needed to know the true value.
		boxSizingNeeded = !support.boxSizingReliable() || extra,
		isBorderBox = boxSizingNeeded &&
			jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox,

		val = curCSS( elem, dimension, styles ),
		offsetProp = "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}


	// Support: IE 9 - 11 only
	// Use offsetWidth/offsetHeight for when box sizing is unreliable.
	// In those cases, the computed value can be trusted to be border-box.
	if ( ( !support.boxSizingReliable() && isBorderBox ||

		// Support: IE 10 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Interestingly, in some cases IE 9 doesn't suffer from this issue.
		!support.reliableTrDimensions() && nodeName( elem, "tr" ) ||

		// Fall back to offsetWidth/offsetHeight when value is "auto"
		// This happens for inline elements with no explicit setting (gh-3571)
		val === "auto" ||

		// Support: Android <=4.1 - 4.3 only
		// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) &&

		// Make sure the element is visible & connected
		elem.getClientRects().length ) {

		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Where available, offsetWidth/offsetHeight approximate border box dimensions.
		// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
		// retrieved value as a content box dimension.
		valueIsBorderBox = offsetProp in elem;
		if ( valueIsBorderBox ) {
			val = elem[ offsetProp ];
		}
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"gridArea": true,
		"gridColumn": true,
		"gridColumnEnd": true,
		"gridColumnStart": true,
		"gridRow": true,
		"gridRowEnd": true,
		"gridRowStart": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
			// "px" to a few hardcoded values.
			if ( type === "number" && !isCustomProp ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( _i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, dimension, extra );
						} ) :
						getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),

				// Only read styles.position if the test has a chance to fail
				// to avoid forcing a reflow.
				scrollboxSizeBuggy = !support.scrollboxSize() &&
					styles.position === "absolute",

				// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
				boxSizingNeeded = scrollboxSizeBuggy || extra,
				isBorderBox = boxSizingNeeded &&
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra ?
					boxModelAdjustment(
						elem,
						dimension,
						extra,
						isBorderBox,
						styles
					) :
					0;

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && scrollboxSizeBuggy ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 && (
					jQuery.cssHooks[ tween.prop ] ||
					tween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

			/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( _i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( _i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( isValidValue ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = classesToArray( value );

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
					return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


support.focusin = "onfocusin" in window;


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = (
					dataPriv.get( cur, "events" ) || Object.create( null )
				)[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {

				// Handle: regular nodes (via `this.ownerDocument`), window
				// (via `this.document`) & document (via `this`).
				var doc = this.ownerDocument || this.document || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this.document || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = { guid: Date.now() };

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	if ( a == null ) {
		return "";
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( _i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() + " " ] =
									( responseHeaders[ match[ 1 ].toLowerCase() + " " ] || [] )
										.concat( match[ 2 ] );
							}
						}
						match = responseHeaders[ key.toLowerCase() + " " ];
					}
					return match == null ? null : match.join( ", " );
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce.guid++ ) +
					uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Use a noop converter for missing script
			if ( !isSuccess && jQuery.inArray( "script", s.dataTypes ) > -1 ) {
				s.converters[ "text script" ] = function() {};
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( _i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );

jQuery.ajaxPrefilter( function( s ) {
	var i;
	for ( i in s.headers ) {
		if ( i.toLowerCase() === "content-type" ) {
			s.contentType = s.headers[ i ] || "";
		}
	}
} );


jQuery._evalUrl = function( url, options, doc ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,

		// Only evaluate the response if it is successful (gh-4126)
		// dataFilter is not invoked for failure responses, so using it instead
		// of the default converter is kludgy but it works.
		converters: {
			"text script": function() {}
		},
		dataFilter: function( response ) {
			jQuery.globalEval( response, options, doc );
		}
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain or forced-by-attrs requests
	if ( s.crossDomain || s.scriptAttrs ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" )
					.attr( s.scriptAttrs || {} )
					.prop( { charset: s.scriptCharset, src: s.url } )
					.on( "load error", callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					} );

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce.guid++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			if ( typeof props.top === "number" ) {
				props.top += "px";
			}
			if ( typeof props.left === "number" ) {
				props.left += "px";
			}
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( _i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( _i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	},

	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );

jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( _i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	} );




// Support: Android <=4.0 only
// Make sure we trim BOM and NBSP
var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};

jQuery.trim = function( text ) {
	return text == null ?
		"" :
		( text + "" ).replace( rtrim, "" );
};



// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( true ) {
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
		return jQuery;
	}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === "undefined" ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );


/***/ }),

/***/ "./node_modules/jszip-utils/lib/index.js":
/*!***********************************************!*\
  !*** ./node_modules/jszip-utils/lib/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*globals Promise */

var JSZipUtils = {};
// just use the responseText with xhr1, response with xhr2.
// The transformation doesn't throw away high-order byte (with responseText)
// because JSZip handles that case. If not used with JSZip, you may need to
// do it, see https://developer.mozilla.org/En/Using_XMLHttpRequest#Handling_binary_data
JSZipUtils._getBinaryFromXHR = function (xhr) {
    // for xhr.responseText, the 0xFF mask is applied by JSZip
    return xhr.response || xhr.responseText;
};

// taken from jQuery
function createStandardXHR() {
    try {
        return new window.XMLHttpRequest();
    } catch( e ) {}
}

function createActiveXHR() {
    try {
        return new window.ActiveXObject("Microsoft.XMLHTTP");
    } catch( e ) {}
}

// Create the request object
var createXHR = (typeof window !== "undefined" && window.ActiveXObject) ?
    /* Microsoft failed to properly
     * implement the XMLHttpRequest in IE7 (can't request local files),
     * so we use the ActiveXObject when it is available
     * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
     * we need a fallback.
     */
    function() {
    return createStandardXHR() || createActiveXHR();
} :
    // For all other browsers, use the standard XMLHttpRequest object
    createStandardXHR;


/**
 * @param  {string} path    The path to the resource to GET.
 * @param  {function|{callback: function, progress: function}} options
 * @return {Promise|undefined} If no callback is passed then a promise is returned
 */
JSZipUtils.getBinaryContent = function (path, options) {
    var promise, resolve, reject;
    var callback;

    if (!options) {
        options = {};
    }

    // backward compatible callback
    if (typeof options === "function") {
        callback = options;
        options = {};
    } else if (typeof options.callback === 'function') {
        // callback inside options object
        callback = options.callback;
    }

    if (!callback && typeof Promise !== "undefined") {
        promise = new Promise(function (_resolve, _reject) {
            resolve = _resolve;
            reject = _reject;
        });
    } else {
        resolve = function (data) { callback(null, data); };
        reject = function (err) { callback(err, null); };
    }

    /*
     * Here is the tricky part : getting the data.
     * In firefox/chrome/opera/... setting the mimeType to 'text/plain; charset=x-user-defined'
     * is enough, the result is in the standard xhr.responseText.
     * cf https://developer.mozilla.org/En/XMLHttpRequest/Using_XMLHttpRequest#Receiving_binary_data_in_older_browsers
     * In IE <= 9, we must use (the IE only) attribute responseBody
     * (for binary data, its content is different from responseText).
     * In IE 10, the 'charset=x-user-defined' trick doesn't work, only the
     * responseType will work :
     * http://msdn.microsoft.com/en-us/library/ie/hh673569%28v=vs.85%29.aspx#Binary_Object_upload_and_download
     *
     * I'd like to use jQuery to avoid this XHR madness, but it doesn't support
     * the responseType attribute : http://bugs.jquery.com/ticket/11461
     */
    try {
        var xhr = createXHR();

        xhr.open('GET', path, true);

        // recent browsers
        if ("responseType" in xhr) {
            xhr.responseType = "arraybuffer";
        }

        // older browser
        if(xhr.overrideMimeType) {
            xhr.overrideMimeType("text/plain; charset=x-user-defined");
        }

        xhr.onreadystatechange = function (event) {
            // use `xhr` and not `this`... thanks IE
            if (xhr.readyState === 4) {
                if (xhr.status === 200 || xhr.status === 0) {
                    try {
                        resolve(JSZipUtils._getBinaryFromXHR(xhr));
                    } catch(err) {
                        reject(new Error(err));
                    }
                } else {
                    reject(new Error("Ajax error for " + path + " : " + this.status + " " + this.statusText));
                }
            }
        };

        if(options.progress) {
            xhr.onprogress = function(e) {
                options.progress({
                    path: path,
                    originalEvent: e,
                    percent: e.loaded / e.total * 100,
                    loaded: e.loaded,
                    total: e.total
                });
            };
        }

        xhr.send();

    } catch (e) {
        reject(new Error(e), null);
    }

    // returns a promise or undefined depending on whether a callback was
    // provided
    return promise;
};

// export
module.exports = JSZipUtils;

// enforcing Stuk's coding style
// vim: set shiftwidth=4 softtabstop=4:


/***/ }),

/***/ "./node_modules/jszip/dist/jszip.min.js":
/*!**********************************************!*\
  !*** ./node_modules/jszip/dist/jszip.min.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, Buffer, setImmediate) {var require;var require;/*!

JSZip v3.6.0 - A JavaScript class for generating and reading zip files
<http://stuartk.com/jszip>

(c) 2009-2016 Stuart Knightley <stuart [at] stuartk.com>
Dual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/master/LICENSE.markdown.

JSZip uses the library pako released under the MIT license :
https://github.com/nodeca/pako/blob/master/LICENSE
*/

!function(e){if(true)module.exports=e();else {}}(function(){return function s(a,o,u){function h(r,e){if(!o[r]){if(!a[r]){var t="function"==typeof require&&require;if(!e&&t)return require(r,!0);if(f)return f(r,!0);var n=new Error("Cannot find module '"+r+"'");throw n.code="MODULE_NOT_FOUND",n}var i=o[r]={exports:{}};a[r][0].call(i.exports,function(e){var t=a[r][1][e];return h(t||e)},i,i.exports,s,a,o,u)}return o[r].exports}for(var f="function"==typeof require&&require,e=0;e<u.length;e++)h(u[e]);return h}({1:[function(l,t,n){(function(r){!function(e){"object"==typeof n&&void 0!==t?t.exports=e():("undefined"!=typeof window?window:void 0!==r?r:"undefined"!=typeof self?self:this).JSZip=e()}(function(){return function s(a,o,u){function h(t,e){if(!o[t]){if(!a[t]){var r="function"==typeof l&&l;if(!e&&r)return r(t,!0);if(f)return f(t,!0);var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}var i=o[t]={exports:{}};a[t][0].call(i.exports,function(e){return h(a[t][1][e]||e)},i,i.exports,s,a,o,u)}return o[t].exports}for(var f="function"==typeof l&&l,e=0;e<u.length;e++)h(u[e]);return h}({1:[function(l,t,n){(function(r){!function(e){"object"==typeof n&&void 0!==t?t.exports=e():("undefined"!=typeof window?window:void 0!==r?r:"undefined"!=typeof self?self:this).JSZip=e()}(function(){return function s(a,o,u){function h(t,e){if(!o[t]){if(!a[t]){var r="function"==typeof l&&l;if(!e&&r)return r(t,!0);if(f)return f(t,!0);var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}var i=o[t]={exports:{}};a[t][0].call(i.exports,function(e){return h(a[t][1][e]||e)},i,i.exports,s,a,o,u)}return o[t].exports}for(var f="function"==typeof l&&l,e=0;e<u.length;e++)h(u[e]);return h}({1:[function(l,t,n){(function(r){!function(e){"object"==typeof n&&void 0!==t?t.exports=e():("undefined"!=typeof window?window:void 0!==r?r:"undefined"!=typeof self?self:this).JSZip=e()}(function(){return function s(a,o,u){function h(t,e){if(!o[t]){if(!a[t]){var r="function"==typeof l&&l;if(!e&&r)return r(t,!0);if(f)return f(t,!0);var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}var i=o[t]={exports:{}};a[t][0].call(i.exports,function(e){return h(a[t][1][e]||e)},i,i.exports,s,a,o,u)}return o[t].exports}for(var f="function"==typeof l&&l,e=0;e<u.length;e++)h(u[e]);return h}({1:[function(l,t,n){(function(r){!function(e){"object"==typeof n&&void 0!==t?t.exports=e():("undefined"!=typeof window?window:void 0!==r?r:"undefined"!=typeof self?self:this).JSZip=e()}(function(){return function s(a,o,u){function h(t,e){if(!o[t]){if(!a[t]){var r="function"==typeof l&&l;if(!e&&r)return r(t,!0);if(f)return f(t,!0);var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}var i=o[t]={exports:{}};a[t][0].call(i.exports,function(e){return h(a[t][1][e]||e)},i,i.exports,s,a,o,u)}return o[t].exports}for(var f="function"==typeof l&&l,e=0;e<u.length;e++)h(u[e]);return h}({1:[function(l,t,n){(function(r){!function(e){"object"==typeof n&&void 0!==t?t.exports=e():("undefined"!=typeof window?window:void 0!==r?r:"undefined"!=typeof self?self:this).JSZip=e()}(function(){return function s(a,o,u){function h(t,e){if(!o[t]){if(!a[t]){var r="function"==typeof l&&l;if(!e&&r)return r(t,!0);if(f)return f(t,!0);var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}var i=o[t]={exports:{}};a[t][0].call(i.exports,function(e){return h(a[t][1][e]||e)},i,i.exports,s,a,o,u)}return o[t].exports}for(var f="function"==typeof l&&l,e=0;e<u.length;e++)h(u[e]);return h}({1:[function(e,t,r){"use strict";var c=e("./utils"),l=e("./support"),p="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";r.encode=function(e){for(var t,r,n,i,s,a,o,u=[],h=0,f=e.length,l=f,d="string"!==c.getTypeOf(e);h<e.length;)l=f-h,n=d?(t=e[h++],r=h<f?e[h++]:0,h<f?e[h++]:0):(t=e.charCodeAt(h++),r=h<f?e.charCodeAt(h++):0,h<f?e.charCodeAt(h++):0),i=t>>2,s=(3&t)<<4|r>>4,a=1<l?(15&r)<<2|n>>6:64,o=2<l?63&n:64,u.push(p.charAt(i)+p.charAt(s)+p.charAt(a)+p.charAt(o));return u.join("")},r.decode=function(e){var t,r,n,i,s,a,o=0,u=0;if("data:"===e.substr(0,"data:".length))throw new Error("Invalid base64 input, it looks like a data url.");var h,f=3*(e=e.replace(/[^A-Za-z0-9\+\/\=]/g,"")).length/4;if(e.charAt(e.length-1)===p.charAt(64)&&f--,e.charAt(e.length-2)===p.charAt(64)&&f--,f%1!=0)throw new Error("Invalid base64 input, bad content length.");for(h=l.uint8array?new Uint8Array(0|f):new Array(0|f);o<e.length;)t=p.indexOf(e.charAt(o++))<<2|(i=p.indexOf(e.charAt(o++)))>>4,r=(15&i)<<4|(s=p.indexOf(e.charAt(o++)))>>2,n=(3&s)<<6|(a=p.indexOf(e.charAt(o++))),h[u++]=t,64!==s&&(h[u++]=r),64!==a&&(h[u++]=n);return h}},{"./support":30,"./utils":32}],2:[function(e,t,r){"use strict";var n=e("./external"),i=e("./stream/DataWorker"),s=e("./stream/Crc32Probe"),a=e("./stream/DataLengthProbe");function o(e,t,r,n,i){this.compressedSize=e,this.uncompressedSize=t,this.crc32=r,this.compression=n,this.compressedContent=i}o.prototype={getContentWorker:function(){var e=new i(n.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new a("data_length")),t=this;return e.on("end",function(){if(this.streamInfo.data_length!==t.uncompressedSize)throw new Error("Bug : uncompressed data size mismatch")}),e},getCompressedWorker:function(){return new i(n.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize",this.compressedSize).withStreamInfo("uncompressedSize",this.uncompressedSize).withStreamInfo("crc32",this.crc32).withStreamInfo("compression",this.compression)}},o.createWorkerFrom=function(e,t,r){return e.pipe(new s).pipe(new a("uncompressedSize")).pipe(t.compressWorker(r)).pipe(new a("compressedSize")).withStreamInfo("compression",t)},t.exports=o},{"./external":6,"./stream/Crc32Probe":25,"./stream/DataLengthProbe":26,"./stream/DataWorker":27}],3:[function(e,t,r){"use strict";var n=e("./stream/GenericWorker");r.STORE={magic:"\0\0",compressWorker:function(e){return new n("STORE compression")},uncompressWorker:function(){return new n("STORE decompression")}},r.DEFLATE=e("./flate")},{"./flate":7,"./stream/GenericWorker":28}],4:[function(e,t,r){"use strict";var n=e("./utils"),a=function(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[r]=e}return t}();t.exports=function(e,t){return void 0!==e&&e.length?"string"!==n.getTypeOf(e)?function(e,t,r){var n=a,i=0+r;e^=-1;for(var s=0;s<i;s++)e=e>>>8^n[255&(e^t[s])];return-1^e}(0|t,e,e.length):function(e,t,r){var n=a,i=0+r;e^=-1;for(var s=0;s<i;s++)e=e>>>8^n[255&(e^t.charCodeAt(s))];return-1^e}(0|t,e,e.length):0}},{"./utils":32}],5:[function(e,t,r){"use strict";r.base64=!1,r.binary=!1,r.dir=!1,r.createFolders=!0,r.date=null,r.compression=null,r.compressionOptions=null,r.comment=null,r.unixPermissions=null,r.dosPermissions=null},{}],6:[function(e,t,r){"use strict";var n;n="undefined"!=typeof Promise?Promise:e("lie"),t.exports={Promise:n}},{lie:37}],7:[function(e,t,r){"use strict";var n="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Uint32Array,i=e("pako"),s=e("./utils"),a=e("./stream/GenericWorker"),o=n?"uint8array":"array";function u(e,t){a.call(this,"FlateWorker/"+e),this._pako=null,this._pakoAction=e,this._pakoOptions=t,this.meta={}}r.magic="\b\0",s.inherits(u,a),u.prototype.processChunk=function(e){this.meta=e.meta,null===this._pako&&this._createPako(),this._pako.push(s.transformTo(o,e.data),!1)},u.prototype.flush=function(){a.prototype.flush.call(this),null===this._pako&&this._createPako(),this._pako.push([],!0)},u.prototype.cleanUp=function(){a.prototype.cleanUp.call(this),this._pako=null},u.prototype._createPako=function(){this._pako=new i[this._pakoAction]({raw:!0,level:this._pakoOptions.level||-1});var t=this;this._pako.onData=function(e){t.push({data:e,meta:t.meta})}},r.compressWorker=function(e){return new u("Deflate",e)},r.uncompressWorker=function(){return new u("Inflate",{})}},{"./stream/GenericWorker":28,"./utils":32,pako:38}],8:[function(e,t,r){"use strict";function I(e,t){var r,n="";for(r=0;r<t;r++)n+=String.fromCharCode(255&e),e>>>=8;return n}function i(e,t,r,n,i,s){var a,o,u=e.file,h=e.compression,f=s!==B.utf8encode,l=O.transformTo("string",s(u.name)),d=O.transformTo("string",B.utf8encode(u.name)),c=u.comment,p=O.transformTo("string",s(c)),m=O.transformTo("string",B.utf8encode(c)),_=d.length!==u.name.length,g=m.length!==c.length,v="",b="",w="",y=u.dir,k=u.date,x={crc32:0,compressedSize:0,uncompressedSize:0};t&&!r||(x.crc32=e.crc32,x.compressedSize=e.compressedSize,x.uncompressedSize=e.uncompressedSize);var S=0;t&&(S|=8),f||!_&&!g||(S|=2048);var z,E=0,C=0;y&&(E|=16),"UNIX"===i?(C=798,E|=((z=u.unixPermissions)||(z=y?16893:33204),(65535&z)<<16)):(C=20,E|=63&(u.dosPermissions||0)),a=k.getUTCHours(),a<<=6,a|=k.getUTCMinutes(),a<<=5,a|=k.getUTCSeconds()/2,o=k.getUTCFullYear()-1980,o<<=4,o|=k.getUTCMonth()+1,o<<=5,o|=k.getUTCDate(),_&&(v+="up"+I((b=I(1,1)+I(T(l),4)+d).length,2)+b),g&&(v+="uc"+I((w=I(1,1)+I(T(p),4)+m).length,2)+w);var A="";return A+="\n\0",A+=I(S,2),A+=h.magic,A+=I(a,2),A+=I(o,2),A+=I(x.crc32,4),A+=I(x.compressedSize,4),A+=I(x.uncompressedSize,4),A+=I(l.length,2),A+=I(v.length,2),{fileRecord:R.LOCAL_FILE_HEADER+A+l+v,dirRecord:R.CENTRAL_FILE_HEADER+I(C,2)+A+I(p.length,2)+"\0\0\0\0"+I(E,4)+I(n,4)+l+v+p}}var O=e("../utils"),s=e("../stream/GenericWorker"),B=e("../utf8"),T=e("../crc32"),R=e("../signature");function n(e,t,r,n){s.call(this,"ZipFileWorker"),this.bytesWritten=0,this.zipComment=t,this.zipPlatform=r,this.encodeFileName=n,this.streamFiles=e,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[]}O.inherits(n,s),n.prototype.push=function(e){var t=e.meta.percent||0,r=this.entriesCount,n=this._sources.length;this.accumulate?this.contentBuffer.push(e):(this.bytesWritten+=e.data.length,s.prototype.push.call(this,{data:e.data,meta:{currentFile:this.currentFile,percent:r?(t+100*(r-n-1))/r:100}}))},n.prototype.openedSource=function(e){this.currentSourceOffset=this.bytesWritten,this.currentFile=e.file.name;var t=this.streamFiles&&!e.file.dir;if(t){var r=i(e,t,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);this.push({data:r.fileRecord,meta:{percent:0}})}else this.accumulate=!0},n.prototype.closedSource=function(e){this.accumulate=!1;var t,r=this.streamFiles&&!e.file.dir,n=i(e,r,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(n.dirRecord),r)this.push({data:(t=e,R.DATA_DESCRIPTOR+I(t.crc32,4)+I(t.compressedSize,4)+I(t.uncompressedSize,4)),meta:{percent:100}});else for(this.push({data:n.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null},n.prototype.flush=function(){for(var e=this.bytesWritten,t=0;t<this.dirRecords.length;t++)this.push({data:this.dirRecords[t],meta:{percent:100}});var r,n,i,s,a,o,u=this.bytesWritten-e,h=(r=this.dirRecords.length,n=u,i=e,s=this.zipComment,a=this.encodeFileName,o=O.transformTo("string",a(s)),R.CENTRAL_DIRECTORY_END+"\0\0\0\0"+I(r,2)+I(r,2)+I(n,4)+I(i,4)+I(o.length,2)+o);this.push({data:h,meta:{percent:100}})},n.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume()},n.prototype.registerPrevious=function(e){this._sources.push(e);var t=this;return e.on("data",function(e){t.processChunk(e)}),e.on("end",function(){t.closedSource(t.previous.streamInfo),t._sources.length?t.prepareNextSource():t.end()}),e.on("error",function(e){t.error(e)}),this},n.prototype.resume=function(){return!!s.prototype.resume.call(this)&&(!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0))},n.prototype.error=function(e){var t=this._sources;if(!s.prototype.error.call(this,e))return!1;for(var r=0;r<t.length;r++)try{t[r].error(e)}catch(e){}return!0},n.prototype.lock=function(){s.prototype.lock.call(this);for(var e=this._sources,t=0;t<e.length;t++)e[t].lock()},t.exports=n},{"../crc32":4,"../signature":23,"../stream/GenericWorker":28,"../utf8":31,"../utils":32}],9:[function(e,t,r){"use strict";var h=e("../compressions"),n=e("./ZipFileWorker");r.generateWorker=function(e,a,t){var o=new n(a.streamFiles,t,a.platform,a.encodeFileName),u=0;try{e.forEach(function(e,t){u++;var r=function(e,t){var r=e||t,n=h[r];if(!n)throw new Error(r+" is not a valid compression method !");return n}(t.options.compression,a.compression),n=t.options.compressionOptions||a.compressionOptions||{},i=t.dir,s=t.date;t._compressWorker(r,n).withStreamInfo("file",{name:e,dir:i,date:s,comment:t.comment||"",unixPermissions:t.unixPermissions,dosPermissions:t.dosPermissions}).pipe(o)}),o.entriesCount=u}catch(e){o.error(e)}return o}},{"../compressions":3,"./ZipFileWorker":8}],10:[function(e,t,r){"use strict";function n(){if(!(this instanceof n))return new n;if(arguments.length)throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");this.files={},this.comment=null,this.root="",this.clone=function(){var e=new n;for(var t in this)"function"!=typeof this[t]&&(e[t]=this[t]);return e}}(n.prototype=e("./object")).loadAsync=e("./load"),n.support=e("./support"),n.defaults=e("./defaults"),n.version="3.5.0",n.loadAsync=function(e,t){return(new n).loadAsync(e,t)},n.external=e("./external"),t.exports=n},{"./defaults":5,"./external":6,"./load":11,"./object":15,"./support":30}],11:[function(e,t,r){"use strict";var n=e("./utils"),i=e("./external"),o=e("./utf8"),u=e("./zipEntries"),s=e("./stream/Crc32Probe"),h=e("./nodejsUtils");function f(n){return new i.Promise(function(e,t){var r=n.decompressed.getContentWorker().pipe(new s);r.on("error",function(e){t(e)}).on("end",function(){r.streamInfo.crc32!==n.decompressed.crc32?t(new Error("Corrupted zip : CRC32 mismatch")):e()}).resume()})}t.exports=function(e,s){var a=this;return s=n.extend(s||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:o.utf8decode}),h.isNode&&h.isStream(e)?i.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")):n.prepareContent("the loaded zip file",e,!0,s.optimizedBinaryString,s.base64).then(function(e){var t=new u(s);return t.load(e),t}).then(function(e){var t=[i.Promise.resolve(e)],r=e.files;if(s.checkCRC32)for(var n=0;n<r.length;n++)t.push(f(r[n]));return i.Promise.all(t)}).then(function(e){for(var t=e.shift(),r=t.files,n=0;n<r.length;n++){var i=r[n];a.file(i.fileNameStr,i.decompressed,{binary:!0,optimizedBinaryString:!0,date:i.date,dir:i.dir,comment:i.fileCommentStr.length?i.fileCommentStr:null,unixPermissions:i.unixPermissions,dosPermissions:i.dosPermissions,createFolders:s.createFolders})}return t.zipComment.length&&(a.comment=t.zipComment),a})}},{"./external":6,"./nodejsUtils":14,"./stream/Crc32Probe":25,"./utf8":31,"./utils":32,"./zipEntries":33}],12:[function(e,t,r){"use strict";var n=e("../utils"),i=e("../stream/GenericWorker");function s(e,t){i.call(this,"Nodejs stream input adapter for "+e),this._upstreamEnded=!1,this._bindStream(t)}n.inherits(s,i),s.prototype._bindStream=function(e){var t=this;(this._stream=e).pause(),e.on("data",function(e){t.push({data:e,meta:{percent:0}})}).on("error",function(e){t.isPaused?this.generatedError=e:t.error(e)}).on("end",function(){t.isPaused?t._upstreamEnded=!0:t.end()})},s.prototype.pause=function(){return!!i.prototype.pause.call(this)&&(this._stream.pause(),!0)},s.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(this._upstreamEnded?this.end():this._stream.resume(),!0)},t.exports=s},{"../stream/GenericWorker":28,"../utils":32}],13:[function(e,t,r){"use strict";var i=e("readable-stream").Readable;function n(e,t,r){i.call(this,t),this._helper=e;var n=this;e.on("data",function(e,t){n.push(e)||n._helper.pause(),r&&r(t)}).on("error",function(e){n.emit("error",e)}).on("end",function(){n.push(null)})}e("../utils").inherits(n,i),n.prototype._read=function(){this._helper.resume()},t.exports=n},{"../utils":32,"readable-stream":16}],14:[function(e,t,r){"use strict";t.exports={isNode:"undefined"!=typeof Buffer,newBufferFrom:function(e,t){if(Buffer.from&&Buffer.from!==Uint8Array.from)return Buffer.from(e,t);if("number"==typeof e)throw new Error('The "data" argument must not be a number');return new Buffer(e,t)},allocBuffer:function(e){if(Buffer.alloc)return Buffer.alloc(e);var t=new Buffer(e);return t.fill(0),t},isBuffer:function(e){return Buffer.isBuffer(e)},isStream:function(e){return e&&"function"==typeof e.on&&"function"==typeof e.pause&&"function"==typeof e.resume}}},{}],15:[function(e,t,r){"use strict";function s(e,t,r){var n,i=f.getTypeOf(t),s=f.extend(r||{},d);s.date=s.date||new Date,null!==s.compression&&(s.compression=s.compression.toUpperCase()),"string"==typeof s.unixPermissions&&(s.unixPermissions=parseInt(s.unixPermissions,8)),s.unixPermissions&&16384&s.unixPermissions&&(s.dir=!0),s.dosPermissions&&16&s.dosPermissions&&(s.dir=!0),s.dir&&(e=h(e)),s.createFolders&&(n=function(e){"/"===e.slice(-1)&&(e=e.substring(0,e.length-1));var t=e.lastIndexOf("/");return 0<t?e.substring(0,t):""}(e))&&g.call(this,n,!0);var a,o="string"===i&&!1===s.binary&&!1===s.base64;r&&void 0!==r.binary||(s.binary=!o),(t instanceof c&&0===t.uncompressedSize||s.dir||!t||0===t.length)&&(s.base64=!1,s.binary=!0,t="",s.compression="STORE",i="string"),a=t instanceof c||t instanceof l?t:m.isNode&&m.isStream(t)?new _(e,t):f.prepareContent(e,t,s.binary,s.optimizedBinaryString,s.base64);var u=new p(e,a,s);this.files[e]=u}function h(e){return"/"!==e.slice(-1)&&(e+="/"),e}var i=e("./utf8"),f=e("./utils"),l=e("./stream/GenericWorker"),a=e("./stream/StreamHelper"),d=e("./defaults"),c=e("./compressedObject"),p=e("./zipObject"),o=e("./generate"),m=e("./nodejsUtils"),_=e("./nodejs/NodejsStreamInputAdapter"),g=function(e,t){return t=void 0!==t?t:d.createFolders,e=h(e),this.files[e]||s.call(this,e,null,{dir:!0,createFolders:t}),this.files[e]};function u(e){return"[object RegExp]"===Object.prototype.toString.call(e)}var n={load:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},forEach:function(e){var t,r,n;for(t in this.files)this.files.hasOwnProperty(t)&&(n=this.files[t],(r=t.slice(this.root.length,t.length))&&t.slice(0,this.root.length)===this.root&&e(r,n))},filter:function(r){var n=[];return this.forEach(function(e,t){r(e,t)&&n.push(t)}),n},file:function(e,t,r){if(1!==arguments.length)return e=this.root+e,s.call(this,e,t,r),this;if(u(e)){var n=e;return this.filter(function(e,t){return!t.dir&&n.test(e)})}var i=this.files[this.root+e];return i&&!i.dir?i:null},folder:function(r){if(!r)return this;if(u(r))return this.filter(function(e,t){return t.dir&&r.test(e)});var e=this.root+r,t=g.call(this,e),n=this.clone();return n.root=t.name,n},remove:function(r){r=this.root+r;var e=this.files[r];if(e||("/"!==r.slice(-1)&&(r+="/"),e=this.files[r]),e&&!e.dir)delete this.files[r];else for(var t=this.filter(function(e,t){return t.name.slice(0,r.length)===r}),n=0;n<t.length;n++)delete this.files[t[n].name];return this},generate:function(e){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},generateInternalStream:function(e){var t,r={};try{if((r=f.extend(e||{},{streamFiles:!1,compression:"STORE",compressionOptions:null,type:"",platform:"DOS",comment:null,mimeType:"application/zip",encodeFileName:i.utf8encode})).type=r.type.toLowerCase(),r.compression=r.compression.toUpperCase(),"binarystring"===r.type&&(r.type="string"),!r.type)throw new Error("No output type specified.");f.checkSupport(r.type),"darwin"!==r.platform&&"freebsd"!==r.platform&&"linux"!==r.platform&&"sunos"!==r.platform||(r.platform="UNIX"),"win32"===r.platform&&(r.platform="DOS");var n=r.comment||this.comment||"";t=o.generateWorker(this,r,n)}catch(e){(t=new l("error")).error(e)}return new a(t,r.type||"string",r.mimeType)},generateAsync:function(e,t){return this.generateInternalStream(e).accumulate(t)},generateNodeStream:function(e,t){return(e=e||{}).type||(e.type="nodebuffer"),this.generateInternalStream(e).toNodejsStream(t)}};t.exports=n},{"./compressedObject":2,"./defaults":5,"./generate":9,"./nodejs/NodejsStreamInputAdapter":12,"./nodejsUtils":14,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31,"./utils":32,"./zipObject":35}],16:[function(e,t,r){t.exports=e("stream")},{stream:void 0}],17:[function(e,t,r){"use strict";var n=e("./DataReader");function i(e){n.call(this,e);for(var t=0;t<this.data.length;t++)e[t]=255&e[t]}e("../utils").inherits(i,n),i.prototype.byteAt=function(e){return this.data[this.zero+e]},i.prototype.lastIndexOfSignature=function(e){for(var t=e.charCodeAt(0),r=e.charCodeAt(1),n=e.charCodeAt(2),i=e.charCodeAt(3),s=this.length-4;0<=s;--s)if(this.data[s]===t&&this.data[s+1]===r&&this.data[s+2]===n&&this.data[s+3]===i)return s-this.zero;return-1},i.prototype.readAndCheckSignature=function(e){var t=e.charCodeAt(0),r=e.charCodeAt(1),n=e.charCodeAt(2),i=e.charCodeAt(3),s=this.readData(4);return t===s[0]&&r===s[1]&&n===s[2]&&i===s[3]},i.prototype.readData=function(e){if(this.checkOffset(e),0===e)return[];var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{"../utils":32,"./DataReader":18}],18:[function(e,t,r){"use strict";var n=e("../utils");function i(e){this.data=e,this.length=e.length,this.index=0,this.zero=0}i.prototype={checkOffset:function(e){this.checkIndex(this.index+e)},checkIndex:function(e){if(this.length<this.zero+e||e<0)throw new Error("End of data reached (data length = "+this.length+", asked index = "+e+"). Corrupted zip ?")},setIndex:function(e){this.checkIndex(e),this.index=e},skip:function(e){this.setIndex(this.index+e)},byteAt:function(e){},readInt:function(e){var t,r=0;for(this.checkOffset(e),t=this.index+e-1;t>=this.index;t--)r=(r<<8)+this.byteAt(t);return this.index+=e,r},readString:function(e){return n.transformTo("string",this.readData(e))},readData:function(e){},lastIndexOfSignature:function(e){},readAndCheckSignature:function(e){},readDate:function(){var e=this.readInt(4);return new Date(Date.UTC(1980+(e>>25&127),(e>>21&15)-1,e>>16&31,e>>11&31,e>>5&63,(31&e)<<1))}},t.exports=i},{"../utils":32}],19:[function(e,t,r){"use strict";var n=e("./Uint8ArrayReader");function i(e){n.call(this,e)}e("../utils").inherits(i,n),i.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{"../utils":32,"./Uint8ArrayReader":21}],20:[function(e,t,r){"use strict";var n=e("./DataReader");function i(e){n.call(this,e)}e("../utils").inherits(i,n),i.prototype.byteAt=function(e){return this.data.charCodeAt(this.zero+e)},i.prototype.lastIndexOfSignature=function(e){return this.data.lastIndexOf(e)-this.zero},i.prototype.readAndCheckSignature=function(e){return e===this.readData(4)},i.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{"../utils":32,"./DataReader":18}],21:[function(e,t,r){"use strict";var n=e("./ArrayReader");function i(e){n.call(this,e)}e("../utils").inherits(i,n),i.prototype.readData=function(e){if(this.checkOffset(e),0===e)return new Uint8Array(0);var t=this.data.subarray(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{"../utils":32,"./ArrayReader":17}],22:[function(e,t,r){"use strict";var n=e("../utils"),i=e("../support"),s=e("./ArrayReader"),a=e("./StringReader"),o=e("./NodeBufferReader"),u=e("./Uint8ArrayReader");t.exports=function(e){var t=n.getTypeOf(e);return n.checkSupport(t),"string"!==t||i.uint8array?"nodebuffer"===t?new o(e):i.uint8array?new u(n.transformTo("uint8array",e)):new s(n.transformTo("array",e)):new a(e)}},{"../support":30,"../utils":32,"./ArrayReader":17,"./NodeBufferReader":19,"./StringReader":20,"./Uint8ArrayReader":21}],23:[function(e,t,r){"use strict";r.LOCAL_FILE_HEADER="PK",r.CENTRAL_FILE_HEADER="PK",r.CENTRAL_DIRECTORY_END="PK",r.ZIP64_CENTRAL_DIRECTORY_LOCATOR="PK",r.ZIP64_CENTRAL_DIRECTORY_END="PK",r.DATA_DESCRIPTOR="PK\b"},{}],24:[function(e,t,r){"use strict";var n=e("./GenericWorker"),i=e("../utils");function s(e){n.call(this,"ConvertWorker to "+e),this.destType=e}i.inherits(s,n),s.prototype.processChunk=function(e){this.push({data:i.transformTo(this.destType,e.data),meta:e.meta})},t.exports=s},{"../utils":32,"./GenericWorker":28}],25:[function(e,t,r){"use strict";var n=e("./GenericWorker"),i=e("../crc32");function s(){n.call(this,"Crc32Probe"),this.withStreamInfo("crc32",0)}e("../utils").inherits(s,n),s.prototype.processChunk=function(e){this.streamInfo.crc32=i(e.data,this.streamInfo.crc32||0),this.push(e)},t.exports=s},{"../crc32":4,"../utils":32,"./GenericWorker":28}],26:[function(e,t,r){"use strict";var n=e("../utils"),i=e("./GenericWorker");function s(e){i.call(this,"DataLengthProbe for "+e),this.propName=e,this.withStreamInfo(e,0)}n.inherits(s,i),s.prototype.processChunk=function(e){if(e){var t=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=t+e.data.length}i.prototype.processChunk.call(this,e)},t.exports=s},{"../utils":32,"./GenericWorker":28}],27:[function(e,t,r){"use strict";var n=e("../utils"),i=e("./GenericWorker");function s(e){i.call(this,"DataWorker");var t=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type="",this._tickScheduled=!1,e.then(function(e){t.dataIsReady=!0,t.data=e,t.max=e&&e.length||0,t.type=n.getTypeOf(e),t.isPaused||t._tickAndRepeat()},function(e){t.error(e)})}n.inherits(s,i),s.prototype.cleanUp=function(){i.prototype.cleanUp.call(this),this.data=null},s.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,n.delay(this._tickAndRepeat,[],this)),!0)},s.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(n.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0))},s.prototype._tick=function(){if(this.isPaused||this.isFinished)return!1;var e=null,t=Math.min(this.max,this.index+16384);if(this.index>=this.max)return this.end();switch(this.type){case"string":e=this.data.substring(this.index,t);break;case"uint8array":e=this.data.subarray(this.index,t);break;case"array":case"nodebuffer":e=this.data.slice(this.index,t)}return this.index=t,this.push({data:e,meta:{percent:this.max?this.index/this.max*100:0}})},t.exports=s},{"../utils":32,"./GenericWorker":28}],28:[function(e,t,r){"use strict";function n(e){this.name=e||"default",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null}n.prototype={push:function(e){this.emit("data",e)},end:function(){if(this.isFinished)return!1;this.flush();try{this.emit("end"),this.cleanUp(),this.isFinished=!0}catch(e){this.emit("error",e)}return!0},error:function(e){return!this.isFinished&&(this.isPaused?this.generatedError=e:(this.isFinished=!0,this.emit("error",e),this.previous&&this.previous.error(e),this.cleanUp()),!0)},on:function(e,t){return this._listeners[e].push(t),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[]},emit:function(e,t){if(this._listeners[e])for(var r=0;r<this._listeners[e].length;r++)this._listeners[e][r].call(this,t)},pipe:function(e){return e.registerPrevious(this)},registerPrevious:function(e){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.streamInfo=e.streamInfo,this.mergeStreamInfo(),this.previous=e;var t=this;return e.on("data",function(e){t.processChunk(e)}),e.on("end",function(){t.end()}),e.on("error",function(e){t.error(e)}),this},pause:function(){return!this.isPaused&&!this.isFinished&&(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return!1;var e=this.isPaused=!1;return this.generatedError&&(this.error(this.generatedError),e=!0),this.previous&&this.previous.resume(),!e},flush:function(){},processChunk:function(e){this.push(e)},withStreamInfo:function(e,t){return this.extraStreamInfo[e]=t,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var e in this.extraStreamInfo)this.extraStreamInfo.hasOwnProperty(e)&&(this.streamInfo[e]=this.extraStreamInfo[e])},lock:function(){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.isLocked=!0,this.previous&&this.previous.lock()},toString:function(){var e="Worker "+this.name;return this.previous?this.previous+" -> "+e:e}},t.exports=n},{}],29:[function(e,t,r){"use strict";var h=e("../utils"),i=e("./ConvertWorker"),s=e("./GenericWorker"),f=e("../base64"),n=e("../support"),a=e("../external"),o=null;if(n.nodestream)try{o=e("../nodejs/NodejsStreamOutputAdapter")}catch(e){}function u(e,t,r){var n=t;switch(t){case"blob":case"arraybuffer":n="uint8array";break;case"base64":n="string"}try{this._internalType=n,this._outputType=t,this._mimeType=r,h.checkSupport(n),this._worker=e.pipe(new i(n)),e.lock()}catch(e){this._worker=new s("error"),this._worker.error(e)}}u.prototype={accumulate:function(e){return o=this,u=e,new a.Promise(function(t,r){var n=[],i=o._internalType,s=o._outputType,a=o._mimeType;o.on("data",function(e,t){n.push(e),u&&u(t)}).on("error",function(e){n=[],r(e)}).on("end",function(){try{var e=function(e,t,r){switch(e){case"blob":return h.newBlob(h.transformTo("arraybuffer",t),r);case"base64":return f.encode(t);default:return h.transformTo(e,t)}}(s,function(e,t){var r,n=0,i=null,s=0;for(r=0;r<t.length;r++)s+=t[r].length;switch(e){case"string":return t.join("");case"array":return Array.prototype.concat.apply([],t);case"uint8array":for(i=new Uint8Array(s),r=0;r<t.length;r++)i.set(t[r],n),n+=t[r].length;return i;case"nodebuffer":return Buffer.concat(t);default:throw new Error("concat : unsupported type '"+e+"'")}}(i,n),a);t(e)}catch(e){r(e)}n=[]}).resume()});var o,u},on:function(e,t){var r=this;return"data"===e?this._worker.on(e,function(e){t.call(r,e.data,e.meta)}):this._worker.on(e,function(){h.delay(t,arguments,r)}),this},resume:function(){return h.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(e){if(h.checkSupport("nodestream"),"nodebuffer"!==this._outputType)throw new Error(this._outputType+" is not supported by this method");return new o(this,{objectMode:"nodebuffer"!==this._outputType},e)}},t.exports=u},{"../base64":1,"../external":6,"../nodejs/NodejsStreamOutputAdapter":13,"../support":30,"../utils":32,"./ConvertWorker":24,"./GenericWorker":28}],30:[function(e,t,r){"use strict";if(r.base64=!0,r.array=!0,r.string=!0,r.arraybuffer="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof Uint8Array,r.nodebuffer="undefined"!=typeof Buffer,r.uint8array="undefined"!=typeof Uint8Array,"undefined"==typeof ArrayBuffer)r.blob=!1;else{var n=new ArrayBuffer(0);try{r.blob=0===new Blob([n],{type:"application/zip"}).size}catch(e){try{var i=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);i.append(n),r.blob=0===i.getBlob("application/zip").size}catch(e){r.blob=!1}}}try{r.nodestream=!!e("readable-stream").Readable}catch(e){r.nodestream=!1}},{"readable-stream":16}],31:[function(e,t,s){"use strict";for(var o=e("./utils"),u=e("./support"),r=e("./nodejsUtils"),n=e("./stream/GenericWorker"),h=new Array(256),i=0;i<256;i++)h[i]=252<=i?6:248<=i?5:240<=i?4:224<=i?3:192<=i?2:1;function a(){n.call(this,"utf-8 decode"),this.leftOver=null}function f(){n.call(this,"utf-8 encode")}h[254]=h[254]=1,s.utf8encode=function(e){return u.nodebuffer?r.newBufferFrom(e,"utf-8"):function(e){var t,r,n,i,s,a=e.length,o=0;for(i=0;i<a;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),o+=r<128?1:r<2048?2:r<65536?3:4;for(t=u.uint8array?new Uint8Array(o):new Array(o),i=s=0;s<o;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),r<128?t[s++]=r:(r<2048?t[s++]=192|r>>>6:(r<65536?t[s++]=224|r>>>12:(t[s++]=240|r>>>18,t[s++]=128|r>>>12&63),t[s++]=128|r>>>6&63),t[s++]=128|63&r);return t}(e)},s.utf8decode=function(e){return u.nodebuffer?o.transformTo("nodebuffer",e).toString("utf-8"):function(e){var t,r,n,i,s=e.length,a=new Array(2*s);for(t=r=0;t<s;)if((n=e[t++])<128)a[r++]=n;else if(4<(i=h[n]))a[r++]=65533,t+=i-1;else{for(n&=2===i?31:3===i?15:7;1<i&&t<s;)n=n<<6|63&e[t++],i--;1<i?a[r++]=65533:n<65536?a[r++]=n:(n-=65536,a[r++]=55296|n>>10&1023,a[r++]=56320|1023&n)}return a.length!==r&&(a.subarray?a=a.subarray(0,r):a.length=r),o.applyFromCharCode(a)}(e=o.transformTo(u.uint8array?"uint8array":"array",e))},o.inherits(a,n),a.prototype.processChunk=function(e){var t=o.transformTo(u.uint8array?"uint8array":"array",e.data);if(this.leftOver&&this.leftOver.length){if(u.uint8array){var r=t;(t=new Uint8Array(r.length+this.leftOver.length)).set(this.leftOver,0),t.set(r,this.leftOver.length)}else t=this.leftOver.concat(t);this.leftOver=null}var n=function(e,t){var r;for((t=t||e.length)>e.length&&(t=e.length),r=t-1;0<=r&&128==(192&e[r]);)r--;return r<0?t:0===r?t:r+h[e[r]]>t?r:t}(t),i=t;n!==t.length&&(u.uint8array?(i=t.subarray(0,n),this.leftOver=t.subarray(n,t.length)):(i=t.slice(0,n),this.leftOver=t.slice(n,t.length))),this.push({data:s.utf8decode(i),meta:e.meta})},a.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:s.utf8decode(this.leftOver),meta:{}}),this.leftOver=null)},s.Utf8DecodeWorker=a,o.inherits(f,n),f.prototype.processChunk=function(e){this.push({data:s.utf8encode(e.data),meta:e.meta})},s.Utf8EncodeWorker=f},{"./nodejsUtils":14,"./stream/GenericWorker":28,"./support":30,"./utils":32}],32:[function(e,t,o){"use strict";var u=e("./support"),h=e("./base64"),r=e("./nodejsUtils"),n=e("set-immediate-shim"),f=e("./external");function i(e){return e}function l(e,t){for(var r=0;r<e.length;++r)t[r]=255&e.charCodeAt(r);return t}o.newBlob=function(t,r){o.checkSupport("blob");try{return new Blob([t],{type:r})}catch(e){try{var n=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return n.append(t),n.getBlob(r)}catch(e){throw new Error("Bug : can't construct the Blob.")}}};var s={stringifyByChunk:function(e,t,r){var n=[],i=0,s=e.length;if(s<=r)return String.fromCharCode.apply(null,e);for(;i<s;)"array"===t||"nodebuffer"===t?n.push(String.fromCharCode.apply(null,e.slice(i,Math.min(i+r,s)))):n.push(String.fromCharCode.apply(null,e.subarray(i,Math.min(i+r,s)))),i+=r;return n.join("")},stringifyByChar:function(e){for(var t="",r=0;r<e.length;r++)t+=String.fromCharCode(e[r]);return t},applyCanBeUsed:{uint8array:function(){try{return u.uint8array&&1===String.fromCharCode.apply(null,new Uint8Array(1)).length}catch(e){return!1}}(),nodebuffer:function(){try{return u.nodebuffer&&1===String.fromCharCode.apply(null,r.allocBuffer(1)).length}catch(e){return!1}}()}};function a(e){var t=65536,r=o.getTypeOf(e),n=!0;if("uint8array"===r?n=s.applyCanBeUsed.uint8array:"nodebuffer"===r&&(n=s.applyCanBeUsed.nodebuffer),n)for(;1<t;)try{return s.stringifyByChunk(e,r,t)}catch(e){t=Math.floor(t/2)}return s.stringifyByChar(e)}function d(e,t){for(var r=0;r<e.length;r++)t[r]=e[r];return t}o.applyFromCharCode=a;var c={};c.string={string:i,array:function(e){return l(e,new Array(e.length))},arraybuffer:function(e){return c.string.uint8array(e).buffer},uint8array:function(e){return l(e,new Uint8Array(e.length))},nodebuffer:function(e){return l(e,r.allocBuffer(e.length))}},c.array={string:a,array:i,arraybuffer:function(e){return new Uint8Array(e).buffer},uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return r.newBufferFrom(e)}},c.arraybuffer={string:function(e){return a(new Uint8Array(e))},array:function(e){return d(new Uint8Array(e),new Array(e.byteLength))},arraybuffer:i,uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return r.newBufferFrom(new Uint8Array(e))}},c.uint8array={string:a,array:function(e){return d(e,new Array(e.length))},arraybuffer:function(e){return e.buffer},uint8array:i,nodebuffer:function(e){return r.newBufferFrom(e)}},c.nodebuffer={string:a,array:function(e){return d(e,new Array(e.length))},arraybuffer:function(e){return c.nodebuffer.uint8array(e).buffer},uint8array:function(e){return d(e,new Uint8Array(e.length))},nodebuffer:i},o.transformTo=function(e,t){if(t=t||"",!e)return t;o.checkSupport(e);var r=o.getTypeOf(t);return c[r][e](t)},o.getTypeOf=function(e){return"string"==typeof e?"string":"[object Array]"===Object.prototype.toString.call(e)?"array":u.nodebuffer&&r.isBuffer(e)?"nodebuffer":u.uint8array&&e instanceof Uint8Array?"uint8array":u.arraybuffer&&e instanceof ArrayBuffer?"arraybuffer":void 0},o.checkSupport=function(e){if(!u[e.toLowerCase()])throw new Error(e+" is not supported by this platform")},o.MAX_VALUE_16BITS=65535,o.MAX_VALUE_32BITS=-1,o.pretty=function(e){var t,r,n="";for(r=0;r<(e||"").length;r++)n+="\\x"+((t=e.charCodeAt(r))<16?"0":"")+t.toString(16).toUpperCase();return n},o.delay=function(e,t,r){n(function(){e.apply(r||null,t||[])})},o.inherits=function(e,t){function r(){}r.prototype=t.prototype,e.prototype=new r},o.extend=function(){var e,t,r={};for(e=0;e<arguments.length;e++)for(t in arguments[e])arguments[e].hasOwnProperty(t)&&void 0===r[t]&&(r[t]=arguments[e][t]);return r},o.prepareContent=function(n,e,i,s,a){return f.Promise.resolve(e).then(function(n){return u.blob&&(n instanceof Blob||-1!==["[object File]","[object Blob]"].indexOf(Object.prototype.toString.call(n)))&&"undefined"!=typeof FileReader?new f.Promise(function(t,r){var e=new FileReader;e.onload=function(e){t(e.target.result)},e.onerror=function(e){r(e.target.error)},e.readAsArrayBuffer(n)}):n}).then(function(e){var t,r=o.getTypeOf(e);return r?("arraybuffer"===r?e=o.transformTo("uint8array",e):"string"===r&&(a?e=h.decode(e):i&&!0!==s&&(e=l(t=e,u.uint8array?new Uint8Array(t.length):new Array(t.length)))),e):f.Promise.reject(new Error("Can't read the data of '"+n+"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"))})}},{"./base64":1,"./external":6,"./nodejsUtils":14,"./support":30,"set-immediate-shim":54}],33:[function(e,t,r){"use strict";var n=e("./reader/readerFor"),i=e("./utils"),s=e("./signature"),a=e("./zipEntry"),o=(e("./utf8"),e("./support"));function u(e){this.files=[],this.loadOptions=e}u.prototype={checkSignature:function(e){if(!this.reader.readAndCheckSignature(e)){this.reader.index-=4;var t=this.reader.readString(4);throw new Error("Corrupted zip or bug: unexpected signature ("+i.pretty(t)+", expected "+i.pretty(e)+")")}},isSignature:function(e,t){var r=this.reader.index;this.reader.setIndex(e);var n=this.reader.readString(4)===t;return this.reader.setIndex(r),n},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var e=this.reader.readData(this.zipCommentLength),t=o.uint8array?"uint8array":"array",r=i.transformTo(t,e);this.zipComment=this.loadOptions.decodeFileName(r)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var e,t,r,n=this.zip64EndOfCentralSize-44;0<n;)e=this.reader.readInt(2),t=this.reader.readInt(4),r=this.reader.readData(t),this.zip64ExtensibleData[e]={id:e,length:t,value:r}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),1<this.disksCount)throw new Error("Multi-volumes zip are not supported")},readLocalFiles:function(){var e,t;for(e=0;e<this.files.length;e++)t=this.files[e],this.reader.setIndex(t.localHeaderOffset),this.checkSignature(s.LOCAL_FILE_HEADER),t.readLocalPart(this.reader),t.handleUTF8(),t.processAttributes()},readCentralDir:function(){var e;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(s.CENTRAL_FILE_HEADER);)(e=new a({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(e);if(this.centralDirRecords!==this.files.length&&0!==this.centralDirRecords&&0===this.files.length)throw new Error("Corrupted zip or bug: expected "+this.centralDirRecords+" records in central dir, got "+this.files.length)},readEndOfCentral:function(){var e=this.reader.lastIndexOfSignature(s.CENTRAL_DIRECTORY_END);if(e<0)throw this.isSignature(0,s.LOCAL_FILE_HEADER)?new Error("Corrupted zip: can't find end of central directory"):new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html");this.reader.setIndex(e);var t=e;if(this.checkSignature(s.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===i.MAX_VALUE_16BITS||this.diskWithCentralDirStart===i.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===i.MAX_VALUE_16BITS||this.centralDirRecords===i.MAX_VALUE_16BITS||this.centralDirSize===i.MAX_VALUE_32BITS||this.centralDirOffset===i.MAX_VALUE_32BITS){if(this.zip64=!0,(e=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");if(this.reader.setIndex(e),this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,s.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}var r=this.centralDirOffset+this.centralDirSize;this.zip64&&(r+=20,r+=12+this.zip64EndOfCentralSize);var n=t-r;if(0<n)this.isSignature(t,s.CENTRAL_FILE_HEADER)||(this.reader.zero=n);else if(n<0)throw new Error("Corrupted zip: missing "+Math.abs(n)+" bytes.")},prepareReader:function(e){this.reader=n(e)},load:function(e){this.prepareReader(e),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},t.exports=u},{"./reader/readerFor":22,"./signature":23,"./support":30,"./utf8":31,"./utils":32,"./zipEntry":34}],34:[function(e,t,r){"use strict";var n=e("./reader/readerFor"),s=e("./utils"),i=e("./compressedObject"),a=e("./crc32"),o=e("./utf8"),u=e("./compressions"),h=e("./support");function f(e,t){this.options=e,this.loadOptions=t}f.prototype={isEncrypted:function(){return 1==(1&this.bitFlag)},useUTF8:function(){return 2048==(2048&this.bitFlag)},readLocalPart:function(e){var t,r;if(e.skip(22),this.fileNameLength=e.readInt(2),r=e.readInt(2),this.fileName=e.readData(this.fileNameLength),e.skip(r),-1===this.compressedSize||-1===this.uncompressedSize)throw new Error("Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)");if(null===(t=function(e){for(var t in u)if(u.hasOwnProperty(t)&&u[t].magic===e)return u[t];return null}(this.compressionMethod)))throw new Error("Corrupted zip : compression "+s.pretty(this.compressionMethod)+" unknown (inner file : "+s.transformTo("string",this.fileName)+")");this.decompressed=new i(this.compressedSize,this.uncompressedSize,this.crc32,t,e.readData(this.compressedSize))},readCentralPart:function(e){this.versionMadeBy=e.readInt(2),e.skip(2),this.bitFlag=e.readInt(2),this.compressionMethod=e.readString(2),this.date=e.readDate(),this.crc32=e.readInt(4),this.compressedSize=e.readInt(4),this.uncompressedSize=e.readInt(4);var t=e.readInt(2);if(this.extraFieldsLength=e.readInt(2),this.fileCommentLength=e.readInt(2),this.diskNumberStart=e.readInt(2),this.internalFileAttributes=e.readInt(2),this.externalFileAttributes=e.readInt(4),this.localHeaderOffset=e.readInt(4),this.isEncrypted())throw new Error("Encrypted zip are not supported");e.skip(t),this.readExtraFields(e),this.parseZIP64ExtraField(e),this.fileComment=e.readData(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var e=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),0==e&&(this.dosPermissions=63&this.externalFileAttributes),3==e&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||"/"!==this.fileNameStr.slice(-1)||(this.dir=!0)},parseZIP64ExtraField:function(e){if(this.extraFields[1]){var t=n(this.extraFields[1].value);this.uncompressedSize===s.MAX_VALUE_32BITS&&(this.uncompressedSize=t.readInt(8)),this.compressedSize===s.MAX_VALUE_32BITS&&(this.compressedSize=t.readInt(8)),this.localHeaderOffset===s.MAX_VALUE_32BITS&&(this.localHeaderOffset=t.readInt(8)),this.diskNumberStart===s.MAX_VALUE_32BITS&&(this.diskNumberStart=t.readInt(4))}},readExtraFields:function(e){var t,r,n,i=e.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});e.index+4<i;)t=e.readInt(2),r=e.readInt(2),n=e.readData(r),this.extraFields[t]={id:t,length:r,value:n};e.setIndex(i)},handleUTF8:function(){var e=h.uint8array?"uint8array":"array";if(this.useUTF8())this.fileNameStr=o.utf8decode(this.fileName),this.fileCommentStr=o.utf8decode(this.fileComment);else{var t=this.findExtraFieldUnicodePath();if(null!==t)this.fileNameStr=t;else{var r=s.transformTo(e,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(r)}var n=this.findExtraFieldUnicodeComment();if(null!==n)this.fileCommentStr=n;else{var i=s.transformTo(e,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(i)}}},findExtraFieldUnicodePath:function(){var e=this.extraFields[28789];if(e){var t=n(e.value);return 1!==t.readInt(1)?null:a(this.fileName)!==t.readInt(4)?null:o.utf8decode(t.readData(e.length-5))}return null},findExtraFieldUnicodeComment:function(){var e=this.extraFields[25461];if(e){var t=n(e.value);return 1!==t.readInt(1)?null:a(this.fileComment)!==t.readInt(4)?null:o.utf8decode(t.readData(e.length-5))}return null}},t.exports=f},{"./compressedObject":2,"./compressions":3,"./crc32":4,"./reader/readerFor":22,"./support":30,"./utf8":31,"./utils":32}],35:[function(e,t,r){"use strict";function n(e,t,r){this.name=e,this.dir=r.dir,this.date=r.date,this.comment=r.comment,this.unixPermissions=r.unixPermissions,this.dosPermissions=r.dosPermissions,this._data=t,this._dataBinary=r.binary,this.options={compression:r.compression,compressionOptions:r.compressionOptions}}var s=e("./stream/StreamHelper"),i=e("./stream/DataWorker"),a=e("./utf8"),o=e("./compressedObject"),u=e("./stream/GenericWorker");n.prototype={internalStream:function(e){var t=null,r="string";try{if(!e)throw new Error("No output type specified.");var n="string"===(r=e.toLowerCase())||"text"===r;"binarystring"!==r&&"text"!==r||(r="string"),t=this._decompressWorker();var i=!this._dataBinary;i&&!n&&(t=t.pipe(new a.Utf8EncodeWorker)),!i&&n&&(t=t.pipe(new a.Utf8DecodeWorker))}catch(e){(t=new u("error")).error(e)}return new s(t,r,"")},async:function(e,t){return this.internalStream(e).accumulate(t)},nodeStream:function(e,t){return this.internalStream(e||"nodebuffer").toNodejsStream(t)},_compressWorker:function(e,t){if(this._data instanceof o&&this._data.compression.magic===e.magic)return this._data.getCompressedWorker();var r=this._decompressWorker();return this._dataBinary||(r=r.pipe(new a.Utf8EncodeWorker)),o.createWorkerFrom(r,e,t)},_decompressWorker:function(){return this._data instanceof o?this._data.getContentWorker():this._data instanceof u?this._data:new i(this._data)}};for(var h=["asText","asBinary","asNodeBuffer","asUint8Array","asArrayBuffer"],f=function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},l=0;l<h.length;l++)n.prototype[h[l]]=f;t.exports=n},{"./compressedObject":2,"./stream/DataWorker":27,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31}],36:[function(e,f,t){(function(t){"use strict";var r,n,e=t.MutationObserver||t.WebKitMutationObserver;if(e){var i=0,s=new e(h),a=t.document.createTextNode("");s.observe(a,{characterData:!0}),r=function(){a.data=i=++i%2}}else if(t.setImmediate||void 0===t.MessageChannel)r="document"in t&&"onreadystatechange"in t.document.createElement("script")?function(){var e=t.document.createElement("script");e.onreadystatechange=function(){h(),e.onreadystatechange=null,e.parentNode.removeChild(e),e=null},t.document.documentElement.appendChild(e)}:function(){setTimeout(h,0)};else{var o=new t.MessageChannel;o.port1.onmessage=h,r=function(){o.port2.postMessage(0)}}var u=[];function h(){var e,t;n=!0;for(var r=u.length;r;){for(t=u,u=[],e=-1;++e<r;)t[e]();r=u.length}n=!1}f.exports=function(e){1!==u.push(e)||n||r()}}).call(this,void 0!==r?r:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],37:[function(e,t,r){"use strict";var i=e("immediate");function h(){}var f={},s=["REJECTED"],a=["FULFILLED"],n=["PENDING"];function o(e){if("function"!=typeof e)throw new TypeError("resolver must be a function");this.state=n,this.queue=[],this.outcome=void 0,e!==h&&c(this,e)}function u(e,t,r){this.promise=e,"function"==typeof t&&(this.onFulfilled=t,this.callFulfilled=this.otherCallFulfilled),"function"==typeof r&&(this.onRejected=r,this.callRejected=this.otherCallRejected)}function l(t,r,n){i(function(){var e;try{e=r(n)}catch(e){return f.reject(t,e)}e===t?f.reject(t,new TypeError("Cannot resolve promise with itself")):f.resolve(t,e)})}function d(e){var t=e&&e.then;if(e&&("object"==typeof e||"function"==typeof e)&&"function"==typeof t)return function(){t.apply(e,arguments)}}function c(t,e){var r=!1;function n(e){r||(r=!0,f.reject(t,e))}function i(e){r||(r=!0,f.resolve(t,e))}var s=p(function(){e(i,n)});"error"===s.status&&n(s.value)}function p(e,t){var r={};try{r.value=e(t),r.status="success"}catch(e){r.status="error",r.value=e}return r}(t.exports=o).prototype.finally=function(t){if("function"!=typeof t)return this;var r=this.constructor;return this.then(function(e){return r.resolve(t()).then(function(){return e})},function(e){return r.resolve(t()).then(function(){throw e})})},o.prototype.catch=function(e){return this.then(null,e)},o.prototype.then=function(e,t){if("function"!=typeof e&&this.state===a||"function"!=typeof t&&this.state===s)return this;var r=new this.constructor(h);return this.state!==n?l(r,this.state===a?e:t,this.outcome):this.queue.push(new u(r,e,t)),r},u.prototype.callFulfilled=function(e){f.resolve(this.promise,e)},u.prototype.otherCallFulfilled=function(e){l(this.promise,this.onFulfilled,e)},u.prototype.callRejected=function(e){f.reject(this.promise,e)},u.prototype.otherCallRejected=function(e){l(this.promise,this.onRejected,e)},f.resolve=function(e,t){var r=p(d,t);if("error"===r.status)return f.reject(e,r.value);var n=r.value;if(n)c(e,n);else{e.state=a,e.outcome=t;for(var i=-1,s=e.queue.length;++i<s;)e.queue[i].callFulfilled(t)}return e},f.reject=function(e,t){e.state=s,e.outcome=t;for(var r=-1,n=e.queue.length;++r<n;)e.queue[r].callRejected(t);return e},o.resolve=function(e){return e instanceof this?e:f.resolve(new this(h),e)},o.reject=function(e){var t=new this(h);return f.reject(t,e)},o.all=function(e){var r=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var n=e.length,i=!1;if(!n)return this.resolve([]);for(var s=new Array(n),a=0,t=-1,o=new this(h);++t<n;)u(e[t],t);return o;function u(e,t){r.resolve(e).then(function(e){s[t]=e,++a!==n||i||(i=!0,f.resolve(o,s))},function(e){i||(i=!0,f.reject(o,e))})}},o.race=function(e){if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var t=e.length,r=!1;if(!t)return this.resolve([]);for(var n,i=-1,s=new this(h);++i<t;)n=e[i],this.resolve(n).then(function(e){r||(r=!0,f.resolve(s,e))},function(e){r||(r=!0,f.reject(s,e))});return s}},{immediate:36}],38:[function(e,t,r){"use strict";var n={};(0,e("./lib/utils/common").assign)(n,e("./lib/deflate"),e("./lib/inflate"),e("./lib/zlib/constants")),t.exports=n},{"./lib/deflate":39,"./lib/inflate":40,"./lib/utils/common":41,"./lib/zlib/constants":44}],39:[function(e,t,r){"use strict";var a=e("./zlib/deflate"),o=e("./utils/common"),u=e("./utils/strings"),i=e("./zlib/messages"),s=e("./zlib/zstream"),h=Object.prototype.toString,f=0,l=-1,d=0,c=8;function p(e){if(!(this instanceof p))return new p(e);this.options=o.assign({level:l,method:c,chunkSize:16384,windowBits:15,memLevel:8,strategy:d,to:""},e||{});var t=this.options;t.raw&&0<t.windowBits?t.windowBits=-t.windowBits:t.gzip&&0<t.windowBits&&t.windowBits<16&&(t.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new s,this.strm.avail_out=0;var r=a.deflateInit2(this.strm,t.level,t.method,t.windowBits,t.memLevel,t.strategy);if(r!==f)throw new Error(i[r]);if(t.header&&a.deflateSetHeader(this.strm,t.header),t.dictionary){var n;if(n="string"==typeof t.dictionary?u.string2buf(t.dictionary):"[object ArrayBuffer]"===h.call(t.dictionary)?new Uint8Array(t.dictionary):t.dictionary,(r=a.deflateSetDictionary(this.strm,n))!==f)throw new Error(i[r]);this._dict_set=!0}}function n(e,t){var r=new p(t);if(r.push(e,!0),r.err)throw r.msg||i[r.err];return r.result}p.prototype.push=function(e,t){var r,n,i=this.strm,s=this.options.chunkSize;if(this.ended)return!1;n=t===~~t?t:!0===t?4:0,"string"==typeof e?i.input=u.string2buf(e):"[object ArrayBuffer]"===h.call(e)?i.input=new Uint8Array(e):i.input=e,i.next_in=0,i.avail_in=i.input.length;do{if(0===i.avail_out&&(i.output=new o.Buf8(s),i.next_out=0,i.avail_out=s),1!==(r=a.deflate(i,n))&&r!==f)return this.onEnd(r),!(this.ended=!0);0!==i.avail_out&&(0!==i.avail_in||4!==n&&2!==n)||("string"===this.options.to?this.onData(u.buf2binstring(o.shrinkBuf(i.output,i.next_out))):this.onData(o.shrinkBuf(i.output,i.next_out)))}while((0<i.avail_in||0===i.avail_out)&&1!==r);return 4===n?(r=a.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===f):2!==n||(this.onEnd(f),!(i.avail_out=0))},p.prototype.onData=function(e){this.chunks.push(e)},p.prototype.onEnd=function(e){e===f&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=o.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},r.Deflate=p,r.deflate=n,r.deflateRaw=function(e,t){return(t=t||{}).raw=!0,n(e,t)},r.gzip=function(e,t){return(t=t||{}).gzip=!0,n(e,t)}},{"./utils/common":41,"./utils/strings":42,"./zlib/deflate":46,"./zlib/messages":51,"./zlib/zstream":53}],40:[function(e,t,r){"use strict";var d=e("./zlib/inflate"),c=e("./utils/common"),p=e("./utils/strings"),m=e("./zlib/constants"),n=e("./zlib/messages"),i=e("./zlib/zstream"),s=e("./zlib/gzheader"),_=Object.prototype.toString;function a(e){if(!(this instanceof a))return new a(e);this.options=c.assign({chunkSize:16384,windowBits:0,to:""},e||{});var t=this.options;t.raw&&0<=t.windowBits&&t.windowBits<16&&(t.windowBits=-t.windowBits,0===t.windowBits&&(t.windowBits=-15)),!(0<=t.windowBits&&t.windowBits<16)||e&&e.windowBits||(t.windowBits+=32),15<t.windowBits&&t.windowBits<48&&0==(15&t.windowBits)&&(t.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new i,this.strm.avail_out=0;var r=d.inflateInit2(this.strm,t.windowBits);if(r!==m.Z_OK)throw new Error(n[r]);this.header=new s,d.inflateGetHeader(this.strm,this.header)}function o(e,t){var r=new a(t);if(r.push(e,!0),r.err)throw r.msg||n[r.err];return r.result}a.prototype.push=function(e,t){var r,n,i,s,a,o,u=this.strm,h=this.options.chunkSize,f=this.options.dictionary,l=!1;if(this.ended)return!1;n=t===~~t?t:!0===t?m.Z_FINISH:m.Z_NO_FLUSH,"string"==typeof e?u.input=p.binstring2buf(e):"[object ArrayBuffer]"===_.call(e)?u.input=new Uint8Array(e):u.input=e,u.next_in=0,u.avail_in=u.input.length;do{if(0===u.avail_out&&(u.output=new c.Buf8(h),u.next_out=0,u.avail_out=h),(r=d.inflate(u,m.Z_NO_FLUSH))===m.Z_NEED_DICT&&f&&(o="string"==typeof f?p.string2buf(f):"[object ArrayBuffer]"===_.call(f)?new Uint8Array(f):f,r=d.inflateSetDictionary(this.strm,o)),r===m.Z_BUF_ERROR&&!0===l&&(r=m.Z_OK,l=!1),r!==m.Z_STREAM_END&&r!==m.Z_OK)return this.onEnd(r),!(this.ended=!0);u.next_out&&(0!==u.avail_out&&r!==m.Z_STREAM_END&&(0!==u.avail_in||n!==m.Z_FINISH&&n!==m.Z_SYNC_FLUSH)||("string"===this.options.to?(i=p.utf8border(u.output,u.next_out),s=u.next_out-i,a=p.buf2string(u.output,i),u.next_out=s,u.avail_out=h-s,s&&c.arraySet(u.output,u.output,i,s,0),this.onData(a)):this.onData(c.shrinkBuf(u.output,u.next_out)))),0===u.avail_in&&0===u.avail_out&&(l=!0)}while((0<u.avail_in||0===u.avail_out)&&r!==m.Z_STREAM_END);return r===m.Z_STREAM_END&&(n=m.Z_FINISH),n===m.Z_FINISH?(r=d.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===m.Z_OK):n!==m.Z_SYNC_FLUSH||(this.onEnd(m.Z_OK),!(u.avail_out=0))},a.prototype.onData=function(e){this.chunks.push(e)},a.prototype.onEnd=function(e){e===m.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=c.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},r.Inflate=a,r.inflate=o,r.inflateRaw=function(e,t){return(t=t||{}).raw=!0,o(e,t)},r.ungzip=o},{"./utils/common":41,"./utils/strings":42,"./zlib/constants":44,"./zlib/gzheader":47,"./zlib/inflate":49,"./zlib/messages":51,"./zlib/zstream":53}],41:[function(e,t,r){"use strict";var n="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;r.assign=function(e){for(var t=Array.prototype.slice.call(arguments,1);t.length;){var r=t.shift();if(r){if("object"!=typeof r)throw new TypeError(r+"must be non-object");for(var n in r)r.hasOwnProperty(n)&&(e[n]=r[n])}}return e},r.shrinkBuf=function(e,t){return e.length===t?e:e.subarray?e.subarray(0,t):(e.length=t,e)};var i={arraySet:function(e,t,r,n,i){if(t.subarray&&e.subarray)e.set(t.subarray(r,r+n),i);else for(var s=0;s<n;s++)e[i+s]=t[r+s]},flattenChunks:function(e){var t,r,n,i,s,a;for(t=n=0,r=e.length;t<r;t++)n+=e[t].length;for(a=new Uint8Array(n),t=i=0,r=e.length;t<r;t++)s=e[t],a.set(s,i),i+=s.length;return a}},s={arraySet:function(e,t,r,n,i){for(var s=0;s<n;s++)e[i+s]=t[r+s]},flattenChunks:function(e){return[].concat.apply([],e)}};r.setTyped=function(e){e?(r.Buf8=Uint8Array,r.Buf16=Uint16Array,r.Buf32=Int32Array,r.assign(r,i)):(r.Buf8=Array,r.Buf16=Array,r.Buf32=Array,r.assign(r,s))},r.setTyped(n)},{}],42:[function(e,t,r){"use strict";var u=e("./common"),i=!0,s=!0;try{String.fromCharCode.apply(null,[0])}catch(e){i=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(e){s=!1}for(var h=new u.Buf8(256),n=0;n<256;n++)h[n]=252<=n?6:248<=n?5:240<=n?4:224<=n?3:192<=n?2:1;function f(e,t){if(t<65537&&(e.subarray&&s||!e.subarray&&i))return String.fromCharCode.apply(null,u.shrinkBuf(e,t));for(var r="",n=0;n<t;n++)r+=String.fromCharCode(e[n]);return r}h[254]=h[254]=1,r.string2buf=function(e){var t,r,n,i,s,a=e.length,o=0;for(i=0;i<a;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),o+=r<128?1:r<2048?2:r<65536?3:4;for(t=new u.Buf8(o),i=s=0;s<o;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),r<128?t[s++]=r:(r<2048?t[s++]=192|r>>>6:(r<65536?t[s++]=224|r>>>12:(t[s++]=240|r>>>18,t[s++]=128|r>>>12&63),t[s++]=128|r>>>6&63),t[s++]=128|63&r);return t},r.buf2binstring=function(e){return f(e,e.length)},r.binstring2buf=function(e){for(var t=new u.Buf8(e.length),r=0,n=t.length;r<n;r++)t[r]=e.charCodeAt(r);return t},r.buf2string=function(e,t){var r,n,i,s,a=t||e.length,o=new Array(2*a);for(r=n=0;r<a;)if((i=e[r++])<128)o[n++]=i;else if(4<(s=h[i]))o[n++]=65533,r+=s-1;else{for(i&=2===s?31:3===s?15:7;1<s&&r<a;)i=i<<6|63&e[r++],s--;1<s?o[n++]=65533:i<65536?o[n++]=i:(i-=65536,o[n++]=55296|i>>10&1023,o[n++]=56320|1023&i)}return f(o,n)},r.utf8border=function(e,t){var r;for((t=t||e.length)>e.length&&(t=e.length),r=t-1;0<=r&&128==(192&e[r]);)r--;return r<0?t:0===r?t:r+h[e[r]]>t?r:t}},{"./common":41}],43:[function(e,t,r){"use strict";t.exports=function(e,t,r,n){for(var i=65535&e|0,s=e>>>16&65535|0,a=0;0!==r;){for(r-=a=2e3<r?2e3:r;s=s+(i=i+t[n++]|0)|0,--a;);i%=65521,s%=65521}return i|s<<16|0}},{}],44:[function(e,t,r){"use strict";t.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],45:[function(e,t,r){"use strict";var o=function(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[r]=e}return t}();t.exports=function(e,t,r,n){var i=o,s=n+r;e^=-1;for(var a=n;a<s;a++)e=e>>>8^i[255&(e^t[a])];return-1^e}},{}],46:[function(e,t,r){"use strict";var u,d=e("../utils/common"),h=e("./trees"),c=e("./adler32"),p=e("./crc32"),n=e("./messages"),f=0,l=0,m=-2,i=2,_=8,s=286,a=30,o=19,g=2*s+1,v=15,b=3,w=258,y=w+b+1,k=42,x=113;function S(e,t){return e.msg=n[t],t}function z(e){return(e<<1)-(4<e?9:0)}function E(e){for(var t=e.length;0<=--t;)e[t]=0}function C(e){var t=e.state,r=t.pending;r>e.avail_out&&(r=e.avail_out),0!==r&&(d.arraySet(e.output,t.pending_buf,t.pending_out,r,e.next_out),e.next_out+=r,t.pending_out+=r,e.total_out+=r,e.avail_out-=r,t.pending-=r,0===t.pending&&(t.pending_out=0))}function A(e,t){h._tr_flush_block(e,0<=e.block_start?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,C(e.strm)}function I(e,t){e.pending_buf[e.pending++]=t}function O(e,t){e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=255&t}function B(e,t){var r,n,i=e.max_chain_length,s=e.strstart,a=e.prev_length,o=e.nice_match,u=e.strstart>e.w_size-y?e.strstart-(e.w_size-y):0,h=e.window,f=e.w_mask,l=e.prev,d=e.strstart+w,c=h[s+a-1],p=h[s+a];e.prev_length>=e.good_match&&(i>>=2),o>e.lookahead&&(o=e.lookahead);do{if(h[(r=t)+a]===p&&h[r+a-1]===c&&h[r]===h[s]&&h[++r]===h[s+1]){s+=2,r++;do{}while(h[++s]===h[++r]&&h[++s]===h[++r]&&h[++s]===h[++r]&&h[++s]===h[++r]&&h[++s]===h[++r]&&h[++s]===h[++r]&&h[++s]===h[++r]&&h[++s]===h[++r]&&s<d);if(n=w-(d-s),s=d-w,a<n){if(e.match_start=t,o<=(a=n))break;c=h[s+a-1],p=h[s+a]}}}while((t=l[t&f])>u&&0!=--i);return a<=e.lookahead?a:e.lookahead}function T(e){var t,r,n,i,s,a,o,u,h,f,l=e.w_size;do{if(i=e.window_size-e.lookahead-e.strstart,e.strstart>=l+(l-y)){for(d.arraySet(e.window,e.window,l,l,0),e.match_start-=l,e.strstart-=l,e.block_start-=l,t=r=e.hash_size;n=e.head[--t],e.head[t]=l<=n?n-l:0,--r;);for(t=r=l;n=e.prev[--t],e.prev[t]=l<=n?n-l:0,--r;);i+=l}if(0===e.strm.avail_in)break;if(a=e.strm,o=e.window,u=e.strstart+e.lookahead,f=void 0,(h=i)<(f=a.avail_in)&&(f=h),r=0===f?0:(a.avail_in-=f,d.arraySet(o,a.input,a.next_in,f,u),1===a.state.wrap?a.adler=c(a.adler,o,f,u):2===a.state.wrap&&(a.adler=p(a.adler,o,f,u)),a.next_in+=f,a.total_in+=f,f),e.lookahead+=r,e.lookahead+e.insert>=b)for(s=e.strstart-e.insert,e.ins_h=e.window[s],e.ins_h=(e.ins_h<<e.hash_shift^e.window[s+1])&e.hash_mask;e.insert&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[s+b-1])&e.hash_mask,e.prev[s&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=s,s++,e.insert--,!(e.lookahead+e.insert<b)););}while(e.lookahead<y&&0!==e.strm.avail_in)}function R(e,t){for(var r,n;;){if(e.lookahead<y){if(T(e),e.lookahead<y&&t===f)return 1;if(0===e.lookahead)break}if(r=0,e.lookahead>=b&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+b-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==r&&e.strstart-r<=e.w_size-y&&(e.match_length=B(e,r)),e.match_length>=b)if(n=h._tr_tally(e,e.strstart-e.match_start,e.match_length-b),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=b){for(e.match_length--;e.strstart++,e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+b-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart,0!=--e.match_length;);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask;else n=h._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(n&&(A(e,!1),0===e.strm.avail_out))return 1}return e.insert=e.strstart<b-1?e.strstart:b-1,4===t?(A(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(A(e,!1),0===e.strm.avail_out)?1:2}function D(e,t){for(var r,n,i;;){if(e.lookahead<y){if(T(e),e.lookahead<y&&t===f)return 1;if(0===e.lookahead)break}if(r=0,e.lookahead>=b&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+b-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=b-1,0!==r&&e.prev_length<e.max_lazy_match&&e.strstart-r<=e.w_size-y&&(e.match_length=B(e,r),e.match_length<=5&&(1===e.strategy||e.match_length===b&&4096<e.strstart-e.match_start)&&(e.match_length=b-1)),e.prev_length>=b&&e.match_length<=e.prev_length){for(i=e.strstart+e.lookahead-b,n=h._tr_tally(e,e.strstart-1-e.prev_match,e.prev_length-b),e.lookahead-=e.prev_length-1,e.prev_length-=2;++e.strstart<=i&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+b-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!=--e.prev_length;);if(e.match_available=0,e.match_length=b-1,e.strstart++,n&&(A(e,!1),0===e.strm.avail_out))return 1}else if(e.match_available){if((n=h._tr_tally(e,0,e.window[e.strstart-1]))&&A(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return 1}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(n=h._tr_tally(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<b-1?e.strstart:b-1,4===t?(A(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(A(e,!1),0===e.strm.avail_out)?1:2}function F(e,t,r,n,i){this.good_length=e,this.max_lazy=t,this.nice_length=r,this.max_chain=n,this.func=i}function N(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=_,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new d.Buf16(2*g),this.dyn_dtree=new d.Buf16(2*(2*a+1)),this.bl_tree=new d.Buf16(2*(2*o+1)),E(this.dyn_ltree),E(this.dyn_dtree),E(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new d.Buf16(v+1),this.heap=new d.Buf16(2*s+1),E(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new d.Buf16(2*s+1),E(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function U(e){var t;return e&&e.state?(e.total_in=e.total_out=0,e.data_type=i,(t=e.state).pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=t.wrap?k:x,e.adler=2===t.wrap?0:1,t.last_flush=f,h._tr_init(t),l):S(e,m)}function P(e){var t,r=U(e);return r===l&&((t=e.state).window_size=2*t.w_size,E(t.head),t.max_lazy_match=u[t.level].max_lazy,t.good_match=u[t.level].good_length,t.nice_match=u[t.level].nice_length,t.max_chain_length=u[t.level].max_chain,t.strstart=0,t.block_start=0,t.lookahead=0,t.insert=0,t.match_length=t.prev_length=b-1,t.match_available=0,t.ins_h=0),r}function L(e,t,r,n,i,s){if(!e)return m;var a=1;if(-1===t&&(t=6),n<0?(a=0,n=-n):15<n&&(a=2,n-=16),i<1||9<i||r!==_||n<8||15<n||t<0||9<t||s<0||4<s)return S(e,m);8===n&&(n=9);var o=new N;return(e.state=o).strm=e,o.wrap=a,o.gzhead=null,o.w_bits=n,o.w_size=1<<o.w_bits,o.w_mask=o.w_size-1,o.hash_bits=i+7,o.hash_size=1<<o.hash_bits,o.hash_mask=o.hash_size-1,o.hash_shift=~~((o.hash_bits+b-1)/b),o.window=new d.Buf8(2*o.w_size),o.head=new d.Buf16(o.hash_size),o.prev=new d.Buf16(o.w_size),o.lit_bufsize=1<<i+6,o.pending_buf_size=4*o.lit_bufsize,o.pending_buf=new d.Buf8(o.pending_buf_size),o.d_buf=1*o.lit_bufsize,o.l_buf=3*o.lit_bufsize,o.level=t,o.strategy=s,o.method=r,P(e)}u=[new F(0,0,0,0,function(e,t){var r=65535;for(r>e.pending_buf_size-5&&(r=e.pending_buf_size-5);;){if(e.lookahead<=1){if(T(e),0===e.lookahead&&t===f)return 1;if(0===e.lookahead)break}e.strstart+=e.lookahead,e.lookahead=0;var n=e.block_start+r;if((0===e.strstart||e.strstart>=n)&&(e.lookahead=e.strstart-n,e.strstart=n,A(e,!1),0===e.strm.avail_out))return 1;if(e.strstart-e.block_start>=e.w_size-y&&(A(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(A(e,!0),0===e.strm.avail_out?3:4):(e.strstart>e.block_start&&(A(e,!1),e.strm.avail_out),1)}),new F(4,4,8,4,R),new F(4,5,16,8,R),new F(4,6,32,32,R),new F(4,4,16,16,D),new F(8,16,32,32,D),new F(8,16,128,128,D),new F(8,32,128,256,D),new F(32,128,258,1024,D),new F(32,258,258,4096,D)],r.deflateInit=function(e,t){return L(e,t,_,15,8,0)},r.deflateInit2=L,r.deflateReset=P,r.deflateResetKeep=U,r.deflateSetHeader=function(e,t){return e&&e.state?2!==e.state.wrap?m:(e.state.gzhead=t,l):m},r.deflate=function(e,t){var r,n,i,s;if(!e||!e.state||5<t||t<0)return e?S(e,m):m;if(n=e.state,!e.output||!e.input&&0!==e.avail_in||666===n.status&&4!==t)return S(e,0===e.avail_out?-5:m);if(n.strm=e,r=n.last_flush,n.last_flush=t,n.status===k)if(2===n.wrap)e.adler=0,I(n,31),I(n,139),I(n,8),n.gzhead?(I(n,(n.gzhead.text?1:0)+(n.gzhead.hcrc?2:0)+(n.gzhead.extra?4:0)+(n.gzhead.name?8:0)+(n.gzhead.comment?16:0)),I(n,255&n.gzhead.time),I(n,n.gzhead.time>>8&255),I(n,n.gzhead.time>>16&255),I(n,n.gzhead.time>>24&255),I(n,9===n.level?2:2<=n.strategy||n.level<2?4:0),I(n,255&n.gzhead.os),n.gzhead.extra&&n.gzhead.extra.length&&(I(n,255&n.gzhead.extra.length),I(n,n.gzhead.extra.length>>8&255)),n.gzhead.hcrc&&(e.adler=p(e.adler,n.pending_buf,n.pending,0)),n.gzindex=0,n.status=69):(I(n,0),I(n,0),I(n,0),I(n,0),I(n,0),I(n,9===n.level?2:2<=n.strategy||n.level<2?4:0),I(n,3),n.status=x);else{var a=_+(n.w_bits-8<<4)<<8;a|=(2<=n.strategy||n.level<2?0:n.level<6?1:6===n.level?2:3)<<6,0!==n.strstart&&(a|=32),a+=31-a%31,n.status=x,O(n,a),0!==n.strstart&&(O(n,e.adler>>>16),O(n,65535&e.adler)),e.adler=1}if(69===n.status)if(n.gzhead.extra){for(i=n.pending;n.gzindex<(65535&n.gzhead.extra.length)&&(n.pending!==n.pending_buf_size||(n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),C(e),i=n.pending,n.pending!==n.pending_buf_size));)I(n,255&n.gzhead.extra[n.gzindex]),n.gzindex++;n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),n.gzindex===n.gzhead.extra.length&&(n.gzindex=0,n.status=73)}else n.status=73;if(73===n.status)if(n.gzhead.name){i=n.pending;do{if(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),C(e),i=n.pending,n.pending===n.pending_buf_size)){s=1;break}s=n.gzindex<n.gzhead.name.length?255&n.gzhead.name.charCodeAt(n.gzindex++):0,I(n,s)}while(0!==s);n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),0===s&&(n.gzindex=0,n.status=91)}else n.status=91;if(91===n.status)if(n.gzhead.comment){i=n.pending;do{if(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),C(e),i=n.pending,n.pending===n.pending_buf_size)){s=1;break}s=n.gzindex<n.gzhead.comment.length?255&n.gzhead.comment.charCodeAt(n.gzindex++):0,I(n,s)}while(0!==s);n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),0===s&&(n.status=103)}else n.status=103;if(103===n.status&&(n.gzhead.hcrc?(n.pending+2>n.pending_buf_size&&C(e),n.pending+2<=n.pending_buf_size&&(I(n,255&e.adler),I(n,e.adler>>8&255),e.adler=0,n.status=x)):n.status=x),0!==n.pending){if(C(e),0===e.avail_out)return n.last_flush=-1,l}else if(0===e.avail_in&&z(t)<=z(r)&&4!==t)return S(e,-5);if(666===n.status&&0!==e.avail_in)return S(e,-5);if(0!==e.avail_in||0!==n.lookahead||t!==f&&666!==n.status){var o=2===n.strategy?function(e,t){for(var r;;){if(0===e.lookahead&&(T(e),0===e.lookahead)){if(t===f)return 1;break}if(e.match_length=0,r=h._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,r&&(A(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(A(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(A(e,!1),0===e.strm.avail_out)?1:2}(n,t):3===n.strategy?function(e,t){for(var r,n,i,s,a=e.window;;){if(e.lookahead<=w){if(T(e),e.lookahead<=w&&t===f)return 1;if(0===e.lookahead)break}if(e.match_length=0,e.lookahead>=b&&0<e.strstart&&(n=a[i=e.strstart-1])===a[++i]&&n===a[++i]&&n===a[++i]){s=e.strstart+w;do{}while(n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&i<s);e.match_length=w-(s-i),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=b?(r=h._tr_tally(e,1,e.match_length-b),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(r=h._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),r&&(A(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(A(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(A(e,!1),0===e.strm.avail_out)?1:2}(n,t):u[n.level].func(n,t);if(3!==o&&4!==o||(n.status=666),1===o||3===o)return 0===e.avail_out&&(n.last_flush=-1),l;if(2===o&&(1===t?h._tr_align(n):5!==t&&(h._tr_stored_block(n,0,0,!1),3===t&&(E(n.head),0===n.lookahead&&(n.strstart=0,n.block_start=0,n.insert=0))),C(e),0===e.avail_out))return n.last_flush=-1,l}return 4!==t?l:n.wrap<=0?1:(2===n.wrap?(I(n,255&e.adler),I(n,e.adler>>8&255),I(n,e.adler>>16&255),I(n,e.adler>>24&255),I(n,255&e.total_in),I(n,e.total_in>>8&255),I(n,e.total_in>>16&255),I(n,e.total_in>>24&255)):(O(n,e.adler>>>16),O(n,65535&e.adler)),C(e),0<n.wrap&&(n.wrap=-n.wrap),0!==n.pending?l:1)},r.deflateEnd=function(e){var t;return e&&e.state?(t=e.state.status)!==k&&69!==t&&73!==t&&91!==t&&103!==t&&t!==x&&666!==t?S(e,m):(e.state=null,t===x?S(e,-3):l):m},r.deflateSetDictionary=function(e,t){var r,n,i,s,a,o,u,h,f=t.length;if(!e||!e.state)return m;if(2===(s=(r=e.state).wrap)||1===s&&r.status!==k||r.lookahead)return m;for(1===s&&(e.adler=c(e.adler,t,f,0)),r.wrap=0,f>=r.w_size&&(0===s&&(E(r.head),r.strstart=0,r.block_start=0,r.insert=0),h=new d.Buf8(r.w_size),d.arraySet(h,t,f-r.w_size,r.w_size,0),t=h,f=r.w_size),a=e.avail_in,o=e.next_in,u=e.input,e.avail_in=f,e.next_in=0,e.input=t,T(r);r.lookahead>=b;){for(n=r.strstart,i=r.lookahead-(b-1);r.ins_h=(r.ins_h<<r.hash_shift^r.window[n+b-1])&r.hash_mask,r.prev[n&r.w_mask]=r.head[r.ins_h],r.head[r.ins_h]=n,n++,--i;);r.strstart=n,r.lookahead=b-1,T(r)}return r.strstart+=r.lookahead,r.block_start=r.strstart,r.insert=r.lookahead,r.lookahead=0,r.match_length=r.prev_length=b-1,r.match_available=0,e.next_in=o,e.input=u,e.avail_in=a,r.wrap=s,l},r.deflateInfo="pako deflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./messages":51,"./trees":52}],47:[function(e,t,r){"use strict";t.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}},{}],48:[function(e,t,r){"use strict";t.exports=function(e,t){var r,n,i,s,a,o,u,h,f,l,d,c,p,m,_,g,v,b,w,y,k,x,S,z,E;r=e.state,n=e.next_in,z=e.input,i=n+(e.avail_in-5),s=e.next_out,E=e.output,a=s-(t-e.avail_out),o=s+(e.avail_out-257),u=r.dmax,h=r.wsize,f=r.whave,l=r.wnext,d=r.window,c=r.hold,p=r.bits,m=r.lencode,_=r.distcode,g=(1<<r.lenbits)-1,v=(1<<r.distbits)-1;e:do{p<15&&(c+=z[n++]<<p,p+=8,c+=z[n++]<<p,p+=8),b=m[c&g];t:for(;;){if(c>>>=w=b>>>24,p-=w,0==(w=b>>>16&255))E[s++]=65535&b;else{if(!(16&w)){if(0==(64&w)){b=m[(65535&b)+(c&(1<<w)-1)];continue t}if(32&w){r.mode=12;break e}e.msg="invalid literal/length code",r.mode=30;break e}y=65535&b,(w&=15)&&(p<w&&(c+=z[n++]<<p,p+=8),y+=c&(1<<w)-1,c>>>=w,p-=w),p<15&&(c+=z[n++]<<p,p+=8,c+=z[n++]<<p,p+=8),b=_[c&v];r:for(;;){if(c>>>=w=b>>>24,p-=w,!(16&(w=b>>>16&255))){if(0==(64&w)){b=_[(65535&b)+(c&(1<<w)-1)];continue r}e.msg="invalid distance code",r.mode=30;break e}if(k=65535&b,p<(w&=15)&&(c+=z[n++]<<p,(p+=8)<w&&(c+=z[n++]<<p,p+=8)),u<(k+=c&(1<<w)-1)){e.msg="invalid distance too far back",r.mode=30;break e}if(c>>>=w,p-=w,(w=s-a)<k){if(f<(w=k-w)&&r.sane){e.msg="invalid distance too far back",r.mode=30;break e}if(S=d,(x=0)===l){if(x+=h-w,w<y){for(y-=w;E[s++]=d[x++],--w;);x=s-k,S=E}}else if(l<w){if(x+=h+l-w,(w-=l)<y){for(y-=w;E[s++]=d[x++],--w;);if(x=0,l<y){for(y-=w=l;E[s++]=d[x++],--w;);x=s-k,S=E}}}else if(x+=l-w,w<y){for(y-=w;E[s++]=d[x++],--w;);x=s-k,S=E}for(;2<y;)E[s++]=S[x++],E[s++]=S[x++],E[s++]=S[x++],y-=3;y&&(E[s++]=S[x++],1<y&&(E[s++]=S[x++]))}else{for(x=s-k;E[s++]=E[x++],E[s++]=E[x++],E[s++]=E[x++],2<(y-=3););y&&(E[s++]=E[x++],1<y&&(E[s++]=E[x++]))}break}}break}}while(n<i&&s<o);n-=y=p>>3,c&=(1<<(p-=y<<3))-1,e.next_in=n,e.next_out=s,e.avail_in=n<i?i-n+5:5-(n-i),e.avail_out=s<o?o-s+257:257-(s-o),r.hold=c,r.bits=p}},{}],49:[function(e,t,r){"use strict";var I=e("../utils/common"),O=e("./adler32"),B=e("./crc32"),T=e("./inffast"),R=e("./inftrees"),D=1,F=2,N=0,U=-2,P=1,n=852,i=592;function L(e){return(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24)}function s(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new I.Buf16(320),this.work=new I.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function a(e){var t;return e&&e.state?(t=e.state,e.total_in=e.total_out=t.total=0,e.msg="",t.wrap&&(e.adler=1&t.wrap),t.mode=P,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new I.Buf32(n),t.distcode=t.distdyn=new I.Buf32(i),t.sane=1,t.back=-1,N):U}function o(e){var t;return e&&e.state?((t=e.state).wsize=0,t.whave=0,t.wnext=0,a(e)):U}function u(e,t){var r,n;return e&&e.state?(n=e.state,t<0?(r=0,t=-t):(r=1+(t>>4),t<48&&(t&=15)),t&&(t<8||15<t)?U:(null!==n.window&&n.wbits!==t&&(n.window=null),n.wrap=r,n.wbits=t,o(e))):U}function h(e,t){var r,n;return e?(n=new s,(e.state=n).window=null,(r=u(e,t))!==N&&(e.state=null),r):U}var f,l,d=!0;function j(e){if(d){var t;for(f=new I.Buf32(512),l=new I.Buf32(32),t=0;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(R(D,e.lens,0,288,f,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;R(F,e.lens,0,32,l,0,e.work,{bits:5}),d=!1}e.lencode=f,e.lenbits=9,e.distcode=l,e.distbits=5}function Z(e,t,r,n){var i,s=e.state;return null===s.window&&(s.wsize=1<<s.wbits,s.wnext=0,s.whave=0,s.window=new I.Buf8(s.wsize)),n>=s.wsize?(I.arraySet(s.window,t,r-s.wsize,s.wsize,0),s.wnext=0,s.whave=s.wsize):(n<(i=s.wsize-s.wnext)&&(i=n),I.arraySet(s.window,t,r-n,i,s.wnext),(n-=i)?(I.arraySet(s.window,t,r-n,n,0),s.wnext=n,s.whave=s.wsize):(s.wnext+=i,s.wnext===s.wsize&&(s.wnext=0),s.whave<s.wsize&&(s.whave+=i))),0}r.inflateReset=o,r.inflateReset2=u,r.inflateResetKeep=a,r.inflateInit=function(e){return h(e,15)},r.inflateInit2=h,r.inflate=function(e,t){var r,n,i,s,a,o,u,h,f,l,d,c,p,m,_,g,v,b,w,y,k,x,S,z,E=0,C=new I.Buf8(4),A=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return U;12===(r=e.state).mode&&(r.mode=13),a=e.next_out,i=e.output,u=e.avail_out,s=e.next_in,n=e.input,o=e.avail_in,h=r.hold,f=r.bits,l=o,d=u,x=N;e:for(;;)switch(r.mode){case P:if(0===r.wrap){r.mode=13;break}for(;f<16;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}if(2&r.wrap&&35615===h){C[r.check=0]=255&h,C[1]=h>>>8&255,r.check=B(r.check,C,2,0),f=h=0,r.mode=2;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&h)<<8)+(h>>8))%31){e.msg="incorrect header check",r.mode=30;break}if(8!=(15&h)){e.msg="unknown compression method",r.mode=30;break}if(f-=4,k=8+(15&(h>>>=4)),0===r.wbits)r.wbits=k;else if(k>r.wbits){e.msg="invalid window size",r.mode=30;break}r.dmax=1<<k,e.adler=r.check=1,r.mode=512&h?10:12,f=h=0;break;case 2:for(;f<16;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}if(r.flags=h,8!=(255&r.flags)){e.msg="unknown compression method",r.mode=30;break}if(57344&r.flags){e.msg="unknown header flags set",r.mode=30;break}r.head&&(r.head.text=h>>8&1),512&r.flags&&(C[0]=255&h,C[1]=h>>>8&255,r.check=B(r.check,C,2,0)),f=h=0,r.mode=3;case 3:for(;f<32;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}r.head&&(r.head.time=h),512&r.flags&&(C[0]=255&h,C[1]=h>>>8&255,C[2]=h>>>16&255,C[3]=h>>>24&255,r.check=B(r.check,C,4,0)),f=h=0,r.mode=4;case 4:for(;f<16;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}r.head&&(r.head.xflags=255&h,r.head.os=h>>8),512&r.flags&&(C[0]=255&h,C[1]=h>>>8&255,r.check=B(r.check,C,2,0)),f=h=0,r.mode=5;case 5:if(1024&r.flags){for(;f<16;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}r.length=h,r.head&&(r.head.extra_len=h),512&r.flags&&(C[0]=255&h,C[1]=h>>>8&255,r.check=B(r.check,C,2,0)),f=h=0}else r.head&&(r.head.extra=null);r.mode=6;case 6:if(1024&r.flags&&(o<(c=r.length)&&(c=o),c&&(r.head&&(k=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),I.arraySet(r.head.extra,n,s,c,k)),512&r.flags&&(r.check=B(r.check,n,c,s)),o-=c,s+=c,r.length-=c),r.length))break e;r.length=0,r.mode=7;case 7:if(2048&r.flags){if(0===o)break e;for(c=0;k=n[s+c++],r.head&&k&&r.length<65536&&(r.head.name+=String.fromCharCode(k)),k&&c<o;);if(512&r.flags&&(r.check=B(r.check,n,c,s)),o-=c,s+=c,k)break e}else r.head&&(r.head.name=null);r.length=0,r.mode=8;case 8:if(4096&r.flags){if(0===o)break e;for(c=0;k=n[s+c++],r.head&&k&&r.length<65536&&(r.head.comment+=String.fromCharCode(k)),k&&c<o;);if(512&r.flags&&(r.check=B(r.check,n,c,s)),o-=c,s+=c,k)break e}else r.head&&(r.head.comment=null);r.mode=9;case 9:if(512&r.flags){for(;f<16;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}if(h!==(65535&r.check)){e.msg="header crc mismatch",r.mode=30;break}f=h=0}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),e.adler=r.check=0,r.mode=12;break;case 10:for(;f<32;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}e.adler=r.check=L(h),f=h=0,r.mode=11;case 11:if(0===r.havedict)return e.next_out=a,e.avail_out=u,e.next_in=s,e.avail_in=o,r.hold=h,r.bits=f,2;e.adler=r.check=1,r.mode=12;case 12:if(5===t||6===t)break e;case 13:if(r.last){h>>>=7&f,f-=7&f,r.mode=27;break}for(;f<3;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}switch(r.last=1&h,f-=1,3&(h>>>=1)){case 0:r.mode=14;break;case 1:if(j(r),r.mode=20,6!==t)break;h>>>=2,f-=2;break e;case 2:r.mode=17;break;case 3:e.msg="invalid block type",r.mode=30}h>>>=2,f-=2;break;case 14:for(h>>>=7&f,f-=7&f;f<32;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}if((65535&h)!=(h>>>16^65535)){e.msg="invalid stored block lengths",r.mode=30;break}if(r.length=65535&h,f=h=0,r.mode=15,6===t)break e;case 15:r.mode=16;case 16:if(c=r.length){if(o<c&&(c=o),u<c&&(c=u),0===c)break e;I.arraySet(i,n,s,c,a),o-=c,s+=c,u-=c,a+=c,r.length-=c;break}r.mode=12;break;case 17:for(;f<14;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}if(r.nlen=257+(31&h),h>>>=5,f-=5,r.ndist=1+(31&h),h>>>=5,f-=5,r.ncode=4+(15&h),h>>>=4,f-=4,286<r.nlen||30<r.ndist){e.msg="too many length or distance symbols",r.mode=30;break}r.have=0,r.mode=18;case 18:for(;r.have<r.ncode;){for(;f<3;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}r.lens[A[r.have++]]=7&h,h>>>=3,f-=3}for(;r.have<19;)r.lens[A[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,S={bits:r.lenbits},x=R(0,r.lens,0,19,r.lencode,0,r.work,S),r.lenbits=S.bits,x){e.msg="invalid code lengths set",r.mode=30;break}r.have=0,r.mode=19;case 19:for(;r.have<r.nlen+r.ndist;){for(;g=(E=r.lencode[h&(1<<r.lenbits)-1])>>>16&255,v=65535&E,!((_=E>>>24)<=f);){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}if(v<16)h>>>=_,f-=_,r.lens[r.have++]=v;else{if(16===v){for(z=_+2;f<z;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}if(h>>>=_,f-=_,0===r.have){e.msg="invalid bit length repeat",r.mode=30;break}k=r.lens[r.have-1],c=3+(3&h),h>>>=2,f-=2}else if(17===v){for(z=_+3;f<z;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}f-=_,k=0,c=3+(7&(h>>>=_)),h>>>=3,f-=3}else{for(z=_+7;f<z;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}f-=_,k=0,c=11+(127&(h>>>=_)),h>>>=7,f-=7}if(r.have+c>r.nlen+r.ndist){e.msg="invalid bit length repeat",r.mode=30;break}for(;c--;)r.lens[r.have++]=k}}if(30===r.mode)break;if(0===r.lens[256]){e.msg="invalid code -- missing end-of-block",r.mode=30;break}if(r.lenbits=9,S={bits:r.lenbits},x=R(D,r.lens,0,r.nlen,r.lencode,0,r.work,S),r.lenbits=S.bits,x){e.msg="invalid literal/lengths set",r.mode=30;break}if(r.distbits=6,r.distcode=r.distdyn,S={bits:r.distbits},x=R(F,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,S),r.distbits=S.bits,x){e.msg="invalid distances set",r.mode=30;break}if(r.mode=20,6===t)break e;case 20:r.mode=21;case 21:if(6<=o&&258<=u){e.next_out=a,e.avail_out=u,e.next_in=s,e.avail_in=o,r.hold=h,r.bits=f,T(e,d),a=e.next_out,i=e.output,u=e.avail_out,s=e.next_in,n=e.input,o=e.avail_in,h=r.hold,f=r.bits,12===r.mode&&(r.back=-1);break}for(r.back=0;g=(E=r.lencode[h&(1<<r.lenbits)-1])>>>16&255,v=65535&E,!((_=E>>>24)<=f);){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}if(g&&0==(240&g)){for(b=_,w=g,y=v;g=(E=r.lencode[y+((h&(1<<b+w)-1)>>b)])>>>16&255,v=65535&E,!(b+(_=E>>>24)<=f);){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}h>>>=b,f-=b,r.back+=b}if(h>>>=_,f-=_,r.back+=_,r.length=v,0===g){r.mode=26;break}if(32&g){r.back=-1,r.mode=12;break}if(64&g){e.msg="invalid literal/length code",r.mode=30;break}r.extra=15&g,r.mode=22;case 22:if(r.extra){for(z=r.extra;f<z;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}r.length+=h&(1<<r.extra)-1,h>>>=r.extra,f-=r.extra,r.back+=r.extra}r.was=r.length,r.mode=23;case 23:for(;g=(E=r.distcode[h&(1<<r.distbits)-1])>>>16&255,v=65535&E,!((_=E>>>24)<=f);){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}if(0==(240&g)){for(b=_,w=g,y=v;g=(E=r.distcode[y+((h&(1<<b+w)-1)>>b)])>>>16&255,v=65535&E,!(b+(_=E>>>24)<=f);){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}h>>>=b,f-=b,r.back+=b}if(h>>>=_,f-=_,r.back+=_,64&g){e.msg="invalid distance code",r.mode=30;break}r.offset=v,r.extra=15&g,r.mode=24;case 24:if(r.extra){for(z=r.extra;f<z;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}r.offset+=h&(1<<r.extra)-1,h>>>=r.extra,f-=r.extra,r.back+=r.extra}if(r.offset>r.dmax){e.msg="invalid distance too far back",r.mode=30;break}r.mode=25;case 25:if(0===u)break e;if(c=d-u,r.offset>c){if((c=r.offset-c)>r.whave&&r.sane){e.msg="invalid distance too far back",r.mode=30;break}p=c>r.wnext?(c-=r.wnext,r.wsize-c):r.wnext-c,c>r.length&&(c=r.length),m=r.window}else m=i,p=a-r.offset,c=r.length;for(u<c&&(c=u),u-=c,r.length-=c;i[a++]=m[p++],--c;);0===r.length&&(r.mode=21);break;case 26:if(0===u)break e;i[a++]=r.length,u--,r.mode=21;break;case 27:if(r.wrap){for(;f<32;){if(0===o)break e;o--,h|=n[s++]<<f,f+=8}if(d-=u,e.total_out+=d,r.total+=d,d&&(e.adler=r.check=r.flags?B(r.check,i,d,a-d):O(r.check,i,d,a-d)),d=u,(r.flags?h:L(h))!==r.check){e.msg="incorrect data check",r.mode=30;break}f=h=0}r.mode=28;case 28:if(r.wrap&&r.flags){for(;f<32;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}if(h!==(4294967295&r.total)){e.msg="incorrect length check",r.mode=30;break}f=h=0}r.mode=29;case 29:x=1;break e;case 30:x=-3;break e;case 31:return-4;case 32:default:return U}return e.next_out=a,e.avail_out=u,e.next_in=s,e.avail_in=o,r.hold=h,r.bits=f,(r.wsize||d!==e.avail_out&&r.mode<30&&(r.mode<27||4!==t))&&Z(e,e.output,e.next_out,d-e.avail_out)?(r.mode=31,-4):(l-=e.avail_in,d-=e.avail_out,e.total_in+=l,e.total_out+=d,r.total+=d,r.wrap&&d&&(e.adler=r.check=r.flags?B(r.check,i,d,e.next_out-d):O(r.check,i,d,e.next_out-d)),e.data_type=r.bits+(r.last?64:0)+(12===r.mode?128:0)+(20===r.mode||15===r.mode?256:0),(0==l&&0===d||4===t)&&x===N&&(x=-5),x)},r.inflateEnd=function(e){if(!e||!e.state)return U;var t=e.state;return t.window&&(t.window=null),e.state=null,N},r.inflateGetHeader=function(e,t){var r;return e&&e.state?0==(2&(r=e.state).wrap)?U:((r.head=t).done=!1,N):U},r.inflateSetDictionary=function(e,t){var r,n=t.length;return e&&e.state?0!==(r=e.state).wrap&&11!==r.mode?U:11===r.mode&&O(1,t,n,0)!==r.check?-3:Z(e,t,n,n)?(r.mode=31,-4):(r.havedict=1,N):U},r.inflateInfo="pako inflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./inffast":48,"./inftrees":50}],50:[function(e,t,r){"use strict";var D=e("../utils/common"),F=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],N=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],U=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],P=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];t.exports=function(e,t,r,n,i,s,a,o){var u,h,f,l,d,c,p,m,_,g=o.bits,v=0,b=0,w=0,y=0,k=0,x=0,S=0,z=0,E=0,C=0,A=null,I=0,O=new D.Buf16(16),B=new D.Buf16(16),T=null,R=0;for(v=0;v<=15;v++)O[v]=0;for(b=0;b<n;b++)O[t[r+b]]++;for(k=g,y=15;1<=y&&0===O[y];y--);if(y<k&&(k=y),0===y)return i[s++]=20971520,i[s++]=20971520,o.bits=1,0;for(w=1;w<y&&0===O[w];w++);for(k<w&&(k=w),v=z=1;v<=15;v++)if(z<<=1,(z-=O[v])<0)return-1;if(0<z&&(0===e||1!==y))return-1;for(B[1]=0,v=1;v<15;v++)B[v+1]=B[v]+O[v];for(b=0;b<n;b++)0!==t[r+b]&&(a[B[t[r+b]]++]=b);if(c=0===e?(A=T=a,19):1===e?(A=F,I-=257,T=N,R-=257,256):(A=U,T=P,-1),v=w,d=s,S=b=C=0,f=-1,l=(E=1<<(x=k))-1,1===e&&852<E||2===e&&592<E)return 1;for(;;){for(p=v-S,_=a[b]<c?(m=0,a[b]):a[b]>c?(m=T[R+a[b]],A[I+a[b]]):(m=96,0),u=1<<v-S,w=h=1<<x;i[d+(C>>S)+(h-=u)]=p<<24|m<<16|_|0,0!==h;);for(u=1<<v-1;C&u;)u>>=1;if(0!==u?(C&=u-1,C+=u):C=0,b++,0==--O[v]){if(v===y)break;v=t[r+a[b]]}if(k<v&&(C&l)!==f){for(0===S&&(S=k),d+=w,z=1<<(x=v-S);x+S<y&&!((z-=O[x+S])<=0);)x++,z<<=1;if(E+=1<<x,1===e&&852<E||2===e&&592<E)return 1;i[f=C&l]=k<<24|x<<16|d-s|0}}return 0!==C&&(i[d+C]=v-S<<24|64<<16|0),o.bits=k,0}},{"../utils/common":41}],51:[function(e,t,r){"use strict";t.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},{}],52:[function(e,t,r){"use strict";var o=e("../utils/common");function n(e){for(var t=e.length;0<=--t;)e[t]=0}var _=15,i=16,u=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],h=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],f=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],l=new Array(576);n(l);var d=new Array(60);n(d);var c=new Array(512);n(c);var p=new Array(256);n(p);var m=new Array(29);n(m);var g,v,b,w=new Array(30);function y(e,t,r,n,i){this.static_tree=e,this.extra_bits=t,this.extra_base=r,this.elems=n,this.max_length=i,this.has_stree=e&&e.length}function s(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t}function k(e){return e<256?c[e]:c[256+(e>>>7)]}function x(e,t){e.pending_buf[e.pending++]=255&t,e.pending_buf[e.pending++]=t>>>8&255}function S(e,t,r){e.bi_valid>i-r?(e.bi_buf|=t<<e.bi_valid&65535,x(e,e.bi_buf),e.bi_buf=t>>i-e.bi_valid,e.bi_valid+=r-i):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=r)}function z(e,t,r){S(e,r[2*t],r[2*t+1])}function E(e,t){for(var r=0;r|=1&e,e>>>=1,r<<=1,0<--t;);return r>>>1}function C(e,t,r){var n,i,s=new Array(_+1),a=0;for(n=1;n<=_;n++)s[n]=a=a+r[n-1]<<1;for(i=0;i<=t;i++){var o=e[2*i+1];0!==o&&(e[2*i]=E(s[o]++,o))}}function A(e){var t;for(t=0;t<286;t++)e.dyn_ltree[2*t]=0;for(t=0;t<30;t++)e.dyn_dtree[2*t]=0;for(t=0;t<19;t++)e.bl_tree[2*t]=0;e.dyn_ltree[512]=1,e.opt_len=e.static_len=0,e.last_lit=e.matches=0}function I(e){8<e.bi_valid?x(e,e.bi_buf):0<e.bi_valid&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0}function O(e,t,r,n){var i=2*t,s=2*r;return e[i]<e[s]||e[i]===e[s]&&n[t]<=n[r]}function B(e,t,r){for(var n=e.heap[r],i=r<<1;i<=e.heap_len&&(i<e.heap_len&&O(t,e.heap[i+1],e.heap[i],e.depth)&&i++,!O(t,n,e.heap[i],e.depth));)e.heap[r]=e.heap[i],r=i,i<<=1;e.heap[r]=n}function T(e,t,r){var n,i,s,a,o=0;if(0!==e.last_lit)for(;n=e.pending_buf[e.d_buf+2*o]<<8|e.pending_buf[e.d_buf+2*o+1],i=e.pending_buf[e.l_buf+o],o++,0===n?z(e,i,t):(z(e,(s=p[i])+256+1,t),0!==(a=u[s])&&S(e,i-=m[s],a),z(e,s=k(--n),r),0!==(a=h[s])&&S(e,n-=w[s],a)),o<e.last_lit;);z(e,256,t)}function R(e,t){var r,n,i,s=t.dyn_tree,a=t.stat_desc.static_tree,o=t.stat_desc.has_stree,u=t.stat_desc.elems,h=-1;for(e.heap_len=0,e.heap_max=573,r=0;r<u;r++)0!==s[2*r]?(e.heap[++e.heap_len]=h=r,e.depth[r]=0):s[2*r+1]=0;for(;e.heap_len<2;)s[2*(i=e.heap[++e.heap_len]=h<2?++h:0)]=1,e.depth[i]=0,e.opt_len--,o&&(e.static_len-=a[2*i+1]);for(t.max_code=h,r=e.heap_len>>1;1<=r;r--)B(e,s,r);for(i=u;r=e.heap[1],e.heap[1]=e.heap[e.heap_len--],B(e,s,1),n=e.heap[1],e.heap[--e.heap_max]=r,e.heap[--e.heap_max]=n,s[2*i]=s[2*r]+s[2*n],e.depth[i]=(e.depth[r]>=e.depth[n]?e.depth[r]:e.depth[n])+1,s[2*r+1]=s[2*n+1]=i,e.heap[1]=i++,B(e,s,1),2<=e.heap_len;);e.heap[--e.heap_max]=e.heap[1],function(e,t){var r,n,i,s,a,o,u=t.dyn_tree,h=t.max_code,f=t.stat_desc.static_tree,l=t.stat_desc.has_stree,d=t.stat_desc.extra_bits,c=t.stat_desc.extra_base,p=t.stat_desc.max_length,m=0;for(s=0;s<=_;s++)e.bl_count[s]=0;for(u[2*e.heap[e.heap_max]+1]=0,r=e.heap_max+1;r<573;r++)p<(s=u[2*u[2*(n=e.heap[r])+1]+1]+1)&&(s=p,m++),u[2*n+1]=s,h<n||(e.bl_count[s]++,a=0,c<=n&&(a=d[n-c]),o=u[2*n],e.opt_len+=o*(s+a),l&&(e.static_len+=o*(f[2*n+1]+a)));if(0!==m){do{for(s=p-1;0===e.bl_count[s];)s--;e.bl_count[s]--,e.bl_count[s+1]+=2,e.bl_count[p]--,m-=2}while(0<m);for(s=p;0!==s;s--)for(n=e.bl_count[s];0!==n;)h<(i=e.heap[--r])||(u[2*i+1]!==s&&(e.opt_len+=(s-u[2*i+1])*u[2*i],u[2*i+1]=s),n--)}}(e,t),C(s,h,e.bl_count)}function D(e,t,r){var n,i,s=-1,a=t[1],o=0,u=7,h=4;for(0===a&&(u=138,h=3),t[2*(r+1)+1]=65535,n=0;n<=r;n++)i=a,a=t[2*(n+1)+1],++o<u&&i===a||(o<h?e.bl_tree[2*i]+=o:0!==i?(i!==s&&e.bl_tree[2*i]++,e.bl_tree[32]++):o<=10?e.bl_tree[34]++:e.bl_tree[36]++,s=i,h=(o=0)===a?(u=138,3):i===a?(u=6,3):(u=7,4))}function F(e,t,r){var n,i,s=-1,a=t[1],o=0,u=7,h=4;for(0===a&&(u=138,h=3),n=0;n<=r;n++)if(i=a,a=t[2*(n+1)+1],!(++o<u&&i===a)){if(o<h)for(;z(e,i,e.bl_tree),0!=--o;);else 0!==i?(i!==s&&(z(e,i,e.bl_tree),o--),z(e,16,e.bl_tree),S(e,o-3,2)):o<=10?(z(e,17,e.bl_tree),S(e,o-3,3)):(z(e,18,e.bl_tree),S(e,o-11,7));s=i,h=(o=0)===a?(u=138,3):i===a?(u=6,3):(u=7,4)}}n(w);var N=!1;function U(e,t,r,n){var i,s,a;S(e,0+(n?1:0),3),s=t,a=r,I(i=e),x(i,a),x(i,~a),o.arraySet(i.pending_buf,i.window,s,a,i.pending),i.pending+=a}r._tr_init=function(e){N||(function(){var e,t,r,n,i,s=new Array(_+1);for(n=r=0;n<28;n++)for(m[n]=r,e=0;e<1<<u[n];e++)p[r++]=n;for(p[r-1]=n,n=i=0;n<16;n++)for(w[n]=i,e=0;e<1<<h[n];e++)c[i++]=n;for(i>>=7;n<30;n++)for(w[n]=i<<7,e=0;e<1<<h[n]-7;e++)c[256+i++]=n;for(t=0;t<=_;t++)s[t]=0;for(e=0;e<=143;)l[2*e+1]=8,e++,s[8]++;for(;e<=255;)l[2*e+1]=9,e++,s[9]++;for(;e<=279;)l[2*e+1]=7,e++,s[7]++;for(;e<=287;)l[2*e+1]=8,e++,s[8]++;for(C(l,287,s),e=0;e<30;e++)d[2*e+1]=5,d[2*e]=E(e,5);g=new y(l,u,257,286,_),v=new y(d,h,0,30,_),b=new y(new Array(0),a,0,19,7)}(),N=!0),e.l_desc=new s(e.dyn_ltree,g),e.d_desc=new s(e.dyn_dtree,v),e.bl_desc=new s(e.bl_tree,b),e.bi_buf=0,e.bi_valid=0,A(e)},r._tr_stored_block=U,r._tr_flush_block=function(e,t,r,n){var i,s,a=0;0<e.level?(2===e.strm.data_type&&(e.strm.data_type=function(e){var t,r=4093624447;for(t=0;t<=31;t++,r>>>=1)if(1&r&&0!==e.dyn_ltree[2*t])return 0;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return 1;for(t=32;t<256;t++)if(0!==e.dyn_ltree[2*t])return 1;return 0}(e)),R(e,e.l_desc),R(e,e.d_desc),a=function(e){var t;for(D(e,e.dyn_ltree,e.l_desc.max_code),D(e,e.dyn_dtree,e.d_desc.max_code),R(e,e.bl_desc),t=18;3<=t&&0===e.bl_tree[2*f[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t}(e),i=e.opt_len+3+7>>>3,(s=e.static_len+3+7>>>3)<=i&&(i=s)):i=s=r+5,r+4<=i&&-1!==t?U(e,t,r,n):4===e.strategy||s===i?(S(e,2+(n?1:0),3),T(e,l,d)):(S(e,4+(n?1:0),3),function(e,t,r,n){var i;for(S(e,t-257,5),S(e,r-1,5),S(e,n-4,4),i=0;i<n;i++)S(e,e.bl_tree[2*f[i]+1],3);F(e,e.dyn_ltree,t-1),F(e,e.dyn_dtree,r-1)}(e,e.l_desc.max_code+1,e.d_desc.max_code+1,a+1),T(e,e.dyn_ltree,e.dyn_dtree)),A(e),n&&I(e)},r._tr_tally=function(e,t,r){return e.pending_buf[e.d_buf+2*e.last_lit]=t>>>8&255,e.pending_buf[e.d_buf+2*e.last_lit+1]=255&t,e.pending_buf[e.l_buf+e.last_lit]=255&r,e.last_lit++,0===t?e.dyn_ltree[2*r]++:(e.matches++,t--,e.dyn_ltree[2*(p[r]+256+1)]++,e.dyn_dtree[2*k(t)]++),e.last_lit===e.lit_bufsize-1},r._tr_align=function(e){var t;S(e,2,3),z(e,256,l),16===(t=e).bi_valid?(x(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):8<=t.bi_valid&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8)}},{"../utils/common":41}],53:[function(e,t,r){"use strict";t.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},{}],54:[function(e,t,r){"use strict";t.exports="function"==typeof setImmediate?setImmediate:function(){var e=[].slice.apply(arguments);e.splice(1,0,0),setTimeout.apply(null,e)}},{}]},{},[10])(10)})}).call(this,void 0!==r?r:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[1])(1)})}).call(this,void 0!==r?r:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[1])(1)})}).call(this,void 0!==r?r:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[1])(1)})}).call(this,void 0!==r?r:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[1])(1)})}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[1])(1)});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer, __webpack_require__(/*! ./../../timers-browserify/main.js */ "./node_modules/timers-browserify/main.js").setImmediate))

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./node_modules/scriptjs/dist/script.js":
/*!**********************************************!*\
  !*** ./node_modules/scriptjs/dist/script.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
  * $script.js JS loader & dependency manager
  * https://github.com/ded/script.js
  * (c) Dustin Diaz 2014 | License MIT
  */

(function (name, definition) {
  if ( true && module.exports) module.exports = definition()
  else if (true) !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))
  else {}
})('$script', function () {
  var doc = document
    , head = doc.getElementsByTagName('head')[0]
    , s = 'string'
    , f = false
    , push = 'push'
    , readyState = 'readyState'
    , onreadystatechange = 'onreadystatechange'
    , list = {}
    , ids = {}
    , delay = {}
    , scripts = {}
    , scriptpath
    , urlArgs

  function every(ar, fn) {
    for (var i = 0, j = ar.length; i < j; ++i) if (!fn(ar[i])) return f
    return 1
  }
  function each(ar, fn) {
    every(ar, function (el) {
      fn(el)
      return 1
    })
  }

  function $script(paths, idOrDone, optDone) {
    paths = paths[push] ? paths : [paths]
    var idOrDoneIsDone = idOrDone && idOrDone.call
      , done = idOrDoneIsDone ? idOrDone : optDone
      , id = idOrDoneIsDone ? paths.join('') : idOrDone
      , queue = paths.length
    function loopFn(item) {
      return item.call ? item() : list[item]
    }
    function callback() {
      if (!--queue) {
        list[id] = 1
        done && done()
        for (var dset in delay) {
          every(dset.split('|'), loopFn) && !each(delay[dset], loopFn) && (delay[dset] = [])
        }
      }
    }
    setTimeout(function () {
      each(paths, function loading(path, force) {
        if (path === null) return callback()
        
        if (!force && !/^https?:\/\//.test(path) && scriptpath) {
          path = (path.indexOf('.js') === -1) ? scriptpath + path + '.js' : scriptpath + path;
        }
        
        if (scripts[path]) {
          if (id) ids[id] = 1
          return (scripts[path] == 2) ? callback() : setTimeout(function () { loading(path, true) }, 0)
        }

        scripts[path] = 1
        if (id) ids[id] = 1
        create(path, callback)
      })
    }, 0)
    return $script
  }

  function create(path, fn) {
    var el = doc.createElement('script'), loaded
    el.onload = el.onerror = el[onreadystatechange] = function () {
      if ((el[readyState] && !(/^c|loade/.test(el[readyState]))) || loaded) return;
      el.onload = el[onreadystatechange] = null
      loaded = 1
      scripts[path] = 2
      fn()
    }
    el.async = 1
    el.src = urlArgs ? path + (path.indexOf('?') === -1 ? '?' : '&') + urlArgs : path;
    head.insertBefore(el, head.lastChild)
  }

  $script.get = create

  $script.order = function (scripts, id, done) {
    (function callback(s) {
      s = scripts.shift()
      !scripts.length ? $script(s, id, done) : $script(s, callback)
    }())
  }

  $script.path = function (p) {
    scriptpath = p
  }
  $script.urlArgs = function (str) {
    urlArgs = str;
  }
  $script.ready = function (deps, ready, req) {
    deps = deps[push] ? deps : [deps]
    var missing = [];
    !each(deps, function (dep) {
      list[dep] || missing[push](dep);
    }) && every(deps, function (dep) {return list[dep]}) ?
      ready() : !function (key) {
      delay[key] = delay[key] || []
      delay[key][push](ready)
      req && req(missing)
    }(deps.join('|'))
    return $script
  }

  $script.done = function (idOrDone) {
    $script([null], idOrDone)
  }

  return $script
});


/***/ }),

/***/ "./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/timers-browserify/main.js":
/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||
            (typeof self !== "undefined" && self) ||
            window;
var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(scope, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(/*! setimmediate */ "./node_modules/setimmediate/setImmediate.js");
// On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.
exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
                       (typeof global !== "undefined" && global.setImmediate) ||
                       (this && this.setImmediate);
exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
                         (typeof global !== "undefined" && global.clearImmediate) ||
                         (this && this.clearImmediate);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/webfontloader/webfontloader.js":
/*!*****************************************************!*\
  !*** ./node_modules/webfontloader/webfontloader.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;/* Web Font Loader v1.6.28 - (c) Adobe Systems, Google. License: Apache 2.0 */(function(){function aa(a,b,c){return a.call.apply(a.bind,arguments)}function ba(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}}function p(a,b,c){p=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?aa:ba;return p.apply(null,arguments)}var q=Date.now||function(){return+new Date};function ca(a,b){this.a=a;this.o=b||a;this.c=this.o.document}var da=!!window.FontFace;function t(a,b,c,d){b=a.c.createElement(b);if(c)for(var e in c)c.hasOwnProperty(e)&&("style"==e?b.style.cssText=c[e]:b.setAttribute(e,c[e]));d&&b.appendChild(a.c.createTextNode(d));return b}function u(a,b,c){a=a.c.getElementsByTagName(b)[0];a||(a=document.documentElement);a.insertBefore(c,a.lastChild)}function v(a){a.parentNode&&a.parentNode.removeChild(a)}
function w(a,b,c){b=b||[];c=c||[];for(var d=a.className.split(/\s+/),e=0;e<b.length;e+=1){for(var f=!1,g=0;g<d.length;g+=1)if(b[e]===d[g]){f=!0;break}f||d.push(b[e])}b=[];for(e=0;e<d.length;e+=1){f=!1;for(g=0;g<c.length;g+=1)if(d[e]===c[g]){f=!0;break}f||b.push(d[e])}a.className=b.join(" ").replace(/\s+/g," ").replace(/^\s+|\s+$/,"")}function y(a,b){for(var c=a.className.split(/\s+/),d=0,e=c.length;d<e;d++)if(c[d]==b)return!0;return!1}
function ea(a){return a.o.location.hostname||a.a.location.hostname}function z(a,b,c){function d(){m&&e&&f&&(m(g),m=null)}b=t(a,"link",{rel:"stylesheet",href:b,media:"all"});var e=!1,f=!0,g=null,m=c||null;da?(b.onload=function(){e=!0;d()},b.onerror=function(){e=!0;g=Error("Stylesheet failed to load");d()}):setTimeout(function(){e=!0;d()},0);u(a,"head",b)}
function A(a,b,c,d){var e=a.c.getElementsByTagName("head")[0];if(e){var f=t(a,"script",{src:b}),g=!1;f.onload=f.onreadystatechange=function(){g||this.readyState&&"loaded"!=this.readyState&&"complete"!=this.readyState||(g=!0,c&&c(null),f.onload=f.onreadystatechange=null,"HEAD"==f.parentNode.tagName&&e.removeChild(f))};e.appendChild(f);setTimeout(function(){g||(g=!0,c&&c(Error("Script load timeout")))},d||5E3);return f}return null};function B(){this.a=0;this.c=null}function C(a){a.a++;return function(){a.a--;D(a)}}function E(a,b){a.c=b;D(a)}function D(a){0==a.a&&a.c&&(a.c(),a.c=null)};function F(a){this.a=a||"-"}F.prototype.c=function(a){for(var b=[],c=0;c<arguments.length;c++)b.push(arguments[c].replace(/[\W_]+/g,"").toLowerCase());return b.join(this.a)};function G(a,b){this.c=a;this.f=4;this.a="n";var c=(b||"n4").match(/^([nio])([1-9])$/i);c&&(this.a=c[1],this.f=parseInt(c[2],10))}function fa(a){return H(a)+" "+(a.f+"00")+" 300px "+I(a.c)}function I(a){var b=[];a=a.split(/,\s*/);for(var c=0;c<a.length;c++){var d=a[c].replace(/['"]/g,"");-1!=d.indexOf(" ")||/^\d/.test(d)?b.push("'"+d+"'"):b.push(d)}return b.join(",")}function J(a){return a.a+a.f}function H(a){var b="normal";"o"===a.a?b="oblique":"i"===a.a&&(b="italic");return b}
function ga(a){var b=4,c="n",d=null;a&&((d=a.match(/(normal|oblique|italic)/i))&&d[1]&&(c=d[1].substr(0,1).toLowerCase()),(d=a.match(/([1-9]00|normal|bold)/i))&&d[1]&&(/bold/i.test(d[1])?b=7:/[1-9]00/.test(d[1])&&(b=parseInt(d[1].substr(0,1),10))));return c+b};function ha(a,b){this.c=a;this.f=a.o.document.documentElement;this.h=b;this.a=new F("-");this.j=!1!==b.events;this.g=!1!==b.classes}function ia(a){a.g&&w(a.f,[a.a.c("wf","loading")]);K(a,"loading")}function L(a){if(a.g){var b=y(a.f,a.a.c("wf","active")),c=[],d=[a.a.c("wf","loading")];b||c.push(a.a.c("wf","inactive"));w(a.f,c,d)}K(a,"inactive")}function K(a,b,c){if(a.j&&a.h[b])if(c)a.h[b](c.c,J(c));else a.h[b]()};function ja(){this.c={}}function ka(a,b,c){var d=[],e;for(e in b)if(b.hasOwnProperty(e)){var f=a.c[e];f&&d.push(f(b[e],c))}return d};function M(a,b){this.c=a;this.f=b;this.a=t(this.c,"span",{"aria-hidden":"true"},this.f)}function N(a){u(a.c,"body",a.a)}function O(a){return"display:block;position:absolute;top:-9999px;left:-9999px;font-size:300px;width:auto;height:auto;line-height:normal;margin:0;padding:0;font-variant:normal;white-space:nowrap;font-family:"+I(a.c)+";"+("font-style:"+H(a)+";font-weight:"+(a.f+"00")+";")};function P(a,b,c,d,e,f){this.g=a;this.j=b;this.a=d;this.c=c;this.f=e||3E3;this.h=f||void 0}P.prototype.start=function(){var a=this.c.o.document,b=this,c=q(),d=new Promise(function(d,e){function f(){q()-c>=b.f?e():a.fonts.load(fa(b.a),b.h).then(function(a){1<=a.length?d():setTimeout(f,25)},function(){e()})}f()}),e=null,f=new Promise(function(a,d){e=setTimeout(d,b.f)});Promise.race([f,d]).then(function(){e&&(clearTimeout(e),e=null);b.g(b.a)},function(){b.j(b.a)})};function Q(a,b,c,d,e,f,g){this.v=a;this.B=b;this.c=c;this.a=d;this.s=g||"BESbswy";this.f={};this.w=e||3E3;this.u=f||null;this.m=this.j=this.h=this.g=null;this.g=new M(this.c,this.s);this.h=new M(this.c,this.s);this.j=new M(this.c,this.s);this.m=new M(this.c,this.s);a=new G(this.a.c+",serif",J(this.a));a=O(a);this.g.a.style.cssText=a;a=new G(this.a.c+",sans-serif",J(this.a));a=O(a);this.h.a.style.cssText=a;a=new G("serif",J(this.a));a=O(a);this.j.a.style.cssText=a;a=new G("sans-serif",J(this.a));a=
O(a);this.m.a.style.cssText=a;N(this.g);N(this.h);N(this.j);N(this.m)}var R={D:"serif",C:"sans-serif"},S=null;function T(){if(null===S){var a=/AppleWebKit\/([0-9]+)(?:\.([0-9]+))/.exec(window.navigator.userAgent);S=!!a&&(536>parseInt(a[1],10)||536===parseInt(a[1],10)&&11>=parseInt(a[2],10))}return S}Q.prototype.start=function(){this.f.serif=this.j.a.offsetWidth;this.f["sans-serif"]=this.m.a.offsetWidth;this.A=q();U(this)};
function la(a,b,c){for(var d in R)if(R.hasOwnProperty(d)&&b===a.f[R[d]]&&c===a.f[R[d]])return!0;return!1}function U(a){var b=a.g.a.offsetWidth,c=a.h.a.offsetWidth,d;(d=b===a.f.serif&&c===a.f["sans-serif"])||(d=T()&&la(a,b,c));d?q()-a.A>=a.w?T()&&la(a,b,c)&&(null===a.u||a.u.hasOwnProperty(a.a.c))?V(a,a.v):V(a,a.B):ma(a):V(a,a.v)}function ma(a){setTimeout(p(function(){U(this)},a),50)}function V(a,b){setTimeout(p(function(){v(this.g.a);v(this.h.a);v(this.j.a);v(this.m.a);b(this.a)},a),0)};function W(a,b,c){this.c=a;this.a=b;this.f=0;this.m=this.j=!1;this.s=c}var X=null;W.prototype.g=function(a){var b=this.a;b.g&&w(b.f,[b.a.c("wf",a.c,J(a).toString(),"active")],[b.a.c("wf",a.c,J(a).toString(),"loading"),b.a.c("wf",a.c,J(a).toString(),"inactive")]);K(b,"fontactive",a);this.m=!0;na(this)};
W.prototype.h=function(a){var b=this.a;if(b.g){var c=y(b.f,b.a.c("wf",a.c,J(a).toString(),"active")),d=[],e=[b.a.c("wf",a.c,J(a).toString(),"loading")];c||d.push(b.a.c("wf",a.c,J(a).toString(),"inactive"));w(b.f,d,e)}K(b,"fontinactive",a);na(this)};function na(a){0==--a.f&&a.j&&(a.m?(a=a.a,a.g&&w(a.f,[a.a.c("wf","active")],[a.a.c("wf","loading"),a.a.c("wf","inactive")]),K(a,"active")):L(a.a))};function oa(a){this.j=a;this.a=new ja;this.h=0;this.f=this.g=!0}oa.prototype.load=function(a){this.c=new ca(this.j,a.context||this.j);this.g=!1!==a.events;this.f=!1!==a.classes;pa(this,new ha(this.c,a),a)};
function qa(a,b,c,d,e){var f=0==--a.h;(a.f||a.g)&&setTimeout(function(){var a=e||null,m=d||null||{};if(0===c.length&&f)L(b.a);else{b.f+=c.length;f&&(b.j=f);var h,l=[];for(h=0;h<c.length;h++){var k=c[h],n=m[k.c],r=b.a,x=k;r.g&&w(r.f,[r.a.c("wf",x.c,J(x).toString(),"loading")]);K(r,"fontloading",x);r=null;if(null===X)if(window.FontFace){var x=/Gecko.*Firefox\/(\d+)/.exec(window.navigator.userAgent),xa=/OS X.*Version\/10\..*Safari/.exec(window.navigator.userAgent)&&/Apple/.exec(window.navigator.vendor);
X=x?42<parseInt(x[1],10):xa?!1:!0}else X=!1;X?r=new P(p(b.g,b),p(b.h,b),b.c,k,b.s,n):r=new Q(p(b.g,b),p(b.h,b),b.c,k,b.s,a,n);l.push(r)}for(h=0;h<l.length;h++)l[h].start()}},0)}function pa(a,b,c){var d=[],e=c.timeout;ia(b);var d=ka(a.a,c,a.c),f=new W(a.c,b,e);a.h=d.length;b=0;for(c=d.length;b<c;b++)d[b].load(function(b,d,c){qa(a,f,b,d,c)})};function ra(a,b){this.c=a;this.a=b}
ra.prototype.load=function(a){function b(){if(f["__mti_fntLst"+d]){var c=f["__mti_fntLst"+d](),e=[],h;if(c)for(var l=0;l<c.length;l++){var k=c[l].fontfamily;void 0!=c[l].fontStyle&&void 0!=c[l].fontWeight?(h=c[l].fontStyle+c[l].fontWeight,e.push(new G(k,h))):e.push(new G(k))}a(e)}else setTimeout(function(){b()},50)}var c=this,d=c.a.projectId,e=c.a.version;if(d){var f=c.c.o;A(this.c,(c.a.api||"https://fast.fonts.net/jsapi")+"/"+d+".js"+(e?"?v="+e:""),function(e){e?a([]):(f["__MonotypeConfiguration__"+
d]=function(){return c.a},b())}).id="__MonotypeAPIScript__"+d}else a([])};function sa(a,b){this.c=a;this.a=b}sa.prototype.load=function(a){var b,c,d=this.a.urls||[],e=this.a.families||[],f=this.a.testStrings||{},g=new B;b=0;for(c=d.length;b<c;b++)z(this.c,d[b],C(g));var m=[];b=0;for(c=e.length;b<c;b++)if(d=e[b].split(":"),d[1])for(var h=d[1].split(","),l=0;l<h.length;l+=1)m.push(new G(d[0],h[l]));else m.push(new G(d[0]));E(g,function(){a(m,f)})};function ta(a,b){a?this.c=a:this.c=ua;this.a=[];this.f=[];this.g=b||""}var ua="https://fonts.googleapis.com/css";function va(a,b){for(var c=b.length,d=0;d<c;d++){var e=b[d].split(":");3==e.length&&a.f.push(e.pop());var f="";2==e.length&&""!=e[1]&&(f=":");a.a.push(e.join(f))}}
function wa(a){if(0==a.a.length)throw Error("No fonts to load!");if(-1!=a.c.indexOf("kit="))return a.c;for(var b=a.a.length,c=[],d=0;d<b;d++)c.push(a.a[d].replace(/ /g,"+"));b=a.c+"?family="+c.join("%7C");0<a.f.length&&(b+="&subset="+a.f.join(","));0<a.g.length&&(b+="&text="+encodeURIComponent(a.g));return b};function ya(a){this.f=a;this.a=[];this.c={}}
var za={latin:"BESbswy","latin-ext":"\u00e7\u00f6\u00fc\u011f\u015f",cyrillic:"\u0439\u044f\u0416",greek:"\u03b1\u03b2\u03a3",khmer:"\u1780\u1781\u1782",Hanuman:"\u1780\u1781\u1782"},Aa={thin:"1",extralight:"2","extra-light":"2",ultralight:"2","ultra-light":"2",light:"3",regular:"4",book:"4",medium:"5","semi-bold":"6",semibold:"6","demi-bold":"6",demibold:"6",bold:"7","extra-bold":"8",extrabold:"8","ultra-bold":"8",ultrabold:"8",black:"9",heavy:"9",l:"3",r:"4",b:"7"},Ba={i:"i",italic:"i",n:"n",normal:"n"},
Ca=/^(thin|(?:(?:extra|ultra)-?)?light|regular|book|medium|(?:(?:semi|demi|extra|ultra)-?)?bold|black|heavy|l|r|b|[1-9]00)?(n|i|normal|italic)?$/;
function Da(a){for(var b=a.f.length,c=0;c<b;c++){var d=a.f[c].split(":"),e=d[0].replace(/\+/g," "),f=["n4"];if(2<=d.length){var g;var m=d[1];g=[];if(m)for(var m=m.split(","),h=m.length,l=0;l<h;l++){var k;k=m[l];if(k.match(/^[\w-]+$/)){var n=Ca.exec(k.toLowerCase());if(null==n)k="";else{k=n[2];k=null==k||""==k?"n":Ba[k];n=n[1];if(null==n||""==n)n="4";else var r=Aa[n],n=r?r:isNaN(n)?"4":n.substr(0,1);k=[k,n].join("")}}else k="";k&&g.push(k)}0<g.length&&(f=g);3==d.length&&(d=d[2],g=[],d=d?d.split(","):
g,0<d.length&&(d=za[d[0]])&&(a.c[e]=d))}a.c[e]||(d=za[e])&&(a.c[e]=d);for(d=0;d<f.length;d+=1)a.a.push(new G(e,f[d]))}};function Ea(a,b){this.c=a;this.a=b}var Fa={Arimo:!0,Cousine:!0,Tinos:!0};Ea.prototype.load=function(a){var b=new B,c=this.c,d=new ta(this.a.api,this.a.text),e=this.a.families;va(d,e);var f=new ya(e);Da(f);z(c,wa(d),C(b));E(b,function(){a(f.a,f.c,Fa)})};function Ga(a,b){this.c=a;this.a=b}Ga.prototype.load=function(a){var b=this.a.id,c=this.c.o;b?A(this.c,(this.a.api||"https://use.typekit.net")+"/"+b+".js",function(b){if(b)a([]);else if(c.Typekit&&c.Typekit.config&&c.Typekit.config.fn){b=c.Typekit.config.fn;for(var e=[],f=0;f<b.length;f+=2)for(var g=b[f],m=b[f+1],h=0;h<m.length;h++)e.push(new G(g,m[h]));try{c.Typekit.load({events:!1,classes:!1,async:!0})}catch(l){}a(e)}},2E3):a([])};function Ha(a,b){this.c=a;this.f=b;this.a=[]}Ha.prototype.load=function(a){var b=this.f.id,c=this.c.o,d=this;b?(c.__webfontfontdeckmodule__||(c.__webfontfontdeckmodule__={}),c.__webfontfontdeckmodule__[b]=function(b,c){for(var g=0,m=c.fonts.length;g<m;++g){var h=c.fonts[g];d.a.push(new G(h.name,ga("font-weight:"+h.weight+";font-style:"+h.style)))}a(d.a)},A(this.c,(this.f.api||"https://f.fontdeck.com/s/css/js/")+ea(this.c)+"/"+b+".js",function(b){b&&a([])})):a([])};var Y=new oa(window);Y.a.c.custom=function(a,b){return new sa(b,a)};Y.a.c.fontdeck=function(a,b){return new Ha(b,a)};Y.a.c.monotype=function(a,b){return new ra(b,a)};Y.a.c.typekit=function(a,b){return new Ga(b,a)};Y.a.c.google=function(a,b){return new Ea(b,a)};var Z={load:p(Y.load,Y)}; true?!(__WEBPACK_AMD_DEFINE_RESULT__ = (function(){return Z}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):undefined;}());


/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./src/AWT.js":
/*!********************!*\
  !*** ./src/AWT.js ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : AWT.js
 *  Created : 12/04/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ./Utils */ "./src/Utils.js"),
  __webpack_require__(/*! webfontloader */ "./node_modules/webfontloader/webfontloader.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, Utils, WebFont) {

  /**
   * This object contains utility clases for painting graphics and images,
   * as found in the Java [Abstract Window Toolkit](http://docs.oracle.com/javase/7/docs/api/java/awt/package-summary.html)
   *
   * The objects defined here are: {@link Font}, {@link Gradient}, {@link Stroke},
   * {@link Point}, {@link Dimension}, {@link Shape}, {@link Rectangle},
   * {@link Ellipse}, {@link Path}, {@link PathStroke}, {@link Action},
   * {@link Timer} and {@link Container}.
   */

  /**
   * Font contains properties and provides methods to manage fonts
   * @class
   */
  class Font {
    /**
     * Font constructor
     * @param {string=} [family='Arial']
     * @param {number=} [size=17]
     * @param {number=} [bold=0]
     * @param {number=} [italic=0]
     * @param {string=} [variant='']
     */
    constructor(family, size, bold, italic, variant) {
      if (family)
        this.family = family
      if (typeof size === 'number')
        this.size = size
      if (bold)
        this.bold = bold
      if (italic)
        this.italic = italic
      if (variant)
        this.variant = variant
      this._metrics = { ascent: -1, descent: -1, height: -1 }
    }

    /**
     * Finds the XML elements with typeface specifications, checks its value against the font
     * substitution list, replacing the `family` attribute and loading the alternative font when needed.
     * @param {external:jQuery} $tree - The xml element to be processed
     * @param {Object=} options - Optional param that can contain a `fontSubstitutions` attribute with
     * a substition table to be added to {@link Font.SUBSTITUTIONS}
     */
    static checkTree($tree, options) {
      let substitutions = Font.SUBSTITUTIONS
      // Load own fonts and remove it from the substitution table
      if (options && options.ownFonts) {
        options.ownFonts.forEach(name => {
          // Check WebFont as a workaround to avoid problems with a different version of `webfontloader` in agora.xtec.cat
          if (Font.ALREADY_LOADED_FONTS.indexOf(name) < 0 && WebFont && WebFont.load) {
            WebFont.load({ custom: { families: [name] } })
            Font.ALREADY_LOADED_FONTS.push(name)
            delete substitutions[name.trim().toLowerCase()]
          }
        })
      }

      // Add custom font substitutions
      if (options && options.fontSubstitutions)
        //substitutions = Object.assign({}, substitutions, options.fontSubstitutions)
        substitutions = $.extend(Object.create(substitutions), options.fontSubstitutions)

      $tree.find('style[family],font[family]').each((_n, style) => {
        const $style = $(style),
          name = $style.attr('family').trim().toLowerCase()
        if (name in substitutions) {
          const newName = substitutions[name]
          if (newName !== '') {
            Font.loadGoogleFont(newName)
            $style.attr('family', newName)
          }
        }
      })
    }

    /**
     * Try to load a specific font from [http://www.google.com/fonts]
     * @param {string} name - The font family name
     */
    static loadGoogleFont(name) {
      // Check WebFont as a workaround to avoid problems with a different version of `webfontloader` in agora.xtec.cat
      if (name && !Font.ALREADY_LOADED_FONTS.includes(name) && WebFont && WebFont.load) {
        WebFont.load({ google: { families: [name] } })
        Font.ALREADY_LOADED_FONTS.push(name)
      }
    }

    /**
     * Try to load a set of Google fonts
     * @param {string[]} fonts - An array of font names
     */
    static loadGoogleFonts(fonts) {
      if (fonts && fonts.forEach)
        fonts.forEach(name => Font.loadGoogleFont(name))
    }

    /**
     * Reads the properties of this Font from an XML element
     * @param {external:jQuery} $xml - The xml element to be parsed
     * @returns {Font}
     */
    setProperties($xml) {
      if ($xml.attr('family'))
        this.family = $xml.attr('family')
      if ($xml.attr('size'))
        this.size = Number($xml.attr('size'))
      if ($xml.attr('bold'))
        this.bold = Utils.getBoolean($xml.attr('bold'))
      if ($xml.attr('italic'))
        this.italic = Utils.getBoolean($xml.attr('italic'))
      if ($xml.attr('variant'))
        this.variant = $xml.attr('variant')
      return this
    }

    /**
     * Allows to change the `size` member, recalculating the vertical metrics.
     * @param {number} size - The new size to set
     * @returns {Font}
     */
    setSize(size) {
      const currentSize = this.size
      this.size = size
      if (currentSize !== size)
        this._metrics.height = -1
      return this
    }

    /**
     * Increases or decreases the current font size by the specified amount
     * @param {number} amount - The amount to increase or decrease current size
     * @returns {Font}
     */
    zoom(amount) {
      return this.setSize(this.size + amount)
    }

    /**
     * Calculates the font metrics and returns its height
     * @returns {number} - The font height
     */
    getHeight() {
      return this.getMetrics().height
    }

    /**
     * Calculates the font metrics
     * @returns {Object} - The current font metrics
     */
    getMetrics() {
      if (this._metrics.height < 0) {
        // Look for an equivalent font already calculated
        const font = Font.ALREADY_CALCULATED_FONTS.find(font => font.equals(this))
        if (font)
          Object.assign(this._metrics, font._metrics)

        if (this._metrics.height < 0) {
          this._calcHeight()
          if (this._metrics.height > 0)
            Font.ALREADY_CALCULATED_FONTS.push(this)
        }
      }
      return this._metrics
    }

    /**
     * Translates the Font properties into CSS statements
     * @param {Object} css - The object where to add CSS properties. When null or undefined, a new
     * object will be created and returned.
     * @returns {Object} - A set of CSS property-values pairs, ready to be used by JQuery
     * [.css(properties)](http://api.jquery.com/css/#css-properties).
     */
    toCss(css) {
      if (!css)
        css = {}
      css['font-family'] = this.family
      css['font-size'] = `${this.size}px`
      if (this.hasOwnProperty('bold'))
        css['font-weight'] = this.bold ? 'bold' : 'normal'
      if (this.hasOwnProperty('italic'))
        css['font-style'] = this.italic ? 'italic' : 'normal'
      if (this.hasOwnProperty('variant'))
        css['font-variant'] = this.variant
      return css
    }

    /**
     * Gets the codification of this font in a single string, suitable to be used in a `font`
     * CSS attribute.
     * @returns {String} - A string with all the CSS font properties concatenated
     */
    cssFont() {
      return `${this.italic ? 'italic ' : 'normal'} ${this.variant === '' ? 'normal' : this.variant} ${this.bold ? 'bold ' : 'normal'} ${this.size}px ${this.family}`
    }

    /**
     * The {@link https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics TextMetrics} object used
     * by {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D CanvasRenderingContext2D}
     * does not provide a `heigth` value for rendered text.
     * This {@link http://stackoverflow.com/questions/1134586/how-can-you-find-the-height-of-text-on-an-html-canvas stackoverflow question}
     * has an excellent response by Daniel Earwicker explaining how to measure the
     * vertical dimension of rendered text using a `span` element.
     * The code has been slighty adapted to deal with Font objects.
     *
     * _Warning_: Do not call this method direcly. Use {@link Font#getHeight getHeight()} or {@link Font#getMetrics getMetrics()} instead
     *
     * @returns {Font}
     */
    _calcHeight() {
      const
        $text = $('<span/>').html('Hg').css(this.toCss()),
        $block = $('<div/>').css({ display: 'inline-block', width: '1px', height: '0px' }),
        $div = $('<div/>').append($text, $block)

      $('body').append($div)
      try {
        $block.css({ verticalAlign: 'baseline' })
        this._metrics.ascent = $block.offset().top - $text.offset().top
        $block.css({ verticalAlign: 'bottom' })
        this._metrics.height = $block.offset().top - $text.offset().top
        this._metrics.descent = this._metrics.height - this._metrics.ascent
      } finally {
        $div.remove()
      }
      return this
    }

    /**
     * Checks if two Font objects are equivalent
     * @param {Font} font - The Font object to compare against this one
     * @returns {Boolean} - `true` if both objects are equivalent, `false` otherwise
     */
    equals(font) {
      return this.family === font.family &&
        this.size === font.size &&
        this.bold === font.bold &&
        this.italic === font.italic &&
        this.variant === font.variant
    }
  }

  /**
   * Array of font objects with already calculated heights */
  Font.ALREADY_CALCULATED_FONTS = []

  /**
   * Array of font names already loaded from Google Fonts, or generic names provided by browsers by default
   * See: https://developer.mozilla.org/en-US/docs/Web/CSS/font-family */
  Font.ALREADY_LOADED_FONTS = ['serif', 'sans-serif', 'monospace', 'cursive', 'fantasy']

  /**
   * Google Fonts equivalent for special fonts used in some JClic projects.
   * More substitutions can be added to the list for specific projects indicating a
   * `fontSubstitutions` object in the `data-options` attribute of the HTML `div` element
   * containing the player.
   * For example:
   * `<div class ="JClic" data-project="demo.jclic" data-options='{"fontSubstitutions":{"arial":"Arimo"}}'/>`
   */
  Font.SUBSTITUTIONS = {
    // Lowercase versions of JDK Logical Fonts (see: https://docs.oracle.com/javase/tutorial/2d/text/fonts.html)
    'dialog': 'sans-serif',
    'dialoginput': 'sans-serif',
    'monospaced': 'monospace',
    //'serif': 'serif',
    'sansserif': 'sans-serif',
    // Other fonts commonly used in JClic activities, mapped to similar Google Fonts
    'abc': 'Kalam',
    'a.c.m.e. secret agent': 'Permanent Marker',
    'comic sans ms': 'Patrick Hand',
    'impact': 'Oswald',
    'massallera': 'Vibur',
    'memima': 'Vibur',
    'memima_n1': 'Vibur',
    'memima_n2': 'Vibur',
    'memimas-regularalternate': 'Vibur',
    'palmemim': 'Vibur',
    'zurichcalligraphic': 'Felipa'
  }

  Object.assign(Font.prototype, {
    /**
     * The `font-family` property
     * @name Font#family
     * @type {string} */
    family: 'Arial',
    /**
     * The font size
     * __Warning__: Do not change `size` directly. Use the {@link Font#setSize|setSize()}
     * method instead.
     * @name Font#size
     * @type {number} */
    size: 17,
    /**
     * The font _bold_ value
     * @name Font#bold
     * @type {number} */
    bold: 0,
    /**
     * The font _italic_ value
     * @name Font#italic
     * @type {number} */
    italic: 0,
    /**
     * The font _variant_ value
     * @name Font#variant
     * @type {string}*/
    variant: '',
    /**
     * The font *_metrics* property contains the values for `ascent`, `descent` and `height`
     * attributes. Vertical font metrics are calculated in
     * {@link Font#_calcHeight|calcHeight()} as needed.
     * @name Font#_metrics
     * @private
     * @type {{ascent: number, descent: number, height: number}} */
    _metrics: { ascent: -1, descent: -1, height: -1 },
  })

  /**
   * Contains parameters and methods to draw complex color gradients
   * @class
   */
  class Gradient {
    /**
     * Gradient constructor
     * @param {string} c1 - The initial color, in any CSS-valid form.
     * @param {string} c2 - The final color, in any CSS-valid form.
     * @param {number=} [angle=0] - The inclination of the gradient relative to the horizontal line.
     * @param {number=} [cycles=1] - The number of times the gradient will be repeated.
     */
    constructor(c1, c2, angle, cycles) {
      if (c1)
        this.c1 = c1
      if (c2)
        this.c2 = c2
      if (typeof angle === 'number')
        this.angle = angle % 360
      if (typeof cycles === 'number')
        this.cycles = cycles
    }

    /**
     * Reads the properties of this Gradient from an XML element
     * @param {external:jQuery} $xml - The xml element to be parsed
     * @returns {Gradient}
     */
    setProperties($xml) {
      this.c1 = Utils.checkColor($xml.attr('source'), 'black')
      this.c2 = Utils.checkColor($xml.attr('dest'), 'white')
      this.angle = Number($xml.attr('angle') || 0) % 360
      this.cycles = Number($xml.attr('cycles') || 1)
      return this
    }

    /**
     * Creates a {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasGradient|CanvasGradient}
     * based on the provided context and rectangle.
     * @param {external:CanvasRenderingContext2D} ctx - The 2D rendering context
     * @param {Rectangle} rect - The rectangle where this gradient will be applied to
     * @returns {Gradient}
     */
    getGradient(ctx, rect) {
      const
        p2 = rect.getOppositeVertex(),
        gradient = ctx.createLinearGradient(rect.pos.x, rect.pos.y, p2.x, p2.y),
        step = 1 / Math.max(this.cycles, 1)
      for (let i = 0; i <= this.cycles; i++)
        gradient.addColorStop(i * step, i % 2 ? this.c1 : this.c2)
      return gradient
    }

    /**
     * Gets the CSS 'linear-gradient' expression of this Gradient
     * @returns {string} - A string ready to be used as a value for the `linear-gradient` CSS attribute
     */
    getCss() {
      let result = `linear-gradient(${(this.angle + 90)}deg, ${this.c1}, ${this.c2}`
      for (let i = 1; i < this.cycles; i++)
        result = `${result}, ${i % 2 > 0 ? this.c1 : this.c2}`
      return `${result})`
    }

    /**
     * Checks if any of the gradient colors has transparency
     * @returns {boolean} - `true` if this gradient uses colors with transparency, `false` otherwise.
     */
    hasTransparency() {
      return Utils.colorHasTransparency(this.c1) || Utils.colorHasTransparency(this.c2)
    }
  }

  Object.assign(Gradient.prototype, {
    /**
     * Initial color
     * @name Gradient#c1
     * @type {string} */
    c1: 'white',
    /**
     * Final color
     * @name Gradient#c2
     * @type {string} */
    c2: 'black',
    /**
     * Tilt angle
     * @name Gradient#angle
     * @type {number} */
    angle: 0,
    /**
     * Number of repetitions of the gradient
     * @name Gradient#cycles
     * @type {number} */
    cycles: 1,
  })

  /**
   * Contains properties used to draw lines in HTML `canvas` elements.
   * @see {@link http://bucephalus.org/text/CanvasHandbook/CanvasHandbook.html#line-caps-and-joins}
   * @class
   */
  class Stroke {
    /**
     * Stroke constructor
     * @param {number=} [lineWidth=1] - The line width of the stroke
     * @param {string=} [lineCap='butt'] - The line ending type. Possible values are: `butt`, `round`
     * and `square`.
     * @param {string=} [lineJoin='miter'] - The type of drawing used when two lines join. Possible
     * values are: `round`, `bevel` and `miter`.
     * @param {number=} [miterLimit=10] - The ratio between the miter length and half `lineWidth`.
     */
    constructor(lineWidth, lineCap, lineJoin, miterLimit) {
      if (typeof lineWidth === 'number')
        this.lineWidth = lineWidth
      if (lineCap)
        this.lineCap = lineCap
      if (lineJoin)
        this.lineJoin = lineJoin
      if (typeof miterLimit === 'number')
        this.miterLimit = miterLimit
    }

    /**
     * Sets the properties of this stroke to a CanvasRenderingContext2D
     * @param {external:CanvasRenderingContext2D} ctx - The canvas 2D rendering context
     * @returns {external:CanvasRenderingContext2D}
     */
    setStroke(ctx) {
      ctx.lineWidth = this.lineWidth
      ctx.lineCap = this.lineCap
      ctx.lineJoin = this.lineJoin
      ctx.miterLimit = this.miterLimit
      return ctx
    }
  }

  Object.assign(Stroke.prototype, {
    /**
     * The line width
     * @name Stroke#lineWidth
     * @type {number} */
    lineWidth: 1.0,
    /**
     * The line ending type (`butt`, `round` or `square`)
     * @name Stroke#lineCap
     * @type {string} */
    lineCap: 'butt',
    /**
     * The drawing used when two lines join (`round`, `bevel` or `miter`)
     * @name Stroke#lineJoin
     * @type {string} */
    lineJoin: 'miter',
    /**
     * Ratio between the miter length and half `lineWidth`
     * @name Stroke#miterLimit
     * @type {number} */
    miterLimit: 10.0,
  })

  /**
   * Contains the `x` andy `y` coordinates of a point, and provides some useful methods.
   * @class
   */
  class Point {
    /**
     * Point constructor
     * @param {number|Point} x - When `x` is an `Point` object, a clone of it will be created.
     * @param {number=} y - Not used when `x` is an `Point`
     */
    constructor(x, y) {
      if (x instanceof Point) {
        // Special case: constructor passing another point as unique parameter
        this.x = x.x
        this.y = x.y
      } else {
        this.x = x || 0
        this.y = y || 0
      }
    }

    /**
     * Reads the properties of this Point from an XML element
     * @param {external:jQuery} $xml - The xml element to be parsed
     * @returns {Point}
     */
    setProperties($xml) {
      this.x = Number($xml.attr('x'))
      this.y = Number($xml.attr('y'))
      return this
    }

    /**
     * Moves this Point to a new position, by a specified displacement
     * @param {Point|Dimension} delta - The amount to move
     * @returns {Point}
     */
    moveBy(delta) {
      this.x += delta.x || delta.width || 0
      this.y += delta.y || delta.height || 0
      return this
    }

    /**
     * Moves this Point to a new position
     * @param {number|Point} newPos - The new position, or a x coordinate
     * @param {number=} y - `null` or `undefined` when `newPos` is a Point
     * @returns {Point}
     */
    moveTo(newPos, y) {
      if (typeof newPos === 'number') {
        this.x = newPos
        this.y = y
      } else {
        this.x = newPos.x
        this.y = newPos.y
      }
      return this
    }

    /**
     * Multiplies the `x` and `y` coordinates by a specified `delta`
     * @param {Point|Dimension} delta - The amount to multiply by.
     * @returns {Point}
     */
    multBy(delta) {
      this.x *= delta.x || delta.width || 0
      this.y *= delta.y || delta.height || 0
      return this
    }

    /**
     * Checks if two points are at the same place
     * @param {Point} p - The Point to check against to
     * @returns {boolean}
     */
    equals(p) {
      return this.x === p.x && this.y === p.y
    }

    /**
     * Calculates the distance between two points
     * @param {Point} point - The Point to calculate the distance against to
     * @returns {number} - The distance between the two points.
     */
    distanceTo(point) {
      return Math.sqrt(Math.pow(this.x - point.x, 2), Math.pow(this.y - point.y, 2))
    }

    /**
     * Clones this point
     * @returns {Point}
     */
    clone() {
      return new Point(this)
    }
  }

  Object.assign(Point.prototype, {
    /**
     * @name Point#x
     * @type {number} */
    x: 0,
    /**
     * @name Point#y
     * @type {number} */
    y: 0,
  })

  /**
   * This class encapsulates `width` and `height` properties.
   * @class
   */
  class Dimension {
    /**
     * Dimension constructor
     * @param {number|Point} w - The width of this Dimension, or the upper-left vertex of a
     * virtual Rectangle
     * @param {number|Point} h - The height of this Dimension, or the bottom-right vertex of a
     * virtual Rectangle
     */
    constructor(w, h) {
      if (w instanceof Point && h instanceof Point) {
        this.width = h.x - w.x
        this.height = h.y - w.y
      } else {
        this.width = w || 0
        this.height = h || 0
      }
    }

    /**
     * Reads the properties of this Dimension from an XML element
     * @param {external:jQuery} $xml - The xml element to be parsed
     * @returns {Dimension}
     */
    setProperties($xml) {
      this.width = Number($xml.attr('width'))
      this.height = Number($xml.attr('height'))
      return this
    }

    /**
     * Check if two dimensions are equivalent
     * @param {Dimension} d
     * @returns {Boolean}
     */
    equals(d) {
      return this.width === d.width && this.height === d.height
    }

    /**
     * Multiplies the `w` and `h` co-ordinates by a specified `delta`
     * @param {Point|Dimension} delta
     * @returns {Dimension}
     */
    multBy(delta) {
      this.width *= delta.x || delta.width || 0
      this.height *= delta.y || delta.height || 0
      return this
    }

    /**
     * Sets new values for width and height.
     * `width` can be a number or another `Dimension` object
     * @param {number|Dimension} width - The new width, or a full Dimension to copy it from.
     * @param {number=} height - Not used when `width` is a Dimension
     * @returns {Dimension}
     */
    setDimension(width, height) {
      if (width instanceof Dimension) {
        height = width.height
        width = width.width
      }
      this.width = width
      this.height = height
      return this
    }

    /**
     * Calculates the area of a Rectangle with this dimension
     * @return {number} The resulting area
     */
    getSurface() {
      return this.width * this.height
    }
  }

  Object.assign(Dimension.prototype, {
    /**
     * @name Dimension#width
     * @type {number} */
    width: 0,
    /**
     * @name Dimension#height
     * @type {number} */
    height: 0,
  })

  /**
   * Shape is a generic abstract class for rectangles, ellipses and stroke-free shapes.
   * @abstract
   * @class
   */
  class Shape {
    /**
     * Shape  constructor
     * @param {Point} pos - The top-left coordinates of this Shape
     */
    constructor(pos) {
      this.pos = pos || new Point()
    }

    /**
     * Shifts the shape a specified amount in horizontal and vertical directions
     * @param {Point|Dimension} delta - The amount to shift the Shape
     * @returns {Shape}
     */
    moveBy(delta) {
      this.pos.moveBy(delta)
      return this
    }

    /**
     * Moves this shape to a new position
     * @param {Point} newPos - The new position of the shape
     * @returns {Shape}
     */
    moveTo(newPos) {
      this.pos.moveTo(newPos)
      return this
    }

    /**
     * Gets the enclosing {@link Rectangle} of this Shape.
     * @returns {Rectangle}
     */
    getBounds() {
      return new Rectangle(this.pos)
    }

    /**
     * Checks if two shapes are equivalent.
     * @param {Shape} p - The Shape to compare against
     * @returns {boolean}
     */
    equals(p) {
      return this.pos.equals(p.pos)
    }

    /**
     * Multiplies the dimension of the Shape by the specified `delta` amount.
     * @param {Point|Dimension} _delta - Object containing the X and Y ratio to be scaled.
     * @returns {Shape}
     */
    scaleBy(_delta) {
      // Nothing to scale in abstract shapes
      return this
    }

    /**
     * Gets a clone of this shape moved to the `pos` component of the rectangle and scaled
     * by its `dim` value.
     * @param {Rectangle} rect - The rectangle to be taken as a base for moving and scaling
     * this shape.
     * @returns {Shape}
     */
    getShape(rect) {
      return this.clone().scaleBy(rect.dim).moveBy(rect.pos)
    }

    /**
     * Checks if the provided {@link Point} is inside this shape.
     * @param {Point} _p - The point to check
     * @returns {boolean}
     */
    contains(_p) {
      // Nothing to check in abstract shapes
      return false
    }

    /**
     * Checks if the provided {@link Rectangle} `r` intersects with this shape.
     * @param {Rectangle} _r
     * @returns {boolean}
     */
    intersects(_r) {
      // Nothing to check in abstract shapes
      return false
    }

    /**
     * Fills the Shape with the current style in the provided HTML canvas context
     * @param {external:CanvasRenderingContext2D} ctx - The canvas 2D rendering context where to fill this shape.
     * @param {Rectangle=} dirtyRegion - The context region to be updated. Used as clipping
     * region when drawing.
     * @returns {external:CanvasRenderingContext2D} - The provided rendering context
     */
    fill(ctx, dirtyRegion) {
      ctx.save()
      if (dirtyRegion && dirtyRegion.getSurface() > 0) {
        // Clip the dirty region
        ctx.beginPath()
        ctx.rect(dirtyRegion.pos.x, dirtyRegion.pos.y, dirtyRegion.dim.width, dirtyRegion.dim.height)
        ctx.clip()
      }
      // Prepare shape path and fill
      this.preparePath(ctx)
      ctx.fill()
      ctx.restore()
      return ctx
    }

    /**
     * Draws this shape in the provided HTML canvas 2D rendering context.
     * @param {external:CanvasRenderingContext2D} ctx - The canvas 2D rendering context where to draw the shape.
     * @returns {external:CanvasRenderingContext2D} - The provided rendering context
     */
    stroke(ctx) {
      this.preparePath(ctx)
      ctx.stroke()
      return ctx
    }

    /**
     * Prepares an HTML canvas 2D rendering context with a path that can be used to stroke a line,
     * to fill a surface or to define a clipping region.
     * @param {external:CanvasRenderingContext2D} ctx
     * @returns {external:CanvasRenderingContext2D} - The provided rendering context
     */
    preparePath(ctx) {
      // Nothing to do in abstract shapes
      return ctx
    }

    /**
     * Creates a clipping region on the specified HTML canvas 2D rendering context
     * @param {external:CanvasRenderingContext2D} ctx - The rendering context
     * @param {string=} [fillRule='nonzero'] - Can be 'nonzero' (default when not set) or 'evenodd'
     * @returns {external:CanvasRenderingContext2D} - The provided rendering context
     */
    clip(ctx, fillRule) {
      this.preparePath(ctx)
      ctx.clip(fillRule || 'nonzero')
      return ctx
    }

    /**
     * Shorthand method for determining if a Shape is an {@link Rectangle}
     * @returns {Boolean}
     */
    isRect() {
      return false
    }

    /**
     * Overwrites the original 'Object.toString' method with a more descriptive text
     * @returns {String}
     */
    toString() {
      return `Shape enclosed in ${this.getBounds().getCoords()}`
    }
  }

  Object.assign(Shape.prototype, {
    /**
     * The current position of the shape
     * @name Shape#pos
     * @type {Point} */
    pos: new Point(),
  })

  /**
   * The rectangular {@link Shape} accepts five different sets of parameters:
   * @example
   * // Calling Rectangle() with different sets of parameters
   * // A Point and a Dimension:
   * new Rectangle(pos, dim)
   * // Another Rectangle, to be cloned:
   * new Rectangle(rect)
   * // Two Point objects containing the coordinates of upper-left and lower-right vertexs:
   * new Rectangle(p0, p1)
   * // An array of four numbers with the coordinates of the same vertexs:
   * new Rectangle([x0, y0, x1, y1])
   * // Four single numbers, meaning the same coordinates as above:
   * new Rectangle(x0, y0, x1, y1)
   * @class
   * @extends Shape
   */
  class Rectangle extends Shape {
    /**
     * Rectangle constructor
     * @param {Point|Rectangle|number|number[]} pos
     * @param {Dimension|number=} dim
     * @param {number=} w
     * @param {number=} h
     */
    constructor(pos, dim, w, h) {
      let p = pos, d = dim
      // Special case: constructor with a Rectangle as a unique parameter
      if (pos instanceof Rectangle) {
        d = new Dimension(pos.dim.width, pos.dim.height)
        p = new Point(pos.pos.x, pos.pos.y)
      } else if (pos instanceof Point) {
        p = new Point(pos.x, pos.y)
        if (dim instanceof Dimension)
          d = new Dimension(dim.width, dim.height)
      } else if (pos instanceof Array) {
        // Assume `pos` is an array of numbers indicating: x0, y0, x1, y1
        p = new Point(pos[0], pos[1])
        d = new Dimension(pos[2] - pos[0], pos[3] - pos[1])
      } else if (typeof w === 'number' && typeof h === 'number') {
        // width and height passed. Treat all parameters as co-ordinates:
        p = new Point(pos, dim)
        d = new Dimension(w, h)
      }
      super(p)

      if (d instanceof Dimension)
        this.dim = d
      else if (d instanceof Point)
        this.dim = new Dimension(d.x - this.pos.x, d.y - this.pos.y)
      else
        this.dim = new Dimension()
    }

    /**
     * Gets the enclosing {@link Rectangle} of this Shape.
     * @returns {Rectangle}
     */
    getBounds() {
      return this
    }

    /**
     * Sets this Rectangle the position and dimension of another one
     * @param {Rectangle} rect
     * @returns {Rectangle}
     */
    setBounds(rect) {
      if (!rect)
        rect = new Rectangle()
      this.pos.x = rect.pos.x
      this.pos.y = rect.pos.y
      this.dim.width = rect.dim.width
      this.dim.height = rect.dim.height
      return this
    }

    /**
     * Checks if two shapes are equivalent.
     * @param {Shape} r - The Shape to compare against
     * @returns {boolean}
     */
    equals(r) {
      return r instanceof Rectangle && this.pos.equals(r.pos) && this.dim.equals(r.dim)
    }

    /**
     * Clones this Rectangle
     * @returns {Rectangle}
     */
    clone() {
      return new Rectangle(this)
    }

    /**
     * Multiplies the dimension of the Shape by the specified `delta` amount.
     * @param {Point|Dimension} delta - Object containing the X and Y ratio to be scaled.
     * @returns {Rectangle}
     */
    scaleBy(delta) {
      this.pos.multBy(delta)
      this.dim.multBy(delta)
      return this
    }

    /**
     * Expands the boundaries of this shape. This affects the current position and dimension.
     * @param {number} dx - The amount to grow (or decrease) in horizontal direction
     * @param {number} dy - The amount to grow (or decrease) in vertical direction
     * @returns {Rectangle}
     */
    grow(dx, dy) {
      this.pos.x -= dx
      this.pos.y -= dy
      this.dim.width += 2 * dx
      this.dim.height += 2 * dy
      return this
    }

    /**
     * Gets the {@link Point} corresponding to the lower-right vertex of the Rectangle.
     * @returns {Point}
     */
    getOppositeVertex() {
      return new Point(this.pos.x + this.dim.width, this.pos.y + this.dim.height)
    }

    /**
     * Adds the boundaries of another shape to the current one
     * @param {Shape} shape - The {@link Shape} to be added
     * @returns {Rectangle}
     */
    add(shape) {
      const
        myP2 = this.getOppositeVertex(),
        rectP2 = shape.getBounds().getOppositeVertex()

      this.pos.moveTo(
        Math.min(this.pos.x, shape.getBounds().pos.x),
        Math.min(this.pos.y, shape.getBounds().pos.y))
      this.dim.setDimension(
        Math.max(myP2.x, rectP2.x) - this.pos.x,
        Math.max(myP2.y, rectP2.y) - this.pos.y)
      return this
    }

    //
    // Inherits the documentation of `contains` in Shape
    contains(p) {
      const p2 = this.getOppositeVertex()
      return p.x >= this.pos.x && p.x <= p2.x && p.y >= this.pos.y && p.y <= p2.y
    }

    //
    // Inherits the documentation of `intersects` in Shape
    intersects(r) {
      const
        p1 = this.pos, p2 = this.getOppositeVertex(),
        r1 = r.pos, r2 = r.getOppositeVertex()
      return r2.x >= p1.x && r1.x <= p2.x && r2.y >= p1.y && r1.y <= p2.y
    }

    //
    // Inherits the documentation of `preparePath` in Shape
    preparePath(ctx) {
      ctx.beginPath()
      ctx.rect(this.pos.x, this.pos.y, this.dim.width, this.dim.height)
      return ctx
    }

    //
    // Inherits the documentation of `getSurface` in Shape
    getSurface() {
      return this.dim.getSurface()
    }

    //
    // Inherits the documentation of `isEmpty` in Shape
    isEmpty() {
      return this.getSurface() === 0
    }

    //
    // Inherits the documentation of `isRect` in Shape
    isRect() {
      return true
    }

    //
    // Inherits the documentation of `toString` in Shape
    toString() {
      return `Rectangle ${this.getCoords()}`
    }

    /**
     * Gets a string with the co-ordinates of the upper-left and lower-right vertexs of this rectangle,
     * (with values rounded to int)
     * @returns {String}
     */
    getCoords() {
      return `[${Math.round(this.pos.x)},${Math.round(this.pos.y)},${Math.round(this.pos.x + this.dim.width)},${Math.round(this.pos.y + this.dim.height)}]`
    }
  }

  Object.assign(Rectangle.prototype, {
    /**
     * The {@link Dimension} of the Rectangle
     * @name Rectangle#dim
     * @type {Dimension} */
    dim: new Dimension(),
  })

  /**
   * The Ellipse shape has the same constructor options as {@link Rectangle}
   * @class
   * @extends Rectangle
   */
  class Ellipse extends Rectangle {
    /**
     * Ellipse constructor
     * @param {Point|Rectangle|number|number[]} pos
     * @param {Dimension|number=} dim
     * @param {number=} w
     * @param {number=} h
     */
    constructor(pos, dim, w, h) {
      super(pos, dim, w, h)
    }

    //
    // Inherits the documentation of `preparePath` in Rectangle
    preparePath(ctx) {

      // Using the solution 'drawEllipseWithBezier' proposed by Steve Tranby in:
      // [http://jsbin.com/sosugenegi/1/edit] as a response to:
      // [http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas]
      // Thanks Steve!!

      const kappa = 0.5522848,
        ox = kappa * this.dim.width / 2, // control point offset horizontal
        oy = kappa * this.dim.height / 2, // control point offset vertical
        xe = this.pos.x + this.dim.width, // x-end
        ye = this.pos.y + this.dim.height, // y-end
        xm = this.pos.x + this.dim.width / 2, // x-middle
        ym = this.pos.y + this.dim.height / 2 // y-middle

      ctx.beginPath()
      ctx.moveTo(this.pos.x, ym)
      ctx.bezierCurveTo(this.pos.x, ym - oy, xm - ox, this.pos.y, xm, this.pos.y)
      ctx.bezierCurveTo(xm + ox, this.pos.y, xe, ym - oy, xe, ym)
      ctx.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye)
      ctx.bezierCurveTo(xm - ox, ye, this.pos.x, ym + oy, this.pos.x, ym)
      ctx.closePath()
      return ctx
    }

    //
    // Inherits the documentation of `contains` in Shape
    contains(p) {
      // First check if the point is inside the enclosing rectangle
      let result = super.contains(p)
      if (result) {
        const
          rx = this.dim.width / 2,
          ry = this.dim.height / 2,
          cx = this.pos.x + rx,
          cy = this.pos.y + ry
        // Apply the general equation of an ellipse
        // See: [http://math.stackexchange.com/questions/76457/check-if-a-point-is-within-an-ellipse]
        // rx and ry are > 0 because we are inside the enclosing rect,
        // so don't care about division by zero
        result = Math.pow(p.x - cx, 2) / Math.pow(rx, 2) + Math.pow(p.y - cy, 2) / Math.pow(ry, 2) <= 1
      }
      return result
    }

    //
    // Inherits the documentation of `getSurface` in Rectangle
    getSurface() {
      return Math.PI * this.dim.width / 2 * this.dim.height / 2
    }

    //
    // Inherits the documentation of `equals` in Rectangle
    equals(e) {
      return e instanceof Ellipse && super.equals(e)
    }

    //
    // Inherits the documentation of `clone` in Rectangle
    clone() {
      return new Ellipse(this.pos, this.dim)
    }

    //
    // Inherits the documentation of `isRect` in Rectangle
    isRect() {
      return false
    }

    //
    // Inherits the documentation of `toString` in Shape
    toString() {
      return `Ellipse enclosed in ${this.getCoords()}`
    }
  }

  /**
   * A `Path` is a {@link Shape} formed by a serie of strokes, represented by
   * {@link PathStroke} objects
   * @class
   * @extends Shape
   */
  class Path extends Shape {
    /**
     * Path constructor
     * @param {PathStroke[]} strokes - The array of {@link PathStroke} objects defining this Path.
     */
    constructor(strokes) {
      super()
      // Deep copy of the array of strokes
      if (strokes) {
        this.strokes = []
        // In [Shaper](Shaper.html) objects, strokes have `action` instead of `type` and `data` instead of `points`
        strokes.forEach(str => this.strokes.push(new PathStroke(str.type || str.action, str.points || str.data)))
      }
      // Calculate the enclosing rectangle
      this.enclosing = new Rectangle()
      this.enclosingPoints = []
      this.calcEnclosingRect()
      this.pos = this.enclosing.pos
    }

    //
    // Inherits the documentation of `clone` in Shape
    clone() {
      return new Path(this.strokes.map(str => str.clone()))
    }

    /**
     * Adds a {@link PathStroke} to `strokes`
     * @param {PathStroke} stroke
     */
    addStroke(stroke) {
      this.strokes.push(stroke)
      return this
    }

    /**
     * Calculates the polygon and the rectangle that (approximately) encloses this shape
     * @returns {Rectangle}
     */
    calcEnclosingRect() {
      this.enclosingPoints = []
      let last = new Point()
      this.strokes.forEach(str => {
        str.getEnclosingPoints(last).forEach(pt => {
          last = new Point(pt)
          this.enclosingPoints.push(last)
        })
      })

      let l = this.enclosingPoints.length
      if (l > 1 && this.enclosingPoints[0].equals(this.enclosingPoints[l - 1])) {
        this.enclosingPoints.pop()
        l--
      }
      const
        p0 = new Point(this.enclosingPoints[0]),
        p1 = new Point(this.enclosingPoints[0])

      for (let k = 1; k < l; k++) {
        const p = this.enclosingPoints[k]
        // Check if `p` is at left or above `p0`
        p0.x = Math.min(p.x, p0.x)
        p0.y = Math.min(p.y, p0.y)
        // Check if `p` is at right or below `p1`
        p1.x = Math.max(p.x, p1.x)
        p1.y = Math.max(p.y, p1.y)
      }
      this.enclosing.setBounds(new Rectangle(p0, new Dimension(p0, p1)))
      return this.enclosing
    }

    //
    // Inherits the documentation of `getBounds` in Shape
    getBounds() {
      return this.enclosing
    }

    //
    // Inherits the documentation of `moveBy` in Shape
    moveBy(delta) {
      this.strokes.forEach(str => str.moveBy(delta))
      this.enclosingPoints.forEach(pt => pt.moveBy(delta))
      this.enclosing.moveBy(delta)
      return this
    }

    //
    // Inherits the documentation of `moveTo` in Shape
    moveTo(newPos) {
      return this.moveBy(new Dimension(newPos.x - this.pos.x, newPos.y - this.pos.y))
    }

    //
    // Inherits the documentation of `equals` in Shape
    // TODO: Implement comparision of complex paths
    equals(_p) {
      return false
    }

    //
    // Inherits the documentation of `scaleBy` in Shape
    scaleBy(delta) {
      this.strokes.forEach(str => str.multBy(delta))
      this.enclosingPoints.forEach(pt => pt.multBy(delta))
      this.enclosing.scaleBy(delta)
      return this
    }

    //
    // Inherits the documentation of `contains` in Shape
    contains(p) {
      let result = this.enclosing.contains(p)
      if (result) {
        // Let's see if the point really lies inside the polygon formed by enclosingPoints
        // Using the "Ray casting algorithm" described in [https://en.wikipedia.org/wiki/Point_in_polygon]
        const N = this.enclosingPoints.length
        let
          xinters = 0,
          counter = 0,
          p1 = this.enclosingPoints[0]

        for (let i = 1; i <= N; i++) {
          const p2 = this.enclosingPoints[i % N]
          if (p.y > Math.min(p1.y, p2.y)) {
            if (p.y <= Math.max(p1.y, p2.y)) {
              if (p.x <= Math.max(p1.x, p2.x)) {
                if (p1.y !== p2.y) {
                  xinters = (p.y - p1.y) * (p2.x - p1.x) / (p2.y - p1.y) + p1.x
                  if (p1.x === p2.x || p.x <= xinters)
                    counter++
                }
              }
            }
          }
          p1 = p2
        }
        if (counter % 2 === 0)
          result = false
      }
      return result
    }

    //
    // Inherits the documentation of `intersects` in Shape
    // TODO: Implement a check algorithm based on the real shape
    intersects(r) {
      return this.enclosing.intersects(r)
    }

    //
    // Inherits the documentation of `preparePath` in Shape
    preparePath(ctx) {
      // TODO: Implement filling paths
      ctx.beginPath()
      this.strokes.forEach(str => str.stroke(ctx))
      return ctx
    }
  }

  Object.assign(Path.prototype, {
    /**
     * The strokes forming this Path.
     * @name Path#strokes
     * @type {PathStroke[]} */
    strokes: [],
    /**
     * The {@link Rectangle} enclosing this Path (when drawing, this Rectangle don't include border width!)
     * @name Path#enclosing
     * @type {Rectangle} */
    enclosing: new Rectangle(),
    /**
     * Set of vertexs of a polygon close to the real path of this shape
     * @name Path#enclosingPoints
     * @type {Point[]} */
    enclosingPoints: [],
  })

  /**
   * PathStroke is the basic component of {@link Path} objects
   * @class
   */
  class PathStroke {
    /**
     * PathStroke constructor
     * @param {string} type - The type of stroke. Possible values are: `M` (move to), `L` (line to),
     * `Q` (quadratic to), `B` (bezier to) and `X` (close path).
     * @param {Point[]} points - The array of {@link Point} objects used in this Stroke.
     */
    constructor(type, points) {
      this.type = type
      // Points are deep cloned, to avoid change the original values
      if (points && points.length > 0) {
        // Check if 'points' is an array of objects of type 'Point'
        if (points[0] instanceof Point)
          this.points = points.map(p => new Point(p))
        // otherwise assume that 'points' contains just numbers
        // to be readed in pairs of x and y co-ordinates
        else {
          this.points = []
          for (let i = 0; i < points.length; i += 2)
            this.points.push(new Point(points[i], points[i + 1]))
        }
      }
    }

    /**
     * Calculates some of the points included in a quadratic Bézier curve
     * The number of points being calculated is defined in Utils.settings.BEZIER_POINTS
     * @see {@link https://en.wikipedia.org/wiki/B%C3%A9zier_curve}
     * @see {@link https://www.jasondavies.com/animated-bezier/}
     *
     * @param {Point} p0 - Starting point of the quadratic Bézier curve
     * @param {Point} p1 - Control point
     * @param {Point} p2 - Ending point
     * @param {number=} numPoints - The number of intermediate points to calculate. When not defined,
     * the value will be obtained from {@link Utils.settings.BEZIER_POINTS}.
     * @returns {Point[]} - Array with some intermediate points from the resulting Bézier curve
     */
    static getQuadraticPoints(p0, p1, p2, numPoints) {
      if (!numPoints)
        numPoints = Utils.settings.BEZIER_POINTS
      const
        result = [],
        pxa = new Point(),
        pxb = new Point()
      for (let i = 0; i < numPoints; i++) {
        const n = (i + 1) / (numPoints + 1)
        pxa.x = p0.x + (p1.x - p0.x) * n
        pxa.y = p0.y - (p0.y - p1.y) * n
        pxb.x = p1.x + (p2.x - p1.x) * n
        pxb.y = p1.y + (p2.y - p1.y) * n
        result.push(new Point(pxa.x + (pxb.x - pxa.x) * n, pxa.y - (pxa.y - pxb.y) * n))
      }
      return result
    }

    /**
     * Calculates some of the points included in a cubic Bézier (curve with two control points)
     * The number of points being calculated is defined in Utils.settings.BEZIER_POINTS
     * @param {Point} p0 - Starting point of the cubic Bézier curve
     * @param {Point} p1 - First control point
     * @param {Point} p2 - Second control point
     * @param {Point} p3 - Ending point
     * @param {number=} numPoints - The number of intermediate points to calculate. When not defined,
     * the value will be obtained from {@link Utils.settings.BEZIER_POINTS}.
     * @returns {Point[]} - Array with some intermediate points from the resulting Bézier curve
     */
    static getCubicPoints(p0, p1, p2, p3, numPoints) {
      const result = []
      if (!numPoints)
        numPoints = Utils.settings.BEZIER_POINTS
      const pr = PathStroke.getQuadraticPoints(p0, p1, p2, numPoints)
      const pq = PathStroke.getQuadraticPoints(p1, p2, p3, numPoints)
      for (let i = 0; i < numPoints; i++) {
        const n = (i + 1) / (numPoints + 1)
        result.push(new Point(pr[i].x + (pq[i].x - pr[i].x) * n, pr[i].y - (pr[0].y - pq[0].y) * n))
      }
      return result
    }

    /**
     * Clones this PathStroke
     * @returns {PathStroke}
     */
    clone() {
      // The constructors of PathStroke always make a deep copy of the `points` array
      return new PathStroke(this.type, this.points)
    }

    /**
     * Increments or decrements by `delta` the x and y coordinates of all points
     * @param {Point|Dimension} delta - The amount to add to the `x` and `y`
     * coordinates of each point.
     */
    moveBy(delta) {
      if (this.points)
        this.points.forEach(pt => pt.moveBy(delta))
      return this
    }

    /**
     * Multiplies each point coordinates by the `x` and `y` (or `w` and `h`) values of the
     * passed {@link Point} or {@link Dimension}.
     * @param {Point|Dimension} delta
     */
    multBy(delta) {
      if (this.points)
        this.points.forEach(pt => pt.multBy(delta))
      return this
    }

    /**
     * Draws this PathStroke in the provided HTML canvas context
     * @param {external:CanvasRenderingContext2D} ctx - The HTML canvas 2D rendering context
     */
    stroke(ctx) {
      switch (this.type) {
        case 'M':
          ctx.moveTo(this.points[0].x, this.points[0].y)
          break
        case 'L':
          ctx.lineTo(this.points[0].x, this.points[0].y)
          break
        case 'Q':
          ctx.quadraticCurveTo(
            this.points[0].x, this.points[0].y,
            this.points[1].x, this.points[1].y)
          break
        case 'B':
          ctx.bezierCurveTo(
            this.points[0].x, this.points[0].y,
            this.points[1].x, this.points[1].y,
            this.points[2].x, this.points[2].y)
          break
        case 'X':
          ctx.closePath()
          break
      }
      return ctx
    }

    /**
     * Gets the set of points that will be included as a vertexs on the owner's shape
     * enclosing polygon.
     * @param {Point} from - The starting point for this stroke
     * @returns {Point[]}
     */
    getEnclosingPoints(from) {
      let result = []
      switch (this.type) {
        case 'M':
        case 'L':
          result.push(this.points[0])
          break
        case 'Q':
          result = PathStroke.getQuadraticPoints(from, this.points[0], this.points[1])
          result.push(this.points[1])
          break
        case 'B':
          result = PathStroke.getCubicPoints(from, this.points[0], this.points[1], this.points[2])
          result.push(this.points[2])
          break
      }
      return result
    }
  }

  Object.assign(PathStroke.prototype, {
    /**
     * The Stroke type. Possible values are: `M` (move to), `L` (line to), `Q` (quadratic to),
     * `B` (bezier to) and `X` (close path).
     * @name PathStroke#type
     * @type {string} */
    type: 'X',
    /**
     * The array of points used by this stroke. Can be `null`.
     * @name PathStroke#points
     * @type {Point[]} */
    points: null,
  })

  /**
   * This class encapsulates actions that can be linked to buttons, menus and other active objects
   * @class
   */
  class Action {
    /**
     * Action constructor
     * @param {string} name - The name of this Action
     * @param {function} actionPerformed - The callback to be triggered by this Action
     */
    constructor(name, actionPerformed) {
      this.name = name
      this.actionPerformed = actionPerformed
      this._statusListeners = []
    }

    /**
     * Here is where subclasses must define the callback to be triggered when
     * this Action object is called
     * @param {Action} _thisAction - Pointer to this Action object
     * @param {object} _event - The original action event that has originated this action
     */
    actionPerformed(_thisAction, _event) {
      return this
    }

    /**
     * This is the method to be passed to DOM event triggers
     * @example
     * const myFunc = () => { alert('Hello!') }
     * const myAction = new Action('hello', myFunc)
     * $( "#foo" ).bind( "click", myAction.processEvent)
     * @param {object} event - The event object passed by the DOM event trigger
     */
    processEvent(event) {
      return this.actionPerformed(this, event)
    }

    /**
     * Adds a status listener
     * @param {function} listener - The callback method to be called when the status of this
     * Action changes
     */
    addStatusListener(listener) {
      this._statusListeners.push(listener)
    }

    /**
     * Removes a previously registered status listener
     * @param {function} listener - The listener to be removed
     */
    removeStatusListener(listener) {
      this._statusListeners = this._statusListeners.map(l => l !== listener)
    }

    /**
     * Enables or disables this action
     * @param {boolean} enabled
     */
    setEnabled(enabled) {
      this.enabled = enabled
      this._statusListeners.forEach(listener => listener.call(this, this))
      return this
    }
  }

  Object.assign(Action.prototype, {
    /**
     * The action's name
     * @name Action#name
     * @type {string} */
    name: null,
    /**
     * An optional description
     * @name Action#description
     * @type {string} */
    description: null,
    /**
     * Action status. `true` means enabled, `false` disabled
     * @name Action#enabled
     * @type {boolean} */
    enabled: false,
    /**
     * Array of callback functions to be triggered when the `enabled` flag changes
     * @name Action#_statusListeners
     * @private
     * @type {function[]} */
    _statusListeners: null,
  })

  /**
   * This class provides a timer that will launch a function at specific intervals
   * @class
   */
  class Timer {
    /**
     * Timer constructor
     * @param {function} actionPerformed - The function to be triggered when the timer is enabled.
     * @param {number} interval - The interval between action calls, specified in milliseconds.
     * @param {boolean=} [enabled=false] - Flag to indicate if the timer will be initially enabled.
     */
    constructor(actionPerformed, interval, enabled) {
      this.actionPerformed = actionPerformed
      this.interval = interval
      this.setEnabled(enabled === true)
    }

    /**
     * Here is where subclasses must define the function to be performed when this timer ticks.
     * @param {Timer} _thisTimer
     */
    actionPerformed(_thisTimer) {
      return this
    }

    /**
     * This is the method called by `window.setInterval`
     * @param {Event} _event
     */
    processTimer(_event) {
      this.ticks++
      if (!this.repeats)
        this.stop()
      return this.actionPerformed.call(this)
    }

    /**
     * Enables or disables this timer
     * @param {boolean} enabled - Indicates if the timer should be enabled or disabled
     * @param {boolean=} [retainCounter=false] - When `true`, the ticks counter will not be cleared
     */
    setEnabled(enabled, retainCounter) {
      if (!retainCounter)
        this.ticks = 0
      if (enabled && this.timer !== null) {
        // Timer already running
        return
      }

      if (enabled) {
        this.timer = window.setInterval(() => this.processTimer(null), this.interval)
      } else {
        if (this.timer !== null) {
          window.clearInterval(this.timer)
          this.timer = null
        }
      }
      return this
    }

    /**
     * Checks if this timer is running
     * @returns {Boolean}
     */
    isRunning() {
      return this.timer !== null
    }

    /**
     * Starts this timer
     * @param {boolean=} [retainCounter=false] - When `true`, the ticks counter will not be cleared
     */
    start(retainCounter) {
      return this.setEnabled(true, retainCounter)
    }

    /**
     * Stops this timer
     * @param {boolean=} [retainCounter=false] - When `true`, the ticks counter will not be cleared
     */
    stop(retainCounter) {
      return this.setEnabled(false, retainCounter)
    }
  }

  Object.assign(Timer.prototype, {
    /**
     * The timer interval, in milliseconds
     * @name Timer#interval
     * @type {number} */
    interval: 0,
    /**
     * The ticks counter
     * @name Timer#ticks
     * @type {number} */
    ticks: 0,
    /**
     * The object returned by `window.setInterval`
     * @name Timer#timer
     * @type {object} */
    timer: null,
    /**
     * When `true`, the timer should repeat until `stop` is called
     * @name Timer#repeats
     * @type {boolean} */
    repeats: true,
  })

  /**
   * Logic object that takes care of an "invalidated" rectangle that will be repainted
   * at the next update of a 2D object, usually an HTML Canvas.
   * Container has the same constructor options as {@link Rectangle}
   * @class
   * @extends Rectangle
   */
  class Container extends Rectangle {
    /**
     * Container constructor
     * @param {Point|Rectangle|number|number[]} pos
     * @param {Dimension|number=} dim
     * @param {number=} w
     * @param {number=} h
     */
    constructor(pos, dim, w, h) {
      super(pos, dim, w, h)
    }

    /**
     * Adds the provided rectangle to the invalidated area.
     * @param {Rectangle} rect
     */
    invalidate(rect) {
      if (rect) {
        if (this.invalidatedRect === null)
          this.invalidatedRect = rect.clone()
        else
          this.invalidatedRect.add(rect)
      } else
        this.invalidatedRect = null
      return this
    }

    /**
     * Updates the invalidated area
     */
    update() {
      this.updateContent(this.invalidatedRect)
      this.invalidatedRect = null
      return this
    }

    /**
     * Containers should implement this method to update its graphic contents. It should
     * be called from {@link Container~update}
     * @param {Shape} _dirtyRegion - Specifies the area to be updated. When `null`, it's the whole
     * Container.
     */
    updateContent(_dirtyRegion) {
      // To be overrided by subclasses. Here does nothing.
      return this
    }
  }

  Object.assign(Container.prototype, {
    /**
     * The currently "invalidated" area
     * @name Container#invalidatedRect
     * @type {Rectangle} */
    invalidatedRect: null,
  })

  // Returns a composite object with all classes
  return {
    Font,
    Gradient,
    Stroke,
    Point,
    Dimension,
    Shape,
    Rectangle,
    Ellipse,
    Path,
    PathStroke,
    Action,
    Timer,
    Container
  }
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/Activity.js":
/*!*************************!*\
  !*** ./src/Activity.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : Activity.js
 *  Created : 07/04/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ./Utils */ "./src/Utils.js"),
  __webpack_require__(/*! ./AWT */ "./src/AWT.js"),
  __webpack_require__(/*! ./media/EventSounds */ "./src/media/EventSounds.js"),
  __webpack_require__(/*! ./boxes/ActiveBoxContent */ "./src/boxes/ActiveBoxContent.js"),
  __webpack_require__(/*! ./boxes/ActiveBagContent */ "./src/boxes/ActiveBagContent.js"),
  __webpack_require__(/*! ./boxes/BoxBase */ "./src/boxes/BoxBase.js"),
  __webpack_require__(/*! ./automation/AutoContentProvider */ "./src/automation/AutoContentProvider.js"),
  __webpack_require__(/*! ./boxes/TextGridContent */ "./src/boxes/TextGridContent.js"),
  __webpack_require__(/*! ./activities/text/Evaluator */ "./src/activities/text/Evaluator.js"),
  __webpack_require__(/*! ./activities/text/TextActivityDocument */ "./src/activities/text/TextActivityDocument.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (
    $, Utils, AWT, EventSounds, ActiveBoxContent, ActiveBagContent,
    BoxBase, AutoContentProvider, TextGridContent, Evaluator, TextActivityDocument) {

    // Direct access to global setings
    const K = Utils.settings

    // Event used for detecting touch devices
    const TOUCH_TEST_EVENT = 'touchstart'

    /**
     * Activity is the abstract base class of JClic activities. It defines also the inner class
     * {@link Activity.ActivityPanel}, wich is responsible for user interaction with the activity
     * content.
     * Activities should extend both `Activity` and `ActivityPanel` classes in order to become fully
     * operative.
     * @exports Activity
     * @class
     * @abstract
     */
    class Activity {
      /**
       * Activity constructor
       * @param {JClicProject} project - The {@link JClicProject} to which this activity belongs
       */
      constructor(project) {
        this.project = project
        this.eventSounds = new EventSounds(this.project.settings.eventSounds)
        this.messages = {}
        this.abc = {}
      }

      /**
       * Factory constructor that returns a specific type of Activity based on the `class` attribute
       * declared in the $xml parameter.
       * @param {external:jQuery} $xml - The XML element to be parsed
       * @param {JClicProject} project - The {@link JClicProject} to which this activity belongs
       * @returns {Activity}
       */
      static getActivity($xml, project) {
        let act = null
        if ($xml && project) {
          const
            className = ($xml.attr('class') || '').replace(/^edu\.xtec\.jclic\.activities\./, '@'),
            cl = Activity.CLASSES[className]
          if (cl) {
            act = new cl(project)
            act.setProperties($xml)
          } else
            Utils.log('error', `Unknown activity class: ${className}`)
        }
        return act
      }

      /**
       * Loads this object settings from an XML element
       * @param {external:jQuery} $xml - The jQuery XML element to parse
       */
      setProperties($xml) {

        // Read attributes
        Utils.attrForEach($xml.get(0).attributes, (name, val) => {
          switch (name) {
            // Generic attributes:
            case 'name':
              val = Utils.nSlash(val)
            /* falls through */
            case 'code':
            case 'type':
            case 'description':
              this[name] = val
              break

            case 'class':
              this.className = val.replace(/^edu\.xtec\.jclic\.activities\./, '@')
              break

            case 'inverse':
              this.invAss = Utils.getBoolean(val, false)
              break

            case 'autoJump':
            case 'forceOkToAdvance':
            case 'amongParagraphs':
              this[name] = Utils.getBoolean(val, false)
              break
          }
        })

        // Read specific nodes
        $xml.children().each((_n, child) => {
          const $node = $(child)
          switch (child.nodeName) {
            case 'settings':
              // Read more attributes
              Utils.attrForEach($node.get(0).attributes, (name, val) => {
                switch (name) {
                  case 'infoUrl':
                  case 'infoCmd':
                    this[name] = val
                    break

                  case 'margin':
                  case 'maxTime':
                  case 'maxActions':
                    this[name] = Number(val)
                    break

                  case 'report':
                    this.includeInReports = Utils.getBoolean(val, false)
                    break
                  case 'countDownTime':
                  case 'countDownActions':
                  case 'reportActions':
                  case 'useOrder':
                  case 'dragCells':
                    this[name] = Utils.getBoolean(val, false)
                    break
                }
              })

              // Read elements of _settings_
              $node.children().each((_n, child) => {
                const $node = $(child)
                switch (child.nodeName) {
                  case 'skin':
                    this.skinFileName = $node.attr('file')
                    break

                  case 'helpWindow':
                    this.helpMsg = Utils.getXmlText(this)
                    this.showSolution = Utils.getBoolean($node.attr('showSolution'), false)
                    this.helpWindow = this.helpMsg !== null || this.showSolution
                    break

                  case 'container':
                    // Read settings related to the 'container'
                    // (the main panel containing the activity and other elements)
                    this.bgColor = Utils.checkColor($node.attr('bgColor'), Utils.settings.BoxBase.BACK_COLOR)

                    $node.children().each((_n, child) => {
                      const $child = $(child)
                      switch (child.nodeName) {
                        case 'image':
                          this.bgImageFile = $child.attr('name')
                          this.tiledBgImg = Utils.getBoolean($child.attr('tiled'), false)
                          break
                        case 'counters':
                          this.bTimeCounter = Utils.getBoolean($child.attr('time'), true)
                          this.bActionsCounter = Utils.getBoolean($child.attr('actions'), true)
                          this.bScoreCounter = Utils.getBoolean($child.attr('score'), true)
                          break
                        case 'gradient':
                          this.bgGradient = new AWT.Gradient().setProperties($child)
                          break
                      }
                    })
                    break

                  case 'window':
                    // Read settings related to the 'window'
                    // (the panel where the activity deploys its content)
                    this.activityBgColor = Utils.checkColor($node.attr('bgColor'), K.DEFAULT_BG_COLOR)
                    this.transparentBg = Utils.getBoolean($node.attr('transparent'), false)
                    this.border = Utils.getBoolean($node.attr('border'), false)
                    $node.children().each((_n, child) => {
                      const $child = $(child)
                      switch (child.nodeName) {
                        case 'gradient':
                          this.activityBgGradient = new AWT.Gradient().setProperties($child)
                          break
                        case 'position':
                          this.absolutePosition = new AWT.Point().setProperties($child)
                          this.absolutePositioned = true
                          break
                        case 'size':
                          this.windowSize = new AWT.Dimension().setProperties($child)
                          break
                      }
                    })
                    break

                  case 'eventSounds':
                    // eventSounds is already created in constructor,
                    // just read properties
                    this.eventSounds.setProperties($node)
                    break
                }
              })
              break

            case 'messages':
              $node.children('cell').each((_n, child) => {
                const m = this.readMessage($(child))
                // Possible message types are: `initial`, `final`, `previous`, `finalError`
                this.messages[m.type] = m
              })
              break

            case 'automation':
              // Read the automation settings ('Arith' or other automation engines)
              this.acp = AutoContentProvider.getProvider($node, this.project)
              if (this.acp)
                this.numericContent = this.acp.numericContent
              break

            // Settings specific to panel-type activities (puzzles, associations...)
            case 'cells':
              // Read the [ActiveBagContent](ActiveBagContent.html) objects
              const cellSet = new ActiveBagContent().setProperties($node, this.project.mediaBag)
              // Valid ids:
              // - Panel activities: 'primary', 'secondary', solvedPrimary'
              // - Textpanel activities: 'acrossClues', 'downClues', 'answers'
              this.abc[cellSet.id] = cellSet
              break

            case 'scramble':
              // Read the 'scramble' mode
              this.shuffles = Number($node.attr('times'))
              this.scramble.primary = Utils.getBoolean($node.attr('primary'))
              this.scramble.secondary = Utils.getBoolean($node.attr('secondary'))
              break

            case 'layout':
              Utils.attrForEach($node.get(0).attributes, (name, value) => {
                switch (name) {
                  case 'position':
                    this.boxGridPos = value
                    break
                  case 'wildTransparent':
                  case 'upperCase':
                  case 'checkCase':
                    this[name] = Utils.getBoolean(value)
                }
              })
              break

            // Element specific to {@link Menu} activities:
            case 'menuElement':
              this.menuElements.push({
                caption: $node.attr('caption') || '',
                icon: $node.attr('icon') || null,
                projectPath: $node.attr('path') || null,
                sequence: $node.attr('sequence') || null,
                description: $node.attr('description') || ''
              })
              break

            // Element specific to {@link CrossWord} and
            // {@link WordSearch} activities:
            case 'textGrid':
              // Read the 'textGrid' element into a {@link TextGridContent}
              this.tgc = new TextGridContent().setProperties($node)
              break

            // Read the clues of {@link WordSearch} activities
            case 'clues':
              // Read the array of clues
              this.clues = []
              this.clueItems = []
              $node.children('clue').each((n, child) => {
                this.clueItems[n] = Number($(child).attr('id'))
                this.clues[n] = child.textContent
              })
              break

            // Elements specific to text activities:
            case 'checkButton':
              this.checkButtonText = child.textContent || 'check'
              break

            case 'prevScreen':
              this.prevScreen = true
              this.prevScreenMaxTime = $node.attr('maxTime') || -1
              $node.children().each((_n, child) => {
                switch (child.nodeName) {
                  case 'style':
                    this.prevScreenStyle = new BoxBase().setProperties($(child))
                    break
                  case 'p':
                    if (this.prevScreenText === null)
                      this.prevScreenText = ''
                    this.prevScreenText += `<p>${child.textContent}</p>`
                    break
                }
              })
              break

            case 'evaluator':
              this.ev = Evaluator.getEvaluator($node)
              break

            case 'document':
              // Read main document of text activities
              this.document = new TextActivityDocument().setProperties($node, this.project.mediaBag)
              break
          }
        })
        return this
      }

      /**
       * Read an activity message from an XML element
       * @param {external:jQuery} $xml - The XML element to be parsed
       * @returns {ActiveBoxContent}
       */
      readMessage($xml) {
        const msg = new ActiveBoxContent().setProperties($xml, this.project.mediaBag)
        //
        // Allowed types are: `initial`, `final`, `previous`, `finalError`
        msg.type = $xml.attr('type')
        if (Utils.isNullOrUndef(msg.bb))
          msg.bb = new BoxBase(null)
        return msg
      }

      /**
       * Initialises the {@link AutoContentProvider}, when defined.
       */
      initAutoContentProvider() {
        if (this.acp !== null)
          this.acp.init()
      }

      /**
       * Preloads the media content of the activity.
       * @param {PlayStation} ps - The {@link PlayStation} used to realize the media objects.
       */
      prepareMedia(ps) {
        this.eventSounds.realize(ps, this.project.mediaBag)
        $.each(this.messages, (_key, msg) => {
          if (msg !== null) msg.prepareMedia(ps)
        })
        $.each(this.abc, (_key, abc) => {
          if (abc !== null)
            abc.prepareMedia(ps)
        })
        return true
      }

      /**
       * Whether the activity allows the user to request the solution.
       * @returns {boolean}
       */
      helpSolutionAllowed() {
        return false
      }

      /**
       * Whether the activity allows the user to request help.
       * @returns {boolean}
       */
      helpWindowAllowed() {
        return this.helpWindow &&
          (this.helpSolutionAllowed() && this.showSolution || this.helpMsg !== null)
      }

      /**
       * Retrieves the minimum number of actions needed to solve this activity.
       * @returns {number}
       */
      getMinNumActions() {
        return 0
      }

      /**
       * When this method returns `true`, the automatic jump to the next activity must be paused at
       * this activity.
       * @returns {boolean}
       */
      mustPauseSequence() {
        return this.getMinNumActions() !== 0
      }

      /**
       * Whether or not the activity can be reset
       * @returns {boolean}
       */
      canReinit() {
        return true
      }

      /**
       * Whether or not the activity has additional information to be shown.
       * @returns {boolean}
       */
      hasInfo() {
        return this.infoUrl !== null && this.infoUrl.length > 0 ||
          this.infoCmd !== null && this.infoCmd.length > 0
      }

      /**
       * Whether or not the activity uses random to scramble internal components
       * @returns {boolean}
       */
      hasRandom() {
        return false
      }

      /**
       * When `true`, the activity must always be scrambled
       * @returns {boolean}
       */
      shuffleAlways() {
        return false
      }

      /**
       * When `true`, the activity makes use of the keyboard
       * @returns {boolean}
       */
      needsKeyboard() {
        return false
      }

      /**
       * Called when the activity must be disposed
       */
      end() {
        this.eventSounds.close()
        this.clear()
      }

      /**
       * Called when the activity must reset its internal components
       */
      clear() {
      }

      /**
       *
       * Getter method for `windowSize`
       * @returns {AWT.Dimension}
       */
      getWindowSize() {
        return new AWT.Dimension(this.windowSize)
      }

      /**
       * Setter method for `windowSize`
       * @param {AWT.Dimension} windowSize
       */
      setWindowSize(windowSize) {
        this.windowSize = new AWT.Dimension(windowSize)
      }

      /**
       * Builds the {@link Activity.Panel} object.
       * Subclasses must update the `Panel` member of its prototypes to produce specific panels.
       * @param {PlayStation} ps - The {@link PlayStation} used to build media objects.
       * @returns {ActivityPanel}
       */
      getActivityPanel(ps) {
        return new this.constructor.Panel(this, ps)
      }
    }

    /**
     * Classes derived from `Activity` should register themselves by adding a field to
     * `Activity.CLASSES` using its name as identifier and the class constructor as a value.
     * @example <caption>To be included at the end of MyActivity class:
     * </caption>Activity.CLASSES['custom@myActivity'] = MyActivity
     * @type {object}
     */
    Activity.CLASSES = {
      '@panels.Menu': Activity
    }

    Object.assign(Activity.prototype, {
      /**
       * The {@link JClicProject} to which this activity belongs
       * @name Activity#project
       * @type {JClicProject} */
      project: null,
      /**
       * The Activity name
       * @name Activity#name
       * @type {string} */
      name: K.DEFAULT_NAME,
      /**
       * The class name of this Activity
       * @name Activity#className
       * @type {string} */
      className: null,
      /**
       * Code used in reports to filter queries. Default is `null`.
       * @name Activity#code
       * @type {string} */
      code: null,
      /**
       * Type of activity, used in text activities to distinguish between different variants of the
       * same activity. Possible values are: `orderWords`, `orderParagraphs`, `identifyWords` and
       * `identifyChars`.
       * @name Activity#type
       * @type {string} */
      type: null,
      /**
       * A short description of the activity
       * @name Activity#description
       * @type {string} */
      description: null,
      /**
       * The space between the activity components measured in pixels.
       * @name Activity#margin
       * @type {number} */
      margin: K.DEFAULT_MARGIN,
      /**
       * The background color of the activity panel
       * @name Activity#bgColor
       * @type {string} */
      bgColor: K.DEFAULT_BG_COLOR,
      /**
       * When set, gradient used to draw the activity window background
       * @name Activity#bgGradient
       * @type {AWT.Gradient} */
      bgGradient: null,
      /**
       * Whether the bgImage (if any) has to be tiled across the panel background
       * @name Activity#tiledBgImg
       * @type {boolean} */
      tiledBgImg: false,
      /**
       * Filename of the image used as a panel background.
       * @name Activity#bgImageFile
       * @type {string} */
      bgImageFile: null,
      /**
       * Whether to draw a border around the activity panel
       * @name Activity#border
       * @type {boolean} */
      border: true,
      /**
       * Whether to place the activity panel at the point specified by `absolutePosition` or leave
       * it centered on the main player's window.
       * @name Activity#absolutePositioned
       * @type {boolean} */
      absolutePositioned: false,
      /**
       * The position of the activity panel on the player.
       * @name Activity#absolutePosition
       * @type {AWT.Point} */
      absolutePosition: null,
      /**
       * Whether to generate usage reports
       * @name Activity#includeInReports
       * @type {boolean} */
      includeInReports: true,
      /**
       * Whether to send action events to the {@link Reporter}
       * @name Activity#reportActions
       * @type {boolean} */
      reportActions: false,
      /**
       * Whether to allow help about the activity or not.
       * @name Activity#helpWindow
       * @type {boolean} */
      helpWindow: false,
      /**
       * Whether to show the solution on the help window.
       * @name Activity#showSolution
       * @type {boolean} */
      showSolution: false,
      /**
       * Message to be shown in the help window when `showSolution` is `false`.
       * @name Activity#helpMsg
       * @type {string} */
      helpMsg: '',
      /**
       * Specific set of {@link EventSounds} used in the activity. The default is `null`, meaning
       * to use the default event sounds.
       * @name Activity#eventSounds
       * @type {EventSounds} */
      eventSounds: null,
      /**
       * Wheter the activity must be solved in a specific order or not.
       * @name Activity#useOrder
       * @type {boolean} */
      useOrder: false,
      /**
       * Wheter the cells of the activity will be dragged across the screen.
       * When `false`, a line will be painted to link elements.
       * @name Activity#dragCells
       * @type {boolean} */
      dragCells: false,
      /**
       * File name of the Skin used by the activity. The default value is `null`, meaning that the
       * activity will use the skin specified for the project.
       * @name Activity#skinFileName
       * @type {string} */
      skinFileName: null,
      /**
       * Maximum amount of time (seconds) to solve the activity. The default value is 0, meaning
       * unlimited time.
       * @name Activity#maxTime
       * @type {number}*/
      maxTime: 0,
      /**
       * Whether the time counter should display a countdown when `maxTime > 0`
       * @name Activity#countDownTime
       * @type {boolean} */
      countDownTime: false,
      /**
       * Maximum number of actions allowed to solve the activity. The default value is 0, meaning
       * unlimited actions.
       * @name Activity#maxActions
       * @type {number}*/
      maxActions: 0,
      /**
       * Whether the actions counter should display a countdown when `maxActions > 0`
       * @name Activity#countDownActions
       * @type {boolean} */
      countDownActions: false,
      /**
       * URL to be launched when the user clicks on the 'info' button. Default is `null`.
       * @name Activity#infoUrl
       * @type {string} */
      infoUrl: null,
      /**
       * System command to be launched when the user clicks on the 'info' button. Default is `null`.
       * Important: this parameter is currently not being used
       * @name Activity#infoCmd
       * @type {string} */
      infoCmd: null,
      /**
       * The content of the initial, final, previous and error messages shown by the activity.
       * @name Activity#messages
       * @type {ActiveBoxContent[]} */
      messages: null,
      /**
       * Preferred dimension of the activity window
       * @name Activity#windowSize
       * @type {AWT.Dimension} */
      windowSize: new AWT.Dimension(K.DEFAULT_WIDTH, K.DEFAULT_HEIGHT),
      /**
       * Whether the activity window has transparent background.
       * @name Activity#transparentBg
       * @type {boolean} */
      transparentBg: false,
      /**
       * The background color of the activity
       * @name Activity#activityBgColor
       * @type {string} */
      activityBgColor: K.DEFAULT_BG_COLOR,
      /**
       * Gradient used to draw backgrounds inside the activity.
       * @name Activity#activityBgGradient
       * @type {AWT.Gradient} */
      activityBgGradient: null,
      /**
       * Whether to display or not the 'time' counter
       * @name Activity#bTimeCounter
       * @type {boolean} */
      bTimeCounter: true,
      /**
       * Whether to display or not the 'score' counter
       * @name Activity#bScoreCounter
       * @type {boolean} */
      bScoreCounter: true,
      /**
       * Whether to display or not the 'actions' counter
       * @name Activity#bActionsCounter
       * @type {boolean} */
      bActionsCounter: true,
      /**
       * Special object used to generate random content at the start of the activity
       * @name Activity#acp
       * @type {AutoContentProvider} */
      acp: null,
      //
      // Fields used only in certain activity types
      // ------------------------------------------
      //
      /**
       * Array of bags with the description of the content to be displayed on panels and cells.
       * @name Activity#abc
       * @type {ActiveBagContent[]} */
      abc: null,
      /**
       * Content of the grid of letters used in crosswords and scrambled letters
       * @name Activity#tgc
       * @type {TextGridContent} */
      tgc: null,
      /**
       * The main document used in text activities
       * @name Activity#document
       * @type {TextActivityDocument} */
      document: null,
      /**
       * Relative position of the text grid (uses the same position codes as box grids)
       * @name Activity#boxGridPos
       * @type {string} */
      boxGridPos: 'AB',
      /**
       * Number of times to shuffle the cells at the beginning of the activity
       * @name Activity#shuffles
       * @type {number} */
      shuffles: K.DEFAULT_SHUFFLES,
      /**
       * @typedef Activity~scrambleType
       * @type {object}
       * @property {boolean} primary
       * @property {boolean} secondary */
      /**
       * Object that indicates if box grids A and B must be scrambled.
       * @name Activity#scramble
       * @type {Activity~scrambleType} */
      scramble: { primary: true, secondary: true },
      /**
       * Flag to indicate "inverse resolution" in complex associations
       * @name Activity#invAss
       * @type {boolean} */
      invAss: false,
      /**
       * Array of menu elements, used in activities of type {@link Menu}
       * @name Activity#menuElements
       * @type {array} */
      menuElements: null,
      /**
       * This activity uses numeric expressions, so text literals should be
       * converted to numbers for comparisions, taking in account the
       * number format of the current locale (dot or comma as decimal separator)
       * @name Activity#numericContent
       * @type {boolean} */
      numericContent: false,
    })

    /**
     * This object is responsible for rendering the contents of the activity on the screen and
     * managing user's interaction.
     * Each type of Activity must implement its own `ActivityPanel`.
     * In JClic, {@link http://projectestac.github.io/jclic/apidoc/edu/xtec/jclic/Activity.Panel.html Activity.Panel}
     * extends {@link http://docs.oracle.com/javase/7/docs/api/javax/swing/JPanel.html javax.swing.JPanel}.
     * In this implementation, the JPanel will be replaced by an HTML `div` tag.
     * @class
     * @extends AWT.Container
     */
    class ActivityPanel extends AWT.Container {
      /**
       * ActivityPanel constructor
       * @param {Activity} act - The {@link Activity} to which this Panel belongs
       * @param {JClicPlayer} ps - Any object implementing the methods defined in the
       * {@link http://projectestac.github.io/jclic/apidoc/edu/xtec/jclic/PlayStation.html PlayStation}
       * Java interface.
       * @param {external:jQuery=} $div - The jQuery DOM element where this Panel will deploy
       */
      constructor(act, ps, $div) {
        // ActivityPanel extends AWT.Container
        super()
        this.act = act
        this.ps = ps
        this.minimumSize = new AWT.Dimension(100, 100)
        this.preferredSize = new AWT.Dimension(500, 400)
        if ($div)
          this.$div = $div
        else
          this.$div = $('<div/>', { class: 'JClicActivity', 'aria-label': ps.getMsg('Activity panel') })
        this.act.initAutoContentProvider()
      }

      /**
       * Sets the size and position of this activity panel
       * @param {AWT.Rectangle} rect
       */
      setBounds(rect) {
        this.pos.x = rect.pos.x
        this.pos.y = rect.pos.y
        this.dim.width = rect.dim.width
        this.dim.height = rect.dim.height

        this.invalidate(rect)
        this.$div.css({
          position: 'relative',
          left: rect.pos.x,
          top: rect.pos.y,
          width: rect.dim.width,
          height: rect.dim.height
        })
      }

      /**
       * Prepares the visual components of the activity
       */
      buildVisualComponents() {
        this.playing = false
        this.skin = null
        if (this.act.skinFileName && this.act.skinFileName.length > 0 && this.act.skinFileName !== this.act.project.settings.skinFileName)
          this.skin = this.act.project.mediaBag.getSkinElement(this.act.skinFileName, this.ps)

        this.bgImage = null
        if (this.act.bgImageFile && this.act.bgImageFile.length > 0) {
          const mbe = this.act.project.mediaBag.getElement(this.act.bgImageFile, true)
          if (mbe)
            this.bgImage = mbe.data
        }

        this.backgroundColor = this.act.activityBgColor

        if (this.act.transparentBg)
          this.backgroundTransparent = true

        // TODO: fix bevel-border type
        if (this.act.border)
          this.border = true

        const cssAct = {
          display: 'block',
          'background-color': this.backgroundTransparent ? 'transparent' : this.backgroundColor
        }

        // Border shadow style Material Design, inspired in [http://codepen.io/Stenvh/pen/EaeWqW]
        if (this.border) {
          cssAct['box-shadow'] = '0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12)'
          cssAct['border-radius'] = '2px'
          cssAct['color'] = '#272727'
        }

        if (this.act.activityBgGradient)
          cssAct['background-image'] = this.act.activityBgGradient.getCss()

        this.$div.css(cssAct)
      }

      /**
       * Activities should implement this method to update the graphic content of its panel. The method
       * will be called from {@link AWT.Container#update} when needed.
       * @param {AWT.Rectangle} dirtyRegion - Specifies the area to be updated. When `null`,
       * it's the whole panel.
       */
      updateContent(dirtyRegion) {
        // To be overridden by subclasses. Here does nothing.
        return super.updateContent(dirtyRegion)
      }

      /**
       * Plays the specified event sound
       * @param {string} event - The type of event to be performed
       */
      playEvent(event) {
        this.act.eventSounds.play(event)
      }

      /**
       * Basic initialization procedure, common to all activities.
       */
      initActivity() {
        if (this.playing) {
          this.playing = false
          this.ps.reportEndActivity(this.act, this.solved)
        }
        this.solved = false
        this.ps.reportNewActivity(this.act, 0)
        this.attachEvents()
        this.enableCounters()
      }

      /**
       * Called when the activity starts playing
       */
      startActivity() {
        this.playing = true
      }

      /**
       * Called by {@link JClicPlayer} when this activity panel is fully visible, just after the
       * initialization process.
       */
      activityReady() {
        // To be overrided by subclasses
      }

      /**
       * Displays help about the activity
       */
      showHelp() {
        // To be overrided by subclasses
      }

      /**
       * Sets the real dimension of this ActivityPanel.
       * @param {AWT.Dimension} maxSize - The maximum surface available for the activity panel
       * @returns {AWT.Dimension}
       */
      setDimension(maxSize) {
        return new AWT.Dimension(
          Math.min(maxSize.width, this.act.windowSize.width),
          Math.min(maxSize.height, this.act.windowSize.height))
      }

      /**
       * Attaches the events specified in the `events` member to the `$div` member
       */
      attachEvents() {
        this.events.forEach(ev => this.attachEvent(this.$div, ev))
        // Prepare handler to check if we are in a touch device
        if (!K.TOUCH_DEVICE && $.inArray(TOUCH_TEST_EVENT, this.events) === -1)
          this.attachEvent(this.$div, TOUCH_TEST_EVENT)
      }

      /**
       * Attaches a single event to the specified object
       * @param {external:jQuery} $obj - The object to which the event will be attached
       * @param {string} evt - The event name
       */
      attachEvent($obj, evt) {
        $obj.on(evt, this, event => {
          if (event.type === TOUCH_TEST_EVENT) {
            if (!K.TOUCH_DEVICE)
              K.TOUCH_DEVICE = true
            if ($.inArray(TOUCH_TEST_EVENT, this.events) === -1) {
              // Disconnect handler
              $obj.off(TOUCH_TEST_EVENT)
              return
            }
          }
          return event.data.processEvent.call(event.data, event)
        })
      }

      /**
       * Main handler used to process mouse, touch, keyboard and edit events.
       * @param {HTMLEvent} event - The HTML event to be processed
       * @returns {boolean=} - When this event handler returns `false`, jQuery will stop its
       * propagation through the DOM tree. See: {@link http://api.jquery.com/on}
       */
      processEvent(_event) {
        return false
      }

      /**
       * Fits the panel within the `proposed` rectangle. The panel can occupy more space, but always
       * not surpassing the `bounds` rectangle.
       * @param {AWT.Rectangle} proposed - The proposed rectangle
       * @param {AWT.Rectangle} bounds - The maximum allowed bounds
       */
      fitTo(proposed, bounds) {
        const origin = new AWT.Point()
        if (this.act.absolutePositioned && this.act.absolutePosition !== null) {
          origin.x = Math.max(0, this.act.absolutePosition.x + proposed.pos.x)
          origin.y = Math.max(0, this.act.absolutePosition.y + proposed.pos.y)
          proposed.dim.width -= this.act.absolutePosition.x
          proposed.dim.height -= this.act.absolutePosition.y
        }
        const d = this.setDimension(new AWT.Dimension(
          Math.max(2 * this.act.margin + Utils.settings.MINIMUM_WIDTH, proposed.dim.width),
          Math.max(2 * this.act.margin + Utils.settings.MINIMUM_HEIGHT, proposed.dim.height)))
        if (!this.act.absolutePositioned) {
          origin.moveTo(
            Math.max(0, proposed.pos.x + (proposed.dim.width - d.width) / 2),
            Math.max(0, proposed.pos.y + (proposed.dim.height - d.height) / 2))
        }
        if (origin.x + d.width > bounds.dim.width)
          origin.x = Math.max(0, bounds.dim.width - d.width)
        if (origin.y + d.height > bounds.dim.height)
          origin.y = Math.max(0, bounds.dim.height - d.height)
        this.setBounds(new AWT.Rectangle(origin.x, origin.y, d.width, d.height))

        // Build accessible components at the end of current tree
        window.setTimeout(() => this.buildAccessibleComponents(), 0)
      }

      /**
       * 
       * Builds the accessible components needed for this ActivityPanel
       * This method is called when all main elements are placed and visible, when the activity is ready
       * to start or when resized.
       */
      buildAccessibleComponents() {
        // Clear existing elements
        if (this.accessibleCanvas && this.$canvas && this.$canvas.children().length > 0) {
          // UPDATED May 2020: clearHitRegions has been deprecated!
          // this.$canvas.get(-1).getContext('2d').clearHitRegions()
          this.$canvas.empty()
        }
        // Create accessible elements in subclasses
      }

      /**
       *  Forces the ending of the activity.
       */
      forceFinishActivity() {
        // to be overrided by subclasses
      }

      /**
       * Ordinary ending of the activity, usually called form `processEvent`
       * @param {boolean} result - `true` if the activity was successfully completed, `false` otherwise
       */
      finishActivity(result) {
        this.playing = false
        this.solved = result

        if (this.bc !== null)
          this.bc.end()

        if (result) {
          this.setAndPlayMsg('final', 'finishedOk')
        } else {
          this.setAndPlayMsg('finalError', 'finishedError')
        }
        this.ps.activityFinished(this.solved)
        this.ps.reportEndActivity(this.act, this.solved)
      }

      /**
       * Sets the message to be displayed in the skin message box and optionally plays a sound event.
       * @param {string} msgCode - Type of message (initial, final, finalError...)
       * @param {string=} eventSoundsCode - Optional name of the event sound to be played.
       */
      setAndPlayMsg(msgCode, eventSoundsCode) {
        const msg = this.act.messages[msgCode] || null
        this.ps.setMsg(msg)
        if (msg === null || msg.mediaContent === null)
          this.playEvent(eventSoundsCode)
      }

      /**
       * Ends the activity
       */
      end() {
        this.forceFinishActivity()
        if (this.playing) {
          if (this.bc !== null)
            this.bc.end()
          this.ps.reportEndActivity(this.act, this.solved)
          this.playing = false
          this.solved = false
        }
        this.clear()
      }

      /**
       * Miscellaneous cleaning operations
       */
      clear() {
        // to be overridden by subclasses
      }

      /**
       * Enables or disables the three counters (time, score and actions)
       * @param {boolean} eTime - Whether to enable or disable the time counter
       * @param {boolean} eScore - Whether to enable or disable the score counter
       * @param {boolean} eActions - Whether to enable or disable the actions counter
       */
      enableCounters(eTime, eScore, eActions) {
        if (typeof eTime === 'undefined')
          eTime = this.act.bTimeCounter
        if (typeof eScore === 'undefined')
          eScore = this.act.bScoreCounter
        if (typeof eActions === 'undefined')
          eActions = this.act.bActionsCounter

        this.ps.setCounterEnabled('time', eTime)
        if (this.act.countDownTime)
          this.ps.setCountDown('time', this.act.maxTime)
        this.ps.setCounterEnabled('score', eScore)
        this.ps.setCounterEnabled('actions', eActions)
        if (this.act.countDownActions)
          this.ps.setCountDown('actions', this.act.maxActions)
      }

      /**
       * Shuffles the contents of the activity
       * @param {ActiveBoxBag[]} bg - The sets of boxes to be shuffled
       * @param {boolean} visible - The shuffle process must be animated on the screen (not yet implemented!)
       * @param {boolean} fitInArea - Shuffled pieces cannot go out of the current area
       */
      shuffle(bg, visible, fitInArea) {
        const steps = this.act.shuffles
        let i = steps
        while (i > 0) {
          const k = i > steps ? steps : i
          bg.forEach(abb => { if (abb) abb.scrambleCells(k, fitInArea) })
          i -= steps
        }
      }
    }

    Object.assign(ActivityPanel.prototype, {
      /**
       * The Activity this panel is related to
       * @name ActivityPanel#act
       * @type {Activity} */
      act: null,
      /**
       * The jQuery div element used by this panel
       * @name ActivityPanel#$div
       * @type {external:jQuery} */
      $div: null,
      /**
       * The jQuery main canvas element used by this panel
       * @name ActivityPanel#$canvas
       * @type {external:jQuery} */
      $canvas: null,
      /**
       * Always true, since canvas hit regions have been deprecated!
       * See: https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Hit_regions_and_accessibility
       * @name ActivityPanel#accessibleCanvas
       * @type {boolean}
       */
      accessibleCanvas: true,
      /**
       * The realized current {@link Skin}
       * @name ActivityPanel#skin
       * @type {Skin} */
      skin: null,
      /**
       * Background element (currently a `span`) used to place animated GIFs when needed
       * @name ActivityPanel#$animatedBg
       * @type {external:jQuery} */
      $animatedBg: null,
      /**
       * Additional background element for animated GIFs, used in associations
       * @name ActivityPanel#$animatedBgB
       * @type {external:jQuery} */
      $animatedBgB: null,
      /**
       * `true` when the activity is solved, `false` otherwise
       * @name ActivityPanel#solved
       * @type {boolean} */
      solved: false,
      /**
       * The realized image used as a background
       * @name ActivityPanel#bgImage
       * @type {external:HTMLImageElement} */
      bgImage: null,
      /**
       * `true` while the activity is playing
       * @name ActivityPanel#playing
       * @type {boolean} */
      playing: false,
      /**
       * `true` if the activity is running for first time (not due to a click on the `replay` button)
       * @name ActivityPanel#firstRun
       * @type {boolean} */
      firstRun: true,
      /**
       * Currently selected item. Used in some types of activities.
       * @name ActivityPanel#currentItem
       * @type {number} */
      currentItem: 0,
      /**
       * The object used to connect cells and other elements in some types of activity
       * @name ActivityPanel#bc
       * @type {BoxConnector} */
      bc: null,
      /**
       * The PlayStation used to realize media objects and communicate with the player services
       * (usually a {@link JClicPlayer}
       * @name ActivityPanel#ps
       * @type {PlayStation} */
      ps: null,
      /**
       * The minimum size of this kind of ActivityPanel
       * @name ActivityPanel#minimumSize
       * @type {AWT.Dimension} */
      minimumSize: null,
      /**
       * The preferred size of this kind of ActivityPanel
       * @name ActivityPanel#preferredSize
       * @type {AWT.Dimension} */
      preferredSize: null,
      /**
       * List of events intercepted by this ActivityPanel. Current events are: 'keydown', 'keyup',
       * 'keypress', 'mousedown', 'mouseup', 'click', 'dblclick', 'mousemove', 'mouseenter',
       * 'mouseleave', 'mouseover', 'mouseout', 'touchstart', 'touchend', 'touchmove' and 'touchcancel'.
       * @name ActivityPanel#events
       * @type {string[]} */
      events: ['click'],
      backgroundColor: null,
      backgroundTransparent: false,
      border: null,
    })

    /**
     * The panel class associated to each type of activity
     * @type {ActivityPanel} */
    Activity.Panel = ActivityPanel

    return Activity
  }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/Deps.js":
/*!*********************!*\
  !*** ./src/Deps.js ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : Deps.js
 *  Created : 19/05/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

//
// The purpose of this file is to ensure that certain classes derived from the main objects of
// JClic ([Activity](Activity.html), [Shaper](Shaper.html), [Skin](Skin.html) and
// [AutoContentProvider](AutoContentProvider.html)) are loaded at the beginning.
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! ./skins/DefaultSkin */ "./src/skins/DefaultSkin.js"),
  __webpack_require__(/*! ./skins/OrangeSkin */ "./src/skins/OrangeSkin.js"),
  __webpack_require__(/*! ./skins/GreenSkin */ "./src/skins/GreenSkin.js"),
  __webpack_require__(/*! ./skins/BlueSkin */ "./src/skins/BlueSkin.js"),
  __webpack_require__(/*! ./skins/SimpleSkin */ "./src/skins/SimpleSkin.js"),
  __webpack_require__(/*! ./skins/MiniSkin */ "./src/skins/MiniSkin.js"),
  __webpack_require__(/*! ./skins/EmptySkin */ "./src/skins/EmptySkin.js"),
  __webpack_require__(/*! ./skins/CustomSkin */ "./src/skins/CustomSkin.js"),
  __webpack_require__(/*! ./shapers/Rectangular */ "./src/shapers/Rectangular.js"),
  __webpack_require__(/*! ./shapers/Holes */ "./src/shapers/Holes.js"),
  __webpack_require__(/*! ./shapers/JigSaw */ "./src/shapers/JigSaw.js"),
  __webpack_require__(/*! ./shapers/TriangularJigSaw */ "./src/shapers/TriangularJigSaw.js"),
  __webpack_require__(/*! ./shapers/ClassicJigSaw */ "./src/shapers/ClassicJigSaw.js"),
  __webpack_require__(/*! ./automation/arith/Arith */ "./src/automation/arith/Arith.js"),
  __webpack_require__(/*! ./activities/text/TextActivityBase */ "./src/activities/text/TextActivityBase.js"),
  __webpack_require__(/*! ./activities/text/FillInBlanks */ "./src/activities/text/FillInBlanks.js"),
  __webpack_require__(/*! ./activities/text/OrderText */ "./src/activities/text/OrderText.js"),
  __webpack_require__(/*! ./activities/text/Complete */ "./src/activities/text/Complete.js"),
  __webpack_require__(/*! ./activities/text/IdentifyText */ "./src/activities/text/IdentifyText.js"),
  __webpack_require__(/*! ./activities/text/WrittenAnswer */ "./src/activities/text/WrittenAnswer.js"),
  __webpack_require__(/*! ./activities/panels/InformationScreen */ "./src/activities/panels/InformationScreen.js"),
  __webpack_require__(/*! ./activities/panels/Identify */ "./src/activities/panels/Identify.js"),
  __webpack_require__(/*! ./activities/panels/Explore */ "./src/activities/panels/Explore.js"),
  __webpack_require__(/*! ./activities/panels/Menu */ "./src/activities/panels/Menu.js"),
  __webpack_require__(/*! ./activities/puzzles/DoublePuzzle */ "./src/activities/puzzles/DoublePuzzle.js"),
  __webpack_require__(/*! ./activities/puzzles/ExchangePuzzle */ "./src/activities/puzzles/ExchangePuzzle.js"),
  __webpack_require__(/*! ./activities/puzzles/HolePuzzle */ "./src/activities/puzzles/HolePuzzle.js"),
  __webpack_require__(/*! ./activities/memory/MemoryGame */ "./src/activities/memory/MemoryGame.js"),
  __webpack_require__(/*! ./activities/associations/SimpleAssociation */ "./src/activities/associations/SimpleAssociation.js"),
  __webpack_require__(/*! ./activities/associations/ComplexAssociation */ "./src/activities/associations/ComplexAssociation.js"),
  __webpack_require__(/*! ./activities/textGrid/WordSearch */ "./src/activities/textGrid/WordSearch.js"),
  __webpack_require__(/*! ./activities/textGrid/CrossWord */ "./src/activities/textGrid/CrossWord.js"),
  __webpack_require__(/*! ./report/TCPReporter */ "./src/report/TCPReporter.js"),
  __webpack_require__(/*! ./report/SessionStorageReporter */ "./src/report/SessionStorageReporter.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (() => 'Deep classes loaded!').apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))



/***/ }),

/***/ "./src/GlobalData.js":
/*!***************************!*\
  !*** ./src/GlobalData.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


// WARNING: Auto-generated file, based on "language.po" files stored in "/locales". Do not edit!
// Launch "npm run build-locales" to update this file

/* global define */
!(module.exports = {"version":"1.1.21 (2021-02-16)","languages":["en","ar","ast","bs","ca","ca_ES@valencia","cs","da","de","el","es","eu","fr","gl","he","it","ja","nl","pl","pt","pt_BR","ru","tr","vec","zh_TW"],"messages":{"ar":{"Version":"الإصدار","time":"الوقت","actions":"المحاولات","score":"النتيجة","Next activity":"النشاط التالي","Previous activity":"النشاط السابق","Restart activity":"استئنف النشاط","Information":"المعلومة","Current results":"تقارير المستخدم","User:":"المستخدم:","Projects:":"المشاريع:","Project":"المشروع:","sequence":"التسلسل","activity":"النشاط","OK":"موافق","Total:":"المجموع:"},"ast":{"Version":"Versión","time":"tiempu","actions":"intentos","score":"marcador","Next activity":"Xera siguiente","Previous activity":"Xera anterior","Restart activity":"Reaniciar xera","Information":"Información","Results are not currently being saved":"L'informe nun ta rexistráu en nenguna base de datos","Current results":"Informes d'usuariu","Session started:":"Entamu de sesión:","Reports system:":"Sistema d'informes:","User:":"Usuariu:","Projects:":"Proyeutos:","Sequences:":"Secuencies:","Activities done:":"Xeres feches:","Activities solved:":"Xeres correctes:","Global score:":"Puntuación global:","Total time in activities:":"Tiempu total en xeres:","Actions done:":"Aiciones feches:","No activities done!":"¡Nenguna información sobre xeres!","Project":"Proyeutu:","sequence":"Secuencia","activity":"Xera","OK":"OK","YES":"SI","NO":"NON","Total:":"Total:"},"bs":{"Version":"Verzija","time":"vrijeme","actions":"pokušaji","score":"rezultat","Next activity":"Sljedeća aktivnost","Previous activity":"Prethodna aktivnost","Restart activity":"Ponovno pokreni aktivnost","Information":"Informacije","Current results":"Izvješća korisnika","Session started:":"Sesija započeta:","User:":"Korisnik:","Projects:":"Projekti:","Activities done:":"Urađene aktivnosti:","Activities solved:":"Aktivnosti ok:","Global score:":"Ukupan rezultat:","Total time in activities:":"Ukupno vrijeme aktivnosti:","Actions done:":"Urađene aktivnosti:","Project":"Projekt:","sequence":"Sekvenca","activity":"Aktivnost","OK":"Uredu","YES":"DA","NO":"NE","Total:":"Ukupno:"},"ca":{"Version":"Versió","time":"temps","actions":"accions","score":"encerts","Next activity":"Activitat següent","Previous activity":"Activitat anterior","Restart activity":"Reinicia l'activitat","Information":"Informació","Results are not currently being saved":"Els resultats no s'estan desant","Current results":"Resultats actuals","Session started:":"Inici de sessió:","Reports system:":"Sistema d'informes:","User:":"Usuari/ària:","Projects:":"Projectes:","Sequences:":"Seqüències:","Activities done:":"Activitats fetes:","Activities solved:":"Activitats resoltes:","Global score:":"Puntuació global:","(out of all project activities)":"(sobre totes les activitats del projecte)","Total time in activities:":"Temps total en les activitats:","Actions done:":"Accions fetes:","No activities done!":"No heu fet cap activitat!","Project":"Projecte","sequence":"seqüència","activity":"activitat","OK":"OK","YES":"SÍ","NO":"NO","Total:":"Totals:","Select group:":"Seleccioneu el grup:","Select user:":"Seleccioneu l'usuari:","Cancel":"Cancel·la","Close":"Tanca","Copy data to clipboard":"Copia les dades al porta-retalls","The data has been copied in HTML format. Please paste them into a spreadsheet or in a rich text editor":"Les dades s'han copiat en format HTML. Enganxeu-les a un full de càlcul o a un editor de text enriquit.","The data has been copied to clipboard":"Les dades s'han copiat al porta-retalls","not connected":"no connectat","Please wait until the results of your activities are sent to the reports system":"Si us plau, espereu a que els resultats de les vostres activitats s'enviïn al servidor d'informes","Password:":"Contrasenya:","Incorrect password":"Contrasenya incorrecta","Invalid user":"Usuari/ària incorrecte","Partial score:":"Puntuació parcial:","(out of played activities)":"(sobre les activitats fetes)","Activities played at least once:":"Activitats fetes almenys una vegada:","Reports":"Informes","Toggle full screen":"Commuta pantalla completa","JClic logo":"Logotip del JClic","message":"missatge","Activity panel":"Tauler d'activitats","cell":"cel·la","image":"imatge","source":"origen","target":"destí","image fragment":"fragment d'imatge"},"ca_ES@valencia":{"Version":"Versió","time":"temps","actions":"accions","score":"encerts","Next activity":"Activitat següent","Previous activity":"Activitat anterior","Restart activity":"Reinicia l'activitat","Information":"Informació","Results are not currently being saved":"Els resultats no s'estan alçant","Current results":"Resultats actuals","Session started:":"Inici de sessió:","Reports system:":"Sistema d'informes:","User:":"Usuari/ària:","Projects:":"Projectes:","Sequences:":"Seqüències:","Activities done:":"Activitats fetes:","Activities solved:":"Activitats resoltes:","Global score:":"Puntuació global:","Total time in activities:":"Temps total en les activitats:","Actions done:":"Accions fetes:","No activities done!":"No heu fet cap activitat!","Project":"Projecte","sequence":"seqüència","activity":"activitat","OK":"OK","YES":"SÍ","NO":"NO","Total:":"Totals:"},"cs":{"Version":"Verze","time":"čas","actions":"pokusů","score":"skóre","Next activity":"Další aktivita","Previous activity":"Předchozí aktivita","Restart activity":"Restartovat aktivitu","Information":"Informace","Results are not currently being saved":"Zpráva není zaregistrována v žádné DB","Current results":"Uživatelská sestava","Session started:":"Sezení spuštěno:","Reports system:":"Systém zprávy:","User:":"Uživatel:","Projects:":"Projekty:","Sequences:":"Sekvence:","Activities done:":"Dokončené aktivity:","Activities solved:":"Aktivity ok:","Global score:":"Celkové skóre:","Total time in activities:":"Celkový čas aktivit:","Actions done:":"Provedené akce:","No activities done!":"Nebyly nahlášeny žádné aktivity!","Project":"Projekt","sequence":"Sekvence","activity":"Aktivita","OK":"Ok","YES":"ANO","NO":"NE","Total:":"Celkem:"},"da":{"Version":"Version","time":"tid","actions":"forsøg","score":"score","Next activity":"Næste aktivitet","Previous activity":"Forrige aktivitet","Restart activity":"Genstart aktivitet","Information":"Information","Current results":"Bruger rapport","User:":"Bruger:","Projects:":"Projekter:","Sequences:":"Sekvenser:","Activities done:":"Aktiviteter udført:","Activities solved:":"Aktiviteter OK:","Global score:":"Global score:","No activities done!":"Ingen aktiviteter rapporteret!","Project":"Projekt","sequence":"Sequence","activity":"Aktivitet","OK":"Ok","YES":"JA","NO":"IKKE","Total:":"Total:"},"de":{"Version":"Version","time":"Zeit","actions":"Versuche","score":"Ergebnis","Next activity":"Nächste Übung","Previous activity":"Vorherige Übung","Restart activity":"Übung neu starten","Information":"Information","Results are not currently being saved":"Bericht in keiner Datenbank eingetragen","Current results":"Benutzerberichte","Session started:":"Sitzung gestartet:","Reports system:":"Report system:","User:":"User:","Projects:":"Projekte:","Sequences:":"Sequenzen:","Activities done:":"Beendete Übungen:","Activities solved:":"Korrekte Übungen:","Global score:":"Gesamtpunktezahl:","Total time in activities:":"Übungs-Gesamtzeit:","Actions done:":"Durchgeführte Aktionen:","No activities done!":"Keine Übungsberichte vorhanden!","Project":"Projekt","sequence":"Sequenz","activity":"Übung","OK":"OK","YES":"JA","NO":"NEIN","Total:":"Gesamt:"},"el":{"Version":"Έκδοση","time":"χρόνος","actions":"προσπάθειες","score":"βαθμολογία","Next activity":"Επόμενη δραστηριότητα","Previous activity":"Προηγούμενη δραστηριότητα","Restart activity":"Επανεκκίνηση δραστηριότητας","Information":"Πληροφορίες","Results are not currently being saved":"Η αναφορά δεν εγγράφηκε στις βάσεις δεδομένων","Current results":"Αναφορές χρήστη","Session started:":"Έναρξη συνεδρίας:","Reports system:":"Σύστημα αναφορών:","User:":"Χρήστης:","Projects:":"Έργα:","Sequences:":"Αλληλουχίες:","Activities done:":"Ολοκληρωμένες δραστηριότητες:","Activities solved:":"Δραστηριότητες, εντάξει:","Global score:":"Συνολική βαθμολογία:","Total time in activities:":"Συνολικός χρόνος δραστηριοτήτων:","Actions done:":"Οι ενέργειες ολοκληρώθηκαν:","No activities done!":"Για καμμία δραστηριότητα δεν έχει υποβληθεί αναφορά!","Project":"Έργο","sequence":"Αλληλουχία","activity":"Δραστηριότητα","OK":"Εντάξει","YES":"Ναί","NO":"όχι","Total:":"Σύνολο:"},"es":{"Version":"Versión","time":"tiempo","actions":"acciones","score":"aciertos","Next activity":"Actividad siguiente","Previous activity":"Actividad anterior","Restart activity":"Reiniciar actividad","Information":"Información","Results are not currently being saved":"Los resultados no se están guardando","Current results":"Resultados actuales","Session started:":"Inicio de sesión:","Reports system:":"Sistema de informes:","User:":"Usuario/aria:","Projects:":"Proyectos:","Sequences:":"Secuencias:","Activities done:":"Actividades realizadas:","Activities solved:":"Actividades resueltas:","Global score:":"Puntuación global:","(out of all project activities)":"(sobre todas las actividades del proyecto)","Total time in activities:":"Tiempo total en las actividades:","Actions done:":"Acciones realizadas:","No activities done!":"¡No se ha realizado ninguna actividad!","Project":"Proyecto","sequence":"secuencia","activity":"actividad","OK":"OK","YES":"SI","NO":"NO","Total:":"Totales:","Select group:":"Seleccionar grupo:","Select user:":"Seleccionar usuario:","Cancel":"Cancelar","Close":"Cerrar","Copy data to clipboard":"Copiar datos al portapapeles","The data has been copied in HTML format. Please paste them into a spreadsheet or in a rich text editor":"Los datos se han copiado en formato HTML. Puedes pegarlos en una hoja de cálculo o en un editor de texto rico.","The data has been copied to clipboard":"Los datos se han copiado al portapapeles","not connected":"no conectado","Please wait until the results of your activities are sent to the reports system":"Por favor, espera mientras los resultados de las actividades se envian al servidor de informes","Password:":"Contraseña:","Incorrect password":"Contraseña incorrecta","Invalid user":"Usuario incorrecto","Partial score:":"Puntuación parcial:","(out of played activities)":"(sobre las actividades realizadas)","Activities played at least once:":"Actividades realizadas al menos una vez:","Reports":"Informes","Toggle full screen":"Conmutar pantalla completa","JClic logo":"Logotipo de JClic","message":"mensaje","Activity panel":"Panel de actividad","cell":"celda","image":"imagen","source":"origen","target":"destino","image fragment":"fragmento de imagen"},"eu":{"Version":"Bertsioa","time":"denbora","actions":"saiakerak","score":"puntuazioa","Next activity":"Hurrengo jarduera","Previous activity":"Aurreko jarduera","Restart activity":"Jarduera berriro hasi","Information":"Informazioa","Results are not currently being saved":"Txostena ez dago ezein datu-basetan","Current results":"Erabiltzailearen txostenak","Session started:":"Saio-hasiera:","Reports system:":"Txosten-sistema:","User:":"Erabiltzailea:","Projects:":"Proiektuak:","Sequences:":"Sekuentziak:","Activities done:":"Burututako ekinzak:","Activities solved:":"Jarduera zuzenak:","Global score:":"Jarduera zuzenak:","Total time in activities:":"Jardueretan emandako denbora guztira:","Actions done:":"Burututako ekintzak:","No activities done!":"Ez da jardueren txostenik!","Project":"Proiektua","sequence":"Sekuentzia","activity":"Jarduera","OK":"Ados","YES":"BAI","NO":"EZ","Total:":"Guztira:"},"fr":{"Version":"Version","time":"temps","actions":"essais","score":"résultat","Next activity":"Activité suivante","Previous activity":"Activité précédente","Restart activity":"Recommencer l'activité","Information":"Information","Results are not currently being saved":"Le rapport n'est enregistré dans aucune base de données","Current results":"Rapports utilisateur","Session started:":"Session démarrée:","Reports system:":"Report système:","User:":"Utilisateur:","Projects:":"Projets:","Sequences:":"Séquences:","Activities done:":"Activités faites:","Activities solved:":"Activités ok:","Global score:":"Score global:","(out of all project activities)":"(Hors de toutes les activités du projet)","Total time in activities:":"Temps total sur les activités:","Actions done:":"Actions faites:","No activities done!":"Pas d'activités rapportées!","Project":"Projet","sequence":"séquence","activity":"activité","OK":"Ok","YES":"OUI","NO":"NON","Total:":"Total:","Select group:":"Sélectionner un groupe:","Select user:":"Sélectionner l'utilisateur:","Cancel":"Annuler","Close":"Fermer","Copy data to clipboard":"Copier les données dans le presse-papier","The data has been copied in HTML format. Please paste them into a spreadsheet or in a rich text editor":"Les données ont été copiées au format HTML. Veuillez les coller dans une feuille de calcul ou dans un éditeur de texte","The data has been copied to clipboard":"Les données sont copier dans le presse-papier","not connected":"Non connecté ","Please wait until the results of your activities are sent to the reports system":"Veuillez patienter durant l'envoi de votre activité au rapport système","Password:":"Mot de passe: ","Incorrect password":"Mot de passe incorrect","Invalid user":"Utilisateur invalide","Partial score:":"Score partiel:","(out of played activities)":"(Hors activités jouées)","Activities played at least once:":"Les activités joué au moins une fois:","Reports":"Rapport","Toggle full screen":"Basculer en plein écran","JClic logo":"JClic logo","message":"message","Activity panel":"Groupe d'activités","cell":"cellule","image":"image","source":"source","target":"cible","image fragment":"fragment d'image"},"gl":{"Version":"Versión","time":"tempo","actions":"intentos","score":"acertos","Next activity":"Seguinte actividade","Previous activity":"Anterior actividade","Restart activity":"Reiniciar a actividade","Information":"Información","Results are not currently being saved":"O informe non está rexistrado en ningunha base de datos","Current results":"Informes de usuario","Session started:":"Inicio de sesión:","Reports system:":"Sistema de informes:","User:":"Usuario:","Projects:":"Proxectos:","Sequences:":"Secuencias:","Activities done:":"Actividades realizadas:","Activities solved:":"Actividades correctas:","Global score:":"Puntuación global:","Total time in activities:":"Tempo total nas actividades:","Actions done:":"Accións efectuadas:","No activities done!":"Non hai informada ningunha actividade!","Project":"Proxecto","sequence":"secuencia","activity":"actividade","OK":"Correcta","YES":"SI","NO":"NON","Total:":"Total:"},"he":{"Version":"גירסה","time":"זמן","actions":"נסיונות","score":"ניקוד","Next activity":"הפעילות הבאה","Previous activity":"הפעילות הקודמת","Restart activity":"התחל פעילות מחדש","Information":"מידע","Results are not currently being saved":"הדיווח אינו רשום במסד נתונים כלשהו","Current results":"דוחות משתמש","Session started:":"הפעלה החלה:","Reports system:":"מערכת דוחות:","User:":"משתמש:","Projects:":"פרוייקטים:","Sequences:":"רצפים:","Activities done:":"פעילויות שהושלמו:","Activities solved:":"פעילויות מאושרות:","Global score:":"ניקוד כללי:","Total time in activities:":"משך הפעילויות המצטבר:","Actions done:":"פעולות שבוצעו:","No activities done!":"לא דווחו פעילויות!","Project":"פרוייקט","sequence":"רצף","activity":"פעילות","OK":"אישור","YES":"כן","NO":"לא","Total:":"סך הכל:"},"it":{"Version":"Versione","time":"tempo","actions":"tentativi","score":"punteggio","Next activity":"Attività successiva","Previous activity":"Attività precedente","Restart activity":"Riavvia l'attività","Information":"Informazioni","Results are not currently being saved":"Rapporto non registrato in alcun database","Current results":"Rapporti utente","Session started:":"Sessione avviata:","Reports system:":"Sistema dei rapporti:","User:":"Utente:","Projects:":"Progetti:","Sequences:":"Sequenze:","Activities done:":"Attività eseguite:","Activities solved:":"Attività ok:","Global score:":"Punteggio globale:","Total time in activities:":"Tempo totale nelle attività:","Actions done:":"Azioni compiute:","No activities done!":"Nessuna attività a rapporto!","Project":"Progetto","sequence":"sequenza","activity":"attività","OK":"Ok","YES":"SI","NO":"NO","Total:":"Totale:"},"ja":{"Version":"バージョン","time":"時間","actions":"アクション","score":"スコア","Next activity":"次のアクティビティ","Previous activity":"前のアクティビティ","Restart activity":"アクティビティを再起動","Information":"情報","Results are not currently being saved":"結果は、現在保存されていません","Current results":"現在の結果","Session started:":"セッションが開始しました:","Reports system:":"レポート システム:","User:":"ユーザー:","Projects:":"プロジェクト:","Sequences:":"シーケンス:","Activities done:":"完了したアクティビティ:","Activities solved:":"解決したアクティビティ:","Global score:":"グローバル スコア:","(out of all project activities)":"(すべてのプロジェクト アクティビティの結果)","Total time in activities:":"アクティビティ時間の合計:","Actions done:":"完了したアクション:","No activities done!":"アクティビティは行われていません!","Project":"プロジェクト","sequence":"シーケンス","activity":"アクティビティ","OK":"OK","YES":"はい","NO":"いいえ","Total:":"合計:","Select group:":"グループを選択:","Select user:":"ユーザーを選択:","Cancel":"キャンセル","Close":"閉じる","Copy data to clipboard":"データをクリップボードにコピー","The data has been copied in HTML format. Please paste them into a spreadsheet or in a rich text editor":"データは HTML 形式でコピーされます。リッチ テキスト エディターやスプレッドシートに貼り付けてください","The data has been copied to clipboard":"クリップボードにデータがコピーされました","not connected":"接続されていません","Please wait until the results of your activities are sent to the reports system":"アクティビティの結果がレポート システムに送信されるまでお待ちください","Password:":"パスワード:","Incorrect password":"パスワードが正しくありません","Invalid user":"無効なユーザー","Partial score:":"部分スコア:","(out of played activities)":"(プレイしたアクティビティの結果)","Activities played at least once:":"少なくとも一度プレイしたアクティビティ:","Reports":"レポート","Toggle full screen":"全画面の切り替え","JClic logo":"JClic ロゴ","message":"メッセージ","Activity panel":"アクティビティ パネル","cell":"セル","image":"画像","source":"ソース","target":"ターゲット","image fragment":"画像フラグメント"},"nl":{"Version":"Versie","time":"tijd","actions":"pogingen","score":"punten","Next activity":"Volgende activiteit","Previous activity":"Vorige activiteit","Restart activity":"Herstart activiteit","Information":"Informatie","Results are not currently being saved":"Rapport niet geregistreerd in een DB","Current results":"Gebruikers rapport","Session started:":"Reeks gestart:","Reports system:":"Rapporteer systeem:","User:":"Gebruiker:","Projects:":"Projecten:","Sequences:":"Reeksen:","Activities done:":"Activiteiten klaar:","Activities solved:":"Activiteiten ok:","Global score:":"Puntentotaal:","Total time in activities:":"Totale tijd activiteiten:","Actions done:":"Einde activiteiten:","No activities done!":"Geen activiteiten gerapporteerd!","Project":"Project","sequence":"Volgorde","activity":"Activiteit","OK":"Ok","YES":"JA","NO":"NEE","Total:":"Totaal:"},"pl":{"Version":"Wersja","time":"czas","actions":"działania","score":"wynik","Next activity":"Następne działanie","Previous activity":"Poprzednia aktywność","Restart activity":"Restartuj aktywność","Information":"Informacje","Results are not currently being saved":"Wyniki nie są obecnie zapisywane","Current results":"Aktualne wyniki","Session started:":"Sesja rozpoczęła się:","Reports system:":"System raportów:","User:":"Użytkownik:","Projects:":"Projekty:","Sequences:":"Sekwencje:","Activities done:":"Działania wykonane:","Activities solved:":"Działania rozwiązane:","Global score:":"Globalny wynik:","(out of all project activities)":"(poza wszystkimi działaniami projektu)","Total time in activities:":"Całkowity czas aktywności:","Actions done:":"Wykonane czynności:","No activities done!":"Nie wykonano żadnych czynności!","Project":"Projekt","sequence":"kolejność","activity":"aktywność","OK":"OK","YES":"Tak","NO":"Nie","Total:":"Całkowity:","Select group:":"Wybierz grupę:","Select user:":"Wybierz użytkownika:","Cancel":"Anuluj","Close":"Zamknij","Copy data to clipboard":"Skopiuj dane do schowka","The data has been copied in HTML format. Please paste them into a spreadsheet or in a rich text editor":"Dane zostały skopiowane w formacie HTML. Wklej je do arkusza kalkulacyjnego lub edytora tekstu","The data has been copied to clipboard":"Dane zostały skopiowane do schowka","not connected":"nie połączony","Please wait until the results of your activities are sent to the reports system":"Poczekaj, aż wyniki Twoich działań zostaną przesłane do systemu raportów","Password:":"Hasło:","Incorrect password":"Niepoprawne hasło","Invalid user":"Nieprawidłowy użytkownik","Partial score:":"Wynik częściowy:","(out of played activities)":"(z granych działań)","Activities played at least once:":"Działania grane co najmniej raz:","Reports":"Raporty","Toggle full screen":"Przełącz tryb pełnoekranowy","JClic logo":"Logo JClic","message":"komunikat","Activity panel":"Panel aktywności","cell":"komórka","image":"obraz","source":"źródło","target":"miejsce docelowe","image fragment":"fragment obrazu"},"pt":{"Version":"Versão","time":"tempo","actions":"tentativas","score":"acertos","Next activity":"Actividade seguinte","Previous activity":"Actividade anterior","Restart activity":"Reiniciar a actividade","Information":"Informação","Results are not currently being saved":"O relatório não está registado em nenhuma base de dados","Current results":"Relatórios do utilizador","Session started:":"Início da sessão:","Reports system:":"Sistema de relatórios:","User:":"Utilizador:","Projects:":"Projectos:","Sequences:":"Sequências:","Activities done:":"Actividades realizadas:","Activities solved:":"Actividades correctas:","Global score:":"Pontuação global:","Total time in activities:":"Tempo total das actividades:","Actions done:":"Acções efectuadas:","No activities done!":"Nenhuma actividade registada!","Project":"Projecto","sequence":"sequência","activity":"Actividade","OK":"Correcta","YES":"sim","NO":"não","Total:":"Total:"},"pt_BR":{"Version":"Versão","time":"tempo","actions":"tentativas","score":"acertos","Next activity":"atividade seguinte","Previous activity":"atividade anterior","Restart activity":"Reiniciar a atividade","Information":"Informação","Results are not currently being saved":"O relatório não está registrando em nenhuma base de dados","Current results":"relatórios de usuário","Session started:":"Início da sessão:","Reports system:":"Sistema de relatórios:","User:":"Usuário:","Projects:":"Projetos:","Sequences:":"Sequências:","Activities done:":"Atividades realizadas:","Activities solved:":"Atividades corretas:","Global score:":"Pontuação geral:","Total time in activities:":"Tempo total das atividades:","Actions done:":"Ações efetuadas:","No activities done!":"Nenhuma atividade registrada!","Project":"Projeto","sequence":"sequência","activity":"atividade","OK":"Correta","YES":"sim","NO":"não","Total:":"Total:"},"ru":{"Version":"Версия","time":"время","actions":"попытки","score":"счёт","Next activity":"Следующее действие","Previous activity":"Предыдущее действие","Restart activity":"Перезапуск действия","Information":"Информация","Results are not currently being saved":"Отчёт не зарегистрирован в БД","Current results":"Отчёты пользователя","Session started:":"Сессия начата:","Reports system:":"Система отчётов:","User:":"Пользователь:","Projects:":"Проекты:","Sequences:":"Последовательности:","Activities done:":"Совершенные действия:","Activities solved:":"Действия в порядке:","Global score:":"Общий счёт:","Total time in activities:":"Общее время активности:","Actions done:":"Завершено действий:","No activities done!":"Нет сообщенных действий!","Project":"Проект","sequence":"Последовательность","activity":"Активность","OK":"ОК","YES":"да","NO":"нет","Total:":"Итого:"},"tr":{"Version":"Sürüm","time":"zaman","actions":"Denemeler","score":"sonuç","Next activity":"Bir sonraki etkinlik","Previous activity":"Bir önceki etkinlik","Restart activity":"Etkinliği tekrar başlat","Information":"Bilgi","Results are not currently being saved":"Rapor herhangi bir veritabanında kaydedilmedi","Current results":"Kullanıcı raporları","Session started:":"Oturum başlatıldı","Reports system:":"Sistem raporu:","User:":"Kullanıcı:","Projects:":"Projeler:","Sequences:":"Etkinlik dizisi","Activities done:":"Etkinlikler başlatılıyor:","Activities solved:":"Etkinlikler tamam:","Global score:":"Genel sonuç:","Total time in activities:":"Etkinlikde geçirilen toplam zaman:","Actions done:":"Eylem gerçekleştiriliyor:","No activities done!":"Etkinlik raporu yok!","Project":"Proje","sequence":"Etkinlik dizisi","activity":"Etkinlik","OK":"Tamam","YES":"Evet","NO":"hiçbir","Total:":"Toplam:"},"vec":{"Version":"Version","time":"tenpo","actions":"tentadivi","score":"pontexio","Next activity":"Pròsima atività","Previous activity":"Atività presedente","Restart activity":"Invìa atività da novo","Information":"Informasion","Results are not currently being saved":"Report no registrà inte nisun database","Current results":"Reports utenti","Session started:":"Sesion inviada:","Reports system:":"Sistèma de report","User:":"Utente:","Projects:":"Proxèti:","Sequences:":"Secuense:","Activities done:":"Atività fate:","Activities solved:":"Atività ok:","Global score:":"Pontexio global","Total time in activities:":"Tenpo total so ƚe atività","Actions done:":"Asion exeguìe","No activities done!":"No xé stà reportà atività!","Project":"Proxèto:","sequence":"secuensa","activity":"Atività","OK":"Ok","YES":"SI","NO":"NO","Total:":"Total:"},"zh_TW":{"Version":"版本","time":"時間","actions":"嘗試次數","score":"分數","Next activity":"下一個活動","Previous activity":"上一個活動","Restart activity":"重設活動","Information":"相關資訊","Results are not currently being saved":"回報在DB中無註冊","Current results":"使用者報告","Session started:":"工作開始：","Reports system:":"報告系統:","User:":"使用者:","Projects:":"專案：","Sequences:":"順序：","Activities done:":"活動結束:","Activities solved:":"活動完成:","Global score:":"總成績:","Total time in activities:":"活動總時間:","Actions done:":"活動完成：","No activities done!":"沒有活動報告","Project":"專案：","sequence":"順序","activity":"活動","OK":"確定","YES":"是","NO":"否","Total:":"總計："}}})

/***/ }),

/***/ "./src/JClic.js":
/*!**********************!*\
  !*** ./src/JClic.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 *  File    : JClic.js
 *  Created : 01/04/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

// Declaration of JSDoc external objects:

/**
 * The HTMLElement interface represents any HTML element. Some elements directly implement this
 * interface, others implement it via an interface that inherits it.
 * @external HTMLElement
 * @see {@link https://developer.mozilla.org/ca/docs/Web/API/HTMLElement}
 */

/**
 * A jQuery object
 * @external jQuery
 * @see {@link http://api.jquery.com/jQuery/}
 */

/**
 * The jQuery XMLHttpRequest (jqXHR) object returned by `$.ajax()` as of jQuery 1.5 is a superset
 * of the browser's native [XMLHttpRequest](https://developer.mozilla.org/docs/XMLHttpRequest) object.
 * As of jQuery 1.5, jqXHR objects implement the Promise interface, giving them
 * all the properties, methods, and behavior of a Promise.
 * @external jqXHR
 * @see {@link https://api.jquery.com/jQuery.ajax/#jqXHR}
 */

/**
 * The CanvasRenderingContext2D interface provides the 2D rendering context for the drawing surface
 * of a &lt;canvas&gt; element.
 * @external CanvasRenderingContext2D
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D}
 */

/**
 * The HTMLImageElement interface provides special properties and methods (beyond the regular
 * {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement HTMLElement} interface it
 * also has available to it by inheritance) for manipulating the layout and presentation of
 * &lt;img&gt; elements.
 * @external HTMLImageElement
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement}
 */

/**
 * The HTMLAudioElement interface provides access to the properties of &lt;audio&gt; elements, as
 * well as methods to manipulate them. It derives from the
 * {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement HTMLMediaElement} interface.
 * @external HTMLAudioElement
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement}
 */

/**
 * The AudioContext interface represents an audio-processing graph built from audio modules linked together.
 * @external AudioContext
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/AudioContext}
 */

/**
 * The Intl.Collator object is a constructor for collators, objects that enable language sensitive
 * string comparison.
 * @external Collator
 * @see {@link https://developer.mozilla.org/ca/docs/Web/JavaScript/Reference/Global_Objects/Collator}
 */

/**
 * A JSZip object
 * @external JSZip
 * @see {@link https://stuk.github.io/jszip}
 */

/**
 * The MediaRecorder interface of the {@link https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder_API MediaRecorder API}
 * provides functionality to easily capture media.
 * @external MediaRecorder
 * @see {@link https://developer.mozilla.org/ca/docs/Web/API/MediaRecorder}
 */

/**
 * An i18next object, used to translate literals
 * @external i18next
 * @see {@link http://i18next.com}
 */

/**
 * The Promise object is used for asynchronous computations. A Promise represents an operation
 * that hasn't completed yet, but is expected in the future.
 * @external Promise
 * @see {@link https://developer.mozilla.org/ca/docs/Web/JavaScript/Reference/Global_Objects/Promise}
 */

/**
* The Storage interface of the Web Storage API provides access to the session storage or local storage for a particular domain,
* allowing you to for example add, modify or delete stored data items.
* @external Storage
* @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Storage}
*/

/**
 * The NamedNodeMap interface represents a collection of Attr objects. Objects inside a NamedNodeMap are not in any particular
 * order, unlike NodeList, although they may be accessed by an index as in an array.
 * @external NamedNodeMap
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap}
 */

/**
 * MidiPlayerJS is a JavaScript library which reads standard MIDI files and emits JSON events in real time.
 * @external MidiPlayerJS
 * @see {@link https://github.com/grimmdude/MidiPlayerJS}
 */

/* global define:true, JClicDataProject, JClicDataOptions */

// Mock `define` when called from a JavaScript environment without native AMD support (like Node.js)
// For an example of how to call JClic.js in node.js, see:
// `/test/nodejs/listProjectContents.js`
if (false)
  {}

// Initial empty definition of `JClicObject`, to be filled with real data in `define`
const JClicObject = {};

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ./JClicPlayer */ "./src/JClicPlayer.js"),
  __webpack_require__(/*! ./project/JClicProject */ "./src/project/JClicProject.js"),
  __webpack_require__(/*! ./AWT */ "./src/AWT.js"),
  __webpack_require__(/*! ./Utils */ "./src/Utils.js"),
  __webpack_require__(/*! ./Deps */ "./src/Deps.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, JClicPlayer, JClicProject, AWT, Utils /*, deps*/) {

  /**
   * This is the main method of JClic
   *
   * Executes on `document.ready()`.
   *
   * The method iterates over all `div` objects with `JClic` class and creates a {@link JClicPlayer}
   * within them. Each player loads the JClic project file specified in the `data-project` attribute of
   * the `div` tag.
   *
   * The `div` elements must preferabily be empty. Inner content may become overlapped by objects
   * created by the JClic player.
   *
   * This method exports the global variable `window.JClicObject`, useful when other scripts
   * need to make direct calls to the main components of JClic.
   *
   * The main members of the global variable `JClicObject` are:
   * - `JClicObject.JClicPlayer` (the {@link JClicPlayer} object)
   * - `JClicObject.JClicProject` (the {@link JClicProject} object)
   * - `JClicObject.AWT` (the {@link AWT} object)
   * - `JClicObject.Utils` (the {@link Utils} object)
   * - `JClicObject.$` (the JQuery object)
   * - `JClicObject.options` (the main options loaded at startup, usually the content of the global variable `JClicDataOptions`)
   * - `JClicObject.projectFiles` (used by JSONP to store the content of some files when inaccessible to the browser because CORS or other restrictions)
   * - `JClicObject.currentPlayers` (array with references to the players currently running)
   * - `JClicObject.loadProject` (a function that starts a JClicPlayer on a specific `div`)
   *
   * @module JClic
   * @exports JClicObject
   * @example <caption>
   * Creates a JClic div and loads "myproject.jclic" on it:
   * </caption><div class ="JClic" data-project="myproject.jclic"></div>
   * @example <caption>
   * Creates a JClic div that loads "myproject.jclic" with additional parameters, passed as a JSON string.
   * Note that `data-options` should be delimited by apostrophes `'` because quotation marks `"` are used
   * for JSON keys and values:
   * </caption><div class ="JClic" data-project="myproject.jclic" data-options='{"fade":"400","lang":"es","reporter":"TCPReporter","user":"test01","path":"localhost:9090"}'></div>
   */
  Object.assign(JClicObject, {
    JClicPlayer: JClicPlayer,
    JClicProject: JClicProject,
    AWT: AWT,
    Utils: Utils,
    $: $,
    options: typeof JClicDataOptions === 'undefined' ? {} : JClicDataOptions,
    projectFiles: {},
    currentPlayers: [],
    /**
     *
     * Creates a new JClicPlayer hosted on the specified `div`, and loads an specific project on it.
     * @param {HTMLElement} div - The HTML element (usually a `<div/>`) that will be used as a main container of the player.
     * @param {string} projectName - The file name or URL of the JClic project to be loaded
     * @param {object=} options - An optional set of preferences
     * @returns {JClicPlayer}
     */
    loadProject: function (div, projectName, options) {

      options = Utils.init($.extend(Object.create(JClicObject.options), options || {}))
      let player = null

      // Find if there is another player already running on 'div'
      for (const pl of JClicObject.currentPlayers) {
        if (pl && pl.$topDiv && pl.$topDiv.get(-1) === div) {
          // Player found! Check if it has the same options
          Utils.log('debug', 'Existing JClicPlayer found in div. I will try to reuse it.')
          player = pl
          for (const prop of Object.getOwnPropertyNames(options)) {
            if (!player.options.hasOwnProperty(prop) || player.options[prop] !== options[prop]) {
              Utils.log('debug', 'Existing JClicPlayer has diferent options! Creating a new one from scratch.')
              player = null
              break
            }
          }
          break
        }
      }

      if (player)
        player.reset()
      else {
        Utils.log('debug', 'Creating a new instance of JClicPlayer')
        player = new JClicPlayer($(div).empty(), options)
      }

      if (projectName)
        player.initReporter()
          .then(() => player.load(projectName))
          .catch(err => {
            Utils.log('error', `Unable to start reporting: ${err.toString()}.\n JClicPlayer will be removed.'`)
            $(div).empty().removeAttr('style').append($('<h2/>').html(player.getMsg('ERROR'))).append($('<p/>').html(err))
            const i = JClicObject.currentPlayers.indexOf(player)
            if (i >= 0)
              JClicObject.currentPlayers.splice(i, 1)
            player = null
          })

      if (player && options.savePlayersRef !== false && JClicObject.currentPlayers.indexOf(player) === -1)
        JClicObject.currentPlayers.push(player)

      return player
    }
  })

  // Make JClicObject global and attach resize handler
  if (typeof window !== 'undefined') {
    window.JClicObject = JClicObject
    const fnFit = () => JClicObject.currentPlayers.forEach(player => { if (player && player.skin) player.skin.fit() })
    $(document).on('webkitfullscreenchange mozfullscreenchange fullscreenchange MSFullscreenChange', fnFit);
    $(window).resize(fnFit);
  }

  // Execute on document ready
  $(function () {
    // If defined, load the global variable `JClicDataOptions`
    let options = typeof JClicDataOptions === 'undefined' ? {} : JClicDataOptions
    JClicObject.options = options

    if (!options.noInit) {
      // If defined, load the global variable `JClicDataProject` or `JClicObject.projectFile`
      let projectName =
        typeof JClicDataProject === 'string' ?
          JClicDataProject :
          typeof JClicObject.projectFile === 'string' ?
            JClicObject.projectFile :
            null

      // Enable sync with browser history only when there is a single element of class 'JClic'.
      // This is done automatically when this element is a direct child of body, or when 'browserHistory' is
      // explicitly set
      options.browserHistory = $('body>div.JClic').length === 1 || options.browserHistory && $('.JClic').length === 1;

      // Search DOM elements with class "JClic" (usually of type 'div') and iterate over them
      // initializing players
      $('.JClic').each((_n, element) => {
        const $div = $(element)
        const prj = $div.data('project')
        if (prj)
          projectName = prj

        const opt = $div.data('options')
        if (opt)
          options = $.extend(Object.create(options), opt)

        JClicObject.loadProject(element, projectName, options)
      })
    }
  })

  return JClicObject
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))

// Export JClicObject as a result
if (true) {
  exports = module.exports = JClicObject
}


/***/ }),

/***/ "./src/JClicPlayer.js":
/*!****************************!*\
  !*** ./src/JClicPlayer.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : JClicPlayer.js
 *  Created : 28/04/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define, JSON, location, window */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! jszip */ "./node_modules/jszip/dist/jszip.min.js"),
  __webpack_require__(/*! jszip-utils */ "./node_modules/jszip-utils/lib/index.js"),
  __webpack_require__(/*! scriptjs */ "./node_modules/scriptjs/dist/script.js"),
  __webpack_require__(/*! ./i18n */ "./src/i18n.js"),
  __webpack_require__(/*! ./Utils */ "./src/Utils.js"),
  __webpack_require__(/*! ./AWT */ "./src/AWT.js"),
  __webpack_require__(/*! ./PlayerHistory */ "./src/PlayerHistory.js"),
  __webpack_require__(/*! ./media/ActiveMediaBag */ "./src/media/ActiveMediaBag.js"),
  __webpack_require__(/*! ./skins/Skin */ "./src/skins/Skin.js"),
  __webpack_require__(/*! ./media/EventSounds */ "./src/media/EventSounds.js"),
  __webpack_require__(/*! ./project/JClicProject */ "./src/project/JClicProject.js"),
  __webpack_require__(/*! ./bags/JumpInfo */ "./src/bags/JumpInfo.js"),
  __webpack_require__(/*! ./boxes/ActiveBoxContent */ "./src/boxes/ActiveBoxContent.js"),
  __webpack_require__(/*! ./report/Reporter */ "./src/report/Reporter.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, JSZip, JSZipUtils, ScriptJS, i18n, Utils, AWT, PlayerHistory, ActiveMediaBag, Skin,
  EventSounds, JClicProject, JumpInfo, ActiveBoxContent, Reporter) {

    /**
     * JClicPlayer is one of the the main classes of the JClic system. It implements the
     * {@link http://projectestac.github.io/jclic/apidoc/edu/xtec/jclic/PlayStation.html PlayStation}
     * interface, needed to host JClic activities.
     * JClicPlayer offers to {@link Activity#Panel} objects all the necessary resources and functions:
     * media bags (to load and realize images and other media contents), sequence control, management
     * of the reporting system, user interface, display of system messages, etc.
     * @exports JClicPlayer
     * @class
     * @extends AWT.Container
     */
    class JClicPlayer extends AWT.Container {

      /**
       * JClicPlayer constructor
       * @param {external:jQuery} $topDiv - The HTML `div` element where this JClicPlayer will deploy.
       * @param {object=} options - A set of optional customized options.
       */
      constructor($topDiv, options) {

        // JClicPlayer extends AWT.Container
        super()
        // Build cascading options
        //this.options = Object.assign({}, this.options, Utils.init(options))
        options = Utils.init(options)
        this.options = $.extend(Object.create(this.options), options)
        // Generate unique ID
        this.id = `JC${(0x10000 + Math.round(Math.random() * 0xFFFF)).toString(16).toUpperCase().substr(1)}`
        // Identify the HTML element where this player will deploy
        this.$topDiv = $topDiv || $('<div/>')
        // Avoid side effects of 'align=center' in old HTML pages
        this.$topDiv.css({ 'text-align': 'initial' })

        // Special case: $topDiv inside a TD (like in http://clic.xtec.cat/gali)
        if (this.$topDiv.parent().is('td')) {
          // Set explicit width and height to fill-in the TD
          this.$topDiv.css({
            width: this.options.width || '100%',
            height: this.options.height || '100%'
          })
        }

        // Build the main container
        this.$mainContainer = $('<div/>', { class: 'JClicContainer', id: this.id })
          .css({ width: '100%', height: '100%' })
          .appendTo(this.$topDiv)

        // Attach the localization
        i18n(this)

        // Intitialize other elements
        this.localFS = location && location.protocol === 'file:'
        this.$div = $('<div/>', { class: 'JClicPlayer' })
        this.project = new JClicProject()
        this.activeMediaBag = new ActiveMediaBag()
        this.counterVal = { score: 0, actions: 0, time: 0 }
        this.bgImageOrigin = new AWT.Point()
        this.buildActions()
        this.history = new PlayerHistory(this)
        this.audioEnabled = this.options.audioEnabled
        this.navButtonsAlways = this.options.navButtonsAlways
        this.defaultSkin = Skin.getSkin(this.options.skin, this)
        this.setSkin(Skin.getSkin('@empty.xml', this))
        this.initTimers()
        Utils.log('info', 'JClicPlayer ready')
      }

      /**
       * Generates an unique ID for elements being used with this player
       * @param {string} lb - The element's label
       * @returns {string}
       */
      getUniqueId(lb) {
        return `${this.id}-${lb}`
      }

      /**
       * Builds the {@link AWT.Action} objects for this player
       */
      buildActions() {
        this.actions = {
          'next': new AWT.Action('next', () => this.history.processJump(this.project.activitySequence.getJump(false, this.reporter), false)),
          'prev': new AWT.Action('prev', () => this.history.processJump(this.project.activitySequence.getJump(true, this.reporter), false)),
          'return': new AWT.Action('return', () => this.history.pop()),
          'reset': new AWT.Action('reset', () => { if (this.actPanel && this.actPanel.act.canReinit()) this.initActivity() }),
          'help': new AWT.Action('help', () => { if (this.actPanel) this.actPanel.showHelp() }),
          'info': new AWT.Action('info', () => {
            if (this.actPanel && this.actPanel.act.hasInfo()) {
              if (this.actPanel.act.infoUrl)
                this.displayURL(this.act.infoUrl, true)
              else if (this.actPanel.act.infoCmd)
                this.runCmd(this.actPanel.act.infoCmd)
            }
          }),
          'reports': new AWT.Action('reports', () => this.showReports()),
          'audio': new AWT.Action('audio', () => {
            this.audioEnabled = !this.audioEnabled
            if (!this.audioEnabled)
              this.stopMedia()
            EventSounds.prototype.globalEnabled = this.audioEnabled
          })
        }

        $.each(this.actions, (key, value) => {
          value.addStatusListener(action => { if (this.skin) this.skin.actionStatusChanged(action) })
        })
      }

      /**
       * Resets the main components of this player
       */
      reset() {
        Utils.log('info', 'Restoring player')
        this.removeActivity()
        this.end()
        this.activeMediaBag = new ActiveMediaBag()
        this.history.clearHistory()
        this.setSkin(null)
        this.setMsg(null)
        this.setCounterValue('score', 0)
        this.setCounterValue('actions', 0)
        this.setCounterValue('time', 0)
        if (this.skin)
          this.skin.setWaitCursor('reset')
      }

      /**
       * Instructs the player to stop working
       */
      stop() {
        this.stopMedia(-1)
      }

      /**
       * Executes miscellaneous finalization routines.
       * @returns {Promise} - A promise to be fullfilled when all pending tasks are finished.
       */
      end() {
        let result = null
        this.stopMedia()
        this.closeHelpWindow()
        if (this.reporter) {
          result = this.reporter.end()
          this.reporter = null
        }
        if (this.actPanel) {
          this.actPanel.end()
          this.actPanel.$div.remove()
          this.actPanel = null
        }
        if (this.project) {
          this.project.end()
          this.project = null
        }
        if (this.activeMediaBag)
          this.activeMediaBag.removeAll()
        return result || Promise.resolve(true)
      }

      /**
       * Creates and initializes the {@link Reporter} member
       * @return {Promise}
       */
      initReporter() {
        if (this.reporter) {
          this.reporter.end()
          this.reporter = null
        }
        this.reporter = Reporter.getReporter(null, this)
        return this.reporter.init()
      }

      /**
       *
       * Creates and initializes objects of type {@link AWT.Timer}
       */
      initTimers() {
        // Main timer
        if (this.timer)
          this.timer.stop()
        this.timer = new AWT.Timer(() => {
          this.incCounterValue('time')
          if (this.actPanel && this.actPanel.act.maxTime > 0
            && this.actPanel.playing
            && this.counterVal['time'] >= this.actPanel.act.maxTime)
            this.actPanel.finishActivity(false)
        }, 1000, false)

        // One-time timer, for delayed actions
        if (this.delayedTimer)
          this.delayedTimer.stop()
        this.delayedTimer = new AWT.Timer(() => {
          if (this.delayedAction)
            this.delayedAction.processEvent(this.delayedAction, null)
        }, 1000, false)
        this.delayedTimer.repeats = false
      }

      /**
       * Opens the reports dialog
       */
      showReports() {
        if (this.skin) this.skin.showReports(this.reporter)
      }

      /**
       * Closes the help dialog window
       */
      closeHelpWindow() {
        if (this.skin) this.skin._closeDlg(false)
      }

      /**
       * Sets the current skin
       * @param {?Skin} newSkin - The skin to use. When `null`, `defaultSkin` will be used.
       */
      setSkin(newSkin) {
        newSkin = newSkin || (this.project && this.project.skin ? this.project.skin : this.defaultSkin)
        if (newSkin && (this.skin === null || newSkin.name !== this.skin.name)) {
          newSkin.attach(this)
          this.skin = newSkin
          this.skin.doLayout()
        }
      }

      /**
       * Sets the current project of this player, without starting any activity
       * @param {JClicProject} project - The project to be set
       */
      setProject(project) {
        if (this.project) {
          if (this.project !== project)
            this.project.end()
          this.removeActivity()
        }
        this.project = project || new JClicProject()
        this.project.realize(this)
      }

      /**
       * Loads the specified project and starts playing at the specified activity or sequence tag.
       * @param {?(string|JClicProject)} project - The project to load (if it's a string) or to use (if it's an object of type {@link JClicProject}).
       * When it's a `string`, it can be the absolute or relative path to:
       * - A '.jclic' project file
       * - A '.jclic.zip' compressed project file (containing one '.jclic' file)
       * - A '.scorm.zip' file, as exported by JClic Author.
       * - A 'project.json' file, as exported by JClic Author
       * When `null` or `undefined`, refers to the current project.
       * @param {(string|number)=} sequence - Sequence tag or numeric order in the {@link ActivitySequence}
       * to be loaded. If _sequence_ and _activity_ are both `null`, the first {@link ActivitySequenceElement}
       * will be loaded.
       * @param {string=} activity - Name of the activity to be loaded (usually `null`)
       */
      load(project, sequence, activity) {

        this.forceFinishActivity()
        this.setWaitCursor(true)

        // The ActivityPanel object to be obtained as a result of the loading process
        let actp = null

        // step one: load the project
        if (project) {
          if (typeof project === 'string') {

            // Param `project` is a file name or URL (otherwise, is a realized `JClicProject` object)
            const fullPath = Utils.getPath(this.basePath, project)

            // Previous step: Check if `project` points to a "project.json" file
            if (fullPath.endsWith('project.json')) {
              Utils.log('info', `Loading JSON info from: ${fullPath}`)
              $.getJSON(fullPath).done(json => {
                // Read the `mainFile` field of `project.json`
                if (Utils.endsWith(json['mainFile'], '.jclic')) {
                  // Load project's main file
                  this.load(Utils.getPath(Utils.getBasePath(fullPath), json['mainFile']), sequence, activity)
                } else {
                  Utils.log('error', `Invalid or null "mainFile" specified in ${fullPath} - "project.json".`)
                }
              }).fail((jqhxr, textStatus, error) => {
                const errMsg = `${textStatus} (${error}) while loading ${project}`
                Utils.log(errMsg)
                alert(`Error!\n${errMsg}`)
              }).always(
                () => this.setWaitCursor(false)
              )
              return
            }

            // Step 0: Check if `project` points to a ZIP file
            if (fullPath.endsWith('.zip')) {
              // TODO: Implement register of zip files in PlayerHistory
              this.zip = null
              Utils.log('info', `Loading ZIP file: ${fullPath}`)

              // Launch loading of ZIP file in a separated thread
              JSZipUtils.getBinaryContent(fullPath, (err, data) => {
                if (err) {
                  this.setWaitCursor(false)
                  Utils.log('error', `Error loading ZIP file: ${err.toString()}`)
                  return
                }
                new JSZip().loadAsync(data).then(zip => {
                  this.zip = zip
                  this.zip.fullZipPath = fullPath
                  this.zip.zipBasePath = Utils.getBasePath(fullPath)
                  let fileName = null
                  // Check if ZIP contains a "project.json" file (as in the ".scorm.zip" files generated by JClic Author)
                  if (this.zip.files['project.json']) {
                    this.zip.files['project.json'].async('string').then(content => {
                      try {
                        const json = JSON.parse(content)
                        // Read the `mainFile` field of `project.json`
                        if (Utils.endsWith(json['mainFile'], '.jclic')) {
                          // Load project's main file
                          this.load(Utils.getPath(this.zip.zipBasePath, json['mainFile']), sequence, activity)
                        } else {
                          Utils.log('error', `Invalid or null "mainFile" specified in ${fullPath} - "project.json".`)
                        }
                      } catch (err) {
                        Utils.log('error', `Error reading "project.json" in ${fullPath}: ${err ? err.toString() : 'unknown error'}`)
                      }
                    }).catch(reason => {
                      Utils.log('error', `Error reading ZIP file: ${reason ? reason.toString() : 'unknown reason'}`)
                    })
                  } else {
                    // Find first file with extension '.jclic' inside the zip file
                    fileName = Object.keys(this.zip.files).find(fn => fn.endsWith('.jclic')) || null
                    if (fileName)
                      this.load(Utils.getPath(this.zip.zipBasePath, fileName), sequence, activity)
                    else
                      Utils.log('error', 'This ZIP file does not contain any JClic project!')
                  }
                  this.setWaitCursor(false)
                }).catch(reason => {
                  Utils.log('error', `Error reading ZIP file: ${reason ? reason.toString() : 'unknown reason'}`)
                  this.setWaitCursor(false)
                })
              })
              return
            } else if (this.localFS && window.JClicObject && !window.JClicObject.projectFiles[fullPath]) {
              ScriptJS(`${fullPath}.js`, () => this.load(project, sequence, activity))
              this.setWaitCursor(false)
              return
            }

            // Step one: load the project file
            const processProjectFile = fp => {
              $.get(fp, null, null, 'xml').done(data => {
                if (data === null || typeof data !== 'object') {
                  Utils.log('error', `Bad data. Project not loaded: ${project}`)
                  return
                }
                const prj = new JClicProject()
                prj.setProperties($(data).find('JClicProject'), fullPath, this.zip, this.options)
                Utils.log('info', `Project file loaded and parsed: ${project}`)
                const elements = prj.mediaBag.buildAll(null, element => {
                  Utils.log('trace', `"${element.name}" ready.`)
                  this.incProgress(1)
                }, this)
                Utils.log('info', `Media elements to be loaded: ${elements}`)
                this.setProgress(0, elements)
                let loops = 0
                const interval = 500
                this.setWaitCursor(true)
                const checkMedia = window.setInterval(() => {
                  // Wait for a maximum time of two minutes
                  if (++loops > this.options.maxWaitTime / interval) {
                    window.clearInterval(checkMedia)
                    this.setProgress(-1)
                    this.setWaitCursor(false)
                    Utils.log('error', 'Error loading media')
                  }
                  const waitingObjects = prj.mediaBag.countWaitingElements()
                  // player.setProgress(waiting)
                  if (waitingObjects === -1) {
                    window.clearInterval(checkMedia)
                    this.setProgress(-1)
                    this.setWaitCursor(false)
                    // Call `load` again, passing the loaded [JClicProject](JClicProject.html) as a parameter
                    this.load(prj, sequence, activity)
                  }
                }, interval)
              }).fail((jqXHR, textStatus, errorThrown) => {
                const errMsg = `${textStatus} (${errorThrown}) while loading ${project}`
                Utils.log(errMsg)
                alert(`Error!\n${errMsg}`)
              }).always(() => this.setWaitCursor(false))
            }

            Utils.log('info', `Loading project: ${project}`)
            let fp = fullPath

            // Special case for ZIP files
            if (this.zip) {
              const fName = Utils.getRelativePath(fp, this.zip.zipBasePath)
              if (this.zip.files[fName]) {
                this.zip.file(fName).async('string').then(text => {
                  processProjectFile(`data:text/xml;charset=UTF-8,${text}`)
                }).catch(reason => {
                  Utils.log('error', `Unable to extract "${fName}" from ZIP file because of: ${reason ? reason.toString() : 'unknown reason'}`)
                  this.setWaitCursor(false)
                })
                return
              }
            }
            // Special case for local file systems (using `file` protocol)
            else if (this.localFS) {
              // Check if file is already loaded in the global variable `JClicObject`
              if (window.JClicObject && window.JClicObject.projectFiles[fullPath]) {
                fp = `data:text/xml;charset=UTF-8,${window.JClicObject.projectFiles[fullPath]}`
              } else {
                Utils.log('error', `Unable to load: ${fullPath}.js`)
                this.setWaitCursor(false)
                return
              }
            }
            processProjectFile(fp)
            return
          }

          // From here, assume that `project` is a [JClicProject](JClicProject.html)
          this.setProject(project)

          // If none specified, start with the first element of the sequence
          if (!sequence && !activity)
            sequence = '0'

          // start reporter session
          if (this.reporter)
            this.reporter.newSession(project)

        }

        // Step two: load the ActivitySequenceElement
        if (!Utils.isNullOrUndef(sequence)) {
          Utils.log('info', `Loading sequence: ${sequence}`)
          this.navButtonsDisabled = false
          // Try to load sequence by tag
          let ase = null
          if (typeof sequence === 'string')
            ase = this.project.activitySequence.getElementByTag(sequence, true)
          if (ase === null) {
            // Try to treat 'sequence' as a number
            const n = parseInt(sequence, 10)
            if (typeof n === 'number')
              ase = this.project.activitySequence.getElement(n, true)
          }

          if (ase !== null) {
            // Success! We have a real [ActivitySequenceElement](ActivitySequenceElement.html)
            if (this.reporter)
              this.reporter.newSequence(ase)
            activity = ase.activityName
          }
        }

        // Step three: load the activity
        if (activity) {
          const act = this.project.getActivity(activity)
          if (act) {
            // Success! We have a real [Activity](Activity.html)
            Utils.log('info', `Loading activity: ${activity}`)
            act.prepareMedia(this)
            this.project.activitySequence.checkCurrentActivity(act.name)
            actp = act.getActivityPanel(this)
            actp.buildVisualComponents()
          } else {
            Utils.log('error', `Missing activity: ${activity}`)
          }
        }

        // Step four: put the activity panel on place

        // Remove the current ActivityPanel
        if (this.actPanel !== null) {
          this.actPanel.end()
          this.actPanel.$div.remove()
          this.actPanel = null
          this.setCounterValue('time', 0)
        }

        // Attach the new ActivityPanel
        if (actp) {
          // Sets the actPanel member to this ActivityPanel
          this.actPanel = actp

          if (this.options.fade > 0)
            this.actPanel.$div.css('display', 'none')

          // Places the JQuery DOM element of actPanel within the player main panel
          this.$div.prepend(this.actPanel.$div)
          if (this.skin)
            this.skin.resetAllCounters(false)

          // Sets the current skin
          if (this.actPanel.skin)
            this.setSkin(this.actPanel.skin)
          else if (this.project.skin) {
            this.setSkin(this.project.skin)
            this.lastProjectSkin = this.project.skin
          }
          else if (this.lastProjectSkin)
            this.setSkin(this.lastProjectSkin)
          else
            this.setSkin(null)

          if (this.skin) {
            // Enable or disable actions
            const hasReturn = this.history.storedElementsCount() > 0 || this.options.returnAsExit
            const navBtnFlag = this.navButtonsAlways ?
              'both' : this.navButtonsDisabled ?
                'none' : this.project.activitySequence.getNavButtonsFlag()
            this.actions['next'].setEnabled((navBtnFlag === 'fwd' || navBtnFlag === 'both') &&
              this.project.activitySequence.hasNextAct(hasReturn))
            this.actions['prev'].setEnabled((navBtnFlag === 'back' || navBtnFlag === 'both') &&
              this.project.activitySequence.hasPrevAct(hasReturn))
            this.actions['return'].setEnabled(hasReturn)
            this.actions['help'].setEnabled(this.actPanel.act.helpWindowAllowed())
            this.actions['reset'].setEnabled(this.actPanel.act.canReinit())
            this.actions['info'].setEnabled(this.actPanel.act.hasInfo())
          }
          this.doLayout()
          this.initActivity()

          this.history.pushBrowserHistory()

          this.actPanel.$div.fadeIn(this.options.fade, () => this.activityReady())
        }
        this.setWaitCursor(false)
      }

      /**
       * Forces the current activity to stop playing.
       */
      forceFinishActivity() {
        this.timer.stop()
        this.delayedTimer.stop()
        if (this.actPanel) {
          this.closeHelpWindow()
          this.actPanel.forceFinishActivity()
          this.stopMedia()
          this.activeMediaBag.removeAll()
        }
      }

      /**
       *
       * Removes the current {@link Activity#Panel} from this player
       */
      removeActivity() {
        this.forceFinishActivity()
        if (this.actPanel) {
          this.actPanel.end()
          this.actPanel.$div.remove()
          this.actPanel = null
          this.setMsg(null)
          this.doLayout()
        }
      }

      /**
       *
       * Initializes the activity
       */
      initActivity() {
        this.setWaitCursor(true)
        this.timer.stop()
        this.delayedTimer.stop()
        this.setCounterValue('time', 0)
        this.stopMedia()
        if (this.actPanel) {
          this.actPanel.initActivity()
          this.timer.start()
          if (!this.actPanel.act.mustPauseSequence())
            this.startAutoPassTimer()
          Utils.log('info', `Activity "${this.actPanel.act.name}" running`)
        }
        this.setWaitCursor(false)
      }

      /**
       * Called by {@link JClicPlayer#load} when the {@link Activity#Panel} is fully visible, just
       * after the JQuery animation effect.
       */
      activityReady() {
        if (this.actPanel) {
          this.actPanel.activityReady()
          Utils.log('info', 'Activity ready')
        }
      }

      /**
       * Starts the activity. This method is usually called from text activities with previous text.
       */
      startActivity() {
        this.setWaitCursor(true)
        if (this.actPanel)
          this.actPanel.startActivity()
        this.setWaitCursor(false)
      }

      /**
       * Configures the layout and visual aspect of the player area.
       */
      doLayout() {

        // Main player area settings
        const
          width = this.dim.width = this.$div.width(),
          height = this.dim.height = this.$div.height(),
          mainCss = {
            'background-color': this.actPanel ? this.actPanel.act.bgColor : 'azure',
            'background-image': ''
          }

        if (this.actPanel) {
          const act = this.actPanel.act
          if (act.bgGradient)
            // Canvas version also available
            mainCss['background-image'] = act.bgGradient.getCss()

          if (act.bgImageFile && act.bgImageFile.length > 0) {
            this.project.mediaBag.getElement(act.bgImageFile, true).getFullPathPromise().then(bgImageUrl => {
              this.$div.css({
                'background-image': 'url(\'' + bgImageUrl + '\')',
                'background-repeat': act.tiledBgImg ? 'repeat' : 'no-repeat',
                'background-position': act.tiledBgImg ? '' : 'center center'
              })
            })
          }

          // Activity panel settings
          // Calc the maximum rectangle available for the activity panel
          const
            m = Utils.settings.BoxBase.AC_MARGIN,
            proposedRect = new AWT.Rectangle(m, m, width - 2 * m, height - 2 * m)

          if (this.actPanel.bgImage && !act.tiledBgImg && act.absolutePositioned) {
            // Special case: when the activity has a background image not tiled, and an absolute
            // position has been specified, the ActivityPanel must be placed at this absolute
            // position, relative to the background image
            this.bgImageOrigin.x = (width - this.actPanel.bgImage.width) / 2
            this.bgImageOrigin.y = (height - this.actPanel.bgImage.height) / 2
            proposedRect.pos.moveTo(this.bgImageOrigin)
            proposedRect.dim.width -= this.bgImageOrigin.x - m
            proposedRect.dim.height -= this.bgImageOrigin.y - m
            proposedRect.dim.width = Math.min(proposedRect.dim.width, width)
            proposedRect.dim.height = Math.min(proposedRect.dim.height, height)
          }

          // ActivityPanel will calculate and set its position and size based on the maximum and optimal
          // available space
          /* TODO: Try with a computed rectangle instead of "this", to avoid the loss of the right margin
           * in narrow displays */
          this.actPanel.fitTo(proposedRect, this)
        }
        this.$div.css(mainCss)
      }

      /**
       * Plays the specified media.
       * @param {MediaContent} mediaContent - The media to be played
       * @param {ActiveBox=} mediaPlacement - The cell where the graphic component of this media should be placed (used with video objects)
       * @param {(function[])=} delayedActions - If set, store the the action in this array for future execution
       */
      playMedia(mediaContent, mediaPlacement = null, delayedActions = null) {

        let ji = null
        const fn = mediaContent.mediaFileName
        let action = null

        switch (mediaContent.mediaType) {
          case 'PLAY_AUDIO':
          case 'PLAY_VIDEO':
          case 'PLAY_MIDI':
          case 'RECORD_AUDIO':
          case 'PLAY_RECORDED_AUDIO':
            if (this.audioEnabled) {
              const amp = this.activeMediaBag.getActiveMediaPlayer(mediaContent, this.project.mediaBag, this)
              if (amp)
                action = () => amp.play(mediaPlacement)
            }
            break

          case 'RUN_CLIC_PACKAGE':
            ji = new JumpInfo('JUMP', fn)
            if (mediaContent.externalParam) {
              // Relative path computed in History.processJump
              ji.projectPath = mediaContent.externalParam
            }
            action = () => this.history.processJump(ji, true)
            break

          case 'RUN_CLIC_ACTIVITY':
            this.history.push()
            action = () => this.load(null, null, fn)
            break

          case 'RETURN':
            if (this.history.storedElementsCount() > 0 || !this.options.returnAsExit) {
              action = () => this.history.pop()
              break
            }
          case 'EXIT':
            ji = new JumpInfo('EXIT', fn)
            action = () => this.history.processJump(ji, false)
            break

          case 'RUN_EXTERNAL':
            action = () => this.runCmd(fn)
            break

          case 'URL':
            if (fn)
              // When mediaContent.level is 2 or more, the URL will be opened in a separate window.
              action = () => this.displayURL(fn, mediaContent.level > 1)
            break

          default:
            Utils.log('error', `Unknown media type: ${mediaContent.mediaType}`)
            break
        }

        // Execute the action or pass callback
        if (delayedActions && action)
          delayedActions.push(action)
        else if (action)
          action()
      }

      /**
       * Stops currently playing media
       * @param {number=} [level=-1] - Sets the threshold above which all media objects with equal
       * or greater `level` will also also be muted.
       */
      stopMedia(level) {
        if (typeof level !== 'number')
          level = -1
        this.activeMediaBag.stopAll(level)
      }

      /**
       * Launches the specified system command.
       * Currently not implemented.
       * @param {string} cmd
       */
      runCmd(cmd) {
        Utils.log('warn', `Unsupported call to external command: "${cmd}"`)
      }

      /**
       * Called from {@link Activity} when finished.
       * @param {boolean} _completedOK - `true` when the activity was successfully completed, `false`
       * otherwise.
       */
      activityFinished(_completedOK) {
        this.closeHelpWindow()
        Utils.log('info', 'Activity finished')
        this.timer.stop()
        this.startAutoPassTimer()
      }

      /**
       * Starts the automatic jump to next activity, when applicable.
       */
      startAutoPassTimer() {
        const ase = this.project.activitySequence.getCurrentAct()
        if (ase !== null && ase.delay > 0 && !this.delayedTimer.isRunning() && !this.navButtonsDisabled) {
          this.delayedAction = this.actions['next']
          this.delayedTimer.interval = ase.delay * 1000
          this.delayedTimer.start()
        }
      }

      /**
       * Function obtained from `i18next` that will return the translation of the provided key
       * into the current language.
       * The real function will be initiated by constructor. Meanwhile, it returns always `key`.
       * @param {string} key - ID of the expression to be translated
       * @returns {string} - Translated text
       */
      getMsg(key) {
        return key
      }

      /**
       *
       * Sets the current main message.
       * @param {ActiveBoxContent} abc - The content of the message
       */
      setMsg(abc) {
        const ab = this.skin ? this.skin.getMsgBox() : null
        if (ab) {
          ab.clear()
          this.skin.invalidate(ab).update()
          ab.setContent(abc ? abc : ActiveBoxContent.EMPTY_CONTENT)
          // TODO: Move this method to Skin
          this.skin.invalidate(ab).update()
          ab.playMedia(this)
        }
      }

      /**
       * Launches the active media content associated to the main message, if any.
       */
      playMsg() {
        if (this.skin && this.skin.getMsgBox())
          this.skin.getMsgBox().playMedia(this)
      }

      /**
       * Sets a value to the specified counter
       * @param {string} counter - The id of the counter ('score', 'actions' or 'time')
       * @param {number} newValue - The value to be set
       */
      setCounterValue(counter, newValue) {
        this.counterVal[counter] = newValue
        if (this.skin && this.skin.counters[counter])
          this.skin.counters[counter].setValue(newValue)
      }

      /**
       * Gets the current value for the specified counter
       * @param {string} counter - The id of the counter ('score', 'actions' or 'time')
       * @returns {number}
       */
      getCounterValue(counter) {
        return this.counterVal[counter]
      }

      /**
       * Enables or disables a specific counter
       * @param {string} counter - The id of the counter ('score', 'actions' or 'time')
       * @param {boolean} bEnabled - When `true`, the counter will be enabled.
       */
      setCounterEnabled(counter, bEnabled) {
        if (this.skin) {
          this.skin.enableCounter(counter, bEnabled)
          this.setCountDown(counter, 0)
        }
      }

      /**
       * Increments by 1 the value of the specified counter
       * @param {string} counter - The id of the counter ('score', 'actions' or 'time')
       */
      incCounterValue(counter) {
        this.counterVal[counter]++

        const
          actp = this.actPanel,
          cnt = this.skin ? this.skin.counters[counter] : null

        if (cnt)
          cnt.setValue(this.counterVal[counter])
        if (counter === 'actions' && actp !== null && actp.act.maxActions > 0 && actp.playing && this.counterVal['actions'] >= actp.act.maxActions)
          window.setTimeout(() => { actp.finishActivity(actp.solved) }, 0)
      }

      /**
       * Sets the specified counter in count-down status, starting at `maxValue`.
       * @param {string} counter - The id of the counter ('score', 'actions' or 'time')
       * @param {number} maxValue - The value from which to start counting down
       */
      setCountDown(counter, maxValue) {
        //this.counterVal[counter] = maxValue
        if (this.skin && this.skin.counters[counter])
          this.skin.counters[counter].setCountDown(maxValue)
      }

      /**
       * Set/unset the panel in 'wait' state
       * @param {boolean} status
       */
      setWaitCursor(status) {
        if (this.skin)
          this.skin.setWaitCursor(status)
      }

      /**
       * Sets the current value of the progress bar
       * @param {number} val - The current value. Should be less or equal than `max`. When -1, the progress bar will be hidden.
       * @param {number=} max - Optional parameter representing the maximum value. When passed, the progress bar will be displayed.
       */
      setProgress(val, max) {
        if (this.skin)
          this.skin.setProgress(val, max)
      }

      /**
       * Increments the progress bar value by the specified amount, only when the progress bar is running.
       * @param {number=} val - The amount to increment. When not defined, it's 1.
       */
      incProgress(val) {
        if (this.skin)
          this.skin.incProgress(val)
      }

      /**
       * Builds an {@link ActiveMediaPlayer} for the specified {@link MediaContent}
       * @param {MediaContent} mediaContent - The media content to be played
       * @returns {ActiveMediaPlayer}
       */
      getActiveMediaPlayer(mediaContent) {
        return this.activeMediaBag && mediaContent ? this.activeMediaBag.getActiveMediaPlayer(mediaContent, this.project.mediaBag, this) : null
      }

      /**
       * Notifies the reporting system that a new activity has started
       * @param {Activity} act - The activity that is sending the notification
       */
      reportNewActivity(act) {
        const ase = this.project.activitySequence.getCurrentAct()
        if (this.reporter) {
          if (ase.tag === this.reporter.getCurrentSequenceTag())
            // Notify that the sequence has changed
            this.reporter.newSequence(ase)
          if (act.includeInReports)
            this.reporter.newActivity(act)
        }
        this.setCounterValue('actions', 0)
        this.setCounterValue('score', 0)
      }

      /**
       * Notifies the reporting system that a new action has been performed on the current activity
       * @param {Activity} act - The activity that is sending the notification
       * @param {string} type - Type of action (match, move, switch...)
       * @param {?string} source - Object acting as a source of the action (cell, grid, clue...)
       * @param {?string} dest - When applicable, object acting as a receiver of the action (cell, grid...)
       * @param {boolean} ok - Whether the action was OK or not
       * @param {number} currentScore - The current score of the activity
       */
      reportNewAction(act, type, source, dest, ok, currentScore) {
        if (this.reporter && act.includeInReports && act.reportActions)
          this.reporter.newAction(type, source, dest, ok)
        if (currentScore >= 0) {
          this.incCounterValue('actions')
          this.setCounterValue('score', currentScore)
        }
      }

      /**
       * Notifies the reporting system that the current activity has finished
       * @param {Activity} act - The activity that is sending the notification
       * @param {boolean} solved - Whether the activity was successfully completed or not.
       */
      reportEndActivity(act, solved) {
        if (this.reporter && act.includeInReports)
          this.reporter.endActivity(this.counterVal['score'], this.counterVal['actions'], solved)
      }

      /**
       * Shows the help info provided by the activity
       * @param {external:jQuery} $hlpComponent - The jQuery DOM component to be shown.
       * @returns {boolean} - True when the component was successfully displayed
       */
      showHelp($hlpComponent) {
        return this.skin ? this.skin.showHelp($hlpComponent) : false
      }

      /**
       * Navigates to the requested URL
       * @param {string} url - The URL to navigate to
       * @param {boolean} inFrame - When `true` opens in a new frame
       */
      displayURL(url, inFrame) {
        if (url) {
          if (inFrame)
            window.open(url, this.options.infoUrlFrame)
          else {
            this.end().then(() => { window.location.href = url })
          }
        }
      }

      /**
       * Only when `exitUrl` has been specified in `options`, navigates to the specified URL
       * @param {string} url - The URL to navigate to.
       */
      exit(url) {
        this.displayURL(url || this.options.exitUrl, false)
      }

      /**
       * Sets a title in a specific HTML element, if provided.
       * @param {string} docTitle
       */
      setWindowTitle(docTitle) {
        Utils.log('info', `running ${docTitle}`)
      }
    }

    Object.assign(JClicPlayer.prototype, {
      /**
       * Current version will be updated by i18n.js
       * @name JClicPlayer#JClicVersion
       * @type {string} */
      JClicVersion: '0',
      /**
       * Object with miscellaneous options.
       * @name JClicPlayer#options
       * @type {object} */
      options: {
        //
        // Max waiting time to have all media loaded (milliseconds)
        maxWaitTime: 120000,
        //
        // Name of the frame where to open links
        infoUrlFrame: '_blank',
        //
        // URL where to navigate to on exit
        exitUrl: null,
        //
        // When `true` and no elements on sequence stack, RETURN acts as EXIT
        returnAsExit: false,
        //
        // At the beginning, the audio should be enabled or disabled
        audioEnabled: true,
        //
        // Navigation buttons are always visible (for debugging purposes)
        navButtonsAlways: false,
        //
        // Time (milliseconds) of the fade-in animation of the activity panel. When 0, no animation
        // is performed
        fade: 300
      },
      /**
       * Unique ID of this player, randomly generated by the constructor
       * @name JClicPlayer#id
       * @type {string} */
      id: 'JC0000',
      /**
       * The JQuery "div" element used by this player as stage for activities
       * @name JClicPlayer#$div
       * @type {external:jQuery} */
      $div: null,
      /**
       * The JQuery top container where this player will deploy
       * @name JClicPlayer#$topDiv
       * @type {external:jQuery} */
      $topDiv: null,
      /**
       * The main container of all JClic components
       * @name JClicPlayer#$mainContainer
       * @type {external:jQuery} */
      $mainContainer: null,
      /**
       * Flag indicatig that this player has switched to full screen at least once
       * @name JClicPlayer#fullScreenChecked
       * @type {boolean} */
      fullScreenChecked: false,
      /**
       * The {@link JClicProject} currently hosted in this player
       * @name JClicPlayer#project
       * @type {JClicProject} */
      project: null,
      /**
       * Relative path or absolute URL to be used as a base to access files
       * @name JClicPlayer#basePath
       * @type {string} */
      basePath: '',
      /**
       * A {@link external:JSZip} object pointing to a `jclic.zip` or `jclic.scorm.zip` file containing
       * the current project.
       * Two extra properties will be added to this object when loaded:
       * - __zip.fullZipPath__ {string} - The full path of the ZIP file
       * - __zip.zipBasePath__ {string} - The path to the folder containing the ZIP file
       * @name JClicPlayer#zip
       * @type {external:JSZip} */
      zip: null,
      /**
       * This flag indicates if the player is running inside a document loaded by `file:` protocol
       * @name JClicPlayer#localFS
       * @type {boolean}
       */
      localFS: false,
      /**
       * The {@link Activity#Panel} currently running on this player.
       * @name JClicPlayer#actPanel
       * @type {Activity#Panel} */
      actPanel: null,
      /**
       * This object records the list of the activities played during the current session.
       * @name JClicPlayer#history
       * @type {PlayerHistory} */
      history: null,
      /**
       * The Skin currently used by this player.
       * @name JClicPlayer#skin
       * @type {Skin} */
      skin: null,
      /**
       * The default Skin to be used if none specified
       * @name JClicPlayer#defaultSkin
       * @type {Skin} */
      defaultSkin: null,
      /**
       * The last skin directly specified by a {@link JClicProject}
       * @name JClicPlayer#defaultSkin
       * @type {Skin} */
      lastProjectSkin: null,
      /**
       * Object containing references to realized media objects, ready to play.
       * @name JClicPlayer#activeMediaBag
       * @type {ActiveMediaBag} */
      activeMediaBag: null,
      /**
       * Object responsible for passing the scores obtained by users to a external reporting systems
       * when playing activities.
       * @name JClicPlayer#reporter
       * @type {Reporter} */
      reporter: null,
      /**
       * Collection of {@link AWT.Action} objects used by this player.
       * @name JClicPlayer#actions
       * @type {AWT.Action[]} */
      actions: {},
      /**
       * Main timer object used to feed the time counter. Ticks every second.
       * @name JClicPlayer#timer
       * @type {AWT.Timer} */
      timer: null,
      /**
       * Timer for delayed actions
       * @name JClicPlayer#delayedTimer
       * @type {AWT.Timer} */
      delayedTimer: null,
      /**
       * This variable holds the action to be executed by `delayedTimer`
       * @name JClicPlayer#delayedAction
       * @type {AWT.Action} */
      delayedAction: null,
      /**
       * @typedef JClicPlayer~counterValType
       * @type {object}
       * @property {number} score
       * @property {number} actions
       * @property {number} time */
      /**
       * Current values of the counters
       * @name JClicPlayer#counterVal
       * @type {JClicPlayer~counterValType} */
      counterVal: { score: 0, actions: 0, time: 0 },
      /**
       * Point indicating the upper-left corner of the current background image
       * @name JClicPlayer#bgImageOrigin
       * @type {AWT.Point} */
      bgImageOrigin: null,
      /**
       * Whether the player must play all sounds (including system sounds) and other media content
       * of the activities.
       * @name JClicPlayer#audioEnabled
       * @type {boolean} */
      audioEnabled: true,
      /**
       * Whether the navigation buttons `next` and `back` are enabled o disabled.
       * @name JClicPlayer#navButtonsDisabled
       * @type {boolean} */
      navButtonsDisabled: false,
      /**
       * When this flag is `true`, the navigation buttons are always enabled despite
       * of the indications made by the activities or the sequence control system.
       * This is used only to debug projects with complicated sequence chaining.
       * @name JClicPlayer#navButtonsAlways
       * @type {boolean} */
      navButtonsAlways: false,
    })

    return JClicPlayer
  }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/PlayerHistory.js":
/*!******************************!*\
  !*** ./src/PlayerHistory.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : PlayerHistory.js
 *  Created : 28/04/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define, window */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ./Utils */ "./src/Utils.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, Utils) {
  /**
   *
   * PlayerHistory uses an array to store the list of projects and activities done by the user.
   * This class allows {@link JClicPlayer} objects to rewind a sequence or to go back to a caller menu.
   * @exports PlayerHistory
   * @class
   */
  class PlayerHistory {
    /**
     * PlayerHistory constructor
     * @param {JClicPlayer} player - The JClicPlayer associated to this history
     */
    constructor(player) {
      this.player = player
      this.sequenceStack = []
      if (window && window.history && player.options.browserHistory) {
        this.browserHistory = true;
        $(window).on('popstate', (ev) => {
          const state = ev.originalEvent.state;
          if (state)
            this.processPopStateEvent(state)
        })
      }
    }

    /**
     * Process the `state` object received in a `popstate` event
     * @param {PlayerHistory#HistoryElement} state - The previously stored state
     */
    processPopStateEvent(state) {
      Utils.log('info', 'Processing History popstate event with state:', state)
      this.processingPop = true;
      if (state.projectPath === this.player.project.path &&
        Utils.isEquivalent(state.fullZipPath, this.player.zip ? this.player.zip.fullZipPath : null))
        this.player.load(null, state.activity, null)
      else
        this.player.load(state.fullZipPath || state.projectPath, state.activity, null)
    }

    /**
     * Push a new entry on the window.History stack,
     * only when `browserHistory` is true and there is no `popstate` event in progress
     */
    pushBrowserHistory() {
      if (this.browserHistory) {

        if (this.processingPop) {
          // A 'popstate' event is currently being processed, so just clear this flag and return
          this.processingPop = false;
          return;
        }

        const
          ase = this.player.project.activitySequence,
          act = ase.currentAct,
          title = this.player.actPanel.act.name || 'No name',
          state = new this.HistoryElement(
            this.player.project.path,
            ase.getSequenceForElement(act),
            act,
            this.player.zip ? this.player.zip.fullZipPath : null)

        // Push a new history entry, or update the current one if it has no `state`
        if (!window.history.state)
          window.history.replaceState(state, title)
        else
          window.history.pushState(state, title)
      }
    }

    /**
     *
     * Counts the number of {@link PlayerHistory#HistoryElement HistoryElement} objects stored in
     * {@link PlayerHistory#sequenceStack sequenceStack}
     * @returns {number}
     */
    storedElementsCount() {
      return this.sequenceStack.length
    }

    /**
     *
     * Removes all elements from {@link PlayerHistory#sequenceStack sequenceStack}
     */
    clearHistory() {
      this.sequenceStack = [0]
    }

    /**
     * Adds the current project and activity to the top of the history stack.
     */
    push() {
      if (this.player.project !== null && this.player.project.path !== null) {
        const
          ase = this.player.project.activitySequence,
          act = ase.currentAct
        if (act >= 0) {
          if (this.sequenceStack.length > 0) {
            const last = this.sequenceStack[this.sequenceStack.length - 1]
            if (last.projectPath === this.player.project.path && last.activity === act)
              return
          }
          this.sequenceStack.push(
            new this.HistoryElement(
              this.player.project.path,
              ase.getSequenceForElement(act),
              act,
              this.player.zip ? this.player.zip.fullZipPath : null))
        }
      }
    }

    /**
     * Retrieves the {@link PlayerHistory#HistoryElement HistoryElement} placed at the top of the
     * stack (if any) and instructs {@link JClicPlayer} to load it. The obtained effect is to
     * "rewind" or "go back", usually to an activity that acts as a menu.
     * @returns {boolean}
     */
    pop() {
      // todo: check return value
      if (this.sequenceStack.length > 0) {
        const e = this.sequenceStack.pop()
        if (e.projectPath === this.player.project.path &&
          Utils.isEquivalent(e.fullZipPath, this.player.zip ? this.player.zip.fullZipPath : null))
          this.player.load(null, e.activity, null)
        else
          if (this.testMode && e.projectPath !== null && e.projectPath.length > 0)
            Utils.log('info', `At this point, a jump to "${e.projectPath}" should be performed.`)
          else
            this.player.load(e.fullZipPath || e.projectPath, e.activity, null)
      }
      return true
    }

    /**
     *
     * Processes the provided {@link JumpInfo} object, instructing {@link JClicPlayer} to go back,
     * stop or jump to another point in the sequence.
     * @param {JumpInfo} ji - The object to be processed
     * @param {boolean} allowReturn - When this parameter is `true`, the jump instructed by `ji` (if any)
     * will be recorded, thus allowing to return to the current activity.
     * @returns {boolean} - `true` if the jump can be processed without errors, `false` otherwise.
     */
    processJump(ji, allowReturn) {
      let result = false
      if (ji !== null && this.player.project !== null) {
        switch (ji.action) {
          case 'STOP':
            break
          case 'RETURN':
            if (this.sequenceStack.length > 0 || !this.player.options.returnAsExit) {
              result = this.pop()
              break
            }
          case 'EXIT':
            if (this.testMode)
              Utils.log('info', 'At this point, the program should exit.')
            else
              this.player.exit(ji.sequence)
            break
          case 'JUMP':
            if (!ji.sequence && !ji.projectPath) {
              const ase = this.player.project.activitySequence.getElement(ji.actNum, true)
              if (ase !== null) {
                if (allowReturn)
                  this.push()
                this.player.load(null, null, ase.activityName)
                result = true
              }
            } else {
              if (this.testMode && ji.projectPath !== null && ji.projectPath.length > 0) {
                Utils.log('info', `At this point, a jump to "${ji.projectPath}" should be performed.`)
              } else {
                result = this.jumpToSequence(ji.sequence,
                  ji.projectPath ? Utils.getPath(this.player.project.basePath, ji.projectPath) : null,
                  allowReturn)
              }
            }
            break
        }
      }
      return result
    }

    /**
     * Performs a jump to the specified sequence
     * @param {string} sequence - The {@link ActivitySequence} tag to jump to.
     * @param {?string} path - When not `null`, indicates a new project file that must be loaded.
     * Otherwise, the `sequence` parameter refers to a tag on the {@link ActivitySequence} of the
     * current project.
     * @param {boolean} allowReturn - When this parameter is `true`, the jump will be recorded, thus
     * allowing to return to the current activity.
     */
    jumpToSequence(sequence, path, allowReturn) {
      if (Utils.isNullOrUndef(sequence) && Utils.isNullOrUndef(path))
        return false
      if (Utils.isNullOrUndef(path))
        path = this.player.project.path
      if (this.sequenceStack.length > 0) {
        const e = this.sequenceStack[this.sequenceStack.length - 1]
        if (!Utils.isNullOrUndef(sequence) && path === e.projectPath) {
          let same = sequence === e.sequence
          if (path === this.player.project.path) {
            const ase = this.player.project.activitySequence.getElement(e.activity, false)
            same = ase !== null && sequence === ase.tag
          }
          if (same)
            return this.pop()
        }
      }
      if (allowReturn)
        this.push()
      if (path === this.player.project.path)
        this.player.load(null, sequence, null)
      else
        this.player.load(path, sequence, null)
      return true
    }
  }

  Object.assign(PlayerHistory.prototype, {
    /**
     * The {@link JClicPlayer} object to which this `PlayerHistory` belongs
     * @name PlayerHistory#player
     * @type {JClicPlayer} */
    player: null,
    /**
     * This is the main member of the class. PlayerHistory puts and retrieves
     * on it information about the proects and activities done by the current user.
     * @name PlayerHistory#sequenceStack
     * @type {PlayerHistory#HistoryElement[]} */
    sequenceStack: [],
    /**
     * When in test mode, jumps are only simulated.
     * @name PlayerHistory#testMode
     * @type {boolean} */
    testMode: false,
    /**
     * When true, JClic history is in sync with browser history
     * @name PlayerHistory#browserHistory
     * @type {boolean} */
    browserHistory: false,
    /**
     * When true, a window.history event is currently being processed, so window.pushState should not be performed
     * @name PlayerHistory#processingPop
     * @type {boolean} */
    processingPop: false,
    /**
     * Inner class used to store history elements.
     * @name PlayerHistory#HistoryElement
     * @class
     */
    HistoryElement: class {
      /**
       * HistoryElement constructor
       * @param {string} projectPath - The full path of the project file
       * @param {?string} sequence - The nearest sequence tag
       * @param {number} activity - The index of the current activity on the project's {@link ActivitySequence}
       * @param {?type} fullZipPath - If `projectPath` resides in a {@link external:JSZip JSZip} object,
       * the full path of the zip file.
       */
      constructor(projectPath, sequence, activity, fullZipPath) {
        this.projectPath = projectPath
        this.sequence = sequence
        this.activity = activity
        this.fullZipPath = fullZipPath
      }
    }
  })

  return PlayerHistory
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/Utils.js":
/*!**********************!*\
  !*** ./src/Utils.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : Utils.js
 *  Created : 01/04/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! clipboard-js */ "./node_modules/clipboard-js/clipboard.js"),
  __webpack_require__(/*! i18next/dist/cjs/i18next */ "./node_modules/i18next/dist/cjs/i18next.js"),
  __webpack_require__(/*! jszip */ "./node_modules/jszip/dist/jszip.min.js"),
  __webpack_require__(/*! jszip-utils */ "./node_modules/jszip-utils/lib/index.js"),
  __webpack_require__(/*! scriptjs */ "./node_modules/scriptjs/dist/script.js"),
  __webpack_require__(/*! webfontloader */ "./node_modules/webfontloader/webfontloader.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, clipboard, i18next, JSZip, JSZipUtils, ScriptJS, WebFont) {

  /**
   * Returns the two-digits text expression representing the given number (lesser than 100) zero-padded at left
   * Useful for representing hours, minutes and seconds
   * @param {number} val - The number to be processed
   * @returns {string}
   */
  const _zp = val => `0${val}`.slice(-2)

  /**
   *
   * Miscellaneous utility functions and constants
   * @exports Utils
   * @class
   * @abstract
   */
  const Utils = {
    /**
     * Exports third-party NPM packages used by JClic, so they become available to other scripts through
     * the global variable `JClicObject` (defined in {@link JClic})
     * @example <caption>Example usage of JSZip through JClicObject</caption>
     * var WebFont = window.JClicObject.Utils.pkg.WebFont;
     * WebFont.load({google: {families: ['Roboto']}});
     * @type: {object} */
    pkg: {
      ClipboardJS: clipboard,
      i18next: i18next,
      $: $,
      JSZip: JSZip,
      JSZipUtils: JSZipUtils,
      ScriptJS: ScriptJS,
      WebFont: WebFont,
    },
    /**
     * Function obtained from `i18next` that will return the translation of the provided key
     * into the current language.
     * The real function will be initiated by the constructor of `JClicPlayer`. Meanwhile, it returns always `key`.
     * @param {string} key - ID of the expression to be translated
     * @returns {string} - Translated text
     */
    getMsg: key => key,
    /**
     * List of valid verbosity levels
     * @const {string[]} */
    LOG_LEVELS: ['none', 'error', 'warn', 'info', 'debug', 'trace', 'all'],
    /**
     * Labels printed on logs for each message type
     * @const {string[]}
     */
    LOG_PRINT_LABELS: ['     ', 'ERROR', 'WARN ', 'INFO ', 'DEBUG', 'TRACE', 'ALL  '],
    /**
     * Current verbosity level. Default is 2 (only error and warning messages are printed)
     * @type {number} */
    LOG_LEVEL: 2, // warn
    /**
     * Options of the logging system
     * @type {object} */
    LOG_OPTIONS: {
      prefix: 'JClic',
      timestamp: true,
      popupOnErrors: false,
      chainTo: null,
      pipeTo: null,
    },
    /**
     * Initializes the global settings
     * @param {object} options - An object with global settings
     * @returns {object} The normalized `options` object
     */
    init: options => {
      options = Utils.normalizeObject(options)
      if (typeof options.logLevel !== 'undefined')
        Utils.setLogLevel(options.logLevel)
      if (typeof options.chainLogTo === 'function')
        Utils.LOG_OPTIONS.chainTo = options.chainLogTo
      if (typeof options.pipeLogTo === 'function')
        Utils.LOG_OPTIONS.pipeTo = options.pipeLogTo
      return options
    },
    /**
     * Establishes the current verbosity level of the logging system
     * @param {string} level - One of the valid strings in {@link Utils.LOG_LEVELS}
     */
    setLogLevel: level => {
      const log = Utils.LOG_LEVELS.indexOf(level)
      if (log >= 0)
        Utils.LOG_LEVEL = log
    },
    /**
     * Reports a new message to the logging system
     * @param {string} type - The type of message. Mus be `error`, `warn`, `info`, `debug` or `trace`.
     * @param {string} msg - The main message to be logged. Additional parameters can be added, like
     * in `console.log` (see: {@link https://developer.mozilla.org/en-US/docs/Web/API/Console/log})
     */
    log: function (type, msg) {
      const level = Utils.LOG_LEVELS.indexOf(type)
      const args = Array.prototype.slice.call(arguments)

      // Check if message should currently be logged
      if (level < 0 || level <= Utils.LOG_LEVEL) {
        if (Utils.LOG_OPTIONS.pipeTo)
          Utils.LOG_OPTIONS.pipeTo.apply(null, args)
        else {
          const mainMsg = `${Utils.LOG_OPTIONS.prefix || ''} ${Utils.LOG_PRINT_LABELS[level]} ${Utils.LOG_OPTIONS.timestamp ? Utils.getDateTime() : ''} ${msg}`
          console[level === 1 ? 'error' : level === 2 ? 'warn' : 'log'].apply(console, [mainMsg].concat(args.slice(2)))
          // Call chained logger, if anny
          if (Utils.LOG_OPTIONS.chainTo)
            Utils.LOG_OPTIONS.chainTo.apply(null, args)
        }
      }
    },
    /**
     * Gets a boolean value from a textual expression
     * @param {string} val - The value to be parsed (`true` for true, null or otherwise for `false`)
     * @param {boolean=} [defaultValue=false] - The default value to return when `val` is false
     * @returns {number}
     */
    getBoolean: (val, defaultValue = false) => val === 'true' ? true : val === 'false' ? false : defaultValue,
    /**
     * Gets a value from an given expression that can be `null`, `undefined` or empty string ('')
     * @param {?*} val - The expression to parse
     * @param {?*} [defaultValue=null] - The value to return when `val` is `null`, `''` or `undefined`
     * @returns {*}
     */
    getVal: (val, defaultValue = null) => (val === '' || val === null || typeof val === 'undefined') ? defaultValue : val,
    /**
     * Gets a number from a string or another number
     * @param {?*} val - The expression to parse
     * @param {number} [defaultValue=0] - The default value
     * @returns {number}
     */
    getNumber: (val, defaultValue) => Number(Utils.getVal(val, defaultValue)),
    /**
     * Gets the plain percent expression (without decimals) of the given value
     * @param {number} val - The value to be expressed as a percentile
     * @returns {string}
     */
    getPercent: val => `${Math.round(val * 100)}%`,
    /**
     * Returns a given time in [00h 00'00"] format
     * @param {number} millis - Amount of milliseconds to be processed
     * @returns {string}
     */
    getHMStime: millis => {
      const d = new Date(millis)
      const h = d.getUTCHours(), m = d.getUTCMinutes(), s = d.getUTCSeconds()
      return `${h ? h + 'h ' : ''}${h || m ? _zp(m) + '\'' : ''}${_zp(s)}"`
    },
    /**
     * Returns a formatted string with the provided date and time
     * @param {Date} date - The date to be formatted. When `null` or `undefined`, the current date will be used.
     * @returns {string}
     */
    getDateTime: (date = new Date()) => `${date.getFullYear()}/${_zp(date.getMonth() + 1)}/${_zp(date.getDate())} ${_zp(date.getHours())}:${_zp(date.getMinutes())}:${_zp(date.getSeconds())}`,
    /** @const {number} */
    'FALSE': 0,
    /** @const {number} */
    'TRUE': 1,
    /** @const {number} */
    'DEFAULT': 2,
    /**
     * Gets a numeric value (0, 1 or 2) from a set of possible values: `false`, `true` and `default`.
     * @param {?string} val - The text to be parsed
     * @param {?any} def - An optional default value
     * @returns {number}
     */
    getTriState: (val, def = Utils.DEFAULT) => val === 'true' ? Utils.TRUE : val === 'false' ? Utils.FALSE : def,
    /**
     * Returns a string with the given `tag` repeated n times
     * @param {string} tag - The tag to be repeated
     * @param {number} repeats - The number of times to repeat the tag
     * @returns {string}
     */
    fillString: (tag, repeats = 0) => Array(repeats).fill(tag).join(''),
    /**
     * Checks if the provided value is 'null' or 'undefined'.
     * @param {*} val - The value to be parsed
     * @returns {boolean}
     */
    isNullOrUndef: val => typeof val === 'undefined' || val === null,
    /**
     * Checks if two expressions are equivalent.
     * Returns `true` when both parameters are `null` or `undefined`, and also when both have
     * equivalent values.
     * @param {!*} a
     * @param {!*} b
     * @returns {boolean}
     */
    isEquivalent: (a, b) => (typeof a === 'undefined' || a === null) && (typeof b === 'undefined' || b === null) || a === b,
    /**
     * Reads paragraphs, identified by `<p></p>` elements, inside XML data
     * @param {object} xml - The DOM-XML element to be parsed
     * @returns {string}
     */
    getXmlText: xml => {
      let text = ''
      $(xml).children('p').each((_n, child) => { text += `<p>${child.textContent}</p>` })
      return text
    },
    /**
     * Parses the provided XML element node, returning a complex object
     * @param {object} xml - The root XML element to parse
     * @returns {object}
     */
    parseXmlNode: xml => {
      // Initialize the resulting object
      const result = {}
      // Direct copy of root element attributes as object properties
      if (xml.attributes)
        Utils.attrForEach(xml.attributes, (name, value) => result[name] = /^-?\d*$/.test(value) ? Number(value) : value)
      // Process children elements
      const keys = []
      const children = xml.children || xml.childNodes
      for (let n = 0; n < children.length; n++) {
        const child = children[n]
        // Recursive processing of children
        const ch = Utils.parseXmlNode(child)
        // Store the result into a temporary object named as the child node name,
        if (!result[child.nodeName]) {
          // Create object and save key for later processing
          result[child.nodeName] = {}
          keys.push(child.nodeName)
        }
        // Use 'id' (or an incremental number if 'id' is not set) as a key
        if (ch.id)
          result[child.nodeName][ch.id] = ch
        else {
          const n = Object.keys(result[child.nodeName]).length
          result[child.nodeName][n] = ch
        }
      }
      // Check temporary objects, converting it to an array, a single object or a complex object
      keys.forEach(k => {
        // Retrieve temporary object from `keys`
        const kx = Object.keys(result[k])
        // If all keys are numbers, convert object into an array (or leave it as a single object)
        if (!kx.find(kk => isNaN(kk))) {
          if (kx.length === 1)
            // Array with a single element. Leave it as a simple object:
            result[k] = result[k][0]
          else {
            // Object with numeric keys. Convert it to array:
            const arr = []
            kx.forEach(kk => arr.push(result[k][kk]))
            result[k] = arr
          }
        }
      })
      // Save text content, if any:
      if (children.length === 0 && xml.textContent)
        result.textContent = xml.textContent
      return result
    },
    /**
     * Creates a string suitable to be used in the 'style' attribute of HTML tags, filled with the
     * CSS attributes contained in the provided object.
     * @param {object} cssObj
     * @returns {string}
     */
    cssToString: cssObj => Object.keys(cssObj).reduce((s, key) => `${s}${key}:${cssObj[key]};`, ''),
    /**
     * Converts java-like color codes (like '0xRRGGBB') to valid CSS values like '#RRGGBB' or 'rgba(r,g,b,a)'
     * @param {string=} color - A color, as codified in Java
     * @param {string=} defaultColor - The default color to be used
     * @returns {string}
     */
    checkColor: (color, defaultColor = Utils.settings.BoxBase.BACK_COLOR) => {
      if (typeof color === 'undefined' || color === null)
        color = defaultColor
      color = color.replace('0x', '#')
      // Check for Alpha value
      if (color.charAt(0) === '#' && color.length > 7) {
        const alpha = parseInt(color.substring(1, 3), 16) / 255.0
        color = `rgba(${parseInt(color.substring(3, 5), 16)},${parseInt(color.substring(5, 7), 16)},${parseInt(color.substring(7, 9), 16)},${alpha})`
      }
      return color
    },
    /**
     * Checks if the provided color has an alpha value less than 1
     * @param {string} color - The color to be analyzed
     * @returns {boolean}
     */
    colorHasTransparency: color => {
      if (Utils.startsWith(color, 'rgba(')) {
        var alpha = parseInt(color.substr(color.lastIndexOf(',')))
        return typeof alpha === 'number' && alpha < 1.0
      }
      return false
    },
    /**
     * Clones the provided object
     * See: https://stackoverflow.com/questions/41474986/how-to-clone-a-javascript-es6-class-instance
     * @param {object} obj
     * @returns {object}
     */
    //cloneObject: obj => Object.assign(Object.create(Object.getPrototypeOf(obj)), obj),
    cloneObject: obj => $.extend(true, Object.create(Object.getPrototypeOf(obj)), obj),
    /**
     * Converts string values to number or boolean when needed
     * @param {Object} obj - The object to be processed
     * @returns {Object} - A new object with normalized content
     */
    normalizeObject: obj => {
      const result = {}
      if (obj)
        $.each(obj, (key, value) => {
          let s
          if (typeof value === 'string' && (s = value.trim().toLowerCase()) !== '')
            value = s === 'true' ? true : s === 'false' ? false : isNaN(s) ? value : Number(s)
          result[key] = value
        })
      return result
    },
    /**
     * Check if the given char is a separator
     * @param {string} ch - A string with a single character
     * @returns {boolean}
     */
    isSeparator: ch => ' .,;-|'.includes(ch),
    /**
     * Rounds `v` to the nearest multiple of `n`
     * @param {number} v
     * @param {number} n - Cannot be zero!
     * @returns {number}
     */
    roundTo: (v, n) => Math.round(v / n) * n,
    /**
     * Compares the provided answer against multiple valid options. These valid options are
     * concatenated in a string, separated by pipe chars (`|`). The comparing can be case sensitive.
     * @param {string} answer - The text to check against to
     * @param {string} check - String containing one or multiple options, separated by `|`
     * @param {boolean} [checkCase=false] - When true, the comparing will be case-sensitive
     * @param {boolean} [numeric=false] - When true, we are comparing numeric expressions
     * @returns {boolean}
     */
    compareMultipleOptions: (answer, check, checkCase = false, numeric = false) => {
      if (answer === null || answer.length === 0 || check === null || check.length === 0)
        return false
      if (!checkCase && !numeric)
        answer = answer.toUpperCase()
      answer = answer.trim()

      // Check for numeric digits in answer!
      numeric = numeric && /\d/.test(answer);

      for (let token of check.split('|')) {
        if (numeric) {
          if (Number.parseFloat(answer.replace(/,/, '.')) === Number.parseFloat(token.replace(/,/, '.')))
            return true
        }
        else if (answer === (checkCase ? token : token.toUpperCase()).trim())
          return true
      }
      return false
    },
    /**
     * Checks if the given string ends with the specified expression
     * @param {string} text - The string where to find the expression
     * @param {string} expr - The expression to search for.
     * @param {boolean=} trim - When `true`, the `text` string will be trimmed before check
     * @returns {boolean}
     */
    endsWith: (text = '', expr, trim) => typeof text === 'string' && (trim ? text.trim() : text).endsWith(expr),
    /**
     * Checks if the given string starts with the specified expression
     * @param {string} text - The string where to find the expression
     * @param {string} expr - The expression to search for.
     * @param {boolean=} trim - When `true`, the `text` string will be trimmed before check
     * @returns {boolean}
     */
    startsWith: (text = '', expr, trim) => typeof text === 'string' && (trim ? text.trim() : text).indexOf(expr) === 0,
    /**
     * Replaces all occurrences of the backslash character (`\`) by a regular slash (`/`)
     * This is useful to normalize bad path names present in some old JClic projects
     * @param {String} str - The string to be normalized
     * @returns {string}
     */
    nSlash: str => str ? str.replace(/\\/g, '/') : str,
    /**
     * Checks if the given expression is an absolute URL
     * @param {string} exp - The expression to be checked
     * @returns {boolean}
     */
    isURL: exp => /^(filesystem:)?(https?|file|data|ftps?):/i.test(exp),
    /**
     * Gets the base path of the given file path (absolute or full URL). This base path always ends
     * with `/`, meaning it can be concatenated with relative paths without adding a separator.
     * @param {type} path - The full path to be parsed
     * @returns {string}
     */
    getBasePath: path => {
      const p = path.lastIndexOf('/')
      return p >= 0 ? path.substring(0, p + 1) : ''
    },
    /**
     * Gets the full path of `file` relative to `basePath`
     * @param {string} file - The file name
     * @param {string=} path - The base path
     * @returns {string}
     */
    getRelativePath: (file, path) => (!path || path === '' || file.indexOf(path) !== 0) ? file : file.substr(path.length),
    /**
     * Gets the complete path of a relative or absolute URL, using the provided `basePath`
     * @param {string} basePath - The base URL
     * @param {string} path - The filename
     * @returns {string}
     */
    getPath: (basePath, path) => Utils.isURL(path) ? path : basePath + path,
    /**
     * Gets a promise with the complete path of a relative or absolute URL, using the provided `basePath`
     * @param {string} basePath - The base URL
     * @param {string} path - The filename
     * @param {?external:JSZip} zip - An optional {@link external:JSZip} object where to look
     * for the file
     * @returns {Promise}
     */
    getPathPromise: (basePath, path, zip) => {
      if (zip) {
        const fName = Utils.getRelativePath(basePath + path, zip.zipBasePath)
        if (zip.files[fName]) {
          return new Promise((resolve, reject) => {
            zip.file(fName).async('base64').then(data => {
              const ext = path.toLowerCase().split('.').pop()
              const mime = Utils.settings.MIME_TYPES[ext] || 'application/octet-stream'
              resolve(`data:${mime};base64,${data}`)
            }).catch(reject)
          })
        }
      }
      return Promise.resolve(Utils.getPath(basePath, path))
    },
    /**
     * Utility object that provides several methods to build simple and complex DOM objects
     * @type {object}
     */
    $HTML: {
      doubleCell: (a, b) => $('<tr/>').append($('<td/>').html(a)).append($('<td/>').html(b)),
      p: txt => $('<p/>').html(txt),
      td: (txt, className) => $('<td/>', className ? { class: className } : null).html(txt),
      th: (txt, className) => $('<th/>', className ? { class: className } : null).html(txt),
    },
    /**
     * Replaces `width`, `height` and `fill` attributes of a simple SVG image
     * with the provided values
     * @param {string} svg - The SVG image as XML string
     * @param {string=} width - Optional setting for "width" property
     * @param {string=} height - Optional setting for "height" property
     * @param {string=} fill - Optional setting for "fill" property
     * @returns {string} - The resulting svg code
     */
    getSvg: (svg, width, height, fill) => {
      if (width)
        svg = svg.replace(/width=\"\d*\"/, `width="${width}"`)
      if (height)
        svg = svg.replace(/height=\"\d*\"/, `height="${height}"`)
      if (fill)
        svg = svg.replace(/fill=\"[#A-Za-z0-9]*\"/, `fill="${fill}"`)
      return svg
    },
    /**
     * Encodes a svg expression into a {@link https://developer.mozilla.org/en-US/docs/Web/HTTP/data_URIs|data URI}
     * suitable for the `src` property of `img` elements, optionally changing its original size and fill values.
     * @param {string} svg - The SVG image as XML string
     * @param {string=} width - Optional setting for "width" property
     * @param {string=} height - Optional setting for "height" property
     * @param {string=} fill - Optional setting for "fill" property
     * @returns {string} - The resulting Data URI
     */
    svgToURI: (svg, width, height, fill) => 'data:image/svg+xml;base64,' + btoa(Utils.getSvg(svg, width, height, fill)),
    /**
     * Converts the given expression into a valid value for CSS size values
     * @param {string|number} exp - The expression to be evaluated (can be a valid value, `null` or `undefined`)
     * @param {Object} css - An optional Object where the resulting expression (if any) will be saved
     * @param {string} key - The key under which the result will be stored in `css`
     * @param {string} def - Default value to be used when `exp` is `null` or `undefined`
     * @returns {string} - A valid CSS value, or `null` if it can't be found. Default units are `px`
     */
    toCssSize: (exp, css, key, def) => {
      const result = typeof exp === 'undefined' || exp === null ? null : isNaN(exp) ? exp : `${exp}px`
      if (css && key && (result || def))
        css[key] = result !== null ? result : def
      return result
    },
    /**
     * Gets a clip of the give image data, in a URL base64 encoded format
     * @param {object} img - The binary data of the realized image, usually obtained from a {@link MediaBagElement}
     * @param {AWT.Rectangle} rect - A rectangle containing the requested clip
     * @returns {string} - The URL with the image clip, as a PNG file encoded in base64
     */
    getImgClipUrl: (img, rect) => {
      const canvas = document.createElement('canvas')
      canvas.width = rect.dim.width
      canvas.height = rect.dim.height
      const ctx = canvas.getContext('2d')
      let result = ''
      try {
        ctx.drawImage(img, rect.pos.x, rect.pos.y, rect.dim.width, rect.dim.height, 0, 0, rect.dim.width, rect.dim.height)
        result = canvas.toDataURL()
      } catch (err) {
        // catch 'tainted canvases may not be exported' and other errors
        Utils.log('error', err)
      }
      return result
    },
    /**
     * Finds the nearest `head` or root node of a given HTMLElement, useful to place `<style/>` elements when
     * the main component of JClic is behind a shadow-root.
     * This method will be replaced by a call to [Node.getRootNode()](https://developer.mozilla.org/en-US/docs/Web/API/Node/getRootNode)
     * when fully supported by all major browsers.
     * @param {Node=} el - The element from which to start the search
     * @returns {Node}
     */
    getRootHead: el => {
      if (el) {
        // Skip HTMLElements
        while (el.parentElement)
          el = el.parentElement
        // Get the parent node of the last HTMLElement
        if (el instanceof HTMLElement)
          el = el.parentNode || el
        // If the root node has a `head`, take it
        el = el['head'] || el
      }
      return el || document.head
    },
    /**
     * Appends a stylesheet element to the `head` or root node nearest to the given `HTMLElement`.
     * @param {String} css - The content of the stylesheet
     * @param {PlayStation=} ps - An optional `PlayStation` (currently a {@link JClicPlayer}) used as a base to find the root node
     * @returns {HTMLStyleElement} - The appended style element
     */
    appendStyleAtHead: (css, ps) => {
      const root = Utils.getRootHead(ps && ps.$topDiv ? ps.$topDiv[0] : null)
      const style = document.createElement('style')
      style.type = 'text/css'
      style.appendChild(document.createTextNode(css))
      return root.appendChild(style)
    },
    /**
     * Traverses all the attributes defined in an Element, calling a function with its name and value as a parameters
     * @param {external:NamedNodeMap} attributes - The [Element.attributes](https://developer.mozilla.org/en-US/docs/Web/API/Element/attributes)
     * object to be traversed
     * @param {function} callback - The function to be called for each [Attr](https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap)
     * object. It should take two parametres: `name` and `value`
     */
    attrForEach(attributes, callback) {
      for (let i = 0; i < attributes.length; i++)
        callback(attributes[i].name, attributes[i].value)
    },
    /**
     * Global constants
     * @const
     */
    settings: {
      // layout constants
      AB: 0, BA: 1, AUB: 2, BUA: 3,
      LAYOUT_NAMES: ['AB', 'BA', 'AUB', 'BUA'],
      DEFAULT_WIDTH: 400,
      DEFAULT_HEIGHT: 300,
      MINIMUM_WIDTH: 40,
      MINIMUM_HEIGHT: 40,
      DEFAULT_NAME: '---',
      DEFAULT_MARGIN: 8,
      DEFAULT_SHUFFLES: 31,
      DEFAULT_GRID_ELEMENT_SIZE: 20,
      MIN_CELL_SIZE: 10,
      //DEFAULT_BG_COLOR: '#D3D3D3', // LightGray
      DEFAULT_BG_COLOR: '#C0C0C0', // LightGray
      ACTIONS: {
        ACTION_MATCH: 'MATCH', ACTION_PLACE: 'PLACE',
        ACTION_WRITE: 'WRITE', ACTION_SELECT: 'SELECT', ACTION_HELP: 'HELP'
      },
      PREVIOUS: 0, MAIN: 1, END: 2, END_ERROR: 3, NUM_MSG: 4,
      MSG_TYPE: ['previous', 'initial', 'final', 'finalError'],
      RANDOM_CHARS: "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
      NUM_COUNTERS: 3,
      MAX_RECORD_LENGTH: 180,
      // BoxBase defaults
      BoxBase: {
        REDUCE_FONT_STEP: 1.0,
        MIN_FONT_SIZE: 8,
        STROKE: 1,
        AC_MARGIN: 6,
        //BACK_COLOR: 'lightgray',
        BACK_COLOR: '#C0C0C0',
        TEXT_COLOR: 'black',
        SHADOW_COLOR: 'gray',
        INACTIVE_COLOR: 'gray',
        ALTERNATIVE_COLOR: 'gray',
        BORDER_COLOR: 'black',
        BORDER_STROKE_WIDTH: 0.75,
        MARKER_STROKE_WIDTH: 2.75
      },
      FILE_TYPES: {
        image: 'gif,jpg,png,jpeg,bmp,ico,svg',
        audio: 'wav,mp3,ogg,oga,au,aiff,flac',
        video: 'avi,mov,mpeg,mp4,ogv,m4v,webm',
        font: 'ttf,otf,eot,woff,woff2',
        midi: 'mid,midi',
        anim: 'swf',
        // Used in custom skins
        xml: 'xml'
      },
      MIME_TYPES: {
        xml: 'text/xml',
        gif: 'image/gif',
        jpg: 'image/jpeg',
        jpeg: 'image/jpeg',
        png: 'image/png',
        bmp: 'image/bmp',
        svg: 'image/svg+xml',
        ico: 'image/x-icon',
        wav: 'audio/wav',
        mp3: 'audio/mpeg',
        mp4: 'video/mp4',
        m4v: 'video/mp4',
        ogg: 'audio/ogg',
        oga: 'audio/ogg',
        ogv: 'video/ogg',
        webm: 'video/webm',
        au: 'audio/basic',
        aiff: 'audio/x-aiff',
        flac: 'audio/flac',
        avi: 'video/avi',
        mov: 'video/quicktime',
        mpeg: 'video/mpeg',
        ttf: 'application/font-sfnt',
        otf: 'application/font-sfnt',
        eot: ' application/vnd.ms-fontobject',
        woff: 'application/font-woff',
        woff2: 'application/font-woff2',
        swf: 'application/x-shockwave-flash',
        mid: 'audio/midi',
        midi: 'audio/midi'
      },
      // Global settings susceptible to be modified
      COMPRESS_IMAGES: true,
      // Keyboard key codes
      VK: {
        LEFT: 37,
        UP: 38,
        RIGHT: 39,
        DOWN: 40
      },
      // Flag to indicate that we are running on a touch device
      TOUCH_DEVICE: false,
      // Amount of time (in milliseconds) to wait before a media resource is loaded
      LOAD_TIMEOUT: 10000,
      // Number of points to be calculated as polygon vertexs when simplifying bezier curves
      BEZIER_POINTS: 4,
      //
      // Check if canvas accessibility features are enabled
      // See: http://codepen.io/francesc/pen/amwvRp
      //
      // UPDATED May 2020: Detection removed since Canvas HitRegions have been deprecated
      // See: https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Hit_regions_and_accessibility
      //
      // CANVAS_HITREGIONS: typeof CanvasRenderingContext2D !== 'undefined' && typeof CanvasRenderingContext2D.prototype.addHitRegion === 'function',
      // CANVAS_HITREGIONS_FOCUS: typeof CanvasRenderingContext2D !== 'undefined' && typeof CanvasRenderingContext2D.prototype.drawFocusIfNeeded === 'function',
      //
      CANVAS_DRAW_FOCUS: typeof CanvasRenderingContext2D !== 'undefined' && typeof CanvasRenderingContext2D.prototype.drawFocusIfNeeded === 'function',
      // Whitespaces (see: https://emptycharacter.com/)
      WHITESPACES: ' \xA0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u2028\u205F\u3000',
    },
    //
    // Functions useful to deal with caret position in `contentEditable` DOM elements
    //
    /**
     * Gets the caret position within the given element. Thanks to
     * {@link http://stackoverflow.com/users/96100/tim-down|Tim Down} answers in:
     * {@link http://stackoverflow.com/questions/4811822/get-a-ranges-start-and-end-offsets-relative-to-its-parent-container}
     * and {@link http://stackoverflow.com/questions/6240139/highlight-text-range-using-javascript/6242538}
     * @param {object} element - A DOM element
     * @returns {number}
     */
    getCaretCharacterOffsetWithin: element => {
      let caretOffset = 0
      const doc = element.ownerDocument || element.document
      const win = doc.defaultView || doc.parentWindow
      let sel
      if (typeof win.getSelection !== "undefined") {
        sel = win.getSelection()
        if (sel.rangeCount > 0) {
          const range = win.getSelection().getRangeAt(0)
          const preCaretRange = range.cloneRange()
          preCaretRange.selectNodeContents(element)
          preCaretRange.setEnd(range.endContainer, range.endOffset)
          caretOffset = preCaretRange.toString().length
        }
      } else if ((sel = doc.selection) && sel.type !== "Control") {
        const textRange = sel.createRange()
        const preCaretTextRange = doc.body.createTextRange()
        preCaretTextRange.moveToElementText(element)
        preCaretTextRange.setEndPoint("EndToEnd", textRange)
        caretOffset = preCaretTextRange.text.length
      }
      return caretOffset
    },
    /**
     * Utility function called by {@link Utils~getCaretCharacterOffsetWithin}
     * @param {object} node - A text node
     * @returns {object[]}
     */
    getTextNodesIn: function (node) {
      const textNodes = []
      if (node.nodeType === 3) {
        textNodes.push(node)
      } else {
        const children = node.childNodes
        for (let i = 0, len = children.length; i < len; ++i) {
          textNodes.push.apply(textNodes, Utils.getTextNodesIn(children[i]))
        }
      }
      return textNodes
    },
    /**
     * Sets the selection range (or the cursor position, when `start` and `end` are the same) to a
     * specific position inside a DOM element.
     * @param {object} el - The DOM element where to set the cursor
     * @param {number} start - The start position of the selection (or cursor position)
     * @param {type} end - The end position of the selection. When null or identical to `start`,
     * indicates a cursor position.
     */
    setSelectionRange: (el, start, end) => {
      if (Utils.isNullOrUndef(end))
        end = start
      if (document.createRange && window.getSelection) {
        const range = document.createRange()
        range.selectNodeContents(el)
        const textNodes = Utils.getTextNodesIn(el)
        let foundStart = false
        let charCount = 0, endCharCount, textNode

        for (let i = 0; i < textNodes.length; i++) {
          textNode = textNodes[i]
          endCharCount = charCount + textNode.length
          if (!foundStart && start >= charCount &&
            (start < endCharCount ||
              start === endCharCount && i + 1 <= textNodes.length)) {
            range.setStart(textNode, start - charCount)
            foundStart = true
          }
          if (foundStart && end <= endCharCount) {
            range.setEnd(textNode, end - charCount)
            break
          }
          charCount = endCharCount
        }
        const sel = window.getSelection()
        sel.removeAllRanges()
        sel.addRange(range)
      } else if (document.selection && document.body.createTextRange) {
        const textRange = document.body.createTextRange()
        textRange.moveToElementText(el)
        textRange.collapse(true)
        textRange.moveEnd('character', end)
        textRange.moveStart('character', start)
        textRange.select()
      }
    }
  }

  return Utils
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/activities/associations/ComplexAssociation.js":
/*!***********************************************************!*\
  !*** ./src/activities/associations/ComplexAssociation.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : activities/associations/ComplexAssociation.js
 *  Created : 03/06/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ../../Activity */ "./src/Activity.js"),
  __webpack_require__(/*! ../../AWT */ "./src/AWT.js"),
  __webpack_require__(/*! ./SimpleAssociation */ "./src/activities/associations/SimpleAssociation.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, Activity, AWT, SimpleAssociation) {

  /**
   * This is a special case of {@link SimpleAssociation} where the elements of the 'secondary' panel
   * can have zero, one or more associated elements in the 'primary' panel.
   * @exports ComplexAssociation
   * @class
   * @extends SimpleAssociation
   */
  class ComplexAssociation extends SimpleAssociation {
    /**
     * ComplexAssociation constructor
     * @param {JClicProject} project - The JClic project to which this activity belongs
     */
    constructor(project) {
      super(project)
      this.useIdAss = true
    }

    /**
     * Loads this object settings from an XML element
     * @override
     * @param {external:jQuery} $xml - The jQuery XML element to parse
     */
    setProperties($xml) {
      super.setProperties($xml)
      this.abc['primary'].avoidAllIdsNull(this.abc['secondary'].getNumCells())
    }

    /**
     * Retrieves the minimum number of actions needed to solve this activity.
     * @override
     * @returns {number}
     */
    getMinNumActions() {
      if (this.invAss)
        return this.abc['secondary'].getNumCells()
      else
        return this.abc['primary'].getNumCells() - this.nonAssignedCells
    }
  }

  Object.assign(ComplexAssociation.prototype, {
    /**
     * Number of unassigned cells
     * @name ComplexAssociation#nonAssignedCells
     * @type {number} */
    nonAssignedCells: 0,
    /**
     * Uses cell's `idAss` field to check if pairings match
     * @name ComplexAssociation#useIdAss
     * @type {boolean} */
    useIdAss: false,
  })

  /**
   * The {@link ActivityPanel} where {@link ComplexAssociation} activities are played.
   * @class
   * @extends SimpleAssociationPanel
   */
  class ComplexAssociationPanel extends SimpleAssociation.Panel {
    /**
     * ComplexAssociationPanel prototype
     * @param {Activity} act - The {@link Activity} to which this Panel belongs
     * @param {JClicPlayer} ps - Any object implementing the methods defined in the
     * [PlayStation](http://projectestac.github.io/jclic/apidoc/edu/xtec/jclic/PlayStation.html)
     * Java interface.
     * @param {external:jQuery=} $div - The jQuery DOM element where this Panel will deploy
     */
    constructor(act, ps, $div) {
      super(act, ps, $div)
    }

    /**
     * Prepares the visual components of the activity
     * @override
     */
    buildVisualComponents() {
      super.buildVisualComponents()

      const
        abcA = this.act.abc['primary'],
        abcB = this.act.abc['secondary']

      if (abcA && abcB) {
        if (this.act.invAss)
          this.invAssCheck = Array(abcB.getNumCells()).fill(false)
        this.bgA.setDefaultIdAss()
        this.act.nonAssignedCells = 0
        this.bgA.cells.forEach(bx => {
          if (bx.idAss === -1) {
            this.act.nonAssignedCells++
            bx.switchToAlt(this.ps)
          }
        })
      }
    }

    /**
     * Checks if all inverse associations are done
     * @returns {boolean}
     */
    checkInvAss() {
      if (!this.act.invAss || !this.invAssCheck)
        return false
      return this.invAssCheck.every(chk => chk)
    }

    /**
     * Main handler used to process mouse, touch, keyboard and edit events
     * @override
     * @param {HTMLEvent} event - The HTML event to be processed
     * @returns {boolean=} - When this event handler returns `false`, jQuery will stop its
     * propagation through the DOM tree. See: {@link http://api.jquery.com/on}
     */
    processEvent(event) {
      if (this.bc && this.playing) {
        //
        // The [AWT.Point](AWT.html#Point) where the mouse or touch event has been originated
        // and two [ActiveBox](ActiveBox.html) pointers used for the [BoxConnector](BoxConnector.html)
        // `origin` and `dest` points.
        let p = null, bx1, bx2

        //
        // _touchend_ event don't provide pageX nor pageY information
        if (event.type === 'touchend') {
          p = this.bc.active ? this.bc.dest.clone() : new AWT.Point()
        } else {
          // Touch events can have more than one touch, so `pageX` must be obtained from `touches[0]`
          let
            x = event.originalEvent && event.originalEvent.touches ? event.originalEvent.touches[0].pageX : event.pageX,
            y = event.originalEvent && event.originalEvent.touches ? event.originalEvent.touches[0].pageY : event.pageY
          p = new AWT.Point(x - this.$div.offset().left, y - this.$div.offset().top)
        }

        let
          // Flag for tracking `mouseup` events
          up = false,
          // Flag for assuring that only one media plays per event (avoid event sounds overlapping
          // cell's media sounds)
          m = false,
          // Flag for tracking clicks on the background of grid A
          clickOnBg0 = false,
          // Array to be filled with actions to be executed at the end of event processing
          delayedActions = []

        switch (event.type) {
          case 'touchcancel':
            // Canvel movement
            if (this.bc.active)
              this.bc.end()
            break

          case 'mouseup':
            // Don't consider drag moves below 3 pixels. Can be a "trembling click"
            if (this.bc.active && p.distanceTo(this.bc.origin) <= 3) {
              break
            }
            up = true
          /* falls through */
          case 'touchend':
          case 'touchstart':
          case 'mousedown':
            if (!this.bc.active) {
              // New pairing starts
              //
              // Pairings can never start with a `mouseup` event
              if (up)
                break

              this.ps.stopMedia(1)
              // Determine if click was done on panel A or panel B
              bx1 = this.bgA ? this.bgA.findActiveBox(p) : null
              bx2 = this.bgB ? this.bgB.findActiveBox(p) : null
              if (bx1 && bx1.idAss !== -1 && (!this.act.useOrder || bx1.idOrder === this.currentItem) ||
                !this.act.useOrder && bx2) {
                // Start the [BoxConnector](BoxConnector.html)
                if (this.act.dragCells)
                  this.bc.begin(p, bx1 || bx2)
                else
                  this.bc.begin(p)
                // Play cell media or event sound
                m = m || (bx1 || bx2).playMedia(this.ps, delayedActions)
                if (!m)
                  this.playEvent('click')
              }

              // Move the focus to the opposite accessible group
              let bg = bx1 ? this.bgA : this.bgB
              if (bg && bg.$accessibleDiv) {
                bg = bx1 ? this.bgB : this.bgA
                if (bg && bg.$accessibleDiv)
                  bg.$accessibleDiv.focus()
              }
            } else {
              this.ps.stopMedia(1)
              // Pairing completed
              //
              // Find the active boxes behind `bc.origin` and `p`
              const origin = this.bc.origin
              this.bc.end()
              bx1 = this.bgA ? this.bgA.findActiveBox(origin) : null
              if (bx1) {
                bx2 = this.bgB ? this.bgB.findActiveBox(p) : null
              } else {
                bx2 = this.bgB ? this.bgB.findActiveBox(origin) : null
                if (bx2) {
                  bx1 = this.bgA ? this.bgA.findActiveBox(p) : null
                  clickOnBg0 = true
                }
              }
              // Check if the pairing was correct
              if (bx1 && bx2 && bx1.idAss !== -1 && !bx2.isInactive() && this.act.abc['secondary']) {
                const
                  src = bx1.getDescription(),
                  dest = bx2.getDescription(),
                  matchingDest = this.act.abc['secondary'].getActiveBoxContent(bx1.idAss)
                let ok = false

                if (bx1.idAss === bx2.idOrder || bx2.getContent().isEquivalent(matchingDest, true)) {
                  // Pairing was OK. Play media and disable involved cells
                  ok = true
                  bx1.idAss = -1
                  if (this.act.abc['solvedPrimary']) {
                    bx1.switchToAlt(this.ps)
                    m = m || bx1.playMedia(this.ps, delayedActions)
                  } else {
                    if (clickOnBg0)
                      m = m || bx1.playMedia(this.ps, delayedActions)
                    else
                      m = m || bx2.playMedia(this.ps, delayedActions)
                    bx1.clear()
                  }
                  if (this.act.invAss) {
                    this.invAssCheck[bx2.idOrder] = true
                    bx2.clear()
                  }
                  if (this.act.useOrder && this.bgA)
                    // Load next item
                    this.currentItem = this.bgA.getNextItem(this.currentItem)
                }
                // Check results and notify action
                if (this.bgA) {
                  const cellsPlaced = this.bgA.countCellsWithIdAss(-1)
                  this.ps.reportNewAction(this.act, 'MATCH', src, dest, ok, cellsPlaced - this.act.nonAssignedCells)
                  // End activity or play event sound
                  if (ok && (this.checkInvAss() || cellsPlaced === this.bgA.getNumCells()))
                    this.finishActivity(true)
                  else if (!m)
                    this.playEvent(ok ? 'actionOk' : 'actionError')
                }
              } else if (this.bgB && (clickOnBg0 && this.bgA && this.bgA.contains(p) || !clickOnBg0 && this.bgB.contains(p))) {
                // click on grid, out of cell
                const srcOut = bx1 ? bx1.getDescription() : bx2 ? bx2.getDescription() : 'null'
                this.ps.reportNewAction(this.act, 'MATCH', srcOut, 'null', false, this.bgB.countCellsWithIdAss(-1))
                this.playEvent('actionError')
              }
              this.update()

              // Move the focus to the `source` accessible group
              if (this.bgA && this.bgA.$accessibleDiv)
                this.bgA.$accessibleDiv.focus()
            }
            break

          case 'mousemove':
          case 'touchmove':
            this.bc.moveTo(p)
            break
        }
        delayedActions.forEach(action => action())
        event.preventDefault()
      }
    }
  }

  Object.assign(ComplexAssociationPanel.prototype, {
    /**
     * Array for storing checked associations
     * @name ComplexAssociation#Panel#invAssCheck
     * @type {boolean[]} */
    invAssCheck: null,
  })

  /**
   * Panel class associated to this type of activity: {@link ComplexAssociationPanel}
   * @type {class} */
  ComplexAssociation.Panel = ComplexAssociationPanel

  // Register class in Activity.prototype
  Activity.CLASSES['@associations.ComplexAssociation'] = ComplexAssociation

  return ComplexAssociation
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/activities/associations/SimpleAssociation.js":
/*!**********************************************************!*\
  !*** ./src/activities/associations/SimpleAssociation.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : activities/associations/SimpleAssociation.js
 *  Created : 02/06/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2016 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ../../Activity */ "./src/Activity.js"),
  __webpack_require__(/*! ../../boxes/ActiveBoxGrid */ "./src/boxes/ActiveBoxGrid.js"),
  __webpack_require__(/*! ../../boxes/BoxBag */ "./src/boxes/BoxBag.js"),
  __webpack_require__(/*! ../../boxes/BoxConnector */ "./src/boxes/BoxConnector.js"),
  __webpack_require__(/*! ../../AWT */ "./src/AWT.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, Activity, ActiveBoxGrid, BoxBag, BoxConnector, AWT) {

  /**
   * This class of {@link Activity} uses two panels (`primary` and `secondary`) formed by
   * {@link ActiveBox} objects filled with data stored in {@link ActiveBagContent} repositories.
   *
   * Both panels have the same number of elements, associated one-to-one. A third {@link ActiveBagContent}
   * can be used as alternative content, that will be revealed in the `primary` panel as the pairings
   * of its cells are solved.
   * @exports SimpleAssociation
   * @class
   * @extends Activity
   */
  class SimpleAssociation extends Activity {
    /**
     * SimpleAssociation constructor
     * @param {JClicProject} project - The JClic project to which this activity belongs
     */
    constructor(project) {
      super(project)
    }

    /**
     * Retrieves the minimum number of actions needed to solve this activity.
     * @override
     * @returns {number}
     */
    getMinNumActions() {
      return this.abc.primary.getNumCells()
    }

    /**
     * Whether or not the activity uses random to scramble internal components
     * @override
     * @returns {boolean}
     */
    hasRandom() {
      return true
    }

    /**
     * When `true`, the activity must always be scrambled
     * @override
     * @returns {boolean}
     */
    shuffleAlways() {
      return true
    }

    /**
     * Whether the activity allows the user to request help.
     * @override
     * @returns {boolean}
     */
    helpSolutionAllowed() {
      return true
    }
  }

  Object.assign(SimpleAssociation.prototype, {
    /**
     * When `true`, the cell's `idAss` field will be used to check pairing matches.
     * @name SimpleAssociation#useIdAss
     * @type {boolean} */
    useIdAss: false,
  })

  /**
   * The {@link ActivityPanel} where {@link SimpleAssociation} activities are played.
   * @class
   * @extends ActivityPanel
   */
  class SimpleAssociationPanel extends Activity.Panel {
    /**
     * SimpleAssociationPanel constructor
     * @param {Activity} act - The {@link Activity} to which this Panel belongs
     * @param {JClicPlayer} ps - Any object implementing the methods defined in the
     * [PlayStation](http://projectestac.github.io/jclic/apidoc/edu/xtec/jclic/PlayStation.html)
     * Java interface.
     * @param {external:jQuery=} $div - The jQuery DOM element where this Panel will deploy
     */
    constructor(act, ps, $div) {
      super(act, ps, $div)
    }

    /**
     * Performs miscellaneous cleaning operations
     * @override
     */
    clear() {
      if (this.bgA) {
        this.bgA.end()
        this.bgA = null
      }
      if (this.bgB) {
        this.bgB.end()
        this.bgB = null
      }
    }

    /**
     * Prepares the visual components of the activity
     * @override
     */
    buildVisualComponents() {
      if (this.firstRun)
        super.buildVisualComponents()

      this.clear()

      const
        abcA = this.act.abc['primary'],
        abcB = this.act.abc['secondary'],
        solved = this.act.abc['solvedPrimary']

      if (abcA && abcB) {
        if (abcA.imgName) {
          abcA.setImgContent(this.act.project.mediaBag, null, false)
          if (abcA.animatedGifFile && !abcA.shaper.rectangularShapes && !this.act.scramble['primary'])
            this.$animatedBg = $('<span/>').css({
              'background-image': `url(${abcA.animatedGifFile})`,
              'background-position': 'center',
              'background-repeat': 'no-repeat',
              position: 'absolute'
            }).appendTo(this.$div)
        }

        if (abcB.imgName) {
          abcB.setImgContent(this.act.project.mediaBag, null, false)
          if (abcB.animatedGifFile && !abcB.shaper.rectangularShapes && !this.act.scramble['secondary'])
            this.$animatedBgB = $('<span/>').css({
              'background-image': `url(${abcB.animatedGifFile})`,
              'background-position': 'center',
              'background-repeat': 'no-repeat',
              position: 'absolute'
            }).appendTo(this.$div)
        }

        if (solved && solved.imgName)
          solved.setImgContent(this.act.project.mediaBag, null, false)

        if (this.act.acp !== null) {
          const contentKit = [abcA, abcB]
          if (solved)
            contentKit.push(solved)
          this.act.acp.generateContent(abcA.nch, abcA.ncw, contentKit, false)
        }

        this.bgA = ActiveBoxGrid.createEmptyGrid(null, this, this.act.margin, this.act.margin, abcA)
        this.bgB = ActiveBoxGrid.createEmptyGrid(null, this, this.act.margin, this.act.margin, abcB)

        this.bgA.setContent(abcA, solved ? solved : null)
        if (this.$animatedBg)
          this.bgA.setCellAttr('tmpTrans', true)

        this.bgB.setContent(abcB)
        if (this.$animatedBgB)
          this.bgB.setCellAttr('tmpTrans', true)

        this.bgA.accessibleText = this.ps.getMsg('source')
        this.bgB.accessibleText = this.ps.getMsg('target')

        this.bgA.setVisible(true)
        this.bgB.setVisible(true)
      }
    }

    /**
     * Basic initialization procedure
     * @override
     */
    initActivity() {
      super.initActivity()
      if (!this.firstRun)
        this.buildVisualComponents()
      else
        this.firstRun = false

      if (this.bgA && this.bgB) {
        // Scramble cells
        const scrambleArray = []
        if (this.act.scramble.primary)
          scrambleArray.push(this.bgA)
        if (this.act.scramble.secondary)
          scrambleArray.push(this.bgB)
        if (scrambleArray.length > 0) {
          this.shuffle(scrambleArray, true, true)
        }

        if (this.useOrder)
          this.currentItem = this.bgA.getNextItem(-1)

        this.invalidate().update()
        this.setAndPlayMsg('initial', 'start')
        this.playing = true
      }
    }

    /**
     * Updates the graphic content of this panel.
     * This method will be called from {@link AWT.Container#update} when needed.
     * @override
     * @param {AWT.Rectangle} dirtyRegion - Specifies the area to be updated. When `null`,
     * it's the whole panel.
     */
    updateContent(dirtyRegion) {
      super.updateContent(dirtyRegion)
      if (this.bgA && this.bgB && this.$canvas) {
        const
          canvas = this.$canvas.get(-1),
          ctx = canvas.getContext('2d')
        if (!dirtyRegion)
          dirtyRegion = new AWT.Rectangle(0, 0, canvas.width, canvas.height)
        ctx.clearRect(dirtyRegion.pos.x, dirtyRegion.pos.y, dirtyRegion.dim.width, dirtyRegion.dim.height)
        this.bgA.update(ctx, dirtyRegion)
        this.bgB.update(ctx, dirtyRegion)
      }
      return this
    }

    /**
     * Sets the real dimension of this panel.
     * @override
     * @param {AWT.Dimension} preferredMaxSize - The maximum surface available for the activity panel
     * @returns {AWT.Dimension}
     */
    setDimension(preferredMaxSize) {
      return !this.bgA || !this.bgB || this.getBounds().equals(preferredMaxSize) ?
        preferredMaxSize :
        BoxBag.layoutDouble(preferredMaxSize, this.bgA, this.bgB, this.act.boxGridPos, this.act.margin)
    }

    /**
     * Sets the size and position of this activity panel
     * @override
     * @param {AWT.Rectangle} rect
     */
    setBounds(rect) {
      if (this.$canvas)
        this.$canvas.remove()

      super.setBounds(rect)
      if (this.bgA || this.bgB) {
        // Create the main canvas
        this.$canvas = $(`<canvas width="${rect.dim.width}" height="${rect.dim.height}"/>`).css({
          position: 'absolute',
          top: 0,
          left: 0
        })
        // Resize animated gif background A
        if (this.$animatedBg && this.bgA) {
          const bgRect = this.bgA.getBounds()
          this.$animatedBg.css({
            left: bgRect.pos.x,
            top: bgRect.pos.y,
            width: bgRect.dim.width + 'px',
            height: bgRect.dim.height + 'px',
            'background-size': `${bgRect.dim.width}px ${bgRect.dim.height}px`
          })
        }
        // Resize animated gif background B
        if (this.$animatedBgB && this.bgB) {
          const bgRectB = this.bgB.getBounds()
          this.$animatedBgB.css({
            left: bgRectB.pos.x,
            top: bgRectB.pos.y,
            width: bgRectB.dim.width + 'px',
            height: bgRectB.dim.height + 'px',
            'background-size': `${bgRectB.dim.width}px ${bgRectB.dim.height}px`
          })
        }
        this.$div.append(this.$canvas)

        // Create a [BoxConnector](BoxConnector.html) and attach it to the canvas context
        this.bc = new BoxConnector(this, this.$canvas.get(-1).getContext('2d'))

        // Repaint all
        this.invalidate().update()
      }
    }

    /**
     * Builds the accessible components needed for this ActivityPanel
     * This method is called when all main elements are placed and visible, when the activity is ready
     * to start or when resized.
     * @override
     */
    buildAccessibleComponents() {
      if (this.$canvas && this.accessibleCanvas) {
        super.buildAccessibleComponents()
        if (this.bgA)
          this.bgA.buildAccessibleElements(this.$canvas, this.$div, 'mousedown')
        if (this.bgB)
          this.bgB.buildAccessibleElements(this.$canvas, this.$div, 'mousedown')
      }
    }

    /**
     * Main handler used to process mouse, touch, keyboard and edit events
     * @override
     * @param {HTMLEvent} event - The HTML event to be processed
     * @returns {boolean=} - When this event handler returns `false`, jQuery will stop its
     * propagation through the DOM tree. See: {@link http://api.jquery.com/on}
     */
    processEvent(event) {
      if (this.bc && this.playing) {
        //
        // The [AWT.Point](AWT.html#Point) where the mouse or touch event has been originated
        // and two [ActiveBox](ActiveBox.html) pointers used for the [BoxConnector](BoxConnector.html)
        // `origin` and `dest` points.
        let p = null, bx1, bx2
        //
        // _touchend_ event don't provide pageX nor pageY information
        if (event.type === 'touchend')
          p = this.bc.active ? this.bc.dest.clone() : new AWT.Point()
        else {
          // Touch events can have more than one touch, so `pageX` must be obtained from `touches[0]`
          const
            x = event.originalEvent && event.originalEvent.touches ? event.originalEvent.touches[0].pageX : event.pageX,
            y = event.originalEvent && event.originalEvent.touches ? event.originalEvent.touches[0].pageY : event.pageY
          p = new AWT.Point(x - this.$div.offset().left, y - this.$div.offset().top)
        }

        // Flag for tracking `mouseup` events
        let up = false,
          // Flag for assuring that only one media plays per event (avoid event sounds overlapping
          // cell's media sounds)
          m = false,
          // Flag for tracking clicks on the background of grid A
          clickOnBg0 = false,
          // Array to be filled with actions to be executed at the end of event processing
          delayedActions = []

        switch (event.type) {
          case 'touchcancel':
            // Canvel movement
            if (this.bc.active)
              this.bc.end()
            break

          case 'mouseup':
            // Don't consider drag moves below 3 pixels. Can be a "trembling click"
            if (this.bc.active && p.distanceTo(this.bc.origin) <= 3) {
              break
            }
            up = true
          /* falls through */
          case 'touchend':
          case 'touchstart':
          case 'mousedown':
            if (!this.bc.active) {
              // A new pairing starts
              //
              // Pairings can never start with a `mouseup` event
              if (up)
                break

              this.ps.stopMedia(1)
              //
              // Determine if click was done on panel A or panel B
              bx1 = this.bgA ? this.bgA.findActiveBox(p) : null
              bx2 = this.bgB ? this.bgB.findActiveBox(p) : null
              if (bx1 && (!this.act.useOrder || bx1.idOrder === this.currentItem) ||
                !this.act.useOrder && bx2 && bx2.idAss !== -1) {
                // Start the [BoxConnector](BoxConnector.html)
                if (this.act.dragCells)
                  this.bc.begin(p, bx1 || bx2)
                else
                  this.bc.begin(p)
                // Play cell media or event sound
                m = m || (bx1 || bx2).playMedia(this.ps, delayedActions)
                if (!m)
                  this.playEvent('click')

                // Move the focus to the opposite accessible group
                let bg = bx1 ? this.bgA : this.bgB
                if (bg && bg.$accessibleDiv) {
                  bg = bx1 ? this.bgB : this.bgA
                  if (bg && bg.$accessibleDiv)
                    bg.$accessibleDiv.focus()
                }
              }
            } else {
              this.ps.stopMedia(1)
              // Pairing completed
              //
              // Find the active boxes behind `bc.origin` and `p`
              const origin = this.bc.origin
              this.bc.end()
              bx1 = this.bgA ? this.bgA.findActiveBox(origin) : null
              if (bx1) {
                bx2 = this.bgB ? this.bgB.findActiveBox(p) : null
              } else {
                bx2 = this.bgB ? this.bgB.findActiveBox(origin) : null
                if (bx2) {
                  bx1 = this.bgA ? this.bgA.findActiveBox(p) : null
                  clickOnBg0 = true
                }
              }
              // Check if the pairing was correct
              if (bx1 && bx2 && bx1.idAss !== -1 && bx2.idAss !== -1 && this.act.abc['secondary']) {
                let ok = false
                const
                  src = bx1.getDescription(),
                  dest = bx2.getDescription(),
                  matchingDest = this.act.abc['secondary'].getActiveBoxContent(bx1.idOrder)
                if (bx1.idOrder === bx2.idOrder || bx2.getContent().isEquivalent(matchingDest, true)) {
                  // Pairing is OK. Play media and disable involved cells
                  ok = true
                  bx1.idAss = -1
                  bx2.idAss = -1
                  if (this.act.abc['solvedPrimary']) {
                    bx1.switchToAlt(this.ps)
                    m = m || bx1.playMedia(this.ps, delayedActions)
                  } else {
                    if (clickOnBg0)
                      m = m || bx1.playMedia(this.ps, delayedActions)
                    else
                      m = m || bx2.playMedia(this.ps, delayedActions)
                    bx1.clear()
                  }
                  bx2.clear()

                  if (this.act.useOrder && this.bgA)
                    // Load next item
                    this.currentItem = this.bgA.getNextItem(this.currentItem)
                }
                // Check results and notify action
                const cellsPlaced = this.bgB ? this.bgB.countCellsWithIdAss(-1) : 0
                this.ps.reportNewAction(this.act, 'MATCH', src, dest, ok, cellsPlaced)
                // End activity or play event sound
                if (ok && cellsPlaced === this.bgB.getNumCells())
                  this.finishActivity(true)
                else if (!m)
                  this.playEvent(ok ? 'actionOk' : 'actionError')
              }
              this.update()

              // Move the focus to the `source` accessible group
              if (this.bgA && this.bgA.$accessibleDiv)
                this.bgA.$accessibleDiv.focus()
            }
            break

          case 'mousemove':
          case 'touchmove':
            this.bc.moveTo(p)
            break
        }
        delayedActions.forEach(action => action())
        event.preventDefault()
      }
    }
  }

  Object.assign(SimpleAssociationPanel.prototype, {
    /**
     * The {@link ActiveBoxBag} object containing the information to be displayed in the `primary` panel
     * @name SimpleAssociationPanel#bgA
     * @type {ActiveBoxBag} */
    bgA: null,
    /**
     * The {@link ActiveBoxBag} object containing the information to be displayed in the `secondary` panel
     * @name SimpleAssociationPanel#bgB
     * @type {ActiveBoxBag} */
    bgB: null,
    /**
     * The box connector
     * @name SimpleAssociationPanel#bc
     * @type {BoxConnector} */
    bc: null,
    /**
     * List of mouse, touch and keyboard events intercepted by this panel
     * @override
     * @name SimpleAssociationPanel#events
     * @type {string[]} */
    events: ['mousedown', 'mouseup', 'mousemove', 'touchstart', 'touchend', 'touchmove', 'touchcancel'],
  })

  /**
   * Panel class associated to this type of activity: {@link SimpleAssociationPanel}
   * @type {class} */
  SimpleAssociation.Panel = SimpleAssociationPanel

  //
  // Register class in Activity.prototype
  Activity.CLASSES['@associations.SimpleAssociation'] = SimpleAssociation

  return SimpleAssociation
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/activities/memory/MemoryGame.js":
/*!*********************************************!*\
  !*** ./src/activities/memory/MemoryGame.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : activities/memory/MemoryGame.js
 *  Created : 04/06/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ../../Activity */ "./src/Activity.js"),
  __webpack_require__(/*! ../../boxes/ActiveBoxGrid */ "./src/boxes/ActiveBoxGrid.js"),
  __webpack_require__(/*! ../../boxes/BoxBag */ "./src/boxes/BoxBag.js"),
  __webpack_require__(/*! ../../boxes/BoxConnector */ "./src/boxes/BoxConnector.js"),
  __webpack_require__(/*! ../../AWT */ "./src/AWT.js"),
  __webpack_require__(/*! ../../shapers/Rectangular */ "./src/shapers/Rectangular.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, Activity, ActiveBoxGrid, BoxBag, BoxConnector, AWT, Rectangular) {

  /**
   * This class of {@link Activity} shows a panel with duplicate {@link ActiveBox} objects initially
   * hidden and scrambled. To complete the activity, all object pairs must be found. Only two objects
   * are revealed in every move, so the user must remember the content of each cell.
   *
   * The cell pairs can have identical content, defined in the `primary` {@link ActiveBagContent} of
   * the activity, or two different contents. In this case, the `secondary` bag elements will have
   * content related to each `primary` element.
   * @exports MemoryGame
   * @class
   * @extends Activity
   */
  class MemoryGame extends Activity {
    /**
     * MemoryGame constructor
     * @param {JClicProject} project - The {@link JClicProject} to which this activity belongs
     */
    constructor(project) {
      super(project)
    }

    /**
     * Retrieves the minimum number of actions needed to solve this activity.
     * @override
     * @returns {number}
     */
    getMinNumActions() {
      return this.abc.primary.getNumCells()
    }

    /**
     * Whether or not the activity uses random to scramble internal components
     * @override
     * @returns {boolean}
     */
    hasRandom() {
      return true
    }

    /**
     * When `true`, the activity must always be scrambled
     * @override
     * @returns {boolean}
     */
    shuffleAlways() {
      return true
    }
  }

  /**
   * The {@link ActivityPanel} where {@link MemoryGame} activities are played.
   * @class
   * @extends ActivityPanel
   */
  class MemoryGamePanel extends Activity.Panel {
    /**
     * MemoryGamePanel constructor
     * @param {Activity} act - The {@link Activity} to which this Panel belongs
     * @param {JClicPlayer} ps - Any object implementing the methods defined in the
     * [PlayStation](http://projectestac.github.io/jclic/apidoc/edu/xtec/jclic/PlayStation.html)
     * Java interface.
     * @param {external:jQuery=} $div - The jQuery DOM element where this Panel will deploy
     */
    constructor(act, ps, $div) {
      super(act, ps, $div)
    }

    /**
     * Miscellaneous cleaning operations
     * @override
     */
    clear() {
      if (this.bg) {
        this.bg.end()
        this.bg = null
      }
    }

    /**
     * Prepares the visual components of the activity
     * @override
     */
    buildVisualComponents() {
      if (this.firstRun)
        super.buildVisualComponents()
      this.clear()

      const
        abcA = this.act.abc['primary'],
        abcB = this.act.abc['secondary']

      if (abcA) {
        if (abcA.imgName)
          abcA.setImgContent(this.act.project.mediaBag, null, false)
        if (abcB && abcB.imgName)
          abcB.setImgContent(this.act.project.mediaBag, null, false)
        if (this.act.acp !== null) {
          const contentKit = [abcA]
          if (abcB)
            contentKit.push(abcB)
          this.act.acp.generateContent(abcA.nch, abcA.ncw, contentKit, false)
        }

        let ncw = abcA.ncw, nch = abcA.nch
        if (this.act.boxGridPos === 'AB' || this.act.boxGridPos === 'BA')
          ncw *= 2
        else
          nch *= 2

        this.bg = new ActiveBoxGrid(null, this, abcA.bb,
          this.act.margin, this.act.margin,
          abcA.w * ncw, abcA.h * nch, new Rectangular(ncw, nch))

        const nc = abcA.getNumCells()
        this.bg.setBorder(abcA.border)
        this.bg.setContent(abcA, null, 0, 0, nc)
        this.bg.setContent(abcB ? abcB : abcA, null, 0, nc, nc)
        for (let i = 0; i < 2; i++) {
          for (let j = 0; j < nc; j++) {
            const bx = this.bg.getActiveBox(i * nc + j)
            bx.idAss = j
            bx.setInactive(true)
          }
        }
        this.bg.setVisible(true)
      }
    }

    /**
     * Basic initialization procedure
     * @override
     */
    initActivity() {
      super.initActivity()

      if (!this.firstRun)
        this.buildVisualComponents()
      else
        this.firstRun = false

      if (this.bg) {
        this.shuffle([this.bg], true, true)
        this.invalidate().update()
        this.setAndPlayMsg('initial', 'start')
        this.playing = true
      }
    }

    /**
     * Updates the graphic content of this panel.
     * This method will be called from {@link AWT.Container#update} when needed.
     * @override
     * @param {AWT.Rectangle} dirtyRegion - Specifies the area to be updated. When `null`,
     * it's the whole panel.
     */
    updateContent(dirtyRegion) {
      super.updateContent(dirtyRegion)
      if (this.bg && this.$canvas) {
        const
          canvas = this.$canvas.get(-1),
          ctx = canvas.getContext('2d')
        if (!dirtyRegion)
          dirtyRegion = new AWT.Rectangle(0, 0, canvas.width, canvas.height)
        ctx.clearRect(dirtyRegion.pos.x, dirtyRegion.pos.y, dirtyRegion.dim.width, dirtyRegion.dim.height)
        this.bg.update(ctx, dirtyRegion)
      }
      return this
    }

    /**
     * Sets the real dimension of this panel.
     * @override
     * @param {AWT.Dimension} preferredMaxSize - The maximum surface available for the activity panel
     * @returns {AWT.Dimension}
     */
    setDimension(preferredMaxSize) {
      if (!this.bg || this.getBounds().equals(preferredMaxSize))
        return preferredMaxSize
      return BoxBag.layoutSingle(preferredMaxSize, this.bg, this.act.margin)
    }

    /**
     * Sets the size and position of this activity panel
     * @override
     * @param {AWT.Rectangle} rect
     */
    setBounds(rect) {
      if (this.$canvas)
        this.$canvas.remove()

      super.setBounds(rect)
      if (this.bg) {
        // Create the main canvas
        this.$canvas = $(`<canvas width="${rect.dim.width}" height="${rect.dim.height}"/>`).css({
          position: 'absolute',
          top: 0,
          left: 0
        })
        this.$div.append(this.$canvas)

        // Create a [BoxConnector](BoxConnector.html) and attach it to the canvas context
        this.bc = new BoxConnector(this, this.$canvas.get(-1).getContext('2d'))

        // Repaint all
        this.invalidate().update()
      }
    }

    /**
     * Builds the accessible components needed for this ActivityPanel
     * This method is called when all main elements are placed and visible, when the activity is ready
     * to start or when resized.
     * @override
     */
    buildAccessibleComponents() {
      if (this.$canvas && this.accessibleCanvas && this.bg) {
        super.buildAccessibleComponents()
        this.bg.setCellAttr('accessibleAlwaysActive', true)
        this.bg.buildAccessibleElements(this.$canvas, this.$div, 'mousedown')
      }
    }

    /**
     * Main handler used to process mouse, touch, keyboard and edit events
     * @override
     * @param {HTMLEvent} event - The HTML event to be processed
     * @returns {boolean=} - When this event handler returns `false`, jQuery will stop its
     * propagation through the DOM tree. See: {@link http://api.jquery.com/on}
     */
    processEvent(event) {
      if (this.bc && this.playing) {
        //
        // The [AWT.Point](AWT.html#Point) where the mouse or touch event has been originated
        let p = null
        //
        // Two [ActiveBox](ActiveBox.html) pointers used for the [BoxConnector](BoxConnector.html)
        // `origin` and `dest` points.
        let bx1, bx2,
          // Array to be filled with actions to be executed at the end of event processing
          delayedActions = []
        //
        // _touchend_ event don't provide pageX nor pageY information
        if (event.type === 'touchend')
          p = this.bc.active ? this.bc.dest.clone() : new AWT.Point()
        else {
          // Touch events can have more than one touch, so `pageX` must be obtained from `touches[0]`
          const
            x = event.originalEvent && event.originalEvent.touches ? event.originalEvent.touches[0].pageX : event.pageX,
            y = event.originalEvent && event.originalEvent.touches ? event.originalEvent.touches[0].pageY : event.pageY
          p = new AWT.Point(x - this.$div.offset().left, y - this.$div.offset().top)
        }

        // Flag for tracking `mouseup` events
        let up = false
        switch (event.type) {
          case 'touchcancel':
            // Canvel movement
            if (this.bc.active)
              this.bc.end()
            break

          case 'mouseup':
          case 'touchend':
            // Don't consider drag moves below 3 pixels. Can be a "trembling click"
            if (this.bc.active && p.distanceTo(this.bc.origin) <= 3)
              break

            up = true
          /* falls through */
          case 'touchstart':
          case 'mousedown':
            if (!this.bc.active) {
              // New pairing starts
              //
              // Pairings can never start with a `mouseup` event
              if (up)
                break

              this.ps.stopMedia(1)
              //
              // Find the ActiveBox behind the clicked point
              bx1 = this.bg ? this.bg.findActiveBox(p) : null
              if (bx1 && bx1.idAss !== -1) {
                // Play cell media or event sound
                if (!bx1.playMedia(this.ps, delayedActions))
                  this.playEvent('click')
                bx1.setInactive(false)
                // Start the [BoxConnector](BoxConnector.html)
                this.update()
                if (this.act.dragCells)
                  this.bc.begin(p, bx1)
                else
                  this.bc.begin(p)
              }
            } else {
              this.ps.stopMedia(1)
              // Pairing completed
              //
              // Find the active boxes behind `bc.origin` and `p`
              if (this.act.dragCells)
                bx1 = this.bc.bx
              else
                bx1 = this.bg ? this.bg.findActiveBox(this.bc.origin) : null
              this.bc.end()
              bx2 = this.bg ? this.bg.findActiveBox(p) : null
              //
              // Check if the pairing was OK
              if (bx1 && bx1.idAss !== -1 && bx2 && bx2.idAss !== -1) {
                if (bx1 !== bx2) {
                  let ok = false
                  if (bx1.idAss === bx2.idAss ||
                    bx1.getContent().isEquivalent(bx2.getContent(), true)) {
                    ok = true
                    bx1.idAss = -1
                    bx1.setInactive(false)
                    bx2.idAss = -1
                    bx2.setInactive(false)
                  } else {
                    bx1.setInactive(true)
                    if (this.act.dragCells)
                      bx2.setInactive(true)
                    else {
                      bx2.setInactive(false)
                      // Start the [BoxConnector](BoxConnector.html)
                      this.update()
                      if (this.act.dragCells)
                        this.bc.begin(p, bx1)
                      else
                        this.bc.begin(p)
                    }
                  }
                  let m = bx2.playMedia(this.ps, delayedActions)
                  if (this.bg) {
                    const cellsAtPlace = this.bg.countCellsWithIdAss(-1)
                    this.ps.reportNewAction(this.act, 'MATCH', bx1.getDescription(), bx2.getDescription(), ok, cellsAtPlace / 2)
                    if (ok && cellsAtPlace === this.bg.getNumCells())
                      this.finishActivity(true)
                    else if (!m)
                      this.playEvent(ok ? 'actionOk' : 'actionError')
                  }
                } else {
                  this.playEvent('CLICK')
                  bx1.setInactive(true)
                }
              } else if (bx1 !== null)
                bx1.setInactive(true)

              this.invalidate().update()
            }
            break

          case 'mousemove':
          case 'touchmove':
            this.bc.moveTo(p)
            break
        }
        delayedActions.forEach(action => action())
        event.preventDefault()
      }
    }
  }

  Object.assign(MemoryGamePanel.prototype, {
    /**
     * The {@link ActiveBoxBag} containing the information to be displayed.
     * @name MemoryGamePanel#bg
     * @type {ActiveBoxBag} */
    bg: null,
    /**
     * The {@link BoxConnector} used to reveal pairs of cells
     * @name MemoryGamePanel#bc
     * @type {BoxConnector} */
    bc: null,
    /**
     * List of mouse, touch and keyboard events intercepted by this panel
     * @override
     * @name MemoryGamePanel#events
     * @type {string[]} */
    events: ['mousedown', 'mouseup', 'mousemove', 'touchstart', 'touchend', 'touchmove', 'touchcancel'],
  })

  /**
   * Panel class associated to this type of activity: {@link MemoryGamePanel}
   * @type {class} */
  MemoryGame.Panel = MemoryGamePanel

  // Register class in Activity.prototype
  Activity.CLASSES['@memory.MemoryGame'] = MemoryGame

  return MemoryGame
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/activities/panels/Explore.js":
/*!******************************************!*\
  !*** ./src/activities/panels/Explore.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : activities/panels/Explore.js
 *  Created : 04/06/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ../../Activity */ "./src/Activity.js"),
  __webpack_require__(/*! ../../boxes/ActiveBoxGrid */ "./src/boxes/ActiveBoxGrid.js"),
  __webpack_require__(/*! ../../boxes/BoxBag */ "./src/boxes/BoxBag.js"),
  __webpack_require__(/*! ../../AWT */ "./src/AWT.js"),
  __webpack_require__(/*! ../../shapers/Rectangular */ "./src/shapers/Rectangular.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, Activity, ActiveBoxGrid, BoxBag, AWT, Rectangular) {

  /**
   * This class of {@link Activity} shows a panel with {@link ActiveBox} objects. Users can click
   * on this objects to obtain associated information. This associated information, displayed in
   * a second panel, can be text graphics, sound, video... or a combination of them.
   * @exports Explore
   * @class
   * @extends Activity
   */
  class Explore extends Activity {
    /**
     * Explore constructor
     * @param {JClicProject} project - The {@link JClicProject} to which this activity belongs
     */
    constructor(project) {
      super(project)
    }

    /**
     * Activities of this type never end, so automatic sequences must pause here
     * @override
     * @returns {boolean}
     */
    mustPauseSequence() {
      return true
    }

    /**
     * Retrieves the minimum number of actions needed to solve this activity
     * @override
     * @returns {number}
     */
    getMinNumActions() {
      return 0
    }

    /**
     * Usually this activity don't use random to scramble internal components, but in some cases
     * can make use of it.
     * @override
     * @returns {boolean}
     */
    hasRandom() {
      return true
    }
  }

  /**
   * The {@link ActivityPanel} where {@link Explore} activities are played.
   * @class
   * @extends ActivityPanel
   * @param {Activity} act - The {@link Activity} to which this Panel belongs
   * @param {JClicPlayer} ps - Any object implementing the methods defined in the
   * [PlayStation](http://projectestac.github.io/jclic/apidoc/edu/xtec/jclic/PlayStation.html)
   * Java interface.
   */
  class ExplorePanel extends Activity.Panel {
    /**
     * ExplorePanel constructor
     * @param {external:jQuery=} $div - The jQuery DOM element where this Panel will deploy
     */
    constructor(act, ps, $div) {
      super(act, ps, $div)
    }

    /**
     * Miscellaneous cleaning operations
     * @override
     */
    clear() {
      if (this.bgA) {
        this.bgA.end()
        this.bgA = null
      }
      if (this.bgB) {
        this.bgB.end()
        this.bgB = null
      }
    }

    /**
     * Prepares the visual components of the activity
     * @override
     */
    buildVisualComponents() {
      if (this.firstRun)
        super.buildVisualComponents()
      this.clear()
      const
        abcA = this.act.abc['primary'],
        abcB = this.act.abc['secondary']

      if (abcA && abcB) {
        if (abcA.imgName) {
          abcA.setImgContent(this.act.project.mediaBag, null, false)
          if (abcA.animatedGifFile && !abcA.shaper.rectangularShapes && !this.act.scramble['primary'])
            this.$animatedBg = $('<span/>').css({
              'background-image': `url(${abcA.animatedGifFile})`,
              'background-position': 'center',
              'background-repeat': 'no-repeat',
              position: 'absolute'
            }).appendTo(this.$div)
        }

        if (abcB.imgName)
          abcB.setImgContent(this.act.project.mediaBag, null, false)

        if (this.act.acp !== null)
          this.act.acp.generateContent(abcA.nch, abcA.ncw, [abcA, abcB], false)

        this.bgA = ActiveBoxGrid.createEmptyGrid(null, this, this.act.margin, this.act.margin, abcA)
        const w = (this.act.boxGridPos === 'AUB' || this.act.boxGridPos === 'BUA') ? abcA.getTotalWidth() : abcB.w
        this.bgB = new ActiveBoxGrid(null, this, abcB.bb, this.act.margin, this.act.margin, w, abcB.h, new Rectangular(1, 1))

        this.bgA.setContent(abcA)
        this.bgA.setDefaultIdAss()
        if (this.$animatedBg)
          this.bgA.setCellAttr('tmpTrans', true)
        this.bgB.getActiveBox(0).setInactive(false)
        this.bgA.setVisible(true)
        this.bgB.setVisible(true)
      }
    }

    /**
     * Basic initialization procedure
     * @override
     */
    initActivity() {
      super.initActivity()
      if (!this.firstRun)
        this.buildVisualComponents()
      else
        this.firstRun = false

      if (this.bgA && this.bgB) {
        // Scramble cells
        if (this.act.scramble.primary)
          this.shuffle([this.bgA], true, true)

        if (this.useOrder)
          this.currentItem = this.bgA.getNextItem(-1)

        this.setAndPlayMsg('initial', 'start')
        this.invalidate().update()
        this.playing = true
      }
    }

    /**
     * Updates the graphic content of this panel.
     * This method will be called from {@link AWT.Container#update} when needed.
     * @override
     * @param {AWT.Rectangle} dirtyRegion - Specifies the area to be updated. When `null`,
     * it's the whole panel.
     */
    updateContent(dirtyRegion) {
      super.updateContent(dirtyRegion)
      if (this.bgA && this.bgB && this.$canvas) {
        const
          canvas = this.$canvas.get(-1),
          ctx = canvas.getContext('2d')
        if (!dirtyRegion)
          dirtyRegion = new AWT.Rectangle(0, 0, canvas.width, canvas.height)
        ctx.clearRect(dirtyRegion.pos.x, dirtyRegion.pos.y, dirtyRegion.dim.width, dirtyRegion.dim.height)
        this.bgA.update(ctx, dirtyRegion)
        this.bgB.update(ctx, dirtyRegion)
      }
      return this
    }

    /**
     * Sets the real dimension of this panel.
     * @override
     * @param {AWT.Dimension} preferredMaxSize - The maximum surface available for the activity panel
     * @returns {AWT.Dimension}
     */
    setDimension(preferredMaxSize) {
      return !this.bgA || !this.bgB || this.getBounds().equals(preferredMaxSize) ?
        preferredMaxSize :
        BoxBag.layoutDouble(preferredMaxSize, this.bgA, this.bgB, this.act.boxGridPos, this.act.margin)
    }

    /**
     * Sets the size and position of this activity panel
     * @override
     * @param {AWT.Rectangle} rect
     */
    setBounds(rect) {
      if (this.$canvas)
        this.$canvas.remove()
      super.setBounds(rect)

      if (this.bgA || this.bgB) {
        // Create the main canvas
        this.$canvas = $(`<canvas width="${rect.dim.width}" height="${rect.dim.height}"/>`).css({
          position: 'absolute',
          top: 0,
          left: 0
        })
        // Resize animated gif background
        if (this.$animatedBg) {
          const bgRect = this.bgA.getBounds()
          this.$animatedBg.css({
            left: bgRect.pos.x,
            top: bgRect.pos.y,
            width: `${bgRect.dim.width}px`,
            height: `${bgRect.dim.height}px`,
            'background-size': `${bgRect.dim.width}px ${bgRect.dim.height}px`
          })
        }
        this.$div.append(this.$canvas)
        // Repaint all
        this.invalidate().update()
      }
    }

    /**
     * Builds the accessible components needed for this ActivityPanel
     * This method is called when all main elements are placed and visible, when the activity is ready
     * to start or when resized.
     * @override
     */
    buildAccessibleComponents() {
      if (this.$canvas && this.accessibleCanvas) {
        super.buildAccessibleComponents()
        if (this.bgA)
          this.bgA.buildAccessibleElements(this.$canvas, this.$div)
        if (this.bgB)
          this.bgB.buildAccessibleElements(this.$canvas, this.$div)
      }
    }

    /**
     * Main handler used to process mouse, touch, keyboard and edit events
     * @override
     * @param {HTMLEvent} event - The HTML event to be processed
     * @returns {boolean=} - When this event handler returns `false`, jQuery will stop its
     * propagation through the DOM tree. See: {@link http://api.jquery.com/on}
     */
    processEvent(event) {
      if (this.playing) {
        const p = new AWT.Point(
          event.pageX - this.$div.offset().left,
          event.pageY - this.$div.offset().top),
          // Array to be filled with actions to be executed at the end of event processing
          delayedActions = []

        switch (event.type) {
          case 'click':
            this.ps.stopMedia(1)
            const bx1 = this.bgA.findActiveBox(p)
            if (bx1) {
              const bx2 = this.bgB.getActiveBox(0)
              if (bx1.idAss !== -1 && (!this.act.useOrder || bx1.idOrder === this.currentItem)) {
                bx2.setContent(this.act.abc['secondary'], bx1.idAss)
                if (!bx2.playMedia(this.ps, delayedActions) && !bx1.playMedia(this.ps, delayedActions))
                  this.playEvent('CLICK')
                if (this.act.useOrder)
                  this.currentItem = this.bgA.getNextItem(this.currentItem)
                this.ps.reportNewAction(this.act, 'SELECT', bx1.getDescription(), bx2.getDescription(), true, 0)
                // Modified May 2020: Focusing `accessibleElement` will always draw a border on bx2
                // if (bx2.$accessibleElement)
                //   bx2.$accessibleElement.focus()

                // Clic 3.0 behavior, applied only to one-cell activities:
                if (bx1.idAss === 0 && this.bgA.getNumCells() === 1) {
                  const seq = this.act.project.activitySequence;
                  const ase = seq.getCurrentAct();
                  if (ase && seq.hasNextAct(true) && ase.delay > 0
                    && (seq.getNavButtonsFlag() !== 'both' && seq.getNavButtonsFlag() !== 'fwd')) {
                    this.finishActivity(true);
                  }
                }

              } else {
                bx2.clear()
                bx2.setInactive(false)
              }
              this.update()
            }
            break
        }
        delayedActions.forEach(action => action())
        event.preventDefault()
      }
    }
  }

  Object.assign(ExplorePanel.prototype, {
    /**
     * The {@link ActiveBoxBag} object containing the information to be displayed in the `primary` panel
     * @name ExplorePanel#bgA
     * @type {ActiveBoxBag} */
    bgA: null,
    /**
     * The {@link ActiveBoxBag} object containing the information associated to `primary` elements.
     * Only one of this elements will be showed for each click done in the `primary` panel.
     * @name ExplorePanel#bgB
     * @type {ActiveBoxBag} */
    bgB: null,
    /**
     * List of mouse, touch and keyboard events intercepted by this panel
     * @override
     * @name ExplorePanel#events
     * @type {string[]} */
    events: ['click'],
  })

  /**
   * Panel class associated to this type of activity: {@link ExplorePanel}
   * @type {class} */
  Explore.Panel = ExplorePanel

  // Register class in Activity.prototype
  Activity.CLASSES['@panels.Explore'] = Explore

  return Explore
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/activities/panels/Identify.js":
/*!*******************************************!*\
  !*** ./src/activities/panels/Identify.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : activities/panels/Identify.js
 *  Created : 03/06/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ../../Activity */ "./src/Activity.js"),
  __webpack_require__(/*! ../../boxes/ActiveBoxGrid */ "./src/boxes/ActiveBoxGrid.js"),
  __webpack_require__(/*! ../../boxes/BoxBag */ "./src/boxes/BoxBag.js"),
  __webpack_require__(/*! ../../AWT */ "./src/AWT.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, Activity, ActiveBoxGrid, BoxBag, AWT) {

  /**
   * The aim of this type of {@link Activity} is to identify {@link ActiveBox} elements in a panel
   * that satisfy a specific condition, usually exposed in the main message.
   * @exports Identify
   * @class
   * @extends Activity
   */
  class Identify extends Activity {
    /**
     * Identify constructor
     * @param {JClicProject} project - The {@link JClicProject} to which this activity belongs
     */
    constructor(project) {
      super(project)
    }

    /**
     * Retrieves the minimum number of actions needed to solve this activity
     * @override
     * @returns {number}
     */
    getMinNumActions() {
      return this.cellsToMatch
    }

    /**
     * Whether or not the activity uses random to scramble internal components
     * @override
     * @returns {boolean}
     */
    hasRandom() {
      return true
    }
  }

  Object.assign(Identify.prototype, {
    /**
     * Number of not assigned cells (calculated in {@link IdentifyPanel#buildVisualComponents})
     * @name Identify#nonAssignedCells
     * @type {number} */
    nonAssignedCells: 0,
    /**
     * Number of cells the user must identify to complete the activity (calculated in
     * {@link IdentifyPanel#buildVisualComponents})
     * @name Identify#cellsToMatch
     * @type {number} */
    cellsToMatch: 1,
  })

  /**
   * The {@link ActivityPanel} where {@link Identify} activities are played.
   * @class
   * @extends ActivityPanel
   * @param {Activity} act - The {@link Activity} to which this Panel belongs
   * @param {JClicPlayer} ps - Any object implementing the methods defined in the
   * [PlayStation](http://projectestac.github.io/jclic/apidoc/edu/xtec/jclic/PlayStation.html)
   * Java interface.
   */
  class IdentifyPanel extends Activity.Panel {
    /**
     * IdentifyPanel constructor
     * @param {external:jQuery=} $div - The jQuery DOM element where this Panel will deploy
     */
    constructor(act, ps, $div) {
      super(act, ps, $div)
    }

    /**
     * Miscellaneous cleaning operations
     * @override
     */
    clear() {
      if (this.bg) {
        this.bg.end()
        this.bg = null
      }
    }

    /**
     * Prepares the visual components of the activity
     * @override
     */
    buildVisualComponents() {
      if (this.firstRun)
        super.buildVisualComponents()
      this.clear()
      const
        abc = this.act.abc['primary'],
        solved = this.act.abc['solvedPrimary']
      if (abc) {
        if (abc.imgName) {
          abc.setImgContent(this.act.project.mediaBag, null, false)
          if (abc.animatedGifFile && !abc.shaper.rectangularShapes && !this.act.scramble['primary'])
            this.$animatedBg = $('<span/>').css({
              'background-image': `url(${abc.animatedGifFile})`,
              'background-position': 'center',
              'background-repeat': 'no-repeat',
              position: 'absolute'
            }).appendTo(this.$div)
        }

        if (solved && solved.imgName)
          solved.setImgContent(this.act.project.mediaBag, null, false)

        if (this.act.acp !== null) {
          const contentKit = [abc]
          if (solved) {
            contentKit.push(null)
            contentKit.push(solved)
          }
          this.act.acp.generateContent(abc.nch, abc.ncw, contentKit, false)
        }
        this.bg = ActiveBoxGrid.createEmptyGrid(null, this,
          this.act.margin, this.act.margin,
          abc)
        this.bg.setContent(abc, solved || null)
        this.bg.setAlternative(false)
        if (this.$animatedBg)
          this.bg.setCellAttr('tmpTrans', true)
        this.bg.setDefaultIdAss()
        this.act.nonAssignedCells = 0
        this.act.cellsToMatch = 0
        const n = this.bg.getNumCells()
        for (let i = 0; i < n; i++) {
          const
            bx = this.bg.getActiveBox(i),
            id = bx.idAss
          if (id === 1)
            this.act.cellsToMatch++
          else if (id === -1) {
            this.act.nonAssignedCells++
            bx.switchToAlt(this.ps)
          }
        }
        this.bg.setVisible(true)
      }
    }

    /**
     * Basic initialization procedure
     * @override
     */
    initActivity() {
      super.initActivity()
      if (!this.firstRun)
        this.buildVisualComponents()
      else
        this.firstRun = false

      if (this.bg) {
        if (this.act.scramble['primary'])
          this.shuffle([this.bg], true, true)

        if (this.useOrder)
          this.currentItem = this.bg.getNextItem(-1)

        this.setAndPlayMsg('initial', 'start')
        this.invalidate().update()
        this.playing = true
      }
    }

    /**
     * Updates the graphic content of this panel.
     * This method will be called from {@link AWT.Container#update} when needed.
     * @override
     * @param {AWT.Rectangle} dirtyRegion - Specifies the area to be updated. When `null`,
     * it's the whole panel.
     */
    updateContent(dirtyRegion) {
      super.updateContent(dirtyRegion)

      if (this.bg && this.$canvas) {
        const
          canvas = this.$canvas.get(-1),
          ctx = canvas.getContext('2d')
        if (!dirtyRegion)
          dirtyRegion = new AWT.Rectangle(0, 0, canvas.width, canvas.height)
        ctx.clearRect(dirtyRegion.pos.x, dirtyRegion.pos.y, dirtyRegion.dim.width, dirtyRegion.dim.height)
        this.bg.update(ctx, dirtyRegion)
      }
      return super.updateContent(dirtyRegion)
    }

    /**
     * Sets the real dimension of this panel.
     * @override
     * @param {AWT.Dimension} preferredMaxSize - The maximum surface available for the activity panel
     * @returns {AWT.Dimension}
     */
    setDimension(preferredMaxSize) {
      return this.getBounds().equals(preferredMaxSize) ?
        preferredMaxSize :
        BoxBag.layoutSingle(preferredMaxSize, this.bg, this.act.margin)
    }

    /**
     * Sets the size and position of this activity panel
     * @override
     * @param {AWT.Rectangle} rect
     */
    setBounds(rect) {
      if (this.$canvas)
        this.$canvas.remove()

      super.setBounds(rect)
      if (this.bg) {
        this.$canvas = $(`<canvas width="${rect.dim.width}" height="${rect.dim.height}"/>`).css({
          position: 'absolute',
          top: 0,
          left: 0
        })
        // Resize animated gif background
        if (this.$animatedBg) {
          const bgRect = this.bg.getBounds()
          this.$animatedBg.css({
            left: bgRect.pos.x,
            top: bgRect.pos.y,
            width: `${bgRect.dim.width}px`,
            height: `${bgRect.dim.height}px`,
            'background-size': `${bgRect.dim.width}px ${bgRect.dim.height}px`
          })
        }
        this.$div.append(this.$canvas)
        this.invalidate().update()
        setTimeout(() => this.bg ? this.bg.buildAccessibleElements(this.$canvas, this.$div) : null, 0)
      }
    }

    /**
     * Builds the accessible components needed for this ActivityPanel
     * This method is called when all main elements are placed and visible, when the activity is ready
     * to start or when resized.
     * @override
     */
    buildAccessibleComponents() {
      if (this.bg && this.$canvas && this.accessibleCanvas) {
        super.buildAccessibleComponents()
        this.bg.buildAccessibleElements(this.$canvas, this.$div)
      }
    }

    /**
     * Main handler used to process mouse, touch, keyboard and edit events
     * @override
     * @param {Event} event - The HTML event to be processed
     * @returns {boolean=} - When this event handler returns `false`, jQuery will stop its
     * propagation through the DOM tree. See: {@link http://api.jquery.com/on}
     */
    processEvent(event) {
      if (this.playing) {
        const p = new AWT.Point(
          event.pageX - this.$div.offset().left,
          event.pageY - this.$div.offset().top)
        // Flag for assuring that only one media plays per event (avoid event sounds overlapping
        // cell's media sounds)
        let m = false
        // Array to be filled with actions to be executed at the end of event processing
        const delayedActions = []

        switch (event.type) {
          case 'click':
            this.ps.stopMedia(1)
            // Find the box behind the clicked point
            const bx = this.bg ? this.bg.findActiveBox(p) : null
            if (bx) {
              if (bx.idAss !== -1) {
                // Check if it's a valid move
                let ok = false
                const src = bx.getDescription()
                m = m || bx.playMedia(this.ps, delayedActions)
                if (bx.idAss === 1 && (!this.act.useOrder || bx.idOrder === this.currentItem)) {
                  ok = true
                  bx.idAss = -1
                  if (bx.switchToAlt(this.ps))
                    m = m || bx.playMedia(this.ps, delayedActions)
                  else
                    bx.clear()
                  if (this.act.useOrder)
                    this.currentItem = this.bg.getNextItem(this.currentItem, 1)
                }
                const cellsOk = this.bg.countCellsWithIdAss(-1)
                this.ps.reportNewAction(this.act, 'SELECT', src, null, ok, cellsOk - this.act.nonAssignedCells)
                if (ok && cellsOk === this.act.cellsToMatch + this.act.nonAssignedCells)
                  this.finishActivity(true)
                else if (!m)
                  this.playEvent(ok ? 'actionOk' : 'actionError')
                this.update()
              } else {
                this.playEvent('actionError')
              }
            }
            break
        }
        delayedActions.forEach(action => action())
        event.preventDefault()
      }
    }
  }

  Object.assign(IdentifyPanel.prototype, {
    /**
     * The {@link ActiveBoxBag} containing the information to be displayed on the panel.
     * @name IdentifyPanel#bg
     * @type {ActiveBoxBag} */
    bg: null,
    /**
     * List of mouse, touch and keyboard events intercepted by this panel
     * @override
     * @name IdentifyPanel#events
     * @type {string[]} */
    events: ['click'],
  })

  /**
   * Panel class associated to this type of activity: {@link IdentifyPanel}
   * @type {class} */
  Identify.Panel = IdentifyPanel

  // Register class in Activity.prototype
  Activity.CLASSES['@panels.Identify'] = Identify

  return Identify
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/activities/panels/InformationScreen.js":
/*!****************************************************!*\
  !*** ./src/activities/panels/InformationScreen.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : activities/panels/InformationScreen.js
 *  Created : 19/05/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ../../Activity */ "./src/Activity.js"),
  __webpack_require__(/*! ../../boxes/ActiveBoxGrid */ "./src/boxes/ActiveBoxGrid.js"),
  __webpack_require__(/*! ../../boxes/BoxBag */ "./src/boxes/BoxBag.js"),
  __webpack_require__(/*! ../../AWT */ "./src/AWT.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, Activity, ActiveBoxGrid, BoxBag, AWT) {

  /**
   * This class of {@link Activity} just shows a panel with {@link ActiveBox} objects.
   * Because active boxes can act as a links to specific points in the project's sequence of
   * activities, this kind of activity is often used as a menu where users can choose from different
   * options.
   * @exports InformationScreen
   * @class
   * @extends Activity
   */
  class InformationScreen extends Activity {
    /**
     * InformationScreen constructor
     * @param {JClicProject} project - The {@link JClicProject} to which this activity belongs
     */
    constructor(project) {
      super(project)
      // This kind of activities are not reported
      this.includeInReports = false
      this.reportActions = false
    }
  }

  /**
   * The {@link ActivityPanel} where {@link InformationScreen} activities should display its content
   * @class
   * @extends ActivityPanel
   * @param {Activity} act - The {@link Activity} to which this Panel belongs
   * @param {JClicPlayer} ps - Any object implementing the methods defined in the
   * [PlayStation](http://projectestac.github.io/jclic/apidoc/edu/xtec/jclic/PlayStation.html)
   * Java interface.
   */
  class InformationScreenPanel extends Activity.Panel {
    /**
     * InformationScreenPanel constructor
     * @param {external:jQuery=} $div - The jQuery DOM element where this Panel will deploy
     */
    constructor(act, ps, $div) {
      super(act, ps, $div)
    }

    /**
     * Miscellaneous cleaning operations
     * @override
     */
    clear() {
      if (this.bg) {
        this.bg.end()
        this.bg = null
      }
    }

    /**
     * Prepares the visual components of the activity
     * @override
     */
    buildVisualComponents() {
      if (this.firstRun)
        super.buildVisualComponents()
      this.clear()
      const abc = this.act.abc['primary']
      if (abc) {
        if (abc.imgName) {
          abc.setImgContent(this.act.project.mediaBag, null, false)
          if (abc.animatedGifFile && !abc.shaper.rectangularShapes)
            this.$animatedBg = $('<span/>').css({
              'background-image': `url(${abc.animatedGifFile})`,
              'background-position': 'center',
              'background-repeat': 'no-repeat',
              position: 'absolute'
            }).appendTo(this.$div)
        }

        if (this.act.acp !== null)
          this.act.acp.generateContent(abc.nch, abc.ncw, [abc], false)

        this.bg = ActiveBoxGrid.createEmptyGrid(null, this,
          this.act.margin, this.act.margin,
          abc)
        this.bg.setContent(abc)
        if (this.$animatedBg)
          this.bg.setCellAttr('tmpTrans', true)
        this.bg.setVisible(true)
      }
    }

    /**
     * Basic initialization procedure
     * @override
     */
    initActivity() {
      super.initActivity()
      if (!this.firstRun)
        this.buildVisualComponents()
      else
        this.firstRun = false

      this.invalidate().update()
      this.setAndPlayMsg('initial', 'start')
      this.playing = true
    }

    /**
     * Updates the graphic content of this panel.
     * This method will be called from {@link AWT.Container#update} when needed.
     * @override
     * @param {AWT.Rectangle} dirtyRegion - Specifies the area to be updated. When `null`,
     * it's the whole panel.
     */
    updateContent(dirtyRegion) {
      super.updateContent(dirtyRegion)
      if (this.bg && this.$canvas) {
        const
          canvas = this.$canvas.get(-1),
          ctx = canvas.getContext('2d')
        if (!dirtyRegion)
          dirtyRegion = new AWT.Rectangle(0, 0, canvas.width, canvas.height)
        ctx.clearRect(dirtyRegion.pos.x, dirtyRegion.pos.y, dirtyRegion.dim.width, dirtyRegion.dim.height)
        this.bg.update(ctx, dirtyRegion)
      }
      return this
    }

    /**
     * Sets the real dimension of this panel.
     * @override
     * @param {AWT.Dimension} preferredMaxSize - The maximum surface available for the activity panel
     * @returns {AWT.Dimension}
     */
    setDimension(preferredMaxSize) {
      return this.getBounds().equals(preferredMaxSize) ?
        preferredMaxSize :
        BoxBag.layoutSingle(preferredMaxSize, this.bg, this.act.margin)
    }

    /**
     * Sets the size and position of this activity panel
     * @override
     * @param {AWT.Rectangle} rect
     */
    setBounds(rect) {
      if (this.$canvas)
        this.$canvas.remove()

      super.setBounds(rect)
      if (this.bg) {
        this.$canvas = $('<canvas width="' + rect.dim.width + '" height="' + rect.dim.height + '"/>').css({
          position: 'absolute',
          top: 0,
          left: 0
        })
        // Resize animated gif background
        if (this.$animatedBg) {
          const bgRect = this.bg.getBounds()
          this.$animatedBg.css({
            left: bgRect.pos.x,
            top: bgRect.pos.y,
            width: `${bgRect.dim.width}px`,
            height: `${bgRect.dim.height}px`,
            'background-size': `${bgRect.dim.width}px ${bgRect.dim.height}px`
          })
        }
        this.$div.append(this.$canvas)
        this.invalidate().update()
        setTimeout(() => this.bg ? this.bg.buildAccessibleElements(this.$canvas, this.$div) : null, 0)
      }
    }

    /**
     * Builds the accessible components needed for this ActivityPanel
     * This method is called when all main elements are placed and visible, when the activity is ready
     * to start or when resized.
     * @override
     */
    buildAccessibleComponents() {
      if (this.$canvas && this.accessibleCanvas && this.bg) {
        super.buildAccessibleComponents()
        this.bg.buildAccessibleElements(this.$canvas, this.$div)
      }
    }

    /**
     * Main handler used to process mouse, touch, keyboard and edit events
     * @override
     * @param {HTMLEvent} event - The HTML event to be processed
     * @returns {boolean=} - When this event handler returns `false`, jQuery will stop its
     * propagation through the DOM tree. See: {@link http://api.jquery.com/on}
     */
    processEvent(event) {
      if (this.playing) {
        const p = new AWT.Point(
          event.pageX - this.$div.offset().left,
          event.pageY - this.$div.offset().top)
        // Array to be filled with actions to be executed at the end of event processing
        const delayedActions = []
        this.ps.stopMedia(1)
        const bx = this.bg.findActiveBox(p)
        if (bx) {
          if (!bx.playMedia(this.ps, delayedActions))
            this.playEvent('click')
        }
        delayedActions.forEach(action => action())
        event.preventDefault()
      }
    }
  }

  Object.assign(InformationScreenPanel.prototype, {
    /**
     * The {@link ActiveBoxBag} containing the information to be displayed.
     * @name InformationScreenPanel#bg
     * @type {ActiveBoxBag} */
    bg: null,
    /**
     * List of mouse, touch and keyboard events intercepted by this panel
     * @override
     * @name InformationScreenPanel#events
     * @type {string[]} */
    events: ['click'],
  })

  /**
   * Panel class associated to this type of activity: {@link InformationScreenPanel}
   * @type {class} */
  InformationScreen.Panel = InformationScreenPanel

  // Register class in Activity.prototype
  Activity.CLASSES['@panels.InformationScreen'] = InformationScreen

  return InformationScreen
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/activities/panels/Menu.js":
/*!***************************************!*\
  !*** ./src/activities/panels/Menu.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : activities/panels/Menu.js
 *  Created : 20/07/2017
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ../../Activity */ "./src/Activity.js"),
  __webpack_require__(/*! ../../media/MediaContent */ "./src/media/MediaContent.js"),
  __webpack_require__(/*! ../../Utils */ "./src/Utils.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, Activity, MediaContent, Utils) {

  /**
   * This class of {@link Activity} is only used in legacy JClic project libraries. It contains
   * one or more buttons pointing to specific JClic projects or to other `Menu` activity panels.
   * @exports Menu
   * @class
   * @extends Activity
   */
  class Menu extends Activity {
    /**
     * Menu constructor
     * @param {JClicProject} project - The {@link JClicProject} to which this activity belongs
     */
    constructor(project) {
      super(project)
      this.menuElements = []
      // This kind of activities are not reported
      this.includeInReports = false
      this.reportActions = false
    }
  }

  /**
   * The {@link ActivityPanel} where Menu will show its content.
   * @class
   * @extends ActivityPanel
   * @param {Activity} act - The {@link Activity} to which this Panel belongs
   * @param {JClicPlayer} ps - Any object implementing the methods defined in the
   * [PlayStation](http://projectestac.github.io/jclic/apidoc/edu/xtec/jclic/PlayStation.html)
   * Java interface.
   */
  class MenuPanel extends Activity.Panel {
    /**
     * MenuPanel constructor
     * @param {external:jQuery=} $div - The jQuery DOM element where this Panel will deploy
     */
    constructor(act, ps, $div) {
      super(act, ps, $div)
      // This kind of activity will always clean the "last project skin" setting
      ps.lastProjectSkin = null
    }

    /**
     * Prepares the visual components of the activity
     * @override
     */
    buildVisualComponents() {
      if (this.firstRun)
        super.buildVisualComponents()
      // This `div` will contain the action buttons
      const $btnDiv = $('<div/>').css({
        'width': '100%',
        'max-height': '100%',
        'position': 'absolute',
        'top': '50%',
        'transform': 'translateY(-50%)',
        'display': 'flex',
        'flex-wrap': 'wrap',
        'overflow-y': 'auto',
        'place-content': 'center',
        'overflow-y': 'auto'
      })
      this.act.menuElements.forEach((me) => {
        // Create a button for each menu element
        const caption = me.description || me.caption || 'JClic'
        const $btn = $('<button/>', {
          class: 'StockBtn',
          title: caption,
          'aria-label': caption
        }).css({
          'min-width': '80px',
          'max-width': '200px',
          'min-height': '80px',
          'margin': '4px',
          'padding': '4px',
          'display': 'flex',
          'flex-direction': 'column',
          'justify-content': 'center',
          'align-items': 'center'
        })

        // Set the button icon
        const
          iconSrc = MenuPanel.icons[me.icon || '@ico00.png'],
          $img = $('<img/>', { src: iconSrc || '' }).css({
            'max-width': '180px',
            'max-height': '100px',
            'margin': '4px'
          })
        if (!iconSrc) {
          // It's not a stock image, so load `src` when available
          const mbe = this.act.project.mediaBag.getElement(me.icon, true)
          mbe.getFullPathPromise().then(imgFullPath => $img.attr('src', imgFullPath))
        }
        $btn.append($img)

        // Set the button text
        $btn.append($('<span/>').css({
          'max-width': '180px',
          'overflow': 'hidden',
          'white-space': 'nowrap',
          'text-overflow': 'ellipsis'
        }).html(me.caption))

        // Set a click listener method
        // $btn.on('click', function...) does not work!
        $btn[0].addEventListener('click', (ev) => {
          const mc = new MediaContent(me.projectPath ? 'RUN_CLIC_PACKAGE' : 'RUN_CLIC_ACTIVITY', me.sequence)
          if (me.projectPath)
            mc.externalParam = me.projectPath
          Utils.log('info', `Launching ${me.projectPath || ''} ${me.sequence || ''}`)
          this.ps.playMedia(mc)
          ev.preventDefault()
        })

        // Place the created button on the container
        $btnDiv.append($btn)
      })

      // Add the buttons container on the main panel `div`
      this.$div.empty().append($btnDiv)
    }

    /**
     * Sets the real dimension of this panel.
     * @override
     * @param {AWT.Dimension} preferredMaxSize - The maximum surface available for the activity panel
     * @returns {AWT.Dimension}
     */
    setDimension(preferredMaxSize) {
      return preferredMaxSize
    }

    /**
     * Basic initialization procedure
     * @override
     */
    initActivity() {
      super.initActivity()

      if (!this.firstRun)
        this.buildVisualComponents()
      else
        this.firstRun = false

      this.setAndPlayMsg('initial', 'start')
      this.playing = true
    }
  }

  /**
   * Default icons used in buttons, inherited from JClic
   * @type {object}
   */
  MenuPanel.icons = {
    '@ico00.png': 'data:image/png;base64,\
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAABGdBTUEAALGPC/xhBQAAAAFzUkdCAK7OHOkAAAB1UExURUxpcZVZAGyAAGyAAJVZAJVZAJVZAIhmAJVZAJVZAJVZAIhmAGyAAGyAAGyA\
AGyAAGyAAJVZAJVZAGyAAJVZANj+AP+ZAMFzAPWSALVsANyEAM57AJ66AOiLALXVAM3xAK1nAI6oAIabAJWwAMTnAKFgAGyAAIlz9xYAAAAVdFJOUwB9oCIiZpkRRKq7M4BVu9VmVd1EzJvdA7gAAAE0\
SURBVDjLjZPZkoMgEEVFFsHdZBQR3M38/ycOKQ1gJKnpV051nwtNEPyrsjBNom9AqNSapxn8CBRjXY+DmjXkbQSXeq9tWJe7ByhVberXqzCY8yGM6GVK9FQ4SpVUxAwnJ+A+2wkLBLLppYgJRgZIrcJY\
BKxvdLUdFzE4mHBzFNDUvKoVdFfI7YQ1q7gD7LowXNRwaM4R6AzQEXNRWZrPT2jLA9YaQOIXQHV0WIbFvKZImPNGmLCMCwY0lJQQS6vAzEXFjY7Of5iORXwKySHe8+kWWwVeGQUnmW3QTMgDONUbhQ+A\
BAZwozkTqH1Ox8za3Jz3drLZDMABquuM9nFaKXZpwfFpp+j0ZiHJ21pifiIkQ++Lix+9nc+Z5/tQwrt2fxEBvN8vooQJLgTDX74xSi6z/wAoQC7hWsslMgAAAABJRU5ErkJggg==',

    '@ico01.png': 'data:image/png;base64,\
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAABGdBTUEAALGPC/xhBQAAAAFzUkdCAK7OHOkAAAByUExURUxpcfzZt/rfw/pycvrcv/3UrJqf/QAAAP/hxPvOov9sbPqFhYmN/f7nz3V4\
+/3ky/+AgPrIl11g/P/Klf+Kiv9XV//q1vtHR/rCim1w//pcXISI//tfX5WY/VNT///Dh/86OvwhISUl/js7+klM+vq6e8H/VfEAAAABdFJOUwBA5thmAAABGElEQVQ4y62T23aCMBBFiU48iQlELoJW\
7b3//4udBIi0MqsvDU+w95yEGSiK/15YrlVhd1+C8Nk05+ribzcvCJlXklBV3u/8pToLAnMk3kiCh0Hkz4LA/NSC+YcgANTWYP4OqVGmtmAuC2St2Mn4EMbq9TaPvABpDborD+OB0QqG8hbo3HTNAikF\
CtEZBTcMx+t+ewC2U4IyMAFUTgVd5nukHYlrqYcxSBlw15k/gTlXx/ySPT5NLOkyP7IQq0PoOd/wSZLgmLtD5AMLsS70ZbnZEL+LTQmZv6aEQIkrpTUlwWX+FhNCyNzaOiVkHgXODyHzFr87ye/3g+Nx\
GrTgJ6zNa8nXJ04zf4Ew88ylr8KM/At//sB88w0/sBcK3bRRzgAAAABJRU5ErkJggg==',

    '@ico02.png': 'data:image/png;base64,\
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAABGdBTUEAALGPC/xhBQAAAAFzUkdCAK7OHOkAAAAtUExURUxpcQAAAP///8zMzJmZmfrdwP/hxPvOov3UrP3JlvzZt/zlzf/p0/zBh/rD\
jUN28cYAAAABdFJOUwBA5thmAAAAyklEQVQ4y6WT6w6DIAxG/YS2XHTv/7grLshF0C1r+KE5n6fFpMvybQHt6bldbXfQcazNsTD4MdCV+S+AQcBUBYa5M4BfHrcB8oNA08HLg0EeAiwOuGtBzoE0Mje4\
AO4S7QwhgDhlZrcISiNoqxzFoGbSb5Uyozhs4ckdD4M+OfQtUmeKcUsGnaQEyoSp/6YJIr2LXAPqp4OH4BzJtUXyZy7iBwbl8eSDALUc/Z/Sv1DxHfVm5ao5hjtIme+YbOnJMdlj/vCJoB5HX97wIgms\
7CtjdwAAAABJRU5ErkJggg==',

    '@ico03.png': 'data:image/png;base64,\
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAABGdBTUEAALGPC/xhBQAAAAFzUkdCAK7OHOkAAAAwUExURUxpcQAAAPrdwP/hxP7mz/8AAAAAmfvOov3UrAAA//3JlvzZtwCZAP8A//zC\
ifq6e7UN6GsAAAABdFJOUwBA5thmAAABA0lEQVQ4y5WS2RbDIAhEHdyTJv3/vy2osVj1oR6zeYcBDcb8NV6v9fp1NV7mgq8cMs/cDWYHhrmomsM1pcj9pgS7FL3IZ6AI8nazsCiCnPOG3wf0QpArfDno\
GATC6mwc9oi/AtMFgAFFLQhDCuZcQ0yAMghB+cuNUgJpSVM1zg7phGUFpv3VFdB5gqxolpwdTqYO5EaPJ57PgWOZWgvt0bl4u+LAbwmzv0Q7JxquJM2FSpwTBRHvRU7Mey/E16f4FwfeSkpUBD26CIQ+\
PMajODTmaw0Dr7/V1zRVQCNvAvNw6QbFb5iWwvRaWKE4Vh3H/6LxG+ueROfYdXXlb+zavg/++ADYLwfSmmk9oQAAAABJRU5ErkJggg==',

    '@icofolder.png': 'data:image/png;base64,\
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAABGdBTUEAALGPC/xhBQAAAAFzUkdCAK7OHOkAAAAnUExURUxpcffvhP///2VlZczMZv//zPf39+/nc8zMzDMzmZmZZrW1tbWttcl3sA0A\
AAABdFJOUwBA5thmAAAAgklEQVQ4y9WSQQ6AIAwEsVtFwf+/14JGbcHeTHSuO9kFQggfBE8BFwLR+mBwFGYSZvh53zjzZTdkLTXCkS/ViDHBCLe8Gla48qpkGEHl+8pdYJo0yOouPA2GhLLiCCyC28DI\
cAXZ0IfsVKS3BTGUMDas0E9NfkO/ovmQBv2v0BJ+xAaYuQX2hCJNtwAAAABJRU5ErkJggg=='
  }

  /**
   * Panel class associated to this type of activity: {@link MenuPanel}
   * @type {class} */
  Menu.Panel = MenuPanel

  // Register class in Activity.prototype
  Activity.CLASSES['@panels.Menu'] = Menu

  return Menu
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/activities/puzzles/DoublePuzzle.js":
/*!************************************************!*\
  !*** ./src/activities/puzzles/DoublePuzzle.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : activities/puzzles/DoublePuzzle.js
 *  Created : 22/05/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ../../Activity */ "./src/Activity.js"),
  __webpack_require__(/*! ../../boxes/ActiveBoxGrid */ "./src/boxes/ActiveBoxGrid.js"),
  __webpack_require__(/*! ../../boxes/BoxBag */ "./src/boxes/BoxBag.js"),
  __webpack_require__(/*! ../../boxes/BoxConnector */ "./src/boxes/BoxConnector.js"),
  __webpack_require__(/*! ../../AWT */ "./src/AWT.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, Activity, ActiveBoxGrid, BoxBag, BoxConnector, AWT) {

  /**
   * The aim of this class of {@link Activity} is to put in order the scrambled elements of an
   * {@link ActiveBagContent} that contains an image, sounds, text... or any other media content.
   *
   * The activity uses two panels: one with the scrambled cells, and other initially empty where
   * this cells must be placed in order.
   * @exports DoublePuzzle
   * @class
   * @extends Activity
   */
  class DoublePuzzle extends Activity {
    /**
     * DoublePuzzle constructor
     * @param {JClicProject} project - The {@link JClicProject} to which this activity belongs
     */
    constructor(project) {
      super(project)
    }

    /**
     * Retrieves the minimum number of actions needed to solve this activity.
     * @override
     * @returns {number}
     */
    getMinNumActions() {
      return this.abc.primary.getNumCells()
    }

    /**
     * Whether or not the activity uses random to scramble internal components
     * @override
     * @returns {boolean}
     */
    hasRandom() {
      return true
    }

    /**
     * When `true`, the activity must always be scrambled
     * @override
     * @returns {boolean}
     */
    shuffleAlways() {
      return true
    }

    /**
     * Whether the activity allows the user to request help.
     * @override
     * @returns {boolean}
     */
    helpSolutionAllowed() {
      return true
    }
  }

  /**
   * The {@link ActivityPanel} where {@link DoublePuzzle} activities are played.
   * @class
   * @extends ActivityPanel
   */
  class DoublePuzzlePanel extends Activity.Panel {
    /**
     * DoublePuzzlePanel constructor
     * @param {Activity} act - The {@link Activity} to which this Panel belongs
     * @param {JClicPlayer} ps - Any object implementing the methods defined in the
     * [PlayStation](http://projectestac.github.io/jclic/apidoc/edu/xtec/jclic/PlayStation.html)
     * Java interface.
     * @param {external:jQuery=} $div - The jQuery DOM element where this Panel will deploy
     */
    constructor(act, ps, $div) {
      super(act, ps, $div)
    }

    /**
     * Miscellaneous cleaning operations
     * @override
     */
    clear() {
      if (this.bgA) {
        this.bgA.end()
        this.bgA = null
      }
      if (this.bgB) {
        this.bgB.end()
        this.bgB = null
      }
    }

    /**
     * Prepares the visual components of the activity
     * @override
     */
    buildVisualComponents() {
      if (this.firstRun)
        super.buildVisualComponents()
      this.clear()

      const abc = this.act.abc['primary']
      if (abc) {
        if (abc.imgName)
          abc.setImgContent(this.act.project.mediaBag, null, false)

        if (this.act.acp !== null)
          this.act.acp.generateContent(abc.nch, abc.ncw, [abc], false)

        this.bgA = ActiveBoxGrid.createEmptyGrid(null, this, this.act.margin, this.act.margin, abc)
        this.bgB = ActiveBoxGrid.createEmptyGrid(null, this, this.act.margin, this.act.margin, abc)

        this.bgA.setContent(abc)

        this.bgA.accessibleText = this.ps.getMsg('source')
        this.bgB.accessibleText = this.ps.getMsg('target')

        this.bgA.setVisible(true)
        this.bgB.setVisible(true)

        const bgbA = this.bgA.getBackgroundActiveBox()
        const bgbB = this.bgB.getBackgroundActiveBox()
        if (bgbA && bgbB)
          bgbB.exchangeContent(bgbA)
      }
    }

    /**
     * Basic initialization procedure
     * @override
     */
    initActivity() {
      super.initActivity()
      if (!this.firstRun)
        this.buildVisualComponents()
      else
        this.firstRun = false

      if (this.bgA && this.bgB) {
        this.shuffle([this.bgA], true, true)
        if (this.useOrder)
          this.currentItem = this.bgA.getNextItem(-1)
        this.setAndPlayMsg('initial', 'start')
        this.invalidate().update()
        this.playing = true
      }
    }

    /**
     * Updates the graphic content of this panel.
     * This method will be called from {@link AWT.Container#update} when needed.
     * @override
     * @param {AWT.Rectangle} dirtyRegion - Specifies the area to be updated. When `null`,
     * it's the whole panel.
     */
    updateContent(dirtyRegion) {
      super.updateContent()
      if (this.bgA && this.bgB && this.$canvas) {
        const
          canvas = this.$canvas.get(-1),
          ctx = canvas.getContext('2d')
        if (!dirtyRegion)
          dirtyRegion = new AWT.Rectangle(0, 0, canvas.width, canvas.height)
        ctx.clearRect(dirtyRegion.pos.x, dirtyRegion.pos.y, dirtyRegion.dim.width, dirtyRegion.dim.height)
        this.bgA.update(ctx, dirtyRegion)
        this.bgB.update(ctx, dirtyRegion)
      }
      return this
    }

    /**
     * Sets the real dimension of this panel.
     * @override
     * @param {AWT.Dimension} preferredMaxSize - The maximum surface available for the activity panel
     * @returns {AWT.Dimension}
     */
    setDimension(preferredMaxSize) {
      return !this.bgA || !this.bgB || this.getBounds().equals(preferredMaxSize) ?
        preferredMaxSize :
        BoxBag.layoutDouble(preferredMaxSize, this.bgA, this.bgB, this.act.boxGridPos, this.act.margin)
    }

    /**
     * Sets the size and position of this activity panel
     * @override
     * @param {AWT.Rectangle} rect
     */
    setBounds(rect) {
      if (this.$canvas)
        this.$canvas.remove()

      super.setBounds(rect)
      if (this.bgA || this.bgB) {
        // Create the main canvas
        this.$canvas = $(`<canvas width="${rect.dim.width}" height="${rect.dim.height}"/>`).css({
          position: 'absolute',
          top: 0,
          left: 0
        })
        this.$div.append(this.$canvas)

        // Create a [BoxConnector](BoxConnector.html) and attach it to the canvas context
        this.bc = new BoxConnector(this, this.$canvas.get(-1).getContext('2d'))

        // Repaint all
        this.invalidate().update()
      }
    }

    /**
     * Builds the accessible components needed for this ActivityPanel
     * This method is called when all main elements are placed and visible, when the activity is ready
     * to start or when resized.
     * @override
     */
    buildAccessibleComponents() {
      if (this.$canvas && this.accessibleCanvas) {
        super.buildAccessibleComponents()
        if (this.bgA)
          this.bgA.buildAccessibleElements(this.$canvas, this.$div, 'mousedown')
        if (this.bgB) {
          this.bgB.setCellAttr('accessibleAlwaysActive', true)
          this.bgB.buildAccessibleElements(this.$canvas, this.$div, 'mousedown')
        }
      }
    }

    /**
     * Main handler used to process mouse, touch, keyboard and edit events
     * @override
     * @param {HTMLEvent} event - The HTML event to be processed
     * @returns {boolean=} - When this event handler returns `false`, jQuery will stop its
     * propagation through the DOM tree. See: {@link http://api.jquery.com/on}
     */
    processEvent(event) {
      if (this.bc && this.playing) {
        //
        // The [AWT.Point](AWT.html#Point) where the mouse or touch event has been originated
        let p = null
        //
        // Two [ActiveBox](ActiveBox.html) pointers used for the [BoxConnector](BoxConnector.html)
        // `origin` and `dest` points.
        let bx1, bx2
        // Array to be filled with actions to be executed at the end of event processing
        const delayedActions = []
        //
        // _touchend_ event don't provide pageX nor pageY information
        if (event.type === 'touchend')
          p = this.bc.active ? this.bc.dest.clone() : new AWT.Point()
        else {
          // Touch events can have more than one touch, so `pageX` must be obtained from `touches[0]`
          const
            x = event.originalEvent && event.originalEvent.touches ? event.originalEvent.touches[0].pageX : event.pageX,
            y = event.originalEvent && event.originalEvent.touches ? event.originalEvent.touches[0].pageY : event.pageY
          p = new AWT.Point(x - this.$div.offset().left, y - this.$div.offset().top)
        }

        // Flag for tracking `mouseup` events
        let up = false
        switch (event.type) {
          case 'touchcancel':
            // Canvel movement
            if (this.bc.active)
              this.bc.end()
            break

          case 'mouseup':
            // Don't consider drag moves below 3 pixels. Can be a "trembling click"
            if (this.bc.active && p.distanceTo(this.bc.origin) <= 3)
              break

            up = true
          /* falls through */
          case 'touchend':
          case 'touchstart':
          case 'mousedown':
            if (!this.bc.active) {
              //
              // A new pairing starts
              //
              // Pairings can never start with a `mouseup` event
              if (up)
                break

              this.ps.stopMedia(1)
              //
              // Find the ActiveBox behind the clicked point
              bx1 = this.bgA.findActiveBox(p)
              if (bx1 && !bx1.isInactive() && (!this.act.useOrder || bx1.idOrder === this.currentItem)) {
                // Start the [BoxConnector](BoxConnector.html)
                if (this.act.dragCells)
                  this.bc.begin(p, bx1)
                else
                  this.bc.begin(p)
                // Play cell media or event sound
                if (!bx1.playMedia(this.ps, delayedActions))
                  this.playEvent('click')

                // Move the focus to the opposite accessible group
                if (this.bgB.$accessibleDiv)
                  this.bgB.$accessibleDiv.focus()
              }
            } else {
              this.ps.stopMedia(1)
              // Pairing completed
              //
              // Find the active boxes behind `bc.origin` and `p`
              if (this.act.dragCells)
                bx1 = this.bc.bx
              else
                bx1 = this.bgA.findActiveBox(this.bc.origin)
              bx2 = this.bgB.findActiveBox(p)

              // BoxConnector ends here
              this.bc.end()

              // Check if the pairing was OK
              if (bx1 && bx2 && bx2.isInactive()) {
                let ok = false
                const
                  src = `${bx1.getDescription()} (${bx1.idOrder})`,
                  dest = `(${bx2.idOrder})`,
                  target = this.act.abc['primary'].getActiveBoxContent(bx2.idOrder)
                if (bx1.getContent().isEquivalent(target, true)) {
                  // Pairing OK
                  ok = true
                  bx1.exchangeContent(bx2)
                  bx1.setVisible(false)
                  if (this.act.useOrder)
                    this.currentItem = this.bgA.getNextItem(this.currentItem)
                }
                // Check results and notify action
                const cellsAtPlace = this.bgA.countInactiveCells()
                this.ps.reportNewAction(this.act, 'PLACE', src, dest, ok, cellsAtPlace)
                // Finish activity or play event sound
                if (ok && cellsAtPlace === this.bgA.getNumCells())
                  this.finishActivity(true)
                else
                  this.playEvent(ok ? 'actionOk' : 'actionError')
              }
              this.update()

              // Move the focus to the `source` accessible group
              if (this.bgA.$accessibleDiv)
                this.bgA.$accessibleDiv.focus()
            }
            break

          case 'mousemove':
          case 'touchmove':
            this.bc.moveTo(p)
            break
        }
        delayedActions.forEach(action => action())
        event.preventDefault()
      }
    }
  }

  Object.assign(DoublePuzzlePanel.prototype, {
    /**
     * The {@link ActiveBoxBag} object containing the information to be displayed in the `primary` panel
     * @name DoublePuzzlePanel#bgA
     * @type {ActiveBoxBag} */
    bgA: null,
    /**
     * The secondary {@link ActiveBoxBag}, initially empty.
     * @name DoublePuzzlePanel#bgB
     * @type {ActiveBoxBag} */
    bgB: null,
    /**
     * The box connector
     * @name DoublePuzzlePanel#bc
     * @type {BoxConnector} */
    bc: null,
    /**
     * List of mouse, touch and keyboard events intercepted by this panel
     * @override
     * @name DoublePuzzlePanel#events
     * @type {string[]} */
    events: ['mousedown', 'mouseup', 'mousemove', 'touchstart', 'touchend', 'touchmove', 'touchcancel'],
  })

  /**
   * Panel class associated to this type of activity: {@link DoublePuzzlePanel}
   * @type {class} */
  DoublePuzzle.Panel = DoublePuzzlePanel

  // Register class in Activity.prototype
  Activity.CLASSES['@puzzles.DoublePuzzle'] = DoublePuzzle

  return DoublePuzzle
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/activities/puzzles/ExchangePuzzle.js":
/*!**************************************************!*\
  !*** ./src/activities/puzzles/ExchangePuzzle.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : activities/puzzles/ExchangePuzzle.js
 *  Created : 30/05/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ../../Activity */ "./src/Activity.js"),
  __webpack_require__(/*! ../../boxes/ActiveBoxGrid */ "./src/boxes/ActiveBoxGrid.js"),
  __webpack_require__(/*! ../../boxes/BoxBag */ "./src/boxes/BoxBag.js"),
  __webpack_require__(/*! ../../boxes/BoxConnector */ "./src/boxes/BoxConnector.js"),
  __webpack_require__(/*! ../../AWT */ "./src/AWT.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, Activity, ActiveBoxGrid, BoxBag, BoxConnector, AWT) {

  /**
   * This class of {@link Activity} shows only one panel with scrambled {@link ActiveBox} objects.
   * To solve the activity, each cell must exchange its location with another one. When all cells are
   * on place, the activity is done.
   * @exports ExchangePuzzle
   * @class
   * @extends Activity
   */
  class ExchangePuzzle extends Activity {
    /**
     * ExchangePuzzle constructor
     * @param {JClicProject} project - The {@link JClicProject} to which this activity belongs
     */
    constructor(project) {
      super(project)
    }

    /**
     * Retrieves the minimum number of actions needed to solve this activity.
     * @override
     * @returns {number}
     */
    getMinNumActions() {
      return this.abc.primary.getNumCells()
    }

    /**
     * Whether or not the activity uses random to scramble internal components
     * @override
     * @returns {boolean}
     */
    hasRandom() {
      return true
    }

    /**
     * When `true`, the activity must always be scrambled
     * @override
     * @returns {boolean}
     */
    shuffleAlways() {
      return true
    }

    /**
     * Whether the activity allows the user to request help.
     * @override
     * @returns {boolean}
     */
    helpSolutionAllowed() {
      return true
    }
  }

  /**
   * The {@link ActivityPanel} where activities of type {@link ExchangePuzzle} are played.
   * @class
   * @extends ActivityPanel
   */
  class ExchangePuzzlePanel extends Activity.Panel {
    /**
     * ExchangePuzzlePanel constructor
     * @param {Activity} act - The {@link Activity} to which this Panel belongs
     * @param {JClicPlayer} ps - Any object implementing the methods defined in the
     * [PlayStation](http://projectestac.github.io/jclic/apidoc/edu/xtec/jclic/PlayStation.html)
     * Java interface.
     * @param {external:jQuery=} $div - The jQuery DOM element where this Panel will deploy
     */
    constructor(act, ps, $div) {
      super(act, ps, $div)
    }

    /**
     * Miscellaneous cleaning operations
     * @override
     */
    clear() {
      if (this.bg) {
        this.bg.end()
        this.bg = null
      }
    }

    /**
     * Prepares the visual components of the activity
     * @override
     */
    buildVisualComponents() {
      if (this.firstRun)
        super.buildVisualComponents()
      this.clear()

      const abc = this.act.abc['primary']
      if (abc) {
        if (abc.imgName)
          abc.setImgContent(this.act.project.mediaBag, null, false)

        if (this.act.acp !== null)
          this.act.acp.generateContent(abc.nch, abc.ncw, [abc], false)

        this.bg = ActiveBoxGrid.createEmptyGrid(null, this, this.act.margin, this.act.margin, abc)
        this.bg.setContent(abc)
        this.bg.setVisible(true)
      }
    }

    /**
     * Basic initialization procedure
     * @override
     */
    initActivity() {
      super.initActivity()
      if (!this.firstRun)
        this.buildVisualComponents()
      else
        this.firstRun = false

      if (this.bg) {
        this.shuffle([this.bg], true, true)
        if (this.useOrder)
          this.currentItem = this.bg.getNextItem(-1)
        this.setAndPlayMsg('initial', 'start')
        this.invalidate().update()
        this.playing = true
      }
    }

    /**
     * Updates the graphic content of this panel.
     * This method will be called from {@link AWT.Container#update} when needed.
     * @override
     * @param {AWT.Rectangle} dirtyRegion - Specifies the area to be updated. When `null`,
     * it's the whole panel.
     */
    updateContent(dirtyRegion) {
      super.updateContent(dirtyRegion)
      if (this.bg && this.$canvas) {
        const
          canvas = this.$canvas.get(-1),
          ctx = canvas.getContext('2d')
        if (!dirtyRegion)
          dirtyRegion = new AWT.Rectangle(0, 0, canvas.width, canvas.height)
        ctx.clearRect(dirtyRegion.pos.x, dirtyRegion.pos.y, dirtyRegion.dim.width, dirtyRegion.dim.height)
        this.bg.update(ctx, dirtyRegion)
      }
      return this
    }

    /**
     * Sets the real dimension of this panel.
     * @override
     * @param {AWT.Dimension} preferredMaxSize - The maximum surface available for the activity panel
     * @returns {AWT.Dimension}
     */
    setDimension(preferredMaxSize) {
      return !this.bg || this.getBounds().equals(preferredMaxSize) ?
        preferredMaxSize :
        BoxBag.layoutSingle(preferredMaxSize, this.bg, this.act.margin)
    }

    /**
     * Sets the size and position of this activity panel
     * @override
     * @param {AWT.Rectangle} rect
     */
    setBounds(rect) {
      if (this.$canvas)
        this.$canvas.remove()

      super.setBounds(rect)
      if (this.bg) {
        // Create the main canvas
        this.$canvas = $(`<canvas width="${rect.dim.width}" height="${rect.dim.height}"/>`).css({
          position: 'absolute',
          top: 0,
          left: 0
        })
        this.$div.append(this.$canvas)

        // Create a [BoxConnector](BoxConnector.html) and attach it to the canvas context
        this.bc = new BoxConnector(this, this.$canvas.get(-1).getContext('2d'))

        // Repaint all
        this.invalidate().update()
      }
    }

    /**
     * Builds the accessible components needed for this ActivityPanel
     * This method is called when all main elements are placed and visible, when the activity is ready
     * to start or when resized.
     * @override
     */
    buildAccessibleComponents() {
      if (this.$canvas && this.accessibleCanvas && this.bg) {
        super.buildAccessibleComponents()
        this.bg.buildAccessibleElements(this.$canvas, this.$div, 'mousedown')
      }
    }

    /**
     * Main handler used to process mouse, touch, keyboard and edit events
     * @override
     * @param {HTMLEvent} event - The HTML event to be processed
     * @returns {boolean=} - When this event handler returns `false`, jQuery will stop its
     * propagation through the DOM tree. See: {@link http://api.jquery.com/on}
     */
    processEvent(event) {
      if (this.bc && this.playing) {

        //
        // The [AWT.Point](AWT.html#Point) where the mouse or touch event has been originated
        let p = null
        //
        // Two [ActiveBox](ActiveBox.html) pointers used for the [BoxConnector](BoxConnector.html)
        // `origin` and `dest` points.
        let bx1, bx2
        // Array to be filled with actions to be executed at the end of event processing
        const delayedActions = []
        //
        // _touchend_ event don't provide pageX nor pageY information
        if (event.type === 'touchend')
          p = this.bc.active ? this.bc.dest.clone() : new AWT.Point()
        else {
          // Touch events can have more than one touch, so `pageX` must be obtained from `touches[0]`
          const
            x = event.originalEvent && event.originalEvent.touches ? event.originalEvent.touches[0].pageX : event.pageX,
            y = event.originalEvent && event.originalEvent.touches ? event.originalEvent.touches[0].pageY : event.pageY
          p = new AWT.Point(x - this.$div.offset().left, y - this.$div.offset().top)
        }

        // Flag for tracking `mouseup` events
        let up = false

        switch (event.type) {
          case 'touchcancel':
            // Canvel movement
            if (this.bc.active)
              this.bc.end()
            break

          case 'mouseup':
            // Don't consider drag moves below 3 pixels. Can be a "trembling click"
            if (this.bc.active && p.distanceTo(this.bc.origin) <= 3)
              break

            up = true
          /* falls through */
          case 'touchend':
          case 'touchstart':
          case 'mousedown':
            if (!this.bc.active) {
              // New pairing starts
              //
              // Pairings never can start with a `mouseup` event
              if (up)
                break

              this.ps.stopMedia(1)
              // Find the ActiveBox behind the clicked point
              bx1 = this.bg.findActiveBox(p)
              if (bx1) {
                // Start the [BoxConnector](BoxConnector.html)
                if (this.act.dragCells)
                  this.bc.begin(p, bx1)
                else
                  this.bc.begin(p)
                // Play cell media or event sound
                if (!bx1.playMedia(this.ps, delayedActions))
                  this.playEvent('click')
              }
            } else {
              this.ps.stopMedia(1)
              // Pairing completed
              //
              // Find the active boxes behind `bc.origin` and `p`
              if (this.act.dragCells)
                bx1 = this.bc.bx
              else
                bx1 = this.bg.findActiveBox(this.bc.origin)
              this.bc.end()
              bx2 = this.bg.findActiveBox(p)
              //
              // Check if the pairing was OK
              if (bx1 && bx2) {
                const
                  src = `${bx1.getDescription()} (${bx1.idOrder})`,
                  dest = `(${bx2.idLoc})`
                let ok = (bx1.idOrder === bx2.idLoc)
                this.bg.swapCellPositions(bx1, bx2, true)
                // Check results and notify action
                const cellsAtPlace = this.bg.countCellsAtEquivalentPlace(true)
                this.ps.reportNewAction(this.act, 'PLACE', src, dest, ok, cellsAtPlace)
                // End activity or play event sound
                if (ok && cellsAtPlace === this.bg.getNumCells())
                  this.finishActivity(true)
                else
                  this.playEvent(ok ? 'actionOk' : 'actionError')
              }
              this.update()
            }
            break

          case 'mousemove':
          case 'touchmove':
            this.bc.moveTo(p)
            break
        }
        delayedActions.forEach(action => action())
        event.preventDefault()
      }
    }
  }

  Object.assign(ExchangePuzzlePanel.prototype, {
    /**
     * The {@link ActiveBoxBag} object containing the information to be displayed in the panel.
     * @name ExchangePuzzlePanel#bg
     * @type {ActiveBoxBag} */
    bg: null,
    /**
     * The box connector
     * @name ExchangePuzzlePanel#bc
     * @type {BoxConnector} */
    bc: null,
    /**
     * List of mouse, touch and keyboard events intercepted by this panel
     * @override
     * @name ExchangePuzzlePanel#events
     * @type {string[]} */
    events: ['mousedown', 'mouseup', 'mousemove', 'touchstart', 'touchend', 'touchmove', 'touchcancel'],
  })

  /**
   * Panel class associated to this type of activity: {@link ExchangePuzzlePanel}
   * @type {class} */
  ExchangePuzzle.Panel = ExchangePuzzlePanel

  // Register class in Activity.prototype
  Activity.CLASSES['@puzzles.ExchangePuzzle'] = ExchangePuzzle

  return ExchangePuzzle
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/activities/puzzles/HolePuzzle.js":
/*!**********************************************!*\
  !*** ./src/activities/puzzles/HolePuzzle.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : activities/puzzles/HolePuzzle.js
 *  Created : 01/06/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ../../Activity */ "./src/Activity.js"),
  __webpack_require__(/*! ../../boxes/ActiveBoxGrid */ "./src/boxes/ActiveBoxGrid.js"),
  __webpack_require__(/*! ../../boxes/BoxBag */ "./src/boxes/BoxBag.js"),
  __webpack_require__(/*! ../../boxes/BoxConnector */ "./src/boxes/BoxConnector.js"),
  __webpack_require__(/*! ../../AWT */ "./src/AWT.js"),
  __webpack_require__(/*! ../../shapers/Rectangular */ "./src/shapers/Rectangular.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, Activity, ActiveBoxGrid, BoxBag, BoxConnector, AWT, Rectangular) {

  /**
   * This class of {@link Activity} shows only one panel with scrambled {@link ActiveBox} cells.
   *
   * One of the cells is out of the main panel, thus allowing its neighbors occupy their space.
   * Only immediate neighbors of the "hole" can move into it.
   *
   * When all cells are on place, the initially "expulsed" cell comes back home and the activity is done.
   * @exports HolePuzzle
   * @class
   * @extends Activity
   */
  class HolePuzzle extends Activity {
    /**
     * HolePuzzle constructor
     * @param {JClicProject} project - The {@link JClicProject} to which this activity belongs
     */
    constructor(project) {
      super(project)
    }

    /**
     * Retrieves the minimum number of actions needed to solve this activity.
     * @override
     * @returns {number}
     */
    getMinNumActions() {
      return this.abc.primary.getNumCells()
    }

    /**
     * Whether or not the activity uses random to scramble internal components
     * @override
     * @returns {boolean}
     */
    hasRandom() {
      return true
    }

    /**
     * When `true`, the activity must always be scrambled
     * @override
     * @returns {boolean}
     */
    shuffleAlways() {
      return true
    }

    /**
     * Whether the activity allows the user to request help
     * @override
     * @returns {boolean}
     */
    helpSolutionAllowed() {
      return true
    }
  }

  /**
   * The {@link ActivityPanel} where {@link HolePuzzle} activities are played
   * @class
   * @extends ActivityPanel
   */
  class HolePuzzlePanel extends Activity.Panel {
    /**
     * HolePuzzlePanel constructor
     * @param {Activity} act - The {@link Activity} to which this Panel belongs
     * @param {JClicPlayer} ps - Any object implementing the methods defined in the
     * [PlayStation](http://projectestac.github.io/jclic/apidoc/edu/xtec/jclic/PlayStation.html)
     * Java interface.
     * @param {external:jQuery=} $div - The jQuery DOM element where this Panel will deploy
     */
    constructor(act, ps, $div) {
      super(act, ps, $div)
    }

    /**
     * Miscellaneous cleaning operations
     * @override
     */
    clear() {
      if (this.bg) {
        this.bg.end()
        this.bg = null
      }
      if (this.parkBg) {
        this.parkBg.end()
        this.parkBg = null
      }
    }

    /**
     * Prepares the visual components of the activity
     * @override
     */
    buildVisualComponents() {
      if (this.firstRun)
        super.buildVisualComponents()
      this.clear()

      const abc = this.act.abc['primary']
      if (abc) {
        if (abc.imgName)
          abc.setImgContent(this.act.project.mediaBag, null, false)

        if (this.act.acp !== null)
          this.act.acp.generateContent(abc.nch, abc.ncw, [abc], false)

        this.bg = ActiveBoxGrid.createEmptyGrid(null, this, this.act.margin, this.act.margin, abc)
        this.bg.setContent(abc)
        this.bg.setVisible(true)

        this.hiddenBoxIndex = Math.floor(Math.random() * this.bg.getNumCells())
        this.hiddenBox = this.bg.getActiveBox(this.hiddenBoxIndex)
        this.hiddenBox.setVisible(false)
        this.parkBg = new ActiveBoxGrid(null, this, abc.bb, this.act.margin, this.act.margin,
          this.hiddenBox.dim.width, this.hiddenBox.dim.height, new Rectangular(1, 1))
        this.parkBg.setContent(abc, null, this.hiddenBoxIndex, 0, 1)
        this.parkBg.setBorder(this.bg.hasBorder())
        this.parkBg.setVisible(true)
      }
    }

    /**
     * Basic initialization procedure
     * @override
     */
    initActivity() {
      super.initActivity()
      if (!this.firstRun)
        this.buildVisualComponents()
      else
        this.firstRun = false

      if (this.bg) {
        //
        // This activity has an special shuffle method. Cells can move only to places near the 'hole'
        if (this.act.shuffles % 2 !== 1)
          this.act.shuffles++
        for (var i = 0; i < this.act.shuffles; i++) {
          const pth = this.bg.getCoord(this.hiddenBox)
          const v = Math.floor(Math.random() * 2) === 0 ? 1 : -1

          if (Math.floor(Math.random() * 2) === 0) {
            pth.x += v;
            if (pth.x < 0 || pth.x >= this.bg.nCols)
              pth.x -= 2 * v
          } else {
            pth.y += v
            if (pth.y < 0 || pth.y >= this.bg.nRows)
              pth.y -= 2 * v
          }
          var dstBx = this.bg.getActiveBoxWithIdLoc(pth.y * this.bg.nCols + pth.x)
          if (dstBx !== null)
            this.hiddenBox.exchangeLocation(dstBx)
        }
        this.setAndPlayMsg('initial', 'start')
        this.invalidate().update()
        this.playing = true
      }
    }

    /**
     * Updates the graphic content of this panel.
     * This method will be called from {@link AWT.Container#update} when needed.
     * @override
     * @param {AWT.Rectangle} dirtyRegion - Specifies the area to be updated. When `null`,
     * it's the whole panel.
     */
    updateContent(dirtyRegion) {
      super.updateContent(dirtyRegion)
      if (this.bg && this.parkBg && this.$canvas) {
        const
          canvas = this.$canvas.get(-1),
          ctx = canvas.getContext('2d')
        if (!dirtyRegion)
          dirtyRegion = new AWT.Rectangle(0, 0, canvas.width, canvas.height)
        ctx.clearRect(dirtyRegion.pos.x, dirtyRegion.pos.y, dirtyRegion.dim.width, dirtyRegion.dim.height)
        this.bg.update(ctx, dirtyRegion)
        this.parkBg.update(ctx, dirtyRegion)
      }
      return this
    }

    /**
     * Sets the real dimension of this panel.
     * @override
     * @param {AWT.Dimension} preferredMaxSize - The maximum surface available for the activity panel
     * @returns {AWT.Dimension}
     */
    setDimension(preferredMaxSize) {
      return !this.bg || !this.parkBg || this.getBounds().equals(preferredMaxSize) ?
        preferredMaxSize :
        BoxBag.layoutDouble(preferredMaxSize, this.bg, this.parkBg, this.act.boxGridPos, this.act.margin)
    }

    /**
     * Sets the size and position of this activity panel
     * @override
     * @param {AWT.Rectangle} rect
     */
    setBounds(rect) {
      if (this.$canvas)
        this.$canvas.remove()

      super.setBounds(rect)
      if (this.bg && this.parkBg) {
        // Create the main canvas
        this.$canvas = $(`<canvas width="${rect.dim.width}" height="${rect.dim.height}"/>`).css({
          position: 'absolute',
          top: 0,
          left: 0
        })
        this.$div.append(this.$canvas)

        // Repaint all
        this.invalidate().update()
      }
    }

    /**
     * Builds the accessible components needed for this ActivityPanel
     * This method is called when all main elements are placed and visible, when the activity is ready
     * to start or when resized.
     * @override
     */
    buildAccessibleComponents() {
      if (this.$canvas && this.accessibleCanvas && this.bg) {
        super.buildAccessibleComponents()
        this.bg.buildAccessibleElements(this.$canvas, this.$div)
      }
    }

    /**
     * Main handler used to process mouse, touch, keyboard and edit events
     * @override
     * @param {HTMLEvent} event - The HTML event to be processed
     * @returns {boolean=} - When this event handler returns `false`, jQuery will stop its
     * propagation through the DOM tree. See: {@link http://api.jquery.com/on}
     */
    processEvent(event) {
      if (this.playing) {
        const p = new AWT.Point(
          event.pageX - this.$div.offset().left,
          event.pageY - this.$div.offset().top)
        // Array to be filled with actions to be executed at the end of event processing
        const delayedActions = []

        switch (event.type) {
          case 'click':
            this.ps.stopMedia(1)
            // Find the box behind the clicked point
            const bx = this.bg.findActiveBox(p)
            if (bx) {
              if (bx.isVisible()) {
                // Check if it's a valid move
                const pt = this.bg.getCoordDist(bx, this.hiddenBox);
                if (Math.abs(pt.x) + Math.abs(pt.y) === 1) {
                  // Ok, the cell is adjacent to the hole. Complete the move.
                  let m = bx.playMedia(this.ps, delayedActions)
                  const
                    src = `${bx.getDescription()} (${bx.idOrder})`,
                    dest = `(${this.hiddenBox.idLoc})`
                  bx.exchangeLocation(this.hiddenBox)
                  const ok = bx.idOrder === bx.idLoc
                  // Check results and notify action
                  const cellsAtPlace = this.bg.countCellsAtEquivalentPlace(true)
                  this.ps.reportNewAction(this.act, 'SELECT', src, dest, ok, cellsAtPlace)
                  if (ok && cellsAtPlace === this.bg.getNumCells()) {
                    // Activity completed!
                    this.hiddenBox.setVisible(true)
                    this.parkBg.setVisible(false)
                    this.finishActivity(true)
                  } else
                    if (!m)
                      this.playEvent('click')
                }
                this.update()
              } else {
                this.playEvent('actionError')
              }
            }
            break
        }
        delayedActions.forEach(action => action())
        event.preventDefault()
      }
    }
  }

  Object.assign(HolePuzzlePanel.prototype, {
    /**
     * The {@link ActiveBoxBag} object containing the information to be displayed in the panel.
     * @name HolePuzzlePanel#bg
     * @type {ActiveBoxBag} */
    bg: null,
    /**
     * An auxiliary box bag with only one box, used to store the "missing piece" of
     * the puzzle.
     * @name HolePuzzlePanel#parkBg
     * @type {ActiveBoxGrid} */
    parkBg: null,
    /**
     * The hidden cell
     * @name HolePuzzlePanel#hiddenBox
     * @type {ActiveBox} */
    hiddenBox: null,
    /**
     * Index of the hidden cell on the ActiveBagContent
     * @name HolePuzzlePanel#hiddenBoxIndex
     * @type {number} */
    hiddenBoxIndex: -1,
    /**
     * List of mouse, touch and keyboard events intercepted by this panel
     * @override
     * @name HolePuzzlePanel#events
     * @type {string[]} */
    events: ['click'],
  })

  /**
   * Panel class associated to this type of activity: {@link HolePuzzlePanel}
   * @type {class} */
  HolePuzzle.Panel = HolePuzzlePanel

  // Register class in Activity.prototype
  Activity.CLASSES['@puzzles.HolePuzzle'] = HolePuzzle

  return HolePuzzle
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/activities/text/Complete.js":
/*!*****************************************!*\
  !*** ./src/activities/text/Complete.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : activities/text/Complete.js
 *  Created : 20/06/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ../../Activity */ "./src/Activity.js"),
  __webpack_require__(/*! ./TextActivityBase */ "./src/activities/text/TextActivityBase.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, Activity, TextActivityBase) {

  /**
   * This type of text activity suggests users to complete a given text, without any help on where to
   * write the missing words or phrases.
   * @exports Complete
   * @class
   * @extends TextActivityBase
   */
  class Complete extends TextActivityBase {
    /**
     * Complete constructor
     * @param {JClicProject} project - The project to which this activity belongs
     */
    constructor(project) {
      super(project)
    }
  }

  /**
   * The {@link TextActivityBasePanel} where {@link Complete} activities are played.
   * @class
   * @extends TextActivityBasePanel
   */
  class CompletePanel extends TextActivityBase.Panel {
    /**
     * CompletePanel constructor
     * @param {Activity} act - The {@link Activity} to which this Panel belongs
     * @param {JClicPlayer} ps - Any object implementing the methods defined in the
     * [PlayStation](http://projectestac.github.io/jclic/apidoc/edu/xtec/jclic/PlayStation.html)
     * Java interface.
     * @param {external:jQuery=} $div - The jQuery DOM element where this Panel will deploy
     */
    constructor(act, ps, $div) {
      super(act, ps, $div)
    }

    /**
     * Creates a target DOM element for the provided target.
     * @override
     * @param {TextActivityDocument.TextTarget} _target - The target related to the DOM object to be created
     * @param {external:jQuery} _$span -  - An initial DOM object (usually a `span`) that can be used
     * to store the target, or replaced by another type of object.
     * @returns {external:jQuery} - The jQuery DOM element loaded with the target data.
     */
    $createTargetElement(_target, _$span) {
      // Targets are always hidden in this type of activities
      return null
    }

    /**
     * Called when the activity starts playing
     * @override
     */
    startActivity() {
      super.startActivity()
      this.$div.find('.JClicTextDocument').attr('contenteditable', 'true').attr('spellcheck', 'false')
    }

    /**
     * Evaluates all the targets in this panel. This method is usually called from the `Check` button.
     * @override
     * @returns {boolean} - `true` when all targets are OK, `false` otherwise.
     */
    evaluatePanel() {
      // TODO: Mark errors!
      const
        currentText = this.$div.find('.JClicTextDocument').text().trim(),
        originalText = this.act.document.getRawText(),
        ok = this.act.ev.checkText(currentText, originalText)

      this.ps.reportNewAction(this.act, 'WRITE', currentText, originalText, ok, this.targets.length)

      if (ok) {
        this.finishActivity(true)
        return true
      } else {
        this.playEvent('finishedError')
      }
      return false
    }

    /**
     * Ordinary ending of the activity, usually called form `processEvent`
     * @param {boolean} result - `true` if the activity was successfully completed, `false` otherwise
     */
    finishActivity(result) {
      this.$div.find('.JClicTextDocument').attr('contenteditable', 'false')
      return super.finishActivity(result)
    }
  }

  /**
   * Panel class associated to this type of activity: {@link CompletePanel}
   * @type {class} */
  Complete.Panel = CompletePanel

  // Register class in Activity.prototype
  Activity.CLASSES['@text.Complete'] = Complete

  return Complete
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/activities/text/Evaluator.js":
/*!******************************************!*\
  !*** ./src/activities/text/Evaluator.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : activities/text/Evaluator.js
 *  Created : 14/04/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ../../Utils */ "./src/Utils.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, Utils) {

  /**
   * This class and its derivatives {@link BasicEvaluator} and
   * {@link ComplexEvaluator} are used to evaluate the answers written by the final users
   * in text activities.
   * @exports Evaluator
   * @class
   */
  class Evaluator {
    /**
     * Evaluator constructor
     * @param {string} className - The class name of this evaluator.
     */
    constructor(className) {
      this.className = className
      this.collator = (window.Intl && window.Intl.Collator) ?
        new window.Intl.Collator() :
        { compare: (a, b) => this.checkCase ? a === b : a.toUpperCase() === b.toUpperCase() }
    }

    /**
     * Factory constructor that returns a specific type of {@link Evaluator} based on the `class`
     * attribute declared in the $xml element.
     * @param {external:jQuery} $xml - The XML element to be parsed.
     * @returns {Evaluator}
     */
    static getEvaluator($xml) {
      let ev = null
      if ($xml) {
        const className = $xml.attr('class')
        const cl = Evaluator.CLASSES[className]
        if (cl) {
          ev = new cl(className)
          ev.setProperties($xml)
        } else
          Utils.log('error', `Unknown evaluator class: "${className}"`)
      }
      return ev
    }

    /**
     * Loads the object settings from a specific JQuery XML element
     * @param {external:jQuery} $xml - The jQuery XML element to parse
     */
    setProperties($xml) {
      Utils.attrForEach($xml.get(0).attributes, (name, value) => {
        switch (name) {
          case 'class':
            this.className = value
            break
          case 'checkCase':
          case 'checkAccents':
          case 'checkPunctuation':
          case 'checkDoubleSpaces':
          case 'detail':
            this[name] = Utils.getBoolean(value)
            break
          case 'checkSteps':
          case 'checkScope':
            this[name] = Number(value)
            break
        }
      })
      return this
    }

    /**
     * Initializes this evaluator
     * @param {string[]} _locales - An array of valid locales, to be used by Intl.Collator
     */
    init(_locales) {
      this.initiated = true
    }

    /**
     * Checks the given text against a set of valid matches
     * @param {string} text - The text to be checked
     * @param {(string|string[])} match - The valid expression or expressions with which to compare.
     * @returns {boolean} - `true` if the checked expression is valid, `false` otherwise.
     */
    checkText(text, match) {
      if (match instanceof Array)
        return match.some(m => this._checkText(text, m))
      else if (match)
        return this._checkText(text, match)
      else
        return false
    }

    /**
     * Abstract method to be implemented in subclasses.
     * Performs the validation of a string against a single match.
     * @param {string} _text - The text to be checked
     * @param {string} _match - A valid expression with which to compare.
     * @returns {boolean} - `true` when the two expressions can be considered equivalent.
     */
    _checkText(_text, _match) {
      return false
    }

    /**
     * Evaluates the given text against a set of valid matches, returning an array of flags useful
     * to indicate where the mistakes are located.
     * @param {string} text - The text to be checked
     * @param {(string|string[])} match - The valid expression or expressions with which to compare.
     * @returns {number[]} - An array of flags (one number for character) indicating whether each
     * position is erroneous or ok.
     */
    evalText(text, match) {
      if (!(match instanceof Array))
        match = [match]
      return this._evalText(text, match)
    }

    /**
     * Abstract method to be implemented in subclasses.
     * Performs the evaluation of a string against an array of valid matches, returning an array of
     * flags useful to indicate where the mistakes are located.
     * @param {string} _text - The text to be checked
     * @param {string} _match - A valid expression with which to compare.
     * @returns {number[]} - An array of flags (one number for character) indicating whether each
     * position is erroneous or OK.
     */
    _evalText(_text, _match) {
      return []
    }

    /**
     * Checks if the given array of flags (usually returned by `evalText`) can be considered as a
     * valid or erroneous answer.
     * @param {number[]} flags
     * @returns {boolean} - `true` when there is at least one flag and all flags are 0 (meaning no error).
     */
    isOk(flags) {
      return flags && flags.length > 0 && !flags.some(f => f !== 0)
    }
  }


  Object.assign(Evaluator.prototype, {
    /**
     * The type of evaluator.
     * @name Evaluator#className
     * @type {string} */
    className: null,
    /**
     * Whether this evaluator has been initialized or not.
     * @name Evaluator#initiated
     * @type {boolean} */
    initiated: false,
    /**
     * The Intl.Collator object used to compare strings, when available.
     * @name Evaluator#collator
     * @type {external:Collator} */
    collator: null,
    /**
     * Whether uppercase and lowercase expressions must be considered equivalent or not.
     * @name Evaluator#checkcase
     * @type {boolean} */
    checkCase: false,
  })

  /**
   * A basic evaluator that just compares texts, without looking for possible coincidences of text
   * fragments once erroneous characters removed.
   * @class
   * @extends Evaluator
   */
  class BasicEvaluator extends Evaluator {
    /**
     * BasicEvaluator constructor
     * @param {string} className - The class name of this evaluator.
     */
    constructor(className) {
      super(className)
    }

    /**
     * Initializes the {@link Evaluator#collator}.
     * @override
     * @param {string[]} locales - An array of valid locales to be used by the Inlt.Collator object
     */
    init(locales) {
      // Call `init` method on ancestor
      super.init([locales])

      // Get canonical locales
      if (window.Intl && window.Intl.Collator) {
        this.collator = new window.Intl.Collator(locales, {
          sensitivity: this.checkAccents ? this.checkCase ? 'case' : 'accent' : 'base',
          ignorePunctuation: !this.checkPunctuation
        })
      }
    }

    /**
     * Performs the validation of a string against a single match.
     * @override
     * @param {string} text - The text to be checked
     * @param {string} match - A valid expression with which to compare.
     * @returns {boolean} - `true` when the two expressions can be considered equivalent.
     */
    _checkText(text, match) {
      return this.collator.compare(this.getClearedText(text), this.getClearedText(match)) === 0
    }

    /**
     * Performs the evaluation of a string against an array of valid matches, returning an array of
     * flags useful to indicate where the mistakes are located.
     * In BasicEvaluator, all characters are just marked as 1 (error) or 0 (OK). See
     * {@link ComplexEvaluator} for more detailed analysis of answers.
     * @override
     * @param {string} text - The text to be checked
     * @param {string} match - A valid expression with which to compare.
     * @returns {number[]} - An array of flags (one number for character) indicating whether each
     * position is erroneous or OK.
     */
    _evalText(text, match) {
      return Array(text.length).fill(this._checkText(text, match[0]) ? 0 : 1)
    }

    /**
     * Removes double spaces and erroneous characters from a given text expression.
     * @param {string} src - The text to be processed.
     * @param {boolean[]} skipped - An array of boolean indicating which characters should be removed
     * from the string.
     * @returns {string}
     */
    getClearedText(src, skipped) {
      if (this.checkPunctuation && this.checkDoubleSpaces)
        return src

      if (!skipped)
        skipped = Array(src.length).fill(false)

      let sb = ''
      for (let i = 0, wasSpace = false; i < src.length; i++) {
        const ch = src.charAt(i)
        if (this.PUNCTUATION.indexOf(ch) >= 0 && !this.checkPunctuation) {
          if (!wasSpace)
            sb += ' '
          else
            skipped[i] = true
          wasSpace = true
        } else if (ch === ' ') {
          if (this.checkDoubleSpaces || !wasSpace)
            sb += ch
          else
            skipped[i] = true
          wasSpace = true
        } else {
          wasSpace = false
          sb += ch
        }
      }
      return sb
    }
  }

  Object.assign(BasicEvaluator.prototype, {
    /**
     * Whether accented letters must be considered equivalent or not.
     * @name BasicEvaluator#checkAccents
     * @type {boolean} */
    checkAccents: true,
    /**
     * Whether to check or not dots, commas and other punctuation marks when comparing texts.
     * @name BasicEvaluator#checkPunctuation
     * @type {boolean} */
    checkPunctuation: true,
    /**
     * Whether to check or not the extra spaces added between words.
     * @name BasicEvaluator#checkDoubleSpaces
     * @type {boolean} */
    checkDoubleSpaces: false,
    /**
     * String containing all the characters considered as punctuation marks (currently ".,;:")
     * @name BasicEvaluator#PUNCTUATION
     * @type {string} */
    PUNCTUATION: '.,;:',
  })

  /**
   * ComplexEvaluator acts like {@link BasicEvaluator}, but providing feedback about
   * the location of mistakes on the user's answer.
   * @class
   * @extends BasicEvaluator
   */
  class ComplexEvaluator extends BasicEvaluator {
    /**
     * ComplexEvaluator constructor
     * @param {string} className - The class name of this evaluator.
     */
    constructor(className) {
      super(className)
    }

    /**
     * Performs the evaluation of a string against an array of valid matches, returning an array of
     * flags useful to indicate where the mistakes are located.
     * In BasicEvaluator, all characters are just marked as 1 (error) or 0 (OK). See
     * {@link ComplexEvaluator} for more detailed analysis of answers.
     * @override
     * @param {string} text - The text to be checked
     * @param {string} match - A valid expression with which to compare.
     * @returns {number[]} - An array of flags (one number for character) indicating whether each
     * position is erroneous or OK.
     */
    _evalText(text, match) {

      if (!this.detail)
        return super._evalText(text, match)

      const
        skipped = Array(text.length).fill(false),
        sText = this.getClearedText(text, skipped),
        numChecks = Array(match.length),
        flags = Array(match.length),
        returnFlags = Array(text.length)
      let
        maxCheck = -1,
        maxCheckIndex = -1

      for (let i = 0; i < match.length; i++) {
        flags[i] = Array(text.length).fill(0)
        const ok = this.compareSegment(sText, sText.length, match[i], match[i].length, flags[i], false)
        numChecks[i] = this.countFlagsOk(flags[i])
        if (ok) {
          maxCheckIndex = i
          maxCheck = numChecks[i]
        }
      }

      if (maxCheckIndex === -1) {
        for (let i = 0; i < match.length; i++) {
          if (numChecks[i] > maxCheck) {
            maxCheck = numChecks[i]
            maxCheckIndex = i
          }
        }
      }

      for (let i = 0, k = 0; i < text.length; i++)
        returnFlags[i] = skipped[i] ? 0 : flags[maxCheckIndex][k++]

      return returnFlags
    }

    /**
     * Counts the number of flags on the provided array that are zero.
     * @param {number[]} flags
     * @returns {number}
     */
    countFlagsOk(flags) {
      return flags.reduce((n, v) => v == 0 ? ++n : n, 0)
    }

    /**
     * Compares two segments of text.
     * This function should make recursive calls.
     * @param {string} src - Text to be compared
     * @param {number} ls - Offset in `src` where to start the comparison
     * @param {string} ok - Text to match against.
     * @param {number} lok - Offset in `ok` where to start the comparison.
     * @param {number[]} attr - Array of integers that will be filled with information about the
     * validity or error of each character in `src`.
     * @param {boolean} iterate - When `true`, the segment will be iterated looking for other
     * coincident fragments.
     * @returns {boolean} - `true` if the comparison was valid.
     */
    compareSegment(src, ls, ok, lok, attr, iterate) {
      let
        is = 0,
        iok = 0,
        lastIs = 0,
        lastiok = true,
        result = true,
        chs = '',
        chok = ''

      if (ls === 0 || lok === 0 || src === null || ok === null)
        return false

      for (; is < ls; is++ , iok++) {
        chs = src.charAt(is)
        lastIs = is
        if (iok >= 0 && iok < lok)
          chok = ok.charAt(iok)
        else
          chok = 0
        if (this.collator.compare(chs, chok) === 0) {
          attr[is] = 0
          lastiok = true
        } else {
          result = false
          attr[is] = 1
          if (!iterate && lastiok && chok !== 0 && this.checkSteps > 0 && this.checkScope > 0) {
            const
              lbloc = 2 * this.checkSteps + 1,
              itcoinc = []
            let i = 0, j = 0
            for (; j < lbloc; j++) {
              itcoinc[j] = 0
              i = iok + Math.floor((j + 1) / 2) * ((j & 1) !== 0 ? 1 : -1)
              if (i >= lok)
                continue
              const is2 = i < 0 ? is - i : is
              if (is2 >= ls)
                continue
              const
                ls2 = Math.min(ls - is2, this.checkScope),
                iok2 = i < 0 ? 0 : i,
                lok2 = Math.min(lok - iok2, this.checkScope),
                flags2 = Array(src.length - is2).fill(0),
                result2 = this.compareSegment(src.substring(is2), ls2, ok.substring(iok2), lok2, flags2, true)
              itcoinc[j] = this.countFlagsOk(flags2)
              if (result2)
                break
            }
            if (j === lbloc) {
              let jmax = this.checkSteps
              for (j = 0; j < lbloc; j++)
                if (itcoinc[j] > itcoinc[jmax])
                  jmax = j
              i = iok + Math.floor((jmax + 1) / 2) * ((jmax & 1) !== 0 ? 1 : -1)
            }
            iok = i
            lastiok = false
          }
        }
      }
      if (iok !== lok) {
        result = false
        attr[lastIs] = 1
      }
      return result
    }
  }

  Object.assign(ComplexEvaluator.prototype, {
    /**
     * Whether to detail or not the location of errors found on the analyzed text.
     * @name ComplexEvaluator#detail
     * @type {boolean} */
    detail: true,
    /**
     * Number of times to repeat the evaluation process if an error is found, eliminating in each
     * cycle the extra characters that caused the error.
     * @name ComplexEvaluator#checkSteps
     * @type {number} */
    checkSteps: 3,
    /**
     * When an eror is detected in the analyzed expression, this variable indicates the number of
     * characters the checking pointer will be moved forward and back looking for a coincident
     * expression.
     *
     * For example, comparing the answer "_one lardzy dog_" with the correct answer "_one lazy dog_"
     * will detect an error at position 6 (an "r" instead of "z"). If `checkSteps` is set to 2 or
     * greater, the "_zy dog_" expression at position 8 will be found and evaluated as valid, while
     * a value of 1 or less will not found any coincident expression beyond the error position, thus
     * evaluating all the remaining sentence as erroneous.
     * @name ComplexEvaluator#checkScope
     * @type {number} */
    checkScope: 6,
  })

  // List of known Evaluator classes
  Evaluator.CLASSES = {
    '@BasicEvaluator': BasicEvaluator,
    '@ComplexEvaluator': ComplexEvaluator
  }

  return Evaluator
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/activities/text/FillInBlanks.js":
/*!*********************************************!*\
  !*** ./src/activities/text/FillInBlanks.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : activities/text/FillInBlanks.js
 *  Created : 20/06/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2016 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ../../Utils */ "./src/Utils.js"),
  __webpack_require__(/*! ../../Activity */ "./src/Activity.js"),
  __webpack_require__(/*! ./TextActivityBase */ "./src/activities/text/TextActivityBase.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, Utils, Activity, TextActivityBase) {

  /**
   * In this type of activity the text document has some blanks that must be filled-in. The blanks
   * can be drop-down boxes or text fields (empty or pre-filled with an initial text). Blanks can
   * also have associated clues, shown as "pop-ups".
   * @exports FillInBlanks
   * @class
   * @extends TextActivityBase
   */
  class FillInBlanks extends TextActivityBase {
    /**
     * FillInBlanks constructor
     * @param {JClicProject} project - The {@link JClicProject} to which this activity belongs
     */
    constructor(project) {
      super(project)
    }

    /**
     * This kind of activity usually makes use of the keyboard
     * @override
     * @returns {boolean}
     */
    needsKeyboard() {
      return true
    }
  }

  Object.assign(FillInBlanks.prototype, {
    /**
     * Whether to jump or not to the next target when the current one is solved.
     * @name FillInBlanks#autoJump
     * @type {boolean} */
    autoJump: false,
    /**
     * Whether to block or not the jump to other targets until the current one
     * is resolved.
     * @name FillInBlanks#forceOkToAdvance
     * @type {boolean} */
    forceOkToAdvance: false,
  })

  /**
   * The {@link TextActivityBasePanel} where {@link FillInBlanks} activities are played.
   * @class
   * @extends TextActivityBasePanel
   */
  class FillInBlanksPanel extends TextActivityBase.Panel {
    /**
     * FillInBlanksPanel constructor
     * @param {Activity} act - The {@link Activity} to which this Panel belongs
     * @param {JClicPlayer} ps - Any object implementing the methods defined in the
     * [PlayStation](http://projectestac.github.io/jclic/apidoc/edu/xtec/jclic/PlayStation.html)
     * Java interface.
     * @param {external:jQuery=} $div - The jQuery DOM element where this Panel will deploy
     */
    constructor(act, ps, $div) {
      super(act, ps, $div)
    }

    /**
     * Creates a target DOM element for the provided target. This DOM element can be an editable
     * `span` or a `select` with specific `option` elements (when the target is a drop-down list)
     * @override
     * @param {TextActivityDocument.TextTarget} target - The target related to the DOM object to be created
     * @param {external:jQuery} $span -  - An initial DOM object (usually a `span`) that can be used
     * to store the target, or replaced by another type of object.
     * @returns {external:jQuery} - The jQuery DOM element loaded with the target data.
     */
    $createTargetElement(target, $span) {

      $span.addClass('JClicTextTarget')

      const idLabel = `target${`000${this.targets.length - 1}`.slice(-3)}`
      if (target.isList && target.options && target.options.length > 0) {
        // Use a `select` element
        $span = $('<select/>', { id: idLabel, name: idLabel })
        if (target.options[0].trim() !== '')
          $('<option selected/>', { value: '', text: '' }).appendTo($span)
        target.options.forEach(op => $('<option/>', { value: op, text: op }).appendTo($span))
        target.$comboList = $span.bind('focus change', event => {
          event.textTarget = target
          this.processEvent(event)
        })
      } else {
        // Use a `span` element with the `contentEditable` attribute set `on`
        target.currentText = target.iniText ?
          target.iniText
          : Utils.fillString(target.iniChar, target.numIniChars)

        target.$span = $span.text(target.currentText).attr({
          contenteditable: 'true',
          id: idLabel,
          autocomplete: 'off',
          spellcheck: 'false'
        }).bind('focus input blur', event => {
          event.textTarget = target
          this.processEvent(event)
        }).bind('keydown keyup', event => {
          // Catch `enter` key in Firefox
          if (event.keyCode === 13) {
            event.preventDefault()
            if (event.type === 'keydown') {
              // Simulate a `blur` event
              event.textTarget = target
              event.type = 'blur'
              this.processEvent(event)
            }
          }
        })
      }
      return $span
    }

    /**
     * Evaluates all the targets in this panel. This method is usually called from the `Check` button.
     * @override
     * @returns {boolean} - `true` when all targets are OK, `false` otherwise.
     */
    evaluatePanel() {
      let targetsOk = 0
      const numTargets = this.targets.length
      this.targets.forEach(target => {
        const
          result = this.act.ev.evalText(target.readCurrentText(), target.answers),
          ok = this.act.ev.isOk(result)
        target.targetStatus = ok ? 'SOLVED' : 'WITH_ERROR'
        if (ok)
          targetsOk++
        this.markTarget(target, result)
        this.ps.reportNewAction(this.act, 'WRITE', target.currentText, target.getAnswers(), ok, targetsOk)
      })
      if (targetsOk === numTargets) {
        this.finishActivity(true)
        return true
      } else
        this.playEvent('finishedError')
      return false
    }

    /**
     * Checks if the specified TextTarget has a valid answer in its `currentText` field
     * @param {TextActivityDocument.TextTarget} target - The target to check
     * @param {boolean} onlyCheck - When `true`, the cursor will no be re-positioned
     * @param {number=} jumpDirection - `1` to go forward, `-1` to go back.
     * @returns {boolean} - `true` when the target contains a valid answer
     */
    checkTarget(target, onlyCheck, jumpDirection) {
      const
        result = this.act.ev.evalText(target.currentText, target.answers),
        ok = this.act.ev.isOk(result)

      target.targetStatus = ok ? 'SOLVED' : 'WITH_ERROR'
      if (onlyCheck)
        return ok

      this.markTarget(target, result)
      const targetsOk = this.countSolvedTargets(false, false)
      if (target.currentText.length > 0)
        this.ps.reportNewAction(this.act, 'WRITE', target.currentText, target.getAnswers(), ok, targetsOk)
      if (ok && targetsOk === this.targets.length) {
        this.finishActivity(true)
        return ok
      } else if (target.currentText.length > 0)
        this.playEvent(ok ? 'actionOk' : 'actionError')

      if (jumpDirection && jumpDirection !== 0) {
        let p = target.num + jumpDirection
        if (p >= this.targets.length)
          p = 0
        else if (p < 0)
          p = this.targets.length - 1

        const destTarget = this.targets[p]
        if (destTarget.$span) {
          destTarget.$span.focus()
          Utils.setSelectionRange(destTarget.$span.get(-1), 0, 0)
        } else if (destTarget.$comboList)
          destTarget.$comboList.focus()
      }
      return ok
    }

    /**
     * Counts the number of targets with `SOLVED` status
     * @param {boolean} checkNow - When `true`, all targets will be evaluated. Otherwise, only the
     * current value of `targetStatus` will be checked.
     * @param {boolean=} mark - When `true`, errors in the target answer will be marked.
     * @returns {number} - The number of targets currently solved.
     */
    countSolvedTargets(checkNow, mark) {
      return this.targets.reduce((n, target) => {
        if (checkNow) {
          target.readCurrentText()
          this.checkTarget(target, !mark)
        }
        return target.targetStatus === 'SOLVED' ? ++n : n
      }, 0)
    }

    /**
     * Visually marks the target as 'solved OK' or 'with errors'.
     * @param {TextActivityDocument.TextTarget} target - The text target to be marked.
     * @param {number[]} attributes -  - Array of flags indicating the status (OK or error) for each
     * character in `target.currentText`.
     */
    markTarget(target, attributes) {
      if (target.$comboList || this.act.ev.isOk(attributes))
        target.checkColors()
      else if (target.$span) {
        // Identify text fragments
        const
          txt = target.currentText,
          fragments = []
        let
          currentStatus = -1,
          currentFragment = -1,
          i = 0
        for (; i < attributes.length && i < txt.length; i++) {
          if (attributes[i] !== currentStatus) {
            fragments[++currentFragment] = ''
            currentStatus = attributes[i]
          }
          fragments[currentFragment] += txt.charAt(i)
        }
        if (i < txt.length)
          fragments[currentFragment] += txt.substr(i)
        // Empty and re-fill $span
        target.$span.empty()
        currentStatus = attributes[0]
        fragments.forEach(fragment => {
          $('<span/>')
            .text(fragment)
            .css(target.doc.style[currentStatus === 0 ? 'target' : 'targetError'].css)
            .appendTo(target.$span)
          currentStatus ^= 1
        })
      }
      // Target has been marked, so clear the 'modified' flag
      target.flagModified = false
    }

    /**
     * Called by {@link JClicPlayer} when this activity panel is fully visible, just after the
     * initialization process.
     * @override
     */
    activityReady() {
      super.activityReady()

      // Prevent strange behavior with GoogleChrome when `white-space` CSS attribute is set to
      // `pre-wrap` (needed for tabulated texts)
      $('.JClicTextTarget').css('white-space', 'normal')
      if (this.targets.length > 0 && this.targets[0].$span)
        this.targets[0].$span.focus()
    }

    /**
     * Ordinary ending of the activity, usually called form `processEvent`
     * @override
     * @param {boolean} result - `true` if the activity was successfully completed, `false` otherwise
     */
    finishActivity(result) {
      this.targets.forEach(target => {
        if (target.$span)
          target.$span.removeAttr('contenteditable').blur()
        else if (target.$comboList)
          target.$comboList.attr('disabled', 'true').blur()
      })
      return super.finishActivity(result)
    }

    /**
     * Main handler used to process mouse, touch, keyboard and edit events.
     * @override
     * @param {HTMLEvent} event - The HTML event to be processed
     * @returns {boolean=} - When this event handler returns `false`, jQuery will stop its
     * propagation through the DOM tree. See: {@link http://api.jquery.com/on}
     */
    processEvent(event) {
      if (!super.processEvent(event))
        return false

      const target = event.textTarget
      let $span = null, pos = 0
      switch (event.type) {
        case 'focus':
          if (target) {
            if (target.$span && target.$span.children().length > 0) {
              // Clear inner spans used to mark errors
              $span = target.$span
              pos = Math.min(
                target.currentText.length,
                Utils.getCaretCharacterOffsetWithin($span.get(-1)))
              $span.empty()
              $span.text(target.currentText)
              Utils.setSelectionRange($span.get(-1), pos, pos)
              target.flagModified = true
            } else if (target.$comboList)
              target.$comboList.css(target.doc.style['target'].css)

            if (target.$popup && (target.infoMode === 'always' || target.infoMode === 'onError' && target.targetStatus === 'WITH_ERROR'))
              this.showPopup(target.$popup, target.popupMaxTime, target.popupDelay)
            else
              this.showPopup(null)
          }
          break

        case 'blur':
          if (target.flagModified && !this.$checkButton)
            this.checkTarget(target, false, 1)
          break

        case 'input':
          if (target && target.$span) {
            $span = target.$span
            let txt = $span.html()
            // Check for `enter` key
            if (/(<br>|\n|\r)/.test(txt)) {
              txt = txt.replace(/(<br>|\n|\r)/g, '')
              $span.html(txt)
              target.currentText = $span.text()
              return this.$checkButton ? false : this.checkTarget(target, false, 1)
            }
            // Check if text has changed
            // From here, use 'text' instead of 'html' to avoid HTML entities
            txt = $span.text()
            if (txt !== target.currentText) {
              // Span text has changed!
              target.flagModified = true
              const added = txt.length - target.currentText.length
              if (added > 0) {
                if (txt.indexOf(target.iniChar) >= 0) {
                  // Remove filling chars
                  pos = Utils.getCaretCharacterOffsetWithin($span.get(-1))
                  for (let i = 0; i < added; i++) {
                    const p = txt.indexOf(target.iniChar)
                    if (p < 0)
                      break
                    txt = txt.substr(0, p) + txt.substr(p + 1)
                    if (p < pos)
                      pos--
                  }
                  $span.text(txt)
                  Utils.setSelectionRange($span.get(-1), pos, pos)
                }

                // Check if current text exceeds max length
                if (txt.length > target.maxLenResp) {
                  pos = Utils.getCaretCharacterOffsetWithin($span.get(-1))
                  txt = txt.substr(0, target.maxLenResp)
                  pos = Math.min(pos, txt.length)
                  $span.text(txt)
                  Utils.setSelectionRange($span.get(-1), pos, pos)
                }
              } else if (txt === '') {
                txt = target.iniChar
                $span.text(txt)
                Utils.setSelectionRange($span.get(-1), 0, 0)
              }
              target.currentText = txt
            }
          }
          break

        case 'change':
          if (target && target.$comboList) {
            target.currentText = target.$comboList.val()
            target.flagModified = true
            return this.$checkButton ? false : this.checkTarget(target, false, 1)
          }
          break

        default:
          break
      }
      return true
    }
  }

  Object.assign(FillInBlanksPanel.prototype, {
    /**
     * Flag indicating if the activity is open or locked
     * @name FillInBlanksPanel#locked
     * @type {boolean} */
    locked: true,
  })

  /**
   * Panel class associated to this type of activity: {@link FillInBlanksPanel}
   * @type {class} */
  FillInBlanks.Panel = FillInBlanksPanel

  // Register class in Activity.prototype
  Activity.CLASSES['@text.FillInBlanks'] = FillInBlanks

  return FillInBlanks
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/activities/text/IdentifyText.js":
/*!*********************************************!*\
  !*** ./src/activities/text/IdentifyText.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : activities/text/Identify.js
 *  Created : 20/06/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ../../Activity */ "./src/Activity.js"),
  __webpack_require__(/*! ./TextActivityBase */ "./src/activities/text/TextActivityBase.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, Activity, TextActivityBase) {

  /**
   * This type of text activity suggests users to click on specific words or single letters of a
   * given text, without any help on where these elements are placed.
   * @exports IdentifyText
   * @class
   * @extends TextActivityBase
   */
  class IdentifyText extends TextActivityBase {
    /**
     * IdentifyText constructor
     * @param {JClicProject} project - The project to which this activity belongs
     */
    constructor(project) {
      super(project)
    }
  }

  /**
   * The {@link TextActivityBasePanel} where {@link IdentifyText} activities are played.
   * @class
   * @extends TextActivityBasePanel
   */
  class IdentifyTextPanel extends TextActivityBase.Panel {
    /**
     * IdentifyTextPanel constructor
     * @param {Activity} act - The {@link Activity} to which this Panel belongs
     * @param {JClicPlayer} ps - Any object implementing the methods defined in the
     * [PlayStation](http://projectestac.github.io/jclic/apidoc/edu/xtec/jclic/PlayStation.html)
     * Java interface.
     * @param {external:jQuery=} $div - The jQuery DOM element where this Panel will deploy
     */
    constructor(act, ps, $div) {
      super(act, ps, $div)
    }

    /**
     * Creates a target DOM element for the provided target.
     * @override
     * @param {TextActivityDocument.TextTarget} target - The target related to the DOM object to be created
     * @param {external:jQuery} $span -  - An initial DOM object (usually a `span`) that can be used
     * to store the target, or replaced by another type of object.
     * @returns {external:jQuery} - The jQuery DOM element loaded with the target data.
     */
    $createTargetElement(target, $span) {
      super.$createTargetElement(target, $span)
      const idLabel = `target${`000${this.targets.length - 1}`.slice(-3)}`
      $span.bind('click', event => {
        event.textTarget = target
        event.idLabel = idLabel
        this.processEvent(event)
      })
      return $span
    }

    /**
     * Basic initialization procedure
     * @override
     */
    initActivity() {
      super.initActivity(this)
      this.$div.find('.JClicTextDocument > p').css('cursor', 'pointer')
      this.playing = true
    }

    /**
     * Counts the number of targets that are solved
     * @returns {number}
     */
    countSolvedTargets() {
      return this.targets.length.reduce((n, target) => target.targetStatus === 'SOLVED' ? ++n : n, 0)
    }

    /**
     * Evaluates all the targets in this panel. This method is usually called from the `Check` button.
     * @override
     * @returns {boolean} - `true` when all targets are OK, `false` otherwise.
     */
    evaluatePanel() {
      let targetsOk = 0
      this.targets.forEach(target => {
        const ok = target.targetStatus === 'SOLVED'
        if (ok)
          targetsOk++
        target.checkColors()
        this.ps.reportNewAction(this.act, 'SELECT', target.text, target.pos, ok, targetsOk)
      })
      if (targetsOk === this.targets.length) {
        this.finishActivity(true)
        return true
      } else
        this.playEvent('finishedError')
      return false
    }

    /**
     * Ordinary ending of the activity, usually called form `processEvent`
     * @override
     * @param {boolean} result - `true` if the activity was successfully completed, `false` otherwise
     */
    finishActivity(result) {
      this.$div.find('.JClicTextDocument > p').css('cursor', 'pointer')
      return super.finishActivity(result)
    }

    /**
     * Main handler used to process mouse, touch, keyboard and edit events.
     * @override
     * @param {HTMLEvent} event - The HTML event to be processed
     * @returns {boolean=} - When this event handler returns `false`, jQuery will stop its
     * propagation through the DOM tree. See: {@link http://api.jquery.com/on}
     */
    processEvent(event) {
      if (!super.processEvent(event) ||
        event.timeStamp === this.lastTimeStamp)
        return false

      if (event.timeStamp)
        this.lastTimeStamp = event.timeStamp

      const target = event.textTarget
      switch (event.type) {
        case 'click':
          let text, pos, ok = false
          if (target) {
            if (target.targetStatus === 'SOLVED')
              target.targetStatus = 'HIDDEN'
            else {
              target.targetStatus = 'SOLVED'
              ok = true
            }
            text = target.text
            pos = target.pos
            // TODO: Just on/off target colors, don't mark it as error!
            target.checkColors()
          } else {
            // TODO: Get current text at click position, perhaps using [window|document].getSelection
            text = 'unknown'
            pos = 0
          }

          if (!this.$checkButton) {
            // Check and notify action
            const cellsAtPlace = this.countSolvedTargets()
            this.ps.reportNewAction(this.act, 'SELECT', text, pos, ok, cellsAtPlace)

            // End activity or play event sound
            if (ok && cellsAtPlace === this.targets.length)
              this.finishActivity(true)
            else
              this.playEvent(ok ? 'actionOk' : 'actionError')
          }
          event.preventDefault()
          break

        default:
          break
      }
      return true
    }
  }

  Object.assign(IdentifyTextPanel.prototype, {
    /**
     * Flag indicating if targets must be visually marked when the activity begins. In this type of
     * activity should be always `false` to avoid revealing the words o letters that must be found.
     * @name IdentifyTextPanel#targetsMarked
     * @type {boolean} */
    targetsMarked: false,
    /**
     * Used to avoid duplicate event processing
     * @name IdentifyTextPanel#lastTimeStamp
     * @type {number}
     */
    lastTimeStamp: 0,
  })

  /**
   * Panel class associated to this type of activity: {@link IdentifyTextPanel}
   * @type {class} */
  IdentifyText.Panel = IdentifyTextPanel

  // Register class in Activity.prototype
  Activity.CLASSES['@text.Identify'] = IdentifyText

  return IdentifyText
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/activities/text/OrderText.js":
/*!******************************************!*\
  !*** ./src/activities/text/OrderText.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : activities/text/OrderText.js
 *  Created : 20/06/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ../../Activity */ "./src/Activity.js"),
  __webpack_require__(/*! ./TextActivityBase */ "./src/activities/text/TextActivityBase.js"),
  __webpack_require__(/*! ../../boxes/BoxConnector */ "./src/boxes/BoxConnector.js"),
  __webpack_require__(/*! ../../AWT */ "./src/AWT.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, Activity, TextActivityBase, BoxConnector, AWT) {

  /**
   * In this type of text activity users must put in order some words or paragraphs that have been
   * initially scrambled.
   * @exports OrderText
   * @class
   * @extends TextActivityBase
   */
  class OrderText extends TextActivityBase {
    /**
     * OrderText constructor
     * @param {JClicProject} project - The project to which this activity belongs
     */
    constructor(project) {
      super(project)
    }

    /**
     * Whether or not the activity uses random to scramble internal components
     * @override
     * @returns {boolean}
     */
    hasRandom() {
      return true
    }

    /**
     * When `true`, the activity must always be scrambled
     * @override
     * @returns {boolean}
     */
    shuffleAlways() {
      return true
    }

    /**
     * Whether the activity allows the user to request help.
     * @override
     * @returns {boolean}
     */
    helpSolutionAllowed() {
      return true
    }
  }

  Object.assign(OrderText.prototype, {
    /**
     * Whether to allow or not to scramble words among different paragraphs.
     * @name OrderText#amongParagraphs
     * @type {boolean} */
    amongParagraphs: false,
    /**
     * The box connector
     * @name OrderText#bc
     * @type {BoxConnector} */
    bc: null,
  })

  /**
   * The {@link TextActivityBasePanel} where {@link OrderText} activities are played.
   * @class
   * @extends TextActivityBasePanel
   */
  class OrderTextPanel extends TextActivityBase.Panel {
    /**
     * OrderTextPanel constructor
     * @param {Activity} act - The {@link Activity} to which this Panel belongs
     * @param {JClicPlayer} ps - Any object implementing the methods defined in the
     * [PlayStation](http://projectestac.github.io/jclic/apidoc/edu/xtec/jclic/PlayStation.html)
     * Java interface.
     * @param {external:jQuery=} $div - The jQuery DOM element where this Panel will deploy
     */
    constructor(act, ps, $div) {
      super(act, ps, $div)
    }

    /**
     * Prepares the text panel
     * @override
     */
    buildVisualComponents() {
      this.act.document.style['target'].css.cursor = 'pointer'
      super.buildVisualComponents()
    }

    /**
     * Sets the size and position of this activity panel
     * @override
     * @param {AWT.Rectangle} rect
     */
    setBounds(rect) {
      if (this.$canvas)
        this.$canvas.remove()

      super.setBounds(rect)
      if (!this.act.dragCells) {
        // Create the main canvas
        this.$canvas = $(`<canvas width="${rect.dim.width}" height="${rect.dim.height}"/>`).css({
          position: 'absolute',
          top: 0,
          left: 0,
          'pointer-events': 'none'
        })
        this.$div.append(this.$canvas)

        // Create a [BoxConnector](BoxConnector.html) and attach it to the canvas context
        this.bc = new BoxConnector(this, this.$canvas.get(-1).getContext('2d'))
        this.bc.compositeOp = this.bc.DEFAULT_COMPOSITE_OP

        // Repaint all
        this.invalidate().update()
      }
    }

    /**
     * Creates a target DOM element for the provided target.
     * @override
     * @param {TextActivityDocument.TextTarget} target - The target related to the DOM object to be created
     * @param {external:jQuery} $span -  - An initial DOM object (usually a `span`) that can be used
     * to store the target, or replaced by another type of object.
     * @returns {external:jQuery} - The jQuery DOM element loaded with the target data.
     */
    $createTargetElement(target, $span) {
      super.$createTargetElement(target, $span)
      const idLabel = `target${`000${this.targets.length - 1}`.slice(-3)}`
      $span.addClass('JClicTextTarget').bind('click', event => {
        event.textTarget = target
        event.idLabel = idLabel
        this.processEvent(event)
      })
      return $span
    }

    /**
     * Swaps the position of two targets in the document
     * @param {TextActivityDocument.TextTarget} t1 - One target
     * @param {TextActivityDocument.TextTarget} t2 - Another target
     */
    swapTargets(t1, t2) {
      const
        $span1 = t1.$span,
        $span2 = t2.$span,
        $marker = $('<span/>')
      $marker.insertAfter($span2)
      $span2.detach()
      $span2.insertAfter($span1)
      $span1.detach()
      $span1.insertAfter($marker)
      $marker.remove()

      const
        pos = t1.pos,
        $p = t1.$p
      t1.pos = t2.pos
      t1.$p = t2.$p
      t2.pos = pos
      t2.$p = $p
    }

    /**
     * Basic initialization procedure
     * @override
     */
    initActivity() {
      super.initActivity()
      if (!this.firstRun)
        this.buildVisualComponents()
      else
        this.firstRun = false
    }

    /**
     * Called when the activity starts playing
     * @override
     */
    startActivity() {
      super.startActivity()
      if (!this.showingPrevScreen) {
        if (this.act.type === 'orderWords' && !this.act.amongParagraphs) {
          // Group targets by paragraph
          const groups = []
          let
            lastTarget = null,
            currentGroup = []
          this.targets.forEach(t => {
            if (lastTarget !== null && lastTarget.$p !== t.$p) {
              groups.push(currentGroup)
              currentGroup = []
            }
            currentGroup.push(t)
            lastTarget = t
          })
          if (currentGroup.length > 0)
            groups.push(currentGroup)

          // Scramble group by group
          groups.forEach(group => this.shuffleTargets(group, this.act.shuffles))
        } else
          this.shuffleTargets(this.targets, this.act.shuffles)

        this.playing = true
      }
      this.setBounds(this)
    }

    /**
     * Randomly shuffles a set of targets
     * @param {TextActivityDocument.TextTarget[]} targets - The set of targets to shuffle (can be all
     * document targets or just the targets belonging to the same paragraph, depending on the value of
     * `amongParagraphs` in {@link Activity}.
     * @param {number} steps - The number of times to shuffle the elements
     */
    shuffleTargets(targets, steps) {
      const nt = targets.length
      if (nt > 1) {
        let repeatCount = 100
        for (let i = 0; i < steps; i++) {
          const
            r1 = Math.floor(Math.random() * nt),
            r2 = Math.floor(Math.random() * nt)
          if (r1 !== r2) {
            this.swapTargets(targets[r1], targets[r2])
          } else {
            if (--repeatCount)
              i++
          }
        }
      }
    }

    /**
     * Sets the current target
     * @param {TextActivityDocument.TextTarget} target - The currently selected target. Can be `null`.
     */
    setCurrentTarget(target) {
      const targetCss = this.act.document.getFullStyle('target').css
      if (this.currentTarget && this.currentTarget.$span)
        this.currentTarget.$span.css(targetCss)
      if (target && target.$span) {
        target.$span.css({
          color: targetCss['background-color'],
          'background-color': targetCss.color
        })
      }
      this.currentTarget = target
    }

    /**
     * Counts the number of targets that are at right position
     * @returns {number}
     */
    countSolvedTargets() {
      return this.targets.reduce((n, target) => target.num === target.pos ? ++n : n, 0)
    }

    /**
     * Evaluates all the targets in this panel. This method is usually called from the `Check` button.
     * @override
     * @returns {boolean} - `true` when all targets are OK, `false` otherwise.
     */
    evaluatePanel() {
      if (this.bc && this.bc.active)
        this.bc.end()
      this.setCurrentTarget(null)

      let targetsOk = 0
      this.targets.forEach(target => {
        const ok = target.num === target.pos
        target.targetStatus = ok ? 'SOLVED' : 'WITH_ERROR'
        if (ok)
          targetsOk++
        target.checkColors()
        this.ps.reportNewAction(this.act, 'PLACE', target.text, target.pos, ok, targetsOk)
      })
      if (targetsOk === this.targets.length) {
        this.finishActivity(true)
        return true
      } else {
        this.playEvent('finishedError')
      }
      return false
    }

    /**
     * Ordinary ending of the activity, usually called form `processEvent`
     * @override
     * @param {boolean} result - `true` if the activity was successfully completed, `false` otherwise
     */
    finishActivity(result) {
      $('.JClicTextTarget').css('cursor', 'pointer')
      return super.finishActivity(result)
    }

    /**
     * Main handler used to process mouse, touch, keyboard and edit events.
     * @override
     * @param {HTMLEvent} event - The HTML event to be processed
     * @returns {boolean=} - When this event handler returns `false`, jQuery will stop its
     * propagation through the DOM tree. See: {@link http://api.jquery.com/on}
     */
    processEvent(event) {
      if (!super.processEvent(event))
        return false

      const target = event.textTarget
      let p = null
      if (this.bc && this.playing && !this.showingPrevScreen) {
        //
        // _touchend_ event don't provide pageX nor pageY information
        if (event.type === 'touchend')
          p = this.bc.active ? this.bc.dest.clone() : new AWT.Point()
        else {
          // Touch events can have more than one touch, so `pageX` must be obtained from `touches[0]`
          const
            x = event.originalEvent.touches ? event.originalEvent.touches[0].pageX : event.pageX,
            y = event.originalEvent.touches ? event.originalEvent.touches[0].pageY : event.pageY
          p = new AWT.Point(x - this.$div.offset().left, y - this.$div.offset().top)
        }

        switch (event.type) {
          case 'click':
            if (target && target !== this.currentTarget) {
              if (this.currentTarget) {
                if (this.bc && this.bc.active)
                  this.bc.end()
                this.swapTargets(target, this.currentTarget)
                this.setCurrentTarget(null)

                if (!this.$checkButton) {
                  // Check and notify action
                  const
                    cellsAtPlace = this.countSolvedTargets(),
                    ok = target.pos === target.num
                  this.ps.reportNewAction(this.act, 'PLACE', target.text, target.pos, ok, cellsAtPlace)

                  // End activity or play event sound
                  if (ok && cellsAtPlace === this.targets.length)
                    this.finishActivity(true)
                  else
                    this.playEvent(ok ? 'actionOk' : 'actionError')
                }
              } else {
                this.setCurrentTarget(target)
                this.bc.begin(p)
                this.playEvent('click')
              }
            }
            break

          case 'mousemove':
            this.bc.moveTo(p)
            break

          default:
            break
        }
        event.preventDefault()
        return true
      }
    }
  }

  // Properties and methods specific to OrderTextPanel
  Object.assign(OrderTextPanel.prototype, {
    /**
     * Currently selected text target
     * @name OrderTextPanel#currentTarget
     * @type {TextActivityDocument.TextTarget} */
    currentTarget: null,
    /**
     * The box connector
     * @name OrderTextPanel#bc
     * @type {BoxConnector} */
    bc: null,
    /**
     * List of mouse, touch and keyboard events intercepted by this panel
     * @override
     * @name OrderTextPanel#events
     * @type {string[]} */
    events: ['click', 'mousemove'],
  })

  /**
   * Panel class associated to this type of activity: {@link OrderTextPanel}
   * @type {class} */
  OrderText.Panel = OrderTextPanel

  // Register class in Activity.prototype
  Activity.CLASSES['@text.Order'] = OrderText

  return OrderText
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/activities/text/TextActivityBase.js":
/*!*************************************************!*\
  !*** ./src/activities/text/TextActivityBase.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : activities/text/TextActivityBase.js
 *  Created : 16/05/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define, setTimeout, clearTimeout */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ../../Activity */ "./src/Activity.js"),
  __webpack_require__(/*! ../../AWT */ "./src/AWT.js"),
  __webpack_require__(/*! ../../boxes/ActiveBox */ "./src/boxes/ActiveBox.js"),
  __webpack_require__(/*! ../../boxes/BoxBase */ "./src/boxes/BoxBase.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, Activity, AWT, ActiveBox, BoxBase) {

  /**
   * This class and its visual component {@link TextActivityBasePanel} are the base for text
   * activities like {@link FillInBlanks}, {@link IdentifyText}, {@link OrderText} and {@link Complete}.
   * @exports TextActivityBase
   * @class
   * @extends Activity
   */
  class TextActivityBase extends Activity {
    /**
     * TextActivityBase constructor
     * @param {JClicProject} project - The project to which this activity belongs
     */
    constructor(project) {
      super(project)
    }

    /**
     * Retrieves the minimum number of actions needed to solve this activity
     * @override
     * @returns {number}
     */
    getMinNumActions() {
      return this.document ? this.document.numTargets : 0
    }
  }

  Object.assign(TextActivityBase.prototype, {
    /**
     * This is the object used to evaluate user's answers in text activities.
     * @name TextActivityBase#ev
     * @type {Evaluator} */
    ev: null,
    /**
     * This is the label used by text activities for the `check` button, when present.
     * @name TextActivityBase#checkButtonText
     * @type {string} */
    checkButtonText: null,
    /**
     * When `true`, a text will be shown before the beginning of the activity.
     * @name TextActivityBase#prevScreen
     * @type {boolean} */
    prevScreen: false,
    /**
     * Optional text to be shown before the beginning of the activity. When `null`, this text is
     * the main document.
     * @name TextActivityBase#prevScreenText
     * @type {string} */
    prevScreenText: null,
    /**
     * The style of the optional text to be shown before the beginning of the activity.
     * @name TextActivityBase#prevScreenStyle
     * @type {BoxBase} */
    prevScreenStyle: null,
    /**
     * Maximum amount of time for showing the previous document.
     * @name TextActivityBase#prevScreenMaxTime
     * @type {number} */
    prevScreenMaxTime: -1,
  })

  /**
   * The {@link ActivityPanel} where text activities (based on {@link TextActivityBase}) are played.
   * @class
   * @extends ActivityPanel
   */
  class TextActivityBasePanel extends Activity.Panel {
    /**
     * TextActivityBasePanel constructor
     * @param {Activity} act - The {@link Activity} to which this Panel belongs
     * @param {JClicPlayer} ps - Any object implementing the methods defined in the
     * [PlayStation](http://projectestac.github.io/jclic/apidoc/edu/xtec/jclic/PlayStation.html)
     * Java interface.
     * @param {external:jQuery=} $div - The jQuery DOM element where this Panel will deploy
     */
    constructor(act, ps, $div) {
      super(act, ps, $div)
      this.targets = []
    }

    /**
     * Fills a jQuery DOM element (usually a 'div') with the specified {@link TextActivityDocument}.
     * @param {external:jQuery} $div - The jQuery DOM object to be filled with the document.
     * @param {TextActivityDocument} doc - The document
     */
    setDocContent($div, doc) {

      // Empties the container of any pre-existing content
      // and sets the background and other attributes indicated by the main
      // style of the document.
      // It also sets the 'overflow' CSS attribute to 'auto', which will display a
      // vertical scroll bar when needed
      $div.empty().css(doc.style['default'].css).css({ display: 'flex', 'flex-direction': 'column' })

      const $scroller = $('<div/>').css({ 'flex-grow': 1, overflow: 'auto' })
      const $doc = $('<div/>', { class: 'JClicTextDocument' }).css({ 'padding': 4 }).css(doc.style['default'].css)

      let currentPStyle = null
      const popupSpans = []

      //
      // Process paragraphs
      doc.p.forEach(p => {
        // Creates a new DOM paragraph
        const $p = $('<p/>').css({ margin: 0 })
        let empty = true

        // Check if the paragraph has its own style
        if (p.style) {
          currentPStyle = doc.style[p.style].css
          $p.css(currentPStyle)
        } else
          currentPStyle = null

        // Check if the paragraph has a special alignment
        if (p.Alignment) {
          const al = Number(p.Alignment)
          $p.css({ 'text-align': al === 1 ? 'center' : al === 2 ? 'right' : 'left' })
        }

        // Process the paragraph elements
        p.elements.forEach(element => {
          // Elements will be inserted as 'span' DOM elements, or as simple text if they don't
          // have specific attributes.
          let $span = $('<span/>')
          switch (element.objectType) {
            case 'text':
              if (element.attr) {
                // Text uses a specific style and/or individual attributes
                $span.html(element.text)
                if (element.attr.style) {
                  $span.css(doc.style[element.attr.style].css)
                }
                if (element.attr.css) {
                  $span.css(element.attr.css)
                }
                $p.append($span)
              } else {
                $p.append(element.text)
              }
              break

            case 'cell':
              // Create a new ActiveBox based on this ActiveBoxContent
              const box = ActiveBox.createCell($span.css({ position: 'relative' }), element)
              $span.css({ 'display': 'inline-block', 'vertical-align': 'middle' })
              if (element.mediaContent) {
                $span.on('click', event => {
                  event.preventDefault()
                  this.ps.stopMedia(1)
                  box.playMedia(this.ps)
                  return false
                })
              }
              $p.append($span)
              break

            case 'target':
              if (this.showingPrevScreen) {
                $span.text(element.text)
                $p.append($span)
                break
              }

              const target = element
              let $popup = null
              // Process target popups
              if (target.infoMode !== 'no_info' && target.popupContent) {
                $popup = $('<span/>').css({ position: 'absolute', 'padding-top': '2pt', display: 'none' })
                // Create a new ActiveBox based on popupContent
                const popupBox = ActiveBox.createCell($popup, target.popupContent)
                if (target.popupContent.mediaContent) {
                  $popup.on('click', event => {
                    event.preventDefault()
                    this.ps.stopMedia(1)
                    if (popupBox)
                      popupBox.playMedia(this.ps)
                    else if (target.popupContent.mediaContent)
                      this.ps.playMedia(target.popupContent.mediaContent)
                    return false
                  })
                }
                target.$popup = $popup
                // Save for later setting of top-margin
                popupSpans.push({ p: $p, span: $popup, box: popupBox })
              }

              $span = this.$createTargetElement(target, $span)
              target.num = this.targets.length
              target.pos = target.num
              this.targets.push(target)
              if ($span) {
                $span.css(doc.style['default'].css)
                if (currentPStyle)
                  $span.css(currentPStyle)
                if (this.targetsMarked) {
                  if (target.attr) {
                    // Default style name for targets is 'target'
                    if (!target.attr.style)
                      target.attr.style = 'target'
                    $span.css(doc.style[target.attr.style].css)
                    // Check if target has specific attributes
                    if (target.attr.css)
                      $span.css(target.attr.css)
                  } else if (doc.style['target'])
                    $span.css(doc.style['target'].css)
                } else {
                  target.targetStatus = 'HIDDEN'
                }

                // Catch on-demand popups with `F1`, cancel with `Escape`
                if ($popup !== null && target.infoMode === 'onDemand') {
                  $span.keydown(ev => {
                    if (ev.key === target.popupKey) {
                      ev.preventDefault()
                      this.showPopup($popup, target.popupMaxTime, target.popupDelay)
                    } else if (ev.key === 'Escape') {
                      ev.preventDefault()
                      this.showPopup(null)
                    }
                  })
                }
              }

              if ($popup && $span) {
                if (target.isList)
                  $p.append($span).append($popup)
                else
                  $p.append($popup).append($span)
              } else if ($span)
                $p.append($span)

              target.$p = $p
              break
          }
          empty = false
        })
        if (empty)
          // Don't leave paragraphs empty
          $p.html('&nbsp;')

        // Adds the paragraph to the DOM element
        $doc.append($p)
      })

      $div.append($scroller.append($doc))

      if (this.act.checkButtonText && !this.showingPrevScreen) {
        this.$checkButton = $('<button/>', { class: 'StockBtn' })
          .html(this.act.checkButtonText)
          .css({ width: '100%', 'flex-shrink': 0 })
          .on('click', () => this.evaluatePanel())
        $div.append(this.$checkButton)
      }

      // Place popups below its target baseline
      popupSpans.forEach(pspan => pspan.span.css({ 'margin-top': pspan.p.css('font-size') }))

      // Init Evaluator
      if (this.act.ev)
        this.act.ev.init(this.act.project.settings.locales)

      return $div
    }

    /**
     * Creates a target DOM element.
     * This method can be overridden in subclasses to create specific types of targets.
     * @param {TextActivityDocument.TextTarget} target - The target related to the DOM object to be created
     * @param {external:jQuery} $span -  - An initial DOM object (usually a `span`) that can be used
     * to store the target, or replaced by another type of object.
     * @returns {external:jQuery} - The jQuery DOM element loaded with the target data.
     */
    $createTargetElement(target, $span) {
      $span.text(target.text)
      target.$span = $span
      return $span
    }

    /**
     * Basic initialization procedure, common to all activities.
     * @override
     */
    initActivity() {
      if (this.act.prevScreen)
        this.preInitActivity()
      else
        this.startActivity()
    }

    /**
     * Called when the activity starts playing
     * @override
     */
    startActivity() {
      super.initActivity()
      this.setAndPlayMsg('initial', 'start')
      this.setDocContent(this.$div, this.act.document)
      this.playing = true
    }

    /**
     * Called when the text activity has a 'previous screen' information to be shown before the
     * activity starts
     */
    preInitActivity() {
      if (!this.act.prevScreen)
        return

      const prevScreenEnd = () => {
        this.showingPrevScreen = false
        this.$div.unbind('click')
        if (this.prevScreenTimer) {
          clearTimeout(this.prevScreenTimer)
          this.prevScreenTimer = null
        }
        this.startActivity()
        return true
      }

      this.showingPrevScreen = true
      this.$div.empty()

      if (!this.act.prevScreenText) {
        this.setDocContent(this.$div, this.act.document)
      } else {
        if (!this.act.prevScreenStyle)
          this.act.prevScreenStyle = new BoxBase()
        this.$div.css(this.act.prevScreenStyle.getCSS()).css('overflow', 'auto')
        const $html = $('<div/>', { class: 'JClicTextDocument' })
          .css({ 'padding': 4 })
          .css(this.act.prevScreenStyle.getCSS())
          .append(this.act.prevScreenText)
        this.$div.append($html)
      }

      this.enableCounters(true, false, false)
      this.ps.setCounterValue('time', 0)

      this.ps.setMsg(this.act.messages['previous'])

      if (this.act.prevScreenMaxTime > 0) {
        this.ps.setCountDown('time', this.act.prevScreenMaxTime)
        this.prevScreenTimer = setTimeout(prevScreenEnd, this.act.prevScreenMaxTime * 1000)
      }

      this.$div.on('click', prevScreenEnd)
      this.ps.playMsg()
    }

    /**
     * Called when the user clicks on the check button
     * @returns {boolean} - `true` when the panel is OK, `false` otherwise.
     */
    evaluatePanel() {
      this.finishActivity(true)
      return true
    }

    /**
     * Ordinary ending of the activity, usually called form `processEvent`
     * @override
     * @param {boolean} result - `true` if the activity was successfully completed, `false` otherwise
     */
    finishActivity(result) {
      if (this.$checkButton)
        this.$checkButton.prop('disabled', true)
      this.targets.forEach(t => {
        if (t.$comboList)
          t.$comboList.attr('disabled', true)
      })
      this.showPopup(null)
      super.finishActivity(result)
    }

    /**
     * Main handler used to process mouse, touch, keyboard and edit events
     * @override
     * @param {HTMLEvent} _event - The HTML event to be processed
     * @returns {boolean=} - When this event handler returns `false`, jQuery will stop its
     * propagation through the DOM tree. See: {@link http://api.jquery.com/on}
     */
    processEvent(_event) {
      return this.playing
    }

    /**
     * @param {external:jQuery} $popup - The popup to display, or _null _ to just hide the current popup
     * @param {number} maxTime - The maximum time to mantain the popup on screen, in seconds
     * @param {number} waitTime - When set, indicates the number of seconds to wait before show the popup
     */
    showPopup($popup, maxTime, waitTime) {
      // Hide current popup
      if (this.$currentPopup) {
        this.$currentPopup.css({ display: 'none' })
        this.$currentPopup = null
        if (this.currentPopupTimer) {
          window.clearTimeout(this.currentPopupTimer)
          this.currentPopupTimer = 0
        }
      }

      // Clear popupWaitTimer
      if (this.popupWaitTimer) {
        window.clearTimeout(this.popupWaitTimer)
        this.popupWaitTimer = 0
      }

      // Prepare popup timer
      if (waitTime) {
        this.popupWaitTimer = window.setTimeout(() => {
          this.showPopup($popup, maxTime)
        }, waitTime * 1000)
        return
      }

      if ($popup) {
        $popup.css({ display: '' })
        $popup.click()

        this.$currentPopup = $popup
        if (maxTime) {
          this.currentPopupTimer = window.setTimeout(() => {
            $popup.css({ display: 'none' })
            if (this.$currentPopup === $popup) {
              this.$currentPopup = null
              this.currentPopupTimer = 0
            }
          }, maxTime * 1000)
        }
      }
    }
  }

  Object.assign(TextActivityBasePanel.prototype, {
    /**
     * Array of jQuery DOM elements (usually of type 'span') containing the targets of this activity
     * @name TextActivityBasePanel#targets
     * @type {external:jQuery[]} */
    targets: null,
    /**
     * Flag indicating if targets must be visually marked at the beginning of the activity.
     * Should be `true` except for {@link IdentifyText} activities.
     * @name TextActivityBasePanel#targetsMarked
     * @type {boolean} */
    targetsMarked: true,
    /**
     * The button used to check the activity, only when `Activity.checkButtonText` is not null
     * @name TextActivityBasePanel#$checkButton
     * @type {external:jQuery}*/
    $checkButton: null,
    /**
     * System timer used to close the previous document when act.maxTime is reached.
     * @name TextActivityBasePanel#prevScreenTimer
     * @type {number} */
    prevScreenTimer: null,
    /**
     * The popup currently been displayed
     * @name TextActivityBasePanel#$currentPopup
     * @type {external:jQuery} */
    $currentPopup: null,
    /**
     * A timer controlling the time the current popup will be displayed
     * @name TextActivityBasePanel#currentPopupTimer
     * @type {number} */
    currentPopupTimer: 0,
    /**
     * A timer prepared to display a popup after a while
     * @name TextActivityBasePanel#popupWaitTimer
     * @type {number} */
    popupWaitTimer: 0,
  })

  /**
   * Panel class associated to this type of activity: {@link TextActivityBasePanel}
   * @type {class} */
  TextActivityBase.Panel = TextActivityBasePanel

  return TextActivityBase
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/activities/text/TextActivityDocument.js":
/*!*****************************************************!*\
  !*** ./src/activities/text/TextActivityDocument.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : activities/text/TextActivityDocument.js
 *  Created : 14/04/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ../../Utils */ "./src/Utils.js"),
  __webpack_require__(/*! ../../AWT */ "./src/AWT.js"),
  __webpack_require__(/*! ../../boxes/ActiveBoxContent */ "./src/boxes/ActiveBoxContent.js"),
  __webpack_require__(/*! ../../media/MediaContent */ "./src/media/MediaContent.js"),
  __webpack_require__(/*! ../../boxes/ActiveBagContent */ "./src/boxes/ActiveBagContent.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, Utils, AWT, ActiveBoxContent, MediaContent, ActiveBagContent) {

  /**
   * This is the HTML DOM element used in text activities like {@link FillInBlanks},
   * {@link IdentifyText}, {@link OrderText} and {@link Complete}. It contains the main document of
   * the activity, usually with some elements marked as "targets". In {@link FillInBlanks}, this
   * targets are encapsulated in {@link TextTarget} objects.
   * @exports TextActivityDocument
   * @class
   */
  class TextActivityDocument {
    /**
     * TextActivityDocument constructor
     */
    constructor() {
      // Make a deep clone of the default style
      this.style = { 'default': $.extend(true, {}, TextActivityDocument.DEFAULT_DOC_STYLE) }
      this.p = []
      //this.tmb=new TargetMarkerBag();
      this.boxesContent = new ActiveBagContent()
      this.popupsContent = new ActiveBagContent()
    }

    /**
     * Loads the document settings from a specific JQuery XML element
     * @param {external:jQuery} $xml - The XML element to parse
     * @param {MediaBag} mediaBag - The media bag used to load images and media content
     */
    setProperties($xml, mediaBag) {
      // Read named styles
      // Sort styles according to its "base" dependencies
      const styles = $xml.children('style').toArray().sort((a, b) => {
        var aName = a.getAttribute('name'), aBase = a.getAttribute('base') || null
        var bName = b.getAttribute('name'), bBase = b.getAttribute('base') || null
        // Put 'default' always first, then each style below their base (if any)
        return aName === 'default' ? -1 : bName === 'default' ? 1
          : aBase === bName ? 1 : bBase === aName ? -1
            : !aBase ? -1 : !bBase ? 1 : 0
      })
      // Process the ordered list of styles
      styles.forEach(style => {
        const attr = this.readDocAttributes($(style))
        // Grant always that basic attributes are defined
        this.style[attr.name] = attr.name === 'default' ? $.extend(true, this.style.default, attr) : attr
        //this.style[attr.name] = attr.name === 'default' ? Object.assign(this.style.default, attr) : attr
      })

      // Read paragraphs
      $xml.find('section > p').each((_n, par) => {

        const p = { elements: [] }

        // Read paragraph attributes
        Utils.attrForEach(par.attributes, (name, value) => {
          switch (name) {
            case 'style':
              p[name] = value
              break;
            case 'bidiLevel':
            case 'Alignment':
              p[name] = Number(value)
              break
          }
        })

        // Read paragraph objects
        $(par).children().each((_n, child) => {
          let obj
          const $child = $(child)
          switch (child.nodeName) {

            case 'cell':
              obj = new ActiveBoxContent().setProperties($child, mediaBag)
              break

            case 'text':
              obj = { text: child.textContent.replace(/\t/g, '&#9;') }
              const attr = this.readDocAttributes($child)
              if (!$.isEmptyObject(attr)) {
                obj.attr = attr
              }
              break

            case 'target':
              obj = new TextTarget(this, child.textContent.replace(/\t/g, '&#9;'))
              obj.setProperties($child, mediaBag)
              this.numTargets++
              break

            default:
              Utils.log('error', `Unknown object in activity document: "${child.nodeName}"`)
          }
          if (obj) {
            obj.objectType = child.nodeName
            p.elements.push(obj)
          }
        })

        this.p.push(p)
      })
      return this
    }

    /**
     * Reads sets of text attributes, sometimes in form of named styles
     * @param {external:jQuery} $xml - The XML element to parse
     * @returns {object}
     */
    readDocAttributes($xml) {
      let
        attr = {},
        css = {}
      Utils.attrForEach($xml.get(0).attributes, (name, val) => {
        switch (name) {
          case 'background':
            val = Utils.checkColor(val, 'white')
            attr[name] = val
            css['background-color'] = val
            break
          case 'foreground':
            val = Utils.checkColor(val, 'black')
            attr[name] = val
            css['color'] = val
            break
          case 'family':
            css['font-family'] = val
          /* falls through */
          case 'name':
          case 'style':
            // Attributes specific to named styles:
            attr[name] = val
            break
          case 'base':
            attr[name] = val
            // If base style exists, merge it with current settings
            if (this.style[val]) {
              //attr = Object.apply({}, this.style[val], attr)
              attr = $.extend(true, {}, this.style[val], attr)
              if (this.style[val].css)
                //css = Object.apply({}, this.style[val].css, css)
                css = $.extend({}, this.style[val].css, css)
            }
            break
          case 'bold':
            val = Utils.getBoolean(val)
            attr[name] = val
            css['font-weight'] = val ? 'bold' : 'normal'
            break
          case 'italic':
            val = Utils.getBoolean(val)
            attr[name] = val
            css['font-style'] = val ? 'italic' : 'normal'
            break
          case 'target':
            attr[name] = Utils.getBoolean(val)
            break
          case 'size':
            attr[name] = Number(val)
            css['font-size'] = `${val}px`
            break
          case 'tabWidth':
            // `tab-size` CSS attribute is only set when the document has a specific `tabWidth`
            // setting. It must be accompanied of `white-space:pre` to successfully work.
            this.tabSpc = val
            css['tab-size'] = this.tabSpc
            css['white-space'] = 'pre-wrap'
            break
          default:
            Utils.log('warn', `Unknown text attribute: "${name}" = "${val}"`)
            attr[name] = val
            break
        }
      })

      if (!$.isEmptyObject(css))
        attr['css'] = css

      return attr
    }

    /**
     * Gets the full text of this document in raw format
     * @returns {String} - The text of the document.
     */
    getRawText() {
      const $html = $('<div/>')
      // Process paragraphs
      this.p.forEach(p => {
        // Creates a new DOM paragraph
        const $p = $('<p/>')
        let empty = true
        // Process the paragraph elements
        p.elements.forEach(element => {
          switch (element.objectType) {
            case 'text':
            case 'target':
              $p.append(element.text)
              break
            case 'cell':
              // cells are not considered raw text of the document
              break
            default:
              break
          }
          empty = false
        })
        if (empty) {
          // Don't leave paragraphs empty
          $p.html('&nbsp;')
        }
        // Adds the paragraph to the DOM element
        $html.append($p)
      })
      return $html.text().trim()
    }

    /**
     * Gets a `style` object filled with default attributes plus attributes present in the
     * requested style name.
     * @param {string} name - The requested style name
     * @returns {Object} - The result of combining `default` with the requested style
     */
    getFullStyle(name) {
      const st = $.extend(true, {}, this.style.default)
      return $.extend(true, st, this.style[name] ? this.style[name] : {})
      //return Object.assign({}, this.style.default, this.style[name] ? this.style[name] : {})
    }
  }

  Object.assign(TextActivityDocument.prototype, {
    /**
     * Number of blank spaces between tabulators.
     * @name TextActivityDocument#tabSpc
     * @type {number} */
    tabSpc: 12,
    /**
     * Index of the last {@link ActiveBox} activated.
     * @name TextActivityDocument#lastBoxId
     * @type {number} */
    lastBoxId: 0,
    /**
     * A bag of {@link TargetMarker} objects
     * @name TextActivityDocument#tmb
     * @type {object} */
    tmb: null,
    /**
     * Number of targets
     * @name TextActivityDocument#numTargets
     * @type {number} */
    numTargets: 0,
    /**
     * Type of targets used in this activity. Possible values are: `TT_FREE`, `TT_CHAR`, `TT_WORD`
     * and `TT_PARAGRAPH`.
     * @name TextActivityDocument#targetType
     * @type {string} */
    targetType: 'TT_FREE',
    /**
     * Bag with the content of the boxes embedded in the document.
     * @name TextActivityDocument#boxesContent
     * @type {ActiveBagContent} */
    boxesContent: null,
    /**
     * Bag with the content of the pop-ups used by this activity.
     * @name TextActivityDocument#popupsContent
     * @type {ActiveBagContent} */
    popupsContent: null,
    /**
     * Collection of named styles of the document
     * @name TextActivityDocument#style
     * @type {object} */
    style: null,
    /**
     * The main document, represented as a collection of DOM objects
     * @name TextActivityDocument#p
     * @type {object} */
    p: null,
  })

  /**
   * Default style for new documents
   * @type {object} */
  TextActivityDocument.DEFAULT_DOC_STYLE = {
    background: 'white',
    foreground: 'black',
    family: 'Arial',
    size: 17,
    css: {
      'font-family': 'Arial,Helvetica,sans-serif',
      'font-size': '17px',
      'background-color': 'white',
      color: 'black'
    }
  }

  /**
   * This class contains the properties and methods of the document elements that are the real
   * targets of user actions in text activities.
   * @class
   */
  class TextTarget {
    /**
     * TextTarget constructor
     * @param {TextActivityDocument} doc - The document to which this target belongs.
     * @param {string} text - Main text of this target.
     */
    constructor(doc, text) {
      this.doc = doc
      this.text = text
      this.numIniChars = text.length
      this.answers = [text]
      this.maxLenResp = this.numIniChars
    }

    /**
     * Resets the TextTarget status
     * @param {string=} status - The `targetStatus` to be established. Default is `NOT_EDITED`
     */
    reset(status) {
      this.targetStatus = status ? status : 'NOT_EDITED'
      this.flagModified = false
    }

    /**
     * Loads the text target settings from a specific JQuery XML element
     * @param {external:jQuery} $xml - The XML element to parse
     * @param {MediaBag} mediaBag - The media bag used to load images and media content
     */
    setProperties($xml, mediaBag) {
      let firstAnswer = true
      // Read specific nodes
      $xml.children().each((_n, child) => {
        const $node = $(child)
        switch (child.nodeName) {
          case 'answer':
            if (firstAnswer) {
              firstAnswer = false
              this.answers = []
            }
            if (this.answers === null)
              this.answers = []
            this.answers.push(child.textContent)
            break

          case 'optionList':
            $node.children('option').each((_n, opChild) => {
              this.isList = true
              if (this.options === null)
                this.options = []
              this.options.push(opChild.textContent)
            })
            break

          case 'response':
            this.iniChar = Utils.getVal($node.attr('fill'), this.iniChar).charAt(0)
            // Use underscores instead of whitespace chars
            if (Utils.settings.WHITESPACES.indexOf(this.iniChar) >= 0)
              this.iniChar = '_'
            this.numIniChars = Utils.getNumber($node.attr('length'), this.numIniChars)
            this.maxLenResp = Utils.getNumber($node.attr('maxLength'), this.maxLenResp)
            this.iniText = Utils.getVal($node.attr('show'), this.iniText)
            break

          case 'info':
            this.infoMode = Utils.getVal($node.attr('mode'), 'always')
            this.popupDelay = Utils.getNumber($node.attr('delay'), this.popupDelay)
            this.popupMaxTime = Utils.getNumber($node.attr('maxTime'), this.popupMaxTime)
            $node.children('media').each((_n, media) => {
              this.onlyPlay = true
              this.popupContent = new ActiveBoxContent()
              this.popupContent.mediaContent = new MediaContent().setProperties($(media))
            });
            if (!this.popupContent) {
              $node.children('cell').each((_n, cell) => {
                this.popupContent = new ActiveBoxContent().setProperties($(cell), mediaBag)
              })
            }
            break

          case 'text':
            this.text = child.textContent.replace(/\t/g, '&#9;')
            const attr = this.doc.readDocAttributes($(child))
            if (!$.isEmptyObject(attr))
              this.attr = attr
            break

          default:
            break
        }
      })
    }

    /**
     * Gets a string with all valid answers of this TextTarget. Useful for reporting users' activity.
     * @returns {string}
     */
    getAnswers() {
      return this.answers ? this.answers.join('|') : ''
    }

    /**
     * Sets specific colors to the target jQuery element, based on its `targetStatus` value. Red
     * color usually means error.
     */
    checkColors() {
      const $element = this.$comboList || this.$span
      if ($element) {
        const style = this.doc.style[
          this.targetStatus === 'WITH_ERROR' ? 'targetError' :
            this.targetStatus === 'HIDDEN' ? 'default' : 'target']
        if (style && style.css) {
          $element.css(style.css)
        }
      }
    }

    /**
     * Fills the `currentText` member with the text currently hosted in $span or selected in $comboList
     * @returns {String} - The current text of this target
     */
    readCurrentText() {
      if (this.$span)
        this.currentText = this.$span.text()
      else if (this.$comboList)
        this.currentText = this.$comboList.val()
      return this.currentText
    }
  }

  Object.assign(TextTarget.prototype, {
    /**
     * The {@link TextActivityDocument} to which this target belongs
     * @name TextTarget#doc
     * @type {TextActivityDocument} */
    doc: null,
    /**
     * The current text displayed by this TextTarget
     * @name TextTarget#text
     * @type {string} */
    text: null,
    /**
     * A set of optional attributes for `text`
     * @name TextTarget#attr
     * @type {object} */
    attr: null,
    /**
     * `true` when the target is a drop-down list
     * @name TextTarget#isList
     * @type {boolean} */
    isList: false,
    /**
     * Number of characters initially displayed on the text field
     * @name TextTarget#numIniChars
     * @type {number} */
    numIniChars: 1,
    /**
     * Character used to fill-in the text field
     * @name TextTarget#iniChar
     * @type {string} */
    iniChar: '_',
    /**
     * Maximum length of the answer
     * @name TextTarget#maxLenResp
     * @type {number} */
    maxLenResp: 0,
    /**
     * Array of valid answers
     * @name TextTarget#answers
     * @type {string[]} */
    answers: null,
    /**
     * Set of specific options
     * @name TextTarget#options
     * @type {object} */
    options: null,
    /**
     * Text displayed by the target when the activity begins
     * @name TextTarget#iniText
     * @type {string} */
    iniText: null,
    /**
     * Type of additional information offered to the user. Possible values are: `no_info`, `always`,
     * `onError` and `onDemand`.
     * @name TextTarget#infoMode
     * @type {string} */
    infoMode: 'no_info',
    /**
     * Key that triggers the associated popup when `infoMode` is `onDemand`
     * @name TextTarget#popupKey
     * @type {string} */
    popupKey: 'F1',
    /**
     * An optional {@link ActiveBoxContent} with information about this TextTarget
     * @name TextTarget#popupContent
     * @type {ActiveBoxContent} */
    popupContent: null,
    /**
     * Time (seconds) to wait before showing the additional information
     * @name TextTarget#popupDelay
     * @type {number} */
    popupDelay: 0,
    /**
     * Maximum amount of time (seconds) that the additional information will be shown
     * @name TextTarget#popupMaxTime
     * @type {number} */
    popupMaxTime: 0,
    /**
     * When this flag is `true` and `popupContent` contains audio, no visual feedback will be
     * provided (meaning that audio will be just played)
     * @name TextTarget#onlyPlay
     * @type {boolean} */
    onlyPlay: false,
    //
    // TRANSIENT PROPERTIES
    //
    /**
     * The drop-down list associated to this target
     * @name TextTarget#$comboList
     * @type {external:jQuery} */
    $comboList: null,
    /**
     * The span element associated to this target
     * @name TextTarget#$span
     * @type {external:jQuery} */
    $span: null,
    /**
     * The paragraph element where $span is currently located
     * @name TextTarget#$p
     * @type {external:jQuery} */
    $p: null,
    /**
     * The span element containing the popup
     * @name TextTarget#$popup
     * @type {external:jQuery} */
    $popup: null,
    /**
     * Current text in the $span element
     * @name TextTarget#currentText
     * @type {string} */
    currentText: '',
    /**
     * Ordinal number of this target in the collection of targets
     * @name TextTarget#num
     * @type {number} */
    num: 0,
    /**
     * Current ordinal position of this target in the document
     * (used in {@link OrderText} activities)
     * @name TextTarget#pos
     * @type {number} */
    pos: 0,
    /**
     * Current status of the target. Valid values are: `NOT_EDITED`, `EDITED`, `SOLVED`, `WITH_ERROR` and `HIDDEN`
     * @name TextTarget#targetStatus
     * @type {string} */
    targetStatus: 'NOT_EDITED',
    /**
     * Flag to control if the initial content of this TextTarget has been modified
     * @name TextTarget#flagModified
     * @type {boolean} */
    flagModified: false,
    /**
     * Pointer to the activity panel containing this TextTarget
     * @name TextTarget#parentPane
     * @type {TextActivityBasePanel} */
    parentPane: null,
  })

  TextActivityDocument.TextTarget = TextTarget

  return TextActivityDocument
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/activities/text/WrittenAnswer.js":
/*!**********************************************!*\
  !*** ./src/activities/text/WrittenAnswer.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : activities/text/WrittenAnswer.js
 *  Created : 04/06/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ../../Activity */ "./src/Activity.js"),
  __webpack_require__(/*! ../../boxes/ActiveBoxGrid */ "./src/boxes/ActiveBoxGrid.js"),
  __webpack_require__(/*! ../../boxes/BoxBag */ "./src/boxes/BoxBag.js"),
  __webpack_require__(/*! ../../AWT */ "./src/AWT.js"),
  __webpack_require__(/*! ../../Utils */ "./src/Utils.js"),
  __webpack_require__(/*! ../../shapers/Rectangular */ "./src/shapers/Rectangular.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, Activity, ActiveBoxGrid, BoxBag, AWT, Utils, Rectangular) {

  /**
   * This class of {@link Activity} shows a panel with {@link ActiveBox} objects acting as cells
   * with questions. The answers to these questions must be written in a separate text field.
   *
   * The ActiveBox objects are filled with data stored in {@link ActiveBagContent} repositories.
   *
   * A second {@link ActiveBagContent} can be used as alternative content, revealed as the questions
   * are solved.
   * @exports WrittenAnswer
   * @class
   * @extends Activity
   */
  class WrittenAnswer extends Activity {
    /**
     * WrittenAnswer constructor
     * @param {JClicProject} project - The JClic project to which this activity belongs
     */
    constructor(project) {
      super(project)
    }

    /**
     * Loads this object settings from an XML element
     * @override
     * @param {external:jQuery} $xml - The jQuery XML element to parse
     */
    setProperties($xml) {
      super.setProperties($xml)
      this.abc['primary'].avoidAllIdsNull(this.abc['answers'].getNumCells())
    }

    /**
     * Retrieves the minimum number of actions needed to solve this activity
     * @override
     * @returns {number}
     */
    getMinNumActions() {
      return this.invAss ?
        this.abc['answers'].getNumCells() :
        this.abc['primary'].getNumCells() - this.nonAssignedCells
    }

    /**
     * This activity uses random values to scramble its internal components
     * @override
     * @returns {boolean}
     */
    hasRandom() {
      return true
    }

    /**
     * This activity makes use of the keyboard
     * @override
     * @returns {boolean}
     */
    needsKeyboard() {
      return true
    }

    /**
     * This activity can permit the user to display the solution
     * @override
     * @returns {boolean}
     */
    helpSolutionAllowed() {
      return true
    }
  }

  Object.assign(WrittenAnswer.prototype, {
    /**
     * Number of unassigned cells
     * @name WrittenAnswer#nonAssignedCells
     * @type {number} */
    nonAssignedCells: 0,
    /**
     * Whether to use or not the cell's `idAss` field to check if pairings match
     * @name WrittenAnswer#useIdAss
     * @type {boolean} */
    useIdAss: true,
  })

  /**
   * The {@link ActivityPanel} where {@link WrittenAnswer} activities are played.
   * @class
   * @extends ActivityPanel
   */
  class WrittenAnswerPanel extends Activity.Panel {
    /**
     * WrittenAnswerPanel constructor
     * @param {Activity} act - The {@link Activity} to which this Panel belongs
     * @param {JClicPlayer} ps - Any object implementing the methods defined in the
     * [PlayStation](http://projectestac.github.io/jclic/apidoc/edu/xtec/jclic/PlayStation.html)
     * Java interface.
     * @param {external:jQuery=} $div - The jQuery DOM element where this Panel will deploy
     */
    constructor(act, ps, $div) {
      super(act, ps, $div)
    }

    /**
     * Performs miscellaneous cleaning operations
     * @override
     */
    clear() {
      if (this.bgA) {
        this.bgA.end()
        this.bgA = null
      }
      if (this.bgB) {
        this.bgB.end()
        this.bgB = null
      }
    }

    /**
     * Prepares the visual components of the activity
     * @override
     */
    buildVisualComponents() {
      if (this.firstRun)
        super.buildVisualComponents()

      this.clear()

      const
        abcA = this.act.abc['primary'],
        abcB = this.act.abc['answers'],
        solved = this.act.abc['solvedPrimary']

      if (abcA && abcB) {
        if (this.act.invAss)
          this.invAssCheck = Array(abcB.getNumCells()).fill(false)

        if (abcA.imgName) {
          abcA.setImgContent(this.act.project.mediaBag, null, false)
          if (abcA.animatedGifFile && !abcA.shaper.rectangularShapes && !this.act.scramble['primary'])
            this.$animatedBg = $('<span/>').css({
              'background-image': 'url(' + abcA.animatedGifFile + ')',
              'background-position': 'center',
              'background-repeat': 'no-repeat',
              position: 'absolute'
            }).appendTo(this.$div)
        }

        if (solved && solved.imgName)
          solved.setImgContent(this.act.project.mediaBag, null, false)

        if (this.act.acp !== null) {
          const contentKit = [abcA, abcB]
          if (solved)
            contentKit.push(solved)
          this.act.acp.generateContent(abcA.nch, abcA.ncw, contentKit, false)
        }

        this.bgA = ActiveBoxGrid.createEmptyGrid(null, this, this.act.margin, this.act.margin, abcA)

        let w = abcB.w
        if (this.act.boxGridPos === 'AUB' || this.act.boxGridPos === 'BUA')
          w = abcA.getTotalWidth()
        //
        // bgB will be used only as a placeholder for `$textField`
        this.bgB = new ActiveBoxGrid(null, this, abcB.bb, this.act.margin, this.act.margin, w, abcB.h, new Rectangular(1, 1))
        this.$form = $('<form/>', { id: 'form1' /*, action: '#'*/ })
        // Modified 05/Feb/2020: jQuery not catching submit event when on first activity
        this.$form[0].addEventListener('submit', event => {
          event.preventDefault()
          if (this.playing)
            this.setCurrentCell(this.currentCell)
          return false
        })

        this.$textField = $('<input/>', { type: 'text', size: 200 })
          .css(abcB.bb.getCSS())
          .css({
            position: 'absolute', top: 0, left: 0,
            border: 0, padding: 0, margin: 0,
            'text-align': 'center'
          })
          .attr({
            autocomplete: 'off',
            autocorrect: 'off',
            autocapitalize: 'off',
            spellcheck: 'false',
          })

        this.$div.append(this.$form.append(this.$textField))
        this.bgA.setContent(abcA, solved || null)
        this.bgA.setDefaultIdAss()
        if (this.$animatedBg)
          this.bgA.setCellAttr('tmpTrans', true)

        this.act.nonAssignedCells = 0
        for (let i = 0; i < this.bgA.getNumCells(); i++) {
          var bx = this.bgA.getActiveBox(i)
          if (bx.idAss === -1) {
            this.act.nonAssignedCells++
            bx.switchToAlt(this.ps)
          }
        }
        this.bgA.setVisible(true)
        this.bgB.setVisible(false)
      }
    }

    /**
     * Basic initialization procedure
     * @override
     */
    initActivity() {
      super.initActivity()
      if (!this.firstRun)
        this.buildVisualComponents()
      else
        this.firstRun = false

      if (this.bgA && this.bgB) {
        // Scramble cells
        if (this.act.scramble.primary)
          this.shuffle([this.bgA], true, true)

        if (this.useOrder)
          this.currentItem = this.bgA.getNextItem(-1)

        this.setAndPlayMsg('initial', 'start')
        this.invalidate().update()
        this.playing = true
      }
    }

    /**
     * Called by [JClicPlayer](JClicPlayer.html) when this activity panel is fully visible, just
     * after the initialization process.
     * @override
     */
    activityReady() {
      super.activityReady()
      this.setCurrentCell(0)
    }

    /**
     * Updates the graphic content of this panel.
     * This method will be called from {@link AWT.Container#update} when needed.
     * @override
     * @param {AWT.Rectangle} dirtyRegion - Specifies the area to be updated. When `null`,
     * it's the whole panel.
     */
    updateContent(dirtyRegion) {
      super.updateContent(dirtyRegion)
      if (this.bgA && this.$canvas) {
        const
          canvas = this.$canvas.get(-1),
          ctx = canvas.getContext('2d')
        if (!dirtyRegion)
          dirtyRegion = new AWT.Rectangle(0, 0, canvas.width, canvas.height)
        ctx.clearRect(dirtyRegion.pos.x, dirtyRegion.pos.y, dirtyRegion.dim.width, dirtyRegion.dim.height)
        this.bgA.update(ctx, dirtyRegion)
      }
      return this
    }

    /**
     * Sets the real dimension of this panel.
     * @override
     * @param {AWT.Dimension} preferredMaxSize - The maximum surface available for the activity panel
     * @returns {AWT.Dimension}
     */
    setDimension(preferredMaxSize) {
      return (!this.bgA || !this.bgB || this.getBounds().equals(preferredMaxSize)) ?
        preferredMaxSize :
        BoxBag.layoutDouble(preferredMaxSize, this.bgA, this.bgB, this.act.boxGridPos, this.act.margin)
    }

    /**
     * Sets the size and position of this activity panel
     * @override
     * @param {AWT.Rectangle} rect
     */
    setBounds(rect) {
      if (this.$canvas)
        this.$canvas.remove()

      super.setBounds(rect)
      if (this.bgA || this.bgB) {
        const r = rect.clone()
        if (this.act.boxGridPos === 'AUB')
          r.height -= this.bgB.pos.y + this.act.margin / 2
        else if (this.act.boxGridPos === 'AB')
          r.width -= this.bgB.pos.x + this.act.margin / 2

        // Create the main canvas
        this.$canvas = $('<canvas width="' + r.dim.width + '" height="' + r.dim.height + '"/>').css({
          position: 'absolute',
          top: 0,
          left: 0
        })

        // Resize animated gif background
        if (this.bgA && this.$animatedBg) {
          var bgRect = this.bgA.getBounds()
          this.$animatedBg.css({
            left: bgRect.pos.x,
            top: bgRect.pos.y,
            width: bgRect.dim.width + 'px',
            height: bgRect.dim.height + 'px',
            'background-size': bgRect.dim.width + 'px ' + bgRect.dim.height + 'px'
          })
          this.$canvas.insertAfter(this.$animatedBg)
        } else
          this.$div.prepend(this.$canvas)

        if (this.$textField) {
          this.$textField.css({
            top: this.bgB.pos.y,
            left: this.bgB.pos.x,
            width: this.bgB.dim.width,
            height: this.bgB.dim.height,
            zIndex: 9
          })
        }
        // Repaint all
        this.invalidate().update()
      }
    }

    /**
     * Builds the accessible components needed for this ActivityPanel
     * This method is called when all main elements are placed and visible, when the activity is ready
     * to start or when resized.
     * @override
     */
    buildAccessibleComponents() {
      if (this.$canvas && this.accessibleCanvas) {
        super.buildAccessibleComponents()
        if (this.bgA)
          this.bgA.buildAccessibleElements(this.$canvas, this.$div, 'click')
        // bgB has a regular input element, so it's already accessible
      }
    }

    /**
     * Checks if all inverse associations are done
     * @returns {boolean}
     */
    checkInvAss() {
      return this.act.invAss && this.invAssCheck && this.invAssCheck.every(chk => chk)
    }

    /**
     * Updates the currently selected cell, evaluating the answer written by the user on the text field.
     * @param {number} i - Index into the {@link ActiveBoxBag} of the cell to make active
     * @param {function[]} delayedActions - If set, store the the action in this array for future execution
     */
    setCurrentCell(i, delayedActions = null) {
      if (!this.playing)
        return

      let
        bx = null,
        m = false

      if (this.currentCell !== -1) {
        let ok = false
        bx = this.bgA ? this.bgA.getActiveBoxWithIdLoc(this.currentCell) : null
        if (bx) {
          bx.setMarked(false)
          const
            src = bx.getDescription(),
            id = bx.idAss,
            txCheck = id >= 0 ? this.act.abc['answers'].getActiveBoxContent(id).text : '',
            txAnswer = this.$textField.val().trim()
          if (Utils.compareMultipleOptions(txAnswer, txCheck, false, this.act.numericContent)) {
            ok = true
            bx.idAss = -1
            // When in multiple-answer, fill-in textField with the first valid option:
            const p = txCheck.indexOf('|')
            if (p >= 0)
              this.$textField.val(txCheck.substring(0, p))

            if (this.act.abc['solvedPrimary']) {
              bx.switchToAlt(this.ps)
              m = bx.playMedia(this.ps, delayedActions)
            } else
              bx.clear()
            if (this.act.invAss && id >= 0 && id < this.invAssCheck.length) {
              this.invAssCheck[id] = true
            }
            if (this.act.useOrder)
              this.currentItem = this.bgA.getNextItem(this.currentItem)
          }

          const cellsPlaced = this.bgA.countCellsWithIdAss(-1)
          if (txAnswer.length > 0) {
            this.ps.reportNewAction(this.act, 'WRITE', src, txAnswer, ok, cellsPlaced)
          }
          if (ok && (this.checkInvAss() || cellsPlaced === this.bgA.getNumCells())) {
            this.finishActivity(true)
            this.$textField.prop('disabled', true)
            this.invalidate().update()
            return
          } else if (!m && txAnswer.length > 0)
            this.playEvent(ok ? 'actionOk' : 'actionError')
        }
      }

      bx = this.bgA ?
        this.act.useOrder ?
          this.bgA.getBox(this.currentItem) :
          this.bgA.getActiveBoxWithIdLoc(i) :
        null

      if (this.bgA && (!bx || bx.idAss === -1)) {
        for (var j = 0; j < this.bgA.getNumCells(); j++) {
          bx = this.bgA.getActiveBoxWithIdLoc(j)
          if (bx.idAss !== -1)
            break
        }
        if (bx && bx.idAss === -1) {
          this.finishActivity(false)
          this.$textField.prop('disabled', true)
          this.invalidate().update()
          return
        }
      }
      // Draw border only if it has more than one cell
      if (bx && this.bgA && this.bgA.getNumCells() > 1)
        bx.setMarked(true)
      if (bx)
        this.currentCell = bx.idLoc
      this.$textField.val('')
      this.$textField.focus()
      this.invalidate().update()
      if (bx)
        bx.playMedia(this.ps, delayedActions)
    }

    /**
     * Main handler used to process mouse, touch, keyboard and edit events
     * @override
     * @param {HTMLEvent} event - The HTML event to be processed
     * @returns {boolean=} - When this event handler returns `false`, jQuery will stop its
     * propagation through the DOM tree. See: {@link http://api.jquery.com/on}
     */
    processEvent(event) {
      if (this.playing) {
        // Array to be filled with actions to be executed at the end of event processing
        const delayedActions = []
        switch (event.type) {
          case 'click':
            event.preventDefault()
            this.ps.stopMedia(1)
            const p = new AWT.Point(
              event.pageX - this.$div.offset().left,
              event.pageY - this.$div.offset().top)

            // Avoid clicks on the text field
            if (this.bgB.contains(p)) {
              this.$textField.focus()
              break
            }

            const bx = this.bgA ? this.bgA.findActiveBox(p) : null
            if (bx && !bx.isInactive()) {
              if (bx.getContent() && bx.getContent().mediaContent === null)
                this.playEvent('CLICK')
              this.setCurrentCell(bx.idLoc, delayedActions)
            }
            break

          case 'change':
            event.preventDefault()
            this.setCurrentCell(this.currentCell, delayedActions)
            break
        }
        delayedActions.forEach(action => action())
        return false
      }
    }
  }

  Object.assign(WrittenAnswerPanel.prototype, {
    /**
     * The input text field where users write the answers
     * @name WrittenAnswerPanel#$textField
     * @type {external:jQuery} */
    $textField: null,
    /**
     * Array for storing checked associations
     * @name WrittenAnswerPanel#invAssCheck
     * @type {boolean[]} */
    invAssCheck: null,
    /**
     * The {@link ActiveBoxBag} object containing the questions
     * @name WrittenAnswerPanel#bgA
     * @type {ActiveBoxBag} */
    bgA: null,
    /**
     * An optional {@link ActiveBoxBag} with content displayed as cells are solved.
     * @name WrittenAnswerPanel#bgB
     * @type {ActiveBoxBag} */
    bgB: null,
    /**
     * The currently selected cell
     * @name WrittenAnswerPanel#currentCell
     * @type {number} */
    currentCell: -1,
    /**
     * Mouse events intercepted by this panel
     * @override
     * @name WrittenAnswerPanel#events
     * @type {string[]} */
    events: ['click', 'change'],
  })

  /**
   * Panel class associated to this type of activity: {@link WrittenAnswerPanel}
   * @type {class} */
  WrittenAnswer.Panel = WrittenAnswerPanel

  // Register class in Activity.prototype
  Activity.CLASSES['@text.WrittenAnswer'] = WrittenAnswer

  return WrittenAnswer
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/activities/textGrid/CrossWord.js":
/*!**********************************************!*\
  !*** ./src/activities/textGrid/CrossWord.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : activities/textGrid/CrossWord.js
 *  Created : 17/06/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ../../Activity */ "./src/Activity.js"),
  __webpack_require__(/*! ../../boxes/BoxBase */ "./src/boxes/BoxBase.js"),
  __webpack_require__(/*! ../../boxes/BoxBag */ "./src/boxes/BoxBag.js"),
  __webpack_require__(/*! ../../boxes/TextGrid */ "./src/boxes/TextGrid.js"),
  __webpack_require__(/*! ../../boxes/AbstractBox */ "./src/boxes/AbstractBox.js"),
  __webpack_require__(/*! ../../boxes/ActiveBox */ "./src/boxes/ActiveBox.js"),
  __webpack_require__(/*! ../../AWT */ "./src/AWT.js"),
  __webpack_require__(/*! ../../Utils */ "./src/Utils.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, Activity, BoxBase, BoxBag, TextGrid, AbstractBox, ActiveBox, AWT, Utils) {

  const K = Utils.settings

  /**
   * This class of {@link Activity} shows a {@link TextGrid} initially empty, with some cells
   * marked in negative color that act as word stoppers. A blinking "cursor" indicates the cell that
   * will receive the next character entered by the user on the keyboard.
   *
   * The letter in each cell of the grid is always shared by two words: one in horizontal direction
   * and the other one in vertical direction. Two {@link ActiveBox} objects are placed next to the
   * {@link TextGrid}, hosting the definitions of the horizontal and vertical words crossing at the
   * cell currently marked by the cursor.
   *
   * Two special buttons placed near this boxes allow to write on the grid horizontally or vertically.
   * The aim of the activity is to fill all the text grid with the correct words.
   * @exports CrossWord
   * @class
   * @extends Activity
   */
  class CrossWord extends Activity {
    /**
     * CrossWord constructor
     * @param {JClicProject} project - The JClic project to which this activity belongs
     */
    constructor(project) {
      super(project)
    }

    /**
     * Retrieves the minimum number of actions needed to solve this activity
     * @override
     * @returns {number}
     */
    getMinNumActions() {
      return this.tgc.getNumChars() - this.tgc.countWildChars()
    }

    /**
     * Crossword activities always make use of the keyboard
     * @override
     * @returns {boolean}
     */
    needsKeyboard() {
      return true
    }
  }

  Object.assign(CrossWord.prototype, {
    /**
     * Whether all letters of the {@link TextGrid} should be displayed in upper case
     * @name CrossWord#upperCase
     * @type {boolean} */
    upperCase: true,
    /**
     * Whether the case is significant to evaluate answers
     * @name CrossWord#checkCase
     * @type {boolean} */
    checkCase: true,
    /**
     * When `true`, the wildcard character of the {@link TextGrid} will be transparent.
     * @name CrossWord#wildTransparent
     * @type {boolean} */
    wildTransparent: false,
  })

  /**
   * The {@link ActivityPanel} where {@link CrossWord} activities are played.
   * @class
   * @extends ActivityPanel
   */
  class CrossWordPanel extends Activity.Panel {
    /**
     * CrossWordPanel constructor
     * @param {Activity} act - The {@link Activity} to which this Panel belongs
     * @param {JClicPlayer} ps - Any object implementing the methods defined in the
     * [PlayStation](http://projectestac.github.io/jclic/apidoc/edu/xtec/jclic/PlayStation.html)
     * Java interface.
     * @param {external:jQuery=} $div - The jQuery DOM element where this Panel will deploy
     */
    constructor(act, ps, $div) {
      super(act, ps, $div)
    }

    /**
     * Performs miscellaneous cleaning operations
     * @override
     */
    clear() {
      if (this.grid) {
        this.grid.end()
        this.grid = null
      }
      if (this.bb) {
        this.bb.end()
        this.bb = null
      }
    }

    /**
     * Creates a {@link BoxBag} with a label ("Horizontal" or "Vertical") and an {@link ActiveBox}
     * that will be used to display clues.
     * @param {string} type - `acrossClues` for horizontal clues, 'downClues' for vertical.
     * @returns {BoxBag}
     */
    createBoxBag(type) {
      const
        bxb = new BoxBag(null, this, null),
        sb = new AbstractBox(bxb, this, this.icoBB)

      sb.setBounds(0, 0, this.LABEL_WIDTH, this.act.abc[type].h)
      const $btn = $('<button/>', { class: 'StockBtn' }).css({
        'width': this.LABEL_WIDTH,
        'height': this.act.abc[type].h,
        'background-image': `url(${type === 'acrossClues' ? this.hIcon : this.vIcon})`,
        'background-repeat': 'no-repeat',
        'background-position': 'center',
        'border-radius': 6,
        'z-index': 10
      }).click(() => {
        this.advance = type === 'acrossClues' ?
          this.advance === 'ADVANCE_RIGHT' ?
            'NO_ADVANCE' : 'ADVANCE_RIGHT' :
          this.advance === 'ADVANCE_DOWN' ?
            'NO_ADVANCE' : 'ADVANCE_DOWN'
        this.setBtnStatus()
      }).on('keypress', event => {
        if (String.fromCharCode(event.charCode || event.keyCode) === ' ')
          event.stopPropagation()
      }).appendTo(this.$div)

      sb.setHostedComponent($btn)
      bxb.addBox(sb)

      const ab = new ActiveBox(bxb, null, null, type, new AWT.Rectangle(this.LABEL_WIDTH + this.act.margin, 0, this.act.abc[type].w, this.act.abc[type].h))
      bxb.addBox(ab)
      bxb.setBoxBase(this.act.abc[type].bb)

      if (type === 'acrossClues') { // Horizontal
        this.hClue = ab
        this.hClueBtn = sb
      } else {
        this.vClue = ab
        this.vClueBtn = sb
      }
      return bxb
    }

    /**
     * Prepares the visual components of the activity
     * @override
     */
    buildVisualComponents() {
      if (this.firstRun)
        super.buildVisualComponents()
      this.clear()

      const
        tgc = this.act.tgc,
        abcH = this.act.abc['acrossClues'],
        abcV = this.act.abc['downClues']

      if (abcH.imgName)
        abcH.setImgContent(this.act.project.mediaBag, null, false)
      if (abcV.imgName)
        abcV.setImgContent(this.act.project.mediaBag, null, false)

      if (this.act.acp !== null) {
        this.act.acp.generateContent(0, 0, this.act.abc, false)
      }

      if (tgc) {
        this.grid = TextGrid.createEmptyGrid(null, this, this.act.margin, this.act.margin, tgc, this.act.wildTransparent)
        this.bb = new BoxBag(null, this, null)
        const
          bxbh = this.createBoxBag('acrossClues'),
          bxbv = this.createBoxBag('downClues')
        if (this.act.boxGridPos === 'AUB' || this.act.boxGridPos === 'BUA')
          bxbv.moveTo(new AWT.Point(bxbh.dim.width + this.act.margin, 0))
        else
          bxbv.moveTo(new AWT.Point(0, bxbh.dim.height + this.act.margin))
        this.bb.addBox(bxbh)
        this.bb.addBox(bxbv)
        this.grid.setVisible(true)
        this.bb.setVisible(true)
      }
    }

    /**
     * Basic initialization procedure
     * @override
     */
    initActivity() {
      super.initActivity()
      if (!this.firstRun)
        this.buildVisualComponents()
      else
        this.firstRun = false

      if (this.grid) {
        this.grid.setChars(this.act.tgc.text)
        this.numLetters = this.act.getMinNumActions()
        this.grid.setCellAttributes(true, true)
        this.grid.setCursorEnabled(true)
        this.setCursorAt(0, 0)
        this.advance = 'ADVANCE_RIGHT'
        this.setBtnStatus()
        this.setAndPlayMsg('initial', 'start')
        this.invalidate().update()
        this.$div.attr("tabindex", 0)
        this.$div.focus()
        this.playing = true
      }
    }

    /**
     * Calculates the current score
     * @returns {number}
     */
    getCurrentScore() {
      return this.grid ? this.grid.countCoincidences(this.act.checkCase) : 0
    }

    /**
     * Updates the graphic content of this panel.
     * This method will be called from {@link AWT.Container#update} when needed.
     * @override
     * @param {AWT.Rectangle} dirtyRegion - Specifies the area to be updated. When `null`,
     * it's the whole panel.
     */
    updateContent(dirtyRegion) {
      super.updateContent(dirtyRegion)
      if (this.grid && this.$canvas) {
        const
          canvas = this.$canvas.get(-1),
          ctx = canvas.getContext('2d')
        if (!dirtyRegion)
          dirtyRegion = new AWT.Rectangle(0, 0, canvas.width, canvas.height)
        ctx.clearRect(dirtyRegion.pos.x, dirtyRegion.pos.y, dirtyRegion.dim.width, dirtyRegion.dim.height)
        this.grid.update(ctx, dirtyRegion)
        this.bb.update(ctx, dirtyRegion)
      }
      return this
    }

    /**
     * Sets the real dimension of this panel.
     * @override
     * @param {AWT.Dimension} preferredMaxSize - The maximum surface available for the activity panel
     * @returns {AWT.Dimension}
     */
    setDimension(preferredMaxSize) {
      return !this.grid || !this.bb || this.getBounds().equals(preferredMaxSize) ?
        preferredMaxSize :
        BoxBag.layoutDouble(preferredMaxSize, this.grid, this.bb, this.act.boxGridPos, this.act.margin)
    }

    /**
     * Sets the size and position of this activity panel
     * @override
     * @param {AWT.Rectangle} rect
     */
    setBounds(rect) {
      if (this.$canvas) {
        this.$canvas.remove()
        this.$canvas = null
      }
      super.setBounds(rect)

      if (this.grid) {
        // Create the main canvas
        this.$canvas = $(`<canvas width="${rect.dim.width}" height="${rect.dim.height}"/>`).css({
          position: 'absolute',
          top: 0,
          left: 0
        })
        this.$div.append(this.$canvas)
        // Repaint all
        this.invalidate().update()
      }
    }

    /**
     * Main handler used to process mouse, touch, keyboard and edit events
     * @override
     * @param {HTMLEvent} event - The HTML event to be processed
     * @returns {boolean=} - When this event handler returns `false`, jQuery will stop its
     * propagation through the DOM tree. See: {@link http://api.jquery.com/on}
     */
    processEvent(event) {
      if (this.playing) {
        switch (event.type) {
          case 'click':
            //
            // The [AWT.Point](AWT.html#Point) where the mouse or touch event has been originated
            // Touch events can have more than one touch, so `pageX` must be obtained from `touches[0]`
            const
              x = event.originalEvent && event.originalEvent.touches ? event.originalEvent.touches[0].pageX : event.pageX,
              y = event.originalEvent && event.originalEvent.touches ? event.originalEvent.touches[0].pageY : event.pageY,
              p = new AWT.Point(x - this.$div.offset().left, y - this.$div.offset().top),
              // Array to be filled with actions to be executed at the end of event processing
              delayedActions = []

            this.ps.stopMedia(1)
            if (this.grid.contains(p)) {
              const pt = this.grid.getLogicalCoords(p)
              if (pt !== null) {
                this.setCursorAt(pt.x, pt.y)
                if (K.TOUCH_DEVICE) {
                  // We are in a touch device, so prompt user to write text:
                  const d = this.advance === 'ADVANCE_DOWN'
                  const txt = window.prompt(`${d ? 'Vertical' : 'Horizontal'} word:`, '')
                  this.writeChars(txt)
                }
              }
            } else if (this.hClue.contains(p))
              this.hClue.playMedia(this.ps, delayedActions)
            else if (this.vClue.contains(p))
              this.vClue.playMedia(this.ps, delayedActions)
            else
              break

            this.update()
            delayedActions.forEach(action => action())
            break

          case 'keypress':
            const code = event.charCode || event.keyCode
            if (code && this.grid.getCursor()) {
              event.preventDefault()
              this.writeChars(String.fromCharCode(code))
            }
            break

          case 'keydown':
            let dx = 0, dy = 0
            switch (event.keyCode) {
              case K.VK.RIGHT:
                dx = 1
                break
              case K.VK.LEFT:
                dx = -1
                break
              case K.VK.DOWN:
                dy = 1
                break
              case K.VK.UP:
                dy = -1
                break
            }
            if (dx || dy) {
              event.preventDefault()
              this.moveCursor(dx, dy)
              this.update()
            }
            break
        }
      }
    }

    /**
     * Moves the cursor the specified `dx` and `dy` amount (in logical coordinates)
     * @param {number} dx - Amount of cells to horizontally move on
     * @param {number} dy - Amount of cells to vertically move on
     */
    moveCursor(dx, dy) {
      if (this.grid) {
        this.grid.moveCursor(dx, dy, true)
        this.cursorPosChanged()
      }
    }

    /**
     * Places the cursor at the specified location (in logical coordinates)
     * @param {number} x
     * @param {number} y
     */
    setCursorAt(x, y) {
      this.grid.setCursorAt(x, y, true)
      this.cursorPosChanged()
    }

    /**
     * Method called when the cursor moves to a different location
     */
    cursorPosChanged() {
      const pt = this.grid.getCursor()
      if (pt !== null && this.bb !== null) {
        const items = this.grid.getItemFor(pt.x, pt.y)
        if (items !== null) {
          this.hClue.setContent(this.act.abc['acrossClues'].getActiveBoxContentWith(pt.y, items.x))
          this.vClue.setContent(this.act.abc['downClues'].getActiveBoxContentWith(pt.x, items.y))
        }
      }
    }

    /**
     * Writes a string on the grid starting at the current cursor position and
     * following the direction marked by the `advance` field
     * @param {string} txt - Text to write
     */
    writeChars(txt) {
      if (txt && txt.length > 0) {
        for (let i = 0; i < txt.length; i++) {
          const cur = this.grid.getCursor()
          let ch = txt.charAt(i)
          if (this.act.upperCase)
            ch = ch.toLocaleUpperCase()
          this.grid.setCharAt(cur.x, cur.y, ch)
          const
            ok = this.grid.isCellOk(cur.x, cur.y, this.act.checkCase),
            r = this.getCurrentScore()
          this.ps.reportNewAction(this.act, 'WRITE', ch, `X:${cur.x} Y:${cur.y}`, ok, r)
          // End activity or play event sound
          if (r === this.numLetters) {
            this.grid.setCursorEnabled(false)
            this.grid.stopCursorBlink()
            this.finishActivity(true)
          } else {
            this.playEvent('click')
            if (this.advance === 'ADVANCE_DOWN')
              this.moveCursor(0, 1)
            else if (this.advance === 'ADVANCE_RIGHT')
              this.moveCursor(1, 0)
          }
        }
      }
      this.update()
    }

    /**
     * Sets the status of horizontal and vertical buttons based on the value of `advance`
     */
    setBtnStatus() {
      if (this.hClueBtn)
        this.hClueBtn.setInactive(this.advance !== 'ADVANCE_RIGHT')
      if (this.vClueBtn)
        this.vClueBtn.setInactive(this.advance !== 'ADVANCE_DOWN')
    }
  }

  Object.assign(CrossWordPanel.prototype, {
    /**
     * The default width of the 'Horizontal' and 'Vertical' buttons (currently 40 pixels)
     * @name CrossWordPanel#LABEL_WIDTH
     * @type {number} */
    LABEL_WIDTH: 40,
    /**
     * The text grid of this ActivityPanel
     * @name CrossWordPanel#grid
     * @type {textGrid} */
    grid: null,
    /**
     * A BoxBag used to place the across and down clues, and the `toggle direction` button.
     * @name CrossWordPanel#bb
     * @type {BoxBag} */
    bb: null,
    /**
     * The total number of letters of this cross word
     * @name CrossWordPanel#numLetters
     * @type {number} */
    numLetters: 0,
    /**
     * Flag indicating the type of automatic advance of the cursor.
     * Possible values are: `NO_ADVANCE` (default), 'ADVANCE_RIGHT' and 'ADVANCE_DOWN'.
     * TODO: Implement 'ADVANCE_LEFT' for LTR languages
     * @name CrossWordPanel#advance
     * @type {string} */
    advance: 'NO_ADVANCE',
    /**
     * The ActiveBox object used to display the 'across' clues
     * @name CrossWordPanel#hClue
     * @type {ActiveBox} */
    hClue: null,
    /**
     * The ActiveBox object used to display the 'down' clues
     * @name CrossWordPanel#vClue
     * @type {ActiveBox} */
    vClue: null,
    /**
     * Button used to set the advance mode to 'ADVANCE_RIGHT'
     * @name CrossWordPanel#hClueBtn
     * @type {ActiveBox} */
    hClueBtn: null,
    /**
     * Button used to set the advance mode to 'ADVANCE_BOTTOM'
     * @name CrossWordPanel#vClueBtn
     * @type {ActiveBox} */
    vClueBtn: null,
    /**
     * Mouse and touch events intercepted by this panel
     * @override
     * @name CrossWordPanel#events
     * @type {string[]} */
    events: ['click', 'keydown', 'keypress'],
    /**
     * Graphic icon for the horizontal direction button, represented as a string containing
     * an SVG file codified in base64.
     * @name CrossWordPanel#hIcon
     * @type {string} */
    hIcon: 'data:image/svg+xml;base64,' +
      'PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c3ZnIGZpbGw9IiNGRkZGRkYi' +
      'IGhlaWdodD0iMzYiIHZpZXdCb3g9IjAgMCAyNCAyNCIgd2lkdGg9IjM2IiB4bWxucz0iaHR0cDov' +
      'L3d3dy53My5vcmcvMjAwMC9zdmciPjxwYXRoIGQ9Ik0wIDBoMjR2MjRIMHoiIGZpbGw9Im5vbmUi' +
      'PjwvcGF0aD48cGF0aCBkPSJNNiAxMGMtMS4xIDAtMiAuOS0yIDJzLjkgMiAyIDIgMi0uOSAyLTIt' +
      'LjktMi0yLTJ6bTEyIDBjLTEuMSAwLTIgLjktMiAycy45IDIgMiAyIDItLjkgMi0yLS45LTItMi0y' +
      'em0tNiAwYy0xLjEgMC0yIC45LTIgMnMuOSAyIDIgMiAyLS45IDItMi0uOS0yLTItMnoiPjwvcGF0' +
      'aD48L3N2Zz4K',
    /**
     * Graphic icon for the vertical direction button, represented as a string containing
     * an SVG file codified in base64.
     * @name CrossWordPanel#vIcon
     * @type {string} */
    vIcon: 'data:image/svg+xml;base64,' +
      'PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c3ZnIGZpbGw9IiNGRkZGRkYi' +
      'IGhlaWdodD0iMzYiIHZpZXdCb3g9IjAgMCAyNCAyNCIgd2lkdGg9IjM2IiB4bWxucz0iaHR0cDov' +
      'L3d3dy53My5vcmcvMjAwMC9zdmciPjxwYXRoIGQ9Ik0wIDBoMjR2MjRIMHoiIGZpbGw9Im5vbmUi' +
      'PjwvcGF0aD48cGF0aCBkPSJNMTIgOGMxLjEgMCAyLS45IDItMnMtLjktMi0yLTItMiAuOS0yIDIg' +
      'LjkgMiAyIDJ6bTAgMmMtMS4xIDAtMiAuOS0yIDJzLjkgMiAyIDIgMi0uOSAyLTItLjktMi0yLTJ6' +
      'bTAgNmMtMS4xIDAtMiAuOS0yIDJzLjkgMiAyIDIgMi0uOSAyLTItLjktMi0yLTJ6Ij48L3BhdGg+' +
      'PC9zdmc+Cg==',
    /**
     * Sizes of the icons (currently 36 x 36 pixel)
     * @name CrossWordPanel#icoSize
     * @type {Object} */
    icoSize: { w: 36, h: 36 },
    /**
     * BoxBase with the style to be used by the direction buttons.
     * @name CrossWordPanel#icoBB
     * @type {BoxBase} */
    icoBB: new BoxBase().set('backColor', '#4285F4').set('inactiveColor', '#70A2F6').set('dontFill', true)
  })

  /**
   * Panel class associated to this type of activity: {@link CrossWordPanel}
   * @type {class} */
  CrossWord.Panel = CrossWordPanel

  // Register class in Activity.prototype
  Activity.CLASSES['@textGrid.CrossWord'] = CrossWord

  return CrossWord
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/activities/textGrid/WordSearch.js":
/*!***********************************************!*\
  !*** ./src/activities/textGrid/WordSearch.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : activities/textGrid/WordSearch.js
 *  Created : 15/06/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ../../Activity */ "./src/Activity.js"),
  __webpack_require__(/*! ../../boxes/ActiveBoxGrid */ "./src/boxes/ActiveBoxGrid.js"),
  __webpack_require__(/*! ../../boxes/BoxBag */ "./src/boxes/BoxBag.js"),
  __webpack_require__(/*! ../../boxes/BoxConnector */ "./src/boxes/BoxConnector.js"),
  __webpack_require__(/*! ../../AWT */ "./src/AWT.js"),
  __webpack_require__(/*! ../../boxes/TextGrid */ "./src/boxes/TextGrid.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, Activity, ActiveBoxGrid, BoxBag, BoxConnector, AWT, TextGrid) {

  /**
   * This class of {@link Activity} shows a {@link TextGrid} with some words placed in horizontal,
   * vertical or diagonal direction, written right or upside down. The remaining grid cells will be
   * filled with randomly selected characters.
   *
   * The aim of the activity is to find all the words hidden on the text grid.
   * The content of an optional {@link ActiveBagContent} can be revealed on an auxiliary panel as
   * words are found.
   * @exports WordSearch
   * @class
   * @extends Activity
   */
  class WordSearch extends Activity {
    /**
     * WordSearch constructor
     * @param {JClicProject} project - The JClic project to which this activity belongs
     */
    constructor(project) {
      super(project)
    }

    /**
     * Retrieves the minimum number of actions needed to solve this activity
     * @override
     * @returns {number}
     */
    getMinNumActions() {
      return this.clues.length
    }

    /**
     * This type of activity permits the user to display the solution
     * @override
     * @returns {boolean}
     */
    helpSolutionAllowed() {
      return true
    }

    /**
     * This kind of activity uses random numbers to generate the filling characters
     * @override
     * @returns {boolean}
     */
    hasRandom() {
      return true
    }
  }

  Object.assign(WordSearch.prototype, {
    /**
     * String array containing all the valid clues.
     * @name WordSearch#clues
     * @type {string[]} */
    clues: null,
    /**
     * Array of integers containing __for each clue__ the index
     * of an associated {@link ActiveBoxContent} located on the secondary {@link ActiveBoxBag}.
     * This associated element is optional.
     * @name WordSearch#clueItems
     * @type {number[]} */
    clueItems: null,
    /**
     * Object that indicates if box grids A and B must be scrambled.
     * (defaults to _false_ in WordSearch activities)
     * @name WordSearch#scramble
     * @type {Activity~scrambleType} */
    scramble: { primary: false, secondary: false },
  })

  /**
   * The {@link ActivityPanel} where {@link WordSearch} activities are played.
   * @class
   * @extends ActivityPanel
   */
  class WordSearchPanel extends Activity.Panel {
    /**
     * WordSearchPanel constructor
     * @param {Activity} act - The {@link Activity} to which this Panel belongs
     * @param {JClicPlayer} ps - Any object implementing the methods defined in the
     * [PlayStation](http://projectestac.github.io/jclic/apidoc/edu/xtec/jclic/PlayStation.html)
     * Java interface.
     * @param {external:jQuery=} $div - The jQuery DOM element where this Panel will deploy
     */
    constructor(act, ps, $div) {
      super(act, ps, $div)
      this.resolvedClues = []
    }

    /**
     * Performs miscellaneous cleaning operations
     * @override
     */
    clear() {
      if (this.grid) {
        this.grid.end()
        this.grid = null
      }
      if (this.bgAlt) {
        this.bgAlt.end()
        this.bgAlt = null
      }
    }

    /**
     * Prepares the visual components of the activity
     * @override
     */
    buildVisualComponents() {
      if (this.firstRun)
        super.buildVisualComponents()
      this.clear()

      const
        tgc = this.act.tgc,
        abcAlt = this.act.abc['secondary']
      if (abcAlt) {
        if (abcAlt.imgName) {
          abcAlt.setImgContent(this.act.project.mediaBag, null, false)
          if (abcAlt.animatedGifFile && !abcAlt.shaper.rectangularShapes && !this.act.scramble['secondary'])
            this.$animatedBg = $('<span/>').css({
              'background-image': `url(${abcAlt.animatedGifFile})`,
              'background-position': 'center',
              'background-repeat': 'no-repeat',
              position: 'absolute'
            }).appendTo(this.$div)
        }

        if (this.act.acp !== null)
          this.act.acp.generateContent(0, 0, [abcAlt], false)
      }

      if (tgc) {
        this.grid = TextGrid.createEmptyGrid(null, this, this.act.margin, this.act.margin, tgc, false)
        if (abcAlt) {
          this.bgAlt = ActiveBoxGrid.createEmptyGrid(null, this, this.act.margin, this.act.margin, abcAlt)
          if (this.$animatedBg && this.bgAlt.backgroundBox)
            this.bgAlt.backgroundBox['tmpTrans'] = true
        }
        this.grid.setVisible(true)
      }
    }

    /**
     * Basic initialization procedure
     * @override
     */
    initActivity() {
      super.initActivity()
      if (!this.firstRun)
        this.buildVisualComponents()
      else
        this.firstRun = false

      if (this.grid) {
        this.grid.setChars(this.act.tgc.text)
        this.grid.randomize()
        this.grid.setAllCellsAttribute(TextGrid.flags.INVERTED, false)

        this.resolvedClues = Array(this.act.clueItems.length).fill(false)

        if (this.bgAlt) {
          this.bgAlt.setContent(this.act.abc['secondary'])
          if (this.$animatedBg)
            this.bgAlt.clearAllBoxes()
          if (this.act.scramble['secondary'])
            this.shuffle([this.bgAlt], true, true)
          this.bgAlt.setVisible(this.$animatedBg !== null)
        }

        this.setAndPlayMsg('initial', 'start')
        this.invalidate().update()
        this.playing = true
      }
    }

    /**
     * Updates the graphic content of this panel.
     * This method will be called from {@link AWT.Container#update} when needed.
     * @override
     * @param {AWT.Rectangle} dirtyRegion - Specifies the area to be updated. When `null`,
     * it's the whole panel.
     */
    updateContent(dirtyRegion) {
      super.updateContent(dirtyRegion)
      if (this.grid && this.$canvas) {
        const
          canvas = this.$canvas.get(-1),
          ctx = canvas.getContext('2d')
        if (!dirtyRegion)
          dirtyRegion = new AWT.Rectangle(0, 0, canvas.width, canvas.height)
        ctx.clearRect(dirtyRegion.pos.x, dirtyRegion.pos.y, dirtyRegion.dim.width, dirtyRegion.dim.height)
        this.grid.update(ctx, dirtyRegion)
        if (this.bgAlt)
          this.bgAlt.update(ctx, dirtyRegion)
      }
      return this
    }

    /**
     * Sets the real dimension of this panel.
     * @override
     * @param {AWT.Dimension} preferredMaxSize - The maximum surface available for the activity panel
     * @returns {AWT.Dimension}
     */
    setDimension(preferredMaxSize) {
      if (!this.grid || this.getBounds().equals(preferredMaxSize))
        return preferredMaxSize
      if (this.bgAlt)
        return BoxBag.layoutDouble(preferredMaxSize, this.grid, this.bgAlt, this.act.boxGridPos, this.act.margin)
      else
        return BoxBag.layoutSingle(preferredMaxSize, this.grid, this.act.margin)
    }

    /**
     * Sets the size and position of this activity panel
     * @override
     * @param {AWT.Rectangle} rect
     */
    setBounds(rect) {
      if (this.$canvas)
        this.$canvas.remove()
      super.setBounds(rect)
      if (this.grid) {
        // Create the main canvas
        this.$canvas = $(`<canvas width="${rect.dim.width}" height="${rect.dim.height}"/>`).css({
          position: 'absolute',
          top: 0,
          left: 0
        })
        // Resize animated gif background
        if (this.$animatedBg && this.bgAlt) {
          const bgRect = this.bgAlt.getBounds()
          this.$animatedBg.css({
            left: bgRect.pos.x,
            top: bgRect.pos.y,
            width: `${bgRect.dim.width}px`,
            height: `${bgRect.dim.height}px`,
            'background-size': `${bgRect.dim.width}px ${bgRect.dim.height}px`
          })
        }
        this.$div.append(this.$canvas)

        // Create a [BoxConnector](BoxConnector.html) and attach it to the canvas context
        this.bc = new BoxConnector(this, this.$canvas.get(-1).getContext('2d'))

        // Repaint all
        this.invalidate().update()
      }
    }

    /**
     * Calculates the current score
     * @returns {number}
     */
    getCurrentScore() {
      return this.resolvedClues.reduce((n, resolved) => resolved ? ++n : n, 0)
    }

    /**
     * Main handler used to process mouse, touch, keyboard and edit events
     * @override
     * @param {HTMLEvent} event - The HTML event to be processed
     * @returns {boolean=} - When this event handler returns `false`, jQuery will stop its
     * propagation through the DOM tree. See: {@link http://api.jquery.com/on}
     */
    processEvent(event) {
      if (this.bc && this.playing) {
        //
        // The [AWT.Point](AWT.html#Point) where the mouse or touch event has been originated
        let p = null
        //
        // _touchend_ event don't provide pageX nor pageY information
        if (event.type === 'touchend')
          p = this.bc.active ? this.bc.dest.clone() : new AWT.Point()
        else {
          // Touch events can have more than one touch, so `pageX` must be obtained from `touches[0]`
          const
            x = event.originalEvent.touches ? event.originalEvent.touches[0].pageX : event.pageX,
            y = event.originalEvent.touches ? event.originalEvent.touches[0].pageY : event.pageY
          p = new AWT.Point(x - this.$div.offset().left, y - this.$div.offset().top)
        }

        // Flag for tracking `mouseup` events
        let up = false
        // Flag for assuring that only one media plays per event (avoid event sounds overlapping
        // cell's media sounds)
        let m = false
        // Array to be filled with actions to be executed at the end of event processing
        const delayedActions = []

        switch (event.type) {
          case 'touchcancel':
            // Canvel movement
            if (this.bc.active)
              this.bc.end()
            break

          case 'mouseup':
            // Don't consider drag moves below 3 pixels. Can be a "trembling click"
            if (this.bc.active && p.distanceTo(this.bc.origin) <= 3)
              break

            up = true
          /* falls through */
          case 'touchend':
          case 'touchstart':
          case 'mousedown':
            if (!this.bc.active) {
              // A new word selection starts
              //
              // Selection of words can never start with a `mouseup` event
              if (up)
                break

              this.ps.stopMedia(1)
              if (this.grid.contains(p)) {
                this.playEvent('click')
                this.bc.begin(p)
              }
            } else {
              this.ps.stopMedia(1)
              // Word selection completed
              //
              // Find the active boxes behind `bc.origin` and `p`
              const
                pt1 = this.grid.getLogicalCoords(this.bc.origin),
                pt2 = this.grid.getLogicalCoords(this.bc.dest)
              this.bc.end()
              const s = this.grid.getStringBetween(pt1.x, pt1.y, pt2.x, pt2.y)
              if (s !== null && s.length > 0) {
                let ok = false, c = 0
                for (; c < this.act.clues.length; c++) {
                  if (s === this.act.clues[c]) {
                    ok = true
                    break
                  }
                }
                const repeated = this.resolvedClues[c]
                if (ok && !repeated) {
                  this.resolvedClues[c] = true
                  this.grid.setAttributeBetween(pt1.x, pt1.y, pt2.x, pt2.y, TextGrid.flags.INVERTED, true)
                  if (this.bgAlt !== null) {
                    const k = this.act.clueItems[c]
                    if (k >= 0 && k < this.bgAlt.getNumCells()) {
                      const bx = this.bgAlt.getActiveBox(this.act.clueItems[c])
                      if (bx) {
                        bx.setVisible(this.$animatedBg === null)
                        m = bx.playMedia(this.ps, delayedActions)
                      }
                    }
                  }
                }
                if (!repeated) {
                  const r = this.getCurrentScore()
                  this.ps.reportNewAction(this.act, 'ACTION_SELECT', s, null, ok, r)
                  if (r === this.act.clues.length)
                    this.finishActivity(true)
                  else if (!m)
                    this.playEvent(ok ? 'actionOK' : 'actionError')
                  this.invalidate()
                } else if (!ok && !m)
                  this.playEvent('actionError')
              } else
                this.playEvent('actionError')

              this.update()
            }
            break

          case 'mousemove':
          case 'touchmove':
            this.bc.moveTo(p)
            break
        }
        delayedActions.forEach(action => action())
        event.preventDefault()
      }
    }
  }

  Object.assign(WordSearchPanel.prototype, {
    /**
     * The {@link TextGrid} object of this ActivityPanel
     * @name WordSearchPanel#grid
     * @type {TextGrid} */
    grid: null,
    /**
     * An optional {@link ActiveBoxBag} used to display information associated with the hidden words.
     * @name WordSearchPanel#bgAlt
     * @type {ActiveBoxBag} */
    bgAlt: null,
    /**
     * An array of boolean values indicating which clues have been found
     * @name WordSearchPanel#resolvedClues
     * @type {boolean[]} */
    resolvedClues: null,
    /**
     * The box connector object
     * @name WordSearchPanel#bc
     * @type {BoxConnector} */
    bc: null,
    /**
     * Mouse and touch events intercepted by this panel
     * @override
     * @name WordSearchPanel#events
     * @type {string[]} */
    events: ['mousedown', 'mouseup', 'mousemove', 'touchstart', 'touchend', 'touchmove', 'touchcancel'],
  })

  /**
   * Panel class associated to this type of activity: {@link WordSearchPanel}
   * @type {class} */
  WordSearch.Panel = WordSearchPanel

  // Register class in Activity.prototype
  Activity.CLASSES['@textGrid.WordSearch'] = WordSearch

  return WordSearch
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/automation/AutoContentProvider.js":
/*!***********************************************!*\
  !*** ./src/automation/AutoContentProvider.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : automation/AutoContentProvider.js
 *  Created : 13/04/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! ../Utils */ "./src/Utils.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Utils) {

  /**
   * This abstract class is the base for classes that create on-time automatic content for JClic
   * activities, usually using random parameters to assure different content in each session.
   *
   * Activities with `AutoContentProvider` objects rely on them to build new content on every start.
   * @exports AutoContentProvider
   * @class
   */
  class AutoContentProvider {
    /**
     * AutoContentProvider constructor
     * @param {JClicProject} project - The JClic project to which this content provider belongs.
     */
    constructor(project) {
      this.project = project
    }

    /**
     * Dynamic constructor that returns a specific type of AutoContentProvider based on the `class`
     * attribute declared on an $xml element.
     * It should be called only from {@link Activity#setproperties}
     * @param {external.jQuery} $xml - The XML element to parse
     * @param {JClicProject} project - The JClic project to which this object will be related
     * @returns {AutoContentProvider}
     */
    static getProvider($xml, project) {
      let automation = null
      if ($xml && project) {
        const
          className = ($xml.attr('class') || '').replace(/^edu\.xtec\.jclic\.automation\./, '@'),
          cl = AutoContentProvider.CLASSES[className]
        if (cl) {
          automation = new cl(project)
          automation.setProperties($xml)
        } else
          Utils.log('error', `Unknown AutoContentProvider class: ${className}`)
      }
      return automation
    }

    /**
     * Loads the object settings from a specific jQuery XML element
     * @param {external:jQuery} $xml - The XML element to parse
     */
    setProperties($xml) {
      this.className = ($xml.attr('class') || '').replace(/^edu\.xtec\.jclic\.automation\./, '@')
      return this
    }

    /**
     * Initializes the content provider
     */
    init() {
      // To be implemented in real content providers
    }

    /**
     * Builds an {@link AutoContentProvider.ActiveBagContentKit} and generates the automatized content.
     * @param {number} nRows - Number of rows to be processed
     * @param {number} nCols - Number of columns to be processed
     * @param {ActiveBagContent[]} content - Array with one or more containers of {@link ActiveBoxContent}
     * objects to be filled with new content.
     * @param {bolean} useIds - When `true`, the `id` field of {@link ActiveBoxContent} objects is significant
     * @returns {boolean} - `true` if the process was OK. `false` otherwise.
     */
    generateContent(nRows, nCols, content, useIds) {
      return this.process(new AutoContentProvider.ActiveBagContentKit(nRows, nCols, content, useIds))
    }

    /**
     * Generates the automatized content
     * @param {AutoContentProvider.ActiveBagContentKit} _kit - The objects to be filled with content
     * @returns {boolean} - `true` if the process was OK. `false` otherwise.
     */
    process(_kit) {
      // To be implemented in subclasses
      return false
    }
  }

  Object.assign(AutoContentProvider.prototype, {
    /**
     * The JClic project to which AutoContentProvider belongs
     * @name AutoContentProvider#project
     * @type {JClicProject} */
    project: null,
    /**
     * This AutoContentProvider manages numeric expressions, so text literals should be
     * converted to numbers for comparisions, taking in account the
     * number format of the current locale (dot or comma as decimal separator)
     * @name AutoContentProvider#numericContent
     * @type {boolean} */
    numericContent: false,
  })

  /**
   * Utility class used to encapsulate multiple sets of box contents
   * @class
   * @param {number} nRows - Number of rows to be processed
   * @param {number} nCols - Number of columns to be processed
   * @param {ActiveBagContent[]} content - Array with one or more containers of {@link ActiveBoxContent}
   * objects to be filled with new content.
   * @param {bolean} useIds - `true` when the `id` field of {@link ActiveBoxContent} objects is significant.
   */
  AutoContentProvider.ActiveBagContentKit = class {
    constructor(nRows, nCols, content, useIds) {
      this.nRows = nRows
      this.nCols = nCols
      this.content = content
      this.useIds = useIds
    }
  }

  /**
   * Contains the current list of classes derived from AutoContentProvider.
   * This object should be updated by real automation classes at declaration time.
   * Currently, only two types of "AutoContentProvider" are defined: {@link Arith} and TagReplace.
   * @type {object} */
  AutoContentProvider.CLASSES = {
    // TODO: Implement TagReplace
    '@tagreplace.TagReplace': AutoContentProvider
  }

  return AutoContentProvider
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/automation/arith/Arith.js":
/*!***************************************!*\
  !*** ./src/automation/arith/Arith.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : automation/arith/Arith.js
 *  Created : 28/05/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define, Intl */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ../AutoContentProvider */ "./src/automation/AutoContentProvider.js"),
  __webpack_require__(/*! ../../Utils */ "./src/Utils.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, AutoContentProvider, Utils) {

  //
  // Miscellaneous constants used by Arith:
  const
    NMAXLOOPS = 60,
    OPSTR = ['+', '-', String.fromCharCode(215), ':'],
    RES = -12345,
    // Use comma as a decimal separator, based on current locale settings
    // See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl
    DOTASCOMMA = Intl && Intl.NumberFormat().format(1.1).indexOf(',') > 0

  /**
   * Arith provides randomly generated mental arithmetics operations, ready to be used in JClic activities.
   *
   * The operations can be additions, subtractions, multiplications or divides. The unknown of these
   * operations can be the result of the operation (`A op B = ?`), any of the two operators
   * (`A op ? = C` or `? op B = C`) or also the operator itself (`A ? B = C`).
   * @exports Arith
   * @class
   * @extends AutoContentProvider
   */
  class Arith extends AutoContentProvider {
    /**
     * Arith constructor
     * @param {JClicProject} project - The JClic project to which this provider is related
     */
    constructor(project) {
      super(project)
      this.numericContent = true;
      this.opA = new Arith.Operator()
      this.opB = new Arith.Operator()
    }

    /**
     * Formats the number with a fixed number of decimals, optionally filling the result with leading
     * zeroes to have a fixed number of digits.
     * @param {number} val - The value to format
     * @param {number} dec - Number of decimals
     * @param {number} pre - Minimal number of digits before dot.
     * @returns {String}
     */
    static DecFormat(val, dec, pre) {
      let result = val.toFixed(dec)
      if (pre) {
        let n = result.indexOf('.')
        if (n < 0)
          n = result.length
        for (; n < pre; n++)
          result = `0${result}`
      }
      return result
    }

    /**
     * Loads the object settings from a specific JQuery XML element
     * @override
     * @param {external:jQuery} $xml - The XML element to parse
     */
    setProperties($xml) {
      $xml.children().each((_n, child) => {
        const $node = $(child)
        let xNum = ''
        switch (child.nodeName) {
          case 'operand':
            switch ($node.attr('id')) {
              case 'A':
                this.opA.setProperties($node)
                break
              case 'B':
                this.opB.setProperties($node)
                break
            }
            break
          case 'operations':
            this.use_add = Utils.getBoolean($node.attr('plus'))
            this.use_subst = Utils.getBoolean($node.attr('minus'))
            this.use_mult = Utils.getBoolean($node.attr('multiply'))
            this.use_div = Utils.getBoolean($node.attr('divide'))
            break
          case 'unknown':
            this.exp_abx = Utils.getBoolean($node.attr('result'))
            this.exp_xbc = Utils.getBoolean($node.attr('first'))
            this.exp_axc = Utils.getBoolean($node.attr('last'))
            this.exp_axbc = Utils.getBoolean($node.attr('operand'))
            this.exp_caxb = Utils.getBoolean($node.attr('inverse'))
            break
          case 'result':
            xNum = $node.attr('from')
            this.resultLimInf = Utils.getNumber(xNum === 'x' ? 0 : xNum, this.resultLimInf)
            xNum = $node.attr('to')
            this.resultLimSup = Utils.getNumber(xNum === 'x' ? 0 : xNum, this.resultLimSup)
            this.resultCarry = Utils.getBoolean($node.attr('notCarry'), this.resultCarry)
            this.resultNoDup = !Utils.getBoolean($node.attr('duplicates'), !this.resultNoDup)
            let s = $node.attr('order')
            this.resultOrder = s === 'ascending' ? 'SORTASC' : s === 'descending' ? 'SORTDESC' : 'NOSORT'
            s = $node.attr('condition')
            this.opCond = s === 'firstBig' ? 'AGB' : s === 'lastBig' ? 'BGA' : 'INDIF'
            break
        }
      })
      return this
    }

    /**
     * Fills the `n` parameter (an {@link Arith.Num}) with a value in accordance with the
     * specifications of `op` (an {@link Arith.Operand}), between two limits.
     * @param {Arith.Num} n - The number
     * @param {Arith.Operator} op - The operator
     * @param {number} limInf2 - Lower limit
     * @param {number} limSup2 - Upper limit
     * @returns {boolean} - `true` if all was OK
     */
    genNum(n, op, limInf2, limSup2) {
      let solved = false
      n.c = op.numDec
      const exp = n.c === 0 ? 1 : n.c === 1 ? 10 : 100

      let ls = op.limSup
      if (limSup2 !== RES && limSup2 < ls)
        ls = limSup2
      let li = op.limInf
      if (limInf2 !== RES && limInf2 > li)
        li = limInf2

      if (op.fromList > 0) {
        n.vf = op.lst[Math.floor(Math.random() * op.fromList)]
        solved = true
      }
      if (!solved) {
        const r = Math.floor(Math.random() * 100)
        if (op.wZero && r <= 10) {
          n.vf = 0
          solved = true
        } else if (op.wOne && r > 10 && r <= 20) {
          n.vf = 1
          solved = true
        } else if (op.wMinusOne && r > 20 && r <= 30) {
          n.vf = -1
          solved = true
        }
      }
      if (!solved) {
        if (li > ls) {
          const k = li
          li = ls
          ls = k
        }
        let rang = Math.floor(ls - li + 1)
        if (rang < 0)
          rang = 1
        let v = (Math.floor(Math.random() * rang) + li) * exp
        if (exp > 1)
          v += Math.floor(Math.random() * exp)
        n.vf = v / exp
      }
      return true
    }

    /**
     * Fills the provided {@link Arith.Operator} with real values
     * @param {Arith.Operator} o - The operator to use to generate the operation
     * @returns {boolean} - `true` if all was OK
     */
    genOp(o) {
      let i, ri2, rs2, q, va, vb, bufa, bufb
      const
        ops = [],
        rlinf = this.resultLimInf,
        rlsup = this.resultLimSup

      let nops = 0
      if (this.use_add)
        ops[nops++] = 'SUM'
      if (this.use_subst)
        ops[nops++] = 'REST'
      if (this.use_mult)
        ops[nops++] = 'MULT'
      if (this.use_div)
        ops[nops++] = 'DIV'

      const op = ops[Math.floor(Math.random() * nops)]
      switch (op) {
        case 'SUM':
          for (i = 0; i < NMAXLOOPS; i++) {
            this.genNum(o.numA, this.opA, this.RES, rlsup)
            ri2 = o.numA.vf < rlinf ? rlinf - Math.floor(o.numA.vf) : this.RES
            rs2 = rlsup - Math.floor(o.numA.vf)
            switch (this.opCond) {
              case 'AGB':
                if (rs2 === this.RES || rs2 > o.numA.vf)
                  rs2 = Math.floor(o.numA.vf)
                break
              case 'BGA':
                if (ri2 === this.RES || ri2 < o.numA.vf)
                  ri2 = Math.floor(o.numA.vf)
                break
            }
            this.genNum(o.numB, this.opB, ri2, rs2)
            o.numR.vf = o.numA.vf + o.numB.vf
            if (o.numR.vf >= rlinf && o.numR.vf <= rlsup)
              break
          }
          o.numR.c = o.numA.c > o.numB.c ? o.numA.c : o.numB.c
          o.op = 0
          if (this.resultCarry && o.numA.vf > 0 && o.numB.vf > 0) {
            q = o.numR.c === 2 ? 100 : o.numR.c === 1 ? 10 : 1

            bufa = Arith.DecFormat(Math.floor(o.numA.vf * q + 0.5), 0, 10).split('')
            bufb = Arith.DecFormat(Math.floor(o.numB.vf * q + 0.5), 0, 10).split('')
            for (i = 0; i < 10; i++)
              if (bufa[i] !== '0' || bufb[i] !== '0')
                break
            for (; i < 10; i++) {
              va = parseInt(bufa[i])
              vb = parseInt(bufb[i])
              if (va + vb < 10)
                continue
              while (va + vb > 9) {
                if (va > vb)
                  va = va > 0 ? Math.floor(Math.random() * va) : 0
                else
                  vb = vb > 0 ? Math.floor(Math.random() * vb) : 0
              }
              bufa[i] = va.toFixed(0)
              bufb[i] = vb.toFixed(0)
            }

            o.numA.vf = parseInt(bufa.join('')) / q
            o.numB.vf = parseInt(bufb.join('')) / q
            // Corrected 2019/02/11: Factors should be multiplied by 'q'!
            // INCORRECT: o.numR.vf = Math.floor(o.numA.vf + o.numB.vf + 0.5) / q
            o.numR.vf = Math.floor(o.numA.vf * q + o.numB.vf * q + 0.5) / q
          }
          break

        case 'REST':
          for (i = 0; i < NMAXLOOPS; i++) {
            this.genNum(o.numA, this.opA, rlinf, this.RES)
            ri2 = o.numA.vf > rlsup ? Math.floor(o.numA.vf - rlsup) : this.RES
            rs2 = Math.floor(o.numA.vf - rlinf)
            switch (this.opCond) {
              case 'AGB':
                if (rs2 === this.RES || rs2 > o.numA.vf)
                  rs2 = Math.floor(o.numA.vf)
                break
              case 'BGA':
                if (ri2 === this.RES || ri2 < o.numA.vf)
                  ri2 = Math.floor(o.numA.vf)
                break
            }
            this.genNum(o.numB, this.opB, ri2, rs2)
            o.numR.vf = o.numA.vf - o.numB.vf
            if (o.numR.vf >= rlinf && o.numR.vf <= rlsup)
              break
          }
          o.numR.c = o.numA.c > o.numB.c ? o.numA.c : o.numB.c
          o.op = 1
          if (this.resultCarry && o.numA.vf > 0 && o.numB.vf > 0 && o.numA.vf >= o.numB.vf) {
            q = o.numR.c === 2 ? 100 : o.numR.c === 1 ? 10 : 1
            bufa = Arith.DecFormat(Math.floor(o.numA.vf * q + 0.5), 0, 10).split('')
            bufb = Arith.DecFormat(Math.floor(o.numB.vf * q + 0.5), 0, 10).split('')
            for (i = 0; i < 10; i++)
              if (bufb[i] !== '0')
                break
            for (; i < 10; i++) {
              va = parseInt(bufa[i])
              vb = parseInt(bufb[i])
              if (va >= vb)
                continue
              vb = va > 0 ? Math.floor(Math.random() * va) : 0
              bufb[i] = vb.toFixed(0)
            }

            o.numA.vf = parseInt(bufa.join('')) / q
            o.numB.vf = parseInt(bufb.join('')) / q
            // Corrected 2019/02/11: Factors should be multiplied by 'q'!
            // o.numR.vf = Math.floor(o.numA.vf - o.numB.vf + 0.5) / q
            o.numR.vf = Math.floor(o.numA.vf * q - o.numB.vf * q + 0.5) / q
          }
          break

        case 'MULT':
          for (i = 0; i < NMAXLOOPS; i++) {
            this.genNum(o.numA, this.opA, this.RES, this.RES)
            ri2 = this.opB.limInf
            rs2 = this.opB.limSup
            switch (this.opCond) {
              case 'AGB':
                if (rs2 > o.numA.vf)
                  rs2 = Math.floor(o.numA.vf)
                break
              case 'BGA':
                if (ri2 < o.numA.vf)
                  ri2 = Math.floor(o.numA.vf)
                break
            }
            this.genNum(o.numB, this.opB, ri2, rs2)
            o.numR.vf = o.numA.vf * o.numB.vf
            if (o.numR.vf >= rlinf && o.numR.vf <= rlsup)
              break
          }
          o.numR.c = o.numA.c + o.numB.c
          o.op = 2
          break

        case 'DIV':
          for (i = 0; i < NMAXLOOPS; i++) {
            this.genNum(o.numA, this.opA, this.RES, this.RES)
            ri2 = this.opB.limInf
            rs2 = this.opB.limSup
            switch (this.opCond) {
              case 'AGB':
                if (rs2 > o.numA.vf)
                  rs2 = Math.floor(o.numA.vf)
                break
              case 'BGA':
                if (ri2 < o.numA.vf)
                  ri2 = Math.floor(o.numA.vf)
                break
            }
            this.genNum(o.numB, this.opB, ri2, rs2)
            if (o.numB.vf !== 0 &&
              Math.abs(o.numA.vf) >= Math.abs(o.numB.vf) &&
              (o.numR.vf = o.numA.vf / o.numB.vf) >= rlinf &&
              o.numR.vf <= rlsup)
              break
          }
          if (o.numB.vf === 0)
            o.numB.vf = 1
          o.numR.vf = o.numA.vf / o.numB.vf
          i = o.numA.c - o.numB.c
          q = Math.pow(10, i)
          o.numA.vf *= q
          o.numR.vf *= q
          o.numR.vf = Math.floor(o.numR.vf)
          o.numA.vf = o.numR.vf * o.numB.vf
          o.numA.vf /= q
          o.numR.vf /= q
          o.numR.c = i > 0 ? i : 0
          o.op = 3
          break

        default:
          return false
      }
      return true
    }

    /**
     * Fills the provided ActiveBagContentKit with randomly generated operations
     * @override
     * @param {AutoContentProvider.ActiveBagContentKit} kit - The composite object to be filled with data.
     * @returns {boolean} - `true` if all was OK
     */
    process(kit) {
      let nRows = kit.nRows,
        nCols = kit.nCols,
        content = kit.content, //Array of ActiveBagContent
        useIds = kit.useIds,
        i, j, k,
        o, op = [], // Array of Arith.Operacio
        tipus = [],
        numTipus, tipX,
        tipInv = this.exp_caxb,
        va = '', vb = '', vc = '', operator = '',
        stra = [], strb = [], strc = [],
        nColsB = nCols, nRowsB = nRows,
        nCells = nRows * nCols,
        ass = null

      if (nRows <= 0 || nCols <= 0 ||
        content === null || content.length < 1 || content[0] === null)
        return false

      if (nCells < 2)
        return false

      numTipus = 0
      if (this.exp_abx)
        tipus[numTipus++] = 'ABX'
      if (this.exp_axc)
        tipus[numTipus++] = 'AXC'
      if (this.exp_xbc)
        tipus[numTipus++] = 'XBC'
      if (this.exp_axbc)
        tipus[numTipus++] = 'AXBC'
      if (numTipus === 0)
        return false

      for (i = 0; i < nCells; i++) {
        o = new Arith.Operacio()
        for (j = 0; j < NMAXLOOPS; j++) {
          this.genOp(o)
          if (this.resultNoDup) {
            for (k = 0; k < i; k++) {
              if (o.numR.vf === op[k].numR.vf)
                break
            }
            if (k === i)
              break
          } else
            break
        }
        op[i] = o
      }

      if (this.resultOrder !== 0) {
        for (i = nCells - 1; i > 0; i--) {
          for (j = 0; j < i; j++) {
            if (this.resultOrder === 'SORTASC' && op[j].numR.vf > op[j + 1].numR.vf ||
              this.resultOrder === 'SORTDESC' && op[j].numR.vf < op[j + 1].numR.vf) {
              // Switch values
              o = op[j]
              op[j] = op[j + 1]
              op[j + 1] = o
            }
          }
        }
      }

      for (i = 0; i < nCells; i++) {
        tipX = tipus[Math.floor(Math.random() * numTipus)]
        va = Arith.DecFormat(op[i].numA.vf, op[0].numA.c)
        vb = Arith.DecFormat(op[i].numB.vf, op[0].numB.c)
        vc = Arith.DecFormat(op[i].numR.vf, op[0].numR.c)
        operator = OPSTR[op[i].op]

        // Use the special blank space ASCII 160 (\xA0) instead of regular blank spaces

        if (tipInv)
          strc[i] = `${vc}\xA0=\xA0${va}\xA0${operator}\xA0${vb}`
        else
          strc[i] = `${va}\xA0${operator}\xA0${vb}\xA0=\xA0${vc}`

        switch (tipX) {
          case 'AXC':
            strb[i] = vb
            stra[i] = tipInv ? `${vc}\xA0=\xA0${va}\xA0${operator}\xA0?` : `${va}\xA0${operator}\xA0?\xA0=\xA0${vc}`
            break

          case 'XBC':
            strb[i] = va
            stra[i] = tipInv ? `${vc}\xA0=\xA0?\xA0${operator}\xA0${vb}` : `?\xA0${operator}\xA0${vb}\xA0=\xA0${vc}`
            break

          case 'AXBC':
            strb[i] = operator
            stra[i] = tipInv ? `${vc}\xA0=\xA0${va}\xA0?\xA0${vb}` : `${va}\xA0?\xA0${vb}\xA0=\xA0${vc}`
            break

          default:
            strb[i] = vc
            stra[i] = tipInv ? `?\xA0=\xA0${va}\xA0${operator}\xA0${vb}` : `${va}\xA0${operator}\xA0${vb}\xA0=`
            break
        }
      }

      if (useIds) {
        ass = []
        let strbx = []
        k = 0
        for (i = 0; i < nCells; i++) {
          for (j = 0; j < k; j++)
            if (strb[i] === strbx[j])
              break
          if (j === k) {
            strbx[k] = strb[i]
            ass[i] = k
            k++
          } else
            ass[i] = j
        }

        strb = []
        for (i = 0; i < k; i++)
          strb[i] = strbx[i]

        if (nRowsB * nColsB !== k) {
          let distH = false
          switch (k) {
            case 6:
              nRowsB = distH ? 2 : 3
              nColsB = distH ? 3 : 2
              break

            case 8:
              nRowsB = distH ? 2 : 4
              nColsB = distH ? 4 : 2
              break

            case 9:
              nRowsB = 3
              nColsB = 3
              break

            case 10:
              nRowsB = distH ? 2 : 5
              nColsB = distH ? 5 : 2
              break

            case 12:
              nRowsB = distH ? 3 : 4
              nColsB = distH ? 4 : 3
              break

            case 14:
              nRowsB = distH ? 2 : 7
              nColsB = distH ? 7 : 2
              break

            case 15:
              nRowsB = distH ? 3 : 5
              nColsB = distH ? 3 : 5
              break

            case 16:
              nRowsB = 4
              nColsB = 4
              break

            case 18:
              nRowsB = distH ? 6 : 3
              nColsB = distH ? 3 : 6
              break

            case 20:
              nRowsB = distH ? 4 : 5
              nColsB = distH ? 5 : 4
              break

            default:
              nRowsB = distH ? 1 : k
              nColsB = distH ? k : 1
              break
          }
        }
      }

      // Added 2019/02/11
      // Use comma instead of dot for decimal separator, accordingly to current locale
      if (DOTASCOMMA) {
        function replaceDot(s) { return s.replace(/\./g, ',') }
        stra = stra.map(replaceDot)
        strb = strb.map(replaceDot)
        strc = strc.map(replaceDot)
      }

      content[0].setTextContent(stra, nCols, nRows)
      if (ass !== null)
        content[0].setIds(ass)
      if (content.length > 1 && content[1] !== null) {
        content[1].setTextContent(strb, nColsB, nRowsB)
        content[1].getShaper().reset(nColsB, nRowsB)
      }
      if (content.length > 2 && content[2] !== null)
        content[2].setTextContent(strc, nCols, nRows)

      return true
    }
  }

  Object.assign(Arith.prototype, {
    //
    // Operations use two operators:
    /**
     * First operator
     * @name Arith#opA
     * @type {Arith.Operator} */
    opA: null,
    /**
     * Second operator
     * @name Arith#opB
     * @type {Arith.Operator} */
    opB: null,
    /**
     * Allow additions
     * @name Arith#use_add
     * @type {boolean} */
    use_add: true,
    /**
     * Allow subtractions
     * @name Arith#use_subst
     * @type {boolean} */
    use_subst: false,
    /**
     * Allow multiplications
     * @name Arith#use_mult
     * @type {boolean} */
    use_mult: false,
    /**
     * Allow divides
     * @name Arith#use_div
     * @type {boolean} */
    use_div: false,
    /**
     * Allow expressions of type `A op B = X`
     * @name Arith#exp_abx
     * @type {boolean} */
    exp_abx: true,
    /**
     * Allow expressions of type `A op X = C`
     * @name Arith#exp_axc
     * @type {boolean} */
    exp_axc: false,
    /**
     * Allow expressions of type `X op B = C`
     * @name Arith#exp_xbc
     * @type {boolean} */
    exp_xbc: false,
    /**
     * Allow expressions of type `A x B = C`
     * @name Arith#exp_axbc
     * @type {boolean} */
    exp_axbc: false,
    /**
     * Allow inverse expressions, like `C = A op B`
     * @name Arith#exp_caxb
     * @type {boolean} */
    exp_caxb: false,
    /**
     * Lower limit of the result
     * @name Arith#resultLimInf
     * @type {number} */
    resultLimInf: 0,
    /**
     * Upper limit of the result
     * @name Arith#resultLimSup
     * @type {number} */
    resultLimSup: 9999,
    /**
     * Allow carry operations
     * @see {@link https://en.wikipedia.org/wiki/Carry_(arithmetic)}
     * @name Arith#resultCarry
     * @type {boolean} */
    resultCarry: false,
    /**
     * Avoid operations with the same result
     * @name Arith#resultNoDup
     * @type {boolean} */
    resultNoDup: false,
    /**
     * Type of sorting of results. Possible values are: 'NOSORT', 'SORTASC' and 'SORTDESC'
     * @name Arith#resultOrder
     * @type {string} */
    resultOrder: 'NOSORT',
    /**
     * Sorting of the operands in commutative operations. Possible values are: 'AGB' (_A greater than B_),
     * 'BGA' (_B greater tan A_) and 'INDIF' (default)
     * @name Arith#opCond
     * @type {string} */
    opCond: 'INDIF',
  })

  /**
   * Operator is an Utility class used by Arith to encapsulate the properties and methods related
   * to the members of the operations.
   * @class
   */
  Arith.Operator = class {
    constructor() {
      this.limInf = 13
      this.limSup = 17
      this.lst = []
    }

    /**
     * Loads Arith.Operator settings from a specific JQuery XML element
     * @param {external:jQuery} $xml - The XML element to parse
     */
    setProperties($xml) {
      // Read attributes
      Utils.attrForEach($xml.get(0).attributes, (name, val) => {
        switch (name) {
          case 'decimals':
            this.numDec = Number(val)
            break

          case 'values':
            const values = val.split(' ')
            for (let i = 0; i < values.length; i++)
              this.lst[i] = Number(values[i])
            this.fromList = this.lst.length
            break

          case 'from':
            this.limInf = Number(val === 'x' ? 0 : val)
            break

          case 'to':
            this.limSup = Number(val === 'x' ? 0 : val)
            break
        }

        $xml.children().each((_n, child) => {
          const $node = $(child)
          switch (child.nodeName) {
            case 'include':
              this.wZero = Utils.getBoolean($node.attr('zero'))
              this.wOne = Utils.getBoolean($node.attr('one'))
              this.wMinusOne = Utils.getBoolean($node.attr('minusOne'))
              break
          }
        })
      })
      return this
    }
  }

  Object.assign(Arith.Operator.prototype, {
    /**
     * Lower limit
     * @name Arith.Operator#limInf
     * @type {number} */
    limInf: 0,
    /**
     * Upper limit
     * @name Arith.Operator#limSup
     * @type {number} */
    limSup: 10,
    /**
     * Number of decimal places
     * @name Arith.Operator#numDec
     * @type {number} */
    numDec: 0,
    /**
     * Including 0
     * @name Arith.Operator#wZero
     * @type {boolean} */
    wZero: false,
    /**
     * Including 1
     * @name Arith.Operator#wOne
     * @type {boolean} */
    wOne: false,
    /**
     * Including -1
     * @name Arith.Operator#wMinusOne
     * @type {boolean} */
    wMinusOne: false,
    /**
     * Take values from list. This member stores the list length.
     * @name Arith.Operator#fromList
     * @type {number} */
    fromList: 0,
    /**
     * The list of possible values
     * @name Arith.Operator#lst
     * @type {number[]} */
    lst: [],
  })

  Arith.Num = class {
    constructor() {
      this.vf = 0.0 // The number value
      this.c = 0 // Number of decimals to be used when representing the number
    }

    format() {
      return Arith.DecFormat(this.vf, this.c)
    }
  }

  Arith.Operacio = class {
    constructor() {
      this.numA = new Arith.Num()
      this.numB = new Arith.Num()
      this.numR = new Arith.Num()
      this.op = 0
    }
  }

  // Register class in AutoContentProvider.CLASSES
  AutoContentProvider.CLASSES['@arith.Arith'] = Arith

  return Arith
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/bags/ActivitySequence.js":
/*!**************************************!*\
  !*** ./src/bags/ActivitySequence.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : bags/ActivitySequence.js
 *  Created : 05/04/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ./JumpInfo */ "./src/bags/JumpInfo.js"),
  __webpack_require__(/*! ./ActivitySequenceElement */ "./src/bags/ActivitySequenceElement.js"),
  __webpack_require__(/*! ./ActivitySequenceJump */ "./src/bags/ActivitySequenceJump.js"),
  __webpack_require__(/*! ../Utils */ "./src/Utils.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, JumpInfo, ActivitySequenceElement, ActivitySequenceJump, Utils) {

  /**
   * This class stores the definition of the sequence to follow to show the activities of a
   * {@link JClicProject}. The sequence are formed by an ordered list of objects of type
   * {@link ActivitySequenceElement}.
   * It stores also a transient pointer to the current sequence element.
   * @exports ActivitySequence
   * @class
   */
  class ActivitySequence {
    /**
     * ActivitySequence constructor
     * @param {JClicProject} project - The JClic project to which this ActivitySequence belongs
     */
    constructor(project) {
      this.project = project;
      this.elements = [];
    }

    /**
     * Loads the object settings from a specific JQuery XML element
     * @param {external:jQuery} $xml - The XML element to parse
     */
    setProperties($xml) {
      $xml.children('item').each((_i, data) => this.elements.push(new ActivitySequenceElement().setProperties($(data))))
      return this
    }

    /**
     * Returns the index of the specified element in the sequence.
     * @param {ActivitySequenceElement} ase - The element to search.
     * @returns {number} - The requested index, or `null` if not found.
     */
    getElementIndex(ase) {
      return ase === null ? -1 : this.elements.indexOf(ase)
    }

    /**
     * Returns the nth element of the sequence.
     * @param {number} n - Index of the requested element
     * @param {boolean} updateCurrentAct - when `true`, the `currentAct` index will be updated.
     * @returns {ActivitySequenceElement} - The requested element, or `null` if out of range.
     */
    getElement(n, updateCurrentAct) {
      let result = null
      if (n >= 0 && n < this.elements.length) {
        result = this.elements[n]
        if (updateCurrentAct)
          this.currentAct = n
      }
      return result
    }

    /**
     * Search into the sequence for a element with the provided tag
     * @param {string} tag - The tag to search
     * @param {boolean} updateCurrentAct - when `true`, the `currentAct` index will be updated.
     * @returns {ActivitySequenceElement} - The requested element, or `null` if not found.
     */
    getElementByTag(tag, updateCurrentAct) {
      let
        result = null,
        resultIndex = -1
      if (tag) {
        tag = Utils.nSlash(tag)
        this.elements.some((el, index) => {
          if (el.tag === tag) {
            result = el
            resultIndex = index
          }
          return resultIndex !== -1
        })
        if (resultIndex !== -1 && updateCurrentAct)
          this.currentAct = resultIndex
      }
      return result
    }

    /**
     * Gets the sequence element pointed by the `currentAct` member.
     * @returns {ActivitySequenceElement} - The current sequence element, or `null` if not set.
     */
    getCurrentAct() {
      return this.getElement(this.currentAct, false)
    }

    /**
     * Checks if it's possible to go forward from the current position in the sequence.
     * @param {boolean} hasReturn - Indicates whether the history of jumps done since the beginning
     * of the JClic session is empty or not. When not empty, a `RETURN` action is still possible.
     * @returns {boolean} - `true` when the user is allowed to go ahead to a next activity,
     * `false` otherwise. */
    hasNextAct(hasReturn) {
      let result = false
      const ase = this.getCurrentAct()
      if (ase) {
        if (ase.fwdJump === null)
          result = true
        else
          switch (ase.fwdJump.action) {
            case 'STOP':
              break
            case 'RETURN':
              result = hasReturn
              break
            default:
              result = true
          }
      }
      return result
    }

    /**
     * Checks if it's possible to go back from the current position in the sequence.
     * @param {boolean} hasReturn - Indicates whether the history of jumps done since the beginning
     * of the JClic session is empty or not. When not empty, a `RETURN` action is still possible.
     * @returns {boolean} - `true` when the user is allowed to go back to a previous activity,
     * `false` otherwise. */
    hasPrevAct(hasReturn) {
      let result = false
      const ase = this.getCurrentAct()
      if (ase) {
        if (ase.backJump === null)
          result = true
        else
          switch (ase.backJump.action) {
            case 'STOP':
              break
            case 'RETURN':
              result = hasReturn
              break
            default:
              result = true
          }
      }
      return result
    }

    /**
     * Gets the current state for the 'next' and 'prev' buttons.
     * @returns {string} - One of the possible values of {@link ActivitySequenceElement#navButtons},
     * thus: `none`, `fwd`, `back` or `both`
     */
    getNavButtonsFlag() {
      let flag = 'none'
      const ase = this.getCurrentAct()
      if (ase)
        flag = ase.navButtons
      return flag
    }

    /**
     * Computes the jump to perform from the current position on the sequence
     * @param {boolean} back - When `true`, the request is for the 'go back' button. Otherwise, is
     * for the 'next' one.
     * @param {Reporter} reporter - The reporting engine that will provide values about score average
     * and time spend on the activities, used only to compute conditional jumps.
     * @returns {JumpInfo} - The jump info if a valid jump is possible, `null` otherwise.
     */
    getJump(back, reporter) {
      const ase = this.getCurrentAct()
      let result = null
      if (ase) {
        const asj = back ? ase.backJump : ase.fwdJump
        if (asj === null) {
          let i = this.currentAct + (back ? -1 : 1)
          if (i >= this.elements.length || i < 0)
            i = 0
          result = new JumpInfo('JUMP', i)
        } else {
          let
            rating = -1,
            time = -1
          if (reporter !== null) {
            const seqRegInfo = reporter.getCurrentSequenceInfo()
            if (seqRegInfo !== null) {
              rating = Math.round(seqRegInfo.tScore)
              time = Math.round(seqRegInfo.tTime / 1000)
            }
          }
          result = asj.resolveJump(rating, time)
        }
      }
      return result
    }

    /**
     * Finds the nearest sequence element with a valid 'tag', looking back in the `elements` list.
     * @param {number} num - The point of the sequence from which to start looking back.
     * @returns {string} - The nearest 'tag', or `null` if not found.
     */
    getSequenceForElement(num) {
      let tag = null
      if (num >= 0 && num < this.elements.length)
        for (let i = num; tag === null && i >= 0; i--) {
          tag = this.getElement(i, false).tag
        }
      return tag
    }

    /**
     * Gets the first {@link ActivitySequenceElement} in the `elements` list pointing to the
     * specified activity name.
     * The search is always case-insensitive.
     * @param {string} activityName - The activity to search.
     * @returns {ActivitySequenceElement} The requested element or `null` if not found.
     */
    getElementByActivityName(activityName) {
      let result = null
      if (activityName !== null) {
        for (let i = 0; result === null && i < this.elements.length; i++) {
          const ase = this.getElement(i, false)
          if (ase.activityName.toLowerCase() === activityName.toLowerCase())
            result = ase
        }
      }
      return result
    }

    /**
     * Utility function to check if the current sequence element corresponds to the specified
     * activity. If negative, the `currentAct` will be accordingly set.
     * @param {string} activityName - The activity to check
     */
    checkCurrentActivity(activityName) {
      let ase = this.getCurrentAct()
      if (ase === null || ase.activityName.toUpperCase() !== activityName.toUpperCase()) {
        for (let i = 0; i < this.elements.length; i++) {
          if (this.getElement(i, false).activityName.toUpperCase() === activityName.toUpperCase()) {
            this.currentAct = i
            return false
          }
        }
        ase = new ActivitySequenceElement()
        ase.activityName = activityName
        ase.fwdJump = new ActivitySequenceJump('STOP')
        ase.backJump = new ActivitySequenceJump('STOP')
        this.elements.push(ase)
        this.currentAct = this.elements.length - 1
        return false
      }
      return true
    }
  }

  Object.assign(ActivitySequence.prototype, {
    /**
     * The ordered list of {@link ActivitySequenceElement} objects
     * @name ActivitySequence#elements
     * @type {ActivitySequenceElement[]} */
    elements: null,
    /**
     * The JClic project to which this ActivitySequence belongs.
     * @name ActivitySequence#project
     * @type {JClicProject} */
    project: null,
    /**
     * Pointer to the {@link ActivitySequenceElement} currently running (points inside
     * the `elements` array).
     * @name ActivitySequence#currentAct
     * @type {number} */
    currentAct: -1,
  })

  return ActivitySequence
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/bags/ActivitySequenceElement.js":
/*!*********************************************!*\
  !*** ./src/bags/ActivitySequenceElement.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : bags/ActivitySequenceElement.js
 *  Created : 05/04/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ./ActivitySequenceJump */ "./src/bags/ActivitySequenceJump.js"),
  __webpack_require__(/*! ../Utils */ "./src/Utils.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, ActivitySequenceJump, Utils) {

  /**
   *
   * This class is the basic component of {@link ActivitySequence} objects. It represents a specific
   * point in the project's sequence of JClic activities.
   *
   * For each point of the sequence, some options can be set:
   * - What activity must run at this point
   * - What to do or where to jump when the activity finishes
   * - The behavior of the "next" button
   * - The behavior of the  "prev" button
   *
   * Sequence points can also have a "tag", used to refer to them with a unique name.
   * @exports ActivitySequenceElement
   * @class
   */
  class ActivitySequenceElement {
    constructor() {
    }

    /**
     * Loads the object settings from a specific JQuery XML element
     * @param {external:jQuery} $xml
     */
    setProperties($xml) {

      // Iterate on all provided attributes
      Utils.attrForEach($xml.get(0).attributes, (name, val) => {
        switch (name) {
          case 'id':
            this['tag'] = Utils.nSlash(val)
            break
          case 'name':
            this['activityName'] = val
            break
          case 'description':
          // possible navButtons values are: `none`, `fwd`, `back` or `both`
          case 'navButtons':
            this[name] = val
            break
          case 'delay':
            this[name] = Number(val)
            break
        }
      })

      // Iterate on 'jump' elements to load fwdJump and/or backJump
      $xml.children('jump').each((_n, data) => {
        const jmp = new ActivitySequenceJump().setProperties($(data))
        if (jmp.id === 'forward')
          this.fwdJump = jmp
        else if (jmp.id === 'back')
          this.backJump = jmp
      })
      return this
    }
  }

  Object.assign(ActivitySequenceElement.prototype, {
    /**
     * Optional unique identifier of this element in the {@link ActivitySequence}.
     * @name ActivitySequenceElement#tag
     * @type {string} */
    tag: null,
    /**
     * Optional description of this sequence element.
     * @name ActivitySequenceElement#description
     * @type {string} */
    description: null,
    /**
     * Name of the {@link Activity} pointed by this element.
     * @name ActivitySequenceElement#activityName
     * @type {string} */
    activityName: '',
    /**
     * Jump to be processed by the 'next' button action
     * @name ActivitySequenceElement#fwdJump
     * @type {ActivitySequenceJump} */
    fwdJump: null,
    /**
     * Jump to be processed by the 'prev' button action.
     * @name ActivitySequenceElement#backJump
     * @type {ActivitySequenceJump} */
    backJump: null,
    /**
     * What buttons should be active at this point of the sequence. Valid values are:
     * - 'none'
     * - 'fwd'
     * - 'back'
     * - 'both'
     * @name ActivitySequenceElement#navButtons
     * @type {string} */
    navButtons: 'both',
    /**
     * Time delay (in seconds) before passing to the next/prev activity
     * @name ActivitySequenceElement#delay
     * @type {number} */
    delay: 0,
  })

  return ActivitySequenceElement
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/bags/ActivitySequenceJump.js":
/*!******************************************!*\
  !*** ./src/bags/ActivitySequenceJump.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : bags/ActivitySequenceJump.js
 *  Created : 05/04/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2016 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ./JumpInfo */ "./src/bags/JumpInfo.js"),
  __webpack_require__(/*! ./ConditionalJumpInfo */ "./src/bags/ConditionalJumpInfo.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, JumpInfo, ConditionalJumpInfo) {

  /**
   * This is a special case of {@link JumpInfo}, used only in {@link ActivitySequenceElement} objects.
   * Sequence elements can contain up to two ActivitySequenceJump objects: one to be processed
   * when the user clicks on the "next" button (or when the activity finishes, if in automatic mode),
   * and the other used with the "prev" button. ActivitySequenceJump objects define a default jump
   * or action to be performed, but can also have up to two {@link ConditionalJumpInfo} objects. These
   * define alternative jumps that are performed only when score or time are below or over a specific
   * threshold.
   * @exports ActivitySequenceJump
   * @class
   * @extends JumpInfo
   */
  class ActivitySequenceJump extends JumpInfo {
    /**
     * ActivitySequenceJump constructor
     * @param {string} action - Must be one of the described actions.
     * @param {(number|string)=} sq - Can be the tag of the sequence element to jump to, or its
     * cardinal number in the list.
     */
    constructor(action, sq) {
      super(action, sq)
    }

    /**
     * Loads the object settings from a specific JQuery XML element.
     * @param {external:jQuery} $xml - The XML element to parse
     */
    setProperties($xml) {
      super.setProperties($xml)

      // Read conditional jumps
      $xml.children('jump').each((_n, child) => {
        const condJmp = new ConditionalJumpInfo().setProperties($(child))
        if (condJmp.id === 'upper')
          this.upperJump = condJmp
        else if (condJmp.id === 'lower')
          this.lowerJump = condJmp
      })
      return this
    }

    /**
     * Resolves what {@link JumpInfo} must be taken, based on a done time and average rating obtained
     * in activities.
     * @param {number} rating - Average rating obtained by the user in the activities done during the
     * last sequence stretch.
     * @param {number} time - Total time spend doing the activities.
     * @returns {JumpInfo}
     */
    resolveJump(rating, time) {
      let result = this
      if (rating >= 0 && time >= 0) {
        if (this.upperJump !== null &&
          rating > this.upperJump.threshold &&
          (this.upperJump.time <= 0 || time < this.upperJump.time)) {
          result = this.upperJump
        } else if (this.lowerJump !== null &&
          (rating < this.lowerJump.threshold ||
            this.lowerJump.time > 0 && time > this.lowerJump.time)) {
          result = this.lowerJump
        }
      }
      return result
    }
  }

  Object.assign(ActivitySequenceJump.prototype, {
    /**
     * Optional jump to be performed when the results (score and time) are above a specific threshold.
     * @name ActivitySequenceJump#upperJump
     * @type {ConditionalJumpInfo} */
    upperJump: null,
    /**
     * Optional jump to be performed when the results (score or time) are below a specific threshold.
     * @name ActivitySequenceJump#lowerJump
     * @type {ConditionalJumpInfo} */
    lowerJump: null,
  })

  return ActivitySequenceJump
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/bags/ConditionalJumpInfo.js":
/*!*****************************************!*\
  !*** ./src/bags/ConditionalJumpInfo.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : bags/ConditionalJumpInfo.js
 *  Created : 05/04/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2016 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ./JumpInfo */ "./src/bags/JumpInfo.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, JumpInfo) {

  /**
   * This special case of {@link JumpInfo} is used in {@link ActivitySequenceJump} objects to decide
   * the type of jump or action to be performed, based on the results obtained by the user when
   * playing previous JClic activities.
   *
   * In addition to the standard {@link JumpInfo} fields and methods, this class has two public
   * members where score and time thresholds are stored.
   *
   * The exact meaning of this members will depend on the type of `ConditionalJumpInfo` in the
   * {@link ActivitySequenceJump} (it can be `upperJump` or `lowerJump`).
   * @exports ConditionalJumpInfo
   * @class
   * @extends JumpInfo
   */
  class ConditionalJumpInfo extends JumpInfo {
    /**
     * ConditionalJumpInfo constructor
     * @param {string} action - Must be one of the described actions.
     * @param {(number|string)=} sq - Can be the tag of the sequence element to jump to, or its
     * cardinal number in the list.
     * @param {number=} threshold - Threshold above or below which the action will be triggered,
     * depending on the type of JumpInfo.
     * @param {number=} time - Delay to be applied in automatic jumps.
     */
    constructor(action, sq, threshold, time) {
      super(action, sq)
      this.threshold = typeof threshold === 'number' ? threshold : -1
      this.time = typeof threshold === 'number' ? time : -1
    }

    /**
     * Loads this object settings from a specific JQuery XML element
     * @param {external:jQuery} $xml - The XML element to parse
     */
    setProperties($xml) {
      super.setProperties($xml)
      if ($xml.attr('threshold') !== undefined)
        this.threshold = $xml.attr('threshold')
      if ($xml.attr('time') !== undefined)
        this.time = $xml.attr('time')
      return this
    }
  }

  Object.assign(ConditionalJumpInfo.prototype, {
    /**
     * Threshold above or below which the action will be triggered, depending on the type of JumpInfo.
     * @name ConditionalJumpInfo#threshold
     * @type {number} */
    threshold: -1,
    /**
     * Delay to be applied in automatic jumps.
     * @name ConditionalJumpInfo#time
     * @type {number} */
    time: -1,
  })

  return ConditionalJumpInfo
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/bags/JumpInfo.js":
/*!******************************!*\
  !*** ./src/bags/JumpInfo.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : bags/JumpInfo.js
 *  Created : 05/04/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2016 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../Utils */ "./src/Utils.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Utils) {

  /**
   * This class contains information about what things JClic sequence manager has to do in certain
   * circumstances, such as:
   * - an activity finishes
   * - the user clicks on the "next" or "prev" buttons
   * - the user clicks or a cell with special "active content"
   *
   * Different kinds of actions are possible for each of these events:
   * - RETURN: to go back to a previous point in the sequence.
   * - EXIT: to exit the program (thus navigating to another URL)
   * - STOP: to do nothing.
   * - JUMP: to jump to a specific point in the sequence of activities, or to another JClic project.
   * @exports JumpInfo
   * @class
   * @see {@link ActivitySequenceJump}
   * @see {@link ConditionalJumpInfo}
   */
  class JumpInfo {
    /**
     * JumpInfo constructor
     * @param {string} action - Must be one of the described actions.
     * @param {(number|string)=} sq - Can be the tag of the sequence element to jump to, or its
     * cardinal number in the list.
     */
    constructor(action, sq) {
      this.action = action
      switch (typeof sq) {
        case 'string':
          this.sequence = sq
          break
        case 'number':
          this.actNum = sq
          break
      }
    }

    /**
     * Loads the object settings from a specific JQuery XML element
     * @param {external:jQuery} $xml - The XML element to parse
     */
    setProperties($xml) {
      this.id = $xml.attr('id')
      this.action = $xml.attr('action') || 'JUMP'
      this.sequence = Utils.nSlash($xml.attr('tag'))
      this.projectPath = Utils.nSlash($xml.attr('project'))
      return this
    }
  }

  Object.assign(JumpInfo.prototype, {
    /**
     * The JumpInfo identifier
     * - For regular jumps: 'forward', 'back'
     * - For conditional jumps: 'upper', 'lower'
     * @name JumpInfo#id
     * @type {string} */
    id: null,
    /**
     * The current action.
     * Possible values are: `JUMP`, `STOP`, `RETURN` and `EXIT`.
     * @name JumpInfo#action
     * @type {string} */
    action: undefined,
    /**
     * Activity number in the sequence list
     * @name JumpInfo#actNum
     * @type {number} */
    actNum: -1,
    /**
     * Current sequence tag
     * @name JumpInfo#sequence
     * @type {string} */
    sequence: undefined,
    /**
     * Path of another JClic project to jump to
     * @name JumpInfo#projectPath
     * @type {string} */
    projectPath: undefined,
  })

  return JumpInfo
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/bags/MediaBag.js":
/*!******************************!*\
  !*** ./src/bags/MediaBag.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : bags/MediaBag.js
 *  Created : 07/04/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ./MediaBagElement */ "./src/bags/MediaBagElement.js"),
  __webpack_require__(/*! ../skins/Skin */ "./src/skins/Skin.js"),
  __webpack_require__(/*! ../Utils */ "./src/Utils.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, MediaBagElement, Skin, Utils) {

  /**
   * This class stores and manages all the media components (images, sounds, animations, video,
   * MIDI files, etc.) needed to run the activities of a {@link JClicProject}. The main member of
   * the class is `elements`. This is where {@link MediaBagElement} objects are stored.
   * @exports MediaBag
   * @class
   */
  class MediaBag {
    /**
     * MediaBag constructor
     * @param {JClicProject} project - The JClic project to which this media bag belongs
     */
    constructor(project) {
      this.project = project
      this.elements = {}
    }

    /**
     * Loads this object settings from a specific JQuery XML element
     * @param {external:jQuery} $xml - The XML element to parse
     */
    setProperties($xml) {
      $xml.children('media').each((_n, child) => {
        const mbe = new MediaBagElement(this.project.basePath, null, this.project.zip)
        mbe.setProperties($(child))
        this.elements[mbe.name] = mbe
      })
      return this
    }

    /**
     * Finds a {@link MediaBagElement} by its name, creating a new one if not found and requested.
     * @param {string} name - The name of the element
     * @param {boolean=} create - When `true`, a new MediaBagElement will be created if not found,
     * using 'name' as its fileName..
     * @returns {MediaBagElement}
     */
    getElement(name, create) {
      name = Utils.nSlash(name)
      let result = this.elements[name]
      if (create && !result)
        result = this.getElementByFileName(name, create)
      return result
    }

    /**
     * Gets a {@link MediaBagElement} by its file name.
     * @param {string} fileName - The requested file name
     * @param {boolean=} create - When `true`, a new {@link MediaBagElement} will be created if not
     * found.
     * @returns {MediaBagElement}
     */
    getElementByFileName(fileName, create) {
      let result = null
      if (fileName) {
        fileName = Utils.nSlash(fileName)
        for (let name in this.elements) {
          if (this.elements[name].fileName === fileName) {
            result = this.elements[name]
            break
          }
        }
        if (!result && create) {
          result = new MediaBagElement(this.project.basePath, null, this.project.zip)
          result.name = fileName
          result.fileName = fileName
          result.ext = fileName.toLowerCase().split('#')[0].split('.').pop()
          result.type = result.getFileType(result.ext)
          this.elements[result.name] = result
        }
      }
      return result
    }

    /**
     * Get the names of the media elements that are of the given type.
     * When the search type is `font`, the `fontName` property is used instead of `name`
     * @param {string} type - The type of elements to search
     * @returns {String[]}
     */
    getElementsOfType(type) {
      const result = []
      $.each(this.elements, (name, element) => {
        if (element.type === type)
          result.push(type === 'font' ? element.fontName : name)
      })
      return result
    }

    /**
     * Preloads all resources.
     *
     * __Use with care!__ Calling this method will start loading all the resources defined in the
     * MediaBag, whether used or not in the current activity.
     * @param {string} type - The type of media to be build. When `null` or `undefined`, all
     * resources will be build.
     * @param {function=} callback - Function to be called when each element is ready.
     * @param {PlayStation=} ps - An optional `PlayStation` (currently a {@link JClicPlayer}) used to dynamically load fonts
     * @returns {number} - The total number of elements that will be build     * 
     */
    buildAll(type, callback, ps) {
      let count = 0
      $.each(this.elements, (name, element) => {
        if (!type || element.type === type) {
          element.build(callback, ps)
          count++
        }
      })
      return count
    }

    /**
     * Checks if there are media waiting to be loaded
     * @returns {number} - The amount of media elements already loaded, or -1 if all elements are ready
     */
    countWaitingElements() {
      let
        ready = 0,
        allReady = true

      // Only for debug purposes: return always 'false'
      // TODO: Check loading process!
      $.each(this.elements, (name, element) => {
        if (element.data && !element.ready && !element.checkReady() && !element.checkTimeout()) {
          Utils.log('debug', '... waiting for: %s', name)
          allReady = false
        } else
          ready++
      })
      return allReady ? -1 : ready
    }

    /**
     * Loads a {@link Skin} object
     * @param {string} name - The skin name to be loaded
     * @param {string} ps - The {@link PlayStation} linked to the skin
     * @returns {Skin}
     */
    getSkinElement(name, ps) {
      return Skin.getSkin(name, ps)
    }
  }

  Object.assign(MediaBag.prototype, {
    /**
     * The collection of {@link MediaBagElement} objects
     * @name MediaBag#elements
     * @type {object} */
    elements: null,
    /**
     * The JClic project to which this MediaBag belongs
     * @name MediaBag#project
     * @type {JClicProject} */
    project: null,
  })

  return MediaBag
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/bags/MediaBagElement.js":
/*!*************************************!*\
  !*** ./src/bags/MediaBagElement.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : bags/MediaBagElement.js
 *  Created : 07/04/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define, Uint8Array */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ../media/MidiAudioPlayer */ "./src/media/MidiAudioPlayer.js"),
  __webpack_require__(/*! ../Utils */ "./src/Utils.js"),
  __webpack_require__(/*! ../AWT */ "./src/AWT.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, MidiAudioPlayer, Utils, AWT) {

  /**
   * This kind of objects are the components of {@link MediaBag}.
   *
   * Media elements have a name, a reference to a file (the `fileName` field) and, when initialized,
   * a `data` field pointing to a object containing the real media. They have also a flag indicating
   * if the data must be saved on the {@link JClicProject} zip file or just maintained as a reference
   * to an external file.
   * @exports MediaBagElement
   * @class
   */
  class MediaBagElement {
    /**
     * MediaBagElement constructor
     * @param {string} basePath - Path to be used as a prefix of the file name
     * @param {string} fileName - The media file name
     * @param {external:JSZip=} zip - An optional JSZip object from which the file must be extracted.
     */
    constructor(basePath, fileName, zip) {
      if (basePath)
        this.basePath = basePath
      if (fileName) {
        this.fileName = Utils.nSlash(fileName)
        this.name = Utils.nSlash(fileName)
        this.ext = this.fileName.toLowerCase().split('.').pop()
        this.type = this.getFileType(this.ext)
        if (this.ext === 'gif')
          this.checkAnimatedGif()
      }
      if (zip)
        this.zip = zip
      this.timeout = Date.now() + Utils.settings.LOAD_TIMEOUT
    }

    /**
     * Loads this object settings from a specific JQuery XML element
     * @param {external:jQuery} $xml - The XML element to parse
     */
    setProperties($xml) {
      this.name = Utils.nSlash($xml.attr('name'))
      this.fileName = Utils.nSlash($xml.attr('file'))
      this.ext = this.fileName.toLowerCase().split('.').pop()
      this.type = this.getFileType(this.ext)
      // Check if it's an animated GIF
      if (this.ext === 'gif') {
        const anim = $xml.attr('animated')
        if (typeof anim === 'undefined')
          this.checkAnimatedGif()
        else
          this.animated = anim === 'true'
      }
      if (this.type === 'font') {
        this.fontName = this.name === this.fileName && this.name.lastIndexOf('.') > 0 ?
          this.name.substring(0, this.name.lastIndexOf('.')) :
          this.name
      }
      return this
    }

    /**
     * Checks if the image associated with this MediaBagElement is an animated GIF
     *
     * Based on: {@link https://gist.github.com/marckubischta/261ad8427a214022890b}
     * Thanks to `@lakenen` and `@marckubischta`
     */
    checkAnimatedGif() {
      const request = new XMLHttpRequest()
      // Set `responseType` moved after calling `open`
      // see: https://stackoverflow.com/questions/20760635/why-does-setting-xmlhttprequest-responsetype-before-calling-open-throw
      // request.responseType = 'arraybuffer'
      request.addEventListener('load', () => {
        const
          arr = new Uint8Array(request.response),
          length = arr.length

        // make sure it's a gif (GIF8)
        if (arr[0] !== 0x47 || arr[1] !== 0x49 ||
          arr[2] !== 0x46 || arr[3] !== 0x38) {
          this.animated = false
          return
        }

        // Ported from PHP [http://www.php.net/manual/en/function.imagecreatefromgif.php#104473]
        // an animated gif contains multiple "frames", with each frame having a
        // header made up of:
        // * a static 3-byte sequence (\x00\x21\xF9
        // * one byte indicating the length of the header (usually \x04)
        // * variable length header (usually 4 bytes)
        // * a static 2-byte sequence (\x00\x2C) (some variants may use \x00\x21 ?)
        // We read through the file as long as we haven't reached the end of the file
        // and we haven't yet found at least 2 frame headers
        for (let i = 0, len = length - 3, frames = 0; i < len && frames < 2; ++i) {
          if (arr[i] === 0x00 && arr[i + 1] === 0x21 && arr[i + 2] === 0xF9) {
            const
              blocklength = arr[i + 3],
              afterblock = i + 4 + blocklength
            if (afterblock + 1 < length &&
              arr[afterblock] === 0x00 &&
              (arr[afterblock + 1] === 0x2C || arr[afterblock + 1] === 0x21)) {
              if (++frames > 1) {
                this.animated = true
                Utils.log('debug', `Animated GIF detected: ${this.fileName}`)
                break
              }
            }
          }
        }
      })

      this.getFullPathPromise().then(fullPath => {
        request.open('GET', fullPath, true)
        request.responseType = 'arraybuffer'
        request.send()
      })
    }

    /**
     * Checks if the MediaBagElement has been initiated
     * @returns {boolean}
     */
    isEmpty() {
      return this.data === null
    }

    /**
     * Determines the type of a file from its extension
     * @param {string} ext - The file name extension
     * @returns {string}
     */
    getFileType(ext) {
      let result = null
      for (let type in Utils.settings.FILE_TYPES) {
        if (Utils.settings.FILE_TYPES[type].indexOf(ext) >= 0) {
          result = type
          break
        }
      }
      return result
    }

    /**
     * Instantiates the media content
     * @param {function} callback - Callback method called when the referred resource is ready
     * @param {PlayStation=} ps - An optional `PlayStation` (currently a {@link JClicPlayer}) used to dynamically load fonts
     */
    build(callback, ps) {
      if (callback) {
        if (!this._whenReady)
          this._whenReady = []
        this._whenReady.push(callback)
      }

      if (!this.data)
        this.getFullPathPromise().then(fullPath => {
          switch (this.type) {
            case 'font':
              const
                format = this.ext === 'ttf' ? 'truetype' : this.ext === 'otf' ? 'embedded-opentype' : this.ext,
                css = `@font-face{font-family:"${this.fontName}";src:url(${fullPath}) format("${format}");}`

              Utils.appendStyleAtHead(css, ps)
              this.data = new AWT.Font(this.name)
              this.ready = true
              break

            case 'image':
              this.data = new Image()
              $(this.data).on('load', () => this._onReady.call(this))
              this.data.src = fullPath
              break

            case 'audio':
            case 'video':
              this.data = document.createElement(this.type)
              $(this.data).on('canplay', () => this._onReady.call(this))
              this.data.src = fullPath
              // Forced call to "load" because the 'canplay' event is not fired in Android < 7 just setting 'src' (until 'play')
              // See: https://stackoverflow.com/questions/44344242/canplay-event-does-not-occur-on-google-chrome-mobile-until-audio-play-is-calle
              this.data.load()
              // --------------------------------------------------
              this.data.pause()
              break

            case 'anim':
              this.data = $(`<object type"application/x-shockwave-flash" width="300" height="200" data="${fullPath}"/>`).get(-1)
              // Unable to check the loading progress in elements of type `object`. so we mark it always as `ready`:
              this.ready = true
              break

            case 'xml':
              $.get(fullPath, null, null, 'xml').done(xmlData => {
                const children = xmlData ? xmlData.children || xmlData.childNodes : null
                this.data = children && children.length > 0 ? Utils.parseXmlNode(children[0]) : null
                this._onReady()
              }).fail(err => {
                Utils.log('error', `Error loading ${this.name}: ${err}`)
                this._onReady()
              })
              break

            case 'midi':
              const request = new XMLHttpRequest()
              request.onreadystatechange = () => {
                if (request.readyState === 4) {
                  if (request.status === 200)
                    this.data = new MidiAudioPlayer(request.response, ps && ps.options)
                  else
                    Utils.log('error', `Error loading ${this.name}: ${request.statusText}`)
                  this._onReady()
                }
              }
              request.open('GET', fullPath, true)
              request.responseType = 'arraybuffer'
              request.send()

              /* USING 'fetch':
              fetch(fullPath)
                .then(res => res.arrayBuffer())
                .then(result => {
                  this.data = new MidiAudioPlayer(result)
                  this._onReady()
                })
                .catch(err => {
                  Utils.log('error', `Error loading ${this.name}: ${err}`)
                  this._onReady()
                })
              */
              break

            default:
              Utils.log('trace', `Media currently not supported: ${this.name}`)
              this.ready = true
          }

          if (this.ready)
            this._onReady()
        })
      else if (this.ready)
        this._onReady()

      return this
    }

    /**
     * Checks if this media element is ready to start
     * @returns {Boolean} - `true` if ready, `false` otherwise
     */
    checkReady() {
      if (this.data && !this.ready) {
        switch (this.type) {
          case 'image':
            this.ready = this.data.complete === true
            break
          case 'audio':
          case 'video':
          case 'anim':
            this.ready = this.data.readyState >= 1
            break
          default:
            this.ready = true
        }
      }
      return this.ready
    }

    /**
     * Checks if this resource has timed out.
     * @returns {Boolean} - `true` if the resource has exhausted the allowed time to load, `false` otherwise
     */
    checkTimeout() {
      const result = Date.now() > this.timeout
      if (result)
        Utils.log('warn', `Timeout while loading: ${this.name}`)
      return result
    }

    /**
     * Notify listeners that the resource is ready
     */
    _onReady() {
      this.ready = true
      if (this._whenReady) {
        this._whenReady.forEach(fn => fn.call(this, this))
        this._whenReady = null
      }
    }

    /**
     * Gets the full path of the file associated to this element.
     * WARNING: This function should be called only after a successful call to `getFullPathPromise`
     * @returns {string}
     */
    getFullPath() {
      return this._fullPath
    }

    /**
     * Gets a promise with the full path of the file associated to this element.
     * @returns {Promise}
     */
    getFullPathPromise() {
      return new Promise((resolve, reject) => {
        Utils.getPathPromise(this.basePath, this.fileName, this.zip).then(fullPath => {
          this._fullPath = fullPath
          resolve(fullPath)
        }).catch(reject)
      })
    }
  }

  Object.assign(MediaBagElement.prototype, {
    /**
     * The name of this element. Usually is the same as `fileName`
     * @name MediaBagElement#name
     * @type {string} */
    name: '',
    /**
     * The name of the file where this element is stored
     * @name MediaBagElement#fileName
     * @type {string} */
    fileName: '',
    /**
     * The font family name, used only in elements of type 'font'
     * @name MediaBagElement#fontName
     * @type {string} */
    fontName: '',
    /**
     * The path to be used as base to access this media element
     * @name MediaBagElement#basePath
     * @type {string} */
    basePath: '',
    /**
     * An optional JSZip object that can act as a container of this media
     * @name MediaBagElement#zip
     * @type {external:JSZip} */
    zip: null,
    /**
     * When loaded, this field will store the realized media object
     * @name MediaBagElement#data
     * @type {object} */
    data: null,
    /**
     * Flag indicating that `data` is ready to be used
     * @name MediaBagElement#ready
     * @type {boolean} */
    ready: false,
    /**
     * Array of callback methods to be called when the resource becomes ready
     * @name MediaBagElement#_whenReady
     * @private
     * @type {function[]} */
    _whenReady: null,
    /**
     * Normalized extension of `fileName`, useful to determine the media type
     * @name MediaBagElement#ext
     * @type {string} */
    ext: '',
    /**
     * The resource type ('audio', 'image', 'midi', 'video', 'font')
     * @name MediaBagElement#type
     * @type {string} */
    type: null,
    /**
     * Time set to load the resource before leaving
     * @name MediaBagElement#timeout
     * @type {number} */
    timeout: 0,
    //
    /**
     * Flag used for animated GIFs
     * @name MediaBagElement#animated
     * @type {boolean} */
    animated: false,
    /**
     * Full path obtained after a successful call to getFullPathPromise
     * @name MediaBagElement#_fullPath
     * @private
     * @type {string}
     */
    _fullPath: null,
  })

  return MediaBagElement
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/boxes/AbstractBox.js":
/*!**********************************!*\
  !*** ./src/boxes/AbstractBox.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : boxes/AbstractBox.js
 *  Created : 18/04/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ../AWT */ "./src/AWT.js"),
  __webpack_require__(/*! ./BoxBase */ "./src/boxes/BoxBase.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, AWT, BoxBase) {

  /**
   * This abstract class is the base for most graphic components of JClic. It describes an area
   * (by default an {@link AWT.Rectangle}) with some special properties that determine how it must
   * be drawn on screen.
   *
   * Some types of boxes can act as containers for other boxes, establishing a hierarchy of dependences.
   * @exports AbstractBox
   * @abstract
   * @class
   * @extends AWT.Rectangle
   */
  class AbstractBox extends AWT.Rectangle {
    /**
     * AbstractBox constructor
     * @param {?AbstractBox} parent - The AbstractBox to which this one belongs
     * @param {?AWT.Container} container - The container where this box is placed.
     * @param {?BoxBase} boxBase - The object where colors, fonts, border and other graphic properties
     * of this box are defined.
     */
    constructor(parent, container, boxBase) {
      // AbstractBox extends AWT.Rectangle
      super()
      this.container = container
      this.parent = parent
      this.boxBase = boxBase
      this.shape = this
      this.specialShape = false
      this.visible = true
    }

    /**
     * Setter method for `parent`
     * @param {AbstractBox} parent - The new parent of this box
     */
    setParent(parent) {
      this.parent = parent
    }

    /**
     * Gets the current parent of this box
     * @returns {AbstractBox}
     */
    getParent() {
      return this.parent
    }

    /**
     * Finisher method
     */
    end() {
    }

    /**
     * Setter method for `container`
     * @param {AWT.Container} newContainer - The new Container assigned to this box
     */
    setContainer(newContainer) {
      this.container = newContainer
      if (this.$hostedComponent && this.container && this.container.$div) {
        this.$hostedComponent.detach()
        this.container.$div.append(this.$hostedComponent)
      }
    }

    /**
     * Gets the `container` attribute of this box, without checking its parent
     * @returns {?AWT.Container}
     */
    getContainerX() {
      return this.container
    }

    /**
     * Gets the container associated to this box, asking its parents when `null`.
     * @returns {?AWT.Container}
     */
    getContainerResolve() {
      let ab = this
      while (ab.container === null && ab.parent !== null)
        ab = ab.parent
      return ab.container
    }

    /**
     * Invalidates the zone corresponding to this box in the associated {@link AWT.Container}, if any.
     * @param {AWT.Rectangle} rect - The rectangle to be invalidated. When `null`, it's the full
     * container area.
     */
    invalidate(rect) {
      const cnt = this.getContainerResolve()
      if (cnt)
        cnt.invalidate(rect)
    }

    /**
     * Sets the {@link BoxBase} of this box
     * @param {BoxBase} boxBase - The new BoxBase
     */
    setBoxBase(boxBase) {
      this.boxBase = boxBase
      this.invalidate()
    }

    /**
     * Gets the real {@link BoxBase} associated to this box, scanning down parent relationships.
     * @returns {BoxBase}
     */
    getBoxBaseResolve() {
      let ab = this
      while (!ab.boxBase && ab.parent)
        ab = ab.parent
      return ab.boxBase || BoxBase.prototype.defaultBoxBase
    }

    /**
     * Sets the shape used to draw the content of this box
     * @param {AWT.Shape} sh - The shape to be set
     */
    setShape(sh) {
      this.shape = sh
      this.specialShape = true
      this.invalidate()
      super.setBounds(sh.getBounds())
      this.invalidate()
    }

    /**
     * Gets the current shape used in this box
     * @returns {AWT.Shape}
     */
    getShape() {
      return this.shape
    }

    /**
     * Check if this box contains the specified point
     * @override
     * @param {AWT.Point} p - The point to be checked
     * @returns {boolean}
     */
    contains(p) {
      return this.shape === this ? super.contains(p) : this.shape.contains(p)
    }

    /**
     * Sets a new size and/or dimension to this box
     * @override
     * @param {(AWT.Rectangle|number)} rect - An AWT.Rectangle object, or the `x` coordinate of the
     * upper-left corner of a new rectangle.
     * @param {number=} y - `y` coordinate of the upper-left corner of the new rectangle.
     * @param {number=} w - Width of the new rectangle.
     * @param {number=} h - Height of the new rectangle.
     */
    setBounds(rect, y, w, h) {
      if (typeof rect === 'number')
        // arguments are co-ordinates and size
        rect = new AWT.Rectangle(rect, y, w, h)
      // Rectangle comparision
      if (this.equals(rect))
        return

      const sizeChanged = !this.dim.equals(rect.dim)
      if (this.specialShape) {
        if (sizeChanged) {
          this.shape.scaleBy(new AWT.Dimension(rect.dim.width / this.dim.width, rect.dim.height / this.dim.height))
          this.setShape(this.shape)
        }
        if (!this.pos.equals(rect.pos)) {
          this.shape.moveTo(rect.pos)
        }
        this.setShape(this.shape)
      } else
        super.setBounds(rect)

      if (this.$hostedComponent)
        this.setHostedComponentBounds(sizeChanged)

      return this
    }

    /**
     * Sets a new location for this box. In JClic this method was named `setLocation`
     * @param {(AWT.Point|number)} newPos - A point or the `x` coordinate of a new point.
     * @param {number=} y - The `y` coordinate of a new point.
     */
    moveTo(newPos, y) {
      if (typeof newPos === 'number')
        newPos = new AWT.Point(newPos, y)
      this.setBounds((new AWT.Rectangle(this)).moveTo(newPos))
    }

    /**
     * Sets a new location to this box. In JClic this method was named `translate`.
     * @param {number} dx - The displacement on the X axis
     * @param {number} dy - The displacement on the Y axis
     */
    moveBy(dx, dy) {
      this.setBounds((new AWT.Rectangle(this)).moveBy(dx, dy))
    }

    /**
     * Changes the size of this box
     * @param {number} width
     * @param {number} height
     */
    setSize(width, height) {
      this.setBounds(new AWT.Rectangle(this.pos, new AWT.Dimension(width, height)))
    }

    /**
     * Checks if this box has border
     * @returns {boolean}
     */
    hasBorder() {
      return this.border
    }

    /**
     * Sets/unsets a border to this box
     * @param {boolean} newVal - `true` to set a border.
     */
    setBorder(newVal) {
      if (!newVal)
        this.invalidate()
      this.border = newVal
      if (newVal)
        this.invalidate()
    }

    /**
     * Checks if this box is fully visible
     * @returns {boolean}
     */
    isVisible() {
      return this.visible
    }

    /**
     * Sets this box visible or invisible
     * @param {boolean} newVal - `true` for visible
     */
    setVisible(newVal) {
      this.visible = newVal
      this.setHostedComponentVisible()
      this.invalidate()
    }

    /**
     * Makes {@link AbstractBox#$hostedComponent} visible or invisible, based on the value of
     * the AbstractBox `visible` flag.
     */
    setHostedComponentVisible() {
      if (this.$hostedComponent)
        this.$hostedComponent.css('visibility', this.visible ? 'visible' : 'hidden')
    }

    /**
     * Checks if this box is temporary hidden
     * @returns {boolean}
     */
    isTemporaryHidden() {
      return this.temporaryHidden
    }

    /**
     * Makes this box temporary hidden (newVal `true`) or resets its original state (newVal `false`)
     * @param {boolean} newVal
     */
    setTemporaryHidden(newVal) {
      this.temporaryHidden = newVal
    }

    /**
     * Checks if this box is currently inactive.
     * @returns {boolean}
     */
    isInactive() {
      return this.inactive
    }

    /**
     * Makes this box active (`false`) or inactive (`true`)
     * @param {boolean} newVal
     */
    setInactive(newVal) {
      this.inactive = newVal
      if (this.$hostedComponent) {
        this.setHostedComponentColors()
        this.setHostedComponentVisible()
      } else {
        if (this.$accessibleElement) {
          const disabled = this.isInactive() && !this.accessibleAlwaysActive
          this.$accessibleElement.prop({
            disabled: disabled,
            tabindex: disabled ? -1 : 0
          })
        }
        this.invalidate()
      }
    }

    /**
     * Checks if this box is in `inverted` state.
     * @returns {boolean}
     */
    isInverted() {
      return this.inverted
    }


    /**
     * Puts this box in `inverted` mode or restores its original state.
     * @param {boolean} newVal
     */
    setInverted(newVal) {
      this.inverted = newVal
      if (this.$hostedComponent)
        this.setHostedComponentColors()
      else
        this.invalidate()
    }

    /**
     * Checks if this box is `marked`
     * @returns {boolean}
     */
    isMarked() {
      return this.marked
    }

    /**
     * Sets this box in `marked` mode, or restores its original state.
     * @param {boolean} newVal
     */
    setMarked(newVal) {
      if (!newVal)
        this.invalidate()
      this.marked = newVal
      if (this.$hostedComponent) {
        this.setHostedComponentColors()
        this.setHostedComponentBorder()
      } else if (newVal)
        this.invalidate()
    }

    /**
     * Checks if this box has the input focus
     * @returns {boolean}
     */
    isFocused() {
      return this.focused
    }

    /**
     *
     * Sets or unsets the input focus to this box.
     * @param {boolean} newVal
     */
    setFocused(newVal) {
      if (!newVal)
        this.invalidate()
      this.focused = newVal
      if (newVal)
        this.invalidate()
      // Put hosted component on top
      if (this.$hostedComponent)
        this.$hostedComponent.css('z-index', this.focused ? 20 : 2)
    }

    /**
     * Checks if this box is in `alternative` state.
     * @returns {boolean}
     */
    isAlternative() {
      return this.alternative
    }

    /**
     * Sets this box in `alternative` mode, or restores its original state.
     * @param {boolean} newVal
     */
    setAlternative(newVal) {
      this.alternative = newVal
      this.invalidate()
    }

    /**
     * Draws the content of this box on an HTML `canvas` element. At this level, only background
     * and border are painted/stroked. Derived classes should implement specific drawing tasks in
     * {@link AbstractBox#updateContent}.
     * @param {external:CanvasRenderingContext2D} ctx - The canvas rendering context used to draw the
     * box content.
     * @param {AWT.Rectangle=} dirtyRegion - The area that must be repainted. `null` refers to the whole box.
     */
    update(ctx, dirtyRegion) {
      if (this.isEmpty() || !this.isVisible() || this.isTemporaryHidden())
        return false

      if (dirtyRegion && !this.shape.intersects(dirtyRegion))
        return false

      /**
       * TODO: Implement clipping
       Shape saveClip=new Area(g2.getClip())
       Area clip=new Area(saveClip)
       clip.intersect(new Area(shape))
       g2.setClip(clip)
       */

      const bb = this.getBoxBaseResolve()
      if (!bb.transparent && !bb.dontFill && !this.tmpTrans) {
        if (!bb.bgGradient || bb.bgGradient.hasTransparency()) {
          // Prepare the rendering context
          ctx.fillStyle = this.inactive ?
            bb.inactiveColor :
            this.inverted ? bb.textColor : bb.backColor
          // Fill the shape
          this.shape.fill(ctx, dirtyRegion)
        }
        if (bb.bgGradient) {
          ctx.fillStyle = bb.bgGradient.getGradient(ctx, this.shape.getBounds())
          this.shape.fill(ctx, dirtyRegion)
        }
        // Reset the canvas context
        ctx.fillStyle = 'black'
      }

      if (!this.$hostedComponent)
        this.updateContent(ctx, dirtyRegion)

      this.drawBorder(ctx)
      return true
    }

    /**
     * Here is where classes derived from {@link AbstractBox} should implement the drawing of its
     * content. Background and border are already painted in {@link AbstractBox#update}.
     * @param {external:CanvasRenderingContext2D} _ctx - The canvas rendering context used to draw the
     * box content.
     * @param {AWT.Rectangle=} _dirtyRegion - The area that must be repainted. `null` refers to the whole box.
     */
    //
    // Abstract method, to be implemented in subclasses
    updateContent(_ctx, _dirtyRegion) {
    }

    /**
     * Draws the box border
     * @param {external:CanvasRenderingContext2D} ctx - The canvas rendering context where the border
     * will be drawn.
     */
    drawBorder(ctx) {
      if (this.border || this.marked) {
        const bb = this.getBoxBaseResolve()

        // Prepare stroke settings
        ctx.strokeStyle = bb.borderColor
        bb[this.marked ? 'markerStroke' : 'borderStroke'].setStroke(ctx)
        if (this.marked)
          ctx.globalCompositeOperation = 'xor'

        // Draw border
        this.shape.stroke(ctx)

        // Reset ctx default values
        if (this.marked)
          ctx.globalCompositeOperation = 'source-over'
        ctx.strokeStyle = 'black'
        AWT.Stroke.prototype.setStroke(ctx)
      }
    }

    /**
     * Returns the enclosing Rectangle of this box including its border (if any)
     * @returns {AWT.Rectangle}
     */
    getBorderBounds() {
      const result = new AWT.Rectangle(this.getBounds())
      if (this.border || this.marked) {
        const bb = this.getBoxBaseResolve()
        const w = bb[this.marked ? 'markerStroke' : 'borderStroke'].lineWidth
        result.moveBy(-w / 2, -w / 2)
        result.dim.width += w
        result.dim.height += w
      }
      return result
    }

    /**
     * Sets the {@link AbstractBox#$hostedComponent $hostedComponent} member.
     * @param {external:jQuery} $hc - The jQuery DOM component hosted by this box.
     */
    setHostedComponent($hc) {
      if (this.$hostedComponent)
        this.$hostedComponent.detach()

      this.$hostedComponent = $hc

      if (this.$hostedComponent) {
        this.setContainer(this.container)
        this.setHostedComponentColors()
        this.setHostedComponentBorder()
        this.setHostedComponentBounds(true)
        this.setHostedComponentVisible()
        this.setFocused(this.focused)
      }
    }

    /**
     * Gets the current {@link AbstractBox#$hostedComponent|$hostedComponent} member
     * @returns {external:jQuery}
     */
    getHostedComponent() {
      return this.$hostedComponent
    }

    /**
     * Sets {@link AbstractBox#$hostedComponent|$hostedComponent} colors and other css properties
     * based on the current {@link BoxBase} of this box.
     */
    setHostedComponentColors() {
      if (this.$hostedComponent) {
        const bb = this.getBoxBaseResolve()
        const css = bb.getCSS(null, this.inactive, this.inverted, this.alternative)
        // Check if cell has background gradient and animated gif
        if (this.$hostedComponent.data('background-image') && css['background-image'])
          css['background-image'] = `${this.$hostedComponent.data('background-image')},${css['background-image']}`
        this.$hostedComponent.css(css)
      }
    }

    /**
     * Sets the {@link AbstractBox#$hostedComponent|$hostedComponent} border, based on the current
     * {@link BoxBase} of this box.
     */
    setHostedComponentBorder() {
      if (this.$hostedComponent && (this.border || this.marked)) {
        const bb = this.getBoxBaseResolve()
        this.$hostedComponent.css({
          'border-width': `${bb.get(this.marked ? 'markerStroke' : 'borderStroke').lineWidth}px`,
          'border-style': 'solid',
          'border-color': bb.get('borderColor')
        })
      }
    }

    /**
     * Places and resizes {@link AbstractBox#$hostedComponent|$hostedComponent}, based on the size
     * and position of this box.
     * @param {boolean} _sizeChanged - `true` when this {@link ActiveBox} has changed its size
     */
    setHostedComponentBounds(_sizeChanged) {
      if (this.$hostedComponent) {
        const
          r = this.getBounds(),
          b = this.border || this.marked ? this.getBoxBaseResolve().get(this.marked ? 'markerStroke' : 'borderStroke').lineWidth : 0
        this.$hostedComponent.css({
          position: 'absolute',
          width: r.dim.width - 2 * b + 'px',
          height: r.dim.height - 2 * b + 'px',
          top: r.pos.y + 'px',
          left: r.pos.x + 'px'
        })
      }
    }
  }

  Object.assign(AbstractBox.prototype, {
    /**
     * The parent AbstractBox (can be `null`)
     * @name AbstractBox#parent
     * @type {AbstractBox} */
    parent: null,
    /**
     * The Container to which this AbstractBox belongs
     * @name AbstractBox#container
     * @type {AWT.Container} */
    container: null,
    /**
     * The {@link BoxBase} related to this AbstractBox. When `null`, the parent can provide an
     * alternative one.
     * @name AbstractBox#boxBase
     * @type {BoxBase} */
    boxBase: null,
    /**
     * Whether this box has a border or not
     * @name AbstractBox#border
     * @type {boolean} */
    border: false,
    /**
     * The shape of this box (the box Rectangle or a special Shape, if set)
     * @name AbstractBox#shape
     * @type {AWT.Shape} */
    shape: null,
    /**
     * Whether this box has a shape that is not a rectangle
     * @name AbstractBox#specialShape
     * @type {boolean} */
    specialShape: false,
    /**
     * Whether this box is visible or not
     * @name AbstractBox#visible
     * @type {boolean} */
    visible: true,
    /**
     * Used to temporary hide a box while other drawing operations are done
     * @name AbstractBox#temporaryHidden
     * @type {boolean} */
    temporaryHidden: false,
    /**
     * Cells with this attribute will be transparent but with painted border
     * @name AbstractBox#tmpTrans
     * @type {boolean}*/
    tmpTrans: false,
    /**
     * Whether this box is active or inactive
     * @name AbstractBox#inactive
     * @type {boolean} */
    inactive: false,
    /**
     * Whether this box must be displayed with inverted or regular colors
     * @name AbstractBox#inverted
     * @type {boolean} */
    inverted: false,
    /**
     * Whether this box must be displayed with alternative or regular color and font settings
     * @name AbstractBox#alternative
     * @type {boolean} */
    alternative: false,
    /**
     * Whether this box is marked (selected) or not
     * @name AbstractBox#marked
     * @type {boolean} */
    marked: false,
    /**
     * Whether this box holds the input focus
     * @name AbstractBox#focused
     * @type {boolean} */
    focused: false,
    /**
     * Text to be used in accessible contexts
     * @name AbstractBox#accessibleText
     * @type {string} */
    accessibleText: '',
    /**
     * Describes the main role of this box on the activity. Useful in wai-aria descriptions.
     * @name AbstractBox#role
     * @type {string} */
    role: 'cell',
    /**
     * DOM element used to display this cell content in wai-aria contexts
     * @name AbstractBox#$accessibleElement
     * @type {external:jQuery} */
    $accessibleElement: null,
    /**
     * Flag indicating that $accessibleElement should be always active
     * @name AbstractBox#accessibleAlwaysActive
     * @type {boolean} */
    accessibleAlwaysActive: false,
    /**
     * An external JQuery DOM element hosted by this box
     * @name AbstractBox#$hostedComponent
     * @type {external:jQuery} */
    $hostedComponent: null,
  })

  return AbstractBox
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/boxes/ActiveBagContent.js":
/*!***************************************!*\
  !*** ./src/boxes/ActiveBagContent.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : boxes/ActiveBagContent.js
 *  Created : 13/04/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ./BoxBase */ "./src/boxes/BoxBase.js"),
  __webpack_require__(/*! ./ActiveBoxContent */ "./src/boxes/ActiveBoxContent.js"),
  __webpack_require__(/*! ../shapers/Shaper */ "./src/shapers/Shaper.js"),
  __webpack_require__(/*! ../AWT */ "./src/AWT.js"),
  __webpack_require__(/*! ../Utils */ "./src/Utils.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, BoxBase, ActiveBoxContent, Shaper, AWT, Utils) {

  /**
   * This class packs a collection of {@link ActiveBoxContent} objects and provides methods to access
   * and manage it. The two main members of `ActiveBagContent` are the {@link Shaper}, responsible for
   * determining the position and shape of each {@link ActiveBox}, and the {@link BoxBase} (field `bb`),
   * provider of a common visual style.
   * @exports ActiveBagContent
   * @class
   */
  class ActiveBagContent {
    /**
     * ActiveBagContent constructor
     * @param {string=} id - An optional text tag identifying this ActiveBagContent
     * @param {number} ncw - In grid-based distributions, number of columns.
     * @param {number} nch - In grid-based distributions, number of rows.
     */
    constructor(id, ncw, nch) {
      if (id)
        this.id = id
      this.activeBoxContentArray = []
      this.ncw = Math.max(1, ncw)
      this.nch = Math.max(1, nch)
    }

    /**
     * Loads the object settings from a specific JQuery XML element
     * @param {external:jQuery} $xml - The XML element to parse
     * @param {MediaBag} mediaBag - The project's MediaBag
     */
    setProperties($xml, mediaBag) {
      let bug = false
      Utils.attrForEach($xml.get(0).attributes, (name, val) => {
        switch (name) {
          case 'id':
            this.id = val
            break
          case 'image':
            this.imgName = Utils.nSlash(val)
            break
          // Bug in JClic beta 1: "columns" is number of rows, and "rows" is number of columns.
          // Was corrected in beta 2: If "cols" is specified, "rows" are rows and "cols" are columns.
          case 'rows':
            this.nch = Number(val)
            break
          case 'columns':
            bug = true
          /* falls through */
          case 'cols':
            this.ncw = Number(val)
            break
          case 'cellWidth':
            this.w = Number(val)
            break
          case 'cellHeight':
            this.h = Number(val)
            break
          case 'border':
            this.border = Utils.getBoolean(val)
            break
        }
      })

      if (bug) {
        let n = this.ncw
        this.ncw = this.nch
        this.nch = n
      }

      $xml.children().each((_n, child) => {
        const $node = $(child)
        switch (child.nodeName) {
          case 'style':
            this.bb = new BoxBase(null).setProperties($node)
            break
          case 'shaper':
            const shaperClassName = $node.attr('class'),
              nCols = Math.max(1, $node.attr('cols')),
              nRows = Math.max(1, $node.attr('rows'))
            this.shaper = Shaper.getShaper(shaperClassName, nCols, nRows)
            this.shaper.setProperties($node)
            break
          case 'ids':
            // Used in special cases where all cells have empty content with only 'ids'
            child.textContent.split(' ').forEach((id, i) => { this.activeBoxContentArray[i] = new ActiveBoxContent(Number(id)) })
            break
          case 'cell':
            this.activeBoxContentArray.push(new ActiveBoxContent().setProperties($node, mediaBag))
            break
        }
      })

      let n = this.activeBoxContentArray.length

      // Create cells when `activeBoxContentArray` is empty
      if (n === 0 && this.shaper && this.shaper.nCells > 0) {
        n = this.shaper.nCells
        this.getActiveBoxContent(n - 1)
      }

      // Assign ids when cells have empty content (they are just shapes)
      if (n > 0) {
        let empty = true
        for (let i = 0; i < n; i++) {
          const bxc = this.getActiveBoxContent(i)
          if (bxc.id !== -1 || bxc.item !== -1 || !bxc.isEmpty()) {
            empty = false
            break
          }
        }
        if (empty) {
          for (let i = 0; i < n; i++)
            this.getActiveBoxContent(i).id = i
        }
      }

      // Link [BoxBase](BoxBase.html) objects of `activeBoxContentArray` elements to `bb`
      if (this.bb)
        this.activeBoxContentArray.forEach((abc) => { if (abc.bb) abc.bb.parent = this.bb })

      return this
    }

    /**
     * Prepares the media content of all elements
     * @param {PlayStation} playStation - The {@link JClicPlayer}
     */
    prepareMedia(playStation) {
      this.activeBoxContentArray.forEach(abc => abc.prepareMedia(playStation))
    }

    /**
     * Gets the estimated total width of this content bag
     * @returns {number}
     */
    getTotalWidth() {
      return this.w * this.ncw
    }

    /**
     * Gets the estimated total height of this bag
     * @returns {number}
     */
    getTotalHeight() {
      return this.h * this.nch
    }

    /**
     * Gets the total number of cells of this bag
     * @returns {number}
     */
    getNumCells() {
      return this.activeBoxContentArray.length
    }

    /**
     * Checks if the bag is empty
     * @returns {boolean}
     */
    isEmpty() {
      return this.activeBoxContentArray.length === 0
    }

    /**
     * Retrieves the {@link Shaper} of this bag, creating a new one if it was _null_
     * @returns {Shaper}
     */
    getShaper() {
      if (this.shaper === null)
        this.shaper = Shaper.getShaper('@Rectangular', this.ncw, this.nch)
      return this.shaper
    }

    /**
     * Retrieves the {@link BoxBase} of this bag, creating a new one if it was _null_
     * @returns {BoxBase}
     */
    getBoxBase() {
      if (this.bb === null)
        this.bb = new BoxBase()
      return this.bb
    }

    /**
     * Adds a new {@link ActiveBoxContent} to this bag
     * @param {ActiveBoxContent} ab - The ActiveBoxContent to add
     */
    addActiveBoxContent(ab) {
      this.activeBoxContentArray.push(ab)
      if (this.ncw === 0 || this.nch === 0) {
        this.ncw = this.nch = 1
      }
    }

    /**
     * Gets the nth {@link ActiveBoxContent} in `activeBoxContentArray`
     * @param {number} i - The index of the content to be retrieved
     * @returns {ActiveBoxContent}
     */
    getActiveBoxContent(i) {
      if (i >= this.activeBoxContentArray.length) {
        for (let j = this.activeBoxContentArray.length; j <= i; j++)
          this.activeBoxContentArray.push(new ActiveBoxContent())
      }
      return this.activeBoxContentArray[i]
    }

    /**
     * Finds the ActiveBoxContent with specific `id` and `item` values
     * @param {number} id
     * @param {number} item
     * @returns {ActiveBoxContent}
     */
    getActiveBoxContentWith(id, item) {
      return this.activeBoxContentArray.find(bxc => bxc.id === id && bxc.item === item)
    }

    /**
     * Sets the content of the cells based on a image spliced by a shaper
     * @param {MediaBag} mb - The MediaBag used to retrieve the image
     * @param {Shaper} sh - The Shaper used to splice the image
     * @param {boolean} roundSizes - When `true`, the size and coordinates of cells will be rounded
     * to the nearest integer values.
     */
    setImgContent(mb, sh, roundSizes) {
      if (sh)
        this.setShaper(sh)

      if (this.shaper.className === '@Holes')
        this.shaper.hasRemainder = true

      this.ncw = this.shaper.nCols
      this.nch = this.shaper.nRows
      const mbe = mb.elements[this.imgName]
      if (mb && this.imgName && mbe && mbe.ready) {
        this.img = mbe.data
        if (mbe.animated)
          this.animatedGifFile = mbe.getFullPath()
        this.w = this.img.width / this.ncw
        this.h = this.img.height / this.nch
        if (roundSizes) {
          this.w = Math.round(this.w)
          this.h = Math.round(this.h)
        }
      } else {
        this.img = null
        this.w = Math.max(this.w, 10)
        this.h = Math.max(this.h, 10)
      }

      const r = new AWT.Rectangle(0, 0, this.w * this.ncw, this.h * this.nch)
      for (let i = 0; i < this.shaper.nCells; i++)
        this.getActiveBoxContent(i).setImgContent(this.img, this.shaper.getShape(i, r), this.animatedGifFile)

      if (this.shaper.hasRemainder) {
        this.backgroundContent = new ActiveBoxContent()
        this.backgroundContent.setImgContent(this.img, this.shaper.getRemainderShape(r))
      }
    }

    /**
     * Sets the content of this bag based on an array of strings
     * @param {string[]} txt - The array of strings to be used as content.
     * @param {number} setNcw - Number of columns
     * @param {number} setNch - Number of rows
     */
    setTextContent(txt, setNcw, setNch) {
      this.ncw = Math.max(1, setNcw)
      this.nch = Math.max(1, setNch)
      const n = this.ncw * this.nch
      for (let i = 0; i < n; i++)
        this.getActiveBoxContent(i).setTextContent(i >= txt.length || txt[i] === null ? '' : txt[i])
    }

    /**
     * Sets `id` values to a all the {@link ActiveBoxContent} elements of his bag.
     * @param {number[]} ids -Array of numeric identifiers
     */
    setIds(ids) {
      for (let i = 0; i < ids.length && i < this.activeBoxContentArray.length; i++)
        this.getActiveBoxContent(i).id = ids[i]
    }

    /**
     * Sets `value` to the `key` attribute of all cells
     * @param {string} key - The key where the value will be stored
     * @param {*} value - The supplied value. Can be of any type.
     */
    setCellsAttribute(key, value) {
      this.activeBoxContentArray.forEach(abc => abc[key] = value)
    }

    /**
     *
     * Cheks if the `id` values of all {@link ActiveBoxContent} objects are -1 and, if true,
     * sets new ids to them, with values between 0 and `maxId`
     * @param {number} maxId - The maximum value of identifiers
     */
    avoidAllIdsNull(maxId) {
      if (this.activeBoxContentArray.every(abc => abc.id === -1)) {
        maxId = Math.max(1, maxId)
        this.activeBoxContentArray.forEach((abc, n) => { abc.id = n % maxId })
      }
    }
  }

  Object.assign(ActiveBagContent.prototype, {
    /**
     * The global identifier of this object: `primary`, `secondary`...
     * @name ActiveBagContent#id
     * @type {string} */
    id: 'primary',
    /**
     * The name of the image file used as a common image of this bag
     * @name ActiveBagContent#imgName
     * @type {string} */
    imgName: null,
    /**
     * The built image object
     * @name ActiveBagContent#img
     * @type {external:HTMLImageElement} */
    img: null,
    /**
     * Name of the img source when is an animated GIF
     * @name ActiveBagContent#animatedGifFile
     * @type {string} */
    animatedGifFile: null,
    /**
     * Number of columns when cells are distributed in a grid
     * @name ActiveBagContent#ncw
     * @type {number} */
    ncw: 1,
    /**
     * Number of rows when cells are distributed in a grid
     * @name ActiveBagContent#nch
     * @type {number} */
    nch: 1,
    /**
     * Optimal cell width
     * @name ActiveBagContent#w
     * @type {number} */
    w: Utils.settings.DEFAULT_GRID_ELEMENT_SIZE,
    /**
     * Optimal cell height
     * @name ActiveBagContent#h
     * @type {number} */
    h: Utils.settings.DEFAULT_GRID_ELEMENT_SIZE,
    /**
     * Whether the cells must have a border or not
     * @name ActiveBagContent#border
     * @type {boolean} */
    border: true,
    /**
     * The BoxBase used for this bag of cell contents
     * @name ActiveBagContent#bb
     * @type {BoxBase} */
    bb: null,
    /**
     * The Shaper used to define the specific shape of each cell
     * @name ActiveBagContent#shaper
     * @type {Shaper} */
    shaper: null,
    /**
     * An optional ActiveBoxContent object with background settings.
     * @name ActiveBagContent#backgroundContent
     * @type {ActiveBoxContent} */
    backgroundContent: null,
    /**
     * The main Array of {@link ActiveBoxContent} objects
     * @name ActiveBagContent#activeBoxContentArray
     * @type {ActiveBoxContent[]} */
    activeBoxContentArray: null,
    /**
     * The default value to be assigned at the 'id' field of children
     * @name ActiveBagContent#defaultIdValue
     * @type {number} */
    defaultIdValue: -1,
  })

  return ActiveBagContent
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/boxes/ActiveBox.js":
/*!********************************!*\
  !*** ./src/boxes/ActiveBox.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : boxes/ActiveBox.js
 *  Created : 18/04/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ./AbstractBox */ "./src/boxes/AbstractBox.js"),
  __webpack_require__(/*! ./ActiveBoxContent */ "./src/boxes/ActiveBoxContent.js"),
  __webpack_require__(/*! ./ActiveBagContent */ "./src/boxes/ActiveBagContent.js"),
  __webpack_require__(/*! ../AWT */ "./src/AWT.js"),
  __webpack_require__(/*! ../Utils */ "./src/Utils.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, AbstractBox, ActiveBoxContent, ActiveBagContent, AWT, Utils) {

  /**
   * Objects of this class are widely used in JClic activities: cells in puzzles and associations,
   * messages and other objects are active boxes.
   *
   * The specific content, size and location of `ActiveBox` objects is determined by its
   * {@link ActiveBoxContent} member. Most ActiveBoxes have only one content, but some of them can
   * have a secondary or "alternative" content stored in the `altContent` field. This content is
   * used only when the `alternative` flag of the ActiveBox is `on`.
   *
   * Active boxes can host video and interactive media content (specified in the `mediaContent`
   * member of the {@link ActiveBoxContent} through its `hostedMediaPlayer` member.
   * @exports ActiveBox
   * @class
   * @extends AbstractBox
   */
  class ActiveBox extends AbstractBox {
    /**
     * ActiveBox constructor
     * @param {?AbstractBox} parent - The AbstractBox to which this ActiveBox belongs
     * @param {?AWT.Container} container - The container where this box is placed.
     * @param {?BoxBase} boxBase - The object where colors, fonts, border and other graphic properties
     * of this box are defined.
     * @param {number=} setIdLoc - A numeric identifier, used to locate this box in a set of sibling objects.
     * @param {AWT.Rectangle=} rect - The initial bounds of the box.
     */
    constructor(parent, container, boxBase, setIdLoc, rect) {
      // ActiveBox extends AbstractBox
      super(parent, container, boxBase)
      this.clear()
      if (typeof setIdLoc === 'number') {
        this.idLoc = setIdLoc
        this.idAss = 0
        this.idOrder = 0
      }
      if (rect)
        this.setBounds(rect)
    }

    /**
     * Factory constructor that creates a new cell inside a JQuery DOM element.
     * @param {external:jQuery} $dom - The DOM element that will act as a container
     * @param {ActiveBoxContent} abc - The cell's content. Must not be null and have the `dimension`
     * member initialized.
     * @returns {ActiveBox}
     */
    static createCell($dom, abc) {
      if (abc && abc.dimension) {
        const
          box = new ActiveBox(),
          $canvas = $('<canvas width="' + abc.dimension.width + '" height="' + abc.dimension.height + '"/>'),
          rect = new AWT.Rectangle(0, 0, abc.dimension.width, abc.dimension.height)
        box.container = new AWT.Container()
        box.container.$div = $dom
        box.setContent(abc)
        box.setBounds(rect)
        $dom.append($canvas)
        // Create accessible, focusable elements only for cells with media content
        // TODO: remove focus mark on blur in cells placed on fillInBlanks activities
        if (abc.mediaContent)
          box.buildAccessibleElement($canvas, $dom)
        box.update($canvas.get(-1).getContext('2d'), rect)
        return box
      }
    }

    /**
     * Returns the current content used by the box
     * @returns {ActiveBoxContent}
     */
    getCurrentContent() {
      return this.isAlternative() ? this.altContent : this.content
    }

    /**
     * Returns the current content, creating an empty one if needed.
     * @returns {ActiveBoxContent}
     */
    getContent() {
      if (!this.content)
        this.setContent(new ActiveBoxContent())
      return this.content
    }

    /**
     * Clears the current content
     */
    clear() {
      this.content = null
      this.altContent = null
      this.idOrder = -1
      this.setInactive(true)
      if (!this.hasHostedComponent)
        this.setHostedComponent(null)
      this.setHostedMediaPlayer(null)
      if (this.$accessibleElement)
        this.$accessibleElement.html('')
      if (this.tmpTrans)
        this.tmpTrans = false
      this.invalidate()
    }

    /**
     * Checks if two ActiveBox objects have equivalent content
     * @param {ActiveBox} bx - The ActiveBox to check against this.
     * @param {boolean=} checkCase - When `true`, the comparing will be case-sensitive.
     * @returns {boolean} - `true` if both cells are equivalent.
     */
    isEquivalent(bx, checkCase) {
      return bx !== null &&
        this.content !== null &&
        this.content.isEquivalent(bx.content, checkCase)
    }

    /**
     * Same functionality as {@link ActiveBox#isEquivalent isEquivalent}, but comparing the current content.
     * @param {ActiveBox} bx - The ActiveBox to check against this.
     * @param {boolean=} checkCase - When `true`, the comparing will be case-sensitive.
     * @returns {boolean}
     */
    isCurrentContentEquivalent(bx, checkCase) {
      return bx !== null &&
        this.getCurrentContent() !== null &&
        this.getCurrentContent().isEquivalent(bx.getCurrentContent(), checkCase)
    }

    /**
     * Swaps the location of two active boxes
     * @param {ActiveBox} bx - The ActiveBox to swap with this one.
     */
    exchangeLocation(bx) {
      const
        pt = new AWT.Point(this.pos),
        idLoc0 = this.idLoc
      this.moveTo(bx.pos)
      bx.moveTo(pt)
      this.idLoc = bx.idLoc
      bx.idLoc = idLoc0
    }

    /**
     * Copy the content of another ActiveBox into this one
     * @param {ActiveBox} bx - The ActiveBox from which to take the content
     */
    copyContent(bx) {
      this.idOrder = bx.idOrder
      this.idAss = bx.idAss
      this.content = bx.content
      this.altContent = bx.altContent
      if (this.content) {
        if (this.content.bb)
          this.setBoxBase(this.content.bb)
        if (this.content.border !== null && bx.hasBorder() !== this.content.border)
          this.setBorder(this.content.border)
      }
      this.setInactive(bx.isInactive())
      this.setInverted(bx.isInverted())
      this.setAlternative(bx.isAlternative())
      this.setHostedComponent(bx.getHostedComponent())
      this.hasHostedComponent = bx.hasHostedComponent
      this.setHostedMediaPlayer(bx.hostedMediaPlayer)
      if (this.hostedMediaPlayer)
        this.hostedMediaPlayer.setVisualComponentVisible(!this.isInactive() && this.isVisible())
      if (this.$accessibleElement)
        this.$accessibleElement.html(this.toString())
    }

    /**
     *
     * Exhanges the content of this ActiveBox with another one
     * @param {ActiveBox} bx - The ActiveBox with which to exchange the content.
     */
    exchangeContent(bx) {
      const bx0 = new ActiveBox(this.getParent(), this.getContainerX(), this.boxBase)
      bx0.copyContent(this)
      this.copyContent(bx)
      bx.copyContent(bx0)
    }

    /**
     *
     * Sets the text content of this ActiveBox.
     * @param {strint} tx - The text to set.
     */
    setTextContent(tx) {
      // only plain text!
      if (!tx)
        tx = ''
      if (!this.content)
        this.content = new ActiveBoxContent()
      this.content.text = tx
      this.content.mediaContent = null
      this.content.img = null

      this.setHostedComponent(null)
      this.setInactive(false)
      this.checkHostedComponent()
      this.setHostedMediaPlayer(null)

      if (this.$accessibleElement)
        this.$accessibleElement.html(this.toString())
    }

    /**
     * Sets the default value to `idAss`
     */
    setDefaultIdAss() {
      this.idAss = this.content === null ? -1 : this.content.id
    }

    /**
     * Checks if this ActiveBox is at its original place.
     * @returns {boolean}
     */
    isAtPlace() {
      return this.idOrder === this.idLoc
    }

    /**
     * Sets the {@link ActiveBoxContent} of this ActiveBox
     * @param {(ActiveBoxContent|ActiveBagContent)} abc - Object containing the content to set.
     * @param {number} i - When `abc` is an {@link ActiveBagContent}, this field indicates an
     * index in the content array.
     */
    setContent(abc, i) {
      if (abc instanceof ActiveBagContent) {
        if (i < 0)
          i = this.idOrder
        if (i >= abc.getNumCells())
          return
        if (abc.bb !== this.boxBase)
          this.setBoxBase(abc.bb)

        // `abc` is now an [ActiveBoxContent](ActiveBoxContent.html)
        abc = abc.getActiveBoxContent(i)
      }
      this.setHostedComponent(null)
      this.setHostedMediaPlayer(null)
      this.content = abc
      if (abc) {
        if (abc.animatedGifFile && !this.specialShape) {
          const url = `url(${abc.animatedGifFile})`
          const $hc = $('<span/>').css({
            'background-image': url,
            'background-position': 'center',
            'background-repeat': 'no-repeat'
          })
          // Save background image for later use
          $hc.data('background-image', url)

          if (abc.imgClip !== null) {
            $hc.css({
              'background-origin': 'border-box',
              'background-position': `${-abc.imgClip.pos.x}px ${-abc.imgClip.pos.y}px`
              // TODO: Use background-size only when the original image must be compressed
              //,'background-size': abc.imgClip.dim.width + 'px ' + abc.imgClip.dim.height + 'px'
            })
          }
          this.setHostedComponent($hc)
        }

        if (abc.bb !== this.boxBase)
          this.setBoxBase(abc.bb)

        if (abc.innerHtmlText)
          this.setHostedComponent($('<div/>').html(abc.innerHtmlText))

        if (abc.hasOwnProperty('border') && this.hasBorder() !== abc.border)
          this.setBorder(abc.border)
        this.setInactive(false)
        if (abc.amp)
          this.setHostedMediaPlayer(abc.amp)
        this.checkHostedComponent()
        this.checkAutoStartMedia()
      } else
        this.clear()

      this.invalidate()
      if (this.$accessibleElement)
        this.$accessibleElement.html(this.toString())
    }

    /**
     * Sets the {@link ActiveBoxContent} that will act as an alternative content (`altContent` field)
     * of this ActiveBox,
     * @param {(ActiveBoxContent|ActiveBagContent)} abc - Object containing the content to set.
     * @param {number} i - When `abc` is an {@link ActiveBagContent}, this field indicates an
     * index in the content array.
     */
    setAltContent(abc, i) {
      if (abc instanceof ActiveBagContent) {
        if (i < 0)
          i = this.idOrder
        // `abc` is now an [ActiveBoxContent](ActiveBoxContent.html)
        abc = abc.getActiveBoxContent(i)
      }
      this.altContent = abc
      this.checkHostedComponent()
      if (this.isAlternative() && this.hostedMediaPlayer)
        this.setHostedMediaPlayer(null)

      if (this.$accessibleElement) {
        this.$accessibleElement.html(this.toString())
        this.$accessibleElement.prop('disabled', true)
      }
    }

    /**
     * Sets the current content of this ActiveBox
     * @param {ActiveBoxContent} abc - The content to set.
     */
    setCurrentContent(abc) {
      if (this.isAlternative())
        this.setAltContent(abc)
      else
        this.setContent(abc)
      this.invalidate()
    }

    /**
     * Puts this ActiveBox in "alternative" mode, meaning that `altContent` will be used instead of `content`
     */
    switchToAlt() {
      if (this.isAlternative() || !this.altContent || this.altContent.isEmpty())
        return false
      this.setHostedComponent(null)
      this.setHostedMediaPlayer(null)
      this.setAlternative(true)
      this.tmpTrans = false
      this.checkHostedComponent()
      this.checkAutoStartMedia()

      if (this.$accessibleElement)
        this.$accessibleElement.html(this.toString())

      return true
    }

    /**
     * Checks the presence of content susceptible to be treated as HTML DOM embedded in this ActiveBox.
     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Drawing_DOM_objects_into_a_canvas}
     */
    checkHostedComponent() {
      if (this.hasHostedComponent)
        return
      const
        abc = this.getCurrentContent(),
        bb = this.getBoxBaseResolve()
      if (!this.isInactive() && abc && abc.innerHtmlText)
        bb.getCSS()['text-align'] = abc.txtAlign.h.replace('middle', 'center')
    }

    /**
     * Checks if the call has a {@link MediaContent} set to `autostart`, and launches it when found.
     */
    checkAutoStartMedia() {
      const cnt = this.getContent()
      if (cnt && cnt.mediaContent && cnt.mediaContent.autoStart && cnt.amp) {
        cnt.amp.playNow(this)
      }
    }

    /**
     * Draws the content of this Activebox on the specified canvas context.
     * @override
     * @param {external:CanvasRenderingContext2D} ctx - The canvas rendering context used to draw the
     * box content.
     * @param {AWT.Rectangle=} dirtyRegion - The area that must be repainted. `null` refers to the whole box.
     */
    updateContent(ctx, dirtyRegion) {

      const
        abc = this.getCurrentContent(),
        bb = this.getBoxBaseResolve()

      if (this.isInactive() || !abc || this.dim.width < 2 || this.dim.height < 2) {
        this._focusAccessibleElement(ctx)
        return true
      }

      if (dirtyRegion && !this.intersects(dirtyRegion))
        return false

      let imgRect = null

      if (abc.img && !this.tmpTrans) {
        try {
          if (abc.imgClip) {
            const r = abc.imgClip.getBounds()
            let img = abc.img
            if (!abc.imgClip.isRect()) {
              // Prepare a temporary `canvas` object that will contain the clipped image
              const tmpCanvas = document.createElement('canvas')
              tmpCanvas.width = r.pos.x + r.dim.width
              tmpCanvas.height = r.pos.y + r.dim.height
              const tmpCtx = tmpCanvas.getContext('2d')
              // Set the clipping region
              abc.imgClip.clip(tmpCtx)
              // Draw the original image
              tmpCtx.drawImage(abc.img, 0, 0)
              // Use the temporary canvas as a source image
              // (as seen on: [http://stackoverflow.com/questions/7242006/html5-copy-a-canvas-to-image-and-back])
              img = tmpCanvas
            }
            ctx.drawImage(img,
              Math.max(0, r.pos.x), Math.max(0, r.pos.y), Math.min(img.width, r.dim.width), Math.min(img.height, r.dim.height),
              this.pos.x, this.pos.y, this.dim.width, this.dim.height)
          } else {
            let
              imgw = abc.img.naturalWidth || this.dim.width,
              imgh = abc.img.naturalHeight || this.dim.height,
              compress = false,
              scale = 1.0
            if (Utils.settings.COMPRESS_IMAGES &&
              (this.dim.width > 0 && this.dim.height > 0) &&
              (imgw > this.dim.width || imgh > this.dim.height)) {

              scale = Math.min(this.dim.width / imgw, this.dim.height / imgh)
              imgw *= scale
              imgh *= scale
              compress = true
            }
            const xs = abc.imgAlign.h === 'left' ? 0
              : abc.imgAlign.h === 'right' ? this.dim.width - imgw
                : (this.dim.width - imgw) / 2
            const ys = abc.imgAlign.v === 'top' ? 0
              : abc.imgAlign.v === 'bottom' ? this.dim.height - imgh
                : (this.dim.height - imgh) / 2
            if (compress) {
              ctx.drawImage(abc.img, this.pos.x + xs, this.pos.y + ys, imgw, imgh)
            } else
              ctx.drawImage(abc.img, this.pos.x + xs, this.pos.y + ys)

            if (abc.avoidOverlapping && abc.text)
              imgRect = new AWT.Rectangle(
                Math.max(0, xs), Math.max(0, ys),
                Math.min(this.dim.width, imgw), Math.min(this.dim.height, imgh))
          }
        } catch (ex) {
          Utils.log('warn', `Unable to draw image "${abc.imgName}": ${ex.message}`)
        }
      }
      if (abc.text && abc.text.length > 0) {
        let
          px = this.pos.x,
          py = this.pos.y,
          pWidth = this.dim.width,
          pHeight = this.dim.height

        if (imgRect) {
          // There is an image in the ActiveBox
          // Try to compute the current space available for text
          const
            prx = [0, imgRect.pos.x, imgRect.pos.x + imgRect.dim.width, pWidth],
            pry = [0, imgRect.pos.y, imgRect.pos.y + imgRect.dim.height, pHeight],
            rr = [
              // Calc four rectangles inside BoxBag, sourronding imgRect
              // Top rectangle:
              new AWT.Rectangle(prx[0], pry[0], prx[3], pry[1]),
              // Bottom rectangle:
              new AWT.Rectangle(prx[0], pry[2], prx[3], pry[3] - pry[2]),
              // Left rectangle:
              new AWT.Rectangle(prx[0], pry[0], prx[1], pry[3]),
              // Right rectangle:
              new AWT.Rectangle(prx[2], pry[0], prx[3] - prx[2], pry[3])
            ]
          //
          // Find the rectangle with highest surface, and in accordance
          // with the `txtAlign` values of the current
          // [ActiveBoxContent](ActiveBoxContent)
          let rmax = rr[0]
          let maxSurface = rmax.dim.width * rmax.dim.height
          for (let i = 1; i < rr.length; i++) {
            let s = rr[i].dim.width * rr[i].dim.height
            if (s > maxSurface - 1) {
              if (Math.abs(s - maxSurface) <= 1) {
                let b = false
                switch (i) {
                  case 1:
                    b = abc.txtAlign.v === 'bottom'
                    break
                  case 2:
                    b = abc.txtAlign.h === 'left'
                    break
                  case 3:
                    b = abc.txtAlign.h === 'right'
                    break
                }
                if (!b)
                  continue
              }
              maxSurface = s
              rmax = rr[i]
            }
          }
          // Finally, this is the surface available to draw text:
          px += rmax.pos.x
          py += rmax.pos.y
          pWidth = rmax.dim.width
          pHeight = rmax.dim.height
        }

        // Calc available width and height, discounting margins
        const
          availWidth = Math.max(5, pWidth - 2 * bb.textMargin),
          availHeight = Math.max(5, pHeight - 2 * bb.textMargin)

        // Calc the size of each line
        const lines = bb.prepareText(ctx, abc.text, availWidth, availHeight)

        ctx.font = bb.font.cssFont()
        ctx.textBaseline = 'alphabetic'
        const
          lineHeight = bb.font.getHeight(),
          totalHeight = lineHeight * lines.length

        // Calc the vertical co-ordinate of the first line
        // Default is 'middle'
        let y = py + bb.textMargin + (abc.txtAlign.v === 'top' ? 0
          : abc.txtAlign.v === 'bottom' ? availHeight - totalHeight
            : (availHeight - totalHeight) / 2) + bb.font.getMetrics().ascent

        for (let l = 0; l < lines.length; l++, y += lineHeight) {
          // Calc the horizontal position of each line
          // Default is 'middle'
          const x = px + bb.textMargin + (abc.txtAlign.h === 'left' ? 0
            : abc.txtAlign.h === 'right' ?
              availWidth - lines[l].size.width
              : (availWidth - lines[l].size.width) / 2)

          if (bb.shadow) {
            // Render text shadow
            const d = Math.max(1, bb.font.size / 10)
            ctx.fillStyle = bb.shadowColor
            ctx.fillText(lines[l].text, x + d, y + d)
          }
          // Render text
          ctx.fillStyle = this.isInverted() ? bb.backColor
            : this.isAlternative() ? bb.alternativeColor : bb.textColor
          ctx.fillText(lines[l].text, x, y)
        }
      }

      this._focusAccessibleElement(ctx)

      return true
    }

    /**
     * Draw focus on accessible element if needed
     * @param {external:CanvasRenderingContext2D} ctx - The canvas rendering context
     */
    _focusAccessibleElement(ctx) {
      if (Utils.settings.CANVAS_DRAW_FOCUS && this.$accessibleElement) {
        this.shape.preparePath(ctx);
        ctx.drawFocusIfNeeded(this.$accessibleElement.get(-1));
      }
    }

    /**
     * Gets the `description` field of the current {@link ActiveBoxContent}
     * @returns {string}
     */
    getDescription() {
      return this.content ? this.content.getDescription() : ''
    }

    /**
     * Gets a descriptive text for this ActiveBox
     * @returns {String}
     */
    toString() {
      return (this.role !== 'cell' ? Utils.getMsg(this.role) : '') + (this.getCurrentContent() || '-').toString()
    }

    /**
     * Plays the action or media associated with this ActiveBox
     * @param {PlayStation} ps - Usually, a {@link JClicPlayer}
     * @param {function[]} delayedActions - If set, store the the action in this array for future execution
     */
    playMedia(ps, delayedActions = null) {
      const abc = this.getCurrentContent()
      if (abc && abc.mediaContent) {
        Utils.log('debug', `Playing: ${abc.mediaContent.toString()}`)
        ps.playMedia(abc.mediaContent, this, delayedActions)
        return true
      }
      return false
    }

    /**
     * Sets the hosted media player of this ActiveBox
     * @param {ActiveMediaPlayer} amp - The media player.
     */
    setHostedMediaPlayer(amp) {
      const old = this.hostedMediaPlayer
      this.hostedMediaPlayer = amp
      if (old && old !== amp)
        old.linkTo(null)
      if (amp)
        amp.linkTo(this)
    }

    /**
     * Sets a new size and/or dimension to this box.
     * @override
     * @param {(AWT.Rectangle|number)} rect - An AWT.Rectangle object, or the `x` coordinate of the
     * upper-left corner of a new rectangle.
     * @param {number=} y - `y` coordinate of the upper-left corner of the new rectangle.
     * @param {number=} w - Width of the new rectangle.
     * @param {number=} h - Height of the new rectangle.
     */
    setBounds(rect, y, w, h) {
      if (typeof rect === 'number')
        // arguments are co-ordinates and size
        rect = new AWT.Rectangle(rect, y, w, h)
      // Rectangle comparision
      if (this.equals(rect))
        return
      super.setBounds(rect)
      if (this.hostedMediaPlayer)
        this.hostedMediaPlayer.checkVisualComponentBounds(this)
    }

    /**
     * Places and resizes {@link AbstractBox#$hostedComponent $hostedComponent}, based on the size
     * and position of this box.
     * @override
     * @param {boolean} sizeChanged - `true` when this {@link ActiveBox} has changed its size
     */
    setHostedComponentBounds(sizeChanged) {
      if (this.$hostedComponent) {
        super.setHostedComponentBounds(sizeChanged)
        const abc = this.getCurrentContent()
        if (sizeChanged && abc && abc.animatedGifFile && abc.img) {
          const
            img = abc.img,
            w = Math.max(img.naturalWidth, this.dim.width),
            h = Math.max(img.naturalHeight, this.dim.height)
          let scale = 1, bgSize = ''
          if (abc.imgClip) {
            const r = abc.imgClip.getBounds()
            if (this.dim.width < r.dim.width || this.dim.height < r.dim.height) {
              scale = Math.min(this.dim.width / r.dim.width, this.dim.height / r.dim.height)
              bgSize = `${w * scale}px ${h * scale}px`
            }
            this.$hostedComponent.css({
              'background-position': `${-abc.imgClip.pos.x * scale}px ${-abc.imgClip.pos.y * scale}px`,
              'background-size': bgSize
            })
          } else {
            if (this.dim.width < w || this.dim.height < h) {
              scale = Math.min(this.dim.width / w, this.dim.height / h)
              bgSize = `${w * scale}px ${h * scale}px`
            }
            this.$hostedComponent.css({
              'background-size': bgSize
            })
          }
        }
      }
    }

    /**
     * Builds a hidden `buton` that will act as a accessible element associated to the canvas area
     * of this ActiveBox.
     * The button will be created only when `CanvasRenderingContext2D` has a method named `addHitRegion`.
     * See https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Hit_regions_and_accessibility
     * for more information and supported browsers.
     * @param {external:jQuery} $canvas - The `canvas` where this `ActiveBox` will deploy, wrapped up in a jQuery object
     * @param {external:jQuery} $clickReceiver - The DOM element that will be notified  when `$accessibleElement` is activated.
     * @param {external:jQuery=} $canvasGroup - Optional DOM element containing the accessible element. Useful to group cells in associations. When `null`, the element belongs to $canvas.
     * @param {string=} eventType - Type of event sent to $clickReceiver. Default is `click`.
     * @returns {external:jQuery} - The accessible element associated to this ActiveBox.
     */
    buildAccessibleElement($canvas, $clickReceiver, $canvasGroup, eventType) {
      if (this.$accessibleElement)
        this.$accessibleElement.remove()

      const canvas = $canvas.get(-1)
      if (canvas.width > 0 && canvas.height > 0) {
        const
          id = Math.round(Math.random() * 100000),
          disabled = this.isInactive() && !this.accessibleAlwaysActive
        this.$accessibleElement = $('<button/>', {
          tabindex: disabled ? -1 : 0,
          id: `AE${id}`,
          disabled: disabled
        })
          .html(this.toString())
          .click(ev => {
            // Check if event was produced by a mouse click
            if (ev.originalEvent && (ev.originalEvent.pageX !== 0 || ev.originalEvent.pageY !== 0)) {
              // Mouse clicks should be processed directly by the canvas, so ignore this accessible event
              return true
            }
            Utils.log('debug', `Click on accessible element: ${this.toString()}`)
            const
              $event = $.Event(eventType || 'click'),
              bounds = this.getBounds(),
              offset = $canvas.offset()
            $event.pageX = offset.left + bounds.pos.x + bounds.dim.width / 2
            $event.pageY = offset.top + bounds.pos.y + bounds.dim.height / 2
            $clickReceiver.trigger($event)
            return false
          })
        const $dest = $canvasGroup || $canvas
        $dest.append(this.$accessibleElement)
        if (Utils.settings.CANVAS_DRAW_FOCUS) {
          this.$accessibleElement.on('focus blur', ev => {
            Utils.log('debug', `${ev.type} event on accessible element: ${this.toString()}`)
            this.invalidate();
            if (this.container)
              this.container.update();
            this.updateContent(canvas.getContext('2d'), null);
          })
        }
      }
      return this.$accessibleElement
    }
  }

  Object.assign(ActiveBox.prototype, {
    /**
     * Identifier used to set the relative position of this box in a set.
     * @name ActiveBox#idOrder
     * @type {number} */
    idOrder: -1,
    /**
     * Identifier used to set a relative position in the space.
     * @name ActiveBox#idLoc
     * @type {number} */
    idLoc: -1,
    /**
     * Identifier used to establish relationships between cells of different sets (in associations)
     * @name ActiveBox#idAss
     * @type {number} */
    idAss: -1,
    /**
     * Backup of the original position of the cell, useful when the real position must be restored after a temporary change.
     * @name ActiveBox#pos0
     * @type {AWT.Point} */
    pos0: null,
    /**
     * Main content of this box
     * @name ActiveBox#content
     * @type {ActiveBoxContent} */
    content: null,
    /**
     * Alternative content of this box
     * @name ActiveBox#altContent
     * @type {ActiveBoxContent} */
    altContent: null,
    /**
     * Flag to check if this box has a 'hosted component'
     * @name ActiveBox#hostedComponent
     * @type {boolean} */
    hasHostedComponent: false,
    /**
     * The media player associated to this box
     * @name ActiveBox#hostedMediaPlayer
     * @type {ActiveMediaPlayer} */
    hostedMediaPlayer: null,
    /**
     * Indicates that this box is used as a background. When drawing, the clipping region must be respected.
     * @name ActiveBox#isBackground
     * @type {boolean} */
    isBackground: false,
  })

  return ActiveBox
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/boxes/ActiveBoxBag.js":
/*!***********************************!*\
  !*** ./src/boxes/ActiveBoxBag.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : boxes/ActiveBoxBag.js
 *  Created : 21/04/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ./BoxBag */ "./src/boxes/BoxBag.js"),
  __webpack_require__(/*! ../AWT */ "./src/AWT.js"),
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, BoxBag, AWT) {

  /**
   * This class is a special case of {@link BoxBag} containing only objects of type {@link ActiveBox}.
   * In addition to the members and methods of `BoxBag`, it implements specific methods to deal with
   * {@link ActiveBagContent} objects and with the other specific members of `ActiveBox` like its "ids"
   * (`idOrder`, `idLoc` and `idAss`).
   * @exports ActiveBoxBag
   * @class
   * @extends BoxBag
   */
  class ActiveBoxBag extends BoxBag {
    /**
     * ActiveBoxBag constructor
     * @param {?AbstractBox} parent - The AbstractBox to which this box bag belongs
     * @param {?AWT.Container} container - The container where this box bag is placed.
     * @param {?BoxBase} boxBase - The object where colors, fonts, border and other graphic properties
     * of this box bag are defined.
     */
    constructor(parent, container, boxBase) {
      // ActiveBoxBag extends BoxBag
      super(parent, container, boxBase)
    }

    /**
     * Adds an {@link ActiveBox} to this bag
     * @param {ActiveBox} bx - The ActiveBox to be added to this bag
     */
    addActiveBox(bx) {
      bx.idLoc = this.cells.length
      bx.idOrder = bx.idLoc
      return this.addBox(bx)
    }

    /**
     * Finds an ActiveBox by its relative location (`idLoc` field)
     * @param {number} idLoc
     * @returns {ActiveBox}
     */
    getActiveBox(idLoc) {
      return this.getBox(idLoc)
    }

    /**
     * Gets the background box
     * @returns {ActiveBox}
     */
    getBackgroundActiveBox() {
      return this.getBackgroundBox()
    }

    /**
     * Sets the content of members of this ActiveBoxBag, based on one or more {@link ActiveBagContent}
     * objects.
     * @param {ActiveBagContent} abc - The main bag of content
     * @param {?ActiveBagContent=} altAbc - The alternative bag of content
     * @param {number=} fromIndex - Starts taking the cell content located at this position on the bag
     * @param {number=} toCell - Starts filling the box located at this position on the ActiveBoxBag
     * @param {type=} numCells - Acts only with a limited number of elements.
     */
    setContent(abc, altAbc, fromIndex, toCell, numCells) {
      if (!fromIndex)
        fromIndex = 0
      if (!toCell)
        toCell = 0
      if (!numCells)
        numCells = this.cells.length

      for (let i = 0; i < numCells; i++) {
        const bx = this.getActiveBox(toCell + i)
        bx.setContent(abc, fromIndex + i)
        bx.setAlternative(false)
        if (altAbc)
          bx.setAltContent(altAbc, fromIndex + i)
      }

      if (abc.backgroundContent !== null && this.getBackgroundActiveBox() !== null) {
        const bx = this.getBackgroundActiveBox()
        bx.setContent(abc.backgroundContent)
        if (abc.bb !== bx.boxBase)
          bx.setBoxBase(abc.bb)
      }
    }

    /**
     * Finds an ActiveBox by location
     * @param {AWT.Point} point - The location to search for
     * @returns {ActiveBox}
     */
    findActiveBox(point) {
      return this.findBox(point)
    }

    /**
     * Clears the content of all boxes
     */
    clearAllBoxes() {
      this.cells.forEach(bx => bx.clear())
    }

    /**
     * Clears the content of all boxes and background box
     */
    clearAll() {
      this.clearAllBoxes()
      if (this.backgroundBox !== null)
        this.getBackgroundActiveBox().clear()
    }

    /**
     * Count the number of cells that are at its original place
     * @returns {number}
     */
    countCellsAtPlace() {
      return this.cells.reduce((n, bx) => bx.isAtPlace() ? ++n : n, 0)
    }

    /**
     * Finds the {@link ActiveBox} that has the specified `idLoc` attribute
     * @param {number} idLoc - The idLoc to search for
     * @returns {ActiveBox}
     */
    getActiveBoxWithIdLoc(idLoc) {
      return this.cells.find(bx => bx.idLoc === idLoc) || null
    }

    /**
     * Checks if the place occupied by a cell corresponds to a cell with equivalent content.
     * @param {ActiveBox} bx - The box to check
     * @param {boolean} checkCase - If `true`, check case when comparing texts
     * @returns {boolean}
     */
    cellIsAtEquivalentPlace(bx, checkCase) {
      return bx.isAtPlace() ||
        bx.isEquivalent(this.getActiveBoxWithIdLoc(bx.idOrder), checkCase)
    }

    /**
     * Count the number of cells that are at its original place or equivalent
     * @param {type} checkCase -  - If `true`, check case when comparing texts
     * @returns {number}
     */
    countCellsAtEquivalentPlace(checkCase) {
      return this.cells.reduce((n, bx) => this.cellIsAtEquivalentPlace(bx, checkCase) ? ++n : n, 0)
    }

    /**
     * Counts the number of cells that have the provided `idAss` attribute
     * @param {number} idAss - The `idAss` attribute to search
     * @returns {number}
     */
    countCellsWithIdAss(idAss) {
      return this.cells.reduce((n, bx) => bx.idAss === idAss ? ++n : n, 0)
    }

    /**
     * Resets the default `idAss` attribute on all cells
     */
    setDefaultIdAss() {
      this.cells.map(bx => bx.setDefaultIdAss())
    }

    /**
     * Shuffles the cells
     * @param {number} times - Number of times to shuffle
     * @param {boolean} fitInArea - Ensure that all cells are inside the bag rectangle
     */
    scrambleCells(times, fitInArea) {
      let nc = this.cells.length
      if (nc >= 2) {
        // Array of AWT.Point objects
        const
          pos = [],
          idLoc = [],
          p = new AWT.Point()

        for (let i = 0; i < nc; i++) {
          const bx = this.getActiveBox(i)
          pos[i] = new AWT.Point(bx.pos)
          idLoc[i] = bx.idLoc
        }

        for (let i = 0; i < times; i++) {
          const
            r1 = Math.floor(Math.random() * nc),
            r2 = Math.floor(Math.random() * nc)
          if (r1 !== r2) {
            p.moveTo(pos[r1])
            pos[r1].moveTo(pos[r2])
            pos[r2].moveTo(p)
            const j = idLoc[r1]
            idLoc[r1] = idLoc[r2]
            idLoc[r2] = j
          }
        }

        for (let i = 0; i < nc; i++) {
          const
            bx = this.getActiveBox(i),
            px = pos[i].x,
            py = pos[i].y
          bx.moveTo(new AWT.Point(px, py))
          if (fitInArea)
            this.fitCellsInArea([bx])
          bx.idLoc = idLoc[i]
        }
      }
    }

    /**
     * Fits cells inside the ActiveBoxBag area. Useful when non-rectangular cells exchange its positions.
     * @param {ActiveBox[]} boxes - The boxes to be checked
     */
    fitCellsInArea(boxes) {
      const
        maxX = this.pos.x + this.dim.width,
        maxY = this.pos.y + this.dim.height

      boxes.forEach(bx => {
        // Save original position
        if (!bx.pos0)
          bx.pos0 = new AWT.Point(bx.pos)

        const
          px = Math.min(Math.max(bx.pos.x, this.pos.x), maxX - bx.dim.width),
          py = Math.min(Math.max(bx.pos.y, this.pos.y), maxY - bx.dim.height)
        if (px !== bx.pos.x || py !== bx.pos.y)
          bx.moveTo(new AWT.Point(px, py))
      })
    }

    /**
     * Exchange the positions of two cells inside the ActiveBoxBag area.
     * @param {ActiveBox} bxa - The first box
     * @param {ActiveBox} bxb - The second box
     * @param {boolean} fitInArea - Ensure that all cells are inside the bag rectangle
     */
    swapCellPositions(bxa, bxb, fitInArea) {
      // Save backup of bxb significant properties
      const
        posB = new AWT.Point(bxb.pos),
        posB0 = bxb.pos0,
        idLocB = bxb.idLoc

      bxb.moveTo(bxa.pos0 || bxa.pos)
      bxb.pos0 = bxa.pos0
      bxb.idLoc = bxa.idLoc

      bxa.moveTo(posB0 || posB)
      bxa.pos0 = posB0
      bxa.idLoc = idLocB

      if (fitInArea)
        this.fitCellsInArea([bxa, bxb])
    }

    /**
     * Resets the IDs of all cells
     */
    resetIds() {
      this.cells.forEach((bx, i) => {
        if (bx) {
          bx.idOrder = i
          bx.idAss = i
          bx.idLoc = i
        }
      })
    }

    /**
     * Gets the index of box located in the `cells` array after the provided index, having the
     * provided `idAssValid` value as `idAss` attribute.
     * When `idAssValid` is `null` or `undefined`, search for the next cell with `idAss>0`
     * @param {type} currentItem - The index after to which start scanning
     * @param {type=} idAssValid - The `idAss` attribute value to search
     * @returns {number}
     */
    getNextItem(currentItem, idAssValid) {
      const IDASSNOTUSED = -12345
      if (!idAssValid)
        idAssValid = IDASSNOTUSED
      let i = currentItem + 1
      for (; i < this.cells.length; i++) {
        const bx = this.cells[i]
        if (!bx)
          break
        if (idAssValid !== IDASSNOTUSED) {
          if (idAssValid === bx.idAss)
            break
        } else if (bx.idAss >= 0)
          break
      }
      return i
    }

    /**
     * Builds a group of hidden `buton` elements that will act as a accessible objects associated
     * to the canvas area of this ActiveBoxBag.
     * The buttons will only be created when `CanvasRenderingContext2D` has a method named `addHitRegion`.
     * See https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Hit_regions_and_accessibility
     * for more information and supported browsers.
     * @param {external:jQuery} $canvas - The `canvas` where this `ActiveBoxBag` will deploy, wrapped up in a jQuery object
     * @param {external:jQuery} $clickReceiver - The DOM element that will be notified  when a button is clicked.
     * @param {string=} eventType - Type of event sent to $clickReceiver. Default is `click`.
     * @returns {external:jQuery} - The $accessibleDiv member, containing the accessible elements associated to this ActiveBoxBag.
     */
    buildAccessibleElements($canvas, $clickReceiver, eventType) {
      this.$accessibleDiv = this.accessibleText !== '' ? $('<div/>', { 'aria-label': this.accessibleText, tabindex: 0 }) : null
      $canvas.append(this.$accessibleDiv)
      this.cells
        .map(a => a)
        .sort((a, b) => a.idLoc > b.idLoc ? 1 : -1)
        .forEach(bx => bx.buildAccessibleElement($canvas, $clickReceiver, this.$accessibleDiv, eventType))
      return this.$accessibleDiv
    }
  }

  Object.assign(ActiveBoxBag.prototype, {
    /**
     * `div` containing the accessible elements associated to this ActiveBoxBag
     * @name ActiveBoxBag#$accessibleDiv
     * @type {external:jQuery} */
    $accessibleDiv: null,
  })

  return ActiveBoxBag
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/boxes/ActiveBoxContent.js":
/*!***************************************!*\
  !*** ./src/boxes/ActiveBoxContent.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : boxes/ActiveBoxContent.js
 *  Created : 13/04/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2016 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ../AWT */ "./src/AWT.js"),
  __webpack_require__(/*! ../Utils */ "./src/Utils.js"),
  __webpack_require__(/*! ./BoxBase */ "./src/boxes/BoxBase.js"),
  __webpack_require__(/*! ../media/MediaContent */ "./src/media/MediaContent.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, AWT, Utils, BoxBase, MediaContent) {

  /**
   * This class defines a content that can be displayed by {@link ActiveBox} objects. This content
   * can be a text, an image, a fragment of an image or a combination of text and images. The style
   * (colors, font and size, borders, shadows, margins, etc.) are specified in the `bb` attribute,
   * always pointing to a {@link BoxBase} object.
   * @exports ActiveBoxContent
   * @class
   */
  class ActiveBoxContent {
    /**
     * ActiveBoxContent constructor
     * @param {string=} id - An optional identifier.
     */
    constructor(id) {
      if (typeof id !== 'undefined')
        this.id = id
      this.imgAlign = { h: 'middle', v: 'middle' }
      this.txtAlign = { h: 'middle', v: 'middle' }
    }

    /**
     *
     * Loads settings from a specific JQuery XML element
     * @param {external:jQuery} $xml - The XML element to be parsed
     * @param {MediaBag} mediaBag - The media bag used to retrieve images and other media
     */
    setProperties($xml, mediaBag) {
      //
      // Read attributes
      Utils.attrForEach($xml.get(0).attributes, (name, val) => {
        switch (name) {
          case 'id':
          case 'item':
            this[name] = Number(val)
            break

          case 'width':
          case 'height':
            if (this.dimension === null)
              this.dimension = new AWT.Dimension(0, 0)
            this.dimension[name] = Number(val)
            break

          case 'txtAlign':
          case 'imgAlign':
            this[name] = this.readAlign(val)
            break

          case 'hAlign':
            // Old style
            this['txtAlign'] = this.readAlign(val + ',center')
            this['imgAlign'] = this.readAlign(val + ',center')
            break

          case 'border':
          case 'avoidOverlapping':
            this[name] = Utils.getBoolean(val)
            break

          case 'image':
            this.imgName = Utils.nSlash(val)
            break
        }
      })

      //
      // Read inner elements
      $xml.children().each((_n, child) => {
        const $node = $(child)
        switch (child.nodeName) {
          case 'style':
            this.bb = new BoxBase(null).setProperties($node)
            break
          case 'media':
            this.mediaContent = new MediaContent().setProperties($node)
            break
          case 'p':
            if (this.text === null)
              this.text = ''
            else
              this.text += '\n'
            this.text += child.textContent
            break
        }
      })

      if (mediaBag)
        this.realizeContent(mediaBag)

      return this
    }

    /**
     * Decode expressions with combined values of horizontal and vertical alignments in the form:
     * "(left|middle|right),(top|middle|bottom)"
     * @param {string} str - The string to parse
     * @returns {ActiveBoxContent~alignType}
     */
    readAlign(str) {
      const align = { h: 'center', v: 'center' }
      if (str) {
        const v = str.split(',')
        align.h = v[0].replace('middle', 'center')
        align.v = v[1].replace('middle', 'center')
      }
      return align
    }

    /**
     * Checks if this is an empty content (`text` and `img` are _null_)
     */
    isEmpty() {
      return this.text === null && this.img === null
    }

    /**
     * Checks if two contents are equivalent
     * @param {ActiveBoxContent} abc - The content to compare with this.
     * @param {boolean} checkCase - When `true` the comparing will be case-sensitive.
     * @returns {boolean}
     */
    isEquivalent(abc, checkCase) {
      if (abc === this)
        return true
      let result = false
      if (abc !== null) {
        if (this.isEmpty() && abc.isEmpty())
          result = this.id === abc.id
        else
          result = (this.text === null ? abc.text === null
            : checkCase ? this.text === abc.text
              : this.text.toLocaleLowerCase() === abc.text.toLocaleLowerCase()
          ) &&
            (this.mediaContent === null ? abc.mediaContent === null
              : this.mediaContent.isEquivalent(abc.mediaContent)
            ) &&
            this.img === abc.img &&
            (this.imgClip === null ? abc.imgClip === null
              : this.imgClip.equals(abc.imgClip))
      }
      return result
    }

    /**
     * Sets the text content of this ActiveBox
     * @param {string} tx
     */
    setTextContent(tx) {
      // only plain text allowed!
      if (tx !== null) {
        this.text = tx
        this.checkHtmlText()
      } else {
        this.text = null
        this.innerHtmlText = null
      }
    }

    /**
     * Checks if cell's text uses HTML, initializing the `innerHtmlText` member as needed.
     */
    checkHtmlText() {
      this.innerHtmlText = null
      if (Utils.startsWith(this.text, '<html>', true)) {
        const htmlText = this.text.trim()
        const s = htmlText.toLocaleLowerCase()
        if (s.indexOf('<body') === -1) {
          const s2 = s.indexOf('</html>')
          if (s2 >= 0)
            this.innerHtmlText = htmlText.substr(6, s2)
        }
      }
    }

    /**
     * Sets a fragment of a main image as a graphic content of this cell.
     * Cells cannot have two graphic contents, so `imgName` (the specific image of this cell) should
     * be cleared with this setting.
     * @param {external:HTMLImageElement} img - The image data
     * @param {AWT.Shape} imgClip - A shape that clips the portion of image assigned to this content.
     * @param {string=} animatedGifFile - When `img` is an animated GIF, its file name
     */
    setImgContent(img, imgClip, animatedGifFile) {
      this.img = img
      this.imgName = null
      this.imgClip = imgClip
      if (animatedGifFile)
        this.animatedGifFile = animatedGifFile
    }

    /**
     * Prepares the media content
     * @param {PlayStation} playStation - Usually a {@link JClicPlayer}
     */
    prepareMedia(playStation) {
      if (!this.amp && this.mediaContent && this.mediaContent.mediaType === 'PLAY_VIDEO') {
        this.amp = playStation.getActiveMediaPlayer(this.mediaContent)
        this.amp.realize()
      }
    }

    /**
     * Reads and initializes the image associated to this content
     * @param {MediaBag} mediaBag - The media bag of the current project.
     */
    realizeContent(mediaBag) {
      if (this.imgName !== null && this.imgName.length > 0) {
        this.mbe = mediaBag.getElement(this.imgName, true)
        if (this.mbe) {
          this.mbe.build(() => {
            this.img = this.mbe.data
            this.animatedGifFile = this.mbe.animated ? this.mbe.getFullPath() : null
          })
        }
      }
      if (this.mediaContent !== null) {
        if (this.imgName === null && (this.text === null || this.text.length === 0)) {
          this.img = this.mediaContent.getIcon()
          this.animatedGifFile = null
        }
      }
      this.checkHtmlText(mediaBag)
    }

    /**
     * Gets a string representing this content, useful for checking if two different contents are
     * equivalent.
     * @returns {string}
     */
    getDescription() {
      let result = this.text && this.text.length > 0 ? this.text : ''
      if (this.imgName)
        result = `${result}${result.length > 0 ? ' ' : ''}${Utils.getMsg('image')} ${this.imgName}`
      if (this.imgClip)
        result = `${result}${result.length > 0 ? ' ' : ''}${this.imgClip.toString()}`

      if (this.mediaContent)
        result = `${result}${result.length > 0 ? ' ' : ''}${this.mediaContent.getDescription()}`

      return result
    }

    /**
     * 
     * Overwrites the original `Object.toString` method, returning `getDescription` instead
     * @returns {String}
     */
    toString() {
      const result = [];
      if (this.text && this.text.length)
        result.push(this.text);
      if (this.imgName)
        result.push(`${Utils.getMsg('image')} ${this.imgName}`);
      if (this.imgClip)
        result.push(`${Utils.getMsg('image fragment')} ${(this.id >= 0 ? this.id : this.item) + 1}`);
      return result.join(' ') || Utils.getMsg('cell');
    }
  }

  Object.assign(ActiveBoxContent.prototype, {
    /**
     * The {@link BoxBase} attribute of this content. Can be `null`, meaning {@link ActiveBox} will
     * try to find a suitable style scanning down through its own BoxBase, their parent's and, finally,
     * the default values defined in `BoxBase.prototype`.
     * @name ActiveBoxContent#bb
     * @type {BoxBase} */
    bb: null,
    /**
     * Optimal dimension of any {@link ActiveBox} taking this content.
     * @name ActiveBoxContent#dimension
     * @type {AWT.Dimension} */
    dimension: null,
    /**
     * The {@link ActiveBox} can have or not a border despite the settings of {@link BoxBase}.
     * The default value `null` means not to take in consideration this setting.
     * @name ActiveBoxContent#border
     * @type {(null|boolean)} */
    border: null,
    /**
     * The text to display on the {@link ActiveBox}. It can have up to two paragraphs.
     * @name ActiveBoxContent#text
     * @type {string} */
    text: null,
    /**
     * The name of the image file to display on the {@link ActiveBox}.
     * @name ActiveBoxContent#imgName
     * @type {string} */
    imgName: null,
    /**
     * An optional shape used to clip the image.
     * @name ActiveBoxContent#imgClip
     * @type {AWT.Shape} */
    imgClip: null,
    /**
     * The media content associated with this object.
     * @name ActiveBoxContent#mediaContent
     * @type {MediaContent} */
    mediaContent: null,
    /**
     * @typedef ActiveBoxContent~alignType
     * @type {object}
     * @property {string} h - Valid values are: `left`, `middle`, `right`
     * @property {string} v - Valud values are: `top`, `middle`, `bottom` */
    /**
     * The horizontal and vertical alignment of the image inside the cell.
     * @name ActiveBoxContent#imgAlign
     * @type {ActiveBoxContent~alignType} */
    imgAlign: null,
    /**
     * The horizontal and vertical alignment of the text inside the cell.
     * Valid values are: `left`, `middle`, `right`, `top` and `bottom`.
     * @name ActiveBoxContent#txtAlign
     * @type {ActiveBoxContent~alignType} */
    txtAlign: null,
    /**
     * Whether to avoid overlapping of image and text inside the cell when both are present.
     * @name ActiveBoxContent#avoidOverlapping
     * @type {boolean} */
    avoidOverlapping: false,
    /**
     * Numeric identifier used in activities to resolve relationships between cells
     * @name ActiveBoxContent#id
     * @type {number} */
    id: -1,
    /**
     * Numeric identifier used in activities to resolve relationships between cells
     * @name ActiveBoxContent#item
     * @type {number} */
    item: -1,
    //
    // Transient properties build and modified at run-time
    /**
     * The realized image used by this box content.
     * @name ActiveBoxContent#img
     * @type {external:HTMLImageElement} */
    img: null,
    /**
     * When `img` is an animated GIF file, this field should contain its file name
     * @name ActiveBoxContent#animatedGifFile
     * @type {string} */
    animatedGifFile: null,
    /**
     * When not null, this content should be treated as an HTML element
     * @name ActiveBoxContent#innerHtmlText
     * @type {string} */
    innerHtmlText: null,
    /**
     * The {@link ActiveMediaPlayer} associated with this content. Updated at run-time.
     * @name ActiveBoxContent#amp
     * @type {ActiveMediaPlayer} */
    amp: null,
    /**
     * The {@link MediaBagElement} associated with this content, if any. Updated at run-time.
     * @name ActiveBoxContent#mbe
     * @type {MediaBagElement} */
    mbe: null,
  })

  /**
   * An empty ActiveBoxContent
   * @type {ActiveBoxContent} */
  ActiveBoxContent.EMPTY_CONTENT = new ActiveBoxContent()

  return ActiveBoxContent
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/boxes/ActiveBoxGrid.js":
/*!************************************!*\
  !*** ./src/boxes/ActiveBoxGrid.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : boxes/ActiveBoxGrid.js
 *  Created : 19/05/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2016 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ./ActiveBoxBag */ "./src/boxes/ActiveBoxBag.js"),
  __webpack_require__(/*! ./ActiveBox */ "./src/boxes/ActiveBox.js"),
  __webpack_require__(/*! ../AWT */ "./src/AWT.js"),
  __webpack_require__(/*! ../Utils */ "./src/Utils.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, ActiveBoxBag, ActiveBox, AWT, Utils) {

  /**
   * This class extends {@link ActiveBoxBag} with constructors that take an argument of type
   * {@link Shaper} used to build all its {@link ActiveBox}components. It also maintains information
   * about the number of "rows" and "columns", useful to compute valid (integer) values when
   * resizing or moving its components.
   * @exports ActiveBoxGrid
   * @class
   * @extends ActiveBoxBag
   */
  class ActiveBoxGrid extends ActiveBoxBag {
    /**
     * ActiveBxGrid constructor
     * @param {?AbstractBox} parent - The AbstractBox to which this box grid belongs
     * @param {?AWT.Container} container - The container where this box grid is placed.
     * @param {?BoxBase} boxBase - The object where colors, fonts, border and other graphic properties
     * @param {number} px - `X` coordinate of the upper left corner of this box grid
     * @param {number} py - `Y` coordinate of the upper left corner of this box grid
     * @param {number} setWidth - Total width of the box grid
     * @param {number} setHeight - Total height of the box grid
     * @param {Shaper} sh - Shaper used to build the ActiveBox objects
     */
    constructor(parent, container, boxBase, px, py, setWidth, setHeight, sh) {
      // ActiveBoxGrid derives from ActiveBoxBag
      super(parent, container, boxBase)

      this.nCols = sh.nCols
      this.nRows = sh.nRows

      // This will be the enclosing rectangle of this ActiveBox bag
      const r = new AWT.Rectangle(
        new AWT.Point(px, py),
        new AWT.Dimension(
          Math.round(setWidth / this.nCols) * this.nCols,
          Math.round(setHeight / this.nRows) * this.nRows))

      // Create all the [ActiveBox](ActiveBox.html) objects based on the
      // shapes provided by the [Shaper](Shaper.html)
      for (let i = 0; i < sh.nCells; i++) {
        const
          tmpSh = sh.getShape(i, r),
          bx = new ActiveBox(this, container, boxBase, i, tmpSh.getBounds())
        if (!sh.rectangularShapes)
          bx.setShape(tmpSh)
        this.addActiveBox(bx)
      }

      // If the Shaper has `remainder` (extra space), set the background box of this
      // [BoxBag](BoxBag.html)
      if (sh.hasRemainder) {
        const
          tmpSh = sh.getRemainderShape(r),
          bx = new ActiveBox(this, container, boxBase, 0, tmpSh.getBounds())
        bx.setShape(tmpSh)
        this.setBackgroundBox(bx)
      }
    }

    /**
     * This factory constructor creates a new empty grid with the number of cells indicated by the
     * {@link ActiveBagContent} `abc`, not filling the cells with any content.
     * @param {?AbstractBox} parent - The AbstractBox to which this box grid belongs
     * @param {?AWT.Container} container - The container where this box grid is placed.
     * @param {number} px - `X` coordinate of the upper left corner of this box grid
     * @param {number} py - `Y` coordinate of the upper left corner of this box grid
     * @param {ActiveBagContent} abc - Used only to get the number of cells and the shaper (when `sh` is `null`)
     * @param {?Shaper} sh - Shaper used to build the ActiveBox objects
     * @param {?BoxBase} boxBase - The object where colors, fonts, border and other graphic properties
     * of this box grid are defined.
     * @returns {ActiveBoxGrid}
     */
    static createEmptyGrid(parent, container, px, py, abc, sh, boxBase) {
      const result = abc ? new ActiveBoxGrid(parent, container,
        boxBase || abc.bb,
        px, py,
        abc.getTotalWidth(), abc.getTotalHeight(),
        sh || abc.getShaper()) : null

      if (result)
        result.setBorder(abc.border)

      return result
    }

    /**
     * Gets the minimum size of this grid
     * @returns {AWT.Dimension}
     */
    getMinimumSize() {
      return new AWT.Dimension(
        Utils.settings.MIN_CELL_SIZE * this.nCols,
        Utils.settings.MIN_CELL_SIZE * this.nRows)
    }

    /**
     * Gets a scaled size of this grid, rounded to the nearest integer values
     * @param {number} scale - The scale factor
     * @returns {AWT.Dimension}
     */
    getScaledSize(scale) {
      return new AWT.Dimension(
        Utils.roundTo(scale * this.preferredBounds.dim.width, this.nCols),
        Utils.roundTo(scale * this.preferredBounds.dim.height, this.nRows))
    }

    /**
     * Returns the logical coordinates of the provided {@link ActiveBox}.
     * The units of the result are not pixels, but ordinal numbers (relative positions) of columns
     * and rows in the grid.
     * @param {ActiveBox} bx - The box to process
     * @returns {AWT.Point}
     */
    getCoord(bx) {
      return new AWT.Point(bx.idLoc % this.nCols, Math.floor(bx.idLoc / this.nCols))
    }

    /**
     * Calculates the logical distance between two {@link ActiveBox} objects.
     * Resulting units are not pixels, but ordinal numbers (relative positions) of columns and rows
     * in the grid.
     * @param {ActiveBox} src - First box
     * @param {ActiveBox} dest - Second box
     * @returns {AWT.Point}
     */
    getCoordDist(src, dest) {
      const
        ptSrc = this.getCoord(src),
        ptDest = this.getCoord(dest)
      return new AWT.Point(ptDest.x - ptSrc.x, ptDest.y - ptSrc.y)
    }
  }

  Object.assign(ActiveBoxGrid.prototype, {
    /**
     * Number of columns of this box grid
     * @name ActiveBoxGrid#nCols
     * @type {number} */
    nCols: 1,
    /**
     * Number of rows of this box grid
     * @name ActiveBoxGrid#nRows
     * @type {number} */
    nRows: 1,
  })

  return ActiveBoxGrid
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/boxes/BoxBag.js":
/*!*****************************!*\
  !*** ./src/boxes/BoxBag.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : boxes/BoxBag.js
 *  Created : 21/04/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2016 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ./AbstractBox */ "./src/boxes/AbstractBox.js"),
  __webpack_require__(/*! ../AWT */ "./src/AWT.js"),
  __webpack_require__(/*! ../Utils */ "./src/Utils.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, AbstractBox, AWT, Utils) {

  /**
   * BoxBag is a class derived from {@link AbstractBox} that contains a collection of "boxes"
   * (objects also derived from {@link AbstractBox}). This class implements methods to add, remove
   * and retrieve boxes, and to manage some of its properties like visibility, status, location and size.
   * @exports BoxBag
   * @class
   * @extends AbstractBox
   */
  class BoxBag extends AbstractBox {
    /**
     * BoxBag constructor
     * @param {?AbstractBox} parent - The AbstractBox to which this box bag belongs
     * @param {?AWT.Container} container - The container where this box bag is placed.
     * @param {?BoxBase} boxBase - The object where colors, fonts, border and other graphic properties
     */
    constructor(parent, container, boxBase) {
      // BoxBag extends AbstractBox
      super(parent, container, boxBase)
      this.preferredBounds = new AWT.Rectangle()
      this.cells = []
    }

    /**
     * Static method that sets the position and dimension of a `Resizable` object based on a
     * preferred maximum dimension and a margin.
     * @param {AWT.Dimension} preferredMaxSize - The preferred maximum size
     * @param {Resizable} rs - A resizable object implementing the methods described in the
     * {@link http://projectestac.github.io/jclic/apidoc/edu/xtec/jclic/boxes/Resizable.html Resizable}
     * interface of JClic. Currently a {@link BoxBag} or {@link TextGrid}.
     * @param {number} margin - The margin between the available area and the BoxBag
     * @returns {AWT.Dimension} - The resulting size of the container
     */
    static layoutSingle(preferredMaxSize, rs, margin) {

      // Avoid exceptions when rs is null
      if (!rs)
        return preferredMaxSize

      // optimal, maximal and minimal dimensions
      let
        d = rs.getPreferredSize(),
        minSize = rs.getMinimumSize(),
        maxSize = preferredMaxSize

      // remove margins
      maxSize.width -= 2 * margin
      maxSize.height -= 2 * margin
      // correct maxSize if less than minSize
      if (minSize.width > maxSize.width || minSize.height > maxSize.height) {
        maxSize = minSize
      }
      // compute scale factor
      let scale = d.width > maxSize.width ? maxSize.width / d.width : 1
      if (scale * d.height > maxSize.height)
        scale = maxSize.height / d.height

      // resize the `Resizable` object
      d = rs.getScaledSize(scale)
      rs.setBounds(margin, margin, d.width, d.height)

      // restore margins
      d.width += 2 * margin
      d.height += 2 * margin

      return d
    }

    /**
     * Static method that sets the position and dimension of two `Resizable` objects based on a
     * preferred maximum size, a layout schema and a margin.
     * @param {AWT.Dimension} desiredMaxSize - The preferred maximum size
     * @param {Resizable} rsA - First resizable object implementing the methods described in the
     * {@link http://projectestac.github.io/jclic/apidoc/edu/xtec/jclic/boxes/Resizable.html Resizable}
     * interface of JClic. Currently a {@link BoxBag} or {@link TextGrid}.
     * @param {Resizable} rsB - Second resizable object
     * @param {string} boxGridPos - The layout schema. Possible values are:
     * - "AB" (_A_ at left, _B_ at right)
     * - "BA" (_B_ at left, _A_ at right)
     * - "AUB" (_A_ above _B_)
     * - "BUA" (_A_ below _B_).
     * @param {number} margin - The margin between the available area and the BoxBag
     * @returns {AWT.Dimension} - The resulting size of the container
     */
    static layoutDouble(desiredMaxSize, rsA, rsB, boxGridPos, margin) {
      // number of horizontal and vertical grid lines
      let
        isHLayout = false,
        nbh = 1,
        nbv = 1
      switch (boxGridPos) {
        case 'AB':
        case 'BA':
          nbh = 2
          nbv = 1
          isHLayout = true
          break
        case 'AUB':
        case 'BUA':
          nbh = 1
          nbv = 2
          isHLayout = false
          break
      }
      const
        ra = rsA.getBounds(),
        rb = rsB.getBounds()

      // optimal dimensions
      let
        da = rsA.getPreferredSize(),
        db = rsB.getPreferredSize()

      const d = new AWT.Dimension(
        isHLayout ? da.width + db.width : Math.max(da.width, db.width),
        isHLayout ? Math.max(da.height, db.height) : da.height + db.height
      )

      // minimal dimensions
      const
        minSizeA = rsA.getMinimumSize(),
        minSizeB = rsB.getMinimumSize(),
        minSize = new AWT.Dimension(
          isHLayout ? minSizeA.width + minSizeB.width : Math.max(minSizeA.width, minSizeB.width),
          isHLayout ? Math.max(minSizeA.height, minSizeB.height) : minSizeA.height + minSizeB.height
        ),
        maxSize = desiredMaxSize

      // remove margins
      maxSize.width -= (1 + nbh) * margin
      maxSize.height -= (1 + nbv) * margin

      // correct maxSize if less than minSize
      if (minSize.width > maxSize.width || minSize.height > maxSize.height)
        maxSize.setDimension(minSize)

      // compute scale factor
      let scale = d.width > maxSize.width ? maxSize.width / d.width : 1
      if (scale * d.height > maxSize.height)
        scale = maxSize.height / d.height

      //
      // correct possible minimal infractions
      // ...
      // resize
      da = rsA.getScaledSize(scale)
      db = rsB.getScaledSize(scale)

      // set margins to center one box relative to the other
      let
        dah = db.width > da.width ? (db.width - da.width) / 2 : 0,
        dbh = da.width > db.width ? (da.width - db.width) / 2 : 0,
        dav = db.height > da.height ? (db.height - da.height) / 2 : 0,
        dbv = da.height > db.height ? (da.height - db.height) / 2 : 0

      switch (boxGridPos) {
        case 'AB':
          rsA.setBounds(margin, margin + dav, da.width, da.height)
          rsB.setBounds(2 * margin + da.width, margin + dbv, db.width, db.height)
          break
        case 'BA':
          rsB.setBounds(margin, margin + dbv, db.width, db.height)
          rsA.setBounds(2 * margin + db.width, margin + dav, da.width, da.height)
          break
        case 'AUB':
          rsA.setBounds(margin + dah, margin, da.width, da.height)
          rsB.setBounds(margin + dbh, 2 * margin + da.height, db.width, db.height)
          break
        case 'BUA':
          rsB.setBounds(margin + dbh, margin, db.width, db.height)
          rsA.setBounds(margin + dah, 2 * margin + db.height, da.width, da.height)
          break
        default:
          rsA.setBounds(
            Math.round(margin + scale * ra.pos.x),
            Math.round(margin + scale * ra.pos.y),
            da.width, da.height)
          rsB.setBounds(
            Math.round(margin + scale * rb.pos.x),
            Math.round(margin + scale * rb.pos.y),
            da.width, da.height)
          break
      }

      // recompute 'd' adding margins
      const r = new AWT.Rectangle(rsA.getBounds())
      r.add(rsB.getBounds())
      d.width = r.dim.width + 2 * margin
      d.height = r.dim.height + 2 * margin

      return d
    }

    /**
     * Gets the preferred size of this `BoxBag`
     * @returns {AWT.Dimension}
     */
    getPreferredSize() {
      return this.preferredBounds.dim
    }

    /**
     * Gets the minimum size requested by this `BoxBag`
     * @returns {AWT.Dimension}
     */
    getMinimumSize() {
      const d = this.getPreferredSize()
      return new AWT.Dimension(
        Math.max(Utils.settings.MIN_CELL_SIZE, d.width),
        Math.max(Utils.settings.MIN_CELL_SIZE, d.height))
    }

    /**
     * Scales the current size of this box bag, multiplying all values by a specific factor
     * @param {number} scale - The scale factor
     * @returns {AWT.Dimension}
     */
    getScaledSize(scale) {
      const d = this.getPreferredSize()
      return new AWT.Dimension(Math.round(scale * d.width), Math.round(scale * d.height))
    }

    /**
     * Adds an {@link AbstractBox} to the collection of cells
     * @param {AbstractBox} bx - The box to add
     */
    addBox(bx) {
      this.cells.push(bx)
      bx.setParent(this)

      if (this.cells.length === 1)
        AWT.Rectangle.prototype.setBounds.call(this, bx)
      else
        this.add(bx)

      this.preferredBounds.setBounds(this.getBounds())
    }

    /**
     * Returns the index of a specific box in the `cells` array
     * @param {AbstractBox} bx
     * @returns {number}
     */
    boxIndex(bx) {
      return bx === null ? -1 : this.cells.indexOf(bx)
    }

    /**
     * Returns the box at a specific index in the `cells` array
     * @param {number} n - The index
     * @returns {AbstractBox}
     */
    getBox(n) {
      return n < 0 || n >= this.cells.length ? null : this.cells[n]
    }

    /**
     * Gets the background box
     * @returns {AbstractBox}
     */
    getBackgroundBox() {
      return this.backgroundBox
    }

    /**
     * Sets the background box
     * @param {AbstractBox} bx
     */
    setBackgroundBox(bx) {
      this.backgroundBox = bx
      if (bx !== null) {
        bx.setParent(this)
        bx.isBackground = true
      }
      // Add the `backgroundbox` rectangle to the global BoxBag rectangle
      AWT.Rectangle.prototype.add.call(this, bx)
      this.preferredBounds.setBounds(this.getBounds())
    }

    /**
     * Recalculates the total size of this BoxBag (useful after direct additions o deletions of
     * elements in the `cells` array).
     * Updates `preferredBounds` and the current position and size of the box bag.
     */
    recalcSize() {
      let r = this.backgroundBox ? new AWT.Rectangle(this.backgroundBox.pos, this.backgroundBox.dim) : null
      this.cells.forEach(cell => {
        if (!r)
          r = new AWT.Rectangle(cell.pos, cell.dim)
        else
          r.add(cell)
      })
      if (!r)
        r = new AWT.Rectangle(this.pos.x, this.pos.y, 0, 0)
      this.preferredBounds.setRect(r)
      this.x = r.pos.x
      this.y = r.pos.y
      this.dim.width = r.dim.width
      this.dim.height = r.dim.height
    }

    /**
     * Returns the number of cells stored in this BoxBag
     * @returns {number}
     */
    getNumCells() {
      return this.cells.length
    }

    /**
     * Sets the specified key - value pair to all cells of this bag.
     * @param {string} key - The key to be established
     * @param {} value - The value, of any type
     */
    setCellAttr(key, value) {
      this.cells.forEach(bx => bx[key] = value)
      if (this.backgroundBox)
        this.backgroundBox[key] = value
    }

    /**
     * Overrides {@link AbstractBox#setBorder} iterating over all the cells stored in this box bag.
     * @override
     * @param {boolean} newVal - Whether to set or unset the border
     */
    setBorder(newVal) {
      this.cells.forEach(bx => bx.setBorder(newVal))
    }

    /**
     * Overrides {@link AbstractBox#setVisible} iterating over all the cells stored in this box bag.
     * @override
     * @param {boolean} newVal - Whether to set the cells visible or not
     */
    setVisible(newVal) {
      this.cells.forEach(bx => bx.setVisible(newVal))
    }

    /**
     * Overrides {@link AbstractBox#setAlternative} iterating over all the cells stored in this box bag.
     * @override
     * @param {boolean} newVal - Whether to set or unset the cells in "alternative" mode
     */
    setAlternative(newVal) {
      super.setAlternative(newVal)
      this.cells.forEach(bx => bx.setAlternative(newVal))
    }

    /**
     * Overrides {@link AbstractBox#setBounds} adjusting the position and size of all cells
     * @override
     * @param {(AWT.Rectangle|number)} rect - An AWT.Rectangle object, or the `x` coordinate of the
     * upper-left corner of a new rectangle.
     * @param {number=} ry - `y` coordinate of the upper-left corner of the new rectangle.
     * @param {number=} rw - Width of the new rectangle.
     * @param {number=} rh - Height of the new rectangle.
     */
    setBounds(rect, ry, rw, rh) {
      if (typeof rect === 'number') {
        // Arguments are co-ordinates and size
        rect = new AWT.Rectangle(rect, ry, rw, rh)
      }
      if (rect.getSurface() > 0 && !rect.equals(this)) {
        const
          scaleW = rect.dim.width / this.dim.width,
          scaleH = rect.dim.height / this.dim.height,
          dx = rect.pos.x - this.pos.x,
          dy = rect.pos.y - this.pos.y
        this.cells.forEach(bx => {
          const p = new AWT.Point(bx.pos.x - this.pos.x, bx.pos.y - this.pos.y)
          bx.setBounds(
            dx + this.pos.x + scaleW * p.x,
            dy + this.pos.y + scaleH * p.y,
            scaleW * bx.dim.width,
            scaleH * bx.dim.height)
        })
        if (this.backgroundBox !== null) {
          const
            bx = this.backgroundBox,
            p = new AWT.Point(bx.pos.x - this.pos.x, bx.pos.y - this.pos.y)
          bx.setBounds(
            dx + this.pos.x + scaleW * p.x,
            dy + this.pos.y + scaleH * p.y,
            scaleW * bx.dim.width,
            scaleH * bx.dim.height)
        }
      }
      super.setBounds(rect)
    }

    /**
     * Performs graphics operations for each cell.
     * Overrides {@link AbstractBox#update}
     * @override
     * @param {external:CanvasRenderingContext2D} ctx - The canvas rendering context used to draw the
     * box contents.
     * @param {AWT.Rectangle=} dirtyRegion - The area that must be repainted. `null` refers to the whole box.
     */
    update(ctx, dirtyRegion) {
      if (this.isEmpty() || !this.isVisible() || this.isTemporaryHidden())
        return false

      if (dirtyRegion && !this.intersects(dirtyRegion))
        return false

      if (this.backgroundBox !== null)
        this.backgroundBox.update(ctx, dirtyRegion)

      this.cells.forEach(bx => {
        if (!bx.isMarked())
          bx.update(ctx, dirtyRegion)
      })

      // Make a second loop to repaint marked cells
      this.cells.forEach(bx => {
        if (bx.isMarked())
          bx.update(ctx, dirtyRegion)
      })
      return true
    }

    /**
     * Finds the first visible {@link AbstractBox} located under the specified point
     * @param {AWT.Point} p
     * @returns {AbstractBox}
     */
    findBox(p) {
      let result = null
      for (let i = this.cells.length - 1; i >= 0; i--) {
        const bx = this.getBox(i)
        if (bx.isVisible() && bx.contains(p)) {
          result = bx
          break
        }
      }
      return result
    }

    /**
     * Count the number of cells of this BoxBag that are in "inactive" state
     * @returns {number}
     */
    countInactiveCells() {
      return this.cells.reduce((n, bx) => bx.isInactive() ? ++n : n, 0)
    }
  }

  Object.assign(BoxBag.prototype, {
    /**
     * The array of cells
     * @name BoxBag#cells
     * @type {AbstractBox[]} */
    cells: [],
    /**
     * Rectangle containing the preferred bounds of the BoxBag
     * @name BoxBag#preferredBounds
     * @type {AWT.Rectangle} */
    preferredBounds: new AWT.Rectangle(),
    /**
     * An optional box used as a background by this BoxBag
     * @name BoxBag#backgroundBox
     * @type {AbstractBox} */
    backgroundBox: null,
  })

  return BoxBag
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/boxes/BoxBase.js":
/*!******************************!*\
  !*** ./src/boxes/BoxBase.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : boxes/BoxBase.js
 *  Created : 12/04/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2016 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ../Utils */ "./src/Utils.js"),
  __webpack_require__(/*! ../AWT */ "./src/AWT.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, Utils, AWT) {

  const defaultValues = Utils.settings.BoxBase

  /**
   * This class contains all the main visual attributes needed to draw {@link AbstractBox} objects:
   * background and foreground colors, gradients, colors for special states (inactive, alternative,
   * disabled...), margins, fonts, border strokes, etc.
   *
   * Objects derived from {@link AbstractBox} can have inheritance: boxes that act as "containers"
   * of other boxes (like {@link BoxBag}). Most of the attributes of `BoxBase` can be `null`,
   * meaning that the value of the ancestor -or the default value if the box has no ancestors- must
   * be used.
   * @exports BoxBase
   * @class
   */
  class BoxBase {
    /**
     * BoxBase constructor
     * @param {BoxBase=} parent - Another BoxBase object used to determine the value of properties not
     * locally set.
     */
    constructor(parent) {
      this.parent = parent || null
    }

    /**
     * Loads the BoxBase settings from a specific JQuery XML element
     * @param {external:jQuery} $xml - The XML element to parse
     */
    setProperties($xml) {
      //
      // Read attributes
      Utils.attrForEach($xml.get(0).attributes, (name, val) => {
        switch (name) {
          case 'shadow':
          case 'transparent':
            this[name] = Utils.getBoolean(val, false)
            break
          case 'margin':
            this[name] = Number(val)
            break
          case 'borderStroke':
            this.borderStroke = new AWT.Stroke(Number(val))
            break
          case 'markerStroke':
            this.markerStroke = new AWT.Stroke(Number(val))
            break
        }
      })
      //
      // Read inner elements
      $xml.children().each((_n, child) => {
        const $node = $(child)
        switch (child.nodeName) {
          case 'font':
            this.font = (new AWT.Font()).setProperties($node)
            break

          case 'gradient':
            this.bgGradient = new AWT.Gradient().setProperties($node)
            break

          case 'color':
            this.textColor = Utils.checkColor($node.attr('foreground'), this.textColor)
            this.backColor = Utils.checkColor($node.attr('background'), this.backColor)
            this.shadowColor = Utils.checkColor($node.attr('shadow'), this.shadowColor)
            this.inactiveColor = Utils.checkColor($node.attr('inactive'), this.inactiveColor)
            this.alternativeColor = Utils.checkColor($node.attr('alternative'), this.alternativeColor)
            this.borderColor = Utils.checkColor($node.attr('border'), this.borderColor)
            break
        }
      })
      return this
    }

    /**
     * Gets the value of the specified property, scanning down to parents and prototype if not defined.
     * @param {string} property - The property to retrieve
     * @returns {*} - The object or value associated to this property
     */
    get(property) {
      if (this.hasOwnProperty(property) || this.parent === null)
        return this[property]
      else
        return this.parent.get(property)
    }

    /**
     * Sets the value of a specific property.
     * @param {string} property - The property name.
     * @param {*} value - Depends on the type of property
     */
    set(property, value) {
      this[property] = value
      return this
    }

    /**
     * Gets the value of the specified property, scanning down to parents if not defined, and returning
     * always an own property (not from prototype)
     * @param {string} property - The property to retrieve
     * @returns {*} - The object associated to this property
     */
    getOwn(property) {
      if (this.hasOwnProperty(property))
        return this[property]
      else if (this.parent !== null)
        return this.parent.getOwn(property)
      else {
        if (typeof this[property] === 'object')
          this[property] = Utils.cloneObject(BoxBase.prototype[property])
        else
          this[property] = BoxBase.prototype[property]
      }
      return this[property]
    }

    /**
     * Gets the properties defined in this BoxBase as a collection of CSS attributes
     * @param {object=} css - An optional set of initial CSS properties
     * @param {boolean} inactive - When `true`, get CSS attributes for an inactive cell
     * @param {boolean} inverse - When `true`, get CSS attributes for an inverse cell
     * @param {boolean} alternative - When `true`, get CSS attributes for an alternative cell
     * @returns {object}
     */
    getCSS(css, inactive, inverse, alternative) {
      // (css will be created by [AWT.Font.toCss](AWT.html) if null or undefined)
      const font = this.get('font')
      css = font.toCss(css)

      css['color'] = inverse ? this.get('backColor')
        : alternative ? this.get('alternativeColor')
          : this.get('textColor')

      const transparent = this.get('transparent')
      css['background-color'] = transparent ? 'transparent'
        : inactive ? this.get('inactiveColor')
          : inverse ? this.get('textColor') : this.get('backColor')

      const bgGradient = this.get('bgGradient')
      if (bgGradient && !transparent)
        css['background-image'] = bgGradient.getCss()

      if (this.shadow === 1) {
        const delta = Math.max(1, Math.round(font.size / 10))
        const color = this.get('shadowColor')
        css['text-shadow'] = `${delta}px ${delta}px 3px ${color}`
      }
      return css
    }

    /**
     * This utility method computes the width and height of text lines rendered on an HTML
     * __canvas__ element, reducing the font size of the BoxBase as needed when they exceed the maximum
     * width and/or height.
     * @param {external:CanvasRenderingContext2D} ctx - The canvas rendering context used to draw the text.
     * @param {string} text - The text to drawn.
     * @param {number} maxWidth - Maximum width
     * @param {number} maxHeight - Maximum height
     * @returns {object[]} - An array of objects representing lines of text. Each object has a `text`
     * member with the text displayed in the line, and a `size` member with the line {@link AWT.Dimension}
     */
    prepareText(ctx, text, maxWidth, maxHeight) {
      const
        result = [],
        font = this.get('font'),
        height = font.getHeight()
      let totalHeight = 0

      // divide the text in lines
      const lines = text.trim().split('\n')
      ctx.font = font.cssFont()
      for (let l = 0; l < lines.length; l++) {
        let line = lines[l].trim()
        let width = ctx.measureText(line).width
        if (width > maxWidth) {
          // retain the last string offset that was inside maxWidth
          let
            lastOK = 0,
            lastOKWidth = 0
          for (let p = 0; p < line.length; p++) {
            // Find next separator
            if (Utils.isSeparator(line[p])) {
              const w = ctx.measureText(line.substr(0, p).trim()).width
              if (w > maxWidth)
                break
              lastOK = p
              lastOKWidth = w
            }
          }
          if (lastOK > 0) {
            // Add a new line with the tail of the line
            lines.splice(l + 1, 0, line.substr(lastOK + 1).trim())
            // Adjust the current line
            line = lines[l] = line.substr(0, lastOK).trim()
            width = lastOKWidth
          }
          else {
            // No solution found. Try resizing down the font.
            if (font.size > defaultValues.MIN_FONT_SIZE) {
              this.getOwn('font').zoom(-1)
              return this.prepareText(ctx, text, maxWidth, maxHeight)
            }
          }
        }

        // Add the line and the calculated dimension to `result`
        result.push({
          text: line,
          size: new AWT.Dimension(width, height)
        })

        totalHeight += height

        if (totalHeight > maxHeight && font.size > defaultValues.MIN_FONT_SIZE) {
          // Max height exceeded. Try resizing down the font
          this.getOwn('font').zoom(-1)
          return this.prepareText(ctx, text, maxWidth, maxHeight)
        }
      }
      return result
    }
  }

  Object.assign(BoxBase.prototype, {
    /**
     * The parent BoxBase object
     * @name BoxBase#parent
     * @type {BoxBase} */
    parent: null,
    /**
     * Default values
     * @name BoxBase#defaultValues
     * @type {object} */
    default: defaultValues,
    /**
     * Font size can be dynamically reduced to fit the available space if any element using this
     * `BoxBase` requests it. When this happen, this field contains the real font currently used
     * to draw text.
     * @name BoxBase#font
     * @type {AWT.Font} */
    font: new AWT.Font(),
    /**
     * The current font size of this BoxBase. Can be dynamically adjusted when drawing.
     * @name BoxBase#dynFontSize
     * @type {number} */
    dynFontSize: 0,
    /**
     * Counts the number of times the `dynFontSize` has been reset. This is useful to avoid excessive
     * recursive loops searching the optimal font size.
     * @name BoxBase#resetFontCounter
     * @type {number} */
    resetFontCounter: 0,
    /**
     * The background color
     * @name BoxBase#backColor
     * @type {string} */
    backColor: defaultValues.BACK_COLOR,
    /**
     * The background gradient. Default is `null`.
     * @name BoxBase#bgGradient
     * @type {AWT.Gradient} */
    bgGradient: null,
    /**
     * The color used to write text.
     * @name BoxBase#textColor
     * @type {string} */
    textColor: defaultValues.TEXT_COLOR,
    /**
     * The color used to draw a shadow below regular text.
     * @name BoxBase#shadowColor
     * @type {string} */
    shadowColor: defaultValues.SHADOW_COLOR,
    /**
     * The color of the border.
     * @name BoxBase#borderColor
     * @type {string} */
    borderColor: defaultValues.BORDER_COLOR,
    /**
     * The color used to draw text when a cell is in `inactive` state.
     * @name BoxBase#inactiveColor
     * @type {string} */
    inactiveColor: defaultValues.INACTIVE_COLOR,
    /**
     * The color used to draw text when a cell is in `alternative` state.
     * @name BoxBase#alternativeColor
     * @type {string} */
    alternativeColor: defaultValues.ALTERNATIVE_COLOR,
    /**
     * Whether the text should have a shadow or not
     * @name BoxBase#shadow
     * @type {boolean} */
    shadow: false,
    /**
     * Whether the cell's background (and its hosted component, if any) should be transparent
     * @name BoxBase#transparent
     * @type {boolean} */
    transparent: false,
    /**
     * Wheter the cell's background should be painted or not. This property has no effect on
     * hosted components.
     * @name BoxBase#dontFill
     * @type {boolean} */
    dontFill: false,
    /**
     * The margin to respect between text elements and the limits of the cell or other elements.
     * @name BoxBase#textMargin
     * @type {number} */
    textMargin: defaultValues.AC_MARGIN,
    /**
     * The stroke used to draw the border.
     * @name BoxBase#borderStroke
     * @type {AWT.Stroke} */
    borderStroke: new AWT.Stroke(defaultValues.BORDER_STROKE_WIDTH),
    /**
     * The stroke used to draw a border around marked cells.
     * @name BoxBase#markerStroke
     * @type {AWT.Stroke} */
    markerStroke: new AWT.Stroke(defaultValues.MARKER_STROKE_WIDTH),
  })

  BoxBase.prototype.defaultBoxBase = new BoxBase()

  return BoxBase
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/boxes/BoxConnector.js":
/*!***********************************!*\
  !*** ./src/boxes/BoxConnector.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : boxes/BoxConnector.js
 *  Created : 26/05/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2016 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! ../AWT */ "./src/AWT.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function (AWT) {

  /**
   * BoxConnector allows users to visually connect two {@link ActiveBox} objects of an
   * {@link ActivityPanel}. There are two modes of operation:
   *
   * - Drawing a line between an origin point (usually the point where the user clicks on) and a
   * destination point.
   * - Dragging the ActiveBox from one location to another.
   *
   * The connecting lines can have arrowheads at its endings.
   * @exports BoxConnector
   * @class
   */
  class BoxConnector {
    /**
     * BoxConnector constructor
     * @param {AWT.Container} parent - The Container to which this BoxConnector belongs
     * @param {external:CanvasRenderingContext2D} ctx - The canvas rendering context where to draw
     */
    constructor(parent, ctx) {
      this.parent = parent
      this.ctx = ctx
      this.dim = new AWT.Dimension(ctx.canvas.width, ctx.canvas.height)
      this.origin = new AWT.Point()
      this.dest = new AWT.Point()
      this.relativePos = new AWT.Point()
    }

    /**
     * Displaces the ending point of the connector
     * @param {number} dx - Displacement on the X axis
     * @param {number} dy - Displacement on the Y axis
     */
    moveBy(dx, dy) {
      this.moveTo(AWT.Point(this.dest.x + dx, this.dest.y + dy))
    }

    /**
     * Moves the ending point of the connector to a new position
     * @param {AWT.Point} pt - The new position
     * @param {boolean} forcePaint - When `true`, forces the repaint of all the area also if there is
     * no movement at all.
     */
    moveTo(pt, forcePaint) {
      if (!this.active || !forcePaint && this.dest.equals(pt))
        return

      // Restore the background
      if (this.bgRect) {
        if (this.bgImg) {
          this.ctx.putImageData(
            this.bgImg,
            0, 0,
            this.bgRect.pos.x, this.bgRect.pos.y,
            this.bgRect.dim.width, this.bgRect.dim.height)
        } else if (this.parent)
          this.parent.updateContent()
      }

      this.dest.moveTo(pt)

      // Calculate the bounds of the invalidated area after the move:
      // Start with the origin point or box area
      const pt1 = new AWT.Point(this.origin.x - this.relativePos.x, this.origin.y - this.relativePos.y)
      this.bgRect = new AWT.Rectangle(pt1, this.bx ? this.bx.dim : new AWT.Dimension())
      //  Add the destination point or box area
      const pt2 = new AWT.Point(pt.x - this.relativePos.x, pt.y - this.relativePos.y)
      this.bgRect.add(new AWT.Rectangle(pt2, this.bx ? this.bx.dim : new AWT.Dimension()))
      // Add a generous border around the area
      this.bgRect.grow(10, 10)

      if (this.bx !== null) {
        // Move the ActiveBox
        this.bx.moveTo(new AWT.Point(pt.x - this.relativePos.x, pt.y - this.relativePos.y))
        this.bx.setTemporaryHidden(false)
        this.bx.update(this.ctx, null)
        this.bx.setTemporaryHidden(true)
      } else {
        // Draw the connecting line
        this.drawLine()
        this.linePainted = true
      }
    }

    /**
     * Starts the box connector operation
     * @param {AWT.Point} pt - Starting point
     * @param {ActiveBox=} box -  Passed only when the BoxConnector runs in drag&drop mode
     */
    begin(pt, box) {
      if (this.active)
        this.end()
      this.origin.moveTo(pt)
      this.dest.moveTo(pt)
      this.linePainted = false
      this.active = true

      if (box) {
        // Remember what box will be moved, hide it from the panel and repaint all
        this.bx = box
        this.relativePos.moveTo(pt.x - box.pos.x, pt.y - box.pos.y)
        this.bx.setFocused(true)
        this.bx.setTemporaryHidden(true)
        this.linePainted = false
        this.parent.invalidate().update()
      }

      // Save the full image currently displayed on the panel (with the box hidden)
      try {
        this.bgImg = this.ctx.getImageData(0, 0, this.dim.width, this.dim.height)
      } catch (ex) {
        // Avoid "canvas tainted by cross-origin data" errors
        // Setting bgImg to null is less efficient, but works
        this.bgImg = null
      }
      this.bgRect = null

      // Make a first movement to make the box appear
      if (box)
        this.moveTo(pt, true)
    }

    /**
     * Finalizes the operation of this box connector until a new call to `begin`
     */
    end() {
      if (!this.active)
        return

      this.active = false
      this.linePainted = false
      this.bgRect = null
      this.bgImg = null

      if (this.bx) {
        // Restore the original position and attributes of the box
        this.bx.setFocused(false)
        this.bx.moveTo(this.origin.x - this.relativePos.x, this.origin.y - this.relativePos.y)
        this.bx.setTemporaryHidden(false)
        this.bx = null
        this.relativePos.moveTo(0, 0)
      }

      // Repaint all
      this.ctx.clearRect(0, 0, this.dim.width, this.dim.height)
      this.parent.invalidate().update()
    }

    /**
     * Strokes a line between `origin` and `dest`, optionally ended with an arrowhead.
     */
    drawLine() {
      if (this.compositeOp !== DEFAULT_COMPOSITE_OP) {
        this.ctx.strokeStyle = this.xorColor
        this.ctx.globalCompositeOperation = this.compositeOp
      } else
        this.ctx.strokeStyle = this.lineColor

      this.ctx.lineWidth = this.lineWidth

      this.ctx.beginPath()
      this.ctx.moveTo(this.origin.x, this.origin.y)
      this.ctx.lineTo(this.dest.x, this.dest.y)
      this.ctx.stroke()

      if (this.arrow) {
        // Draws the arrow head
        const
          beta = Math.atan2(this.origin.x - this.dest.x, this.dest.x - this.origin.x),
          arp = new AWT.Point(this.dest.x - this.arrowLength * Math.cos(beta + this.arrowAngle),
            this.dest.y + this.arrowLength * Math.sin(beta + this.arrowAngle))
        this.ctx.beginPath()
        this.ctx.moveTo(this.dest.x, this.dest.y)
        this.ctx.lineTo(arp.x, arp.y)
        this.ctx.stroke()

        arp.moveTo(this.dest.x - this.arrowLength * Math.cos(beta - this.arrowAngle),
          this.dest.y + this.arrowLength * Math.sin(beta - this.arrowAngle))
        this.ctx.beginPath()
        this.ctx.moveTo(this.dest.x, this.dest.y)
        this.ctx.lineTo(arp.x, arp.y)
        this.ctx.stroke()
      }
      if (this.compositeOp !== DEFAULT_COMPOSITE_OP) {
        // reset default settings
        this.ctx.globalCompositeOperation = DEFAULT_COMPOSITE_OP
      }
    }
  }

  const DEFAULT_COMPOSITE_OP = 'source-over'

  Object.assign(BoxConnector.prototype, {
    /**
     * The background image, saved and redrawn on each movement
     * @name BoxConnector#bgImg
     * @type {external:HTMLImageElement} */
    bgImg: null,
    /**
     * The rectangle of {@link ActivityPanel} saved in `bgImg`
     * @name BoxConnector#bgRect
     * @type {AWT.Rectangle} */
    bgRect: null,
    /**
     * Initial position of the connector
     * @name BoxConnector#origin
     * @type {AWT.Point} */
    origin: null,
    /**
     * Current (while moving) and final position of the connector
     * @name BoxConnector#dest
     * @type {AWT.Point} */
    dest: null,
    /**
     * When `true`, the connector must end on arrowhead
     * @name BoxConnector#arrow
     * @type {boolean} */
    arrow: false,
    /**
     * `true` while the connector is active
     * @name BoxConnector#active
     * @type {boolean} */
    active: false,
    /**
     * `true` while the line has already been painted (used for XOR expressions)
     * @name BoxConnector#linePainted
     * @type {boolean} */
    linePainted: false,
    /**
     * The arrowhead length (in pixels)
     * @name BoxConnector#arrowLength
     * @type {number} */
    arrowLength: 10,
    /**
     * The arrowhead angle
     * @name BoxConnector#arrowAngle
     * @type {number} */
    arrowAngle: Math.PI / 6,
    /**
     * The main color used in XOR operations
     * @name BoxConnector#lineColor
     * @type {string} */
    lineColor: 'black',
    /**
     * The complementary color used in XOR operations
     * @name BoxConnector#xorColor
     * @type {string} */
    xorColor: 'white',
    /**
     * The global composite operator used when drawing in XOR mode. Default is "difference".
     * For a list of possible values see:
     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation}
     * @name BoxConnector#compositeOp
     * @type {string} */
    compositeOp: 'difference',
    /**
     * The default {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation composite operator}
     * ("source-over").
     * @name BoxConnector#DEFAULT_COMPOSITE_OP
     * @static
     * @type {string} */
    DEFAULT_COMPOSITE_OP: DEFAULT_COMPOSITE_OP,
    /**
     * Relative position of point B regarding A
     * @name BoxConnector#relativePos
     * @type {AWT.Point} */
    relativePos: null,
    /**
     * The ActiveBox to connect or move
     * @name BoxConnector#bx
     * @type {ActiveBox} */
    bx: null,
    /**
     * The Graphics context where the BoxConnector will paint
     * @name BoxConnector#ctx
     * @type {external:CanvasRenderingContext2D} */
    ctx: null,
    /**
     * The dimension of the HTML canvas where to draw
     * @name BoxConnector#dim
     * @type {AWT.Dimension} */
    dim: null,
    /**
     * The container to which this connector belongs
     * @name BoxConnector#parent
     * @type {AWT.Container} */
    parent: null,
    /**
     * Width of the connector line
     * @name BoxConnector#lineWidth
     * @type {number} */
    lineWidth: 1.5,
  })

  return BoxConnector
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/boxes/TextGrid.js":
/*!*******************************!*\
  !*** ./src/boxes/TextGrid.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : boxes/TextGrid.js
 *  Created : 12/06/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ../AWT */ "./src/AWT.js"),
  __webpack_require__(/*! ../Utils */ "./src/Utils.js"),
  __webpack_require__(/*! ./AbstractBox */ "./src/boxes/AbstractBox.js"),
  __webpack_require__(/*! ./TextGridContent */ "./src/boxes/TextGridContent.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, AWT, Utils, AbstractBox, TextGridContent) {

  /**
   * Default values
   * @type {object} */
  const defaults = {
    MIN_CELL_SIZE: 12,
    DEFAULT_CELL_SIZE: 20,
    MIN_INTERNAL_MARGIN: 2
  }

  /**
   * Binary flags used to mark status
   * @type {object} */
  const flags = {
    NORMAL: 0,
    INVERTED: 1,
    HIDDEN: 2,
    LOCKED: 4,
    MARKED: 8,
    TRANSPARENT: 16
  }

  /**
   * This class is a special type of {@link AbstractBox} that displays a grid of single
   * characters.
   *
   * It's used {@link CrossWord} and {@link WordSearch} activities.
   * @exports TextGrid
   * @class
   * @extends AbstractBox
   */
  class TextGrid extends AbstractBox {
    /**
     * TextGrid constructor
     * @param {?AbstractBox} parent - The AbstractBox to which this text grid belongs
     * @param {?AWT.Container} container - The container where this text grid is placed.
     * @param {?BoxBase} boxBase - The object where colors, fonts, border and other graphic properties
     * @param {number} x - `X` coordinate of the upper left corner of this grid
     * @param {number} y - `Y` coordinate of the upper left corner of this grid
     * @param {number} ncw - Number of columns of the grid
     * @param {number} nch - Nomber of rows of the grid
     * @param {number} cellW - Width of the cells
     * @param {number} cellH - Height of the cells
     * @param {boolean} border - When `true`, a border must be drawn between the cells
     */
    constructor(parent, container, boxBase, x, y, ncw, nch, cellW, cellH, border) {
      // *TextGrid* extends [AbstractBox](AbstractBox.html)
      super(parent, container, boxBase)
      this.pos.x = x
      this.pos.y = y
      this.nCols = Math.max(1, ncw)
      this.nRows = Math.max(1, nch)
      this.cellWidth = Math.max(cellW, defaults.MIN_CELL_SIZE)
      this.cellHeight = Math.max(cellH, defaults.MIN_CELL_SIZE)
      this.dim.width = cellW * this.nCols
      this.dim.height = cellH * this.nRows
      this.setChars(' ')
      this.preferredBounds = new AWT.Rectangle(this.pos, this.dim)
      this.setBorder(border)
      this.cursorTimer = new AWT.Timer(() => this.blink(0), 500, false)
      this.cursorEnabled = false
      this.useCursor = false
      this.wildTransparent = false
      this.cursor = new AWT.Point()
    }

    /**
     * Factory constructor that creates an empty grid based on a {@link TextGridContent}
     * @param {?AbstractBox} parent - The AbstractBox to which the text grid belongs
     * @param {?AWT.Container} container - The container where the text grid will be placed.
     * @param {number} x - `X` coordinate of the upper left corner of the grid
     * @param {number} y - `Y` coordinate of the upper left corner of the grid
     * @param {TextGridContent} tgc - Object with the content and other settings of the grid
     * @param {boolean} wildTransparent - When `true`, the wildcard character will be transparent
     * @returns {TextGrid}
     */
    static createEmptyGrid(parent, container, x, y, tgc, wildTransparent) {
      const result = new TextGrid(parent, container, tgc.bb,
        x, y, tgc.ncw, tgc.nch, tgc.w, tgc.h, tgc.border)
      result.wild = tgc.wild
      result.randomChars = tgc.randomChars
      result.wildTransparent = wildTransparent
      return result
    }

    /**
     * Sets the characters to be placed in the cells of this TextGrid
     * @param {string} text
     */
    setChars(text) {
      this.chars = []
      this.answers = []
      this.attributes = []
      for (let py = 0; py < this.nRows; py++) {
        const line = py < text.length ? text[py] : ''
        this.chars[py] = line.split('')
        this.answers[py] = []
        this.attributes[py] = []
        for (let px = 0; px < this.nCols; px++) {
          if (px >= line.length)
            this.chars[py][px] = ' '
          this.answers[py][px] = this.chars[py][px]
          this.attributes[py][px] = flags.NORMAL
        }
      }
    }

    /**
     * Substitutes the current content of all cells with wildcards with a randomly generated char.
     * @see TextGridContent#randomChars
     */
    randomize() {
      for (let py = 0; py < this.nRows; py++)
        for (let px = 0; px < this.nCols; px++)
          if (this.chars[py][px] === this.wild)
            this.chars[py][px] = this.randomChars.charAt(
              Math.floor(Math.random() * this.randomChars.length))
    }

    /**
     * Clears or sets global attributes to all cells
     * @param {boolean} lockWild - When `true`, the wildcard cells will be marked with special
     * attributes (used in CrossWords to mark black cells)
     * @param {boolean} clearChars - When `true`, the current content of cells will be erased.
     */
    setCellAttributes(lockWild, clearChars) {
      let atr = flags.LOCKED
      if (this.wildTransparent)
        atr |= flags.TRANSPARENT
      else
        atr |= flags.INVERTED | flags.HIDDEN
      for (let py = 0; py < this.nRows; py++) {
        for (let px = 0; px < this.nCols; px++) {
          if (lockWild && this.chars[py][px] === this.wild)
            this.attributes[py][px] = atr
          else {
            this.attributes[py][px] = flags.NORMAL
            if (clearChars)
              this.chars[py][px] = ' '
          }
        }
      }
    }

    /**
     * Sets or unsets the `locked` properties (black cell) to a specific cell.
     * @param {number} px - The logical 'X' coordinate of the cell
     * @param {number} py - The logical 'Y' coordinate of the cell
     * @param {boolean} locked - When true, the `locked` attribute will be on.
     * @returns {undefined}
     */
    setCellLocked(px, py, locked) {
      if (px >= 0 && px < this.nCols && py >= 0 && py < this.nRows) {
        this.attributes[py][px] = locked ?
          flags.LOCKED |
          (this.wildTransparent ?
            flags.TRANSPARENT :
            flags.INVERTED |
            flags.HIDDEN) :
          flags.NORMAL
      }
    }

    /**
     * For a specific cell located at column `rx` and row `ry`, finds the number of words delimited
     * by wildchars located behind its current position and in the same row and column. Used in
     * {@link CrossWord} activities to find the definition for a specific cell.
     *
     * The result is returned as 'x' and 'y' properties of a logical point.
     * @param {type} rx - The 'X' position of the cell
     * @param {type} ry - The 'Y' position of the cell
     * @returns {AWT.Point} - The logical positions of the definition for this cell inside the list
     * of current definitions of its row and column. '0' means first definition of its row/column,
     * '1' the second one, etc.
     */
    getItemFor(rx, ry) {
      if (!this.isValidCell(rx, ry))
        return null

      const point = new AWT.Point()
      let
        inBlack = false,
        startCount = false

      for (let px = 0; px < rx; px++) {
        if ((this.attributes[ry][px] & flags.LOCKED) !== 0) {
          if (!inBlack) {
            if (startCount)
              point.x++
            inBlack = true
          }
        } else {
          startCount = true
          inBlack = false
        }
      }
      inBlack = false
      startCount = false
      for (let py = 0; py < ry; py++) {
        if ((this.attributes[py][rx] & flags.LOCKED) !== 0) {
          if (!inBlack) {
            if (startCount)
              point.y++
            inBlack = true
          }
        } else {
          startCount = true
          inBlack = false
        }
      }
      return point
    }

    /**
     * Whether the blinking cursor must be enabled or disabled.
     * @param {boolean} status
     */
    setCursorEnabled(status) {
      this.cursorEnabled = status
      if (status === true)
        this.startCursorBlink()
      else
        this.stopCursorBlink()
    }

    /**
     * Starts the {@link AWT.Timer} that makes the cursor blink.
     */
    startCursorBlink() {
      if (this.useCursor && this.cursorEnabled && this.cursorTimer && !this.cursorTimer.isRunning()) {
        this.blink(1)
        this.cursorTimer.start()
      }
    }

    /**
     * Stops the {@link AWT.Timer} that makes the cursor blink.
     */
    stopCursorBlink() {
      if (this.cursorTimer && this.cursorTimer.isRunning()) {
        this.cursorTimer.stop()
        this.blink(-1)
      }
    }

    /**
     * Moves the cursor in the specified x and y directions.
     * @param {number} dx - Amount to move in the 'X' axis
     * @param {number} dy - Amount to move in the 'Y' axis
     * @param {boolean} skipLocked - Skip locked cells (wildcards in {@link CrossWord})
     */
    moveCursor(dx, dy, skipLocked) {
      if (this.useCursor) {
        const point = this.findNextCellWithAttr(this.cursor.x, this.cursor.y,
          skipLocked ? flags.LOCKED : flags.NORMAL,
          dx, dy, false)

        if (!this.cursor.equals(point))
          this.setCursorAt(point.x, point.y, skipLocked)
      }
    }

    /**
     * Finds the coordinates of the nearest non-locked cell (non-wildcard) moving on the indicated
     * 'X' and 'Y' directions.
     * @param {AWT.Point} - Logical coordinates of the starting point
     * @param {number} dx - 0 means no movement, 1 go right, -1 go left.
     * @param {number} dy - 0 means no movement, 1 go down, -1 go up.
     * @returns {AWT.Point}
     */
    findFreeCell(from, dx, dy) {
      let result = null
      if (from && (dx !== 0 || dy !== 0)) {
        const scan = new AWT.Point(from)
        while (result === null) {
          scan.x += dx
          scan.y += dy
          if (scan.x < 0 || scan.x >= this.nCols || scan.y < 0 || scan.y >= this.nRows)
            break
          if (!this.getCellAttribute(scan.x, scan.y, flags.LOCKED))
            result = scan
        }
      }
      return result
    }

    /**
     * Finds the first cell with the specified attributes at the specified state, starting
     * at specified point.
     * @param {number} startX - Starting X coordinate
     * @param {number} startY - Starting Y coordinate
     * @param {number} attr - Attribute to check. See {@link TextGrid.flags}.
     * @param {number} dx - 0 means no movement, 1 go right, -1 go left.
     * @param {number} dy - 0 means no movement, 1 go down, -1 go up.
     * @param {boolean} attrState - Desired state (enabled or disabled) of `attr`
     * @returns {AWT.Point}
     */
    findNextCellWithAttr(startX, startY, attr, dx, dy, attrState) {
      const point = new AWT.Point(startX + dx, startY + dy)
      while (true) {
        if (point.x < 0) {
          point.x = this.nCols - 1
          if (point.y > 0)
            point.y--
          else
            point.y = this.nRows - 1
        } else if (point.x >= this.nCols) {
          point.x = 0
          if (point.y < this.nRows - 1)
            point.y++
          else
            point.y = 0
        }
        if (point.y < 0) {
          point.y = this.nRows - 1
          if (point.x > 0)
            point.x--
          else
            point.x = this.nCols - 1
        } else if (point.y >= this.nRows) {
          point.y = 0
          if (point.x < this.nCols - 1)
            point.x++
          else
            point.x = 0
        }
        if (point.x === startX && point.y === startY ||
          this.getCellAttribute(point.x, point.y, attr) === attrState)
          break
        point.x += dx
        point.y += dy
      }
      return point
    }

    /**
     * Sets the blinking cursor at a specific point
     * @param {number} px - X coordinate
     * @param {number} py - Y coordinate
     * @param {boolean} skipLocked - Skip locked (wildcard) cells
     */
    setCursorAt(px, py, skipLocked) {
      this.stopCursorBlink()
      if (this.isValidCell(px, py)) {
        this.cursor.x = px
        this.cursor.y = py
        this.useCursor = true
        if (skipLocked && this.getCellAttribute(px, py, flags.LOCKED)) {
          this.moveCursor(1, 0, skipLocked)
        } else {
          if (this.cursorEnabled)
            this.startCursorBlink()
        }
      }
    }

    /**
     * Sets the `useCursor` property of this text grid
     * @param {boolean} value
     */
    setUseCursor(value) {
      this.useCursor = value
    }

    /**
     * Gets the current position of the blinking cursor
     * @returns {AWT.Point}
     */
    getCursor() {
      return this.cursor
    }

    /**
     * Counts the number of cells of this grid with the specified character
     * @param {string} ch
     * @returns {number}
     */
    countCharsLike(ch) {
      let result = 0
      for (let py = 0; py < this.nRows; py++)
        for (let px = 0; px < this.nCols; px++)
          if (this.chars[py][px] === ch)
            result++
      return result
    }

    /**
     * Gets the number of cells of this grid
     * @returns {number}
     */
    getNumCells() {
      return this.nRows * this.nCols
    }

    /**
     * Counts the number of coincidences between the `answers` array and the current content of this grid
     * @param {boolean} checkCase - Make comparisions case-sensitive
     * @returns {number}
     */
    countCoincidences(checkCase) {
      let result = 0
      if (this.answers)
        for (let py = 0; py < this.nRows; py++)
          for (let px = 0; px < this.nCols; px++)
            if (this.isCellOk(px, py, checkCase))
              result++
      return result
    }

    /**
     * Checks if a specific cell is equivalent to the content of `answers` at its position
     * @param {number} px - X coordinate
     * @param {number} py - Y coordinate
     * @param {boolean} checkCase - Make comparisions case-sensitive
     * @returns {boolean}
     */
    isCellOk(px, py, checkCase) {
      let result = false
      if (this.isValidCell(px, py)) {
        const ch = this.chars[py][px]
        if (ch !== this.wild) {
          const ch2 = this.answers[py][px]
          if (ch === ch2 ||
            !checkCase && ch.toUpperCase() === ch2.toUpperCase())
            result = true
        }
      }
      return result
    }

    /**
     * Gets the logical coordinates (in 'cell' units) of a device point into the grid
     * @param {AWT.Point} devicePoint
     * @returns {AWT.Point}
     */
    getLogicalCoords(devicePoint) {
      if (!this.contains(devicePoint))
        return null
      const
        px = Math.floor((devicePoint.x - this.pos.x) / this.cellWidth),
        py = Math.floor((devicePoint.y - this.pos.y) / this.cellHeight)

      return this.isValidCell(px, py) ? new AWT.Point(px, py) : null
    }

    /**
     * Checks if the specified logical coordinates are inside the valid bounds of the grid.
     * @param {number} px - 'X' coordinate
     * @param {number} py - 'Y' coordinate
     * @returns {boolean}
     */
    isValidCell(px, py) {
      return px < this.nCols && py < this.nRows && px >= 0 && py >= 0
    }

    /**
     * Sets the specified character as a content of the cell at specified coordinates
     * @param {number} px - 'X' coordinate
     * @param {number} py - 'Y' coordinate
     * @param {string} ch - The character to set.
     */
    setCharAt(px, py, ch) {
      if (this.isValidCell(px, py)) {
        this.chars[py][px] = ch
        this.repaintCell(px, py)
      }
    }

    /**
     * Gets the character of the cell at the specified coordinates
     * @param {number} px - 'X' coordinate
     * @param {number} py - 'Y' coordinate
     * @returns {string}
     */
    getCharAt(px, py) {
      return this.isValidCell(px, py) ? this.chars[py][px] : ' '
    }

    /**
     * Gets the text formed by the letters between two cells that share a straight line on the grid.
     * The text can be formed horizontally, vertically and diagonal, both in left-to-right or
     * right-to-left direction.
     * @param {number} x0 - 'X' coordinate of the first cell
     * @param {number} y0 - 'Y' coordinate of the first cell
     * @param {number} x1 - 'X' coordinate of the second cell
     * @param {number} y1 - 'Y' coordinate of the second cell
     * @returns {string}
     */
    getStringBetween(x0, y0, x1, y1) {
      let sb = ''
      if (this.isValidCell(x0, y0) && this.isValidCell(x1, y1)) {
        let
          dx = x1 - x0,
          dy = y1 - y0
        if (dx === 0 || dy === 0 || Math.abs(dx) === Math.abs(dy)) {
          const steps = Math.max(Math.abs(dx), Math.abs(dy))
          if (steps > 0) {
            dx /= steps
            dy /= steps
          }
          for (let i = 0; i <= steps; i++)
            sb += this.getCharAt(x0 + dx * i, y0 + dy * i)
        }
      }
      return sb
    }

    /**
     * Sets a specific attribute to all cells forming a straight line between two cells on the grid.
     * @param {number} x0 - 'X' coordinate of the first cell
     * @param {number} y0 - 'Y' coordinate of the first cell
     * @param {number} x1 - 'X' coordinate of the second cell
     * @param {number} y1 - 'Y' coordinate of the second cell
     * @param {number} attribute - The binary flag representing this attribute. See {@link TextGrid.flags}.
     * @param {boolean} value - Whether to set or unset the attribute.
     */
    setAttributeBetween(x0, y0, x1, y1, attribute, value) {
      if (this.isValidCell(x0, y0) && this.isValidCell(x1, y1)) {
        let
          dx = x1 - x0,
          dy = y1 - y0

        if (dx === 0 || dy === 0 || Math.abs(dx) === Math.abs(dy)) {
          const steps = Math.max(Math.abs(dx), Math.abs(dy))
          if (steps > 0) {
            dx /= steps
            dy /= steps
          }
          for (let i = 0; i <= steps; i++)
            this.setAttribute(x0 + dx * i, y0 + dy * i, attribute, value)
        }
      }
    }

    /**
     * Sets or unsets a specifi attrobut to a cell.
     * @param {number} px - The 'X' coordinate of the cell
     * @param {number} py - The 'Y' coordinate of the cell
     * @param {number} attribute - The binary flag representing this attribute. See {@link TextGrid.flags}.
     * @param {boolean} state - Whether to set or unset the attribute.
     */
    setAttribute(px, py, attribute, state) {
      if (this.isValidCell(px, py)) {
        if (this.attribute === flags.MARKED && !state)
          this.repaintCell(px, py)
        this.attributes[py][px] &= ~attribute
        this.attributes[py][px] |= state ? attribute : 0
        if (attribute !== flags.MARKED || state)
          this.repaintCell(px, py)
      }
    }

    /**
     * Sets the specified attribute to all cells.
     * @param {number} attribute - The binary flag representing this attribute. See {@link TextGrid.flags}.
     * @param {boolean} state - Whether to set or unset the attribute.
     */
    setAllCellsAttribute(attribute, state) {
      for (let py = 0; py < this.nRows; py++)
        for (let px = 0; px < this.nCols; px++)
          this.setAttribute(px, py, attribute, state)
    }

    /**
     * Gets the specified attribute of a cell
     * @param {number} px - The 'X' coordinate of the cell
     * @param {number} py - The 'Y' coordinate of the cell
     * @param {number} attribute - The binary flag representing this attribute. See {@link TextGrid.flags}.
     * @returns {boolean} - `true` if the cell has this attribute, `false` otherwise.
     */
    getCellAttribute(px, py, attribute) {
      return this.isValidCell(px, py) ? (this.attributes[py][px] & attribute) !== 0 : false
    }

    /**
     * Gets the rectangle enclosing a specific cell
     * @param {number} px - The 'X' coordinate of the cell
     * @param {number} py - The 'Y' coordinate of the cell
     * @returns {AWT.Rectangle}
     */
    getCellRect(px, py) {
      return new AWT.Rectangle(this.pos.x + px * this.cellWidth, this.pos.y + py * this.cellHeight, this.cellWidth, this.cellHeight)
    }

    /**
     * Gets the rectangle enclosing a specific cell, including the border thick.
     * @param {number} px - The 'X' coordinate of the cell
     * @param {number} py - The 'Y' coordinate of the cell
     * @returns {AWT.Rectangle}
     */
    getCellBorderBounds(px, py) {
      const isMarked = this.getCellAttribute(px, py, flags.MARKED)
      if (!this.border && !isMarked)
        return this.getCellRect(px, py)

      const
        bb = this.getBoxBaseResolve(),
        strk = isMarked ? bb.markerStroke : bb.borderStroke

      return this.getCellRect(px, py).grow(strk.lineWidth, strk.lineWidth)
    }

    /**
     * Repaints a cell
     * @param {number} px - The 'X' coordinate of the cell
     * @param {number} py - The 'Y' coordinate of the cell
     */
    repaintCell(px, py) {
      if (this.container)
        this.container.invalidate(this.getCellBorderBounds(px, py)).update()
    }

    /**
     * Gets the preferred size of this grid
     * @returns {AWT.Dimension}
     */
    getPreferredSize() {
      return this.preferredBounds.dim
    }

    /**
     * Gets the minimum size of this grid
     * @returns {AWT.Dimension}
     */
    getMinimumSize() {
      return new AWT.Dimension(defaults.MIN_CELL_SIZE * this.nCols, defaults.MIN_CELL_SIZE * this.nRows)
    }

    /**
     * Scales the grid to a new size
     * @param {number} scale - The factor used to multiply all coordinates and sizes
     * @returns {AWT.Dimension}
     */
    getScaledSize(scale) {
      return new AWT.Dimension(
        Utils.roundTo(scale * this.preferredBounds.dim.width, this.nCols),
        Utils.roundTo(scale * this.preferredBounds.dim.height, this.nRows))
    }

    /**
     * Overrides {@link AbstractBox#setBounds}
     * @override
     * @param {(AWT.Rectangle|number)} rect - An AWT.Rectangle object, or the `x` coordinate of the
     * upper-left corner of a new rectangle.
     * @param {number=} y - `y` coordinate of the upper-left corner of the new rectangle.
     * @param {number=} w - Width of the new rectangle.
     * @param {number=} h - Height of the new rectangle.
     */
    setBounds(rect, y, w, h) {
      super.setBounds(rect, y, w, h)
      this.cellWidth = this.dim.width / this.nCols
      this.cellHeight = this.dim.height / this.nRows
    }

    /**
     * Overrides {@link AbstractBox#updateContent}
     * @override
     * @param {external:CanvasRenderingContext2D} ctx - The canvas rendering context used to draw the
     * grid.
     * @param {AWT.Rectangle=} dirtyRegion - The area that must be repainted. `null` refers to the whole box.
     */
    updateContent(ctx, dirtyRegion) {
      const bb = this.getBoxBaseResolve()

      // test font size
      ctx.font = bb.font.cssFont()
      ctx.textBaseline = 'aplphabetic'
      bb.prepareText(ctx, 'W',
        this.cellWidth - 2 * defaults.MIN_INTERNAL_MARGIN,
        this.cellHeight - 2 * defaults.MIN_INTERNAL_MARGIN)

      const ch = []
      const ry = (this.cellHeight - bb.font.getHeight()) / 2 + bb.font.getMetrics().ascent

      for (let py = 0; py < this.nRows; py++) {
        for (let px = 0; px < this.nCols; px++) {
          const bxr = this.getCellBorderBounds(px, py)
          if (bxr.intersects(dirtyRegion)) {
            const attr = this.attributes[py][px]
            if ((attr & flags.TRANSPARENT) === 0) {
              const isInverted = (attr & flags.INVERTED) !== 0
              const isMarked = (attr & flags.MARKED) !== 0
              const isCursor = this.useCursor && this.cursor.x === px && this.cursor.y === py
              const boxBounds = this.getCellRect(px, py)
              ctx.fillStyle = isCursor && this.cursorBlink ?
                bb.inactiveColor :
                isInverted ? bb.textColor : bb.backColor
              boxBounds.fill(ctx)
              ctx.strokeStyle = 'black'
              if ((attr & flags.HIDDEN) === 0) {
                ch[0] = this.chars[py][px]
                if (ch[0]) {
                  const dx = boxBounds.pos.x + (this.cellWidth - ctx.measureText(ch[0]).width) / 2
                  const dy = boxBounds.pos.y + ry

                  if (bb.shadow) {
                    // Render text shadow
                    const d = Math.max(1, bb.font.size / 10)
                    ctx.fillStyle = bb.shadowColor
                    ctx.fillText(ch[0], dx + d, dy + d)
                  }
                  // Render text
                  ctx.fillStyle = isInverted ? bb.backColor
                    : this.isAlternative() ? bb.alternativeColor : bb.textColor
                  ctx.fillText(ch[0], dx, dy)
                }
              }
              if (this.border || isMarked) {
                ctx.strokeStyle = bb.borderColor
                bb[isMarked ? 'markerStroke' : 'borderStroke'].setStroke(ctx)
                if (isMarked)
                  ctx.globalCompositeOperation = 'xor'

                // Draw border
                boxBounds.stroke(ctx)

                // Reset ctx default values
                if (isMarked)
                  ctx.globalCompositeOperation = 'source-over'
              }
              ctx.strokeStyle = 'black'
              AWT.Stroke.prototype.setStroke(ctx)
            }
          }
        }
      }
      return true
    }

    /**
     * Makes the cursor blink, alternating between two states. This method should be called only by
     * {@link TextGrid#cursorTimer}
     * @param {boolean} status
     */
    blink(status) {
      // TODO: Move blink and timer to ActivityPanel
      if (this.useCursor) {
        this.cursorBlink = status === 1 ? true : status === -1 ? false : !this.cursorBlink
        this.repaintCell(this.cursor.x, this.cursor.y)
      }
    }

    /**
     * Stops the cursor timer if not `null` and active
     */
    end() {
      if (this.cursorTimer) {
        this.cursorTimer.stop()
        this.cursorTimer = null
      }
    }
  }

  Object.assign(TextGrid.prototype, {
    /**
     * Number of rows
     * @name TextGrid#nRows
     * @type {number} */
    nRows: 1,
    /**
     * Number of columns
     * @name TextGrid#nCols
     * @type {number} */
    nCols: 1,
    /**
     * Two-dimension array of characters
     * @name TextGrid#chars
     * @type {string[][]} */
    chars: null,
    /**
     * Two-dimension array with the expected characters, used to check user's answers.
     * @name TextGrid#answers
     * @type {string[][]} */
    answers: null,
    /**
     * Two-dimension array of bytes used as containers of boolean attributes
     * @name TextGrid#attributes
     * @see TextGrid.flags
     * @type {number[][]} */
    attributes: null,
    /**
     * The cell width, in pixels
     * @name TextGrid#cellWidth
     * @type {number} */
    cellWidth: 20,
    /**
     * The cell height, in pixels
     * @name TextGrid#cellHeight
     * @type {number} */
    cellHeight: 20,
    /**
     * The preferred bounds of this grid
     * @name TextGrid#preferredBounds
     * @type {AWT.Rectangle} */
    preferredBounds: null,
    /**
     * The character to be used as wildcard
     * @name TextGrid#wild
     * @type {string} */
    wild: TextGridContent.prototype.wild,
    /**
     * Characters that can be used when randomizing the content of this grid
     * @name TextGrid#randomChars
     * @see TextGridContent#randomChars
     * @type {string} */
    randomChars: TextGridContent.prototype.randomChars,
    /**
     * Whether the blinking cursor is enabled or disabled
     * @name TextGrid#cursorEnabled
     * @type {boolean} */
    cursorEnabled: false,
    /**
     * Whether this grid uses a blinking cursor or not
     * @name TextGrid#useCursor
     * @type {boolean} */
    useCursor: false,
    /**
     * The current position of the cursor
     * @name TextGrid#cursor
     * @type {AWT.Point} */
    cursor: null,
    /**
     * `true` when the cursor is "blinking" (cell drawn with {@link BoxBase} `inverse` attributes)
     * @name TextGrid#cursorBlink
     * @type {boolean} */
    cursorBlink: false,
    /**
     * Controls the blinking of the cursor
     * @name TextGrid#cursorTimer
     * @type {AWT.Timer} */
    cursorTimer: null,
    /**
     * Whether the wildcard character is transparent or opaque
     * @name TextGrid#wildTransparent
     * @type {boolean} */
    wildTransparent: false,
  })

  /**
   * TextGrid default values
   * @name TextGrid.defaults
   * @constant
   * @type {object} */
  TextGrid.defaults = defaults

  /**
   * Binary flags used to mark status
   * @name TextGrid.flags
   * @constant
   * @type {object} */
  TextGrid.flags = flags

  return TextGrid
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/boxes/TextGridContent.js":
/*!**************************************!*\
  !*** ./src/boxes/TextGridContent.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : boxes/TextGridContent.js
 *  Created : 14/04/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ../Utils */ "./src/Utils.js"),
  __webpack_require__(/*! ./BoxBase */ "./src/boxes/BoxBase.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, Utils, BoxBase) {

  /**
   * This class encapsulates the content of {@link TextGrid} objects.
   *
   * It implements methods to set and retrieve individual characters on the grid, and parsing of
   * XML objects. It also contains information about the optimal size and other graphic properties
   * (fonts, colors, etc.) of the grid.
   * @exports TextGridContent
   * @class
   */
  class TextGridContent {
    /**
     * TextGridContent constructor
     */
    constructor() {
      this.bb = new BoxBase(null)
      this.text = []
    }

    /**
     * Loads the object settings from a specific JQuery XML element
     * @param {external:jQuery} $xml
     */
    setProperties($xml) {
      // Read attributes
      Utils.attrForEach($xml.get(0).attributes, (name, val) => {
        switch (name) {
          case 'rows':
            // WARNING: Due to a bug in JClic, the meaning of "rows" and "columns" must be
            // interchanged:
            this.ncw = Number(val)
            break
          case 'columns':
            this.nch = Number(val)
            break
          case 'cellWidth':
            this.w = Number(val)
            break
          case 'cellHeight':
            this.h = Number(val)
            break
          case 'border':
            this.border = Utils.getBoolean(val)
            break
          case 'wild':
          case 'randomChars':
            this[name] = val
            break
        }
      })

      // Read inner elements
      $xml.children('style:first').each((_n, child) => {
        this.bb = new BoxBase().setProperties($(child))
      })

      $xml.find('text:first > row').each((_n, el) => this.text.push(el.textContent))

      for (let i = this.text.length; i < this.nch; i++)
        this.text[i] = ''

      return this
    }

    /**
     * Counts the number of wildcard characters present in this TextGrid
     * @returns {number}
     */
    countWildChars() {
      let result = 0
      if (this.text)
        for (let y = 0; y < this.nch; y++)
          for (let x = 0; x < this.ncw; x++)
            if (this.text[y].charAt(x) === this.wild)
              result++
      return result
    }

    /**
     * Counts the total number of characters, including wildcard characters.
     * @returns {Number}
     */
    getNumChars() {
      return this.ncw * this.nch
    }

    /**
     * Sets the specified character as a content of the cell located at specific coordinates
     * @param {number} x - The X coordinate of the cell
     * @param {number} y - The X coordinate of the cell
     * @param {string} ch - The character to be placed on the specified cell
     */
    setCharAt(x, y, ch) {
      if (x >= 0 && x < this.ncw && y >= 0 && y < this.nch)
        this.text[y] = this.text[y].substring(0, x) + ch + this.text[y].substring(x + 1)
    }
  }

  Object.assign(TextGridContent.prototype, {
    /**
     * Grid columns
     * @name TextGridContent#ncw
     * @type {number} */
    ncw: 1,
    /**
     * Grid rows
     * @name TextGridContent#nch
     * @type {number} */
    nch: 1,
    /**
     * Width of cells
     * @name TextGridContent#w
     * @type {number} */
    w: 20,
    /**
     * Height of cells
     * @name TextGridContent#h
     * @type {number} */
    h: 20,
    /**
     * Whether the cells must be surrounded by a border or not
     * @name TextGridContent#border
     * @type {boolean} */
    border: false,
    /**
     * The {@link BoxBase} object with visual settings of the text grid
     * @name TextGridContent#bb
     * @type {BoxBase} */
    bb: null,
    /**
     * An array of String objects containing the chars of cells. One string per row, one character of
     * this string per cell.
     * @name TextGridContent#text
     * @type {string[]} */
    text: null,
    /**
     * The letter used as wildcard
     * @name TextGridContent#wild
     * @type {string} */
    wild: '*',
    /**
     * A String with the chars to take as source when randomly filling empty cells
     * @name TextGridContent#randomChars
     * @type {string} */
    randomChars: Utils.settings.RANDOM_CHARS,
  })

  return TextGridContent
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/i18n.js":
/*!*********************!*\
  !*** ./src/i18n.js ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : i18n.js
 *  Created : 26/05/2016
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! i18next/dist/cjs/i18next */ "./node_modules/i18next/dist/cjs/i18next.js"),
  __webpack_require__(/*! ./GlobalData */ "./src/GlobalData.js"),
  __webpack_require__(/*! ./Utils */ "./src/Utils.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function (i18next, GlobalData, Utils) {

  /**
   * Checks if the language preferred by the user (based on browser and/or specific settings)
   * is in a list of available languages.
   * @param {string[]} availableLanguages - Array of available languages. It should contain at least one item.
   * @param {string=} defaultLanguage -Language to be used by default when not found the selected one
   * @param {string} setLang - Request this specific language
   * @returns {string} - The most suitable language for this request
   */
  const checkPreferredLanguage = (availableLanguages, defaultLanguage, setLang) => {
    let result = -1
    // Create an array to store possible values
    let tries = []
    // If "setLang" is specified, check it
    if (setLang)
      tries.push(setLang)

    // Add user's preferred languages, if any
    if (window.navigator.languages)
      tries = tries.concat(window.navigator.languages)

    // Add the navigator main language, if defined
    if (window.navigator.language)
      tries.push(window.navigator.language)

    // Add English as final option
    tries.push(defaultLanguage || 'en')

    for (let i = 0; i < tries.length; i++) {
      let match = -1
      for (let n in availableLanguages) {
        if (tries[i].indexOf(availableLanguages[n]) === 0) {
          match = n
          if (tries[i] === availableLanguages[n]) {
            result = n
            break
          }
        }
      }
      if (result >= 0 || (result = match) >= 0)
        break
    }
    return availableLanguages[result >= 0 ? result : 0]
  }

  /**
   * Initializes i18next, assigning the translation function to ps
   * @param {type} ps
   */
  return (ps) => {
    i18next.init({
      nsSeparator: false,
      keySeparator: false,
      fallbackLng: 'en',
      lng: checkPreferredLanguage(GlobalData.languages, 'en', ps.options.lang),
      resources: {
        en: { translation: {} },
        ca: { translation: GlobalData.messages.ca },
        'ca_ES@valencia': { translation: GlobalData.messages['ca_ES@valencia'] },
        es: { translation: GlobalData.messages.es }
      }
    }, (err, t) => {
      if (err)
        Utils.log('error', `Error initializing "i18next": ${err.message}`)
      else {
        Utils.getMsg = ps.getMsg = t
        ps.JClicVersion = GlobalData.version
      }
    })
  }
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/media/ActiveMediaBag.js":
/*!*************************************!*\
  !*** ./src/media/ActiveMediaBag.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : media/ActiveMediaBag.js
 *  Created : 28/04/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! ./ActiveMediaPlayer */ "./src/media/ActiveMediaPlayer.js"),
  __webpack_require__(/*! ../Utils */ "./src/Utils.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function (ActiveMediaPlayer, Utils) {

  /**
   * This class stores a collection of realized {@link ActiveMediaPlayer} objects, related to a
   * {@link JClicProject} or {@link Activity}.
   * @exports ActiveMediaBag
   * @class
   */
  class ActiveMediaBag {
    /**
     * ActiveMediaBag constructor
     */
    constructor() {
      this.players = []
    }

    /**
     * Creates a new {@link ActiveMediaPlayer} linked to this media bag
     * @param {MediaContent} mc - The content used by the new player
     * @param {MediaBag} mb - The project's MediaBag
     * @param {PlayStation} ps - An object implementing the
     * [PlayStation](http://projectestac.github.io/jclic/apidoc/edu/xtec/jclic/PlayStation.html) interface,
     * usually a {@link JClicPlayer}.
     * @returns {ActiveMediaPlayer}
     */
    createActiveMediaPlayer(mc, mb, ps) {
      let amp = null
      switch (mc.mediaType) {
        case 'RECORD_AUDIO':
          if (mc.length <= 0 || mc.length >= Utils.settings.MAX_RECORD_LENGTH)
            break
        /* falls through */
        case 'PLAY_RECORDED_AUDIO':
          if (mc.recBuffer < 0 || mc.recBuffer >= 10)
            break
        /* falls through */
        case 'PLAY_AUDIO':
        case 'PLAY_MIDI':
        case 'PLAY_VIDEO':
          amp = new ActiveMediaPlayer(mc, mb, ps)
          break
      }
      if (amp !== null)
        this.players.push(amp)
      return amp
    }

    /**
     * Looks for an already existing {@link ActiveMediaPlayer} equivalent to the requested.
     * When not found, a new one is created and and returned.
     * @param {MediaContent} mc - The content used by the new player
     * @param {MediaBag} mb - The project's MediaBag
     * @param {PlayStation} ps - An object implementing the
     * {@link http://projectestac.github.io/jclic/apidoc/edu/xtec/jclic/PlayStation.html|PlayStation} interface,
     * usually a {@link JClicPlayer}.
     * @returns {ActiveMediaPlayer}
     */
    getActiveMediaPlayer(mc, mb, ps) {
      return this.players.find(p => p.mc === mc || p.mc.isEquivalent(mc))
        || this.createActiveMediaPlayer(mc, mb, ps)
    }

    /**
     * Removes from the list of players the {@link ActiveMediaPlayer} related to the specified {@link MediaContent}.
     * @param {MediaContent} mc - The media content to look for.
     */
    removeActiveMediaPlayer(mc) {
      const i = this.players.findIndex(p => p.mc === mc)
      if (i >= 0) {
        this.players[i].clear()
        // removes the element pointed by 'i'
        this.players.splice(i, 1)
      }
    }

    /**
     * Realizes all the media elements stored in this bag
     */
    realizeAll() {
      this.players.forEach(p => p.realize())
    }

    /**
     * Stops playing all media elements stored in this bag
     * @param {number} level - Level at and below what all media players will be muted.
     */
    stopAll(level) {
      if (typeof level === 'undefined')
        level = -1
      this.players.forEach(amp => {
        if (level === -1 || amp.mc !== null && amp.mc.level <= level)
          amp.stop()
      })
    }

    /**
     * Removes all players from this media bag
     */
    removeAll() {
      this.players.forEach(p => p.clear())
      // Empty the `players` array
      this.players.length = 0
      ActiveMediaPlayer.prototype.clearAllAudioBuffers()
    }
  }

  Object.assign(ActiveMediaBag.prototype, {
    /**
     * The collection of {@link ActiveMediaPlayer} objects stored in this media bag.
     * @name ActiveMediaBag#players
     * @type {ActiveMediaPlayer[]} */
    players: [],
  })

  return ActiveMediaBag
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/media/ActiveMediaPlayer.js":
/*!****************************************!*\
  !*** ./src/media/ActiveMediaPlayer.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : media/ActiveMediaPlayer.js
 *  Created : 28/04/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ./AudioBuffer */ "./src/media/AudioBuffer.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, AudioBuffer) {

  /**
   * This kind of object encapsulates a realized {@link MediaContent} and provides methods to start,
   * stop, pause and record different types of media (audio, video, MIDI, voice recording...)
   * @exports ActiveMediaPlayer
   * @class
   */
  class ActiveMediaPlayer {
    /**
     * ActiveMediaPlayer constructor
     * @param {MediaContent} mc - - The content used by this player
     * @param {MediaBag} mb - The project's MediaBag
     * @param {PlayStation} ps - An object implementing the
     * {@link http://projectestac.github.io/jclic/apidoc/edu/xtec/jclic/PlayStation.html PlayStation} interface,
     * usually a {@link JClicPlayer}.
     */
    constructor(mc, mb, ps) {
      this.mc = mc
      this.ps = ps
      switch (mc.mediaType) {
        case 'RECORD_AUDIO':
          if (ActiveMediaPlayer.AUDIO_BUFFERS) {
            this.clearAudioBuffer(mc.recBuffer)
            ActiveMediaPlayer.AUDIO_BUFFERS[mc.recBuffer] = new AudioBuffer(mc.length)
          }
        /* falls through */
        case 'PLAY_RECORDED_AUDIO':
          this.useAudioBuffer = true
          break
        case 'PLAY_AUDIO':
        case 'PLAY_VIDEO':
        case 'PLAY_MIDI':
          this.mbe = mb.getElement(mc.mediaFileName, true)
          break
        default:
          break
      }
    }

    /**
     * Generates the objects that will play media
     */
    realize() {
      if (this.mbe) {
        this.mbe.build(mbe => {
          if (mbe.data && mbe.data.pause && !mbe.data.paused && !mbe.data.ended && mbe.data.currentTime)
            mbe.data.pause()
          if ((mbe.type === 'video' || mbe.type === 'anim') && mbe.data) {
            this.$visualComponent = $(mbe.data)
            this.$visualComponent.css('z-index', 20)
          }
        })
      }
    }

    /**
     * Plays the media, realizing it if needed.
     * @param {ActiveBox=} _setBx - The active box where this media will be placed (when video)
     */
    playNow(_setBx) {
      // TODO: Remove unused param "_setBx"
      if (this.useAudioBuffer) {
        if (ActiveMediaPlayer.AUDIO_BUFFERS) {
          const $div = this.ps && this.ps.$div;
          const buffer = ActiveMediaPlayer.AUDIO_BUFFERS[this.mc.recBuffer]
          if (buffer) {
            if (this.mc.mediaType === 'RECORD_AUDIO') {
              buffer.record($div)
            } else {
              buffer.play()
            }
          }
        }
      } else if (this.mbe) {
        this.mbe.build(() => {
          if (this.mbe.data) {
            if (this.mbe.type === 'midi') {
              this.mbe.data.playTo = this.mc.to || 0
            } else {
              let armed = false
              const $player = $(this.mbe.data)
              // Clear previous event handlers
              $player.off()
              // If there is a time fragment specified, prepare to stop when the `to` position is reached
              if (this.mc.to > 0) {
                $player.on('timeupdate', () => {
                  if (armed && this.mbe.data.currentTime >= this.mc.to / 1000) {
                    $player.off('timeupdate')
                    this.mbe.data.pause()
                  }
                })
              }
              // Launch the media despite of its readyState
              armed = true
            }
            if (!this.mbe.data.paused && !this.mbe.data.ended && this.mbe.data.currentTime)
              this.mbe.data.pause()
            // Seek the media position
            this.mbe.data.currentTime = this.mc.from > 0 ? this.mc.from / 1000 : 0
            this.mbe.data.play()
          }
        })
      }
    }

    /**
     * Plays the media when available, without blocking the current thread.
     * @param {ActiveBox=} setBx - The active box where this media will be placed (when video)
     */
    play(setBx) {
      this.stopAllAudioBuffers()
      this.playNow(setBx)
    }

    /**
     * Stops the media playing
     */
    stop() {
      if (this.useAudioBuffer)
        this.stopAudioBuffer(this.mc.recBuffer)
      else if (this.mbe && this.mbe.data && this.mbe.data.pause && !this.mbe.data.paused && !this.mbe.data.ended && this.mbe.data.currentTime)
        this.mbe.data.pause()
    }

    /**
     * Frees all resources used by this player
     */
    clear() {
      this.stop()
      if (this.useAudioBuffer)
        this.clearAudioBuffer(this.mc.recBuffer)
    }

    /**
     * Clears the specified audio buffer
     * @param {number} buffer - Index of the buffer in {@link ActiveMediaPlayer.AUDIO_BUFFERS}
     */
    clearAudioBuffer(buffer) {
      if (ActiveMediaPlayer.AUDIO_BUFFERS &&
        buffer >= 0 && buffer < ActiveMediaPlayer.AUDIO_BUFFERS.length &&
        ActiveMediaPlayer.AUDIO_BUFFERS[buffer]) {
        ActiveMediaPlayer.AUDIO_BUFFERS[buffer].clear()
        ActiveMediaPlayer.AUDIO_BUFFERS[buffer] = null
      }
    }

    /**
     * Clears all audio buffers
     */
    clearAllAudioBuffers() {
      if (ActiveMediaPlayer.AUDIO_BUFFERS)
        ActiveMediaPlayer.AUDIO_BUFFERS.forEach((_buffer, n) => this.clearAudioBuffer(n))
    }

    /**
     * Counts the number of active audio buffers
     * @returns {number}
     */
    countActiveBuffers() {
      return ActiveMediaPlayer.AUDIO_BUFFERS ? ActiveMediaPlayer.AUDIO_BUFFERS.reduce((c, ab) => c + ab ? 1 : 0, 0) : 0
    }

    /**
     * Stops the playing or recording actions of all audio buffers
     */
    stopAllAudioBuffers() {
      if (ActiveMediaPlayer.AUDIO_BUFFERS)
        ActiveMediaPlayer.AUDIO_BUFFERS.forEach(ab => ab ? ab.stop() : null)
    }

    /**
     * Stops a specific audio buffer
     * @param {number} buffer - Index of the buffer in {@link ActiveMediaPlayer.AUDIO_BUFFERS}
     */
    stopAudioBuffer(buffer) {
      if (ActiveMediaPlayer.AUDIO_BUFFERS &&
        buffer >= 0 && buffer < ActiveMediaPlayer.AUDIO_BUFFERS.length &&
        ActiveMediaPlayer.AUDIO_BUFFERS[buffer])
        ActiveMediaPlayer.AUDIO_BUFFERS[buffer].stop()
    }

    /**
     * Checks the position of visual components after a displacement or resizing of its container
     * @param {ActiveBox} _bxi - The container where this player is hosted
     */
    checkVisualComponentBounds(_bxi) {
      // does nothing
    }

    /**
     * Sets the visual component of this player visible or invisible
     * @param {boolean} _state - `true` for visible
     */
    setVisualComponentVisible(_state) {
      // TODO: Implement setVisualComponentVisible
    }

    /**
     * Sets the ActiveBox associated to this media player
     * @param {?ActiveBox} setBx - The new container of this media. Can be `null`.
     */
    linkTo(setBx) {
      this.bx = setBx
      if (this.bx && this.$visualComponent)
        this.bx.setHostedComponent(this.$visualComponent)
    }
  }

  /**
   * Recording of audio is enabled only when `navigator.getUserMedia` and `MediaRecorder` are defined
   * In 02-Mar-2016 this is implemented only in Firefox 41 and Chrome 49 or later.
   * See: {@link https://addpipe.com/blog/mediarecorder-api}
   * @type Boolean
   */
  ActiveMediaPlayer.REC_ENABLED = typeof MediaRecorder !== 'undefined' && typeof navigator !== 'undefined'

  if (ActiveMediaPlayer.REC_ENABLED) {
    navigator.getUserMedia = navigator.getUserMedia ||
      navigator.webkitGetUserMedia ||
      navigator.mozGetUserMedia ||
      navigator.msGetUserMedia
  }

  /**
   * Audio buffers used for recording and playing voice are stored in a static array because
   * they are common to all instances of {@link ActiveMediaPlayer}
   * Only initialized when {@link REC_ENABLED} is `true`.
   * @type {AudioBuffer[]} */
  ActiveMediaPlayer.AUDIO_BUFFERS = ActiveMediaPlayer.REC_ENABLED ? [] : null

  Object.assign(ActiveMediaPlayer.prototype, {
    /**
     * The MediaContent associated to this player.
     * @name ActiveMediaPlayer#mc
     * @type {MediaContent} */
    mc: null,
    /**
     * The player to which this player belongs.
     * @name ActiveMediaPlayer#ps
     * @type {JClicPlayer} */
    ps: null,
    /**
     * MediaPlayers should be linked to {@link ActiveBox} objects.
     * @name ActiveMediaPlayer#bx
     * @type {ActiveBox} */
    bx: null,
    /**
     * The visual component for videos, usually a `video` HTML element
     * @name ActiveMediaPlayer#$visualComponent
     * @type {external:jQuery} */
    $visualComponent: null,
    /**
     * When `true`, this player makes use of a recording audio buffer
     * @name ActiveMediaPlayer#useAudioBuffer
     * @type {boolean} */
    useAudioBuffer: false,
    /**
     * The {@link MediaBagElement} containing the reference to the media to be played
     * @name ActiveMediaPlayer#mbe
     * @type {MediaBagElement} */
    mbe: null,
  })

  return ActiveMediaPlayer
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/media/AudioBuffer.js":
/*!**********************************!*\
  !*** ./src/media/AudioBuffer.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : media/EventSoundsElement.js
 *  Created : 01/04/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define, navigator */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! ../Utils */ "./src/Utils.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Utils) {
  /**
   * The AudioBuffer object provides sound recording and replaying to activities.
   * @exports AudioBuffer
   * @class
   */
  class AudioBuffer {
    /**
     * AudioBuffer constructor
     * @param {number=} seconds - The maximum amount of time allowed to be recorded by this AudioBuffer
     */
    constructor(seconds) {
      if (navigator && navigator.mediaDevices && navigator.mediaDevices.getUserMedia)
        this.enabled = true;
      if (seconds)
        this.seconds = seconds
      this.chunks = []
    }

    /**
     * Starts playing the currently recorded audio, if any.
     */
    play() {
      this.stop()
      if (this.mediaPlayer) {
        this.mediaPlayer.currentTime = 0
        this.mediaPlayer.play()
      } else {
        this.playWhenFinished = true
      }
    }

    /**
     * Stops the current operation, either recording or playing audio
     */
    stop() {
      if (this.mediaRecorder && this.mediaRecorder.state === 'recording')
        this.mediaRecorder.stop()
      else if (this.mediaPlayer && !this.mediaPlayer.paused)
        this.mediaPlayer.pause()
    }

    /**
     * Starts recording audio, or stops the recording if already started.
     * @param {jQuery=} $div - Optional `div` element where the recording is performed, as a jQuery ref.
     */
    record($div) {
      if (this.mediaRecorder && this.mediaRecorder.state === 'recording')
        this.mediaRecorder.stop()
      else if (this.enabled) {
        this.stop()
        this.mediaPlayer = null

        navigator.mediaDevices.getUserMedia({ audio: true, video: false })
          .then(mediaStream => {
            this.mediaRecorder = new MediaRecorder(mediaStream)
            this.mediaRecorder.ondataavailable = ev => this.chunks.push(ev.data)
            this.mediaRecorder.onerror = err => {
              Utils.log('error', `Error recording audio: ${err}`)
              this.mediaRecorder = null
            }
            this.mediaRecorder.onstart = () => {
              Utils.log('debug', 'Recording audio started')
              this.visualFeedbak(true, $div)
            }
            this.mediaRecorder.onstop = () => {
              Utils.log('debug', 'Recording audio finished')
              this.visualFeedbak(false, $div)

              if (this.timeoutID) {
                window.clearTimeout(this.timeoutID)
                this.timeoutID = null
              }

              const options = {}
              if (this.chunks.length > 0 && this.chunks[0].type)
                options.type = this.chunks[0].type
              const blob = new Blob(this.chunks, options)
              this.chunks = []
              this.mediaPlayer = document.createElement('audio')
              this.mediaPlayer.src = URL.createObjectURL(blob)
              this.mediaPlayer.pause()
              this.mediaRecorder = null
              if (this.playWhenFinished) {
                this.playWhenFinished = false
                this.mediaPlayer.play()
              }
            }
            this.mediaRecorder.onwarning = ev => Utils.log('warn', `Warning recording audio: ${ev}`)

            this.playWhenFinished = false
            this.mediaRecorder.start()
            this.timeoutID = window.setTimeout(() => {
              if (this.mediaRecorder)
                this.mediaRecorder.stop()
            }, this.seconds * 1000)
          })
          .catch(err => {
            Utils.log('error', err.toString());
            this.visualFeedbak(false, $div);
          });
      }
    }

    /**
     * Set visual feedback to the user while the system is recording audio
     * Currently changes the cursor pointer associated to the HTML element
     * containing the recorder.
     * @param {boolean} enabled - Flag indicating if the visual feedback should be active or inactive
     * @param {jQuery=} $div - Optional `div` element where the recording is performed, as a jQuery ref.
     */
    visualFeedbak(enabled, $div) {
      if ($div)
        $div.css('cursor', enabled ? 'progress' : 'inherit');
    }

    /**
     * Clears all data associated to this AudioBuffer
     */
    clear() {
      this.stop()
      this.mediaPlayer = null
    }
  }

  /**
   * Maximum amount of time allowed for recordings (in seconds)
   * @type {number}
   */
  AudioBuffer.MAX_RECORD_LENGTH = 180

  Object.assign(AudioBuffer.prototype, {
    /**
     * AudioBuffer is enabled only in browsers with `navigator.MediaDevices.getuserMedia`
     * @name AudioBuffer#enabled
     * @type {boolean}
     */
    enabled: false,
    /**
     * Maximum length of recordings allowed to this AudioBuffer (in seconds)
     * @name AudioBuffer#seconds
     * @type {number}
     */
    seconds: 20,
    /**
     * The object used to record audio data and convert it to a valid stream for the {@link mediaPlayer}
     * @name AudioBuffer#mediaRecorder
     * @type {external:MediaRecorder}
     */
    mediaRecorder: null,
    /**
     * Array of data chunks collected during the recording
     * @name AudioBuffer#chunks
     * @type {Blob[]}
     */
    chunks: null,
    /**
     * The HTML audio element used to play the recorded sound
     * @name AudioBuffer#mediaPlayer
     * @type {external:HTMLAudioElement}
     */
    mediaPlayer: null,
    /**
     * The identifier of the timer launched to stop the recording when the maximum time is exceeded.
     * This member is `null` when no timeout function is associated to this AudioBuffer
     * @name AudioBuffer#timeoutID
     * @type {number}
     */
    timeoutID: null,
    /**
     * Instructs this AudioBuffer recorder to start playing the collected audio at the end of the
     * current `mediaRecorder` task.
     * @name AudioBuffer#playWhenFinished
     * @type {boolean}
     */
    playWhenFinished: false,
  })

  return AudioBuffer
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/media/EventSounds.js":
/*!**********************************!*\
  !*** ./src/media/EventSounds.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : media/EventSounds.js
 *  Created : 01/04/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ./EventSoundsElement */ "./src/media/EventSoundsElement.js"),
  __webpack_require__(/*! ../Utils */ "./src/Utils.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, EventSoundsElement, Utils) {

  /**
   * The EventSounds objects contains specific sounds to be played when JClic events are fired:
   * - start
   * - click
   * - actionError
   * - actionOk
   * - finishedError
   * - finishedOk
   *
   * The sounds are stored in an array of {@link EventSoundsElement} objects.
   * @exports EventSounds
   * @class
   */
  class EventSounds {
    /**
     * EventSounds constructor
     * @param {EventSounds=} parent - Another EventSounds object that will act as a parent of this one,
     * used to resolve which sound must be played for events when not defined here.
     */
    constructor(parent) {
      if (parent) {
        this.elements = Object.assign({}, this.elements, parent.elements)
        this.enabled = parent.enabled
      }
    }

    /**
     * Reads the object properties from an XML element
     * @param {external:jQuery} $xml - The XML element to be parsed
     */
    setProperties($xml) {
      this.enabled = Utils.getTriState($xml.attr('enabled'), this.enabled)
      $xml.children().each((_n, child) => {
        const id = child.getAttribute('id')
        this.elements[id] = new EventSoundsElement(id)
        this.elements[id].setProperties($(child))
      })
      return this
    }

    /**
     * Instantiates the audio objects needed to play event sounds
     * @param {PlayStation} ps
     * @param {MediaBag} mediaBag
     */
    realize(ps, mediaBag) {
      // Values are {EventSoundElement} objects
      $.each(this.elements, (key, value) => value.realize(ps, mediaBag))
    }

    /**
     * Plays a specific event sound
     * @param {string} eventName - The identifier of the event to be played
     */
    play(eventName) {
      if (this.globalEnabled && this.enabled) {
        const sound = this.elements[eventName]
        if (sound && sound.enabled)
          sound.play()
      }
    }
  }

  /**
   * Audio data for default event sounds
   * @name EventSounds.MEDIA
   * @type {object} */
  EventSounds.MEDIA = {
    start: 'data:audio/mp3;base64,' +
      '//NAxAARGk5RdUEQANIEZEBAPGPyIAAYAKMY/6EaQn8hP+c/yEb//kITU7oc9Cf6nPnPoT/8nQhC' +
      'KEEEnDizkAwM8ThYH1Bj/EAYEhyUGghyivv7fn0vtsLdYI0CiTQE+aaqfH3BW37/80LEFhl6nvZf' +
      'j1ACplLtsfx19gOQfBp7iHeEWRj8WxiLLI6khikjEI9IvsePycfERCSpPJ9s95IbO1O/tRX70XQi' +
      'OGX+n+hmeb+aMirKxN/IibInf//G3K9PVym7NoL/W2usCkcMT5T/80DEDBcivuJd0lADkXMLoGxc' +
      'A7ENhPlAY8LMK280iLkhQq80ojkRQCwz/rEsTjjTlMPMu3RWZ2c3dmONON0NVDzDzDzP79Y9PFg9' +
      'v//oqi4hHyp+7HGl2b///I8VcYAAls9qrCT1Mv/zQsQKFsrCvlzLRNa/FN/jd/HUrGLUa8tKonzD' +
      'K8+t55alG5sbKYilBExD8Id1ugmp+eKIdSplGpaoxNZiznEU/J9KJmUsqBzPVjJ/+Aif//71QCdv' +
      '+gE7f//6gICqPAAci1sbgH8/G//zQMQKFfF2qb9ZaAKU9PlY3uHFsAqAXfgZvyyhtTM2fC1zH/8+' +
      'tFlslODFHjTHsClFqSTfprRCxdzMcppQ8yHsbbEkzpoLvZFBnWt1GBa/+8se/+SPdQe//FIIsAAA' +
      'ba7YbC65AQAf//NCxA0XMh6xv5OIAEIz0mVENAJ0DbwIQjpGYFNAvTSI1ePBuh+MwYk+xib0DA/K' +
      '5YQadIk+o0Z0UyLmiv+h5bMD1Ro3/3/TSUggmu/+v/7KNL03CcLAh//5dpCqkltAAAqFFpldqAHI' +
      '//NAxAwXGl7aXYxoABm/nTyF8EwhIPY/DSOKUIQ2WXUzAlFDQXzyRCXBUNUk33XoqQNhyeltWFUL' +
      '6CKTImv7/vSZNZw0MP6v/v2oFQ5EUR7/1SVyb//E7FkIn9f9NXWQAg47vXRBbzv/80LEChbaYs5f' +
      '2IAC9rPHK1z/yygqmvwSoaAGvNLr9jCagdVUGyxOpVqpp79lJPf9ZNEttWXTUvf/9azMUgOcZrZP' +
      'MThF00d7//v///9SnpUlpJJJJJFeLhp3///yKi4QAHWdrdQE07P/80DEChTJvrI+Ro6Oalhjl3DY' +
      'QyyMpMHHcIbTFNlqYvp6GKBJBYZ89G+PKyt/Q4oCbx9z9b//80CTA+F3zTlSqOz6G0PoVCIItC3/' +
      'CnwN/xZAvcr/99VSIAEKz7+UABhWz01LyctXJv/zQsQRE5nOvl4WFHISWA9Ybn87+VaIKzA0kk7n' +
      '33/KHo6qv1QKoNjMTHtX//ocaRCuGg2MP8jbueS9WIWU3NPcenOEv/CbcsVAKiIkATNv/9QAb60q' +
      'FitrzbcZQ+ixX7169gCfAOpwHf/zQMQeE+Fasl4T0HJRrdobjyh8XBKr80WAqJQaiQPhY7vmJ4//' +
      '/ppkOhOaLMDbgVOwVdYt0SgqM/4hBQO+qglKQAFQM0aPnrrVvpRJLyCYt2amWVGBpcJrSl6ypI4h' +
      'goMQk5Di+Yv3//NCxCkP+IpANGYehC+92dkrPJ/1a+z+3/r/sL/6f+6G7BotKqkVeDWsJLMDPP8p' +
      'f2a4///Jf+VgHuRkfn85h7MIeAY9RE3ZM3IRTyUaGvCJpep52lDPb0nCY5xRqRkEWzDKgw+8Ftdp' +
      '//NAxEUS42YhgAhHHAG9ZCQjo0VONppYbQStB6qWUv5f591O8bze0/3y//62eUqnWzSn9vNsnOBz' +
      'K8TN6urr6bcxGukbeqNZjuyIMO5FREnqzI6SVZVcahzgpCwMa561B4M8zjedy6v/80LEVBI7ViYo' +
      'CEsdN5b7kv/+Rsub5P/X6yz0/JdhcZdZl+/hII/xFYdTSmc0ck3O0055fkc2R+ZgsyZsEagnMwRq' +
      'kK1xle//6iZh/ITJmiF/yEKT4QyEKEP8hMQl/mNYxv+hn/lKZyn/80DEZxEbPiWICEc9StmmMZW0' +
      'r1KXR/qYxnX0UpWMZAxQFqoapnCiQwqxihWDAQEBAQEKE6mZGZGTTMiMjTWZHa/aZkZlTRGXojIz' +
      'L///////8yP85/5k1lspGrWRyNWCggYME4kGJf/zQsR9EkNiDAAARN1MNUkqTEFNRTMuOTkuNaqq' +
      'qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq' +
      'qqqqqqqqqqqqqqqqqqqqqqqqqv/zQMSQDcslQAoAR1mqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq' +
      'qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq' +
      'qqqqqqqqqqqq',
    click: 'data:audio/mp3;base64,' +
      '//NAxAASsyJgIUEQAY///gX8///yfyHO/8hCEafoRp3nPQgAAEUAABBCEIT//QhCKQhNGyEIQhCN' +
      'ITU5//OQhCN7f/yEZQAAIynOc5CEIhGnABGY/4gAIQZ4h4h4d3Z2Z9Jba5XWhWP/80LEEBhJOxcf' +
      'iUAC9BEda+oiKFQsViiMpvHFC98pLjySjUNeKoYxMpwIT21HmHlEhx83A9K5vDAuZUQxzq7nJPgE' +
      'VWKQZ1Iu5oJH3UpGObWV/MfAgLC4Z/yhP/ULKnqHd/syOQenhOL/80DEChZpZs7rzBgAT3bBWub0' +
      'T/xNtn9nY5bvQdCA0TvnpXNC7EJ3iRPtebJ//7xK4IAqIii2AKbfkBAJxATDLN7wiUGv6VANBNjq' +
      'QwGCayGoaBAJaNC79/z5wP2IuJbfZsNFgBVo7P/zQsQLF0lGxvRJhlQVDyEmYldHXJGadquTRs6a' +
      'Ymq9VY1hqqt6xmqts2zGTvGNrl+u1IMBHREJREbkpaFQkFRoa2FYSDvBp6DwSf1lgFqfkQ0JcRCY' +
      'lKxKg0eEw8sKqgaEogGBH3EZpv/zQMQJEyEudaoIBoAf+HV2UBjoOsP2/IwrkezQ1Y4e2wVxgxlV' +
      'AqDQUSRUBRU6LrBY1lvxEdUBWBIOnZWOCrvlVnTsltWNOqPP4seUBcKgKpW44m3GkHLjaBS4ohHZ' +
      'dTGi6FXXVo6+//NCxBcNYAYyWAhEAJ3U+j3uXdl1z1Du30fCySCGablvUTrhwggLTomAAmrWsmWY' +
      '9ym89ZcvlwX/zf+a95ZLwXOar/LNrJ60LUl25Hs58yKRWIjSbt9DCIs0UtF/TOlm2cyNTpKysuCB' +
      '//NAxD0Rw1YliAhHPdmd9nYYQOsGCgAfmqIAXlnhbNZeUBQvyL/y6NlP/r1LLlEiSPL/7lE9SirM' +
      '5zxZEwCseMDL330yrtl8/8jJs6mt5dTloYsvNSGbmTkYQhpVpRpCG1yr9YSfr1b/80LEURFLZiWQ' +
      'CEc8v/rLXPzys+Z9z8v+H9qyCMpGLn3bla9qtcxYZXk9cbOUjb8t0q2ytz79ImM1R0ht3QdWK11m' +
      'yihIpt8SZBRAlbWq3CDpDKWUte/VHgJDH6k+lsqSPbRj+pHWWrL/80DEZxKjYh2ICIfhxIKhMBeL' +
      'PjgKlFRIKjCxIKjCukkFAKCSCxFtgTAQFIkisqIg2EngUVFg8FQCQUxBTUUzLjk5LjVVVVVVVVVV' +
      'VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsR3EnAF9kgARgBVVVVVVVVVVVVVVVVVVVVV' +
      'VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV' +
      'VVVVVVVVVVVVVVVVVVVVVVVVVQ==',
    actionOk: 'data:audio/mp3;base64,' +
      '//NAxAAT+gKmPUFoAI81KAANYQZECuQAASjAD820006kC+buYDgGEGEKIcsCYAUQYA6JeI2JmS5w' +
      'cY5yXL6b1IJpp6kG////9X+h/oaaaadAvpvBA5/9QIDQQOQ+cbQllsQQAKTggvn/80LECxdCcupd' +
      'jFACwA8cFoNFZuosRJUe3E48kEhWIRueePjSdR4T9XMQ4SwB/BZ1GQNAtHHOPzOFryImV2zlb//r' +
      'ZV/6MYp56IY00sPgvi5vp1NN///3Q4ZlSUVV6wAAHLn//b/+Bv3/80DEChbo7s5fmGgA8cDgPEdP' +
      'slrmVdkwdsV66+p2vZktFECYbF0sxMc6XTyGfU7omIDWqTLdIdocopcSHkqkN/1OLnGEiTI5lQIH' +
      'z6F//h8+Aw////SWn6Ai////RQCALJttttthGP/zQsQJFgLXBl+PUAJpUBpuDr/a/Bn7vbuBpTSa' +
      'Ju9C26HLGnV05pymMa+52rjwoQl9HX5xkseQEWn/zR+C+CGcTN1IQsr/O/6N///////zyotv//Ul' +
      'b+WNu/4a/G/DAGASAsBQ86QpAv/zQMQNFyqWqFWaUACorGJ3w70JwQXdB1Iw8FBR6w8BkLlXmCwS' +
      'QKbRFEDGyFEFw/LiWNeT8eOSG/++3///5oEpv5wrF/RmoYsz////+yuLZ55GT//yosfyqj5gugAN' +
      'MBv///+Bt0Bw//NCxAsWul7hv49QAIAcsuZ3XnIKHgXVwYS+wjbgGuEvA8WjfAsaQmNk2QkZh551' +
      '7ceH7uZegsm5y///0VTDzzDz09dev/6IIMKcL8i/5CSjE3/oqRMBZpmk7R/RgAAbjwkkcZrZNKRG' +
      '//NAxAwW4j6pudpoAwwbDspelxARGBQ5l21KTHGz7RkyVSuLZ5l3/S9SQ1CutfuvPzIvF4HUFzRX' +
      'NkiXJVH+pv//mvMTVRJGyT6S29LRao2Wqj///UbLJxLHVPBVD9SWyADnc5p6REf/80LECxb6Uoxe' +
      '3A7SY0MyGLYtINLEx4dXVEEvywRGZ7pcZEtrkjRpam6yOArCCRZNX/W3WOoGKq04z/0I/nt/UCYZ' +
      'f6GfovMahvTn21oZ7KnY4oNhuRFQuLsBID8cKC5qSQAC9j29EzH/80DECxNZYoT+xuAyRLbuBA8W' +
      'RBNAN0Eq+mboAV7G62xjgCvi7cM0Ov1kOELDyoy/75RGdB8iaMZJ//S9SaPWe8oonsV4o5NO40K5' +
      'FG2xNQZo78WcFOwcZjQQYvlIW6mGkh0f0ZiOBv/zQsQYE8jiVBDfVogDF7hUFzGQhTgpeTFkKEeX' +
      'lL8syjVHZ03ZCDR2nSxR7Pq7np3LRaHB9adBZ07r018kdy3tjTX1KiSqekjtoMGlaAKNEYCZkOHz' +
      'pZziA0FmwmEDZhMwfvxGWFAY3P/zQMQkE5DaRAjW1ohECprRK1TRrKRtJsNpyJrNfLvndF7g+gSn' +
      'Ayt351B5obyX8r/u//////rqgBmlYGs01hNdBQpEQyNoHhEMuUtgytPS01oLy0hu6NVNabzryYxw' +
      'zfIqvKPaRFls//NCxDAQ+FYw8gjSKH7tHbMxfJlUtVpIB16SI0SEXBsf68/+/L//zfLll/nmj7F/' +
      '1pcpZ/+Z3Ur5Eq5WpbM9MfPljxeb9Lamv/nXIuOSkVXJVRmzRxLpVUlMiBhOahamKCgmCgSwVXHX' +
      '//NAxEgRU1YcAABGvSNI0Nzzp5SNpUj5aE3ZUqAvIkhEnnq1D3/yxFqrceAgEVIho8WKlhKVGBUJ' +
      'HjzvOh0JndVbtdYykkFQmdDoaDqCIaLKTEFNRTMuOTkuNaqqqqqqqqqqqqqqqqr/80LEXRFYBf5I' +
      'CEYAqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq' +
      'qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqo=',
    actionError: 'data:audio/mp3;base64,' +
      '//M4xAAUuVJUAUgYARcXFz4DgFAeKHAeChiIie7u+iaIibgYuAYGcTz3OIhf/Xd38v+J6J7u+gGB' +
      'iw8P8PDw8PDHRw8/+O6GADo/h78BEQz8HAHh5+v+A4A6H/8AAEfIiZmZBXlicwVCsWj1//M4xAwY' +
      'WvL/H4goAHY5EADTzSBEDUpfz/OhTMPGC+NAMWAgfAcAgHFSjhZD1PCRAUQFBjMUxMhGGuOVyndn' +
      'XzvlH2dGLp+jbHsUykMTTFkX/+ror2841v+k//+MIOdv/GUVmvrpkGSqAYta//M4xAkXMsLmN89o' +
      'Ag/iwxc/bCcqY374+ZYv8ms1WUWQHQlTUFCJgbIjvMcd6K1m71G+ttB9Pt32bR6OptTZxtV0l/ov' +
      '20P3b9/1/1f0dSCkh7FjKTdSRbQKiRLyBKFroXi7uP0CAvGOAWNk//M4xAsXwr7a/mPUwS+O1HXt' +
      'gEWD0qvqiuk8xOG4QoqkAU5eFUIMYl8WHoK3Hcq2dx5p5fTjLvlFtLucF2SuaciHhslc4JhNnm5X' +
      'U2pCS6c3n6+3/9GyFsk+xwWUQmSTumm7e5ggAEWsUBor//M4xAsXCrLXHntO7NUoPTkrtfAzt+Vm' +
      'c1QDhdvOk4mMiMaxzG9AERpgbNKfJVp0/lfOvjfl9SWj5XpoXfIYVep7R0WTaUAGDj1IkMHy1Oyr' +
      'fnfq2e37/22fJduLdKpFmVawABglJaFVG03L//M4xA0XurK+5HnLTJeQXpCP4L6DAO1L6jOnPOCx' +
      '/wVBu4nAIHEgOCbXJbP5R/74hGiwND1iw7BYtTsqM6viJ1aoa14o/kdXwsdo2K6nxravl7al1/t+' +
      'rUDz4J+IDtW7bbVAX+3gDwiUL8lI//M4xA0Xgq7qVnoO+zaBvGmHeGt1WGsEPh7RWPKQT82FEhiW' +
      'LGeUlRHjRERFE6UUhhATy9J5Lcv+PM+axpVIkaHDqqvi+yUHdjW3sp2vTv+rav9F/Kt+Lm9QJFdn' +
      'wrvt7SXHLLMAFKoGoNaO//M4xA4UurLyXkDFT5XYo5iQ9ckoWFh61037WowPpb5NVRWlrUmVVqxm' +
      'NV/b6q+xuJVfY1VVXfDHvnL7TGOFMb6ifdZf0etaP//lZH6FbyuK5MUAYWLKUvoamjS5tZpdNnrW' +
      'z2ASUXdsckcS//M4xBoUcVJ4IisMydfHkiAUZzmoyajzSOzOf1T9qlFq+ORkFFeC//HxXOxf/PKP' +
      'G/CNxYO4+WKbl+Lv4VBQU6KKhP/K/+vK3+WXVv/9SobSZ1b/lb9SshjN9S/Upahjf/LMahjv6qx/' +
      'DpAR//M4xCcS40IEABDN5DMaqqrVVVjWLGPjH7GpWZ/7dqr47Eq/7HQds4duAxGfzkjUTpoLSIv/' +
      '//qn///YxTAwQIGhyP/u7O/3P2eqNZ2k4so4sp2NFAYhnZ2couBNTEFNRTMuOTkuNVVVVVVV//M4' +
      'xDoKqz1wDACNy1VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV' +
      'VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV',
    finishedOk: 'data:audio/mp3;base64,' +
      '//NAxAAQiXIEAUIQAPnfO/OdyAYGehP/U5Gqd+c/8785zoBi3QhCMpCVP+SpwM6AYGODH/8TvB+s' +
      'PiMP5cMCcPygIAg7/lAff4IAgcBCD6ofD4diQbC0WaISi0SB3EAzA8WZgeALXg3/80LEGBoDGyZf' +
      'glACgsRODRuWFcnMLm+eQEhRVQz5IePy5Icm/2Yn5GLY58hG3/J0JyAkq54WhVHosmkTmr//OYkI' +
      'x+aejta5yObVf////fbcgJP/8oP//L/+w6tzSgKyRVuaO6jleQb/80DEDBdLJs4/2FABfMefV3NU' +
      '1/Pu+MiMj5TGccdZM7mtR9poqDaj269WQ7clU5//OzTSgSRYFoL8eoeaaxhw+u9lq/9jn/NY7/3V' +
      'PohqW+///////5ELQ+cqSm8F1QfSAHmkZP3Rz//zQsQJFgHCul9ZUACtuzlS2auXefrUxQUkTU+e' +
      'tjYpBz++SrehymLQlDIbPScu+uppsoFMTf/5uSiO7kpKKo1ONQ6/NbKkDv8iJj3OE/xEHRQl1Hv/' +
      '/4UPLBeWtoFTaaAttttstQEAgP/zQMQNF1PXDl+BUAJQhUAPuz0DJsKELcVBuf+NDz79ceCoSE/m' +
      'eeYSBfk6fQt91kZOYYxE3/+2YwtnyQxn////0JHMY+w/H5OSN/////zDGf5+p7///////kjSQxXT' +
      'FGTyENw7gapG//NCxAoVUeLUAYKYABCegFrFga4BpxsoJJHKbdSSNc9rTRNTiRTtofSWUkUt1o19' +
      'fWkoiIJAGaRYixFlM4yQ2FK7pDOlX6q0Ty0TFQNc910f521f//sEw5VqWAAa0xN/4IJysXXPUXWj' +
      '//NAxBAYQc7CX9RQAD7L1moNjonkAxWFww4nWd9JCeciFDR6QsKgKiayKccZU7pWdi9jnzTd7C9H' +
      'zWNZFE6VNY70udouzEPUInt/WdLG0YKntR5SDn/rBWjQpBIJjCnEADG403RAjmT/80LEChYx1rpf' +
      'U2gCXkzXRRXSZBTHSfAUM4JVGmSJvr92ZalqJzOtY1C+n3qXd7ojHpJVph9KfTv2QF00S62Usnjy' +
      'Ukk+pbH0Uf+akuloBUN9eziVT/Kbf//1pSuJ/YIvIGDjaERizGT/80DEDRciBtzLgWgAnyaG0C1l' +
      'wTMAJBpi0QiX27oskt/p2pJGx1aanoWQ9R1FMw1JVmtN1vSNE2ZKcL4kwhTIv+7hPkVpum9/54qQ' +
      'NoCB5od9Wc/WVZltv//9olVqRkBpkMgFbWp6pf/zQsQLFGGq0jfYOAJYZ33eO8O4ay/WUDUrPXKa' +
      '0BSIWhEPEua1Jvfvd1CxL/0T7nGsppoSEjjaf6tN1ZTTR0SRqRO/+K/Ou/9CwVOnmrcSdMqBpY56' +
      'yFdrrd+BUSsXF/De07+HriXkC//zQMQVEyIO7l9IOAINDw83zXmx47coMuc54Km6W6HL5VI1dHUo' +
      'FS9CrJ/FZBL1apo8Bec67a3b/1JDQt4iEv/niXtWlQKNhcSXFrNXq9RoxmJPGjO8N0UWAZDR6hQZ' +
      'VGYs4HkcGtuz//NCxCMcqvMKX4VQAp6GEjERDVO0nICRTDDitdHYkPnkRhZTDzS5o/yvFTPc9GLC' +
      'uTkX7OXt7fseehISK578TUFArC8lNQ06n//2Gg/Jy48bb9TWcmmH//93/Fyy29rQUkjgEwC74QXH' +
      '//NAxAwTWb76X8xoAtGYil8Sf13FyrazOOzs66VgJUPYvJbKXWr+myS2SrPPf1KWiiiyOpLSWjRT' +
      'ZFlalf//omqn///Bl/gqd4NSP1sCtUboQAq2KfAZcuompqTyWlosplpidkw4Y4D/80LEGRRiJrZd' +
      'UqAAgAJMBywG+KiSmxrWtlKfMj6SV386x0gTt/1OtvvS0CizI+umWkl/XUbP1ESayKkktX93dfzz' +
      'tT61SAEkgBQEjccjkciAYAa39zxcaPCYCFY9Q550fgIUwErGSDn/80DEIxwS+tZfhWgDSkw83gvv' +
      'ZTK1Iko2tI9rLpf1mZ+b1tMy4Nm06mXyUQY9ZLXyQUJTs9RmYhzjd0y+bppJEj+8v/+81fqQYzTN' +
      '1ppIW/////+pA0UgaXaVuC5FVLzhMlMyKAyi3P/zQsQNF/I62AGBiABLhOwsg1FMBUmAa4LK0kU0' +
      'GslRZGmpJb+3on0EzNJjN/Rt+6CJfdTUtj6KkvV+iRcjyBCdC2XzhNFUvstzFYtImJ1Ff9ZRIj59' +
      'h0HQICe1It//pYprEApJJFaBDP/zQMQJFHJu5l/GaALvVEYd0Zlq2t/CXLznyPVFYKIeRsUnRSrZ' +
      'Nn/r6CnqdQ5i8i3q1bKfpGtS0UV2JMeKP6knf2Nf0VaLGLbf//rR0WRKyF4MhrBplw9IE232uwC4' +
      'QyFzCiYsW86d//NCxBIT0nLqXgpUxo9sRW7llTyJzaqvmIaPi3VgsG/mt9ykwfCQIU3OOY04ehw7' +
      '/ppOC+OfQ45TbwRmsdOf9V//3NEgtEX//4aVAAFRFv32vuC0ePWVlkuksMhlhMTeSZcTTa6TL1tX' +
      '//NAxB4T0m7aXgNUnlF5nDuaJdERvfmX6mCXNcKxO/V1USAU/9yGy3Aqp/1gZFJn/1f/82RAAwvU' +
      'f/9n/4aVAAEIF91+vwCeBTp6TCmP9INghMQii720i+pAnlzzrUX1IHQtju2swb//80LEKRQCbtJe' +
      'AJqGnOo/ai6SKYMAWbN+pyk9BZgJk//uSoi1brV+z//mZmmHNKZ13/4fAAEADstllgF/v972towZ' +
      '0QXK8AA+PC5cN0PRTdbHW9k5M9zgqso/zibfk+1ZC/skJF/61jz/80DENROyfrpeA9qODemqMKr/' +
      'rUHwRS1Nq9SKD//rZIcRZmT//kUEALSZ3D//6vAmzqOlAm8FwxbwFiX8VRMT/DEsPCqRbOw8Q1mI' +
      'xxtBkkSi3qAOVm6F2/FRWYSyB/bF4bP/YoK6TP/zQsRBE7JuiRpulMRYCzO1V/Bgm+3///oVNQAB' +
      'URf9/bgBP/8U9MW42GQb/AyP4bURvzzGIYvAhJL0x3ooCTlFLZYWlmfqPt+PdVErEQz3RZKDyTFf' +
      '60vWSP/2GMeX/qsr/+oxmB0RAP/zQMROEzJqxl4CWpcBmBvv9vwBTX/L98zdfopM4GlbpJtgUn1e' +
      'HHhe8yxjmqcdp+upQEuTdtU3X9x6VTAMv2qIoiG/VYg/GN7/nhJgfH2Qf0qSKab/9STkueh1IDkm' +
      'klAH5fflAZLq//NCxFwT8m7CXgPall7BM4igvw7JyAbmlbrY2Zmc95UkokD/dw4U/VNjZq2TcStZ' +
      'ukKgZTDVrng8v/mRTZa8Yre35WIl+v9boo3/1pprJU2wFQAyBI5tJABr9/77Z/CdRCLoRWqEYrN6' +
      '//NAxGgUEnKcfgPaq4nSU+eNbpg1JSTemhOK12Eir1L/WdGRPphACdmzWMj7GIgg/nV/2MkNzYiH' +
      '1f+MUXviFwhf5ESNESoACMgKy22UAf/oZWmPclPEoiClH5cGwN0IZce9FABAWFr/80LEchQJ8p2+' +
      'BhqSJMm0Y97b+IcHG7exHP1o1ozptGFJY96zeDFv2jvm5WapBNLZ6npCx39f9//xJxaUAGauYYNH' +
      '0NxP49ytAzAugiwASDuCaDUpRXKKAro0F7oKjNigqK2bCimismz/80DEfRPCbrJeUYsW2bJs07zh' +
      'UJE83J52vOGiuPNiokv/+//8tONhddJC82Fk8VX//+//+L/+X8vgX38/zyBLzXnwocMyMyN5mLPJ' +
      'siIzhs/AZfSMyzTJX/zT7ykZlXbe+/dxn2i68f/zQsSJFBiqZBYAXknZ3GPTCDzzqqXjKRMJwaRC' +
      '8G6IQU2nG4n4GGmXKsyZrv9S/Pz0LNbNUKz3/+L//YfmT5sn3CfNUKp/vzCv+a/PzXF+sMhBLEGQ' +
      'yJlrOq0Ao4kKJILAayo7MqEZp//zQMSUEvNmFAAIzcjp0sip/9jKz0mW6zFUj/RP6r+xkUjlR2Mj' +
      '/dbbIrGRyodjWKh2MrGEVYys5TKUSGhweBQ8NIQysZWMrlRxEYLh0SRVTEFNRTMuOTkuNVVVVVVV' +
      'VVVVVVVVVVVV//NCxKMQi2IeUAhHXVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV' +
      'VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV' +
      '//NAxLwR22HQAAgKnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV' +
      'VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVU=',
    finishedError: 'data:audio/mp3;base64,' +
      '/+MgxAAT5BX8AUEoAP///mNkc/////1Oc/6noc/9f///85/0O///r/kI2jf+pCf/Of/6HP/znOc7' +
      'znPkIQgfFzvIRjhwOChCEIQOB8Ph853yHOc/zvEA4AAAAABF/UgSPmQKhhYBw4f/4yLECxVpXpgB' +
      'mYgAKgCEXoz6Bj24G4gxlPDKhgAUoFxwtiGufjWFsGbKgF+Fh4noT/8i5uaFcZgLm1i2k0Mbam8Z' +
      'AiwbYX0nExHIEEx2FBBP9J3S5vA6wAAltAA+pUwHS9e7B4EtiwD/4yDEERexdr1fz2ABlQrFTFPg' +
      'XqqjQRzMFqGEeDUkEbrrMjtB+lU/tcuj+umyBDN1q/2GlFesgKLdHTqWo7RktruiRwdRlfa8J/BP' +
      'RN+XHtgb0Y/AzC/2cZdiQgBuTa69W4S8bMAAXP/jIsQNF0k6wVZ5xSYzp4BvjV+T2Udd8R2+On01' +
      'SiRpX5PGv6QjYpD1nBt8VZ0skMc9QHq1CpqJlnhoqVPKPHZYGqnIypEyWPAo8SPz0OhX//QJmyvH' +
      'u/o8qM/6CtXSAhKu34FZMGcPy//jIMQLFcmeyX5pRy5R0BZEoNVh/FruKTVBRcR5rUTQpGyFqJx7' +
      'CzcOcPjqoGcWJjOrcdzfsGXZAsFs2WdUKwcLiEIhWFB7w0GpuTa0XaMGgcqzrQsz/+kNKkIAFLvg' +
      'P/OonDe+4DCL/+MixA4XgpK9XsKG9sYelKU8J/UGwRrm0l9/tjMjWMAOthrqK45iONNBfxi+hbll' +
      'z+raE/If6Y91Y8jnb49Kxn0WeTT6ihhKnGOj8LGIiWQHuOogUc/66H/hHf+ZgAISpdgBncq6Fj3n' +
      '/+MgxAwWYfa9fnqHEiCLPLVweu/9CIz6wGZbXVpry1Kg57ZhtwxXKh82K2giB2guGug/OyF9W1Ju' +
      'QftstdzJ1LPcEKLR5hTreUz/iBxskEVBY+CqAyCgQoz+yuNqlTn/4AmceACjmEH/4yLEDROBjtGf' +
      'TFACEdnXxxr0lwp2+ghopgB4IjWCiAiL1Fns+pLqPWoKx2ncfG0InzW1JerftHxMpxQ801HHziUM' +
      'vQeK6+SzxEliW+qFqaEByyhgQELpGQIgqtQ3JzIWch4kp17kEgX/4yDEGxrBdpwBmcgA2HbmH2R4' +
      'LIKeMtsKwjCc/PT00y9l+qMGDIckAycFqvMfuJz7iPxLEzFQo5sngfD9d/3Lh+njFJYublz8Q5Rf' +
      '////T2+4Yc+Lz9NurVqf9g+AKTd3AE4qU1E2vP/jIsQLFHFG1N/MMAKBuH8oS/ikp9KqlSqkwegT' +
      'JgTLjeYlyndKcQSsCSPJJQRk9HC1Mj+l42THqWrK1khp0NFfwKks86SKw6IipGbLX60JBY92Jgpy' +
      '/gAfjbqATePy62LBPlndI3QLQ//jIMQVEzHK0D5ITaKR7RryvYmOsx1fbM6V2JJnbpavk1iJiS8J' +
      'PqV6qgWaY6uxhvzoBzN51ktGpofVlW2syZxMO0b3qgp3fgAeIb4DIseOluSeSAlQn7hrzAjZSZuJ' +
      '1hX4vsT7jPQ//+MixCMTSZ7MPlmQ9/X6VzdY3edjF975aHZclh+kp0dpLevY334aVbI8HpNcncwN' +
      'u/n4iv+WjdUp78AD9ctNSZuODC31N8HTqGeWmtBbEAMsHqNC8I2hSomoRqXy9S0ceUx3G2Xy1HlX' +
      '/+MgxDETia7EHnnS35XKZuzIM1elCplWUbSZUyasFtQGBXZtvjOkd7fyKgXdgAP2BBZD9S9RP5NG' +
      '79jO2pTIwZr7J8G1gzEtzOp2ieBOgOaBuVOqMyrSjT9MjQyjbxO0deP52eZM5EX/4yLEPRPR9rge' +
      'eccSHPRatU3MJQt+RHNLSiTFR+5aqgXbiAQBNtgMw1oA6FmGT6BBFIiJwdNzPHg4GwWjwaEZMdZC' +
      'YHjSgwh4y0x3apZUmcmPvrb6vn+zvD/t5itoX1ejvi2HXytG9Pf/4yDESRRRirQZT1gDn6MGwmcJ' +
      'JfWqPBUiBf4SQhy0VHhgDRhoxv1ZsAhtWpzFYcHZOFihgb4zFC60dOmrlmXJiSomyBZ2YpiZigYK' +
      'oIYAIGkiMAiwM8MMgCyIACjNhTPqzAnwKNMoKP/jIsRSJSlqhAma0AChCECX2WopEOPhhoiCKtdU' +
      'FCCgKJA0W01lY2TxupC5HD8td2jhciVYlirC37fwM/kcmq9jHKMSipK977GKSz039KNFCnN8BxNk' +
      'yKQ7PaifSU06ZWbLXIRrxeNesv/jIMQZFAk6zD/MMAKWQS5DeCUx/Y3lI4WvyH8L5+c/sB9iWul3' +
      'X4R9zz7SwOgUyMBtTkhABBIUn1CLs///////9YC1KgVL/IbU4pxAdm9RCY22Fl3QDjRdhcbGgh/G' +
      'wR2i7lo1CmY0/+MixCMT0ZasGMPKX2VNy3/JfvZB7an/a3fEB8Ky4hh6gJUlR8Y0bs8ZsysdHzOS' +
      '5lQSpSjDL8SjagVdQAPkgaNhAzDy0U7Ny7ewjcdcD9uihn7LI+uRtxwzNFzBvzo+Dh1KUoG4nLxM' +
      '/+MgxC8TQaK0HnnHLvdpTPyNVqWq8ps87Xc4tp+84odaBg0EhAGhAEm9SAVb+0XZfMCMzNKdBLCf' +
      'WT9Cl5ZjyQd6VlAraiTVvTti91RulyZBkwXuoV3YXmOkKVn5U0rzPNMp1ltR6t7/4yLEPRQ5lqwY' +
      'w1ETceczuhocBflPuWRyT5NPfTibxXsKc3HAHohRMAuHFwWYsiboQoSDQaBHij2BTtI1iU2jto6y' +
      'cFqsuHDPAswsJlcSaDHBypOCRwT6zM81yPX/lTY4KIGgWSGQ4+n/4yDESBLppsg+SYaW///sUgod' +
      'AxFs3LEahGcMIGORNKMFqJMRseA8gjpVF3QapN5RoQOoQ0DWBwiRkkW4R+n8dpREBICTA00IFzMp' +
      'EJUo25plEqklOrq6VWSDH6/u3crqCEL0P4bJIP/jIsRXE9ECWADD0lknZeEGlVUAgUCFiDzDzCj4' +
      'WjRpT2WWWUGKhkz4qKC1QsK/ioqLN9ISFhURmfWKi3//////////QDIVFBIHgZFaTEFNRTMuOTku' +
      'Naqqqqqqqqqqqqqqqqqqqqqqqv/jIMRjEaCVZAp5hlCqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq' +
      'qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq' +
      'qqqqqqqqqqqq'
  }

  Object.assign(EventSounds.prototype, {
    /**
     * Collection of {@link EventSoundsElement} objects
     * @name EventSounds#elements
     * @type {object} */
    elements: {
      start: new EventSoundsElement('start', EventSounds.MEDIA.start),
      click: new EventSoundsElement('click', EventSounds.MEDIA.click),
      actionOk: new EventSoundsElement('actionOk', EventSounds.MEDIA.actionOk),
      actionError: new EventSoundsElement('actionError', EventSounds.MEDIA.actionError),
      finishedOk: new EventSoundsElement('finishedOk', EventSounds.MEDIA.finishedOk),
      finishedError: new EventSoundsElement('finishedError', EventSounds.MEDIA.finishedError)
    },
    /**
     * Whether this event sounds are enabled or not
     * @name EventSounds#enabled
     * @type {number} */
    enabled: Utils.DEFAULT,
    /**
     * This attribute is intended to be used at prototype level, to indicate a globally disabled
     * or enabled state.
     * @name EventSounds#globalEnabled
     * @type {boolean} */
    globalEnabled: true,
  })

  return EventSounds
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/media/EventSoundsElement.js":
/*!*****************************************!*\
  !*** ./src/media/EventSoundsElement.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : media/EventSoundsElement.js
 *  Created : 01/04/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! ../Utils */ "./src/Utils.js"),
  __webpack_require__(/*! ./ActiveMediaPlayer */ "./src/media/ActiveMediaPlayer.js"),
  __webpack_require__(/*! ./MediaContent */ "./src/media/MediaContent.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Utils, ActiveMediaPlayer, MediaContent) {

  /**
   * The EventSoundsElement object contains the description of a specific sound to be played when
   * one of the JClic events are fired.
   * For a full list of the JClic events see: {@link EventSounds}
   * @exports EventSoundsElement
   * @class
   */
  class EventSoundsElement {
    /**
     * EventSoundsElement constructor
     * @param {string} id - The identifier of this media sound
     * @param {string=} fileName - An optional file name or URL containing the sound data
     */
    constructor(id, fileName) {
      this.id = id
      if (fileName) {
        if (Utils.startsWith(fileName, 'data:'))
          this.audio = new Audio(fileName)
        else
          this.fileName = fileName
      }
    }

    /**
     * Reads the properties of this object from an XML element
     * @param {external:jQuery} $xml - The XML element to be parsed
     */
    setProperties($xml) {
      this.fileName = $xml.attr('file')
      this.enabled = Utils.getTriState($xml.attr('enabled'))
      return this
    }

    /**
     * Instantiates this audio object
     * @param {PlayStation} ps
     * @param {MediaBag} mediaBag
     */
    realize(ps, mediaBag) {
      if (!this.audio && this.player === null && this.fileName !== null) {
        this.player = new ActiveMediaPlayer(new MediaContent('PLAY_AUDIO', this.fileName), mediaBag, ps)
        this.player.realize()
      }
    }

    /**
     * Plays the audio associated to this event
     */
    play() {
      if (this.enabled) {
        if (this.audio) {
          this.audio.currentTime = 0
          this.audio.play()
        } else if (this.player)
          this.player.play()
      }
    }

    /**
     * Stops playing the audio associated to this event
     */
    stop() {
      if (this.enabled) {
        if (this.audio)
          this.audio.pause()
        else if (this.player)
          this.player.stop()
      }
    }
  }

  Object.assign(EventSoundsElement.prototype, {
    /**
     * The sound file used by this element
     * @name EventSoundsElement#fileName
     * @type {string} */
    fileName: null,
    /**
     * Whether the sound for this event is enabled or not
     * @name EventSoundsElement#enabled
     * @type {number} */
    enabled: Utils.DEFAULT,
    /**
     * Media player used to play this sound
     * @name EventSoundsElement#player
     * @type {ActiveMediaPlayer} */
    player: null,
    /**
     * HTMLAudioElement used to play this sound
     * @name EventSoundsElement#audio
     * @type {HTMLAudioElement} */
    audio: null,
  })

  return EventSoundsElement
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/media/MediaContent.js":
/*!***********************************!*\
  !*** ./src/media/MediaContent.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : media/MediaContent.js
 *  Created : 13/04/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ../AWT */ "./src/AWT.js"),
  __webpack_require__(/*! ../Utils */ "./src/Utils.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, AWT, Utils) {

  /**
   * This object contains a description of any multimedia content (sound, video, MIDI, voice
   * recording..) or special actions (jump to another point in the sequence, link to an URL, etc.)
   * associated to an {@link ActiveBox} object.
   * @exports MediaContent
   * @class
   */
  class MediaContent {
    /**
     * MediaContent constructor
     * @param {string} type - The type of media. Valid values are: `UNKNOWN`, `PLAY_AUDIO`, `PLAY_VIDEO`,
     * `PLAY_MIDI`, `PLAY_CDAUDIO`, `RECORD_AUDIO`, `PLAY_RECORDED_AUDIO`, `RUN_CLIC_ACTIVITY`,
     * `RUN_CLIC_PACKAGE`, `RUN_EXTERNAL`, `URL`, `EXIT` and `RETURN`
     * @param {string=} mediaFileName - Optional parameter indicating the media file name
     */
    constructor(type, mediaFileName) {
      this.mediaType = type
      if (mediaFileName)
        this.mediaFileName = mediaFileName
    }

    /**
     * Loads the MediaContent settings from a specific JQuery XML element
     * @param {external:jQuery} $xml
     */
    setProperties($xml) {
      Utils.attrForEach($xml.get(0).attributes, (name, val) => {
        switch (name) {
          case 'type':
            this['mediaType'] = val
            break
          case 'file':
            this['mediaFileName'] = Utils.nSlash(val)
            break
          case 'params':
            this['externalParam'] = Utils.nSlash(val)
            break

          case 'pFrom':
            this['absLocationFrom'] = val
            break

          case 'buffer':
            this['recBuffer'] = Number(val)
            break
          case 'level':
          case 'from':
          case 'to':
          case 'length':
            this[name] = Number(val)
            break

          case 'px':
          case 'py':
            if (this.absLocation === null)
              this.absLocation = new AWT.Point(0, 0)
            if (name === 'px')
              this.absLocation.x = Number(val)
            else
              this.absLocation.y = Number(val)
            break

          case 'stretch':
          case 'free':
          case 'catchMouseEvents':
          case 'loop':
          case 'autostart':
            this[name] = Utils.getBoolean(val)
            break
        }
      })
      return this
    }

    /**
     * Compares this object with another MediaContent.
     * @param {MediaContent} mc - The Media Content to compare against to.
     * @returns {boolean} - `true` when both objects are equivalent.
     */
    isEquivalent(mc) {
      return this.mediaType === mc.mediaType &&
        (this.mediaFileName === mc.mediaFileName ||
          this.mediaFileName !== null && mc.mediaFileName !== null &&
          this.mediaFileName.toLocaleLowerCase() === mc.mediaFileName.toLocaleLowerCase()) &&
        this.from === mc.from &&
        this.to === mc.to &&
        this.recBuffer === mc.recBuffer
    }

    /**
     * Gets a string representing this media content, useful for checking if two different elements
     * are equivalent.
     * @returns {string}
     */
    getDescription() {
      let result = `${this.mediaType}`
      if (this.mediaFileName)
        result = `${result} ${this.mediaFileName}${this.from >= 0 ? ` from:${this.from}` : ''}${this.to >= 0 ? ` to:${this.to}` : ''}`
      else if (this.externalParam)
        result = `${result} ${this.externalParam}`
      return result
    }

    /**
     * Returns a simplified description of this media content. Useful for accessibility methods.
     * @returns {string} 
     */
    toString() {
      return `${this.mediaType}${this.mediaFileName ? ` ${this.mediaFileName}` : ''}`
    }

    /**
     * Returns an image to be used as icon for representing this media content.
     * @returns {external:HTMLImageElement}
     */
    getIcon() {
      let icon = null
      switch (this.mediaType) {
        case 'PLAY_AUDIO':
        case 'PLAY_RECORDED_AUDIO':
          icon = 'audio'
          break
        case 'RECORD_AUDIO':
          icon = 'mic'
          break
        case 'PLAY_VIDEO':
          icon = 'movie'
          break
        case 'PLAY_MIDI':
          icon = 'music'
          break
        case 'URL':
          icon = 'url'
          break
        default:
          icon = 'default'
          break
      }
      return icon ? MediaContent.ICONS[icon] : null
    }
  }

  Object.assign(MediaContent.prototype, {
    /**
     * The type of media. Valid values are: `UNKNOWN`, `PLAY_AUDIO`, `PLAY_VIDEO`,
     * `PLAY_MIDI`, `PLAY_CDAUDIO`, `RECORD_AUDIO`, `PLAY_RECORDED_AUDIO`, `RUN_CLIC_ACTIVITY`,
     * `RUN_CLIC_PACKAGE`, `RUN_EXTERNAL`, `URL`, `EXIT` and `RETURN`
     * @name MediaContent#mediaType
     * @type {string} */
    mediaType: 'UNKNOWN',
    /**
     * The priority level is important when different medias want to play together. Objects with
     * highest priority level can mute lower ones.
     * @name MediaContent#level
     * @type {number} */
    level: 1,
    /**
     * Media file name
     * @name MediaContent#mediaFileName
     * @type {String} */
    mediaFileName: null,
    /**
     * Optional parameters passed to external calls
     * @name MediaContent#externalParams
     * @type {string} */
    externalParam: null,
    /**
     * Special setting used to play only a fragment of media. `-1` means not used (plays full
     * length, from the beginning)
     * @name MediaContent#from
     * @type {number} */
    from: -1,
    /**
     * Special setting used to play only a fragment of media. `-1` means not used (plays to the end
     * of the media)
     * @name MediaContent#to
     * @type {number} */
    to: -1,
    /**
     * When `mediaType` is `RECORD_AUDIO`, this member stores the maximum length of the recorded
     * sound, in seconds.
     * @name MediaContent#length
     * @type {number} */
    length: 3,
    /**
     * When `mediaType` is `RECORD_AUDIO`, this member stores the buffer ID where the recording
     * will be stored.
     * @name MediaContent#recBuffer
     * @type {number} */
    recBuffer: 0,
    /**
     * Whether to stretch or not the video size to fit the cell space.
     * @name MediaContent#stretch
     * @type {boolean} */
    stretch: false,
    /**
     * When `true`, the video plays out of the cell, centered on the activity window.
     * @name MediaContent#free
     * @type {boolean} */
    free: false,
    /**
     * Places the video window at a specific location.
     * @name MediaContent#absLocation
     * @type {AWT.Point} */
    absLocation: null,
    /**
     * When {@link MediaContent#absLocation} is not `null`, this field indicates from where to
     * measure its coordinates. Valid values are: `BOX`, `WINDOW` or `FRAME`.
     * @name MediaContent#absLocationFrom
     * @type {string} */
    absLocationFrom: null,
    /**
     * `true` when the video window must catch mouse clicks.
     * @name MediaContent#catchMouseEvents
     * @type {boolean} */
    catchMouseEvents: false,
    /**
     * Whether to repeat the media in loop, or just one time.
     * @name MediaContent#loop
     * @type {boolean} */
    loop: false,
    /**
     * When `true`, the media will automatically start playing when the associated {@link ActiveBox}
     * become active.
     * @name MediaContent#autoStart
     * @type {boolean} */
    autoStart: false,
  })

  /**
   * Default icons for media types.
   * @type {object} */
  const ICONS = {
    default: 'data:image/svg+xml;base64,' +
      'PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c3ZnIGhlaWdodD0iNDgiIHZp' +
      'ZXdCb3g9IjAgMCA0OCA0OCIgd2lkdGg9IjQ4IiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAw' +
      'MC9zdmciPjxwYXRoIGQ9Ik0yOC44IDEyTDI4IDhIMTB2MzRoNFYyOGgxMS4ybC44IDRoMTRWMTJ6' +
      'Ij48L3BhdGg+PC9zdmc+Cg==',
    audio: 'data:image/svg+xml;base64,' +
      'PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c3ZnIGZpbGw9IiMwMDAwMDAi' +
      'IGhlaWdodD0iNDgiIHZpZXdCb3g9IjAgMCAyNCAyNCIgd2lkdGg9IjQ4IiB4bWxucz0iaHR0cDov' +
      'L3d3dy53My5vcmcvMjAwMC9zdmciPjxwYXRoIGQ9Ik0zIDl2Nmg0bDUgNVY0TDcgOUgzem0xMy41' +
      'IDNjMC0xLjc3LTEuMDItMy4yOS0yLjUtNC4wM3Y4LjA1YzEuNDgtLjczIDIuNS0yLjI1IDIuNS00' +
      'LjAyek0xNCAzLjIzdjIuMDZjMi44OS44NiA1IDMuNTQgNSA2Ljcxcy0yLjExIDUuODUtNSA2Ljcx' +
      'djIuMDZjNC4wMS0uOTEgNy00LjQ5IDctOC43N3MtMi45OS03Ljg2LTctOC43N3oiPjwvcGF0aD48' +
      'cGF0aCBkPSJNMCAwaDI0djI0SDB6IiBmaWxsPSJub25lIj48L3BhdGg+PC9zdmc+Cg==',
    movie: 'data:image/svg+xml;base64,' +
      'PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c3ZnIGZpbGw9IiMwMDAwMDAi' +
      'IGhlaWdodD0iNDgiIHZpZXdCb3g9IjAgMCAyNCAyNCIgd2lkdGg9IjQ4IiB4bWxucz0iaHR0cDov' +
      'L3d3dy53My5vcmcvMjAwMC9zdmciPjxwYXRoIGQ9Ik0xOCA0bDIgNGgtM2wtMi00aC0ybDIgNGgt' +
      'M2wtMi00SDhsMiA0SDdMNSA0SDRjLTEuMSAwLTEuOTkuOS0xLjk5IDJMMiAxOGMwIDEuMS45IDIg' +
      'MiAyaDE2YzEuMSAwIDItLjkgMi0yVjRoLTR6Ij48L3BhdGg+PHBhdGggZD0iTTAgMGgyNHYyNEgw' +
      'eiIgZmlsbD0ibm9uZSI+PC9wYXRoPjwvc3ZnPgo=',
    mic: 'data:image/svg+xml;base64,' +
      'PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c3ZnIGZpbGw9IiMwMDAwMDAi' +
      'IGhlaWdodD0iNDgiIHZpZXdCb3g9IjAgMCAyNCAyNCIgd2lkdGg9IjQ4IiB4bWxucz0iaHR0cDov' +
      'L3d3dy53My5vcmcvMjAwMC9zdmciPjxwYXRoIGQ9Ik0xMiAxNGMxLjY2IDAgMi45OS0xLjM0IDIu' +
      'OTktM0wxNSA1YzAtMS42Ni0xLjM0LTMtMy0zUzkgMy4zNCA5IDV2NmMwIDEuNjYgMS4zNCAzIDMg' +
      'M3ptNS4zLTNjMCAzLTIuNTQgNS4xLTUuMyA1LjFTNi43IDE0IDYuNyAxMUg1YzAgMy40MSAyLjcy' +
      'IDYuMjMgNiA2LjcyVjIxaDJ2LTMuMjhjMy4yOC0uNDggNi0zLjMgNi02LjcyaC0xLjd6Ij48L3Bh' +
      'dGg+PHBhdGggZD0iTTAgMGgyNHYyNEgweiIgZmlsbD0ibm9uZSI+PC9wYXRoPjwvc3ZnPgo=',
    music: 'data:image/svg+xml;base64,' +
      'PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c3ZnIGZpbGw9IiMwMDAwMDAi' +
      'IGhlaWdodD0iNDgiIHZpZXdCb3g9IjAgMCAyNCAyNCIgd2lkdGg9IjQ4IiB4bWxucz0iaHR0cDov' +
      'L3d3dy53My5vcmcvMjAwMC9zdmciPjxwYXRoIGQ9Ik0wIDBoMjR2MjRIMHoiIGZpbGw9Im5vbmUi' +
      'PjwvcGF0aD48cGF0aCBkPSJNMTIgM3YxMC41NWMtLjU5LS4zNC0xLjI3LS41NS0yLS41NS0yLjIx' +
      'IDAtNCAxLjc5LTQgNHMxLjc5IDQgNCA0IDQtMS43OSA0LTRWN2g0VjNoLTZ6Ij48L3BhdGg+PC9z' +
      'dmc+Cg==',
    url: 'data:image/svg+xml;base64,' +
      'PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c3ZnIGZpbGw9IiMwMDAwMDAi' +
      'IGhlaWdodD0iNDgiIHZpZXdCb3g9IjAgMCAyNCAyNCIgd2lkdGg9IjQ4IiB4bWxucz0iaHR0cDov' +
      'L3d3dy53My5vcmcvMjAwMC9zdmciPjxwYXRoIGQ9Ik0wIDBoMjR2MjRIMHoiIGZpbGw9Im5vbmUi' +
      'PjwvcGF0aD48cGF0aCBkPSJNMTIgMkM2LjQ4IDIgMiA2LjQ4IDIgMTJzNC40OCAxMCAxMCAxMCAx' +
      'MC00LjQ4IDEwLTEwUzE3LjUyIDIgMTIgMnptLTEgMTcuOTNjLTMuOTUtLjQ5LTctMy44NS03LTcu' +
      'OTMgMC0uNjIuMDgtMS4yMS4yMS0xLjc5TDkgMTV2MWMwIDEuMS45IDIgMiAydjEuOTN6bTYuOS0y' +
      'LjU0Yy0uMjYtLjgxLTEtMS4zOS0xLjktMS4zOWgtMXYtM2MwLS41NS0uNDUtMS0xLTFIOHYtMmgy' +
      'Yy41NSAwIDEtLjQ1IDEtMVY3aDJjMS4xIDAgMi0uOSAyLTJ2LS40MWMyLjkzIDEuMTkgNSA0LjA2' +
      'IDUgNy40MSAwIDIuMDgtLjggMy45Ny0yLjEgNS4zOXoiPjwvcGF0aD48L3N2Zz4K'
  }

  /**
   * Collection of icon {@link external:HTMLImageElement} objects
   * @name MediaContent.ICONS
   * @type {object} */
  MediaContent.ICONS = {}

  // Load the icons
  $.each(ICONS, (key, value) => {
    const img = new Image()
    img.src = value
    MediaContent.ICONS[key] = img
  })

  return MediaContent
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/media/MidiAudioPlayer.js":
/*!**************************************!*\
  !*** ./src/media/MidiAudioPlayer.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : media/MidiAudioPlayer.js
 *  Created : 11/10/2018
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define, window */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! @francesc/basic-midi-player-js */ "./node_modules/@francesc/basic-midi-player-js/module/midiplayer.js"),
  __webpack_require__(/*! ../Utils */ "./src/Utils.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function (MidiPlayer, Utils) {

  // TODO: Use multiple instruments, at least one for each track
  // TODO: Use multiple midi channels (currently flattened to a single channel)
  // TODO: Use of channel 10 for percussion instruments
  // TODO: ... build a real MIDI player!!

  /**
   * A simple MIDI player based on MidiPlayerJS
   * https://github.com/grimmdude/MidiPlayerJS
   * See also: http://www.midijs.net (https://github.com/babelsberg/babelsberg-js/tree/master/midijs)
   * @exports MidiAudioPlayer
   * @class
   */
  class MidiAudioPlayer {
    /**
     * MidiAudioPlayer constructor
     * @param {ArrayBuffer} data - The MIDI file content, in ArrayBuffer format
     * @param {object=} options - Optional params related to the type of soundfont used. Valid options inside this object are:<br>
     * - `MIDISoundFontObject`: An object containing the full soundfont data. When this param is provided, no other one will be used.
     * - `MIDISoundFontBase`: The URL used as base for the current collection of MIDI soundfonts. Defaults to `https://clic.xtec.cat/dist/jclic.js/soundfonts/MusyngKite`
     * - `MIDISoundFontName`: The MIDI instrument name. Defaults to `acoustic_grand_piano`. See [MIDI.js Soundfonts](https://github.com/gleitz/midi-js-soundfonts) for full lists of MIDI instrument names.
     * - `MIDISoundFontExtension`: An extension to be added to `MIDISoundFontName` in order to build the full file name of the soundfont JS file. Defaults to `-mp3.js`
     */
    constructor(data, options = {}) {
      const AudioContext = window && (window.AudioContext || window.webkitAudioContext);
      if (AudioContext) {
        // Build instrument on first call to constructor
        MidiAudioPlayer.prepareInstrument(options, new AudioContext())
        this.data = data
        this.player = new MidiPlayer.Player(ev => this.playEvent(ev))
        if (this.player)
          this.player.loadArrayBuffer(data)
      }
    }

    /**
     * Initializes the soundfont instrument, loading data from GitHub
     * NOTE: This will not work when off-line!
     * TODO: Provided a basic, simple, static soundfont
     * @param {object} options - Optional param with options related to the MIDI soundfont. See details in `constructor` description.
     * @param {AudioContext} audioContext - The AudioContext object (see: https://developer.mozilla.org/en-US/docs/Web/API/AudioContext)
     */
    static prepareInstrument(options = {}, audioContext) {
      if (MidiAudioPlayer.loadingInstrument === false) {
        MidiAudioPlayer.loadingInstrument = true
        MidiAudioPlayer.audioContext = audioContext
        MidiPlayer.Soundfont.instrument(
          MidiAudioPlayer.audioContext,
          options.MIDISoundFontObject || MidiAudioPlayer.MIDISoundFontObject ||
          `${options.MIDISoundFontBase || MidiAudioPlayer.MIDISoundFontBase}/${options.MIDISoundFontName || MidiAudioPlayer.MIDISoundFontName}${options.MIDISoundFontExtension || MidiAudioPlayer.MIDISoundFontExtension}`)
          .then(instrument => {
            Utils.log('info', 'MIDI soundfont instrument loaded')
            MidiAudioPlayer.instrument = instrument
          })
          .catch(err => {
            Utils.log('error', `Error loading soundfont base instrument: ${err}`)
          })
      }
    }

    /**
     * Pauses the player
     */
    pause() {
      if (this.player) {
        this.player.pause()
        this.startedNotes = []
      }
    }

    /**
     * Starts or resumes playing
     */
    play() {
      if (this.player) {
        this.startedNotes = []
        this.player.play()
      }
    }

    /**
     * Gets the ' paused'  state of the current player
     * @returns boolean
     */
    get paused() {
      return this.player && !this.player.isPlaying()
    }

    /**
     * Checks if the current player has ended or is already playing
     * @returns boolean
     */
    get ended() {
      return this.player && this.player.getSongTimeRemaining() <= 0
    }

    /**
     * Gets the current time
     * @returns number
     */
    get currentTime() {
      return this.player && (this.player.getSongTime() * 1000) || 0
    }

    /**
     * Sets the current time of this player (in milliseconds)
     * @param {number} time - The time position where the player pointer must be placed
     */
    set currentTime(time) {
      if (this.player)
        this.player.skipToSeconds(time / 1000)
    }

    /**
     * Plays a MIDI event
     * @param {object} ev - The event data. See http://grimmdude.com/MidiPlayerJS/docs/index.html for details
     */
    playEvent(ev) {
      if (this.player && MidiAudioPlayer.instrument) {
        // Check for specific interval
        if (this.playTo > 0 && this.currentTime >= this.playTo)
          this.pause()
        // Set main volume
        else if (ev.name === 'Controller Change' && ev.number === 7)
          this.mainVolume = ev.value / 127;
        // Process 'Note on' messages. Max gain set to 2.0 for better results with the used soundfont
        else if (ev.name === 'Note on' && ev.velocity > 0)
          this.startedNotes[ev.noteNumber] = MidiAudioPlayer.instrument.play(ev.noteName, MidiAudioPlayer.audioContext.currentTime, { gain: 2 * (this.mainVolume * ev.velocity / 100) })
        // Process 'Note off' messages
        else if (ev.name === 'Note off' && ev.noteNumber && this.startedNotes[ev.noteNumber]) {
          this.startedNotes[ev.noteNumber].stop()
          delete (this.startedNotes[ev.noteNumber])
        }
      }
    }
  }

  Object.assign(MidiAudioPlayer.prototype, {
    /**
     * The MIDI file data used by this MIDI player
     * @name MidiAudioPlayer#data
     * @type {ArrayBuffer} */
    data: null,
    /**
     * The grimmdude's MidiPlayer used by this player
     * @name MidiAudioPlayer#player
     * @type {MidiPlayerJS} */
    player: null,
    /**
     * When >0, time position at which the music must end
     * @name MidiAudioPlayer#playTo
     * @type {number} */
    playTo: 0,
    /**
     * Main volume of this track (set with a MIDI message of type `Controller Change` #7)
     * @name MidiAudioPlayer#mainVolume
     * @type {number} */
    mainVolume: 1.0,
    /**
     * This array is used when processing 'Note off' events to stop notes that are currently playing.
     * It contains a collection of 'instrument.play' instances, one for each active note
     * @name MidiAudioPlayer#startedNotes
     * @type {function[]} */
    startedNotes: [],
  })

  /**
   * The {@link AudioContext} used by this MIDI player.
   * @type {AudioContext}
   */
  MidiAudioPlayer.audioContext = null;

  /**
   * The "Instrument" object used by this MIDI player.
   * See: https://github.com/danigb/soundfont-player
   * @type {Instrument}
   */
  MidiAudioPlayer.instrument = null

  /**
   * A flag used to avoid re-entrant calls to {@link MidiAudioPlayer.prepareInstrument}
   * @type {boolean}
   */
  MidiAudioPlayer.loadingInstrument = false

  /**
   * An object containing the full soundfont data used by {@link MidiAudioPlayer.instrument}
   * When this member is set, no other settings related to the sounfFont will be used.
   * This value can be overwritten by the global parameter `MIDISoundFontObject`
   * @type {object}
   */
  MidiAudioPlayer.MIDISoundFontObject = null

  /**
   * The URL used as base for the current collection of MIDI soundfonts.
   * This value can be overwritten by the global parameter `MIDISoundFontBase`
   * @type {string}
   */
  MidiAudioPlayer.MIDISoundFontBase = 'https://clic.xtec.cat/dist/jclic.js/soundfonts/MusyngKite'
  // Alternative sites are:
  // 'https://clic.xtec.cat/dist/jclic.js/soundfonts/FluidR3_GM'
  // 'https://raw.githubusercontent.com/gleitz/midi-js-soundfonts/gh-pages/FluidR3_GM'
  // 'https://raw.githubusercontent.com/gleitz/midi-js-soundfonts/gh-pages/MusyngKite'

  /**
   * The MIDI instrument name.
   * This value can be overwritten by the global parameter `MIDISoundFontName`
   * See [MIDI.js Soundfonts](https://github.com/gleitz/midi-js-soundfonts) for full lists of MIDI instrument names.
   * @type {string}
   */
  MidiAudioPlayer.MIDISoundFontName = 'acoustic_grand_piano'

  /**
   * An extension to be added to `MIDISoundFontName` in order to build the full file name of the soundfont JS file.
   * Current valid options are `-mp3.js` and `-ogg.js`
   * This value can be overwritten by the global parameter `MIDISoundFontExtension`
   * @type {string}
   */
  MidiAudioPlayer.MIDISoundFontExtension = '-mp3.js'

  return MidiAudioPlayer
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/project/JClicProject.js":
/*!*************************************!*\
  !*** ./src/project/JClicProject.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : project/JClicProject.js
 *  Created : 01/04/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ./ProjectSettings */ "./src/project/ProjectSettings.js"),
  __webpack_require__(/*! ../bags/ActivitySequence */ "./src/bags/ActivitySequence.js"),
  __webpack_require__(/*! ../bags/MediaBag */ "./src/bags/MediaBag.js"),
  __webpack_require__(/*! ../Activity */ "./src/Activity.js"),
  __webpack_require__(/*! ../Utils */ "./src/Utils.js"),
  __webpack_require__(/*! ../AWT */ "./src/AWT.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, ProjectSettings, ActivitySequence, MediaBag, Activity, Utils, AWT) {

  /**
   *  JClicProject contains all the components of a JClic project: activities, sequences, media
   *  files, descriptors and metadata.
   *
   *  This encapsulation is achieved by three auxiliary objects:
   *  - {@link ProjectSettings}: stores metadata like full title, description, authors, languages,
   *  educational topics...
   *  - {@link ActivitySequence}: defines the order in which the activities must be shown.
   *  - {@link MediaBag}: contains the list of all media files used by the activities
   * @exports JClicProject
   * @class
   */
  class JClicProject {
    /**
     * JClicProject constructor
     */
    constructor() {
      this.settings = new ProjectSettings(this)
      this.activitySequence = new ActivitySequence(this)
      this._activities = {}
      this.mediaBag = new MediaBag(this)
    }

    /**
     * Loads the project settings from a main jQuery XML element
     * @param {external:jQuery} $xml - The XML element
     * @param {string} path - The full path of this project
     * @param {?external:JSZip} zip - An optional JSZip object where this project is encapsulated
     * @param {?object} options - An object with miscellaneous options
     * @returns {JClicProject}
     */
    setProperties($xml, path, zip, options) {
      if (path) {
        this.path = path
        if (path.file)
          this.basePath = path
        else
          this.basePath = Utils.getBasePath(path)
      }
      this.zip = zip
      this.name = $xml.attr('name')
      this.version = $xml.attr('version')
      this.type = $xml.attr('type')
      this.code = $xml.attr('code')
      this.settings.setProperties($xml.children('settings'))
      this.activitySequence.setProperties($xml.children('sequence'))
      this.mediaBag.setProperties($xml.children('mediaBag'))
      this.reportableActs = 0
      this._activities = {}
      const $node = $xml.children('activities')
      const $acts = $node.children('activity')
      const ownFonts = this.mediaBag.getElementsOfType('font')
      if (ownFonts.length > 0)
        options.ownFonts = (options.ownFonts || []).concat(ownFonts)
      AWT.Font.checkTree($acts, options)
      $acts.each((_n, act) => {
        const $act = $(act)
        this._activities[Utils.nSlash($act.attr('name'))] = $act
        if ($act.children('settings').attr('report') === 'true')
          this.reportableActs++
      })
      return this
    }

    /**
     * Finds activities by name and builds the corresponding {@link Activity} object.
     * @param {string} name - The name of the requested activity
     * @returns {Activity}
     */
    getActivity(name) {
      return Activity.getActivity(this._activities[Utils.nSlash(name)], this)
    }

    /**
     *
     * Builds the {@link Skin}, {@link EventSounds} and {@link MediaBag} fonts associated to this project.
     * @param {PlayStation} ps - The PlayStation (usually a {@link JClicPlayer}) linked to this project.
     */
    realize(ps) {
      // Build skin
      if (this.skin === null && this.settings.skinFileName !== null && this.settings.skinFileName.length > 0)
        this.skin = this.mediaBag.getSkinElement(this.settings.skinFileName, ps)

      this.settings.eventSounds.realize(ps, this.mediaBag)

      // Build all elements of type `font`
      this.mediaBag.buildAll('font', null, ps)
    }

    /**
     * Run finalizers on realized objects
     */
    end() {
      // TODO: Implement JClicProject.end()
    }
  }

  Object.assign(JClicProject.prototype, {
    /**
     * The project's name
     * @name JClicProject#name
     * @type {string} */
    name: 'unknown',
    /**
     * The version of the XML file format used to save the project (currently 0.1.3)
     * @name JClicProject#version
     * @type {string} */
    version: '0.1.3',
    /**
     * Optional property that can be used by reporting systems
     * @name JClicProject#type
     * @type {string} */
    type: null,
    /**
     * Optional property that can be used by reporting systems
     * @name JClicProject#code
     * @type {string} */
    code: null,
    /**
     * Object containing the project settings
     * @name JClicProject#settings
     * @type {ProjectSettings} */
    settings: null,
    /**
     * Object containing the order in which the activities should be played
     * @name JClicProject#activitySequence
     * @type {ActivitySequence} */
    activitySequence: null,
    /**
     * Array of jQuery xml elements containing the data of each activity. Don't rely on this object
     * to retrieve real activities. Use the method {@link @JClicProject#getActivity} instead.
     * @name JClicProject#_activities
     * @private
     * @type {external:jQuery[]} */
    _activities: null,
    /**
     * Number of activities suitable to be included reports
     * @name JClicProject#reportableActs
     * @type {number}
     */
    reportableActs: 0,
    /**
     * The collection of all media elements used in this project
     * @name JClicProject#mediaBag
     * @type {MediaBag} */
    mediaBag: null,
    /**
     * The object that builds and manages the visual interface presented to users
     * @name JClicProject#skin
     * @type {Skin} */
    skin: null,
    /**
     * Relative path or absolute URL to be used as a base to access files, usually in conjunction
     * with {@link JClicPlayer#basePath}
     * @name JClicProject#basePath
     * @type {string} */
    basePath: '',
    /**
     * Full path of this project
     * @name JClicProject#path
     * @type {string} */
    path: null,
    /**
     * The JSZip object where this project is stored (can be `null`)
     * @name JClicProject#zip
     * @type {external:JSZip} */
    zip: null,
  })

  return JClicProject
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/project/ProjectSettings.js":
/*!****************************************!*\
  !*** ./src/project/ProjectSettings.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : project/ProjectSettings.js
 *  Created : 01/04/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define, window */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ../media/EventSounds */ "./src/media/EventSounds.js"),
  __webpack_require__(/*! ../Utils */ "./src/Utils.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, EventSounds, Utils) {

  /**
   * This class contains miscellaneous settings of JClic projects.
   *
   * In addition to the members of this class, there can be other properties in JClic project files
   * that are not currently loaded:
   * - iconFileName
   * - descriptors
   * - area
   * - level
   * - locale
   * - authors
   * - organizations
   * - revisions
   * @exports ProjectSettings
   * @class
   */
  class ProjectSettings {
    /**
     * ProjectSettings constructor
     * @param {JClicProject} project - The project to which this settings belongs
     */
    constructor(project) {
      this.project = project
      this.languages = []
      this.locales = []
    }

    /**
     * Reads the ProjectSettings values from a JQuery XML element
     * @param {external:jQuery} $xml - The XML element to parse
     */
    setProperties($xml) {
      $xml.children().each((_n, child) => {
        switch (child.nodeName) {
          case 'title':
            this.title = child.textContent
            break
          case 'description':
            this.description = child.textContent
            break
          case 'language':
            this.languages.push(child.textContent)
            break
          case 'eventSounds':
            this.eventSounds = new EventSounds()
            this.eventSounds.setProperties($(child))
            break
          case 'skin':
            this.skinFileName = $(child).attr('file')
            break
        }
      })

      // Try to find an array of valid locales
      // See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl
      if (this.languages.length > 0 && window.Intl && window.Intl.getCanonicalLocales) {
        this.locales = []
        this.languages.forEach(lang => {
          // Languages usually are stored in the form: "English (en)"
          const matches = /\(([a-z,A-Z,-]+)\)/.exec(lang)
          if (matches && matches.length > 1) {
            try {
              const canonicals = window.Intl.getCanonicalLocales(matches[1])
              if (canonicals)
                this.locales = this.locales.concat(canonicals)
            } catch (err) {
              Utils.log('error', `Invalid language: ${lang}`)
            }
          }
        })
      }
      return this
    }
  }

  Object.assign(ProjectSettings.prototype, {
    /**
     * The JClicProject to which this ProjectSettings belongs
     * @name ProjectSettings#project
     * @type {JClicProject} */
    project: null,
    /**
     * The project title
     * @name ProjectSettings#title
     * @type {string} */
    title: 'Untitled',
    /**
     * Project's description. Can have multiple paragraphs, separated by `<p>`
     * @name ProjectSettings#description
     * @type {string} */
    description: '',
    /**
     * JClic projects can use more than one language, so use a string array
     * @name ProjectSettings#languages
     * @type {string[]} */
    languages: null,
    /**
     * Array of canonical locales, as defined in 
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation|Intl}
     * @name ProjectSettings#locales
     * @type {string[]} */
    locales: null,
    /**
     * The name of an optional 'skin' (visual aspect) can be set for the whole project, or for each {@link Activity}
     * @name ProjectSettings#skinFileName
     * @type {string} */
    skinFileName: null,
    /**
     * The main {@link EventSounds} object of the project
     * @name ProjectSettings#eventSounds
     * @type {EventSounds} */
    eventSounds: new EventSounds(),
  })

  return ProjectSettings
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/report/ActionReg.js":
/*!*********************************!*\
  !*** ./src/report/ActionReg.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : report/ActionReg.js
 *  Created : 17/05/2016
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ../Utils */ "./src/Utils.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, Utils) {

  /**
   * This class stores information about one specific action done by the current user while playing
   * an activity.
   *
   * @exports ActionReg
   * @class
   */
  class ActionReg {
    /**
     * ActionReg constructor
     * @param {string} type - Type of action (`click`, `write`, `move`, `select`...)
     * @param {string}+ source - Description of the object on which the action is done.
     * @param {string}+ dest - Description of the object that acts as a target of the action (used in pairings)
     * @param {boolean} ok - `true` if the action was OK, `false`, `null` or `undefined` otherwise
     */
    constructor(type, source, dest, ok) {
      this.type = type
      this.source = source || null
      this.dest = dest || null
      this.ok = ok || false
      this.time = (new Date()).valueOf()
    }

    /**
     * Provides the data associated with this action in XML format suitable for a
     * {@link http://clic.xtec.cat/en/jclic/reports/|JClic Reports Server}.
     * @returns {external:jQuery}
     */
    $getXML() {
      const attr = { ok: this.ok, time: this.time }
      if (this.type)
        attr.type = this.type
      if (this.source)
        attr.source = this.source
      if (this.dest)
        attr.dest = this.dest
      return $('<action/>', attr)
    }

    /**
     * Fills this ActionReg with data provided in XML format
     * @param {external:jQuery} $xml - The XML element to be processed, already wrapped as jQuery object
     */
    setProperties($xml) {
      Utils.attrForEach($xml.get(0).attributes, (name, value) => {
        switch (name) {
          case 'type':
          case 'source':
          case 'dest':
            this[name] = value
            break
          case 'time':
            this[name] = Number(value)
            break
          case 'ok':
            this[name] = Utils.getBoolean(value, false)
            break
        }
      })
    }
  }

  Object.assign(ActionReg.prototype, {
    /**
     * The type of action (`click`, `write`, `move`, `select`...)
     * @name ActionReg#type
     * @type {string} */
    type: 'unknown',
    /**
     * Description of the object on which the action was done
     * @name ActionReg#source
     * @type {string} */
    source: null,
    /**
     * Description of the object that has acted as a target of the action (used in pairings)
     * @name ActionReg#dest
     * @type {string} */
    dest: null,
    /**
     * Time stamp taken when the action was done
     * @name ActionReg#time
     * @type {number} */
    time: 0,
    /**
     * `true` if the action was OK
     * @name ActionReg#isOk
     * @type {boolean} */
    isOk: false,
  })

  return ActionReg
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/report/ActivityReg.js":
/*!***********************************!*\
  !*** ./src/report/ActivityReg.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : report/ActivityReg.js
 *  Created : 17/05/2016
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ../Utils */ "./src/Utils.js"),
  __webpack_require__(/*! ./ActionReg */ "./src/report/ActionReg.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, Utils, ActionReg) {
  /**
   * This class stores miscellaneous data obtained by the current user playing an {@link Activity}.
   * @exports ActivityReg
   * @class
   */
  class ActivityReg {
    /**
     * ActivityReg constructor
     * @param {Activity} act - The {@link Activity} referenced by this object.
     */
    constructor(act) {
      this.name = act.name
      this.code = act.code
      this.actions = []
      this.startTime = (new Date()).valueOf()
      this.minActions = act.getMinNumActions()
      this.reportActions = act.reportActions
    }

    /**
     * Provides the data associated with the current activity in an XML format suitable for a
     * {@link http://clic.xtec.cat/en/jclic/reports/|JClic Reports Server}.
     * @returns {external:jQuery}
     */
    $getXML() {
      const attr = {
        start: this.startTime,
        time: this.totalTime,
        solved: this.solved,
        score: this.score,
        minActions: this.minActions,
        actions: this.numActions
      }
      if (this.name)
        attr.name = this.name
      if (this.code)
        attr.code = this.code
      if (!this.closed)
        attr.closed = false
      if (this.reportActions)
        attr.reportActions = true

      const $result = $('<activity/>', attr)
      this.actions.forEach(ac => {
        $result.append(ac.$getXML())
      })
      return $result
    }

    /**
     * Builds an object with relevant data about the results obtained by the current student in this activity
     * @returns {Object} - The results of this activity
     */
    getData() {
      const result = {
        name: this.name,
        time: Math.round(this.totalTime / 10) / 100,
        solved: this.solved,
        score: this.score,
        minActions: this.minActions,
        actions: this.numActions,
        precision: this.getPrecision(),
        closed: this.closed
      }
      if (this.code)
        result.code = this.code
      return result
    }

    /**
     * Fills this ActivityReg with data provided in XML format
     * @param {external:jQuery} $xml -The XML element to be processed, already wrapped as jQuery object
     */
    setProperties($xml) {
      Utils.attrForEach($xml.get(0).attributes, (name, value) => {
        switch (name) {
          case 'name':
          case 'code':
            this[name] = value
            break
          case 'start':
          case 'time':
          case 'score':
          case 'minActions':
          case 'actions':
            this[name] = Number(value)
            break
          case 'solved':
          case 'closed':
          case 'reportActions':
            this[name] = Utils.getBoolean(value, false)
            break
        }
      })
      $xml.children('action').each((_n, child) => {
        const action = new ActionReg()
        action.setProperties($(child))
        this.actions.push(action)
      })
    }

    /**
     * Reports a new action done by the user while playing the current activity
     * @param {string} type - Type of action (`click`, `write`, `move`, `select`...)
     * @param {string}+ source - Description of the object on which the action is done.
     * @param {string}+ dest - Description of the object that acts as a target of the action (used in pairings)
     * @param {boolean} ok - `true` if the action was OK, `false`, `null` or `undefined` otherwise
     */
    newAction(type, source, dest, ok) {
      if (!this.closed) {
        this.lastAction = new ActionReg(type, source, dest, ok)
        this.actions.push(this.lastAction)
      }
    }

    /**
     * Retrieves a specific {@link ActionReg} element from `actions`
     * @param {number} index - The nth action to be retrieved
     * @returns {ActionReg}
     */
    getActionReg(index) {
      return index >= this.actions.length ? null : this.actions[index]
    }

    /**
     * Closes the current activity, adjusting total time if needed
     */
    closeActivity() {
      if (!this.closed) {
        if (this.lastAction)
          this.totalTime = this.lastAction.time - this.startTime
        else
          this.totalTime = (new Date()).valueOf() - this.startTime
        this.closed = true
      }
    }

    /**
     * calculates the final score obtained by the user in this activity.
     * The algorithm used takes in account the minimal number of actions needed, the actions
     * really done by the user, and if the activity was finally solved or not.
     * @returns {number}
     */
    getPrecision() {
      let result = 0
      if (this.closed && this.minActions > 0 && this.numActions > 0) {
        if (this.solved) {
          if (this.numActions < this.minActions)
            result = 100
          else
            result = Math.round(this.minActions * 100 / this.numActions)
        } else
          result = Math.round(100 * (this.score * this.score) / (this.minActions * this.numActions))
      }
      return result
    }

    /**
     * This method should be called when the current activity finishes. Data about user's final results
     * on the activity will then be saved.
     * @param {number} score - The final score, usually in a 0-100 scale.
     * @param {number} numActions - The total number of actions done by the user to solve the activity
     * @param {boolean} solved - `true` if the activity was finally solved, `false` otherwise.
     */
    endActivity(score, numActions, solved) {
      if (!this.closed) {
        this.solved = solved
        this.numActions = numActions
        this.score = score
        this.closeActivity()
      }
    }
  }

  Object.assign(ActivityReg.prototype, {
    /**
     * Name of the associated activity
     * @name ActivityReg#name
     * @type {string} */
    name: '',
    /**
     * Optional code assigned to this activity, used for later filtering
     * @name ActivityReg#code
     * @type {string} */
    code: '',
    /**
     * Timestamp when the user starts playing the activity
     * @name ActivityReg#startTime
     * @type {number} */
    startTime: 0,
    /**
     * Total time spent by the user in the activity, measured in milliseconds
     * @name ActivityReg#totalTime
     * @type {number} */
    totalTime: 0,
    /**
     * Collection of actions done by the user while playing the activity
     * @name ActivityReg#actions
     * @type {ActionReg[]} */
    actions: [],
    /**
     * `true` only when the user has finished and solved the activity
     * @name ActivityReg#solved
     * @type {boolean} */
    solved: false,
    /**
     * Last {@link ActionReg} performed by the user in this activity
     * @name ActivityReg#lastAction
     * @type {ActionReg} */
    lastAction: null,
    /**
     * Final score obtained by the current user in this activity
     * @name ActivityReg#score
     * @type {number} */
    score: 0,
    /**
     * Minimum number of actions needed to solve the activity
     * @name ActivityReg#minActions
     * @type {number} */
    minActions: 0,
    /**
     * `true` when the activity has finished, `false` for the activity that is currently playing
     * @name ActivityReg#closed
     * @type {boolean} */
    closed: false,
    /**
     * `true` when this type of activity should record specific actions done by the users
     * @name ActivityReg#reportActions
     * @type {boolean} */
    reportActions: false,
    /**
     * Number of actions done by the user playing this activity
     * @name ActivityReg#numActions
     * @type {number} */
    numActions: 0,
  })

  return ActivityReg
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/report/EncryptMin.js":
/*!**********************************!*\
  !*** ./src/report/EncryptMin.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : report/Encryption.js
 *  Created : 18/06/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {

  /**
   *
   * Utilities to encrypt and decrypt strings using simple methods, just to avoid write
   * passwords in plain text in data and configuration files. Do not use it as a
   * secure cryptographic system!
   *
   * Based on {@link https://github.com/projectestac/jclic/blob/master/src/utilities/edu/xtec/util/Encryption.java Encryption}
   * utilities, created by Albert Llastarri for {@link https://github.com/projectestac/jclic JClic}.
   *
   * IMPORTANT: This is a shortened version of Encryption with only the methods needed to decrypt
   * stored passwords. Full version is on file `src/misc/encryption/Encryption.js`
   *
   * @exports Encryption
   * @class
   * @abstract
   */
  class Encryption {
    /**
     * Decrypts the given code
     * @param {string} txt - Code to be decrypted
     * @returns {string}
     */
    static Decrypt(txt) {
      if (txt === null || txt.length === 0)
        return null
      const s = Encryption.decodify(txt)
      return s === Encryption.BLANK ? '' : s
    }

    /**
     * @param {string} cA (was char[])
     * @param {integer} fromIndex
     * @returns {string} (was char)
     */
    static hexCharArrayToChar(cA, fromIndex) {
      let n = 0
      for (let i = 0; i <= 3; i++) {
        const j = Number.parseInt(cA[fromIndex + i], 16)
        if (isNaN(j))
          throw 'Invalid expression!'
        else
          n = n * 16 + j
      }
      return String.fromCharCode(n)
    }

    /**
     * @param {string} cA - (was char[])
     * @param {number} fromIndex
     * @returns {number}
     */
    static hexCharArrayToInt(cA, fromIndex) {
      let n = 0
      for (let i = 0; i <= 1; i++) {
        const j = Number.parseInt(cA[fromIndex + i], 16)
        if (isNaN(j))
          throw 'Invalid expression!'
        else
          n = n * 16 + j
      }
      return n
    }

    /**
     * @param {string} cA - (was char[])
     * @returns {string}
     */
    static decodifyZerosField(cA) {
      let
        sb = '',
        num = Number.parseInt(cA[0], 32),
        k = 0,
        i = 0

      for (i = 0; num !== 0; i++) {
        while (num > 0) {
          sb = sb + cA[i * 3 + 1] + cA[i * 3 + 2]
          num--
          k++
        }
        if (cA.length > i * 3 + 3)
          num = Number.parseInt(cA[i * 3 + 3], 32)
        else
          num = 0
      }
      for (let j = i * 3 + 1; j < cA.length; j++)
        sb = sb + cA[j]

      return Number.parseInt(k, 32) + sb
    }

    /**
     * @param {string} cA - (was char[])
     * @returns {string} (was StringBuilder)
     */
    static decompressZeros(cA) {
      cA = Encryption.decodifyZerosField(cA)
      let
        numBytesZeros = Number.parseInt(cA[0], 32),
        iniNoZeros = numBytesZeros * 2 + 1,
        bFi = false,
        sb = ''

      for (let i = 0; i < numBytesZeros && !bFi; i++) {
        const zeros = Encryption.hexCharArrayToInt(cA, 1 + i * 2)
        let s = zeros.toString(2)
        while (s.length < 8)
          s = '0' + s
        for (let j = 0; j <= 7 && !bFi; j++) {
          if (s[j] === '1')
            sb = sb + '0'
          else if (iniNoZeros < cA.length)
            sb = sb + cA[iniNoZeros++]
          else
            bFi = true
        }
      }
      return sb
    }

    /**
     * @param {string} sb1 - (was StringBuilder)
     * @returns {string}
     */
    static decodifyFromHex(sb1) {
      let sb = '', j = 0
      for (let i = 0; j < sb1.length; i++) {
        const c = Encryption.hexCharArrayToChar(sb1, j)
        sb = sb + c
        j += 4
      }
      return sb
    }

    /**
     * @param {string} s
     * @returns {string} (was char[])
     */
    static unchangeOrder(s) {
      let m = 0, n = s.length - 1
      const cA = []
      for (let p = 0; p < s.length; p++)
        cA[p] = ''
      for (let i = 0; i < s.length; i++)
        if (i % 2 === 0)
          cA[i] = s[m++]
        else
          cA[i] = s[n--]
      return cA.join('')
    }

    /**
     * @param {string} word
     * @returns {string}
     */
    static codify(word) {
      if (word.length > 24)
        throw 'Password is too large!'
      return Encryption.changeOrder(Encryption.compressZeros(Encryption.codifyToHexWord(word)))
    }

    /**
     * @param {string} word
     * @returns {string}
     */
    static decodify(word) {
      try {
        return Encryption.decodifyFromHex(Encryption.decompressZeros(Encryption.unchangeOrder(word)))
      } catch (e) { //The supplied word was not codified using this system
        return ''
      }
    }
  }

  /**
  * Default bank password
  * @type {string}
  */
  Encryption.BLANK = '___blank___##'

  return Encryption
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/report/Reporter.js":
/*!********************************!*\
  !*** ./src/report/Reporter.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : report/Reporter.js
 *  Created : 17/05/2016
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ./SessionReg */ "./src/report/SessionReg.js"),
  __webpack_require__(/*! ./EncryptMin */ "./src/report/EncryptMin.js"),
  __webpack_require__(/*! ./SCORM */ "./src/report/SCORM.js"),
  __webpack_require__(/*! ../Utils */ "./src/Utils.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, SessionReg, Encryption, Scorm, Utils) {

  /**
   * This class implements the basic operations related with the processing of times and scores
   * done by users playing JClic activities. These operations include: identification of users,
   * compilation of data coming from the activities, storage of this data for later use, and
   * presentation of summarized results.
   * @exports Reporter
   * @class
   */
  class Reporter {
    /**
     * Reporter constructor
     * @param {PlayStation} ps - The {@link PlayStation} used to retrieve localized messages
     */
    constructor(ps) {
      this.ps = ps
      this.sessions = []
      this.started = new Date()
      this.initiated = false
      this.info = new ReporterInfo(this)
    }

    /**
     * Creates a new Reporter of the requested class
     * The resulting object must be prepared to operate with a call to its `init` method.
     * @param {string} className - Class name of the requested reporter. When `null`, a basic Reporter is created.
     * @param {PlayStation} ps - The {@link PlayStation} used to retrieve localized messages
     * @returns {Reporter}
     */
    static getReporter(className, ps) {
      let result = null
      if (className === null) {
        className = 'Reporter'
        if (ps.options.hasOwnProperty('reporter'))
          className = ps.options.reporter
      }
      if (Reporter.CLASSES.hasOwnProperty(className))
        result = new Reporter.CLASSES[className](ps)
      else
        Utils.log('error', 'Unknown reporter class: %s', className)

      return result
    }

    /**
     * Returns the `info` element associated to this Reporter.
     * @returns {ReporterInfo}
     */
    getInfo() {
      return this.info.recalc()
    }

    /**
     * Gets a specific property from this reporting system
     * @param {string} key - Requested property
     * @param {string}+ defaultValue - Default return value when requested property does not exist
     * @returns {string}
     */
    getProperty(key, defaultValue) {
      return defaultValue
    }

    /**
     * Gets a specific boolean property from this reporting system
     * @param {string} key - Requested property
     * @param {boolean}+ defaultValue - Default return when requested property does not exist
     * @returns {boolean}
     */
    getBooleanProperty(key, defaultValue) {
      const s = this.getProperty(key, defaultValue === true ? 'true' : 'false')
      return key === null ? defaultValue : s === 'true' ? true : false
    }

    /**
     * Gets the list of groups or organizations currently registered in the system. This
     * method should be implemented by classes derived of `Reporter`.
     * @returns {Promise} - When fulfilled, an array of group data is returned as a result
     */
    getGroups() {
      return Promise.reject('No groups defined!')
    }

    /**
     * Gets the list of users currently registered in the system, optionally filtered by
     * a specific group ID. This method should be implemented by classes derived of `Reporter`.
     * @param {string}+ groupId - Optional group ID to be used as a filter criteria
     * @returns {Promise} - When fulfilled, an object with a collection of user data records
     * is returned
     */
    getUsers(groupId) {
      return Promise.reject('No users defined in ' + groupId)
    }

    /**
     * Gets extended data associated with a specific user. This is a method intended to be
     * implemented in subclasses.
     * @param {string} _userId - The requested user ID
     * @returns {Promise} - When fulfilled, an object with user data is returned.
     */
    getUserData(_userId) {
      return Promise.reject('Unknown user!')
    }

    /**
     * Gets extended data associated with a specific group or organization. This
     * is a method intended to be implemented in subclasses.
     * @param {string} _groupId - The requested group ID
     * @returns {Promise} - When fulfilled, an object with group data is returned.
     */
    getGroupData(_groupId) {
      return Promise.reject('Unknown group!')
    }

    /**
     * Checks if this reporting system manages its own database of users and groups. Defaults to `false`
     * @returns {boolean}
     */
    userBased() {
      if (this.bUserBased === null)
        this.bUserBased = this.getBooleanProperty('USER_TABLES', false)
      return this.bUserBased
    }

    /**
     * Allows the current user to create a new group, and asks his name
     * @returns {Promise} - When fulfilled, the chosen name for the new group is returned.
     */
    promptForNewGroup() {
      // TODO: Implement promptForNewGroup
      return Promise.reject('Remote creation of groups not yet implemented!')
    }

    /**
     * Allows the current user to create a new user ID, and asks his ID and password
     * @returns {Promise} - When fulfilled, an object with the new user ID and password
     * is returned.
     */
    promptForNewUser() {
      // TODO: Implement promptForNewUser
      return Promise.reject('Remote creation of users not yet implemented!')
    }

    /**
     * Allows the current user to select its group or organization from the current groups list
     * @returns {Promise}
     */
    promptGroupId() {
      return new Promise((resolve, reject) => {
        if (!this.userBased())
          reject('This system does not manage users!')
        else {
          this.getGroups().then((groupList) => {
            // Creation of new groups not yet implemented!
            if (!groupList || groupList.length < 1)
              reject('No groups defined!')
            else {
              let sel = 0
              const $groupSelect = $('<select/>').attr({ size: Math.max(3, Math.min(15, groupList.length)) })
              groupList.forEach(g => $groupSelect.append($('<option/>').attr({ value: g.id }).text(g.name)))
              $groupSelect.change(ev => { sel = ev.target.selectedIndex })
              this.ps.skin.showDlg(true, {
                main: [
                  $('<h2/>', { class: 'subtitle' }).html(this.ps.getMsg('Select group:')),
                  $groupSelect],
                bottom: [
                  this.ps.skin.$okDlgBtn,
                  this.ps.skin.$cancelDlgBtn]
              }).then(() => {
                resolve(groupList[sel].id)
              }).catch(reject)
            }
          }).catch(reject)
        }
      })
    }

    /**
     * Asks for a valid user ID fulfilling the promise if found, rejecting it otherwise
     * @param {boolean}+ forcePrompt - Prompt also if `userId` is already defined (default is `false`)
     * @returns {Promise}
     */
    promptUserId(forcePrompt) {
      return new Promise((resolve, reject) => {
        if (this.userId !== null && !forcePrompt)
          resolve(this.userId)
        else if (!this.userBased())
          reject('This system does not manage users!')
        else {
          const $pwdInput = $('<input/>', { type: 'password', size: 8, maxlength: 64 })
          if (this.getBooleanProperty('SHOW_USER_LIST', true)) {
            this.promptGroupId().then(groupId => {
              this.getUsers(groupId).then(userList => {
                // Creation of new users not yet implemented
                // let userCreationAllowed = this.getBooleanProperty('ALLOW_CREATE_USERS', false)
                if (!userList || userList.length < 1)
                  reject('Group ' + groupId + ' has no users!')
                else {
                  let sel = -1
                  const $userSelect = $('<select/>').attr({ size: Math.max(3, Math.min(15, userList.length)) })
                  userList.forEach(u => $userSelect.append($('<option/>').attr({ value: u.id }).text(u.name)))
                  $userSelect.change(ev => { sel = ev.target.selectedIndex })
                  this.ps.skin.showDlg(true, {
                    main: [
                      $('<h2/>', { class: 'subtitle' }).html(this.ps.getMsg('Select user:')),
                      $userSelect,
                      $('<h2/>', { class: 'subtitle' }).html(this.ps.getMsg('Password:')).append($pwdInput)],
                    bottom: [
                      this.ps.skin.$okDlgBtn,
                      this.ps.skin.$cancelDlgBtn]
                  }).then(() => {
                    if (sel >= 0) {
                      if (userList[sel].pwd && Encryption.Decrypt(userList[sel].pwd) !== $pwdInput.val()) {
                        window.alert(this.ps.getMsg('Incorrect password'))
                        reject('Incorrect password')
                      } else {
                        this.userId = userList[sel].id
                        resolve(this.userId)
                      }
                    } else
                      reject('No user has been selected')
                  }).catch(reject)
                }
              }).catch(reject)
            }).catch(reject)
          } else {
            const $userInput = $('<input/>', { type: 'text', size: 8, maxlength: 64 })
            this.ps.skin.showDlg(true, {
              main: [
                $('<div/>').css({ 'text-align': 'right' })
                  .append($('<h2/>', { class: 'subtitle' }).html(this.ps.getMsg('User:'))
                    .append($userInput))
                  .append($('<h2/>', { class: 'subtitle' }).html(this.ps.getMsg('Password:'))
                    .append($pwdInput))],
              bottom: [
                this.ps.skin.$okDlgBtn,
                this.ps.skin.$cancelDlgBtn]
            }).then(() => {
              this.getUserData($userInput.val()).then(user => {
                if (user.pwd && Encryption.Decrypt(user.pwd) !== $pwdInput.val()) {
                  window.alert(this.ps.getMsg('Incorrect password'))
                  reject('Incorrect password')
                } else {
                  this.userId = user.id
                  resolve(this.userId)
                }
              }).catch(reject)
            }).catch(reject)
          }
        }
      })
    }

    /**
     * Builds a complex object containing all the results reported while playing activities
     * @returns {Object} - The current results
     */
    getData() {

      // Force the re-calculation of all scores
      this.info.recalc()

      const result = {
        started: this.started.toISOString(),
        descriptionKey: this.descriptionKey,
        descriptionDetail: this.descriptionDetail,
        projects: this.info.numSessions,
        sequences: this.info.numSequences,
        activitiesDone: this.info.nActivities,
        playedOnce: this.info.nActPlayed,
        reportable: this.info.reportableActs,
        ratioPlayed: Math.round(this.info.ratioPlayed * 100),
        activitiesSolved: this.info.nActSolved,
        ratioSolved: Math.round(this.info.ratioSolved * 100),
        actScore: this.info.nActScore,
        partialScore: Math.round(this.info.partialScore * 100),
        globalScore: Math.round(this.info.globalScore * 100),
        time: Math.round(this.info.tTime / 10) / 100,
        actions: this.info.nActions,
        sessions: []
      }

      if (this.userId)
        result.userId = this.userId
      else if (this.SCORM)
        result.user = this.SCORM.studentName + (this.SCORM.studentId === '' ? '' : ` (${this.SCORM.studentId})`)

      this.sessions.forEach(sr => {
        if (sr.getInfo().numSequences > 0)
          result.sessions.push(sr.getData(false, false))
      })

      return result
    }

    /**
     * Initializes this report system with an optional set of parameters.
     * Returns a Promise, fulfilled when the reporter is fully initialized.
     * @param {?Object} options - Initial settings passed to the reporting system
     * @returns {Promise}
     */
    init(options) {
      if (!options)
        options = this.ps.options
      this.userId = Utils.getVal(options.user)
      this.sessionKey = Utils.getVal(options.key)
      this.sessionContext = Utils.getVal(options.context)
      this.groupCodeFilter = Utils.getVal(options.groupCodeFilter)
      this.userCodeFilter = Utils.getVal(options.userCodeFilter)
      if (options.SCORM !== false) {
        this.SCORM = Scorm.getSCORM(this)
        if (this.SCORM !== null && this.descriptionKey === Reporter.prototype.descriptionKey)
          this.descriptionKey = this.SCORM.getScormType()
      }
      this.initiated = true
      Utils.log('debug', 'Basic Reporter initialized')
      return Promise.resolve(true)
    }

    /**
     * Closes this reporting system
     * @returns {Promise} - A Promise object to be fullfilled when all pending tasks are finished.
     */
    end() {
      Utils.log('debug', 'Basic Reporter ending')
      this.endSession()
      return Promise.resolve(true)
    }

    /**
     * Finalizes the current sequence
     */
    endSequence() {
      if (this.currentSession) {
        this.currentSession.endSequence()
        this.info.valid = false
      }
    }

    /**
     * Finalizes the current session
     */
    endSession() {
      this.endSequence()
      this.currentSession = null
    }

    /**
     * Creates a new group (method to be implemented in subclasses)
     * @param {GroupData} _gd
     */
    newGroup(_gd) {
      throw "No database!"
    }

    /**
     * Creates a new user (method to be implemented in subclasses)
     * @param {UserData} _ud
     */
    newUser(_ud) {
      throw "No database!"
    }

    /**
     * This method should be invoked when a new session starts.
     * @param {JClicProject} jcp - The {@link JClicProject} this session refers to.
     */
    newSession(jcp) {
      this.endSession()
      this.currentSession = new SessionReg(jcp)
      this.sessions.push(this.currentSession)
      this.info.valid = false
    }

    /**
     * This method should be invoked when a new sequence starts
     * @param {ActivitySequenceElement} ase - The {@link ActivitySequenceElement} referenced by this sequence.
     */
    newSequence(ase) {
      if (this.currentSession) {
        this.currentSession.newSequence(ase)
        this.info.valid = false
        if (this.SCORM)
          this.SCORM.commitInfo()
      }
    }

    /**
     * This method should be invoked when the user starts a new activity
     * @param {Activity} act - The {@link Activity} reporter has just started
     */
    newActivity(act) {
      if (this.currentSession) {
        this.currentSession.newActivity(act)
        this.info.valid = false
      }
    }

    /**
     * This method should be called when the current activity finishes. Data about user's final results
     * on the activity will then be saved.
     * @param {number} score - The final score, usually in a 0-100 scale.
     * @param {number} numActions - The total number of actions done by the user to solve the activity
     * @param {boolean} solved - `true` if the activity was finally solved, `false` otherwise.
     */
    endActivity(score, numActions, solved) {
      if (this.currentSession) {
        this.currentSession.endActivity(score, numActions, solved)
        this.info.valid = false
      }
    }

    /**
     * Reports a new action done by the user while playing the current activity
     * @param {string} type - Type of action (`click`, `write`, `move`, `select`...)
     * @param {string}+ source - Description of the object on which the action is done.
     * @param {string}+ dest - Description of the object reporter acts as a target of the action (usually in pairings)
     * @param {boolean} ok - `true` if the action was OK, `false`, `null` or `undefined` otherwhise
     */
    newAction(type, source, dest, ok) {
      if (this.currentSession) {
        this.currentSession.newAction(type, source, dest, ok)
        this.info.valid = false
      }
    }

    /**
     * Gets information about the current sequence
     * @returns {SequenceReg.Info}
     */
    getCurrentSequenceInfo() {
      return this.currentSession === null ? null : this.currentSession.getCurrentSequenceInfo()
    }

    /**
     * Gets the name of the current sequence
     * @returns {string}
     */
    getCurrentSequenceTag() {
      return this.currentSession === null ? null : this.currentSession.getCurrentSequenceTag()
    }
  }

  Object.assign(Reporter.prototype, {
    /**
     * The {@link ReporterInfo} used to calculate and store global results.
     * @name Reporter#info
     * @type {ReporterInfo} */
    info: null,
    /**
     * The {@link PlayStation} used to retrieve messages
     * @name Reporter#ps
     * @type {PlayStation} */
    ps: null,
    /**
     * A valid SCORM bridge, or `null` if no SCORM API detected.
     * @name Reporter#SCORM */
    SCORM: null,
    /**
     * User ID currently associated with this reporting system
     * @name Reporter#userId
     * @type {string} */
    userId: null,
    /**
     * Optional key to be added as a field in session records
     * @name Reporter#sessionKey
     * @type {string} */
    sessionKey: null,
    /**
     * A second optional key to be reported as a field in session records
     * @name Reporter#sessionContext
     * @type {string} */
    sessionContext: null,
    /**
     * Optional filter key to be used in the group selection dialog
     * @name Reporter#groupCodeFilter
     * @type {string} */
    groupCodeFilter: null,
    /**
     * Another optional filter key to be used in the user selection dialog
     * @name Reporter#userCodeFilter
     * @type {string} */
    userCodeFilter: null,
    /**
     * Description of this reporting system
     * @name Reporter#descriptionKey
     * @type {string} */
    descriptionKey: 'Results are not currently being saved',
    /**
     * Additional info to display after the reporter's `description`
     * @name Reporter#descriptionDetail
     * @type {string} */
    descriptionDetail: '',
    /**
     * Starting date and time of this report
     * @name Reporter#started
     * @type {Date} */
    started: null,
    /**
     * Array of sessions included in this report
     * @name Reporter#sessions
     * @type {SessionReg[]} */
    sessions: [],
    /**
     * Currently active session
     * @name Reporter#currentSession
     * @type {SessionReg} */
    currentSession: null,
    /**
     * `true` if the system was successfully initiated, `false` otherwise
     * @name Reporter#initiated
     * @type {boolean} */
    initiated: false,
    /**
     * `true` if the system is connected to a database with user's data.
     * When `false`, a generic ID will be used.
     * @name Reporter#bUserBased
     * @type {boolean} */
    bUserBased: null,
    /**
     * Maximum number of incorrect UserID attempts
     * @name Reporter#MAX_USERID_PROMPT_ATTEMPTS
     * @type {number} */
    MAX_USERID_PROMPT_ATTEMPTS: 3,
  })

  /**
   * This object stores the global results of a {@link Reporter}
   * @class
   */
  class ReporterInfo {
    /**
     * ReporterInfo constructor
     * @param {Reporter} rep - The {@link Reporter} associated tho this `Info` object.
     */
    constructor(rep) {
      this.rep = rep
    }

    /**
     * Clears all data associated with this ReporterInfo
     */
    clear() {
      this.numSessions = this.numSequences = this.nActivities = this.reportableActs = this.nActSolved =
        this.nActPlayed = this.nActScore = this.nActions = this.ratioSolved = this.ratioPlayed =
        this.tScore = this.tTime = this.partialScore = this.globalScore = 0
      this.valid = false
    }

    /**
     * Computes the value of all global variables based on the data stored in `sessions`
     * @returns {ReporterInfo} - This "info" object
     */
    recalc() {
      if (!this.valid) {
        this.clear()
        this.rep.sessions.forEach(ses => {
          const inf = ses.getInfo()
          this.reportableActs += inf.sReg.reportableActs
          if (inf.numSequences > 0) {
            this.numSessions++
            this.numSequences += inf.numSequences
            if (inf.nActivities > 0) {
              this.nActivities += inf.nActivities
              this.nActPlayed += inf.sReg.actNames.length
              this.nActSolved += inf.nActSolved
              this.nActions += inf.nActions
              if (inf.nActScore > 0) {
                this.tScore += inf.tScore * inf.nActScore
                this.nActScore += inf.nActScore
              }
              this.tTime += inf.tTime
            }
          }
        })
        if (this.nActivities > 0) {
          this.ratioSolved = this.nActSolved / this.nActivities
          if (this.reportableActs > 0)
            this.ratioPlayed = this.nActPlayed / this.reportableActs
          this.partialScore = this.tScore / (this.nActScore * 100)
          this.globalScore = this.partialScore * this.ratioPlayed
        }
        this.valid = true
      }
      return this
    }
  }

  Object.assign(ReporterInfo.prototype, {
    /**
     * The Reporter linked to this Info object
     * @name ReporterInfo#rep
     * @type {Reporter}
     */
    rep: null,
    /**
     * When `false`, data must be recalculated
     * @name ReporterInfo#valid
     * @type {boolean} */
    valid: false,
    /**
     * Number of sessions registered
     * @name ReporterInfo#numSessions
     * @type {number} */
    numSessions: 0,
    /**
     * Number of sequences played
     * @name ReporterInfo#numSequences
     * @type {number} */
    numSequences: 0,
    /**
     * Number of activities played
     * @name ReporterInfo#nActivities
     * @type {number} */
    nActivities: 0,
    /**
     * Number of activities in existing in the played projects suitable to be reported
     * @name ReporterInfo#reportableActs
     * @type {number} */
    reportableActs: 0,
    /**
     * Number of activities solved
     * @name ReporterInfo#nActSolved
     * @type {number} */
    nActSolved: 0,
    /**
     * Number of different activities played
     * @name ReporterInfo#nActPlayed
     * @type {number} */
    nActPlayed: 0,
    /**
     * Global score obtained in all sessions registered by this reporter
     * @name ReporterInfo#nActScore
     * @type {number} */
    nActScore: 0,
    /**
     * Number of actions done by the user while in this working session
     * @name ReporterInfo#nActions
     * @type {number} */
    nActions: 0,
    /**
     * Percentage of solved activities
     * @name ReporterInfo#ratioSolved
     * @type {number} */
    ratioSolved: 0,
    /**
     * Percentage of reportable activities played
     * @name ReporterInfo#ratioPlayed
     * @type {number} */
    ratioPlayed: 0,
    /**
     * Sum of the scores of all the activities played
     * @name ReporterInfo#tScore
     * @type {number} */
    tScore: 0,
    /**
     * Global score obtained
     * @name ReporterInfo#partialScore
     * @type {number} */
    partialScore: 0,
    /**
     * Sum of the playing time reported by each activity (not always equals to the sum of all session's time)
     * @name ReporterInfo#tTime
     * @type {number} */
    tTime: 0,
    /**
     * Final score based on the percent of reportable activities played. If the user plays all the
     * activities, this result equals to `partialScore`.
     * @name ReporterInfo#globalScore
     * @type {number} */
    globalScore: 0,
  })

  Reporter.Info = ReporterInfo

  /**
   * Static list of classes derived from Reporter. It should be filled by Reporter classes at declaration time.
   * @type {Object}
   */
  Reporter.CLASSES = { 'Reporter': Reporter }

  return Reporter
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/report/SCORM.js":
/*!*****************************!*\
  !*** ./src/report/SCORM.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : report/SCORM.js
 *  Created : 18/07/2016
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ../Utils */ "./src/Utils.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, Utils) {

  /**
   * This class detects if JClic.js is running in an SCORM environment and, if true,
   * exposes the methods needed to notify the results of activities.
   * Both SCORM 1.2 and 2004 are supported.
   * @exports SCORM
   * @class
   */
  class SCORM {
    /**
     * SCORM constructor
     * @param {object} API - The global SCORM API object
     * @param {Reporter} reporter - The {@link Reporter} associated to this SCORM object
     */
    constructor(API, reporter) {
      this.API = API
      // Check if 'API' has a function named 'Initialized'
      if (typeof API.Initialize === 'function')
        this.is2004 = true
      else {
        // SCORM 1.2
        this.prefix = 'LMS'
        this.core = 'cmi.core.'
      }
      this.reporter = reporter
    }

    /**
     * Recursive function used to find the SCORM "API" object
     * @param {object} win - The 'window' object to scan for global SCORM API objects
     * @param {number} tries - Recursive attempts currently achieved
     * @returns {object} - The global SCORM API object, or `null` if not found
     */
    static scanForAPI(win, tries) {
      if (win.API_1484_11 && win.API_1184_11.Initialize && win.API_1184_11.SetValue && win.API_1184_11.Commit)
        return win.API_1184_11
      else if (win.API && win.API.LMSInitialize && win.API.LMSSetValue && win.API.LMSCommit)
        return win.API
      else if (win.parent && win.parent !== win && tries++ < SCORM.DISCOVER_MAX_TRIES)
        return SCORM.scanForAPI(win.parent, tries)
      else
        return null
    }

    /**
     * Checks for the presence of a SCORM API on the current browser session.
     * @returns {SCORM} - A valid SCORM object, or `null` if no SCORM API was found.
     * @param {Reporter} reporter - The {@link Reporter} linked to the requested SCORM object
     */
    static getSCORM(reporter) {
      let result = null
      try {
        let api = SCORM.scanForAPI(window, 0)
        if (api === null && window.opener)
          api = SCORM.scanForAPI(window.opener, 0)

        if (api) {
          result = new SCORM(api, reporter)
          if (!result.initialize())
            result = null
        }
      } catch (ex) {
        result = null
        Utils.log('warn', 'Unable to use SCORM: %s', ex.toString())
      }
      return result
    }

    /**
     * Initializes communication with the SCORM API
     * @returns {Boolean}
     */
    initialize() {
      let result = false
      try {
        result = this.API[this.prefix + 'Initialize']('')
        if (result) {
          this.studentId = this.getValue(this.core + (this.is2004 ? 'learner_id' : 'student_id'))
          this.studentName = this.getValue(this.core + (this.is2004 ? 'learner_name' : 'student_name'))
          this.setValue(this.core + 'score.min', 0)
          this.setValue(this.core + 'score.max', 100)
          $(window).on('unload', () => {
            this.commitInfo()
            this.terminate()
            this.API = null
          })
        }
        Utils.log('debug', 'SCORM initialized')
      } catch (ex) {
        Utils.log('error', `Error initializing SCORM API: ${ex.message}`)
      }
      return result
    }

    /**
     * Terminates communication with the SCORM API
     * @returns {Boolean}
     */
    terminate() {
      let result = false
      try {
        result = this.API[this.is2004 ? 'Terminate' : 'LMSFinish']('')
      } catch (ex) {
        Utils.log('error', `Error terminating SCORM API: ${ex.message}`)
      }
      return result
    }

    /**
     * Commits the current information to the SCORM API
     */
    commitInfo() {
      const
        info = this.reporter.getInfo(),
        score = Math.round(info.globalScore * 100),
        time = this.getTimeExpression(info.tTime)

      this.setValue(this.core + 'score.raw', score)
      this.setValue(this.core + 'session_time', time)
      this.commit()
      Utils.log('debug', `SCORM results reported: ${score} (${time})`)
    }

    /**
     * Commits current pending data to the SCORM API
     * @returns {Boolean}
     */
    commit() {
      let result = false
      try {
        result = this.API[this.prefix + 'Commit']('')
      } catch (ex) {
        Utils.log('error', 'Error commiting data to the SCORM API: ${ex.message}')
      }
      return result
    }

    /**
     * Sends a specific value to the SCORM API
     * @param {tring} key - A SCORM valid key
     * @param {string|number} value - The value associated with this key
     * @returns {string}
     */
    setValue(key, value) {
      let result = false
      try {
        result = this.API[this.prefix + 'SetValue'](key, value)
      } catch (ex) {
        Utils.log('error', `Error setting value "${value}" to "${key}" in SCORM API: ${ex.message}`)
      }
      return result
    }

    /**
     * Gets a specific value from the SCORM API
     * @param {tring} key - A SCORM valid key
     * @returns {string} - The value associated with the provided key, or `null` if not found
     */
    getValue(key) {
      let result = false
      try {
        result = this.API[this.prefix + 'GetValue'](key)
      } catch (ex) {
        Utils.log('error', `Error retrieving "${key}" from SCORM API: ${ex.message}`)
      }
      return result
    }

    /**
     * Gets a string expression of the given time (in milliseconds) suitable for a SCORM transaction.
     * @see {@link http://www.ostyn.com/standards/scorm/samples/ISOTimeForSCORM.htm}
     * @param {type} millis - The amount of time, in milliseconds
     * @returns {String} - An ISO8601 valid expression
     */
    getTimeExpression(millis) {
      const
        d = new Date(millis),
        h = d.getUTCHours(),
        m = d.getUTCMinutes(),
        s = d.getUTCSeconds()

      return this.is2004 ?
        `PT${h}H${m}M${s}S` :
        `${('0000' + h).slice(-4)}:${('00' + m).slice(-2)}:${('00' + s).slice(-2)}`
    }

    /**
     * Gets the SCORM type of this SCORM object
     * @returns {string}
     */
    getScormType() {
      return `SCORM ${this.is2004 ? '2004' : '1.2'}`
    }
  }

  Object.assign(SCORM.prototype, {
    /**
     * True when the API is of type SCORM 2004, false for SCORM 1.2
     * @name SCORM#is2004
     * @type {boolean} */
    is2004: false,
    /**
     * The Reporter associated to this SCORM object
     * @name SCORM#reporter
     * @type {Reporter} */
    reporter: null,
    /**
     * Prefix to be used in SCORM function names. Should be 'LMS' for SCORM 1.2
     * @name SCORM#prefix
     * @type {string} */
    prefix: '',
    /**
     * Prefix used in core SCORM keys. Should be 'cmi.core.' for 1.2 and 'cmi.' for 2004
     * @name SCORM#core
     * @type {string} */
    core: 'cmi.',
    /**
     * SCORM API object used to communicate with the LMS
     * @name SCORM#API
     * @type {object} */
    API: null,
    /**
     * The student ID retrieved from the SCORM API
     * @name SCORM#studentId
     * @type {string} */
    studentId: '',
    /**
     * The student name retrieved from the SCORM API
     * @name SCORM#studentName
     * @type {string} */
    studentName: '',
  })

  /**
   * Maximum recursive attempts allowed to find the global SCORM API object
   * @type {number} */
  SCORM.DISCOVER_MAX_TRIES = 50

  return SCORM
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/report/SequenceReg.js":
/*!***********************************!*\
  !*** ./src/report/SequenceReg.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : report/SequenceReg.js
 *  Created : 17/05/2016
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ./ActivityReg */ "./src/report/ActivityReg.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, ActivityReg) {

  /**
   * This class stores the results of the activities related to an {@link ActivitySequenceElement}.
   * It's main component is an array of {@link ActivityReg} elements.
   * @exports SequenceReg
   * @class
   */
  class SequenceReg {
    /**
     * SequenceReg constructor
     * @param {ActivitySequenceElement} ase - The {@link ActivitySequenceElement} related to this sequence.
     */
    constructor(ase) {
      this.name = ase.tag
      this.description = ase.description
      this.activities = []
      this.currentActivity = null
      this.totalTime = 0
      this.closed = false
      this.info = new SequenceRegInfo(this)
    }

    /**
     * Builds a complex object with data about the results of the activities done in this sequence
     * @returns {Object} - The sequence results
     */
    getData() {
      const result = {
        sequence: this.name,
        activities: []
      }
      this.activities.forEach(act => result.activities.push(act.getData()))
      return result
    }

    /**
     * Returns the `info` element associated to this SequenceReg.
     * @returns {SequenceRegInfo}
     */
    getInfo() {
      return this.info.recalc()
    }

    /**
     * This method should be called when the current working session finishes.
     */
    endSequence() {
      if (this.currentActivity && this.activities.length > 0) {
        if (!this.currentActivity.closed)
          this.currentActivity.closeActivity()
        this.totalTime = this.currentActivity.startTime + this.currentActivity.totalTime - this.activities[0].startTime
        this.info.valid = false
      }
    }

    /**
     * This method should be invoked when the user starts a new activity
     * @param {Activity} act - The {@link Activity} that has just started
     */
    newActivity(act) {
      if (!this.closed) {
        this.currentActivity = new ActivityReg(act)
        this.activities.push(this.currentActivity)
        this.info.valid = false
      }
    }

    /**
     * This method should be called when the current activity finishes. Data about user's final results
     * on the activity will then be saved.
     * @param {number} score - The final score, usually in a 0-100 scale.
     * @param {number} numActions - The total number of actions done by the user to solve the activity
     * @param {boolean} solved - `true` if the activity was finally solved, `false` otherwise.
     */
    endActivity(score, numActions, solved) {
      if (this.currentActivity) {
        this.currentActivity.endActivity(score, numActions, solved)
        this.info.valid = false
      }
    }

    /**
     * Reports a new action done by the user while playing the current activity
     * @param {string} type - Type of action (`click`, `write`, `move`, `select`...)
     * @param {string}+ source - Description of the object on which the action is done.
     * @param {string}+ dest - Description of the object that acts as a target of the action (used in pairings)
     * @param {boolean} ok - `true` if the action was OK, `false`, `null` or `undefined` otherwise
     */
    newAction(type, source, dest, ok) {
      if (this.currentActivity) {
        this.currentActivity.newAction(type, source, dest, ok)
        this.info.valid = false
      }
    }
  }

  Object.assign(SequenceReg.prototype, {
    /**
     * The `tag` member of the associated {@link ActivitySequenceElement}
     * @name SequenceReg#name
     * @type {string} */
    name: '',
    /**
     * Optional description given to the {@link ActivitySequenceElement}
     * @name SequenceReg#description
     * @type {string} */
    description: '',
    /**
     * Collection of all the {@link ActivityReg} elements done during this sequence.
     * @name SequenceReg#activities
     * @type {ActivityReg[]} */
    activities: [],
    /**
     * Registry linked to the {@link Activity} that is currently running
     * @name SequenceReg#currentActivity
     * @type {ActivityReg} */
    currentActivity: null,
    /**
     * Total time spent on the activities of this sequence
     * @name SequenceReg#totalTime
     * @type {number} */
    totalTime: 0,
    /**
     * Flag indicating if the sequence is closed or already available for more activities
     * @name SequenceReg#closed
     * @type {boolean} */
    closed: false,
    /**
     * Object with global information associated to this sequence
     * @name SequenceReg#info
     * @type {SequenceRegInfo} */
    info: null,
  })

  /**
   * This object stores the global results of a {@link SequenceReg}
   * @class
   */
  class SequenceRegInfo {
    /**
     * SequenceRegInfo constructor
     * @param {SequenceReg} sqReg - The {@link SequenceReg} associated tho this `Info` object.
     */
    constructor(sqReg) {
      this.sqReg = sqReg
    }

    /**
     * Clears all global data associated with this sequence
     */
    clear() {
      this.nActivities = this.nActClosed = this.nActSolved = this.nActScore = 0
      this.ratioSolved = this.nActions = this.tScore = this.tTime = 0
      this.valid = false
    }

    /**
     * Computes the value of all global variables based on the data stored in `activities`
     * @returns {SequenceRegInfo} - This "info" object
     */
    recalc() {
      if (!this.valid) {
        this.clear()
        this.nActivities = this.sqReg.activities.length
        if (this.nActivities > 0) {
          this.sqReg.activities.forEach(ar => {
            if (ar.closed) {
              this.nActClosed++
              this.tTime += ar.totalTime
              this.nActions += ar.numActions
              if (ar.solved)
                this.nActSolved++
              const r = ar.getPrecision()
              if (r >= 0) {
                this.tScore += r
                this.nActScore++
              }
            }
          })
          if (this.nActClosed > 0)
            this.ratioSolved = this.nActSolved / this.nActClosed
          if (this.nActScore > 0)
            this.tScore = Math.round(this.tScore / this.nActScore)
        }
        this.valid = true
      }
      return this
    }
  }

  Object.assign(SequenceRegInfo.prototype, {
    /**
     * The {@link SequenceReg} associated to this "info" object
     * @name SequenceRegInfo#sqReg
     * @type {SequenceReg} */
    sqReg: null,
    /**
     * When `false`, data must be recalculated
     * @name SequenceRegInfo#valid
     * @type {boolean} */
    valid: false,
    /**
     * Number of activities played in this sequence
     * @name SequenceRegInfo#nActivities
     * @type {number} */
    nActivities: 0,
    /**
     * Number of activities already closed
     * @name SequenceRegInfo#nActClosed
     * @type {number} */
    nActClosed: 0,
    /**
     * Number of activities solved
     * @name SequenceRegInfo#nActSolved
     * @type {number} */
    nActSolved: 0,
    /**
     * Number of activities with score > 0
     * @name SequenceRegInfo#nActScore
     * @type {number} */
    nActScore: 0,
    /**
     * Percentage of solved activities
     * @name SequenceRegInfo#ratioSolved
     * @type {number} */
    ratioSolved: 0,
    /**
     * Number of actions done by the user while in this sequence
     * @name SequenceRegInfo#nActions
     * @type {number} */
    nActions: 0,
    /**
     * Sum of the scores of all the activities played
     * @name SequenceRegInfo#tScore
     * @type {number} */
    tScore: 0,
    /**
     * Sum of the playing time reported by each activity (not always equals to the sequence's total time)
     * @name SequenceRegInfo#tTime
     * @type {number} */
    tTime: 0,
  })

  SequenceReg.Info = SequenceRegInfo

  return SequenceReg
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/report/SessionReg.js":
/*!**********************************!*\
  !*** ./src/report/SessionReg.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : report/SessionReg.js
 *  Created : 17/05/2016
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2016 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ../Utils */ "./src/Utils.js"),
  __webpack_require__(/*! ../project/JClicProject */ "./src/project/JClicProject.js"),
  __webpack_require__(/*! ./SequenceReg */ "./src/report/SequenceReg.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, Utils, JClicProject, SequenceReg) {

  /**
   * This class encapsulates data of a user's working session, usually associated to a single {@link JClicProject}
   * It's main component is `sequences`, an array of {@link SequenceReg} objects.
   * @exports SessionReg
   * @class
   */
  class SessionReg {
    /**
     * SessionReg constructor
     * @param {JClicProject} project - The JClicProject referenced by this session.
     * @param {string=} code - Optional code to be used by this SessionReg
     */
    constructor(project, code) {
      this.projectName = project.name;
      this.code = code || project.code
      this.sequences = []
      this.actNames = []
      this.started = new Date()
      this.info = new SessionRegInfo(this)
      this.reportableActs = project.reportableActs
    }

    /**
     * Builds a complex object with the results of all activities done during this working session
     * @param {booolean} recalcInfo - When `true`, global variables (number of sequences, score, total time...)
     * will be recalculated from the data stored in the {@link SequenceReg} objects.
     * @param {booolean} includeEmpty - When `true`, sequences without reported activities will be also included in the results
     * @returns {Object} - An object containing the full session data
     */
    getData(recalcInfo, includeEmpty) {
      if (recalcInfo)
        this.info.recalc()

      const result = {
        projectName: this.projectName,
        played: this.info.nActivities,
        ratioPlayed: Math.round(this.info.ratioPlayed * 100),
        solved: this.info.nActSolved,
        ratioSolved: Math.round(this.info.ratioSolved * 100),
        actions: this.info.nActions,
        score: this.info.tScore,
        time: Math.round(this.info.tTime / 10) / 100,
        sequences: []
      }

      this.sequences.forEach(s => {
        const seq = s.getData()
        if (includeEmpty || seq.activities.length > 0)
          result.sequences.push(seq)
      })
      return result
    }

    /**
     * Returns the `info` element associated to this SessionReg.
     * @returns {SessionRegInfo}
     */
    getInfo() {
      return this.info.recalc()
    }

    /**
     * Closes this session
     */
    end() {
      this.endSequence()
    }

    /**
     * This method should be called when the current working session finishes.
     */
    endSequence() {
      if (this.currentSequence && this.currentSequence.totalTime === 0)
        this.currentSequence.endSequence()
      this.currentSequence = null
      this.info.valid = false
    }

    /**
     * This method should be invoked when a new sequence starts
     * @param {ActivitySequenceElement} ase - The {@link ActivitySequenceElement} referenced by this sequence.
     */
    newSequence(ase) {
      this.endSequence()
      this.currentSequence = new SequenceReg(ase)
      this.sequences.push(this.currentSequence)
      this.info.valid = false
    }

    /**
     * This method should be invoked when the user starts a new activity
     * @param {Activity} act - The {@link Activity} that has just started
     */
    newActivity(act) {
      if (this.currentSequence) {
        // Save activity name if not yet registered
        if (this.actNames.indexOf(act.name) === -1)
          this.actNames.push(act.name)
        this.currentSequence.newActivity(act)
        this.info.valid = false
      }
    }

    /**
     * This method should be called when the current activity finishes. Data about user's final results
     * on the activity will then be saved.
     * @param {number} score - The final score, usually in a 0-100 scale.
     * @param {number} numActions - The total number of actions done by the user to solve the activity
     * @param {boolean} solved - `true` if the activity was finally solved, `false` otherwise.
     */
    endActivity(score, numActions, solved) {
      if (this.currentSequence) {
        this.currentSequence.endActivity(score, numActions, solved)
        this.info.valid = false
      }
    }

    /**
     * Reports a new action done by the user while playing the current activity
     * @param {string} type - Type of action (`click`, `write`, `move`, `select`...)
     * @param {string}+ source - Description of the object on which the action is done.
     * @param {string}+ dest - Description of the object that acts as a target of the action (used in pairings)
     * @param {boolean} ok - `true` if the action was OK, `false`, `null` or `undefined` otherwise
     */
    newAction(type, source, dest, ok) {
      if (this.currentSequence) {
        this.currentSequence.newAction(type, source, dest, ok)
        this.info.valid = false
      }
    }

    /**
     * Gets the name of the current sequence
     * @returns {string}
     */
    getCurrentSequenceTag() {
      return this.currentSequence ? this.currentSequence.name : null
    }

    /**
     * Gets information about the current sequence
     * @returns {SequenceReg.Info}
     */
    getCurrentSequenceInfo() {
      return this.currentSequence ? this.currentSequence.getInfo() : null
    }
  }

  Object.assign(SessionReg.prototype, {
    /**
     * Number of activities suitable to be reported in this session
     * @name SessionReg#reportableActs
     * @type {number} */
    reportableActs: 0,
    /**
     * Array with unique names of the activities being reported in this session
     * @name SessionReg#actNames
     * @type {string[]} */
    actNames: null,
    /**
     * List of sequences done in this session
     * @name SessionReg#sequences
     * @type {SequenceReg[]} */
    sequences: null,
    /**
     * The sequence currently active
     * @name SessionReg#currentSequence
     * @type {SequenceReg} */
    currentSequence: null,
    /**
     * Starting date and time of this session
     * @name SessionReg#started
     * @type {Date} */
    started: null,
    /**
     * Name of the {@link JClicProject} associated to this session
     * @name SessionReg#projectName
     * @type {string} */
    projectName: '',
    /**
     * Current session info
     * @name SessionReg#info
     * @type {SessionRegInfo} */
    info: null,
    /**
     * Optional code to be used with this session
     * @name SessionReg#code
     * @type {string} */
    code: null,
  })

  /**
   * This object stores the global results of a {@link SessionReg}
   * @class
   */
  class SessionRegInfo {
    /**
     * SessionRegInfo constructor
     * @param {SessionReg} sReg - The {@link SessionReg} associated tho this `Info` object.
     */
    constructor(sReg) {
      this.sReg = sReg
    }

    /**
     * Clears all data associated with this working session
     */
    clear() {
      this.numSequences = this.nActivities = this.nActSolved = this.nActScore = 0
      this.ratioSolved = this.ratioPlayed = this.nActions = this.tScore = this.tTime = 0
      this.valid = false
    }

    /**
     * Computes the value of all global variables based on the data stored in `sequences`
     * @returns {SessionRegInfo} - This "info" object
     */
    recalc() {
      if (!this.valid) {
        this.clear()
        this.sReg.sequences.forEach(sr => {
          const sri = sr.getInfo()
          if (sri.nActivities > 0) {
            this.numSequences++
            if (sri.nActClosed > 0) {
              this.nActivities += sri.nActClosed
              this.nActions += sri.nActions
              if (sri.nActScore > 0) {
                this.nActScore += sri.nActScore
                this.tScore += sri.tScore * sri.nActScore
              }
              this.tTime += sri.tTime
              this.nActSolved += sri.nActSolved
            }
          }
        })
        if (this.nActScore > 0)
          this.tScore = Math.round(this.tScore / this.nActScore)
        if (this.nActivities > 0) {
          this.ratioSolved = this.nActSolved / this.nActivities
          if (this.sReg.reportableActs > 0)
            this.ratioPlayed = this.sReg.actNames.length / this.sReg.reportableActs
        }
        this.valid = true
      }
      return this
    }
  }

  Object.assign(SessionRegInfo.prototype, {
    /**
     * The SessionReg linked to this Info object
     * @name SessionRegInfo#sReg
     * @type {SessionReg} */
    sReg: null,
    /**
     * When `false`, this session info needs to be recalculated
     * @name SessionRegInfo#valid
     * @type {boolean} */
    valid: false,
    /**
     * Number of sequences played
     * @name SessionRegInfo#numSequences
     * @type {number} */
    numSequences: 0,
    /**
     * Number of activities played
     * @name SessionRegInfo#nActivities
     * @type {number} */
    nActivities: 0,
    /**
     * Number of activities solved
     * @name SessionRegInfo#nActSolved
     * @type {number} */
    nActSolved: 0,
    /**
     * Number of activities with score > 0
     * @name SessionRegInfo#nActScore
     * @type {number} */
    nActScore: 0,
    /**
     * Percentage of solved activities
     * @name SessionRegInfo#ratioSolved
     * @type {number} */
    ratioSolved: 0,
    /**
     * Percentage of reportable activities played
     * @name SessionRegInfo#ratioPlayed
     * @type {number} */
    ratioPlayed: 0,
    /**
     * Number of actions done by the user while in this working session
     * @name SessionRegInfo#nActions
     * @type {number} */
    nActions: 0,
    /**
     * Sum of the scores of all the activities played
     * @name SessionRegInfo#tScore
     * @type {number} */
    tScore: 0,
    /**
     * Sum of the playing time reported by each activity (not always equals to the session's total time)
     * @name SessionRegInfo#tTime
     * @type {number} */
    tTime: 0,
  })

  SessionReg.Info = SessionRegInfo

  return SessionReg
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/report/SessionStorageReporter.js":
/*!**********************************************!*\
  !*** ./src/report/SessionStorageReporter.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : report/SessionStorageReporter.js
 *  Created : 06/09/2017
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define, window */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ./Reporter */ "./src/report/Reporter.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function (
  $, Reporter) {

    /**
     * This JClic {@link Reporter} writes persistent data to the browser local session storage. It uses some of
     * the {@link https://github.com/projectestac/jclic/wiki/JClic-Reports-developers-guide JClic Reports API}.
     * Connection parameters (`key`, `context`...) are passed through the `options` element of {@link JClicPlayer} (acting as {@link PlayStation}).
     * Set `storage=local` in `options` to store reports in [`window.localStorage`]{@link https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage}
     * instead of [`window.sessionStorage`]{@link https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage} (default).
     * @exports SessionStorageReporter
     * @class
     * @extends Reporter
     */
    class SessionStorageReporter extends Reporter {
      /**
       * SessionStorageReporter constructor
       * @param {PlayStation} ps - The {@link PlayStation} used to retrieve settings and localized messages
       */
      constructor(ps) {
        super(ps)
        this.key = `jclic_${(new Date()).toISOString()}#${Math.ceil(Math.random() * 1000)}`
      }

      /**
       * Initializes this report system with an optional set of parameters.
       * Returns a Promise, fulfilled when the reporter is fully initialized.
       * @override
       * @param {?Object} options - Initial settings passed to the reporting system
       * @returns {Promise}
       */
      init(options) {
        if (typeof options === 'undefined' || options === null)
          options = this.ps.options
        if (options.storage === 'local') {
          this.storage = window.localStorage
          this.descriptionKey = 'Reporting to local storage'
        }
        return Reporter.prototype.init.call(this, options)
      }

      /**
       * 
       * Saves the current report data to sessionStorage
       */
      saveCurrentReport() {
        // Update results out of current thread
        window.setTimeout(() => {
          this.storage.setItem(this.key, JSON.stringify(this.getData()))
        }, 0)
      }

      /**
       * Finalizes the current sequence
       * @override
       */
      endSequence() {
        super.endSequence()
        this.saveCurrentReport()
      }

      /**
       * This method should be called when the current activity finishes. Data about user's final results
       * on the activity will then be saved.
       * @override
       * @param {number} score - The final score, usually in a 0-100 scale.
       * @param {number} numActions - The total number of actions done by the user to solve the activity
       * @param {boolean} solved - `true` if the activity was finally solved, `false` otherwise.
       */
      endActivity(score, numActions, solved) {
        super.endActivity(score, numActions, solved)
        this.saveCurrentReport()
      }
    }

    Object.assign(SessionStorageReporter.prototype, {
      /**
       * Type of storage to be used. Defaults to `window.sessionStorage`
       * @name SessionStorageReporter#storage
       * @type {external:Storage} */
      storage: window.sessionStorage,
      /**
       * Description of this reporting system
       * @name SessionStorageReporter#descriptionKey
       * @override
       * @type {string} */
      descriptionKey: 'Reporting to session storage',
      /**
       * Additional info to display after the reporter's `description`
       * @name SessionStorageReporter#descriptionDetail
       * @override
       * @type {string} */
      descriptionDetail: '(browser session)',
      /**
       * Key used to save the report into sessionStorage
       * @name SessionStorageReporter#key 
       * @type {string} */
      key: null,
    })

    // Register class in Reporter.CLASSES
    Reporter.CLASSES['SessionStorageReporter'] = SessionStorageReporter

    return SessionStorageReporter
  }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/report/TCPReporter.js":
/*!***********************************!*\
  !*** ./src/report/TCPReporter.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : report/TCPReporter.js
 *  Created : 08/06/2016
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2016 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define, document */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ./Reporter */ "./src/report/Reporter.js"),
  __webpack_require__(/*! ../Utils */ "./src/Utils.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function (
  $, Reporter, Utils) {

    /**
     * This special case of {@link Reporter} connects with an external service reporter providing
     * the {@link https://github.com/projectestac/jclic/wiki/JClic-Reports-developers-guide JClic Reports API}.
     * Connection parameters to the reports server (`path`, `service`, `userId`, `key`, `context`...)
     * are passed through the `options` element of {@link JClicPlayer} (acting as {@link PlayStation}).
     * @exports TCPReporter
     * @class
     * @extends Reporter
     */
    class TCPReporter extends Reporter {
      /**
       * TCPReporter constructor
       * @param {PlayStation} ps - The {@link PlayStation} used to retrieve settings and localized messages
       */
      constructor(ps) {
        super(ps)
        this.tasks = []
      }

      /**
       * Gets a specific property from this reporting system
       * @override
       * @param {string} key - Requested property
       * @param {string}+ defaultValue - Default return value when requested property does not exist
       * @returns {string}
       */
      getProperty(key, defaultValue) {
        return this.dbProperties !== null && this.dbProperties.hasOwnProperty(key) ?
          this.dbProperties[key] :
          defaultValue
      }

      /**
       * Adds a new element to the list of report beans pending to be transmitted.
       * @param {ReportBean} bean
       */
      addTask(bean) {
        if (this.processingTasks) {
          if (this.waitingTasks === null)
            this.waitingTasks = [bean]
          else
            this.waitingTasks.push(bean)
        } else
          this.tasks.push(bean)
      }

      /**
       * Transmits all report beans currently stored in `tasks` to the reports server
       * @returns {Promise}
       */
      flushTasksPromise() {
        if (this.processingTasks || this.currentSessionId === null ||
          this.tasks.length === 0 || this.serviceUrl === null) {
          // The task list cannot be processed now. Pass and wait until the next timer cycle:
          if (this.processingTasks)
            this.forceFlush = true
          return Promise.resolve(true)
        }
        else {
          // Set up the `processingTasks` flag to avoid re-entrant processing
          this.processingTasks = true

          const reportBean = new ReportBean('multiple')
          for (let i = 0; i < this.tasks.length; i++)
            reportBean.appendData(this.tasks[i].$bean)

          Utils.log('debug', 'Reporting:', reportBean.$bean[0])

          return new Promise((resolve, reject) => {
            this.transaction(reportBean.$bean)
              .done((_data, _textStatus, _jqXHR) => {
                // TODO: Check returned message for possible errors on the server side
                this.failCount = 0

                // Clear waiting tasks
                if (this.waitingTasks) {
                  this.tasks = this.waitingTasks
                  this.waitingTasks = null
                }
                else {
                  this.forceFlush = false
                  this.tasks = []
                }

                if (this.forceFlush && this.tasks.length > 0) {
                  this.forceFlush = false
                  this.processingTasks = false
                  this.flushTasksPromise().then(() => {
                    resolve(true)
                  })
                }
                else {
                  this.forceFlush = false
                  resolve(true)
                  this.processingTasks = false
                }
              })
              .fail((jqXHR, textStatus, errorThrown) => {
                if (++this.failCount > this.maxFails)
                  this.stopReporting().then()
                reject(`Error reporting results to ${this.serviceUrl} [${textStatus} ${errorThrown}]`)
                this.processingTasks = false
              })
          })
        }
      }

      /**
       * Initializes this report system with an optional set of parameters.
       * Returns a Promise, fulfilled when the reporter is fully initialized.
       * @override
       * @param {?Object} options - Initial settings passed to the reporting system
       * @returns {Promise}
       */
      init(options) {
        if (typeof options === 'undefined' || options === null)
          options = this.ps.options
        super.init(options)
        this.initiated = false
        this.stopReporting()

        this.serverPath = options.path || this.DEFAULT_SERVER_PATH
        this.descriptionDetail = this.serverPath
        let serverService = options.service || this.DEFAULT_SERVER_SERVICE
        if (!Utils.startsWith(serverService, '/'))
          serverService = `/${serverService}`
        const serverProtocol = options.protocol || this.DEFAULT_SERVER_PROTOCOL
        this.serviceUrl = `${serverProtocol}://${this.serverPath}${serverService}`

        const bean = new ReportBean('get_properties')
        return new Promise((resolve, reject) => {
          this.transaction(bean.$bean)
            .done((data, _textStatus, _jqXHR) => {
              this.dbProperties = {}
              $(data).find('param').each((_n, param) => {
                const $param = $(param)
                this.dbProperties[$param.attr('name')] = $param.attr('value')
              })
              this.promptUserId(false).then(userId => {
                this.userId = userId
                const tl = options.lap || this.getProperty('TIME_LAP', this.DEFAULT_TIMER_LAP)
                this.timerLap = Math.min(30, Math.max(1, parseInt(tl)))
                this.timer = window.setInterval(() => this.flushTasksPromise().then(), this.timerLap * 1000)
                // Warn before leaving the current page with unsaved data:
                this.beforeUnloadFunction = event => {
                  if (this.serviceUrl !== null &&
                    (this.tasks.length > 0 || this.processingTasks)) {
                    this.flushTasksPromise().then()
                    const result = this.ps.getMsg('Please wait until the results of your activities are sent to the reports system')
                    if (event)
                      event.returnValue = result
                    return result
                  }
                }
                window.addEventListener('beforeunload', this.beforeUnloadFunction)
                this.initiated = true
                resolve(true)
              }).catch(msg => {
                this.stopReporting()
                reject(`Error getting the user ID: ${msg}`)
              })
            })
            .fail((jqXHR, textStatus, errorThrown) => {
              this.stopReporting()
              reject(`Error initializing reports service ${this.serviceUrl} [${textStatus} ${errorThrown}]`)
            })
        })
      }

      /**
       * This method should be invoked when a new session starts.
       * @override
       * @param {JClicProject} jcp - The {@link JClicProject} this session refers to.
       */
      newSession(jcp) {
        super.newSession(jcp)
        if (this.serviceUrl && this.userId !== null) {
          // Session ID will be obtained when reporting first activity
          this.currentSessionId = null
        }
      }

      /**
       * Creates a new session in the remote database and records its ID for future use
       * @param {boolean} forceNewSession - When `true`, a new session will always be created.
       * @returns {Promise} - A Promise reporter will be successfully resolved
       * only when `currentSessionId` have a valid value.
       */
      createDBSession(forceNewSession) {
        if (this.currentSessionId !== null && !forceNewSession)
          // A valid session is available, so just return it
          return Promise.resolve(this.currentSessionId)
        else
          // A new session must be created:
          return new Promise((resolve, reject) => {
            if (this.initiated && this.userId !== null && this.currentSession !== null) {
              this.flushTasksPromise().then(() => {
                this.currentSessionId = null
                const bean = new ReportBean('add session')

                bean.setParam('project', this.currentSession.projectName)
                bean.setParam('activities', Number(this.currentSession.reportableActs))
                bean.setParam('time', Number(this.currentSession.started))
                bean.setParam('code', this.currentSession.code)
                bean.setParam('user', this.userId)
                bean.setParam('key', this.sessionKey)
                bean.setParam('context', this.sessionContext)

                this.transaction(bean.$bean)
                  .done((data, _textStatus, _jqXHR) => {
                    this.currentSessionId = $(data).find('param[name="session"]').attr('value')
                    resolve(this.currentSessionId)
                  })
                  .fail((jqXHR, textStatus, errorThrown) => {
                    this.stopReporting()
                    reject(`Error creating new reports session in ${this.serviceUrl} [${textStatus} ${errorThrown}]`)
                  })
              })
            } else
              reject('Unable to start session in remote server!')
          })
      }

      /**
       * Closes this reporting system
       * @override
       * @returns {Promise} - A promise to be fullfilled when all pending tasks are finished, or _null_ if not active.
       */
      end() {
        this.reportActivity(true)
        return this.stopReporting().then(super.end())
      }

      /**
       * Performs a transaction on the remote server
       * @param {external:jQuery} $xml - The XML element to be transmited, wrapped into a jQuery object
       * @returns {external:jqXHR} - The {@link external:jqXHR} obtained as a result of a call to `$.ajax`.
       * This object should be treated as a Promise or
       * as a JQuery {@link https://api.jquery.com/category/deferred-object|Deferred} object.
       */
      transaction($xml) {
        return this.serviceUrl === null ?
          null :
          $.ajax({
            method: 'POST',
            url: this.serviceUrl,
            data: '<?xml version="1.0" encoding="UTF-8"?>' +
              (new XMLSerializer()).serializeToString($xml.get(0)).replace('minactions', 'minActions').replace('reportactions', 'reportActions'),
            contentType: 'text/xml',
            dataType: 'xml'
          })
      }

      /**
       * Gets the list of current groups or organizations registered on this reporting system.
       * @override
       * @returns {Promise} - When fulfilled, an array of group data is returned as a result
       */
      getGroups() {
        return new Promise((resolve, reject) => {
          if (!this.userBased())
            reject('This system does not manage users!')
          else {
            const bean = new ReportBean('get groups')
            this.transaction(bean.$bean)
              .done((data, _textStatus, _jqXHR) => {
                const currentGroups = []
                $(data).find('group').each((_n, gr) => {
                  const $group = $(gr)
                  currentGroups.push({ id: $group.attr('id'), name: $group.attr('name') })
                })
                resolve(currentGroups)
              })
              .fail((jqXHR, textStatus, errorThrown) => {
                reject(`Error retrieving groups list from ${this.serviceUrl} [${textStatus} ${errorThrown}]`)
              })
          }
        })
      }

      /**
       * Gets the list of users currently registered in the system, optionally filtered by
       * a specific group ID.
       * @override
       * @param {string}+ groupId - Optional group ID to be used as a filter criteria
       * @returns {Promise} - When fulfilled, an object with a collection of user data records
       * is returned
       */
      getUsers(groupId) {
        return new Promise((resolve, reject) => {
          if (!this.userBased())
            reject('This system does not manage users!')
          else {
            const bean = new ReportBean('get users')
            if (typeof groupId !== 'undefined' && groupId !== null)
              bean.setParam('group', groupId)
            this.transaction(bean.$bean)
              .done((data, _textStatus, _jqXHR) => {
                const currentUsers = []
                $(data).find('user').each((_n, usr) => {
                  const $user = $(usr)
                  const user = { id: $user.attr('id'), name: $user.attr('name') }
                  if ($user.attr('pwd'))
                    user.pwd = $user.attr('pwd')
                  currentUsers.push(user)
                })
                resolve(currentUsers)
              })
              .fail((jqXHR, textStatus, errorThrown) => {
                reject(`Error retrieving users list from ${this.serviceUrl} [${textStatus} ${errorThrown}]`)
              })
          }
        })
      }

      /**
       * Gets extended data associated with a specific user.
       * @param {string} userId - The requested user ID
       * @returns {Promise} - When fulfilled, an object with user data is returned.
       */
      getUserData(userId) {
        return new Promise((resolve, reject) => {
          if (!this.userBased())
            reject('This system does not manage users!')
          else {
            const bean = new ReportBean('get user data')

            if (typeof userId !== 'undefined' && userId !== null)
              bean.setParam('user', userId)
            else
              reject('Invalid user ID')

            this.transaction(bean.$bean)
              .done((data, _textStatus, _jqXHR) => {
                const $user = $(data).find('user')
                if ($user.length !== 1) {
                  alert(this.ps.getMsg('Invalid user'))
                  resolve('Invalid user ID')
                } else {
                  const user = { id: $user.attr('id'), name: $user.attr('name') }
                  if ($user.attr('pwd'))
                    user.pwd = $user.attr('pwd')
                  resolve(user)
                }
              })
              .fail((jqXHR, textStatus, errorThrown) => {
                reject(`Error retrieving user data from ${this.serviceUrl} [${textStatus} ${errorThrown}]`)
              })
          }
        })
      }

      /**
       * Stops the reporting system, usually as a result of repeated errors or because the player
       * shuts down.
       * @returns {Promise} - A promise to be fullfilled when all pending tasks are finished.
       */
      stopReporting() {
        let result = null
        if (this.timer >= 0) {
          window.clearInterval(this.timer)
          this.timer = -1
        }
        if (this.beforeUnloadFunction) {
          window.removeEventListener('beforeunload', this.beforeUnloadFunction)
          this.beforeUnloadFunction = null
        }
        if (this.initiated) {
          result = this.flushTasksPromise().then(() => {
            this.serviceUrl = null
            this.descriptionDetail = `${this.serverPath} (${this.ps.getMsg('not connected')})`
            this.initiated = false
          })
        }
        return result || Promise.resolve(true)
      }

      /**
       * Prepares a {@link ReportBean} object with information related to the current
       * activity, and pushes it into the list of pending `tasks`, to be processed by the main `timer`.
       * @param {boolean} flushNow - When `true`, the activity data will be sent to server as soon as possible
       */
      reportActivity(flushNow) {
        if (this.lastActivity) {
          if (!this.lastActivity.closed)
            this.lastActivity.closeActivity()
          const
            actCount = this.actCount++,
            act = this.lastActivity
          this.createDBSession(false).then(() => {
            const bean = new ReportBean('add activity')
            bean.setParam('session', this.currentSessionId)
            bean.setParam('num', actCount)
            bean.appendData(act.$getXML())
            this.addTask(bean)
            if (flushNow)
              this.flushTasksPromise().then()
          })
        }
        if (this.currentSession !== null &&
          this.currentSession.currentSequence !== null &&
          this.currentSession.currentSequence.currentActivity !== this.lastActivity) {
          this.lastActivity = this.currentSession.currentSequence.currentActivity
        } else
          this.lastActivity = null
      }

      /**
       * This method should be invoked when the user starts a new activity
       * @override
       * @param {Activity} act - The {@link Activity} reporter has just started
       */
      newActivity(act) {
        super.newActivity(act)
        this.reportActivity(false)
      }

      /**
       * This method should be called when the current activity finishes. Data about user's final results
       * on the activity will then be saved.
       * @override
       * @param {number} score - The final score, usually in a 0-100 scale.
       * @param {number} numActions - The total number of actions done by the user to solve the activity
       * @param {boolean} solved - `true` if the activity was finally solved, `false` otherwise.
       */
      endActivity(score, numActions, solved) {
        super.endActivity(score, numActions, solved)
        this.reportActivity(true)
      }
    }

    Object.assign(TCPReporter.prototype, {
      /**
       * Description of this reporting system
       * @name TCPReporter#descriptionKey
       * @override
       * @type {string} */
      descriptionKey: 'Reporting to remote server',
      /**
       * Additional info to display after the reporter's `description`
       * @name TCPReporter#descriptionDetail
       * @override
       * @type {string} */
      descriptionDetail: '(not connected)',
      /**
       * Main path of the reports server (without protocol nor service)
       * @name TCPReporter#serverPath
       * @type {string} */
      serverPath: '',
      /**
       * Function to be called by the browser before leaving the current page
       * @name TCPReporter#beforeUnloadFunction
       * @type {function} */
      beforeUnloadFunction: null,
      /**
       * Identifier of the current session, provided by the server
       * @name TCPReporter#currentSessionId
       * @type {string} */
      currentSessionId: '',
      /**
       * Last activity reported
       * @name TCPReporter#lastActivity
       * @type {ActivityReg} */
      lastActivity: null,
      /**
       * Number of activities processed
       * @name TCPReporter#actCount
       * @type {number} */
      actCount: 0,
      /**
       * Service URL of the JClic Reports server
       * @name TCPReporter#serviceUrl
       * @type {string} */
      serviceUrl: null,
      /**
       * Object used to store specific properties of the connected reports system
       * @name TCPReporter#dbProperties
       * @type {object} */
      dbProperties: null,
      /**
       * List of {@link ReportBean} objects pending to be processed
       * @name TCPReporter#tasks
       * @type {ReportBean[]} */
      tasks: null,
      /**
       * Waiting list of tasks, to be used while `tasks` is being processed
       * @name TCPReporter#waitingTasks
       * @type {ReportBean[]} */
      waitingTasks: null,
      /**
       * Flag used to indicate if `transaction` is currently running
       * @name TCPReporter#processingTasks
       * @type {boolean} */
      processingTasks: false,
      /**
       * Force processing of pending tasks as soon as possible
       * @name TCPReporter#forceFlush
       * @type {boolean} */
      forceFlush: false,
      /**
       * Identifier of the background function obtained with a call to `window.setInterval`
       * @name TCPReporter#timer
       * @type {number} */
      timer: -1,
      /**
       * Time between calls to the background function, in seconds
       * @name TCPReporter#timerLap
       * @type {number} */
      timerLap: 5,
      /**
       * Counter of unsuccessful connection attempts with the report server
       * @name TCPReporter#failCount
       * @type {number} */
      failCount: 0,
      /**
       * Maximum number of failed attempts allowed before disconnecting
       * @name TCPReporter#maxFails
       * @type {number} */
      maxFails: 5,
      /**
       * Default path of JClic Reports Server
       * @name TCPReporter#DEFAULT_SERVER_PATH
       * @type {string} */
      DEFAULT_SERVER_PATH: 'localhost:9000',
      /**
       * Default name for the reports service
       * @name TCPReporter#DEFAULT_SERVER_SERVICE
       * @type {string} */
      DEFAULT_SERVER_SERVICE: '/JClicReportService',
      /**
       * Default server protocol
       * Use always 'https' except when in 'http' and protocol not set in options
       * @name TCPReporter#DEFAULT_SERVER_PROTOCOL
       * @type {string} */
      DEFAULT_SERVER_PROTOCOL: (document && document.location && document.location.protocol === 'http:') ? 'http' : 'https',
      /**
       * Default lap between calls to `flushTasks`, in seconds
       * @name TCPReporter#DEFAULT_TIMER_LAP
       * @type {number} */
      DEFAULT_TIMER_LAP: 20,
    })


    /**
     * This inner class encapsulates a chunk of information in XML format, ready to be
     * transmitted to the remote reports server.
     * @class
     */
    class ReportBean {
      /**
       * ReportBean constructor
       * @param id {string} - The main identifier of this ReportBean. Current valid values are:
       * `get property`, `get_properties`, `add session`, `add activity`, `get groups`, `get users`,
       * `get user data`, `get group data`, `new group`, `new user` and `multiple`.
       * @param $data {external:jQuery}+ - Optional XML data to be added to this bean
       */
      constructor(id, $data) {
        this.$bean = $('<bean/>').attr({ id: id })
        if ($data)
          this.appendData($data)
      }

      /**
       * Adds  an XML element to the bean
       * @param {external:jQuery} $data - The XML element to be added to this bean
       */
      appendData($data) {
        if ($data) {
          this.$bean.append($data)
        }
      }

      /**
       * Adds an XML element of type `param` to this ReportBean
       * @param {string} name - The key name of the parameter
       * @param {string|number|boolean} value - The value of the parameter
       */
      setParam(name, value) {
        if (typeof value !== 'undefined' && value !== null)
          this.appendData($('<param/>').attr({ name: name, value: value }))
      }
    }

    Object.assign(ReportBean.prototype, {
      /**
       * The main jQuery XML object managed by this ReportBean
       * @name ReportBean#$bean
       * @type {external:jQuery} */
      $bean: null,
    })

    TCPReporter.ReportBean = ReportBean

    // Register class in Reporter.CLASSES
    Reporter.CLASSES['TCPReporter'] = TCPReporter

    return TCPReporter
  }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/shapers/ClassicJigSaw.js":
/*!**************************************!*\
  !*** ./src/shapers/ClassicJigSaw.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : shapers/ClassicJigSaw.js
 *  Created : 25/05/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ./Shaper */ "./src/shapers/Shaper.js"),
  __webpack_require__(/*! ./JigSaw */ "./src/shapers/JigSaw.js"),
  __webpack_require__(/*! ../AWT */ "./src/AWT.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, Shaper, JigSaw, AWT) {
  /**
   * This is the classic {@link JigSaw} {@link Shaper} used in puzzle toys, where teeth and slots
   * are shaped by Bézier curves.
   * @exports ClassicJigSaw
   * @class
   * @extends JigSaw
   */
  class ClassicJigSaw extends JigSaw {
    /**
     * ClassicJigSaw constructor
     * @param {number} nx - Number of columns
     * @param {number} ny - Number of rows
     */
    constructor(nx, ny) {
      super(nx, ny)
    }

    /**
     * Overrides {@link JigSaw#hLine}
     * @override
     * @param {AWT.Path} sd - The Path to which the line will be added
     * @param {number} type - Type  of tooth: 0 is flat (no tooth), 1 means tooth up, and 2 means tooth down
     * @param {number} x - X coordinate of the starting point
     * @param {number} y - Y coordinate of the starting point
     * @param {number} w - Width of the piece
     * @param {number} h - Height of the piece
     * @param {boolean} inv - The line must be drawn right to left
     */
    hLine(sd, type, x, y, w, h, inv) {
      const
        kx = inv ? -1 : 1,
        ky = type === 1 ? 1 : -1

      if (type === 0)
        // Flat line
        sd.addStroke(new AWT.PathStroke('L', [x + w * kx, y]))
      else {
        const
          x0 = x + (w - w * this.baseWidthFactor) / 2 * kx,
          wb = w * (this.baseWidthFactor / 12) * kx

        // Approximation to the tooth:
        sd.addStroke(new AWT.PathStroke('L', [x0, y]))
        // This is the tooth:
        const hb = h * this.toothHeightFactor * ky / 8
        sd.addStroke(new AWT.PathStroke('B', [x0 + 4 * wb, y, x0 + 6 * wb, y - hb, x0 + 4 * wb, y - 3 * hb]))
        sd.addStroke(new AWT.PathStroke('B', [x0 + 2 * wb, y - 5 * hb, x0 + 10 * wb, y - 5 * hb, x0 + 8 * wb, y - 3 * hb]))
        sd.addStroke(new AWT.PathStroke('B', [x0 + 6 * wb, y - 1 * hb, x0 + 8 * wb, y, x0 + 12 * wb, y]))
        // Draw the remaining line
        sd.addStroke(new AWT.PathStroke('L', [x + w * kx, y]))
      }
    }

    /**
     * Overrides {@link JigSaw#vLine}
     * @override
     * @param {AWT.Path} sd - The Path to which the line will be added
     * @param {number} type - Type  of tooth: 0 is flat (no tooth), 1 means tooth right, and 2 means tooth left
     * @param {number} x - X coordinate of the starting point
     * @param {number} y - Y coordinate of the starting point
     * @param {number} w - Width of the piece
     * @param {number} h - Height of the piece
     * @param {boolean} inv - The line must be drawn bottom to top
     */
    vLine(sd, type, x, y, w, h, inv) {
      const
        ky = inv ? -1 : 1,
        kx = type === 1 ? 1 : -1

      if (type === 0)
        // Flat line
        sd.addStroke(new AWT.PathStroke('L', [x, y + h * ky]))
      else {
        const
          y0 = y + (h - h * this.baseWidthFactor) / 2 * ky,
          hb = h * this.baseWidthFactor / 12 * ky

        // Approximation to the tooth:
        sd.addStroke(new AWT.PathStroke('L', [x, y0]))
        // This is the tooth:
        const wb = w * this.toothHeightFactor * kx / 8
        sd.addStroke(new AWT.PathStroke('B', [x, y0 + 4 * hb, x - wb, y0 + 6 * hb, x - 3 * wb, y0 + 4 * hb]))
        sd.addStroke(new AWT.PathStroke('B', [x - 5 * wb, y0 + 2 * hb, x - 5 * wb, y0 + 10 * hb, x - 3 * wb, y0 + 8 * hb]))
        sd.addStroke(new AWT.PathStroke('B', [x - 1 * wb, y0 + 6 * hb, x, y0 + 8 * hb, x, y0 + 12 * hb]))
        // Draw the remaining line
        sd.addStroke(new AWT.PathStroke('L', [x, y + h * ky]))
      }
    }
  }

  Object.assign(ClassicJigSaw.prototype, {
    /**
     * ClassicJigSaw needs a biggest base width
     * @name ClassicJigSaw#baseWidthFactor
     * @type {number} */
    baseWidthFactor: 3.0 / 4,
    /**
     * ClassicJigSaw needs a biggest base height factor
     * @name ClassicJigSaw#toothHeightFactor
     * @type {number} */
    toothHeightFactor: 3.0 / 5,
  })

  // Register this class in the list of known shapers
  Shaper.CLASSES['@ClassicJigSaw'] = ClassicJigSaw

  return ClassicJigSaw

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/shapers/Holes.js":
/*!******************************!*\
  !*** ./src/shapers/Holes.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : shapers/Holes.js
 *  Created : 20/05/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ./Shaper */ "./src/shapers/Shaper.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, Shaper) {

  /**
   * This {@link Shaper} consists of a set of arbitrary shapes placed over a main rectangle that
   * acts as a enclosure.
   * The components can be of type {@link AWT.Rectangle}, {@link AWT.Ellipse} or {@link AWT.Path}.
   * This components have internal dimension values relative to the horizontal and vertical
   * sizes of the enclosure. Its values (always between 0 and 1) must be scaled to real sizes
   * of graphic objects.
   * @exports Holes
   * @class
   * @extends Shaper
   */
  class Holes extends Shaper {
    /**
     * Holes constructor
     * @param {number} nx - Not used
     * @param {number} ny - Not used
     */
    constructor(nx, ny) {
      super(1, 1)
      this.nCols = nx
      this.nRows = ny
      this.showEnclosure = true
    }

    /**
     * Shapes are already loaded by {@link Shaper}, so this function just sets `initiated` to `true`
     * @override
     */
    buildShapes() {
      if (this.nCells > 0)
        this.initiated = true
    }

    /**
     * Gets the rectangle that contains all shapes
     * @override
     * @returns {AWT.Rectangle}
     */
    getEnclosingShapeData() {
      return this.showEnclosure ? (this.enclosing || super.getEnclosingShapeData()) : null
    }
  }

  // Register this class in the list of known shapers
  Shaper.CLASSES['@Holes'] = Holes

  return Holes
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/shapers/JigSaw.js":
/*!*******************************!*\
  !*** ./src/shapers/JigSaw.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : shapers/JigSaw.js
 *  Created : 01/04/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ./Shaper */ "./src/shapers/Shaper.js"),
  __webpack_require__(/*! ../AWT */ "./src/AWT.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, Shaper, AWT) {

  /**
   *
   * This {@link Shaper} returns a set of rectangular shapes with teeth and slots that fit between them.
   * @exports JigSaw
   * @class
   * @extends Shaper
   */
  class JigSaw extends Shaper {
    /**
     * JigSaw constructor
     * @param {number} nx - Number of columns
     * @param {number} ny - Number of rows
     */
    constructor(nx, ny) {
      super(nx, ny)
    }

    /**
     * Builds the jigsaw shapes based on the number of rows and columns
     * @override
     */
    buildShapes() {
      // Create two two-dimension arrays for storing the type of horizontal and vertical lines
      let hLineType = [], vLineType = []
      for (let i = 0; i <= this.nRows; i++) {
        hLineType[i] = []
        vLineType[i] = []
      }

      for (let row = 0; row < this.nRows; row++) {
        for (let col = 0; col < this.nCols; col++) {
          hLineType[row][col] = row === 0 ? 0 : 1 + (this.randomLines ? Math.round(Math.random() * 9) : row + col) % 2
          vLineType[row][col] = col === 0 ? 0 : 1 + (this.randomLines ? Math.round(Math.random() * 9) : col + row + 1) % 2
          if (col === this.nCols - 1)
            vLineType[row][col + 1] = 0
          if (row === this.nRows - 1)
            hLineType[row + 1][col] = 0
        }
      }

      const w = 1 / this.nCols, h = 1 / this.nRows
      for (let r = 0; r < this.nRows; r++) {
        for (let c = 0; c < this.nCols; c++) {
          const x = w * c
          const y = h * r
          const sd = new AWT.Path([new AWT.PathStroke('M', [x, y])])
          this.hLine(sd, hLineType[r][c], x + 0, y + 0, w, h, false)
          this.vLine(sd, vLineType[r][c + 1], x + w, y + 0, w, h, false)
          this.hLine(sd, hLineType[r + 1][c], x + w, y + h, w, h, true)
          this.vLine(sd, vLineType[r][c], x + 0, y + h, w, h, true)
          sd.addStroke(new AWT.PathStroke('X'))
          sd.calcEnclosingRect()
          // Save the Path in `shapeData`
          this.shapeData[r * this.nCols + c] = sd
        }
      }
      this.initiated = true
    }

    /**
     * Adds an horizontal line to the provided path
     * @param {AWT.Path} sd - The Path to which the line will be added
     * @param {number} type - Type  of tooth: 0 is flat (no tooth), 1 means tooth up, and 2 means tooth down
     * @param {number} x - X coordinate of the starting point
     * @param {number} y - Y coordinate of the starting point
     * @param {number} w - Width of the piece
     * @param {number} h - Height of the piece
     * @param {boolean} inv - The line must be drawn right to left
     */
    hLine(sd, type, x, y, w, h, inv) {
      const
        kx = inv ? -1 : 1,
        ky = type === 1 ? 1 : -1

      if (type === 0)
        // Flat line
        sd.addStroke(new AWT.PathStroke('L', [x + w * kx, y]))
      else {
        const x0 = x + (w - w * this.baseWidthFactor) / 2 * kx
        const wb = w * this.baseWidthFactor * kx
        // Approximation to the tooth:
        sd.addStroke(new AWT.PathStroke('L', [x0, y]))
        // The tooth:
        const hb = h * this.toothHeightFactor * ky
        sd.addStroke(new AWT.PathStroke('L', [x0, y + hb]))
        sd.addStroke(new AWT.PathStroke('L', [x0 + wb, y + hb]))
        sd.addStroke(new AWT.PathStroke('L', [x0 + wb, y]))
        // Draw the remaining of the line
        sd.addStroke(new AWT.PathStroke('L', [x + w * kx, y]))
      }
    }

    /**
     *
     * Adds a vertical line to the provided path
     * @param {AWT.Path} sd - The Path to which the line will be added
     * @param {number} type - Type  of tooth: 0 is flat (no tooth), 1 means tooth right, and 2 means tooth left
     * @param {number} x - X coordinate of the starting point
     * @param {number} y - Y coordinate of the starting point
     * @param {number} w - Width of the piece
     * @param {number} h - Height of the piece
     * @param {boolean} inv - The line must be drawn bottom to top
     */
    vLine(sd, type, x, y, w, h, inv) {
      const
        ky = inv ? -1 : 1,
        kx = type === 1 ? 1 : -1

      if (type === 0) {
        // Flat line
        sd.addStroke(new AWT.PathStroke('L', [x, y + h * ky]))
      } else {
        const y0 = y + (h - h * this.baseWidthFactor) / 2 * ky
        const hb = h * this.baseWidthFactor * ky
        // Approximation to the tooth:
        sd.addStroke(new AWT.PathStroke('L', [x, y0]))
        // The tooth:
        const wb = w * this.toothHeightFactor * kx
        sd.addStroke(new AWT.PathStroke('L', [x + wb, y0]))
        sd.addStroke(new AWT.PathStroke('L', [x + wb, y0 + hb]))
        sd.addStroke(new AWT.PathStroke('L', [x, y0 + hb]))
        // Draw the remaining line
        sd.addStroke(new AWT.PathStroke('L', [x, y + h * ky]))
      }
    }
  }

  // Register this class in the list of known shapers
  Shaper.CLASSES['@JigSaw'] = JigSaw

  return JigSaw
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/shapers/Rectangular.js":
/*!************************************!*\
  !*** ./src/shapers/Rectangular.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : shapers/Rectangular.js
 *  Created : 19/05/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2016 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ./Shaper */ "./src/shapers/Shaper.js"),
  __webpack_require__(/*! ../AWT */ "./src/AWT.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, Shaper, AWT) {
  /**
   *
   * This is the simplest {@link Shaper}. It divides the graphic object in a set of rectangular
   * shapes distributed in the specified number of rows and columns.
   * @exports Rectangular
   * @class
   * @extends Shaper
   */
  class Rectangular extends Shaper {
    /**
     * Rectangular constructor
     * @param {number} nx - Number of columns
     * @param {number} ny - Number of rows
     */
    constructor(nx, ny) {
      super(nx, ny)
    }

    /**
     * Builds the rectangular shapes based on the number of rows and columns
     * @override
     */
    buildShapes() {
      const
        w = 1 / this.nCols,
        h = 1 / this.nRows
      for (let y = 0; y < this.nRows; y++) {
        for (let x = 0; x < this.nCols; x++) {
          this.shapeData[y * this.nCols + x] = new AWT.Rectangle(new AWT.Point(x * w, y * h), new AWT.Dimension(w, h))
        }
      }
      this.initiated = true
    }
  }

  Object.assign(Rectangular.prototype, {
    /**
     * Overrides same flag in {@link Shaper#rectangularShapes}
     * @name Rectangular#rectangularShapes
     * @override
     * @type {boolean} */
    rectangularShapes: true,
  })

  // Register this class in the list of known shapers
  Shaper.CLASSES['@Rectangular'] = Rectangular

  return Rectangular
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/shapers/Shaper.js":
/*!*******************************!*\
  !*** ./src/shapers/Shaper.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : shapers/Shaper.js
 *  Created : 13/04/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ../Utils */ "./src/Utils.js"),
  __webpack_require__(/*! ../AWT */ "./src/AWT.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, Utils, AWT) {

  /**
   * The function of this class and its subclasses is to draw a set of "shapes" that will be used to
   * place {@link ActiveBox} objects at a specific position, and to determine its dimension and
   * appearance.
   * @exports Shaper
   * @class
   */
  class Shaper {
    /**
     * Shaper constructor
     * @param {number} nx - Number of columns (in grid-based shapers)
     * @param {number} ny - Number of rows (in grid-based shapers)
     */
    constructor(nx, ny) {
      this.reset(nx, ny)
    }

    /**
     * Factory constructor that returns a Shaper of the requested class.
     * @param {string} className - The class name of the requested Shaper.
     * @param {number} nx - Number of columns (in grid-based shapers)
     * @param {number} ny - Number of rows (in grid-based shapers)
     * @returns {Shaper}
     */
    static getShaper(className, nx, ny) {
      const cl = Shaper.CLASSES[(className || '').replace(/^edu\.xtec\.jclic\.shapers\./, '@')]
      if (!cl)
        Utils.log('error', `Unknown shaper: ${className}`)
      return cl ? new cl(nx, ny) : null
    }

    /**
     * Initializes this Shaper to default values
     * @param {number} nCols - Number of columns
     * @param {number} nRows - Number of rows
     */
    reset(nCols, nRows) {
      this.nCols = nCols
      this.nRows = nRows
      this.nCells = nRows * nCols
      this.initiated = false
      this.shapeData = []
      for (let i = 0; i < this.nCells; i++)
        this.shapeData[i] = new AWT.Shape()
    }

    /**
     * Loads this shaper settings from a specific JQuery XML element
     * @param {external:jQuery} $xml - The XML element with the shaper data
     */
    setProperties($xml) {
      Utils.attrForEach($xml.get(0).attributes, (name, value) => {
        switch (name) {
          case 'class':
            this.className = value
            break
          case 'cols':
            this.nCols = Number(value)
            break
          case 'rows':
            this.nRows = Number(value)
            break
          case 'baseWidthFactor':
          case 'toothHeightFactor':
          case 'scaleX':
          case 'scaleY':
            this[name] = Number(value)
            break
          case 'randomLines':
          case 'showEnclosure':
            this[name] = Utils.getBoolean(value, true)
            break
        }
      })

      // Reads the 'enclosing'
      // (main shape area where the other shape elements are placed)
      $xml.children('enclosing:first').each((_n, child) => {
        $(child).children('shape:first').each((_n, child2) => {
          let sh = Shaper.readShapeData(child2, this.scaleX, this.scaleY)
          this.enclosing = sh
          this.showEnclosure = true
          this.hasRemainder = true
        })
      })

      // Read the shape elements
      $xml.children('shape').each((n, child) => {
        this.shapeData[n] = Shaper.readShapeData(child, this.scaleX, this.scaleY)
      })

      // Correction needed for '@Holes' shaper
      if (this.shapeData.length > 0 /* && this.shapeData.length !== this.nRows * this.nCols */) {
        //this.nRows = this.shapeData.length
        //this.nCols = 1
        //this.nCells = this.nCols * this.nRows
        this.nCells = this.shapeData.length
      }
      return this
    }

    /**
     * Reads an individual shape from an XML element.
     * Shapes are arrays of `stroke` objects.
     * Each `stroke` has an `action` (_move to_, _line to_, _quad to_...) and associated `data`.
     * @param {external:jQuery} $xml - The XML element with the shape data
     * @param {number} scaleX
     * @param {number} scaleY
     * @returns {AWT.Shape}
     */
    static readShapeData(xml, scaleX, scaleY) {
      const shd = []
      let result = null
      $.each(xml.textContent.split('|'), (_n, txt) => {
        const sd = txt.split(':')
        // Possible strokes are: `rectangle`, `ellipse`, `M`, `L`, `Q`, `B`, `X`
        // Also possible, but not currently used in JClic: `roundRectangle` and `pie`
        let data = sd.length > 1 ? sd[1].split(',') : null
        //
        // Data should be always divided by the scale (X or Y)
        if (data)
          data = data.map((d, n) => d / (n % 2 ? scaleY : scaleX))

        switch (sd[0]) {
          case 'rectangle':
            result = new AWT.Rectangle(data[0], data[1], data[2], data[3])
            break
          case 'ellipse':
            result = new AWT.Ellipse(data[0], data[1], data[2], data[3])
            break
          default:
            // It's an `AWT.PathStroke`
            shd.push(new AWT.PathStroke(sd[0], data))
            break
        }
      })

      return !result && shd.length > 0 ? new AWT.Path(shd) : result
    }

    /**
     * Builds the individual shapes that will form this Shaper
     */
    buildShapes() {
    }

    /**
     * Gets a clone of the nth Shape object, scaled and located inside a Rectangle
     * @param {number} n
     * @param {AWT.Rectangle} rect
     * @returns {AWT.Shape}
     */
    getShape(n, rect) {
      if (!this.initiated)
        this.buildShapes()
      if (n >= this.nCells || this.shapeData[n] === null)
        return null
      return this.shapeData[n].getShape(rect)
    }

    /**
     * Gets the nth Shape data object
     * @param {number} n
     * @returns {object}
     */
    getShapeData(n) {
      return n >= 0 && n < this.shapeData.length ? this.shapeData[n] : null
    }

    /**
     * Gets the AWT.Rectangle that contains all shapes of this Shaper.
     * @returns {AWT.Rectangle}
     */
    getEnclosingShapeData() {
      return new AWT.Rectangle(0, 0, 1, 1)
    }

    /**
     * When `hasRemainder` is true, this method gets the rectangle containing the full surface where
     * the Shaper develops.
     * @param {AWT.Rectangle} rect - The frame where to move and scale all the shapes
     * @returns {AWT.Rectangle}
     */
    getRemainderShape(rect) {
      if (!this.hasRemainder)
        return null

      if (!this.initiated)
        this.buildShapes()

      const sh = this.getEnclosingShapeData()
      const r = sh ? sh.getShape(rect) : new AWT.Rectangle()
      for (let i = 0; i < this.nCells; i++) {
        if (this.shapeData[i])
          r.add(this.shapeData[i].getShape(rect), false)
      }
      return r
    }
  }

  /**
   * List of known classes derived from Shaper. It should be filled by real shaper classes at
   * declaration time.
   * @type {object} */
  Shaper.CLASSES = {}

  Object.assign(Shaper.prototype, {
    /**
     * This shaper class name
     * @name Shaper#className
     * @type {string} */
    className: 'Shaper',
    /**
     * Number of columns (useful in grid-based shapers)
     * @name Shaper#nCols
     * @type {number} */
    nCols: 0,
    /**
     * Number of rows (useful in grid-based shapers)
     * @name Shaper#nRows
     * @type {number} */
    nRows: 0,
    /**
     * Number of cells managed by this shaper
     * @name Shaper#nCells
     * @type {number} */
    nCells: 0,
    /**
     * Contains the specific definition of each shape
     * @name Shaper#shapeData
     * @type {object} */
    shapeData: null,
    /**
     * Flag used to check if the `Shaper` has been initialized against a real surface
     * @name Shaper#initiated
     * @type {boolean} */
    initiated: false,
    //
    // Fields used only in JigSaw shapers
    /**
     * In {@link JigSaw}, ratio between the base width of the tooth and the total length of the side.
     * @name Shaper#baseWidthFactor
     * @type {number} */
    baseWidthFactor: 1.0 / 3,
    /**
     * In {@link JigSaw}, ratio between the tooth height and the total length of the side.
     * @name Shaper#toothHeightFactor
     * @type {number} */
    toothHeightFactor: 1.0 / 6,
    /**
     * In {@link JigSaw}, whether the tooths take random directions or not
     * @name Shaper#randomLines
     * @type {boolean} */
    randomLines: false,
    //
    // Fields used only in the `Holes` shaper
    /**
     * In {@link Holes}, scale to be applied to horizontal positions and lengths to achieve the real
     * value of the shape placed on a real surface.
     * @name Shaper#scaleX
     * @type {number} */
    scaleX: 1.0,
    /**
     * In {@link Holes}, scale to be applied to vertical positions and lengths to achieve the real
     * value of the shape placed on a real surface.
     * @name Shaper#scaleY
     * @type {number} */
    scaleY: 1.0,
    /**
     * In {@link Holes}, the enclosing area where all shapes are placed.
     * @name Shaper#enclosing
     * @type {AWT.Shape} */
    enclosing: null,
    /**
     * In {@link Holes}, when `true`, the enclosing area will be drawn
     * @name Shaper#showEnclosure
     * @type {boolean} */
    showEnclosure: false,
    /**
     * Flag indicating if this shaper organizes its cells in rows and columns
     * @name Shaper#rectangularShapes
     * @type {boolean} */
    rectangularShapes: false,
    /**
     * Flag indicating if this Shaper deploys over a surface biggest than the rectangle enclosing
     * all its shapes
     * @name Shaper#hasRemainder
     * @type {boolean} */
    hasRemainder: false,
  })

  return Shaper
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/shapers/TriangularJigSaw.js":
/*!*****************************************!*\
  !*** ./src/shapers/TriangularJigSaw.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : shapers/TriangularJigSaw.js
 *  Created : 25/05/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ./Shaper */ "./src/shapers/Shaper.js"),
  __webpack_require__(/*! ./JigSaw */ "./src/shapers/JigSaw.js"),
  __webpack_require__(/*! ../AWT */ "./src/AWT.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, Shaper, JigSaw, AWT) {
  /**
   * This {@link Shaper} returns a set of rectangular shapes with triangular teeth and slots that
   * fit between them.
   * @exports TriangularJigSaw
   * @class
   * @extends JigSaw
   */
  class TriangularJigSaw extends JigSaw {
    /**
     * TriangularJigSaw constructor
     * @param {number} nx - Number of columns
     * @param {number} ny - Number of rows
     */
    constructor(nx, ny) {
      super(nx, ny)
    }

    /**
     * Overrides {@link JigSaw#hLine}
     * @override
     * @param {AWT.Path} sd - The Path to which the line will be added
     * @param {number} type - Type  of tooth: 0 is flat (no tooth), 1 means tooth up, and 2 means tooth down
     * @param {number} x - X coordinate of the starting point
     * @param {number} y - Y coordinate of the starting point
     * @param {number} w - Width of the piece
     * @param {number} h - Height of the piece
     * @param {boolean} inv - The line must be drawn right to left
     */
    hLine(sd, type, x, y, w, h, inv) {
      const
        kx = inv ? -1 : 1,
        ky = type === 1 ? 1 : -1

      if (type === 0)
        // Flat line
        sd.addStroke(new AWT.PathStroke('L', [x + w * kx, y]))
      else {
        const x0 = x + (w - w * this.baseWidthFactor) / 2 * kx
        const wb = w * this.baseWidthFactor * kx
        // Approximation to the tooth:
        sd.addStroke(new AWT.PathStroke('L', [x0, y]))
        // This is the tooth:
        const hb = h * this.toothHeightFactor * ky
        sd.addStroke(new AWT.PathStroke('L', [x0 + wb / 2, y + hb]))
        sd.addStroke(new AWT.PathStroke('L', [x0 + wb, y]))
        // Draw the remaining line
        sd.addStroke(new AWT.PathStroke('L', [x + w * kx, y]))
      }
    }

    /**
     * Overrides {@link JigSaw#vLine}
     * @override
     * @param {AWT.Path} sd - The Path to which the line will be added
     * @param {number} type - Type  of tooth: 0 is flat (no tooth), 1 means tooth right, and 2 means tooth left
     * @param {number} x - X coordinate of the starting point
     * @param {number} y - Y coordinate of the starting point
     * @param {number} w - Width of the piece
     * @param {number} h - Height of the piece
     * @param {boolean} inv - The line must be drawn bottom to top
     */
    vLine(sd, type, x, y, w, h, inv) {
      const
        ky = inv ? -1 : 1,
        kx = type === 1 ? 1 : -1

      if (type === 0)
        // Flat line
        sd.addStroke(new AWT.PathStroke('L', [x, y + h * ky]))
      else {
        const
          y0 = y + (h - h * this.baseWidthFactor) / 2 * ky,
          hb = h * this.baseWidthFactor * ky

        // Approximation to the tooth:
        sd.addStroke(new AWT.PathStroke('L', [x, y0]))
        // This is the tooth:
        const wb = w * this.toothHeightFactor * kx
        sd.addStroke(new AWT.PathStroke('L', [x + wb, y0 + hb / 2]))
        sd.addStroke(new AWT.PathStroke('L', [x, y0 + hb]))
        // Draw the remaining line
        sd.addStroke(new AWT.PathStroke('L', [x, y + h * ky]))
      }
    }
  }

  // Register this class in the list of known shapers
  Shaper.CLASSES['@TriangularJigSaw'] = TriangularJigSaw

  return TriangularJigSaw
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/skins/BlueSkin.js":
/*!*******************************!*\
  !*** ./src/skins/BlueSkin.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : skins/BlueSkin.js
 *  Created : 04/07/2016
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ./Skin */ "./src/skins/Skin.js"),
  __webpack_require__(/*! ./DefaultSkin */ "./src/skins/DefaultSkin.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, Skin, DefaultSkin) {

  /**
   * This is a variant of the default {@link Skin} used by JClic.js
   * It differs from {@link DefaultSkin} only in some colors
   * @exports BlueSkin
   * @class
   * @extends DefaultSkin
   */
  class BlueSkin extends DefaultSkin {
    /**
     * BlueSkin constructor
     * @param {PlayStation} ps - The PlayStation (currently a {@link JClicPlayer}) used to load and
     * realize the media objects needed to build the Skin.
     * @param {string=} name - The skin class name
     * @param {object=} options - Optional parameter with additional options
     */
    constructor(ps, name = null, options = {}) {
      // BlueSkin extends [DefaultSkin](DefaultSkin.html)
      super(ps, name, options)
    }

    /**
     * Returns the CSS styles used by this skin. This method should be called only from
     * the `Skin` constructor, and overridded by subclasses if needed.
     * @param {string} media - A specific media size. Possible values are: 'default', 'half' and 'twoThirds'
     * @returns {string}
     */
    _getStyleSheets(media = 'default') {
      return super._getStyleSheets(media) + (media === 'default' ? this.skinCSS : '')
    }
  }

  Object.assign(BlueSkin.prototype, {
    /**
     * Class name of this skin. It will be used as a base selector in the definition of all CSS styles.
     * @name BlueSkin#skinId
     * @override
     * @type {string} */
    skinId: 'JClicBlueSkin',
    /**
     * Styles used in this skin
     * @name BlueSkin#skinCSS
     * @type {string} */
    skinCSS: '.ID {background-color:#1990FF;}'
  })

  // Register this class in the list of available skins
  Skin.CLASSES['blue'] = BlueSkin

  return BlueSkin
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/skins/Counter.js":
/*!******************************!*\
  !*** ./src/skins/Counter.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : skins/Counter.js
 *  Created : 07/05/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {

  /**
   * This class encapsulates the operation of a numeric counter, used to display the current
   * values of score, actions and time.
   */
  class Counter {
    /**
     * Counter constructor
     * @param {string} id - The type of information stored on this counter
     * @param {external:jQuery=} $div - The HTML element where this counter will show values (can be _null_)
     */
    constructor(id, $div) {
      if (id)
        this.id = id
      if ($div)
        this.$div = $div
    }

    /**
     * Gets the current display value of this counter
     * @returns {number}
     */
    getDisplayValue() {
      let result = this.countDown > 0 ? this.countDown - this.value : this.value
      if (this.displayDiffFrom)
        result = result - this.displayDiffFrom.value
      return Math.max(0, Math.min(this.MAX_DISPLAY_VALUE, result))
    }

    /**
     * Paints the value of this counter on screen
     * (method to be overridden by subclasses)
     */
    refreshDisplay() {
      if (this.$div)
        this.$div.html(this.enabled ? (this.getDisplayValue() + 1000).toString().substr(1) : '000')
    }

    /**
     * Enables or disables this counter
     * @param {boolean} enabled - State been assigned to this counter
     */
    setEnabled(enabled) {
      if (this.enabled !== enabled) {
        this.enabled = enabled
        if (this.$div) {
          this.refreshDisplay()
          this.$div.css('opacity', this.enabled ? 1.0 : 0.3)
        }
      }
    }

    /**
     * Sets the initial value of the counter
     * @param {number} maxValue - Value from which the countdown will start
     */
    setCountDown(maxValue) {
      if (this.countDown !== (this.countDown = maxValue))
        this.refreshDisplay()
    }

    /**
     * Increments by one the value of this counter
     */
    incValue() {
      this.value++
      if (this.enabled)
        this.refreshDisplay()
    }

    /**
     * Sets a specific value to this counter
     * @param {number} value - The value to set
     */
    setValue(value) {
      if (this.enabled && this.value !== (this.value = value))
        this.refreshDisplay()
    }
  }

  Object.assign(Counter.prototype, {
    /**
     * Type of counter (usually: `score`, `actions` or `time`)
     * @name Counter#id
     * @type {string} */
    id: '',
    /**
     * The HTML element where this counter shows its value
     * @name Counter#$div
     * @type {external:jQuery}
     */
    $div: null,
    /**
     * Current value of this counter
     * @name Counter#value
     * @type {number} */
    value: 0,
    /**
     * When set, the counter displays a countdown from this value to zero
     * @name Counter#countDown
     * @type {number} */
    countDown: 0,
    /**
     * Flag indicating if this counter is currently enabled
     * @name Counter#enabled
     * @type {boolean} */
    enabled: true,
    /**
     * Maximum value to be displayed by this counter
     * @name Counter#MAX_DISPLAY_VALUE
     * @type {Number} */
    MAX_DISPLAY_VALUE: 999,
    /**
     * An optional Counter used as a subtractor to display the current value.
     * Useful to display `errors` subtracting `score` from `actions`.
     * @name Counter#displayDiffFrom
     * @type {Counter}
     */
    displayDiffFrom: null,
  })

  return Counter

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/skins/CustomSkin.js":
/*!*********************************!*\
  !*** ./src/skins/CustomSkin.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : skins/CustomSkin.js
 *  Created : 12/02/2018
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ./Skin */ "./src/skins/Skin.js"),
  __webpack_require__(/*! ./Counter */ "./src/skins/Counter.js"),
  __webpack_require__(/*! ../Utils */ "./src/Utils.js"),
  __webpack_require__(/*! ../AWT */ "./src/AWT.js"),
  __webpack_require__(/*! ../boxes/ActiveBox */ "./src/boxes/ActiveBox.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, Skin, Counter, Utils, AWT, ActiveBox) {

  /**
   * Custom {@link Skin} for JClic.js, built assembling specific cuts of a canvas (usually a PNG file) defined in an XML file
   * @exports CustomSkin
   * @class
   * @extends Skin
   */
  class CustomSkin extends Skin {

    /**
     * CustomSkin constructor
     *
     * @param {PlayStation} ps - The PlayStation (currently a {@link JClicPlayer}) used to load and
     * realize the media objects needed tot build the Skin.
     * @param {string=} name - The skin class name
     * @param {object=} options - Optional parameter with additional options
     */
    constructor(ps, name = null, options = null) {
      // CustomSkin extends [Skin](Skin.html)
      super(ps, name, options)
      //console.log(this.options)

      this.$mainPanel = $('<div/>', { class: 'JClicCustomMainPanel' })
      this.$gridPanel = $('<div/>', { class: 'JClicGridPanel' })
      for (let i = 0; i < 9; i++)
        this.$gridPanel.append($('<div/>', { class: `JClicCell JClicCell${i + 1}` }))
      this.$mainPanel.append(this.$gridPanel)
      this.$playerCnt.detach().addClass('JClicPlayerCell').appendTo(this.$mainPanel)
      this.$div.prepend(this.$mainPanel)

      // Add buttons
      if (options.buttons) {
        Object.keys(options.buttons.button).forEach(k => {
          const k2 = k === 'about' ? 'reports' : k
          const msg = ps.getMsg(this.msgKeys[k2] || k2)
          this.buttons[k2] = $('<button/>', { class: `JClicBtn JClicTransform Btn-${k2}`, title: msg, 'aria-label': msg, disabled: typeof this.msgKeys[k2] === 'undefined' })
            .on('click', evt => { if (ps.actions[k2]) ps.actions[k2].processEvent(evt) })
          this.$mainPanel.append(this.buttons[k2])
        })
      }

      // Add message box
      if (options.rectangle.messages) {
        this.msgBox = new ActiveBox()
        this.msgBox.role = 'message'
        this.$msgBoxDiv = $('<div/>', { class: 'JClicMsgBox' })
          .click(() => {
            this.msgBox.playMedia(ps)
            return false
          })
        this.$mainPanel.append(this.$msgBoxDiv)
      }

      // Add counters
      if (false !== this.ps.options.counters && options.counters && options.counters.counter) {
        $.each(Skin.prototype.counters, (name, _val) => {
          if (options.counters.counter[name]) {
            const msg = ps.getMsg(name)
            this.counters[name] = new Counter(name, $('<div/>', { class: `JClicCounter JClicTransform Counter-${name}`, title: msg, 'aria-label': msg })
              .html('000')
              .appendTo(this.$mainPanel))
          }
        })
      }

      // Add progress animation
      if (options.progressAnimation) {
        this.$progressAnimation = $('<div/>', { class: 'JClicProgressAnimation JClicTransform' })
        this.$mainPanel.append(this.$progressAnimation)
      }

    }

    /**
     * Enables or disables the `tabindex` attribute of the main buttons. Useful when a modal dialog
     * overlay is active, to avoid direct access to controls not related with the dialog.
     * @param {boolean} status - `true` to make main controls navigable, `false` otherwise
     */
    enableMainButtons(status) {
      this.$mainPanel.find('.JClicBtn').attr('tabindex', status ? '0' : '-1')
    }

    /**
     * Computes the CSS styles used by this skin in thre moodes: main, half ant twoThirds.
     * The resulting strings will be stored in `cssVariants`
     * @returns {string}
     */
    _computeStyleSheets() {
      const
        maxw = this.options.dimension.preferredSize.width,
        maxh = this.options.dimension.preferredSize.height

      this.twoThirdsMedia = { width: maxw, height: maxh }
      this.halfMedia = {
        width: Math.round(2 * maxw / 3),
        height: Math.round(2 * maxh / 3)
      }

      // Panels:
      const
        ph0 = this.options.rectangle.frame.left,
        ph1 = ph0 + this.options.rectangle.player.left,
        ph2 = ph0 + this.options.slicer.left,
        ph3 = ph0 + this.options.slicer.right,
        ph4 = ph1 + this.options.rectangle.player.width,
        ph5 = ph0 + this.options.rectangle.frame.width,
        pv0 = this.options.rectangle.frame.top,
        pv1 = pv0 + this.options.rectangle.player.top,
        pv2 = pv0 + this.options.slicer.top,
        pv3 = pv0 + this.options.slicer.bottom,
        pv4 = pv1 + this.options.rectangle.player.height,
        pv5 = pv0 + this.options.rectangle.frame.height,
        imgElement = this.ps.project.mediaBag.getElement(this.options.image, true),
        imgUrl = imgElement.data && imgElement.data.src ? imgElement.data.src : '',
        box1 = imgElement.data ? Utils.getImgClipUrl(imgElement.data, new AWT.Rectangle(ph0, pv0, ph2 - ph0, pv2 - pv0)) : '',
        box2 = imgElement.data ? Utils.getImgClipUrl(imgElement.data, new AWT.Rectangle(ph2 - ph0, pv0, ph3 - ph2, pv2 - pv0)) : '',
        box3 = imgElement.data ? Utils.getImgClipUrl(imgElement.data, new AWT.Rectangle(ph3, pv0, ph5 - ph3, pv2 - pv0)) : '',
        box4 = imgElement.data ? Utils.getImgClipUrl(imgElement.data, new AWT.Rectangle(ph0, pv2 - pv0, ph2 - ph0, pv3 - pv2)) : '',
        box6 = imgElement.data ? Utils.getImgClipUrl(imgElement.data, new AWT.Rectangle(ph3 - ph0, pv2 - pv0, ph5 - ph3, pv3 - pv2)) : '',
        box7 = imgElement.data ? Utils.getImgClipUrl(imgElement.data, new AWT.Rectangle(ph0, pv3 - pv0, ph2 - ph0, pv5 - pv3)) : '',
        box8 = imgElement.data ? Utils.getImgClipUrl(imgElement.data, new AWT.Rectangle(ph2 - ph0, pv3 - pv0, ph3 - ph2, pv5 - pv3)) : '',
        box9 = imgElement.data ? Utils.getImgClipUrl(imgElement.data, new AWT.Rectangle(ph3, pv3 - pv0, ph5 - ph3, pv5 - pv3)) : ''

      let css = `
.ID .JClicCustomMainPanel {flex-grow:1;position:relative;background-color: ${Utils.checkColor(this.options.color.fill.value)};}
.ID .JClicGridPanel {position:absolute;width:100%;height:100%;display:grid;grid-template-columns:${ph2 - ph0}px 1fr ${ph5 - ph3}px;grid-template-rows:${pv2 - pv0}px 1fr ${pv5 - pv3}px;}
.ID .JClicCell {background-repeat:no-repeat;background-size:contain;}
.ID .JClicPlayerCell {position:absolute;top:${pv1 - pv0}px;right:${ph5 - ph4}px;bottom:${pv5 - pv4}px;left:${ph1 - ph0}px;}
.ID .JClicCell1 {background-image:url(${box1});}
.ID .JClicCell2 {background-image:url(${box2});background-repeat:repeat-x;}
.ID .JClicCell3 {background-image:url(${box3});}
.ID .JClicCell4 {background-image:url(${box4});background-repeat:repeat-y;}
.ID .JClicCell5 {}
.ID .JClicCell6 {background-image:url(${box6});background-repeat:repeat-y;}
.ID .JClicCell7 {background-image:url(${box7});}
.ID .JClicCell8 {background-image:url(${box8});background-repeat:repeat-x;}
.ID .JClicCell9 {background-image:url(${box9});}`

      let cssHalf = `
.ID .JClicGridPanel {grid-template-columns:${Math.round((ph2 - ph0) / 2)}px 1fr ${Math.round((ph5 - ph3) / 2)}px;grid-template-rows:${Math.round((pv2 - pv0) / 2)}px 1fr ${Math.round((pv5 - pv3) / 2)}px;}
.ID .JClicPlayerCell {top:${Math.round((pv1 - pv0) / 2)}px;right:${Math.round((ph5 - ph4) / 2)}px;bottom:${Math.round((pv5 - pv4) / 2)}px;left:${Math.round((ph1 - ph0) / 2)}px;}
.ID .JClicTransform {transform: scale(0.5);}`

      let cssTwoThirds = `
.ID .JClicGridPanel {grid-template-columns:${Math.round(2 * (ph2 - ph0) / 3)}px 1fr ${Math.round(2 * (ph5 - ph3) / 3)}px;grid-template-rows:${Math.round(2 * (pv2 - pv0) / 3)}px 1fr ${Math.round(2 * (pv5 - pv3) / 3)}px;}
.ID .JClicPlayerCell {top:${Math.round(2 * (pv1 - pv0) / 3)}px;right:${Math.round(2 * (ph5 - ph4) / 3)}px;bottom:${Math.round(2 * (pv5 - pv4) / 3)}px;left:${Math.round(2 * (ph1 - ph0) / 3)}px;}
.ID .JClicTransform {transform: scale(0.666);}`

      // Buttons:
      if (this.options.buttons) {
        const bt = this.options.buttons
        let wBase = 30, hBase = 30, offsetBase = {}
        if (bt.settings) {
          if (bt.settings.dimension) {
            wBase = bt.settings.dimension.width || wBase
            hBase = bt.settings.dimension.height || hBase
          }
          if (bt.settings.offset)
            Object.assign(offsetBase, bt.settings.offset)
        }
        Object.keys(this.options.buttons.button).forEach(k => {
          const
            btn = bt.button[k],
            k2 = k === 'about' ? 'reports' : k
          let w = wBase, h = hBase, offset = offsetBase
          if (btn.settings) {
            if (btn.settings.dimension) {
              w = btn.settings.dimension.width || w
              h = btn.settings.dimension.height || h
            }
            if (btn.settings.offset)
              offset = Object.assign({}, offsetBase, btn.settings.offset)
          }
          const
            x = btn.point.pos.left,
            xp = x < ph2 ? `left:${x}` : `right:${ph5 - x - w}`,
            xpHalf = x < ph2 ? `left:${Math.round(x / 2 - w / 4)}` : `right:${Math.round((ph5 - x - w) / 2 - w / 4)}`,
            xpTwoThirds = x < ph2 ? `left:${Math.round(2 * x / 3 - w / 6)}` : `right:${Math.round(2 * (ph5 - x - w) / 3 - w / 6)}`,
            y = btn.point.pos.top,
            yp = y < pv2 ? `top:${y}` : `bottom:${pv5 - y - h}`,
            ypHalf = y < pv2 ? `top:${Math.round(y / 2 - h / 4)}` : `bottom:${Math.round((pv5 - y - h) / 2 - h / 4)}`,
            ypTwoThirds = y < pv2 ? `top:${Math.round(2 * y / 3 - h / 6)}` : `bottom:${Math.round(2 * (pv5 - y - h) / 3 - h / 6)}`,
            xs = btn.point.source.left,
            ys = btn.point.source.top
          css += `.ID .Btn-${k2} {position:absolute;${xp}px;${yp}px;width:${w}px;height:${h}px;background:url(${imgUrl}) !important;background-position:-${xs}px -${ys}px !important;}\n`
          cssHalf += `.ID .Btn-${k2} {${xpHalf}px;${ypHalf}px;}\n`
          cssTwoThirds += `.ID .Btn-${k2} {${xpTwoThirds}px;${ypTwoThirds}px;}\n`
          if (offset.active)
            css += `.ID .Btn-${k2}:active {background-position:-${xs + offset.active.right}px -${ys + offset.active.down}px !important;}\n`
          if (offset.over)
            css += `.ID .Btn-${k2}:hover {background-position:-${xs + offset.over.right}px -${ys + offset.over.down}px !important;}\n`
          if (offset.disabled)
            css += `.ID .Btn-${k2}:disabled {background-position:-${xs + offset.disabled.right}px -${ys + offset.disabled.down}px !important;}\n`
        })
      }

      // Counters:
      if (this.options.counters && this.options.counters.settings) {
        const cnt = this.options.counters
        let wBase = 35, hBase = 20
        if (cnt.settings.dimension && cnt.settings.dimension.counter) {
          wBase = (cnt.settings.dimension.counter.width || wBase)
          hBase = cnt.settings.dimension.counter.height || hBase
        }
        let wLb = 37, hLb = 14
        if (cnt.settings.dimension && cnt.settings.dimension.label) {
          wLb = (cnt.settings.dimension.label.width || wLb)
          hLb = cnt.settings.dimension.label.height || hLb
        }
        let bColor = 'black'
        if (cnt.style && cnt.style.color && cnt.style.color.foreground)
          bColor = Utils.checkColor(cnt.style.color.foreground.value || bColor)
        let lbFntSize = hLb - 4;
        let lbFntFamily = 'Roboto'
        if (cnt.style && cnt.style.font && cnt.style.font.label) {
          lbFntSize = Math.max(8, cnt.style.font.label.size || lbFntSize)
          lbFntFamily = `${cnt.style.font.label.family || 'Roboto'},Roboto,sans-serif`
        }

        css += `.ID .JClicCounter {font-size:${hBase - 2}px;color:${bColor}}\n`
        Object.keys(this.options.counters.counter).forEach(k => {
          const
            counter = cnt.counter[k]
          let w = wBase, h = hBase
          const
            x = counter.point.counter.left,
            xl = counter.point.label.left || (x - Math.round((wLb - wBase) / 2)),
            xp = x < ph2 ? `left:${x}` : `right:${ph5 - x - w}`,
            xpHalf = x < ph2 ? `left:${Math.round(x / 2 - w / 4)}` : `right:${Math.round((ph5 - x - w) / 2 - w / 4)}`,
            xpTwoThirds = x < ph2 ? `left:${Math.round(2 * x / 3 - w / 6)}` : `right:${Math.round(2 * (ph5 - x - w) / 3 - w / 6)}`,
            y = counter.point.counter.top,
            yl = counter.point.label.top || (y - hLb),
            yp = y < pv2 ? `top:${y}` : `bottom:${pv5 - y - h}`,
            ypHalf = y < pv2 ? `top:${Math.round(y / 2 - h / 4)}` : `bottom:${Math.round((pv5 - y - h) / 2 - h / 4)}`,
            ypTwoThirds = y < pv2 ? `top:${Math.round(2 * y / 3 - h / 6)}` : `bottom:${Math.round(2 * (pv5 - y - h) / 3 - h / 6)}`
          // counter:
          css += `.ID .Counter-${k} {position:absolute;${xp}px;${yp}px;width:${w}px;height:${h}px;line-height:${h}px;}\n`
          // label:
          css += `.ID .Counter-${k}:before {content:"${this.ps.getMsg(k)}";font-size:${lbFntSize}px;font-family:${lbFntFamily};width:${wLb}px;height:${hLb}px;line-height:${hLb}px;position:absolute;top:${yl - y}px;left:${xl - x}px;}`
          // reduced sizes:
          cssHalf += `.ID .Counter-${k} {${xpHalf}px;${ypHalf}px;}\n`
          cssTwoThirds += `.ID .Counter-${k} {${xpTwoThirds}px;${ypTwoThirds}px;}\n`
        })
      }

      // Progress animation:
      if (this.options.progressAnimation) {
        const pa = this.options.progressAnimation
        let w = 30, h = 30
        if (pa.dimension) {
          w = pa.dimension.width || w
          h = pa.dimension.height || h
        }
        const
          x = pa.point.pos.left,
          xp = x < ph2 ? `left:${x}` : `right:${ph5 - x - w}`,
          xpHalf = x < ph2 ? `left:${Math.round(x / 2 - w / 4)}` : `right:${Math.round((ph5 - x - w) / 2 - w / 4)}`,
          xpTwoThirds = x < ph2 ? `left:${Math.round(2 * x / 3 - w / 6)}` : `right:${Math.round(2 * (ph5 - x - w) / 3 - w / 6)}`,
          y = pa.point.pos.top,
          yp = y < pv2 ? `top:${y}` : `bottom:${pv5 - y - h}`,
          ypHalf = y < pv2 ? `top:${Math.round(y / 2 - h / 4)}` : `bottom:${Math.round((pv5 - y - h) / 2 - h / 4)}`,
          ypTwoThirds = y < pv2 ? `top:${Math.round(2 * y / 3 - h / 6)}` : `bottom:${Math.round(2 * (pv5 - y - h) / 3 - h / 6)}`,
          xs = pa.point.source.left,
          ys = pa.point.source.top
        css += `.ID .JClicProgressAnimation {position:absolute;${xp}px;${yp}px;width:${w}px;height:${h}px;background:url(${imgUrl});background-position:-${xs}px -${ys}px;}\n`
        cssHalf += `.ID .JClicProgressAnimation {${xpHalf}px;${ypHalf}px;}\n`
        cssTwoThirds += `.ID .JClicProgressAnimation {${xpTwoThirds}px;${ypTwoThirds}px;}\n`

        if (pa.frames && pa.direction) {
          const
            dx = (pa.step || w) * (pa.direction === 'right' ? 1 : pa.direction === 'left' ? -1 : 0),
            dy = (pa.step || h) * (pa.direction === 'down' ? 1 : pa.direction === 'up' ? -1 : 0)
          css += `\n@keyframes anim {100% {background-position:${(xs + dx * pa.frames) * -1}px ${(ys + dy * pa.frames) * -1}px;}}\n.ID .JClicProgressAnimation {animation: anim ${pa.frames * pa.delay}ms steps(${pa.frames}) infinite;}`
        }
      }

      // Messages box:
      if (this.options.rectangle.messages) {
        const
          bx = this.options.rectangle.messages,
          left = ph0 + bx.left,
          right = ph5 - bx.width - bx.left - ph0,
          tb = bx.top < pv2 ? `top:${bx.top}` : `bottom:${pv5 - bx.height - bx.top}`,
          tbHalf = bx.top < pv2 ? `top:${Math.round(bx.top / 2)}` : `bottom:${Math.round((pv5 - bx.height - bx.top) / 2)}`,
          tbTwoThirds = bx.top < pv2 ? `top:${Math.round(2 * bx.top / 3)}` : `bottom:${Math.round(2 * (pv5 - bx.height - bx.top) / 3)}`

        css += `.ID .JClicMsgBox {position:absolute;left:${left}px;right:${right}px;height:${bx.height}px;${tb}px;}`
        cssHalf += `.ID .JClicMsgBox {left:${Math.round(left / 2)}px;right:${Math.round(right / 2)}px;height:${Math.round(bx.height / 2)}px;${tbHalf}px;}`
        cssTwoThirds += `.ID .JClicMsgBox {left:${Math.round(2 * left / 3)}px;right:${Math.round(2 * right / 3)}px;height:${Math.round(2 * bx.height / 3)}px;${tbTwoThirds}px;}`
      }

      // TODO: Implement status messages?

      // Store results in `cssVariants`
      this.cssVariants = {
        default: this.mainCSS + css,
        half: cssHalf,
        twoThirds: cssTwoThirds
      }
    }

    /**
     * Returns the CSS styles used by this skin. This method should be called only from
     * the `Skin` constructor, and overridded by subclasses if needed.
     * @param {string} media - A specific media size. Possible values are: 'default', 'half' and 'twoThirds'
     * @override
     * @returns {string}
     */
    _getStyleSheets(media = 'default') {
      if (!this.cssVariants)
        this._computeStyleSheets()
      return `${super._getStyleSheets(media)}${this.cssVariants[media] || ''}`
    }

    /**
     * Sets/unsets the 'wait' state
     * @override
     * @param {boolean} status - Whether to set or unset the wait status. When `undefined`, the
     * `waitCursorCount` member is evaluated to decide if the wait state should be activated or deactivated.
     */
    setWaitCursor(status) {
      super.setWaitCursor(status)
      if (this.$progressAnimation)
        this.$progressAnimation.css('animation-play-state', this.waitCursorCount > 0 ? 'running' : 'paused')
    }

  }

  Object.assign(CustomSkin.prototype, {
    /**
     * Class name of this skin. It will be used as a base selector in the definition of all CSS styles.
     * @name CustomSkin#skinId
     * @override
     * @type {string} */
    skinId: 'JClicCustomSkin',
    /**
     * The name of the image file to be used as a base of this skin.
     * @name CustomSkin#imgName
     * @type {string} */
    imgName: null,
    /**
     * Styles used in this skin
     * @name CustomSkin#skinCSS
     * @override
     * @type {string} */
    mainCSS: '\
.ID .JClicPlayerCnt {margin:0;}\
.ID .JClicBtn:focus {outline:0;}\
.ID .JClicCounter {font-family:Roboto,sans-serif;text-align:center;}',
    /**
     * Specifc styles (`default`, `half` and `twoThirds`) computed at run-time,
     * based on the provided XML file
     * @name CustomSkin#cssVariants
     * @type {object} */
    cssVariants: null,
    /**
     * Key ids of currently supported buttons, associated with its helper literal
     * @name CustomSkin#msgKeys
     * @type {object} */
    msgKeys: {
      next: 'Next activity',
      prev: 'Previous activity',
      info: 'Information',
      help: 'Help',
      reports: 'Reports',
      // TODO: Implement audio on/off!
      audio: 'Audio on/off',
      reset: 'Reset activity',
    },
    /**
     * Graphic indicator of loading progress
     * @name Skin#$progressAnimation
     * @type {external:jQuery} */
    $progressAnimation: null,
  })

  // Register this class in the list of available skins
  Skin.CLASSES['custom'] = CustomSkin

  return CustomSkin
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/skins/DefaultSkin.js":
/*!**********************************!*\
  !*** ./src/skins/DefaultSkin.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : skins/DefaultSkin.js
 *  Created : 12/05/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ../AWT */ "./src/AWT.js"),
  __webpack_require__(/*! ./Skin */ "./src/skins/Skin.js"),
  __webpack_require__(/*! ../boxes/ActiveBox */ "./src/boxes/ActiveBox.js"),
  __webpack_require__(/*! ./Counter */ "./src/skins/Counter.js"),
  __webpack_require__(/*! ../Utils */ "./src/Utils.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, AWT, Skin, ActiveBox, Counter, Utils) {

  /**
   * This is the default {@link Skin} used by JClic.js
   * @exports DefaultSkin
   * @class
   * @extends Skin
   */
  class DefaultSkin extends Skin {
    /**
     * DefaultSkin constructor
     * @param {PlayStation} ps - The PlayStation (currently a {@link JClicPlayer}) used to load and
     * realize the media objects needed tot build the Skin.
     * @param {string=} name - The skin class name
     * @param {object=} options - Optional parameter with additional options, used by subclasses
     * this skin. When `null` or `undefined`, a new one will be created.
     */
    constructor(ps, name = null, options = {}) {
      // DefaultSkin extends [Skin](Skin.html)
      super(ps, name, options)
      let msg = ''

      AWT.Font.loadGoogleFonts(this.cssFonts)

      // Create the main container for buttons, counters and message box
      this.$ctrlCnt = $('<div/>', { class: 'JClicCtrlCnt unselectableText', role: 'navigation' })
      this.$div.append(this.$ctrlCnt)

      // Add `prev` button
      msg = ps.getMsg('Previous activity')
      this.buttons.prev = $('<button/>', { class: 'JClicBtn', title: msg, 'aria-label': msg })
        .append($(Utils.getSvg(this.prevIcon, this.iconWidth, this.iconHeight, this.iconFill)))
        .on('click', evt => {
          if (this.ps)
            this.ps.actions.prev.processEvent(evt)
        })
      this.$ctrlCnt.append(this.buttons.prev)

      // Add message box
      this.msgBox = new ActiveBox()
      this.msgBox.role = 'message'
      this.$msgBoxDiv = $('<div/>', { class: 'JClicMsgBox' })
        .click(() => {
          this.msgBox.playMedia(ps)
          return false
        })
      this.$ctrlCnt.append(this.$msgBoxDiv)

      // Add `next` button
      msg = ps.getMsg('Next activity')
      this.buttons.next = $('<button/>', { class: 'JClicBtn', title: msg, 'aria-label': msg })
        .append($(Utils.getSvg(this.nextIcon, this.iconWidth, this.iconHeight, this.iconFill)))
        .on('click', evt => {
          if (this.ps)
            this.ps.actions.next.processEvent(evt)
        })
      this.$ctrlCnt.append(this.buttons.next)

      // Add counters
      if (false !== this.ps.options.counters && false !== options.counters) {
        // Create counters
        msg = ps.getMsg('Reports')
        const $countCnt = $('<button/>', { class: 'JClicCountCnt', 'aria-label': msg })
          .on('click', evt => {
            if (this.ps)
              this.ps.actions.reports.processEvent(evt)
          })
        $.each(Skin.prototype.counters, (name, _val) => {
          msg = ps.getMsg(name)
          this.counters[name] = new Counter(name, $('<div/>', { class: 'JClicCounter', title: msg, 'aria-label': msg })
            .css({
              'background-image': `url(${Utils.svgToURI(this[name + 'Icon'], this.counterIconWidth, this.counterIconHeight, this.counterIconFill)})`,
              color: this.counterIconFill
            })
            .html('000')
            .appendTo($countCnt))
        })
        this.$ctrlCnt.append($countCnt)
      }

      // Add info button
      if (true === this.ps.options.info || true === options.info) {
        msg = ps.getMsg('Information')
        this.buttons.info = $('<button/>', { class: 'JClicBtn', title: msg, 'aria-label': msg })
          .append($(Utils.getSvg(this.infoIcon, this.iconWidth, this.iconHeight, this.iconFill)))
          .on('click', evt => {
            if (this.ps)
              this.ps.actions.info.processEvent(evt)
          })
        this.$ctrlCnt.append(this.buttons.info)
      }

      // Add reports button
      if (true === this.ps.options.reportsBtn || true === options.reportsBtn) {
        msg = ps.getMsg('Reports')
        this.buttons.about = $('<button/>', { class: 'JClicBtn', title: msg, 'aria-label': msg })
          .append($(Utils.getSvg(this.reportsIcon, this.iconWidth, this.iconHeight, this.iconFill)))
          .on('click', evt => {
            if (this.ps)
              this.ps.actions.reports.processEvent(evt)
          })
        this.$ctrlCnt.append(this.buttons.about)
      }

      // Add `full screen` button
      if (document && document.fullscreenEnabled) {
        msg = ps.getMsg('Toggle full screen')
        this.buttons.fullscreen = $('<button/>', { class: 'JClicBtn', title: msg, 'aria-label': msg })
          .append($('<img/>', { src: Utils.svgToURI(this.fullScreenIcon, this.iconWidth, this.iconHeight, this.iconFill) }))
          .on('click', () => {
            this.setScreenFull(null)
          })
        this.$ctrlCnt.append(this.buttons.fullscreen)
      }

      // Add `close` button
      if (typeof this.ps.options.closeFn === 'function') {
        msg = ps.getMsg('Close')
        const closeFn = this.ps.options.closeFn
        this.buttons.close = $('<button/>', { class: 'JClicBtn', title: msg, 'aria-label': msg })
          .append($(Utils.getSvg(this.closeIcon, this.iconWidth, this.iconHeight, this.iconFill)))
          .on('click', () => {
            Utils.log('info', 'Closing the player')
            closeFn()
          })
        this.$ctrlCnt.append(this.buttons.close)
      }

      // Workaround for a bug in Edge and Explorer: SVG objects not implementing `blur` and `focus` methods
      // See: [https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8479637/]
      // This affects Polymer `iron-overlay-behavior`. See: [https://github.com/PolymerElements/iron-overlay-behavior/pull/211]
      let nilFunc = null
      $.each(this.buttons, (_key, value) => {
        if (value && (typeof value[0].focus !== 'function' || typeof value[0].blur !== 'function')) {
          if (nilFunc === null)
            nilFunc = () => Utils.log('error', '"blur" and "focus" not defined for SVG objects in Explorer/Edge')
          value[0].focus = value[0].blur = nilFunc
        }
      })
    }

    /**
     * Returns the CSS styles used by this skin. This method should be called only from
     * the `Skin` constructor, and overridded by subclasses if needed.
     * @param {string} media - A specific media size. Possible values are: 'default', 'half' and 'twoThirds'
     * @returns {string}
     */
    _getStyleSheets(media = 'default') {
      return `${super._getStyleSheets(media)}${media === 'default' ? this.mainCSS : media === 'half' ? this.mainCSSHalf : media === 'twoThirds' ? this.mainCSSTwoThirds : ''}`
    }

    /**
     * Main method used to build the content of the skin. Resizes and places internal objects.
     * @override
     */
    doLayout() {
      // Call method on ancestor
      super.doLayout()

      // Set the fullScreen icon
      if (this.buttons.fullscreen)
        this.buttons.fullscreen.find('img').get(-1).src = Utils.svgToURI(
          this[(document && document.fullscreenElement) ? 'fullScreenExitIcon' : 'fullScreenIcon'],
          this.iconWidth, this.iconHeight, this.iconFill)
    }

    /**
     * Enables or disables the `tabindex` attribute of the main buttons. Useful when a modal dialog
     * overlay is active, to avoid direct access to controls not related with the dialog.
     * @param {boolean} status - `true` to make main controls navigable, `false` otherwise
     */
    enableMainButtons(status) {
      this.$ctrlCnt.find('.JClicBtn,.JClicCountCnt').attr('tabindex', status ? '0' : '-1')
    }
  }

  Object.assign(DefaultSkin.prototype, {
    /**
     * Class name of this skin. It will be used as a base selector in the definition of all CSS styles.
     * @name DefaultSkin#skinId
     * @override
     * @type {string}
     */
    skinId: 'JClicDefaultSkin',
    /**
     * The HTML div where buttons, counters and message box are placed
     * @name DefaultSkin#$ctrlCnt
     * @type {external:jQuery} */
    $ctrlCnt: null,
    /**
     * Space (pixels) between the components of this {@link Skin}
     * @name DefaultSkin#margin
     * @type {number} */
    margin: 18,
    /**
     * Height of {@link DefaultSkin#msgBox}
     * @name DefaultSkin#msgBoxHeight
     * @type {number} */
    msgBoxHeight: 60,
    /**
     * Width of counters, in pixels
     * @name DefaultSkin#countersWidth
     * @type {number} */
    countersWidth: 60,
    /**
     * Height of counters, in pixels
     * @name DefaultSkin#countersHeight
     * @type {number} */
    countersHeight: 20,
    //
    //Buttons and other graphical resources used by this skin.
    //
    /**
     * Styles used in this skin
     * @name DefaultSkin#mainCSS
     * @type {string} */
    mainCSS: '\
.ID .JClicCtrlCnt {margin:0 9px 18px 9px; display:-webkit-flex; display:flex; -webkit-flex-direction:row; flex-direction:row; -webkit-align-items:center; align-items:center;}\
.ID .JClicCountCnt {display:-webkit-flex; display:flex; -webkit-flex-direction:column; flex-direction:column;}\
.ID .JClicMsgBox {height:60px; -webkit-flex-grow:1; flex-grow:1; background-color:lightblue;}\
.ID .JClicBtn {cursor:pointer; line-height:0;}\
.ID .JClicBtn:disabled {cursor:inherit; opacity:0.3;}\
.ID .JClicCounter {width:40px; height:20px; padding-left:20px; color:white; cursor:pointer; font-family:Roboto,Sans-serif; font-size:18px; text-align:center; background-repeat:no-repeat; background-position:left; box-sizing:content-box;}',
    /**
     * Styles used in this skin, sized to half its regular size
     * @name DefaultSkin#mainCSSHalf
     * @type {string} */
    mainCSSHalf: '\
.ID .JClicPlayerCnt {margin:9px;}\
.ID .JClicCtrlCnt {margin:0 4px 9px 4px;}\
.ID .JClicCtrlCnt button svg,img {width:18px; height:18px;}\
.ID .JClicMsgBox {height:30px;}\
.ID .JClicCounter {width:20px; height:10px; margin-left:-15px; transform:scale(0.5);}',
    /**
     * Styles used in this skin, sized to two thirds of its regular size
     * @name DefaultSkin#mainCSSTwoThirds
     * @type {string} */
    mainCSSTwoThirds: '\
.ID .JClicPlayerCnt {margin:12px;}\
.ID .JClicCtrlCnt {margin: 0 6px 12px 6px;}\
.ID .JClicCtrlCnt button svg,img {width:24px; height:24px;}\
.ID .JClicMsgBox {height:40px;}\
.ID .JClicCounter {width:27px; height:13px; margin-left:-10px; transform:scale(0.666);}',
    /**
     * Fonts used in this skin
     * @name DefaultSkin#cssFonts
     * @type {string[]} */
    cssFonts: ['Roboto'],
    //
    // Default settings for icons (can be overridden in subclasses):
    /**
     * Icon width
     * @name DefaultSkin#iconWidth
     * @type {number} */
    iconWidth: 36,
    /**
     * Icon height
     * @name DefaultSkin#iconHeight
     * @type {number} */
    iconHeight: 36,
    /**
     * Fill color for icons
     * @name DefaultSkin#iconFill
     * @type {string} */
    iconFill: '#FFFFFF',
    //
    // SVG images for action buttons
    // Based on [Google Material design Icons](https://google.github.io/material-design-icons/)
    //
    /**
     * Icon for 'previous activity' button
     * @name DefaultSkin#prevIcon
     * @type {string} */
    prevIcon: '<svg fill="#FFFFFF" viewBox="0 0 24 24" width="36" height="36" xmlns="http://www.w3.org/2000/svg">\
<path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"/>\
</svg>',
    /**
     * Icon for 'next activity' button
     * @name DefaultSkin#nextIcon
     * @type {string} */
    nextIcon: '<svg fill="#FFFFFF" viewBox="0 0 24 24" width="36" height="36" xmlns="http://www.w3.org/2000/svg">\
<path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"/>\
</svg>',
    /**
     * Full screen on icon
     * @name DefaultSkin#fullScreenIcon
     * @type {string} */
    fullScreenIcon: '<svg fill="#FFFFFF" viewBox="0 0 24 24" width="36" height="36" xmlns="http://www.w3.org/2000/svg">\
<path d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"/>\
</svg>',
    /**
     * Full screen off icon
     * @name DefaultSkin#fullScreenExitIcon
     * @type {string} */
    fullScreenExitIcon: '<svg fill="#FFFFFF" viewBox="0 0 24 24" width="36" height="36" xmlns="http://www.w3.org/2000/svg">\
<path d="M5 16h3v3h2v-5H5v2zm3-8H5v2h5V5H8v3zm6 11h2v-3h3v-2h-5v5zm2-11V5h-2v5h5V8h-3z"/>\
</svg>',
    /**
     * Close button
     * @name DefaultSkin#closeIcon
     * @type {string} */
    closeIcon: '<svg fill="#FFFFFF" viewBox="0 0 24 24" width="36" height="36" xmlns="http://www.w3.org/2000/svg">\
<path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>\
</svg>',
    /**
     * Info button
     * @name DefaultSkin#infoIcon
     * @type {string} */
    infoIcon: '<svg fill="#FFFFFF" viewBox="0 0 24 24" width="36" height="36" xmlns="http://www.w3.org/2000/svg">\
<path d="M11 17h2v-6h-2v6zm1-15C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zM11 9h2V7h-2v2z"/>\
</svg>',
    /**
     * Reports button
     * @name DefaultSkin#reportsIcon
     * @type {string} */
    reportsIcon: '<svg fill="#FFFFFF" viewBox="0 0 24 24" width="36" height="36" xmlns="http://www.w3.org/2000/svg">\
<path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"/>\
</svg>',
    //
    // Settings for counters:
    /**
     * Counter icon width
     * @name DefaultSkin#counterIconWidth
     * @type {number} */
    counterIconWidth: 18,
    /**
     * Counter icon height
     * @name DefaultSkin#counterIconHeight
     * @type {number} */
    counterIconHeight: 18,
    /**
     * Counter icon fill color
     * @name DefaultSkin#counterIconFill
     * @type {string} */
    counterIconFill: '#FFFFFF',
    // Counters:
    /**
     * Time icon
     * @name DefaultSkin#timeIcon
     * @type {string} */
    timeIcon: '<svg fill="#FFFFFF" viewBox="0 0 24 24" width="18" height="18" xmlns="http://www.w3.org/2000/svg">\
<path d="M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"/>\
<path d="M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z"/>\
</svg>',
    /**
     * Score icon
     * @name DefaultSkin#scoreIcon
     * @type {string} */
    scoreIcon: '<svg fill="#FFFFFF" viewBox="0 0 24 24" width="18" height="18" xmlns="http://www.w3.org/2000/svg">\
<path d="M9 16.2L4.8 12l-1.4 1.4L9 19 21 7l-1.4-1.4L9 16.2z"/>\
</svg>',
    /**
     * Actions icon
     * @name DefaultSkin#actionsIcon
     * @type {string} */
    actionsIcon: '<svg fill="#FFFFFF" viewBox="0 0 24 24" width="18" height="18" xmlns="http://www.w3.org/2000/svg">\
<path d="M13.49 5.48c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm-3.6 13.9l1-4.4 2.1 2v6h2v-7.5l-2.1-2 .6-3c1.3 1.5 3.3 2.5 5.5 2.5v-2c-1.9 0-3.5-1-4.3-2.4l-1-1.6c-.4-.6-1-1-1.7-1-.3 0-.5.1-.8.1l-5.2 2.2v4.7h2v-3.4l1.8-.7-1.6 8.1-4.9-1-.4 2 7 1.4z"/>\
</svg>',
  })

  // Register this class in the list of available skins
  Skin.CLASSES['default'] = DefaultSkin

  return DefaultSkin
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/skins/EmptySkin.js":
/*!********************************!*\
  !*** ./src/skins/EmptySkin.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : skins/EmptySkin.js
 *  Created : 14/03/2017
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! ./Skin */ "./src/skins/Skin.js"),
  __webpack_require__(/*! ../boxes/ActiveBox */ "./src/boxes/ActiveBox.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Skin, ActiveBox) {

  /**
   * A minimalist {@link Skin} for JClic.js with just the player, without messages, counters nor any button.
   * @exports EmptySkin
   * @class
   * @extends Skin
   */
  class EmptySkin extends Skin {

    /**
     * EmptySkin constructor
     *
     * @param {PlayStation} ps - The PlayStation (currently a {@link JClicPlayer}) used to load and
     * realize the media objects needed tot build the Skin.
     * @param {string=} name - The skin class name
     * @param {object=} options - Optional parameter with additional options
     */
    constructor(ps, name = null, options = {}) {
      // EmptySkin extends [Skin](Skin.html)
      super(ps, name, options)
      this.msgBox = new ActiveBox()
      this.msgBox.role = 'message'
    }

    /**
     * Returns the CSS styles used by this skin. This method should be called only from
     * the `Skin` constructor, and overridded by subclasses if needed.
     * @param {string} media - A specific media size. Possible values are: 'default', 'half' and 'twoThirds'
     * @returns {string}
     */
    _getStyleSheets(media = 'default') {
      return super._getStyleSheets(media) + (media === 'default' ? this.mainCSS : '')
    }

  }

  Object.assign(EmptySkin.prototype, {
    /**
     * Class name of this skin. It will be used as a base selector in the definition of all CSS styles.
     * @name EmptySkin#skinId
     * @override
     * @type {string} */
    skinId: 'JClicEmptySkin',
    /**
     * Styles used in this skin
     * @name EmptySkin#skinCSS
     * @override
     * @type {string} */
    mainCSS: '.ID .JClicPlayerCnt {margin:0;}'
  })

  // Register this class in the list of available skins
  Skin.CLASSES['empty'] = EmptySkin

  return EmptySkin
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/skins/GreenSkin.js":
/*!********************************!*\
  !*** ./src/skins/GreenSkin.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : skins/GreenSkin.js
 *  Created : 04/07/2016
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ./Skin */ "./src/skins/Skin.js"),
  __webpack_require__(/*! ./DefaultSkin */ "./src/skins/DefaultSkin.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, Skin, DefaultSkin) {

  /**
   * This is a variant of the default {@link Skin} used by JClic.js
   * It differs from {@link DefaultSkin} only in some colors
   * @exports GreenSkin
   * @class
   * @extends DefaultSkin
   */
  class GreenSkin extends DefaultSkin {
    /**
     * GreenSkin constructor
     * 
     * @param {PlayStation} ps - The PlayStation (currently a {@link JClicPlayer}) used to load and
     * realize the media objects needed to build this Skin.
     * @param {string=} name - The skin class name
     * @param {object=} options - Optional parameter with additional options
     */
    constructor(ps, name = null, options = {}) {
      // GreenSkin extends [DefaultSkin](DefaultSkin.html)
      super(ps, name, options)
    }

    /**
     * Returns the CSS styles used by this skin. This method should be called only from
     * the `Skin` constructor, and overridded by subclasses if needed.
     * @param {string} media - A specific media size. Possible values are: 'default', 'half' and 'twoThirds'
     * @returns {string}
     */
    _getStyleSheets(media = 'default') {
      return super._getStyleSheets(media) + (media === 'default' ? this.skinCSS : '')
    }
  }

  Object.assign(GreenSkin.prototype, {
    /**
     * Class name of this skin. It will be used as a base selector in the definition of all CSS styles.
     * @name GreenSkin#skinId
     * @override
     * @type {string} */
    skinId: 'JClicGreenSkin',
    //
    // Buttons and other graphical resources used by this skin:
    /**
     * Fill color for icons
     * @name GreenSkin#iconFill
     * @override
     * @type {string} */
    iconFill: '#20640E',
    /**
     * Fill-in color for counters
     * @name GreenSkin#counterIconFill
     * @override
     * @type {string} */
    counterIconFill: '#20640E',
    /**
     * Styles used in this skin
     * @name GreenSkin#skinCSS
     * @type {string} */
    skinCSS: '.ID {background-color:#4AFF19;}'
  })

  // Register this class in the list of available skins
  Skin.CLASSES['green'] = GreenSkin

  return GreenSkin
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/skins/MiniSkin.js":
/*!*******************************!*\
  !*** ./src/skins/MiniSkin.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : skins/MiniSkin.js
 *  Created : 05/07/2016
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ./Skin */ "./src/skins/Skin.js"),
  __webpack_require__(/*! ./DefaultSkin */ "./src/skins/DefaultSkin.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, Skin, DefaultSkin) {

  /**
   * This is a variant of the default {@link Skin} used by JClic.js
   * It differs from {@link DefaultSkin} in colors and sizes
   * @exports MiniSkin
   * @class
   * @extends DefaultSkin
   */
  class MiniSkin extends DefaultSkin {
    /**
     * MiniSkin constructor
     * 
     * @param {PlayStation} ps - The PlayStation (currently a {@link JClicPlayer}) used to load and
     * realize the media objects meeded tot build the Skin.
     * @param {string=} name - The skin class name
     * @param {object=} options - Optional parameter with additional options
     */
    constructor(ps, name = null, options = {}) {
      // MiniSkin extends [DefaultSkin](DefaultSkin.html)
      super(ps, name, Object.assign({}, options, { counters: false, reportsBtn: true }))
    }

    /**
     * Returns the CSS styles used by this skin. This method should be called only from
     * the `Skin` constructor, and overridded by subclasses if needed.
     * @param {string} media - A specific media size. Possible values are: 'default', 'half' and 'twoThirds'
     * @returns {string}
     */
    _getStyleSheets(media = 'default') {
      return super._getStyleSheets(media) + (media === 'default' ? this.skinCSS : '')
    }
  }

  Object.assign(MiniSkin.prototype, {
    /**
     * Class name of this skin. It will be used as a base selector in the definition of all CSS styles.
     * @name MiniSkin#skinId
     * @override
     * @type {string}
     */
    skinId: 'JClicMiniSkin',
    // Buttons and other graphical resources used by this skin.
    //
    /**
     * Icon width
     * @name MiniSkin#iconWidth
     * @override
     * @type {number} */
    iconWidth: 18,
    /**
     * Icon height
     * @name MiniSkin#iconHeight
     * @override
     * @type {number} */
    iconHeight: 18,
    /**
     * Fill color for icons
     * @name MiniSkin#iconFill
     * @override
     * @type {string} */
    iconFill: '#080808',
    /**
     * Fill-in color for counters
     * @name MiniSkin#counterIconFill
     * @override
     * @type {string} */
    counterIconFill: '#080808',
    /**
     * Default margin between elements
     * @name MiniSkin#margin
     * @override
     * @type {number} */
    margin: 8,
    /**
     * Styles used in this skin
     * @name MiniSkin#skinCSS
     * @type {string} */
    skinCSS: '\
.ID {background-color:#F4F4F4;}\
.ID .JClicPlayerCnt {margin:4px;}\
.ID .JClicCtrlCnt {margin:0 2px 4px 2px;}\
.ID .JClicMsgBox {height:25px;}',
    /**
     * Styles used in this skin, sized to half its regular size.
     * (_null_ here because MiniSkin it's already very small)
     * @name MiniSkin#mainCSSHalf
     * @override
     * @type {string} */
    mainCSSHalf: '',
    /**
     * Styles used in this skin, sized to two thirds of its regular size
     * (_null_ here because MiniSkin it's already very small)
     * @name MiniSkin#mainCSSTwoThirds
     * @override
     * @type {string} */
    mainCSSTwoThirds: '',
  })

  // Register this class in the list of available skins
  Skin.CLASSES['mini'] = MiniSkin

  return MiniSkin
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/skins/OrangeSkin.js":
/*!*********************************!*\
  !*** ./src/skins/OrangeSkin.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : skins/OrangeSkin.js
 *  Created : 04/07/2016
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ./Skin */ "./src/skins/Skin.js"),
  __webpack_require__(/*! ./DefaultSkin */ "./src/skins/DefaultSkin.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, Skin, DefaultSkin) {

  /**
   * This is a variant of the default {@link Skin} used by JClic.js
   * It differs from {@link DefaultSkin} only in some colors
   * @exports OrangeSkin
   * @class
   * @extends DefaultSkin
   */
  class OrangeSkin extends DefaultSkin {
    /**
     * OrangeSkin constructor
     * @param {PlayStation} ps - The PlayStation (currently a {@link JClicPlayer}) used to load and
     * realize the media objects meeded tot build the Skin.
     * @param {string=} name - The skin class name
     * @param {object=} options - Optional parameter with additional options
     */
    constructor(ps, name = null, options = {}) {
      // OrangeSkin extends [DefaultSkin](DefaultSkin.html)
      super(ps, name, options)
    }

    /**
     * Returns the CSS styles used by this skin. This method should be called only from
     * the `Skin` constructor, and overridded by subclasses if needed.
     * @param {string} media - A specific media size. Possible values are: 'default', 'half' and 'twoThirds'
     * @returns {string}
     */
    _getStyleSheets(media = 'default') {
      return super._getStyleSheets(media) + (media === 'default' ? this.skinCSS : '')
    }
  }

  Object.assign(OrangeSkin.prototype, {
    /**
     * Class name of this skin. It will be used as a base selector in the definition of all CSS styles.
     * @name OrangeSkin#skinId
     * @override
     * @type {string} */
    skinId: 'JClicOrangeSkin',
    /**
     * Styles used in this skin
     * @name OrangeSkin#skinCSS
     * @type {string} */
    skinCSS: '.ID {background-color:#FF8B19;}'
  })

  // Register this class in the list of available skins
  Skin.CLASSES['orange'] = OrangeSkin

  return OrangeSkin
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/skins/SimpleSkin.js":
/*!*********************************!*\
  !*** ./src/skins/SimpleSkin.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : skins/SimpleSkin.js
 *  Created : 04/07/2016
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! ./Skin */ "./src/skins/Skin.js"),
  __webpack_require__(/*! ./DefaultSkin */ "./src/skins/DefaultSkin.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, Skin, DefaultSkin) {

  /**
   * This is a variant of the default {@link Skin} used by JClic.js
   * It has the buttons at top, and don't has counters.
   * @exports SimpleSkin
   * @class
   * @extends DefaultSkin
   */
  class SimpleSkin extends DefaultSkin {
    /**
     * SimpleSkin constructor
     * @param {PlayStation} ps - The PlayStation (currently a {@link JClicPlayer}) used to load and
     * realize the media objects meeded tot build the Skin.
     * @param {string=} name - The skin class name
     * @param {object=} options - Optional parameter with additional options
     */
    constructor(ps, name = null, options = {}) {
      // OrangeSkin extends [DefaultSkin](DefaultSkin.html)
      super(ps, name, Object.assign({}, options, { counters: false, reportsBtn: true }))

      this.$ctrlCnt.detach().prependTo(this.$div)
      this.$msgBoxDiv.detach().appendTo(this.$div)
      // Add a spacing div in substitution of msgBox
      $('<div/>').css({ 'flex-grow': 1 }).insertAfter(this.$ctrlCnt.children(':nth-child(2)'))
    }

    /**
     * Returns the CSS styles used by this skin. This method should be called only from
     * the `Skin` constructor, and overridded by subclasses if needed.
     * @param {string} media - A specific media size. Possible values are: 'default', 'half' and 'twoThirds'
     * @returns {string}
     */
    _getStyleSheets(media = 'default') {
      return `${super._getStyleSheets(media)}${media === 'default' ? this.skinCSS : media === 'half' ? this.skinCSSHalf : media === 'twoThirds' ? this.skinCSSTwoThirds : ''}`
    }
  }

  Object.assign(SimpleSkin.prototype, {
    /**
     * Class name of this skin. It will be used as a base selector in the definition of all CSS styles.
     * @name SimpleSkin#skinId
     * @override
     * @type {string} */
    skinId: 'JClicSimpleSkin',
    /**
     * Styles used in this skin
     * @name SimpleSkin#skinCSS
     * @type {string} */
    skinCSS: '\
.ID {background-color:#888888;}\
.ID .JClicCtrlCnt {margin:9px;}\
.ID .JClicPlayerCnt {margin:0px 18px 18px;}\
.ID .JClicMsgBox {flex-grow:0; margin:0 18px 18px 18px;}',
    skinCSSHalf: '\
.ID .JClicCtrlCnt {margin:4px;}\
.ID .JClicPlayerCnt {margin:0px 9px 9px;}\
.ID .JClicMsgBox {margin:0 9px 9px 9px;}',
    skinCSSTwoThirds: '\
.ID .JClicCtrlCnt {margin:6px;}\
.ID .JClicPlayerCnt {margin:0px 12px 12px;}\
.ID .JClicMsgBox {margin:0 12px 12px 12px;}',
  })

  // Register this class in the list of available skins
  Skin.CLASSES['simple'] = SimpleSkin

  return SimpleSkin

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ }),

/***/ "./src/skins/Skin.js":
/*!***************************!*\
  !*** ./src/skins/Skin.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 *  File    : skins/Skin.js
 *  Created : 29/04/2015
 *  By      : Francesc Busquets <francesc@gmail.com>
 *
 *  JClic.js
 *  An HTML5 player of JClic activities
 *  https://projectestac.github.io/jclic.js
 *
 *  @source https://github.com/projectestac/jclic.js
 *
 *  @license EUPL-1.1
 *  @licstart
 *  (c) 2000-2018 Catalan Educational Telematic Network (XTEC)
 *
 *  Licensed under the EUPL, Version 1.1 or -as soon they will be approved by
 *  the European Commission- subsequent versions of the EUPL (the "Licence");
 *  You may not use this work except in compliance with the Licence.
 *
 *  You may obtain a copy of the Licence at:
 *  https://joinup.ec.europa.eu/software/page/eupl
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the Licence is distributed on an "AS IS" basis, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  Licence for the specific language governing permissions and limitations
 *  under the Licence.
 *  @licend
 */

/* global define, document */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
  __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"),
  __webpack_require__(/*! clipboard-js */ "./node_modules/clipboard-js/clipboard.js"),
  __webpack_require__(/*! ../Utils */ "./src/Utils.js"),
  __webpack_require__(/*! ../AWT */ "./src/AWT.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, clipboard, Utils, AWT) {

  /**
   * This abstract class manages the layout, position ans size of the visual components of JClic:
   * player window, message box, counters, buttons, status... and also the appearance of the main
   * container.
   * The basic implementation of Skin is {@link DefaultSkin}.
   * @exports Skin
   * @class
   * @abstract
   * @extends AWT.Container
   */
  class Skin extends AWT.Container {
    /**
     * Skin constructor
     * @param {PlayStation} ps - The `PlayStation` (currently a {@link JClicPlayer}) used to load and
     * realize the media objects needed tot build the Skin.
     * @param {string=} name - The skin name
     * @param {object=} options - Optional parameter with additional options
     */
    constructor(ps, name = null, options = {}) {

      // Skin extends [AWT.Container](AWT.html)
      super()

      // Save parameters for later use
      this.ps = ps
      if (name !== null)
        this.name = name
      this.options = options

      if (this.options.skinId)
        this.skinId = this.options.skinId;

      if (!Skin.registerStyleSheet(this.skinId, ps)) {
        let css = this._getStyleSheets('default')
        let twoThirds = this._getStyleSheets('twoThirds')
        if (twoThirds.length > 0)
          css += ` @media (max-width:${this.twoThirdsMedia.width}px),(max-height:${this.twoThirdsMedia.height}px){${twoThirds}}`
        let half = this._getStyleSheets('half')
        if (half.length > 0)
          css += ` @media (max-width:${this.halfMedia.width}px),(max-height:${this.halfMedia.height}px){${half}}`
        Utils.appendStyleAtHead(css.replace(/\.ID/g, `.${this.skinId}`), ps)
      }

      let msg = ''

      this.$div = $('<div/>', { class: this.skinId })
      this.$playerCnt = $('<div/>', { class: 'JClicPlayerCnt' })

      // Add waiting panel and progress bar
      this.$progress = $('<progress/>', { class: 'progressBar' })
        .css({ display: 'none' })
      this.$waitPanel = $('<div/>')
        .css({ display: 'none', 'background-color': 'rgba(255, 255, 255, .60)', 'z-index': 99 })
        .append($('<div/>', { class: 'waitPanel' }).css({ display: 'flex', 'flex-direction': 'column' })
          .append($('<div/>', { class: 'animImgBox' })
            .append($(this.waitImgBig), $(this.waitImgSmall)))
          .append(this.$progress))
      this.$playerCnt.append(this.$waitPanel)

      this.buttons = Utils.cloneObject(Skin.prototype.buttons)
      this.counters = Utils.cloneObject(Skin.prototype.counters)
      this.msgArea = Utils.cloneObject(Skin.prototype.msgArea)

      // Create dialog overlay and panel
      this.$dlgOverlay = $('<div/>', { class: 'dlgOverlay' }).css({
        'z-index': 98,
        position: 'fixed',
        left: 0,
        top: 0,
        width: '100%',
        height: '100%',
        display: 'none',
        'background-color': 'rgba(30,30,30,0.7)'
      }).on('click', () => {
        if (!this._isModalDlg)
          // Non-modal dialogs are closed on click outside the main area
          this._closeDlg(true)
        return false
      })

      const $dlgDiv = $('<div/>', {
        class: 'dlgDiv',
        role: 'dialog',
        'aria-labelledby': ps.getUniqueId('ReportsLb'),
        'aria-describedby': ps.getUniqueId('ReportsCnt')
      }).css({
        display: 'inline-block',
        position: 'relative',
        top: '50%',
        left: '50%',
        transform: 'translate(-50%, -50%)'
      }).on('click', () => {
        // Clicks not passed to parent
        return false
      })

      this.$dlgMainPanel = $('<div/>', { class: 'dlgMainPanel', id: ps.getUniqueId('ReportsCnt') })
      this.$dlgBottomPanel = $('<div/>', { class: 'dlgBottomPanel', role: 'navigation' })

      // Basic dialog structure:
      this.$div.append(
        this.$playerCnt,
        this.$dlgOverlay.append(
          $dlgDiv.append(
            this.$dlgMainPanel,
            this.$dlgBottomPanel)))

      msg = ps.getMsg('JClic logo')
      this.$infoHead = $('<div/>', { class: 'infoHead' })
        .append($('<div/>', { class: 'headTitle unselectableText' })
          .append($(this.appLogo, { 'aria-label': msg }).css({ width: '1.5em', height: '1.5em', 'vertical-align': 'bottom' })
            .dblclick(() => {
              // Double click on JClic logo is a hidden method to increase verbosity on Javascript console
              Utils.setLogLevel('all')
              Utils.log('trace', 'Log level set to "trace"')
            }))
          .append($('<span/>').html('JClic.js')))
        .append($('<p/>').css({ 'margin-top': 0, 'margin-left': '3.5em' })
          .append($('<a/>', { href: 'http://clic.xtec.cat/repo/index.html?page=info' }).html('http://clic.xtec.cat'))
          .append($('<br>'))
          .append($('<span/>').html(ps.getMsg('Version') + ' ' + this.ps.JClicVersion)))

      this.$reportsPanel = $('<div/>', { class: 'reportsPanel', role: 'document' })

      msg = ps.getMsg('Copy data to clipboard')
      this.$copyBtn = $('<button/>', { title: msg, 'aria-label': msg })
        .append($(this.copyIcon).css({ width: '26px', height: '26px' }))
        .on('click', () => {
          clipboard.copy({
            'text/plain': `===> ${ps.getMsg('The data has been copied in HTML format. Please paste them into a spreadsheet or in a rich text editor')} <===`,
            'text/html': this.$reportsPanel.html()
          })
          this.$copyBtn.parent().append(
            $('<div/>', { class: 'smallPopup' })
              .html(ps.getMsg('The data has been copied to clipboard'))
              .fadeIn()
              .delay(3000)
              .fadeOut(function () { $(this).remove() }))
        })

      msg = ps.getMsg('Close')
      this.$closeDlgBtn = $('<button/>', { title: msg, 'aria-label': msg })
        .append($(this.closeDialogIcon).css({ width: '26px', height: '26px' }))
        .on('click', () => this._closeDlg(true))

      msg = ps.getMsg('OK')
      this.$okDlgBtn = $('<button/>', { title: msg, 'aria-label': msg })
        .append($(this.okDialogIcon).css({ width: '26px', height: '26px' }))
        .on('click', () => this._closeDlg(true))

      msg = ps.getMsg('Cancel')
      this.$cancelDlgBtn = $('<button/>', { title: msg, 'aria-label': msg })
        .append($(this.closeDialogIcon).css({ width: '26px', height: '26px' }))
        .on('click', () => this._closeDlg(false))

      // Registers this Skin in the list of realized Skin objects
      Skin.skinStack.push(this)
    }

    /**
     * Checks if the provided stylesheet ID is already registered in the root node where the current player is placed
     * @param {String} skinId - The unique identifier of the skin to check
     * @param {PlayStation=} ps - An optional `PlayStation` (currently a {@link JClicPlayer}) used as a base to find the root node
     * @returns {Boolean} - _true_ when the skin stylesheet is already defined in the current root node, _false_ otherwise
     */
    static registerStyleSheet(skinId, ps) {
      let result = false
      const root = Utils.getRootHead(ps)
      if (!root['__JClicID'])
        root.__JClicID = `SK${Skin.lastId++}`

      let styles = Skin.rootStyles[root.__JClicID]
      if (!styles) {
        styles = []
        Skin.rootStyles[root.__JClicID] = styles
      }

      if (styles.indexOf(skinId) < 0) {
        Utils.log('trace', `Stylesheet "${skinId}" has been registered for root node labeled as "${root.__JClicID}"`)
        styles.push(skinId)
      } else
        result = true

      return result
    }

    /**
     * Gets the specified Skin from `skinStack`, or creates a new one if not found.
     * This function should be used only through `Skin.getSkin`
     * @param {string} skinName - The name of the searched skin
     * @param {PlayStation} ps - The PlayStation (usually a {@link JClicPlayer}) used to build the new skin.
     * @param {object=} options - Optional parameter with additional options
     * @returns {Skin}
     */
    static getSkin(skinName = 'default', ps, options = {}) {
      skinName = skinName || 'default'

      // Correct old skin names
      if (skinName.charAt(0, 1) === '@' && skinName.substr(-4) === '.xml')
        skinName = skinName.substr(1, skinName.length - 5)

      // look for the skin in the stack of realized skins
      if (skinName && ps) {
        // TODO: Check also `options`!
        const sk = Skin.skinStack.find(s => s.name === skinName && s.ps === ps)
        if (sk)
          return sk
      }

      // Locates the class of the requested Skin (or [DefaultSkin](DefaultSkin.html)
      // if not specified). When not found, a new one is created and registered in `skinStack`
      let cl = Skin.CLASSES[skinName]
      if (!cl) {
        // Process custom skin XML files
        const mbe = ps.project.mediaBag.getElement(skinName, false)
        if (mbe && mbe.data) {
          options = Object.assign({}, options, mbe.data)
          options.skinId = `JClic-${skinName.replace('.xml', '')}`;
        }

        if (!ps.zip
          && options.class === 'edu.xtec.jclic.skins.BasicSkin'
          && options.image
          && ps.project.mediaBag.getElement(options.image, false)
          && ps.project.mediaBag.getElement(options.image, false).data)
          cl = Skin.CLASSES.custom
        else {
          Utils.log('warn', `Unknown skin class: ${skinName}`)
          cl = Skin.CLASSES.default
        }
      }

      // Build and return the requested skin
      return new cl(ps, skinName, options)
    }

    /**
     * Returns the CSS styles used by this skin. This method should be called only from
     * the `Skin` constructor, and overridded by subclasses if needed.
     * @param {string} media - A specific media size. Possible values are: 'default', 'half' and 'twoThirds'
     * @returns {string}
     */
    _getStyleSheets(media = 'default') {
      return media === 'default' ? (this.basicCSS + this.waitAnimCSS + this.reportsCSS) : ''
    }

    /**
     * Attaches a {@link JClicPlayer} object to this Skin
     * @param {JClicPlayer} player
     */
    attach(player) {
      this.detach()
      if (player !== null && player.skin !== null)
        player.skin.detach()
      this.player = player
      this.$playerCnt.prepend(player.$div)
      this.setSkinSizes()
      player.$mainContainer.append(this.$div)
    }

    /**
     * Sets the 'size' CSS values (max, min and compulsory) to the main `div` of this skin
     * @param {boolean} full - `true` when the skin is in full screen mode
     */
    setSkinSizes(full) {
      const
        css = {},
        topHeight = this.player.$topDiv.height(),
        nilValue = this.player.fullScreenChecked ? 'inherit' : null

      // When `full` no set, detect the current status
      if (typeof full === 'undefined')
        full = document && document.fullscreenElement ? true : false;

      Utils.toCssSize(full ? '100vw' : this.ps.options.minWidth, css, 'min-width', nilValue)
      Utils.toCssSize(full ? '100vh' : this.ps.options.minHeight, css, 'min-height', nilValue)
      Utils.toCssSize(full ? '100vw' : this.ps.options.maxWidth, css, 'max-width', nilValue)
      Utils.toCssSize(full ? '100vh' : this.ps.options.maxHeight, css, 'max-height', nilValue)
      Utils.toCssSize(full ? '100vw' : this.ps.options.width, css, 'width', '100%')
      Utils.toCssSize(full ? '100vh' : this.ps.options.height, css, 'height', topHeight > 0 ? '100%' : '100vh')
      this.$div.css(css)
    }

    /**
     * Detaches the `player` element from this Skin
     */
    detach() {
      if (this.player !== null) {
        this.player.$div.remove()
        this.$div.detach()
        this.player = null
      }
    }

    /**
     * Updates the graphic contents of this skin.
     * This method should be called from {@link Skin#update}
     * @override
     * @param {AWT.Rectangle} dirtyRegion - Specifies the area to be updated. When `null`, it's the
     * whole panel.
     */
    updateContent(dirtyRegion) {
      if (this.$msgBoxDivCanvas) {
        const ctx = this.$msgBoxDivCanvas.get(-1).getContext('2d')
        ctx.clearRect(0, 0, ctx.canvas.clientWidth, ctx.canvas.clientHeight)
        this.msgBox.update(ctx, dirtyRegion)
      }
      return super.updateContent()
    }

    /**
     * Resets all counters
     * @param {boolean} bEnabled - Leave it enabled/disabled
     */
    resetAllCounters(bEnabled) {
      $.each(this.counters, (_name, counter) => {
        if (counter !== null) {
          counter.value = 0
          counter.countDown = 0
          counter.enabled = bEnabled
          counter.refreshDisplay()
        }
      })
    }

    /**
     * Sets/unsets the 'wait' state
     * @param {boolean} status - Whether to set or unset the wait status. When `undefined`, the
     * `waitCursorCount` member is evaluated to decide if the wait state should be activated or deactivated.
     */
    setWaitCursor(status) {
      if (typeof status === 'undefined') {
        if (this.$waitPanel)
          this.$waitPanel.css({
            display: this.waitCursorCount > 0 ? 'initial' : 'none'
          })
      } else {
        switch (status) {
          case true:
            this.waitCursorCount++
            break
          case false:
            if (--this.waitCursorCount < 0)
              this.waitCursorCount = 0
            break
          case 'reset':
            this.waitCursorCount = 0
            break
        }
        this.setWaitCursor()
      }
    }

    /**
     * Sets the current value of the progress bar
     * @param {number} val - The current value. Should be less or equal than `max`. When -1, the progress bar will be hidden.
     * @param {number=} max - Optional parameter representing the maximum value. When passed, the progress bar will be displayed.
     */
    setProgress(val, max) {
      if (this.$progress) {
        this.currentProgress = val
        if (val < 0)
          this.$progress.css({ display: 'none' })
        else {
          if (max) {
            this.maxProgress = max
            this.$progress.attr('max', max).css({ display: 'initial' })
          }
          this.$progress.attr('value', val)
        }
        Utils.log('trace', `Progress: ${this.currentProgress}/${this.maxProgress}`)
      }
    }

    /**
     * Increments the progress bar value by the specified amount, only when the progress bar is running.
     * @param {number=} val - The amount to increment. When not defined, it's 1.
     */
    incProgress(val) {
      if (this.currentProgress >= 0)
        this.setProgress(this.currentProgress + (val || 1))
    }

    /**
     * Shows a window with clues or help for the current activity
     * @param {external:jQuery} _$hlpComponent - A JQuery DOM element with the information to be shown.
     * It can be a string or number. When `null`, the help window (if any) must be closed.
     */
    showHelp(_$hlpComponent) {
      // TODO: Implement HelpWindow
    }

    /**
     * Shows a "dialog" panel, useful for displaying information or prompt something to users
     * @param {boolean} modal - When `true`, the dialog should be closed by any click outside the main panel
     * @param {object} options - This object should have two components: `main` and `bottom`, both
     * containing a jQuery HTML element (or array of elements) to be placed on the main and bottom panels
     * of the dialog.
     * @returns {Promise} - A Promise that will be fulfilled when the dialog is closed.
     */
    showDlg(modal, options) {
      return new Promise((resolve, reject) => {
        this._dlgOkValue = 'ok'
        this._dlgCancelValue = 'cancelled'
        this._isModalDlg = modal

        this.$dlgMainPanel.children().detach()
        this.$dlgBottomPanel.children().detach()
        if (options.main)
          this.$dlgMainPanel.append(options.main)
        if (options.bottom)
          this.$dlgBottomPanel.append(options.bottom)

        this._closeDlg = resolved => {
          if (resolved && resolve)
            resolve(this._dlgOkValue)
          else if (!resolved && reject)
            reject(this._dlgCancelValue)
          this.$dlgOverlay.css({ display: 'none' })
          this.enableMainButtons(true)
          this._closeDlg = Skin.prototype._closeDlg
        }
        this.enableMainButtons(false)
        this.$dlgOverlay.css({ display: 'initial' })
      })
    }

    /**
     * Enables or disables the `tabindex` attribute of the main buttons. Useful when a modal dialog
     * overlay is active, to avoid direct access to controls not related with the dialog.
     * @param {boolean} status - `true` to make main controls navigable, `false` otherwise
     */
    enableMainButtons(status) {
      this.$playerCnt.find('button').attr('tabindex', status ? '0' : '-1')
    }

    /**
     * Called when the dialog must be closed, usually only by Skin members.
     * This method is re-defined on each call to `showDlg`, so the `resolve` and `reject`
     * functions can be safely called.
     */
    _closeDlg() {
      // Do nothing
    }

    /**
     * Displays a dialog with a report of the current results achieved by the user.
     * @param {Reporter} reporter - The reporter system currently in use
     * @returns {Promise} - The Promise returned by {@link Skin.showDlg}.
     */
    showReports(reporter) {
      this.$reportsPanel.html(this.$printReport(reporter))
      return this.showDlg(false, {
        main: [this.$infoHead, this.$reportsPanel],
        bottom: [this.$copyBtn, this.$closeDlgBtn]
      })
    }

    /**
     * Formats the current report in a DOM tree, ready to be placed in `$reportsPanel`
     * @param {Reporter} reporter - The reporter system currently in use
     * @returns {external:jQuery[]} - An array of jQuery objects containing the full report
     */
    $printReport(reporter) {
      let result = []
      if (reporter) {
        const
          $html = Utils.$HTML,
          report = reporter.getData(),
          started = new Date(report.started)

        result.push($('<div/>', { class: 'subTitle', id: this.ps.getUniqueId('ReportsLb') }).html(this.ps.getMsg('Current results')))

        const $t = $('<table/>', { class: 'JCGlobalResults' })
        $t.append(
          $html.doubleCell(
            this.ps.getMsg('Session started:'),
            `${started.toLocaleDateString()} ${started.toLocaleTimeString()}`),
          $html.doubleCell(
            this.ps.getMsg('Reports system:'),
            `${this.ps.getMsg(report.descriptionKey)} ${report.descriptionDetail}`))
        if (report.userId)
          $t.append($html.doubleCell(
            this.ps.getMsg('User:'),
            report.userId))
        else if (report.user) // SCORM user
          $t.append($html.doubleCell(
            this.ps.getMsg('User:'),
            report.user))

        if (report.sequences > 0) {
          if (report.sessions.length > 1)
            $t.append($html.doubleCell(
              this.ps.getMsg('Projects:'),
              report.sessions.length))
          $t.append(
            $html.doubleCell(
              this.ps.getMsg('Sequences:'),
              report.sequences),
            $html.doubleCell(
              this.ps.getMsg('Activities done:'),
              report.activitiesDone),
            $html.doubleCell(
              this.ps.getMsg('Activities played at least once:'),
              `${report.playedOnce}/${report.reportable} (${Utils.getPercent(report.ratioPlayed / 100)})`))
          if (report.activitiesDone > 0) {
            $t.append($html.doubleCell(
              this.ps.getMsg('Activities solved:'),
              `${report.activitiesSolved} (${Utils.getPercent(report.ratioSolved / 100)})`))
            if (report.actScore > 0)
              $t.append(
                $html.doubleCell(
                  this.ps.getMsg('Partial score:'),
                  `${Utils.getPercent(report.partialScore / 100)} ${this.ps.getMsg('(out of played activities)')}`),
                $html.doubleCell(
                  this.ps.getMsg('Global score:'),
                  `${Utils.getPercent(report.globalScore / 100)} ${this.ps.getMsg('(out of all project activities)')}`))
            $t.append(
              $html.doubleCell(
                this.ps.getMsg('Total time in activities:'),
                Utils.getHMStime(report.time * 1000)),
              $html.doubleCell(
                this.ps.getMsg('Actions done:'),
                report.actions))
          }
          result.push($t)

          report.sessions.forEach(sr => {
            if (sr.sequences.length > 0) {
              const $t = $('<table/>', { class: 'JCDetailed' })
              result.push($('<p/>').html(report.sessions.length > 1 ? `${this.ps.getMsg('Project')} ${sr.projectName}` : ''))
              $t.append($('<thead/>').append($('<tr/>').append(
                $html.th(this.ps.getMsg('sequence')),
                $html.th(this.ps.getMsg('activity')),
                $html.th(this.ps.getMsg('OK')),
                $html.th(this.ps.getMsg('actions')),
                $html.th(this.ps.getMsg('score')),
                $html.th(this.ps.getMsg('time')))))

              sr.sequences.forEach(seq => {
                let $tr = $('<tr/>').append($('<td/>', { rowspan: seq.activities.length }).html(seq.sequence))
                seq.activities.forEach(act => {
                  if (act.closed) {
                    $tr.append($html.td(act.name))
                    $tr.append(act.solved ? $html.td(this.ps.getMsg('YES'), 'ok') : $html.td(this.ps.getMsg('NO'), 'no'))
                    $tr.append($html.td(act.actions))
                    $tr.append($html.td(Utils.getPercent(act.precision / 100)))
                    $tr.append($html.td(Utils.getHMStime(act.time * 1000)))
                  } else {
                    $tr.append($html.td(act.name, 'incomplete'))
                    for (let r = 0; r < 4; r++)
                      $tr.append($html.td('-', 'incomplete'))
                  }
                  $t.append($tr)
                  $tr = $('<tr/>')
                })
              })

              $t.append($('<tr/>').append(
                $html.td(this.ps.getMsg('Total:')),
                $html.td(`${sr.played} (${Utils.getPercent(sr.ratioPlayed / 100)})`),
                $html.td(`${sr.solved} (${Utils.getPercent(sr.ratioSolved / 100)})`),
                $html.td(sr.actions),
                $html.td(Utils.getPercent(sr.score / 100)),
                $html.td(Utils.getHMStime(sr.time * 1000))))

              result.push($t)
            }
          }, this)
        } else
          result.push($('<p/>').html(this.ps.getMsg('No activities done!')))
      }
      return result
    }

    /**
     * Enables or disables a specific counter
     * @param {string} counter - Which counter
     * @param {boolean} bEnabled - When `true`, the counter will be enabled.
     */
    enableCounter(counter, bEnabled) {
      if (this.counters[counter])
        this.counters[counter].setEnabled(bEnabled)
    }

    /**
     * Main method used to build the content of the skin. Resizes and places internal objects.
     */
    doLayout() {
      // Resize player
      this.player.doLayout()

      // Build ths canvas at the end of current thread, thus avoiding
      // invalid sizes due to incomplete layout of DOM objects
      if (this.$msgBoxDiv)
        window.setTimeout(() => {

          // Temporary remove canvas to let div get its natural size:
          if (this.$msgBoxDivCanvas)
            this.$msgBoxDivCanvas.remove()

          // Get current size of message box div without canvas
          const
            msgWidth = this.$msgBoxDiv.outerWidth(),
            msgHeight = this.$msgBoxDiv.outerHeight()

          // Replace existing canvas if size has changed
          if (this.$msgBoxDivCanvas === null ||
            this.msgBox.dim.widht !== msgWidth ||
            this.msgBox.dim.height !== msgHeight) {
            this.$msgBoxDivCanvas = $(`<canvas width="${msgWidth}" height="${msgHeight}"/>`)
            this.msgBox.setBounds(new AWT.Rectangle(0, 0, msgWidth + 1, msgHeight))
            this.msgBox.buildAccessibleElement(this.$msgBoxDivCanvas, this.$msgBoxDiv)
          }
          // restore canvas
          this.$msgBoxDiv.append(this.$msgBoxDivCanvas)
          this.updateContent()
        }, 0)
    }

    /**
     * adjusts the skin to the dimension of its `$div` container
     * @returns {AWT.Dimension} the new dimension of the skin
     */
    fit() {
      this.doLayout()
      return new AWT.Dimension(this.$div.width(), this.$div.height())
    }

    /**
     * Sets or unsets the player in fullscreen mode, when allowed.
     * @param {boolean} status - Whether to set or unset the player in fullscreen mode. When `null`
     * or `undefined`, the status toggles between fullscreen and windowed modes.
     * @returns {boolean} `true` if the request was successful, `false` otherwise.
     */
    setScreenFull(status) {
      if (document && document.fullscreenEnabled && (
        status === true && !document.fullscreenElement ||
        status === false && !document.fullscreenElement ||
        status !== true && status !== false)) {
        // Save current value of fullScreen for later use
        const full = document.fullscreenElement ? true : false;
        if (!document.fullscreenElement) {
          const element = this.player.$mainContainer.get(-1);
          if (element && element.requestFullscreen)
            element.requestFullscreen();
        } else {
          if (document.exitFullscreen) {
            document.exitFullscreen();
          }
        }
        this.player.fullScreenChecked = true
        // Firefox don't updates `document.fullscreenElement` in real time, so use the saved value instead
        this.setSkinSizes(!full)
      }
    }

    /**
     * Method used to notify this skin that a specific action has changed its enabled/disabled status
     * @param {AWT.Action} _action - The action originating the change event
     */
    actionStatusChanged(act) {
      if (act.name && this.buttons[act.name])
        this.setEnabled(this.buttons[act.name], act.enabled)
    }

    /**
     * Enables or disables an object
     * @param {external:jQuery} $object - A JQuery DOM element
     * @override
     * @param {boolean} enabled
     */
    setEnabled($object, enabled) {
      if ($object && enabled)
        $object.removeAttr('disabled')
      else if ($object)
        $object.attr('disabled', true)
    }

    /**
     * Compares two Skin objects
     * @param {Skin} skin - The Skin to compare against this
     * @returns {boolean} - `true` if both skins are equivalent.
     */
    equals(skin) {
      return skin &&
        this.name === skin.name &&
        this.ps === skin.ps
    }

    /**
     * Gets the {@link ActiveBox} used to display the main messages of activities
     * @returns {ActiveBox}
     */
    getMsgBox() {
      return this.msgBox
    }

  }

  /**
   * Collection of realized __Skin__ objects.
   * @type {Skin[]}
   */
  Skin.skinStack = []

  /**
   * Collection of skin style sheets already registered on the current document
   * @type {Object}
   */
  Skin.rootStyles = {}

  /**
   * Counter used to label root nodes with unique IDs
   * @type {Number}
   */
  Skin.lastId = 1

  /**
   * List of classes derived from Skin. It should be filled by real skin classes at declaration time.
   * @type {object}
   */
  Skin.CLASSES = {}

  Object.assign(Skin.prototype, {
    /**
     * Class name of this skin. It will be used as a base selector in the definition of all CSS styles.
     * @name Skin#skinId
     * @type {string} */
    skinId: 'JClicBasicSkin',
    /**
     * The HTML div object used by this Skin
     * @name Skin#$div
     * @type {external:jQuery} */
    $div: null,
    /**
     * The HTML div where JClic Player will be placed
     * @name Skin#$playerCnt
     * @type {external:jQuery} */
    $playerCnt: null,
    /**
     * Current name of the skin.
     * @name Skin#name
     * @type {string} */
    name: 'default',
    /**
     * Specific options of this skin
     * @name Skin#options
     * @type {object} */
    options: {},
    /**
     * Name of the XML file used to retrieve the skin settings.
     * @name Skin#fileName
     * @type {string} */
    fileName: '',
    /**
     * Waiting panel, displayed while loading resources.
     * @name Skin#$waitPanel
     * @type {external:jQuery} */
    $waitPanel: null,
    /**
     * Graphic indicator of loading progress
     * @name Skin#$progress
     * @type {external:jQuery} */
    $progress: null,
    /**
     * Current value of the progress bar
     * @name Skin#currentProgress
     * @type {number} */
    currentProgress: -1,
    /**
     * Max value of the progress bar
     * @name Skin#maxProgress
     * @type {number} */
    maxProgress: 0,
    /**
     * The box used to display the main messages of JClic activities
     * @name DefaultSkin#msgBox
     * @type {ActiveBox} */
    msgBox: null,
    /**
     * The `div` DOM object where `msgBox` is located
     * @name DefaultSkin#$msgBoxDiv
     * @type {external:jQuery} */
    $msgBoxDiv: null,
    /*
     * An HTML `canvas` object created in `$msgBoxDiv`
     * @name DefaultSkin#$msgBoxDivCanvas
     * @type {external:jQuery} */
    $msgBoxDivCanvas: null,
    /**
     * Main panel used to display modal and non-modal dialogs
     * @name Skin#$dlgOverlay
     * @type {external:jQuery} */
    $dlgOverlay: null,
    /**
     * Main panel of dialogs, where relevant information must be placed
     * @name Skin#$dlgMainPanel
     * @type {external:jQuery} */
    $dlgMainPanel: null,
    /**
     * Bottom panel of dialogs, used for action buttons
     * @name Skin#$dlgBottomPanel
     * @type {external:jQuery} */
    $dlgBottomPanel: null,
    /**
     * Element usually used as header in dialogs, with JClic logo, name and version
     * @name Skin#infoHead
     * @type {external:jQuery} */
    $infoHead: null,
    /**
     * Iconic button used to copy content to clipboard
     * @name Skin#$copyBtn
     * @type {external:jQuery} */
    $copyBtn: null,
    /**
     * Iconic button used to close the dialog
     * @name Skin#$closeDlgBtn
     * @type {external:jQuery} */
    $closeDlgBtn: null,
    /**
     * OK dialog button
     * @name Skin#$okDlgBtn
     * @type {external:jQuery} */
    $okDlgBtn: null,
    /**
     * Cancel dialog button
     * @name Skin#$cancelDlgBtn
     * @type {external:jQuery} */
    $cancelDlgBtn: null,
    /**
     * Value to be returned by the dialog promise when the presented task is fulfilled
     * @name Skin#_dlgOkValue
     * @type {Object} */
    _dlgOkValue: null,
    /**
     * Value to be returned in user-canceled dialogs
     * @name Skin#_dlgCancelValue
     * @type {Object} */
    _dlgCancelValue: null,
    /**
     * Flag indicating if the current dialog is modal or not
     * @name Skin#_isModalDlg
     * @type {boolean} */
    _isModalDlg: false,
    /**
     * Div inside {@link $dlgOverlay} where JClicPlayer will place the information to be shown
     * @name Skin#$reportsPanel
     * @type {external:jQuery} */
    $reportsPanel: null,
    /**
     * The basic collection of buttons that most skins implement
     * @name Skin#buttons
     * @type {object} */
    buttons: {
      'prev': null,
      'next': null,
      'return': null,
      'reset': null,
      'info': null,
      'help': null,
      'audio': null,
      'about': null,
      'fullscreen': null,
      'close': null
    },
    /**
     * The collection of counters
     * @name Skin#counters
     * @type {object} */
    counters: {
      'actions': null,
      'score': null,
      'time': null
    },
    /**
     * The collection of message areas
     * @name Skin#msgArea
     * @type {object} */
    msgArea: {
      'main': null,
      'aux': null,
      'mem': null
    },
    /**
     * The {@link JClicPlayer} object associated to this skin
     * @name Skin#player
     * @type {JClicPlayer} */
    player: null,
    /**
     * The {@link http://projectestac.github.io/jclic/apidoc/edu/xtec/jclic/PlayStation.html|PlayStation}
     * used by this Skin. Usually, the same as `player`
     * @name Skin#ps
     * @type {PlayStation} */
    ps: null,
    /**
     * Counter to be incremented or decremented as `waitCursor` is requested or released.
     * @name Skin#waitCursorCount
     * @type {number} */
    waitCursorCount: 0,
    //
    // Buttons and other graphical resources used by this skin.
    //
    /**
     * Main styles
     * @name Skin#basicCSS
     * @type {string} */
    basicCSS: '\
.ID {width:100%; background-color:#3F51B5; display:-webkit-flex; display:flex; -webkit-flex-direction:column; flex-direction:column;}\
.ID .JClicPlayerCnt {background-color:lightblue; margin:18px; -webkit-flex-grow:1; flex-grow:1; position:relative;}\
.ID .JClicPlayerCnt > div {position:absolute; width:100%; height:100%;}\
.ID button:not(.StockBtn) {background:transparent; padding:0; border:none; box-shadow:none; text-shadow:none;}\
.ID .unselectableText {-webkit-user-select:none; -moz-user-select:none; -ms-user-select:none; user-select:none;}\
.ID .progressBar {width: 250px}',
    /**
     * Waiting screen styles
     * @name Skin#waitAnimCSS
     * @type {string} */
    waitAnimCSS: '\
.ID .waitPanel {display:-webkit-flex; display:flex; width:100%; height:100%; -webkit-justify-content:center; justify-content:center; -webkit-align-items:center; align-items:center;}\
.ID .animImgBox {position:relative; width:300px; height:300px; max-width:80%; max-height:80%;}\
.ID .animImgBox svg {position:absolute; width:100%; height:100%; animation-iteration-count:infinite; animation-timing-function:linear;}\
.ID #waitImgBig {animation-duration:0.8s; animation-name:rotate-right;}\
@keyframes rotate-right {from {transform:rotate(0);} to {transform:rotate(1turn);}}\
.ID #waitImgSmall {animation-duration:0.6s; animation-name:rotate-left;}\
@keyframes rotate-left {from {transform:rotate(0);} to {transform:rotate(-1turn);}}',
    /**
     * Animated image displayed while loading resources
     * Based on Ryan Allen's [svg-spinner](http://articles.dappergentlemen.com/2015/01/13/svg-spinner/)
     * @name Skin#waitImgBig
     * @type {string} */
    waitImgBig: '<svg id="waitImgBig" viewBox="0 0 80 80" xmlns="http://www.w3.org/2000/svg">\
<path fill="#3F51B5" d="m 65.99,40.19 c -0.42,5.33 7.80,4.94 8.11,0.20 C 74.50,34.37 66.35,8.59 42.92,\
7.98 15.90,7.29 9.96,29.50 9.94,39.41 15.33,-1.66 68.61,7.048 65.99,40.19 Z" />\
</svg>',
    /**
     * Animated image displayed while loading resources (small)
     * @name Skin#waitImgSmall
     * @type {string} */
    waitImgSmall: '<svg id="waitImgSmall" viewBox="0 0 80 80" xmlns="http://www.w3.org/2000/svg">\
<path fill="#3F51B5"d="m 57.00,39.43 c -0.28,-3.53 5.16,-3.27 5.37,-0.13 0.26,3.99 -5.13,21.04 -20.63,\
21.44 C 23.85,61.19 19.93,46.50 19.92,39.94 23.48,67.11 58.73,61.35 57.00,39.43 Z"/>\
</svg>',
    /**
     * Reports screen styles
     * @name Skin#reportsCSS
     * @type {string} */
    reportsCSS: '\
.ID .dlgDiv {background-color:#efefef; color:#757575; font-family:Roboto,sans-serif; font-size:10pt; line-height:normal;}\
.ID .dlgDiv a,a:visited,a:active,a:hover {text-decoration:none; color:inherit;}\
.ID .dlgMainPanel {padding:1em 2em; max-height:calc(100vh - 8em); max-width:calc(100vw - 2em); min-width:20em; overflow:auto;}\
.ID .dlgMainPanel .headTitle {font-size:2.5em; font-weight:bold; margin:auto;}\
.ID .dlgMainPanel .subTitle {font-size:1.4em; font-weight:bold; margin-bottom:0.5em;}\
.ID .dlgMainPanel p {font-size:1.1em; margin-bottom:0.5em;}\
.ID .dlgMainPanel table {table-layout:fixed; width:40em; margin:0.5em 0 1.7em 0; border-collapse:collapse;}\
.ID .dlgMainPanel select {min-width:20em; font-size:1.2em; font-family:Roboto,sans-serif; color:#757575;}\
.ID .dlgMainPanel input {margin-left:1em; font-size:1.2em; font-family:Roboto,sans-serif; border-color:lightgray;}\
.ID .infoHead {padding:1em 0em 0.5em;}\
.ID .JCGlobalResults td {padding:0.4em; border-bottom:1px solid #b6b6b6;}\
.ID .JCGlobalResults td:first-child {font-weight:600; width:14em;}\
.ID .JCDetailed td,th {border-bottom:1px solid #b6b6b6; padding:0.3em 0.4em; vertical-align:top; text-align:center; overflow:hidden; text-overflow:ellipsis;}\
.ID .JCDetailed thead {font-weight:600;}\
.ID .JCDetailed th:first-child {width:7em;}\
.ID .JCDetailed th:nth-last-child(4) {width:4em;}\
.ID .JCDetailed th:nth-last-child(-n+3) {width:4.1em; text-align:right;}\
.ID .JCDetailed td:nth-last-child(-n+3) {text-align:right;}\
.ID .JCDetailed .ok {color:#4bae4f; font-weight:600;}\
.ID .JCDetailed .no {color:#f34235; font-weight:600;}\
.ID .JCDetailed tr:last-child {font-weight:bold;}\
.ID .JCDetailed .incomplete {font-style:italic;}\
.ID .dlgBottomPanel {height:3.5em; background-color:white; padding:0.5em; font-weight:bold; text-align:right; border-top:1px solid #eee; position:relative;}\
.ID .dlgBottomPanel .smallPopup {background-color:#222; color:#ddd; padding:0.5em; font-size:0.9em; position:absolute; right:6em; top:1em;}\
.ID .dlgBottomPanel button {display:inline-block; padding:10px; cursor:pointer; line-height:0;}\
.ID .dlgBottomPanel button:hover {background-color:#eee; border-radius:80px;}\
.ID .dlgBottomPanel button:active {background-color:#b3e5fc;}',
    //
    // Icons used in buttons:
    //
    /**
     * Icon for 'close dialog' button
     * @name Skin#closeDialogIcon
     * @type {string} */
    closeDialogIcon: '<svg fill="#757575" viewBox="0 0 24 24" width="36" height="36" xmlns="http://www.w3.org/2000/svg">\
<path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>\
</svg>',
    /**
     * Icon for 'ok' button
     * @name Skin#okDialogIcon
     * @type {string} */
    okDialogIcon: '<svg fill="#757575" viewBox="0 0 24 24" width="36" height="36" xmlns="http://www.w3.org/2000/svg">\
<path d="M9 16.2L4.8 12l-1.4 1.4L9 19 21 7l-1.4-1.4L9 16.2z"/>\
</svg>',
    /**
     * Icon for 'copy' button
     * @name Skin#copyIcon
     * @type {string} */
    copyIcon: '<svg fill="#757575" viewBox="0 0 24 24" width="36" height="36" xmlns="http://www.w3.org/2000/svg">\
<path d="M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z"/>\
</svg>',
    /**
     * JClic logo
     * @name Skin#appLogo
     * @type {string} */
    appLogo: '<svg viewBox="0 0 64 64" xmlns="http://www.w3.org/2000/svg"><g transform="matrix(.02081 0 0-.02081 5 62.33)">\
<path d="m1263 1297l270 1003 996-267-267-990c-427-1583-2420-1046-1999 519 3 11 999-266 999-266z" fill="none" stroke="#9d6329" stroke-linejoin="round" stroke-linecap="round" stroke-width="180" stroke-miterlimit="3.864"/>\
<path d="m1263 1297l270 1003 996-267-267-990c-427-1583-2420-1046-1998 519 3 11 999-266 999-266" fill="#f89c0e"/>\
<path d="m357 2850l1000-268-267-992-1000 266 267 994z" fill="none" stroke="#86882b" stroke-linejoin="round" stroke-linecap="round" stroke-width="180" stroke-miterlimit="3.864"/>\n\
<path d="m357 2850l1000-268-267-992-1000 266 267 994" fill="#d9e70c"/>\n\
</g></svg>',
    /**
     * Screen sizes (width and height) below which will half sized elements will be used
     * @name DefaultSkin#halfMedia
     * @type {object} */
    halfMedia: { width: 376, height: 282 },
    /**
     * Screen sizes (width and height) below which will two-thirds sized elements will be used
     * @name DefaultSkin#twoThirdsMedia
     * @type {object} */
    twoThirdsMedia: { width: 420, height: 315 },
  })

  return Skin
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))


/***/ })

/******/ });
//# sourceMappingURL=jclic-es6.js.map