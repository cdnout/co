"use strict";var events=require("events"),Iterator=require("obliterator/iterator"),take=require("obliterator/take"),chain=require("obliterator/chain");function _interopDefaultLegacy(t){return t&&"object"==typeof t&&"default"in t?t:{default:t}}var Iterator__default=_interopDefaultLegacy(Iterator),take__default=_interopDefaultLegacy(take),chain__default=_interopDefaultLegacy(chain);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _inheritsLoose(t,e){t.prototype=Object.create(e.prototype),_setPrototypeOf(t.prototype.constructor=t,e)}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(t){return!1}}function _construct(t,e,r){return(_construct=_isNativeReflectConstruct()?Reflect.construct:function(t,e,r){var n=[null];n.push.apply(n,e);n=new(Function.bind.apply(t,n));return r&&_setPrototypeOf(n,r.prototype),n}).apply(null,arguments)}function _isNativeFunction(t){return-1!==Function.toString.call(t).indexOf("[native code]")}function _wrapNativeSuper(t){var r="function"==typeof Map?new Map:void 0;return(_wrapNativeSuper=function(t){if(null===t||!_isNativeFunction(t))return t;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==r){if(r.has(t))return r.get(t);r.set(t,e)}function e(){return _construct(t,arguments,_getPrototypeOf(this).constructor)}return e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),_setPrototypeOf(e,t)})(t)}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function assignPolyfill(){for(var t=arguments[0],e=1,r=arguments.length;e<r;e++)if(arguments[e])for(var n in arguments[e])t[n]=arguments[e][n];return t}var assign=assignPolyfill;function getMatchingEdge(t,e,r,n){t=t._nodes.get(e),e=null;return t?e="mixed"===n?t.out&&t.out[r]||t.undirected&&t.undirected[r]:"directed"===n?t.out&&t.out[r]:t.undirected&&t.undirected[r]:e}function isGraph(t){return null!==t&&"object"===_typeof(t)&&"function"==typeof t.addUndirectedEdgeWithKey&&"function"==typeof t.dropNode}function isPlainObject(t){return"object"===_typeof(t)&&null!==t&&t.constructor===Object}function isEmpty(t){for(var e in t)return!1;return!0}function privateProperty(t,e,r){Object.defineProperty(t,e,{enumerable:!1,configurable:!1,writable:!0,value:r})}function readOnlyProperty(t,e,r){var n={enumerable:!0,configurable:!0};"function"==typeof r?n.get=r:(n.value=r,n.writable=!1),Object.defineProperty(t,e,n)}function validateHints(t){return!!isPlainObject(t)&&!(t.attributes&&!Array.isArray(t.attributes))}function incrementalIdStartingFromRandomByte(){var t=255&Math.floor(256*Math.random());return function(){return t++}}"function"==typeof Object.assign&&(assign=Object.assign);var GraphError=function(r){function t(t){var e=r.call(this)||this;return e.name="GraphError",e.message=t,e}return _inheritsLoose(t,r),t}(_wrapNativeSuper(Error)),InvalidArgumentsGraphError=function(e){function r(t){t=e.call(this,t)||this;return t.name="InvalidArgumentsGraphError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(_assertThisInitialized(t),r.prototype.constructor),t}return _inheritsLoose(r,e),r}(GraphError),NotFoundGraphError=function(e){function r(t){t=e.call(this,t)||this;return t.name="NotFoundGraphError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(_assertThisInitialized(t),r.prototype.constructor),t}return _inheritsLoose(r,e),r}(GraphError),UsageGraphError=function(e){function r(t){t=e.call(this,t)||this;return t.name="UsageGraphError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(_assertThisInitialized(t),r.prototype.constructor),t}return _inheritsLoose(r,e),r}(GraphError);function MixedNodeData(t,e){this.key=t,this.attributes=e,this.clear()}function DirectedNodeData(t,e){this.key=t,this.attributes=e,this.clear()}function UndirectedNodeData(t,e){this.key=t,this.attributes=e,this.clear()}function EdgeData(t,e,r,n,i){this.key=e,this.attributes=i,this.undirected=t,this.source=r,this.target=n}MixedNodeData.prototype.clear=function(){this.inDegree=0,this.outDegree=0,this.undirectedDegree=0,this.in={},this.out={},this.undirected={}},DirectedNodeData.prototype.clear=function(){this.inDegree=0,this.outDegree=0,this.in={},this.out={}},UndirectedNodeData.prototype.clear=function(){this.undirectedDegree=0,this.undirected={}},EdgeData.prototype.attach=function(){var t="out",e="in";this.undirected&&(t=e="undirected");var r=this.source.key,n=this.target.key;(this.source[t][n]=this).undirected&&r===n||(this.target[e][r]=this)},EdgeData.prototype.attachMulti=function(){var t="out",e="in",r=this.source.key,n=this.target.key;this.undirected&&(t=e="undirected");var i=this.source[t],t=i[n];void 0!==t?((t.previous=this).next=t,(i[n]=this).target[e][r]=this):(i[n]=this).undirected&&r===n||(this.target[e][r]=this)},EdgeData.prototype.detach=function(){var t=this.source.key,e=this.target.key,r="out",n="in";this.undirected&&(r=n="undirected"),delete this.source[r][e],delete this.target[n][t]},EdgeData.prototype.detachMulti=function(){var t=this.source.key,e=this.target.key,r="out",n="in";this.undirected&&(r=n="undirected"),void 0===this.previous?void 0===this.next?(delete this.source[r][e],delete this.target[n][t]):(this.next.previous=void 0,this.source[r][e]=this.next,this.target[n][t]=this.next):(this.previous.next=this.next,void 0!==this.next&&(this.next.previous=this.previous))};var NODE=0,SOURCE=1,TARGET=2,OPPOSITE=3;function findRelevantNodeData(t,e,r,n,i,o,a){var d,c,u,h;if(n=""+n,r===NODE){if(!(d=t._nodes.get(n)))throw new NotFoundGraphError("Graph.".concat(e,': could not find the "').concat(n,'" node in the graph.'));u=i,h=o}else if(r===OPPOSITE){if(!(c=t._edges.get(i=""+i)))throw new NotFoundGraphError("Graph.".concat(e,': could not find the "').concat(i,'" edge in the graph.'));var s=c.source.key,p=c.target.key;if(n===s)d=c.target;else{if(n!==p)throw new NotFoundGraphError("Graph.".concat(e,': the "').concat(n,'" node is not attached to the "').concat(i,'" edge (').concat(s,", ").concat(p,")."));d=c.source}u=o,h=a}else{if(!(c=t._edges.get(n)))throw new NotFoundGraphError("Graph.".concat(e,': could not find the "').concat(n,'" edge in the graph.'));d=r===SOURCE?c.source:c.target,u=i,h=o}return[d,u,h]}function attachNodeAttributeGetter(t,n,i){t.prototype[n]=function(t,e,r){e=findRelevantNodeData(this,n,i,t,e,r),r=e[0],e=e[1];return r.attributes[e]}}function attachNodeAttributesGetter(t,r,n){t.prototype[r]=function(t,e){return findRelevantNodeData(this,r,n,t,e)[0].attributes}}function attachNodeAttributeChecker(t,n,i){t.prototype[n]=function(t,e,r){e=findRelevantNodeData(this,n,i,t,e,r),r=e[0],e=e[1];return r.attributes.hasOwnProperty(e)}}function attachNodeAttributeSetter(t,i,o){t.prototype[i]=function(t,e,r,n){e=findRelevantNodeData(this,i,o,t,e,r,n),r=e[0],n=e[1],e=e[2];return r.attributes[n]=e,this.emit("nodeAttributesUpdated",{key:r.key,type:"set",attributes:r.attributes,name:n}),this}}function attachNodeAttributeUpdater(t,i,o){t.prototype[i]=function(t,e,r,n){t=findRelevantNodeData(this,i,o,t,e,r,n),e=t[0],r=t[1],n=t[2];if("function"!=typeof n)throw new InvalidArgumentsGraphError("Graph.".concat(i,": updater should be a function."));t=e.attributes,n=n(t[r]);return t[r]=n,this.emit("nodeAttributesUpdated",{key:e.key,type:"set",attributes:e.attributes,name:r}),this}}function attachNodeAttributeRemover(t,n,i){t.prototype[n]=function(t,e,r){e=findRelevantNodeData(this,n,i,t,e,r),r=e[0],e=e[1];return delete r.attributes[e],this.emit("nodeAttributesUpdated",{key:r.key,type:"remove",attributes:r.attributes,name:e}),this}}function attachNodeAttributesReplacer(t,n,i){t.prototype[n]=function(t,e,r){e=findRelevantNodeData(this,n,i,t,e,r),r=e[0],e=e[1];if(!isPlainObject(e))throw new InvalidArgumentsGraphError("Graph.".concat(n,": provided attributes are not a plain object."));return r.attributes=e,this.emit("nodeAttributesUpdated",{key:r.key,type:"replace",attributes:r.attributes}),this}}function attachNodeAttributesMerger(t,n,i){t.prototype[n]=function(t,e,r){e=findRelevantNodeData(this,n,i,t,e,r),r=e[0],e=e[1];if(!isPlainObject(e))throw new InvalidArgumentsGraphError("Graph.".concat(n,": provided attributes are not a plain object."));return assign(r.attributes,e),this.emit("nodeAttributesUpdated",{key:r.key,type:"merge",attributes:r.attributes,data:e}),this}}function attachNodeAttributesUpdater(t,n,i){t.prototype[n]=function(t,e,r){e=findRelevantNodeData(this,n,i,t,e,r),r=e[0],e=e[1];if("function"!=typeof e)throw new InvalidArgumentsGraphError("Graph.".concat(n,": provided updater is not a function."));return r.attributes=e(r.attributes),this.emit("nodeAttributesUpdated",{key:r.key,type:"update",attributes:r.attributes}),this}}var NODE_ATTRIBUTES_METHODS=[{name:function(t){return"get".concat(t,"Attribute")},attacher:attachNodeAttributeGetter},{name:function(t){return"get".concat(t,"Attributes")},attacher:attachNodeAttributesGetter},{name:function(t){return"has".concat(t,"Attribute")},attacher:attachNodeAttributeChecker},{name:function(t){return"set".concat(t,"Attribute")},attacher:attachNodeAttributeSetter},{name:function(t){return"update".concat(t,"Attribute")},attacher:attachNodeAttributeUpdater},{name:function(t){return"remove".concat(t,"Attribute")},attacher:attachNodeAttributeRemover},{name:function(t){return"replace".concat(t,"Attributes")},attacher:attachNodeAttributesReplacer},{name:function(t){return"merge".concat(t,"Attributes")},attacher:attachNodeAttributesMerger},{name:function(t){return"update".concat(t,"Attributes")},attacher:attachNodeAttributesUpdater}];function attachNodeAttributesMethods(r){NODE_ATTRIBUTES_METHODS.forEach(function(t){var e=t.name,t=t.attacher;t(r,e("Node"),NODE),t(r,e("Source"),SOURCE),t(r,e("Target"),TARGET),t(r,e("Opposite"),OPPOSITE)})}function attachEdgeAttributeGetter(t,o,a){t.prototype[o]=function(t,e){var r;if("mixed"!==this.type&&"mixed"!==a&&a!==this.type)throw new UsageGraphError("Graph.".concat(o,": cannot find this type of edges in your ").concat(this.type," graph."));if(2<arguments.length){if(this.multi)throw new UsageGraphError("Graph.".concat(o,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var n=""+t,i=""+e;if(e=arguments[2],!(r=getMatchingEdge(this,n,i,a)))throw new NotFoundGraphError("Graph.".concat(o,': could not find an edge for the given path ("').concat(n,'" - "').concat(i,'").'))}else{if("mixed"!==a)throw new UsageGraphError("Graph.".concat(o,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(!(r=this._edges.get(t=""+t)))throw new NotFoundGraphError("Graph.".concat(o,': could not find the "').concat(t,'" edge in the graph.'))}return r.attributes[e]}}function attachEdgeAttributesGetter(t,i,o){t.prototype[i]=function(t){if("mixed"!==this.type&&"mixed"!==o&&o!==this.type)throw new UsageGraphError("Graph.".concat(i,": cannot find this type of edges in your ").concat(this.type," graph."));if(1<arguments.length){if(this.multi)throw new UsageGraphError("Graph.".concat(i,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var e,r=""+t,n=""+arguments[1];if(!(e=getMatchingEdge(this,r,n,o)))throw new NotFoundGraphError("Graph.".concat(i,': could not find an edge for the given path ("').concat(r,'" - "').concat(n,'").'))}else{if("mixed"!==o)throw new UsageGraphError("Graph.".concat(i,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(!(e=this._edges.get(t=""+t)))throw new NotFoundGraphError("Graph.".concat(i,': could not find the "').concat(t,'" edge in the graph.'))}return e.attributes}}function attachEdgeAttributeChecker(t,o,a){t.prototype[o]=function(t,e){var r;if("mixed"!==this.type&&"mixed"!==a&&a!==this.type)throw new UsageGraphError("Graph.".concat(o,": cannot find this type of edges in your ").concat(this.type," graph."));if(2<arguments.length){if(this.multi)throw new UsageGraphError("Graph.".concat(o,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var n=""+t,i=""+e;if(e=arguments[2],!(r=getMatchingEdge(this,n,i,a)))throw new NotFoundGraphError("Graph.".concat(o,': could not find an edge for the given path ("').concat(n,'" - "').concat(i,'").'))}else{if("mixed"!==a)throw new UsageGraphError("Graph.".concat(o,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(!(r=this._edges.get(t=""+t)))throw new NotFoundGraphError("Graph.".concat(o,': could not find the "').concat(t,'" edge in the graph.'))}return r.attributes.hasOwnProperty(e)}}function attachEdgeAttributeSetter(t,a,d){t.prototype[a]=function(t,e,r){var n;if("mixed"!==this.type&&"mixed"!==d&&d!==this.type)throw new UsageGraphError("Graph.".concat(a,": cannot find this type of edges in your ").concat(this.type," graph."));if(3<arguments.length){if(this.multi)throw new UsageGraphError("Graph.".concat(a,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var i=""+t,o=""+e;if(e=arguments[2],r=arguments[3],!(n=getMatchingEdge(this,i,o,d)))throw new NotFoundGraphError("Graph.".concat(a,': could not find an edge for the given path ("').concat(i,'" - "').concat(o,'").'))}else{if("mixed"!==d)throw new UsageGraphError("Graph.".concat(a,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(!(n=this._edges.get(t=""+t)))throw new NotFoundGraphError("Graph.".concat(a,': could not find the "').concat(t,'" edge in the graph.'))}return n.attributes[e]=r,this.emit("edgeAttributesUpdated",{key:n.key,type:"set",attributes:n.attributes,name:e}),this}}function attachEdgeAttributeUpdater(t,a,d){t.prototype[a]=function(t,e,r){var n;if("mixed"!==this.type&&"mixed"!==d&&d!==this.type)throw new UsageGraphError("Graph.".concat(a,": cannot find this type of edges in your ").concat(this.type," graph."));if(3<arguments.length){if(this.multi)throw new UsageGraphError("Graph.".concat(a,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var i=""+t,o=""+e;if(e=arguments[2],r=arguments[3],!(n=getMatchingEdge(this,i,o,d)))throw new NotFoundGraphError("Graph.".concat(a,': could not find an edge for the given path ("').concat(i,'" - "').concat(o,'").'))}else{if("mixed"!==d)throw new UsageGraphError("Graph.".concat(a,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(!(n=this._edges.get(t=""+t)))throw new NotFoundGraphError("Graph.".concat(a,': could not find the "').concat(t,'" edge in the graph.'))}if("function"!=typeof r)throw new InvalidArgumentsGraphError("Graph.".concat(a,": updater should be a function."));return n.attributes[e]=r(n.attributes[e]),this.emit("edgeAttributesUpdated",{key:n.key,type:"set",attributes:n.attributes,name:e}),this}}function attachEdgeAttributeRemover(t,o,a){t.prototype[o]=function(t,e){var r;if("mixed"!==this.type&&"mixed"!==a&&a!==this.type)throw new UsageGraphError("Graph.".concat(o,": cannot find this type of edges in your ").concat(this.type," graph."));if(2<arguments.length){if(this.multi)throw new UsageGraphError("Graph.".concat(o,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var n=""+t,i=""+e;if(e=arguments[2],!(r=getMatchingEdge(this,n,i,a)))throw new NotFoundGraphError("Graph.".concat(o,': could not find an edge for the given path ("').concat(n,'" - "').concat(i,'").'))}else{if("mixed"!==a)throw new UsageGraphError("Graph.".concat(o,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(!(r=this._edges.get(t=""+t)))throw new NotFoundGraphError("Graph.".concat(o,': could not find the "').concat(t,'" edge in the graph.'))}return delete r.attributes[e],this.emit("edgeAttributesUpdated",{key:r.key,type:"remove",attributes:r.attributes,name:e}),this}}function attachEdgeAttributesReplacer(t,o,a){t.prototype[o]=function(t,e){var r;if("mixed"!==this.type&&"mixed"!==a&&a!==this.type)throw new UsageGraphError("Graph.".concat(o,": cannot find this type of edges in your ").concat(this.type," graph."));if(2<arguments.length){if(this.multi)throw new UsageGraphError("Graph.".concat(o,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var n=""+t,i=""+e;if(e=arguments[2],!(r=getMatchingEdge(this,n,i,a)))throw new NotFoundGraphError("Graph.".concat(o,': could not find an edge for the given path ("').concat(n,'" - "').concat(i,'").'))}else{if("mixed"!==a)throw new UsageGraphError("Graph.".concat(o,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(!(r=this._edges.get(t=""+t)))throw new NotFoundGraphError("Graph.".concat(o,': could not find the "').concat(t,'" edge in the graph.'))}if(!isPlainObject(e))throw new InvalidArgumentsGraphError("Graph.".concat(o,": provided attributes are not a plain object."));return r.attributes=e,this.emit("edgeAttributesUpdated",{key:r.key,type:"replace",attributes:r.attributes}),this}}function attachEdgeAttributesMerger(t,o,a){t.prototype[o]=function(t,e){var r;if("mixed"!==this.type&&"mixed"!==a&&a!==this.type)throw new UsageGraphError("Graph.".concat(o,": cannot find this type of edges in your ").concat(this.type," graph."));if(2<arguments.length){if(this.multi)throw new UsageGraphError("Graph.".concat(o,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var n=""+t,i=""+e;if(e=arguments[2],!(r=getMatchingEdge(this,n,i,a)))throw new NotFoundGraphError("Graph.".concat(o,': could not find an edge for the given path ("').concat(n,'" - "').concat(i,'").'))}else{if("mixed"!==a)throw new UsageGraphError("Graph.".concat(o,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(!(r=this._edges.get(t=""+t)))throw new NotFoundGraphError("Graph.".concat(o,': could not find the "').concat(t,'" edge in the graph.'))}if(!isPlainObject(e))throw new InvalidArgumentsGraphError("Graph.".concat(o,": provided attributes are not a plain object."));return assign(r.attributes,e),this.emit("edgeAttributesUpdated",{key:r.key,type:"merge",attributes:r.attributes,data:e}),this}}function attachEdgeAttributesUpdater(t,o,a){t.prototype[o]=function(t,e){var r;if("mixed"!==this.type&&"mixed"!==a&&a!==this.type)throw new UsageGraphError("Graph.".concat(o,": cannot find this type of edges in your ").concat(this.type," graph."));if(2<arguments.length){if(this.multi)throw new UsageGraphError("Graph.".concat(o,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var n=""+t,i=""+e;if(e=arguments[2],!(r=getMatchingEdge(this,n,i,a)))throw new NotFoundGraphError("Graph.".concat(o,': could not find an edge for the given path ("').concat(n,'" - "').concat(i,'").'))}else{if("mixed"!==a)throw new UsageGraphError("Graph.".concat(o,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(!(r=this._edges.get(t=""+t)))throw new NotFoundGraphError("Graph.".concat(o,': could not find the "').concat(t,'" edge in the graph.'))}if("function"!=typeof e)throw new InvalidArgumentsGraphError("Graph.".concat(o,": provided updater is not a function."));return r.attributes=e(r.attributes),this.emit("edgeAttributesUpdated",{key:r.key,type:"update",attributes:r.attributes}),this}}var EDGE_ATTRIBUTES_METHODS=[{name:function(t){return"get".concat(t,"Attribute")},attacher:attachEdgeAttributeGetter},{name:function(t){return"get".concat(t,"Attributes")},attacher:attachEdgeAttributesGetter},{name:function(t){return"has".concat(t,"Attribute")},attacher:attachEdgeAttributeChecker},{name:function(t){return"set".concat(t,"Attribute")},attacher:attachEdgeAttributeSetter},{name:function(t){return"update".concat(t,"Attribute")},attacher:attachEdgeAttributeUpdater},{name:function(t){return"remove".concat(t,"Attribute")},attacher:attachEdgeAttributeRemover},{name:function(t){return"replace".concat(t,"Attributes")},attacher:attachEdgeAttributesReplacer},{name:function(t){return"merge".concat(t,"Attributes")},attacher:attachEdgeAttributesMerger},{name:function(t){return"update".concat(t,"Attributes")},attacher:attachEdgeAttributesUpdater}];function attachEdgeAttributesMethods(r){EDGE_ATTRIBUTES_METHODS.forEach(function(t){var e=t.name,t=t.attacher;t(r,e("Edge"),"mixed"),t(r,e("DirectedEdge"),"directed"),t(r,e("UndirectedEdge"),"undirected")})}var EDGES_ITERATION=[{name:"edges",type:"mixed"},{name:"inEdges",type:"directed",direction:"in"},{name:"outEdges",type:"directed",direction:"out"},{name:"inboundEdges",type:"mixed",direction:"in"},{name:"outboundEdges",type:"mixed",direction:"out"},{name:"directedEdges",type:"directed"},{name:"undirectedEdges",type:"undirected"}];function forEachSimple(t,e,r,n){for(var i in e)if(i!==n){var o=e[i],a=r(o.key,o.attributes,o.source.key,o.target.key,o.source.attributes,o.target.attributes,o.undirected);if(t&&a)return o.key}}function forEachMulti(t,e,r,n){var i,o,a,d,c;for(c in e)if(c!==n){i=e[c];do{if(o=i.source,a=i.target,d=r(i.key,i.attributes,o.key,a.key,o.attributes,a.attributes,i.undirected),t&&d)return i.key}while(void 0!==(i=i.next))}}function createIterator(e,r){var n,i=Object.keys(e),o=i.length,a=0;return new Iterator__default.default(function(){do{if(n)n=n.next;else{if(o<=a)return{done:!0};var t=i[a++];t!==r?n=e[t]:n=void 0}}while(!n);return{done:!1,value:{edge:n.key,attributes:n.attributes,source:n.source.key,target:n.target.key,sourceAttributes:n.source.attributes,targetAttributes:n.target.attributes,undirected:n.undirected}}})}function forEachForKeySimple(t,e,r,n){var i=e[r];if(i){e=i.source,r=i.target;return n(i.key,i.attributes,e.key,r.key,e.attributes,r.attributes,i.undirected)&&t?i.key:void 0}}function forEachForKeyMulti(t,e,r,n){var i=e[r];if(i){var o;do{if(o=n(i.key,i.attributes,i.source.key,i.target.key,i.source.attributes,i.target.attributes,i.undirected),t&&o)return i.key}while(void 0!==(i=i.next))}}function createIteratorForKey(t,e){var r=t[e];return void 0!==r.next?new Iterator__default.default(function(){if(!r)return{done:!0};var t={edge:r.key,attributes:r.attributes,source:r.source.key,target:r.target.key,sourceAttributes:r.source.attributes,targetAttributes:r.target.attributes,undirected:r.undirected};return r=r.next,{done:!1,value:t}}):Iterator__default.default.of({edge:r.key,attributes:r.attributes,source:r.source.key,target:r.target.key,sourceAttributes:r.source.attributes,targetAttributes:r.target.attributes,undirected:r.undirected})}function createEdgeArray(t,e){if(0===t.size)return[];if("mixed"===e||e===t.type)return"function"==typeof Array.from?Array.from(t._edges.keys()):take__default.default(t._edges.keys(),t._edges.size);for(var r,n="undirected"===e?t.undirectedSize:t.directedSize,i=new Array(n),o="undirected"===e,a=t._edges.values(),d=0;!0!==(r=a.next()).done;)(r=r.value).undirected===o&&(i[d++]=r.key);return i}function forEachEdge(t,e,r,n){if(0!==e.size)for(var i,o="mixed"!==r&&r!==e.type,a="undirected"===r,d=e._edges.values();!0!==(s=d.next()).done;)if(i=s.value,!o||i.undirected===a){var c=i.key,u=i.attributes,h=i.source,s=i.target,p=n(c,u,h.key,s.key,h.attributes,s.attributes,i.undirected);if(t&&p)return c}}function createEdgeIterator(t,e){if(0===t.size)return Iterator__default.default.empty();var r="mixed"!==e&&e!==t.type,n="undirected"===e,i=t._edges.values();return new Iterator__default.default(function(){for(var t,e;;){if((t=i.next()).done)return t;if(e=t.value,!r||e.undirected===n)break}return{value:{edge:e.key,attributes:e.attributes,source:e.source.key,target:e.target.key,sourceAttributes:e.source.attributes,targetAttributes:e.target.attributes,undirected:e.undirected},done:!1}})}function forEachEdgeForNode(t,e,r,n,i,o){var a,e=e?forEachMulti:forEachSimple;if("undirected"!==r){if("out"!==n&&(a=e(t,i.in,o),t&&a))return a;if("in"!==n&&(a=e(t,i.out,o,n?void 0:i.key),t&&a))return a}if("directed"!==r&&(a=e(t,i.undirected,o),t&&a))return a}function createEdgeArrayForNode(t,e,r,n){var i=[];return forEachEdgeForNode(!1,t,e,r,n,function(t){i.push(t)}),i}function createEdgeIteratorForNode(t,e,r){var n=Iterator__default.default.empty();return"undirected"!==t&&("out"!==e&&void 0!==r.in&&(n=chain__default.default(n,createIterator(r.in))),"in"!==e&&void 0!==r.out&&(n=chain__default.default(n,createIterator(r.out,e?void 0:r.key)))),n="directed"!==t&&void 0!==r.undirected?chain__default.default(n,createIterator(r.undirected)):n}function forEachEdgeForPath(t,e,r,n,i,o,a){var d,r=r?forEachForKeyMulti:forEachForKeySimple;if("undirected"!==e){if(void 0!==i.in&&"out"!==n&&(d=r(t,i.in,o,a),t&&d))return d;if(void 0!==i.out&&"in"!==n&&(n||i.key!==o)&&(d=r(t,i.out,o,a),t&&d))return d}if("directed"!==e&&void 0!==i.undirected&&(d=r(t,i.undirected,o,a),t&&d))return d}function createEdgeArrayForPath(t,e,r,n,i){var o=[];return forEachEdgeForPath(!1,t,e,r,n,i,function(t){o.push(t)}),o}function createEdgeIteratorForPath(t,e,r,n){var i=Iterator__default.default.empty();return"undirected"!==t&&(void 0!==r.in&&"out"!==e&&n in r.in&&(i=chain__default.default(i,createIteratorForKey(r.in,n))),void 0!==r.out&&"in"!==e&&n in r.out&&(e||r.key!==n)&&(i=chain__default.default(i,createIteratorForKey(r.out,n)))),i="directed"!==t&&void 0!==r.undirected&&n in r.undirected?chain__default.default(i,createIteratorForKey(r.undirected,n)):i}function attachEdgeArrayCreator(t,e){var n=e.name,i=e.type,o=e.direction;t.prototype[n]=function(t,e){if("mixed"!==i&&"mixed"!==this.type&&i!==this.type)return[];if(!arguments.length)return createEdgeArray(this,i);if(1===arguments.length){var r=this._nodes.get(t=""+t);if(void 0===r)throw new NotFoundGraphError("Graph.".concat(n,': could not find the "').concat(t,'" node in the graph.'));return createEdgeArrayForNode(this.multi,"mixed"===i?this.type:i,o,r)}if(2!==arguments.length)throw new InvalidArgumentsGraphError("Graph.".concat(n,": too many arguments (expecting 0, 1 or 2 and got ").concat(arguments.length,")."));e=""+e;r=this._nodes.get(t=""+t);if(!r)throw new NotFoundGraphError("Graph.".concat(n,':  could not find the "').concat(t,'" source node in the graph.'));if(!this._nodes.has(e))throw new NotFoundGraphError("Graph.".concat(n,':  could not find the "').concat(e,'" target node in the graph.'));return createEdgeArrayForPath(i,this.multi,o,r,e)}}function attachForEachEdge(t,e){var r=e.name,i=e.type,o=e.direction,a="forEach"+r[0].toUpperCase()+r.slice(1,-1);t.prototype[a]=function(t,e,r){if("mixed"===i||"mixed"===this.type||i===this.type){if(1===arguments.length)return forEachEdge(!1,this,i,r=t);if(2===arguments.length){r=e;var n=this._nodes.get(t=""+t);if(void 0===n)throw new NotFoundGraphError("Graph.".concat(a,': could not find the "').concat(t,'" node in the graph.'));return forEachEdgeForNode(!1,this.multi,"mixed"===i?this.type:i,o,n,r)}if(3!==arguments.length)throw new InvalidArgumentsGraphError("Graph.".concat(a,": too many arguments (expecting 1, 2 or 3 and got ").concat(arguments.length,")."));e=""+e;n=this._nodes.get(t=""+t);if(!n)throw new NotFoundGraphError("Graph.".concat(a,':  could not find the "').concat(t,'" source node in the graph.'));if(!this._nodes.has(e))throw new NotFoundGraphError("Graph.".concat(a,':  could not find the "').concat(e,'" target node in the graph.'));return forEachEdgeForPath(!1,i,this.multi,o,n,e,r)}};e="map"+r[0].toUpperCase()+r.slice(1);t.prototype[e]=function(){var t,d,c,e=Array.prototype.slice.call(arguments),u=e.pop();return 0===e.length?(t=0,"directed"!==i&&(t+=this.undirectedSize),"undirected"!==i&&(t+=this.directedSize),d=new Array(t),c=0,e.push(function(t,e,r,n,i,o,a){d[c++]=u(t,e,r,n,i,o,a)})):(d=[],e.push(function(t,e,r,n,i,o,a){d.push(u(t,e,r,n,i,o,a))})),this[a].apply(this,e),d};e="filter"+r[0].toUpperCase()+r.slice(1);t.prototype[e]=function(){var t=Array.prototype.slice.call(arguments),d=t.pop(),c=[];return t.push(function(t,e,r,n,i,o,a){d(t,e,r,n,i,o,a)&&c.push(t)}),this[a].apply(this,t),c};var n="reduce"+r[0].toUpperCase()+r.slice(1);t.prototype[n]=function(){var d,t,e=Array.prototype.slice.call(arguments);if(e.length<2||4<e.length)throw new InvalidArgumentsGraphError("Graph.".concat(n,": invalid number of arguments (expecting 2, 3 or 4 and got ").concat(e.length,")."));if("function"==typeof e[e.length-1]&&"function"!=typeof e[e.length-2])throw new InvalidArgumentsGraphError("Graph.".concat(n,": missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array."));2===e.length?(d=e[0],t=e[1],e=[]):3===e.length?(d=e[1],t=e[2],e=[e[0]]):4===e.length&&(d=e[2],t=e[3],e=[e[0],e[1]]);var c=t;return e.push(function(t,e,r,n,i,o,a){c=d(c,t,e,r,n,i,o,a)}),this[a].apply(this,e),c}}function attachFindEdge(t,e){var r=e.name,i=e.type,o=e.direction,a="find"+r[0].toUpperCase()+r.slice(1,-1);t.prototype[a]=function(t,e,r){if("mixed"!==i&&"mixed"!==this.type&&i!==this.type)return!1;if(1===arguments.length)return forEachEdge(!0,this,i,r=t);if(2===arguments.length){r=e;var n=this._nodes.get(t=""+t);if(void 0===n)throw new NotFoundGraphError("Graph.".concat(a,': could not find the "').concat(t,'" node in the graph.'));return forEachEdgeForNode(!0,this.multi,"mixed"===i?this.type:i,o,n,r)}if(3!==arguments.length)throw new InvalidArgumentsGraphError("Graph.".concat(a,": too many arguments (expecting 1, 2 or 3 and got ").concat(arguments.length,")."));e=""+e;n=this._nodes.get(t=""+t);if(!n)throw new NotFoundGraphError("Graph.".concat(a,':  could not find the "').concat(t,'" source node in the graph.'));if(!this._nodes.has(e))throw new NotFoundGraphError("Graph.".concat(a,':  could not find the "').concat(e,'" target node in the graph.'));return forEachEdgeForPath(!0,i,this.multi,o,n,e,r)};e="some"+r[0].toUpperCase()+r.slice(1,-1);t.prototype[e]=function(){var t=Array.prototype.slice.call(arguments),d=t.pop();return t.push(function(t,e,r,n,i,o,a){return d(t,e,r,n,i,o,a)}),!!this[a].apply(this,t)};r="every"+r[0].toUpperCase()+r.slice(1,-1);t.prototype[r]=function(){var t=Array.prototype.slice.call(arguments),d=t.pop();return t.push(function(t,e,r,n,i,o,a){return!d(t,e,r,n,i,o,a)}),!this[a].apply(this,t)}}function attachEdgeIteratorCreator(t,e){var r=e.name,n=e.type,i=e.direction,o=r.slice(0,-1)+"Entries";t.prototype[o]=function(t,e){if("mixed"!==n&&"mixed"!==this.type&&n!==this.type)return Iterator__default.default.empty();if(!arguments.length)return createEdgeIterator(this,n);if(1===arguments.length){var r=this._nodes.get(t=""+t);if(!r)throw new NotFoundGraphError("Graph.".concat(o,': could not find the "').concat(t,'" node in the graph.'));return createEdgeIteratorForNode(n,i,r)}if(2!==arguments.length)throw new InvalidArgumentsGraphError("Graph.".concat(o,": too many arguments (expecting 0, 1 or 2 and got ").concat(arguments.length,")."));e=""+e;r=this._nodes.get(t=""+t);if(!r)throw new NotFoundGraphError("Graph.".concat(o,':  could not find the "').concat(t,'" source node in the graph.'));if(!this._nodes.has(e))throw new NotFoundGraphError("Graph.".concat(o,':  could not find the "').concat(e,'" target node in the graph.'));return createEdgeIteratorForPath(n,i,r,e)}}function attachEdgeIterationMethods(e){EDGES_ITERATION.forEach(function(t){attachEdgeArrayCreator(e,t),attachForEachEdge(e,t),attachFindEdge(e,t),attachEdgeIteratorCreator(e,t)})}var NEIGHBORS_ITERATION=[{name:"neighbors",type:"mixed"},{name:"inNeighbors",type:"directed",direction:"in"},{name:"outNeighbors",type:"directed",direction:"out"},{name:"inboundNeighbors",type:"mixed",direction:"in"},{name:"outboundNeighbors",type:"mixed",direction:"out"},{name:"directedNeighbors",type:"directed"},{name:"undirectedNeighbors",type:"undirected"}];function CompositeSetWrapper(){this.A=null,this.B=null}function forEachInObjectOnce(t,e,r,n,i){for(var o in n){var a=n[o],o=a.source,a=a.target,a=o===r?a:o;if(!e||!e.has(a.key)){o=i(a.key,a.attributes);if(t&&o)return a.key}}}function forEachNeighbor(t,e,r,n,i){if("mixed"!==e){if("undirected"===e)return forEachInObjectOnce(t,null,n,n.undirected,i);if("string"==typeof r)return forEachInObjectOnce(t,null,n,n[r],i)}var o,a=new CompositeSetWrapper;if("undirected"!==e){if("out"!==r){if(o=forEachInObjectOnce(t,null,n,n.in,i),t&&o)return o;a.wrap(n.in)}if("in"!==r){if(o=forEachInObjectOnce(t,a,n,n.out,i),t&&o)return o;a.wrap(n.out)}}if("directed"!==e&&(o=forEachInObjectOnce(t,a,n,n.undirected,i),t&&o))return o}function createNeighborArrayForNode(t,e,r){if("mixed"!==t){if("undirected"===t)return Object.keys(r.undirected);if("string"==typeof e)return Object.keys(r[e])}var n=[];return forEachNeighbor(!1,t,e,r,function(t){n.push(t)}),n}function createDedupedObjectIterator(n,i,o){var a=Object.keys(o),d=a.length,c=0;return new Iterator__default.default(function(){var t=null;do{if(d<=c)return n&&n.wrap(o),{done:!0};var e=o[a[c++]],r=e.source,e=e.target,t=r===i?e:r}while(null===(t=n&&n.has(t.key)?null:t));return{done:!1,value:{neighbor:t.key,attributes:t.attributes}}})}function createNeighborIterator(t,e,r){if("mixed"!==t){if("undirected"===t)return createDedupedObjectIterator(null,r,r.undirected);if("string"==typeof e)return createDedupedObjectIterator(null,r,r[e])}var n=Iterator__default.default.empty(),i=new CompositeSetWrapper;return"undirected"!==t&&("out"!==e&&(n=chain__default.default(n,createDedupedObjectIterator(i,r,r.in))),"in"!==e&&(n=chain__default.default(n,createDedupedObjectIterator(i,r,r.out)))),n="directed"!==t?chain__default.default(n,createDedupedObjectIterator(i,r,r.undirected)):n}function attachNeighborArrayCreator(t,e){var r=e.name,n=e.type,i=e.direction;t.prototype[r]=function(t){if("mixed"!==n&&"mixed"!==this.type&&n!==this.type)return[];var e=this._nodes.get(t=""+t);if(void 0===e)throw new NotFoundGraphError("Graph.".concat(r,': could not find the "').concat(t,'" node in the graph.'));return createNeighborArrayForNode("mixed"===n?this.type:n,i,e)}}function attachForEachNeighbor(t,e){var r=e.name,n=e.type,i=e.direction,o="forEach"+r[0].toUpperCase()+r.slice(1,-1);t.prototype[o]=function(t,e){if("mixed"===n||"mixed"===this.type||n===this.type){var r=this._nodes.get(t=""+t);if(void 0===r)throw new NotFoundGraphError("Graph.".concat(o,': could not find the "').concat(t,'" node in the graph.'));forEachNeighbor(!1,"mixed"===n?this.type:n,i,r,e)}};e="map"+r[0].toUpperCase()+r.slice(1);t.prototype[e]=function(t,r){var n=[];return this[o](t,function(t,e){n.push(r(t,e))}),n};e="filter"+r[0].toUpperCase()+r.slice(1);t.prototype[e]=function(t,r){var n=[];return this[o](t,function(t,e){r(t,e)&&n.push(t)}),n};var a="reduce"+r[0].toUpperCase()+r.slice(1);t.prototype[a]=function(t,r,e){if(arguments.length<3)throw new InvalidArgumentsGraphError("Graph.".concat(a,": missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array."));var n=e;return this[o](t,function(t,e){n=r(n,t,e)}),n}}function attachFindNeighbor(t,e){var r=e.name,n=e.type,i=e.direction,r=r[0].toUpperCase()+r.slice(1,-1),o="find"+r;t.prototype[o]=function(t,e){if("mixed"===n||"mixed"===this.type||n===this.type){var r=this._nodes.get(t=""+t);if(void 0===r)throw new NotFoundGraphError("Graph.".concat(o,': could not find the "').concat(t,'" node in the graph.'));return forEachNeighbor(!0,"mixed"===n?this.type:n,i,r,e)}},t.prototype["some"+r]=function(t,e){return!!this[o](t,e)},t.prototype["every"+r]=function(t,r){return!this[o](t,function(t,e){return!r(t,e)})}}function attachNeighborIteratorCreator(t,e){var r=e.name,n=e.type,i=e.direction,o=r.slice(0,-1)+"Entries";t.prototype[o]=function(t){if("mixed"!==n&&"mixed"!==this.type&&n!==this.type)return Iterator__default.default.empty();var e=this._nodes.get(t=""+t);if(void 0===e)throw new NotFoundGraphError("Graph.".concat(o,': could not find the "').concat(t,'" node in the graph.'));return createNeighborIterator("mixed"===n?this.type:n,i,e)}}function attachNeighborIterationMethods(e){NEIGHBORS_ITERATION.forEach(function(t){attachNeighborArrayCreator(e,t),attachForEachNeighbor(e,t),attachFindNeighbor(e,t),attachNeighborIteratorCreator(e,t)})}function forEachAdjacency(t,e,r,n,i){for(var o,a,d,c,u,h,s=n._nodes.values(),p=n.type;!0!==(o=s.next()).done;){var f=!1,g=o.value;if("undirected"!==p)for(a in d=g.out){c=d[a];do{if(u=c.target,f=!0,h=i(g.key,u.key,g.attributes,u.attributes,c.key,c.attributes,c.undirected),t&&h)return c}while(c=c.next)}if("directed"!==p)for(a in d=g.undirected)if(!(e&&g.key>a)){c=d[a];do{if((u=c.target).key!==a&&(u=c.source),f=!0,h=i(g.key,u.key,g.attributes,u.attributes,c.key,c.attributes,c.undirected),t&&h)return c}while(c=c.next)}if(r&&!f&&(h=i(g.key,null,g.attributes,null,null,null,null),t&&h))return null}}function serializeNode(t,e){t={key:t};return isEmpty(e.attributes)||(t.attributes=assign({},e.attributes)),t}function serializeEdge(t,e){t={key:t,source:e.source.key,target:e.target.key};return isEmpty(e.attributes)||(t.attributes=assign({},e.attributes)),e.undirected&&(t.undirected=!0),t}function validateSerializedNode(t){if(!isPlainObject(t))throw new InvalidArgumentsGraphError('Graph.import: invalid serialized node. A serialized node should be a plain object with at least a "key" property.');if(!("key"in t))throw new InvalidArgumentsGraphError("Graph.import: serialized node is missing its key.");if("attributes"in t&&(!isPlainObject(t.attributes)||null===t.attributes))throw new InvalidArgumentsGraphError("Graph.import: invalid attributes. Attributes should be a plain object, null or omitted.")}function validateSerializedEdge(t){if(!isPlainObject(t))throw new InvalidArgumentsGraphError('Graph.import: invalid serialized edge. A serialized edge should be a plain object with at least a "source" & "target" property.');if(!("source"in t))throw new InvalidArgumentsGraphError("Graph.import: serialized edge is missing its source.");if(!("target"in t))throw new InvalidArgumentsGraphError("Graph.import: serialized edge is missing its target.");if("attributes"in t&&(!isPlainObject(t.attributes)||null===t.attributes))throw new InvalidArgumentsGraphError("Graph.import: invalid attributes. Attributes should be a plain object, null or omitted.");if("undirected"in t&&"boolean"!=typeof t.undirected)throw new InvalidArgumentsGraphError("Graph.import: invalid undirectedness information. Undirected should be boolean or omitted.")}CompositeSetWrapper.prototype.wrap=function(t){null===this.A?this.A=t:null===this.B&&(this.B=t)},CompositeSetWrapper.prototype.has=function(t){return null!==this.A&&t in this.A||null!==this.B&&t in this.B};var INSTANCE_ID=incrementalIdStartingFromRandomByte(),TYPES=new Set(["directed","undirected","mixed"]),EMITTER_PROPS=new Set(["domain","_events","_eventsCount","_maxListeners"]),EDGE_ADD_METHODS=[{name:function(t){return"".concat(t,"Edge")},generateKey:!0},{name:function(t){return"".concat(t,"DirectedEdge")},generateKey:!0,type:"directed"},{name:function(t){return"".concat(t,"UndirectedEdge")},generateKey:!0,type:"undirected"},{name:function(t){return"".concat(t,"EdgeWithKey")}},{name:function(t){return"".concat(t,"DirectedEdgeWithKey")},type:"directed"},{name:function(t){return"".concat(t,"UndirectedEdgeWithKey")},type:"undirected"}],DEFAULTS={allowSelfLoops:!0,multi:!1,type:"mixed"};function _addNode(t,e,r){if(r&&!isPlainObject(r))throw new InvalidArgumentsGraphError('Graph.addNode: invalid attributes. Expecting an object but got "'.concat(r,'"'));if(r=r||{},t._nodes.has(e=""+e))throw new UsageGraphError('Graph.addNode: the "'.concat(e,'" node already exist in the graph.'));var n=new t.NodeDataClass(e,r);return t._nodes.set(e,n),t.emit("nodeAdded",{key:e,attributes:r}),n}function unsafeAddNode(t,e,r){var n=new t.NodeDataClass(e,r);return t._nodes.set(e,n),t.emit("nodeAdded",{key:e,attributes:r}),n}function addEdge(t,e,r,n,i,o,a,d){if(!n&&"undirected"===t.type)throw new UsageGraphError("Graph.".concat(e,": you cannot add a directed edge to an undirected graph. Use the #.addEdge or #.addUndirectedEdge instead."));if(n&&"directed"===t.type)throw new UsageGraphError("Graph.".concat(e,": you cannot add an undirected edge to a directed graph. Use the #.addEdge or #.addDirectedEdge instead."));if(d&&!isPlainObject(d))throw new InvalidArgumentsGraphError("Graph.".concat(e,': invalid attributes. Expecting an object but got "').concat(d,'"'));if(o=""+o,a=""+a,d=d||{},!t.allowSelfLoops&&o===a)throw new UsageGraphError("Graph.".concat(e,': source & target are the same ("').concat(o,"\"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false."));var c=t._nodes.get(o),u=t._nodes.get(a);if(!c)throw new NotFoundGraphError("Graph.".concat(e,': source node "').concat(o,'" not found.'));if(!u)throw new NotFoundGraphError("Graph.".concat(e,': target node "').concat(a,'" not found.'));var h={key:null,undirected:n,source:o,target:a,attributes:d};if(r)i=t._edgeKeyGenerator();else if(t._edges.has(i=""+i))throw new UsageGraphError("Graph.".concat(e,': the "').concat(i,'" edge already exists in the graph.'));if(!t.multi&&(n?void 0!==c.undirected[a]:void 0!==c.out[a]))throw new UsageGraphError("Graph.".concat(e,': an edge linking "').concat(o,'" to "').concat(a,"\" already exists. If you really want to add multiple edges linking those nodes, you should create a multi graph by using the 'multi' option."));d=new EdgeData(n,i,c,u,d);t._edges.set(i,d);a=o===a;return n?(c.undirectedDegree++,u.undirectedDegree++,a&&t._undirectedSelfLoopCount++):(c.outDegree++,u.inDegree++,a&&t._directedSelfLoopCount++),t.multi?d.attachMulti():d.attach(),n?t._undirectedSize++:t._directedSize++,h.key=i,t.emit("edgeAdded",h),i}function mergeEdge(t,e,r,n,i,o,a,d,c){if(!n&&"undirected"===t.type)throw new UsageGraphError("Graph.".concat(e,": you cannot merge/update a directed edge to an undirected graph. Use the #.mergeEdge/#.updateEdge or #.addUndirectedEdge instead."));if(n&&"directed"===t.type)throw new UsageGraphError("Graph.".concat(e,": you cannot merge/update an undirected edge to a directed graph. Use the #.mergeEdge/#.updateEdge or #.addDirectedEdge instead."));if(d)if(c){if("function"!=typeof d)throw new InvalidArgumentsGraphError("Graph.".concat(e,': invalid updater function. Expecting a function but got "').concat(d,'"'))}else if(!isPlainObject(d))throw new InvalidArgumentsGraphError("Graph.".concat(e,': invalid attributes. Expecting an object but got "').concat(d,'"'));if(o=""+o,a=""+a,c&&(l=d,d=void 0),!t.allowSelfLoops&&o===a)throw new UsageGraphError("Graph.".concat(e,': source & target are the same ("').concat(o,"\"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false."));var u,h,s=t._nodes.get(o),p=t._nodes.get(a);if(!r&&(u=t._edges.get(i))){if(!(u.source.key===o&&u.target.key===a||n&&u.source.key===a&&u.target.key===o))throw new UsageGraphError("Graph.".concat(e,': inconsistency detected when attempting to merge the "').concat(i,'" edge with "').concat(o,'" source & "').concat(a,'" target vs. ("').concat(u.source.key,'", "').concat(u.target.key,'").'));h=u}if(h=!h&&!t.multi&&s?(n?s.undirected:s.out)[a]:h){var f,g=[h.key,!1,!1,!1];return(c?l:d)?(c?(f=h.attributes,h.attributes=l(f),t.emit("edgeAttributesUpdated",{type:"replace",key:h.key,attributes:h.attributes})):(assign(h.attributes,d),t.emit("edgeAttributesUpdated",{type:"merge",key:h.key,attributes:h.attributes,data:d})),g):g}d=d||{};var l={key:null,undirected:n,source:o,target:a,attributes:d=c&&l?l(d):d};if(r)i=t._edgeKeyGenerator();else if(t._edges.has(i=""+i))throw new UsageGraphError("Graph.".concat(e,': the "').concat(i,'" edge already exists in the graph.'));r=!1,e=!1;s||(s=unsafeAddNode(t,o,{}),r=!0,o===a&&(p=s,e=!0)),p||(p=unsafeAddNode(t,a,{}),e=!0),u=new EdgeData(n,i,s,p,d),t._edges.set(i,u);a=o===a;return n?(s.undirectedDegree++,p.undirectedDegree++,a&&t._undirectedSelfLoopCount++):(s.outDegree++,p.inDegree++,a&&t._directedSelfLoopCount++),t.multi?u.attachMulti():u.attach(),n?t._undirectedSize++:t._directedSize++,l.key=i,t.emit("edgeAdded",l),[i,!0,r,e]}function dropEdgeFromData(t,e){t._edges.delete(e.key);var r=e.source,n=e.target,i=e.attributes,o=e.undirected,a=r===n;o?(r.undirectedDegree--,n.undirectedDegree--,a&&t._undirectedSelfLoopCount--):(r.outDegree--,n.inDegree--,a&&t._directedSelfLoopCount--),t.multi?e.detachMulti():e.detach(),o?t._undirectedSize--:t._directedSize--,t.emit("edgeDropped",{key:e.key,attributes:i,source:r.key,target:n.key,undirected:o})}var Graph=function(o){function e(t){var e=o.call(this)||this;if("boolean"!=typeof(t=assign({},DEFAULTS,t)).multi)throw new InvalidArgumentsGraphError("Graph.constructor: invalid 'multi' option. Expecting a boolean but got \"".concat(t.multi,'".'));if(!TYPES.has(t.type))throw new InvalidArgumentsGraphError('Graph.constructor: invalid \'type\' option. Should be one of "mixed", "directed" or "undirected" but got "'.concat(t.type,'".'));if("boolean"!=typeof t.allowSelfLoops)throw new InvalidArgumentsGraphError("Graph.constructor: invalid 'allowSelfLoops' option. Expecting a boolean but got \"".concat(t.allowSelfLoops,'".'));var r="mixed"===t.type?MixedNodeData:"directed"===t.type?DirectedNodeData:UndirectedNodeData;privateProperty(_assertThisInitialized(e),"NodeDataClass",r);var n="geid_"+INSTANCE_ID()+"_",i=0;return privateProperty(_assertThisInitialized(e),"_attributes",{}),privateProperty(_assertThisInitialized(e),"_nodes",new Map),privateProperty(_assertThisInitialized(e),"_edges",new Map),privateProperty(_assertThisInitialized(e),"_directedSize",0),privateProperty(_assertThisInitialized(e),"_undirectedSize",0),privateProperty(_assertThisInitialized(e),"_directedSelfLoopCount",0),privateProperty(_assertThisInitialized(e),"_undirectedSelfLoopCount",0),privateProperty(_assertThisInitialized(e),"_edgeKeyGenerator",function(){for(var t;t=n+i++,e._edges.has(t););return t}),privateProperty(_assertThisInitialized(e),"_options",t),EMITTER_PROPS.forEach(function(t){return privateProperty(_assertThisInitialized(e),t,e[t])}),readOnlyProperty(_assertThisInitialized(e),"order",function(){return e._nodes.size}),readOnlyProperty(_assertThisInitialized(e),"size",function(){return e._edges.size}),readOnlyProperty(_assertThisInitialized(e),"directedSize",function(){return e._directedSize}),readOnlyProperty(_assertThisInitialized(e),"undirectedSize",function(){return e._undirectedSize}),readOnlyProperty(_assertThisInitialized(e),"selfLoopCount",function(){return e._directedSelfLoopCount+e._undirectedSelfLoopCount}),readOnlyProperty(_assertThisInitialized(e),"directedSelfLoopCount",function(){return e._directedSelfLoopCount}),readOnlyProperty(_assertThisInitialized(e),"undirectedSelfLoopCount",function(){return e._undirectedSelfLoopCount}),readOnlyProperty(_assertThisInitialized(e),"multi",e._options.multi),readOnlyProperty(_assertThisInitialized(e),"type",e._options.type),readOnlyProperty(_assertThisInitialized(e),"allowSelfLoops",e._options.allowSelfLoops),readOnlyProperty(_assertThisInitialized(e),"implementation",function(){return"graphology"}),e}_inheritsLoose(e,o);var t=e.prototype;return t._resetInstanceCounters=function(){this._directedSize=0,this._undirectedSize=0,this._directedSelfLoopCount=0,this._undirectedSelfLoopCount=0},t.hasNode=function(t){return this._nodes.has(""+t)},t.hasDirectedEdge=function(t,e){if("undirected"===this.type)return!1;if(1===arguments.length){var r=this._edges.get(""+t);return!!r&&!r.undirected}if(2!==arguments.length)throw new InvalidArgumentsGraphError("Graph.hasDirectedEdge: invalid arity (".concat(arguments.length,", instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target."));e=""+e;t=this._nodes.get(t=""+t);if(!t)return!1;e=t.out[e];return!!e&&(!this.multi||!!e.size)},t.hasUndirectedEdge=function(t,e){if("directed"===this.type)return!1;if(1===arguments.length){var r=this._edges.get(""+t);return!!r&&r.undirected}if(2!==arguments.length)throw new InvalidArgumentsGraphError("Graph.hasDirectedEdge: invalid arity (".concat(arguments.length,", instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target."));e=""+e;t=this._nodes.get(t=""+t);if(!t)return!1;e=t.undirected[e];return!!e&&(!this.multi||!!e.size)},t.hasEdge=function(t,e){if(1===arguments.length)return this._edges.has(""+t);if(2!==arguments.length)throw new InvalidArgumentsGraphError("Graph.hasEdge: invalid arity (".concat(arguments.length,", instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target."));e=""+e;var r=this._nodes.get(t=""+t);if(!r)return!1;t=void 0!==r.out&&r.out[e];return!!(t=t||void 0!==r.undirected&&r.undirected[e])&&(!this.multi||!!t.size)},t.directedEdge=function(t,e){if("undirected"!==this.type){if(t=""+t,e=""+e,this.multi)throw new UsageGraphError("Graph.directedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.directedEdges instead.");var r=this._nodes.get(t);if(!r)throw new NotFoundGraphError('Graph.directedEdge: could not find the "'.concat(t,'" source node in the graph.'));if(!this._nodes.has(e))throw new NotFoundGraphError('Graph.directedEdge: could not find the "'.concat(e,'" target node in the graph.'));e=r.out&&r.out[e]||void 0;return e?e.key:void 0}},t.undirectedEdge=function(t,e){if("directed"!==this.type){if(t=""+t,e=""+e,this.multi)throw new UsageGraphError("Graph.undirectedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.undirectedEdges instead.");var r=this._nodes.get(t);if(!r)throw new NotFoundGraphError('Graph.undirectedEdge: could not find the "'.concat(t,'" source node in the graph.'));if(!this._nodes.has(e))throw new NotFoundGraphError('Graph.undirectedEdge: could not find the "'.concat(e,'" target node in the graph.'));e=r.undirected&&r.undirected[e]||void 0;return e?e.key:void 0}},t.edge=function(t,e){if(this.multi)throw new UsageGraphError("Graph.edge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.edges instead.");e=""+e;var r=this._nodes.get(t=""+t);if(!r)throw new NotFoundGraphError('Graph.edge: could not find the "'.concat(t,'" source node in the graph.'));if(!this._nodes.has(e))throw new NotFoundGraphError('Graph.edge: could not find the "'.concat(e,'" target node in the graph.'));e=r.out&&r.out[e]||r.undirected&&r.undirected[e]||void 0;if(e)return e.key},t.areDirectedNeighbors=function(t,e){e=""+e;var r=this._nodes.get(t=""+t);if(!r)throw new NotFoundGraphError('Graph.areDirectedNeighbors: could not find the "'.concat(t,'" node in the graph.'));return"undirected"!==this.type&&(e in r.in||e in r.out)},t.areOutNeighbors=function(t,e){e=""+e;var r=this._nodes.get(t=""+t);if(!r)throw new NotFoundGraphError('Graph.areOutNeighbors: could not find the "'.concat(t,'" node in the graph.'));return"undirected"!==this.type&&e in r.out},t.areInNeighbors=function(t,e){e=""+e;var r=this._nodes.get(t=""+t);if(!r)throw new NotFoundGraphError('Graph.areInNeighbors: could not find the "'.concat(t,'" node in the graph.'));return"undirected"!==this.type&&e in r.in},t.areUndirectedNeighbors=function(t,e){e=""+e;var r=this._nodes.get(t=""+t);if(!r)throw new NotFoundGraphError('Graph.areUndirectedNeighbors: could not find the "'.concat(t,'" node in the graph.'));return"directed"!==this.type&&e in r.undirected},t.areNeighbors=function(t,e){e=""+e;var r=this._nodes.get(t=""+t);if(!r)throw new NotFoundGraphError('Graph.areNeighbors: could not find the "'.concat(t,'" node in the graph.'));return"undirected"!==this.type&&(e in r.in||e in r.out)||"directed"!==this.type&&e in r.undirected},t.areInboundNeighbors=function(t,e){e=""+e;var r=this._nodes.get(t=""+t);if(!r)throw new NotFoundGraphError('Graph.areInboundNeighbors: could not find the "'.concat(t,'" node in the graph.'));return"undirected"!==this.type&&e in r.in||"directed"!==this.type&&e in r.undirected},t.areOutboundNeighbors=function(t,e){e=""+e;var r=this._nodes.get(t=""+t);if(!r)throw new NotFoundGraphError('Graph.areOutboundNeighbors: could not find the "'.concat(t,'" node in the graph.'));return"undirected"!==this.type&&e in r.out||"directed"!==this.type&&e in r.undirected},t.inDegree=function(t){var e=this._nodes.get(t=""+t);if(!e)throw new NotFoundGraphError('Graph.inDegree: could not find the "'.concat(t,'" node in the graph.'));return"undirected"===this.type?0:e.inDegree},t.outDegree=function(t){var e=this._nodes.get(t=""+t);if(!e)throw new NotFoundGraphError('Graph.outDegree: could not find the "'.concat(t,'" node in the graph.'));return"undirected"===this.type?0:e.outDegree},t.directedDegree=function(t){var e=this._nodes.get(t=""+t);if(!e)throw new NotFoundGraphError('Graph.directedDegree: could not find the "'.concat(t,'" node in the graph.'));return"undirected"===this.type?0:e.inDegree+e.outDegree},t.undirectedDegree=function(t){var e=this._nodes.get(t=""+t);if(!e)throw new NotFoundGraphError('Graph.undirectedDegree: could not find the "'.concat(t,'" node in the graph.'));return"directed"===this.type?0:e.undirectedDegree},t.inboundDegree=function(t){var e=this._nodes.get(t=""+t);if(!e)throw new NotFoundGraphError('Graph.inboundDegree: could not find the "'.concat(t,'" node in the graph.'));t=0;return"directed"!==this.type&&(t+=e.undirectedDegree),"undirected"!==this.type&&(t+=e.inDegree),t},t.outboundDegree=function(t){var e=this._nodes.get(t=""+t);if(!e)throw new NotFoundGraphError('Graph.outboundDegree: could not find the "'.concat(t,'" node in the graph.'));t=0;return"directed"!==this.type&&(t+=e.undirectedDegree),"undirected"!==this.type&&(t+=e.outDegree),t},t.degree=function(t){var e=this._nodes.get(t=""+t);if(!e)throw new NotFoundGraphError('Graph.degree: could not find the "'.concat(t,'" node in the graph.'));var r=0;return"directed"!==this.type&&(r+=e.undirectedDegree),"undirected"!==this.type&&(r+=e.inDegree+e.outDegree),r},t.inDegreeWithoutSelfLoops=function(t){var e=this._nodes.get(t=""+t);if(!e)throw new NotFoundGraphError('Graph.inDegreeWithoutSelfLoops: could not find the "'.concat(t,'" node in the graph.'));if("undirected"===this.type)return 0;t=e.in[t],t=t?this.multi?t.size:1:0;return e.inDegree-t},t.outDegreeWithoutSelfLoops=function(t){var e=this._nodes.get(t=""+t);if(!e)throw new NotFoundGraphError('Graph.outDegreeWithoutSelfLoops: could not find the "'.concat(t,'" node in the graph.'));if("undirected"===this.type)return 0;t=e.out[t],t=t?this.multi?t.size:1:0;return e.outDegree-t},t.directedDegreeWithoutSelfLoops=function(t){var e=this._nodes.get(t=""+t);if(!e)throw new NotFoundGraphError('Graph.directedDegreeWithoutSelfLoops: could not find the "'.concat(t,'" node in the graph.'));if("undirected"===this.type)return 0;t=e.out[t],t=t?this.multi?t.size:1:0;return e.inDegree+e.outDegree-2*t},t.undirectedDegreeWithoutSelfLoops=function(t){var e=this._nodes.get(t=""+t);if(!e)throw new NotFoundGraphError('Graph.undirectedDegreeWithoutSelfLoops: could not find the "'.concat(t,'" node in the graph.'));if("directed"===this.type)return 0;t=e.undirected[t],t=t?this.multi?t.size:1:0;return e.undirectedDegree-2*t},t.inboundDegreeWithoutSelfLoops=function(t){var e,r=this._nodes.get(t=""+t);if(!r)throw new NotFoundGraphError('Graph.inboundDegreeWithoutSelfLoops: could not find the "'.concat(t,'" node in the graph.'));var n=0,i=0;return"directed"!==this.type&&(n+=r.undirectedDegree,i+=2*((e=r.undirected[t])?this.multi?e.size:1:0)),"undirected"!==this.type&&(n+=r.inDegree,i+=(e=r.out[t])?this.multi?e.size:1:0),n-i},t.outboundDegreeWithoutSelfLoops=function(t){var e,r=this._nodes.get(t=""+t);if(!r)throw new NotFoundGraphError('Graph.outboundDegreeWithoutSelfLoops: could not find the "'.concat(t,'" node in the graph.'));var n=0,i=0;return"directed"!==this.type&&(n+=r.undirectedDegree,i+=2*((e=r.undirected[t])?this.multi?e.size:1:0)),"undirected"!==this.type&&(n+=r.outDegree,i+=(e=r.in[t])?this.multi?e.size:1:0),n-i},t.degreeWithoutSelfLoops=function(t){var e,r=this._nodes.get(t=""+t);if(!r)throw new NotFoundGraphError('Graph.degreeWithoutSelfLoops: could not find the "'.concat(t,'" node in the graph.'));var n=0,i=0;return"directed"!==this.type&&(n+=r.undirectedDegree,i+=2*((e=r.undirected[t])?this.multi?e.size:1:0)),"undirected"!==this.type&&(n+=r.inDegree+r.outDegree,i+=2*((e=r.out[t])?this.multi?e.size:1:0)),n-i},t.source=function(t){var e=this._edges.get(t=""+t);if(!e)throw new NotFoundGraphError('Graph.source: could not find the "'.concat(t,'" edge in the graph.'));return e.source.key},t.target=function(t){var e=this._edges.get(t=""+t);if(!e)throw new NotFoundGraphError('Graph.target: could not find the "'.concat(t,'" edge in the graph.'));return e.target.key},t.extremities=function(t){var e=this._edges.get(t=""+t);if(!e)throw new NotFoundGraphError('Graph.extremities: could not find the "'.concat(t,'" edge in the graph.'));return[e.source.key,e.target.key]},t.opposite=function(t,e){t=""+t;var r=this._edges.get(e=""+e);if(!r)throw new NotFoundGraphError('Graph.opposite: could not find the "'.concat(e,'" edge in the graph.'));var n=r.source.key,r=r.target.key;if(t===n)return r;if(t===r)return n;throw new NotFoundGraphError('Graph.opposite: the "'.concat(t,'" node is not attached to the "').concat(e,'" edge (').concat(n,", ").concat(r,")."))},t.hasExtremity=function(t,e){e=""+e;var r=this._edges.get(t=""+t);if(!r)throw new NotFoundGraphError('Graph.hasExtremity: could not find the "'.concat(t,'" edge in the graph.'));return r.source.key===e||r.target.key===e},t.isUndirected=function(t){var e=this._edges.get(t=""+t);if(!e)throw new NotFoundGraphError('Graph.isUndirected: could not find the "'.concat(t,'" edge in the graph.'));return e.undirected},t.isDirected=function(t){var e=this._edges.get(t=""+t);if(!e)throw new NotFoundGraphError('Graph.isDirected: could not find the "'.concat(t,'" edge in the graph.'));return!e.undirected},t.isSelfLoop=function(t){var e=this._edges.get(t=""+t);if(!e)throw new NotFoundGraphError('Graph.isSelfLoop: could not find the "'.concat(t,'" edge in the graph.'));return e.source===e.target},t.addNode=function(t,e){return _addNode(this,t,e).key},t.mergeNode=function(t,e){if(e&&!isPlainObject(e))throw new InvalidArgumentsGraphError('Graph.mergeNode: invalid attributes. Expecting an object but got "'.concat(e,'"'));e=e||{};var r=this._nodes.get(t=""+t);return r?(e&&(assign(r.attributes,e),this.emit("nodeAttributesUpdated",{type:"merge",key:t,attributes:r.attributes,data:e})),[t,!1]):(r=new this.NodeDataClass(t,e),this._nodes.set(t,r),this.emit("nodeAdded",{key:t,attributes:e}),[t,!0])},t.updateNode=function(t,e){if(e&&"function"!=typeof e)throw new InvalidArgumentsGraphError('Graph.updateNode: invalid updater function. Expecting a function but got "'.concat(e,'"'));var r,n=this._nodes.get(t=""+t);if(n)return e&&(r=n.attributes,n.attributes=e(r),this.emit("nodeAttributesUpdated",{type:"replace",key:t,attributes:n.attributes})),[t,!1];e=e?e({}):{},n=new this.NodeDataClass(t,e);return this._nodes.set(t,n),this.emit("nodeAdded",{key:t,attributes:e}),[t,!0]},t.dropNode=function(t){var e,r=this._nodes.get(t=""+t);if(!r)throw new NotFoundGraphError('Graph.dropNode: could not find the "'.concat(t,'" node in the graph.'));if("undirected"!==this.type){for(var n in r.out)for(e=r.out[n];dropEdgeFromData(this,e),e=e.next;);for(var i in r.in)for(e=r.in[i];dropEdgeFromData(this,e),e=e.next;);}if("directed"!==this.type)for(var o in r.undirected)for(e=r.undirected[o];dropEdgeFromData(this,e),e=e.next;);this._nodes.delete(t),this.emit("nodeDropped",{key:t,attributes:r.attributes})},t.dropEdge=function(t){if(1<arguments.length){var e,r=""+arguments[0],n=""+arguments[1];if(!(e=getMatchingEdge(this,r,n,this.type)))throw new NotFoundGraphError('Graph.dropEdge: could not find the "'.concat(r,'" -> "').concat(n,'" edge in the graph.'))}else if(!(e=this._edges.get(t=""+t)))throw new NotFoundGraphError('Graph.dropEdge: could not find the "'.concat(t,'" edge in the graph.'));return dropEdgeFromData(this,e),this},t.dropDirectedEdge=function(t,e){if(arguments.length<2)throw new UsageGraphError("Graph.dropDirectedEdge: it does not make sense to try and drop a directed edge by key. What if the edge with this key is undirected? Use #.dropEdge for this purpose instead.");if(this.multi)throw new UsageGraphError("Graph.dropDirectedEdge: cannot use a {source,target} combo when dropping an edge in a MultiGraph since we cannot infer the one you want to delete as there could be multiple ones.");var r=getMatchingEdge(this,t=""+t,e=""+e,"directed");if(!r)throw new NotFoundGraphError('Graph.dropDirectedEdge: could not find a "'.concat(t,'" -> "').concat(e,'" edge in the graph.'));return dropEdgeFromData(this,r),this},t.dropUndirectedEdge=function(t,e){if(arguments.length<2)throw new UsageGraphError("Graph.dropUndirectedEdge: it does not make sense to drop a directed edge by key. What if the edge with this key is undirected? Use #.dropEdge for this purpose instead.");if(this.multi)throw new UsageGraphError("Graph.dropUndirectedEdge: cannot use a {source,target} combo when dropping an edge in a MultiGraph since we cannot infer the one you want to delete as there could be multiple ones.");var r=getMatchingEdge(this,t,e,"undirected");if(!r)throw new NotFoundGraphError('Graph.dropUndirectedEdge: could not find a "'.concat(t,'" -> "').concat(e,'" edge in the graph.'));return dropEdgeFromData(this,r),this},t.clear=function(){this._edges.clear(),this._nodes.clear(),this._resetInstanceCounters(),this.emit("cleared")},t.clearEdges=function(){for(var t,e=this._nodes.values();!0!==(t=e.next()).done;)t.value.clear();this._edges.clear(),this._resetInstanceCounters(),this.emit("edgesCleared")},t.getAttribute=function(t){return this._attributes[t]},t.getAttributes=function(){return this._attributes},t.hasAttribute=function(t){return this._attributes.hasOwnProperty(t)},t.setAttribute=function(t,e){return this._attributes[t]=e,this.emit("attributesUpdated",{type:"set",attributes:this._attributes,name:t}),this},t.updateAttribute=function(t,e){if("function"!=typeof e)throw new InvalidArgumentsGraphError("Graph.updateAttribute: updater should be a function.");var r=this._attributes[t];return this._attributes[t]=e(r),this.emit("attributesUpdated",{type:"set",attributes:this._attributes,name:t}),this},t.removeAttribute=function(t){return delete this._attributes[t],this.emit("attributesUpdated",{type:"remove",attributes:this._attributes,name:t}),this},t.replaceAttributes=function(t){if(!isPlainObject(t))throw new InvalidArgumentsGraphError("Graph.replaceAttributes: provided attributes are not a plain object.");return this._attributes=t,this.emit("attributesUpdated",{type:"replace",attributes:this._attributes}),this},t.mergeAttributes=function(t){if(!isPlainObject(t))throw new InvalidArgumentsGraphError("Graph.mergeAttributes: provided attributes are not a plain object.");return assign(this._attributes,t),this.emit("attributesUpdated",{type:"merge",attributes:this._attributes,data:t}),this},t.updateAttributes=function(t){if("function"!=typeof t)throw new InvalidArgumentsGraphError("Graph.updateAttributes: provided updater is not a function.");return this._attributes=t(this._attributes),this.emit("attributesUpdated",{type:"update",attributes:this._attributes}),this},t.updateEachNodeAttributes=function(t,e){if("function"!=typeof t)throw new InvalidArgumentsGraphError("Graph.updateEachNodeAttributes: expecting an updater function.");if(e&&!validateHints(e))throw new InvalidArgumentsGraphError("Graph.updateEachNodeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}");for(var r,n=this._nodes.values();!0!==(r=n.next()).done;)(r=r.value).attributes=t(r.key,r.attributes);this.emit("eachNodeAttributesUpdated",{hints:e||null})},t.updateEachEdgeAttributes=function(t,e){if("function"!=typeof t)throw new InvalidArgumentsGraphError("Graph.updateEachEdgeAttributes: expecting an updater function.");if(e&&!validateHints(e))throw new InvalidArgumentsGraphError("Graph.updateEachEdgeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}");for(var r,n,i,o=this._edges.values();!0!==(i=o.next()).done;)n=(r=i.value).source,i=r.target,r.attributes=t(r.key,r.attributes,n.key,i.key,n.attributes,i.attributes,r.undirected);this.emit("eachEdgeAttributesUpdated",{hints:e||null})},t.forEachAdjacencyEntry=function(t){if("function"!=typeof t)throw new InvalidArgumentsGraphError("Graph.forEachAdjacencyEntry: expecting a callback.");forEachAdjacency(!1,!1,!1,this,t)},t.forEachAdjacencyEntryWithOrphans=function(t){if("function"!=typeof t)throw new InvalidArgumentsGraphError("Graph.forEachAdjacencyEntryWithOrphans: expecting a callback.");forEachAdjacency(!1,!1,!0,this,t)},t.forEachAssymetricAdjacencyEntry=function(t){if("function"!=typeof t)throw new InvalidArgumentsGraphError("Graph.forEachAssymetricAdjacencyEntry: expecting a callback.");forEachAdjacency(!1,!0,!1,this,t)},t.forEachAssymetricAdjacencyEntryWithOrphans=function(t){if("function"!=typeof t)throw new InvalidArgumentsGraphError("Graph.forEachAssymetricAdjacencyEntryWithOrphans: expecting a callback.");forEachAdjacency(!1,!0,!0,this,t)},t.nodes=function(){return"function"==typeof Array.from?Array.from(this._nodes.keys()):take__default.default(this._nodes.keys(),this._nodes.size)},t.forEachNode=function(t){if("function"!=typeof t)throw new InvalidArgumentsGraphError("Graph.forEachNode: expecting a callback.");for(var e,r=this._nodes.values();!0!==(e=r.next()).done;)t((e=e.value).key,e.attributes)},t.findNode=function(t){if("function"!=typeof t)throw new InvalidArgumentsGraphError("Graph.findNode: expecting a callback.");for(var e,r=this._nodes.values();!0!==(e=r.next()).done;)if(t((e=e.value).key,e.attributes))return e.key},t.mapNodes=function(t){if("function"!=typeof t)throw new InvalidArgumentsGraphError("Graph.mapNode: expecting a callback.");for(var e,r=this._nodes.values(),n=new Array(this.order),i=0;!0!==(e=r.next()).done;)e=e.value,n[i++]=t(e.key,e.attributes);return n},t.someNode=function(t){if("function"!=typeof t)throw new InvalidArgumentsGraphError("Graph.someNode: expecting a callback.");for(var e,r=this._nodes.values();!0!==(e=r.next()).done;)if(t((e=e.value).key,e.attributes))return!0;return!1},t.everyNode=function(t){if("function"!=typeof t)throw new InvalidArgumentsGraphError("Graph.everyNode: expecting a callback.");for(var e,r=this._nodes.values();!0!==(e=r.next()).done;)if(!t((e=e.value).key,e.attributes))return!1;return!0},t.filterNodes=function(t){if("function"!=typeof t)throw new InvalidArgumentsGraphError("Graph.filterNodes: expecting a callback.");for(var e,r=this._nodes.values(),n=[];!0!==(e=r.next()).done;)t((e=e.value).key,e.attributes)&&n.push(e.key);return n},t.reduceNodes=function(t,e){if("function"!=typeof t)throw new InvalidArgumentsGraphError("Graph.reduceNodes: expecting a callback.");if(arguments.length<2)throw new InvalidArgumentsGraphError("Graph.reduceNodes: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.");for(var r,n=e,i=this._nodes.values();!0!==(r=i.next()).done;)n=t(n,(r=r.value).key,r.attributes);return n},t.nodeEntries=function(){var e=this._nodes.values();return new Iterator__default.default(function(){var t=e.next();if(t.done)return t;t=t.value;return{value:{node:t.key,attributes:t.attributes},done:!1}})},t.export=function(){var r=new Array(this._nodes.size),n=0;this._nodes.forEach(function(t,e){r[n++]=serializeNode(e,t)});var i=new Array(this._edges.size),n=0;return this._edges.forEach(function(t,e){i[n++]=serializeEdge(e,t)}),{options:{type:this.type,multi:this.multi,allowSelfLoops:this.allowSelfLoops},attributes:this.getAttributes(),nodes:r,edges:i}},t.import=function(t){var e,r,n,i,d=this,c=1<arguments.length&&void 0!==arguments[1]&&arguments[1];if(isGraph(t))return t.forEachNode(function(t,e){c?d.mergeNode(t,e):d.addNode(t,e)}),t.forEachEdge(function(t,e,r,n,i,o,a){c?a?d.mergeUndirectedEdgeWithKey(t,r,n,e):d.mergeDirectedEdgeWithKey(t,r,n,e):a?d.addUndirectedEdgeWithKey(t,r,n,e):d.addDirectedEdgeWithKey(t,r,n,e)}),this;if(!isPlainObject(t))throw new InvalidArgumentsGraphError("Graph.import: invalid argument. Expecting a serialized graph or, alternatively, a Graph instance.");if(t.attributes){if(!isPlainObject(t.attributes))throw new InvalidArgumentsGraphError("Graph.import: invalid attributes. Expecting a plain object.");c?this.mergeAttributes(t.attributes):this.replaceAttributes(t.attributes)}if(t.nodes){if(n=t.nodes,!Array.isArray(n))throw new InvalidArgumentsGraphError("Graph.import: invalid nodes. Expecting an array.");for(e=0,r=n.length;e<r;e++){validateSerializedNode(a=n[e]);var o=a.key,a=a.attributes;c?this.mergeNode(o,a):this.addNode(o,a)}}if(t.edges){if(n=t.edges,!Array.isArray(n))throw new InvalidArgumentsGraphError("Graph.import: invalid edges. Expecting an array.");for(e=0,r=n.length;e<r;e++){validateSerializedEdge(i=n[e]);var u=i.source,h=i.target,s=i.attributes,p=i.undirected,p=void 0!==p&&p;"key"in i?(c?p?this.mergeUndirectedEdgeWithKey:this.mergeDirectedEdgeWithKey:p?this.addUndirectedEdgeWithKey:this.addDirectedEdgeWithKey).call(this,i.key,u,h,s):(c?p?this.mergeUndirectedEdge:this.mergeDirectedEdge:p?this.addUndirectedEdge:this.addDirectedEdge).call(this,u,h,s)}}return this},t.nullCopy=function(t){t=new e(assign({},this._options,t));return t.replaceAttributes(assign({},this.getAttributes())),t},t.emptyCopy=function(t){var n=this.nullCopy(t);return this._nodes.forEach(function(t,e){var r=assign({},t.attributes);t=new n.NodeDataClass(e,r),n._nodes.set(e,t)}),n},t.copy=function(t){if("string"==typeof(t=t||{}).type&&t.type!==this.type&&"mixed"!==t.type)throw new UsageGraphError('Graph.copy: cannot create an incompatible copy from "'.concat(this.type,'" type to "').concat(t.type,'" because this would mean losing information about the current graph.'));if("boolean"==typeof t.multi&&t.multi!==this.multi&&!0!==t.multi)throw new UsageGraphError("Graph.copy: cannot create an incompatible copy by downgrading a multi graph to a simple one because this would mean losing information about the current graph.");if("boolean"==typeof t.allowSelfLoops&&t.allowSelfLoops!==this.allowSelfLoops&&!0!==t.allowSelfLoops)throw new UsageGraphError("Graph.copy: cannot create an incompatible copy from a graph allowing self loops to one that does not because this would mean losing information about the current graph.");for(var e,r=this.emptyCopy(t),n=this._edges.values();!0!==(e=n.next()).done;)addEdge(r,"copy",!1,(e=e.value).undirected,e.key,e.source.key,e.target.key,assign({},e.attributes));return r},t.toJSON=function(){return this.export()},t.toString=function(){return"[object Graph]"},t.inspect=function(){var d=this,r={};this._nodes.forEach(function(t,e){r[e]=t.attributes});var c={},u={};this._edges.forEach(function(t,e){var r,n=t.undirected?"--":"->",i="",o=t.source.key,a=t.target.key;t.undirected&&a<o&&(r=o,o=a,a=r);a="(".concat(o,")").concat(n,"(").concat(a,")");e.startsWith("geid_")?d.multi&&(void 0===u[a]?u[a]=0:u[a]++,i+="".concat(u[a],". ")):i+="[".concat(e,"]: "),c[i+=a]=t.attributes});var t,e={};for(t in this)this.hasOwnProperty(t)&&!EMITTER_PROPS.has(t)&&"function"!=typeof this[t]&&"symbol"!==_typeof(t)&&(e[t]=this[t]);return e.attributes=this._attributes,e.nodes=r,e.edges=c,privateProperty(e,"constructor",this.constructor),e},e}(events.EventEmitter);"undefined"!=typeof Symbol&&(Graph.prototype[Symbol.for("nodejs.util.inspect.custom")]=Graph.prototype.inspect),EDGE_ADD_METHODS.forEach(function(d){["add","merge","update"].forEach(function(i){var o=d.name(i),a="add"===i?addEdge:mergeEdge;d.generateKey?Graph.prototype[o]=function(t,e,r){return a(this,o,!0,"undirected"===(d.type||this.type),null,t,e,r,"update"===i)}:Graph.prototype[o]=function(t,e,r,n){return a(this,o,!1,"undirected"===(d.type||this.type),t,e,r,n,"update"===i)}})}),attachNodeAttributesMethods(Graph),attachEdgeAttributesMethods(Graph),attachEdgeIterationMethods(Graph),attachNeighborIterationMethods(Graph);var DirectedGraph=function(e){function t(t){t=assign({type:"directed"},t);if("multi"in t&&!1!==t.multi)throw new InvalidArgumentsGraphError("DirectedGraph.from: inconsistent indication that the graph should be multi in given options!");if("directed"!==t.type)throw new InvalidArgumentsGraphError('DirectedGraph.from: inconsistent "'+t.type+'" type in given options!');return e.call(this,t)||this}return _inheritsLoose(t,e),t}(Graph),UndirectedGraph=function(e){function t(t){t=assign({type:"undirected"},t);if("multi"in t&&!1!==t.multi)throw new InvalidArgumentsGraphError("UndirectedGraph.from: inconsistent indication that the graph should be multi in given options!");if("undirected"!==t.type)throw new InvalidArgumentsGraphError('UndirectedGraph.from: inconsistent "'+t.type+'" type in given options!');return e.call(this,t)||this}return _inheritsLoose(t,e),t}(Graph),MultiGraph=function(e){function t(t){t=assign({multi:!0},t);if("multi"in t&&!0!==t.multi)throw new InvalidArgumentsGraphError("MultiGraph.from: inconsistent indication that the graph should be simple in given options!");return e.call(this,t)||this}return _inheritsLoose(t,e),t}(Graph),MultiDirectedGraph=function(e){function t(t){t=assign({type:"directed",multi:!0},t);if("multi"in t&&!0!==t.multi)throw new InvalidArgumentsGraphError("MultiDirectedGraph.from: inconsistent indication that the graph should be simple in given options!");if("directed"!==t.type)throw new InvalidArgumentsGraphError('MultiDirectedGraph.from: inconsistent "'+t.type+'" type in given options!');return e.call(this,t)||this}return _inheritsLoose(t,e),t}(Graph),MultiUndirectedGraph=function(e){function t(t){t=assign({type:"undirected",multi:!0},t);if("multi"in t&&!0!==t.multi)throw new InvalidArgumentsGraphError("MultiUndirectedGraph.from: inconsistent indication that the graph should be simple in given options!");if("undirected"!==t.type)throw new InvalidArgumentsGraphError('MultiUndirectedGraph.from: inconsistent "'+t.type+'" type in given options!');return e.call(this,t)||this}return _inheritsLoose(t,e),t}(Graph);function attachStaticFromMethod(r){r.from=function(t,e){e=assign({},t.options,e),e=new r(e);return e.import(t),e}}attachStaticFromMethod(Graph),attachStaticFromMethod(DirectedGraph),attachStaticFromMethod(UndirectedGraph),attachStaticFromMethod(MultiGraph),attachStaticFromMethod(MultiDirectedGraph),attachStaticFromMethod(MultiUndirectedGraph),(Graph.Graph=Graph).DirectedGraph=DirectedGraph,Graph.UndirectedGraph=UndirectedGraph,Graph.MultiGraph=MultiGraph,Graph.MultiDirectedGraph=MultiDirectedGraph,Graph.MultiUndirectedGraph=MultiUndirectedGraph,Graph.InvalidArgumentsGraphError=InvalidArgumentsGraphError,Graph.NotFoundGraphError=NotFoundGraphError,Graph.UsageGraphError=UsageGraphError,module.exports=Graph;