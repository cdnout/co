(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("jquery"));
	else if(typeof define === 'function' && define.amd)
		define(["jquery"], factory);
	else if(typeof exports === 'object')
		exports["TimekitBooking"] = factory(require("jquery"));
	else
		root["TimekitBooking"] = factory(root["jQuery"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	/*!
	 * Booking.js
	 * http://timekit.io
	 *
	 * Copyright 2018 Timekit, Inc.
	 * Booking.js is freely distributable under the MIT license.
	 *
	 */
	
	var $          = __webpack_require__(1);
	var Initialize = __webpack_require__(2)
	
	// Autoload if config is available on window, else export function
	var globalLibraryConfig = window.timekitBookingConfig
	if (window && globalLibraryConfig && globalLibraryConfig.autoload !== false) {
	  $(window).on('load', function(){
	    var instance = new Initialize();
	    instance.init(globalLibraryConfig);
	    module.exports = instance;
	  });
	} else {
	  module.exports = Initialize;
	}


/***/ }),
/* 1 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_1__;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var $             = __webpack_require__(1);
	var timekitSdk    = __webpack_require__(3);
	
	var ConfigDep     = __webpack_require__(34);
	var UtilsDep      = __webpack_require__(37);
	var RenderDep     = __webpack_require__(39);
	
	// Main library
	function Initialize() {
	
	  // SDK instance
	  var sdk     = timekitSdk.newInstance();
	  var config  = new ConfigDep();
	  var utils   = new UtilsDep({ config: config });
	  var render  = new RenderDep({ config: config, utils: utils, sdk: sdk });
	  var getConfig = config.retrieve;
	
	  // Initilization method
	  var init = function(suppliedConfig, global) {
	
	    // Allows mokcing the window object if passed
	    global = global || window;
	    config.setGlobal(global)
	
	    // Make sure that SDK is ready and debug flag is checked early
	    var localConfig = config.setDefaults(suppliedConfig || {});
	    config.update(localConfig);
	    utils.logDebug(['Version:', getVersion()]);
	    utils.logDebug(['Supplied config:', suppliedConfig]);
	
	    // Set rootTarget to the target element and clean before child nodes before continuing
	    try {
	      render.prepareDOM(suppliedConfig || {});
	    } catch (e) {
	      utils.logError(e)
	      return this
	    }
	
	    // Check whether a config is supplied
	    if (!utils.doesConfigExist(suppliedConfig)) {
	      render.triggerError('No configuration was supplied. Please supply a config object upon library initialization');
	      return this
	    }
	
	    // Start from local config
	    if (!utils.isRemoteProject(suppliedConfig) || suppliedConfig.disable_remote_load) {
	      var mergedConfig = config.setDefaultsWithoutProject(suppliedConfig)
	      return startWithConfig(mergedConfig)
	    }
	
	    // Load remote embedded config
	    if (utils.isEmbeddedProject(suppliedConfig)) {
	      loadRemoteEmbeddedProject(suppliedConfig)
	    }
	
	    // Load remote hosted config
	    if (utils.isHostedProject(suppliedConfig)) {
	      loadRemoteHostedProject(suppliedConfig)
	    }
	
	    return this
	  };
	
	  // Setup the Timekit SDK with correct config
	  var configureSdk = function(sdkConfig) {
	    sdk.configure(getConfig().sdk);
	  };
	
	  var loadRemoteEmbeddedProject = function(suppliedConfig) {
	    // App key is required when fetching an embedded project, bail if not fund
	    if (!suppliedConfig.app_key) {
	      render.triggerError('Missing "app_key" in conjunction with "project_id", please provide your "app_key" for authentication');
	      return this
	    }
	    configureSdk();
	    sdk.makeRequest({
	      url: '/projects/embed/' + suppliedConfig.project_id,
	      method: 'get'
	    })
	    .then(function(response) {
	      remoteProjectLoaded(response, suppliedConfig)
	    })
	    .catch(function (e) {
	      render.triggerError(['The project could not be found, please double-check your "project_id" and "app_key"', e]);
	    })
	  }
	
	  var loadRemoteHostedProject = function (suppliedConfig) {
	    configureSdk();
	    sdk.makeRequest({
	      url: '/projects/hosted/' + suppliedConfig.project_slug,
	      method: 'get'
	    })
	    .then(function(response) {
	      remoteProjectLoaded(response, suppliedConfig)
	    })
	    .catch(function (e) {
	      render.triggerError(['The project could not be found, please double-check your "project_slug"', e]);
	    })
	  }
	
	  // Process retrieved project config and start
	  var remoteProjectLoaded = function (response, suppliedConfig) {
	    var remoteConfig = response.data
	    // streamline naming of object keys
	    if (remoteConfig.id) {
	      remoteConfig.project_id = remoteConfig.id
	      delete remoteConfig.id
	    }
	    if (remoteConfig.slug) {
	      remoteConfig.project_slug = remoteConfig.slug
	      delete remoteConfig.slug
	    }
	    // merge with supplied config for overwriting settings
	    var mergedConfig = $.extend(true, {}, remoteConfig, suppliedConfig);
	    utils.logDebug(['Remote config:', remoteConfig]);
	    startWithConfig(mergedConfig)
	  }
	
	  // Parse the config and start rendering
	  var startWithConfig = function(suppliedConfig) {
	    // Handle config and defaults
	    try {
	      config.parseAndUpdate(suppliedConfig);
	    } catch (e) {
	      render.triggerError(e);
	      return this
	    }
	
	    utils.logDebug(['Final config:', getConfig()]);
	
	    try {
	      return startRender();
	    } catch (e) {
	      render.triggerError(e);
	      return this
	    }
	  };
	
	  // Render method
	  var startRender = function() {
	    utils.doCallback('renderStarted');
	
	    // Setup Timekit SDK config
	    configureSdk();
	
	    // Start by guessing customer timezone
	    if (getConfig().ui.timezone) {
	      render.setCustomerTimezone(getConfig().ui.timezone);
	    } else {
	      render.guessCustomerTimezone();
	    }
	
	    // Initialize FullCalendar
	    render.initializeCalendar();
	
	    // Get availability through Timekit SDK
	    render.getAvailability();
	
	    // Show image avatar if set
	    if (getConfig().ui.avatar) {
	      render.renderAvatarImage();
	    }
	
	    // Print out display name
	    if (getConfig().ui.display_name) {
	      render.renderDisplayName();
	    }
	
	    // Show the footer with timezone helper and TK credits
	    render.renderFooter();
	
	    utils.doCallback('renderCompleted');
	
	    return this;
	  };
	
	  // Get library version
	  var getVersion = function() {
	    return ("2.7.0");
	  };
	
	  var destroy = function() {
	    render.destroyFullCalendar();
	    render.prepareDOM({});
	    config.update({});
	    return this;
	  };
	
	  // Expose methods
	  return {
	    setConfig:    config.parseAndUpdate,
	    getConfig:    getConfig,
	    getVersion:   getVersion,
	    render:       startRender,
	    init:         init,
	    destroy:      destroy,
	    timekitCreateBooking: render.timekitCreateBooking,
	    fullCalendar: render.fullCalendar,
	    timekitSdk:   sdk
	  };
	
	}
	
	module.exports = Initialize


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Promise) {'use strict';
	
	/*!
	 * Timekit JavaScript SDK
	 * http://timekit.io
	 *
	 * Copyright 2015 Timekit, Inc.
	 * The Timekit JavaScript SDK is freely distributable under the MIT license.
	 *
	 */
	var axios = __webpack_require__(8);
	var humps = __webpack_require__(27);
	var merge = __webpack_require__(28);
	var utils = __webpack_require__(29);
	var endpoints = __webpack_require__(32);
	var deprecatedEndpoints = __webpack_require__(33);
	
	function Timekit() {
	
	  /**
	   * Auth variables for login gated API methods
	   * @type {String}
	   */
	  var includes = [];
	  var headers = {};
	  var nextPayload = {};
	
	  /**
	   * Default config
	   * @type {Object}
	   */
	  var config = {
	    app: '',
	    apiBaseUrl: 'https://api.timekit.io/',
	    apiVersion: 'v2',
	    convertResponseToCamelcase: false,
	    convertRequestToSnakecase: true,
	    autoFlattenResponse: true,
	    resourceEmail: null,
	    resourceKey: null,
	    appKey: null,
	  };
	
	  /**
	   * Root Object that holds methods to expose for API consumption
	   * @type {Object}
	   */
	  var TK = {};
	
	  /**
	   * Prepare and make HTTP request to API
	   * @type {Object}
	   * @return {Promise}
	   */
	  TK.makeRequest = function(args) {
	
	    // Handle chained payload data if applicable
	    args = utils.mergeNextPayload(args, nextPayload)
	    nextPayload = {};
	
	    // construct URL with base, version and endpoint
	    args.url = utils.buildUrl(args.url, config);
	
	    // add http headers if applicable
	    args.headers = args.headers || headers || {};
	
	    if (config.headers) {
	      args.headers = merge(config.headers, args.headers)
	    }
	    if (!args.headers['Timekit-App'] && config.app) {
	      args.headers['Timekit-App'] = config.app;
	    }
	    if (config.inputTimestampFormat) {
	      args.headers['Timekit-InputTimestampFormat'] = config.inputTimestampFormat;
	    }
	    if (config.outputTimestampFormat) {
	      args.headers['Timekit-OutputTimestampFormat'] = config.outputTimestampFormat;
	    }
	    if (config.timezone) {
	      args.headers['Timekit-Timezone'] = config.timezone;
	    }
	
	    // add auth headers (personal token) if not being overwritten by request/asUser
	    if (!args.headers['Authorization'] && config.resourceEmail && config.resourceKey) {
	      args.headers['Authorization'] = 'Basic ' + utils.encodeAuthHeader(config.resourceEmail, config.resourceKey);
	    }
	
	    // add auth headers (app token)
	    if (!args.headers['Authorization'] && config.appKey) {
	      args.headers['Authorization'] = 'Basic ' + utils.encodeAuthHeader('', config.appKey);
	    }
	
	    // reset headers
	    if (Object.keys(headers).length > 0) {
	      headers = {};
	    }
	
	    // add dynamic includes if applicable
	    if (includes && includes.length > 0) {
	      if (args.params === undefined) { args.params = {}; }
	      args.params.include = includes.join();
	      includes = [];
	    }
	
	    // decamelize keys in data objects
	    if (args.data && config.convertRequestToSnakecase) { args.data = humps.decamelizeKeys(args.data); }
	
	    // register response interceptor for data manipulation
	    var interceptor = axios.interceptors.response.use(function (response) {
	      if (response.data && response.data.data) {
	        if (config.autoFlattenResponse) {
	          response = utils.copyResponseMetaData(response)
	        }
	        if (config.convertResponseToCamelcase) {
	          response.data = humps.camelizeKeys(response.data);
	        }
	      }
	      return response;
	    }, function (error) {
	      return Promise.reject(error);
	    });
	
	    // execute request!
	    var request = axios(args);
	
	    // deregister response interceptor
	    axios.interceptors.response.eject(interceptor);
	
	    return request;
	  };
	
	  /**
	   * Overwrite default config with supplied settings
	   * @type {Function}
	   * @return {Object}
	   */
	  TK.configure = function(custom) {
	    for (var attr in custom) { config[attr] = custom[attr]; }
	    return config;
	  };
	
	  /**
	   * Returns the current config
	   * @type {Function}
	   * @return {Object}
	   */
	  TK.getConfig = function() {
	    return config;
	  };
	
	  /**
	   * Set the active user manually (happens automatically on timekit.auth())
	   * @type {Function}
	   */
	  TK.setUser = function(email, apiKey) {
	    config.resourceEmail = email;
	    config.resourceKey = apiKey;
	  };
	
	  /**
	   * Returns the current active user
	   * @type {Function}
	   * @return {Object}
	   */
	  TK.getUser = function() {
	    return {
	      email: config.resourceEmail,
	      apiToken: config.resourceKey
	    };
	  };
	
	  /**
	   * Set app token (happens automatically on timekit.auth())
	   * @type {Function}
	   */
	  TK.setAppKey = function(apiKey) {
	    config.appKey = apiKey;
	  };
	
	  /**
	   * Returns the app token
	   * @type {Function}
	   * @return {Object}
	   */
	  TK.getAppKey = function() {
	    return config.appKey
	  };
	
	  /**
	   * Set the active user temporarily for the next request (fluent/chainable return)
	   * @type {Function}
	   */
	  TK.asUser = function(email, apiKey) {
	    headers['Authorization'] = 'Basic ' + utils.encodeAuthHeader(email, apiKey);
	    return this;
	  };
	
	  /**
	  * Set the timekit app slug temporarily for the next request (fluent/chainable return)
	  * @type {Function}
	  */
	  TK.asApp = function(slug) {
	    headers['Timekit-App'] = slug;
	    return this;
	  };
	
	  /**
	   * Add supplied dynamic includes to the next request (fluent/chainable return)
	   * @type {Function}
	   * @return {Object}
	   */
	  TK.include = function(arg) {
	    if (Array.isArray(arg)) includes = arg
	    else includes = Array.prototype.slice.call(arguments);
	    return this;
	  };
	
	  /**
	   * Add supplied headers to the next request (fluent/chainable return)
	   * @type {Function}
	   * @return {Object}
	   */
	  TK.headers = function(data) {
	    headers = merge(headers, data)
	    return this;
	  };
	
	  /**
	   * Add supplied payload to the next request only
	   * @type {Function}
	   * @return {Object}
	   */
	  TK.carry = function(data) {
	    nextPayload = merge(nextPayload, data)
	    return this;
	  };
	
	  /**
	   * Return a new instance of the SDK
	   * @type {Function}
	   * @return {Object}
	   */
	  TK.newInstance = function() {
	    return new Timekit();
	  };
	
	  /**
	   * Redirect to the Google signup/login page
	   * Kept this in this file (not endpoints.js) because of internal dependencies to headers, config etc.
	   * @type {Function}
	   * @return {String}
	   */
	  TK.accountGoogleSignup = function(data, shouldAutoRedirect) {
	
	    var app = config.app;
	
	    // If app header exists (using .asApp() function), use that
	    if (headers['Timekit-App']) {
	      app = headers['Timekit-App'];
	    }
	
	    var baseUrl = utils.buildUrl('/accounts/google/signup', config);
	    var finalUrl = baseUrl + '?Timekit-App=' + app + (data && data.callback ? '&callback=' + data.callback : '')
	
	    if(shouldAutoRedirect && window) {
	      window.location.href = finalUrl;
	    } else {
	      return finalUrl;
	    }
	
	  };
	
	  /**
	   * Redirect to the Microsoft signup/login page
	   * Kept this in this file (not endpoints.js) because of internal dependencies to headers, config etc.
	   * @type {Function}
	   * @return {String}
	   */
	  TK.accountMicrosoftSignup = function(data, shouldAutoRedirect) {
	
	    var app = config.app;
	
	    // If app header exists (using .asApp() function), use that
	    if (headers['Timekit-App']) {
	      app = headers['Timekit-App'];
	    }
	
	    var baseUrl = utils.buildUrl('/accounts/microsoft/signup', config);
	    var finalUrl = baseUrl + '?Timekit-App=' + app + (data && data.callback ? '&callback=' + data.callback : '')
	
	    if(shouldAutoRedirect && window) {
	      window.location.href = finalUrl;
	    } else {
	      return finalUrl;
	    }
	
	  };
	
	  /**
	   * Import endpoint defintions
	   */
	  TK = endpoints(TK)
	
	  /**
	   * Import deprecated endpoint defintions
	   */
	  TK = deprecatedEndpoints(TK)
	
	  return TK;
	
	}
	
	module.exports = new Timekit();
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(5).Promise;


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	var require;/* WEBPACK VAR INJECTION */(function(process, Promise, global) {/*!
	 * @overview es6-promise - a tiny implementation of Promises/A+.
	 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
	 * @license   Licensed under MIT license
	 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
	 * @version   3.3.1
	 */
	
	(function (global, factory) {
	     true ? module.exports = factory() :
	    typeof define === 'function' && define.amd ? define(factory) :
	    (global.ES6Promise = factory());
	}(this, (function () { 'use strict';
	
	function objectOrFunction(x) {
	  return typeof x === 'function' || typeof x === 'object' && x !== null;
	}
	
	function isFunction(x) {
	  return typeof x === 'function';
	}
	
	var _isArray = undefined;
	if (!Array.isArray) {
	  _isArray = function (x) {
	    return Object.prototype.toString.call(x) === '[object Array]';
	  };
	} else {
	  _isArray = Array.isArray;
	}
	
	var isArray = _isArray;
	
	var len = 0;
	var vertxNext = undefined;
	var customSchedulerFn = undefined;
	
	var asap = function asap(callback, arg) {
	  queue[len] = callback;
	  queue[len + 1] = arg;
	  len += 2;
	  if (len === 2) {
	    // If len is 2, that means that we need to schedule an async flush.
	    // If additional callbacks are queued before the queue is flushed, they
	    // will be processed by this flush that we are scheduling.
	    if (customSchedulerFn) {
	      customSchedulerFn(flush);
	    } else {
	      scheduleFlush();
	    }
	  }
	};
	
	function setScheduler(scheduleFn) {
	  customSchedulerFn = scheduleFn;
	}
	
	function setAsap(asapFn) {
	  asap = asapFn;
	}
	
	var browserWindow = typeof window !== 'undefined' ? window : undefined;
	var browserGlobal = browserWindow || {};
	var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
	var isNode = typeof self === 'undefined' && typeof process !== 'undefined' && ({}).toString.call(process) === '[object process]';
	
	// test for web worker but not in IE10
	var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';
	
	// node
	function useNextTick() {
	  // node version 0.10.x displays a deprecation warning when nextTick is used recursively
	  // see https://github.com/cujojs/when/issues/410 for details
	  return function () {
	    return process.nextTick(flush);
	  };
	}
	
	// vertx
	function useVertxTimer() {
	  return function () {
	    vertxNext(flush);
	  };
	}
	
	function useMutationObserver() {
	  var iterations = 0;
	  var observer = new BrowserMutationObserver(flush);
	  var node = document.createTextNode('');
	  observer.observe(node, { characterData: true });
	
	  return function () {
	    node.data = iterations = ++iterations % 2;
	  };
	}
	
	// web worker
	function useMessageChannel() {
	  var channel = new MessageChannel();
	  channel.port1.onmessage = flush;
	  return function () {
	    return channel.port2.postMessage(0);
	  };
	}
	
	function useSetTimeout() {
	  // Store setTimeout reference so es6-promise will be unaffected by
	  // other code modifying setTimeout (like sinon.useFakeTimers())
	  var globalSetTimeout = setTimeout;
	  return function () {
	    return globalSetTimeout(flush, 1);
	  };
	}
	
	var queue = new Array(1000);
	function flush() {
	  for (var i = 0; i < len; i += 2) {
	    var callback = queue[i];
	    var arg = queue[i + 1];
	
	    callback(arg);
	
	    queue[i] = undefined;
	    queue[i + 1] = undefined;
	  }
	
	  len = 0;
	}
	
	function attemptVertx() {
	  try {
	    var r = require;
	    var vertx = __webpack_require__(7);
	    vertxNext = vertx.runOnLoop || vertx.runOnContext;
	    return useVertxTimer();
	  } catch (e) {
	    return useSetTimeout();
	  }
	}
	
	var scheduleFlush = undefined;
	// Decide what async method to use to triggering processing of queued callbacks:
	if (isNode) {
	  scheduleFlush = useNextTick();
	} else if (BrowserMutationObserver) {
	  scheduleFlush = useMutationObserver();
	} else if (isWorker) {
	  scheduleFlush = useMessageChannel();
	} else if (browserWindow === undefined && "function" === 'function') {
	  scheduleFlush = attemptVertx();
	} else {
	  scheduleFlush = useSetTimeout();
	}
	
	function then(onFulfillment, onRejection) {
	  var _arguments = arguments;
	
	  var parent = this;
	
	  var child = new this.constructor(noop);
	
	  if (child[PROMISE_ID] === undefined) {
	    makePromise(child);
	  }
	
	  var _state = parent._state;
	
	  if (_state) {
	    (function () {
	      var callback = _arguments[_state - 1];
	      asap(function () {
	        return invokeCallback(_state, child, callback, parent._result);
	      });
	    })();
	  } else {
	    subscribe(parent, child, onFulfillment, onRejection);
	  }
	
	  return child;
	}
	
	/**
	  `Promise.resolve` returns a promise that will become resolved with the
	  passed `value`. It is shorthand for the following:
	
	  ```javascript
	  let promise = new Promise(function(resolve, reject){
	    resolve(1);
	  });
	
	  promise.then(function(value){
	    // value === 1
	  });
	  ```
	
	  Instead of writing the above, your code now simply becomes the following:
	
	  ```javascript
	  let promise = Promise.resolve(1);
	
	  promise.then(function(value){
	    // value === 1
	  });
	  ```
	
	  @method resolve
	  @static
	  @param {Any} value value that the returned promise will be resolved with
	  Useful for tooling.
	  @return {Promise} a promise that will become fulfilled with the given
	  `value`
	*/
	function resolve(object) {
	  /*jshint validthis:true */
	  var Constructor = this;
	
	  if (object && typeof object === 'object' && object.constructor === Constructor) {
	    return object;
	  }
	
	  var promise = new Constructor(noop);
	  _resolve(promise, object);
	  return promise;
	}
	
	var PROMISE_ID = Math.random().toString(36).substring(16);
	
	function noop() {}
	
	var PENDING = void 0;
	var FULFILLED = 1;
	var REJECTED = 2;
	
	var GET_THEN_ERROR = new ErrorObject();
	
	function selfFulfillment() {
	  return new TypeError("You cannot resolve a promise with itself");
	}
	
	function cannotReturnOwn() {
	  return new TypeError('A promises callback cannot return that same promise.');
	}
	
	function getThen(promise) {
	  try {
	    return promise.then;
	  } catch (error) {
	    GET_THEN_ERROR.error = error;
	    return GET_THEN_ERROR;
	  }
	}
	
	function tryThen(then, value, fulfillmentHandler, rejectionHandler) {
	  try {
	    then.call(value, fulfillmentHandler, rejectionHandler);
	  } catch (e) {
	    return e;
	  }
	}
	
	function handleForeignThenable(promise, thenable, then) {
	  asap(function (promise) {
	    var sealed = false;
	    var error = tryThen(then, thenable, function (value) {
	      if (sealed) {
	        return;
	      }
	      sealed = true;
	      if (thenable !== value) {
	        _resolve(promise, value);
	      } else {
	        fulfill(promise, value);
	      }
	    }, function (reason) {
	      if (sealed) {
	        return;
	      }
	      sealed = true;
	
	      _reject(promise, reason);
	    }, 'Settle: ' + (promise._label || ' unknown promise'));
	
	    if (!sealed && error) {
	      sealed = true;
	      _reject(promise, error);
	    }
	  }, promise);
	}
	
	function handleOwnThenable(promise, thenable) {
	  if (thenable._state === FULFILLED) {
	    fulfill(promise, thenable._result);
	  } else if (thenable._state === REJECTED) {
	    _reject(promise, thenable._result);
	  } else {
	    subscribe(thenable, undefined, function (value) {
	      return _resolve(promise, value);
	    }, function (reason) {
	      return _reject(promise, reason);
	    });
	  }
	}
	
	function handleMaybeThenable(promise, maybeThenable, then$$) {
	  if (maybeThenable.constructor === promise.constructor && then$$ === then && maybeThenable.constructor.resolve === resolve) {
	    handleOwnThenable(promise, maybeThenable);
	  } else {
	    if (then$$ === GET_THEN_ERROR) {
	      _reject(promise, GET_THEN_ERROR.error);
	    } else if (then$$ === undefined) {
	      fulfill(promise, maybeThenable);
	    } else if (isFunction(then$$)) {
	      handleForeignThenable(promise, maybeThenable, then$$);
	    } else {
	      fulfill(promise, maybeThenable);
	    }
	  }
	}
	
	function _resolve(promise, value) {
	  if (promise === value) {
	    _reject(promise, selfFulfillment());
	  } else if (objectOrFunction(value)) {
	    handleMaybeThenable(promise, value, getThen(value));
	  } else {
	    fulfill(promise, value);
	  }
	}
	
	function publishRejection(promise) {
	  if (promise._onerror) {
	    promise._onerror(promise._result);
	  }
	
	  publish(promise);
	}
	
	function fulfill(promise, value) {
	  if (promise._state !== PENDING) {
	    return;
	  }
	
	  promise._result = value;
	  promise._state = FULFILLED;
	
	  if (promise._subscribers.length !== 0) {
	    asap(publish, promise);
	  }
	}
	
	function _reject(promise, reason) {
	  if (promise._state !== PENDING) {
	    return;
	  }
	  promise._state = REJECTED;
	  promise._result = reason;
	
	  asap(publishRejection, promise);
	}
	
	function subscribe(parent, child, onFulfillment, onRejection) {
	  var _subscribers = parent._subscribers;
	  var length = _subscribers.length;
	
	  parent._onerror = null;
	
	  _subscribers[length] = child;
	  _subscribers[length + FULFILLED] = onFulfillment;
	  _subscribers[length + REJECTED] = onRejection;
	
	  if (length === 0 && parent._state) {
	    asap(publish, parent);
	  }
	}
	
	function publish(promise) {
	  var subscribers = promise._subscribers;
	  var settled = promise._state;
	
	  if (subscribers.length === 0) {
	    return;
	  }
	
	  var child = undefined,
	      callback = undefined,
	      detail = promise._result;
	
	  for (var i = 0; i < subscribers.length; i += 3) {
	    child = subscribers[i];
	    callback = subscribers[i + settled];
	
	    if (child) {
	      invokeCallback(settled, child, callback, detail);
	    } else {
	      callback(detail);
	    }
	  }
	
	  promise._subscribers.length = 0;
	}
	
	function ErrorObject() {
	  this.error = null;
	}
	
	var TRY_CATCH_ERROR = new ErrorObject();
	
	function tryCatch(callback, detail) {
	  try {
	    return callback(detail);
	  } catch (e) {
	    TRY_CATCH_ERROR.error = e;
	    return TRY_CATCH_ERROR;
	  }
	}
	
	function invokeCallback(settled, promise, callback, detail) {
	  var hasCallback = isFunction(callback),
	      value = undefined,
	      error = undefined,
	      succeeded = undefined,
	      failed = undefined;
	
	  if (hasCallback) {
	    value = tryCatch(callback, detail);
	
	    if (value === TRY_CATCH_ERROR) {
	      failed = true;
	      error = value.error;
	      value = null;
	    } else {
	      succeeded = true;
	    }
	
	    if (promise === value) {
	      _reject(promise, cannotReturnOwn());
	      return;
	    }
	  } else {
	    value = detail;
	    succeeded = true;
	  }
	
	  if (promise._state !== PENDING) {
	    // noop
	  } else if (hasCallback && succeeded) {
	      _resolve(promise, value);
	    } else if (failed) {
	      _reject(promise, error);
	    } else if (settled === FULFILLED) {
	      fulfill(promise, value);
	    } else if (settled === REJECTED) {
	      _reject(promise, value);
	    }
	}
	
	function initializePromise(promise, resolver) {
	  try {
	    resolver(function resolvePromise(value) {
	      _resolve(promise, value);
	    }, function rejectPromise(reason) {
	      _reject(promise, reason);
	    });
	  } catch (e) {
	    _reject(promise, e);
	  }
	}
	
	var id = 0;
	function nextId() {
	  return id++;
	}
	
	function makePromise(promise) {
	  promise[PROMISE_ID] = id++;
	  promise._state = undefined;
	  promise._result = undefined;
	  promise._subscribers = [];
	}
	
	function Enumerator(Constructor, input) {
	  this._instanceConstructor = Constructor;
	  this.promise = new Constructor(noop);
	
	  if (!this.promise[PROMISE_ID]) {
	    makePromise(this.promise);
	  }
	
	  if (isArray(input)) {
	    this._input = input;
	    this.length = input.length;
	    this._remaining = input.length;
	
	    this._result = new Array(this.length);
	
	    if (this.length === 0) {
	      fulfill(this.promise, this._result);
	    } else {
	      this.length = this.length || 0;
	      this._enumerate();
	      if (this._remaining === 0) {
	        fulfill(this.promise, this._result);
	      }
	    }
	  } else {
	    _reject(this.promise, validationError());
	  }
	}
	
	function validationError() {
	  return new Error('Array Methods must be provided an Array');
	};
	
	Enumerator.prototype._enumerate = function () {
	  var length = this.length;
	  var _input = this._input;
	
	  for (var i = 0; this._state === PENDING && i < length; i++) {
	    this._eachEntry(_input[i], i);
	  }
	};
	
	Enumerator.prototype._eachEntry = function (entry, i) {
	  var c = this._instanceConstructor;
	  var resolve$$ = c.resolve;
	
	  if (resolve$$ === resolve) {
	    var _then = getThen(entry);
	
	    if (_then === then && entry._state !== PENDING) {
	      this._settledAt(entry._state, i, entry._result);
	    } else if (typeof _then !== 'function') {
	      this._remaining--;
	      this._result[i] = entry;
	    } else if (c === Promise) {
	      var promise = new c(noop);
	      handleMaybeThenable(promise, entry, _then);
	      this._willSettleAt(promise, i);
	    } else {
	      this._willSettleAt(new c(function (resolve$$) {
	        return resolve$$(entry);
	      }), i);
	    }
	  } else {
	    this._willSettleAt(resolve$$(entry), i);
	  }
	};
	
	Enumerator.prototype._settledAt = function (state, i, value) {
	  var promise = this.promise;
	
	  if (promise._state === PENDING) {
	    this._remaining--;
	
	    if (state === REJECTED) {
	      _reject(promise, value);
	    } else {
	      this._result[i] = value;
	    }
	  }
	
	  if (this._remaining === 0) {
	    fulfill(promise, this._result);
	  }
	};
	
	Enumerator.prototype._willSettleAt = function (promise, i) {
	  var enumerator = this;
	
	  subscribe(promise, undefined, function (value) {
	    return enumerator._settledAt(FULFILLED, i, value);
	  }, function (reason) {
	    return enumerator._settledAt(REJECTED, i, reason);
	  });
	};
	
	/**
	  `Promise.all` accepts an array of promises, and returns a new promise which
	  is fulfilled with an array of fulfillment values for the passed promises, or
	  rejected with the reason of the first passed promise to be rejected. It casts all
	  elements of the passed iterable to promises as it runs this algorithm.
	
	  Example:
	
	  ```javascript
	  let promise1 = resolve(1);
	  let promise2 = resolve(2);
	  let promise3 = resolve(3);
	  let promises = [ promise1, promise2, promise3 ];
	
	  Promise.all(promises).then(function(array){
	    // The array here would be [ 1, 2, 3 ];
	  });
	  ```
	
	  If any of the `promises` given to `all` are rejected, the first promise
	  that is rejected will be given as an argument to the returned promises's
	  rejection handler. For example:
	
	  Example:
	
	  ```javascript
	  let promise1 = resolve(1);
	  let promise2 = reject(new Error("2"));
	  let promise3 = reject(new Error("3"));
	  let promises = [ promise1, promise2, promise3 ];
	
	  Promise.all(promises).then(function(array){
	    // Code here never runs because there are rejected promises!
	  }, function(error) {
	    // error.message === "2"
	  });
	  ```
	
	  @method all
	  @static
	  @param {Array} entries array of promises
	  @param {String} label optional string for labeling the promise.
	  Useful for tooling.
	  @return {Promise} promise that is fulfilled when all `promises` have been
	  fulfilled, or rejected if any of them become rejected.
	  @static
	*/
	function all(entries) {
	  return new Enumerator(this, entries).promise;
	}
	
	/**
	  `Promise.race` returns a new promise which is settled in the same way as the
	  first passed promise to settle.
	
	  Example:
	
	  ```javascript
	  let promise1 = new Promise(function(resolve, reject){
	    setTimeout(function(){
	      resolve('promise 1');
	    }, 200);
	  });
	
	  let promise2 = new Promise(function(resolve, reject){
	    setTimeout(function(){
	      resolve('promise 2');
	    }, 100);
	  });
	
	  Promise.race([promise1, promise2]).then(function(result){
	    // result === 'promise 2' because it was resolved before promise1
	    // was resolved.
	  });
	  ```
	
	  `Promise.race` is deterministic in that only the state of the first
	  settled promise matters. For example, even if other promises given to the
	  `promises` array argument are resolved, but the first settled promise has
	  become rejected before the other promises became fulfilled, the returned
	  promise will become rejected:
	
	  ```javascript
	  let promise1 = new Promise(function(resolve, reject){
	    setTimeout(function(){
	      resolve('promise 1');
	    }, 200);
	  });
	
	  let promise2 = new Promise(function(resolve, reject){
	    setTimeout(function(){
	      reject(new Error('promise 2'));
	    }, 100);
	  });
	
	  Promise.race([promise1, promise2]).then(function(result){
	    // Code here never runs
	  }, function(reason){
	    // reason.message === 'promise 2' because promise 2 became rejected before
	    // promise 1 became fulfilled
	  });
	  ```
	
	  An example real-world use case is implementing timeouts:
	
	  ```javascript
	  Promise.race([ajax('foo.json'), timeout(5000)])
	  ```
	
	  @method race
	  @static
	  @param {Array} promises array of promises to observe
	  Useful for tooling.
	  @return {Promise} a promise which settles in the same way as the first passed
	  promise to settle.
	*/
	function race(entries) {
	  /*jshint validthis:true */
	  var Constructor = this;
	
	  if (!isArray(entries)) {
	    return new Constructor(function (_, reject) {
	      return reject(new TypeError('You must pass an array to race.'));
	    });
	  } else {
	    return new Constructor(function (resolve, reject) {
	      var length = entries.length;
	      for (var i = 0; i < length; i++) {
	        Constructor.resolve(entries[i]).then(resolve, reject);
	      }
	    });
	  }
	}
	
	/**
	  `Promise.reject` returns a promise rejected with the passed `reason`.
	  It is shorthand for the following:
	
	  ```javascript
	  let promise = new Promise(function(resolve, reject){
	    reject(new Error('WHOOPS'));
	  });
	
	  promise.then(function(value){
	    // Code here doesn't run because the promise is rejected!
	  }, function(reason){
	    // reason.message === 'WHOOPS'
	  });
	  ```
	
	  Instead of writing the above, your code now simply becomes the following:
	
	  ```javascript
	  let promise = Promise.reject(new Error('WHOOPS'));
	
	  promise.then(function(value){
	    // Code here doesn't run because the promise is rejected!
	  }, function(reason){
	    // reason.message === 'WHOOPS'
	  });
	  ```
	
	  @method reject
	  @static
	  @param {Any} reason value that the returned promise will be rejected with.
	  Useful for tooling.
	  @return {Promise} a promise rejected with the given `reason`.
	*/
	function reject(reason) {
	  /*jshint validthis:true */
	  var Constructor = this;
	  var promise = new Constructor(noop);
	  _reject(promise, reason);
	  return promise;
	}
	
	function needsResolver() {
	  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
	}
	
	function needsNew() {
	  throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
	}
	
	/**
	  Promise objects represent the eventual result of an asynchronous operation. The
	  primary way of interacting with a promise is through its `then` method, which
	  registers callbacks to receive either a promise's eventual value or the reason
	  why the promise cannot be fulfilled.
	
	  Terminology
	  -----------
	
	  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
	  - `thenable` is an object or function that defines a `then` method.
	  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
	  - `exception` is a value that is thrown using the throw statement.
	  - `reason` is a value that indicates why a promise was rejected.
	  - `settled` the final resting state of a promise, fulfilled or rejected.
	
	  A promise can be in one of three states: pending, fulfilled, or rejected.
	
	  Promises that are fulfilled have a fulfillment value and are in the fulfilled
	  state.  Promises that are rejected have a rejection reason and are in the
	  rejected state.  A fulfillment value is never a thenable.
	
	  Promises can also be said to *resolve* a value.  If this value is also a
	  promise, then the original promise's settled state will match the value's
	  settled state.  So a promise that *resolves* a promise that rejects will
	  itself reject, and a promise that *resolves* a promise that fulfills will
	  itself fulfill.
	
	
	  Basic Usage:
	  ------------
	
	  ```js
	  let promise = new Promise(function(resolve, reject) {
	    // on success
	    resolve(value);
	
	    // on failure
	    reject(reason);
	  });
	
	  promise.then(function(value) {
	    // on fulfillment
	  }, function(reason) {
	    // on rejection
	  });
	  ```
	
	  Advanced Usage:
	  ---------------
	
	  Promises shine when abstracting away asynchronous interactions such as
	  `XMLHttpRequest`s.
	
	  ```js
	  function getJSON(url) {
	    return new Promise(function(resolve, reject){
	      let xhr = new XMLHttpRequest();
	
	      xhr.open('GET', url);
	      xhr.onreadystatechange = handler;
	      xhr.responseType = 'json';
	      xhr.setRequestHeader('Accept', 'application/json');
	      xhr.send();
	
	      function handler() {
	        if (this.readyState === this.DONE) {
	          if (this.status === 200) {
	            resolve(this.response);
	          } else {
	            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
	          }
	        }
	      };
	    });
	  }
	
	  getJSON('/posts.json').then(function(json) {
	    // on fulfillment
	  }, function(reason) {
	    // on rejection
	  });
	  ```
	
	  Unlike callbacks, promises are great composable primitives.
	
	  ```js
	  Promise.all([
	    getJSON('/posts'),
	    getJSON('/comments')
	  ]).then(function(values){
	    values[0] // => postsJSON
	    values[1] // => commentsJSON
	
	    return values;
	  });
	  ```
	
	  @class Promise
	  @param {function} resolver
	  Useful for tooling.
	  @constructor
	*/
	function Promise(resolver) {
	  this[PROMISE_ID] = nextId();
	  this._result = this._state = undefined;
	  this._subscribers = [];
	
	  if (noop !== resolver) {
	    typeof resolver !== 'function' && needsResolver();
	    this instanceof Promise ? initializePromise(this, resolver) : needsNew();
	  }
	}
	
	Promise.all = all;
	Promise.race = race;
	Promise.resolve = resolve;
	Promise.reject = reject;
	Promise._setScheduler = setScheduler;
	Promise._setAsap = setAsap;
	Promise._asap = asap;
	
	Promise.prototype = {
	  constructor: Promise,
	
	  /**
	    The primary way of interacting with a promise is through its `then` method,
	    which registers callbacks to receive either a promise's eventual value or the
	    reason why the promise cannot be fulfilled.
	  
	    ```js
	    findUser().then(function(user){
	      // user is available
	    }, function(reason){
	      // user is unavailable, and you are given the reason why
	    });
	    ```
	  
	    Chaining
	    --------
	  
	    The return value of `then` is itself a promise.  This second, 'downstream'
	    promise is resolved with the return value of the first promise's fulfillment
	    or rejection handler, or rejected if the handler throws an exception.
	  
	    ```js
	    findUser().then(function (user) {
	      return user.name;
	    }, function (reason) {
	      return 'default name';
	    }).then(function (userName) {
	      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
	      // will be `'default name'`
	    });
	  
	    findUser().then(function (user) {
	      throw new Error('Found user, but still unhappy');
	    }, function (reason) {
	      throw new Error('`findUser` rejected and we're unhappy');
	    }).then(function (value) {
	      // never reached
	    }, function (reason) {
	      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
	      // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
	    });
	    ```
	    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
	  
	    ```js
	    findUser().then(function (user) {
	      throw new PedagogicalException('Upstream error');
	    }).then(function (value) {
	      // never reached
	    }).then(function (value) {
	      // never reached
	    }, function (reason) {
	      // The `PedgagocialException` is propagated all the way down to here
	    });
	    ```
	  
	    Assimilation
	    ------------
	  
	    Sometimes the value you want to propagate to a downstream promise can only be
	    retrieved asynchronously. This can be achieved by returning a promise in the
	    fulfillment or rejection handler. The downstream promise will then be pending
	    until the returned promise is settled. This is called *assimilation*.
	  
	    ```js
	    findUser().then(function (user) {
	      return findCommentsByAuthor(user);
	    }).then(function (comments) {
	      // The user's comments are now available
	    });
	    ```
	  
	    If the assimliated promise rejects, then the downstream promise will also reject.
	  
	    ```js
	    findUser().then(function (user) {
	      return findCommentsByAuthor(user);
	    }).then(function (comments) {
	      // If `findCommentsByAuthor` fulfills, we'll have the value here
	    }, function (reason) {
	      // If `findCommentsByAuthor` rejects, we'll have the reason here
	    });
	    ```
	  
	    Simple Example
	    --------------
	  
	    Synchronous Example
	  
	    ```javascript
	    let result;
	  
	    try {
	      result = findResult();
	      // success
	    } catch(reason) {
	      // failure
	    }
	    ```
	  
	    Errback Example
	  
	    ```js
	    findResult(function(result, err){
	      if (err) {
	        // failure
	      } else {
	        // success
	      }
	    });
	    ```
	  
	    Promise Example;
	  
	    ```javascript
	    findResult().then(function(result){
	      // success
	    }, function(reason){
	      // failure
	    });
	    ```
	  
	    Advanced Example
	    --------------
	  
	    Synchronous Example
	  
	    ```javascript
	    let author, books;
	  
	    try {
	      author = findAuthor();
	      books  = findBooksByAuthor(author);
	      // success
	    } catch(reason) {
	      // failure
	    }
	    ```
	  
	    Errback Example
	  
	    ```js
	  
	    function foundBooks(books) {
	  
	    }
	  
	    function failure(reason) {
	  
	    }
	  
	    findAuthor(function(author, err){
	      if (err) {
	        failure(err);
	        // failure
	      } else {
	        try {
	          findBoooksByAuthor(author, function(books, err) {
	            if (err) {
	              failure(err);
	            } else {
	              try {
	                foundBooks(books);
	              } catch(reason) {
	                failure(reason);
	              }
	            }
	          });
	        } catch(error) {
	          failure(err);
	        }
	        // success
	      }
	    });
	    ```
	  
	    Promise Example;
	  
	    ```javascript
	    findAuthor().
	      then(findBooksByAuthor).
	      then(function(books){
	        // found books
	    }).catch(function(reason){
	      // something went wrong
	    });
	    ```
	  
	    @method then
	    @param {Function} onFulfilled
	    @param {Function} onRejected
	    Useful for tooling.
	    @return {Promise}
	  */
	  then: then,
	
	  /**
	    `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
	    as the catch block of a try/catch statement.
	  
	    ```js
	    function findAuthor(){
	      throw new Error('couldn't find that author');
	    }
	  
	    // synchronous
	    try {
	      findAuthor();
	    } catch(reason) {
	      // something went wrong
	    }
	  
	    // async with promises
	    findAuthor().catch(function(reason){
	      // something went wrong
	    });
	    ```
	  
	    @method catch
	    @param {Function} onRejection
	    Useful for tooling.
	    @return {Promise}
	  */
	  'catch': function _catch(onRejection) {
	    return this.then(null, onRejection);
	  }
	};
	
	function polyfill() {
	    var local = undefined;
	
	    if (typeof global !== 'undefined') {
	        local = global;
	    } else if (typeof self !== 'undefined') {
	        local = self;
	    } else {
	        try {
	            local = Function('return this')();
	        } catch (e) {
	            throw new Error('polyfill failed because global object is unavailable in this environment');
	        }
	    }
	
	    var P = local.Promise;
	
	    if (P) {
	        var promiseToString = null;
	        try {
	            promiseToString = Object.prototype.toString.call(P.resolve());
	        } catch (e) {
	            // silently ignored
	        }
	
	        if (promiseToString === '[object Promise]' && !P.cast) {
	            return;
	        }
	    }
	
	    local.Promise = Promise;
	}
	
	polyfill();
	// Strange compat..
	Promise.polyfill = polyfill;
	Promise.Promise = Promise;
	
	return Promise;
	
	})));
	//# sourceMappingURL=es6-promise.map
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6), __webpack_require__(4), (function() { return this; }())))

/***/ }),
/* 6 */
/***/ (function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	
	
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	
	
	
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.prependListener = noop;
	process.prependOnceListener = noop;
	
	process.listeners = function (name) { return [] }
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ }),
/* 7 */
/***/ (function(module, exports) {

	/* (ignored) */

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(9);

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Promise) {'use strict';
	
	var defaults = __webpack_require__(10);
	var utils = __webpack_require__(11);
	var dispatchRequest = __webpack_require__(13);
	var InterceptorManager = __webpack_require__(22);
	var isAbsoluteURL = __webpack_require__(23);
	var combineURLs = __webpack_require__(24);
	var bind = __webpack_require__(25);
	var transformData = __webpack_require__(17);
	
	function Axios(defaultConfig) {
	  this.defaults = utils.merge({}, defaultConfig);
	  this.interceptors = {
	    request: new InterceptorManager(),
	    response: new InterceptorManager()
	  };
	}
	
	Axios.prototype.request = function request(config) {
	  /*eslint no-param-reassign:0*/
	  // Allow for axios('example/url'[, config]) a la fetch API
	  if (typeof config === 'string') {
	    config = utils.merge({
	      url: arguments[0]
	    }, arguments[1]);
	  }
	
	  config = utils.merge(defaults, this.defaults, { method: 'get' }, config);
	
	  // Support baseURL config
	  if (config.baseURL && !isAbsoluteURL(config.url)) {
	    config.url = combineURLs(config.baseURL, config.url);
	  }
	
	  // Don't allow overriding defaults.withCredentials
	  config.withCredentials = config.withCredentials || this.defaults.withCredentials;
	
	  // Transform request data
	  config.data = transformData(
	    config.data,
	    config.headers,
	    config.transformRequest
	  );
	
	  // Flatten headers
	  config.headers = utils.merge(
	    config.headers.common || {},
	    config.headers[config.method] || {},
	    config.headers || {}
	  );
	
	  utils.forEach(
	    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
	    function cleanHeaderConfig(method) {
	      delete config.headers[method];
	    }
	  );
	
	  // Hook up interceptors middleware
	  var chain = [dispatchRequest, undefined];
	  var promise = Promise.resolve(config);
	
	  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
	    chain.unshift(interceptor.fulfilled, interceptor.rejected);
	  });
	
	  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
	    chain.push(interceptor.fulfilled, interceptor.rejected);
	  });
	
	  while (chain.length) {
	    promise = promise.then(chain.shift(), chain.shift());
	  }
	
	  return promise;
	};
	
	var defaultInstance = new Axios(defaults);
	var axios = module.exports = bind(Axios.prototype.request, defaultInstance);
	axios.request = bind(Axios.prototype.request, defaultInstance);
	
	// Expose Axios class to allow class inheritance
	axios.Axios = Axios;
	
	// Expose properties from defaultInstance
	axios.defaults = defaultInstance.defaults;
	axios.interceptors = defaultInstance.interceptors;
	
	// Factory for creating new instances
	axios.create = function create(defaultConfig) {
	  return new Axios(defaultConfig);
	};
	
	// Expose all/spread
	axios.all = function all(promises) {
	  return Promise.all(promises);
	};
	axios.spread = __webpack_require__(26);
	
	// Provide aliases for supported request methods
	utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
	  /*eslint func-names:0*/
	  Axios.prototype[method] = function(url, config) {
	    return this.request(utils.merge(config || {}, {
	      method: method,
	      url: url
	    }));
	  };
	  axios[method] = bind(Axios.prototype[method], defaultInstance);
	});
	
	utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
	  /*eslint func-names:0*/
	  Axios.prototype[method] = function(url, data, config) {
	    return this.request(utils.merge(config || {}, {
	      method: method,
	      url: url,
	      data: data
	    }));
	  };
	  axios[method] = bind(Axios.prototype[method], defaultInstance);
	});
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(11);
	var normalizeHeaderName = __webpack_require__(12);
	
	var PROTECTION_PREFIX = /^\)\]\}',?\n/;
	var DEFAULT_CONTENT_TYPE = {
	  'Content-Type': 'application/x-www-form-urlencoded'
	};
	
	function setContentTypeIfUnset(headers, value) {
	  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
	    headers['Content-Type'] = value;
	  }
	}
	
	module.exports = {
	  transformRequest: [function transformRequest(data, headers) {
	    normalizeHeaderName(headers, 'Content-Type');
	    if (utils.isFormData(data) ||
	      utils.isArrayBuffer(data) ||
	      utils.isStream(data) ||
	      utils.isFile(data) ||
	      utils.isBlob(data)
	    ) {
	      return data;
	    }
	    if (utils.isArrayBufferView(data)) {
	      return data.buffer;
	    }
	    if (utils.isURLSearchParams(data)) {
	      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
	      return data.toString();
	    }
	    if (utils.isObject(data)) {
	      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
	      return JSON.stringify(data);
	    }
	    return data;
	  }],
	
	  transformResponse: [function transformResponse(data) {
	    /*eslint no-param-reassign:0*/
	    if (typeof data === 'string') {
	      data = data.replace(PROTECTION_PREFIX, '');
	      try {
	        data = JSON.parse(data);
	      } catch (e) { /* Ignore */ }
	    }
	    return data;
	  }],
	
	  headers: {
	    common: {
	      'Accept': 'application/json, text/plain, */*'
	    },
	    patch: utils.merge(DEFAULT_CONTENT_TYPE),
	    post: utils.merge(DEFAULT_CONTENT_TYPE),
	    put: utils.merge(DEFAULT_CONTENT_TYPE)
	  },
	
	  timeout: 0,
	
	  xsrfCookieName: 'XSRF-TOKEN',
	  xsrfHeaderName: 'X-XSRF-TOKEN',
	
	  maxContentLength: -1,
	
	  validateStatus: function validateStatus(status) {
	    return status >= 200 && status < 300;
	  }
	};


/***/ }),
/* 11 */
/***/ (function(module, exports) {

	'use strict';
	
	/*global toString:true*/
	
	// utils is a library of generic helper functions non-specific to axios
	
	var toString = Object.prototype.toString;
	
	/**
	 * Determine if a value is an Array
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an Array, otherwise false
	 */
	function isArray(val) {
	  return toString.call(val) === '[object Array]';
	}
	
	/**
	 * Determine if a value is an ArrayBuffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
	 */
	function isArrayBuffer(val) {
	  return toString.call(val) === '[object ArrayBuffer]';
	}
	
	/**
	 * Determine if a value is a FormData
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an FormData, otherwise false
	 */
	function isFormData(val) {
	  return (typeof FormData !== 'undefined') && (val instanceof FormData);
	}
	
	/**
	 * Determine if a value is a view on an ArrayBuffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
	 */
	function isArrayBufferView(val) {
	  var result;
	  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
	    result = ArrayBuffer.isView(val);
	  } else {
	    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
	  }
	  return result;
	}
	
	/**
	 * Determine if a value is a String
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a String, otherwise false
	 */
	function isString(val) {
	  return typeof val === 'string';
	}
	
	/**
	 * Determine if a value is a Number
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Number, otherwise false
	 */
	function isNumber(val) {
	  return typeof val === 'number';
	}
	
	/**
	 * Determine if a value is undefined
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if the value is undefined, otherwise false
	 */
	function isUndefined(val) {
	  return typeof val === 'undefined';
	}
	
	/**
	 * Determine if a value is an Object
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an Object, otherwise false
	 */
	function isObject(val) {
	  return val !== null && typeof val === 'object';
	}
	
	/**
	 * Determine if a value is a Date
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Date, otherwise false
	 */
	function isDate(val) {
	  return toString.call(val) === '[object Date]';
	}
	
	/**
	 * Determine if a value is a File
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a File, otherwise false
	 */
	function isFile(val) {
	  return toString.call(val) === '[object File]';
	}
	
	/**
	 * Determine if a value is a Blob
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Blob, otherwise false
	 */
	function isBlob(val) {
	  return toString.call(val) === '[object Blob]';
	}
	
	/**
	 * Determine if a value is a Function
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Function, otherwise false
	 */
	function isFunction(val) {
	  return toString.call(val) === '[object Function]';
	}
	
	/**
	 * Determine if a value is a Stream
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Stream, otherwise false
	 */
	function isStream(val) {
	  return isObject(val) && isFunction(val.pipe);
	}
	
	/**
	 * Determine if a value is a URLSearchParams object
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
	 */
	function isURLSearchParams(val) {
	  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
	}
	
	/**
	 * Trim excess whitespace off the beginning and end of a string
	 *
	 * @param {String} str The String to trim
	 * @returns {String} The String freed of excess whitespace
	 */
	function trim(str) {
	  return str.replace(/^\s*/, '').replace(/\s*$/, '');
	}
	
	/**
	 * Determine if we're running in a standard browser environment
	 *
	 * This allows axios to run in a web worker, and react-native.
	 * Both environments support XMLHttpRequest, but not fully standard globals.
	 *
	 * web workers:
	 *  typeof window -> undefined
	 *  typeof document -> undefined
	 *
	 * react-native:
	 *  typeof document.createElement -> undefined
	 */
	function isStandardBrowserEnv() {
	  return (
	    typeof window !== 'undefined' &&
	    typeof document !== 'undefined' &&
	    typeof document.createElement === 'function'
	  );
	}
	
	/**
	 * Iterate over an Array or an Object invoking a function for each item.
	 *
	 * If `obj` is an Array callback will be called passing
	 * the value, index, and complete array for each item.
	 *
	 * If 'obj' is an Object callback will be called passing
	 * the value, key, and complete object for each property.
	 *
	 * @param {Object|Array} obj The object to iterate
	 * @param {Function} fn The callback to invoke for each item
	 */
	function forEach(obj, fn) {
	  // Don't bother if no value provided
	  if (obj === null || typeof obj === 'undefined') {
	    return;
	  }
	
	  // Force an array if not already something iterable
	  if (typeof obj !== 'object' && !isArray(obj)) {
	    /*eslint no-param-reassign:0*/
	    obj = [obj];
	  }
	
	  if (isArray(obj)) {
	    // Iterate over array values
	    for (var i = 0, l = obj.length; i < l; i++) {
	      fn.call(null, obj[i], i, obj);
	    }
	  } else {
	    // Iterate over object keys
	    for (var key in obj) {
	      if (obj.hasOwnProperty(key)) {
	        fn.call(null, obj[key], key, obj);
	      }
	    }
	  }
	}
	
	/**
	 * Accepts varargs expecting each argument to be an object, then
	 * immutably merges the properties of each object and returns result.
	 *
	 * When multiple objects contain the same key the later object in
	 * the arguments list will take precedence.
	 *
	 * Example:
	 *
	 * ```js
	 * var result = merge({foo: 123}, {foo: 456});
	 * console.log(result.foo); // outputs 456
	 * ```
	 *
	 * @param {Object} obj1 Object to merge
	 * @returns {Object} Result of all merge properties
	 */
	function merge(/* obj1, obj2, obj3, ... */) {
	  var result = {};
	  function assignValue(val, key) {
	    if (typeof result[key] === 'object' && typeof val === 'object') {
	      result[key] = merge(result[key], val);
	    } else {
	      result[key] = val;
	    }
	  }
	
	  for (var i = 0, l = arguments.length; i < l; i++) {
	    forEach(arguments[i], assignValue);
	  }
	  return result;
	}
	
	module.exports = {
	  isArray: isArray,
	  isArrayBuffer: isArrayBuffer,
	  isFormData: isFormData,
	  isArrayBufferView: isArrayBufferView,
	  isString: isString,
	  isNumber: isNumber,
	  isObject: isObject,
	  isUndefined: isUndefined,
	  isDate: isDate,
	  isFile: isFile,
	  isBlob: isBlob,
	  isFunction: isFunction,
	  isStream: isStream,
	  isURLSearchParams: isURLSearchParams,
	  isStandardBrowserEnv: isStandardBrowserEnv,
	  forEach: forEach,
	  merge: merge,
	  trim: trim
	};


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(11);
	
	module.exports = function normalizeHeaderName(headers, normalizedName) {
	  utils.forEach(headers, function processHeader(value, name) {
	    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
	      headers[normalizedName] = value;
	      delete headers[name];
	    }
	  });
	};


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Promise, process) {'use strict';
	
	/**
	 * Dispatch a request to the server using whichever adapter
	 * is supported by the current environment.
	 *
	 * @param {object} config The config that is to be used for the request
	 * @returns {Promise} The Promise to be fulfilled
	 */
	module.exports = function dispatchRequest(config) {
	  return new Promise(function executor(resolve, reject) {
	    try {
	      var adapter;
	
	      if (typeof config.adapter === 'function') {
	        // For custom adapter support
	        adapter = config.adapter;
	      } else if (typeof XMLHttpRequest !== 'undefined') {
	        // For browsers use XHR adapter
	        adapter = __webpack_require__(14);
	      } else if (typeof process !== 'undefined') {
	        // For node use HTTP adapter
	        adapter = __webpack_require__(14);
	      }
	
	      if (typeof adapter === 'function') {
	        adapter(resolve, reject, config);
	      }
	    } catch (e) {
	      reject(e);
	    }
	  });
	};
	
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4), __webpack_require__(6)))

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	var utils = __webpack_require__(11);
	var buildURL = __webpack_require__(15);
	var parseHeaders = __webpack_require__(16);
	var transformData = __webpack_require__(17);
	var isURLSameOrigin = __webpack_require__(18);
	var btoa = (typeof window !== 'undefined' && window.btoa) || __webpack_require__(19);
	var settle = __webpack_require__(20);
	
	module.exports = function xhrAdapter(resolve, reject, config) {
	  var requestData = config.data;
	  var requestHeaders = config.headers;
	
	  if (utils.isFormData(requestData)) {
	    delete requestHeaders['Content-Type']; // Let the browser set it
	  }
	
	  var request = new XMLHttpRequest();
	  var loadEvent = 'onreadystatechange';
	  var xDomain = false;
	
	  // For IE 8/9 CORS support
	  // Only supports POST and GET calls and doesn't returns the response headers.
	  // DON'T do this for testing b/c XMLHttpRequest is mocked, not XDomainRequest.
	  if (process.env.NODE_ENV !== 'test' && typeof window !== 'undefined' && window.XDomainRequest && !('withCredentials' in request) && !isURLSameOrigin(config.url)) {
	    request = new window.XDomainRequest();
	    loadEvent = 'onload';
	    xDomain = true;
	    request.onprogress = function handleProgress() {};
	    request.ontimeout = function handleTimeout() {};
	  }
	
	  // HTTP basic authentication
	  if (config.auth) {
	    var username = config.auth.username || '';
	    var password = config.auth.password || '';
	    requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
	  }
	
	  request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);
	
	  // Set the request timeout in MS
	  request.timeout = config.timeout;
	
	  // Listen for ready state
	  request[loadEvent] = function handleLoad() {
	    if (!request || (request.readyState !== 4 && !xDomain)) {
	      return;
	    }
	
	    // The request errored out and we didn't get a response, this will be
	    // handled by onerror instead
	    if (request.status === 0) {
	      return;
	    }
	
	    // Prepare the response
	    var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
	    var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
	    var response = {
	      data: transformData(
	        responseData,
	        responseHeaders,
	        config.transformResponse
	      ),
	      // IE sends 1223 instead of 204 (https://github.com/mzabriskie/axios/issues/201)
	      status: request.status === 1223 ? 204 : request.status,
	      statusText: request.status === 1223 ? 'No Content' : request.statusText,
	      headers: responseHeaders,
	      config: config,
	      request: request
	    };
	
	    settle(resolve, reject, response);
	
	    // Clean up request
	    request = null;
	  };
	
	  // Handle low level network errors
	  request.onerror = function handleError() {
	    // Real errors are hidden from us by the browser
	    // onerror should only fire if it's a network error
	    reject(new Error('Network Error'));
	
	    // Clean up request
	    request = null;
	  };
	
	  // Handle timeout
	  request.ontimeout = function handleTimeout() {
	    var err = new Error('timeout of ' + config.timeout + 'ms exceeded');
	    err.timeout = config.timeout;
	    err.code = 'ECONNABORTED';
	    reject(err);
	
	    // Clean up request
	    request = null;
	  };
	
	  // Add xsrf header
	  // This is only done if running in a standard browser environment.
	  // Specifically not if we're in a web worker, or react-native.
	  if (utils.isStandardBrowserEnv()) {
	    var cookies = __webpack_require__(21);
	
	    // Add xsrf header
	    var xsrfValue = config.withCredentials || isURLSameOrigin(config.url) ?
	        cookies.read(config.xsrfCookieName) :
	        undefined;
	
	    if (xsrfValue) {
	      requestHeaders[config.xsrfHeaderName] = xsrfValue;
	    }
	  }
	
	  // Add headers to the request
	  if ('setRequestHeader' in request) {
	    utils.forEach(requestHeaders, function setRequestHeader(val, key) {
	      if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
	        // Remove Content-Type if data is undefined
	        delete requestHeaders[key];
	      } else {
	        // Otherwise add header to the request
	        request.setRequestHeader(key, val);
	      }
	    });
	  }
	
	  // Add withCredentials to request if needed
	  if (config.withCredentials) {
	    request.withCredentials = true;
	  }
	
	  // Add responseType to request if needed
	  if (config.responseType) {
	    try {
	      request.responseType = config.responseType;
	    } catch (e) {
	      if (request.responseType !== 'json') {
	        throw e;
	      }
	    }
	  }
	
	  // Handle progress if needed
	  if (config.progress) {
	    if (config.method === 'post' || config.method === 'put') {
	      request.upload.addEventListener('progress', config.progress);
	    } else if (config.method === 'get') {
	      request.addEventListener('progress', config.progress);
	    }
	  }
	
	  if (requestData === undefined) {
	    requestData = null;
	  }
	
	  // Send the request
	  request.send(requestData);
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(11);
	
	function encode(val) {
	  return encodeURIComponent(val).
	    replace(/%40/gi, '@').
	    replace(/%3A/gi, ':').
	    replace(/%24/g, '$').
	    replace(/%2C/gi, ',').
	    replace(/%20/g, '+').
	    replace(/%5B/gi, '[').
	    replace(/%5D/gi, ']');
	}
	
	/**
	 * Build a URL by appending params to the end
	 *
	 * @param {string} url The base of the url (e.g., http://www.google.com)
	 * @param {object} [params] The params to be appended
	 * @returns {string} The formatted url
	 */
	module.exports = function buildURL(url, params, paramsSerializer) {
	  /*eslint no-param-reassign:0*/
	  if (!params) {
	    return url;
	  }
	
	  var serializedParams;
	  if (paramsSerializer) {
	    serializedParams = paramsSerializer(params);
	  } else if (utils.isURLSearchParams(params)) {
	    serializedParams = params.toString();
	  } else {
	    var parts = [];
	
	    utils.forEach(params, function serialize(val, key) {
	      if (val === null || typeof val === 'undefined') {
	        return;
	      }
	
	      if (utils.isArray(val)) {
	        key = key + '[]';
	      }
	
	      if (!utils.isArray(val)) {
	        val = [val];
	      }
	
	      utils.forEach(val, function parseValue(v) {
	        if (utils.isDate(v)) {
	          v = v.toISOString();
	        } else if (utils.isObject(v)) {
	          v = JSON.stringify(v);
	        }
	        parts.push(encode(key) + '=' + encode(v));
	      });
	    });
	
	    serializedParams = parts.join('&');
	  }
	
	  if (serializedParams) {
	    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
	  }
	
	  return url;
	};


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(11);
	
	/**
	 * Parse headers into an object
	 *
	 * ```
	 * Date: Wed, 27 Aug 2014 08:58:49 GMT
	 * Content-Type: application/json
	 * Connection: keep-alive
	 * Transfer-Encoding: chunked
	 * ```
	 *
	 * @param {String} headers Headers needing to be parsed
	 * @returns {Object} Headers parsed into an object
	 */
	module.exports = function parseHeaders(headers) {
	  var parsed = {};
	  var key;
	  var val;
	  var i;
	
	  if (!headers) { return parsed; }
	
	  utils.forEach(headers.split('\n'), function parser(line) {
	    i = line.indexOf(':');
	    key = utils.trim(line.substr(0, i)).toLowerCase();
	    val = utils.trim(line.substr(i + 1));
	
	    if (key) {
	      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
	    }
	  });
	
	  return parsed;
	};


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(11);
	
	/**
	 * Transform the data for a request or a response
	 *
	 * @param {Object|String} data The data to be transformed
	 * @param {Array} headers The headers for the request or response
	 * @param {Array|Function} fns A single function or Array of functions
	 * @returns {*} The resulting transformed data
	 */
	module.exports = function transformData(data, headers, fns) {
	  /*eslint no-param-reassign:0*/
	  utils.forEach(fns, function transform(fn) {
	    data = fn(data, headers);
	  });
	
	  return data;
	};


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(11);
	
	module.exports = (
	  utils.isStandardBrowserEnv() ?
	
	  // Standard browser envs have full support of the APIs needed to test
	  // whether the request URL is of the same origin as current location.
	  (function standardBrowserEnv() {
	    var msie = /(msie|trident)/i.test(navigator.userAgent);
	    var urlParsingNode = document.createElement('a');
	    var originURL;
	
	    /**
	    * Parse a URL to discover it's components
	    *
	    * @param {String} url The URL to be parsed
	    * @returns {Object}
	    */
	    function resolveURL(url) {
	      var href = url;
	
	      if (msie) {
	        // IE needs attribute set twice to normalize properties
	        urlParsingNode.setAttribute('href', href);
	        href = urlParsingNode.href;
	      }
	
	      urlParsingNode.setAttribute('href', href);
	
	      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
	      return {
	        href: urlParsingNode.href,
	        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
	        host: urlParsingNode.host,
	        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
	        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
	        hostname: urlParsingNode.hostname,
	        port: urlParsingNode.port,
	        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
	                  urlParsingNode.pathname :
	                  '/' + urlParsingNode.pathname
	      };
	    }
	
	    originURL = resolveURL(window.location.href);
	
	    /**
	    * Determine if a URL shares the same origin as the current location
	    *
	    * @param {String} requestURL The URL to test
	    * @returns {boolean} True if URL shares the same origin, otherwise false
	    */
	    return function isURLSameOrigin(requestURL) {
	      var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
	      return (parsed.protocol === originURL.protocol &&
	            parsed.host === originURL.host);
	    };
	  })() :
	
	  // Non standard browser envs (web workers, react-native) lack needed support.
	  (function nonStandardBrowserEnv() {
	    return function isURLSameOrigin() {
	      return true;
	    };
	  })()
	);


/***/ }),
/* 19 */
/***/ (function(module, exports) {

	'use strict';
	
	// btoa polyfill for IE<10 courtesy https://github.com/davidchambers/Base64.js
	
	var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
	
	function E() {
	  this.message = 'String contains an invalid character';
	}
	E.prototype = new Error;
	E.prototype.code = 5;
	E.prototype.name = 'InvalidCharacterError';
	
	function btoa(input) {
	  var str = String(input);
	  var output = '';
	  for (
	    // initialize result and counter
	    var block, charCode, idx = 0, map = chars;
	    // if the next str index does not exist:
	    //   change the mapping table to "="
	    //   check if d has no fractional digits
	    str.charAt(idx | 0) || (map = '=', idx % 1);
	    // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
	    output += map.charAt(63 & block >> 8 - idx % 1 * 8)
	  ) {
	    charCode = str.charCodeAt(idx += 3 / 4);
	    if (charCode > 0xFF) {
	      throw new E();
	    }
	    block = block << 8 | charCode;
	  }
	  return output;
	}
	
	module.exports = btoa;


/***/ }),
/* 20 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * Resolve or reject a Promise based on response status.
	 *
	 * @param {Function} resolve A function that resolves the promise.
	 * @param {Function} reject A function that rejects the promise.
	 * @param {object} response The response.
	 */
	module.exports = function settle(resolve, reject, response) {
	  var validateStatus = response.config.validateStatus;
	  // Note: status is not exposed by XDomainRequest
	  if (!response.status || !validateStatus || validateStatus(response.status)) {
	    resolve(response);
	  } else {
	    reject(response);
	  }
	};


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(11);
	
	module.exports = (
	  utils.isStandardBrowserEnv() ?
	
	  // Standard browser envs support document.cookie
	  (function standardBrowserEnv() {
	    return {
	      write: function write(name, value, expires, path, domain, secure) {
	        var cookie = [];
	        cookie.push(name + '=' + encodeURIComponent(value));
	
	        if (utils.isNumber(expires)) {
	          cookie.push('expires=' + new Date(expires).toGMTString());
	        }
	
	        if (utils.isString(path)) {
	          cookie.push('path=' + path);
	        }
	
	        if (utils.isString(domain)) {
	          cookie.push('domain=' + domain);
	        }
	
	        if (secure === true) {
	          cookie.push('secure');
	        }
	
	        document.cookie = cookie.join('; ');
	      },
	
	      read: function read(name) {
	        var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
	        return (match ? decodeURIComponent(match[3]) : null);
	      },
	
	      remove: function remove(name) {
	        this.write(name, '', Date.now() - 86400000);
	      }
	    };
	  })() :
	
	  // Non standard browser env (web workers, react-native) lack needed support.
	  (function nonStandardBrowserEnv() {
	    return {
	      write: function write() {},
	      read: function read() { return null; },
	      remove: function remove() {}
	    };
	  })()
	);


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(11);
	
	function InterceptorManager() {
	  this.handlers = [];
	}
	
	/**
	 * Add a new interceptor to the stack
	 *
	 * @param {Function} fulfilled The function to handle `then` for a `Promise`
	 * @param {Function} rejected The function to handle `reject` for a `Promise`
	 *
	 * @return {Number} An ID used to remove interceptor later
	 */
	InterceptorManager.prototype.use = function use(fulfilled, rejected) {
	  this.handlers.push({
	    fulfilled: fulfilled,
	    rejected: rejected
	  });
	  return this.handlers.length - 1;
	};
	
	/**
	 * Remove an interceptor from the stack
	 *
	 * @param {Number} id The ID that was returned by `use`
	 */
	InterceptorManager.prototype.eject = function eject(id) {
	  if (this.handlers[id]) {
	    this.handlers[id] = null;
	  }
	};
	
	/**
	 * Iterate over all the registered interceptors
	 *
	 * This method is particularly useful for skipping over any
	 * interceptors that may have become `null` calling `eject`.
	 *
	 * @param {Function} fn The function to call for each interceptor
	 */
	InterceptorManager.prototype.forEach = function forEach(fn) {
	  utils.forEach(this.handlers, function forEachHandler(h) {
	    if (h !== null) {
	      fn(h);
	    }
	  });
	};
	
	module.exports = InterceptorManager;


/***/ }),
/* 23 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * Determines whether the specified URL is absolute
	 *
	 * @param {string} url The URL to test
	 * @returns {boolean} True if the specified URL is absolute, otherwise false
	 */
	module.exports = function isAbsoluteURL(url) {
	  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
	  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
	  // by any combination of letters, digits, plus, period, or hyphen.
	  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
	};


/***/ }),
/* 24 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * Creates a new URL by combining the specified URLs
	 *
	 * @param {string} baseURL The base URL
	 * @param {string} relativeURL The relative URL
	 * @returns {string} The combined URL
	 */
	module.exports = function combineURLs(baseURL, relativeURL) {
	  return baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '');
	};


/***/ }),
/* 25 */
/***/ (function(module, exports) {

	'use strict';
	
	module.exports = function bind(fn, thisArg) {
	  return function wrap() {
	    var args = new Array(arguments.length);
	    for (var i = 0; i < args.length; i++) {
	      args[i] = arguments[i];
	    }
	    return fn.apply(thisArg, args);
	  };
	};


/***/ }),
/* 26 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * Syntactic sugar for invoking a function and expanding an array for arguments.
	 *
	 * Common use case would be to use `Function.prototype.apply`.
	 *
	 *  ```js
	 *  function f(x, y, z) {}
	 *  var args = [1, 2, 3];
	 *  f.apply(null, args);
	 *  ```
	 *
	 * With `spread` this example can be re-written.
	 *
	 *  ```js
	 *  spread(function(x, y, z) {})([1, 2, 3]);
	 *  ```
	 *
	 * @param {Function} callback
	 * @returns {Function}
	 */
	module.exports = function spread(callback) {
	  return function wrap(arr) {
	    return callback.apply(null, arr);
	  };
	};


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;// =========
	// = humps =
	// =========
	// version 0.7.0
	// Underscore-to-camelCase converter (and vice versa)
	// for strings and object keys
	
	// humps is copyright © 2012+ Dom Christie
	// Released under the MIT license.
	
	
	;(function(global) {
	
	  var _processKeys = function(convert, obj, separator, ignoreNumbers) {
	    if(!_isObject(obj) || _isDate(obj) || _isRegExp(obj) || _isBoolean(obj)) {
	      return obj;
	    }
	
	    var output,
	        i = 0,
	        l = 0;
	
	    if(_isArray(obj)) {
	      output = [];
	      for(l=obj.length; i<l; i++) {
	        output.push(_processKeys(convert, obj[i], separator, ignoreNumbers));
	      }
	    }
	    else {
	      output = {};
	      for(var key in obj) {
	        if(obj.hasOwnProperty(key)) {
	          output[convert(key, separator, ignoreNumbers)] = _processKeys(convert, obj[key], separator, ignoreNumbers);
	        }
	      }
	    }
	    return output;
	  };
	
	  // String conversion methods
	
	  var separateWords = function(string, separator, ignoreNumbers) {
	    if (typeof separator === 'undefined') {
	      separator = '_';
	    }
	
	    var regexp = /([a-z])([A-Z0-9])/g;
	
	    if (ignoreNumbers) {
	      regexp = /([a-z])([A-Z])/g;
	    }
	
	    return string.replace(regexp, '$1'+ separator +'$2');
	  };
	
	  var camelize = function(string) {
	    if (_isNumerical(string)) {
	      return string;
	    }
	    string = string.replace(/[\-_\s]+(.)?/g, function(match, chr) {
	      return chr ? chr.toUpperCase() : '';
	    });
	    // Ensure 1st char is always lowercase
	    return string.substr(0, 1).toLowerCase() + string.substr(1);
	  };
	
	  var pascalize = function(string) {
	    var camelized = camelize(string);
	    // Ensure 1st char is always uppercase
	    return camelized.substr(0, 1).toUpperCase() + camelized.substr(1);
	  };
	
	  var decamelize = function(string, separator, ignoreNumbers) {
	    return separateWords(string, separator, ignoreNumbers).toLowerCase();
	  };
	
	  // Utilities
	  // Taken from Underscore.js
	
	  var toString = Object.prototype.toString;
	
	  var _isObject = function(obj) {
	    return obj === Object(obj);
	  };
	  var _isArray = function(obj) {
	    return toString.call(obj) == '[object Array]';
	  };
	  var _isDate = function(obj) {
	    return toString.call(obj) == '[object Date]';
	  };
	  var _isRegExp = function(obj) {
	    return toString.call(obj) == '[object RegExp]';
	  };
	  var _isBoolean = function(obj) {
	    return toString.call(obj) == '[object Boolean]';
	  };
	
	  // Performant way to determine if obj coerces to a number
	  var _isNumerical = function(obj) {
	    obj = obj - 0;
	    return obj === obj;
	  };
	
	  var humps = {
	    camelize: camelize,
	    decamelize: decamelize,
	    pascalize: pascalize,
	    depascalize: decamelize,
	    camelizeKeys: function(object) {
	      return _processKeys(camelize, object);
	    },
	    decamelizeKeys: function(object, separator, ignoreNumbers) {
	      return _processKeys(decamelize, object, separator, ignoreNumbers);
	    },
	    pascalizeKeys: function(object) {
	      return _processKeys(pascalize, object);
	    },
	    depascalizeKeys: function () {
	      return this.decamelizeKeys.apply(this, arguments);
	    }
	  };
	
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (humps), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof module !== 'undefined' && module.exports) {
	    module.exports = humps;
	  } else {
	    global.humps = humps;
	  }
	
	})(this);


/***/ }),
/* 28 */
/***/ (function(module, exports) {

	'use strict';
	
	var isMergeableObject = function isMergeableObject(value) {
		return isNonNullObject(value)
			&& !isSpecial(value)
	};
	
	function isNonNullObject(value) {
		return !!value && typeof value === 'object'
	}
	
	function isSpecial(value) {
		var stringValue = Object.prototype.toString.call(value);
	
		return stringValue === '[object RegExp]'
			|| stringValue === '[object Date]'
			|| isReactElement(value)
	}
	
	// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
	var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
	var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;
	
	function isReactElement(value) {
		return value.$$typeof === REACT_ELEMENT_TYPE
	}
	
	function emptyTarget(val) {
	    return Array.isArray(val) ? [] : {}
	}
	
	function cloneIfNecessary(value, optionsArgument) {
	    var clone = optionsArgument && optionsArgument.clone === true;
	    return (clone && isMergeableObject(value)) ? deepmerge(emptyTarget(value), value, optionsArgument) : value
	}
	
	function defaultArrayMerge(target, source, optionsArgument) {
	    var destination = target.slice();
	    source.forEach(function(e, i) {
	        if (typeof destination[i] === 'undefined') {
	            destination[i] = cloneIfNecessary(e, optionsArgument);
	        } else if (isMergeableObject(e)) {
	            destination[i] = deepmerge(target[i], e, optionsArgument);
	        } else if (target.indexOf(e) === -1) {
	            destination.push(cloneIfNecessary(e, optionsArgument));
	        }
	    });
	    return destination
	}
	
	function mergeObject(target, source, optionsArgument) {
	    var destination = {};
	    if (isMergeableObject(target)) {
	        Object.keys(target).forEach(function(key) {
	            destination[key] = cloneIfNecessary(target[key], optionsArgument);
	        });
	    }
	    Object.keys(source).forEach(function(key) {
	        if (!isMergeableObject(source[key]) || !target[key]) {
	            destination[key] = cloneIfNecessary(source[key], optionsArgument);
	        } else {
	            destination[key] = deepmerge(target[key], source[key], optionsArgument);
	        }
	    });
	    return destination
	}
	
	function deepmerge(target, source, optionsArgument) {
	    var sourceIsArray = Array.isArray(source);
	    var targetIsArray = Array.isArray(target);
	    var options = optionsArgument || { arrayMerge: defaultArrayMerge };
	    var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
	
	    if (!sourceAndTargetTypesMatch) {
	        return cloneIfNecessary(source, optionsArgument)
	    } else if (sourceIsArray) {
	        var arrayMerge = options.arrayMerge || defaultArrayMerge;
	        return arrayMerge(target, source, optionsArgument)
	    } else {
	        return mergeObject(target, source, optionsArgument)
	    }
	}
	
	deepmerge.all = function deepmergeAll(array, optionsArgument) {
	    if (!Array.isArray(array) || array.length < 2) {
	        throw new Error('first argument should be an array with at least two elements')
	    }
	
	    // we are sure there are at least 2 values, so it is safe to have no initial value
	    return array.reduce(function(prev, next) {
	        return deepmerge(prev, next, optionsArgument)
	    })
	};
	
	var deepmerge_1 = deepmerge;
	
	module.exports = deepmerge_1;


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	var base64 = __webpack_require__(30);
	var merge = __webpack_require__(28);
	
	module.exports = {
	
	  /**
	   * Generate base64 string for basic auth purposes
	   * @type {Function}
	   * @return {String}
	   */
	  encodeAuthHeader: function(email, token) {
	    return base64.encode(email + ':' + token);
	  },
	
	  /**
	   * Retrieve metadata from response.data object and save it on response.metaData instead
	   * @type {Function}
	   * @return {String}
	   */
	  copyResponseMetaData: function(response) {
	    if (Object.keys(response.data).length > 1) {
	      response.metaData = {}
	      Object.keys(response.data).forEach(function(key) {
	        if (key !== 'data') response.metaData[key] = response.data[key]
	      })
	    }
	    response.data = response.data.data;
	    return response
	  },
	
	  /**
	   * Add the carried payload for next request to the actual payload
	   * @type {Function}
	   * @return {String}
	   */
	  mergeNextPayload: function (args, nextPayload) {
	    if (Object.keys(nextPayload).length === 0) return args
	    // Merge potential query string params manually
	    if (nextPayload.params && args.params) {
	      var nextParams = nextPayload.params
	      for (var param in nextParams) {
	        if (typeof args.params[param] !== 'undefined') {
	          args.params[param] += (';' + nextParams[param])
	        }
	      }
	    }
	    args = merge(nextPayload, args)
	    return args
	  },
	
	  /**
	   * Build absolute URL for API call
	   * @type {Function}
	   * @return {String}
	   */
	  buildUrl: function(endpoint, config) {
	    return config.apiBaseUrl + config.apiVersion + endpoint;
	  }
	
	}


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! http://mths.be/base64 v0.1.0 by @mathias | MIT license */
	;(function(root) {
	
		// Detect free variables `exports`.
		var freeExports = typeof exports == 'object' && exports;
	
		// Detect free variable `module`.
		var freeModule = typeof module == 'object' && module &&
			module.exports == freeExports && module;
	
		// Detect free variable `global`, from Node.js or Browserified code, and use
		// it as `root`.
		var freeGlobal = typeof global == 'object' && global;
		if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
			root = freeGlobal;
		}
	
		/*--------------------------------------------------------------------------*/
	
		var InvalidCharacterError = function(message) {
			this.message = message;
		};
		InvalidCharacterError.prototype = new Error;
		InvalidCharacterError.prototype.name = 'InvalidCharacterError';
	
		var error = function(message) {
			// Note: the error messages used throughout this file match those used by
			// the native `atob`/`btoa` implementation in Chromium.
			throw new InvalidCharacterError(message);
		};
	
		var TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
		// http://whatwg.org/html/common-microsyntaxes.html#space-character
		var REGEX_SPACE_CHARACTERS = /[\t\n\f\r ]/g;
	
		// `decode` is designed to be fully compatible with `atob` as described in the
		// HTML Standard. http://whatwg.org/html/webappapis.html#dom-windowbase64-atob
		// The optimized base64-decoding algorithm used is based on @atk’s excellent
		// implementation. https://gist.github.com/atk/1020396
		var decode = function(input) {
			input = String(input)
				.replace(REGEX_SPACE_CHARACTERS, '');
			var length = input.length;
			if (length % 4 == 0) {
				input = input.replace(/==?$/, '');
				length = input.length;
			}
			if (
				length % 4 == 1 ||
				// http://whatwg.org/C#alphanumeric-ascii-characters
				/[^+a-zA-Z0-9/]/.test(input)
			) {
				error(
					'Invalid character: the string to be decoded is not correctly encoded.'
				);
			}
			var bitCounter = 0;
			var bitStorage;
			var buffer;
			var output = '';
			var position = -1;
			while (++position < length) {
				buffer = TABLE.indexOf(input.charAt(position));
				bitStorage = bitCounter % 4 ? bitStorage * 64 + buffer : buffer;
				// Unless this is the first of a group of 4 characters…
				if (bitCounter++ % 4) {
					// …convert the first 8 bits to a single ASCII character.
					output += String.fromCharCode(
						0xFF & bitStorage >> (-2 * bitCounter & 6)
					);
				}
			}
			return output;
		};
	
		// `encode` is designed to be fully compatible with `btoa` as described in the
		// HTML Standard: http://whatwg.org/html/webappapis.html#dom-windowbase64-btoa
		var encode = function(input) {
			input = String(input);
			if (/[^\0-\xFF]/.test(input)) {
				// Note: no need to special-case astral symbols here, as surrogates are
				// matched, and the input is supposed to only contain ASCII anyway.
				error(
					'The string to be encoded contains characters outside of the ' +
					'Latin1 range.'
				);
			}
			var padding = input.length % 3;
			var output = '';
			var position = -1;
			var a;
			var b;
			var c;
			var d;
			var buffer;
			// Make sure any padding is handled outside of the loop.
			var length = input.length - padding;
	
			while (++position < length) {
				// Read three bytes, i.e. 24 bits.
				a = input.charCodeAt(position) << 16;
				b = input.charCodeAt(++position) << 8;
				c = input.charCodeAt(++position);
				buffer = a + b + c;
				// Turn the 24 bits into four chunks of 6 bits each, and append the
				// matching character for each of them to the output.
				output += (
					TABLE.charAt(buffer >> 18 & 0x3F) +
					TABLE.charAt(buffer >> 12 & 0x3F) +
					TABLE.charAt(buffer >> 6 & 0x3F) +
					TABLE.charAt(buffer & 0x3F)
				);
			}
	
			if (padding == 2) {
				a = input.charCodeAt(position) << 8;
				b = input.charCodeAt(++position);
				buffer = a + b;
				output += (
					TABLE.charAt(buffer >> 10) +
					TABLE.charAt((buffer >> 4) & 0x3F) +
					TABLE.charAt((buffer << 2) & 0x3F) +
					'='
				);
			} else if (padding == 1) {
				buffer = input.charCodeAt(position);
				output += (
					TABLE.charAt(buffer >> 2) +
					TABLE.charAt((buffer << 4) & 0x3F) +
					'=='
				);
			}
	
			return output;
		};
	
		var base64 = {
			'encode': encode,
			'decode': decode,
			'version': '0.1.0'
		};
	
		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if (
			true
		) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return base64;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		}	else if (freeExports && !freeExports.nodeType) {
			if (freeModule) { // in Node.js or RingoJS v0.8.0+
				freeModule.exports = base64;
			} else { // in Narwhal or RingoJS v0.7.0-
				for (var key in base64) {
					base64.hasOwnProperty(key) && (freeExports[key] = base64[key]);
				}
			}
		} else { // in Rhino or a web browser
			root.base64 = base64;
		}
	
	}(this));
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(31)(module), (function() { return this; }())))

/***/ }),
/* 31 */
/***/ (function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

	var utils = __webpack_require__(29)
	
	module.exports = function (TK) {
	
	  /**
	   * Get user's connected accounts
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.getAccounts = function() {
	
	    return TK.makeRequest({
	      url: '/accounts',
	      method: 'get'
	    });
	
	  };
	
	  /**
	   * Initiate a Google account sync
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.accountGoogleSync = function() {
	
	    return TK.makeRequest({
	      url: '/accounts/sync',
	      method: 'post'
	    });
	
	  };
	
	  /**
	   * Initiate a Microsoft account sync
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.accountMicrosoftSync = function() {
	
	    return TK.makeRequest({
	      url: '/accounts/microsoft/sync',
	      method: 'post'
	    });
	
	  };
	
	  /**
	   * Authenticate a user to retrive API token for future calls
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.auth = function(data) {
	
	    var r = TK.makeRequest({
	      url: '/auth',
	      method: 'post',
	      data: data
	    });
	
	    r.then(function(response) {
	
	      var token = response.data.api_token || response.data.apiToken;
	
	      TK.setUser(response.data.email, token);
	
	    }).catch(function(){
	      TK.setUser('','');
	    });
	
	    return r;
	
	  };
	
	  /**
	   * Get list of apps
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.getApps = function() {
	
	    return TK.makeRequest({
	      url: '/apps',
	      method: 'get'
	    });
	
	  };
	
	  /**
	   * Get settings for a specific app
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.getApp = function() {
	
	    return TK.makeRequest({
	      url: '/app',
	      method: 'get'
	    });
	
	  };
	
	  /**
	   * Create a new Timekit app
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.createApp = function(data) {
	
	    return TK.makeRequest({
	      url: '/apps',
	      method: 'post',
	      data: data
	    });
	
	  };
	
	  /**
	   * Update settings for a specific app
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.updateApp = function(data) {
	
	    var slug = data.slug;
	    delete data.slug;
	
	    return TK.makeRequest({
	      url: '/apps/' + slug,
	      method: 'put',
	      data: data
	    });
	
	  };
	
	  /**
	   * Delete an app
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.deleteApp = function(data) {
	
	    return TK.makeRequest({
	      url: '/apps/' + data.slug,
	      method: 'delete'
	    });
	
	  };
	
	  /**
	   * Fetch current resource data from server
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.getResources = function() {
	
	    return TK.makeRequest({
	      url: '/resources',
	      method: 'get'
	    });
	
	  };
	
	  /**
	   * Fetch current resource data from server
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.getResource = function(data) {
	
	    return TK.makeRequest({
	      url: '/resources/' + data.id,
	      method: 'get'
	    });
	
	  };
	
	  /**
	   * Create a new resource with the given properties
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.createResource = function(data) {
	
	    return TK.makeRequest({
	      url: '/resources',
	      method: 'post',
	      data: data
	    });
	
	  };
	
	  /**
	   * Fetch current resource data from server
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.updateResource = function(data) {
	
	    var id = data.id;
	    delete data.id;
	
	    return TK.makeRequest({
	      url: '/resources/' + id,
	      method: 'put',
	      data: data
	    });
	
	  };
	
	  /**
	   * Delete a resource with the given properties
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.deleteResource = function(data) {
	
	    return TK.makeRequest({
	      url: '/resources/' + data.id,
	      method: 'delete',
	      data: data
	    });
	
	  };
	
	  /**
	   * Reset password for a resource
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.resetResourcePassword = function(data) {
	
	    return TK.makeRequest({
	      url: '/resources/resetpassword',
	      method: 'post',
	      data: data
	    });
	
	  };
	
	  /**
	   * Get a specific resource's timezone
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.getResourceTimezone = function(data) {
	
	    return TK.makeRequest({
	      url: '/resources/timezone/' + data.email,
	      method: 'get'
	    });
	
	  };
	
	  /**
	   * Get users calendars that are present on Timekit (synced from providers)
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.getCalendars = function() {
	
	    return TK.makeRequest({
	      url: '/calendars',
	      method: 'get'
	    });
	
	  };
	
	  /**
	   * Get users calendars that are present on Timekit (synced from providers)
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.getCalendar = function(data) {
	
	    return TK.makeRequest({
	      url: '/calendars/' + data.id,
	      method: 'get'
	    });
	
	  };
	
	  /**
	   * Create a new calendar for current user
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.createCalendar = function(data) {
	
	    return TK.makeRequest({
	      url: '/calendars/',
	      method: 'post',
	      data: data
	    });
	
	  };
	
	  /**
	   * Update a calendar for current user
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.updateCalendar = function(data) {
	
	    var id = data.id;
	    delete data.id;
	
	    return TK.makeRequest({
	      url: '/calendars/' + id,
	      method: 'put',
	      data: data
	    });
	
	  };
	
	  /**
	   * Delete a calendar
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.deleteCalendar = function(data) {
	
	    return TK.makeRequest({
	      url: '/calendars/' + data.id,
	      method: 'delete'
	    });
	
	  };
	
	  /**
	   * Get all user's events
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.getEvents = function(data) {
	
	    return TK.makeRequest({
	      url: '/events',
	      method: 'get',
	      params: data
	    });
	
	  };
	
	  /**
	   * Get a user's event by ID
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.getEvent = function(data) {
	
	    return TK.makeRequest({
	      url: '/events/' + data.id,
	      method: 'get'
	    });
	
	  };
	
	  /**
	   * Create a new event
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.createEvent = function(data) {
	
	    return TK.makeRequest({
	      url: '/events',
	      method: 'post',
	      data: data
	    });
	
	  };
	
	  /**
	   * Update an existing event
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.updateEvent = function(data) {
	
	    var id = data.id;
	    delete data.id;
	
	    return TK.makeRequest({
	      url: '/events/' + id,
	      method: 'put',
	      data: data
	    });
	
	  };
	
	  /**
	   * Delete a user's event by ID
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.deleteEvent = function(data) {
	
	    return TK.makeRequest({
	      url: '/events/' + data.id,
	      method: 'delete'
	    });
	
	  };
	
	  /**
	   * Find mutual availability across multiple users/calendars
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.findTime = function(data) {
	
	    return TK.makeRequest({
	      url: '/findtime',
	      method: 'post',
	      data: data
	    });
	
	  };
	
	  /**
	   * Find bulk availability across multiple users/calendars
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.findTimeBulk = function(data) {
	
	    return TK.makeRequest({
	      url: '/findtime/bulk',
	      method: 'post',
	      data: data
	    });
	
	  };
	
	  /**
	   * Find team availability across multiple users/calendars
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.findTimeTeam = function(data) {
	
	    return TK.makeRequest({
	      url: '/findtime/team',
	      method: 'post',
	      data: data
	    });
	
	  };
	
	  /**
	   * Fetch availability on the new availability endpoint (successor to findtime)
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.fetchAvailability = function(data) {
	
	    return TK.makeRequest({
	      url: '/availability',
	      method: 'post',
	      data: data
	    });
	
	  };
	
	  /**
	   * Get all user auth credentials
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.getCredentials = function() {
	
	    return TK.makeRequest({
	      url: '/credentials',
	      method: 'get'
	    });
	
	  };
	
	  /**
	   * Create a new pair of auth credentials
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.createCredential = function(data) {
	
	    return TK.makeRequest({
	      url: '/credentials',
	      method: 'post',
	      data: data
	    });
	
	  };
	
	  /**
	   * Delete a pair of auth credentials
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.deleteCredential = function(data) {
	
	    return TK.makeRequest({
	      url: '/credentials/' + data.id,
	      method: 'delete'
	    });
	
	  };
	
	  /**
	   * Get all bookings
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.getBookings = function() {
	
	    return TK.makeRequest({
	      url: '/bookings',
	      method: 'get'
	    });
	
	  };
	
	  /**
	   * Get specific booking
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.getBooking = function(data) {
	
	    return TK.makeRequest({
	      url: '/bookings/' + data.id,
	      method: 'get'
	    });
	
	  };
	
	  /**
	   * Create a new booking
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.createBooking = function(data) {
	
	    return TK.makeRequest({
	      url: '/bookings',
	      method: 'post',
	      data: data
	    });
	
	  };
	
	  /**
	   * Create bookings in bulk
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.createBookingsBulk = function(data) {
	
	    return TK.makeRequest({
	      url: '/bookings/bulk',
	      method: 'post',
	      data: data
	    });
	
	  };
	
	  /**
	   * Update an existing booking
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.updateBooking = function(data) {
	
	    var id = data.id;
	    delete data.id;
	
	    var action = data.action;
	    delete data.action;
	
	    return TK.makeRequest({
	      url: '/bookings/' + id + '/' + action,
	      method: 'put',
	      data: data
	    });
	
	  };
	
	  /**
	   * Delete specific booking
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.deleteBooking = function(data) {
	    
	    var id = data.id
	    delete data.id;
	
	    return TK.makeRequest({
	      url: '/bookings/' + id,
	      method: 'delete'
	    })
	  };
	
	  /**
	   * Update an bookings in bulk
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.updateBookingsBulk = function(data) {
	
	    return TK.makeRequest({
	      url: '/bookings/bulk',
	      method: 'put',
	      data: data
	    });
	
	  };
	
	  /**
	   * Get all bookings
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.getGroupBookings = function() {
	
	    return TK.makeRequest({
	      url: '/bookings/groups',
	      method: 'get'
	    });
	
	  };
	
	  /**
	   * Get specific booking
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.getGroupBooking = function(data) {
	
	    return TK.makeRequest({
	      url: '/bookings/groups/' + data.id,
	      method: 'get'
	    });
	
	  };
	
	  /**
	   * Get all projects
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.getProjects = function() {
	
	    return TK.makeRequest({
	      url: '/projects',
	      method: 'get'
	    });
	
	  };
	
	  /**
	   * Get a project
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.getProject = function(data) {
	
	    return TK.makeRequest({
	      url: '/projects/' + data.id,
	      method: 'get'
	    });
	
	  };
	
	  /**
	   * Get a project for public use on hosted page
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.getHostedProject = function(data) {
	
	    return TK.makeRequest({
	      url: '/projects/hosted/' + data.slug,
	      method: 'get'
	    });
	
	  };
	
	  /**
	   * Get a project for embedding on website
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.getEmbedProject = function(data) {
	
	    return TK.makeRequest({
	      url: '/projects/embed/' + data.id,
	      method: 'get'
	    });
	
	  };
	
	  /**
	   * Create a new project
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.createProject = function(data) {
	
	    return TK.makeRequest({
	      url: '/projects',
	      method: 'post',
	      data: data
	    });
	
	  };
	
	  /**
	   * Update an existing project
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.updateProject = function(data) {
	
	    var id = data.id;
	    delete data.id;
	
	    return TK.makeRequest({
	      url: '/projects/' + id,
	      method: 'put',
	      data: data
	    });
	
	  };
	
	  /**
	   * Delete a project
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.deleteProject = function(data) {
	
	    return TK.makeRequest({
	      url: '/projects/' + data.id,
	      method: 'delete'
	    });
	
	  };
	
	  /**
	   * Add a resource to a project
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.addProjectResource = function(data) {
	
	    var id = data.id;
	    delete data.id;
	
	    return TK.makeRequest({
	      url: '/projects/' + id + '/resources',
	      method: 'post',
	      data: data
	    });
	
	  };
	
	  /**
	   * Get resources for a project
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.getProjectResources = function(data) {
	
	    var id = data.id;
	    delete data.id;
	
	    return TK.makeRequest({
	      url: '/projects/' + id + '/resources',
	      method: 'get'
	    });
	
	  };
	
	  /**
	   * Set resources for a project
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.setProjectResources = function(data) {
	
	    var id = data.id;
	    delete data.id;
	
	    return TK.makeRequest({
	      url: '/projects/' + id + '/resources',
	      method: 'put',
	      data: data.resources
	    });
	
	  };
	
	  /**
	   * Remove a resource from a project
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.removeProjectResource = function(data) {
	
	    return TK.makeRequest({
	      url: '/projects/' + data.id + '/resources/' + data.resourceId,
	      method: 'delete'
	    });
	
	  };
	
	  return TK;
	
	}


/***/ }),
/* 33 */
/***/ (function(module, exports) {

	module.exports = function (TK) {
	
	  /**
	   * Initiate an account sync
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.accountSync = function(data) {
	
	    return TK.makeRequest({
	      url: '/accounts/sync',
	      method: 'get',
	      params: data
	    });
	
	  };
	
	  /**
	   * Get widgets
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.getWidgets = function() {
	
	    return TK.makeRequest({
	      url: '/widgets',
	      method: 'get'
	    });
	
	  };
	
	  /**
	   * Get a specific widget
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.getWidget = function(data) {
	
	    return TK.makeRequest({
	      url: '/widgets/' + data.id,
	      method: 'get'
	    });
	
	  };
	
	  /**
	   * Get public widget by slug
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.getHostedWidget = function(data) {
	
	    return TK.makeRequest({
	      url: '/widgets/hosted/' + data.slug,
	      method: 'get'
	    });
	
	  };
	
	  /**
	   * Get public widget by id
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.getEmbedWidget = function(data) {
	
	    return TK.makeRequest({
	      url: '/widgets/embed/' + data.id,
	      method: 'get'
	    });
	
	  };
	
	  /**
	   * Create a new widget
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.createWidget = function(data) {
	
	    return TK.makeRequest({
	      url: '/widgets',
	      method: 'post',
	      data: data
	    });
	
	  };
	
	  /**
	   * Update an existing widget
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.updateWidget = function(data) {
	
	    var id = data.id;
	    delete data.id;
	
	    return TK.makeRequest({
	      url: '/widgets/' + id,
	      method: 'put',
	      data: data
	    });
	
	  };
	
	  /**
	   * Delete a widget
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.deleteWidget = function(data) {
	
	    return TK.makeRequest({
	      url: '/widgets/' + data.id,
	      method: 'delete'
	    });
	
	  };
	
	  /**
	   * Create a new user with the given properties
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.createUser = function(data) {
	
	    return TK.makeRequest({
	      url: '/users',
	      method: 'post',
	      data: data
	    });
	
	  };
	
	  /**
	   * Fetch current user data from server
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.getUserInfo = function() {
	
	    return TK.makeRequest({
	      url: '/users/me',
	      method: 'get'
	    });
	
	  };
	
	  /**
	   * Fetch current user data from server
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.updateUser = function(data) {
	
	    return TK.makeRequest({
	      url: '/users/me',
	      method: 'put',
	      data: data
	    });
	
	  };
	
	  /**
	   * Reset password for a user
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.resetUserPassword = function(data) {
	
	    return TK.makeRequest({
	      url: '/users/resetpassword',
	      method: 'post',
	      data: data
	    });
	
	  };
	
	  /**
	   * Get a specific users' timezone
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.getUserTimezone = function(data) {
	
	    return TK.makeRequest({
	      url: '/users/timezone/' + data.email,
	      method: 'get'
	    });
	
	  };
	
	  /**
	   * Create a findtime filtercollection
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.createFindTimeFilterCollection = function(data) {
	
	    return TK.makeRequest({
	      url: '/findtime/filtercollections',
	      method: 'post',
	      data: data
	    });
	
	  };
	
	  /**
	   * Get findtime filtercollections
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.getFindTimeFilterCollections = function() {
	
	    return TK.makeRequest({
	      url: '/findtime/filtercollections',
	      method: 'get'
	    });
	
	  };
	
	  /**
	   * Update a findtime filtercollections
	   * @type {Function}
	   * @return {Promise}
	   */
	  TK.updateFindTimeFilterCollection = function(data) {
	
	    var id = data.id;
	    delete data.id;
	
	    return TK.makeRequest({
	      url: '/findtime/filtercollections/' + id,
	      method: 'get',
	      data: data
	    });
	
	  };
	
	  return TK;
	
	}


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var defaultConfig = __webpack_require__(35);
	var qs = __webpack_require__(36);
	
	function InitConfig() {
	
	  // Current state
	  var config = {};
	  var global = null;
	
	  // Setup defaults for the SDK
	  var prepareSdkConfig = function(suppliedConfig) {
	    if (typeof suppliedConfig.sdk === 'undefined') suppliedConfig.sdk = {}
	    if (suppliedConfig.app_key) suppliedConfig.sdk.appKey = suppliedConfig.app_key
	    return $.extend(true, {}, defaultConfig.primary.sdk, suppliedConfig.sdk);
	  }
	
	  // Merge defaults into passed config
	  var setDefaults = function(suppliedConfig) {
	    suppliedConfig.sdk = prepareSdkConfig(suppliedConfig)
	    return $.extend(true, {}, defaultConfig.primary, suppliedConfig);
	  };
	
	  // Merge defaults into passed config
	  var setDefaultsWithoutProject = function(suppliedConfig) {
	    return $.extend(true, {}, defaultConfig.primaryWithoutProject, suppliedConfig);
	  };
	
	  // Set default formats for native fields
	  var setCustomerFieldsNativeFormats = function(config) {
	    $.each(config.customer_fields, function (key, field) {
	      if (!defaultConfig.customerFieldsNativeFormats[key]) return
	      config.customer_fields[key] = $.extend({}, defaultConfig.customerFieldsNativeFormats[key], field);
	    })
	    return config
	  };
	
	  // Apply the config presets given a configuration
	  var applyConfigPreset = function (localConfig, propertyName, propertyObject) {
	    var presetCheck = defaultConfig.presets[propertyName][propertyObject];
	    if (presetCheck) return $.extend(true, {}, presetCheck, localConfig);
	    return localConfig
	  };
	
	  // Prefill customer fields based on URL query string
	  var applyPrefillFromUrlGetParams = function (suppliedConfig, urlParams) {
	    $.each(suppliedConfig.customer_fields, function (key) {
	      if (!urlParams['customer.' + key]) return
	      suppliedConfig.customer_fields[key].prefilled = urlParams['customer.' + key];
	    });
	    return suppliedConfig
	  }
	
	  // Setup config
	  var parseAndUpdate = function(suppliedConfig) {
	
	    // Extend the default config with supplied settings
	    var newConfig = setDefaults(suppliedConfig);
	
	    // Apply presets
	    newConfig = applyConfigPreset(newConfig, 'timeDateFormat', newConfig.ui.time_date_format)
	    newConfig = applyConfigPreset(newConfig, 'availabilityView', newConfig.ui.availability_view)
	
	    // Set default formats for native fields
	    newConfig = setCustomerFieldsNativeFormats(newConfig)
	
	    // Check for required settings
	    if (!newConfig.app_key) throw 'A required config setting ("app_key") was missing';
	
	    // Prefill fields based on query string
	    var urlParams = getGlobal().location && getGlobal().location.search;
	    if (urlParams) newConfig = applyPrefillFromUrlGetParams(newConfig, qs.parse(urlParams));
	
	    // Set new config to instance config
	    update(newConfig);
	
	    return config;
	
	  };
	
	  var update = function (passedConfig) {
	    config = passedConfig
	  }
	
	  var retrieve = function () {
	    return config
	  }
	
	  var setGlobal = function(val) {
	    global = val
	  }
	  
	  var getGlobal = function(val) {
	    return global
	  }
	
	  return {
	    parseAndUpdate: parseAndUpdate,
	    setDefaults: setDefaults,
	    setDefaultsWithoutProject: setDefaultsWithoutProject,
	    update: update,
	    retrieve: retrieve,
	    setGlobal: setGlobal,
	    getGlobal: getGlobal
	  }
	}
	
	module.exports = InitConfig


/***/ }),
/* 35 */
/***/ (function(module, exports) {

	'use strict';
	
	/*
	 * Default configuration
	 */
	
	var primary = {
	  el: '#bookingjs',
	  name: '',
	  autoload: true,
	  debug: false,
	  disable_remote_load: false,
	  disable_confirm_page: false,
	  create_booking_response_include: ['attributes', 'event', 'user'],
	  ui: {
	    show_timezone_helper: true
	  },
	  availability: {},
	  booking: {},
	  customer_fields: {},
	  callbacks: {},
	  sdk: {
	    headers: {
	      'Timekit-Context': 'widget'
	    }
	  },
	  fullcalendar: {
	    views: {
	      agenda: {
	        displayEventEnd: false
	      },
	      listing: {
	        type: 'list',
	        duration: { days: 365 / 2 },
	        listDayAltFormat: 'dddd',
	        noEventsMessage: 'No timeslots available'
	      }
	    },
	    allDaySlot: false,
	    scrollTime: '08:00:00',
	    nowIndicator: true
	  }
	};
	
	var primaryWithoutProject = {
	  ui: {
	    display_name: '',
	    show_credits: true,
	    show_timezone_helper: true,
	    availability_view: 'agendaWeek',
	    avatar: '',
	    time_date_format: '12h-mdy-sun',
	    localization: {
	      allocated_resource_prefix: 'with',
	      submit_button: 'Book it',
	      success_message: 'We have received your booking and sent a confirmation to %s'
	    }
	  },
	  availability: {
	    mode: 'roundrobin_random'
	  },
	  booking: {
	    graph: 'instant'
	  },
	  customer_fields: {
	    name: {
	      title: 'Name',
	      required: true
	    },
	    email: {
	      title: 'E-mail',
	      format: 'email',
	      required: true
	    }
	  }
	}
	
	var customerFieldsNativeFormats = {
	  email: {
	    format: 'email'
	  },
	  comment: {
	    format: 'textarea'
	  },
	  phone: {
	    format: 'tel'
	  }
	}
	
	// Preset: timeDateFormat = '24h-dmy-mon'
	var timeDateFormat24hdmymon = {
	  ui: {
	    booking_date_format: 'D. MMMM YYYY',
	    booking_time_format: 'HH:mm'
	  },
	  fullcalendar: {
	    timeFormat: 'HH:mm',
	    firstDay: 1,
	    views: {
	      basic: {
	        columnFormat: 'dddd D/M'
	      },
	      agenda: {
	        columnFormat: 'ddd D/M',
	        slotLabelFormat: 'HH:mm'
	      }
	    }
	  }
	};
	
	// Preset: timeDateFormat = '12h-mdy-sun'
	var timeDateFormat12hmdysun = {
	  ui: {
	    booking_date_format: 'MMMM D, YYYY',
	    booking_time_format: 'h:mma'
	  },
	  fullcalendar: {
	    timeFormat: 'h:mma',
	    firstDay: 0,
	    views: {
	      basic: {
	        columnFormat: 'dddd M/D',
	      },
	      agenda: {
	        columnFormat: 'ddd M/D',
	        slotLabelFormat: 'h:mma'
	      }
	    }
	  }
	};
	
	// Preset: availabilityView = 'agendaWeek'
	var availabilityViewAgendaWeek = {
	  fullcalendar: {
	    header: {
	      left: '',
	      center: '',
	      right: 'today, prev, next'
	    },
	    defaultView: 'agendaWeek'
	  }
	}
	
	// Preset: availabilityView = 'listing'
	var availabilityViewListing = {
	  fullcalendar: {
	    header: {
	      left: '',
	      center: '',
	      right: ''
	    },
	    defaultView: 'listing'
	  }
	}
	
	// Export objects
	module.exports = {
	  primary: primary,
	  primaryWithoutProject: primaryWithoutProject,
	  customerFieldsNativeFormats: customerFieldsNativeFormats,
	  presets: {
	    timeDateFormat: {
	      '24h-dmy-mon': timeDateFormat24hdmymon,
	      '12h-mdy-sun': timeDateFormat12hmdysun
	    },
	    availabilityView: {
	      'agendaWeek': availabilityViewAgendaWeek,
	      'listing': availabilityViewListing
	    }
	  }
	};


/***/ }),
/* 36 */
/***/ (function(module, exports) {

	'use strict';
	
	var has = Object.prototype.hasOwnProperty
	  , undef;
	
	/**
	 * Decode a URI encoded string.
	 *
	 * @param {String} input The URI encoded string.
	 * @returns {String|Null} The decoded string.
	 * @api private
	 */
	function decode(input) {
	  try {
	    return decodeURIComponent(input.replace(/\+/g, ' '));
	  } catch (e) {
	    return null;
	  }
	}
	
	/**
	 * Attempts to encode a given input.
	 *
	 * @param {String} input The string that needs to be encoded.
	 * @returns {String|Null} The encoded string.
	 * @api private
	 */
	function encode(input) {
	  try {
	    return encodeURIComponent(input);
	  } catch (e) {
	    return null;
	  }
	}
	
	/**
	 * Simple query string parser.
	 *
	 * @param {String} query The query string that needs to be parsed.
	 * @returns {Object}
	 * @api public
	 */
	function querystring(query) {
	  var parser = /([^=?#&]+)=?([^&]*)/g
	    , result = {}
	    , part;
	
	  while (part = parser.exec(query)) {
	    var key = decode(part[1])
	      , value = decode(part[2]);
	
	    //
	    // Prevent overriding of existing properties. This ensures that build-in
	    // methods like `toString` or __proto__ are not overriden by malicious
	    // querystrings.
	    //
	    // In the case if failed decoding, we want to omit the key/value pairs
	    // from the result.
	    //
	    if (key === null || value === null || key in result) continue;
	    result[key] = value;
	  }
	
	  return result;
	}
	
	/**
	 * Transform a query string to an object.
	 *
	 * @param {Object} obj Object that should be transformed.
	 * @param {String} prefix Optional prefix.
	 * @returns {String}
	 * @api public
	 */
	function querystringify(obj, prefix) {
	  prefix = prefix || '';
	
	  var pairs = []
	    , value
	    , key;
	
	  //
	  // Optionally prefix with a '?' if needed
	  //
	  if ('string' !== typeof prefix) prefix = '?';
	
	  for (key in obj) {
	    if (has.call(obj, key)) {
	      value = obj[key];
	
	      //
	      // Edge cases where we actually want to encode the value to an empty
	      // string instead of the stringified value.
	      //
	      if (!value && (value === null || value === undef || isNaN(value))) {
	        value = '';
	      }
	
	      key = encode(key);
	      value = encode(value);
	
	      //
	      // If we failed to encode the strings, we should bail out as we don't
	      // want to add invalid strings to the query.
	      //
	      if (key === null || value === null) continue;
	      pairs.push(key +'='+ value);
	    }
	  }
	
	  return pairs.length ? prefix + pairs.join('&') : '';
	}
	
	//
	// Expose the module.
	//
	exports.stringify = querystringify;
	exports.parse = querystring;


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(38);
	
	function InitUtils(deps) {
	
	  var getConfig = deps.config.retrieve;
	
	  var isFunction = function(object) {
	   return !!(object && object.constructor && object.call && object.apply);
	  }
	
	  var isArray = function(object) {
	   return object && object.constructor === Array;
	  }
	
	  var doCallback = function(hook, arg, deprecated) {
	    if(getConfig().callbacks && this.isFunction(getConfig().callbacks[hook])) {
	      if (deprecated) {
	        this.logDeprecated(hook + ' callback has been replaced, please see docs');
	      }
	      getConfig().callbacks[hook](arg);
	    }
	    this.logDebug(['Trigger callback "' + hook + '" with arguments:', arg]);
	  }
	
	  var logDebug = function(message) {
	    if (getConfig().debug) console.log('TimekitBooking Debug: ', message);
	  }
	
	  var logError = function(message) {
	    console.warn('TimekitBooking Error: ', message);
	  }
	
	  var logDeprecated = function(message) {
	    console.warn('TimekitBooking Deprecated: ', message);
	  }
	
	  // Helper to decide if it's an embedded remote project
	  var isEmbeddedProject = function(suppliedConfig) {
	    return typeof suppliedConfig.project_id !== 'undefined'
	  };
	
	  // Helper to decide if it's an hosted remote project
	  var isHostedProject = function(suppliedConfig) {
	    return typeof suppliedConfig.project_slug !== 'undefined'
	  };
	
	  // Helper to decide if it's an embedded or hosted remote project
	  var isRemoteProject = function(suppliedConfig) {
	    return (isEmbeddedProject(suppliedConfig) || isHostedProject(suppliedConfig))
	  };
	
	  var doesConfigExist = function (suppliedConfig) {
	    return (suppliedConfig !== undefined && typeof suppliedConfig === 'object' && !$.isEmptyObject(suppliedConfig))
	  }
	
	  return {
	    isFunction: isFunction,
	    isArray: isArray,
	    doCallback: doCallback,
	    logDebug: logDebug,
	    logError: logError,
	    logDeprecated: logDeprecated,
	    isEmbeddedProject: isEmbeddedProject,
	    isHostedProject: isHostedProject,
	    isRemoteProject: isRemoteProject,
	    doesConfigExist: doesConfigExist
	  }
	}
	
	module.exports = InitUtils


/***/ }),
/* 38 */
/***/ (function(module, exports) {

	// Console-polyfill. MIT license.
	// https://github.com/paulmillr/console-polyfill
	// Make it safe to do console.log() always.
	(function(global) {
	  'use strict';
	  if (!global.console) {
	    global.console = {};
	  }
	  var con = global.console;
	  var prop, method;
	  var dummy = function() {};
	  var properties = ['memory'];
	  var methods = ('assert,clear,count,debug,dir,dirxml,error,exception,group,' +
	     'groupCollapsed,groupEnd,info,log,markTimeline,profile,profiles,profileEnd,' +
	     'show,table,time,timeEnd,timeline,timelineEnd,timeStamp,trace,warn').split(',');
	  while (prop = properties.pop()) if (!con[prop]) con[prop] = {};
	  while (method = methods.pop()) if (typeof con[method] !== 'function') con[method] = dummy;
	  // Using `this` for web workers & supports Browserify / Webpack.
	})(typeof window === 'undefined' ? this : window);


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var interpolate     = __webpack_require__(40);
	var $               = __webpack_require__(1);
	var moment          = window.moment = __webpack_require__(42);
	var stringify       = __webpack_require__(45);
	window.fullcalendar = __webpack_require__(46);
	__webpack_require__(47);
	__webpack_require__(48);
	__webpack_require__(52);
	__webpack_require__(54);
	__webpack_require__(56);
	__webpack_require__(58);
	
	var timezones    = __webpack_require__(60);
	
	function InitRender(deps) {
	
	  var utils = deps.utils;
	  var sdk = deps.sdk;
	  var getConfig = deps.config.retrieve;
	
	  // DOM nodes
	  var rootTarget;
	  var calendarTarget;
	  var bookingPageTarget;
	  var loadingTarget;
	  var errorTarget;
	
	  // State
	  var customerTimezone;
	
	  // Make sure DOM element is ready and clean it
	  var prepareDOM = function(suppliedConfig) {
	
	    var targetElement = suppliedConfig.el || getConfig().el;
	
	    rootTarget = $(targetElement);
	
	    if (rootTarget.length === 0) {
	      throw triggerError('No target DOM element was found (' + targetElement + ')');
	    }
	
	    rootTarget.addClass('bookingjs');
	    rootTarget.children(':not(script)').remove();
	
	  };
	
	  // Fetch availabile time through Timekit SDK
	  var timekitFetchAvailability = function() {
	
	    var args = {
	      output_timezone: customerTimezone
	    };
	
	    if (getConfig().project_id) args.project_id = getConfig().project_id
	    if (getConfig().resources) args.resources = getConfig().resources
	    if (getConfig().availability_constraints) args.constraints = getConfig().availability_constraints
	
	    $.extend(args, getConfig().availability);
	
	    utils.doCallback('fetchAvailabilityStarted', args);
	
	    sdk
	    .makeRequest({
	      method: 'post',
	      url: '/availability',
	      data: args
	    })
	    .then(function(response){
	
	      utils.doCallback('fetchAvailabilitySuccessful', response);
	      hideLoadingScreen();
	
	      // Render available timeslots in FullCalendar
	      if(response.data.length > 0) renderCalendarEvents(response.data);
	
	      // Render test ribbon if enabled
	      if (response.headers['timekit-testmode']) renderTestModeRibbon();
	
	    }).catch(function(response){
	      utils.doCallback('fetchAvailabilityFailed', response);
	      hideLoadingScreen();
	      triggerError(['An error with Timekit Fetch Availability occured', response]);
	    });
	
	  };
	
	  // Fetch availabile time through Timekit SDK
	  var timekitGetBookingSlots = function() {
	
	    utils.doCallback('GetBookingSlotsStarted');
	
	    var requestData = {
	      url: '/bookings/groups',
	      method: 'get',
	      headers: {
	        'Timekit-Timezone': customerTimezone
	      }
	    }
	
	    // scope group booking slots by widget ID if possible
	    if (getConfig().project_id) requestData.params = {
	      search: 'project.id:' + getConfig().project_id
	    }
	
	    sdk
	    .makeRequest(requestData)
	    .then(function(response){
	
	      var slots = response.data.map(function(item) {
	        return {
	          title: item.attributes.event_info.what,
	          start: item.attributes.event_info.start,
	          end: item.attributes.event_info.end,
	          booking: item
	        }
	      })
	
	      // Make sure to sort the slots chronologically,
	      // otherwise FullCalendar might skip rendering some of them
	      slots.sort(function(a, b) {
	        return moment(a.start) - moment(b.start);
	      })
	
	      utils.doCallback('getBookingSlotsSuccessful', response);
	      hideLoadingScreen();
	
	      // Render available timeslots in FullCalendar
	      if(slots.length > 0) renderCalendarEvents(slots);
	
	      // Render test ribbon if enabled
	      if (response.headers['timekit-testmode']) renderTestModeRibbon();
	
	    }).catch(function(response){
	      utils.doCallback('getBookingSlotsFailed', response);
	      hideLoadingScreen();
	      triggerError(['An error with Timekit Get Booking Slots occured', response]);
	    });
	
	  };
	
	  // Universal functional to retrieve availability through either findtime or group booking slots
	  var getAvailability = function() {
	
	    showLoadingScreen();
	
	    calendarTarget.fullCalendar('removeEventSources');
	
	    if (getConfig().booking.graph === 'group_customer' || getConfig().booking.graph === 'group_customer_payment') {
	      // If in group bookings mode, fetch slots
	      timekitGetBookingSlots();
	    } else {
	      // If in normal single-participant mode, call findtime
	      timekitFetchAvailability();
	    }
	
	  };
	
	  // Go to the first timeslot in a list of timeslots
	  var goToFirstEvent = function(firstEventStart) {
	
	    calendarTarget.fullCalendar('gotoDate', firstEventStart);
	
	    var firstEventStartHour = moment(firstEventStart).format('H');
	    scrollToTime(firstEventStartHour);
	
	  };
	
	  // Scrolls fullcalendar to the specified hour
	  var scrollToTime = function(time) {
	
	    // Only proceed for agendaWeek view
	    if (calendarTarget.fullCalendar('getView').name !== 'agendaWeek'){
	      return;
	    }
	
	    // Get height of each hour row
	    var slotDuration = calendarTarget.fullCalendar('option', 'slotDuration');
	    var slotDurationMinutes = 30;
	    if (slotDuration) slotDurationMinutes = slotDuration.slice(3, 5);
	    var hours = calendarTarget.find('.fc-slats .fc-minor');
	    var hourHeight = $(hours[0]).height() * (60 / slotDurationMinutes);
	
	    // If minTime is set in fullCalendar config, subtract that from the scollTo calculationn
	    var minTimeHeight = 0;
	    if (getConfig().fullcalendar.minTime) {
	      var minTime = moment(getConfig().fullcalendar.minTime, 'HH:mm:ss').format('H');
	      minTimeHeight = hourHeight * minTime;
	    }
	
	    // Calculate scrolling location and container sizes
	    var scrollTo = (hourHeight * time) - minTimeHeight;
	    var scrollable = calendarTarget.find('.fc-scroller');
	    var scrollableHeight = scrollable.height();
	    var scrollableScrollTop = scrollable.scrollTop();
	    var maximumHeight = scrollable.find('.fc-time-grid').height();
	
	    // Only perform the scroll if the scrollTo is outside the current visible boundary
	    if (scrollTo > scrollableScrollTop && scrollTo < scrollableScrollTop + scrollableHeight) {
	      return;
	    }
	
	    // If scrollTo point is past the maximum height, then scroll to maximum possible while still animating
	    if (scrollTo > maximumHeight - scrollableHeight) {
	      scrollTo = maximumHeight - scrollableHeight;
	    }
	
	    // Perform the scrollTo animation
	    scrollable.animate({scrollTop: scrollTo});
	
	  };
	
	  // Display ribbon if in testmode
	  var renderTestModeRibbon = function() {
	
	    var template = __webpack_require__(61);
	
	    var testModeRibbonTarget = $(template.render({
	      ribbonText: 'Test Mode',
	    }));
	
	    rootTarget.append(testModeRibbonTarget);
	
	  };
	
	  // Calculate and display timezone helper
	  var renderFooter = function() {
	
	    var showTimezoneHelper = getConfig().ui.show_timezone_helper;
	    var showCredits = getConfig().ui.show_credits;
	
	    // If neither TZ helper or credits is shown, dont render the footer
	    if (!showTimezoneHelper && !showCredits) return
	
	    var campaignName = 'widget';
	    var campaignSource = window.location.hostname.replace(/\./g, '-');
	    if (getConfig().project_id) { campaignName = 'embedded-widget'; }
	    if (getConfig().project_slug) { campaignName = 'hosted-widget'; }
	
	    var timezoneIcon = __webpack_require__(65);
	    var arrowDownIcon = __webpack_require__(66);
	    var timekitLogo = __webpack_require__(67);
	    var template = __webpack_require__(68);
	
	    var footerTarget = $(template.render({
	      timezoneIcon: timezoneIcon,
	      arrowDownIcon: arrowDownIcon,
	      listTimezones: timezones,
	      timekitLogo: timekitLogo,
	      campaignName: campaignName,
	      campaignSource: campaignSource,
	      showCredits: showCredits,
	      showTimezoneHelper: showTimezoneHelper
	    }));
	    rootTarget.append(footerTarget);
	
	    // Set initial customer timezone
	    var pickerSelect = $('.bookingjs-footer-tz-picker-select');
	    pickerSelect.val(customerTimezone);
	    
	    // Listen to changes by the user
	    pickerSelect.change(function() {
	      setCustomerTimezone(pickerSelect.val());
	      $(rootTarget).trigger('customer-timezone-changed');
	    })
	  };
	
	  // Guess the timezone and set global variable
	  var guessCustomerTimezone = function () {
	    var tzGuess = moment.tz.guess() || 'UTC';
	    setCustomerTimezone(tzGuess);
	
	    // Add the guessed customer timezone to list if its unknwon
	    var knownTimezone = $.grep(timezones, function (tz) {
	      return tz.key === customerTimezone
	    }).length > 0
	    if (!knownTimezone) {
	      var name = '(' + moment().tz(customerTimezone).format('Z') + ') ' + customerTimezone
	      timezones.unshift({
	        key: customerTimezone,
	        name: name
	      });
	    }
	  }
	
	  // Set timezone
	  var setCustomerTimezone = function (newTz) {
	    if (!newTz || !moment.tz.zone(newTz)) {
	      throw triggerError(['Trying to set invalid or unknown timezone', newTz]);
	    }
	    customerTimezone = newTz;
	  }
	
	  // Setup and render FullCalendar
	  var initializeCalendar = function() {
	
	    var sizing = decideCalendarSize(getConfig().fullcalendar.defaultView);
	
	    var args = {
	      height: sizing.height,
	      eventClick: clickTimeslot,
	      windowResize: function() {
	        var sizing = decideCalendarSize();
	        calendarTarget.fullCalendar('changeView', sizing.view);
	        calendarTarget.fullCalendar('option', 'height', sizing.height);
	      }
	    };
	
	    $.extend(true, args, getConfig().fullcalendar);
	    args.defaultView = sizing.view;
	
	    calendarTarget = $('<div class="bookingjs-calendar empty-calendar">');
	    rootTarget.append(calendarTarget);
	
	    calendarTarget.fullCalendar(args);
	
	    $(rootTarget).on('customer-timezone-changed', function () {
	      if (!calendarTarget) return
	      getAvailability();
	      calendarTarget.fullCalendar('option', 'now', moment().tz(customerTimezone).format());
	    })
	
	    utils.doCallback('fullCalendarInitialized');
	
	  };
	
	  // Clicking a timeslot
	  var clickTimeslot = function(eventData) {
	
	    if (!getConfig().disable_confirm_page) {
	      showBookingPage(eventData)
	    } else {
	      $('.fc-event-clicked').removeClass('fc-event-clicked');
	      $(this).addClass('fc-event-clicked');
	      utils.doCallback('clickTimeslot', eventData);
	    }
	
	  };
	
	  // Fires when window is resized and calendar must adhere
	  var decideCalendarSize = function(currentView) {
	
	    currentView = currentView || calendarTarget.fullCalendar('getView').name
	
	    var view = getConfig().fullcalendar.defaultView
	    var height = 385;
	
	    if (rootTarget.width() < 480) {
	      rootTarget.addClass('is-small');
	      if (getConfig().ui.avatar) height -= 15;
	      if (currentView === 'agendaWeek' || currentView === 'basicDay') {
	        view = 'basicDay';
	      }
	    } else {
	      rootTarget.removeClass('is-small');
	    }
	
	    $.each(getConfig().customer_fields, function(key, field) {
	      if (field.format === 'textarea') height += 98;
	      else if (field.format === 'checkbox') height += 51;
	      else height += 66;
	    })
	
	    return {
	      height: height,
	      view: view
	    };
	
	  };
	
	  // Render the supplied calendar events in FullCalendar
	  var renderCalendarEvents = function(eventData) {
	
	    var firstEventStart = moment(eventData[0].start)
	    var firstEventEnd = moment(eventData[0].end)
	    var firstEventDuration = firstEventEnd.diff(firstEventStart, 'minutes')
	
	    if (firstEventDuration <= 90) {
	      calendarTarget.fullCalendar('option', 'slotDuration', '00:15:00')
	    }
	
	    calendarTarget.fullCalendar('addEventSource', {
	      events: eventData
	    });
	
	    calendarTarget.removeClass('empty-calendar');
	
	    // Go to first event if enabled
	    goToFirstEvent(eventData[0].start);
	
	  };
	
	  // Render the avatar image
	  var renderAvatarImage = function() {
	
	    var template = __webpack_require__(69);
	    var avatarTarget = $(template.render({
	      image: getConfig().ui.avatar
	    }));
	
	    rootTarget.addClass('has-avatar');
	    rootTarget.append(avatarTarget);
	
	  };
	
	  // Render the avatar image
	  var renderDisplayName = function() {
	
	    var template = __webpack_require__(70);
	    var displayNameTarget = $(template.render({
	      name: getConfig().ui.display_name
	    }));
	
	    rootTarget.addClass('has-displayname');
	    rootTarget.append(displayNameTarget);
	
	  };
	
	  // Show loading spinner screen
	  var showLoadingScreen = function() {
	
	    utils.doCallback('showLoadingScreen');
	
	    var template = __webpack_require__(71);
	    loadingTarget = $(template.render({
	      loadingIcon: __webpack_require__(72)
	    }));
	
	    rootTarget.append(loadingTarget);
	
	  };
	
	  // Remove the booking page DOM node
	  var hideLoadingScreen = function() {
	
	    utils.doCallback('hideLoadingScreen');
	    loadingTarget.removeClass('show');
	
	    setTimeout(function(){
	      loadingTarget.remove();
	    }, 500);
	
	  };
	
	  // Show error and warning screen
	  var triggerError = function(message) {
	
	    // If an error already has been thrown, exit
	    if (errorTarget) return message
	
	    utils.doCallback('errorTriggered', message);
	    utils.logError(message)
	
	    // If no target DOM element exists, only do the logging
	    if (!rootTarget) return message
	
	    var messageProcessed = message
	    var contextProcessed = null
	
	    if (utils.isArray(message)) {
	      messageProcessed = message[0]
	      if (message[1].data) {
	        contextProcessed = stringify(message[1].data.errors || message[1].data.error || message[1].data)
	      } else {
	        contextProcessed = stringify(message[1])
	      }
	    }
	
	    var template = __webpack_require__(73);
	    errorTarget = $(template.render({
	      errorWarningIcon: __webpack_require__(74),
	      message: messageProcessed,
	      context: contextProcessed
	    }));
	
	    rootTarget.append(errorTarget);
	
	    return message
	
	  };
	
	  // Render customer fields
	  var renderCustomerFields = function () {
	    
	    var textTemplate = __webpack_require__(75);
	    var textareaTemplate = __webpack_require__(76);
	    var selectTemplate = __webpack_require__(77);
	    var checkboxTemplate = __webpack_require__(78);
	
	    var fieldsTarget = []
	    $.each(getConfig().customer_fields, function(key, field) {
	      var tmpl = textTemplate
	      if (field.format === 'textarea') tmpl = textareaTemplate
	      if (field.format === 'select') tmpl = selectTemplate
	      if (field.format === 'checkbox') tmpl = checkboxTemplate
	      if (!field.format) field.format = 'text'
	      if (key === 'email') field.format = 'email'
	      var data = $.extend({
	        key: key,
	        arrowDownIcon: __webpack_require__(66)
	      }, field)
	      var fieldTarget = $(tmpl.render(data))
	      fieldsTarget.push(fieldTarget)
	    })
	
	    return fieldsTarget
	  }
	
	  // Event handler when a timeslot is clicked in FullCalendar
	  var showBookingPage = function(eventData) {
	
	    utils.doCallback('showBookingPage', eventData);
	
	    var template = __webpack_require__(79);
	
	    var dateFormat = getConfig().ui.booking_date_format || moment.localeData().longDateFormat('LL');
	    var timeFormat = getConfig().ui.booking_time_format || moment.localeData().longDateFormat('LT');
	    var allocatedResource = eventData.resources ? eventData.resources[0].name : false;
	
	    bookingPageTarget = $(template.render({
	      chosenDate:               formatTimestamp(eventData.start, dateFormat),
	      chosenTime:               formatTimestamp(eventData.start, timeFormat) + ' - ' + formatTimestamp(eventData.end, timeFormat),
	      allocatedResourcePrefix:  getConfig().ui.localization.allocated_resource_prefix,
	      allocatedResource:        allocatedResource,
	      closeIcon:                __webpack_require__(80),
	      checkmarkIcon:            __webpack_require__(81),
	      loadingIcon:              __webpack_require__(72),
	      errorIcon:                __webpack_require__(82),
	      submitText:               getConfig().ui.localization.submit_button,
	      successMessage:           interpolate.sprintf(getConfig().ui.localization.success_message, '<span class="booked-email"></span>')
	    }));
	
	    var formFields = bookingPageTarget.find('.bookingjs-form-fields');
	    $(formFields).append(renderCustomerFields());
	    
	    var form = bookingPageTarget.children('.bookingjs-form');
	
	    bookingPageTarget.children('.bookingjs-bookpage-close').click(function(e) {
	      e.preventDefault();
	      var bookingHasBeenCreated = $(form).hasClass('success');
	      if (bookingHasBeenCreated) getAvailability();
	      hideBookingPage();
	    });
	
	    if (eventData.resources) {
	      utils.logDebug(['Available resources for chosen timeslot:', eventData.resources]);
	    }
	
	    form.find('.bookingjs-form-input').on('input', function() {
	      var field = $(this).closest('.bookingjs-form-field');
	      if (this.value) field.addClass('bookingjs-form-field--dirty');
	      else field.removeClass('bookingjs-form-field--dirty');
	    });
	
	    form.submit(function(e) {
	      submitBookingForm(this, e, eventData);
	    });
	
	    $(rootTarget).on('customer-timezone-changed', function () {
	      if (!bookingPageTarget) return
	      $('.bookingjs-bookpage-date').text(formatTimestamp(eventData.start, dateFormat));
	      $('.bookingjs-bookpage-time').text(formatTimestamp(eventData.start, timeFormat) + ' - ' + formatTimestamp(eventData.end, timeFormat));
	    });
	
	    $(document).on('keyup', function(e) {
	      // escape key maps to keycode `27`
	      if (e.keyCode === 27) { hideBookingPage(); }
	    });
	
	    rootTarget.append(bookingPageTarget);
	
	    setTimeout(function(){
	      bookingPageTarget.addClass('show');
	    }, 100);
	
	  };
	
	  // Output timestamp into given format in customers timezone
	  var formatTimestamp = function (start, format) {
	    return moment(start).tz(customerTimezone).format(format);
	  }
	
	  // Remove the booking page DOM node
	  var hideBookingPage = function() {
	
	    utils.doCallback('closeBookingPage');
	
	    bookingPageTarget.removeClass('show');
	
	    setTimeout(function(){
	      bookingPageTarget.remove();
	    }, 200);
	
	    $(document).off('keyup');
	
	  };
	
	  // Event handler on form submit
	  var submitBookingForm = function(form, e, eventData) {
	
	    e.preventDefault();
	
	    var formElement = $(form);
	
	    if(formElement.hasClass('success')) {
	      getAvailability();
	      hideBookingPage();
	      return;
	    }
	
	    // Abort if form is submitting, have submitted or does not validate
	    if(formElement.hasClass('loading') || formElement.hasClass('error') || !e.target.checkValidity()) {
	      var submitButton = formElement.find('.bookingjs-form-button');
	      submitButton.addClass('button-shake');
	      setTimeout(function() {
	        submitButton.removeClass('button-shake');
	      }, 500);
	      return;
	    }
	
	    var formData = {};
	    $.each(formElement.serializeArray(), function(i, field) {
	      formData[field.name] = field.value;
	    });
	
	    formElement.addClass('loading');
	
	    utils.doCallback('submitBookingForm', formData);
	
	    // Call create event endpoint
	    timekitCreateBooking(formData, eventData).then(function(response){
	
	      formElement.find('.booked-email').html(formData.email);
	      formElement.removeClass('loading').addClass('success');
	
	    }).catch(function(response){
	
	      showBookingFailed(formElement)
	
	    });
	
	  };
	
	  var showBookingFailed = function (formElement) {
	
	    var submitButton = formElement.find('.bookingjs-form-button');
	    submitButton.addClass('button-shake');
	    setTimeout(function() {
	      submitButton.removeClass('button-shake');
	    }, 500);
	
	    formElement.removeClass('loading').addClass('error');
	    setTimeout(function() {
	      formElement.removeClass('error');
	    }, 2000);
	
	  }
	
	  // Create new booking
	  var timekitCreateBooking = function(formData, eventData) {
	
	    var nativeFields = ['name', 'email', 'location', 'comment', 'phone', 'voip']
	
	    var args = {
	      start: eventData.start.format(),
	      end: eventData.end.format(),
	      description: '',
	      customer: {
	        name: formData.name,
	        email: formData.email,
	        timezone: customerTimezone
	      } 
	    };
	
	    if (getConfig().project_id) {
	      args.project_id = getConfig().project_id
	    } else {
	      $.extend(true, args, {
	        what: 'Meeting with ' + formData.name,
	        where: 'TBD'
	      });
	    }
	
	    args.description += (getConfig().customer_fields.name.title || 'Name') + ': ' + formData.name + '\n';
	    args.description += (getConfig().customer_fields.name.email || 'Email') + ': ' + formData.email + '\n';
	
	    if (getConfig().customer_fields.location) {
	      args.customer.where = formData.location;
	      args.where = formData.location;
	    }
	    if (getConfig().customer_fields.comment) {
	      args.customer.comment = formData.comment;
	      args.description += (getConfig().customer_fields.comment.title || 'Comment') + ': ' + formData.comment + '\n';
	    }
	    if (getConfig().customer_fields.phone) {
	      args.customer.phone = formData.phone;
	      args.description += (getConfig().customer_fields.phone.title || 'Phone') + ': ' + formData.phone + '\n';
	    }
	    if (getConfig().customer_fields.voip) {
	      args.customer.voip = formData.voip;
	      args.description += (getConfig().customer_fields.voip.title || 'Voip') + ': ' + formData.voip + '\n';
	    }
	
	    // Save custom fields in meta object
	    $.each(getConfig().customer_fields, function(key, field) {
	      if ($.inArray(key, nativeFields) >= 0) return
	      if (field.format === 'checkbox') formData[key] = !!formData[key]
	      args.customer[key] = formData[key]
	      args.description += (getConfig().customer_fields[key].title || key) + ': ' + formData[key] + '\n';
	    })
	
	    if (getConfig().booking.graph === 'group_customer' || getConfig().booking.graph === 'group_customer_payment') {
	      args.related = { owner_booking_id: eventData.booking.id }
	      args.resource_id = eventData.booking.resource.id
	    } else if (typeof eventData.resources === 'undefined' || eventData.resources.length === 0) {
	      throw triggerError(['No resources to pick from when creating booking']);
	    } else {
	      args.resource_id = eventData.resources[0].id
	    }
	
	    $.extend(true, args, getConfig().booking);
	
	    utils.doCallback('createBookingStarted', args);
	
	    var request = sdk
	    .include(getConfig().create_booking_response_include)
	    .createBooking(args);
	
	    request
	    .then(function(response){
	      utils.doCallback('createBookingSuccessful', response);
	    }).catch(function(response){
	      utils.doCallback('createBookingFailed', response);
	      triggerError(['An error with Timekit Create Booking occured', response]);
	    });
	
	    return request;
	
	  };
	
	  // Destory fullcalendar and cleanup event listeners etc.
	  var destroyFullCalendar = function() {
	    if (!calendarTarget || calendarTarget.fullCalendar === undefined) return
	    calendarTarget.fullCalendar('destroy')
	  }
	
	  // The fullCalendar object for advanced puppeting
	  var fullCalendar = function() {
	
	    if (calendarTarget.fullCalendar === undefined) { return undefined; }
	    return calendarTarget.fullCalendar.apply(calendarTarget, arguments);
	
	  };
	
	  return {
	    prepareDOM: prepareDOM,
	    getAvailability: getAvailability,
	    initializeCalendar: initializeCalendar,
	    renderAvatarImage: renderAvatarImage,
	    renderDisplayName: renderDisplayName,
	    triggerError: triggerError,
	    timekitCreateBooking: timekitCreateBooking,
	    fullCalendar: fullCalendar,
	    destroyFullCalendar: destroyFullCalendar,
	    renderFooter: renderFooter,
	    guessCustomerTimezone: guessCustomerTimezone,
	    setCustomerTimezone: setCustomerTimezone
	  }
	}
	
	module.exports = InitRender


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* global window, exports, define */
	
	!function() {
	    'use strict'
	
	    var re = {
	        not_string: /[^s]/,
	        not_bool: /[^t]/,
	        not_type: /[^T]/,
	        not_primitive: /[^v]/,
	        number: /[diefg]/,
	        numeric_arg: /[bcdiefguxX]/,
	        json: /[j]/,
	        not_json: /[^j]/,
	        text: /^[^\x25]+/,
	        modulo: /^\x25{2}/,
	        placeholder: /^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,
	        key: /^([a-z_][a-z_\d]*)/i,
	        key_access: /^\.([a-z_][a-z_\d]*)/i,
	        index_access: /^\[(\d+)\]/,
	        sign: /^[+-]/
	    }
	
	    function sprintf(key) {
	        // `arguments` is not an array, but should be fine for this call
	        return sprintf_format(sprintf_parse(key), arguments)
	    }
	
	    function vsprintf(fmt, argv) {
	        return sprintf.apply(null, [fmt].concat(argv || []))
	    }
	
	    function sprintf_format(parse_tree, argv) {
	        var cursor = 1, tree_length = parse_tree.length, arg, output = '', i, k, ph, pad, pad_character, pad_length, is_positive, sign
	        for (i = 0; i < tree_length; i++) {
	            if (typeof parse_tree[i] === 'string') {
	                output += parse_tree[i]
	            }
	            else if (typeof parse_tree[i] === 'object') {
	                ph = parse_tree[i] // convenience purposes only
	                if (ph.keys) { // keyword argument
	                    arg = argv[cursor]
	                    for (k = 0; k < ph.keys.length; k++) {
	                        if (arg == undefined) {
	                            throw new Error(sprintf('[sprintf] Cannot access property "%s" of undefined value "%s"', ph.keys[k], ph.keys[k-1]))
	                        }
	                        arg = arg[ph.keys[k]]
	                    }
	                }
	                else if (ph.param_no) { // positional argument (explicit)
	                    arg = argv[ph.param_no]
	                }
	                else { // positional argument (implicit)
	                    arg = argv[cursor++]
	                }
	
	                if (re.not_type.test(ph.type) && re.not_primitive.test(ph.type) && arg instanceof Function) {
	                    arg = arg()
	                }
	
	                if (re.numeric_arg.test(ph.type) && (typeof arg !== 'number' && isNaN(arg))) {
	                    throw new TypeError(sprintf('[sprintf] expecting number but found %T', arg))
	                }
	
	                if (re.number.test(ph.type)) {
	                    is_positive = arg >= 0
	                }
	
	                switch (ph.type) {
	                    case 'b':
	                        arg = parseInt(arg, 10).toString(2)
	                        break
	                    case 'c':
	                        arg = String.fromCharCode(parseInt(arg, 10))
	                        break
	                    case 'd':
	                    case 'i':
	                        arg = parseInt(arg, 10)
	                        break
	                    case 'j':
	                        arg = JSON.stringify(arg, null, ph.width ? parseInt(ph.width) : 0)
	                        break
	                    case 'e':
	                        arg = ph.precision ? parseFloat(arg).toExponential(ph.precision) : parseFloat(arg).toExponential()
	                        break
	                    case 'f':
	                        arg = ph.precision ? parseFloat(arg).toFixed(ph.precision) : parseFloat(arg)
	                        break
	                    case 'g':
	                        arg = ph.precision ? String(Number(arg.toPrecision(ph.precision))) : parseFloat(arg)
	                        break
	                    case 'o':
	                        arg = (parseInt(arg, 10) >>> 0).toString(8)
	                        break
	                    case 's':
	                        arg = String(arg)
	                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)
	                        break
	                    case 't':
	                        arg = String(!!arg)
	                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)
	                        break
	                    case 'T':
	                        arg = Object.prototype.toString.call(arg).slice(8, -1).toLowerCase()
	                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)
	                        break
	                    case 'u':
	                        arg = parseInt(arg, 10) >>> 0
	                        break
	                    case 'v':
	                        arg = arg.valueOf()
	                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)
	                        break
	                    case 'x':
	                        arg = (parseInt(arg, 10) >>> 0).toString(16)
	                        break
	                    case 'X':
	                        arg = (parseInt(arg, 10) >>> 0).toString(16).toUpperCase()
	                        break
	                }
	                if (re.json.test(ph.type)) {
	                    output += arg
	                }
	                else {
	                    if (re.number.test(ph.type) && (!is_positive || ph.sign)) {
	                        sign = is_positive ? '+' : '-'
	                        arg = arg.toString().replace(re.sign, '')
	                    }
	                    else {
	                        sign = ''
	                    }
	                    pad_character = ph.pad_char ? ph.pad_char === '0' ? '0' : ph.pad_char.charAt(1) : ' '
	                    pad_length = ph.width - (sign + arg).length
	                    pad = ph.width ? (pad_length > 0 ? pad_character.repeat(pad_length) : '') : ''
	                    output += ph.align ? sign + arg + pad : (pad_character === '0' ? sign + pad + arg : pad + sign + arg)
	                }
	            }
	        }
	        return output
	    }
	
	    var sprintf_cache = Object.create(null)
	
	    function sprintf_parse(fmt) {
	        if (sprintf_cache[fmt]) {
	            return sprintf_cache[fmt]
	        }
	
	        var _fmt = fmt, match, parse_tree = [], arg_names = 0
	        while (_fmt) {
	            if ((match = re.text.exec(_fmt)) !== null) {
	                parse_tree.push(match[0])
	            }
	            else if ((match = re.modulo.exec(_fmt)) !== null) {
	                parse_tree.push('%')
	            }
	            else if ((match = re.placeholder.exec(_fmt)) !== null) {
	                if (match[2]) {
	                    arg_names |= 1
	                    var field_list = [], replacement_field = match[2], field_match = []
	                    if ((field_match = re.key.exec(replacement_field)) !== null) {
	                        field_list.push(field_match[1])
	                        while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {
	                            if ((field_match = re.key_access.exec(replacement_field)) !== null) {
	                                field_list.push(field_match[1])
	                            }
	                            else if ((field_match = re.index_access.exec(replacement_field)) !== null) {
	                                field_list.push(field_match[1])
	                            }
	                            else {
	                                throw new SyntaxError('[sprintf] failed to parse named argument key')
	                            }
	                        }
	                    }
	                    else {
	                        throw new SyntaxError('[sprintf] failed to parse named argument key')
	                    }
	                    match[2] = field_list
	                }
	                else {
	                    arg_names |= 2
	                }
	                if (arg_names === 3) {
	                    throw new Error('[sprintf] mixing positional and named placeholders is not (yet) supported')
	                }
	
	                parse_tree.push(
	                    {
	                        placeholder: match[0],
	                        param_no:    match[1],
	                        keys:        match[2],
	                        sign:        match[3],
	                        pad_char:    match[4],
	                        align:       match[5],
	                        width:       match[6],
	                        precision:   match[7],
	                        type:        match[8]
	                    }
	                )
	            }
	            else {
	                throw new SyntaxError('[sprintf] unexpected placeholder')
	            }
	            _fmt = _fmt.substring(match[0].length)
	        }
	        return sprintf_cache[fmt] = parse_tree
	    }
	
	    /**
	     * export to either browser or node.js
	     */
	    /* eslint-disable quote-props */
	    if (true) {
	        exports['sprintf'] = sprintf
	        exports['vsprintf'] = vsprintf
	    }
	    if (typeof window !== 'undefined') {
	        window['sprintf'] = sprintf
	        window['vsprintf'] = vsprintf
	
	        if ("function" === 'function' && __webpack_require__(41)['amd']) {
	            !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	                return {
	                    'sprintf': sprintf,
	                    'vsprintf': vsprintf
	                }
	            }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))
	        }
	    }
	    /* eslint-enable quote-props */
	}(); // eslint-disable-line


/***/ }),
/* 41 */
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

	var require;/* WEBPACK VAR INJECTION */(function(module) {//! moment.js
	//! version : 2.29.1
	//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
	//! license : MIT
	//! momentjs.com
	
	;(function (global, factory) {
	     true ? module.exports = factory() :
	    typeof define === 'function' && define.amd ? define(factory) :
	    global.moment = factory()
	}(this, (function () { 'use strict';
	
	    var hookCallback;
	
	    function hooks() {
	        return hookCallback.apply(null, arguments);
	    }
	
	    // This is done to register the method called with moment()
	    // without creating circular dependencies.
	    function setHookCallback(callback) {
	        hookCallback = callback;
	    }
	
	    function isArray(input) {
	        return (
	            input instanceof Array ||
	            Object.prototype.toString.call(input) === '[object Array]'
	        );
	    }
	
	    function isObject(input) {
	        // IE8 will treat undefined and null as object if it wasn't for
	        // input != null
	        return (
	            input != null &&
	            Object.prototype.toString.call(input) === '[object Object]'
	        );
	    }
	
	    function hasOwnProp(a, b) {
	        return Object.prototype.hasOwnProperty.call(a, b);
	    }
	
	    function isObjectEmpty(obj) {
	        if (Object.getOwnPropertyNames) {
	            return Object.getOwnPropertyNames(obj).length === 0;
	        } else {
	            var k;
	            for (k in obj) {
	                if (hasOwnProp(obj, k)) {
	                    return false;
	                }
	            }
	            return true;
	        }
	    }
	
	    function isUndefined(input) {
	        return input === void 0;
	    }
	
	    function isNumber(input) {
	        return (
	            typeof input === 'number' ||
	            Object.prototype.toString.call(input) === '[object Number]'
	        );
	    }
	
	    function isDate(input) {
	        return (
	            input instanceof Date ||
	            Object.prototype.toString.call(input) === '[object Date]'
	        );
	    }
	
	    function map(arr, fn) {
	        var res = [],
	            i;
	        for (i = 0; i < arr.length; ++i) {
	            res.push(fn(arr[i], i));
	        }
	        return res;
	    }
	
	    function extend(a, b) {
	        for (var i in b) {
	            if (hasOwnProp(b, i)) {
	                a[i] = b[i];
	            }
	        }
	
	        if (hasOwnProp(b, 'toString')) {
	            a.toString = b.toString;
	        }
	
	        if (hasOwnProp(b, 'valueOf')) {
	            a.valueOf = b.valueOf;
	        }
	
	        return a;
	    }
	
	    function createUTC(input, format, locale, strict) {
	        return createLocalOrUTC(input, format, locale, strict, true).utc();
	    }
	
	    function defaultParsingFlags() {
	        // We need to deep clone this object.
	        return {
	            empty: false,
	            unusedTokens: [],
	            unusedInput: [],
	            overflow: -2,
	            charsLeftOver: 0,
	            nullInput: false,
	            invalidEra: null,
	            invalidMonth: null,
	            invalidFormat: false,
	            userInvalidated: false,
	            iso: false,
	            parsedDateParts: [],
	            era: null,
	            meridiem: null,
	            rfc2822: false,
	            weekdayMismatch: false,
	        };
	    }
	
	    function getParsingFlags(m) {
	        if (m._pf == null) {
	            m._pf = defaultParsingFlags();
	        }
	        return m._pf;
	    }
	
	    var some;
	    if (Array.prototype.some) {
	        some = Array.prototype.some;
	    } else {
	        some = function (fun) {
	            var t = Object(this),
	                len = t.length >>> 0,
	                i;
	
	            for (i = 0; i < len; i++) {
	                if (i in t && fun.call(this, t[i], i, t)) {
	                    return true;
	                }
	            }
	
	            return false;
	        };
	    }
	
	    function isValid(m) {
	        if (m._isValid == null) {
	            var flags = getParsingFlags(m),
	                parsedParts = some.call(flags.parsedDateParts, function (i) {
	                    return i != null;
	                }),
	                isNowValid =
	                    !isNaN(m._d.getTime()) &&
	                    flags.overflow < 0 &&
	                    !flags.empty &&
	                    !flags.invalidEra &&
	                    !flags.invalidMonth &&
	                    !flags.invalidWeekday &&
	                    !flags.weekdayMismatch &&
	                    !flags.nullInput &&
	                    !flags.invalidFormat &&
	                    !flags.userInvalidated &&
	                    (!flags.meridiem || (flags.meridiem && parsedParts));
	
	            if (m._strict) {
	                isNowValid =
	                    isNowValid &&
	                    flags.charsLeftOver === 0 &&
	                    flags.unusedTokens.length === 0 &&
	                    flags.bigHour === undefined;
	            }
	
	            if (Object.isFrozen == null || !Object.isFrozen(m)) {
	                m._isValid = isNowValid;
	            } else {
	                return isNowValid;
	            }
	        }
	        return m._isValid;
	    }
	
	    function createInvalid(flags) {
	        var m = createUTC(NaN);
	        if (flags != null) {
	            extend(getParsingFlags(m), flags);
	        } else {
	            getParsingFlags(m).userInvalidated = true;
	        }
	
	        return m;
	    }
	
	    // Plugins that add properties should also add the key here (null value),
	    // so we can properly clone ourselves.
	    var momentProperties = (hooks.momentProperties = []),
	        updateInProgress = false;
	
	    function copyConfig(to, from) {
	        var i, prop, val;
	
	        if (!isUndefined(from._isAMomentObject)) {
	            to._isAMomentObject = from._isAMomentObject;
	        }
	        if (!isUndefined(from._i)) {
	            to._i = from._i;
	        }
	        if (!isUndefined(from._f)) {
	            to._f = from._f;
	        }
	        if (!isUndefined(from._l)) {
	            to._l = from._l;
	        }
	        if (!isUndefined(from._strict)) {
	            to._strict = from._strict;
	        }
	        if (!isUndefined(from._tzm)) {
	            to._tzm = from._tzm;
	        }
	        if (!isUndefined(from._isUTC)) {
	            to._isUTC = from._isUTC;
	        }
	        if (!isUndefined(from._offset)) {
	            to._offset = from._offset;
	        }
	        if (!isUndefined(from._pf)) {
	            to._pf = getParsingFlags(from);
	        }
	        if (!isUndefined(from._locale)) {
	            to._locale = from._locale;
	        }
	
	        if (momentProperties.length > 0) {
	            for (i = 0; i < momentProperties.length; i++) {
	                prop = momentProperties[i];
	                val = from[prop];
	                if (!isUndefined(val)) {
	                    to[prop] = val;
	                }
	            }
	        }
	
	        return to;
	    }
	
	    // Moment prototype object
	    function Moment(config) {
	        copyConfig(this, config);
	        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
	        if (!this.isValid()) {
	            this._d = new Date(NaN);
	        }
	        // Prevent infinite loop in case updateOffset creates new moment
	        // objects.
	        if (updateInProgress === false) {
	            updateInProgress = true;
	            hooks.updateOffset(this);
	            updateInProgress = false;
	        }
	    }
	
	    function isMoment(obj) {
	        return (
	            obj instanceof Moment || (obj != null && obj._isAMomentObject != null)
	        );
	    }
	
	    function warn(msg) {
	        if (
	            hooks.suppressDeprecationWarnings === false &&
	            typeof console !== 'undefined' &&
	            console.warn
	        ) {
	            console.warn('Deprecation warning: ' + msg);
	        }
	    }
	
	    function deprecate(msg, fn) {
	        var firstTime = true;
	
	        return extend(function () {
	            if (hooks.deprecationHandler != null) {
	                hooks.deprecationHandler(null, msg);
	            }
	            if (firstTime) {
	                var args = [],
	                    arg,
	                    i,
	                    key;
	                for (i = 0; i < arguments.length; i++) {
	                    arg = '';
	                    if (typeof arguments[i] === 'object') {
	                        arg += '\n[' + i + '] ';
	                        for (key in arguments[0]) {
	                            if (hasOwnProp(arguments[0], key)) {
	                                arg += key + ': ' + arguments[0][key] + ', ';
	                            }
	                        }
	                        arg = arg.slice(0, -2); // Remove trailing comma and space
	                    } else {
	                        arg = arguments[i];
	                    }
	                    args.push(arg);
	                }
	                warn(
	                    msg +
	                        '\nArguments: ' +
	                        Array.prototype.slice.call(args).join('') +
	                        '\n' +
	                        new Error().stack
	                );
	                firstTime = false;
	            }
	            return fn.apply(this, arguments);
	        }, fn);
	    }
	
	    var deprecations = {};
	
	    function deprecateSimple(name, msg) {
	        if (hooks.deprecationHandler != null) {
	            hooks.deprecationHandler(name, msg);
	        }
	        if (!deprecations[name]) {
	            warn(msg);
	            deprecations[name] = true;
	        }
	    }
	
	    hooks.suppressDeprecationWarnings = false;
	    hooks.deprecationHandler = null;
	
	    function isFunction(input) {
	        return (
	            (typeof Function !== 'undefined' && input instanceof Function) ||
	            Object.prototype.toString.call(input) === '[object Function]'
	        );
	    }
	
	    function set(config) {
	        var prop, i;
	        for (i in config) {
	            if (hasOwnProp(config, i)) {
	                prop = config[i];
	                if (isFunction(prop)) {
	                    this[i] = prop;
	                } else {
	                    this['_' + i] = prop;
	                }
	            }
	        }
	        this._config = config;
	        // Lenient ordinal parsing accepts just a number in addition to
	        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
	        // TODO: Remove "ordinalParse" fallback in next major release.
	        this._dayOfMonthOrdinalParseLenient = new RegExp(
	            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
	                '|' +
	                /\d{1,2}/.source
	        );
	    }
	
	    function mergeConfigs(parentConfig, childConfig) {
	        var res = extend({}, parentConfig),
	            prop;
	        for (prop in childConfig) {
	            if (hasOwnProp(childConfig, prop)) {
	                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
	                    res[prop] = {};
	                    extend(res[prop], parentConfig[prop]);
	                    extend(res[prop], childConfig[prop]);
	                } else if (childConfig[prop] != null) {
	                    res[prop] = childConfig[prop];
	                } else {
	                    delete res[prop];
	                }
	            }
	        }
	        for (prop in parentConfig) {
	            if (
	                hasOwnProp(parentConfig, prop) &&
	                !hasOwnProp(childConfig, prop) &&
	                isObject(parentConfig[prop])
	            ) {
	                // make sure changes to properties don't modify parent config
	                res[prop] = extend({}, res[prop]);
	            }
	        }
	        return res;
	    }
	
	    function Locale(config) {
	        if (config != null) {
	            this.set(config);
	        }
	    }
	
	    var keys;
	
	    if (Object.keys) {
	        keys = Object.keys;
	    } else {
	        keys = function (obj) {
	            var i,
	                res = [];
	            for (i in obj) {
	                if (hasOwnProp(obj, i)) {
	                    res.push(i);
	                }
	            }
	            return res;
	        };
	    }
	
	    var defaultCalendar = {
	        sameDay: '[Today at] LT',
	        nextDay: '[Tomorrow at] LT',
	        nextWeek: 'dddd [at] LT',
	        lastDay: '[Yesterday at] LT',
	        lastWeek: '[Last] dddd [at] LT',
	        sameElse: 'L',
	    };
	
	    function calendar(key, mom, now) {
	        var output = this._calendar[key] || this._calendar['sameElse'];
	        return isFunction(output) ? output.call(mom, now) : output;
	    }
	
	    function zeroFill(number, targetLength, forceSign) {
	        var absNumber = '' + Math.abs(number),
	            zerosToFill = targetLength - absNumber.length,
	            sign = number >= 0;
	        return (
	            (sign ? (forceSign ? '+' : '') : '-') +
	            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) +
	            absNumber
	        );
	    }
	
	    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
	        localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
	        formatFunctions = {},
	        formatTokenFunctions = {};
	
	    // token:    'M'
	    // padded:   ['MM', 2]
	    // ordinal:  'Mo'
	    // callback: function () { this.month() + 1 }
	    function addFormatToken(token, padded, ordinal, callback) {
	        var func = callback;
	        if (typeof callback === 'string') {
	            func = function () {
	                return this[callback]();
	            };
	        }
	        if (token) {
	            formatTokenFunctions[token] = func;
	        }
	        if (padded) {
	            formatTokenFunctions[padded[0]] = function () {
	                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
	            };
	        }
	        if (ordinal) {
	            formatTokenFunctions[ordinal] = function () {
	                return this.localeData().ordinal(
	                    func.apply(this, arguments),
	                    token
	                );
	            };
	        }
	    }
	
	    function removeFormattingTokens(input) {
	        if (input.match(/\[[\s\S]/)) {
	            return input.replace(/^\[|\]$/g, '');
	        }
	        return input.replace(/\\/g, '');
	    }
	
	    function makeFormatFunction(format) {
	        var array = format.match(formattingTokens),
	            i,
	            length;
	
	        for (i = 0, length = array.length; i < length; i++) {
	            if (formatTokenFunctions[array[i]]) {
	                array[i] = formatTokenFunctions[array[i]];
	            } else {
	                array[i] = removeFormattingTokens(array[i]);
	            }
	        }
	
	        return function (mom) {
	            var output = '',
	                i;
	            for (i = 0; i < length; i++) {
	                output += isFunction(array[i])
	                    ? array[i].call(mom, format)
	                    : array[i];
	            }
	            return output;
	        };
	    }
	
	    // format date using native date object
	    function formatMoment(m, format) {
	        if (!m.isValid()) {
	            return m.localeData().invalidDate();
	        }
	
	        format = expandFormat(format, m.localeData());
	        formatFunctions[format] =
	            formatFunctions[format] || makeFormatFunction(format);
	
	        return formatFunctions[format](m);
	    }
	
	    function expandFormat(format, locale) {
	        var i = 5;
	
	        function replaceLongDateFormatTokens(input) {
	            return locale.longDateFormat(input) || input;
	        }
	
	        localFormattingTokens.lastIndex = 0;
	        while (i >= 0 && localFormattingTokens.test(format)) {
	            format = format.replace(
	                localFormattingTokens,
	                replaceLongDateFormatTokens
	            );
	            localFormattingTokens.lastIndex = 0;
	            i -= 1;
	        }
	
	        return format;
	    }
	
	    var defaultLongDateFormat = {
	        LTS: 'h:mm:ss A',
	        LT: 'h:mm A',
	        L: 'MM/DD/YYYY',
	        LL: 'MMMM D, YYYY',
	        LLL: 'MMMM D, YYYY h:mm A',
	        LLLL: 'dddd, MMMM D, YYYY h:mm A',
	    };
	
	    function longDateFormat(key) {
	        var format = this._longDateFormat[key],
	            formatUpper = this._longDateFormat[key.toUpperCase()];
	
	        if (format || !formatUpper) {
	            return format;
	        }
	
	        this._longDateFormat[key] = formatUpper
	            .match(formattingTokens)
	            .map(function (tok) {
	                if (
	                    tok === 'MMMM' ||
	                    tok === 'MM' ||
	                    tok === 'DD' ||
	                    tok === 'dddd'
	                ) {
	                    return tok.slice(1);
	                }
	                return tok;
	            })
	            .join('');
	
	        return this._longDateFormat[key];
	    }
	
	    var defaultInvalidDate = 'Invalid date';
	
	    function invalidDate() {
	        return this._invalidDate;
	    }
	
	    var defaultOrdinal = '%d',
	        defaultDayOfMonthOrdinalParse = /\d{1,2}/;
	
	    function ordinal(number) {
	        return this._ordinal.replace('%d', number);
	    }
	
	    var defaultRelativeTime = {
	        future: 'in %s',
	        past: '%s ago',
	        s: 'a few seconds',
	        ss: '%d seconds',
	        m: 'a minute',
	        mm: '%d minutes',
	        h: 'an hour',
	        hh: '%d hours',
	        d: 'a day',
	        dd: '%d days',
	        w: 'a week',
	        ww: '%d weeks',
	        M: 'a month',
	        MM: '%d months',
	        y: 'a year',
	        yy: '%d years',
	    };
	
	    function relativeTime(number, withoutSuffix, string, isFuture) {
	        var output = this._relativeTime[string];
	        return isFunction(output)
	            ? output(number, withoutSuffix, string, isFuture)
	            : output.replace(/%d/i, number);
	    }
	
	    function pastFuture(diff, output) {
	        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
	        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
	    }
	
	    var aliases = {};
	
	    function addUnitAlias(unit, shorthand) {
	        var lowerCase = unit.toLowerCase();
	        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
	    }
	
	    function normalizeUnits(units) {
	        return typeof units === 'string'
	            ? aliases[units] || aliases[units.toLowerCase()]
	            : undefined;
	    }
	
	    function normalizeObjectUnits(inputObject) {
	        var normalizedInput = {},
	            normalizedProp,
	            prop;
	
	        for (prop in inputObject) {
	            if (hasOwnProp(inputObject, prop)) {
	                normalizedProp = normalizeUnits(prop);
	                if (normalizedProp) {
	                    normalizedInput[normalizedProp] = inputObject[prop];
	                }
	            }
	        }
	
	        return normalizedInput;
	    }
	
	    var priorities = {};
	
	    function addUnitPriority(unit, priority) {
	        priorities[unit] = priority;
	    }
	
	    function getPrioritizedUnits(unitsObj) {
	        var units = [],
	            u;
	        for (u in unitsObj) {
	            if (hasOwnProp(unitsObj, u)) {
	                units.push({ unit: u, priority: priorities[u] });
	            }
	        }
	        units.sort(function (a, b) {
	            return a.priority - b.priority;
	        });
	        return units;
	    }
	
	    function isLeapYear(year) {
	        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
	    }
	
	    function absFloor(number) {
	        if (number < 0) {
	            // -0 -> 0
	            return Math.ceil(number) || 0;
	        } else {
	            return Math.floor(number);
	        }
	    }
	
	    function toInt(argumentForCoercion) {
	        var coercedNumber = +argumentForCoercion,
	            value = 0;
	
	        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
	            value = absFloor(coercedNumber);
	        }
	
	        return value;
	    }
	
	    function makeGetSet(unit, keepTime) {
	        return function (value) {
	            if (value != null) {
	                set$1(this, unit, value);
	                hooks.updateOffset(this, keepTime);
	                return this;
	            } else {
	                return get(this, unit);
	            }
	        };
	    }
	
	    function get(mom, unit) {
	        return mom.isValid()
	            ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]()
	            : NaN;
	    }
	
	    function set$1(mom, unit, value) {
	        if (mom.isValid() && !isNaN(value)) {
	            if (
	                unit === 'FullYear' &&
	                isLeapYear(mom.year()) &&
	                mom.month() === 1 &&
	                mom.date() === 29
	            ) {
	                value = toInt(value);
	                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](
	                    value,
	                    mom.month(),
	                    daysInMonth(value, mom.month())
	                );
	            } else {
	                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
	            }
	        }
	    }
	
	    // MOMENTS
	
	    function stringGet(units) {
	        units = normalizeUnits(units);
	        if (isFunction(this[units])) {
	            return this[units]();
	        }
	        return this;
	    }
	
	    function stringSet(units, value) {
	        if (typeof units === 'object') {
	            units = normalizeObjectUnits(units);
	            var prioritized = getPrioritizedUnits(units),
	                i;
	            for (i = 0; i < prioritized.length; i++) {
	                this[prioritized[i].unit](units[prioritized[i].unit]);
	            }
	        } else {
	            units = normalizeUnits(units);
	            if (isFunction(this[units])) {
	                return this[units](value);
	            }
	        }
	        return this;
	    }
	
	    var match1 = /\d/, //       0 - 9
	        match2 = /\d\d/, //      00 - 99
	        match3 = /\d{3}/, //     000 - 999
	        match4 = /\d{4}/, //    0000 - 9999
	        match6 = /[+-]?\d{6}/, // -999999 - 999999
	        match1to2 = /\d\d?/, //       0 - 99
	        match3to4 = /\d\d\d\d?/, //     999 - 9999
	        match5to6 = /\d\d\d\d\d\d?/, //   99999 - 999999
	        match1to3 = /\d{1,3}/, //       0 - 999
	        match1to4 = /\d{1,4}/, //       0 - 9999
	        match1to6 = /[+-]?\d{1,6}/, // -999999 - 999999
	        matchUnsigned = /\d+/, //       0 - inf
	        matchSigned = /[+-]?\d+/, //    -inf - inf
	        matchOffset = /Z|[+-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
	        matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, // +00 -00 +00:00 -00:00 +0000 -0000 or Z
	        matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
	        // any word (or two) characters or numbers including two/three word month in arabic.
	        // includes scottish gaelic two word and hyphenated months
	        matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
	        regexes;
	
	    regexes = {};
	
	    function addRegexToken(token, regex, strictRegex) {
	        regexes[token] = isFunction(regex)
	            ? regex
	            : function (isStrict, localeData) {
	                  return isStrict && strictRegex ? strictRegex : regex;
	              };
	    }
	
	    function getParseRegexForToken(token, config) {
	        if (!hasOwnProp(regexes, token)) {
	            return new RegExp(unescapeFormat(token));
	        }
	
	        return regexes[token](config._strict, config._locale);
	    }
	
	    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
	    function unescapeFormat(s) {
	        return regexEscape(
	            s
	                .replace('\\', '')
	                .replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (
	                    matched,
	                    p1,
	                    p2,
	                    p3,
	                    p4
	                ) {
	                    return p1 || p2 || p3 || p4;
	                })
	        );
	    }
	
	    function regexEscape(s) {
	        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
	    }
	
	    var tokens = {};
	
	    function addParseToken(token, callback) {
	        var i,
	            func = callback;
	        if (typeof token === 'string') {
	            token = [token];
	        }
	        if (isNumber(callback)) {
	            func = function (input, array) {
	                array[callback] = toInt(input);
	            };
	        }
	        for (i = 0; i < token.length; i++) {
	            tokens[token[i]] = func;
	        }
	    }
	
	    function addWeekParseToken(token, callback) {
	        addParseToken(token, function (input, array, config, token) {
	            config._w = config._w || {};
	            callback(input, config._w, config, token);
	        });
	    }
	
	    function addTimeToArrayFromToken(token, input, config) {
	        if (input != null && hasOwnProp(tokens, token)) {
	            tokens[token](input, config._a, config, token);
	        }
	    }
	
	    var YEAR = 0,
	        MONTH = 1,
	        DATE = 2,
	        HOUR = 3,
	        MINUTE = 4,
	        SECOND = 5,
	        MILLISECOND = 6,
	        WEEK = 7,
	        WEEKDAY = 8;
	
	    function mod(n, x) {
	        return ((n % x) + x) % x;
	    }
	
	    var indexOf;
	
	    if (Array.prototype.indexOf) {
	        indexOf = Array.prototype.indexOf;
	    } else {
	        indexOf = function (o) {
	            // I know
	            var i;
	            for (i = 0; i < this.length; ++i) {
	                if (this[i] === o) {
	                    return i;
	                }
	            }
	            return -1;
	        };
	    }
	
	    function daysInMonth(year, month) {
	        if (isNaN(year) || isNaN(month)) {
	            return NaN;
	        }
	        var modMonth = mod(month, 12);
	        year += (month - modMonth) / 12;
	        return modMonth === 1
	            ? isLeapYear(year)
	                ? 29
	                : 28
	            : 31 - ((modMonth % 7) % 2);
	    }
	
	    // FORMATTING
	
	    addFormatToken('M', ['MM', 2], 'Mo', function () {
	        return this.month() + 1;
	    });
	
	    addFormatToken('MMM', 0, 0, function (format) {
	        return this.localeData().monthsShort(this, format);
	    });
	
	    addFormatToken('MMMM', 0, 0, function (format) {
	        return this.localeData().months(this, format);
	    });
	
	    // ALIASES
	
	    addUnitAlias('month', 'M');
	
	    // PRIORITY
	
	    addUnitPriority('month', 8);
	
	    // PARSING
	
	    addRegexToken('M', match1to2);
	    addRegexToken('MM', match1to2, match2);
	    addRegexToken('MMM', function (isStrict, locale) {
	        return locale.monthsShortRegex(isStrict);
	    });
	    addRegexToken('MMMM', function (isStrict, locale) {
	        return locale.monthsRegex(isStrict);
	    });
	
	    addParseToken(['M', 'MM'], function (input, array) {
	        array[MONTH] = toInt(input) - 1;
	    });
	
	    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
	        var month = config._locale.monthsParse(input, token, config._strict);
	        // if we didn't find a month name, mark the date as invalid.
	        if (month != null) {
	            array[MONTH] = month;
	        } else {
	            getParsingFlags(config).invalidMonth = input;
	        }
	    });
	
	    // LOCALES
	
	    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
	            '_'
	        ),
	        defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split(
	            '_'
	        ),
	        MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
	        defaultMonthsShortRegex = matchWord,
	        defaultMonthsRegex = matchWord;
	
	    function localeMonths(m, format) {
	        if (!m) {
	            return isArray(this._months)
	                ? this._months
	                : this._months['standalone'];
	        }
	        return isArray(this._months)
	            ? this._months[m.month()]
	            : this._months[
	                  (this._months.isFormat || MONTHS_IN_FORMAT).test(format)
	                      ? 'format'
	                      : 'standalone'
	              ][m.month()];
	    }
	
	    function localeMonthsShort(m, format) {
	        if (!m) {
	            return isArray(this._monthsShort)
	                ? this._monthsShort
	                : this._monthsShort['standalone'];
	        }
	        return isArray(this._monthsShort)
	            ? this._monthsShort[m.month()]
	            : this._monthsShort[
	                  MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'
	              ][m.month()];
	    }
	
	    function handleStrictParse(monthName, format, strict) {
	        var i,
	            ii,
	            mom,
	            llc = monthName.toLocaleLowerCase();
	        if (!this._monthsParse) {
	            // this is not used
	            this._monthsParse = [];
	            this._longMonthsParse = [];
	            this._shortMonthsParse = [];
	            for (i = 0; i < 12; ++i) {
	                mom = createUTC([2000, i]);
	                this._shortMonthsParse[i] = this.monthsShort(
	                    mom,
	                    ''
	                ).toLocaleLowerCase();
	                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
	            }
	        }
	
	        if (strict) {
	            if (format === 'MMM') {
	                ii = indexOf.call(this._shortMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._longMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        } else {
	            if (format === 'MMM') {
	                ii = indexOf.call(this._shortMonthsParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._longMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._longMonthsParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._shortMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        }
	    }
	
	    function localeMonthsParse(monthName, format, strict) {
	        var i, mom, regex;
	
	        if (this._monthsParseExact) {
	            return handleStrictParse.call(this, monthName, format, strict);
	        }
	
	        if (!this._monthsParse) {
	            this._monthsParse = [];
	            this._longMonthsParse = [];
	            this._shortMonthsParse = [];
	        }
	
	        // TODO: add sorting
	        // Sorting makes sure if one month (or abbr) is a prefix of another
	        // see sorting in computeMonthsParse
	        for (i = 0; i < 12; i++) {
	            // make the regex if we don't have it already
	            mom = createUTC([2000, i]);
	            if (strict && !this._longMonthsParse[i]) {
	                this._longMonthsParse[i] = new RegExp(
	                    '^' + this.months(mom, '').replace('.', '') + '$',
	                    'i'
	                );
	                this._shortMonthsParse[i] = new RegExp(
	                    '^' + this.monthsShort(mom, '').replace('.', '') + '$',
	                    'i'
	                );
	            }
	            if (!strict && !this._monthsParse[i]) {
	                regex =
	                    '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
	                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
	            }
	            // test the regex
	            if (
	                strict &&
	                format === 'MMMM' &&
	                this._longMonthsParse[i].test(monthName)
	            ) {
	                return i;
	            } else if (
	                strict &&
	                format === 'MMM' &&
	                this._shortMonthsParse[i].test(monthName)
	            ) {
	                return i;
	            } else if (!strict && this._monthsParse[i].test(monthName)) {
	                return i;
	            }
	        }
	    }
	
	    // MOMENTS
	
	    function setMonth(mom, value) {
	        var dayOfMonth;
	
	        if (!mom.isValid()) {
	            // No op
	            return mom;
	        }
	
	        if (typeof value === 'string') {
	            if (/^\d+$/.test(value)) {
	                value = toInt(value);
	            } else {
	                value = mom.localeData().monthsParse(value);
	                // TODO: Another silent failure?
	                if (!isNumber(value)) {
	                    return mom;
	                }
	            }
	        }
	
	        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
	        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
	        return mom;
	    }
	
	    function getSetMonth(value) {
	        if (value != null) {
	            setMonth(this, value);
	            hooks.updateOffset(this, true);
	            return this;
	        } else {
	            return get(this, 'Month');
	        }
	    }
	
	    function getDaysInMonth() {
	        return daysInMonth(this.year(), this.month());
	    }
	
	    function monthsShortRegex(isStrict) {
	        if (this._monthsParseExact) {
	            if (!hasOwnProp(this, '_monthsRegex')) {
	                computeMonthsParse.call(this);
	            }
	            if (isStrict) {
	                return this._monthsShortStrictRegex;
	            } else {
	                return this._monthsShortRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_monthsShortRegex')) {
	                this._monthsShortRegex = defaultMonthsShortRegex;
	            }
	            return this._monthsShortStrictRegex && isStrict
	                ? this._monthsShortStrictRegex
	                : this._monthsShortRegex;
	        }
	    }
	
	    function monthsRegex(isStrict) {
	        if (this._monthsParseExact) {
	            if (!hasOwnProp(this, '_monthsRegex')) {
	                computeMonthsParse.call(this);
	            }
	            if (isStrict) {
	                return this._monthsStrictRegex;
	            } else {
	                return this._monthsRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_monthsRegex')) {
	                this._monthsRegex = defaultMonthsRegex;
	            }
	            return this._monthsStrictRegex && isStrict
	                ? this._monthsStrictRegex
	                : this._monthsRegex;
	        }
	    }
	
	    function computeMonthsParse() {
	        function cmpLenRev(a, b) {
	            return b.length - a.length;
	        }
	
	        var shortPieces = [],
	            longPieces = [],
	            mixedPieces = [],
	            i,
	            mom;
	        for (i = 0; i < 12; i++) {
	            // make the regex if we don't have it already
	            mom = createUTC([2000, i]);
	            shortPieces.push(this.monthsShort(mom, ''));
	            longPieces.push(this.months(mom, ''));
	            mixedPieces.push(this.months(mom, ''));
	            mixedPieces.push(this.monthsShort(mom, ''));
	        }
	        // Sorting makes sure if one month (or abbr) is a prefix of another it
	        // will match the longer piece.
	        shortPieces.sort(cmpLenRev);
	        longPieces.sort(cmpLenRev);
	        mixedPieces.sort(cmpLenRev);
	        for (i = 0; i < 12; i++) {
	            shortPieces[i] = regexEscape(shortPieces[i]);
	            longPieces[i] = regexEscape(longPieces[i]);
	        }
	        for (i = 0; i < 24; i++) {
	            mixedPieces[i] = regexEscape(mixedPieces[i]);
	        }
	
	        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	        this._monthsShortRegex = this._monthsRegex;
	        this._monthsStrictRegex = new RegExp(
	            '^(' + longPieces.join('|') + ')',
	            'i'
	        );
	        this._monthsShortStrictRegex = new RegExp(
	            '^(' + shortPieces.join('|') + ')',
	            'i'
	        );
	    }
	
	    // FORMATTING
	
	    addFormatToken('Y', 0, 0, function () {
	        var y = this.year();
	        return y <= 9999 ? zeroFill(y, 4) : '+' + y;
	    });
	
	    addFormatToken(0, ['YY', 2], 0, function () {
	        return this.year() % 100;
	    });
	
	    addFormatToken(0, ['YYYY', 4], 0, 'year');
	    addFormatToken(0, ['YYYYY', 5], 0, 'year');
	    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');
	
	    // ALIASES
	
	    addUnitAlias('year', 'y');
	
	    // PRIORITIES
	
	    addUnitPriority('year', 1);
	
	    // PARSING
	
	    addRegexToken('Y', matchSigned);
	    addRegexToken('YY', match1to2, match2);
	    addRegexToken('YYYY', match1to4, match4);
	    addRegexToken('YYYYY', match1to6, match6);
	    addRegexToken('YYYYYY', match1to6, match6);
	
	    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
	    addParseToken('YYYY', function (input, array) {
	        array[YEAR] =
	            input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
	    });
	    addParseToken('YY', function (input, array) {
	        array[YEAR] = hooks.parseTwoDigitYear(input);
	    });
	    addParseToken('Y', function (input, array) {
	        array[YEAR] = parseInt(input, 10);
	    });
	
	    // HELPERS
	
	    function daysInYear(year) {
	        return isLeapYear(year) ? 366 : 365;
	    }
	
	    // HOOKS
	
	    hooks.parseTwoDigitYear = function (input) {
	        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
	    };
	
	    // MOMENTS
	
	    var getSetYear = makeGetSet('FullYear', true);
	
	    function getIsLeapYear() {
	        return isLeapYear(this.year());
	    }
	
	    function createDate(y, m, d, h, M, s, ms) {
	        // can't just apply() to create a date:
	        // https://stackoverflow.com/q/181348
	        var date;
	        // the date constructor remaps years 0-99 to 1900-1999
	        if (y < 100 && y >= 0) {
	            // preserve leap years using a full 400 year cycle, then reset
	            date = new Date(y + 400, m, d, h, M, s, ms);
	            if (isFinite(date.getFullYear())) {
	                date.setFullYear(y);
	            }
	        } else {
	            date = new Date(y, m, d, h, M, s, ms);
	        }
	
	        return date;
	    }
	
	    function createUTCDate(y) {
	        var date, args;
	        // the Date.UTC function remaps years 0-99 to 1900-1999
	        if (y < 100 && y >= 0) {
	            args = Array.prototype.slice.call(arguments);
	            // preserve leap years using a full 400 year cycle, then reset
	            args[0] = y + 400;
	            date = new Date(Date.UTC.apply(null, args));
	            if (isFinite(date.getUTCFullYear())) {
	                date.setUTCFullYear(y);
	            }
	        } else {
	            date = new Date(Date.UTC.apply(null, arguments));
	        }
	
	        return date;
	    }
	
	    // start-of-first-week - start-of-year
	    function firstWeekOffset(year, dow, doy) {
	        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
	            fwd = 7 + dow - doy,
	            // first-week day local weekday -- which local weekday is fwd
	            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
	
	        return -fwdlw + fwd - 1;
	    }
	
	    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
	    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
	        var localWeekday = (7 + weekday - dow) % 7,
	            weekOffset = firstWeekOffset(year, dow, doy),
	            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
	            resYear,
	            resDayOfYear;
	
	        if (dayOfYear <= 0) {
	            resYear = year - 1;
	            resDayOfYear = daysInYear(resYear) + dayOfYear;
	        } else if (dayOfYear > daysInYear(year)) {
	            resYear = year + 1;
	            resDayOfYear = dayOfYear - daysInYear(year);
	        } else {
	            resYear = year;
	            resDayOfYear = dayOfYear;
	        }
	
	        return {
	            year: resYear,
	            dayOfYear: resDayOfYear,
	        };
	    }
	
	    function weekOfYear(mom, dow, doy) {
	        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
	            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
	            resWeek,
	            resYear;
	
	        if (week < 1) {
	            resYear = mom.year() - 1;
	            resWeek = week + weeksInYear(resYear, dow, doy);
	        } else if (week > weeksInYear(mom.year(), dow, doy)) {
	            resWeek = week - weeksInYear(mom.year(), dow, doy);
	            resYear = mom.year() + 1;
	        } else {
	            resYear = mom.year();
	            resWeek = week;
	        }
	
	        return {
	            week: resWeek,
	            year: resYear,
	        };
	    }
	
	    function weeksInYear(year, dow, doy) {
	        var weekOffset = firstWeekOffset(year, dow, doy),
	            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
	        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
	    }
	
	    // FORMATTING
	
	    addFormatToken('w', ['ww', 2], 'wo', 'week');
	    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');
	
	    // ALIASES
	
	    addUnitAlias('week', 'w');
	    addUnitAlias('isoWeek', 'W');
	
	    // PRIORITIES
	
	    addUnitPriority('week', 5);
	    addUnitPriority('isoWeek', 5);
	
	    // PARSING
	
	    addRegexToken('w', match1to2);
	    addRegexToken('ww', match1to2, match2);
	    addRegexToken('W', match1to2);
	    addRegexToken('WW', match1to2, match2);
	
	    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (
	        input,
	        week,
	        config,
	        token
	    ) {
	        week[token.substr(0, 1)] = toInt(input);
	    });
	
	    // HELPERS
	
	    // LOCALES
	
	    function localeWeek(mom) {
	        return weekOfYear(mom, this._week.dow, this._week.doy).week;
	    }
	
	    var defaultLocaleWeek = {
	        dow: 0, // Sunday is the first day of the week.
	        doy: 6, // The week that contains Jan 6th is the first week of the year.
	    };
	
	    function localeFirstDayOfWeek() {
	        return this._week.dow;
	    }
	
	    function localeFirstDayOfYear() {
	        return this._week.doy;
	    }
	
	    // MOMENTS
	
	    function getSetWeek(input) {
	        var week = this.localeData().week(this);
	        return input == null ? week : this.add((input - week) * 7, 'd');
	    }
	
	    function getSetISOWeek(input) {
	        var week = weekOfYear(this, 1, 4).week;
	        return input == null ? week : this.add((input - week) * 7, 'd');
	    }
	
	    // FORMATTING
	
	    addFormatToken('d', 0, 'do', 'day');
	
	    addFormatToken('dd', 0, 0, function (format) {
	        return this.localeData().weekdaysMin(this, format);
	    });
	
	    addFormatToken('ddd', 0, 0, function (format) {
	        return this.localeData().weekdaysShort(this, format);
	    });
	
	    addFormatToken('dddd', 0, 0, function (format) {
	        return this.localeData().weekdays(this, format);
	    });
	
	    addFormatToken('e', 0, 0, 'weekday');
	    addFormatToken('E', 0, 0, 'isoWeekday');
	
	    // ALIASES
	
	    addUnitAlias('day', 'd');
	    addUnitAlias('weekday', 'e');
	    addUnitAlias('isoWeekday', 'E');
	
	    // PRIORITY
	    addUnitPriority('day', 11);
	    addUnitPriority('weekday', 11);
	    addUnitPriority('isoWeekday', 11);
	
	    // PARSING
	
	    addRegexToken('d', match1to2);
	    addRegexToken('e', match1to2);
	    addRegexToken('E', match1to2);
	    addRegexToken('dd', function (isStrict, locale) {
	        return locale.weekdaysMinRegex(isStrict);
	    });
	    addRegexToken('ddd', function (isStrict, locale) {
	        return locale.weekdaysShortRegex(isStrict);
	    });
	    addRegexToken('dddd', function (isStrict, locale) {
	        return locale.weekdaysRegex(isStrict);
	    });
	
	    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
	        var weekday = config._locale.weekdaysParse(input, token, config._strict);
	        // if we didn't get a weekday name, mark the date as invalid
	        if (weekday != null) {
	            week.d = weekday;
	        } else {
	            getParsingFlags(config).invalidWeekday = input;
	        }
	    });
	
	    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
	        week[token] = toInt(input);
	    });
	
	    // HELPERS
	
	    function parseWeekday(input, locale) {
	        if (typeof input !== 'string') {
	            return input;
	        }
	
	        if (!isNaN(input)) {
	            return parseInt(input, 10);
	        }
	
	        input = locale.weekdaysParse(input);
	        if (typeof input === 'number') {
	            return input;
	        }
	
	        return null;
	    }
	
	    function parseIsoWeekday(input, locale) {
	        if (typeof input === 'string') {
	            return locale.weekdaysParse(input) % 7 || 7;
	        }
	        return isNaN(input) ? null : input;
	    }
	
	    // LOCALES
	    function shiftWeekdays(ws, n) {
	        return ws.slice(n, 7).concat(ws.slice(0, n));
	    }
	
	    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
	            '_'
	        ),
	        defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        defaultWeekdaysRegex = matchWord,
	        defaultWeekdaysShortRegex = matchWord,
	        defaultWeekdaysMinRegex = matchWord;
	
	    function localeWeekdays(m, format) {
	        var weekdays = isArray(this._weekdays)
	            ? this._weekdays
	            : this._weekdays[
	                  m && m !== true && this._weekdays.isFormat.test(format)
	                      ? 'format'
	                      : 'standalone'
	              ];
	        return m === true
	            ? shiftWeekdays(weekdays, this._week.dow)
	            : m
	            ? weekdays[m.day()]
	            : weekdays;
	    }
	
	    function localeWeekdaysShort(m) {
	        return m === true
	            ? shiftWeekdays(this._weekdaysShort, this._week.dow)
	            : m
	            ? this._weekdaysShort[m.day()]
	            : this._weekdaysShort;
	    }
	
	    function localeWeekdaysMin(m) {
	        return m === true
	            ? shiftWeekdays(this._weekdaysMin, this._week.dow)
	            : m
	            ? this._weekdaysMin[m.day()]
	            : this._weekdaysMin;
	    }
	
	    function handleStrictParse$1(weekdayName, format, strict) {
	        var i,
	            ii,
	            mom,
	            llc = weekdayName.toLocaleLowerCase();
	        if (!this._weekdaysParse) {
	            this._weekdaysParse = [];
	            this._shortWeekdaysParse = [];
	            this._minWeekdaysParse = [];
	
	            for (i = 0; i < 7; ++i) {
	                mom = createUTC([2000, 1]).day(i);
	                this._minWeekdaysParse[i] = this.weekdaysMin(
	                    mom,
	                    ''
	                ).toLocaleLowerCase();
	                this._shortWeekdaysParse[i] = this.weekdaysShort(
	                    mom,
	                    ''
	                ).toLocaleLowerCase();
	                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
	            }
	        }
	
	        if (strict) {
	            if (format === 'dddd') {
	                ii = indexOf.call(this._weekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else if (format === 'ddd') {
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        } else {
	            if (format === 'dddd') {
	                ii = indexOf.call(this._weekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else if (format === 'ddd') {
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._weekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._weekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        }
	    }
	
	    function localeWeekdaysParse(weekdayName, format, strict) {
	        var i, mom, regex;
	
	        if (this._weekdaysParseExact) {
	            return handleStrictParse$1.call(this, weekdayName, format, strict);
	        }
	
	        if (!this._weekdaysParse) {
	            this._weekdaysParse = [];
	            this._minWeekdaysParse = [];
	            this._shortWeekdaysParse = [];
	            this._fullWeekdaysParse = [];
	        }
	
	        for (i = 0; i < 7; i++) {
	            // make the regex if we don't have it already
	
	            mom = createUTC([2000, 1]).day(i);
	            if (strict && !this._fullWeekdaysParse[i]) {
	                this._fullWeekdaysParse[i] = new RegExp(
	                    '^' + this.weekdays(mom, '').replace('.', '\\.?') + '$',
	                    'i'
	                );
	                this._shortWeekdaysParse[i] = new RegExp(
	                    '^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$',
	                    'i'
	                );
	                this._minWeekdaysParse[i] = new RegExp(
	                    '^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$',
	                    'i'
	                );
	            }
	            if (!this._weekdaysParse[i]) {
	                regex =
	                    '^' +
	                    this.weekdays(mom, '') +
	                    '|^' +
	                    this.weekdaysShort(mom, '') +
	                    '|^' +
	                    this.weekdaysMin(mom, '');
	                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
	            }
	            // test the regex
	            if (
	                strict &&
	                format === 'dddd' &&
	                this._fullWeekdaysParse[i].test(weekdayName)
	            ) {
	                return i;
	            } else if (
	                strict &&
	                format === 'ddd' &&
	                this._shortWeekdaysParse[i].test(weekdayName)
	            ) {
	                return i;
	            } else if (
	                strict &&
	                format === 'dd' &&
	                this._minWeekdaysParse[i].test(weekdayName)
	            ) {
	                return i;
	            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
	                return i;
	            }
	        }
	    }
	
	    // MOMENTS
	
	    function getSetDayOfWeek(input) {
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
	        if (input != null) {
	            input = parseWeekday(input, this.localeData());
	            return this.add(input - day, 'd');
	        } else {
	            return day;
	        }
	    }
	
	    function getSetLocaleDayOfWeek(input) {
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
	        return input == null ? weekday : this.add(input - weekday, 'd');
	    }
	
	    function getSetISODayOfWeek(input) {
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	
	        // behaves the same as moment#day except
	        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
	        // as a setter, sunday should belong to the previous week.
	
	        if (input != null) {
	            var weekday = parseIsoWeekday(input, this.localeData());
	            return this.day(this.day() % 7 ? weekday : weekday - 7);
	        } else {
	            return this.day() || 7;
	        }
	    }
	
	    function weekdaysRegex(isStrict) {
	        if (this._weekdaysParseExact) {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                computeWeekdaysParse.call(this);
	            }
	            if (isStrict) {
	                return this._weekdaysStrictRegex;
	            } else {
	                return this._weekdaysRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                this._weekdaysRegex = defaultWeekdaysRegex;
	            }
	            return this._weekdaysStrictRegex && isStrict
	                ? this._weekdaysStrictRegex
	                : this._weekdaysRegex;
	        }
	    }
	
	    function weekdaysShortRegex(isStrict) {
	        if (this._weekdaysParseExact) {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                computeWeekdaysParse.call(this);
	            }
	            if (isStrict) {
	                return this._weekdaysShortStrictRegex;
	            } else {
	                return this._weekdaysShortRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
	                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
	            }
	            return this._weekdaysShortStrictRegex && isStrict
	                ? this._weekdaysShortStrictRegex
	                : this._weekdaysShortRegex;
	        }
	    }
	
	    function weekdaysMinRegex(isStrict) {
	        if (this._weekdaysParseExact) {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                computeWeekdaysParse.call(this);
	            }
	            if (isStrict) {
	                return this._weekdaysMinStrictRegex;
	            } else {
	                return this._weekdaysMinRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
	                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
	            }
	            return this._weekdaysMinStrictRegex && isStrict
	                ? this._weekdaysMinStrictRegex
	                : this._weekdaysMinRegex;
	        }
	    }
	
	    function computeWeekdaysParse() {
	        function cmpLenRev(a, b) {
	            return b.length - a.length;
	        }
	
	        var minPieces = [],
	            shortPieces = [],
	            longPieces = [],
	            mixedPieces = [],
	            i,
	            mom,
	            minp,
	            shortp,
	            longp;
	        for (i = 0; i < 7; i++) {
	            // make the regex if we don't have it already
	            mom = createUTC([2000, 1]).day(i);
	            minp = regexEscape(this.weekdaysMin(mom, ''));
	            shortp = regexEscape(this.weekdaysShort(mom, ''));
	            longp = regexEscape(this.weekdays(mom, ''));
	            minPieces.push(minp);
	            shortPieces.push(shortp);
	            longPieces.push(longp);
	            mixedPieces.push(minp);
	            mixedPieces.push(shortp);
	            mixedPieces.push(longp);
	        }
	        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
	        // will match the longer piece.
	        minPieces.sort(cmpLenRev);
	        shortPieces.sort(cmpLenRev);
	        longPieces.sort(cmpLenRev);
	        mixedPieces.sort(cmpLenRev);
	
	        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	        this._weekdaysShortRegex = this._weekdaysRegex;
	        this._weekdaysMinRegex = this._weekdaysRegex;
	
	        this._weekdaysStrictRegex = new RegExp(
	            '^(' + longPieces.join('|') + ')',
	            'i'
	        );
	        this._weekdaysShortStrictRegex = new RegExp(
	            '^(' + shortPieces.join('|') + ')',
	            'i'
	        );
	        this._weekdaysMinStrictRegex = new RegExp(
	            '^(' + minPieces.join('|') + ')',
	            'i'
	        );
	    }
	
	    // FORMATTING
	
	    function hFormat() {
	        return this.hours() % 12 || 12;
	    }
	
	    function kFormat() {
	        return this.hours() || 24;
	    }
	
	    addFormatToken('H', ['HH', 2], 0, 'hour');
	    addFormatToken('h', ['hh', 2], 0, hFormat);
	    addFormatToken('k', ['kk', 2], 0, kFormat);
	
	    addFormatToken('hmm', 0, 0, function () {
	        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
	    });
	
	    addFormatToken('hmmss', 0, 0, function () {
	        return (
	            '' +
	            hFormat.apply(this) +
	            zeroFill(this.minutes(), 2) +
	            zeroFill(this.seconds(), 2)
	        );
	    });
	
	    addFormatToken('Hmm', 0, 0, function () {
	        return '' + this.hours() + zeroFill(this.minutes(), 2);
	    });
	
	    addFormatToken('Hmmss', 0, 0, function () {
	        return (
	            '' +
	            this.hours() +
	            zeroFill(this.minutes(), 2) +
	            zeroFill(this.seconds(), 2)
	        );
	    });
	
	    function meridiem(token, lowercase) {
	        addFormatToken(token, 0, 0, function () {
	            return this.localeData().meridiem(
	                this.hours(),
	                this.minutes(),
	                lowercase
	            );
	        });
	    }
	
	    meridiem('a', true);
	    meridiem('A', false);
	
	    // ALIASES
	
	    addUnitAlias('hour', 'h');
	
	    // PRIORITY
	    addUnitPriority('hour', 13);
	
	    // PARSING
	
	    function matchMeridiem(isStrict, locale) {
	        return locale._meridiemParse;
	    }
	
	    addRegexToken('a', matchMeridiem);
	    addRegexToken('A', matchMeridiem);
	    addRegexToken('H', match1to2);
	    addRegexToken('h', match1to2);
	    addRegexToken('k', match1to2);
	    addRegexToken('HH', match1to2, match2);
	    addRegexToken('hh', match1to2, match2);
	    addRegexToken('kk', match1to2, match2);
	
	    addRegexToken('hmm', match3to4);
	    addRegexToken('hmmss', match5to6);
	    addRegexToken('Hmm', match3to4);
	    addRegexToken('Hmmss', match5to6);
	
	    addParseToken(['H', 'HH'], HOUR);
	    addParseToken(['k', 'kk'], function (input, array, config) {
	        var kInput = toInt(input);
	        array[HOUR] = kInput === 24 ? 0 : kInput;
	    });
	    addParseToken(['a', 'A'], function (input, array, config) {
	        config._isPm = config._locale.isPM(input);
	        config._meridiem = input;
	    });
	    addParseToken(['h', 'hh'], function (input, array, config) {
	        array[HOUR] = toInt(input);
	        getParsingFlags(config).bigHour = true;
	    });
	    addParseToken('hmm', function (input, array, config) {
	        var pos = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos));
	        array[MINUTE] = toInt(input.substr(pos));
	        getParsingFlags(config).bigHour = true;
	    });
	    addParseToken('hmmss', function (input, array, config) {
	        var pos1 = input.length - 4,
	            pos2 = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos1));
	        array[MINUTE] = toInt(input.substr(pos1, 2));
	        array[SECOND] = toInt(input.substr(pos2));
	        getParsingFlags(config).bigHour = true;
	    });
	    addParseToken('Hmm', function (input, array, config) {
	        var pos = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos));
	        array[MINUTE] = toInt(input.substr(pos));
	    });
	    addParseToken('Hmmss', function (input, array, config) {
	        var pos1 = input.length - 4,
	            pos2 = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos1));
	        array[MINUTE] = toInt(input.substr(pos1, 2));
	        array[SECOND] = toInt(input.substr(pos2));
	    });
	
	    // LOCALES
	
	    function localeIsPM(input) {
	        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
	        // Using charAt should be more compatible.
	        return (input + '').toLowerCase().charAt(0) === 'p';
	    }
	
	    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
	        // Setting the hour should keep the time, because the user explicitly
	        // specified which hour they want. So trying to maintain the same hour (in
	        // a new timezone) makes sense. Adding/subtracting hours does not follow
	        // this rule.
	        getSetHour = makeGetSet('Hours', true);
	
	    function localeMeridiem(hours, minutes, isLower) {
	        if (hours > 11) {
	            return isLower ? 'pm' : 'PM';
	        } else {
	            return isLower ? 'am' : 'AM';
	        }
	    }
	
	    var baseConfig = {
	        calendar: defaultCalendar,
	        longDateFormat: defaultLongDateFormat,
	        invalidDate: defaultInvalidDate,
	        ordinal: defaultOrdinal,
	        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
	        relativeTime: defaultRelativeTime,
	
	        months: defaultLocaleMonths,
	        monthsShort: defaultLocaleMonthsShort,
	
	        week: defaultLocaleWeek,
	
	        weekdays: defaultLocaleWeekdays,
	        weekdaysMin: defaultLocaleWeekdaysMin,
	        weekdaysShort: defaultLocaleWeekdaysShort,
	
	        meridiemParse: defaultLocaleMeridiemParse,
	    };
	
	    // internal storage for locale config files
	    var locales = {},
	        localeFamilies = {},
	        globalLocale;
	
	    function commonPrefix(arr1, arr2) {
	        var i,
	            minl = Math.min(arr1.length, arr2.length);
	        for (i = 0; i < minl; i += 1) {
	            if (arr1[i] !== arr2[i]) {
	                return i;
	            }
	        }
	        return minl;
	    }
	
	    function normalizeLocale(key) {
	        return key ? key.toLowerCase().replace('_', '-') : key;
	    }
	
	    // pick the locale from the array
	    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
	    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
	    function chooseLocale(names) {
	        var i = 0,
	            j,
	            next,
	            locale,
	            split;
	
	        while (i < names.length) {
	            split = normalizeLocale(names[i]).split('-');
	            j = split.length;
	            next = normalizeLocale(names[i + 1]);
	            next = next ? next.split('-') : null;
	            while (j > 0) {
	                locale = loadLocale(split.slice(0, j).join('-'));
	                if (locale) {
	                    return locale;
	                }
	                if (
	                    next &&
	                    next.length >= j &&
	                    commonPrefix(split, next) >= j - 1
	                ) {
	                    //the next array item is better than a shallower substring of this one
	                    break;
	                }
	                j--;
	            }
	            i++;
	        }
	        return globalLocale;
	    }
	
	    function loadLocale(name) {
	        var oldLocale = null,
	            aliasedRequire;
	        // TODO: Find a better way to register and load all the locales in Node
	        if (
	            locales[name] === undefined &&
	            typeof module !== 'undefined' &&
	            module &&
	            module.exports
	        ) {
	            try {
	                oldLocale = globalLocale._abbr;
	                aliasedRequire = require;
	                __webpack_require__(43)("./" + name);
	                getSetGlobalLocale(oldLocale);
	            } catch (e) {
	                // mark as not found to avoid repeating expensive file require call causing high CPU
	                // when trying to find en-US, en_US, en-us for every format call
	                locales[name] = null; // null means not found
	            }
	        }
	        return locales[name];
	    }
	
	    // This function will load locale and then set the global locale.  If
	    // no arguments are passed in, it will simply return the current global
	    // locale key.
	    function getSetGlobalLocale(key, values) {
	        var data;
	        if (key) {
	            if (isUndefined(values)) {
	                data = getLocale(key);
	            } else {
	                data = defineLocale(key, values);
	            }
	
	            if (data) {
	                // moment.duration._locale = moment._locale = data;
	                globalLocale = data;
	            } else {
	                if (typeof console !== 'undefined' && console.warn) {
	                    //warn user if arguments are passed but the locale could not be set
	                    console.warn(
	                        'Locale ' + key + ' not found. Did you forget to load it?'
	                    );
	                }
	            }
	        }
	
	        return globalLocale._abbr;
	    }
	
	    function defineLocale(name, config) {
	        if (config !== null) {
	            var locale,
	                parentConfig = baseConfig;
	            config.abbr = name;
	            if (locales[name] != null) {
	                deprecateSimple(
	                    'defineLocaleOverride',
	                    'use moment.updateLocale(localeName, config) to change ' +
	                        'an existing locale. moment.defineLocale(localeName, ' +
	                        'config) should only be used for creating a new locale ' +
	                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.'
	                );
	                parentConfig = locales[name]._config;
	            } else if (config.parentLocale != null) {
	                if (locales[config.parentLocale] != null) {
	                    parentConfig = locales[config.parentLocale]._config;
	                } else {
	                    locale = loadLocale(config.parentLocale);
	                    if (locale != null) {
	                        parentConfig = locale._config;
	                    } else {
	                        if (!localeFamilies[config.parentLocale]) {
	                            localeFamilies[config.parentLocale] = [];
	                        }
	                        localeFamilies[config.parentLocale].push({
	                            name: name,
	                            config: config,
	                        });
	                        return null;
	                    }
	                }
	            }
	            locales[name] = new Locale(mergeConfigs(parentConfig, config));
	
	            if (localeFamilies[name]) {
	                localeFamilies[name].forEach(function (x) {
	                    defineLocale(x.name, x.config);
	                });
	            }
	
	            // backwards compat for now: also set the locale
	            // make sure we set the locale AFTER all child locales have been
	            // created, so we won't end up with the child locale set.
	            getSetGlobalLocale(name);
	
	            return locales[name];
	        } else {
	            // useful for testing
	            delete locales[name];
	            return null;
	        }
	    }
	
	    function updateLocale(name, config) {
	        if (config != null) {
	            var locale,
	                tmpLocale,
	                parentConfig = baseConfig;
	
	            if (locales[name] != null && locales[name].parentLocale != null) {
	                // Update existing child locale in-place to avoid memory-leaks
	                locales[name].set(mergeConfigs(locales[name]._config, config));
	            } else {
	                // MERGE
	                tmpLocale = loadLocale(name);
	                if (tmpLocale != null) {
	                    parentConfig = tmpLocale._config;
	                }
	                config = mergeConfigs(parentConfig, config);
	                if (tmpLocale == null) {
	                    // updateLocale is called for creating a new locale
	                    // Set abbr so it will have a name (getters return
	                    // undefined otherwise).
	                    config.abbr = name;
	                }
	                locale = new Locale(config);
	                locale.parentLocale = locales[name];
	                locales[name] = locale;
	            }
	
	            // backwards compat for now: also set the locale
	            getSetGlobalLocale(name);
	        } else {
	            // pass null for config to unupdate, useful for tests
	            if (locales[name] != null) {
	                if (locales[name].parentLocale != null) {
	                    locales[name] = locales[name].parentLocale;
	                    if (name === getSetGlobalLocale()) {
	                        getSetGlobalLocale(name);
	                    }
	                } else if (locales[name] != null) {
	                    delete locales[name];
	                }
	            }
	        }
	        return locales[name];
	    }
	
	    // returns locale data
	    function getLocale(key) {
	        var locale;
	
	        if (key && key._locale && key._locale._abbr) {
	            key = key._locale._abbr;
	        }
	
	        if (!key) {
	            return globalLocale;
	        }
	
	        if (!isArray(key)) {
	            //short-circuit everything else
	            locale = loadLocale(key);
	            if (locale) {
	                return locale;
	            }
	            key = [key];
	        }
	
	        return chooseLocale(key);
	    }
	
	    function listLocales() {
	        return keys(locales);
	    }
	
	    function checkOverflow(m) {
	        var overflow,
	            a = m._a;
	
	        if (a && getParsingFlags(m).overflow === -2) {
	            overflow =
	                a[MONTH] < 0 || a[MONTH] > 11
	                    ? MONTH
	                    : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])
	                    ? DATE
	                    : a[HOUR] < 0 ||
	                      a[HOUR] > 24 ||
	                      (a[HOUR] === 24 &&
	                          (a[MINUTE] !== 0 ||
	                              a[SECOND] !== 0 ||
	                              a[MILLISECOND] !== 0))
	                    ? HOUR
	                    : a[MINUTE] < 0 || a[MINUTE] > 59
	                    ? MINUTE
	                    : a[SECOND] < 0 || a[SECOND] > 59
	                    ? SECOND
	                    : a[MILLISECOND] < 0 || a[MILLISECOND] > 999
	                    ? MILLISECOND
	                    : -1;
	
	            if (
	                getParsingFlags(m)._overflowDayOfYear &&
	                (overflow < YEAR || overflow > DATE)
	            ) {
	                overflow = DATE;
	            }
	            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
	                overflow = WEEK;
	            }
	            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
	                overflow = WEEKDAY;
	            }
	
	            getParsingFlags(m).overflow = overflow;
	        }
	
	        return m;
	    }
	
	    // iso 8601 regex
	    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
	    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
	        basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
	        tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
	        isoDates = [
	            ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
	            ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
	            ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
	            ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
	            ['YYYY-DDD', /\d{4}-\d{3}/],
	            ['YYYY-MM', /\d{4}-\d\d/, false],
	            ['YYYYYYMMDD', /[+-]\d{10}/],
	            ['YYYYMMDD', /\d{8}/],
	            ['GGGG[W]WWE', /\d{4}W\d{3}/],
	            ['GGGG[W]WW', /\d{4}W\d{2}/, false],
	            ['YYYYDDD', /\d{7}/],
	            ['YYYYMM', /\d{6}/, false],
	            ['YYYY', /\d{4}/, false],
	        ],
	        // iso time formats and regexes
	        isoTimes = [
	            ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
	            ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
	            ['HH:mm:ss', /\d\d:\d\d:\d\d/],
	            ['HH:mm', /\d\d:\d\d/],
	            ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
	            ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
	            ['HHmmss', /\d\d\d\d\d\d/],
	            ['HHmm', /\d\d\d\d/],
	            ['HH', /\d\d/],
	        ],
	        aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
	        // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
	        rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
	        obsOffsets = {
	            UT: 0,
	            GMT: 0,
	            EDT: -4 * 60,
	            EST: -5 * 60,
	            CDT: -5 * 60,
	            CST: -6 * 60,
	            MDT: -6 * 60,
	            MST: -7 * 60,
	            PDT: -7 * 60,
	            PST: -8 * 60,
	        };
	
	    // date from iso format
	    function configFromISO(config) {
	        var i,
	            l,
	            string = config._i,
	            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
	            allowTime,
	            dateFormat,
	            timeFormat,
	            tzFormat;
	
	        if (match) {
	            getParsingFlags(config).iso = true;
	
	            for (i = 0, l = isoDates.length; i < l; i++) {
	                if (isoDates[i][1].exec(match[1])) {
	                    dateFormat = isoDates[i][0];
	                    allowTime = isoDates[i][2] !== false;
	                    break;
	                }
	            }
	            if (dateFormat == null) {
	                config._isValid = false;
	                return;
	            }
	            if (match[3]) {
	                for (i = 0, l = isoTimes.length; i < l; i++) {
	                    if (isoTimes[i][1].exec(match[3])) {
	                        // match[2] should be 'T' or space
	                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
	                        break;
	                    }
	                }
	                if (timeFormat == null) {
	                    config._isValid = false;
	                    return;
	                }
	            }
	            if (!allowTime && timeFormat != null) {
	                config._isValid = false;
	                return;
	            }
	            if (match[4]) {
	                if (tzRegex.exec(match[4])) {
	                    tzFormat = 'Z';
	                } else {
	                    config._isValid = false;
	                    return;
	                }
	            }
	            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
	            configFromStringAndFormat(config);
	        } else {
	            config._isValid = false;
	        }
	    }
	
	    function extractFromRFC2822Strings(
	        yearStr,
	        monthStr,
	        dayStr,
	        hourStr,
	        minuteStr,
	        secondStr
	    ) {
	        var result = [
	            untruncateYear(yearStr),
	            defaultLocaleMonthsShort.indexOf(monthStr),
	            parseInt(dayStr, 10),
	            parseInt(hourStr, 10),
	            parseInt(minuteStr, 10),
	        ];
	
	        if (secondStr) {
	            result.push(parseInt(secondStr, 10));
	        }
	
	        return result;
	    }
	
	    function untruncateYear(yearStr) {
	        var year = parseInt(yearStr, 10);
	        if (year <= 49) {
	            return 2000 + year;
	        } else if (year <= 999) {
	            return 1900 + year;
	        }
	        return year;
	    }
	
	    function preprocessRFC2822(s) {
	        // Remove comments and folding whitespace and replace multiple-spaces with a single space
	        return s
	            .replace(/\([^)]*\)|[\n\t]/g, ' ')
	            .replace(/(\s\s+)/g, ' ')
	            .replace(/^\s\s*/, '')
	            .replace(/\s\s*$/, '');
	    }
	
	    function checkWeekday(weekdayStr, parsedInput, config) {
	        if (weekdayStr) {
	            // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
	            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
	                weekdayActual = new Date(
	                    parsedInput[0],
	                    parsedInput[1],
	                    parsedInput[2]
	                ).getDay();
	            if (weekdayProvided !== weekdayActual) {
	                getParsingFlags(config).weekdayMismatch = true;
	                config._isValid = false;
	                return false;
	            }
	        }
	        return true;
	    }
	
	    function calculateOffset(obsOffset, militaryOffset, numOffset) {
	        if (obsOffset) {
	            return obsOffsets[obsOffset];
	        } else if (militaryOffset) {
	            // the only allowed military tz is Z
	            return 0;
	        } else {
	            var hm = parseInt(numOffset, 10),
	                m = hm % 100,
	                h = (hm - m) / 100;
	            return h * 60 + m;
	        }
	    }
	
	    // date and time from ref 2822 format
	    function configFromRFC2822(config) {
	        var match = rfc2822.exec(preprocessRFC2822(config._i)),
	            parsedArray;
	        if (match) {
	            parsedArray = extractFromRFC2822Strings(
	                match[4],
	                match[3],
	                match[2],
	                match[5],
	                match[6],
	                match[7]
	            );
	            if (!checkWeekday(match[1], parsedArray, config)) {
	                return;
	            }
	
	            config._a = parsedArray;
	            config._tzm = calculateOffset(match[8], match[9], match[10]);
	
	            config._d = createUTCDate.apply(null, config._a);
	            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
	
	            getParsingFlags(config).rfc2822 = true;
	        } else {
	            config._isValid = false;
	        }
	    }
	
	    // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
	    function configFromString(config) {
	        var matched = aspNetJsonRegex.exec(config._i);
	        if (matched !== null) {
	            config._d = new Date(+matched[1]);
	            return;
	        }
	
	        configFromISO(config);
	        if (config._isValid === false) {
	            delete config._isValid;
	        } else {
	            return;
	        }
	
	        configFromRFC2822(config);
	        if (config._isValid === false) {
	            delete config._isValid;
	        } else {
	            return;
	        }
	
	        if (config._strict) {
	            config._isValid = false;
	        } else {
	            // Final attempt, use Input Fallback
	            hooks.createFromInputFallback(config);
	        }
	    }
	
	    hooks.createFromInputFallback = deprecate(
	        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
	            'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
	            'discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.',
	        function (config) {
	            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
	        }
	    );
	
	    // Pick the first defined of two or three arguments.
	    function defaults(a, b, c) {
	        if (a != null) {
	            return a;
	        }
	        if (b != null) {
	            return b;
	        }
	        return c;
	    }
	
	    function currentDateArray(config) {
	        // hooks is actually the exported moment object
	        var nowValue = new Date(hooks.now());
	        if (config._useUTC) {
	            return [
	                nowValue.getUTCFullYear(),
	                nowValue.getUTCMonth(),
	                nowValue.getUTCDate(),
	            ];
	        }
	        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
	    }
	
	    // convert an array to a date.
	    // the array should mirror the parameters below
	    // note: all values past the year are optional and will default to the lowest possible value.
	    // [year, month, day , hour, minute, second, millisecond]
	    function configFromArray(config) {
	        var i,
	            date,
	            input = [],
	            currentDate,
	            expectedWeekday,
	            yearToUse;
	
	        if (config._d) {
	            return;
	        }
	
	        currentDate = currentDateArray(config);
	
	        //compute day of the year from weeks and weekdays
	        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
	            dayOfYearFromWeekInfo(config);
	        }
	
	        //if the day of the year is set, figure out what it is
	        if (config._dayOfYear != null) {
	            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
	
	            if (
	                config._dayOfYear > daysInYear(yearToUse) ||
	                config._dayOfYear === 0
	            ) {
	                getParsingFlags(config)._overflowDayOfYear = true;
	            }
	
	            date = createUTCDate(yearToUse, 0, config._dayOfYear);
	            config._a[MONTH] = date.getUTCMonth();
	            config._a[DATE] = date.getUTCDate();
	        }
	
	        // Default to current date.
	        // * if no year, month, day of month are given, default to today
	        // * if day of month is given, default month and year
	        // * if month is given, default only year
	        // * if year is given, don't default anything
	        for (i = 0; i < 3 && config._a[i] == null; ++i) {
	            config._a[i] = input[i] = currentDate[i];
	        }
	
	        // Zero out whatever was not defaulted, including time
	        for (; i < 7; i++) {
	            config._a[i] = input[i] =
	                config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];
	        }
	
	        // Check for 24:00:00.000
	        if (
	            config._a[HOUR] === 24 &&
	            config._a[MINUTE] === 0 &&
	            config._a[SECOND] === 0 &&
	            config._a[MILLISECOND] === 0
	        ) {
	            config._nextDay = true;
	            config._a[HOUR] = 0;
	        }
	
	        config._d = (config._useUTC ? createUTCDate : createDate).apply(
	            null,
	            input
	        );
	        expectedWeekday = config._useUTC
	            ? config._d.getUTCDay()
	            : config._d.getDay();
	
	        // Apply timezone offset from input. The actual utcOffset can be changed
	        // with parseZone.
	        if (config._tzm != null) {
	            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
	        }
	
	        if (config._nextDay) {
	            config._a[HOUR] = 24;
	        }
	
	        // check for mismatching day of week
	        if (
	            config._w &&
	            typeof config._w.d !== 'undefined' &&
	            config._w.d !== expectedWeekday
	        ) {
	            getParsingFlags(config).weekdayMismatch = true;
	        }
	    }
	
	    function dayOfYearFromWeekInfo(config) {
	        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
	
	        w = config._w;
	        if (w.GG != null || w.W != null || w.E != null) {
	            dow = 1;
	            doy = 4;
	
	            // TODO: We need to take the current isoWeekYear, but that depends on
	            // how we interpret now (local, utc, fixed offset). So create
	            // a now version of current config (take local/utc/offset flags, and
	            // create now).
	            weekYear = defaults(
	                w.GG,
	                config._a[YEAR],
	                weekOfYear(createLocal(), 1, 4).year
	            );
	            week = defaults(w.W, 1);
	            weekday = defaults(w.E, 1);
	            if (weekday < 1 || weekday > 7) {
	                weekdayOverflow = true;
	            }
	        } else {
	            dow = config._locale._week.dow;
	            doy = config._locale._week.doy;
	
	            curWeek = weekOfYear(createLocal(), dow, doy);
	
	            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
	
	            // Default to current week.
	            week = defaults(w.w, curWeek.week);
	
	            if (w.d != null) {
	                // weekday -- low day numbers are considered next week
	                weekday = w.d;
	                if (weekday < 0 || weekday > 6) {
	                    weekdayOverflow = true;
	                }
	            } else if (w.e != null) {
	                // local weekday -- counting starts from beginning of week
	                weekday = w.e + dow;
	                if (w.e < 0 || w.e > 6) {
	                    weekdayOverflow = true;
	                }
	            } else {
	                // default to beginning of week
	                weekday = dow;
	            }
	        }
	        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
	            getParsingFlags(config)._overflowWeeks = true;
	        } else if (weekdayOverflow != null) {
	            getParsingFlags(config)._overflowWeekday = true;
	        } else {
	            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
	            config._a[YEAR] = temp.year;
	            config._dayOfYear = temp.dayOfYear;
	        }
	    }
	
	    // constant that refers to the ISO standard
	    hooks.ISO_8601 = function () {};
	
	    // constant that refers to the RFC 2822 form
	    hooks.RFC_2822 = function () {};
	
	    // date from string and format string
	    function configFromStringAndFormat(config) {
	        // TODO: Move this to another part of the creation flow to prevent circular deps
	        if (config._f === hooks.ISO_8601) {
	            configFromISO(config);
	            return;
	        }
	        if (config._f === hooks.RFC_2822) {
	            configFromRFC2822(config);
	            return;
	        }
	        config._a = [];
	        getParsingFlags(config).empty = true;
	
	        // This array is used to make a Date, either with `new Date` or `Date.UTC`
	        var string = '' + config._i,
	            i,
	            parsedInput,
	            tokens,
	            token,
	            skipped,
	            stringLength = string.length,
	            totalParsedInputLength = 0,
	            era;
	
	        tokens =
	            expandFormat(config._f, config._locale).match(formattingTokens) || [];
	
	        for (i = 0; i < tokens.length; i++) {
	            token = tokens[i];
	            parsedInput = (string.match(getParseRegexForToken(token, config)) ||
	                [])[0];
	            if (parsedInput) {
	                skipped = string.substr(0, string.indexOf(parsedInput));
	                if (skipped.length > 0) {
	                    getParsingFlags(config).unusedInput.push(skipped);
	                }
	                string = string.slice(
	                    string.indexOf(parsedInput) + parsedInput.length
	                );
	                totalParsedInputLength += parsedInput.length;
	            }
	            // don't parse if it's not a known token
	            if (formatTokenFunctions[token]) {
	                if (parsedInput) {
	                    getParsingFlags(config).empty = false;
	                } else {
	                    getParsingFlags(config).unusedTokens.push(token);
	                }
	                addTimeToArrayFromToken(token, parsedInput, config);
	            } else if (config._strict && !parsedInput) {
	                getParsingFlags(config).unusedTokens.push(token);
	            }
	        }
	
	        // add remaining unparsed input length to the string
	        getParsingFlags(config).charsLeftOver =
	            stringLength - totalParsedInputLength;
	        if (string.length > 0) {
	            getParsingFlags(config).unusedInput.push(string);
	        }
	
	        // clear _12h flag if hour is <= 12
	        if (
	            config._a[HOUR] <= 12 &&
	            getParsingFlags(config).bigHour === true &&
	            config._a[HOUR] > 0
	        ) {
	            getParsingFlags(config).bigHour = undefined;
	        }
	
	        getParsingFlags(config).parsedDateParts = config._a.slice(0);
	        getParsingFlags(config).meridiem = config._meridiem;
	        // handle meridiem
	        config._a[HOUR] = meridiemFixWrap(
	            config._locale,
	            config._a[HOUR],
	            config._meridiem
	        );
	
	        // handle era
	        era = getParsingFlags(config).era;
	        if (era !== null) {
	            config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
	        }
	
	        configFromArray(config);
	        checkOverflow(config);
	    }
	
	    function meridiemFixWrap(locale, hour, meridiem) {
	        var isPm;
	
	        if (meridiem == null) {
	            // nothing to do
	            return hour;
	        }
	        if (locale.meridiemHour != null) {
	            return locale.meridiemHour(hour, meridiem);
	        } else if (locale.isPM != null) {
	            // Fallback
	            isPm = locale.isPM(meridiem);
	            if (isPm && hour < 12) {
	                hour += 12;
	            }
	            if (!isPm && hour === 12) {
	                hour = 0;
	            }
	            return hour;
	        } else {
	            // this is not supposed to happen
	            return hour;
	        }
	    }
	
	    // date from string and array of format strings
	    function configFromStringAndArray(config) {
	        var tempConfig,
	            bestMoment,
	            scoreToBeat,
	            i,
	            currentScore,
	            validFormatFound,
	            bestFormatIsValid = false;
	
	        if (config._f.length === 0) {
	            getParsingFlags(config).invalidFormat = true;
	            config._d = new Date(NaN);
	            return;
	        }
	
	        for (i = 0; i < config._f.length; i++) {
	            currentScore = 0;
	            validFormatFound = false;
	            tempConfig = copyConfig({}, config);
	            if (config._useUTC != null) {
	                tempConfig._useUTC = config._useUTC;
	            }
	            tempConfig._f = config._f[i];
	            configFromStringAndFormat(tempConfig);
	
	            if (isValid(tempConfig)) {
	                validFormatFound = true;
	            }
	
	            // if there is any input that was not parsed add a penalty for that format
	            currentScore += getParsingFlags(tempConfig).charsLeftOver;
	
	            //or tokens
	            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
	
	            getParsingFlags(tempConfig).score = currentScore;
	
	            if (!bestFormatIsValid) {
	                if (
	                    scoreToBeat == null ||
	                    currentScore < scoreToBeat ||
	                    validFormatFound
	                ) {
	                    scoreToBeat = currentScore;
	                    bestMoment = tempConfig;
	                    if (validFormatFound) {
	                        bestFormatIsValid = true;
	                    }
	                }
	            } else {
	                if (currentScore < scoreToBeat) {
	                    scoreToBeat = currentScore;
	                    bestMoment = tempConfig;
	                }
	            }
	        }
	
	        extend(config, bestMoment || tempConfig);
	    }
	
	    function configFromObject(config) {
	        if (config._d) {
	            return;
	        }
	
	        var i = normalizeObjectUnits(config._i),
	            dayOrDate = i.day === undefined ? i.date : i.day;
	        config._a = map(
	            [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
	            function (obj) {
	                return obj && parseInt(obj, 10);
	            }
	        );
	
	        configFromArray(config);
	    }
	
	    function createFromConfig(config) {
	        var res = new Moment(checkOverflow(prepareConfig(config)));
	        if (res._nextDay) {
	            // Adding is smart enough around DST
	            res.add(1, 'd');
	            res._nextDay = undefined;
	        }
	
	        return res;
	    }
	
	    function prepareConfig(config) {
	        var input = config._i,
	            format = config._f;
	
	        config._locale = config._locale || getLocale(config._l);
	
	        if (input === null || (format === undefined && input === '')) {
	            return createInvalid({ nullInput: true });
	        }
	
	        if (typeof input === 'string') {
	            config._i = input = config._locale.preparse(input);
	        }
	
	        if (isMoment(input)) {
	            return new Moment(checkOverflow(input));
	        } else if (isDate(input)) {
	            config._d = input;
	        } else if (isArray(format)) {
	            configFromStringAndArray(config);
	        } else if (format) {
	            configFromStringAndFormat(config);
	        } else {
	            configFromInput(config);
	        }
	
	        if (!isValid(config)) {
	            config._d = null;
	        }
	
	        return config;
	    }
	
	    function configFromInput(config) {
	        var input = config._i;
	        if (isUndefined(input)) {
	            config._d = new Date(hooks.now());
	        } else if (isDate(input)) {
	            config._d = new Date(input.valueOf());
	        } else if (typeof input === 'string') {
	            configFromString(config);
	        } else if (isArray(input)) {
	            config._a = map(input.slice(0), function (obj) {
	                return parseInt(obj, 10);
	            });
	            configFromArray(config);
	        } else if (isObject(input)) {
	            configFromObject(config);
	        } else if (isNumber(input)) {
	            // from milliseconds
	            config._d = new Date(input);
	        } else {
	            hooks.createFromInputFallback(config);
	        }
	    }
	
	    function createLocalOrUTC(input, format, locale, strict, isUTC) {
	        var c = {};
	
	        if (format === true || format === false) {
	            strict = format;
	            format = undefined;
	        }
	
	        if (locale === true || locale === false) {
	            strict = locale;
	            locale = undefined;
	        }
	
	        if (
	            (isObject(input) && isObjectEmpty(input)) ||
	            (isArray(input) && input.length === 0)
	        ) {
	            input = undefined;
	        }
	        // object construction must be done this way.
	        // https://github.com/moment/moment/issues/1423
	        c._isAMomentObject = true;
	        c._useUTC = c._isUTC = isUTC;
	        c._l = locale;
	        c._i = input;
	        c._f = format;
	        c._strict = strict;
	
	        return createFromConfig(c);
	    }
	
	    function createLocal(input, format, locale, strict) {
	        return createLocalOrUTC(input, format, locale, strict, false);
	    }
	
	    var prototypeMin = deprecate(
	            'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
	            function () {
	                var other = createLocal.apply(null, arguments);
	                if (this.isValid() && other.isValid()) {
	                    return other < this ? this : other;
	                } else {
	                    return createInvalid();
	                }
	            }
	        ),
	        prototypeMax = deprecate(
	            'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
	            function () {
	                var other = createLocal.apply(null, arguments);
	                if (this.isValid() && other.isValid()) {
	                    return other > this ? this : other;
	                } else {
	                    return createInvalid();
	                }
	            }
	        );
	
	    // Pick a moment m from moments so that m[fn](other) is true for all
	    // other. This relies on the function fn to be transitive.
	    //
	    // moments should either be an array of moment objects or an array, whose
	    // first element is an array of moment objects.
	    function pickBy(fn, moments) {
	        var res, i;
	        if (moments.length === 1 && isArray(moments[0])) {
	            moments = moments[0];
	        }
	        if (!moments.length) {
	            return createLocal();
	        }
	        res = moments[0];
	        for (i = 1; i < moments.length; ++i) {
	            if (!moments[i].isValid() || moments[i][fn](res)) {
	                res = moments[i];
	            }
	        }
	        return res;
	    }
	
	    // TODO: Use [].sort instead?
	    function min() {
	        var args = [].slice.call(arguments, 0);
	
	        return pickBy('isBefore', args);
	    }
	
	    function max() {
	        var args = [].slice.call(arguments, 0);
	
	        return pickBy('isAfter', args);
	    }
	
	    var now = function () {
	        return Date.now ? Date.now() : +new Date();
	    };
	
	    var ordering = [
	        'year',
	        'quarter',
	        'month',
	        'week',
	        'day',
	        'hour',
	        'minute',
	        'second',
	        'millisecond',
	    ];
	
	    function isDurationValid(m) {
	        var key,
	            unitHasDecimal = false,
	            i;
	        for (key in m) {
	            if (
	                hasOwnProp(m, key) &&
	                !(
	                    indexOf.call(ordering, key) !== -1 &&
	                    (m[key] == null || !isNaN(m[key]))
	                )
	            ) {
	                return false;
	            }
	        }
	
	        for (i = 0; i < ordering.length; ++i) {
	            if (m[ordering[i]]) {
	                if (unitHasDecimal) {
	                    return false; // only allow non-integers for smallest unit
	                }
	                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
	                    unitHasDecimal = true;
	                }
	            }
	        }
	
	        return true;
	    }
	
	    function isValid$1() {
	        return this._isValid;
	    }
	
	    function createInvalid$1() {
	        return createDuration(NaN);
	    }
	
	    function Duration(duration) {
	        var normalizedInput = normalizeObjectUnits(duration),
	            years = normalizedInput.year || 0,
	            quarters = normalizedInput.quarter || 0,
	            months = normalizedInput.month || 0,
	            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
	            days = normalizedInput.day || 0,
	            hours = normalizedInput.hour || 0,
	            minutes = normalizedInput.minute || 0,
	            seconds = normalizedInput.second || 0,
	            milliseconds = normalizedInput.millisecond || 0;
	
	        this._isValid = isDurationValid(normalizedInput);
	
	        // representation for dateAddRemove
	        this._milliseconds =
	            +milliseconds +
	            seconds * 1e3 + // 1000
	            minutes * 6e4 + // 1000 * 60
	            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
	        // Because of dateAddRemove treats 24 hours as different from a
	        // day when working around DST, we need to store them separately
	        this._days = +days + weeks * 7;
	        // It is impossible to translate months into days without knowing
	        // which months you are are talking about, so we have to store
	        // it separately.
	        this._months = +months + quarters * 3 + years * 12;
	
	        this._data = {};
	
	        this._locale = getLocale();
	
	        this._bubble();
	    }
	
	    function isDuration(obj) {
	        return obj instanceof Duration;
	    }
	
	    function absRound(number) {
	        if (number < 0) {
	            return Math.round(-1 * number) * -1;
	        } else {
	            return Math.round(number);
	        }
	    }
	
	    // compare two arrays, return the number of differences
	    function compareArrays(array1, array2, dontConvert) {
	        var len = Math.min(array1.length, array2.length),
	            lengthDiff = Math.abs(array1.length - array2.length),
	            diffs = 0,
	            i;
	        for (i = 0; i < len; i++) {
	            if (
	                (dontConvert && array1[i] !== array2[i]) ||
	                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))
	            ) {
	                diffs++;
	            }
	        }
	        return diffs + lengthDiff;
	    }
	
	    // FORMATTING
	
	    function offset(token, separator) {
	        addFormatToken(token, 0, 0, function () {
	            var offset = this.utcOffset(),
	                sign = '+';
	            if (offset < 0) {
	                offset = -offset;
	                sign = '-';
	            }
	            return (
	                sign +
	                zeroFill(~~(offset / 60), 2) +
	                separator +
	                zeroFill(~~offset % 60, 2)
	            );
	        });
	    }
	
	    offset('Z', ':');
	    offset('ZZ', '');
	
	    // PARSING
	
	    addRegexToken('Z', matchShortOffset);
	    addRegexToken('ZZ', matchShortOffset);
	    addParseToken(['Z', 'ZZ'], function (input, array, config) {
	        config._useUTC = true;
	        config._tzm = offsetFromString(matchShortOffset, input);
	    });
	
	    // HELPERS
	
	    // timezone chunker
	    // '+10:00' > ['10',  '00']
	    // '-1530'  > ['-15', '30']
	    var chunkOffset = /([\+\-]|\d\d)/gi;
	
	    function offsetFromString(matcher, string) {
	        var matches = (string || '').match(matcher),
	            chunk,
	            parts,
	            minutes;
	
	        if (matches === null) {
	            return null;
	        }
	
	        chunk = matches[matches.length - 1] || [];
	        parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
	        minutes = +(parts[1] * 60) + toInt(parts[2]);
	
	        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
	    }
	
	    // Return a moment from input, that is local/utc/zone equivalent to model.
	    function cloneWithOffset(input, model) {
	        var res, diff;
	        if (model._isUTC) {
	            res = model.clone();
	            diff =
	                (isMoment(input) || isDate(input)
	                    ? input.valueOf()
	                    : createLocal(input).valueOf()) - res.valueOf();
	            // Use low-level api, because this fn is low-level api.
	            res._d.setTime(res._d.valueOf() + diff);
	            hooks.updateOffset(res, false);
	            return res;
	        } else {
	            return createLocal(input).local();
	        }
	    }
	
	    function getDateOffset(m) {
	        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
	        // https://github.com/moment/moment/pull/1871
	        return -Math.round(m._d.getTimezoneOffset());
	    }
	
	    // HOOKS
	
	    // This function will be called whenever a moment is mutated.
	    // It is intended to keep the offset in sync with the timezone.
	    hooks.updateOffset = function () {};
	
	    // MOMENTS
	
	    // keepLocalTime = true means only change the timezone, without
	    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
	    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
	    // +0200, so we adjust the time as needed, to be valid.
	    //
	    // Keeping the time actually adds/subtracts (one hour)
	    // from the actual represented time. That is why we call updateOffset
	    // a second time. In case it wants us to change the offset again
	    // _changeInProgress == true case, then we have to adjust, because
	    // there is no such time in the given timezone.
	    function getSetOffset(input, keepLocalTime, keepMinutes) {
	        var offset = this._offset || 0,
	            localAdjust;
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        if (input != null) {
	            if (typeof input === 'string') {
	                input = offsetFromString(matchShortOffset, input);
	                if (input === null) {
	                    return this;
	                }
	            } else if (Math.abs(input) < 16 && !keepMinutes) {
	                input = input * 60;
	            }
	            if (!this._isUTC && keepLocalTime) {
	                localAdjust = getDateOffset(this);
	            }
	            this._offset = input;
	            this._isUTC = true;
	            if (localAdjust != null) {
	                this.add(localAdjust, 'm');
	            }
	            if (offset !== input) {
	                if (!keepLocalTime || this._changeInProgress) {
	                    addSubtract(
	                        this,
	                        createDuration(input - offset, 'm'),
	                        1,
	                        false
	                    );
	                } else if (!this._changeInProgress) {
	                    this._changeInProgress = true;
	                    hooks.updateOffset(this, true);
	                    this._changeInProgress = null;
	                }
	            }
	            return this;
	        } else {
	            return this._isUTC ? offset : getDateOffset(this);
	        }
	    }
	
	    function getSetZone(input, keepLocalTime) {
	        if (input != null) {
	            if (typeof input !== 'string') {
	                input = -input;
	            }
	
	            this.utcOffset(input, keepLocalTime);
	
	            return this;
	        } else {
	            return -this.utcOffset();
	        }
	    }
	
	    function setOffsetToUTC(keepLocalTime) {
	        return this.utcOffset(0, keepLocalTime);
	    }
	
	    function setOffsetToLocal(keepLocalTime) {
	        if (this._isUTC) {
	            this.utcOffset(0, keepLocalTime);
	            this._isUTC = false;
	
	            if (keepLocalTime) {
	                this.subtract(getDateOffset(this), 'm');
	            }
	        }
	        return this;
	    }
	
	    function setOffsetToParsedOffset() {
	        if (this._tzm != null) {
	            this.utcOffset(this._tzm, false, true);
	        } else if (typeof this._i === 'string') {
	            var tZone = offsetFromString(matchOffset, this._i);
	            if (tZone != null) {
	                this.utcOffset(tZone);
	            } else {
	                this.utcOffset(0, true);
	            }
	        }
	        return this;
	    }
	
	    function hasAlignedHourOffset(input) {
	        if (!this.isValid()) {
	            return false;
	        }
	        input = input ? createLocal(input).utcOffset() : 0;
	
	        return (this.utcOffset() - input) % 60 === 0;
	    }
	
	    function isDaylightSavingTime() {
	        return (
	            this.utcOffset() > this.clone().month(0).utcOffset() ||
	            this.utcOffset() > this.clone().month(5).utcOffset()
	        );
	    }
	
	    function isDaylightSavingTimeShifted() {
	        if (!isUndefined(this._isDSTShifted)) {
	            return this._isDSTShifted;
	        }
	
	        var c = {},
	            other;
	
	        copyConfig(c, this);
	        c = prepareConfig(c);
	
	        if (c._a) {
	            other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
	            this._isDSTShifted =
	                this.isValid() && compareArrays(c._a, other.toArray()) > 0;
	        } else {
	            this._isDSTShifted = false;
	        }
	
	        return this._isDSTShifted;
	    }
	
	    function isLocal() {
	        return this.isValid() ? !this._isUTC : false;
	    }
	
	    function isUtcOffset() {
	        return this.isValid() ? this._isUTC : false;
	    }
	
	    function isUtc() {
	        return this.isValid() ? this._isUTC && this._offset === 0 : false;
	    }
	
	    // ASP.NET json date format regex
	    var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
	        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
	        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
	        // and further modified to allow for strings containing both week and day
	        isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
	
	    function createDuration(input, key) {
	        var duration = input,
	            // matching against regexp is expensive, do it on demand
	            match = null,
	            sign,
	            ret,
	            diffRes;
	
	        if (isDuration(input)) {
	            duration = {
	                ms: input._milliseconds,
	                d: input._days,
	                M: input._months,
	            };
	        } else if (isNumber(input) || !isNaN(+input)) {
	            duration = {};
	            if (key) {
	                duration[key] = +input;
	            } else {
	                duration.milliseconds = +input;
	            }
	        } else if ((match = aspNetRegex.exec(input))) {
	            sign = match[1] === '-' ? -1 : 1;
	            duration = {
	                y: 0,
	                d: toInt(match[DATE]) * sign,
	                h: toInt(match[HOUR]) * sign,
	                m: toInt(match[MINUTE]) * sign,
	                s: toInt(match[SECOND]) * sign,
	                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match
	            };
	        } else if ((match = isoRegex.exec(input))) {
	            sign = match[1] === '-' ? -1 : 1;
	            duration = {
	                y: parseIso(match[2], sign),
	                M: parseIso(match[3], sign),
	                w: parseIso(match[4], sign),
	                d: parseIso(match[5], sign),
	                h: parseIso(match[6], sign),
	                m: parseIso(match[7], sign),
	                s: parseIso(match[8], sign),
	            };
	        } else if (duration == null) {
	            // checks for null or undefined
	            duration = {};
	        } else if (
	            typeof duration === 'object' &&
	            ('from' in duration || 'to' in duration)
	        ) {
	            diffRes = momentsDifference(
	                createLocal(duration.from),
	                createLocal(duration.to)
	            );
	
	            duration = {};
	            duration.ms = diffRes.milliseconds;
	            duration.M = diffRes.months;
	        }
	
	        ret = new Duration(duration);
	
	        if (isDuration(input) && hasOwnProp(input, '_locale')) {
	            ret._locale = input._locale;
	        }
	
	        if (isDuration(input) && hasOwnProp(input, '_isValid')) {
	            ret._isValid = input._isValid;
	        }
	
	        return ret;
	    }
	
	    createDuration.fn = Duration.prototype;
	    createDuration.invalid = createInvalid$1;
	
	    function parseIso(inp, sign) {
	        // We'd normally use ~~inp for this, but unfortunately it also
	        // converts floats to ints.
	        // inp may be undefined, so careful calling replace on it.
	        var res = inp && parseFloat(inp.replace(',', '.'));
	        // apply sign while we're at it
	        return (isNaN(res) ? 0 : res) * sign;
	    }
	
	    function positiveMomentsDifference(base, other) {
	        var res = {};
	
	        res.months =
	            other.month() - base.month() + (other.year() - base.year()) * 12;
	        if (base.clone().add(res.months, 'M').isAfter(other)) {
	            --res.months;
	        }
	
	        res.milliseconds = +other - +base.clone().add(res.months, 'M');
	
	        return res;
	    }
	
	    function momentsDifference(base, other) {
	        var res;
	        if (!(base.isValid() && other.isValid())) {
	            return { milliseconds: 0, months: 0 };
	        }
	
	        other = cloneWithOffset(other, base);
	        if (base.isBefore(other)) {
	            res = positiveMomentsDifference(base, other);
	        } else {
	            res = positiveMomentsDifference(other, base);
	            res.milliseconds = -res.milliseconds;
	            res.months = -res.months;
	        }
	
	        return res;
	    }
	
	    // TODO: remove 'name' arg after deprecation is removed
	    function createAdder(direction, name) {
	        return function (val, period) {
	            var dur, tmp;
	            //invert the arguments, but complain about it
	            if (period !== null && !isNaN(+period)) {
	                deprecateSimple(
	                    name,
	                    'moment().' +
	                        name +
	                        '(period, number) is deprecated. Please use moment().' +
	                        name +
	                        '(number, period). ' +
	                        'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.'
	                );
	                tmp = val;
	                val = period;
	                period = tmp;
	            }
	
	            dur = createDuration(val, period);
	            addSubtract(this, dur, direction);
	            return this;
	        };
	    }
	
	    function addSubtract(mom, duration, isAdding, updateOffset) {
	        var milliseconds = duration._milliseconds,
	            days = absRound(duration._days),
	            months = absRound(duration._months);
	
	        if (!mom.isValid()) {
	            // No op
	            return;
	        }
	
	        updateOffset = updateOffset == null ? true : updateOffset;
	
	        if (months) {
	            setMonth(mom, get(mom, 'Month') + months * isAdding);
	        }
	        if (days) {
	            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
	        }
	        if (milliseconds) {
	            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
	        }
	        if (updateOffset) {
	            hooks.updateOffset(mom, days || months);
	        }
	    }
	
	    var add = createAdder(1, 'add'),
	        subtract = createAdder(-1, 'subtract');
	
	    function isString(input) {
	        return typeof input === 'string' || input instanceof String;
	    }
	
	    // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
	    function isMomentInput(input) {
	        return (
	            isMoment(input) ||
	            isDate(input) ||
	            isString(input) ||
	            isNumber(input) ||
	            isNumberOrStringArray(input) ||
	            isMomentInputObject(input) ||
	            input === null ||
	            input === undefined
	        );
	    }
	
	    function isMomentInputObject(input) {
	        var objectTest = isObject(input) && !isObjectEmpty(input),
	            propertyTest = false,
	            properties = [
	                'years',
	                'year',
	                'y',
	                'months',
	                'month',
	                'M',
	                'days',
	                'day',
	                'd',
	                'dates',
	                'date',
	                'D',
	                'hours',
	                'hour',
	                'h',
	                'minutes',
	                'minute',
	                'm',
	                'seconds',
	                'second',
	                's',
	                'milliseconds',
	                'millisecond',
	                'ms',
	            ],
	            i,
	            property;
	
	        for (i = 0; i < properties.length; i += 1) {
	            property = properties[i];
	            propertyTest = propertyTest || hasOwnProp(input, property);
	        }
	
	        return objectTest && propertyTest;
	    }
	
	    function isNumberOrStringArray(input) {
	        var arrayTest = isArray(input),
	            dataTypeTest = false;
	        if (arrayTest) {
	            dataTypeTest =
	                input.filter(function (item) {
	                    return !isNumber(item) && isString(input);
	                }).length === 0;
	        }
	        return arrayTest && dataTypeTest;
	    }
	
	    function isCalendarSpec(input) {
	        var objectTest = isObject(input) && !isObjectEmpty(input),
	            propertyTest = false,
	            properties = [
	                'sameDay',
	                'nextDay',
	                'lastDay',
	                'nextWeek',
	                'lastWeek',
	                'sameElse',
	            ],
	            i,
	            property;
	
	        for (i = 0; i < properties.length; i += 1) {
	            property = properties[i];
	            propertyTest = propertyTest || hasOwnProp(input, property);
	        }
	
	        return objectTest && propertyTest;
	    }
	
	    function getCalendarFormat(myMoment, now) {
	        var diff = myMoment.diff(now, 'days', true);
	        return diff < -6
	            ? 'sameElse'
	            : diff < -1
	            ? 'lastWeek'
	            : diff < 0
	            ? 'lastDay'
	            : diff < 1
	            ? 'sameDay'
	            : diff < 2
	            ? 'nextDay'
	            : diff < 7
	            ? 'nextWeek'
	            : 'sameElse';
	    }
	
	    function calendar$1(time, formats) {
	        // Support for single parameter, formats only overload to the calendar function
	        if (arguments.length === 1) {
	            if (!arguments[0]) {
	                time = undefined;
	                formats = undefined;
	            } else if (isMomentInput(arguments[0])) {
	                time = arguments[0];
	                formats = undefined;
	            } else if (isCalendarSpec(arguments[0])) {
	                formats = arguments[0];
	                time = undefined;
	            }
	        }
	        // We want to compare the start of today, vs this.
	        // Getting start-of-today depends on whether we're local/utc/offset or not.
	        var now = time || createLocal(),
	            sod = cloneWithOffset(now, this).startOf('day'),
	            format = hooks.calendarFormat(this, sod) || 'sameElse',
	            output =
	                formats &&
	                (isFunction(formats[format])
	                    ? formats[format].call(this, now)
	                    : formats[format]);
	
	        return this.format(
	            output || this.localeData().calendar(format, this, createLocal(now))
	        );
	    }
	
	    function clone() {
	        return new Moment(this);
	    }
	
	    function isAfter(input, units) {
	        var localInput = isMoment(input) ? input : createLocal(input);
	        if (!(this.isValid() && localInput.isValid())) {
	            return false;
	        }
	        units = normalizeUnits(units) || 'millisecond';
	        if (units === 'millisecond') {
	            return this.valueOf() > localInput.valueOf();
	        } else {
	            return localInput.valueOf() < this.clone().startOf(units).valueOf();
	        }
	    }
	
	    function isBefore(input, units) {
	        var localInput = isMoment(input) ? input : createLocal(input);
	        if (!(this.isValid() && localInput.isValid())) {
	            return false;
	        }
	        units = normalizeUnits(units) || 'millisecond';
	        if (units === 'millisecond') {
	            return this.valueOf() < localInput.valueOf();
	        } else {
	            return this.clone().endOf(units).valueOf() < localInput.valueOf();
	        }
	    }
	
	    function isBetween(from, to, units, inclusivity) {
	        var localFrom = isMoment(from) ? from : createLocal(from),
	            localTo = isMoment(to) ? to : createLocal(to);
	        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
	            return false;
	        }
	        inclusivity = inclusivity || '()';
	        return (
	            (inclusivity[0] === '('
	                ? this.isAfter(localFrom, units)
	                : !this.isBefore(localFrom, units)) &&
	            (inclusivity[1] === ')'
	                ? this.isBefore(localTo, units)
	                : !this.isAfter(localTo, units))
	        );
	    }
	
	    function isSame(input, units) {
	        var localInput = isMoment(input) ? input : createLocal(input),
	            inputMs;
	        if (!(this.isValid() && localInput.isValid())) {
	            return false;
	        }
	        units = normalizeUnits(units) || 'millisecond';
	        if (units === 'millisecond') {
	            return this.valueOf() === localInput.valueOf();
	        } else {
	            inputMs = localInput.valueOf();
	            return (
	                this.clone().startOf(units).valueOf() <= inputMs &&
	                inputMs <= this.clone().endOf(units).valueOf()
	            );
	        }
	    }
	
	    function isSameOrAfter(input, units) {
	        return this.isSame(input, units) || this.isAfter(input, units);
	    }
	
	    function isSameOrBefore(input, units) {
	        return this.isSame(input, units) || this.isBefore(input, units);
	    }
	
	    function diff(input, units, asFloat) {
	        var that, zoneDelta, output;
	
	        if (!this.isValid()) {
	            return NaN;
	        }
	
	        that = cloneWithOffset(input, this);
	
	        if (!that.isValid()) {
	            return NaN;
	        }
	
	        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
	
	        units = normalizeUnits(units);
	
	        switch (units) {
	            case 'year':
	                output = monthDiff(this, that) / 12;
	                break;
	            case 'month':
	                output = monthDiff(this, that);
	                break;
	            case 'quarter':
	                output = monthDiff(this, that) / 3;
	                break;
	            case 'second':
	                output = (this - that) / 1e3;
	                break; // 1000
	            case 'minute':
	                output = (this - that) / 6e4;
	                break; // 1000 * 60
	            case 'hour':
	                output = (this - that) / 36e5;
	                break; // 1000 * 60 * 60
	            case 'day':
	                output = (this - that - zoneDelta) / 864e5;
	                break; // 1000 * 60 * 60 * 24, negate dst
	            case 'week':
	                output = (this - that - zoneDelta) / 6048e5;
	                break; // 1000 * 60 * 60 * 24 * 7, negate dst
	            default:
	                output = this - that;
	        }
	
	        return asFloat ? output : absFloor(output);
	    }
	
	    function monthDiff(a, b) {
	        if (a.date() < b.date()) {
	            // end-of-month calculations work correct when the start month has more
	            // days than the end month.
	            return -monthDiff(b, a);
	        }
	        // difference in months
	        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
	            // b is in (anchor - 1 month, anchor + 1 month)
	            anchor = a.clone().add(wholeMonthDiff, 'months'),
	            anchor2,
	            adjust;
	
	        if (b - anchor < 0) {
	            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
	            // linear across the month
	            adjust = (b - anchor) / (anchor - anchor2);
	        } else {
	            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
	            // linear across the month
	            adjust = (b - anchor) / (anchor2 - anchor);
	        }
	
	        //check for negative zero, return zero if negative zero
	        return -(wholeMonthDiff + adjust) || 0;
	    }
	
	    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
	    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';
	
	    function toString() {
	        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
	    }
	
	    function toISOString(keepOffset) {
	        if (!this.isValid()) {
	            return null;
	        }
	        var utc = keepOffset !== true,
	            m = utc ? this.clone().utc() : this;
	        if (m.year() < 0 || m.year() > 9999) {
	            return formatMoment(
	                m,
	                utc
	                    ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]'
	                    : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ'
	            );
	        }
	        if (isFunction(Date.prototype.toISOString)) {
	            // native implementation is ~50x faster, use it when we can
	            if (utc) {
	                return this.toDate().toISOString();
	            } else {
	                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)
	                    .toISOString()
	                    .replace('Z', formatMoment(m, 'Z'));
	            }
	        }
	        return formatMoment(
	            m,
	            utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ'
	        );
	    }
	
	    /**
	     * Return a human readable representation of a moment that can
	     * also be evaluated to get a new moment which is the same
	     *
	     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
	     */
	    function inspect() {
	        if (!this.isValid()) {
	            return 'moment.invalid(/* ' + this._i + ' */)';
	        }
	        var func = 'moment',
	            zone = '',
	            prefix,
	            year,
	            datetime,
	            suffix;
	        if (!this.isLocal()) {
	            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
	            zone = 'Z';
	        }
	        prefix = '[' + func + '("]';
	        year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
	        datetime = '-MM-DD[T]HH:mm:ss.SSS';
	        suffix = zone + '[")]';
	
	        return this.format(prefix + year + datetime + suffix);
	    }
	
	    function format(inputString) {
	        if (!inputString) {
	            inputString = this.isUtc()
	                ? hooks.defaultFormatUtc
	                : hooks.defaultFormat;
	        }
	        var output = formatMoment(this, inputString);
	        return this.localeData().postformat(output);
	    }
	
	    function from(time, withoutSuffix) {
	        if (
	            this.isValid() &&
	            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
	        ) {
	            return createDuration({ to: this, from: time })
	                .locale(this.locale())
	                .humanize(!withoutSuffix);
	        } else {
	            return this.localeData().invalidDate();
	        }
	    }
	
	    function fromNow(withoutSuffix) {
	        return this.from(createLocal(), withoutSuffix);
	    }
	
	    function to(time, withoutSuffix) {
	        if (
	            this.isValid() &&
	            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
	        ) {
	            return createDuration({ from: this, to: time })
	                .locale(this.locale())
	                .humanize(!withoutSuffix);
	        } else {
	            return this.localeData().invalidDate();
	        }
	    }
	
	    function toNow(withoutSuffix) {
	        return this.to(createLocal(), withoutSuffix);
	    }
	
	    // If passed a locale key, it will set the locale for this
	    // instance.  Otherwise, it will return the locale configuration
	    // variables for this instance.
	    function locale(key) {
	        var newLocaleData;
	
	        if (key === undefined) {
	            return this._locale._abbr;
	        } else {
	            newLocaleData = getLocale(key);
	            if (newLocaleData != null) {
	                this._locale = newLocaleData;
	            }
	            return this;
	        }
	    }
	
	    var lang = deprecate(
	        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
	        function (key) {
	            if (key === undefined) {
	                return this.localeData();
	            } else {
	                return this.locale(key);
	            }
	        }
	    );
	
	    function localeData() {
	        return this._locale;
	    }
	
	    var MS_PER_SECOND = 1000,
	        MS_PER_MINUTE = 60 * MS_PER_SECOND,
	        MS_PER_HOUR = 60 * MS_PER_MINUTE,
	        MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;
	
	    // actual modulo - handles negative numbers (for dates before 1970):
	    function mod$1(dividend, divisor) {
	        return ((dividend % divisor) + divisor) % divisor;
	    }
	
	    function localStartOfDate(y, m, d) {
	        // the date constructor remaps years 0-99 to 1900-1999
	        if (y < 100 && y >= 0) {
	            // preserve leap years using a full 400 year cycle, then reset
	            return new Date(y + 400, m, d) - MS_PER_400_YEARS;
	        } else {
	            return new Date(y, m, d).valueOf();
	        }
	    }
	
	    function utcStartOfDate(y, m, d) {
	        // Date.UTC remaps years 0-99 to 1900-1999
	        if (y < 100 && y >= 0) {
	            // preserve leap years using a full 400 year cycle, then reset
	            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
	        } else {
	            return Date.UTC(y, m, d);
	        }
	    }
	
	    function startOf(units) {
	        var time, startOfDate;
	        units = normalizeUnits(units);
	        if (units === undefined || units === 'millisecond' || !this.isValid()) {
	            return this;
	        }
	
	        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
	
	        switch (units) {
	            case 'year':
	                time = startOfDate(this.year(), 0, 1);
	                break;
	            case 'quarter':
	                time = startOfDate(
	                    this.year(),
	                    this.month() - (this.month() % 3),
	                    1
	                );
	                break;
	            case 'month':
	                time = startOfDate(this.year(), this.month(), 1);
	                break;
	            case 'week':
	                time = startOfDate(
	                    this.year(),
	                    this.month(),
	                    this.date() - this.weekday()
	                );
	                break;
	            case 'isoWeek':
	                time = startOfDate(
	                    this.year(),
	                    this.month(),
	                    this.date() - (this.isoWeekday() - 1)
	                );
	                break;
	            case 'day':
	            case 'date':
	                time = startOfDate(this.year(), this.month(), this.date());
	                break;
	            case 'hour':
	                time = this._d.valueOf();
	                time -= mod$1(
	                    time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
	                    MS_PER_HOUR
	                );
	                break;
	            case 'minute':
	                time = this._d.valueOf();
	                time -= mod$1(time, MS_PER_MINUTE);
	                break;
	            case 'second':
	                time = this._d.valueOf();
	                time -= mod$1(time, MS_PER_SECOND);
	                break;
	        }
	
	        this._d.setTime(time);
	        hooks.updateOffset(this, true);
	        return this;
	    }
	
	    function endOf(units) {
	        var time, startOfDate;
	        units = normalizeUnits(units);
	        if (units === undefined || units === 'millisecond' || !this.isValid()) {
	            return this;
	        }
	
	        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
	
	        switch (units) {
	            case 'year':
	                time = startOfDate(this.year() + 1, 0, 1) - 1;
	                break;
	            case 'quarter':
	                time =
	                    startOfDate(
	                        this.year(),
	                        this.month() - (this.month() % 3) + 3,
	                        1
	                    ) - 1;
	                break;
	            case 'month':
	                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
	                break;
	            case 'week':
	                time =
	                    startOfDate(
	                        this.year(),
	                        this.month(),
	                        this.date() - this.weekday() + 7
	                    ) - 1;
	                break;
	            case 'isoWeek':
	                time =
	                    startOfDate(
	                        this.year(),
	                        this.month(),
	                        this.date() - (this.isoWeekday() - 1) + 7
	                    ) - 1;
	                break;
	            case 'day':
	            case 'date':
	                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
	                break;
	            case 'hour':
	                time = this._d.valueOf();
	                time +=
	                    MS_PER_HOUR -
	                    mod$1(
	                        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
	                        MS_PER_HOUR
	                    ) -
	                    1;
	                break;
	            case 'minute':
	                time = this._d.valueOf();
	                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
	                break;
	            case 'second':
	                time = this._d.valueOf();
	                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
	                break;
	        }
	
	        this._d.setTime(time);
	        hooks.updateOffset(this, true);
	        return this;
	    }
	
	    function valueOf() {
	        return this._d.valueOf() - (this._offset || 0) * 60000;
	    }
	
	    function unix() {
	        return Math.floor(this.valueOf() / 1000);
	    }
	
	    function toDate() {
	        return new Date(this.valueOf());
	    }
	
	    function toArray() {
	        var m = this;
	        return [
	            m.year(),
	            m.month(),
	            m.date(),
	            m.hour(),
	            m.minute(),
	            m.second(),
	            m.millisecond(),
	        ];
	    }
	
	    function toObject() {
	        var m = this;
	        return {
	            years: m.year(),
	            months: m.month(),
	            date: m.date(),
	            hours: m.hours(),
	            minutes: m.minutes(),
	            seconds: m.seconds(),
	            milliseconds: m.milliseconds(),
	        };
	    }
	
	    function toJSON() {
	        // new Date(NaN).toJSON() === null
	        return this.isValid() ? this.toISOString() : null;
	    }
	
	    function isValid$2() {
	        return isValid(this);
	    }
	
	    function parsingFlags() {
	        return extend({}, getParsingFlags(this));
	    }
	
	    function invalidAt() {
	        return getParsingFlags(this).overflow;
	    }
	
	    function creationData() {
	        return {
	            input: this._i,
	            format: this._f,
	            locale: this._locale,
	            isUTC: this._isUTC,
	            strict: this._strict,
	        };
	    }
	
	    addFormatToken('N', 0, 0, 'eraAbbr');
	    addFormatToken('NN', 0, 0, 'eraAbbr');
	    addFormatToken('NNN', 0, 0, 'eraAbbr');
	    addFormatToken('NNNN', 0, 0, 'eraName');
	    addFormatToken('NNNNN', 0, 0, 'eraNarrow');
	
	    addFormatToken('y', ['y', 1], 'yo', 'eraYear');
	    addFormatToken('y', ['yy', 2], 0, 'eraYear');
	    addFormatToken('y', ['yyy', 3], 0, 'eraYear');
	    addFormatToken('y', ['yyyy', 4], 0, 'eraYear');
	
	    addRegexToken('N', matchEraAbbr);
	    addRegexToken('NN', matchEraAbbr);
	    addRegexToken('NNN', matchEraAbbr);
	    addRegexToken('NNNN', matchEraName);
	    addRegexToken('NNNNN', matchEraNarrow);
	
	    addParseToken(['N', 'NN', 'NNN', 'NNNN', 'NNNNN'], function (
	        input,
	        array,
	        config,
	        token
	    ) {
	        var era = config._locale.erasParse(input, token, config._strict);
	        if (era) {
	            getParsingFlags(config).era = era;
	        } else {
	            getParsingFlags(config).invalidEra = input;
	        }
	    });
	
	    addRegexToken('y', matchUnsigned);
	    addRegexToken('yy', matchUnsigned);
	    addRegexToken('yyy', matchUnsigned);
	    addRegexToken('yyyy', matchUnsigned);
	    addRegexToken('yo', matchEraYearOrdinal);
	
	    addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
	    addParseToken(['yo'], function (input, array, config, token) {
	        var match;
	        if (config._locale._eraYearOrdinalRegex) {
	            match = input.match(config._locale._eraYearOrdinalRegex);
	        }
	
	        if (config._locale.eraYearOrdinalParse) {
	            array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
	        } else {
	            array[YEAR] = parseInt(input, 10);
	        }
	    });
	
	    function localeEras(m, format) {
	        var i,
	            l,
	            date,
	            eras = this._eras || getLocale('en')._eras;
	        for (i = 0, l = eras.length; i < l; ++i) {
	            switch (typeof eras[i].since) {
	                case 'string':
	                    // truncate time
	                    date = hooks(eras[i].since).startOf('day');
	                    eras[i].since = date.valueOf();
	                    break;
	            }
	
	            switch (typeof eras[i].until) {
	                case 'undefined':
	                    eras[i].until = +Infinity;
	                    break;
	                case 'string':
	                    // truncate time
	                    date = hooks(eras[i].until).startOf('day').valueOf();
	                    eras[i].until = date.valueOf();
	                    break;
	            }
	        }
	        return eras;
	    }
	
	    function localeErasParse(eraName, format, strict) {
	        var i,
	            l,
	            eras = this.eras(),
	            name,
	            abbr,
	            narrow;
	        eraName = eraName.toUpperCase();
	
	        for (i = 0, l = eras.length; i < l; ++i) {
	            name = eras[i].name.toUpperCase();
	            abbr = eras[i].abbr.toUpperCase();
	            narrow = eras[i].narrow.toUpperCase();
	
	            if (strict) {
	                switch (format) {
	                    case 'N':
	                    case 'NN':
	                    case 'NNN':
	                        if (abbr === eraName) {
	                            return eras[i];
	                        }
	                        break;
	
	                    case 'NNNN':
	                        if (name === eraName) {
	                            return eras[i];
	                        }
	                        break;
	
	                    case 'NNNNN':
	                        if (narrow === eraName) {
	                            return eras[i];
	                        }
	                        break;
	                }
	            } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
	                return eras[i];
	            }
	        }
	    }
	
	    function localeErasConvertYear(era, year) {
	        var dir = era.since <= era.until ? +1 : -1;
	        if (year === undefined) {
	            return hooks(era.since).year();
	        } else {
	            return hooks(era.since).year() + (year - era.offset) * dir;
	        }
	    }
	
	    function getEraName() {
	        var i,
	            l,
	            val,
	            eras = this.localeData().eras();
	        for (i = 0, l = eras.length; i < l; ++i) {
	            // truncate time
	            val = this.clone().startOf('day').valueOf();
	
	            if (eras[i].since <= val && val <= eras[i].until) {
	                return eras[i].name;
	            }
	            if (eras[i].until <= val && val <= eras[i].since) {
	                return eras[i].name;
	            }
	        }
	
	        return '';
	    }
	
	    function getEraNarrow() {
	        var i,
	            l,
	            val,
	            eras = this.localeData().eras();
	        for (i = 0, l = eras.length; i < l; ++i) {
	            // truncate time
	            val = this.clone().startOf('day').valueOf();
	
	            if (eras[i].since <= val && val <= eras[i].until) {
	                return eras[i].narrow;
	            }
	            if (eras[i].until <= val && val <= eras[i].since) {
	                return eras[i].narrow;
	            }
	        }
	
	        return '';
	    }
	
	    function getEraAbbr() {
	        var i,
	            l,
	            val,
	            eras = this.localeData().eras();
	        for (i = 0, l = eras.length; i < l; ++i) {
	            // truncate time
	            val = this.clone().startOf('day').valueOf();
	
	            if (eras[i].since <= val && val <= eras[i].until) {
	                return eras[i].abbr;
	            }
	            if (eras[i].until <= val && val <= eras[i].since) {
	                return eras[i].abbr;
	            }
	        }
	
	        return '';
	    }
	
	    function getEraYear() {
	        var i,
	            l,
	            dir,
	            val,
	            eras = this.localeData().eras();
	        for (i = 0, l = eras.length; i < l; ++i) {
	            dir = eras[i].since <= eras[i].until ? +1 : -1;
	
	            // truncate time
	            val = this.clone().startOf('day').valueOf();
	
	            if (
	                (eras[i].since <= val && val <= eras[i].until) ||
	                (eras[i].until <= val && val <= eras[i].since)
	            ) {
	                return (
	                    (this.year() - hooks(eras[i].since).year()) * dir +
	                    eras[i].offset
	                );
	            }
	        }
	
	        return this.year();
	    }
	
	    function erasNameRegex(isStrict) {
	        if (!hasOwnProp(this, '_erasNameRegex')) {
	            computeErasParse.call(this);
	        }
	        return isStrict ? this._erasNameRegex : this._erasRegex;
	    }
	
	    function erasAbbrRegex(isStrict) {
	        if (!hasOwnProp(this, '_erasAbbrRegex')) {
	            computeErasParse.call(this);
	        }
	        return isStrict ? this._erasAbbrRegex : this._erasRegex;
	    }
	
	    function erasNarrowRegex(isStrict) {
	        if (!hasOwnProp(this, '_erasNarrowRegex')) {
	            computeErasParse.call(this);
	        }
	        return isStrict ? this._erasNarrowRegex : this._erasRegex;
	    }
	
	    function matchEraAbbr(isStrict, locale) {
	        return locale.erasAbbrRegex(isStrict);
	    }
	
	    function matchEraName(isStrict, locale) {
	        return locale.erasNameRegex(isStrict);
	    }
	
	    function matchEraNarrow(isStrict, locale) {
	        return locale.erasNarrowRegex(isStrict);
	    }
	
	    function matchEraYearOrdinal(isStrict, locale) {
	        return locale._eraYearOrdinalRegex || matchUnsigned;
	    }
	
	    function computeErasParse() {
	        var abbrPieces = [],
	            namePieces = [],
	            narrowPieces = [],
	            mixedPieces = [],
	            i,
	            l,
	            eras = this.eras();
	
	        for (i = 0, l = eras.length; i < l; ++i) {
	            namePieces.push(regexEscape(eras[i].name));
	            abbrPieces.push(regexEscape(eras[i].abbr));
	            narrowPieces.push(regexEscape(eras[i].narrow));
	
	            mixedPieces.push(regexEscape(eras[i].name));
	            mixedPieces.push(regexEscape(eras[i].abbr));
	            mixedPieces.push(regexEscape(eras[i].narrow));
	        }
	
	        this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	        this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
	        this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
	        this._erasNarrowRegex = new RegExp(
	            '^(' + narrowPieces.join('|') + ')',
	            'i'
	        );
	    }
	
	    // FORMATTING
	
	    addFormatToken(0, ['gg', 2], 0, function () {
	        return this.weekYear() % 100;
	    });
	
	    addFormatToken(0, ['GG', 2], 0, function () {
	        return this.isoWeekYear() % 100;
	    });
	
	    function addWeekYearFormatToken(token, getter) {
	        addFormatToken(0, [token, token.length], 0, getter);
	    }
	
	    addWeekYearFormatToken('gggg', 'weekYear');
	    addWeekYearFormatToken('ggggg', 'weekYear');
	    addWeekYearFormatToken('GGGG', 'isoWeekYear');
	    addWeekYearFormatToken('GGGGG', 'isoWeekYear');
	
	    // ALIASES
	
	    addUnitAlias('weekYear', 'gg');
	    addUnitAlias('isoWeekYear', 'GG');
	
	    // PRIORITY
	
	    addUnitPriority('weekYear', 1);
	    addUnitPriority('isoWeekYear', 1);
	
	    // PARSING
	
	    addRegexToken('G', matchSigned);
	    addRegexToken('g', matchSigned);
	    addRegexToken('GG', match1to2, match2);
	    addRegexToken('gg', match1to2, match2);
	    addRegexToken('GGGG', match1to4, match4);
	    addRegexToken('gggg', match1to4, match4);
	    addRegexToken('GGGGG', match1to6, match6);
	    addRegexToken('ggggg', match1to6, match6);
	
	    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (
	        input,
	        week,
	        config,
	        token
	    ) {
	        week[token.substr(0, 2)] = toInt(input);
	    });
	
	    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
	        week[token] = hooks.parseTwoDigitYear(input);
	    });
	
	    // MOMENTS
	
	    function getSetWeekYear(input) {
	        return getSetWeekYearHelper.call(
	            this,
	            input,
	            this.week(),
	            this.weekday(),
	            this.localeData()._week.dow,
	            this.localeData()._week.doy
	        );
	    }
	
	    function getSetISOWeekYear(input) {
	        return getSetWeekYearHelper.call(
	            this,
	            input,
	            this.isoWeek(),
	            this.isoWeekday(),
	            1,
	            4
	        );
	    }
	
	    function getISOWeeksInYear() {
	        return weeksInYear(this.year(), 1, 4);
	    }
	
	    function getISOWeeksInISOWeekYear() {
	        return weeksInYear(this.isoWeekYear(), 1, 4);
	    }
	
	    function getWeeksInYear() {
	        var weekInfo = this.localeData()._week;
	        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
	    }
	
	    function getWeeksInWeekYear() {
	        var weekInfo = this.localeData()._week;
	        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
	    }
	
	    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
	        var weeksTarget;
	        if (input == null) {
	            return weekOfYear(this, dow, doy).year;
	        } else {
	            weeksTarget = weeksInYear(input, dow, doy);
	            if (week > weeksTarget) {
	                week = weeksTarget;
	            }
	            return setWeekAll.call(this, input, week, weekday, dow, doy);
	        }
	    }
	
	    function setWeekAll(weekYear, week, weekday, dow, doy) {
	        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
	            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
	
	        this.year(date.getUTCFullYear());
	        this.month(date.getUTCMonth());
	        this.date(date.getUTCDate());
	        return this;
	    }
	
	    // FORMATTING
	
	    addFormatToken('Q', 0, 'Qo', 'quarter');
	
	    // ALIASES
	
	    addUnitAlias('quarter', 'Q');
	
	    // PRIORITY
	
	    addUnitPriority('quarter', 7);
	
	    // PARSING
	
	    addRegexToken('Q', match1);
	    addParseToken('Q', function (input, array) {
	        array[MONTH] = (toInt(input) - 1) * 3;
	    });
	
	    // MOMENTS
	
	    function getSetQuarter(input) {
	        return input == null
	            ? Math.ceil((this.month() + 1) / 3)
	            : this.month((input - 1) * 3 + (this.month() % 3));
	    }
	
	    // FORMATTING
	
	    addFormatToken('D', ['DD', 2], 'Do', 'date');
	
	    // ALIASES
	
	    addUnitAlias('date', 'D');
	
	    // PRIORITY
	    addUnitPriority('date', 9);
	
	    // PARSING
	
	    addRegexToken('D', match1to2);
	    addRegexToken('DD', match1to2, match2);
	    addRegexToken('Do', function (isStrict, locale) {
	        // TODO: Remove "ordinalParse" fallback in next major release.
	        return isStrict
	            ? locale._dayOfMonthOrdinalParse || locale._ordinalParse
	            : locale._dayOfMonthOrdinalParseLenient;
	    });
	
	    addParseToken(['D', 'DD'], DATE);
	    addParseToken('Do', function (input, array) {
	        array[DATE] = toInt(input.match(match1to2)[0]);
	    });
	
	    // MOMENTS
	
	    var getSetDayOfMonth = makeGetSet('Date', true);
	
	    // FORMATTING
	
	    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');
	
	    // ALIASES
	
	    addUnitAlias('dayOfYear', 'DDD');
	
	    // PRIORITY
	    addUnitPriority('dayOfYear', 4);
	
	    // PARSING
	
	    addRegexToken('DDD', match1to3);
	    addRegexToken('DDDD', match3);
	    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
	        config._dayOfYear = toInt(input);
	    });
	
	    // HELPERS
	
	    // MOMENTS
	
	    function getSetDayOfYear(input) {
	        var dayOfYear =
	            Math.round(
	                (this.clone().startOf('day') - this.clone().startOf('year')) / 864e5
	            ) + 1;
	        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
	    }
	
	    // FORMATTING
	
	    addFormatToken('m', ['mm', 2], 0, 'minute');
	
	    // ALIASES
	
	    addUnitAlias('minute', 'm');
	
	    // PRIORITY
	
	    addUnitPriority('minute', 14);
	
	    // PARSING
	
	    addRegexToken('m', match1to2);
	    addRegexToken('mm', match1to2, match2);
	    addParseToken(['m', 'mm'], MINUTE);
	
	    // MOMENTS
	
	    var getSetMinute = makeGetSet('Minutes', false);
	
	    // FORMATTING
	
	    addFormatToken('s', ['ss', 2], 0, 'second');
	
	    // ALIASES
	
	    addUnitAlias('second', 's');
	
	    // PRIORITY
	
	    addUnitPriority('second', 15);
	
	    // PARSING
	
	    addRegexToken('s', match1to2);
	    addRegexToken('ss', match1to2, match2);
	    addParseToken(['s', 'ss'], SECOND);
	
	    // MOMENTS
	
	    var getSetSecond = makeGetSet('Seconds', false);
	
	    // FORMATTING
	
	    addFormatToken('S', 0, 0, function () {
	        return ~~(this.millisecond() / 100);
	    });
	
	    addFormatToken(0, ['SS', 2], 0, function () {
	        return ~~(this.millisecond() / 10);
	    });
	
	    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
	    addFormatToken(0, ['SSSS', 4], 0, function () {
	        return this.millisecond() * 10;
	    });
	    addFormatToken(0, ['SSSSS', 5], 0, function () {
	        return this.millisecond() * 100;
	    });
	    addFormatToken(0, ['SSSSSS', 6], 0, function () {
	        return this.millisecond() * 1000;
	    });
	    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
	        return this.millisecond() * 10000;
	    });
	    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
	        return this.millisecond() * 100000;
	    });
	    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
	        return this.millisecond() * 1000000;
	    });
	
	    // ALIASES
	
	    addUnitAlias('millisecond', 'ms');
	
	    // PRIORITY
	
	    addUnitPriority('millisecond', 16);
	
	    // PARSING
	
	    addRegexToken('S', match1to3, match1);
	    addRegexToken('SS', match1to3, match2);
	    addRegexToken('SSS', match1to3, match3);
	
	    var token, getSetMillisecond;
	    for (token = 'SSSS'; token.length <= 9; token += 'S') {
	        addRegexToken(token, matchUnsigned);
	    }
	
	    function parseMs(input, array) {
	        array[MILLISECOND] = toInt(('0.' + input) * 1000);
	    }
	
	    for (token = 'S'; token.length <= 9; token += 'S') {
	        addParseToken(token, parseMs);
	    }
	
	    getSetMillisecond = makeGetSet('Milliseconds', false);
	
	    // FORMATTING
	
	    addFormatToken('z', 0, 0, 'zoneAbbr');
	    addFormatToken('zz', 0, 0, 'zoneName');
	
	    // MOMENTS
	
	    function getZoneAbbr() {
	        return this._isUTC ? 'UTC' : '';
	    }
	
	    function getZoneName() {
	        return this._isUTC ? 'Coordinated Universal Time' : '';
	    }
	
	    var proto = Moment.prototype;
	
	    proto.add = add;
	    proto.calendar = calendar$1;
	    proto.clone = clone;
	    proto.diff = diff;
	    proto.endOf = endOf;
	    proto.format = format;
	    proto.from = from;
	    proto.fromNow = fromNow;
	    proto.to = to;
	    proto.toNow = toNow;
	    proto.get = stringGet;
	    proto.invalidAt = invalidAt;
	    proto.isAfter = isAfter;
	    proto.isBefore = isBefore;
	    proto.isBetween = isBetween;
	    proto.isSame = isSame;
	    proto.isSameOrAfter = isSameOrAfter;
	    proto.isSameOrBefore = isSameOrBefore;
	    proto.isValid = isValid$2;
	    proto.lang = lang;
	    proto.locale = locale;
	    proto.localeData = localeData;
	    proto.max = prototypeMax;
	    proto.min = prototypeMin;
	    proto.parsingFlags = parsingFlags;
	    proto.set = stringSet;
	    proto.startOf = startOf;
	    proto.subtract = subtract;
	    proto.toArray = toArray;
	    proto.toObject = toObject;
	    proto.toDate = toDate;
	    proto.toISOString = toISOString;
	    proto.inspect = inspect;
	    if (typeof Symbol !== 'undefined' && Symbol.for != null) {
	        proto[Symbol.for('nodejs.util.inspect.custom')] = function () {
	            return 'Moment<' + this.format() + '>';
	        };
	    }
	    proto.toJSON = toJSON;
	    proto.toString = toString;
	    proto.unix = unix;
	    proto.valueOf = valueOf;
	    proto.creationData = creationData;
	    proto.eraName = getEraName;
	    proto.eraNarrow = getEraNarrow;
	    proto.eraAbbr = getEraAbbr;
	    proto.eraYear = getEraYear;
	    proto.year = getSetYear;
	    proto.isLeapYear = getIsLeapYear;
	    proto.weekYear = getSetWeekYear;
	    proto.isoWeekYear = getSetISOWeekYear;
	    proto.quarter = proto.quarters = getSetQuarter;
	    proto.month = getSetMonth;
	    proto.daysInMonth = getDaysInMonth;
	    proto.week = proto.weeks = getSetWeek;
	    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
	    proto.weeksInYear = getWeeksInYear;
	    proto.weeksInWeekYear = getWeeksInWeekYear;
	    proto.isoWeeksInYear = getISOWeeksInYear;
	    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
	    proto.date = getSetDayOfMonth;
	    proto.day = proto.days = getSetDayOfWeek;
	    proto.weekday = getSetLocaleDayOfWeek;
	    proto.isoWeekday = getSetISODayOfWeek;
	    proto.dayOfYear = getSetDayOfYear;
	    proto.hour = proto.hours = getSetHour;
	    proto.minute = proto.minutes = getSetMinute;
	    proto.second = proto.seconds = getSetSecond;
	    proto.millisecond = proto.milliseconds = getSetMillisecond;
	    proto.utcOffset = getSetOffset;
	    proto.utc = setOffsetToUTC;
	    proto.local = setOffsetToLocal;
	    proto.parseZone = setOffsetToParsedOffset;
	    proto.hasAlignedHourOffset = hasAlignedHourOffset;
	    proto.isDST = isDaylightSavingTime;
	    proto.isLocal = isLocal;
	    proto.isUtcOffset = isUtcOffset;
	    proto.isUtc = isUtc;
	    proto.isUTC = isUtc;
	    proto.zoneAbbr = getZoneAbbr;
	    proto.zoneName = getZoneName;
	    proto.dates = deprecate(
	        'dates accessor is deprecated. Use date instead.',
	        getSetDayOfMonth
	    );
	    proto.months = deprecate(
	        'months accessor is deprecated. Use month instead',
	        getSetMonth
	    );
	    proto.years = deprecate(
	        'years accessor is deprecated. Use year instead',
	        getSetYear
	    );
	    proto.zone = deprecate(
	        'moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',
	        getSetZone
	    );
	    proto.isDSTShifted = deprecate(
	        'isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',
	        isDaylightSavingTimeShifted
	    );
	
	    function createUnix(input) {
	        return createLocal(input * 1000);
	    }
	
	    function createInZone() {
	        return createLocal.apply(null, arguments).parseZone();
	    }
	
	    function preParsePostFormat(string) {
	        return string;
	    }
	
	    var proto$1 = Locale.prototype;
	
	    proto$1.calendar = calendar;
	    proto$1.longDateFormat = longDateFormat;
	    proto$1.invalidDate = invalidDate;
	    proto$1.ordinal = ordinal;
	    proto$1.preparse = preParsePostFormat;
	    proto$1.postformat = preParsePostFormat;
	    proto$1.relativeTime = relativeTime;
	    proto$1.pastFuture = pastFuture;
	    proto$1.set = set;
	    proto$1.eras = localeEras;
	    proto$1.erasParse = localeErasParse;
	    proto$1.erasConvertYear = localeErasConvertYear;
	    proto$1.erasAbbrRegex = erasAbbrRegex;
	    proto$1.erasNameRegex = erasNameRegex;
	    proto$1.erasNarrowRegex = erasNarrowRegex;
	
	    proto$1.months = localeMonths;
	    proto$1.monthsShort = localeMonthsShort;
	    proto$1.monthsParse = localeMonthsParse;
	    proto$1.monthsRegex = monthsRegex;
	    proto$1.monthsShortRegex = monthsShortRegex;
	    proto$1.week = localeWeek;
	    proto$1.firstDayOfYear = localeFirstDayOfYear;
	    proto$1.firstDayOfWeek = localeFirstDayOfWeek;
	
	    proto$1.weekdays = localeWeekdays;
	    proto$1.weekdaysMin = localeWeekdaysMin;
	    proto$1.weekdaysShort = localeWeekdaysShort;
	    proto$1.weekdaysParse = localeWeekdaysParse;
	
	    proto$1.weekdaysRegex = weekdaysRegex;
	    proto$1.weekdaysShortRegex = weekdaysShortRegex;
	    proto$1.weekdaysMinRegex = weekdaysMinRegex;
	
	    proto$1.isPM = localeIsPM;
	    proto$1.meridiem = localeMeridiem;
	
	    function get$1(format, index, field, setter) {
	        var locale = getLocale(),
	            utc = createUTC().set(setter, index);
	        return locale[field](utc, format);
	    }
	
	    function listMonthsImpl(format, index, field) {
	        if (isNumber(format)) {
	            index = format;
	            format = undefined;
	        }
	
	        format = format || '';
	
	        if (index != null) {
	            return get$1(format, index, field, 'month');
	        }
	
	        var i,
	            out = [];
	        for (i = 0; i < 12; i++) {
	            out[i] = get$1(format, i, field, 'month');
	        }
	        return out;
	    }
	
	    // ()
	    // (5)
	    // (fmt, 5)
	    // (fmt)
	    // (true)
	    // (true, 5)
	    // (true, fmt, 5)
	    // (true, fmt)
	    function listWeekdaysImpl(localeSorted, format, index, field) {
	        if (typeof localeSorted === 'boolean') {
	            if (isNumber(format)) {
	                index = format;
	                format = undefined;
	            }
	
	            format = format || '';
	        } else {
	            format = localeSorted;
	            index = format;
	            localeSorted = false;
	
	            if (isNumber(format)) {
	                index = format;
	                format = undefined;
	            }
	
	            format = format || '';
	        }
	
	        var locale = getLocale(),
	            shift = localeSorted ? locale._week.dow : 0,
	            i,
	            out = [];
	
	        if (index != null) {
	            return get$1(format, (index + shift) % 7, field, 'day');
	        }
	
	        for (i = 0; i < 7; i++) {
	            out[i] = get$1(format, (i + shift) % 7, field, 'day');
	        }
	        return out;
	    }
	
	    function listMonths(format, index) {
	        return listMonthsImpl(format, index, 'months');
	    }
	
	    function listMonthsShort(format, index) {
	        return listMonthsImpl(format, index, 'monthsShort');
	    }
	
	    function listWeekdays(localeSorted, format, index) {
	        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
	    }
	
	    function listWeekdaysShort(localeSorted, format, index) {
	        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
	    }
	
	    function listWeekdaysMin(localeSorted, format, index) {
	        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
	    }
	
	    getSetGlobalLocale('en', {
	        eras: [
	            {
	                since: '0001-01-01',
	                until: +Infinity,
	                offset: 1,
	                name: 'Anno Domini',
	                narrow: 'AD',
	                abbr: 'AD',
	            },
	            {
	                since: '0000-12-31',
	                until: -Infinity,
	                offset: 1,
	                name: 'Before Christ',
	                narrow: 'BC',
	                abbr: 'BC',
	            },
	        ],
	        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
	        ordinal: function (number) {
	            var b = number % 10,
	                output =
	                    toInt((number % 100) / 10) === 1
	                        ? 'th'
	                        : b === 1
	                        ? 'st'
	                        : b === 2
	                        ? 'nd'
	                        : b === 3
	                        ? 'rd'
	                        : 'th';
	            return number + output;
	        },
	    });
	
	    // Side effect imports
	
	    hooks.lang = deprecate(
	        'moment.lang is deprecated. Use moment.locale instead.',
	        getSetGlobalLocale
	    );
	    hooks.langData = deprecate(
	        'moment.langData is deprecated. Use moment.localeData instead.',
	        getLocale
	    );
	
	    var mathAbs = Math.abs;
	
	    function abs() {
	        var data = this._data;
	
	        this._milliseconds = mathAbs(this._milliseconds);
	        this._days = mathAbs(this._days);
	        this._months = mathAbs(this._months);
	
	        data.milliseconds = mathAbs(data.milliseconds);
	        data.seconds = mathAbs(data.seconds);
	        data.minutes = mathAbs(data.minutes);
	        data.hours = mathAbs(data.hours);
	        data.months = mathAbs(data.months);
	        data.years = mathAbs(data.years);
	
	        return this;
	    }
	
	    function addSubtract$1(duration, input, value, direction) {
	        var other = createDuration(input, value);
	
	        duration._milliseconds += direction * other._milliseconds;
	        duration._days += direction * other._days;
	        duration._months += direction * other._months;
	
	        return duration._bubble();
	    }
	
	    // supports only 2.0-style add(1, 's') or add(duration)
	    function add$1(input, value) {
	        return addSubtract$1(this, input, value, 1);
	    }
	
	    // supports only 2.0-style subtract(1, 's') or subtract(duration)
	    function subtract$1(input, value) {
	        return addSubtract$1(this, input, value, -1);
	    }
	
	    function absCeil(number) {
	        if (number < 0) {
	            return Math.floor(number);
	        } else {
	            return Math.ceil(number);
	        }
	    }
	
	    function bubble() {
	        var milliseconds = this._milliseconds,
	            days = this._days,
	            months = this._months,
	            data = this._data,
	            seconds,
	            minutes,
	            hours,
	            years,
	            monthsFromDays;
	
	        // if we have a mix of positive and negative values, bubble down first
	        // check: https://github.com/moment/moment/issues/2166
	        if (
	            !(
	                (milliseconds >= 0 && days >= 0 && months >= 0) ||
	                (milliseconds <= 0 && days <= 0 && months <= 0)
	            )
	        ) {
	            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
	            days = 0;
	            months = 0;
	        }
	
	        // The following code bubbles up values, see the tests for
	        // examples of what that means.
	        data.milliseconds = milliseconds % 1000;
	
	        seconds = absFloor(milliseconds / 1000);
	        data.seconds = seconds % 60;
	
	        minutes = absFloor(seconds / 60);
	        data.minutes = minutes % 60;
	
	        hours = absFloor(minutes / 60);
	        data.hours = hours % 24;
	
	        days += absFloor(hours / 24);
	
	        // convert days to months
	        monthsFromDays = absFloor(daysToMonths(days));
	        months += monthsFromDays;
	        days -= absCeil(monthsToDays(monthsFromDays));
	
	        // 12 months -> 1 year
	        years = absFloor(months / 12);
	        months %= 12;
	
	        data.days = days;
	        data.months = months;
	        data.years = years;
	
	        return this;
	    }
	
	    function daysToMonths(days) {
	        // 400 years have 146097 days (taking into account leap year rules)
	        // 400 years have 12 months === 4800
	        return (days * 4800) / 146097;
	    }
	
	    function monthsToDays(months) {
	        // the reverse of daysToMonths
	        return (months * 146097) / 4800;
	    }
	
	    function as(units) {
	        if (!this.isValid()) {
	            return NaN;
	        }
	        var days,
	            months,
	            milliseconds = this._milliseconds;
	
	        units = normalizeUnits(units);
	
	        if (units === 'month' || units === 'quarter' || units === 'year') {
	            days = this._days + milliseconds / 864e5;
	            months = this._months + daysToMonths(days);
	            switch (units) {
	                case 'month':
	                    return months;
	                case 'quarter':
	                    return months / 3;
	                case 'year':
	                    return months / 12;
	            }
	        } else {
	            // handle milliseconds separately because of floating point math errors (issue #1867)
	            days = this._days + Math.round(monthsToDays(this._months));
	            switch (units) {
	                case 'week':
	                    return days / 7 + milliseconds / 6048e5;
	                case 'day':
	                    return days + milliseconds / 864e5;
	                case 'hour':
	                    return days * 24 + milliseconds / 36e5;
	                case 'minute':
	                    return days * 1440 + milliseconds / 6e4;
	                case 'second':
	                    return days * 86400 + milliseconds / 1000;
	                // Math.floor prevents floating point math errors here
	                case 'millisecond':
	                    return Math.floor(days * 864e5) + milliseconds;
	                default:
	                    throw new Error('Unknown unit ' + units);
	            }
	        }
	    }
	
	    // TODO: Use this.as('ms')?
	    function valueOf$1() {
	        if (!this.isValid()) {
	            return NaN;
	        }
	        return (
	            this._milliseconds +
	            this._days * 864e5 +
	            (this._months % 12) * 2592e6 +
	            toInt(this._months / 12) * 31536e6
	        );
	    }
	
	    function makeAs(alias) {
	        return function () {
	            return this.as(alias);
	        };
	    }
	
	    var asMilliseconds = makeAs('ms'),
	        asSeconds = makeAs('s'),
	        asMinutes = makeAs('m'),
	        asHours = makeAs('h'),
	        asDays = makeAs('d'),
	        asWeeks = makeAs('w'),
	        asMonths = makeAs('M'),
	        asQuarters = makeAs('Q'),
	        asYears = makeAs('y');
	
	    function clone$1() {
	        return createDuration(this);
	    }
	
	    function get$2(units) {
	        units = normalizeUnits(units);
	        return this.isValid() ? this[units + 's']() : NaN;
	    }
	
	    function makeGetter(name) {
	        return function () {
	            return this.isValid() ? this._data[name] : NaN;
	        };
	    }
	
	    var milliseconds = makeGetter('milliseconds'),
	        seconds = makeGetter('seconds'),
	        minutes = makeGetter('minutes'),
	        hours = makeGetter('hours'),
	        days = makeGetter('days'),
	        months = makeGetter('months'),
	        years = makeGetter('years');
	
	    function weeks() {
	        return absFloor(this.days() / 7);
	    }
	
	    var round = Math.round,
	        thresholds = {
	            ss: 44, // a few seconds to seconds
	            s: 45, // seconds to minute
	            m: 45, // minutes to hour
	            h: 22, // hours to day
	            d: 26, // days to month/week
	            w: null, // weeks to month
	            M: 11, // months to year
	        };
	
	    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
	    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
	        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
	    }
	
	    function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
	        var duration = createDuration(posNegDuration).abs(),
	            seconds = round(duration.as('s')),
	            minutes = round(duration.as('m')),
	            hours = round(duration.as('h')),
	            days = round(duration.as('d')),
	            months = round(duration.as('M')),
	            weeks = round(duration.as('w')),
	            years = round(duration.as('y')),
	            a =
	                (seconds <= thresholds.ss && ['s', seconds]) ||
	                (seconds < thresholds.s && ['ss', seconds]) ||
	                (minutes <= 1 && ['m']) ||
	                (minutes < thresholds.m && ['mm', minutes]) ||
	                (hours <= 1 && ['h']) ||
	                (hours < thresholds.h && ['hh', hours]) ||
	                (days <= 1 && ['d']) ||
	                (days < thresholds.d && ['dd', days]);
	
	        if (thresholds.w != null) {
	            a =
	                a ||
	                (weeks <= 1 && ['w']) ||
	                (weeks < thresholds.w && ['ww', weeks]);
	        }
	        a = a ||
	            (months <= 1 && ['M']) ||
	            (months < thresholds.M && ['MM', months]) ||
	            (years <= 1 && ['y']) || ['yy', years];
	
	        a[2] = withoutSuffix;
	        a[3] = +posNegDuration > 0;
	        a[4] = locale;
	        return substituteTimeAgo.apply(null, a);
	    }
	
	    // This function allows you to set the rounding function for relative time strings
	    function getSetRelativeTimeRounding(roundingFunction) {
	        if (roundingFunction === undefined) {
	            return round;
	        }
	        if (typeof roundingFunction === 'function') {
	            round = roundingFunction;
	            return true;
	        }
	        return false;
	    }
	
	    // This function allows you to set a threshold for relative time strings
	    function getSetRelativeTimeThreshold(threshold, limit) {
	        if (thresholds[threshold] === undefined) {
	            return false;
	        }
	        if (limit === undefined) {
	            return thresholds[threshold];
	        }
	        thresholds[threshold] = limit;
	        if (threshold === 's') {
	            thresholds.ss = limit - 1;
	        }
	        return true;
	    }
	
	    function humanize(argWithSuffix, argThresholds) {
	        if (!this.isValid()) {
	            return this.localeData().invalidDate();
	        }
	
	        var withSuffix = false,
	            th = thresholds,
	            locale,
	            output;
	
	        if (typeof argWithSuffix === 'object') {
	            argThresholds = argWithSuffix;
	            argWithSuffix = false;
	        }
	        if (typeof argWithSuffix === 'boolean') {
	            withSuffix = argWithSuffix;
	        }
	        if (typeof argThresholds === 'object') {
	            th = Object.assign({}, thresholds, argThresholds);
	            if (argThresholds.s != null && argThresholds.ss == null) {
	                th.ss = argThresholds.s - 1;
	            }
	        }
	
	        locale = this.localeData();
	        output = relativeTime$1(this, !withSuffix, th, locale);
	
	        if (withSuffix) {
	            output = locale.pastFuture(+this, output);
	        }
	
	        return locale.postformat(output);
	    }
	
	    var abs$1 = Math.abs;
	
	    function sign(x) {
	        return (x > 0) - (x < 0) || +x;
	    }
	
	    function toISOString$1() {
	        // for ISO strings we do not use the normal bubbling rules:
	        //  * milliseconds bubble up until they become hours
	        //  * days do not bubble at all
	        //  * months bubble up until they become years
	        // This is because there is no context-free conversion between hours and days
	        // (think of clock changes)
	        // and also not between days and months (28-31 days per month)
	        if (!this.isValid()) {
	            return this.localeData().invalidDate();
	        }
	
	        var seconds = abs$1(this._milliseconds) / 1000,
	            days = abs$1(this._days),
	            months = abs$1(this._months),
	            minutes,
	            hours,
	            years,
	            s,
	            total = this.asSeconds(),
	            totalSign,
	            ymSign,
	            daysSign,
	            hmsSign;
	
	        if (!total) {
	            // this is the same as C#'s (Noda) and python (isodate)...
	            // but not other JS (goog.date)
	            return 'P0D';
	        }
	
	        // 3600 seconds -> 60 minutes -> 1 hour
	        minutes = absFloor(seconds / 60);
	        hours = absFloor(minutes / 60);
	        seconds %= 60;
	        minutes %= 60;
	
	        // 12 months -> 1 year
	        years = absFloor(months / 12);
	        months %= 12;
	
	        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
	        s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
	
	        totalSign = total < 0 ? '-' : '';
	        ymSign = sign(this._months) !== sign(total) ? '-' : '';
	        daysSign = sign(this._days) !== sign(total) ? '-' : '';
	        hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';
	
	        return (
	            totalSign +
	            'P' +
	            (years ? ymSign + years + 'Y' : '') +
	            (months ? ymSign + months + 'M' : '') +
	            (days ? daysSign + days + 'D' : '') +
	            (hours || minutes || seconds ? 'T' : '') +
	            (hours ? hmsSign + hours + 'H' : '') +
	            (minutes ? hmsSign + minutes + 'M' : '') +
	            (seconds ? hmsSign + s + 'S' : '')
	        );
	    }
	
	    var proto$2 = Duration.prototype;
	
	    proto$2.isValid = isValid$1;
	    proto$2.abs = abs;
	    proto$2.add = add$1;
	    proto$2.subtract = subtract$1;
	    proto$2.as = as;
	    proto$2.asMilliseconds = asMilliseconds;
	    proto$2.asSeconds = asSeconds;
	    proto$2.asMinutes = asMinutes;
	    proto$2.asHours = asHours;
	    proto$2.asDays = asDays;
	    proto$2.asWeeks = asWeeks;
	    proto$2.asMonths = asMonths;
	    proto$2.asQuarters = asQuarters;
	    proto$2.asYears = asYears;
	    proto$2.valueOf = valueOf$1;
	    proto$2._bubble = bubble;
	    proto$2.clone = clone$1;
	    proto$2.get = get$2;
	    proto$2.milliseconds = milliseconds;
	    proto$2.seconds = seconds;
	    proto$2.minutes = minutes;
	    proto$2.hours = hours;
	    proto$2.days = days;
	    proto$2.weeks = weeks;
	    proto$2.months = months;
	    proto$2.years = years;
	    proto$2.humanize = humanize;
	    proto$2.toISOString = toISOString$1;
	    proto$2.toString = toISOString$1;
	    proto$2.toJSON = toISOString$1;
	    proto$2.locale = locale;
	    proto$2.localeData = localeData;
	
	    proto$2.toIsoString = deprecate(
	        'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',
	        toISOString$1
	    );
	    proto$2.lang = lang;
	
	    // FORMATTING
	
	    addFormatToken('X', 0, 0, 'unix');
	    addFormatToken('x', 0, 0, 'valueOf');
	
	    // PARSING
	
	    addRegexToken('x', matchSigned);
	    addRegexToken('X', matchTimestamp);
	    addParseToken('X', function (input, array, config) {
	        config._d = new Date(parseFloat(input) * 1000);
	    });
	    addParseToken('x', function (input, array, config) {
	        config._d = new Date(toInt(input));
	    });
	
	    //! moment.js
	
	    hooks.version = '2.29.1';
	
	    setHookCallback(createLocal);
	
	    hooks.fn = proto;
	    hooks.min = min;
	    hooks.max = max;
	    hooks.now = now;
	    hooks.utc = createUTC;
	    hooks.unix = createUnix;
	    hooks.months = listMonths;
	    hooks.isDate = isDate;
	    hooks.locale = getSetGlobalLocale;
	    hooks.invalid = createInvalid;
	    hooks.duration = createDuration;
	    hooks.isMoment = isMoment;
	    hooks.weekdays = listWeekdays;
	    hooks.parseZone = createInZone;
	    hooks.localeData = getLocale;
	    hooks.isDuration = isDuration;
	    hooks.monthsShort = listMonthsShort;
	    hooks.weekdaysMin = listWeekdaysMin;
	    hooks.defineLocale = defineLocale;
	    hooks.updateLocale = updateLocale;
	    hooks.locales = listLocales;
	    hooks.weekdaysShort = listWeekdaysShort;
	    hooks.normalizeUnits = normalizeUnits;
	    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
	    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
	    hooks.calendarFormat = getCalendarFormat;
	    hooks.prototype = proto;
	
	    // currently HTML5 input type only supports 24-hour formats
	    hooks.HTML5_FMT = {
	        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // <input type="datetime-local" />
	        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss', // <input type="datetime-local" step="1" />
	        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS', // <input type="datetime-local" step="0.001" />
	        DATE: 'YYYY-MM-DD', // <input type="date" />
	        TIME: 'HH:mm', // <input type="time" />
	        TIME_SECONDS: 'HH:mm:ss', // <input type="time" step="1" />
	        TIME_MS: 'HH:mm:ss.SSS', // <input type="time" step="0.001" />
	        WEEK: 'GGGG-[W]WW', // <input type="week" />
	        MONTH: 'YYYY-MM', // <input type="month" />
	    };
	
	    return hooks;
	
	})));
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(31)(module)))

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

	var map = {
		"./en-gb": 44,
		"./en-gb.js": 44
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 43;


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (United Kingdom) [en-gb]
	//! author : Chris Gedrim : https://github.com/chrisgedrim
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(42)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var enGb = moment.defineLocale('en-gb', {
	        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
	            '_'
	        ),
	        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
	            '_'
	        ),
	        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Today at] LT',
	            nextDay: '[Tomorrow at] LT',
	            nextWeek: 'dddd [at] LT',
	            lastDay: '[Yesterday at] LT',
	            lastWeek: '[Last] dddd [at] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'in %s',
	            past: '%s ago',
	            s: 'a few seconds',
	            ss: '%d seconds',
	            m: 'a minute',
	            mm: '%d minutes',
	            h: 'an hour',
	            hh: '%d hours',
	            d: 'a day',
	            dd: '%d days',
	            M: 'a month',
	            MM: '%d months',
	            y: 'a year',
	            yy: '%d years',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal: function (number) {
	            var b = number % 10,
	                output =
	                    ~~((number % 100) / 10) === 1
	                        ? 'th'
	                        : b === 1
	                        ? 'st'
	                        : b === 2
	                        ? 'nd'
	                        : b === 3
	                        ? 'rd'
	                        : 'th';
	            return number + output;
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return enGb;
	
	})));


/***/ }),
/* 45 */
/***/ (function(module, exports) {

	exports = module.exports = stringify
	exports.getSerialize = serializer
	
	function stringify(obj, replacer, spaces, cycleReplacer) {
	  return JSON.stringify(obj, serializer(replacer, cycleReplacer), spaces)
	}
	
	function serializer(replacer, cycleReplacer) {
	  var stack = [], keys = []
	
	  if (cycleReplacer == null) cycleReplacer = function(key, value) {
	    if (stack[0] === value) return "[Circular ~]"
	    return "[Circular ~." + keys.slice(0, stack.indexOf(value)).join(".") + "]"
	  }
	
	  return function(key, value) {
	    if (stack.length > 0) {
	      var thisPos = stack.indexOf(this)
	      ~thisPos ? stack.splice(thisPos + 1) : stack.push(this)
	      ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key)
	      if (~stack.indexOf(value)) value = cycleReplacer.call(this, key, value)
	    }
	    else stack.push(value)
	
	    return replacer == null ? value : replacer.call(this, key, value)
	  }
	}


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

	/*!
	 * FullCalendar v3.10.2
	 * Docs & License: https://fullcalendar.io/
	 * (c) 2019 Adam Shaw
	 */
	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory(__webpack_require__(42), __webpack_require__(1));
		else if(typeof define === 'function' && define.amd)
			define(["moment", "jquery"], factory);
		else if(typeof exports === 'object')
			exports["FullCalendar"] = factory(require("moment"), require("jquery"));
		else
			root["FullCalendar"] = factory(root["moment"], root["jQuery"]);
	})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_3__) {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, {
	/******/ 				configurable: false,
	/******/ 				enumerable: true,
	/******/ 				get: getter
	/******/ 			});
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 256);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ (function(module, exports) {
	
	module.exports = __WEBPACK_EXTERNAL_MODULE_0__;
	
	/***/ }),
	/* 1 */,
	/* 2 */
	/***/ (function(module, exports) {
	
	/*
	derived from:
	https://github.com/Microsoft/tslib/blob/v1.6.0/tslib.js
	
	only include the helpers we need, to keep down filesize
	*/
	var extendStatics = Object.setPrototypeOf ||
	    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	    function (d, b) { for (var p in b)
	        if (b.hasOwnProperty(p))
	            d[p] = b[p]; };
	exports.__extends = function (d, b) {
	    extendStatics(d, b);
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	
	
	/***/ }),
	/* 3 */
	/***/ (function(module, exports) {
	
	module.exports = __WEBPACK_EXTERNAL_MODULE_3__;
	
	/***/ }),
	/* 4 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var moment = __webpack_require__(0);
	var $ = __webpack_require__(3);
	/* FullCalendar-specific DOM Utilities
	----------------------------------------------------------------------------------------------------------------------*/
	// Given the scrollbar widths of some other container, create borders/margins on rowEls in order to match the left
	// and right space that was offset by the scrollbars. A 1-pixel border first, then margin beyond that.
	function compensateScroll(rowEls, scrollbarWidths) {
	    if (scrollbarWidths.left) {
	        rowEls.css({
	            'border-left-width': 1,
	            'margin-left': scrollbarWidths.left - 1
	        });
	    }
	    if (scrollbarWidths.right) {
	        rowEls.css({
	            'border-right-width': 1,
	            'margin-right': scrollbarWidths.right - 1
	        });
	    }
	}
	exports.compensateScroll = compensateScroll;
	// Undoes compensateScroll and restores all borders/margins
	function uncompensateScroll(rowEls) {
	    rowEls.css({
	        'margin-left': '',
	        'margin-right': '',
	        'border-left-width': '',
	        'border-right-width': ''
	    });
	}
	exports.uncompensateScroll = uncompensateScroll;
	// Make the mouse cursor express that an event is not allowed in the current area
	function disableCursor() {
	    $('body').addClass('fc-not-allowed');
	}
	exports.disableCursor = disableCursor;
	// Returns the mouse cursor to its original look
	function enableCursor() {
	    $('body').removeClass('fc-not-allowed');
	}
	exports.enableCursor = enableCursor;
	// Given a total available height to fill, have `els` (essentially child rows) expand to accomodate.
	// By default, all elements that are shorter than the recommended height are expanded uniformly, not considering
	// any other els that are already too tall. if `shouldRedistribute` is on, it considers these tall rows and
	// reduces the available height.
	function distributeHeight(els, availableHeight, shouldRedistribute) {
	    // *FLOORING NOTE*: we floor in certain places because zoom can give inaccurate floating-point dimensions,
	    // and it is better to be shorter than taller, to avoid creating unnecessary scrollbars.
	    var minOffset1 = Math.floor(availableHeight / els.length); // for non-last element
	    var minOffset2 = Math.floor(availableHeight - minOffset1 * (els.length - 1)); // for last element *FLOORING NOTE*
	    var flexEls = []; // elements that are allowed to expand. array of DOM nodes
	    var flexOffsets = []; // amount of vertical space it takes up
	    var flexHeights = []; // actual css height
	    var usedHeight = 0;
	    undistributeHeight(els); // give all elements their natural height
	    // find elements that are below the recommended height (expandable).
	    // important to query for heights in a single first pass (to avoid reflow oscillation).
	    els.each(function (i, el) {
	        var minOffset = i === els.length - 1 ? minOffset2 : minOffset1;
	        var naturalOffset = $(el).outerHeight(true);
	        if (naturalOffset < minOffset) {
	            flexEls.push(el);
	            flexOffsets.push(naturalOffset);
	            flexHeights.push($(el).height());
	        }
	        else {
	            // this element stretches past recommended height (non-expandable). mark the space as occupied.
	            usedHeight += naturalOffset;
	        }
	    });
	    // readjust the recommended height to only consider the height available to non-maxed-out rows.
	    if (shouldRedistribute) {
	        availableHeight -= usedHeight;
	        minOffset1 = Math.floor(availableHeight / flexEls.length);
	        minOffset2 = Math.floor(availableHeight - minOffset1 * (flexEls.length - 1)); // *FLOORING NOTE*
	    }
	    // assign heights to all expandable elements
	    $(flexEls).each(function (i, el) {
	        var minOffset = i === flexEls.length - 1 ? minOffset2 : minOffset1;
	        var naturalOffset = flexOffsets[i];
	        var naturalHeight = flexHeights[i];
	        var newHeight = minOffset - (naturalOffset - naturalHeight); // subtract the margin/padding
	        if (naturalOffset < minOffset) { // we check this again because redistribution might have changed things
	            $(el).height(newHeight);
	        }
	    });
	}
	exports.distributeHeight = distributeHeight;
	// Undoes distrubuteHeight, restoring all els to their natural height
	function undistributeHeight(els) {
	    els.height('');
	}
	exports.undistributeHeight = undistributeHeight;
	// Given `els`, a jQuery set of <td> cells, find the cell with the largest natural width and set the widths of all the
	// cells to be that width.
	// PREREQUISITE: if you want a cell to take up width, it needs to have a single inner element w/ display:inline
	function matchCellWidths(els) {
	    var maxInnerWidth = 0;
	    els.find('> *').each(function (i, innerEl) {
	        var innerWidth = $(innerEl).outerWidth();
	        if (innerWidth > maxInnerWidth) {
	            maxInnerWidth = innerWidth;
	        }
	    });
	    maxInnerWidth++; // sometimes not accurate of width the text needs to stay on one line. insurance
	    els.width(maxInnerWidth);
	    return maxInnerWidth;
	}
	exports.matchCellWidths = matchCellWidths;
	// Given one element that resides inside another,
	// Subtracts the height of the inner element from the outer element.
	function subtractInnerElHeight(outerEl, innerEl) {
	    var both = outerEl.add(innerEl);
	    var diff;
	    // effin' IE8/9/10/11 sometimes returns 0 for dimensions. this weird hack was the only thing that worked
	    both.css({
	        position: 'relative',
	        left: -1 // ensure reflow in case the el was already relative. negative is less likely to cause new scroll
	    });
	    diff = outerEl.outerHeight() - innerEl.outerHeight(); // grab the dimensions
	    both.css({ position: '', left: '' }); // undo hack
	    return diff;
	}
	exports.subtractInnerElHeight = subtractInnerElHeight;
	/* Element Geom Utilities
	----------------------------------------------------------------------------------------------------------------------*/
	// borrowed from https://github.com/jquery/jquery-ui/blob/1.11.0/ui/core.js#L51
	function getScrollParent(el) {
	    var position = el.css('position');
	    var scrollParent = el.parents().filter(function () {
	        var parent = $(this);
	        return (/(auto|scroll)/).test(parent.css('overflow') + parent.css('overflow-y') + parent.css('overflow-x'));
	    }).eq(0);
	    return position === 'fixed' || !scrollParent.length ? $(el[0].ownerDocument || document) : scrollParent;
	}
	exports.getScrollParent = getScrollParent;
	// Queries the outer bounding area of a jQuery element.
	// Returns a rectangle with absolute coordinates: left, right (exclusive), top, bottom (exclusive).
	// Origin is optional.
	function getOuterRect(el, origin) {
	    var offset = el.offset();
	    var left = offset.left - (origin ? origin.left : 0);
	    var top = offset.top - (origin ? origin.top : 0);
	    return {
	        left: left,
	        right: left + el.outerWidth(),
	        top: top,
	        bottom: top + el.outerHeight()
	    };
	}
	exports.getOuterRect = getOuterRect;
	// Queries the area within the margin/border/scrollbars of a jQuery element. Does not go within the padding.
	// Returns a rectangle with absolute coordinates: left, right (exclusive), top, bottom (exclusive).
	// Origin is optional.
	// WARNING: given element can't have borders
	// NOTE: should use clientLeft/clientTop, but very unreliable cross-browser.
	function getClientRect(el, origin) {
	    var offset = el.offset();
	    var scrollbarWidths = getScrollbarWidths(el);
	    var left = offset.left + getCssFloat(el, 'border-left-width') + scrollbarWidths.left - (origin ? origin.left : 0);
	    var top = offset.top + getCssFloat(el, 'border-top-width') + scrollbarWidths.top - (origin ? origin.top : 0);
	    return {
	        left: left,
	        right: left + el[0].clientWidth,
	        top: top,
	        bottom: top + el[0].clientHeight // clientHeight includes padding but NOT scrollbars
	    };
	}
	exports.getClientRect = getClientRect;
	// Queries the area within the margin/border/padding of a jQuery element. Assumed not to have scrollbars.
	// Returns a rectangle with absolute coordinates: left, right (exclusive), top, bottom (exclusive).
	// Origin is optional.
	function getContentRect(el, origin) {
	    var offset = el.offset(); // just outside of border, margin not included
	    var left = offset.left + getCssFloat(el, 'border-left-width') + getCssFloat(el, 'padding-left') -
	        (origin ? origin.left : 0);
	    var top = offset.top + getCssFloat(el, 'border-top-width') + getCssFloat(el, 'padding-top') -
	        (origin ? origin.top : 0);
	    return {
	        left: left,
	        right: left + el.width(),
	        top: top,
	        bottom: top + el.height()
	    };
	}
	exports.getContentRect = getContentRect;
	// Returns the computed left/right/top/bottom scrollbar widths for the given jQuery element.
	// WARNING: given element can't have borders (which will cause offsetWidth/offsetHeight to be larger).
	// NOTE: should use clientLeft/clientTop, but very unreliable cross-browser.
	function getScrollbarWidths(el) {
	    var leftRightWidth = el[0].offsetWidth - el[0].clientWidth;
	    var bottomWidth = el[0].offsetHeight - el[0].clientHeight;
	    var widths;
	    leftRightWidth = sanitizeScrollbarWidth(leftRightWidth);
	    bottomWidth = sanitizeScrollbarWidth(bottomWidth);
	    widths = { left: 0, right: 0, top: 0, bottom: bottomWidth };
	    if (getIsLeftRtlScrollbars() && el.css('direction') === 'rtl') { // is the scrollbar on the left side?
	        widths.left = leftRightWidth;
	    }
	    else {
	        widths.right = leftRightWidth;
	    }
	    return widths;
	}
	exports.getScrollbarWidths = getScrollbarWidths;
	// The scrollbar width computations in getScrollbarWidths are sometimes flawed when it comes to
	// retina displays, rounding, and IE11. Massage them into a usable value.
	function sanitizeScrollbarWidth(width) {
	    width = Math.max(0, width); // no negatives
	    width = Math.round(width);
	    return width;
	}
	// Logic for determining if, when the element is right-to-left, the scrollbar appears on the left side
	var _isLeftRtlScrollbars = null;
	function getIsLeftRtlScrollbars() {
	    if (_isLeftRtlScrollbars === null) {
	        _isLeftRtlScrollbars = computeIsLeftRtlScrollbars();
	    }
	    return _isLeftRtlScrollbars;
	}
	function computeIsLeftRtlScrollbars() {
	    var el = $('<div><div></div></div>')
	        .css({
	        position: 'absolute',
	        top: -1000,
	        left: 0,
	        border: 0,
	        padding: 0,
	        overflow: 'scroll',
	        direction: 'rtl'
	    })
	        .appendTo('body');
	    var innerEl = el.children();
	    var res = innerEl.offset().left > el.offset().left; // is the inner div shifted to accommodate a left scrollbar?
	    el.remove();
	    return res;
	}
	// Retrieves a jQuery element's computed CSS value as a floating-point number.
	// If the queried value is non-numeric (ex: IE can return "medium" for border width), will just return zero.
	function getCssFloat(el, prop) {
	    return parseFloat(el.css(prop)) || 0;
	}
	/* Mouse / Touch Utilities
	----------------------------------------------------------------------------------------------------------------------*/
	// Returns a boolean whether this was a left mouse click and no ctrl key (which means right click on Mac)
	function isPrimaryMouseButton(ev) {
	    return ev.which === 1 && !ev.ctrlKey;
	}
	exports.isPrimaryMouseButton = isPrimaryMouseButton;
	function getEvX(ev) {
	    var touches = ev.originalEvent.touches;
	    // on mobile FF, pageX for touch events is present, but incorrect,
	    // so, look at touch coordinates first.
	    if (touches && touches.length) {
	        return touches[0].pageX;
	    }
	    return ev.pageX;
	}
	exports.getEvX = getEvX;
	function getEvY(ev) {
	    var touches = ev.originalEvent.touches;
	    // on mobile FF, pageX for touch events is present, but incorrect,
	    // so, look at touch coordinates first.
	    if (touches && touches.length) {
	        return touches[0].pageY;
	    }
	    return ev.pageY;
	}
	exports.getEvY = getEvY;
	function getEvIsTouch(ev) {
	    return /^touch/.test(ev.type);
	}
	exports.getEvIsTouch = getEvIsTouch;
	function preventSelection(el) {
	    el.addClass('fc-unselectable')
	        .on('selectstart', preventDefault);
	}
	exports.preventSelection = preventSelection;
	function allowSelection(el) {
	    el.removeClass('fc-unselectable')
	        .off('selectstart', preventDefault);
	}
	exports.allowSelection = allowSelection;
	// Stops a mouse/touch event from doing it's native browser action
	function preventDefault(ev) {
	    ev.preventDefault();
	}
	exports.preventDefault = preventDefault;
	/* General Geometry Utils
	----------------------------------------------------------------------------------------------------------------------*/
	// Returns a new rectangle that is the intersection of the two rectangles. If they don't intersect, returns false
	function intersectRects(rect1, rect2) {
	    var res = {
	        left: Math.max(rect1.left, rect2.left),
	        right: Math.min(rect1.right, rect2.right),
	        top: Math.max(rect1.top, rect2.top),
	        bottom: Math.min(rect1.bottom, rect2.bottom)
	    };
	    if (res.left < res.right && res.top < res.bottom) {
	        return res;
	    }
	    return false;
	}
	exports.intersectRects = intersectRects;
	// Returns a new point that will have been moved to reside within the given rectangle
	function constrainPoint(point, rect) {
	    return {
	        left: Math.min(Math.max(point.left, rect.left), rect.right),
	        top: Math.min(Math.max(point.top, rect.top), rect.bottom)
	    };
	}
	exports.constrainPoint = constrainPoint;
	// Returns a point that is the center of the given rectangle
	function getRectCenter(rect) {
	    return {
	        left: (rect.left + rect.right) / 2,
	        top: (rect.top + rect.bottom) / 2
	    };
	}
	exports.getRectCenter = getRectCenter;
	// Subtracts point2's coordinates from point1's coordinates, returning a delta
	function diffPoints(point1, point2) {
	    return {
	        left: point1.left - point2.left,
	        top: point1.top - point2.top
	    };
	}
	exports.diffPoints = diffPoints;
	/* Object Ordering by Field
	----------------------------------------------------------------------------------------------------------------------*/
	function parseFieldSpecs(input) {
	    var specs = [];
	    var tokens = [];
	    var i;
	    var token;
	    if (typeof input === 'string') {
	        tokens = input.split(/\s*,\s*/);
	    }
	    else if (typeof input === 'function') {
	        tokens = [input];
	    }
	    else if ($.isArray(input)) {
	        tokens = input;
	    }
	    for (i = 0; i < tokens.length; i++) {
	        token = tokens[i];
	        if (typeof token === 'string') {
	            specs.push(token.charAt(0) === '-' ?
	                { field: token.substring(1), order: -1 } :
	                { field: token, order: 1 });
	        }
	        else if (typeof token === 'function') {
	            specs.push({ func: token });
	        }
	    }
	    return specs;
	}
	exports.parseFieldSpecs = parseFieldSpecs;
	function compareByFieldSpecs(obj1, obj2, fieldSpecs, obj1fallback, obj2fallback) {
	    var i;
	    var cmp;
	    for (i = 0; i < fieldSpecs.length; i++) {
	        cmp = compareByFieldSpec(obj1, obj2, fieldSpecs[i], obj1fallback, obj2fallback);
	        if (cmp) {
	            return cmp;
	        }
	    }
	    return 0;
	}
	exports.compareByFieldSpecs = compareByFieldSpecs;
	function compareByFieldSpec(obj1, obj2, fieldSpec, obj1fallback, obj2fallback) {
	    if (fieldSpec.func) {
	        return fieldSpec.func(obj1, obj2);
	    }
	    var val1 = obj1[fieldSpec.field];
	    var val2 = obj2[fieldSpec.field];
	    if (val1 == null && obj1fallback) {
	        val1 = obj1fallback[fieldSpec.field];
	    }
	    if (val2 == null && obj2fallback) {
	        val2 = obj2fallback[fieldSpec.field];
	    }
	    return flexibleCompare(val1, val2) * (fieldSpec.order || 1);
	}
	exports.compareByFieldSpec = compareByFieldSpec;
	function flexibleCompare(a, b) {
	    if (!a && !b) {
	        return 0;
	    }
	    if (b == null) {
	        return -1;
	    }
	    if (a == null) {
	        return 1;
	    }
	    if ($.type(a) === 'string' || $.type(b) === 'string') {
	        return String(a).localeCompare(String(b));
	    }
	    return a - b;
	}
	exports.flexibleCompare = flexibleCompare;
	/* Date Utilities
	----------------------------------------------------------------------------------------------------------------------*/
	exports.dayIDs = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];
	exports.unitsDesc = ['year', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond']; // descending
	// Diffs the two moments into a Duration where full-days are recorded first, then the remaining time.
	// Moments will have their timezones normalized.
	function diffDayTime(a, b) {
	    return moment.duration({
	        days: a.clone().stripTime().diff(b.clone().stripTime(), 'days'),
	        ms: a.time() - b.time() // time-of-day from day start. disregards timezone
	    });
	}
	exports.diffDayTime = diffDayTime;
	// Diffs the two moments via their start-of-day (regardless of timezone). Produces whole-day durations.
	function diffDay(a, b) {
	    return moment.duration({
	        days: a.clone().stripTime().diff(b.clone().stripTime(), 'days')
	    });
	}
	exports.diffDay = diffDay;
	// Diffs two moments, producing a duration, made of a whole-unit-increment of the given unit. Uses rounding.
	function diffByUnit(a, b, unit) {
	    return moment.duration(Math.round(a.diff(b, unit, true)), // returnFloat=true
	    unit);
	}
	exports.diffByUnit = diffByUnit;
	// Computes the unit name of the largest whole-unit period of time.
	// For example, 48 hours will be "days" whereas 49 hours will be "hours".
	// Accepts start/end, a range object, or an original duration object.
	function computeGreatestUnit(start, end) {
	    var i;
	    var unit;
	    var val;
	    for (i = 0; i < exports.unitsDesc.length; i++) {
	        unit = exports.unitsDesc[i];
	        val = computeRangeAs(unit, start, end);
	        if (val >= 1 && isInt(val)) {
	            break;
	        }
	    }
	    return unit; // will be "milliseconds" if nothing else matches
	}
	exports.computeGreatestUnit = computeGreatestUnit;
	// like computeGreatestUnit, but has special abilities to interpret the source input for clues
	function computeDurationGreatestUnit(duration, durationInput) {
	    var unit = computeGreatestUnit(duration);
	    // prevent days:7 from being interpreted as a week
	    if (unit === 'week' && typeof durationInput === 'object' && durationInput.days) {
	        unit = 'day';
	    }
	    return unit;
	}
	exports.computeDurationGreatestUnit = computeDurationGreatestUnit;
	// Computes the number of units (like "hours") in the given range.
	// Range can be a {start,end} object, separate start/end args, or a Duration.
	// Results are based on Moment's .as() and .diff() methods, so results can depend on internal handling
	// of month-diffing logic (which tends to vary from version to version).
	function computeRangeAs(unit, start, end) {
	    if (end != null) { // given start, end
	        return end.diff(start, unit, true);
	    }
	    else if (moment.isDuration(start)) { // given duration
	        return start.as(unit);
	    }
	    else { // given { start, end } range object
	        return start.end.diff(start.start, unit, true);
	    }
	}
	// Intelligently divides a range (specified by a start/end params) by a duration
	function divideRangeByDuration(start, end, dur) {
	    var months;
	    if (durationHasTime(dur)) {
	        return (end - start) / dur;
	    }
	    months = dur.asMonths();
	    if (Math.abs(months) >= 1 && isInt(months)) {
	        return end.diff(start, 'months', true) / months;
	    }
	    return end.diff(start, 'days', true) / dur.asDays();
	}
	exports.divideRangeByDuration = divideRangeByDuration;
	// Intelligently divides one duration by another
	function divideDurationByDuration(dur1, dur2) {
	    var months1;
	    var months2;
	    if (durationHasTime(dur1) || durationHasTime(dur2)) {
	        return dur1 / dur2;
	    }
	    months1 = dur1.asMonths();
	    months2 = dur2.asMonths();
	    if (Math.abs(months1) >= 1 && isInt(months1) &&
	        Math.abs(months2) >= 1 && isInt(months2)) {
	        return months1 / months2;
	    }
	    return dur1.asDays() / dur2.asDays();
	}
	exports.divideDurationByDuration = divideDurationByDuration;
	// Intelligently multiplies a duration by a number
	function multiplyDuration(dur, n) {
	    var months;
	    if (durationHasTime(dur)) {
	        return moment.duration(dur * n);
	    }
	    months = dur.asMonths();
	    if (Math.abs(months) >= 1 && isInt(months)) {
	        return moment.duration({ months: months * n });
	    }
	    return moment.duration({ days: dur.asDays() * n });
	}
	exports.multiplyDuration = multiplyDuration;
	// Returns a boolean about whether the given duration has any time parts (hours/minutes/seconds/ms)
	function durationHasTime(dur) {
	    return Boolean(dur.hours() || dur.minutes() || dur.seconds() || dur.milliseconds());
	}
	exports.durationHasTime = durationHasTime;
	function isNativeDate(input) {
	    return Object.prototype.toString.call(input) === '[object Date]' || input instanceof Date;
	}
	exports.isNativeDate = isNativeDate;
	// Returns a boolean about whether the given input is a time string, like "06:40:00" or "06:00"
	function isTimeString(str) {
	    return typeof str === 'string' &&
	        /^\d+\:\d+(?:\:\d+\.?(?:\d{3})?)?$/.test(str);
	}
	exports.isTimeString = isTimeString;
	/* Logging and Debug
	----------------------------------------------------------------------------------------------------------------------*/
	function log() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    var console = window.console;
	    if (console && console.log) {
	        return console.log.apply(console, args);
	    }
	}
	exports.log = log;
	function warn() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    var console = window.console;
	    if (console && console.warn) {
	        return console.warn.apply(console, args);
	    }
	    else {
	        return log.apply(null, args);
	    }
	}
	exports.warn = warn;
	/* General Utilities
	----------------------------------------------------------------------------------------------------------------------*/
	var hasOwnPropMethod = {}.hasOwnProperty;
	// Merges an array of objects into a single object.
	// The second argument allows for an array of property names who's object values will be merged together.
	function mergeProps(propObjs, complexProps) {
	    var dest = {};
	    var i;
	    var name;
	    var complexObjs;
	    var j;
	    var val;
	    var props;
	    if (complexProps) {
	        for (i = 0; i < complexProps.length; i++) {
	            name = complexProps[i];
	            complexObjs = [];
	            // collect the trailing object values, stopping when a non-object is discovered
	            for (j = propObjs.length - 1; j >= 0; j--) {
	                val = propObjs[j][name];
	                if (typeof val === 'object') {
	                    complexObjs.unshift(val);
	                }
	                else if (val !== undefined) {
	                    dest[name] = val; // if there were no objects, this value will be used
	                    break;
	                }
	            }
	            // if the trailing values were objects, use the merged value
	            if (complexObjs.length) {
	                dest[name] = mergeProps(complexObjs);
	            }
	        }
	    }
	    // copy values into the destination, going from last to first
	    for (i = propObjs.length - 1; i >= 0; i--) {
	        props = propObjs[i];
	        for (name in props) {
	            if (!(name in dest)) { // if already assigned by previous props or complex props, don't reassign
	                dest[name] = props[name];
	            }
	        }
	    }
	    return dest;
	}
	exports.mergeProps = mergeProps;
	function copyOwnProps(src, dest) {
	    for (var name_1 in src) {
	        if (hasOwnProp(src, name_1)) {
	            dest[name_1] = src[name_1];
	        }
	    }
	}
	exports.copyOwnProps = copyOwnProps;
	function hasOwnProp(obj, name) {
	    return hasOwnPropMethod.call(obj, name);
	}
	exports.hasOwnProp = hasOwnProp;
	function applyAll(functions, thisObj, args) {
	    if ($.isFunction(functions)) {
	        functions = [functions];
	    }
	    if (functions) {
	        var i = void 0;
	        var ret = void 0;
	        for (i = 0; i < functions.length; i++) {
	            ret = functions[i].apply(thisObj, args) || ret;
	        }
	        return ret;
	    }
	}
	exports.applyAll = applyAll;
	function removeMatching(array, testFunc) {
	    var removeCnt = 0;
	    var i = 0;
	    while (i < array.length) {
	        if (testFunc(array[i])) { // truthy value means *remove*
	            array.splice(i, 1);
	            removeCnt++;
	        }
	        else {
	            i++;
	        }
	    }
	    return removeCnt;
	}
	exports.removeMatching = removeMatching;
	function removeExact(array, exactVal) {
	    var removeCnt = 0;
	    var i = 0;
	    while (i < array.length) {
	        if (array[i] === exactVal) {
	            array.splice(i, 1);
	            removeCnt++;
	        }
	        else {
	            i++;
	        }
	    }
	    return removeCnt;
	}
	exports.removeExact = removeExact;
	function isArraysEqual(a0, a1) {
	    var len = a0.length;
	    var i;
	    if (len == null || len !== a1.length) { // not array? or not same length?
	        return false;
	    }
	    for (i = 0; i < len; i++) {
	        if (a0[i] !== a1[i]) {
	            return false;
	        }
	    }
	    return true;
	}
	exports.isArraysEqual = isArraysEqual;
	function firstDefined() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    for (var i = 0; i < args.length; i++) {
	        if (args[i] !== undefined) {
	            return args[i];
	        }
	    }
	}
	exports.firstDefined = firstDefined;
	function htmlEscape(s) {
	    return (s + '').replace(/&/g, '&amp;')
	        .replace(/</g, '&lt;')
	        .replace(/>/g, '&gt;')
	        .replace(/'/g, '&#039;')
	        .replace(/"/g, '&quot;')
	        .replace(/\n/g, '<br>');
	}
	exports.htmlEscape = htmlEscape;
	function stripHtmlEntities(text) {
	    return text.replace(/&.*?;/g, '');
	}
	exports.stripHtmlEntities = stripHtmlEntities;
	// Given a hash of CSS properties, returns a string of CSS.
	// Uses property names as-is (no camel-case conversion). Will not make statements for null/undefined values.
	function cssToStr(cssProps) {
	    var statements = [];
	    $.each(cssProps, function (name, val) {
	        if (val != null) {
	            statements.push(name + ':' + val);
	        }
	    });
	    return statements.join(';');
	}
	exports.cssToStr = cssToStr;
	// Given an object hash of HTML attribute names to values,
	// generates a string that can be injected between < > in HTML
	function attrsToStr(attrs) {
	    var parts = [];
	    $.each(attrs, function (name, val) {
	        if (val != null) {
	            parts.push(name + '="' + htmlEscape(val) + '"');
	        }
	    });
	    return parts.join(' ');
	}
	exports.attrsToStr = attrsToStr;
	function capitaliseFirstLetter(str) {
	    return str.charAt(0).toUpperCase() + str.slice(1);
	}
	exports.capitaliseFirstLetter = capitaliseFirstLetter;
	function compareNumbers(a, b) {
	    return a - b;
	}
	exports.compareNumbers = compareNumbers;
	function isInt(n) {
	    return n % 1 === 0;
	}
	exports.isInt = isInt;
	// Returns a method bound to the given object context.
	// Just like one of the jQuery.proxy signatures, but without the undesired behavior of treating the same method with
	// different contexts as identical when binding/unbinding events.
	function proxy(obj, methodName) {
	    var method = obj[methodName];
	    return function () {
	        return method.apply(obj, arguments);
	    };
	}
	exports.proxy = proxy;
	// Returns a function, that, as long as it continues to be invoked, will not
	// be triggered. The function will be called after it stops being called for
	// N milliseconds. If `immediate` is passed, trigger the function on the
	// leading edge, instead of the trailing.
	// https://github.com/jashkenas/underscore/blob/1.6.0/underscore.js#L714
	function debounce(func, wait, immediate) {
	    if (immediate === void 0) { immediate = false; }
	    var timeout;
	    var args;
	    var context;
	    var timestamp;
	    var result;
	    var later = function () {
	        var last = +new Date() - timestamp;
	        if (last < wait) {
	            timeout = setTimeout(later, wait - last);
	        }
	        else {
	            timeout = null;
	            if (!immediate) {
	                result = func.apply(context, args);
	                context = args = null;
	            }
	        }
	    };
	    return function () {
	        context = this;
	        args = arguments;
	        timestamp = +new Date();
	        var callNow = immediate && !timeout;
	        if (!timeout) {
	            timeout = setTimeout(later, wait);
	        }
	        if (callNow) {
	            result = func.apply(context, args);
	            context = args = null;
	        }
	        return result;
	    };
	}
	exports.debounce = debounce;
	
	
	/***/ }),
	/* 5 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var moment = __webpack_require__(0);
	var moment_ext_1 = __webpack_require__(11);
	var UnzonedRange = /** @class */ (function () {
	    function UnzonedRange(startInput, endInput) {
	        // TODO: move these into footprint.
	        // Especially, doesn't make sense for null startMs/endMs.
	        this.isStart = true;
	        this.isEnd = true;
	        if (moment.isMoment(startInput)) {
	            startInput = startInput.clone().stripZone();
	        }
	        if (moment.isMoment(endInput)) {
	            endInput = endInput.clone().stripZone();
	        }
	        if (startInput) {
	            this.startMs = startInput.valueOf();
	        }
	        if (endInput) {
	            this.endMs = endInput.valueOf();
	        }
	    }
	    /*
	    SIDEEFFECT: will mutate eventRanges.
	    Will return a new array result.
	    Only works for non-open-ended ranges.
	    */
	    UnzonedRange.invertRanges = function (ranges, constraintRange) {
	        var invertedRanges = [];
	        var startMs = constraintRange.startMs; // the end of the previous range. the start of the new range
	        var i;
	        var dateRange;
	        // ranges need to be in order. required for our date-walking algorithm
	        ranges.sort(compareUnzonedRanges);
	        for (i = 0; i < ranges.length; i++) {
	            dateRange = ranges[i];
	            // add the span of time before the event (if there is any)
	            if (dateRange.startMs > startMs) { // compare millisecond time (skip any ambig logic)
	                invertedRanges.push(new UnzonedRange(startMs, dateRange.startMs));
	            }
	            if (dateRange.endMs > startMs) {
	                startMs = dateRange.endMs;
	            }
	        }
	        // add the span of time after the last event (if there is any)
	        if (startMs < constraintRange.endMs) { // compare millisecond time (skip any ambig logic)
	            invertedRanges.push(new UnzonedRange(startMs, constraintRange.endMs));
	        }
	        return invertedRanges;
	    };
	    UnzonedRange.prototype.intersect = function (otherRange) {
	        var startMs = this.startMs;
	        var endMs = this.endMs;
	        var newRange = null;
	        if (otherRange.startMs != null) {
	            if (startMs == null) {
	                startMs = otherRange.startMs;
	            }
	            else {
	                startMs = Math.max(startMs, otherRange.startMs);
	            }
	        }
	        if (otherRange.endMs != null) {
	            if (endMs == null) {
	                endMs = otherRange.endMs;
	            }
	            else {
	                endMs = Math.min(endMs, otherRange.endMs);
	            }
	        }
	        if (startMs == null || endMs == null || startMs < endMs) {
	            newRange = new UnzonedRange(startMs, endMs);
	            newRange.isStart = this.isStart && startMs === this.startMs;
	            newRange.isEnd = this.isEnd && endMs === this.endMs;
	        }
	        return newRange;
	    };
	    UnzonedRange.prototype.intersectsWith = function (otherRange) {
	        return (this.endMs == null || otherRange.startMs == null || this.endMs > otherRange.startMs) &&
	            (this.startMs == null || otherRange.endMs == null || this.startMs < otherRange.endMs);
	    };
	    UnzonedRange.prototype.containsRange = function (innerRange) {
	        return (this.startMs == null || (innerRange.startMs != null && innerRange.startMs >= this.startMs)) &&
	            (this.endMs == null || (innerRange.endMs != null && innerRange.endMs <= this.endMs));
	    };
	    // `date` can be a moment, a Date, or a millisecond time.
	    UnzonedRange.prototype.containsDate = function (date) {
	        var ms = date.valueOf();
	        return (this.startMs == null || ms >= this.startMs) &&
	            (this.endMs == null || ms < this.endMs);
	    };
	    // If the given date is not within the given range, move it inside.
	    // (If it's past the end, make it one millisecond before the end).
	    // `date` can be a moment, a Date, or a millisecond time.
	    // Returns a MS-time.
	    UnzonedRange.prototype.constrainDate = function (date) {
	        var ms = date.valueOf();
	        if (this.startMs != null && ms < this.startMs) {
	            ms = this.startMs;
	        }
	        if (this.endMs != null && ms >= this.endMs) {
	            ms = this.endMs - 1;
	        }
	        return ms;
	    };
	    UnzonedRange.prototype.equals = function (otherRange) {
	        return this.startMs === otherRange.startMs && this.endMs === otherRange.endMs;
	    };
	    UnzonedRange.prototype.clone = function () {
	        var range = new UnzonedRange(this.startMs, this.endMs);
	        range.isStart = this.isStart;
	        range.isEnd = this.isEnd;
	        return range;
	    };
	    // Returns an ambig-zoned moment from startMs.
	    // BEWARE: returned moment is not localized.
	    // Formatting and start-of-week will be default.
	    UnzonedRange.prototype.getStart = function () {
	        if (this.startMs != null) {
	            return moment_ext_1.default.utc(this.startMs).stripZone();
	        }
	        return null;
	    };
	    // Returns an ambig-zoned moment from startMs.
	    // BEWARE: returned moment is not localized.
	    // Formatting and start-of-week will be default.
	    UnzonedRange.prototype.getEnd = function () {
	        if (this.endMs != null) {
	            return moment_ext_1.default.utc(this.endMs).stripZone();
	        }
	        return null;
	    };
	    UnzonedRange.prototype.as = function (unit) {
	        return moment.utc(this.endMs).diff(moment.utc(this.startMs), unit, true);
	    };
	    return UnzonedRange;
	}());
	exports.default = UnzonedRange;
	/*
	Only works for non-open-ended ranges.
	*/
	function compareUnzonedRanges(range1, range2) {
	    return range1.startMs - range2.startMs; // earlier ranges go first
	}
	
	
	/***/ }),
	/* 6 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var $ = __webpack_require__(3);
	var ParsableModelMixin_1 = __webpack_require__(52);
	var Class_1 = __webpack_require__(35);
	var EventDefParser_1 = __webpack_require__(36);
	var EventSource = /** @class */ (function (_super) {
	    tslib_1.__extends(EventSource, _super);
	    // can we do away with calendar? at least for the abstract?
	    // useful for buildEventDef
	    function EventSource(calendar) {
	        var _this = _super.call(this) || this;
	        _this.calendar = calendar;
	        _this.className = [];
	        _this.uid = String(EventSource.uuid++);
	        return _this;
	    }
	    /*
	    rawInput can be any data type!
	    */
	    EventSource.parse = function (rawInput, calendar) {
	        var source = new this(calendar);
	        if (typeof rawInput === 'object') {
	            if (source.applyProps(rawInput)) {
	                return source;
	            }
	        }
	        return false;
	    };
	    EventSource.normalizeId = function (id) {
	        if (id) {
	            return String(id);
	        }
	        return null;
	    };
	    EventSource.prototype.fetch = function (start, end, timezone) {
	        // subclasses must implement. must return a promise.
	    };
	    EventSource.prototype.removeEventDefsById = function (eventDefId) {
	        // optional for subclasses to implement
	    };
	    EventSource.prototype.removeAllEventDefs = function () {
	        // optional for subclasses to implement
	    };
	    /*
	    For compairing/matching
	    */
	    EventSource.prototype.getPrimitive = function (otherSource) {
	        // subclasses must implement
	    };
	    EventSource.prototype.parseEventDefs = function (rawEventDefs) {
	        var i;
	        var eventDef;
	        var eventDefs = [];
	        for (i = 0; i < rawEventDefs.length; i++) {
	            eventDef = this.parseEventDef(rawEventDefs[i]);
	            if (eventDef) {
	                eventDefs.push(eventDef);
	            }
	        }
	        return eventDefs;
	    };
	    EventSource.prototype.parseEventDef = function (rawInput) {
	        var calendarTransform = this.calendar.opt('eventDataTransform');
	        var sourceTransform = this.eventDataTransform;
	        if (calendarTransform) {
	            rawInput = calendarTransform(rawInput, this.calendar);
	        }
	        if (sourceTransform) {
	            rawInput = sourceTransform(rawInput, this.calendar);
	        }
	        return EventDefParser_1.default.parse(rawInput, this);
	    };
	    EventSource.prototype.applyManualStandardProps = function (rawProps) {
	        if (rawProps.id != null) {
	            this.id = EventSource.normalizeId(rawProps.id);
	        }
	        // TODO: converge with EventDef
	        if ($.isArray(rawProps.className)) {
	            this.className = rawProps.className;
	        }
	        else if (typeof rawProps.className === 'string') {
	            this.className = rawProps.className.split(/\s+/);
	        }
	        return true;
	    };
	    EventSource.uuid = 0;
	    EventSource.defineStandardProps = ParsableModelMixin_1.default.defineStandardProps;
	    EventSource.copyVerbatimStandardProps = ParsableModelMixin_1.default.copyVerbatimStandardProps;
	    return EventSource;
	}(Class_1.default));
	exports.default = EventSource;
	ParsableModelMixin_1.default.mixInto(EventSource);
	// Parsing
	// ---------------------------------------------------------------------------------------------------------------------
	EventSource.defineStandardProps({
	    // manually process...
	    id: false,
	    className: false,
	    // automatically transfer...
	    color: true,
	    backgroundColor: true,
	    borderColor: true,
	    textColor: true,
	    editable: true,
	    startEditable: true,
	    durationEditable: true,
	    rendering: true,
	    overlap: true,
	    constraint: true,
	    allDayDefault: true,
	    eventDataTransform: true
	});
	
	
	/***/ }),
	/* 7 */
	/***/ (function(module, exports, __webpack_require__) {
	
	/*
	Utility methods for easily listening to events on another object,
	and more importantly, easily unlistening from them.
	
	USAGE:
	  import { default as ListenerMixin, ListenerInterface } from './ListenerMixin'
	in class:
	  listenTo: ListenerInterface['listenTo']
	  stopListeningTo: ListenerInterface['stopListeningTo']
	after class:
	  ListenerMixin.mixInto(TheClass)
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var $ = __webpack_require__(3);
	var Mixin_1 = __webpack_require__(15);
	var guid = 0;
	var ListenerMixin = /** @class */ (function (_super) {
	    tslib_1.__extends(ListenerMixin, _super);
	    function ListenerMixin() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /*
	    Given an `other` object that has on/off methods, bind the given `callback` to an event by the given name.
	    The `callback` will be called with the `this` context of the object that .listenTo is being called on.
	    Can be called:
	      .listenTo(other, eventName, callback)
	    OR
	      .listenTo(other, {
	        eventName1: callback1,
	        eventName2: callback2
	      })
	    */
	    ListenerMixin.prototype.listenTo = function (other, arg, callback) {
	        if (typeof arg === 'object') { // given dictionary of callbacks
	            for (var eventName in arg) {
	                if (arg.hasOwnProperty(eventName)) {
	                    this.listenTo(other, eventName, arg[eventName]);
	                }
	            }
	        }
	        else if (typeof arg === 'string') {
	            other.on(arg + '.' + this.getListenerNamespace(), // use event namespacing to identify this object
	            $.proxy(callback, this) // always use `this` context
	            // the usually-undesired jQuery guid behavior doesn't matter,
	            // because we always unbind via namespace
	            );
	        }
	    };
	    /*
	    Causes the current object to stop listening to events on the `other` object.
	    `eventName` is optional. If omitted, will stop listening to ALL events on `other`.
	    */
	    ListenerMixin.prototype.stopListeningTo = function (other, eventName) {
	        other.off((eventName || '') + '.' + this.getListenerNamespace());
	    };
	    /*
	    Returns a string, unique to this object, to be used for event namespacing
	    */
	    ListenerMixin.prototype.getListenerNamespace = function () {
	        if (this.listenerId == null) {
	            this.listenerId = guid++;
	        }
	        return '_listener' + this.listenerId;
	    };
	    return ListenerMixin;
	}(Mixin_1.default));
	exports.default = ListenerMixin;
	
	
	/***/ }),
	/* 8 */,
	/* 9 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var EventDef_1 = __webpack_require__(37);
	var EventInstance_1 = __webpack_require__(53);
	var EventDateProfile_1 = __webpack_require__(16);
	var SingleEventDef = /** @class */ (function (_super) {
	    tslib_1.__extends(SingleEventDef, _super);
	    function SingleEventDef() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /*
	    Will receive start/end params, but will be ignored.
	    */
	    SingleEventDef.prototype.buildInstances = function () {
	        return [this.buildInstance()];
	    };
	    SingleEventDef.prototype.buildInstance = function () {
	        return new EventInstance_1.default(this, // definition
	        this.dateProfile);
	    };
	    SingleEventDef.prototype.isAllDay = function () {
	        return this.dateProfile.isAllDay();
	    };
	    SingleEventDef.prototype.clone = function () {
	        var def = _super.prototype.clone.call(this);
	        def.dateProfile = this.dateProfile;
	        return def;
	    };
	    SingleEventDef.prototype.rezone = function () {
	        var calendar = this.source.calendar;
	        var dateProfile = this.dateProfile;
	        this.dateProfile = new EventDateProfile_1.default(calendar.moment(dateProfile.start), dateProfile.end ? calendar.moment(dateProfile.end) : null, calendar);
	    };
	    /*
	    NOTE: if super-method fails, should still attempt to apply
	    */
	    SingleEventDef.prototype.applyManualStandardProps = function (rawProps) {
	        var superSuccess = _super.prototype.applyManualStandardProps.call(this, rawProps);
	        var dateProfile = EventDateProfile_1.default.parse(rawProps, this.source); // returns null on failure
	        if (dateProfile) {
	            this.dateProfile = dateProfile;
	            // make sure `date` shows up in the legacy event objects as-is
	            if (rawProps.date != null) {
	                this.miscProps.date = rawProps.date;
	            }
	            return superSuccess;
	        }
	        else {
	            return false;
	        }
	    };
	    return SingleEventDef;
	}(EventDef_1.default));
	exports.default = SingleEventDef;
	// Parsing
	// ---------------------------------------------------------------------------------------------------------------------
	SingleEventDef.defineStandardProps({
	    start: false,
	    date: false,
	    end: false,
	    allDay: false
	});
	
	
	/***/ }),
	/* 10 */,
	/* 11 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var moment = __webpack_require__(0);
	var $ = __webpack_require__(3);
	var util_1 = __webpack_require__(4);
	var ambigDateOfMonthRegex = /^\s*\d{4}-\d\d$/;
	var ambigTimeOrZoneRegex = /^\s*\d{4}-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?)?$/;
	var newMomentProto = moment.fn; // where we will attach our new methods
	exports.newMomentProto = newMomentProto;
	var oldMomentProto = $.extend({}, newMomentProto); // copy of original moment methods
	exports.oldMomentProto = oldMomentProto;
	// tell momentjs to transfer these properties upon clone
	var momentProperties = moment.momentProperties;
	momentProperties.push('_fullCalendar');
	momentProperties.push('_ambigTime');
	momentProperties.push('_ambigZone');
	/*
	Call this if you want Moment's original format method to be used
	*/
	function oldMomentFormat(mom, formatStr) {
	    return oldMomentProto.format.call(mom, formatStr); // oldMomentProto defined in moment-ext.js
	}
	exports.oldMomentFormat = oldMomentFormat;
	// Creating
	// -------------------------------------------------------------------------------------------------
	// Creates a new moment, similar to the vanilla moment(...) constructor, but with
	// extra features (ambiguous time, enhanced formatting). When given an existing moment,
	// it will function as a clone (and retain the zone of the moment). Anything else will
	// result in a moment in the local zone.
	var momentExt = function () {
	    return makeMoment(arguments);
	};
	exports.default = momentExt;
	// Sames as momentExt, but forces the resulting moment to be in the UTC timezone.
	momentExt.utc = function () {
	    var mom = makeMoment(arguments, true);
	    // Force it into UTC because makeMoment doesn't guarantee it
	    // (if given a pre-existing moment for example)
	    if (mom.hasTime()) { // don't give ambiguously-timed moments a UTC zone
	        mom.utc();
	    }
	    return mom;
	};
	// Same as momentExt, but when given an ISO8601 string, the timezone offset is preserved.
	// ISO8601 strings with no timezone offset will become ambiguously zoned.
	momentExt.parseZone = function () {
	    return makeMoment(arguments, true, true);
	};
	// Builds an enhanced moment from args. When given an existing moment, it clones. When given a
	// native Date, or called with no arguments (the current time), the resulting moment will be local.
	// Anything else needs to be "parsed" (a string or an array), and will be affected by:
	//    parseAsUTC - if there is no zone information, should we parse the input in UTC?
	//    parseZone - if there is zone information, should we force the zone of the moment?
	function makeMoment(args, parseAsUTC, parseZone) {
	    if (parseAsUTC === void 0) { parseAsUTC = false; }
	    if (parseZone === void 0) { parseZone = false; }
	    var input = args[0];
	    var isSingleString = args.length === 1 && typeof input === 'string';
	    var isAmbigTime;
	    var isAmbigZone;
	    var ambigMatch;
	    var mom;
	    if (moment.isMoment(input) || util_1.isNativeDate(input) || input === undefined) {
	        mom = moment.apply(null, args);
	    }
	    else { // "parsing" is required
	        isAmbigTime = false;
	        isAmbigZone = false;
	        if (isSingleString) {
	            if (ambigDateOfMonthRegex.test(input)) {
	                // accept strings like '2014-05', but convert to the first of the month
	                input += '-01';
	                args = [input]; // for when we pass it on to moment's constructor
	                isAmbigTime = true;
	                isAmbigZone = true;
	            }
	            else if ((ambigMatch = ambigTimeOrZoneRegex.exec(input))) {
	                isAmbigTime = !ambigMatch[5]; // no time part?
	                isAmbigZone = true;
	            }
	        }
	        else if ($.isArray(input)) {
	            // arrays have no timezone information, so assume ambiguous zone
	            isAmbigZone = true;
	        }
	        // otherwise, probably a string with a format
	        if (parseAsUTC || isAmbigTime) {
	            mom = moment.utc.apply(moment, args);
	        }
	        else {
	            mom = moment.apply(null, args);
	        }
	        if (isAmbigTime) {
	            mom._ambigTime = true;
	            mom._ambigZone = true; // ambiguous time always means ambiguous zone
	        }
	        else if (parseZone) { // let's record the inputted zone somehow
	            if (isAmbigZone) {
	                mom._ambigZone = true;
	            }
	            else if (isSingleString) {
	                mom.utcOffset(input); // if not a valid zone, will assign UTC
	            }
	        }
	    }
	    mom._fullCalendar = true; // flag for extended functionality
	    return mom;
	}
	// Week Number
	// -------------------------------------------------------------------------------------------------
	// Returns the week number, considering the locale's custom week number calcuation
	// `weeks` is an alias for `week`
	newMomentProto.week = newMomentProto.weeks = function (input) {
	    var weekCalc = this._locale._fullCalendar_weekCalc;
	    if (input == null && typeof weekCalc === 'function') { // custom function only works for getter
	        return weekCalc(this);
	    }
	    else if (weekCalc === 'ISO') {
	        return oldMomentProto.isoWeek.apply(this, arguments); // ISO getter/setter
	    }
	    return oldMomentProto.week.apply(this, arguments); // local getter/setter
	};
	// Time-of-day
	// -------------------------------------------------------------------------------------------------
	// GETTER
	// Returns a Duration with the hours/minutes/seconds/ms values of the moment.
	// If the moment has an ambiguous time, a duration of 00:00 will be returned.
	//
	// SETTER
	// You can supply a Duration, a Moment, or a Duration-like argument.
	// When setting the time, and the moment has an ambiguous time, it then becomes unambiguous.
	newMomentProto.time = function (time) {
	    // Fallback to the original method (if there is one) if this moment wasn't created via FullCalendar.
	    // `time` is a generic enough method name where this precaution is necessary to avoid collisions w/ other plugins.
	    if (!this._fullCalendar) {
	        return oldMomentProto.time.apply(this, arguments);
	    }
	    if (time == null) { // getter
	        return moment.duration({
	            hours: this.hours(),
	            minutes: this.minutes(),
	            seconds: this.seconds(),
	            milliseconds: this.milliseconds()
	        });
	    }
	    else { // setter
	        this._ambigTime = false; // mark that the moment now has a time
	        if (!moment.isDuration(time) && !moment.isMoment(time)) {
	            time = moment.duration(time);
	        }
	        // The day value should cause overflow (so 24 hours becomes 00:00:00 of next day).
	        // Only for Duration times, not Moment times.
	        var dayHours = 0;
	        if (moment.isDuration(time)) {
	            dayHours = Math.floor(time.asDays()) * 24;
	        }
	        // We need to set the individual fields.
	        // Can't use startOf('day') then add duration. In case of DST at start of day.
	        return this.hours(dayHours + time.hours())
	            .minutes(time.minutes())
	            .seconds(time.seconds())
	            .milliseconds(time.milliseconds());
	    }
	};
	// Converts the moment to UTC, stripping out its time-of-day and timezone offset,
	// but preserving its YMD. A moment with a stripped time will display no time
	// nor timezone offset when .format() is called.
	newMomentProto.stripTime = function () {
	    if (!this._ambigTime) {
	        this.utc(true); // keepLocalTime=true (for keeping *date* value)
	        // set time to zero
	        this.set({
	            hours: 0,
	            minutes: 0,
	            seconds: 0,
	            ms: 0
	        });
	        // Mark the time as ambiguous. This needs to happen after the .utc() call, which might call .utcOffset(),
	        // which clears all ambig flags.
	        this._ambigTime = true;
	        this._ambigZone = true; // if ambiguous time, also ambiguous timezone offset
	    }
	    return this; // for chaining
	};
	// Returns if the moment has a non-ambiguous time (boolean)
	newMomentProto.hasTime = function () {
	    return !this._ambigTime;
	};
	// Timezone
	// -------------------------------------------------------------------------------------------------
	// Converts the moment to UTC, stripping out its timezone offset, but preserving its
	// YMD and time-of-day. A moment with a stripped timezone offset will display no
	// timezone offset when .format() is called.
	newMomentProto.stripZone = function () {
	    var wasAmbigTime;
	    if (!this._ambigZone) {
	        wasAmbigTime = this._ambigTime;
	        this.utc(true); // keepLocalTime=true (for keeping date and time values)
	        // the above call to .utc()/.utcOffset() unfortunately might clear the ambig flags, so restore
	        this._ambigTime = wasAmbigTime || false;
	        // Mark the zone as ambiguous. This needs to happen after the .utc() call, which might call .utcOffset(),
	        // which clears the ambig flags.
	        this._ambigZone = true;
	    }
	    return this; // for chaining
	};
	// Returns of the moment has a non-ambiguous timezone offset (boolean)
	newMomentProto.hasZone = function () {
	    return !this._ambigZone;
	};
	// implicitly marks a zone
	newMomentProto.local = function (keepLocalTime) {
	    // for when converting from ambiguously-zoned to local,
	    // keep the time values when converting from UTC -> local
	    oldMomentProto.local.call(this, this._ambigZone || keepLocalTime);
	    // ensure non-ambiguous
	    // this probably already happened via local() -> utcOffset(), but don't rely on Moment's internals
	    this._ambigTime = false;
	    this._ambigZone = false;
	    return this; // for chaining
	};
	// implicitly marks a zone
	newMomentProto.utc = function (keepLocalTime) {
	    oldMomentProto.utc.call(this, keepLocalTime);
	    // ensure non-ambiguous
	    // this probably already happened via utc() -> utcOffset(), but don't rely on Moment's internals
	    this._ambigTime = false;
	    this._ambigZone = false;
	    return this;
	};
	// implicitly marks a zone (will probably get called upon .utc() and .local())
	newMomentProto.utcOffset = function (tzo) {
	    if (tzo != null) { // setter
	        // these assignments needs to happen before the original zone method is called.
	        // I forget why, something to do with a browser crash.
	        this._ambigTime = false;
	        this._ambigZone = false;
	    }
	    return oldMomentProto.utcOffset.apply(this, arguments);
	};
	
	
	/***/ }),
	/* 12 */
	/***/ (function(module, exports) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	/*
	Meant to be immutable
	*/
	var ComponentFootprint = /** @class */ (function () {
	    function ComponentFootprint(unzonedRange, isAllDay) {
	        this.isAllDay = false; // component can choose to ignore this
	        this.unzonedRange = unzonedRange;
	        this.isAllDay = isAllDay;
	    }
	    /*
	    Only works for non-open-ended ranges.
	    */
	    ComponentFootprint.prototype.toLegacy = function (calendar) {
	        return {
	            start: calendar.msToMoment(this.unzonedRange.startMs, this.isAllDay),
	            end: calendar.msToMoment(this.unzonedRange.endMs, this.isAllDay)
	        };
	    };
	    return ComponentFootprint;
	}());
	exports.default = ComponentFootprint;
	
	
	/***/ }),
	/* 13 */
	/***/ (function(module, exports, __webpack_require__) {
	
	/*
	USAGE:
	  import { default as EmitterMixin, EmitterInterface } from './EmitterMixin'
	in class:
	  on: EmitterInterface['on']
	  one: EmitterInterface['one']
	  off: EmitterInterface['off']
	  trigger: EmitterInterface['trigger']
	  triggerWith: EmitterInterface['triggerWith']
	  hasHandlers: EmitterInterface['hasHandlers']
	after class:
	  EmitterMixin.mixInto(TheClass)
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var $ = __webpack_require__(3);
	var Mixin_1 = __webpack_require__(15);
	var EmitterMixin = /** @class */ (function (_super) {
	    tslib_1.__extends(EmitterMixin, _super);
	    function EmitterMixin() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    // jQuery-ification via $(this) allows a non-DOM object to have
	    // the same event handling capabilities (including namespaces).
	    EmitterMixin.prototype.on = function (types, handler) {
	        $(this).on(types, this._prepareIntercept(handler));
	        return this; // for chaining
	    };
	    EmitterMixin.prototype.one = function (types, handler) {
	        $(this).one(types, this._prepareIntercept(handler));
	        return this; // for chaining
	    };
	    EmitterMixin.prototype._prepareIntercept = function (handler) {
	        // handlers are always called with an "event" object as their first param.
	        // sneak the `this` context and arguments into the extra parameter object
	        // and forward them on to the original handler.
	        var intercept = function (ev, extra) {
	            return handler.apply(extra.context || this, extra.args || []);
	        };
	        // mimick jQuery's internal "proxy" system (risky, I know)
	        // causing all functions with the same .guid to appear to be the same.
	        // https://github.com/jquery/jquery/blob/2.2.4/src/core.js#L448
	        // this is needed for calling .off with the original non-intercept handler.
	        if (!handler.guid) {
	            handler.guid = $.guid++;
	        }
	        intercept.guid = handler.guid;
	        return intercept;
	    };
	    EmitterMixin.prototype.off = function (types, handler) {
	        $(this).off(types, handler);
	        return this; // for chaining
	    };
	    EmitterMixin.prototype.trigger = function (types) {
	        var args = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            args[_i - 1] = arguments[_i];
	        }
	        // pass in "extra" info to the intercept
	        $(this).triggerHandler(types, { args: args });
	        return this; // for chaining
	    };
	    EmitterMixin.prototype.triggerWith = function (types, context, args) {
	        // `triggerHandler` is less reliant on the DOM compared to `trigger`.
	        // pass in "extra" info to the intercept.
	        $(this).triggerHandler(types, { context: context, args: args });
	        return this; // for chaining
	    };
	    EmitterMixin.prototype.hasHandlers = function (type) {
	        var hash = $._data(this, 'events'); // http://blog.jquery.com/2012/08/09/jquery-1-8-released/
	        return hash && hash[type] && hash[type].length > 0;
	    };
	    return EmitterMixin;
	}(Mixin_1.default));
	exports.default = EmitterMixin;
	
	
	/***/ }),
	/* 14 */
	/***/ (function(module, exports) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var Interaction = /** @class */ (function () {
	    function Interaction(component) {
	        this.view = component._getView();
	        this.component = component;
	    }
	    Interaction.prototype.opt = function (name) {
	        return this.view.opt(name);
	    };
	    Interaction.prototype.end = function () {
	        // subclasses can implement
	    };
	    return Interaction;
	}());
	exports.default = Interaction;
	
	
	/***/ }),
	/* 15 */
	/***/ (function(module, exports) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var Mixin = /** @class */ (function () {
	    function Mixin() {
	    }
	    Mixin.mixInto = function (destClass) {
	        var _this = this;
	        Object.getOwnPropertyNames(this.prototype).forEach(function (name) {
	            if (!destClass.prototype[name]) { // if destination class doesn't already define it
	                destClass.prototype[name] = _this.prototype[name];
	            }
	        });
	    };
	    /*
	    will override existing methods
	    TODO: remove! not used anymore
	    */
	    Mixin.mixOver = function (destClass) {
	        var _this = this;
	        Object.getOwnPropertyNames(this.prototype).forEach(function (name) {
	            destClass.prototype[name] = _this.prototype[name];
	        });
	    };
	    return Mixin;
	}());
	exports.default = Mixin;
	
	
	/***/ }),
	/* 16 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var UnzonedRange_1 = __webpack_require__(5);
	/*
	Meant to be immutable
	*/
	var EventDateProfile = /** @class */ (function () {
	    function EventDateProfile(start, end, calendar) {
	        this.start = start;
	        this.end = end || null;
	        this.unzonedRange = this.buildUnzonedRange(calendar);
	    }
	    /*
	    Needs an EventSource object
	    */
	    EventDateProfile.parse = function (rawProps, source) {
	        var startInput = rawProps.start || rawProps.date;
	        var endInput = rawProps.end;
	        if (!startInput) {
	            return false;
	        }
	        var calendar = source.calendar;
	        var start = calendar.moment(startInput);
	        var end = endInput ? calendar.moment(endInput) : null;
	        var forcedAllDay = rawProps.allDay;
	        var forceEventDuration = calendar.opt('forceEventDuration');
	        if (!start.isValid()) {
	            return false;
	        }
	        if (forcedAllDay == null) {
	            forcedAllDay = source.allDayDefault;
	            if (forcedAllDay == null) {
	                forcedAllDay = calendar.opt('allDayDefault');
	            }
	        }
	        if (forcedAllDay === true) {
	            start.stripTime();
	            if (end) {
	                end.stripTime();
	            }
	        }
	        else if (forcedAllDay === false) {
	            if (!start.hasTime()) {
	                start.time(0);
	            }
	            if (end && !end.hasTime()) {
	                end.time(0);
	            }
	        }
	        if (end && (!end.isValid() || !end.isAfter(start))) {
	            end = null;
	        }
	        if (!end && forceEventDuration) {
	            end = calendar.getDefaultEventEnd(!start.hasTime(), start);
	        }
	        return new EventDateProfile(start, end, calendar);
	    };
	    EventDateProfile.isStandardProp = function (propName) {
	        return propName === 'start' || propName === 'date' || propName === 'end' || propName === 'allDay';
	    };
	    EventDateProfile.prototype.isAllDay = function () {
	        return !(this.start.hasTime() || (this.end && this.end.hasTime()));
	    };
	    /*
	    Needs a Calendar object
	    */
	    EventDateProfile.prototype.buildUnzonedRange = function (calendar) {
	        var startMs = this.start.clone().stripZone().valueOf();
	        var endMs = this.getEnd(calendar).stripZone().valueOf();
	        return new UnzonedRange_1.default(startMs, endMs);
	    };
	    /*
	    Needs a Calendar object
	    */
	    EventDateProfile.prototype.getEnd = function (calendar) {
	        return this.end ?
	            this.end.clone() :
	            // derive the end from the start and allDay. compute allDay if necessary
	            calendar.getDefaultEventEnd(this.isAllDay(), this.start);
	    };
	    return EventDateProfile;
	}());
	exports.default = EventDateProfile;
	
	
	/***/ }),
	/* 17 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var util_1 = __webpack_require__(4);
	var DragListener_1 = __webpack_require__(59);
	/* Tracks mouse movements over a component and raises events about which hit the mouse is over.
	------------------------------------------------------------------------------------------------------------------------
	options:
	- subjectEl
	- subjectCenter
	*/
	var HitDragListener = /** @class */ (function (_super) {
	    tslib_1.__extends(HitDragListener, _super);
	    function HitDragListener(component, options) {
	        var _this = _super.call(this, options) || this;
	        _this.component = component;
	        return _this;
	    }
	    // Called when drag listening starts (but a real drag has not necessarily began).
	    // ev might be undefined if dragging was started manually.
	    HitDragListener.prototype.handleInteractionStart = function (ev) {
	        var subjectEl = this.subjectEl;
	        var subjectRect;
	        var origPoint;
	        var point;
	        this.component.hitsNeeded();
	        this.computeScrollBounds(); // for autoscroll
	        if (ev) {
	            origPoint = { left: util_1.getEvX(ev), top: util_1.getEvY(ev) };
	            point = origPoint;
	            // constrain the point to bounds of the element being dragged
	            if (subjectEl) {
	                subjectRect = util_1.getOuterRect(subjectEl); // used for centering as well
	                point = util_1.constrainPoint(point, subjectRect);
	            }
	            this.origHit = this.queryHit(point.left, point.top);
	            // treat the center of the subject as the collision point?
	            if (subjectEl && this.options.subjectCenter) {
	                // only consider the area the subject overlaps the hit. best for large subjects.
	                // TODO: skip this if hit didn't supply left/right/top/bottom
	                if (this.origHit) {
	                    subjectRect = util_1.intersectRects(this.origHit, subjectRect) ||
	                        subjectRect; // in case there is no intersection
	                }
	                point = util_1.getRectCenter(subjectRect);
	            }
	            this.coordAdjust = util_1.diffPoints(point, origPoint); // point - origPoint
	        }
	        else {
	            this.origHit = null;
	            this.coordAdjust = null;
	        }
	        // call the super-method. do it after origHit has been computed
	        _super.prototype.handleInteractionStart.call(this, ev);
	    };
	    // Called when the actual drag has started
	    HitDragListener.prototype.handleDragStart = function (ev) {
	        var hit;
	        _super.prototype.handleDragStart.call(this, ev);
	        // might be different from this.origHit if the min-distance is large
	        hit = this.queryHit(util_1.getEvX(ev), util_1.getEvY(ev));
	        // report the initial hit the mouse is over
	        // especially important if no min-distance and drag starts immediately
	        if (hit) {
	            this.handleHitOver(hit);
	        }
	    };
	    // Called when the drag moves
	    HitDragListener.prototype.handleDrag = function (dx, dy, ev) {
	        var hit;
	        _super.prototype.handleDrag.call(this, dx, dy, ev);
	        hit = this.queryHit(util_1.getEvX(ev), util_1.getEvY(ev));
	        if (!isHitsEqual(hit, this.hit)) { // a different hit than before?
	            if (this.hit) {
	                this.handleHitOut();
	            }
	            if (hit) {
	                this.handleHitOver(hit);
	            }
	        }
	    };
	    // Called when dragging has been stopped
	    HitDragListener.prototype.handleDragEnd = function (ev) {
	        this.handleHitDone();
	        _super.prototype.handleDragEnd.call(this, ev);
	    };
	    // Called when a the mouse has just moved over a new hit
	    HitDragListener.prototype.handleHitOver = function (hit) {
	        var isOrig = isHitsEqual(hit, this.origHit);
	        this.hit = hit;
	        this.trigger('hitOver', this.hit, isOrig, this.origHit);
	    };
	    // Called when the mouse has just moved out of a hit
	    HitDragListener.prototype.handleHitOut = function () {
	        if (this.hit) {
	            this.trigger('hitOut', this.hit);
	            this.handleHitDone();
	            this.hit = null;
	        }
	    };
	    // Called after a hitOut. Also called before a dragStop
	    HitDragListener.prototype.handleHitDone = function () {
	        if (this.hit) {
	            this.trigger('hitDone', this.hit);
	        }
	    };
	    // Called when the interaction ends, whether there was a real drag or not
	    HitDragListener.prototype.handleInteractionEnd = function (ev, isCancelled) {
	        _super.prototype.handleInteractionEnd.call(this, ev, isCancelled);
	        this.origHit = null;
	        this.hit = null;
	        this.component.hitsNotNeeded();
	    };
	    // Called when scrolling has stopped, whether through auto scroll, or the user scrolling
	    HitDragListener.prototype.handleScrollEnd = function () {
	        _super.prototype.handleScrollEnd.call(this);
	        // hits' absolute positions will be in new places after a user's scroll.
	        // HACK for recomputing.
	        if (this.isDragging) {
	            this.component.releaseHits();
	            this.component.prepareHits();
	        }
	    };
	    // Gets the hit underneath the coordinates for the given mouse event
	    HitDragListener.prototype.queryHit = function (left, top) {
	        if (this.coordAdjust) {
	            left += this.coordAdjust.left;
	            top += this.coordAdjust.top;
	        }
	        return this.component.queryHit(left, top);
	    };
	    return HitDragListener;
	}(DragListener_1.default));
	exports.default = HitDragListener;
	// Returns `true` if the hits are identically equal. `false` otherwise. Must be from the same component.
	// Two null values will be considered equal, as two "out of the component" states are the same.
	function isHitsEqual(hit0, hit1) {
	    if (!hit0 && !hit1) {
	        return true;
	    }
	    if (hit0 && hit1) {
	        return hit0.component === hit1.component &&
	            isHitPropsWithin(hit0, hit1) &&
	            isHitPropsWithin(hit1, hit0); // ensures all props are identical
	    }
	    return false;
	}
	// Returns true if all of subHit's non-standard properties are within superHit
	function isHitPropsWithin(subHit, superHit) {
	    for (var propName in subHit) {
	        if (!/^(component|left|right|top|bottom)$/.test(propName)) {
	            if (subHit[propName] !== superHit[propName]) {
	                return false;
	            }
	        }
	    }
	    return true;
	}
	
	
	/***/ }),
	/* 18 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.version = '3.10.2';
	// When introducing internal API incompatibilities (where fullcalendar plugins would break),
	// the minor version of the calendar should be upped (ex: 2.7.2 -> 2.8.0)
	// and the below integer should be incremented.
	exports.internalApiVersion = 12;
	var util_1 = __webpack_require__(4);
	exports.applyAll = util_1.applyAll;
	exports.debounce = util_1.debounce;
	exports.isInt = util_1.isInt;
	exports.htmlEscape = util_1.htmlEscape;
	exports.cssToStr = util_1.cssToStr;
	exports.proxy = util_1.proxy;
	exports.capitaliseFirstLetter = util_1.capitaliseFirstLetter;
	exports.getOuterRect = util_1.getOuterRect;
	exports.getClientRect = util_1.getClientRect;
	exports.getContentRect = util_1.getContentRect;
	exports.getScrollbarWidths = util_1.getScrollbarWidths;
	exports.preventDefault = util_1.preventDefault;
	exports.parseFieldSpecs = util_1.parseFieldSpecs;
	exports.compareByFieldSpecs = util_1.compareByFieldSpecs;
	exports.compareByFieldSpec = util_1.compareByFieldSpec;
	exports.flexibleCompare = util_1.flexibleCompare;
	exports.computeGreatestUnit = util_1.computeGreatestUnit;
	exports.divideRangeByDuration = util_1.divideRangeByDuration;
	exports.divideDurationByDuration = util_1.divideDurationByDuration;
	exports.multiplyDuration = util_1.multiplyDuration;
	exports.durationHasTime = util_1.durationHasTime;
	exports.log = util_1.log;
	exports.warn = util_1.warn;
	exports.removeExact = util_1.removeExact;
	exports.intersectRects = util_1.intersectRects;
	exports.allowSelection = util_1.allowSelection;
	exports.attrsToStr = util_1.attrsToStr;
	exports.compareNumbers = util_1.compareNumbers;
	exports.compensateScroll = util_1.compensateScroll;
	exports.computeDurationGreatestUnit = util_1.computeDurationGreatestUnit;
	exports.constrainPoint = util_1.constrainPoint;
	exports.copyOwnProps = util_1.copyOwnProps;
	exports.diffByUnit = util_1.diffByUnit;
	exports.diffDay = util_1.diffDay;
	exports.diffDayTime = util_1.diffDayTime;
	exports.diffPoints = util_1.diffPoints;
	exports.disableCursor = util_1.disableCursor;
	exports.distributeHeight = util_1.distributeHeight;
	exports.enableCursor = util_1.enableCursor;
	exports.firstDefined = util_1.firstDefined;
	exports.getEvIsTouch = util_1.getEvIsTouch;
	exports.getEvX = util_1.getEvX;
	exports.getEvY = util_1.getEvY;
	exports.getRectCenter = util_1.getRectCenter;
	exports.getScrollParent = util_1.getScrollParent;
	exports.hasOwnProp = util_1.hasOwnProp;
	exports.isArraysEqual = util_1.isArraysEqual;
	exports.isNativeDate = util_1.isNativeDate;
	exports.isPrimaryMouseButton = util_1.isPrimaryMouseButton;
	exports.isTimeString = util_1.isTimeString;
	exports.matchCellWidths = util_1.matchCellWidths;
	exports.mergeProps = util_1.mergeProps;
	exports.preventSelection = util_1.preventSelection;
	exports.removeMatching = util_1.removeMatching;
	exports.stripHtmlEntities = util_1.stripHtmlEntities;
	exports.subtractInnerElHeight = util_1.subtractInnerElHeight;
	exports.uncompensateScroll = util_1.uncompensateScroll;
	exports.undistributeHeight = util_1.undistributeHeight;
	exports.dayIDs = util_1.dayIDs;
	exports.unitsDesc = util_1.unitsDesc;
	var date_formatting_1 = __webpack_require__(49);
	exports.formatDate = date_formatting_1.formatDate;
	exports.formatRange = date_formatting_1.formatRange;
	exports.queryMostGranularFormatUnit = date_formatting_1.queryMostGranularFormatUnit;
	var locale_1 = __webpack_require__(32);
	exports.datepickerLocale = locale_1.datepickerLocale;
	exports.locale = locale_1.locale;
	exports.getMomentLocaleData = locale_1.getMomentLocaleData;
	exports.populateInstanceComputableOptions = locale_1.populateInstanceComputableOptions;
	var util_2 = __webpack_require__(19);
	exports.eventDefsToEventInstances = util_2.eventDefsToEventInstances;
	exports.eventFootprintToComponentFootprint = util_2.eventFootprintToComponentFootprint;
	exports.eventInstanceToEventRange = util_2.eventInstanceToEventRange;
	exports.eventInstanceToUnzonedRange = util_2.eventInstanceToUnzonedRange;
	exports.eventRangeToEventFootprint = util_2.eventRangeToEventFootprint;
	var moment_ext_1 = __webpack_require__(11);
	exports.moment = moment_ext_1.default;
	var EmitterMixin_1 = __webpack_require__(13);
	exports.EmitterMixin = EmitterMixin_1.default;
	var ListenerMixin_1 = __webpack_require__(7);
	exports.ListenerMixin = ListenerMixin_1.default;
	var Model_1 = __webpack_require__(51);
	exports.Model = Model_1.default;
	var Constraints_1 = __webpack_require__(217);
	exports.Constraints = Constraints_1.default;
	var DateProfileGenerator_1 = __webpack_require__(55);
	exports.DateProfileGenerator = DateProfileGenerator_1.default;
	var UnzonedRange_1 = __webpack_require__(5);
	exports.UnzonedRange = UnzonedRange_1.default;
	var ComponentFootprint_1 = __webpack_require__(12);
	exports.ComponentFootprint = ComponentFootprint_1.default;
	var BusinessHourGenerator_1 = __webpack_require__(218);
	exports.BusinessHourGenerator = BusinessHourGenerator_1.default;
	var EventPeriod_1 = __webpack_require__(219);
	exports.EventPeriod = EventPeriod_1.default;
	var EventManager_1 = __webpack_require__(220);
	exports.EventManager = EventManager_1.default;
	var EventDef_1 = __webpack_require__(37);
	exports.EventDef = EventDef_1.default;
	var EventDefMutation_1 = __webpack_require__(39);
	exports.EventDefMutation = EventDefMutation_1.default;
	var EventDefParser_1 = __webpack_require__(36);
	exports.EventDefParser = EventDefParser_1.default;
	var EventInstance_1 = __webpack_require__(53);
	exports.EventInstance = EventInstance_1.default;
	var EventRange_1 = __webpack_require__(50);
	exports.EventRange = EventRange_1.default;
	var RecurringEventDef_1 = __webpack_require__(54);
	exports.RecurringEventDef = RecurringEventDef_1.default;
	var SingleEventDef_1 = __webpack_require__(9);
	exports.SingleEventDef = SingleEventDef_1.default;
	var EventDefDateMutation_1 = __webpack_require__(40);
	exports.EventDefDateMutation = EventDefDateMutation_1.default;
	var EventDateProfile_1 = __webpack_require__(16);
	exports.EventDateProfile = EventDateProfile_1.default;
	var EventSourceParser_1 = __webpack_require__(38);
	exports.EventSourceParser = EventSourceParser_1.default;
	var EventSource_1 = __webpack_require__(6);
	exports.EventSource = EventSource_1.default;
	var ThemeRegistry_1 = __webpack_require__(57);
	exports.defineThemeSystem = ThemeRegistry_1.defineThemeSystem;
	exports.getThemeSystemClass = ThemeRegistry_1.getThemeSystemClass;
	var EventInstanceGroup_1 = __webpack_require__(20);
	exports.EventInstanceGroup = EventInstanceGroup_1.default;
	var ArrayEventSource_1 = __webpack_require__(56);
	exports.ArrayEventSource = ArrayEventSource_1.default;
	var FuncEventSource_1 = __webpack_require__(223);
	exports.FuncEventSource = FuncEventSource_1.default;
	var JsonFeedEventSource_1 = __webpack_require__(224);
	exports.JsonFeedEventSource = JsonFeedEventSource_1.default;
	var EventFootprint_1 = __webpack_require__(34);
	exports.EventFootprint = EventFootprint_1.default;
	var Class_1 = __webpack_require__(35);
	exports.Class = Class_1.default;
	var Mixin_1 = __webpack_require__(15);
	exports.Mixin = Mixin_1.default;
	var CoordCache_1 = __webpack_require__(58);
	exports.CoordCache = CoordCache_1.default;
	var Iterator_1 = __webpack_require__(225);
	exports.Iterator = Iterator_1.default;
	var DragListener_1 = __webpack_require__(59);
	exports.DragListener = DragListener_1.default;
	var HitDragListener_1 = __webpack_require__(17);
	exports.HitDragListener = HitDragListener_1.default;
	var MouseFollower_1 = __webpack_require__(226);
	exports.MouseFollower = MouseFollower_1.default;
	var ParsableModelMixin_1 = __webpack_require__(52);
	exports.ParsableModelMixin = ParsableModelMixin_1.default;
	var Popover_1 = __webpack_require__(227);
	exports.Popover = Popover_1.default;
	var Promise_1 = __webpack_require__(21);
	exports.Promise = Promise_1.default;
	var TaskQueue_1 = __webpack_require__(228);
	exports.TaskQueue = TaskQueue_1.default;
	var RenderQueue_1 = __webpack_require__(229);
	exports.RenderQueue = RenderQueue_1.default;
	var Scroller_1 = __webpack_require__(41);
	exports.Scroller = Scroller_1.default;
	var Theme_1 = __webpack_require__(22);
	exports.Theme = Theme_1.default;
	var Component_1 = __webpack_require__(230);
	exports.Component = Component_1.default;
	var DateComponent_1 = __webpack_require__(231);
	exports.DateComponent = DateComponent_1.default;
	var InteractiveDateComponent_1 = __webpack_require__(42);
	exports.InteractiveDateComponent = InteractiveDateComponent_1.default;
	var Calendar_1 = __webpack_require__(232);
	exports.Calendar = Calendar_1.default;
	var View_1 = __webpack_require__(43);
	exports.View = View_1.default;
	var ViewRegistry_1 = __webpack_require__(24);
	exports.defineView = ViewRegistry_1.defineView;
	exports.getViewConfig = ViewRegistry_1.getViewConfig;
	var DayTableMixin_1 = __webpack_require__(60);
	exports.DayTableMixin = DayTableMixin_1.default;
	var BusinessHourRenderer_1 = __webpack_require__(61);
	exports.BusinessHourRenderer = BusinessHourRenderer_1.default;
	var EventRenderer_1 = __webpack_require__(44);
	exports.EventRenderer = EventRenderer_1.default;
	var FillRenderer_1 = __webpack_require__(62);
	exports.FillRenderer = FillRenderer_1.default;
	var HelperRenderer_1 = __webpack_require__(63);
	exports.HelperRenderer = HelperRenderer_1.default;
	var ExternalDropping_1 = __webpack_require__(233);
	exports.ExternalDropping = ExternalDropping_1.default;
	var EventResizing_1 = __webpack_require__(234);
	exports.EventResizing = EventResizing_1.default;
	var EventPointing_1 = __webpack_require__(64);
	exports.EventPointing = EventPointing_1.default;
	var EventDragging_1 = __webpack_require__(235);
	exports.EventDragging = EventDragging_1.default;
	var DateSelecting_1 = __webpack_require__(236);
	exports.DateSelecting = DateSelecting_1.default;
	var DateClicking_1 = __webpack_require__(237);
	exports.DateClicking = DateClicking_1.default;
	var Interaction_1 = __webpack_require__(14);
	exports.Interaction = Interaction_1.default;
	var StandardInteractionsMixin_1 = __webpack_require__(65);
	exports.StandardInteractionsMixin = StandardInteractionsMixin_1.default;
	var AgendaView_1 = __webpack_require__(238);
	exports.AgendaView = AgendaView_1.default;
	var TimeGrid_1 = __webpack_require__(239);
	exports.TimeGrid = TimeGrid_1.default;
	var TimeGridEventRenderer_1 = __webpack_require__(240);
	exports.TimeGridEventRenderer = TimeGridEventRenderer_1.default;
	var TimeGridFillRenderer_1 = __webpack_require__(242);
	exports.TimeGridFillRenderer = TimeGridFillRenderer_1.default;
	var TimeGridHelperRenderer_1 = __webpack_require__(241);
	exports.TimeGridHelperRenderer = TimeGridHelperRenderer_1.default;
	var DayGrid_1 = __webpack_require__(66);
	exports.DayGrid = DayGrid_1.default;
	var DayGridEventRenderer_1 = __webpack_require__(243);
	exports.DayGridEventRenderer = DayGridEventRenderer_1.default;
	var DayGridFillRenderer_1 = __webpack_require__(245);
	exports.DayGridFillRenderer = DayGridFillRenderer_1.default;
	var DayGridHelperRenderer_1 = __webpack_require__(244);
	exports.DayGridHelperRenderer = DayGridHelperRenderer_1.default;
	var BasicView_1 = __webpack_require__(67);
	exports.BasicView = BasicView_1.default;
	var BasicViewDateProfileGenerator_1 = __webpack_require__(68);
	exports.BasicViewDateProfileGenerator = BasicViewDateProfileGenerator_1.default;
	var MonthView_1 = __webpack_require__(246);
	exports.MonthView = MonthView_1.default;
	var MonthViewDateProfileGenerator_1 = __webpack_require__(247);
	exports.MonthViewDateProfileGenerator = MonthViewDateProfileGenerator_1.default;
	var ListView_1 = __webpack_require__(248);
	exports.ListView = ListView_1.default;
	var ListEventPointing_1 = __webpack_require__(250);
	exports.ListEventPointing = ListEventPointing_1.default;
	var ListEventRenderer_1 = __webpack_require__(249);
	exports.ListEventRenderer = ListEventRenderer_1.default;
	
	
	/***/ }),
	/* 19 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var EventRange_1 = __webpack_require__(50);
	var EventFootprint_1 = __webpack_require__(34);
	var ComponentFootprint_1 = __webpack_require__(12);
	function eventDefsToEventInstances(eventDefs, unzonedRange) {
	    var eventInstances = [];
	    var i;
	    for (i = 0; i < eventDefs.length; i++) {
	        eventInstances.push.apply(eventInstances, // append
	        eventDefs[i].buildInstances(unzonedRange));
	    }
	    return eventInstances;
	}
	exports.eventDefsToEventInstances = eventDefsToEventInstances;
	function eventInstanceToEventRange(eventInstance) {
	    return new EventRange_1.default(eventInstance.dateProfile.unzonedRange, eventInstance.def, eventInstance);
	}
	exports.eventInstanceToEventRange = eventInstanceToEventRange;
	function eventRangeToEventFootprint(eventRange) {
	    return new EventFootprint_1.default(new ComponentFootprint_1.default(eventRange.unzonedRange, eventRange.eventDef.isAllDay()), eventRange.eventDef, eventRange.eventInstance // might not exist
	    );
	}
	exports.eventRangeToEventFootprint = eventRangeToEventFootprint;
	function eventInstanceToUnzonedRange(eventInstance) {
	    return eventInstance.dateProfile.unzonedRange;
	}
	exports.eventInstanceToUnzonedRange = eventInstanceToUnzonedRange;
	function eventFootprintToComponentFootprint(eventFootprint) {
	    return eventFootprint.componentFootprint;
	}
	exports.eventFootprintToComponentFootprint = eventFootprintToComponentFootprint;
	
	
	/***/ }),
	/* 20 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var UnzonedRange_1 = __webpack_require__(5);
	var util_1 = __webpack_require__(19);
	var EventRange_1 = __webpack_require__(50);
	/*
	It's expected that there will be at least one EventInstance,
	OR that an explicitEventDef is assigned.
	*/
	var EventInstanceGroup = /** @class */ (function () {
	    function EventInstanceGroup(eventInstances) {
	        this.eventInstances = eventInstances || [];
	    }
	    EventInstanceGroup.prototype.getAllEventRanges = function (constraintRange) {
	        if (constraintRange) {
	            return this.sliceNormalRenderRanges(constraintRange);
	        }
	        else {
	            return this.eventInstances.map(util_1.eventInstanceToEventRange);
	        }
	    };
	    EventInstanceGroup.prototype.sliceRenderRanges = function (constraintRange) {
	        if (this.isInverse()) {
	            return this.sliceInverseRenderRanges(constraintRange);
	        }
	        else {
	            return this.sliceNormalRenderRanges(constraintRange);
	        }
	    };
	    EventInstanceGroup.prototype.sliceNormalRenderRanges = function (constraintRange) {
	        var eventInstances = this.eventInstances;
	        var i;
	        var eventInstance;
	        var slicedRange;
	        var slicedEventRanges = [];
	        for (i = 0; i < eventInstances.length; i++) {
	            eventInstance = eventInstances[i];
	            slicedRange = eventInstance.dateProfile.unzonedRange.intersect(constraintRange);
	            if (slicedRange) {
	                slicedEventRanges.push(new EventRange_1.default(slicedRange, eventInstance.def, eventInstance));
	            }
	        }
	        return slicedEventRanges;
	    };
	    EventInstanceGroup.prototype.sliceInverseRenderRanges = function (constraintRange) {
	        var unzonedRanges = this.eventInstances.map(util_1.eventInstanceToUnzonedRange);
	        var ownerDef = this.getEventDef();
	        unzonedRanges = UnzonedRange_1.default.invertRanges(unzonedRanges, constraintRange);
	        return unzonedRanges.map(function (unzonedRange) {
	            return new EventRange_1.default(unzonedRange, ownerDef); // don't give an EventInstance
	        });
	    };
	    EventInstanceGroup.prototype.isInverse = function () {
	        return this.getEventDef().hasInverseRendering();
	    };
	    EventInstanceGroup.prototype.getEventDef = function () {
	        return this.explicitEventDef || this.eventInstances[0].def;
	    };
	    return EventInstanceGroup;
	}());
	exports.default = EventInstanceGroup;
	
	
	/***/ }),
	/* 21 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var $ = __webpack_require__(3);
	var PromiseStub = {
	    construct: function (executor) {
	        var deferred = $.Deferred();
	        var promise = deferred.promise();
	        if (typeof executor === 'function') {
	            executor(function (val) {
	                deferred.resolve(val);
	                attachImmediatelyResolvingThen(promise, val);
	            }, function () {
	                deferred.reject();
	                attachImmediatelyRejectingThen(promise);
	            });
	        }
	        return promise;
	    },
	    resolve: function (val) {
	        var deferred = $.Deferred().resolve(val);
	        var promise = deferred.promise();
	        attachImmediatelyResolvingThen(promise, val);
	        return promise;
	    },
	    reject: function () {
	        var deferred = $.Deferred().reject();
	        var promise = deferred.promise();
	        attachImmediatelyRejectingThen(promise);
	        return promise;
	    }
	};
	exports.default = PromiseStub;
	function attachImmediatelyResolvingThen(promise, val) {
	    promise.then = function (onResolve) {
	        if (typeof onResolve === 'function') {
	            return PromiseStub.resolve(onResolve(val));
	        }
	        return promise;
	    };
	}
	function attachImmediatelyRejectingThen(promise) {
	    promise.then = function (onResolve, onReject) {
	        if (typeof onReject === 'function') {
	            onReject();
	        }
	        return promise;
	    };
	}
	
	
	/***/ }),
	/* 22 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var $ = __webpack_require__(3);
	var Theme = /** @class */ (function () {
	    function Theme(optionsManager) {
	        this.optionsManager = optionsManager;
	        this.processIconOverride();
	    }
	    Theme.prototype.processIconOverride = function () {
	        if (this.iconOverrideOption) {
	            this.setIconOverride(this.optionsManager.get(this.iconOverrideOption));
	        }
	    };
	    Theme.prototype.setIconOverride = function (iconOverrideHash) {
	        var iconClassesCopy;
	        var buttonName;
	        if ($.isPlainObject(iconOverrideHash)) {
	            iconClassesCopy = $.extend({}, this.iconClasses);
	            for (buttonName in iconOverrideHash) {
	                iconClassesCopy[buttonName] = this.applyIconOverridePrefix(iconOverrideHash[buttonName]);
	            }
	            this.iconClasses = iconClassesCopy;
	        }
	        else if (iconOverrideHash === false) {
	            this.iconClasses = {};
	        }
	    };
	    Theme.prototype.applyIconOverridePrefix = function (className) {
	        var prefix = this.iconOverridePrefix;
	        if (prefix && className.indexOf(prefix) !== 0) { // if not already present
	            className = prefix + className;
	        }
	        return className;
	    };
	    Theme.prototype.getClass = function (key) {
	        return this.classes[key] || '';
	    };
	    Theme.prototype.getIconClass = function (buttonName) {
	        var className = this.iconClasses[buttonName];
	        if (className) {
	            return this.baseIconClass + ' ' + className;
	        }
	        return '';
	    };
	    Theme.prototype.getCustomButtonIconClass = function (customButtonProps) {
	        var className;
	        if (this.iconOverrideCustomButtonOption) {
	            className = customButtonProps[this.iconOverrideCustomButtonOption];
	            if (className) {
	                return this.baseIconClass + ' ' + this.applyIconOverridePrefix(className);
	            }
	        }
	        return '';
	    };
	    return Theme;
	}());
	exports.default = Theme;
	Theme.prototype.classes = {};
	Theme.prototype.iconClasses = {};
	Theme.prototype.baseIconClass = '';
	Theme.prototype.iconOverridePrefix = '';
	
	
	/***/ }),
	/* 23 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var $ = __webpack_require__(3);
	var exportHooks = __webpack_require__(18);
	var EmitterMixin_1 = __webpack_require__(13);
	var ListenerMixin_1 = __webpack_require__(7);
	exportHooks.touchMouseIgnoreWait = 500;
	var globalEmitter = null;
	var neededCount = 0;
	/*
	Listens to document and window-level user-interaction events, like touch events and mouse events,
	and fires these events as-is to whoever is observing a GlobalEmitter.
	Best when used as a singleton via GlobalEmitter.get()
	
	Normalizes mouse/touch events. For examples:
	- ignores the the simulated mouse events that happen after a quick tap: mousemove+mousedown+mouseup+click
	- compensates for various buggy scenarios where a touchend does not fire
	*/
	var GlobalEmitter = /** @class */ (function () {
	    function GlobalEmitter() {
	        this.isTouching = false;
	        this.mouseIgnoreDepth = 0;
	    }
	    // gets the singleton
	    GlobalEmitter.get = function () {
	        if (!globalEmitter) {
	            globalEmitter = new GlobalEmitter();
	            globalEmitter.bind();
	        }
	        return globalEmitter;
	    };
	    // called when an object knows it will need a GlobalEmitter in the near future.
	    GlobalEmitter.needed = function () {
	        GlobalEmitter.get(); // ensures globalEmitter
	        neededCount++;
	    };
	    // called when the object that originally called needed() doesn't need a GlobalEmitter anymore.
	    GlobalEmitter.unneeded = function () {
	        neededCount--;
	        if (!neededCount) { // nobody else needs it
	            globalEmitter.unbind();
	            globalEmitter = null;
	        }
	    };
	    GlobalEmitter.prototype.bind = function () {
	        var _this = this;
	        this.listenTo($(document), {
	            touchstart: this.handleTouchStart,
	            touchcancel: this.handleTouchCancel,
	            touchend: this.handleTouchEnd,
	            mousedown: this.handleMouseDown,
	            mousemove: this.handleMouseMove,
	            mouseup: this.handleMouseUp,
	            click: this.handleClick,
	            selectstart: this.handleSelectStart,
	            contextmenu: this.handleContextMenu
	        });
	        // because we need to call preventDefault
	        // because https://www.chromestatus.com/features/5093566007214080
	        // TODO: investigate performance because this is a global handler
	        window.addEventListener('touchmove', this.handleTouchMoveProxy = function (ev) {
	            _this.handleTouchMove($.Event(ev));
	        }, { passive: false } // allows preventDefault()
	        );
	        // attach a handler to get called when ANY scroll action happens on the page.
	        // this was impossible to do with normal on/off because 'scroll' doesn't bubble.
	        // http://stackoverflow.com/a/32954565/96342
	        window.addEventListener('scroll', this.handleScrollProxy = function (ev) {
	            _this.handleScroll($.Event(ev));
	        }, true // useCapture
	        );
	    };
	    GlobalEmitter.prototype.unbind = function () {
	        this.stopListeningTo($(document));
	        window.removeEventListener('touchmove', this.handleTouchMoveProxy, { passive: false } // use same options as addEventListener
	        );
	        window.removeEventListener('scroll', this.handleScrollProxy, true // useCapture
	        );
	    };
	    // Touch Handlers
	    // -----------------------------------------------------------------------------------------------------------------
	    GlobalEmitter.prototype.handleTouchStart = function (ev) {
	        // if a previous touch interaction never ended with a touchend, then implicitly end it,
	        // but since a new touch interaction is about to begin, don't start the mouse ignore period.
	        this.stopTouch(ev, true); // skipMouseIgnore=true
	        this.isTouching = true;
	        this.trigger('touchstart', ev);
	    };
	    GlobalEmitter.prototype.handleTouchMove = function (ev) {
	        if (this.isTouching) {
	            this.trigger('touchmove', ev);
	        }
	    };
	    GlobalEmitter.prototype.handleTouchCancel = function (ev) {
	        if (this.isTouching) {
	            this.trigger('touchcancel', ev);
	            // Have touchcancel fire an artificial touchend. That way, handlers won't need to listen to both.
	            // If touchend fires later, it won't have any effect b/c isTouching will be false.
	            this.stopTouch(ev);
	        }
	    };
	    GlobalEmitter.prototype.handleTouchEnd = function (ev) {
	        this.stopTouch(ev);
	    };
	    // Mouse Handlers
	    // -----------------------------------------------------------------------------------------------------------------
	    GlobalEmitter.prototype.handleMouseDown = function (ev) {
	        if (!this.shouldIgnoreMouse()) {
	            this.trigger('mousedown', ev);
	        }
	    };
	    GlobalEmitter.prototype.handleMouseMove = function (ev) {
	        if (!this.shouldIgnoreMouse()) {
	            this.trigger('mousemove', ev);
	        }
	    };
	    GlobalEmitter.prototype.handleMouseUp = function (ev) {
	        if (!this.shouldIgnoreMouse()) {
	            this.trigger('mouseup', ev);
	        }
	    };
	    GlobalEmitter.prototype.handleClick = function (ev) {
	        if (!this.shouldIgnoreMouse()) {
	            this.trigger('click', ev);
	        }
	    };
	    // Misc Handlers
	    // -----------------------------------------------------------------------------------------------------------------
	    GlobalEmitter.prototype.handleSelectStart = function (ev) {
	        this.trigger('selectstart', ev);
	    };
	    GlobalEmitter.prototype.handleContextMenu = function (ev) {
	        this.trigger('contextmenu', ev);
	    };
	    GlobalEmitter.prototype.handleScroll = function (ev) {
	        this.trigger('scroll', ev);
	    };
	    // Utils
	    // -----------------------------------------------------------------------------------------------------------------
	    GlobalEmitter.prototype.stopTouch = function (ev, skipMouseIgnore) {
	        if (skipMouseIgnore === void 0) { skipMouseIgnore = false; }
	        if (this.isTouching) {
	            this.isTouching = false;
	            this.trigger('touchend', ev);
	            if (!skipMouseIgnore) {
	                this.startTouchMouseIgnore();
	            }
	        }
	    };
	    GlobalEmitter.prototype.startTouchMouseIgnore = function () {
	        var _this = this;
	        var wait = exportHooks.touchMouseIgnoreWait;
	        if (wait) {
	            this.mouseIgnoreDepth++;
	            setTimeout(function () {
	                _this.mouseIgnoreDepth--;
	            }, wait);
	        }
	    };
	    GlobalEmitter.prototype.shouldIgnoreMouse = function () {
	        return this.isTouching || Boolean(this.mouseIgnoreDepth);
	    };
	    return GlobalEmitter;
	}());
	exports.default = GlobalEmitter;
	ListenerMixin_1.default.mixInto(GlobalEmitter);
	EmitterMixin_1.default.mixInto(GlobalEmitter);
	
	
	/***/ }),
	/* 24 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var exportHooks = __webpack_require__(18);
	exports.viewHash = {};
	exportHooks.views = exports.viewHash;
	function defineView(viewName, viewConfig) {
	    exports.viewHash[viewName] = viewConfig;
	}
	exports.defineView = defineView;
	function getViewConfig(viewName) {
	    return exports.viewHash[viewName];
	}
	exports.getViewConfig = getViewConfig;
	
	
	/***/ }),
	/* 25 */,
	/* 26 */,
	/* 27 */,
	/* 28 */,
	/* 29 */,
	/* 30 */,
	/* 31 */,
	/* 32 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var $ = __webpack_require__(3);
	var moment = __webpack_require__(0);
	var exportHooks = __webpack_require__(18);
	var options_1 = __webpack_require__(33);
	var util_1 = __webpack_require__(4);
	exports.localeOptionHash = {};
	exportHooks.locales = exports.localeOptionHash;
	// NOTE: can't guarantee any of these computations will run because not every locale has datepicker
	// configs, so make sure there are English fallbacks for these in the defaults file.
	var dpComputableOptions = {
	    buttonText: function (dpOptions) {
	        return {
	            // the translations sometimes wrongly contain HTML entities
	            prev: util_1.stripHtmlEntities(dpOptions.prevText),
	            next: util_1.stripHtmlEntities(dpOptions.nextText),
	            today: util_1.stripHtmlEntities(dpOptions.currentText)
	        };
	    },
	    // Produces format strings like "MMMM YYYY" -> "September 2014"
	    monthYearFormat: function (dpOptions) {
	        return dpOptions.showMonthAfterYear ?
	            'YYYY[' + dpOptions.yearSuffix + '] MMMM' :
	            'MMMM YYYY[' + dpOptions.yearSuffix + ']';
	    }
	};
	var momComputableOptions = {
	    // Produces format strings like "ddd M/D" -> "Fri 9/15"
	    dayOfMonthFormat: function (momOptions, fcOptions) {
	        var format = momOptions.longDateFormat('l'); // for the format like "M/D/YYYY"
	        // strip the year off the edge, as well as other misc non-whitespace chars
	        format = format.replace(/^Y+[^\w\s]*|[^\w\s]*Y+$/g, '');
	        if (fcOptions.isRTL) {
	            format += ' ddd'; // for RTL, add day-of-week to end
	        }
	        else {
	            format = 'ddd ' + format; // for LTR, add day-of-week to beginning
	        }
	        return format;
	    },
	    // Produces format strings like "h:mma" -> "6:00pm"
	    mediumTimeFormat: function (momOptions) {
	        return momOptions.longDateFormat('LT')
	            .replace(/\s*a$/i, 'a'); // convert AM/PM/am/pm to lowercase. remove any spaces beforehand
	    },
	    // Produces format strings like "h(:mm)a" -> "6pm" / "6:30pm"
	    smallTimeFormat: function (momOptions) {
	        return momOptions.longDateFormat('LT')
	            .replace(':mm', '(:mm)')
	            .replace(/(\Wmm)$/, '($1)') // like above, but for foreign locales
	            .replace(/\s*a$/i, 'a'); // convert AM/PM/am/pm to lowercase. remove any spaces beforehand
	    },
	    // Produces format strings like "h(:mm)t" -> "6p" / "6:30p"
	    extraSmallTimeFormat: function (momOptions) {
	        return momOptions.longDateFormat('LT')
	            .replace(':mm', '(:mm)')
	            .replace(/(\Wmm)$/, '($1)') // like above, but for foreign locales
	            .replace(/\s*a$/i, 't'); // convert to AM/PM/am/pm to lowercase one-letter. remove any spaces beforehand
	    },
	    // Produces format strings like "ha" / "H" -> "6pm" / "18"
	    hourFormat: function (momOptions) {
	        return momOptions.longDateFormat('LT')
	            .replace(':mm', '')
	            .replace(/(\Wmm)$/, '') // like above, but for foreign locales
	            .replace(/\s*a$/i, 'a'); // convert AM/PM/am/pm to lowercase. remove any spaces beforehand
	    },
	    // Produces format strings like "h:mm" -> "6:30" (with no AM/PM)
	    noMeridiemTimeFormat: function (momOptions) {
	        return momOptions.longDateFormat('LT')
	            .replace(/\s*a$/i, ''); // remove trailing AM/PM
	    }
	};
	// options that should be computed off live calendar options (considers override options)
	// TODO: best place for this? related to locale?
	// TODO: flipping text based on isRTL is a bad idea because the CSS `direction` might want to handle it
	var instanceComputableOptions = {
	    // Produces format strings for results like "Mo 16"
	    smallDayDateFormat: function (options) {
	        return options.isRTL ?
	            'D dd' :
	            'dd D';
	    },
	    // Produces format strings for results like "Wk 5"
	    weekFormat: function (options) {
	        return options.isRTL ?
	            'w[ ' + options.weekNumberTitle + ']' :
	            '[' + options.weekNumberTitle + ' ]w';
	    },
	    // Produces format strings for results like "Wk5"
	    smallWeekFormat: function (options) {
	        return options.isRTL ?
	            'w[' + options.weekNumberTitle + ']' :
	            '[' + options.weekNumberTitle + ']w';
	    }
	};
	// TODO: make these computable properties in optionsManager
	function populateInstanceComputableOptions(options) {
	    $.each(instanceComputableOptions, function (name, func) {
	        if (options[name] == null) {
	            options[name] = func(options);
	        }
	    });
	}
	exports.populateInstanceComputableOptions = populateInstanceComputableOptions;
	// Initialize jQuery UI datepicker translations while using some of the translations
	// Will set this as the default locales for datepicker.
	function datepickerLocale(localeCode, dpLocaleCode, dpOptions) {
	    // get the FullCalendar internal option hash for this locale. create if necessary
	    var fcOptions = exports.localeOptionHash[localeCode] || (exports.localeOptionHash[localeCode] = {});
	    // transfer some simple options from datepicker to fc
	    fcOptions.isRTL = dpOptions.isRTL;
	    fcOptions.weekNumberTitle = dpOptions.weekHeader;
	    // compute some more complex options from datepicker
	    $.each(dpComputableOptions, function (name, func) {
	        fcOptions[name] = func(dpOptions);
	    });
	    var jqDatePicker = $.datepicker;
	    // is jQuery UI Datepicker is on the page?
	    if (jqDatePicker) {
	        // Register the locale data.
	        // FullCalendar and MomentJS use locale codes like "pt-br" but Datepicker
	        // does it like "pt-BR" or if it doesn't have the locale, maybe just "pt".
	        // Make an alias so the locale can be referenced either way.
	        jqDatePicker.regional[dpLocaleCode] =
	            jqDatePicker.regional[localeCode] = // alias
	                dpOptions;
	        // Alias 'en' to the default locale data. Do this every time.
	        jqDatePicker.regional.en = jqDatePicker.regional[''];
	        // Set as Datepicker's global defaults.
	        jqDatePicker.setDefaults(dpOptions);
	    }
	}
	exports.datepickerLocale = datepickerLocale;
	// Sets FullCalendar-specific translations. Will set the locales as the global default.
	function locale(localeCode, newFcOptions) {
	    var fcOptions;
	    var momOptions;
	    // get the FullCalendar internal option hash for this locale. create if necessary
	    fcOptions = exports.localeOptionHash[localeCode] || (exports.localeOptionHash[localeCode] = {});
	    // provided new options for this locales? merge them in
	    if (newFcOptions) {
	        fcOptions = exports.localeOptionHash[localeCode] = options_1.mergeOptions([fcOptions, newFcOptions]);
	    }
	    // compute locale options that weren't defined.
	    // always do this. newFcOptions can be undefined when initializing from i18n file,
	    // so no way to tell if this is an initialization or a default-setting.
	    momOptions = getMomentLocaleData(localeCode); // will fall back to en
	    $.each(momComputableOptions, function (name, func) {
	        if (fcOptions[name] == null) {
	            fcOptions[name] = (func)(momOptions, fcOptions);
	        }
	    });
	    // set it as the default locale for FullCalendar
	    options_1.globalDefaults.locale = localeCode;
	}
	exports.locale = locale;
	// Returns moment's internal locale data. If doesn't exist, returns English.
	function getMomentLocaleData(localeCode) {
	    return moment.localeData(localeCode) || moment.localeData('en');
	}
	exports.getMomentLocaleData = getMomentLocaleData;
	// Initialize English by forcing computation of moment-derived options.
	// Also, sets it as the default.
	locale('en', options_1.englishDefaults);
	
	
	/***/ }),
	/* 33 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var util_1 = __webpack_require__(4);
	exports.globalDefaults = {
	    titleRangeSeparator: ' \u2013 ',
	    monthYearFormat: 'MMMM YYYY',
	    defaultTimedEventDuration: '02:00:00',
	    defaultAllDayEventDuration: { days: 1 },
	    forceEventDuration: false,
	    nextDayThreshold: '09:00:00',
	    // display
	    columnHeader: true,
	    defaultView: 'month',
	    aspectRatio: 1.35,
	    header: {
	        left: 'title',
	        center: '',
	        right: 'today prev,next'
	    },
	    weekends: true,
	    weekNumbers: false,
	    weekNumberTitle: 'W',
	    weekNumberCalculation: 'local',
	    // editable: false,
	    // nowIndicator: false,
	    scrollTime: '06:00:00',
	    minTime: '00:00:00',
	    maxTime: '24:00:00',
	    showNonCurrentDates: true,
	    // event ajax
	    lazyFetching: true,
	    startParam: 'start',
	    endParam: 'end',
	    timezoneParam: 'timezone',
	    timezone: false,
	    // allDayDefault: undefined,
	    // locale
	    locale: null,
	    isRTL: false,
	    buttonText: {
	        prev: 'prev',
	        next: 'next',
	        prevYear: 'prev year',
	        nextYear: 'next year',
	        year: 'year',
	        today: 'today',
	        month: 'month',
	        week: 'week',
	        day: 'day'
	    },
	    // buttonIcons: null,
	    allDayText: 'all-day',
	    // allows setting a min-height to the event segment to prevent short events overlapping each other
	    agendaEventMinHeight: 0,
	    // jquery-ui theming
	    theme: false,
	    // themeButtonIcons: null,
	    // eventResizableFromStart: false,
	    dragOpacity: .75,
	    dragRevertDuration: 500,
	    dragScroll: true,
	    // selectable: false,
	    unselectAuto: true,
	    // selectMinDistance: 0,
	    dropAccept: '*',
	    eventOrder: 'title',
	    // eventRenderWait: null,
	    eventLimit: false,
	    eventLimitText: 'more',
	    eventLimitClick: 'popover',
	    dayPopoverFormat: 'LL',
	    handleWindowResize: true,
	    windowResizeDelay: 100,
	    longPressDelay: 1000
	};
	exports.englishDefaults = {
	    dayPopoverFormat: 'dddd, MMMM D'
	};
	exports.rtlDefaults = {
	    header: {
	        left: 'next,prev today',
	        center: '',
	        right: 'title'
	    },
	    buttonIcons: {
	        prev: 'right-single-arrow',
	        next: 'left-single-arrow',
	        prevYear: 'right-double-arrow',
	        nextYear: 'left-double-arrow'
	    },
	    themeButtonIcons: {
	        prev: 'circle-triangle-e',
	        next: 'circle-triangle-w',
	        nextYear: 'seek-prev',
	        prevYear: 'seek-next'
	    }
	};
	var complexOptions = [
	    'header',
	    'footer',
	    'buttonText',
	    'buttonIcons',
	    'themeButtonIcons'
	];
	// Merges an array of option objects into a single object
	function mergeOptions(optionObjs) {
	    return util_1.mergeProps(optionObjs, complexOptions);
	}
	exports.mergeOptions = mergeOptions;
	
	
	/***/ }),
	/* 34 */
	/***/ (function(module, exports) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var EventFootprint = /** @class */ (function () {
	    function EventFootprint(componentFootprint, eventDef, eventInstance) {
	        this.componentFootprint = componentFootprint;
	        this.eventDef = eventDef;
	        if (eventInstance) {
	            this.eventInstance = eventInstance;
	        }
	    }
	    EventFootprint.prototype.getEventLegacy = function () {
	        return (this.eventInstance || this.eventDef).toLegacy();
	    };
	    return EventFootprint;
	}());
	exports.default = EventFootprint;
	
	
	/***/ }),
	/* 35 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var util_1 = __webpack_require__(4);
	// Class that all other classes will inherit from
	var Class = /** @class */ (function () {
	    function Class() {
	    }
	    // Called on a class to create a subclass.
	    // LIMITATION: cannot provide a constructor!
	    Class.extend = function (members) {
	        var SubClass = /** @class */ (function (_super) {
	            tslib_1.__extends(SubClass, _super);
	            function SubClass() {
	                return _super !== null && _super.apply(this, arguments) || this;
	            }
	            return SubClass;
	        }(this));
	        util_1.copyOwnProps(members, SubClass.prototype);
	        return SubClass;
	    };
	    // Adds new member variables/methods to the class's prototype.
	    // Can be called with another class, or a plain object hash containing new members.
	    Class.mixin = function (members) {
	        util_1.copyOwnProps(members, this.prototype);
	    };
	    return Class;
	}());
	exports.default = Class;
	
	
	/***/ }),
	/* 36 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var moment = __webpack_require__(0);
	var util_1 = __webpack_require__(4);
	var SingleEventDef_1 = __webpack_require__(9);
	var RecurringEventDef_1 = __webpack_require__(54);
	exports.default = {
	    parse: function (eventInput, source) {
	        if (util_1.isTimeString(eventInput.start) || moment.isDuration(eventInput.start) ||
	            util_1.isTimeString(eventInput.end) || moment.isDuration(eventInput.end)) {
	            return RecurringEventDef_1.default.parse(eventInput, source);
	        }
	        else {
	            return SingleEventDef_1.default.parse(eventInput, source);
	        }
	    }
	};
	
	
	/***/ }),
	/* 37 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var $ = __webpack_require__(3);
	var ParsableModelMixin_1 = __webpack_require__(52);
	var EventDef = /** @class */ (function () {
	    function EventDef(source) {
	        this.source = source;
	        this.className = [];
	        this.miscProps = {};
	    }
	    EventDef.parse = function (rawInput, source) {
	        var def = new this(source);
	        if (def.applyProps(rawInput)) {
	            return def;
	        }
	        return false;
	    };
	    EventDef.normalizeId = function (id) {
	        return String(id);
	    };
	    EventDef.generateId = function () {
	        return '_fc' + (EventDef.uuid++);
	    };
	    EventDef.prototype.clone = function () {
	        var copy = new this.constructor(this.source);
	        copy.id = this.id;
	        copy.rawId = this.rawId;
	        copy.uid = this.uid; // not really unique anymore :(
	        EventDef.copyVerbatimStandardProps(this, copy);
	        copy.className = this.className.slice(); // copy
	        copy.miscProps = $.extend({}, this.miscProps);
	        return copy;
	    };
	    EventDef.prototype.hasInverseRendering = function () {
	        return this.getRendering() === 'inverse-background';
	    };
	    EventDef.prototype.hasBgRendering = function () {
	        var rendering = this.getRendering();
	        return rendering === 'inverse-background' || rendering === 'background';
	    };
	    EventDef.prototype.getRendering = function () {
	        if (this.rendering != null) {
	            return this.rendering;
	        }
	        return this.source.rendering;
	    };
	    EventDef.prototype.getConstraint = function () {
	        if (this.constraint != null) {
	            return this.constraint;
	        }
	        if (this.source.constraint != null) {
	            return this.source.constraint;
	        }
	        return this.source.calendar.opt('eventConstraint'); // what about View option?
	    };
	    EventDef.prototype.getOverlap = function () {
	        if (this.overlap != null) {
	            return this.overlap;
	        }
	        if (this.source.overlap != null) {
	            return this.source.overlap;
	        }
	        return this.source.calendar.opt('eventOverlap'); // what about View option?
	    };
	    EventDef.prototype.isStartExplicitlyEditable = function () {
	        if (this.startEditable != null) {
	            return this.startEditable;
	        }
	        return this.source.startEditable;
	    };
	    EventDef.prototype.isDurationExplicitlyEditable = function () {
	        if (this.durationEditable != null) {
	            return this.durationEditable;
	        }
	        return this.source.durationEditable;
	    };
	    EventDef.prototype.isExplicitlyEditable = function () {
	        if (this.editable != null) {
	            return this.editable;
	        }
	        return this.source.editable;
	    };
	    EventDef.prototype.toLegacy = function () {
	        var obj = $.extend({}, this.miscProps);
	        obj._id = this.uid;
	        obj.source = this.source;
	        obj.className = this.className.slice(); // copy
	        obj.allDay = this.isAllDay();
	        if (this.rawId != null) {
	            obj.id = this.rawId;
	        }
	        EventDef.copyVerbatimStandardProps(this, obj);
	        return obj;
	    };
	    EventDef.prototype.applyManualStandardProps = function (rawProps) {
	        if (rawProps.id != null) {
	            this.id = EventDef.normalizeId((this.rawId = rawProps.id));
	        }
	        else {
	            this.id = EventDef.generateId();
	        }
	        if (rawProps._id != null) { // accept this prop, even tho somewhat internal
	            this.uid = String(rawProps._id);
	        }
	        else {
	            this.uid = EventDef.generateId();
	        }
	        // TODO: converge with EventSource
	        if ($.isArray(rawProps.className)) {
	            this.className = rawProps.className;
	        }
	        if (typeof rawProps.className === 'string') {
	            this.className = rawProps.className.split(/\s+/);
	        }
	        return true;
	    };
	    EventDef.prototype.applyMiscProps = function (rawProps) {
	        $.extend(this.miscProps, rawProps);
	    };
	    EventDef.uuid = 0;
	    EventDef.defineStandardProps = ParsableModelMixin_1.default.defineStandardProps;
	    EventDef.copyVerbatimStandardProps = ParsableModelMixin_1.default.copyVerbatimStandardProps;
	    return EventDef;
	}());
	exports.default = EventDef;
	ParsableModelMixin_1.default.mixInto(EventDef);
	EventDef.defineStandardProps({
	    // not automatically assigned (`false`)
	    _id: false,
	    id: false,
	    className: false,
	    source: false,
	    // automatically assigned (`true`)
	    title: true,
	    url: true,
	    rendering: true,
	    constraint: true,
	    overlap: true,
	    editable: true,
	    startEditable: true,
	    durationEditable: true,
	    color: true,
	    backgroundColor: true,
	    borderColor: true,
	    textColor: true
	});
	
	
	/***/ }),
	/* 38 */
	/***/ (function(module, exports) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = {
	    sourceClasses: [],
	    registerClass: function (EventSourceClass) {
	        this.sourceClasses.unshift(EventSourceClass); // give highest priority
	    },
	    parse: function (rawInput, calendar) {
	        var sourceClasses = this.sourceClasses;
	        var i;
	        var eventSource;
	        for (i = 0; i < sourceClasses.length; i++) {
	            eventSource = sourceClasses[i].parse(rawInput, calendar);
	            if (eventSource) {
	                return eventSource;
	            }
	        }
	    }
	};
	
	
	/***/ }),
	/* 39 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var util_1 = __webpack_require__(4);
	var EventDateProfile_1 = __webpack_require__(16);
	var EventDef_1 = __webpack_require__(37);
	var EventDefDateMutation_1 = __webpack_require__(40);
	var SingleEventDef_1 = __webpack_require__(9);
	var EventDefMutation = /** @class */ (function () {
	    function EventDefMutation() {
	    }
	    EventDefMutation.createFromRawProps = function (eventInstance, rawProps, largeUnit) {
	        var eventDef = eventInstance.def;
	        var dateProps = {};
	        var standardProps = {};
	        var miscProps = {};
	        var verbatimStandardProps = {};
	        var eventDefId = null;
	        var className = null;
	        var propName;
	        var dateProfile;
	        var dateMutation;
	        var defMutation;
	        for (propName in rawProps) {
	            if (EventDateProfile_1.default.isStandardProp(propName)) {
	                dateProps[propName] = rawProps[propName];
	            }
	            else if (eventDef.isStandardProp(propName)) {
	                standardProps[propName] = rawProps[propName];
	            }
	            else if (eventDef.miscProps[propName] !== rawProps[propName]) { // only if changed
	                miscProps[propName] = rawProps[propName];
	            }
	        }
	        dateProfile = EventDateProfile_1.default.parse(dateProps, eventDef.source);
	        if (dateProfile) { // no failure?
	            dateMutation = EventDefDateMutation_1.default.createFromDiff(eventInstance.dateProfile, dateProfile, largeUnit);
	        }
	        if (standardProps.id !== eventDef.id) {
	            eventDefId = standardProps.id; // only apply if there's a change
	        }
	        if (!util_1.isArraysEqual(standardProps.className, eventDef.className)) {
	            className = standardProps.className; // only apply if there's a change
	        }
	        EventDef_1.default.copyVerbatimStandardProps(standardProps, // src
	        verbatimStandardProps // dest
	        );
	        defMutation = new EventDefMutation();
	        defMutation.eventDefId = eventDefId;
	        defMutation.className = className;
	        defMutation.verbatimStandardProps = verbatimStandardProps;
	        defMutation.miscProps = miscProps;
	        if (dateMutation) {
	            defMutation.dateMutation = dateMutation;
	        }
	        return defMutation;
	    };
	    /*
	    eventDef assumed to be a SingleEventDef.
	    returns an undo function.
	    */
	    EventDefMutation.prototype.mutateSingle = function (eventDef) {
	        var origDateProfile;
	        if (this.dateMutation) {
	            origDateProfile = eventDef.dateProfile;
	            eventDef.dateProfile = this.dateMutation.buildNewDateProfile(origDateProfile, eventDef.source.calendar);
	        }
	        // can't undo
	        // TODO: more DRY with EventDef::applyManualStandardProps
	        if (this.eventDefId != null) {
	            eventDef.id = EventDef_1.default.normalizeId((eventDef.rawId = this.eventDefId));
	        }
	        // can't undo
	        // TODO: more DRY with EventDef::applyManualStandardProps
	        if (this.className) {
	            eventDef.className = this.className;
	        }
	        // can't undo
	        if (this.verbatimStandardProps) {
	            SingleEventDef_1.default.copyVerbatimStandardProps(this.verbatimStandardProps, // src
	            eventDef // dest
	            );
	        }
	        // can't undo
	        if (this.miscProps) {
	            eventDef.applyMiscProps(this.miscProps);
	        }
	        if (origDateProfile) {
	            return function () {
	                eventDef.dateProfile = origDateProfile;
	            };
	        }
	        else {
	            return function () { };
	        }
	    };
	    EventDefMutation.prototype.setDateMutation = function (dateMutation) {
	        if (dateMutation && !dateMutation.isEmpty()) {
	            this.dateMutation = dateMutation;
	        }
	        else {
	            this.dateMutation = null;
	        }
	    };
	    EventDefMutation.prototype.isEmpty = function () {
	        return !this.dateMutation;
	    };
	    return EventDefMutation;
	}());
	exports.default = EventDefMutation;
	
	
	/***/ }),
	/* 40 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var util_1 = __webpack_require__(4);
	var EventDateProfile_1 = __webpack_require__(16);
	var EventDefDateMutation = /** @class */ (function () {
	    function EventDefDateMutation() {
	        this.clearEnd = false;
	        this.forceTimed = false;
	        this.forceAllDay = false;
	    }
	    EventDefDateMutation.createFromDiff = function (dateProfile0, dateProfile1, largeUnit) {
	        var clearEnd = dateProfile0.end && !dateProfile1.end;
	        var forceTimed = dateProfile0.isAllDay() && !dateProfile1.isAllDay();
	        var forceAllDay = !dateProfile0.isAllDay() && dateProfile1.isAllDay();
	        var dateDelta;
	        var endDiff;
	        var endDelta;
	        var mutation;
	        // subtracts the dates in the appropriate way, returning a duration
	        function subtractDates(date1, date0) {
	            if (largeUnit) {
	                return util_1.diffByUnit(date1, date0, largeUnit); // poorly named
	            }
	            else if (dateProfile1.isAllDay()) {
	                return util_1.diffDay(date1, date0); // poorly named
	            }
	            else {
	                return util_1.diffDayTime(date1, date0); // poorly named
	            }
	        }
	        dateDelta = subtractDates(dateProfile1.start, dateProfile0.start);
	        if (dateProfile1.end) {
	            // use unzonedRanges because dateProfile0.end might be null
	            endDiff = subtractDates(dateProfile1.unzonedRange.getEnd(), dateProfile0.unzonedRange.getEnd());
	            endDelta = endDiff.subtract(dateDelta);
	        }
	        mutation = new EventDefDateMutation();
	        mutation.clearEnd = clearEnd;
	        mutation.forceTimed = forceTimed;
	        mutation.forceAllDay = forceAllDay;
	        mutation.setDateDelta(dateDelta);
	        mutation.setEndDelta(endDelta);
	        return mutation;
	    };
	    /*
	    returns an undo function.
	    */
	    EventDefDateMutation.prototype.buildNewDateProfile = function (eventDateProfile, calendar) {
	        var start = eventDateProfile.start.clone();
	        var end = null;
	        var shouldRezone = false;
	        if (eventDateProfile.end && !this.clearEnd) {
	            end = eventDateProfile.end.clone();
	        }
	        else if (this.endDelta && !end) {
	            end = calendar.getDefaultEventEnd(eventDateProfile.isAllDay(), start);
	        }
	        if (this.forceTimed) {
	            shouldRezone = true;
	            if (!start.hasTime()) {
	                start.time(0);
	            }
	            if (end && !end.hasTime()) {
	                end.time(0);
	            }
	        }
	        else if (this.forceAllDay) {
	            if (start.hasTime()) {
	                start.stripTime();
	            }
	            if (end && end.hasTime()) {
	                end.stripTime();
	            }
	        }
	        if (this.dateDelta) {
	            shouldRezone = true;
	            start.add(this.dateDelta);
	            if (end) {
	                end.add(this.dateDelta);
	            }
	        }
	        // do this before adding startDelta to start, so we can work off of start
	        if (this.endDelta) {
	            shouldRezone = true;
	            end.add(this.endDelta);
	        }
	        if (this.startDelta) {
	            shouldRezone = true;
	            start.add(this.startDelta);
	        }
	        if (shouldRezone) {
	            start = calendar.applyTimezone(start);
	            if (end) {
	                end = calendar.applyTimezone(end);
	            }
	        }
	        // TODO: okay to access calendar option?
	        if (!end && calendar.opt('forceEventDuration')) {
	            end = calendar.getDefaultEventEnd(eventDateProfile.isAllDay(), start);
	        }
	        return new EventDateProfile_1.default(start, end, calendar);
	    };
	    EventDefDateMutation.prototype.setDateDelta = function (dateDelta) {
	        if (dateDelta && dateDelta.valueOf()) {
	            this.dateDelta = dateDelta;
	        }
	        else {
	            this.dateDelta = null;
	        }
	    };
	    EventDefDateMutation.prototype.setStartDelta = function (startDelta) {
	        if (startDelta && startDelta.valueOf()) {
	            this.startDelta = startDelta;
	        }
	        else {
	            this.startDelta = null;
	        }
	    };
	    EventDefDateMutation.prototype.setEndDelta = function (endDelta) {
	        if (endDelta && endDelta.valueOf()) {
	            this.endDelta = endDelta;
	        }
	        else {
	            this.endDelta = null;
	        }
	    };
	    EventDefDateMutation.prototype.isEmpty = function () {
	        return !this.clearEnd && !this.forceTimed && !this.forceAllDay &&
	            !this.dateDelta && !this.startDelta && !this.endDelta;
	    };
	    return EventDefDateMutation;
	}());
	exports.default = EventDefDateMutation;
	
	
	/***/ }),
	/* 41 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var $ = __webpack_require__(3);
	var util_1 = __webpack_require__(4);
	var Class_1 = __webpack_require__(35);
	/*
	Embodies a div that has potential scrollbars
	*/
	var Scroller = /** @class */ (function (_super) {
	    tslib_1.__extends(Scroller, _super);
	    function Scroller(options) {
	        var _this = _super.call(this) || this;
	        options = options || {};
	        _this.overflowX = options.overflowX || options.overflow || 'auto';
	        _this.overflowY = options.overflowY || options.overflow || 'auto';
	        return _this;
	    }
	    Scroller.prototype.render = function () {
	        this.el = this.renderEl();
	        this.applyOverflow();
	    };
	    Scroller.prototype.renderEl = function () {
	        return (this.scrollEl = $('<div class="fc-scroller"></div>'));
	    };
	    // sets to natural height, unlocks overflow
	    Scroller.prototype.clear = function () {
	        this.setHeight('auto');
	        this.applyOverflow();
	    };
	    Scroller.prototype.destroy = function () {
	        this.el.remove();
	    };
	    // Overflow
	    // -----------------------------------------------------------------------------------------------------------------
	    Scroller.prototype.applyOverflow = function () {
	        this.scrollEl.css({
	            'overflow-x': this.overflowX,
	            'overflow-y': this.overflowY
	        });
	    };
	    // Causes any 'auto' overflow values to resolves to 'scroll' or 'hidden'.
	    // Useful for preserving scrollbar widths regardless of future resizes.
	    // Can pass in scrollbarWidths for optimization.
	    Scroller.prototype.lockOverflow = function (scrollbarWidths) {
	        var overflowX = this.overflowX;
	        var overflowY = this.overflowY;
	        scrollbarWidths = scrollbarWidths || this.getScrollbarWidths();
	        if (overflowX === 'auto') {
	            overflowX = (scrollbarWidths.top || scrollbarWidths.bottom || // horizontal scrollbars?
	                // OR scrolling pane with massless scrollbars?
	                this.scrollEl[0].scrollWidth - 1 > this.scrollEl[0].clientWidth
	            // subtract 1 because of IE off-by-one issue
	            ) ? 'scroll' : 'hidden';
	        }
	        if (overflowY === 'auto') {
	            overflowY = (scrollbarWidths.left || scrollbarWidths.right || // vertical scrollbars?
	                // OR scrolling pane with massless scrollbars?
	                this.scrollEl[0].scrollHeight - 1 > this.scrollEl[0].clientHeight
	            // subtract 1 because of IE off-by-one issue
	            ) ? 'scroll' : 'hidden';
	        }
	        this.scrollEl.css({ 'overflow-x': overflowX, 'overflow-y': overflowY });
	    };
	    // Getters / Setters
	    // -----------------------------------------------------------------------------------------------------------------
	    Scroller.prototype.setHeight = function (height) {
	        this.scrollEl.height(height);
	    };
	    Scroller.prototype.getScrollTop = function () {
	        return this.scrollEl.scrollTop();
	    };
	    Scroller.prototype.setScrollTop = function (top) {
	        this.scrollEl.scrollTop(top);
	    };
	    Scroller.prototype.getClientWidth = function () {
	        return this.scrollEl[0].clientWidth;
	    };
	    Scroller.prototype.getClientHeight = function () {
	        return this.scrollEl[0].clientHeight;
	    };
	    Scroller.prototype.getScrollbarWidths = function () {
	        return util_1.getScrollbarWidths(this.scrollEl);
	    };
	    return Scroller;
	}(Class_1.default));
	exports.default = Scroller;
	
	
	/***/ }),
	/* 42 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var $ = __webpack_require__(3);
	var util_1 = __webpack_require__(4);
	var DateComponent_1 = __webpack_require__(231);
	var GlobalEmitter_1 = __webpack_require__(23);
	var InteractiveDateComponent = /** @class */ (function (_super) {
	    tslib_1.__extends(InteractiveDateComponent, _super);
	    function InteractiveDateComponent(_view, _options) {
	        var _this = _super.call(this, _view, _options) || this;
	        // self-config, overridable by subclasses
	        _this.segSelector = '.fc-event-container > *'; // what constitutes an event element?
	        if (_this.dateSelectingClass) {
	            _this.dateClicking = new _this.dateClickingClass(_this);
	        }
	        if (_this.dateSelectingClass) {
	            _this.dateSelecting = new _this.dateSelectingClass(_this);
	        }
	        if (_this.eventPointingClass) {
	            _this.eventPointing = new _this.eventPointingClass(_this);
	        }
	        if (_this.eventDraggingClass && _this.eventPointing) {
	            _this.eventDragging = new _this.eventDraggingClass(_this, _this.eventPointing);
	        }
	        if (_this.eventResizingClass && _this.eventPointing) {
	            _this.eventResizing = new _this.eventResizingClass(_this, _this.eventPointing);
	        }
	        if (_this.externalDroppingClass) {
	            _this.externalDropping = new _this.externalDroppingClass(_this);
	        }
	        return _this;
	    }
	    // Sets the container element that the view should render inside of, does global DOM-related initializations,
	    // and renders all the non-date-related content inside.
	    InteractiveDateComponent.prototype.setElement = function (el) {
	        _super.prototype.setElement.call(this, el);
	        if (this.dateClicking) {
	            this.dateClicking.bindToEl(el);
	        }
	        if (this.dateSelecting) {
	            this.dateSelecting.bindToEl(el);
	        }
	        this.bindAllSegHandlersToEl(el);
	    };
	    InteractiveDateComponent.prototype.removeElement = function () {
	        this.endInteractions();
	        _super.prototype.removeElement.call(this);
	    };
	    InteractiveDateComponent.prototype.executeEventUnrender = function () {
	        this.endInteractions();
	        _super.prototype.executeEventUnrender.call(this);
	    };
	    InteractiveDateComponent.prototype.bindGlobalHandlers = function () {
	        _super.prototype.bindGlobalHandlers.call(this);
	        if (this.externalDropping) {
	            this.externalDropping.bindToDocument();
	        }
	    };
	    InteractiveDateComponent.prototype.unbindGlobalHandlers = function () {
	        _super.prototype.unbindGlobalHandlers.call(this);
	        if (this.externalDropping) {
	            this.externalDropping.unbindFromDocument();
	        }
	    };
	    InteractiveDateComponent.prototype.bindDateHandlerToEl = function (el, name, handler) {
	        var _this = this;
	        // attach a handler to the grid's root element.
	        // jQuery will take care of unregistering them when removeElement gets called.
	        this.el.on(name, function (ev) {
	            if (!$(ev.target).is(_this.segSelector + ':not(.fc-helper),' + // directly on an event element
	                _this.segSelector + ':not(.fc-helper) *,' + // within an event element
	                '.fc-more,' + // a "more.." link
	                'a[data-goto]' // a clickable nav link
	            )) {
	                return handler.call(_this, ev);
	            }
	        });
	    };
	    InteractiveDateComponent.prototype.bindAllSegHandlersToEl = function (el) {
	        [
	            this.eventPointing,
	            this.eventDragging,
	            this.eventResizing
	        ].forEach(function (eventInteraction) {
	            if (eventInteraction) {
	                eventInteraction.bindToEl(el);
	            }
	        });
	    };
	    InteractiveDateComponent.prototype.bindSegHandlerToEl = function (el, name, handler) {
	        var _this = this;
	        el.on(name, this.segSelector, function (ev) {
	            var segEl = $(ev.currentTarget);
	            if (!segEl.is('.fc-helper')) {
	                var seg = segEl.data('fc-seg'); // grab segment data. put there by View::renderEventsPayload
	                if (seg && !_this.shouldIgnoreEventPointing()) {
	                    return handler.call(_this, seg, ev); // context will be the Grid
	                }
	            }
	        });
	    };
	    InteractiveDateComponent.prototype.shouldIgnoreMouse = function () {
	        // HACK
	        // This will still work even though bindDateHandlerToEl doesn't use GlobalEmitter.
	        return GlobalEmitter_1.default.get().shouldIgnoreMouse();
	    };
	    InteractiveDateComponent.prototype.shouldIgnoreTouch = function () {
	        var view = this._getView();
	        // On iOS (and Android?) when a new selection is initiated overtop another selection,
	        // the touchend never fires because the elements gets removed mid-touch-interaction (my theory).
	        // HACK: simply don't allow this to happen.
	        // ALSO: prevent selection when an *event* is already raised.
	        return view.isSelected || view.selectedEvent;
	    };
	    InteractiveDateComponent.prototype.shouldIgnoreEventPointing = function () {
	        // only call the handlers if there is not a drag/resize in progress
	        return (this.eventDragging && this.eventDragging.isDragging) ||
	            (this.eventResizing && this.eventResizing.isResizing);
	    };
	    InteractiveDateComponent.prototype.canStartSelection = function (seg, ev) {
	        return util_1.getEvIsTouch(ev) &&
	            !this.canStartResize(seg, ev) &&
	            (this.isEventDefDraggable(seg.footprint.eventDef) ||
	                this.isEventDefResizable(seg.footprint.eventDef));
	    };
	    InteractiveDateComponent.prototype.canStartDrag = function (seg, ev) {
	        return !this.canStartResize(seg, ev) &&
	            this.isEventDefDraggable(seg.footprint.eventDef);
	    };
	    InteractiveDateComponent.prototype.canStartResize = function (seg, ev) {
	        var view = this._getView();
	        var eventDef = seg.footprint.eventDef;
	        return (!util_1.getEvIsTouch(ev) || view.isEventDefSelected(eventDef)) &&
	            this.isEventDefResizable(eventDef) &&
	            $(ev.target).is('.fc-resizer');
	    };
	    // Kills all in-progress dragging.
	    // Useful for when public API methods that result in re-rendering are invoked during a drag.
	    // Also useful for when touch devices misbehave and don't fire their touchend.
	    InteractiveDateComponent.prototype.endInteractions = function () {
	        [
	            this.dateClicking,
	            this.dateSelecting,
	            this.eventPointing,
	            this.eventDragging,
	            this.eventResizing
	        ].forEach(function (interaction) {
	            if (interaction) {
	                interaction.end();
	            }
	        });
	    };
	    // Event Drag-n-Drop
	    // ---------------------------------------------------------------------------------------------------------------
	    // Computes if the given event is allowed to be dragged by the user
	    InteractiveDateComponent.prototype.isEventDefDraggable = function (eventDef) {
	        return this.isEventDefStartEditable(eventDef);
	    };
	    InteractiveDateComponent.prototype.isEventDefStartEditable = function (eventDef) {
	        var isEditable = eventDef.isStartExplicitlyEditable();
	        if (isEditable == null) {
	            isEditable = this.opt('eventStartEditable');
	            if (isEditable == null) {
	                isEditable = this.isEventDefGenerallyEditable(eventDef);
	            }
	        }
	        return isEditable;
	    };
	    InteractiveDateComponent.prototype.isEventDefGenerallyEditable = function (eventDef) {
	        var isEditable = eventDef.isExplicitlyEditable();
	        if (isEditable == null) {
	            isEditable = this.opt('editable');
	        }
	        return isEditable;
	    };
	    // Event Resizing
	    // ---------------------------------------------------------------------------------------------------------------
	    // Computes if the given event is allowed to be resized from its starting edge
	    InteractiveDateComponent.prototype.isEventDefResizableFromStart = function (eventDef) {
	        return this.opt('eventResizableFromStart') && this.isEventDefResizable(eventDef);
	    };
	    // Computes if the given event is allowed to be resized from its ending edge
	    InteractiveDateComponent.prototype.isEventDefResizableFromEnd = function (eventDef) {
	        return this.isEventDefResizable(eventDef);
	    };
	    // Computes if the given event is allowed to be resized by the user at all
	    InteractiveDateComponent.prototype.isEventDefResizable = function (eventDef) {
	        var isResizable = eventDef.isDurationExplicitlyEditable();
	        if (isResizable == null) {
	            isResizable = this.opt('eventDurationEditable');
	            if (isResizable == null) {
	                isResizable = this.isEventDefGenerallyEditable(eventDef);
	            }
	        }
	        return isResizable;
	    };
	    // Event Mutation / Constraints
	    // ---------------------------------------------------------------------------------------------------------------
	    // Diffs the two dates, returning a duration, based on granularity of the grid
	    // TODO: port isTimeScale into this system?
	    InteractiveDateComponent.prototype.diffDates = function (a, b) {
	        if (this.largeUnit) {
	            return util_1.diffByUnit(a, b, this.largeUnit);
	        }
	        else {
	            return util_1.diffDayTime(a, b);
	        }
	    };
	    // is it allowed, in relation to the view's validRange?
	    // NOTE: very similar to isExternalInstanceGroupAllowed
	    InteractiveDateComponent.prototype.isEventInstanceGroupAllowed = function (eventInstanceGroup) {
	        var view = this._getView();
	        var dateProfile = this.dateProfile;
	        var eventFootprints = this.eventRangesToEventFootprints(eventInstanceGroup.getAllEventRanges());
	        var i;
	        for (i = 0; i < eventFootprints.length; i++) {
	            // TODO: just use getAllEventRanges directly
	            if (!dateProfile.validUnzonedRange.containsRange(eventFootprints[i].componentFootprint.unzonedRange)) {
	                return false;
	            }
	        }
	        return view.calendar.constraints.isEventInstanceGroupAllowed(eventInstanceGroup);
	    };
	    // NOTE: very similar to isEventInstanceGroupAllowed
	    // when it's a completely anonymous external drag, no event.
	    InteractiveDateComponent.prototype.isExternalInstanceGroupAllowed = function (eventInstanceGroup) {
	        var view = this._getView();
	        var dateProfile = this.dateProfile;
	        var eventFootprints = this.eventRangesToEventFootprints(eventInstanceGroup.getAllEventRanges());
	        var i;
	        for (i = 0; i < eventFootprints.length; i++) {
	            if (!dateProfile.validUnzonedRange.containsRange(eventFootprints[i].componentFootprint.unzonedRange)) {
	                return false;
	            }
	        }
	        for (i = 0; i < eventFootprints.length; i++) {
	            // treat it as a selection
	            // TODO: pass in eventInstanceGroup instead
	            //  because we don't want calendar's constraint system to depend on a component's
	            //  determination of footprints.
	            if (!view.calendar.constraints.isSelectionFootprintAllowed(eventFootprints[i].componentFootprint)) {
	                return false;
	            }
	        }
	        return true;
	    };
	    return InteractiveDateComponent;
	}(DateComponent_1.default));
	exports.default = InteractiveDateComponent;
	
	
	/***/ }),
	/* 43 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var $ = __webpack_require__(3);
	var moment = __webpack_require__(0);
	var util_1 = __webpack_require__(4);
	var RenderQueue_1 = __webpack_require__(229);
	var DateProfileGenerator_1 = __webpack_require__(55);
	var InteractiveDateComponent_1 = __webpack_require__(42);
	var GlobalEmitter_1 = __webpack_require__(23);
	var UnzonedRange_1 = __webpack_require__(5);
	/* An abstract class from which other views inherit from
	----------------------------------------------------------------------------------------------------------------------*/
	var View = /** @class */ (function (_super) {
	    tslib_1.__extends(View, _super);
	    function View(calendar, viewSpec) {
	        var _this = _super.call(this, null, viewSpec.options) || this;
	        _this.batchRenderDepth = 0;
	        _this.isSelected = false; // boolean whether a range of time is user-selected or not
	        _this.calendar = calendar;
	        _this.viewSpec = viewSpec;
	        // shortcuts
	        _this.type = viewSpec.type;
	        // .name is deprecated
	        _this.name = _this.type;
	        _this.initRenderQueue();
	        _this.initHiddenDays();
	        _this.dateProfileGenerator = new _this.dateProfileGeneratorClass(_this);
	        _this.bindBaseRenderHandlers();
	        _this.eventOrderSpecs = util_1.parseFieldSpecs(_this.opt('eventOrder'));
	        // legacy
	        if (_this['initialize']) {
	            _this['initialize']();
	        }
	        return _this;
	    }
	    View.prototype._getView = function () {
	        return this;
	    };
	    // Retrieves an option with the given name
	    View.prototype.opt = function (name) {
	        return this.options[name];
	    };
	    /* Render Queue
	    ------------------------------------------------------------------------------------------------------------------*/
	    View.prototype.initRenderQueue = function () {
	        this.renderQueue = new RenderQueue_1.default({
	            event: this.opt('eventRenderWait')
	        });
	        this.renderQueue.on('start', this.onRenderQueueStart.bind(this));
	        this.renderQueue.on('stop', this.onRenderQueueStop.bind(this));
	        this.on('before:change', this.startBatchRender);
	        this.on('change', this.stopBatchRender);
	    };
	    View.prototype.onRenderQueueStart = function () {
	        this.calendar.freezeContentHeight();
	        this.addScroll(this.queryScroll());
	    };
	    View.prototype.onRenderQueueStop = function () {
	        if (this.calendar.updateViewSize()) { // success?
	            this.popScroll();
	        }
	        this.calendar.thawContentHeight();
	    };
	    View.prototype.startBatchRender = function () {
	        if (!(this.batchRenderDepth++)) {
	            this.renderQueue.pause();
	        }
	    };
	    View.prototype.stopBatchRender = function () {
	        if (!(--this.batchRenderDepth)) {
	            this.renderQueue.resume();
	        }
	    };
	    View.prototype.requestRender = function (func, namespace, actionType) {
	        this.renderQueue.queue(func, namespace, actionType);
	    };
	    // given func will auto-bind to `this`
	    View.prototype.whenSizeUpdated = function (func) {
	        if (this.renderQueue.isRunning) {
	            this.renderQueue.one('stop', func.bind(this));
	        }
	        else {
	            func.call(this);
	        }
	    };
	    /* Title and Date Formatting
	    ------------------------------------------------------------------------------------------------------------------*/
	    // Computes what the title at the top of the calendar should be for this view
	    View.prototype.computeTitle = function (dateProfile) {
	        var unzonedRange;
	        // for views that span a large unit of time, show the proper interval, ignoring stray days before and after
	        if (/^(year|month)$/.test(dateProfile.currentRangeUnit)) {
	            unzonedRange = dateProfile.currentUnzonedRange;
	        }
	        else { // for day units or smaller, use the actual day range
	            unzonedRange = dateProfile.activeUnzonedRange;
	        }
	        return this.formatRange({
	            start: this.calendar.msToMoment(unzonedRange.startMs, dateProfile.isRangeAllDay),
	            end: this.calendar.msToMoment(unzonedRange.endMs, dateProfile.isRangeAllDay)
	        }, dateProfile.isRangeAllDay, this.opt('titleFormat') || this.computeTitleFormat(dateProfile), this.opt('titleRangeSeparator'));
	    };
	    // Generates the format string that should be used to generate the title for the current date range.
	    // Attempts to compute the most appropriate format if not explicitly specified with `titleFormat`.
	    View.prototype.computeTitleFormat = function (dateProfile) {
	        var currentRangeUnit = dateProfile.currentRangeUnit;
	        if (currentRangeUnit === 'year') {
	            return 'YYYY';
	        }
	        else if (currentRangeUnit === 'month') {
	            return this.opt('monthYearFormat'); // like "September 2014"
	        }
	        else if (dateProfile.currentUnzonedRange.as('days') > 1) {
	            return 'll'; // multi-day range. shorter, like "Sep 9 - 10 2014"
	        }
	        else {
	            return 'LL'; // one day. longer, like "September 9 2014"
	        }
	    };
	    // Date Setting/Unsetting
	    // -----------------------------------------------------------------------------------------------------------------
	    View.prototype.setDate = function (date) {
	        var currentDateProfile = this.get('dateProfile');
	        var newDateProfile = this.dateProfileGenerator.build(date, undefined, true); // forceToValid=true
	        if (!currentDateProfile ||
	            !currentDateProfile.activeUnzonedRange.equals(newDateProfile.activeUnzonedRange)) {
	            this.set('dateProfile', newDateProfile);
	        }
	    };
	    View.prototype.unsetDate = function () {
	        this.unset('dateProfile');
	    };
	    // Event Data
	    // -----------------------------------------------------------------------------------------------------------------
	    View.prototype.fetchInitialEvents = function (dateProfile) {
	        var calendar = this.calendar;
	        var forceAllDay = dateProfile.isRangeAllDay && !this.usesMinMaxTime;
	        return calendar.requestEvents(calendar.msToMoment(dateProfile.activeUnzonedRange.startMs, forceAllDay), calendar.msToMoment(dateProfile.activeUnzonedRange.endMs, forceAllDay));
	    };
	    View.prototype.bindEventChanges = function () {
	        this.listenTo(this.calendar, 'eventsReset', this.resetEvents); // TODO: make this a real event
	    };
	    View.prototype.unbindEventChanges = function () {
	        this.stopListeningTo(this.calendar, 'eventsReset');
	    };
	    View.prototype.setEvents = function (eventsPayload) {
	        this.set('currentEvents', eventsPayload);
	        this.set('hasEvents', true);
	    };
	    View.prototype.unsetEvents = function () {
	        this.unset('currentEvents');
	        this.unset('hasEvents');
	    };
	    View.prototype.resetEvents = function (eventsPayload) {
	        this.startBatchRender();
	        this.unsetEvents();
	        this.setEvents(eventsPayload);
	        this.stopBatchRender();
	    };
	    // Date High-level Rendering
	    // -----------------------------------------------------------------------------------------------------------------
	    View.prototype.requestDateRender = function (dateProfile) {
	        var _this = this;
	        this.requestRender(function () {
	            _this.executeDateRender(dateProfile);
	        }, 'date', 'init');
	    };
	    View.prototype.requestDateUnrender = function () {
	        var _this = this;
	        this.requestRender(function () {
	            _this.executeDateUnrender();
	        }, 'date', 'destroy');
	    };
	    // if dateProfile not specified, uses current
	    View.prototype.executeDateRender = function (dateProfile) {
	        _super.prototype.executeDateRender.call(this, dateProfile);
	        if (this['render']) {
	            this['render'](); // TODO: deprecate
	        }
	        this.trigger('datesRendered');
	        this.addScroll({ isDateInit: true });
	        this.startNowIndicator(); // shouldn't render yet because updateSize will be called soon
	    };
	    View.prototype.executeDateUnrender = function () {
	        this.unselect();
	        this.stopNowIndicator();
	        this.trigger('before:datesUnrendered');
	        if (this['destroy']) {
	            this['destroy'](); // TODO: deprecate
	        }
	        _super.prototype.executeDateUnrender.call(this);
	    };
	    // "Base" rendering
	    // -----------------------------------------------------------------------------------------------------------------
	    View.prototype.bindBaseRenderHandlers = function () {
	        var _this = this;
	        this.on('datesRendered', function () {
	            _this.whenSizeUpdated(_this.triggerViewRender);
	        });
	        this.on('before:datesUnrendered', function () {
	            _this.triggerViewDestroy();
	        });
	    };
	    View.prototype.triggerViewRender = function () {
	        this.publiclyTrigger('viewRender', {
	            context: this,
	            args: [this, this.el]
	        });
	    };
	    View.prototype.triggerViewDestroy = function () {
	        this.publiclyTrigger('viewDestroy', {
	            context: this,
	            args: [this, this.el]
	        });
	    };
	    // Event High-level Rendering
	    // -----------------------------------------------------------------------------------------------------------------
	    View.prototype.requestEventsRender = function (eventsPayload) {
	        var _this = this;
	        this.requestRender(function () {
	            _this.executeEventRender(eventsPayload);
	            _this.whenSizeUpdated(_this.triggerAfterEventsRendered);
	        }, 'event', 'init');
	    };
	    View.prototype.requestEventsUnrender = function () {
	        var _this = this;
	        this.requestRender(function () {
	            _this.triggerBeforeEventsDestroyed();
	            _this.executeEventUnrender();
	        }, 'event', 'destroy');
	    };
	    // Business Hour High-level Rendering
	    // -----------------------------------------------------------------------------------------------------------------
	    View.prototype.requestBusinessHoursRender = function (businessHourGenerator) {
	        var _this = this;
	        this.requestRender(function () {
	            _this.renderBusinessHours(businessHourGenerator);
	        }, 'businessHours', 'init');
	    };
	    View.prototype.requestBusinessHoursUnrender = function () {
	        var _this = this;
	        this.requestRender(function () {
	            _this.unrenderBusinessHours();
	        }, 'businessHours', 'destroy');
	    };
	    // Misc view rendering utils
	    // -----------------------------------------------------------------------------------------------------------------
	    // Binds DOM handlers to elements that reside outside the view container, such as the document
	    View.prototype.bindGlobalHandlers = function () {
	        _super.prototype.bindGlobalHandlers.call(this);
	        this.listenTo(GlobalEmitter_1.default.get(), {
	            touchstart: this.processUnselect,
	            mousedown: this.handleDocumentMousedown
	        });
	    };
	    // Unbinds DOM handlers from elements that reside outside the view container
	    View.prototype.unbindGlobalHandlers = function () {
	        _super.prototype.unbindGlobalHandlers.call(this);
	        this.stopListeningTo(GlobalEmitter_1.default.get());
	    };
	    /* Now Indicator
	    ------------------------------------------------------------------------------------------------------------------*/
	    // Immediately render the current time indicator and begins re-rendering it at an interval,
	    // which is defined by this.getNowIndicatorUnit().
	    // TODO: somehow do this for the current whole day's background too
	    View.prototype.startNowIndicator = function () {
	        var _this = this;
	        var unit;
	        var update;
	        var delay; // ms wait value
	        if (this.opt('nowIndicator')) {
	            unit = this.getNowIndicatorUnit();
	            if (unit) {
	                update = util_1.proxy(this, 'updateNowIndicator'); // bind to `this`
	                this.initialNowDate = this.calendar.getNow();
	                this.initialNowQueriedMs = new Date().valueOf();
	                // wait until the beginning of the next interval
	                delay = this.initialNowDate.clone().startOf(unit).add(1, unit).valueOf() - this.initialNowDate.valueOf();
	                this.nowIndicatorTimeoutID = setTimeout(function () {
	                    _this.nowIndicatorTimeoutID = null;
	                    update();
	                    delay = +moment.duration(1, unit);
	                    delay = Math.max(100, delay); // prevent too frequent
	                    _this.nowIndicatorIntervalID = setInterval(update, delay); // update every interval
	                }, delay);
	            }
	            // rendering will be initiated in updateSize
	        }
	    };
	    // rerenders the now indicator, computing the new current time from the amount of time that has passed
	    // since the initial getNow call.
	    View.prototype.updateNowIndicator = function () {
	        if (this.isDatesRendered &&
	            this.initialNowDate // activated before?
	        ) {
	            this.unrenderNowIndicator(); // won't unrender if unnecessary
	            this.renderNowIndicator(this.initialNowDate.clone().add(new Date().valueOf() - this.initialNowQueriedMs) // add ms
	            );
	            this.isNowIndicatorRendered = true;
	        }
	    };
	    // Immediately unrenders the view's current time indicator and stops any re-rendering timers.
	    // Won't cause side effects if indicator isn't rendered.
	    View.prototype.stopNowIndicator = function () {
	        if (this.isNowIndicatorRendered) {
	            if (this.nowIndicatorTimeoutID) {
	                clearTimeout(this.nowIndicatorTimeoutID);
	                this.nowIndicatorTimeoutID = null;
	            }
	            if (this.nowIndicatorIntervalID) {
	                clearInterval(this.nowIndicatorIntervalID);
	                this.nowIndicatorIntervalID = null;
	            }
	            this.unrenderNowIndicator();
	            this.isNowIndicatorRendered = false;
	        }
	    };
	    /* Dimensions
	    ------------------------------------------------------------------------------------------------------------------*/
	    View.prototype.updateSize = function (totalHeight, isAuto, isResize) {
	        if (this['setHeight']) { // for legacy API
	            this['setHeight'](totalHeight, isAuto);
	        }
	        else {
	            _super.prototype.updateSize.call(this, totalHeight, isAuto, isResize);
	        }
	        this.updateNowIndicator();
	    };
	    /* Scroller
	    ------------------------------------------------------------------------------------------------------------------*/
	    View.prototype.addScroll = function (scroll) {
	        var queuedScroll = this.queuedScroll || (this.queuedScroll = {});
	        $.extend(queuedScroll, scroll);
	    };
	    View.prototype.popScroll = function () {
	        this.applyQueuedScroll();
	        this.queuedScroll = null;
	    };
	    View.prototype.applyQueuedScroll = function () {
	        if (this.queuedScroll) {
	            this.applyScroll(this.queuedScroll);
	        }
	    };
	    View.prototype.queryScroll = function () {
	        var scroll = {};
	        if (this.isDatesRendered) {
	            $.extend(scroll, this.queryDateScroll());
	        }
	        return scroll;
	    };
	    View.prototype.applyScroll = function (scroll) {
	        if (scroll.isDateInit && this.isDatesRendered) {
	            $.extend(scroll, this.computeInitialDateScroll());
	        }
	        if (this.isDatesRendered) {
	            this.applyDateScroll(scroll);
	        }
	    };
	    View.prototype.computeInitialDateScroll = function () {
	        return {}; // subclasses must implement
	    };
	    View.prototype.queryDateScroll = function () {
	        return {}; // subclasses must implement
	    };
	    View.prototype.applyDateScroll = function (scroll) {
	        // subclasses must implement
	    };
	    /* Event Drag-n-Drop
	    ------------------------------------------------------------------------------------------------------------------*/
	    View.prototype.reportEventDrop = function (eventInstance, eventMutation, el, ev) {
	        var eventManager = this.calendar.eventManager;
	        var undoFunc = eventManager.mutateEventsWithId(eventInstance.def.id, eventMutation);
	        var dateMutation = eventMutation.dateMutation;
	        // update the EventInstance, for handlers
	        if (dateMutation) {
	            eventInstance.dateProfile = dateMutation.buildNewDateProfile(eventInstance.dateProfile, this.calendar);
	        }
	        this.triggerEventDrop(eventInstance, 
	        // a drop doesn't necessarily mean a date mutation (ex: resource change)
	        (dateMutation && dateMutation.dateDelta) || moment.duration(), undoFunc, el, ev);
	    };
	    // Triggers event-drop handlers that have subscribed via the API
	    View.prototype.triggerEventDrop = function (eventInstance, dateDelta, undoFunc, el, ev) {
	        this.publiclyTrigger('eventDrop', {
	            context: el[0],
	            args: [
	                eventInstance.toLegacy(),
	                dateDelta,
	                undoFunc,
	                ev,
	                {},
	                this
	            ]
	        });
	    };
	    /* External Element Drag-n-Drop
	    ------------------------------------------------------------------------------------------------------------------*/
	    // Must be called when an external element, via jQuery UI, has been dropped onto the calendar.
	    // `meta` is the parsed data that has been embedded into the dragging event.
	    // `dropLocation` is an object that contains the new zoned start/end/allDay values for the event.
	    View.prototype.reportExternalDrop = function (singleEventDef, isEvent, isSticky, el, ev, ui) {
	        if (isEvent) {
	            this.calendar.eventManager.addEventDef(singleEventDef, isSticky);
	        }
	        this.triggerExternalDrop(singleEventDef, isEvent, el, ev, ui);
	    };
	    // Triggers external-drop handlers that have subscribed via the API
	    View.prototype.triggerExternalDrop = function (singleEventDef, isEvent, el, ev, ui) {
	        // trigger 'drop' regardless of whether element represents an event
	        this.publiclyTrigger('drop', {
	            context: el[0],
	            args: [
	                singleEventDef.dateProfile.start.clone(),
	                ev,
	                ui,
	                this
	            ]
	        });
	        if (isEvent) {
	            // signal an external event landed
	            this.publiclyTrigger('eventReceive', {
	                context: this,
	                args: [
	                    singleEventDef.buildInstance().toLegacy(),
	                    this
	                ]
	            });
	        }
	    };
	    /* Event Resizing
	    ------------------------------------------------------------------------------------------------------------------*/
	    // Must be called when an event in the view has been resized to a new length
	    View.prototype.reportEventResize = function (eventInstance, eventMutation, el, ev) {
	        var eventManager = this.calendar.eventManager;
	        var undoFunc = eventManager.mutateEventsWithId(eventInstance.def.id, eventMutation);
	        // update the EventInstance, for handlers
	        eventInstance.dateProfile = eventMutation.dateMutation.buildNewDateProfile(eventInstance.dateProfile, this.calendar);
	        var resizeDelta = eventMutation.dateMutation.endDelta || eventMutation.dateMutation.startDelta;
	        this.triggerEventResize(eventInstance, resizeDelta, undoFunc, el, ev);
	    };
	    // Triggers event-resize handlers that have subscribed via the API
	    View.prototype.triggerEventResize = function (eventInstance, resizeDelta, undoFunc, el, ev) {
	        this.publiclyTrigger('eventResize', {
	            context: el[0],
	            args: [
	                eventInstance.toLegacy(),
	                resizeDelta,
	                undoFunc,
	                ev,
	                {},
	                this
	            ]
	        });
	    };
	    /* Selection (time range)
	    ------------------------------------------------------------------------------------------------------------------*/
	    // Selects a date span on the view. `start` and `end` are both Moments.
	    // `ev` is the native mouse event that begin the interaction.
	    View.prototype.select = function (footprint, ev) {
	        this.unselect(ev);
	        this.renderSelectionFootprint(footprint);
	        this.reportSelection(footprint, ev);
	    };
	    View.prototype.renderSelectionFootprint = function (footprint) {
	        if (this['renderSelection']) { // legacy method in custom view classes
	            this['renderSelection'](footprint.toLegacy(this.calendar));
	        }
	        else {
	            _super.prototype.renderSelectionFootprint.call(this, footprint);
	        }
	    };
	    // Called when a new selection is made. Updates internal state and triggers handlers.
	    View.prototype.reportSelection = function (footprint, ev) {
	        this.isSelected = true;
	        this.triggerSelect(footprint, ev);
	    };
	    // Triggers handlers to 'select'
	    View.prototype.triggerSelect = function (footprint, ev) {
	        var dateProfile = this.calendar.footprintToDateProfile(footprint); // abuse of "Event"DateProfile?
	        this.publiclyTrigger('select', {
	            context: this,
	            args: [
	                dateProfile.start,
	                dateProfile.end,
	                ev,
	                this
	            ]
	        });
	    };
	    // Undoes a selection. updates in the internal state and triggers handlers.
	    // `ev` is the native mouse event that began the interaction.
	    View.prototype.unselect = function (ev) {
	        if (this.isSelected) {
	            this.isSelected = false;
	            if (this['destroySelection']) {
	                this['destroySelection'](); // TODO: deprecate
	            }
	            this.unrenderSelection();
	            this.publiclyTrigger('unselect', {
	                context: this,
	                args: [ev, this]
	            });
	        }
	    };
	    /* Event Selection
	    ------------------------------------------------------------------------------------------------------------------*/
	    View.prototype.selectEventInstance = function (eventInstance) {
	        if (!this.selectedEventInstance ||
	            this.selectedEventInstance !== eventInstance) {
	            this.unselectEventInstance();
	            this.getEventSegs().forEach(function (seg) {
	                if (seg.footprint.eventInstance === eventInstance &&
	                    seg.el // necessary?
	                ) {
	                    seg.el.addClass('fc-selected');
	                }
	            });
	            this.selectedEventInstance = eventInstance;
	        }
	    };
	    View.prototype.unselectEventInstance = function () {
	        if (this.selectedEventInstance) {
	            this.getEventSegs().forEach(function (seg) {
	                if (seg.el) { // necessary?
	                    seg.el.removeClass('fc-selected');
	                }
	            });
	            this.selectedEventInstance = null;
	        }
	    };
	    View.prototype.isEventDefSelected = function (eventDef) {
	        // event references might change on refetchEvents(), while selectedEventInstance doesn't,
	        // so compare IDs
	        return this.selectedEventInstance && this.selectedEventInstance.def.id === eventDef.id;
	    };
	    /* Mouse / Touch Unselecting (time range & event unselection)
	    ------------------------------------------------------------------------------------------------------------------*/
	    // TODO: move consistently to down/start or up/end?
	    // TODO: don't kill previous selection if touch scrolling
	    View.prototype.handleDocumentMousedown = function (ev) {
	        if (util_1.isPrimaryMouseButton(ev)) {
	            this.processUnselect(ev);
	        }
	    };
	    View.prototype.processUnselect = function (ev) {
	        this.processRangeUnselect(ev);
	        this.processEventUnselect(ev);
	    };
	    View.prototype.processRangeUnselect = function (ev) {
	        var ignore;
	        // is there a time-range selection?
	        if (this.isSelected && this.opt('unselectAuto')) {
	            // only unselect if the clicked element is not identical to or inside of an 'unselectCancel' element
	            ignore = this.opt('unselectCancel');
	            if (!ignore || !$(ev.target).closest(ignore).length) {
	                this.unselect(ev);
	            }
	        }
	    };
	    View.prototype.processEventUnselect = function (ev) {
	        if (this.selectedEventInstance) {
	            if (!$(ev.target).closest('.fc-selected').length) {
	                this.unselectEventInstance();
	            }
	        }
	    };
	    /* Triggers
	    ------------------------------------------------------------------------------------------------------------------*/
	    View.prototype.triggerBaseRendered = function () {
	        this.publiclyTrigger('viewRender', {
	            context: this,
	            args: [this, this.el]
	        });
	    };
	    View.prototype.triggerBaseUnrendered = function () {
	        this.publiclyTrigger('viewDestroy', {
	            context: this,
	            args: [this, this.el]
	        });
	    };
	    // Triggers handlers to 'dayClick'
	    // Span has start/end of the clicked area. Only the start is useful.
	    View.prototype.triggerDayClick = function (footprint, dayEl, ev) {
	        var dateProfile = this.calendar.footprintToDateProfile(footprint); // abuse of "Event"DateProfile?
	        this.publiclyTrigger('dayClick', {
	            context: dayEl,
	            args: [dateProfile.start, ev, this]
	        });
	    };
	    /* Date Utils
	    ------------------------------------------------------------------------------------------------------------------*/
	    // For DateComponent::getDayClasses
	    View.prototype.isDateInOtherMonth = function (date, dateProfile) {
	        return false;
	    };
	    // Arguments after name will be forwarded to a hypothetical function value
	    // WARNING: passed-in arguments will be given to generator functions as-is and can cause side-effects.
	    // Always clone your objects if you fear mutation.
	    View.prototype.getUnzonedRangeOption = function (name) {
	        var val = this.opt(name);
	        if (typeof val === 'function') {
	            val = val.apply(null, Array.prototype.slice.call(arguments, 1));
	        }
	        if (val) {
	            return this.calendar.parseUnzonedRange(val);
	        }
	    };
	    /* Hidden Days
	    ------------------------------------------------------------------------------------------------------------------*/
	    // Initializes internal variables related to calculating hidden days-of-week
	    View.prototype.initHiddenDays = function () {
	        var hiddenDays = this.opt('hiddenDays') || []; // array of day-of-week indices that are hidden
	        var isHiddenDayHash = []; // is the day-of-week hidden? (hash with day-of-week-index -> bool)
	        var dayCnt = 0;
	        var i;
	        if (this.opt('weekends') === false) {
	            hiddenDays.push(0, 6); // 0=sunday, 6=saturday
	        }
	        for (i = 0; i < 7; i++) {
	            if (!(isHiddenDayHash[i] = $.inArray(i, hiddenDays) !== -1)) {
	                dayCnt++;
	            }
	        }
	        if (!dayCnt) {
	            throw new Error('invalid hiddenDays'); // all days were hidden? bad.
	        }
	        this.isHiddenDayHash = isHiddenDayHash;
	    };
	    // Remove days from the beginning and end of the range that are computed as hidden.
	    // If the whole range is trimmed off, returns null
	    View.prototype.trimHiddenDays = function (inputUnzonedRange) {
	        var start = inputUnzonedRange.getStart();
	        var end = inputUnzonedRange.getEnd();
	        if (start) {
	            start = this.skipHiddenDays(start);
	        }
	        if (end) {
	            end = this.skipHiddenDays(end, -1, true);
	        }
	        if (start === null || end === null || start < end) {
	            return new UnzonedRange_1.default(start, end);
	        }
	        return null;
	    };
	    // Is the current day hidden?
	    // `day` is a day-of-week index (0-6), or a Moment
	    View.prototype.isHiddenDay = function (day) {
	        if (moment.isMoment(day)) {
	            day = day.day();
	        }
	        return this.isHiddenDayHash[day];
	    };
	    // Incrementing the current day until it is no longer a hidden day, returning a copy.
	    // DOES NOT CONSIDER validUnzonedRange!
	    // If the initial value of `date` is not a hidden day, don't do anything.
	    // Pass `isExclusive` as `true` if you are dealing with an end date.
	    // `inc` defaults to `1` (increment one day forward each time)
	    View.prototype.skipHiddenDays = function (date, inc, isExclusive) {
	        if (inc === void 0) { inc = 1; }
	        if (isExclusive === void 0) { isExclusive = false; }
	        var out = date.clone();
	        while (this.isHiddenDayHash[(out.day() + (isExclusive ? inc : 0) + 7) % 7]) {
	            out.add(inc, 'days');
	        }
	        return out;
	    };
	    return View;
	}(InteractiveDateComponent_1.default));
	exports.default = View;
	View.prototype.usesMinMaxTime = false;
	View.prototype.dateProfileGeneratorClass = DateProfileGenerator_1.default;
	View.watch('displayingDates', ['isInDom', 'dateProfile'], function (deps) {
	    this.requestDateRender(deps.dateProfile);
	}, function () {
	    this.requestDateUnrender();
	});
	View.watch('displayingBusinessHours', ['displayingDates', 'businessHourGenerator'], function (deps) {
	    this.requestBusinessHoursRender(deps.businessHourGenerator);
	}, function () {
	    this.requestBusinessHoursUnrender();
	});
	View.watch('initialEvents', ['dateProfile'], function (deps) {
	    return this.fetchInitialEvents(deps.dateProfile);
	});
	View.watch('bindingEvents', ['initialEvents'], function (deps) {
	    this.setEvents(deps.initialEvents);
	    this.bindEventChanges();
	}, function () {
	    this.unbindEventChanges();
	    this.unsetEvents();
	});
	View.watch('displayingEvents', ['displayingDates', 'hasEvents'], function () {
	    this.requestEventsRender(this.get('currentEvents'));
	}, function () {
	    this.requestEventsUnrender();
	});
	View.watch('title', ['dateProfile'], function (deps) {
	    return (this.title = this.computeTitle(deps.dateProfile)); // assign to View for legacy reasons
	});
	View.watch('legacyDateProps', ['dateProfile'], function (deps) {
	    var calendar = this.calendar;
	    var dateProfile = deps.dateProfile;
	    // DEPRECATED, but we need to keep it updated...
	    this.start = calendar.msToMoment(dateProfile.activeUnzonedRange.startMs, dateProfile.isRangeAllDay);
	    this.end = calendar.msToMoment(dateProfile.activeUnzonedRange.endMs, dateProfile.isRangeAllDay);
	    this.intervalStart = calendar.msToMoment(dateProfile.currentUnzonedRange.startMs, dateProfile.isRangeAllDay);
	    this.intervalEnd = calendar.msToMoment(dateProfile.currentUnzonedRange.endMs, dateProfile.isRangeAllDay);
	});
	
	
	/***/ }),
	/* 44 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var $ = __webpack_require__(3);
	var util_1 = __webpack_require__(4);
	var EventRenderer = /** @class */ (function () {
	    function EventRenderer(component, fillRenderer) {
	        this.view = component._getView();
	        this.component = component;
	        this.fillRenderer = fillRenderer;
	    }
	    EventRenderer.prototype.opt = function (name) {
	        return this.view.opt(name);
	    };
	    // Updates values that rely on options and also relate to range
	    EventRenderer.prototype.rangeUpdated = function () {
	        var displayEventTime;
	        var displayEventEnd;
	        this.eventTimeFormat =
	            this.opt('eventTimeFormat') ||
	                this.opt('timeFormat') || // deprecated
	                this.computeEventTimeFormat();
	        displayEventTime = this.opt('displayEventTime');
	        if (displayEventTime == null) {
	            displayEventTime = this.computeDisplayEventTime(); // might be based off of range
	        }
	        displayEventEnd = this.opt('displayEventEnd');
	        if (displayEventEnd == null) {
	            displayEventEnd = this.computeDisplayEventEnd(); // might be based off of range
	        }
	        this.displayEventTime = displayEventTime;
	        this.displayEventEnd = displayEventEnd;
	    };
	    EventRenderer.prototype.render = function (eventsPayload) {
	        var dateProfile = this.component._getDateProfile();
	        var eventDefId;
	        var instanceGroup;
	        var eventRanges;
	        var bgRanges = [];
	        var fgRanges = [];
	        for (eventDefId in eventsPayload) {
	            instanceGroup = eventsPayload[eventDefId];
	            eventRanges = instanceGroup.sliceRenderRanges(dateProfile.activeUnzonedRange);
	            if (instanceGroup.getEventDef().hasBgRendering()) {
	                bgRanges.push.apply(bgRanges, eventRanges);
	            }
	            else {
	                fgRanges.push.apply(fgRanges, eventRanges);
	            }
	        }
	        this.renderBgRanges(bgRanges);
	        this.renderFgRanges(fgRanges);
	    };
	    EventRenderer.prototype.unrender = function () {
	        this.unrenderBgRanges();
	        this.unrenderFgRanges();
	    };
	    EventRenderer.prototype.renderFgRanges = function (eventRanges) {
	        var eventFootprints = this.component.eventRangesToEventFootprints(eventRanges);
	        var segs = this.component.eventFootprintsToSegs(eventFootprints);
	        // render an `.el` on each seg
	        // returns a subset of the segs. segs that were actually rendered
	        segs = this.renderFgSegEls(segs);
	        if (this.renderFgSegs(segs) !== false) { // no failure?
	            this.fgSegs = segs;
	        }
	    };
	    EventRenderer.prototype.unrenderFgRanges = function () {
	        this.unrenderFgSegs(this.fgSegs || []);
	        this.fgSegs = null;
	    };
	    EventRenderer.prototype.renderBgRanges = function (eventRanges) {
	        var eventFootprints = this.component.eventRangesToEventFootprints(eventRanges);
	        var segs = this.component.eventFootprintsToSegs(eventFootprints);
	        if (this.renderBgSegs(segs) !== false) { // no failure?
	            this.bgSegs = segs;
	        }
	    };
	    EventRenderer.prototype.unrenderBgRanges = function () {
	        this.unrenderBgSegs();
	        this.bgSegs = null;
	    };
	    EventRenderer.prototype.getSegs = function () {
	        return (this.bgSegs || []).concat(this.fgSegs || []);
	    };
	    // Renders foreground event segments onto the grid
	    EventRenderer.prototype.renderFgSegs = function (segs) {
	        // subclasses must implement
	        // segs already has rendered els, and has been filtered.
	        return false; // signal failure if not implemented
	    };
	    // Unrenders all currently rendered foreground segments
	    EventRenderer.prototype.unrenderFgSegs = function (segs) {
	        // subclasses must implement
	    };
	    EventRenderer.prototype.renderBgSegs = function (segs) {
	        var _this = this;
	        if (this.fillRenderer) {
	            this.fillRenderer.renderSegs('bgEvent', segs, {
	                getClasses: function (seg) {
	                    return _this.getBgClasses(seg.footprint.eventDef);
	                },
	                getCss: function (seg) {
	                    return {
	                        'background-color': _this.getBgColor(seg.footprint.eventDef)
	                    };
	                },
	                filterEl: function (seg, el) {
	                    return _this.filterEventRenderEl(seg.footprint, el);
	                }
	            });
	        }
	        else {
	            return false; // signal failure if no fillRenderer
	        }
	    };
	    EventRenderer.prototype.unrenderBgSegs = function () {
	        if (this.fillRenderer) {
	            this.fillRenderer.unrender('bgEvent');
	        }
	    };
	    // Renders and assigns an `el` property for each foreground event segment.
	    // Only returns segments that successfully rendered.
	    EventRenderer.prototype.renderFgSegEls = function (segs, disableResizing) {
	        var _this = this;
	        if (disableResizing === void 0) { disableResizing = false; }
	        var hasEventRenderHandlers = this.view.hasPublicHandlers('eventRender');
	        var html = '';
	        var renderedSegs = [];
	        var i;
	        if (segs.length) { // don't build an empty html string
	            // build a large concatenation of event segment HTML
	            for (i = 0; i < segs.length; i++) {
	                this.beforeFgSegHtml(segs[i]);
	                html += this.fgSegHtml(segs[i], disableResizing);
	            }
	            // Grab individual elements from the combined HTML string. Use each as the default rendering.
	            // Then, compute the 'el' for each segment. An el might be null if the eventRender callback returned false.
	            $(html).each(function (i, node) {
	                var seg = segs[i];
	                var el = $(node);
	                if (hasEventRenderHandlers) { // optimization
	                    el = _this.filterEventRenderEl(seg.footprint, el);
	                }
	                if (el) {
	                    el.data('fc-seg', seg); // used by handlers
	                    seg.el = el;
	                    renderedSegs.push(seg);
	                }
	            });
	        }
	        return renderedSegs;
	    };
	    EventRenderer.prototype.beforeFgSegHtml = function (seg) {
	    };
	    // Generates the HTML for the default rendering of a foreground event segment. Used by renderFgSegEls()
	    EventRenderer.prototype.fgSegHtml = function (seg, disableResizing) {
	        // subclasses should implement
	    };
	    // Generic utility for generating the HTML classNames for an event segment's element
	    EventRenderer.prototype.getSegClasses = function (seg, isDraggable, isResizable) {
	        var classes = [
	            'fc-event',
	            seg.isStart ? 'fc-start' : 'fc-not-start',
	            seg.isEnd ? 'fc-end' : 'fc-not-end'
	        ].concat(this.getClasses(seg.footprint.eventDef));
	        if (isDraggable) {
	            classes.push('fc-draggable');
	        }
	        if (isResizable) {
	            classes.push('fc-resizable');
	        }
	        // event is currently selected? attach a className.
	        if (this.view.isEventDefSelected(seg.footprint.eventDef)) {
	            classes.push('fc-selected');
	        }
	        return classes;
	    };
	    // Given an event and the default element used for rendering, returns the element that should actually be used.
	    // Basically runs events and elements through the eventRender hook.
	    EventRenderer.prototype.filterEventRenderEl = function (eventFootprint, el) {
	        var legacy = eventFootprint.getEventLegacy();
	        var custom = this.view.publiclyTrigger('eventRender', {
	            context: legacy,
	            args: [legacy, el, this.view]
	        });
	        if (custom === false) { // means don't render at all
	            el = null;
	        }
	        else if (custom && custom !== true) {
	            el = $(custom);
	        }
	        return el;
	    };
	    // Compute the text that should be displayed on an event's element.
	    // `range` can be the Event object itself, or something range-like, with at least a `start`.
	    // If event times are disabled, or the event has no time, will return a blank string.
	    // If not specified, formatStr will default to the eventTimeFormat setting,
	    // and displayEnd will default to the displayEventEnd setting.
	    EventRenderer.prototype.getTimeText = function (eventFootprint, formatStr, displayEnd) {
	        return this._getTimeText(eventFootprint.eventInstance.dateProfile.start, eventFootprint.eventInstance.dateProfile.end, eventFootprint.componentFootprint.isAllDay, formatStr, displayEnd);
	    };
	    EventRenderer.prototype._getTimeText = function (start, end, isAllDay, formatStr, displayEnd) {
	        if (formatStr == null) {
	            formatStr = this.eventTimeFormat;
	        }
	        if (displayEnd == null) {
	            displayEnd = this.displayEventEnd;
	        }
	        if (this.displayEventTime && !isAllDay) {
	            if (displayEnd && end) {
	                return this.view.formatRange({ start: start, end: end }, false, // allDay
	                formatStr);
	            }
	            else {
	                return start.format(formatStr);
	            }
	        }
	        return '';
	    };
	    EventRenderer.prototype.computeEventTimeFormat = function () {
	        return this.opt('smallTimeFormat');
	    };
	    EventRenderer.prototype.computeDisplayEventTime = function () {
	        return true;
	    };
	    EventRenderer.prototype.computeDisplayEventEnd = function () {
	        return true;
	    };
	    EventRenderer.prototype.getBgClasses = function (eventDef) {
	        var classNames = this.getClasses(eventDef);
	        classNames.push('fc-bgevent');
	        return classNames;
	    };
	    EventRenderer.prototype.getClasses = function (eventDef) {
	        var objs = this.getStylingObjs(eventDef);
	        var i;
	        var classNames = [];
	        for (i = 0; i < objs.length; i++) {
	            classNames.push.apply(// append
	            classNames, objs[i].eventClassName || objs[i].className || []);
	        }
	        return classNames;
	    };
	    // Utility for generating event skin-related CSS properties
	    EventRenderer.prototype.getSkinCss = function (eventDef) {
	        return {
	            'background-color': this.getBgColor(eventDef),
	            'border-color': this.getBorderColor(eventDef),
	            color: this.getTextColor(eventDef)
	        };
	    };
	    // Queries for caller-specified color, then falls back to default
	    EventRenderer.prototype.getBgColor = function (eventDef) {
	        var objs = this.getStylingObjs(eventDef);
	        var i;
	        var val;
	        for (i = 0; i < objs.length && !val; i++) {
	            val = objs[i].eventBackgroundColor || objs[i].eventColor ||
	                objs[i].backgroundColor || objs[i].color;
	        }
	        if (!val) {
	            val = this.opt('eventBackgroundColor') || this.opt('eventColor');
	        }
	        return val;
	    };
	    // Queries for caller-specified color, then falls back to default
	    EventRenderer.prototype.getBorderColor = function (eventDef) {
	        var objs = this.getStylingObjs(eventDef);
	        var i;
	        var val;
	        for (i = 0; i < objs.length && !val; i++) {
	            val = objs[i].eventBorderColor || objs[i].eventColor ||
	                objs[i].borderColor || objs[i].color;
	        }
	        if (!val) {
	            val = this.opt('eventBorderColor') || this.opt('eventColor');
	        }
	        return val;
	    };
	    // Queries for caller-specified color, then falls back to default
	    EventRenderer.prototype.getTextColor = function (eventDef) {
	        var objs = this.getStylingObjs(eventDef);
	        var i;
	        var val;
	        for (i = 0; i < objs.length && !val; i++) {
	            val = objs[i].eventTextColor ||
	                objs[i].textColor;
	        }
	        if (!val) {
	            val = this.opt('eventTextColor');
	        }
	        return val;
	    };
	    EventRenderer.prototype.getStylingObjs = function (eventDef) {
	        var objs = this.getFallbackStylingObjs(eventDef);
	        objs.unshift(eventDef);
	        return objs;
	    };
	    EventRenderer.prototype.getFallbackStylingObjs = function (eventDef) {
	        return [eventDef.source];
	    };
	    EventRenderer.prototype.sortEventSegs = function (segs) {
	        segs.sort(util_1.proxy(this, 'compareEventSegs'));
	    };
	    // A cmp function for determining which segments should take visual priority
	    EventRenderer.prototype.compareEventSegs = function (seg1, seg2) {
	        var f1 = seg1.footprint;
	        var f2 = seg2.footprint;
	        var cf1 = f1.componentFootprint;
	        var cf2 = f2.componentFootprint;
	        var r1 = cf1.unzonedRange;
	        var r2 = cf2.unzonedRange;
	        return r1.startMs - r2.startMs || // earlier events go first
	            (r2.endMs - r2.startMs) - (r1.endMs - r1.startMs) || // tie? longer events go first
	            cf2.isAllDay - cf1.isAllDay || // tie? put all-day events first (booleans cast to 0/1)
	            util_1.compareByFieldSpecs(f1.eventDef, f2.eventDef, this.view.eventOrderSpecs, f1.eventDef.miscProps, f2.eventDef.miscProps);
	    };
	    return EventRenderer;
	}());
	exports.default = EventRenderer;
	
	
	/***/ }),
	/* 45 */,
	/* 46 */,
	/* 47 */,
	/* 48 */,
	/* 49 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var moment_ext_1 = __webpack_require__(11);
	// Plugin
	// -------------------------------------------------------------------------------------------------
	moment_ext_1.newMomentProto.format = function () {
	    if (this._fullCalendar && arguments[0]) { // an enhanced moment? and a format string provided?
	        return formatDate(this, arguments[0]); // our extended formatting
	    }
	    if (this._ambigTime) {
	        return moment_ext_1.oldMomentFormat(englishMoment(this), 'YYYY-MM-DD');
	    }
	    if (this._ambigZone) {
	        return moment_ext_1.oldMomentFormat(englishMoment(this), 'YYYY-MM-DD[T]HH:mm:ss');
	    }
	    if (this._fullCalendar) { // enhanced non-ambig moment?
	        // moment.format() doesn't ensure english, but we want to.
	        return moment_ext_1.oldMomentFormat(englishMoment(this));
	    }
	    return moment_ext_1.oldMomentProto.format.apply(this, arguments);
	};
	moment_ext_1.newMomentProto.toISOString = function () {
	    if (this._ambigTime) {
	        return moment_ext_1.oldMomentFormat(englishMoment(this), 'YYYY-MM-DD');
	    }
	    if (this._ambigZone) {
	        return moment_ext_1.oldMomentFormat(englishMoment(this), 'YYYY-MM-DD[T]HH:mm:ss');
	    }
	    if (this._fullCalendar) { // enhanced non-ambig moment?
	        // depending on browser, moment might not output english. ensure english.
	        // https://github.com/moment/moment/blob/2.18.1/src/lib/moment/format.js#L22
	        return moment_ext_1.oldMomentProto.toISOString.apply(englishMoment(this), arguments);
	    }
	    return moment_ext_1.oldMomentProto.toISOString.apply(this, arguments);
	};
	function englishMoment(mom) {
	    if (mom.locale() !== 'en') {
	        return mom.clone().locale('en');
	    }
	    return mom;
	}
	// Config
	// ---------------------------------------------------------------------------------------------------------------------
	/*
	Inserted between chunks in the fake ("intermediate") formatting string.
	Important that it passes as whitespace (\s) because moment often identifies non-standalone months
	via a regexp with an \s.
	*/
	var PART_SEPARATOR = '\u000b'; // vertical tab
	/*
	Inserted as the first character of a literal-text chunk to indicate that the literal text is not actually literal text,
	but rather, a "special" token that has custom rendering (see specialTokens map).
	*/
	var SPECIAL_TOKEN_MARKER = '\u001f'; // information separator 1
	/*
	Inserted at the beginning and end of a span of text that must have non-zero numeric characters.
	Handling of these markers is done in a post-processing step at the very end of text rendering.
	*/
	var MAYBE_MARKER = '\u001e'; // information separator 2
	var MAYBE_REGEXP = new RegExp(MAYBE_MARKER + '([^' + MAYBE_MARKER + ']*)' + MAYBE_MARKER, 'g'); // must be global
	/*
	Addition formatting tokens we want recognized
	*/
	var specialTokens = {
	    t: function (date) {
	        return moment_ext_1.oldMomentFormat(date, 'a').charAt(0);
	    },
	    T: function (date) {
	        return moment_ext_1.oldMomentFormat(date, 'A').charAt(0);
	    }
	};
	/*
	The first characters of formatting tokens for units that are 1 day or larger.
	`value` is for ranking relative size (lower means bigger).
	`unit` is a normalized unit, used for comparing moments.
	*/
	var largeTokenMap = {
	    Y: { value: 1, unit: 'year' },
	    M: { value: 2, unit: 'month' },
	    W: { value: 3, unit: 'week' },
	    w: { value: 3, unit: 'week' },
	    D: { value: 4, unit: 'day' },
	    d: { value: 4, unit: 'day' } // day of week
	};
	// Single Date Formatting
	// ---------------------------------------------------------------------------------------------------------------------
	/*
	Formats `date` with a Moment formatting string, but allow our non-zero areas and special token
	*/
	function formatDate(date, formatStr) {
	    return renderFakeFormatString(getParsedFormatString(formatStr).fakeFormatString, date);
	}
	exports.formatDate = formatDate;
	// Date Range Formatting
	// -------------------------------------------------------------------------------------------------
	// TODO: make it work with timezone offset
	/*
	Using a formatting string meant for a single date, generate a range string, like
	"Sep 2 - 9 2013", that intelligently inserts a separator where the dates differ.
	If the dates are the same as far as the format string is concerned, just return a single
	rendering of one date, without any separator.
	*/
	function formatRange(date1, date2, formatStr, separator, isRTL) {
	    var localeData;
	    date1 = moment_ext_1.default.parseZone(date1);
	    date2 = moment_ext_1.default.parseZone(date2);
	    localeData = date1.localeData();
	    // Expand localized format strings, like "LL" -> "MMMM D YYYY".
	    // BTW, this is not important for `formatDate` because it is impossible to put custom tokens
	    // or non-zero areas in Moment's localized format strings.
	    formatStr = localeData.longDateFormat(formatStr) || formatStr;
	    return renderParsedFormat(getParsedFormatString(formatStr), date1, date2, separator || ' - ', isRTL);
	}
	exports.formatRange = formatRange;
	/*
	Renders a range with an already-parsed format string.
	*/
	function renderParsedFormat(parsedFormat, date1, date2, separator, isRTL) {
	    var sameUnits = parsedFormat.sameUnits;
	    var unzonedDate1 = date1.clone().stripZone(); // for same-unit comparisons
	    var unzonedDate2 = date2.clone().stripZone(); // "
	    var renderedParts1 = renderFakeFormatStringParts(parsedFormat.fakeFormatString, date1);
	    var renderedParts2 = renderFakeFormatStringParts(parsedFormat.fakeFormatString, date2);
	    var leftI;
	    var leftStr = '';
	    var rightI;
	    var rightStr = '';
	    var middleI;
	    var middleStr1 = '';
	    var middleStr2 = '';
	    var middleStr = '';
	    // Start at the leftmost side of the formatting string and continue until you hit a token
	    // that is not the same between dates.
	    for (leftI = 0; leftI < sameUnits.length && (!sameUnits[leftI] || unzonedDate1.isSame(unzonedDate2, sameUnits[leftI])); leftI++) {
	        leftStr += renderedParts1[leftI];
	    }
	    // Similarly, start at the rightmost side of the formatting string and move left
	    for (rightI = sameUnits.length - 1; rightI > leftI && (!sameUnits[rightI] || unzonedDate1.isSame(unzonedDate2, sameUnits[rightI])); rightI--) {
	        // If current chunk is on the boundary of unique date-content, and is a special-case
	        // date-formatting postfix character, then don't consume it. Consider it unique date-content.
	        // TODO: make configurable
	        if (rightI - 1 === leftI && renderedParts1[rightI] === '.') {
	            break;
	        }
	        rightStr = renderedParts1[rightI] + rightStr;
	    }
	    // The area in the middle is different for both of the dates.
	    // Collect them distinctly so we can jam them together later.
	    for (middleI = leftI; middleI <= rightI; middleI++) {
	        middleStr1 += renderedParts1[middleI];
	        middleStr2 += renderedParts2[middleI];
	    }
	    if (middleStr1 || middleStr2) {
	        if (isRTL) {
	            middleStr = middleStr2 + separator + middleStr1;
	        }
	        else {
	            middleStr = middleStr1 + separator + middleStr2;
	        }
	    }
	    return processMaybeMarkers(leftStr + middleStr + rightStr);
	}
	// Format String Parsing
	// ---------------------------------------------------------------------------------------------------------------------
	var parsedFormatStrCache = {};
	/*
	Returns a parsed format string, leveraging a cache.
	*/
	function getParsedFormatString(formatStr) {
	    return parsedFormatStrCache[formatStr] ||
	        (parsedFormatStrCache[formatStr] = parseFormatString(formatStr));
	}
	/*
	Parses a format string into the following:
	- fakeFormatString: a momentJS formatting string, littered with special control characters that get post-processed.
	- sameUnits: for every part in fakeFormatString, if the part is a token, the value will be a unit string (like "day"),
	  that indicates how similar a range's start & end must be in order to share the same formatted text.
	  If not a token, then the value is null.
	  Always a flat array (not nested liked "chunks").
	*/
	function parseFormatString(formatStr) {
	    var chunks = chunkFormatString(formatStr);
	    return {
	        fakeFormatString: buildFakeFormatString(chunks),
	        sameUnits: buildSameUnits(chunks)
	    };
	}
	/*
	Break the formatting string into an array of chunks.
	A 'maybe' chunk will have nested chunks.
	*/
	function chunkFormatString(formatStr) {
	    var chunks = [];
	    var match;
	    // TODO: more descrimination
	    // \4 is a backreference to the first character of a multi-character set.
	    var chunker = /\[([^\]]*)\]|\(([^\)]*)\)|(LTS|LT|(\w)\4*o?)|([^\w\[\(]+)/g;
	    while ((match = chunker.exec(formatStr))) {
	        if (match[1]) { // a literal string inside [ ... ]
	            chunks.push.apply(chunks, // append
	            splitStringLiteral(match[1]));
	        }
	        else if (match[2]) { // non-zero formatting inside ( ... )
	            chunks.push({ maybe: chunkFormatString(match[2]) });
	        }
	        else if (match[3]) { // a formatting token
	            chunks.push({ token: match[3] });
	        }
	        else if (match[5]) { // an unenclosed literal string
	            chunks.push.apply(chunks, // append
	            splitStringLiteral(match[5]));
	        }
	    }
	    return chunks;
	}
	/*
	Potentially splits a literal-text string into multiple parts. For special cases.
	*/
	function splitStringLiteral(s) {
	    if (s === '. ') {
	        return ['.', ' ']; // for locales with periods bound to the end of each year/month/date
	    }
	    else {
	        return [s];
	    }
	}
	/*
	Given chunks parsed from a real format string, generate a fake (aka "intermediate") format string with special control
	characters that will eventually be given to moment for formatting, and then post-processed.
	*/
	function buildFakeFormatString(chunks) {
	    var parts = [];
	    var i;
	    var chunk;
	    for (i = 0; i < chunks.length; i++) {
	        chunk = chunks[i];
	        if (typeof chunk === 'string') {
	            parts.push('[' + chunk + ']');
	        }
	        else if (chunk.token) {
	            if (chunk.token in specialTokens) {
	                parts.push(SPECIAL_TOKEN_MARKER + // useful during post-processing
	                    '[' + chunk.token + ']' // preserve as literal text
	                );
	            }
	            else {
	                parts.push(chunk.token); // unprotected text implies a format string
	            }
	        }
	        else if (chunk.maybe) {
	            parts.push(MAYBE_MARKER + // useful during post-processing
	                buildFakeFormatString(chunk.maybe) +
	                MAYBE_MARKER);
	        }
	    }
	    return parts.join(PART_SEPARATOR);
	}
	/*
	Given parsed chunks from a real formatting string, generates an array of unit strings (like "day") that indicate
	in which regard two dates must be similar in order to share range formatting text.
	The `chunks` can be nested (because of "maybe" chunks), however, the returned array will be flat.
	*/
	function buildSameUnits(chunks) {
	    var units = [];
	    var i;
	    var chunk;
	    var tokenInfo;
	    for (i = 0; i < chunks.length; i++) {
	        chunk = chunks[i];
	        if (chunk.token) {
	            tokenInfo = largeTokenMap[chunk.token.charAt(0)];
	            units.push(tokenInfo ? tokenInfo.unit : 'second'); // default to a very strict same-second
	        }
	        else if (chunk.maybe) {
	            units.push.apply(units, // append
	            buildSameUnits(chunk.maybe));
	        }
	        else {
	            units.push(null);
	        }
	    }
	    return units;
	}
	// Rendering to text
	// ---------------------------------------------------------------------------------------------------------------------
	/*
	Formats a date with a fake format string, post-processes the control characters, then returns.
	*/
	function renderFakeFormatString(fakeFormatString, date) {
	    return processMaybeMarkers(renderFakeFormatStringParts(fakeFormatString, date).join(''));
	}
	/*
	Formats a date into parts that will have been post-processed, EXCEPT for the "maybe" markers.
	*/
	function renderFakeFormatStringParts(fakeFormatString, date) {
	    var parts = [];
	    var fakeRender = moment_ext_1.oldMomentFormat(date, fakeFormatString);
	    var fakeParts = fakeRender.split(PART_SEPARATOR);
	    var i;
	    var fakePart;
	    for (i = 0; i < fakeParts.length; i++) {
	        fakePart = fakeParts[i];
	        if (fakePart.charAt(0) === SPECIAL_TOKEN_MARKER) {
	            parts.push(
	            // the literal string IS the token's name.
	            // call special token's registered function.
	            specialTokens[fakePart.substring(1)](date));
	        }
	        else {
	            parts.push(fakePart);
	        }
	    }
	    return parts;
	}
	/*
	Accepts an almost-finally-formatted string and processes the "maybe" control characters, returning a new string.
	*/
	function processMaybeMarkers(s) {
	    return s.replace(MAYBE_REGEXP, function (m0, m1) {
	        if (m1.match(/[1-9]/)) { // any non-zero numeric characters?
	            return m1;
	        }
	        else {
	            return '';
	        }
	    });
	}
	// Misc Utils
	// -------------------------------------------------------------------------------------------------
	/*
	Returns a unit string, either 'year', 'month', 'day', or null for the most granular formatting token in the string.
	*/
	function queryMostGranularFormatUnit(formatStr) {
	    var chunks = chunkFormatString(formatStr);
	    var i;
	    var chunk;
	    var candidate;
	    var best;
	    for (i = 0; i < chunks.length; i++) {
	        chunk = chunks[i];
	        if (chunk.token) {
	            candidate = largeTokenMap[chunk.token.charAt(0)];
	            if (candidate) {
	                if (!best || candidate.value > best.value) {
	                    best = candidate;
	                }
	            }
	        }
	    }
	    if (best) {
	        return best.unit;
	    }
	    return null;
	}
	exports.queryMostGranularFormatUnit = queryMostGranularFormatUnit;
	
	
	/***/ }),
	/* 50 */
	/***/ (function(module, exports) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var EventRange = /** @class */ (function () {
	    function EventRange(unzonedRange, eventDef, eventInstance) {
	        this.unzonedRange = unzonedRange;
	        this.eventDef = eventDef;
	        if (eventInstance) {
	            this.eventInstance = eventInstance;
	        }
	    }
	    return EventRange;
	}());
	exports.default = EventRange;
	
	
	/***/ }),
	/* 51 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var Class_1 = __webpack_require__(35);
	var EmitterMixin_1 = __webpack_require__(13);
	var ListenerMixin_1 = __webpack_require__(7);
	var Model = /** @class */ (function (_super) {
	    tslib_1.__extends(Model, _super);
	    function Model() {
	        var _this = _super.call(this) || this;
	        _this._watchers = {};
	        _this._props = {};
	        _this.applyGlobalWatchers();
	        _this.constructed();
	        return _this;
	    }
	    Model.watch = function (name) {
	        var args = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            args[_i - 1] = arguments[_i];
	        }
	        // subclasses should make a masked-copy of the superclass's map
	        // TODO: write test
	        if (!this.prototype.hasOwnProperty('_globalWatchArgs')) {
	            this.prototype._globalWatchArgs = Object.create(this.prototype._globalWatchArgs);
	        }
	        this.prototype._globalWatchArgs[name] = args;
	    };
	    Model.prototype.constructed = function () {
	        // useful for monkeypatching. TODO: BaseClass?
	    };
	    Model.prototype.applyGlobalWatchers = function () {
	        var map = this._globalWatchArgs;
	        var name;
	        for (name in map) {
	            this.watch.apply(this, [name].concat(map[name]));
	        }
	    };
	    Model.prototype.has = function (name) {
	        return name in this._props;
	    };
	    Model.prototype.get = function (name) {
	        if (name === undefined) {
	            return this._props;
	        }
	        return this._props[name];
	    };
	    Model.prototype.set = function (name, val) {
	        var newProps;
	        if (typeof name === 'string') {
	            newProps = {};
	            newProps[name] = val === undefined ? null : val;
	        }
	        else {
	            newProps = name;
	        }
	        this.setProps(newProps);
	    };
	    Model.prototype.reset = function (newProps) {
	        var oldProps = this._props;
	        var changeset = {}; // will have undefined's to signal unsets
	        var name;
	        for (name in oldProps) {
	            changeset[name] = undefined;
	        }
	        for (name in newProps) {
	            changeset[name] = newProps[name];
	        }
	        this.setProps(changeset);
	    };
	    Model.prototype.unset = function (name) {
	        var newProps = {};
	        var names;
	        var i;
	        if (typeof name === 'string') {
	            names = [name];
	        }
	        else {
	            names = name;
	        }
	        for (i = 0; i < names.length; i++) {
	            newProps[names[i]] = undefined;
	        }
	        this.setProps(newProps);
	    };
	    Model.prototype.setProps = function (newProps) {
	        var changedProps = {};
	        var changedCnt = 0;
	        var name;
	        var val;
	        for (name in newProps) {
	            val = newProps[name];
	            // a change in value?
	            // if an object, don't check equality, because might have been mutated internally.
	            // TODO: eventually enforce immutability.
	            if (typeof val === 'object' ||
	                val !== this._props[name]) {
	                changedProps[name] = val;
	                changedCnt++;
	            }
	        }
	        if (changedCnt) {
	            this.trigger('before:batchChange', changedProps);
	            for (name in changedProps) {
	                val = changedProps[name];
	                this.trigger('before:change', name, val);
	                this.trigger('before:change:' + name, val);
	            }
	            for (name in changedProps) {
	                val = changedProps[name];
	                if (val === undefined) {
	                    delete this._props[name];
	                }
	                else {
	                    this._props[name] = val;
	                }
	                this.trigger('change:' + name, val);
	                this.trigger('change', name, val);
	            }
	            this.trigger('batchChange', changedProps);
	        }
	    };
	    Model.prototype.watch = function (name, depList, startFunc, stopFunc) {
	        var _this = this;
	        this.unwatch(name);
	        this._watchers[name] = this._watchDeps(depList, function (deps) {
	            var res = startFunc.call(_this, deps);
	            if (res && res.then) {
	                _this.unset(name); // put in an unset state while resolving
	                res.then(function (val) {
	                    _this.set(name, val);
	                });
	            }
	            else {
	                _this.set(name, res);
	            }
	        }, function (deps) {
	            _this.unset(name);
	            if (stopFunc) {
	                stopFunc.call(_this, deps);
	            }
	        });
	    };
	    Model.prototype.unwatch = function (name) {
	        var watcher = this._watchers[name];
	        if (watcher) {
	            delete this._watchers[name];
	            watcher.teardown();
	        }
	    };
	    Model.prototype._watchDeps = function (depList, startFunc, stopFunc) {
	        var _this = this;
	        var queuedChangeCnt = 0;
	        var depCnt = depList.length;
	        var satisfyCnt = 0;
	        var values = {}; // what's passed as the `deps` arguments
	        var bindTuples = []; // array of [ eventName, handlerFunc ] arrays
	        var isCallingStop = false;
	        var onBeforeDepChange = function (depName, val, isOptional) {
	            queuedChangeCnt++;
	            if (queuedChangeCnt === 1) { // first change to cause a "stop" ?
	                if (satisfyCnt === depCnt) { // all deps previously satisfied?
	                    isCallingStop = true;
	                    stopFunc(values);
	                    isCallingStop = false;
	                }
	            }
	        };
	        var onDepChange = function (depName, val, isOptional) {
	            if (val === undefined) { // unsetting a value?
	                // required dependency that was previously set?
	                if (!isOptional && values[depName] !== undefined) {
	                    satisfyCnt--;
	                }
	                delete values[depName];
	            }
	            else { // setting a value?
	                // required dependency that was previously unset?
	                if (!isOptional && values[depName] === undefined) {
	                    satisfyCnt++;
	                }
	                values[depName] = val;
	            }
	            queuedChangeCnt--;
	            if (!queuedChangeCnt) { // last change to cause a "start"?
	                // now finally satisfied or satisfied all along?
	                if (satisfyCnt === depCnt) {
	                    // if the stopFunc initiated another value change, ignore it.
	                    // it will be processed by another change event anyway.
	                    if (!isCallingStop) {
	                        startFunc(values);
	                    }
	                }
	            }
	        };
	        // intercept for .on() that remembers handlers
	        var bind = function (eventName, handler) {
	            _this.on(eventName, handler);
	            bindTuples.push([eventName, handler]);
	        };
	        // listen to dependency changes
	        depList.forEach(function (depName) {
	            var isOptional = false;
	            if (depName.charAt(0) === '?') { // TODO: more DRY
	                depName = depName.substring(1);
	                isOptional = true;
	            }
	            bind('before:change:' + depName, function (val) {
	                onBeforeDepChange(depName, val, isOptional);
	            });
	            bind('change:' + depName, function (val) {
	                onDepChange(depName, val, isOptional);
	            });
	        });
	        // process current dependency values
	        depList.forEach(function (depName) {
	            var isOptional = false;
	            if (depName.charAt(0) === '?') { // TODO: more DRY
	                depName = depName.substring(1);
	                isOptional = true;
	            }
	            if (_this.has(depName)) {
	                values[depName] = _this.get(depName);
	                satisfyCnt++;
	            }
	            else if (isOptional) {
	                satisfyCnt++;
	            }
	        });
	        // initially satisfied
	        if (satisfyCnt === depCnt) {
	            startFunc(values);
	        }
	        return {
	            teardown: function () {
	                // remove all handlers
	                for (var i = 0; i < bindTuples.length; i++) {
	                    _this.off(bindTuples[i][0], bindTuples[i][1]);
	                }
	                bindTuples = null;
	                // was satisfied, so call stopFunc
	                if (satisfyCnt === depCnt) {
	                    stopFunc();
	                }
	            },
	            flash: function () {
	                if (satisfyCnt === depCnt) {
	                    stopFunc();
	                    startFunc(values);
	                }
	            }
	        };
	    };
	    Model.prototype.flash = function (name) {
	        var watcher = this._watchers[name];
	        if (watcher) {
	            watcher.flash();
	        }
	    };
	    return Model;
	}(Class_1.default));
	exports.default = Model;
	Model.prototype._globalWatchArgs = {}; // mutation protection in Model.watch
	EmitterMixin_1.default.mixInto(Model);
	ListenerMixin_1.default.mixInto(Model);
	
	
	/***/ }),
	/* 52 */
	/***/ (function(module, exports, __webpack_require__) {
	
	/*
	USAGE:
	  import { default as ParsableModelMixin, ParsableModelInterface } from './ParsableModelMixin'
	in class:
	  applyProps: ParsableModelInterface['applyProps']
	  applyManualStandardProps: ParsableModelInterface['applyManualStandardProps']
	  applyMiscProps: ParsableModelInterface['applyMiscProps']
	  isStandardProp: ParsableModelInterface['isStandardProp']
	  static defineStandardProps = ParsableModelMixin.defineStandardProps
	  static copyVerbatimStandardProps = ParsableModelMixin.copyVerbatimStandardProps
	after class:
	  ParsableModelMixin.mixInto(TheClass)
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var util_1 = __webpack_require__(4);
	var Mixin_1 = __webpack_require__(15);
	var ParsableModelMixin = /** @class */ (function (_super) {
	    tslib_1.__extends(ParsableModelMixin, _super);
	    function ParsableModelMixin() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    ParsableModelMixin.defineStandardProps = function (propDefs) {
	        var proto = this.prototype;
	        if (!proto.hasOwnProperty('standardPropMap')) {
	            proto.standardPropMap = Object.create(proto.standardPropMap);
	        }
	        util_1.copyOwnProps(propDefs, proto.standardPropMap);
	    };
	    ParsableModelMixin.copyVerbatimStandardProps = function (src, dest) {
	        var map = this.prototype.standardPropMap;
	        var propName;
	        for (propName in map) {
	            if (src[propName] != null && // in the src object?
	                map[propName] === true // false means "copy verbatim"
	            ) {
	                dest[propName] = src[propName];
	            }
	        }
	    };
	    /*
	    Returns true/false for success.
	    Meant to be only called ONCE, at object creation.
	    */
	    ParsableModelMixin.prototype.applyProps = function (rawProps) {
	        var standardPropMap = this.standardPropMap;
	        var manualProps = {};
	        var miscProps = {};
	        var propName;
	        for (propName in rawProps) {
	            if (standardPropMap[propName] === true) { // copy verbatim
	                this[propName] = rawProps[propName];
	            }
	            else if (standardPropMap[propName] === false) {
	                manualProps[propName] = rawProps[propName];
	            }
	            else {
	                miscProps[propName] = rawProps[propName];
	            }
	        }
	        this.applyMiscProps(miscProps);
	        return this.applyManualStandardProps(manualProps);
	    };
	    /*
	    If subclasses override, they must call this supermethod and return the boolean response.
	    Meant to be only called ONCE, at object creation.
	    */
	    ParsableModelMixin.prototype.applyManualStandardProps = function (rawProps) {
	        return true;
	    };
	    /*
	    Can be called even after initial object creation.
	    */
	    ParsableModelMixin.prototype.applyMiscProps = function (rawProps) {
	        // subclasses can implement
	    };
	    /*
	    TODO: why is this a method when defineStandardProps is static
	    */
	    ParsableModelMixin.prototype.isStandardProp = function (propName) {
	        return propName in this.standardPropMap;
	    };
	    return ParsableModelMixin;
	}(Mixin_1.default));
	exports.default = ParsableModelMixin;
	ParsableModelMixin.prototype.standardPropMap = {}; // will be cloned by defineStandardProps
	
	
	/***/ }),
	/* 53 */
	/***/ (function(module, exports) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var EventInstance = /** @class */ (function () {
	    function EventInstance(def, dateProfile) {
	        this.def = def;
	        this.dateProfile = dateProfile;
	    }
	    EventInstance.prototype.toLegacy = function () {
	        var dateProfile = this.dateProfile;
	        var obj = this.def.toLegacy();
	        obj.start = dateProfile.start.clone();
	        obj.end = dateProfile.end ? dateProfile.end.clone() : null;
	        return obj;
	    };
	    return EventInstance;
	}());
	exports.default = EventInstance;
	
	
	/***/ }),
	/* 54 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var $ = __webpack_require__(3);
	var moment = __webpack_require__(0);
	var EventDef_1 = __webpack_require__(37);
	var EventInstance_1 = __webpack_require__(53);
	var EventDateProfile_1 = __webpack_require__(16);
	var RecurringEventDef = /** @class */ (function (_super) {
	    tslib_1.__extends(RecurringEventDef, _super);
	    function RecurringEventDef() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    RecurringEventDef.prototype.isAllDay = function () {
	        return !this.startTime && !this.endTime;
	    };
	    RecurringEventDef.prototype.buildInstances = function (unzonedRange) {
	        var calendar = this.source.calendar;
	        var unzonedDate = unzonedRange.getStart();
	        var unzonedEnd = unzonedRange.getEnd();
	        var zonedDayStart;
	        var instanceStart;
	        var instanceEnd;
	        var instances = [];
	        while (unzonedDate.isBefore(unzonedEnd)) {
	            // if everyday, or this particular day-of-week
	            if (!this.dowHash || this.dowHash[unzonedDate.day()]) {
	                zonedDayStart = calendar.applyTimezone(unzonedDate);
	                instanceStart = zonedDayStart.clone();
	                instanceEnd = null;
	                if (this.startTime) {
	                    instanceStart.time(this.startTime);
	                }
	                else {
	                    instanceStart.stripTime();
	                }
	                if (this.endTime) {
	                    instanceEnd = zonedDayStart.clone().time(this.endTime);
	                }
	                instances.push(new EventInstance_1.default(this, // definition
	                new EventDateProfile_1.default(instanceStart, instanceEnd, calendar)));
	            }
	            unzonedDate.add(1, 'days');
	        }
	        return instances;
	    };
	    RecurringEventDef.prototype.setDow = function (dowNumbers) {
	        if (!this.dowHash) {
	            this.dowHash = {};
	        }
	        for (var i = 0; i < dowNumbers.length; i++) {
	            this.dowHash[dowNumbers[i]] = true;
	        }
	    };
	    RecurringEventDef.prototype.clone = function () {
	        var def = _super.prototype.clone.call(this);
	        if (def.startTime) {
	            def.startTime = moment.duration(this.startTime);
	        }
	        if (def.endTime) {
	            def.endTime = moment.duration(this.endTime);
	        }
	        if (this.dowHash) {
	            def.dowHash = $.extend({}, this.dowHash);
	        }
	        return def;
	    };
	    return RecurringEventDef;
	}(EventDef_1.default));
	exports.default = RecurringEventDef;
	/*
	HACK to work with TypeScript mixins
	NOTE: if super-method fails, should still attempt to apply
	*/
	RecurringEventDef.prototype.applyProps = function (rawProps) {
	    var superSuccess = EventDef_1.default.prototype.applyProps.call(this, rawProps);
	    if (rawProps.start) {
	        this.startTime = moment.duration(rawProps.start);
	    }
	    if (rawProps.end) {
	        this.endTime = moment.duration(rawProps.end);
	    }
	    if (rawProps.dow) {
	        this.setDow(rawProps.dow);
	    }
	    return superSuccess;
	};
	// Parsing
	// ---------------------------------------------------------------------------------------------------------------------
	RecurringEventDef.defineStandardProps({
	    start: false,
	    end: false,
	    dow: false
	});
	
	
	/***/ }),
	/* 55 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var moment = __webpack_require__(0);
	var util_1 = __webpack_require__(4);
	var UnzonedRange_1 = __webpack_require__(5);
	var DateProfileGenerator = /** @class */ (function () {
	    function DateProfileGenerator(_view) {
	        this._view = _view;
	    }
	    DateProfileGenerator.prototype.opt = function (name) {
	        return this._view.opt(name);
	    };
	    DateProfileGenerator.prototype.trimHiddenDays = function (unzonedRange) {
	        return this._view.trimHiddenDays(unzonedRange);
	    };
	    DateProfileGenerator.prototype.msToUtcMoment = function (ms, forceAllDay) {
	        return this._view.calendar.msToUtcMoment(ms, forceAllDay);
	    };
	    /* Date Range Computation
	    ------------------------------------------------------------------------------------------------------------------*/
	    // Builds a structure with info about what the dates/ranges will be for the "prev" view.
	    DateProfileGenerator.prototype.buildPrev = function (currentDateProfile) {
	        var prevDate = currentDateProfile.date.clone()
	            .startOf(currentDateProfile.currentRangeUnit)
	            .subtract(currentDateProfile.dateIncrement);
	        return this.build(prevDate, -1);
	    };
	    // Builds a structure with info about what the dates/ranges will be for the "next" view.
	    DateProfileGenerator.prototype.buildNext = function (currentDateProfile) {
	        var nextDate = currentDateProfile.date.clone()
	            .startOf(currentDateProfile.currentRangeUnit)
	            .add(currentDateProfile.dateIncrement);
	        return this.build(nextDate, 1);
	    };
	    // Builds a structure holding dates/ranges for rendering around the given date.
	    // Optional direction param indicates whether the date is being incremented/decremented
	    // from its previous value. decremented = -1, incremented = 1 (default).
	    DateProfileGenerator.prototype.build = function (date, direction, forceToValid) {
	        if (forceToValid === void 0) { forceToValid = false; }
	        var isDateAllDay = !date.hasTime();
	        var validUnzonedRange;
	        var minTime = null;
	        var maxTime = null;
	        var currentInfo;
	        var isRangeAllDay;
	        var renderUnzonedRange;
	        var activeUnzonedRange;
	        var isValid;
	        validUnzonedRange = this.buildValidRange();
	        validUnzonedRange = this.trimHiddenDays(validUnzonedRange);
	        if (forceToValid) {
	            date = this.msToUtcMoment(validUnzonedRange.constrainDate(date), // returns MS
	            isDateAllDay);
	        }
	        currentInfo = this.buildCurrentRangeInfo(date, direction);
	        isRangeAllDay = /^(year|month|week|day)$/.test(currentInfo.unit);
	        renderUnzonedRange = this.buildRenderRange(this.trimHiddenDays(currentInfo.unzonedRange), currentInfo.unit, isRangeAllDay);
	        renderUnzonedRange = this.trimHiddenDays(renderUnzonedRange);
	        activeUnzonedRange = renderUnzonedRange.clone();
	        if (!this.opt('showNonCurrentDates')) {
	            activeUnzonedRange = activeUnzonedRange.intersect(currentInfo.unzonedRange);
	        }
	        minTime = moment.duration(this.opt('minTime'));
	        maxTime = moment.duration(this.opt('maxTime'));
	        activeUnzonedRange = this.adjustActiveRange(activeUnzonedRange, minTime, maxTime);
	        activeUnzonedRange = activeUnzonedRange.intersect(validUnzonedRange); // might return null
	        if (activeUnzonedRange) {
	            date = this.msToUtcMoment(activeUnzonedRange.constrainDate(date), // returns MS
	            isDateAllDay);
	        }
	        // it's invalid if the originally requested date is not contained,
	        // or if the range is completely outside of the valid range.
	        isValid = currentInfo.unzonedRange.intersectsWith(validUnzonedRange);
	        return {
	            // constraint for where prev/next operations can go and where events can be dragged/resized to.
	            // an object with optional start and end properties.
	            validUnzonedRange: validUnzonedRange,
	            // range the view is formally responsible for.
	            // for example, a month view might have 1st-31st, excluding padded dates
	            currentUnzonedRange: currentInfo.unzonedRange,
	            // name of largest unit being displayed, like "month" or "week"
	            currentRangeUnit: currentInfo.unit,
	            isRangeAllDay: isRangeAllDay,
	            // dates that display events and accept drag-n-drop
	            // will be `null` if no dates accept events
	            activeUnzonedRange: activeUnzonedRange,
	            // date range with a rendered skeleton
	            // includes not-active days that need some sort of DOM
	            renderUnzonedRange: renderUnzonedRange,
	            // Duration object that denotes the first visible time of any given day
	            minTime: minTime,
	            // Duration object that denotes the exclusive visible end time of any given day
	            maxTime: maxTime,
	            isValid: isValid,
	            date: date,
	            // how far the current date will move for a prev/next operation
	            dateIncrement: this.buildDateIncrement(currentInfo.duration)
	            // pass a fallback (might be null) ^
	        };
	    };
	    // Builds an object with optional start/end properties.
	    // Indicates the minimum/maximum dates to display.
	    // not responsible for trimming hidden days.
	    DateProfileGenerator.prototype.buildValidRange = function () {
	        return this._view.getUnzonedRangeOption('validRange', this._view.calendar.getNow()) ||
	            new UnzonedRange_1.default(); // completely open-ended
	    };
	    // Builds a structure with info about the "current" range, the range that is
	    // highlighted as being the current month for example.
	    // See build() for a description of `direction`.
	    // Guaranteed to have `range` and `unit` properties. `duration` is optional.
	    // TODO: accept a MS-time instead of a moment `date`?
	    DateProfileGenerator.prototype.buildCurrentRangeInfo = function (date, direction) {
	        var viewSpec = this._view.viewSpec;
	        var duration = null;
	        var unit = null;
	        var unzonedRange = null;
	        var dayCount;
	        if (viewSpec.duration) {
	            duration = viewSpec.duration;
	            unit = viewSpec.durationUnit;
	            unzonedRange = this.buildRangeFromDuration(date, direction, duration, unit);
	        }
	        else if ((dayCount = this.opt('dayCount'))) {
	            unit = 'day';
	            unzonedRange = this.buildRangeFromDayCount(date, direction, dayCount);
	        }
	        else if ((unzonedRange = this.buildCustomVisibleRange(date))) {
	            unit = util_1.computeGreatestUnit(unzonedRange.getStart(), unzonedRange.getEnd());
	        }
	        else {
	            duration = this.getFallbackDuration();
	            unit = util_1.computeGreatestUnit(duration);
	            unzonedRange = this.buildRangeFromDuration(date, direction, duration, unit);
	        }
	        return { duration: duration, unit: unit, unzonedRange: unzonedRange };
	    };
	    DateProfileGenerator.prototype.getFallbackDuration = function () {
	        return moment.duration({ days: 1 });
	    };
	    // Returns a new activeUnzonedRange to have time values (un-ambiguate)
	    // minTime or maxTime causes the range to expand.
	    DateProfileGenerator.prototype.adjustActiveRange = function (unzonedRange, minTime, maxTime) {
	        var start = unzonedRange.getStart();
	        var end = unzonedRange.getEnd();
	        if (this._view.usesMinMaxTime) {
	            if (minTime < 0) {
	                start.time(0).add(minTime);
	            }
	            if (maxTime > 24 * 60 * 60 * 1000) { // beyond 24 hours?
	                end.time(maxTime - (24 * 60 * 60 * 1000));
	            }
	        }
	        return new UnzonedRange_1.default(start, end);
	    };
	    // Builds the "current" range when it is specified as an explicit duration.
	    // `unit` is the already-computed computeGreatestUnit value of duration.
	    // TODO: accept a MS-time instead of a moment `date`?
	    DateProfileGenerator.prototype.buildRangeFromDuration = function (date, direction, duration, unit) {
	        var alignment = this.opt('dateAlignment');
	        var dateIncrementInput;
	        var dateIncrementDuration;
	        var start;
	        var end;
	        var res;
	        // compute what the alignment should be
	        if (!alignment) {
	            dateIncrementInput = this.opt('dateIncrement');
	            if (dateIncrementInput) {
	                dateIncrementDuration = moment.duration(dateIncrementInput);
	                // use the smaller of the two units
	                if (dateIncrementDuration < duration) {
	                    alignment = util_1.computeDurationGreatestUnit(dateIncrementDuration, dateIncrementInput);
	                }
	                else {
	                    alignment = unit;
	                }
	            }
	            else {
	                alignment = unit;
	            }
	        }
	        // if the view displays a single day or smaller
	        if (duration.as('days') <= 1) {
	            if (this._view.isHiddenDay(start)) {
	                start = this._view.skipHiddenDays(start, direction);
	                start.startOf('day');
	            }
	        }
	        function computeRes() {
	            start = date.clone().startOf(alignment);
	            end = start.clone().add(duration);
	            res = new UnzonedRange_1.default(start, end);
	        }
	        computeRes();
	        // if range is completely enveloped by hidden days, go past the hidden days
	        if (!this.trimHiddenDays(res)) {
	            date = this._view.skipHiddenDays(date, direction);
	            computeRes();
	        }
	        return res;
	    };
	    // Builds the "current" range when a dayCount is specified.
	    // TODO: accept a MS-time instead of a moment `date`?
	    DateProfileGenerator.prototype.buildRangeFromDayCount = function (date, direction, dayCount) {
	        var customAlignment = this.opt('dateAlignment');
	        var runningCount = 0;
	        var start;
	        var end;
	        if (customAlignment || direction !== -1) {
	            start = date.clone();
	            if (customAlignment) {
	                start.startOf(customAlignment);
	            }
	            start.startOf('day');
	            start = this._view.skipHiddenDays(start);
	            end = start.clone();
	            do {
	                end.add(1, 'day');
	                if (!this._view.isHiddenDay(end)) {
	                    runningCount++;
	                }
	            } while (runningCount < dayCount);
	        }
	        else {
	            end = date.clone().startOf('day').add(1, 'day');
	            end = this._view.skipHiddenDays(end, -1, true);
	            start = end.clone();
	            do {
	                start.add(-1, 'day');
	                if (!this._view.isHiddenDay(start)) {
	                    runningCount++;
	                }
	            } while (runningCount < dayCount);
	        }
	        return new UnzonedRange_1.default(start, end);
	    };
	    // Builds a normalized range object for the "visible" range,
	    // which is a way to define the currentUnzonedRange and activeUnzonedRange at the same time.
	    // TODO: accept a MS-time instead of a moment `date`?
	    DateProfileGenerator.prototype.buildCustomVisibleRange = function (date) {
	        var visibleUnzonedRange = this._view.getUnzonedRangeOption('visibleRange', this._view.calendar.applyTimezone(date) // correct zone. also generates new obj that avoids mutations
	        );
	        if (visibleUnzonedRange && (visibleUnzonedRange.startMs == null || visibleUnzonedRange.endMs == null)) {
	            return null;
	        }
	        return visibleUnzonedRange;
	    };
	    // Computes the range that will represent the element/cells for *rendering*,
	    // but which may have voided days/times.
	    // not responsible for trimming hidden days.
	    DateProfileGenerator.prototype.buildRenderRange = function (currentUnzonedRange, currentRangeUnit, isRangeAllDay) {
	        return currentUnzonedRange.clone();
	    };
	    // Compute the duration value that should be added/substracted to the current date
	    // when a prev/next operation happens.
	    DateProfileGenerator.prototype.buildDateIncrement = function (fallback) {
	        var dateIncrementInput = this.opt('dateIncrement');
	        var customAlignment;
	        if (dateIncrementInput) {
	            return moment.duration(dateIncrementInput);
	        }
	        else if ((customAlignment = this.opt('dateAlignment'))) {
	            return moment.duration(1, customAlignment);
	        }
	        else if (fallback) {
	            return fallback;
	        }
	        else {
	            return moment.duration({ days: 1 });
	        }
	    };
	    return DateProfileGenerator;
	}());
	exports.default = DateProfileGenerator;
	
	
	/***/ }),
	/* 56 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var $ = __webpack_require__(3);
	var util_1 = __webpack_require__(4);
	var Promise_1 = __webpack_require__(21);
	var EventSource_1 = __webpack_require__(6);
	var SingleEventDef_1 = __webpack_require__(9);
	var ArrayEventSource = /** @class */ (function (_super) {
	    tslib_1.__extends(ArrayEventSource, _super);
	    function ArrayEventSource(calendar) {
	        var _this = _super.call(this, calendar) || this;
	        _this.eventDefs = []; // for if setRawEventDefs is never called
	        return _this;
	    }
	    ArrayEventSource.parse = function (rawInput, calendar) {
	        var rawProps;
	        // normalize raw input
	        if ($.isArray(rawInput.events)) { // extended form
	            rawProps = rawInput;
	        }
	        else if ($.isArray(rawInput)) { // short form
	            rawProps = { events: rawInput };
	        }
	        if (rawProps) {
	            return EventSource_1.default.parse.call(this, rawProps, calendar);
	        }
	        return false;
	    };
	    ArrayEventSource.prototype.setRawEventDefs = function (rawEventDefs) {
	        this.rawEventDefs = rawEventDefs;
	        this.eventDefs = this.parseEventDefs(rawEventDefs);
	    };
	    ArrayEventSource.prototype.fetch = function (start, end, timezone) {
	        var eventDefs = this.eventDefs;
	        var i;
	        if (this.currentTimezone != null &&
	            this.currentTimezone !== timezone) {
	            for (i = 0; i < eventDefs.length; i++) {
	                if (eventDefs[i] instanceof SingleEventDef_1.default) {
	                    eventDefs[i].rezone();
	                }
	            }
	        }
	        this.currentTimezone = timezone;
	        return Promise_1.default.resolve(eventDefs);
	    };
	    ArrayEventSource.prototype.addEventDef = function (eventDef) {
	        this.eventDefs.push(eventDef);
	    };
	    /*
	    eventDefId already normalized to a string
	    */
	    ArrayEventSource.prototype.removeEventDefsById = function (eventDefId) {
	        return util_1.removeMatching(this.eventDefs, function (eventDef) {
	            return eventDef.id === eventDefId;
	        });
	    };
	    ArrayEventSource.prototype.removeAllEventDefs = function () {
	        this.eventDefs = [];
	    };
	    ArrayEventSource.prototype.getPrimitive = function () {
	        return this.rawEventDefs;
	    };
	    ArrayEventSource.prototype.applyManualStandardProps = function (rawProps) {
	        var superSuccess = _super.prototype.applyManualStandardProps.call(this, rawProps);
	        this.setRawEventDefs(rawProps.events);
	        return superSuccess;
	    };
	    return ArrayEventSource;
	}(EventSource_1.default));
	exports.default = ArrayEventSource;
	ArrayEventSource.defineStandardProps({
	    events: false // don't automatically transfer
	});
	
	
	/***/ }),
	/* 57 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var StandardTheme_1 = __webpack_require__(221);
	var JqueryUiTheme_1 = __webpack_require__(222);
	var themeClassHash = {};
	function defineThemeSystem(themeName, themeClass) {
	    themeClassHash[themeName] = themeClass;
	}
	exports.defineThemeSystem = defineThemeSystem;
	function getThemeSystemClass(themeSetting) {
	    if (!themeSetting) {
	        return StandardTheme_1.default;
	    }
	    else if (themeSetting === true) {
	        return JqueryUiTheme_1.default;
	    }
	    else {
	        return themeClassHash[themeSetting];
	    }
	}
	exports.getThemeSystemClass = getThemeSystemClass;
	
	
	/***/ }),
	/* 58 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var $ = __webpack_require__(3);
	var util_1 = __webpack_require__(4);
	/*
	A cache for the left/right/top/bottom/width/height values for one or more elements.
	Works with both offset (from topleft document) and position (from offsetParent).
	
	options:
	- els
	- isHorizontal
	- isVertical
	*/
	var CoordCache = /** @class */ (function () {
	    function CoordCache(options) {
	        this.isHorizontal = false; // whether to query for left/right/width
	        this.isVertical = false; // whether to query for top/bottom/height
	        this.els = $(options.els);
	        this.isHorizontal = options.isHorizontal;
	        this.isVertical = options.isVertical;
	        this.forcedOffsetParentEl = options.offsetParent ? $(options.offsetParent) : null;
	    }
	    // Queries the els for coordinates and stores them.
	    // Call this method before using and of the get* methods below.
	    CoordCache.prototype.build = function () {
	        var offsetParentEl = this.forcedOffsetParentEl;
	        if (!offsetParentEl && this.els.length > 0) {
	            offsetParentEl = this.els.eq(0).offsetParent();
	        }
	        this.origin = offsetParentEl ?
	            offsetParentEl.offset() :
	            null;
	        this.boundingRect = this.queryBoundingRect();
	        if (this.isHorizontal) {
	            this.buildElHorizontals();
	        }
	        if (this.isVertical) {
	            this.buildElVerticals();
	        }
	    };
	    // Destroys all internal data about coordinates, freeing memory
	    CoordCache.prototype.clear = function () {
	        this.origin = null;
	        this.boundingRect = null;
	        this.lefts = null;
	        this.rights = null;
	        this.tops = null;
	        this.bottoms = null;
	    };
	    // When called, if coord caches aren't built, builds them
	    CoordCache.prototype.ensureBuilt = function () {
	        if (!this.origin) {
	            this.build();
	        }
	    };
	    // Populates the left/right internal coordinate arrays
	    CoordCache.prototype.buildElHorizontals = function () {
	        var lefts = [];
	        var rights = [];
	        this.els.each(function (i, node) {
	            var el = $(node);
	            var left = el.offset().left;
	            var width = el.outerWidth();
	            lefts.push(left);
	            rights.push(left + width);
	        });
	        this.lefts = lefts;
	        this.rights = rights;
	    };
	    // Populates the top/bottom internal coordinate arrays
	    CoordCache.prototype.buildElVerticals = function () {
	        var tops = [];
	        var bottoms = [];
	        this.els.each(function (i, node) {
	            var el = $(node);
	            var top = el.offset().top;
	            var height = el.outerHeight();
	            tops.push(top);
	            bottoms.push(top + height);
	        });
	        this.tops = tops;
	        this.bottoms = bottoms;
	    };
	    // Given a left offset (from document left), returns the index of the el that it horizontally intersects.
	    // If no intersection is made, returns undefined.
	    CoordCache.prototype.getHorizontalIndex = function (leftOffset) {
	        this.ensureBuilt();
	        var lefts = this.lefts;
	        var rights = this.rights;
	        var len = lefts.length;
	        var i;
	        for (i = 0; i < len; i++) {
	            if (leftOffset >= lefts[i] && leftOffset < rights[i]) {
	                return i;
	            }
	        }
	    };
	    // Given a top offset (from document top), returns the index of the el that it vertically intersects.
	    // If no intersection is made, returns undefined.
	    CoordCache.prototype.getVerticalIndex = function (topOffset) {
	        this.ensureBuilt();
	        var tops = this.tops;
	        var bottoms = this.bottoms;
	        var len = tops.length;
	        var i;
	        for (i = 0; i < len; i++) {
	            if (topOffset >= tops[i] && topOffset < bottoms[i]) {
	                return i;
	            }
	        }
	    };
	    // Gets the left offset (from document left) of the element at the given index
	    CoordCache.prototype.getLeftOffset = function (leftIndex) {
	        this.ensureBuilt();
	        return this.lefts[leftIndex];
	    };
	    // Gets the left position (from offsetParent left) of the element at the given index
	    CoordCache.prototype.getLeftPosition = function (leftIndex) {
	        this.ensureBuilt();
	        return this.lefts[leftIndex] - this.origin.left;
	    };
	    // Gets the right offset (from document left) of the element at the given index.
	    // This value is NOT relative to the document's right edge, like the CSS concept of "right" would be.
	    CoordCache.prototype.getRightOffset = function (leftIndex) {
	        this.ensureBuilt();
	        return this.rights[leftIndex];
	    };
	    // Gets the right position (from offsetParent left) of the element at the given index.
	    // This value is NOT relative to the offsetParent's right edge, like the CSS concept of "right" would be.
	    CoordCache.prototype.getRightPosition = function (leftIndex) {
	        this.ensureBuilt();
	        return this.rights[leftIndex] - this.origin.left;
	    };
	    // Gets the width of the element at the given index
	    CoordCache.prototype.getWidth = function (leftIndex) {
	        this.ensureBuilt();
	        return this.rights[leftIndex] - this.lefts[leftIndex];
	    };
	    // Gets the top offset (from document top) of the element at the given index
	    CoordCache.prototype.getTopOffset = function (topIndex) {
	        this.ensureBuilt();
	        return this.tops[topIndex];
	    };
	    // Gets the top position (from offsetParent top) of the element at the given position
	    CoordCache.prototype.getTopPosition = function (topIndex) {
	        this.ensureBuilt();
	        return this.tops[topIndex] - this.origin.top;
	    };
	    // Gets the bottom offset (from the document top) of the element at the given index.
	    // This value is NOT relative to the offsetParent's bottom edge, like the CSS concept of "bottom" would be.
	    CoordCache.prototype.getBottomOffset = function (topIndex) {
	        this.ensureBuilt();
	        return this.bottoms[topIndex];
	    };
	    // Gets the bottom position (from the offsetParent top) of the element at the given index.
	    // This value is NOT relative to the offsetParent's bottom edge, like the CSS concept of "bottom" would be.
	    CoordCache.prototype.getBottomPosition = function (topIndex) {
	        this.ensureBuilt();
	        return this.bottoms[topIndex] - this.origin.top;
	    };
	    // Gets the height of the element at the given index
	    CoordCache.prototype.getHeight = function (topIndex) {
	        this.ensureBuilt();
	        return this.bottoms[topIndex] - this.tops[topIndex];
	    };
	    // Bounding Rect
	    // TODO: decouple this from CoordCache
	    // Compute and return what the elements' bounding rectangle is, from the user's perspective.
	    // Right now, only returns a rectangle if constrained by an overflow:scroll element.
	    // Returns null if there are no elements
	    CoordCache.prototype.queryBoundingRect = function () {
	        var scrollParentEl;
	        if (this.els.length > 0) {
	            scrollParentEl = util_1.getScrollParent(this.els.eq(0));
	            if (!scrollParentEl.is(document) &&
	                !scrollParentEl.is('html,body') // don't consider these bounding rects. solves issue 3615
	            ) {
	                return util_1.getClientRect(scrollParentEl);
	            }
	        }
	        return null;
	    };
	    CoordCache.prototype.isPointInBounds = function (leftOffset, topOffset) {
	        return this.isLeftInBounds(leftOffset) && this.isTopInBounds(topOffset);
	    };
	    CoordCache.prototype.isLeftInBounds = function (leftOffset) {
	        return !this.boundingRect || (leftOffset >= this.boundingRect.left && leftOffset < this.boundingRect.right);
	    };
	    CoordCache.prototype.isTopInBounds = function (topOffset) {
	        return !this.boundingRect || (topOffset >= this.boundingRect.top && topOffset < this.boundingRect.bottom);
	    };
	    return CoordCache;
	}());
	exports.default = CoordCache;
	
	
	/***/ }),
	/* 59 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var $ = __webpack_require__(3);
	var util_1 = __webpack_require__(4);
	var ListenerMixin_1 = __webpack_require__(7);
	var GlobalEmitter_1 = __webpack_require__(23);
	/* Tracks a drag's mouse movement, firing various handlers
	----------------------------------------------------------------------------------------------------------------------*/
	// TODO: use Emitter
	var DragListener = /** @class */ (function () {
	    function DragListener(options) {
	        this.isInteracting = false;
	        this.isDistanceSurpassed = false;
	        this.isDelayEnded = false;
	        this.isDragging = false;
	        this.isTouch = false;
	        this.isGeneric = false; // initiated by 'dragstart' (jqui)
	        this.shouldCancelTouchScroll = true;
	        this.scrollAlwaysKills = false;
	        this.isAutoScroll = false;
	        // defaults
	        this.scrollSensitivity = 30; // pixels from edge for scrolling to start
	        this.scrollSpeed = 200; // pixels per second, at maximum speed
	        this.scrollIntervalMs = 50; // millisecond wait between scroll increment
	        this.options = options || {};
	    }
	    // Interaction (high-level)
	    // -----------------------------------------------------------------------------------------------------------------
	    DragListener.prototype.startInteraction = function (ev, extraOptions) {
	        if (extraOptions === void 0) { extraOptions = {}; }
	        if (ev.type === 'mousedown') {
	            if (GlobalEmitter_1.default.get().shouldIgnoreMouse()) {
	                return;
	            }
	            else if (!util_1.isPrimaryMouseButton(ev)) {
	                return;
	            }
	            else {
	                ev.preventDefault(); // prevents native selection in most browsers
	            }
	        }
	        if (!this.isInteracting) {
	            // process options
	            this.delay = util_1.firstDefined(extraOptions.delay, this.options.delay, 0);
	            this.minDistance = util_1.firstDefined(extraOptions.distance, this.options.distance, 0);
	            this.subjectEl = this.options.subjectEl;
	            util_1.preventSelection($('body'));
	            this.isInteracting = true;
	            this.isTouch = util_1.getEvIsTouch(ev);
	            this.isGeneric = ev.type === 'dragstart';
	            this.isDelayEnded = false;
	            this.isDistanceSurpassed = false;
	            this.originX = util_1.getEvX(ev);
	            this.originY = util_1.getEvY(ev);
	            this.scrollEl = util_1.getScrollParent($(ev.target));
	            this.bindHandlers();
	            this.initAutoScroll();
	            this.handleInteractionStart(ev);
	            this.startDelay(ev);
	            if (!this.minDistance) {
	                this.handleDistanceSurpassed(ev);
	            }
	        }
	    };
	    DragListener.prototype.handleInteractionStart = function (ev) {
	        this.trigger('interactionStart', ev);
	    };
	    DragListener.prototype.endInteraction = function (ev, isCancelled) {
	        if (this.isInteracting) {
	            this.endDrag(ev);
	            if (this.delayTimeoutId) {
	                clearTimeout(this.delayTimeoutId);
	                this.delayTimeoutId = null;
	            }
	            this.destroyAutoScroll();
	            this.unbindHandlers();
	            this.isInteracting = false;
	            this.handleInteractionEnd(ev, isCancelled);
	            util_1.allowSelection($('body'));
	        }
	    };
	    DragListener.prototype.handleInteractionEnd = function (ev, isCancelled) {
	        this.trigger('interactionEnd', ev, isCancelled || false);
	    };
	    // Binding To DOM
	    // -----------------------------------------------------------------------------------------------------------------
	    DragListener.prototype.bindHandlers = function () {
	        // some browsers (Safari in iOS 10) don't allow preventDefault on touch events that are bound after touchstart,
	        // so listen to the GlobalEmitter singleton, which is always bound, instead of the document directly.
	        var globalEmitter = GlobalEmitter_1.default.get();
	        if (this.isGeneric) {
	            this.listenTo($(document), {
	                drag: this.handleMove,
	                dragstop: this.endInteraction
	            });
	        }
	        else if (this.isTouch) {
	            this.listenTo(globalEmitter, {
	                touchmove: this.handleTouchMove,
	                touchend: this.endInteraction,
	                scroll: this.handleTouchScroll
	            });
	        }
	        else {
	            this.listenTo(globalEmitter, {
	                mousemove: this.handleMouseMove,
	                mouseup: this.endInteraction
	            });
	        }
	        this.listenTo(globalEmitter, {
	            selectstart: util_1.preventDefault,
	            contextmenu: util_1.preventDefault // long taps would open menu on Chrome dev tools
	        });
	    };
	    DragListener.prototype.unbindHandlers = function () {
	        this.stopListeningTo(GlobalEmitter_1.default.get());
	        this.stopListeningTo($(document)); // for isGeneric
	    };
	    // Drag (high-level)
	    // -----------------------------------------------------------------------------------------------------------------
	    // extraOptions ignored if drag already started
	    DragListener.prototype.startDrag = function (ev, extraOptions) {
	        this.startInteraction(ev, extraOptions); // ensure interaction began
	        if (!this.isDragging) {
	            this.isDragging = true;
	            this.handleDragStart(ev);
	        }
	    };
	    DragListener.prototype.handleDragStart = function (ev) {
	        this.trigger('dragStart', ev);
	    };
	    DragListener.prototype.handleMove = function (ev) {
	        var dx = util_1.getEvX(ev) - this.originX;
	        var dy = util_1.getEvY(ev) - this.originY;
	        var minDistance = this.minDistance;
	        var distanceSq; // current distance from the origin, squared
	        if (!this.isDistanceSurpassed) {
	            distanceSq = dx * dx + dy * dy;
	            if (distanceSq >= minDistance * minDistance) { // use pythagorean theorem
	                this.handleDistanceSurpassed(ev);
	            }
	        }
	        if (this.isDragging) {
	            this.handleDrag(dx, dy, ev);
	        }
	    };
	    // Called while the mouse is being moved and when we know a legitimate drag is taking place
	    DragListener.prototype.handleDrag = function (dx, dy, ev) {
	        this.trigger('drag', dx, dy, ev);
	        this.updateAutoScroll(ev); // will possibly cause scrolling
	    };
	    DragListener.prototype.endDrag = function (ev) {
	        if (this.isDragging) {
	            this.isDragging = false;
	            this.handleDragEnd(ev);
	        }
	    };
	    DragListener.prototype.handleDragEnd = function (ev) {
	        this.trigger('dragEnd', ev);
	    };
	    // Delay
	    // -----------------------------------------------------------------------------------------------------------------
	    DragListener.prototype.startDelay = function (initialEv) {
	        var _this = this;
	        if (this.delay) {
	            this.delayTimeoutId = setTimeout(function () {
	                _this.handleDelayEnd(initialEv);
	            }, this.delay);
	        }
	        else {
	            this.handleDelayEnd(initialEv);
	        }
	    };
	    DragListener.prototype.handleDelayEnd = function (initialEv) {
	        this.isDelayEnded = true;
	        if (this.isDistanceSurpassed) {
	            this.startDrag(initialEv);
	        }
	    };
	    // Distance
	    // -----------------------------------------------------------------------------------------------------------------
	    DragListener.prototype.handleDistanceSurpassed = function (ev) {
	        this.isDistanceSurpassed = true;
	        if (this.isDelayEnded) {
	            this.startDrag(ev);
	        }
	    };
	    // Mouse / Touch
	    // -----------------------------------------------------------------------------------------------------------------
	    DragListener.prototype.handleTouchMove = function (ev) {
	        // prevent inertia and touchmove-scrolling while dragging
	        if (this.isDragging && this.shouldCancelTouchScroll) {
	            ev.preventDefault();
	        }
	        this.handleMove(ev);
	    };
	    DragListener.prototype.handleMouseMove = function (ev) {
	        this.handleMove(ev);
	    };
	    // Scrolling (unrelated to auto-scroll)
	    // -----------------------------------------------------------------------------------------------------------------
	    DragListener.prototype.handleTouchScroll = function (ev) {
	        // if the drag is being initiated by touch, but a scroll happens before
	        // the drag-initiating delay is over, cancel the drag
	        if (!this.isDragging || this.scrollAlwaysKills) {
	            this.endInteraction(ev, true); // isCancelled=true
	        }
	    };
	    // Utils
	    // -----------------------------------------------------------------------------------------------------------------
	    // Triggers a callback. Calls a function in the option hash of the same name.
	    // Arguments beyond the first `name` are forwarded on.
	    DragListener.prototype.trigger = function (name) {
	        var args = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            args[_i - 1] = arguments[_i];
	        }
	        if (this.options[name]) {
	            this.options[name].apply(this, args);
	        }
	        // makes _methods callable by event name. TODO: kill this
	        if (this['_' + name]) {
	            this['_' + name].apply(this, args);
	        }
	    };
	    // Auto-scroll
	    // -----------------------------------------------------------------------------------------------------------------
	    DragListener.prototype.initAutoScroll = function () {
	        var scrollEl = this.scrollEl;
	        this.isAutoScroll =
	            this.options.scroll &&
	                scrollEl &&
	                !scrollEl.is(window) &&
	                !scrollEl.is(document);
	        if (this.isAutoScroll) {
	            // debounce makes sure rapid calls don't happen
	            this.listenTo(scrollEl, 'scroll', util_1.debounce(this.handleDebouncedScroll, 100));
	        }
	    };
	    DragListener.prototype.destroyAutoScroll = function () {
	        this.endAutoScroll(); // kill any animation loop
	        // remove the scroll handler if there is a scrollEl
	        if (this.isAutoScroll) {
	            this.stopListeningTo(this.scrollEl, 'scroll'); // will probably get removed by unbindHandlers too :(
	        }
	    };
	    // Computes and stores the bounding rectangle of scrollEl
	    DragListener.prototype.computeScrollBounds = function () {
	        if (this.isAutoScroll) {
	            this.scrollBounds = util_1.getOuterRect(this.scrollEl);
	            // TODO: use getClientRect in future. but prevents auto scrolling when on top of scrollbars
	        }
	    };
	    // Called when the dragging is in progress and scrolling should be updated
	    DragListener.prototype.updateAutoScroll = function (ev) {
	        var sensitivity = this.scrollSensitivity;
	        var bounds = this.scrollBounds;
	        var topCloseness;
	        var bottomCloseness;
	        var leftCloseness;
	        var rightCloseness;
	        var topVel = 0;
	        var leftVel = 0;
	        if (bounds) { // only scroll if scrollEl exists
	            // compute closeness to edges. valid range is from 0.0 - 1.0
	            topCloseness = (sensitivity - (util_1.getEvY(ev) - bounds.top)) / sensitivity;
	            bottomCloseness = (sensitivity - (bounds.bottom - util_1.getEvY(ev))) / sensitivity;
	            leftCloseness = (sensitivity - (util_1.getEvX(ev) - bounds.left)) / sensitivity;
	            rightCloseness = (sensitivity - (bounds.right - util_1.getEvX(ev))) / sensitivity;
	            // translate vertical closeness into velocity.
	            // mouse must be completely in bounds for velocity to happen.
	            if (topCloseness >= 0 && topCloseness <= 1) {
	                topVel = topCloseness * this.scrollSpeed * -1; // negative. for scrolling up
	            }
	            else if (bottomCloseness >= 0 && bottomCloseness <= 1) {
	                topVel = bottomCloseness * this.scrollSpeed;
	            }
	            // translate horizontal closeness into velocity
	            if (leftCloseness >= 0 && leftCloseness <= 1) {
	                leftVel = leftCloseness * this.scrollSpeed * -1; // negative. for scrolling left
	            }
	            else if (rightCloseness >= 0 && rightCloseness <= 1) {
	                leftVel = rightCloseness * this.scrollSpeed;
	            }
	        }
	        this.setScrollVel(topVel, leftVel);
	    };
	    // Sets the speed-of-scrolling for the scrollEl
	    DragListener.prototype.setScrollVel = function (topVel, leftVel) {
	        this.scrollTopVel = topVel;
	        this.scrollLeftVel = leftVel;
	        this.constrainScrollVel(); // massages into realistic values
	        // if there is non-zero velocity, and an animation loop hasn't already started, then START
	        if ((this.scrollTopVel || this.scrollLeftVel) && !this.scrollIntervalId) {
	            this.scrollIntervalId = setInterval(util_1.proxy(this, 'scrollIntervalFunc'), // scope to `this`
	            this.scrollIntervalMs);
	        }
	    };
	    // Forces scrollTopVel and scrollLeftVel to be zero if scrolling has already gone all the way
	    DragListener.prototype.constrainScrollVel = function () {
	        var el = this.scrollEl;
	        if (this.scrollTopVel < 0) { // scrolling up?
	            if (el.scrollTop() <= 0) { // already scrolled all the way up?
	                this.scrollTopVel = 0;
	            }
	        }
	        else if (this.scrollTopVel > 0) { // scrolling down?
	            if (el.scrollTop() + el[0].clientHeight >= el[0].scrollHeight) { // already scrolled all the way down?
	                this.scrollTopVel = 0;
	            }
	        }
	        if (this.scrollLeftVel < 0) { // scrolling left?
	            if (el.scrollLeft() <= 0) { // already scrolled all the left?
	                this.scrollLeftVel = 0;
	            }
	        }
	        else if (this.scrollLeftVel > 0) { // scrolling right?
	            if (el.scrollLeft() + el[0].clientWidth >= el[0].scrollWidth) { // already scrolled all the way right?
	                this.scrollLeftVel = 0;
	            }
	        }
	    };
	    // This function gets called during every iteration of the scrolling animation loop
	    DragListener.prototype.scrollIntervalFunc = function () {
	        var el = this.scrollEl;
	        var frac = this.scrollIntervalMs / 1000; // considering animation frequency, what the vel should be mult'd by
	        // change the value of scrollEl's scroll
	        if (this.scrollTopVel) {
	            el.scrollTop(el.scrollTop() + this.scrollTopVel * frac);
	        }
	        if (this.scrollLeftVel) {
	            el.scrollLeft(el.scrollLeft() + this.scrollLeftVel * frac);
	        }
	        this.constrainScrollVel(); // since the scroll values changed, recompute the velocities
	        // if scrolled all the way, which causes the vels to be zero, stop the animation loop
	        if (!this.scrollTopVel && !this.scrollLeftVel) {
	            this.endAutoScroll();
	        }
	    };
	    // Kills any existing scrolling animation loop
	    DragListener.prototype.endAutoScroll = function () {
	        if (this.scrollIntervalId) {
	            clearInterval(this.scrollIntervalId);
	            this.scrollIntervalId = null;
	            this.handleScrollEnd();
	        }
	    };
	    // Get called when the scrollEl is scrolled (NOTE: this is delayed via debounce)
	    DragListener.prototype.handleDebouncedScroll = function () {
	        // recompute all coordinates, but *only* if this is *not* part of our scrolling animation
	        if (!this.scrollIntervalId) {
	            this.handleScrollEnd();
	        }
	    };
	    DragListener.prototype.handleScrollEnd = function () {
	        // Called when scrolling has stopped, whether through auto scroll, or the user scrolling
	    };
	    return DragListener;
	}());
	exports.default = DragListener;
	ListenerMixin_1.default.mixInto(DragListener);
	
	
	/***/ }),
	/* 60 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var util_1 = __webpack_require__(4);
	var Mixin_1 = __webpack_require__(15);
	/*
	A set of rendering and date-related methods for a visual component comprised of one or more rows of day columns.
	Prerequisite: the object being mixed into needs to be a *Grid*
	*/
	var DayTableMixin = /** @class */ (function (_super) {
	    tslib_1.__extends(DayTableMixin, _super);
	    function DayTableMixin() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    // Populates internal variables used for date calculation and rendering
	    DayTableMixin.prototype.updateDayTable = function () {
	        var t = this;
	        var view = t.view;
	        var calendar = view.calendar;
	        var date = calendar.msToUtcMoment(t.dateProfile.renderUnzonedRange.startMs, true);
	        var end = calendar.msToUtcMoment(t.dateProfile.renderUnzonedRange.endMs, true);
	        var dayIndex = -1;
	        var dayIndices = [];
	        var dayDates = [];
	        var daysPerRow;
	        var firstDay;
	        var rowCnt;
	        while (date.isBefore(end)) { // loop each day from start to end
	            if (view.isHiddenDay(date)) {
	                dayIndices.push(dayIndex + 0.5); // mark that it's between indices
	            }
	            else {
	                dayIndex++;
	                dayIndices.push(dayIndex);
	                dayDates.push(date.clone());
	            }
	            date.add(1, 'days');
	        }
	        if (this.breakOnWeeks) {
	            // count columns until the day-of-week repeats
	            firstDay = dayDates[0].day();
	            for (daysPerRow = 1; daysPerRow < dayDates.length; daysPerRow++) {
	                if (dayDates[daysPerRow].day() === firstDay) {
	                    break;
	                }
	            }
	            rowCnt = Math.ceil(dayDates.length / daysPerRow);
	        }
	        else {
	            rowCnt = 1;
	            daysPerRow = dayDates.length;
	        }
	        this.dayDates = dayDates;
	        this.dayIndices = dayIndices;
	        this.daysPerRow = daysPerRow;
	        this.rowCnt = rowCnt;
	        this.updateDayTableCols();
	    };
	    // Computes and assigned the colCnt property and updates any options that may be computed from it
	    DayTableMixin.prototype.updateDayTableCols = function () {
	        this.colCnt = this.computeColCnt();
	        this.colHeadFormat =
	            this.opt('columnHeaderFormat') ||
	                this.opt('columnFormat') || // deprecated
	                this.computeColHeadFormat();
	    };
	    // Determines how many columns there should be in the table
	    DayTableMixin.prototype.computeColCnt = function () {
	        return this.daysPerRow;
	    };
	    // Computes the ambiguously-timed moment for the given cell
	    DayTableMixin.prototype.getCellDate = function (row, col) {
	        return this.dayDates[this.getCellDayIndex(row, col)].clone();
	    };
	    // Computes the ambiguously-timed date range for the given cell
	    DayTableMixin.prototype.getCellRange = function (row, col) {
	        var start = this.getCellDate(row, col);
	        var end = start.clone().add(1, 'days');
	        return { start: start, end: end };
	    };
	    // Returns the number of day cells, chronologically, from the first of the grid (0-based)
	    DayTableMixin.prototype.getCellDayIndex = function (row, col) {
	        return row * this.daysPerRow + this.getColDayIndex(col);
	    };
	    // Returns the numner of day cells, chronologically, from the first cell in *any given row*
	    DayTableMixin.prototype.getColDayIndex = function (col) {
	        if (this.isRTL) {
	            return this.colCnt - 1 - col;
	        }
	        else {
	            return col;
	        }
	    };
	    // Given a date, returns its chronolocial cell-index from the first cell of the grid.
	    // If the date lies between cells (because of hiddenDays), returns a floating-point value between offsets.
	    // If before the first offset, returns a negative number.
	    // If after the last offset, returns an offset past the last cell offset.
	    // Only works for *start* dates of cells. Will not work for exclusive end dates for cells.
	    DayTableMixin.prototype.getDateDayIndex = function (date) {
	        var dayIndices = this.dayIndices;
	        var dayOffset = date.diff(this.dayDates[0], 'days');
	        if (dayOffset < 0) {
	            return dayIndices[0] - 1;
	        }
	        else if (dayOffset >= dayIndices.length) {
	            return dayIndices[dayIndices.length - 1] + 1;
	        }
	        else {
	            return dayIndices[dayOffset];
	        }
	    };
	    /* Options
	    ------------------------------------------------------------------------------------------------------------------*/
	    // Computes a default column header formatting string if `colFormat` is not explicitly defined
	    DayTableMixin.prototype.computeColHeadFormat = function () {
	        // if more than one week row, or if there are a lot of columns with not much space,
	        // put just the day numbers will be in each cell
	        if (this.rowCnt > 1 || this.colCnt > 10) {
	            return 'ddd'; // "Sat"
	        }
	        else if (this.colCnt > 1) {
	            return this.opt('dayOfMonthFormat'); // "Sat 12/10"
	        }
	        else {
	            return 'dddd'; // "Saturday"
	        }
	    };
	    /* Slicing
	    ------------------------------------------------------------------------------------------------------------------*/
	    // Slices up a date range into a segment for every week-row it intersects with
	    DayTableMixin.prototype.sliceRangeByRow = function (unzonedRange) {
	        var daysPerRow = this.daysPerRow;
	        var normalRange = this.view.computeDayRange(unzonedRange); // make whole-day range, considering nextDayThreshold
	        var rangeFirst = this.getDateDayIndex(normalRange.start); // inclusive first index
	        var rangeLast = this.getDateDayIndex(normalRange.end.clone().subtract(1, 'days')); // inclusive last index
	        var segs = [];
	        var row;
	        var rowFirst;
	        var rowLast; // inclusive day-index range for current row
	        var segFirst;
	        var segLast; // inclusive day-index range for segment
	        for (row = 0; row < this.rowCnt; row++) {
	            rowFirst = row * daysPerRow;
	            rowLast = rowFirst + daysPerRow - 1;
	            // intersect segment's offset range with the row's
	            segFirst = Math.max(rangeFirst, rowFirst);
	            segLast = Math.min(rangeLast, rowLast);
	            // deal with in-between indices
	            segFirst = Math.ceil(segFirst); // in-between starts round to next cell
	            segLast = Math.floor(segLast); // in-between ends round to prev cell
	            if (segFirst <= segLast) { // was there any intersection with the current row?
	                segs.push({
	                    row: row,
	                    // normalize to start of row
	                    firstRowDayIndex: segFirst - rowFirst,
	                    lastRowDayIndex: segLast - rowFirst,
	                    // must be matching integers to be the segment's start/end
	                    isStart: segFirst === rangeFirst,
	                    isEnd: segLast === rangeLast
	                });
	            }
	        }
	        return segs;
	    };
	    // Slices up a date range into a segment for every day-cell it intersects with.
	    // TODO: make more DRY with sliceRangeByRow somehow.
	    DayTableMixin.prototype.sliceRangeByDay = function (unzonedRange) {
	        var daysPerRow = this.daysPerRow;
	        var normalRange = this.view.computeDayRange(unzonedRange); // make whole-day range, considering nextDayThreshold
	        var rangeFirst = this.getDateDayIndex(normalRange.start); // inclusive first index
	        var rangeLast = this.getDateDayIndex(normalRange.end.clone().subtract(1, 'days')); // inclusive last index
	        var segs = [];
	        var row;
	        var rowFirst;
	        var rowLast; // inclusive day-index range for current row
	        var i;
	        var segFirst;
	        var segLast; // inclusive day-index range for segment
	        for (row = 0; row < this.rowCnt; row++) {
	            rowFirst = row * daysPerRow;
	            rowLast = rowFirst + daysPerRow - 1;
	            for (i = rowFirst; i <= rowLast; i++) {
	                // intersect segment's offset range with the row's
	                segFirst = Math.max(rangeFirst, i);
	                segLast = Math.min(rangeLast, i);
	                // deal with in-between indices
	                segFirst = Math.ceil(segFirst); // in-between starts round to next cell
	                segLast = Math.floor(segLast); // in-between ends round to prev cell
	                if (segFirst <= segLast) { // was there any intersection with the current row?
	                    segs.push({
	                        row: row,
	                        // normalize to start of row
	                        firstRowDayIndex: segFirst - rowFirst,
	                        lastRowDayIndex: segLast - rowFirst,
	                        // must be matching integers to be the segment's start/end
	                        isStart: segFirst === rangeFirst,
	                        isEnd: segLast === rangeLast
	                    });
	                }
	            }
	        }
	        return segs;
	    };
	    /* Header Rendering
	    ------------------------------------------------------------------------------------------------------------------*/
	    DayTableMixin.prototype.renderHeadHtml = function () {
	        var theme = this.view.calendar.theme;
	        return '' +
	            '<div class="fc-row ' + theme.getClass('headerRow') + '">' +
	            '<table class="' + theme.getClass('tableGrid') + '">' +
	            '<thead>' +
	            this.renderHeadTrHtml() +
	            '</thead>' +
	            '</table>' +
	            '</div>';
	    };
	    DayTableMixin.prototype.renderHeadIntroHtml = function () {
	        return this.renderIntroHtml(); // fall back to generic
	    };
	    DayTableMixin.prototype.renderHeadTrHtml = function () {
	        return '' +
	            '<tr>' +
	            (this.isRTL ? '' : this.renderHeadIntroHtml()) +
	            this.renderHeadDateCellsHtml() +
	            (this.isRTL ? this.renderHeadIntroHtml() : '') +
	            '</tr>';
	    };
	    DayTableMixin.prototype.renderHeadDateCellsHtml = function () {
	        var htmls = [];
	        var col;
	        var date;
	        for (col = 0; col < this.colCnt; col++) {
	            date = this.getCellDate(0, col);
	            htmls.push(this.renderHeadDateCellHtml(date));
	        }
	        return htmls.join('');
	    };
	    // TODO: when internalApiVersion, accept an object for HTML attributes
	    // (colspan should be no different)
	    DayTableMixin.prototype.renderHeadDateCellHtml = function (date, colspan, otherAttrs) {
	        var t = this;
	        var view = t.view;
	        var isDateValid = t.dateProfile.activeUnzonedRange.containsDate(date); // TODO: called too frequently. cache somehow.
	        var classNames = [
	            'fc-day-header',
	            view.calendar.theme.getClass('widgetHeader')
	        ];
	        var innerHtml;
	        if (typeof t.opt('columnHeaderHtml') === 'function') {
	            innerHtml = t.opt('columnHeaderHtml')(date);
	        }
	        else if (typeof t.opt('columnHeaderText') === 'function') {
	            innerHtml = util_1.htmlEscape(t.opt('columnHeaderText')(date));
	        }
	        else {
	            innerHtml = util_1.htmlEscape(date.format(t.colHeadFormat));
	        }
	        // if only one row of days, the classNames on the header can represent the specific days beneath
	        if (t.rowCnt === 1) {
	            classNames = classNames.concat(
	            // includes the day-of-week class
	            // noThemeHighlight=true (don't highlight the header)
	            t.getDayClasses(date, true));
	        }
	        else {
	            classNames.push('fc-' + util_1.dayIDs[date.day()]); // only add the day-of-week class
	        }
	        return '' +
	            '<th class="' + classNames.join(' ') + '"' +
	            ((isDateValid && t.rowCnt) === 1 ?
	                ' data-date="' + date.format('YYYY-MM-DD') + '"' :
	                '') +
	            (colspan > 1 ?
	                ' colspan="' + colspan + '"' :
	                '') +
	            (otherAttrs ?
	                ' ' + otherAttrs :
	                '') +
	            '>' +
	            (isDateValid ?
	                // don't make a link if the heading could represent multiple days, or if there's only one day (forceOff)
	                view.buildGotoAnchorHtml({ date: date, forceOff: t.rowCnt > 1 || t.colCnt === 1 }, innerHtml) :
	                // if not valid, display text, but no link
	                innerHtml) +
	            '</th>';
	    };
	    /* Background Rendering
	    ------------------------------------------------------------------------------------------------------------------*/
	    DayTableMixin.prototype.renderBgTrHtml = function (row) {
	        return '' +
	            '<tr>' +
	            (this.isRTL ? '' : this.renderBgIntroHtml(row)) +
	            this.renderBgCellsHtml(row) +
	            (this.isRTL ? this.renderBgIntroHtml(row) : '') +
	            '</tr>';
	    };
	    DayTableMixin.prototype.renderBgIntroHtml = function (row) {
	        return this.renderIntroHtml(); // fall back to generic
	    };
	    DayTableMixin.prototype.renderBgCellsHtml = function (row) {
	        var htmls = [];
	        var col;
	        var date;
	        for (col = 0; col < this.colCnt; col++) {
	            date = this.getCellDate(row, col);
	            htmls.push(this.renderBgCellHtml(date));
	        }
	        return htmls.join('');
	    };
	    DayTableMixin.prototype.renderBgCellHtml = function (date, otherAttrs) {
	        var t = this;
	        var view = t.view;
	        var isDateValid = t.dateProfile.activeUnzonedRange.containsDate(date); // TODO: called too frequently. cache somehow.
	        var classes = t.getDayClasses(date);
	        classes.unshift('fc-day', view.calendar.theme.getClass('widgetContent'));
	        return '<td class="' + classes.join(' ') + '"' +
	            (isDateValid ?
	                ' data-date="' + date.format('YYYY-MM-DD') + '"' : // if date has a time, won't format it
	                '') +
	            (otherAttrs ?
	                ' ' + otherAttrs :
	                '') +
	            '></td>';
	    };
	    /* Generic
	    ------------------------------------------------------------------------------------------------------------------*/
	    DayTableMixin.prototype.renderIntroHtml = function () {
	        // Generates the default HTML intro for any row. User classes should override
	    };
	    // TODO: a generic method for dealing with <tr>, RTL, intro
	    // when increment internalApiVersion
	    // wrapTr (scheduler)
	    /* Utils
	    ------------------------------------------------------------------------------------------------------------------*/
	    // Applies the generic "intro" and "outro" HTML to the given cells.
	    // Intro means the leftmost cell when the calendar is LTR and the rightmost cell when RTL. Vice-versa for outro.
	    DayTableMixin.prototype.bookendCells = function (trEl) {
	        var introHtml = this.renderIntroHtml();
	        if (introHtml) {
	            if (this.isRTL) {
	                trEl.append(introHtml);
	            }
	            else {
	                trEl.prepend(introHtml);
	            }
	        }
	    };
	    return DayTableMixin;
	}(Mixin_1.default));
	exports.default = DayTableMixin;
	
	
	/***/ }),
	/* 61 */
	/***/ (function(module, exports) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var BusinessHourRenderer = /** @class */ (function () {
	    /*
	    component implements:
	      - eventRangesToEventFootprints
	      - eventFootprintsToSegs
	    */
	    function BusinessHourRenderer(component, fillRenderer) {
	        this.component = component;
	        this.fillRenderer = fillRenderer;
	    }
	    BusinessHourRenderer.prototype.render = function (businessHourGenerator) {
	        var component = this.component;
	        var unzonedRange = component._getDateProfile().activeUnzonedRange;
	        var eventInstanceGroup = businessHourGenerator.buildEventInstanceGroup(component.hasAllDayBusinessHours, unzonedRange);
	        var eventFootprints = eventInstanceGroup ?
	            component.eventRangesToEventFootprints(eventInstanceGroup.sliceRenderRanges(unzonedRange)) :
	            [];
	        this.renderEventFootprints(eventFootprints);
	    };
	    BusinessHourRenderer.prototype.renderEventFootprints = function (eventFootprints) {
	        var segs = this.component.eventFootprintsToSegs(eventFootprints);
	        this.renderSegs(segs);
	        this.segs = segs;
	    };
	    BusinessHourRenderer.prototype.renderSegs = function (segs) {
	        if (this.fillRenderer) {
	            this.fillRenderer.renderSegs('businessHours', segs, {
	                getClasses: function (seg) {
	                    return ['fc-nonbusiness', 'fc-bgevent'];
	                }
	            });
	        }
	    };
	    BusinessHourRenderer.prototype.unrender = function () {
	        if (this.fillRenderer) {
	            this.fillRenderer.unrender('businessHours');
	        }
	        this.segs = null;
	    };
	    BusinessHourRenderer.prototype.getSegs = function () {
	        return this.segs || [];
	    };
	    return BusinessHourRenderer;
	}());
	exports.default = BusinessHourRenderer;
	
	
	/***/ }),
	/* 62 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var $ = __webpack_require__(3);
	var util_1 = __webpack_require__(4);
	var FillRenderer = /** @class */ (function () {
	    function FillRenderer(component) {
	        this.fillSegTag = 'div';
	        this.component = component;
	        this.elsByFill = {};
	    }
	    FillRenderer.prototype.renderFootprint = function (type, componentFootprint, props) {
	        this.renderSegs(type, this.component.componentFootprintToSegs(componentFootprint), props);
	    };
	    FillRenderer.prototype.renderSegs = function (type, segs, props) {
	        var els;
	        segs = this.buildSegEls(type, segs, props); // assignes `.el` to each seg. returns successfully rendered segs
	        els = this.attachSegEls(type, segs);
	        if (els) {
	            this.reportEls(type, els);
	        }
	        return segs;
	    };
	    // Unrenders a specific type of fill that is currently rendered on the grid
	    FillRenderer.prototype.unrender = function (type) {
	        var el = this.elsByFill[type];
	        if (el) {
	            el.remove();
	            delete this.elsByFill[type];
	        }
	    };
	    // Renders and assigns an `el` property for each fill segment. Generic enough to work with different types.
	    // Only returns segments that successfully rendered.
	    FillRenderer.prototype.buildSegEls = function (type, segs, props) {
	        var _this = this;
	        var html = '';
	        var renderedSegs = [];
	        var i;
	        if (segs.length) {
	            // build a large concatenation of segment HTML
	            for (i = 0; i < segs.length; i++) {
	                html += this.buildSegHtml(type, segs[i], props);
	            }
	            // Grab individual elements from the combined HTML string. Use each as the default rendering.
	            // Then, compute the 'el' for each segment.
	            $(html).each(function (i, node) {
	                var seg = segs[i];
	                var el = $(node);
	                // allow custom filter methods per-type
	                if (props.filterEl) {
	                    el = props.filterEl(seg, el);
	                }
	                if (el) { // custom filters did not cancel the render
	                    el = $(el); // allow custom filter to return raw DOM node
	                    // correct element type? (would be bad if a non-TD were inserted into a table for example)
	                    if (el.is(_this.fillSegTag)) {
	                        seg.el = el;
	                        renderedSegs.push(seg);
	                    }
	                }
	            });
	        }
	        return renderedSegs;
	    };
	    // Builds the HTML needed for one fill segment. Generic enough to work with different types.
	    FillRenderer.prototype.buildSegHtml = function (type, seg, props) {
	        // custom hooks per-type
	        var classes = props.getClasses ? props.getClasses(seg) : [];
	        var css = util_1.cssToStr(props.getCss ? props.getCss(seg) : {});
	        return '<' + this.fillSegTag +
	            (classes.length ? ' class="' + classes.join(' ') + '"' : '') +
	            (css ? ' style="' + css + '"' : '') +
	            '></' + this.fillSegTag + '>';
	    };
	    // Should return wrapping DOM structure
	    FillRenderer.prototype.attachSegEls = function (type, segs) {
	        // subclasses must implement
	    };
	    FillRenderer.prototype.reportEls = function (type, nodes) {
	        if (this.elsByFill[type]) {
	            this.elsByFill[type] = this.elsByFill[type].add(nodes);
	        }
	        else {
	            this.elsByFill[type] = $(nodes);
	        }
	    };
	    return FillRenderer;
	}());
	exports.default = FillRenderer;
	
	
	/***/ }),
	/* 63 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var SingleEventDef_1 = __webpack_require__(9);
	var EventFootprint_1 = __webpack_require__(34);
	var EventSource_1 = __webpack_require__(6);
	var HelperRenderer = /** @class */ (function () {
	    function HelperRenderer(component, eventRenderer) {
	        this.view = component._getView();
	        this.component = component;
	        this.eventRenderer = eventRenderer;
	    }
	    HelperRenderer.prototype.renderComponentFootprint = function (componentFootprint) {
	        this.renderEventFootprints([
	            this.fabricateEventFootprint(componentFootprint)
	        ]);
	    };
	    HelperRenderer.prototype.renderEventDraggingFootprints = function (eventFootprints, sourceSeg, isTouch) {
	        this.renderEventFootprints(eventFootprints, sourceSeg, 'fc-dragging', isTouch ? null : this.view.opt('dragOpacity'));
	    };
	    HelperRenderer.prototype.renderEventResizingFootprints = function (eventFootprints, sourceSeg, isTouch) {
	        this.renderEventFootprints(eventFootprints, sourceSeg, 'fc-resizing');
	    };
	    HelperRenderer.prototype.renderEventFootprints = function (eventFootprints, sourceSeg, extraClassNames, opacity) {
	        var segs = this.component.eventFootprintsToSegs(eventFootprints);
	        var classNames = 'fc-helper ' + (extraClassNames || '');
	        var i;
	        // assigns each seg's el and returns a subset of segs that were rendered
	        segs = this.eventRenderer.renderFgSegEls(segs);
	        for (i = 0; i < segs.length; i++) {
	            segs[i].el.addClass(classNames);
	        }
	        if (opacity != null) {
	            for (i = 0; i < segs.length; i++) {
	                segs[i].el.css('opacity', opacity);
	            }
	        }
	        this.helperEls = this.renderSegs(segs, sourceSeg);
	    };
	    /*
	    Must return all mock event elements
	    */
	    HelperRenderer.prototype.renderSegs = function (segs, sourceSeg) {
	        // Subclasses must implement
	    };
	    HelperRenderer.prototype.unrender = function () {
	        if (this.helperEls) {
	            this.helperEls.remove();
	            this.helperEls = null;
	        }
	    };
	    HelperRenderer.prototype.fabricateEventFootprint = function (componentFootprint) {
	        var calendar = this.view.calendar;
	        var eventDateProfile = calendar.footprintToDateProfile(componentFootprint);
	        var dummyEvent = new SingleEventDef_1.default(new EventSource_1.default(calendar));
	        var dummyInstance;
	        dummyEvent.dateProfile = eventDateProfile;
	        dummyInstance = dummyEvent.buildInstance();
	        return new EventFootprint_1.default(componentFootprint, dummyEvent, dummyInstance);
	    };
	    return HelperRenderer;
	}());
	exports.default = HelperRenderer;
	
	
	/***/ }),
	/* 64 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var GlobalEmitter_1 = __webpack_require__(23);
	var Interaction_1 = __webpack_require__(14);
	var EventPointing = /** @class */ (function (_super) {
	    tslib_1.__extends(EventPointing, _super);
	    function EventPointing() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /*
	    component must implement:
	      - publiclyTrigger
	    */
	    EventPointing.prototype.bindToEl = function (el) {
	        var component = this.component;
	        component.bindSegHandlerToEl(el, 'click', this.handleClick.bind(this));
	        component.bindSegHandlerToEl(el, 'mouseenter', this.handleMouseover.bind(this));
	        component.bindSegHandlerToEl(el, 'mouseleave', this.handleMouseout.bind(this));
	    };
	    EventPointing.prototype.handleClick = function (seg, ev) {
	        var res = this.component.publiclyTrigger('eventClick', {
	            context: seg.el[0],
	            args: [seg.footprint.getEventLegacy(), ev, this.view]
	        });
	        if (res === false) {
	            ev.preventDefault();
	        }
	    };
	    // Updates internal state and triggers handlers for when an event element is moused over
	    EventPointing.prototype.handleMouseover = function (seg, ev) {
	        if (!GlobalEmitter_1.default.get().shouldIgnoreMouse() &&
	            !this.mousedOverSeg) {
	            this.mousedOverSeg = seg;
	            // TODO: move to EventSelecting's responsibility
	            if (this.view.isEventDefResizable(seg.footprint.eventDef)) {
	                seg.el.addClass('fc-allow-mouse-resize');
	            }
	            this.component.publiclyTrigger('eventMouseover', {
	                context: seg.el[0],
	                args: [seg.footprint.getEventLegacy(), ev, this.view]
	            });
	        }
	    };
	    // Updates internal state and triggers handlers for when an event element is moused out.
	    // Can be given no arguments, in which case it will mouseout the segment that was previously moused over.
	    EventPointing.prototype.handleMouseout = function (seg, ev) {
	        if (this.mousedOverSeg) {
	            this.mousedOverSeg = null;
	            // TODO: move to EventSelecting's responsibility
	            if (this.view.isEventDefResizable(seg.footprint.eventDef)) {
	                seg.el.removeClass('fc-allow-mouse-resize');
	            }
	            this.component.publiclyTrigger('eventMouseout', {
	                context: seg.el[0],
	                args: [
	                    seg.footprint.getEventLegacy(),
	                    ev || {},
	                    this.view
	                ]
	            });
	        }
	    };
	    EventPointing.prototype.end = function () {
	        if (this.mousedOverSeg) {
	            this.handleMouseout(this.mousedOverSeg);
	        }
	    };
	    return EventPointing;
	}(Interaction_1.default));
	exports.default = EventPointing;
	
	
	/***/ }),
	/* 65 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var Mixin_1 = __webpack_require__(15);
	var DateClicking_1 = __webpack_require__(237);
	var DateSelecting_1 = __webpack_require__(236);
	var EventPointing_1 = __webpack_require__(64);
	var EventDragging_1 = __webpack_require__(235);
	var EventResizing_1 = __webpack_require__(234);
	var ExternalDropping_1 = __webpack_require__(233);
	var StandardInteractionsMixin = /** @class */ (function (_super) {
	    tslib_1.__extends(StandardInteractionsMixin, _super);
	    function StandardInteractionsMixin() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    return StandardInteractionsMixin;
	}(Mixin_1.default));
	exports.default = StandardInteractionsMixin;
	StandardInteractionsMixin.prototype.dateClickingClass = DateClicking_1.default;
	StandardInteractionsMixin.prototype.dateSelectingClass = DateSelecting_1.default;
	StandardInteractionsMixin.prototype.eventPointingClass = EventPointing_1.default;
	StandardInteractionsMixin.prototype.eventDraggingClass = EventDragging_1.default;
	StandardInteractionsMixin.prototype.eventResizingClass = EventResizing_1.default;
	StandardInteractionsMixin.prototype.externalDroppingClass = ExternalDropping_1.default;
	
	
	/***/ }),
	/* 66 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var $ = __webpack_require__(3);
	var util_1 = __webpack_require__(4);
	var CoordCache_1 = __webpack_require__(58);
	var Popover_1 = __webpack_require__(227);
	var UnzonedRange_1 = __webpack_require__(5);
	var ComponentFootprint_1 = __webpack_require__(12);
	var EventFootprint_1 = __webpack_require__(34);
	var BusinessHourRenderer_1 = __webpack_require__(61);
	var StandardInteractionsMixin_1 = __webpack_require__(65);
	var InteractiveDateComponent_1 = __webpack_require__(42);
	var DayTableMixin_1 = __webpack_require__(60);
	var DayGridEventRenderer_1 = __webpack_require__(243);
	var DayGridHelperRenderer_1 = __webpack_require__(244);
	var DayGridFillRenderer_1 = __webpack_require__(245);
	/* A component that renders a grid of whole-days that runs horizontally. There can be multiple rows, one per week.
	----------------------------------------------------------------------------------------------------------------------*/
	var DayGrid = /** @class */ (function (_super) {
	    tslib_1.__extends(DayGrid, _super);
	    function DayGrid(view) {
	        var _this = _super.call(this, view) || this;
	        _this.cellWeekNumbersVisible = false; // display week numbers in day cell?
	        _this.bottomCoordPadding = 0; // hack for extending the hit area for the last row of the coordinate grid
	        // isRigid determines whether the individual rows should ignore the contents and be a constant height.
	        // Relies on the view's colCnt and rowCnt. In the future, this component should probably be self-sufficient.
	        _this.isRigid = false;
	        _this.hasAllDayBusinessHours = true;
	        return _this;
	    }
	    // Slices up the given span (unzoned start/end with other misc data) into an array of segments
	    DayGrid.prototype.componentFootprintToSegs = function (componentFootprint) {
	        var segs = this.sliceRangeByRow(componentFootprint.unzonedRange);
	        var i;
	        var seg;
	        for (i = 0; i < segs.length; i++) {
	            seg = segs[i];
	            if (this.isRTL) {
	                seg.leftCol = this.daysPerRow - 1 - seg.lastRowDayIndex;
	                seg.rightCol = this.daysPerRow - 1 - seg.firstRowDayIndex;
	            }
	            else {
	                seg.leftCol = seg.firstRowDayIndex;
	                seg.rightCol = seg.lastRowDayIndex;
	            }
	        }
	        return segs;
	    };
	    /* Date Rendering
	    ------------------------------------------------------------------------------------------------------------------*/
	    DayGrid.prototype.renderDates = function (dateProfile) {
	        this.dateProfile = dateProfile;
	        this.updateDayTable();
	        this.renderGrid();
	    };
	    DayGrid.prototype.unrenderDates = function () {
	        this.removeSegPopover();
	    };
	    // Renders the rows and columns into the component's `this.el`, which should already be assigned.
	    DayGrid.prototype.renderGrid = function () {
	        var view = this.view;
	        var rowCnt = this.rowCnt;
	        var colCnt = this.colCnt;
	        var html = '';
	        var row;
	        var col;
	        if (this.headContainerEl) {
	            this.headContainerEl.html(this.renderHeadHtml());
	        }
	        for (row = 0; row < rowCnt; row++) {
	            html += this.renderDayRowHtml(row, this.isRigid);
	        }
	        this.el.html(html);
	        this.rowEls = this.el.find('.fc-row');
	        this.cellEls = this.el.find('.fc-day, .fc-disabled-day');
	        this.rowCoordCache = new CoordCache_1.default({
	            els: this.rowEls,
	            isVertical: true
	        });
	        this.colCoordCache = new CoordCache_1.default({
	            els: this.cellEls.slice(0, this.colCnt),
	            isHorizontal: true
	        });
	        // trigger dayRender with each cell's element
	        for (row = 0; row < rowCnt; row++) {
	            for (col = 0; col < colCnt; col++) {
	                this.publiclyTrigger('dayRender', {
	                    context: view,
	                    args: [
	                        this.getCellDate(row, col),
	                        this.getCellEl(row, col),
	                        view
	                    ]
	                });
	            }
	        }
	    };
	    // Generates the HTML for a single row, which is a div that wraps a table.
	    // `row` is the row number.
	    DayGrid.prototype.renderDayRowHtml = function (row, isRigid) {
	        var theme = this.view.calendar.theme;
	        var classes = ['fc-row', 'fc-week', theme.getClass('dayRow')];
	        if (isRigid) {
	            classes.push('fc-rigid');
	        }
	        return '' +
	            '<div class="' + classes.join(' ') + '">' +
	            '<div class="fc-bg">' +
	            '<table class="' + theme.getClass('tableGrid') + '">' +
	            this.renderBgTrHtml(row) +
	            '</table>' +
	            '</div>' +
	            '<div class="fc-content-skeleton">' +
	            '<table>' +
	            (this.getIsNumbersVisible() ?
	                '<thead>' +
	                    this.renderNumberTrHtml(row) +
	                    '</thead>' :
	                '') +
	            '</table>' +
	            '</div>' +
	            '</div>';
	    };
	    DayGrid.prototype.getIsNumbersVisible = function () {
	        return this.getIsDayNumbersVisible() || this.cellWeekNumbersVisible;
	    };
	    DayGrid.prototype.getIsDayNumbersVisible = function () {
	        return this.rowCnt > 1;
	    };
	    /* Grid Number Rendering
	    ------------------------------------------------------------------------------------------------------------------*/
	    DayGrid.prototype.renderNumberTrHtml = function (row) {
	        return '' +
	            '<tr>' +
	            (this.isRTL ? '' : this.renderNumberIntroHtml(row)) +
	            this.renderNumberCellsHtml(row) +
	            (this.isRTL ? this.renderNumberIntroHtml(row) : '') +
	            '</tr>';
	    };
	    DayGrid.prototype.renderNumberIntroHtml = function (row) {
	        return this.renderIntroHtml();
	    };
	    DayGrid.prototype.renderNumberCellsHtml = function (row) {
	        var htmls = [];
	        var col;
	        var date;
	        for (col = 0; col < this.colCnt; col++) {
	            date = this.getCellDate(row, col);
	            htmls.push(this.renderNumberCellHtml(date));
	        }
	        return htmls.join('');
	    };
	    // Generates the HTML for the <td>s of the "number" row in the DayGrid's content skeleton.
	    // The number row will only exist if either day numbers or week numbers are turned on.
	    DayGrid.prototype.renderNumberCellHtml = function (date) {
	        var view = this.view;
	        var html = '';
	        var isDateValid = this.dateProfile.activeUnzonedRange.containsDate(date); // TODO: called too frequently. cache somehow.
	        var isDayNumberVisible = this.getIsDayNumbersVisible() && isDateValid;
	        var classes;
	        var weekCalcFirstDoW;
	        if (!isDayNumberVisible && !this.cellWeekNumbersVisible) {
	            // no numbers in day cell (week number must be along the side)
	            return '<td></td>'; //  will create an empty space above events :(
	        }
	        classes = this.getDayClasses(date);
	        classes.unshift('fc-day-top');
	        if (this.cellWeekNumbersVisible) {
	            // To determine the day of week number change under ISO, we cannot
	            // rely on moment.js methods such as firstDayOfWeek() or weekday(),
	            // because they rely on the locale's dow (possibly overridden by
	            // our firstDay option), which may not be Monday. We cannot change
	            // dow, because that would affect the calendar start day as well.
	            if (date._locale._fullCalendar_weekCalc === 'ISO') {
	                weekCalcFirstDoW = 1; // Monday by ISO 8601 definition
	            }
	            else {
	                weekCalcFirstDoW = date._locale.firstDayOfWeek();
	            }
	        }
	        html += '<td class="' + classes.join(' ') + '"' +
	            (isDateValid ?
	                ' data-date="' + date.format() + '"' :
	                '') +
	            '>';
	        if (this.cellWeekNumbersVisible && (date.day() === weekCalcFirstDoW)) {
	            html += view.buildGotoAnchorHtml({ date: date, type: 'week' }, { 'class': 'fc-week-number' }, date.format('w') // inner HTML
	            );
	        }
	        if (isDayNumberVisible) {
	            html += view.buildGotoAnchorHtml(date, { 'class': 'fc-day-number' }, date.format('D') // inner HTML
	            );
	        }
	        html += '</td>';
	        return html;
	    };
	    /* Hit System
	    ------------------------------------------------------------------------------------------------------------------*/
	    DayGrid.prototype.prepareHits = function () {
	        this.colCoordCache.build();
	        this.rowCoordCache.build();
	        this.rowCoordCache.bottoms[this.rowCnt - 1] += this.bottomCoordPadding; // hack
	    };
	    DayGrid.prototype.releaseHits = function () {
	        this.colCoordCache.clear();
	        this.rowCoordCache.clear();
	    };
	    DayGrid.prototype.queryHit = function (leftOffset, topOffset) {
	        if (this.colCoordCache.isLeftInBounds(leftOffset) && this.rowCoordCache.isTopInBounds(topOffset)) {
	            var col = this.colCoordCache.getHorizontalIndex(leftOffset);
	            var row = this.rowCoordCache.getVerticalIndex(topOffset);
	            if (row != null && col != null) {
	                return this.getCellHit(row, col);
	            }
	        }
	    };
	    DayGrid.prototype.getHitFootprint = function (hit) {
	        var range = this.getCellRange(hit.row, hit.col);
	        return new ComponentFootprint_1.default(new UnzonedRange_1.default(range.start, range.end), true // all-day?
	        );
	    };
	    DayGrid.prototype.getHitEl = function (hit) {
	        return this.getCellEl(hit.row, hit.col);
	    };
	    /* Cell System
	    ------------------------------------------------------------------------------------------------------------------*/
	    // FYI: the first column is the leftmost column, regardless of date
	    DayGrid.prototype.getCellHit = function (row, col) {
	        return {
	            row: row,
	            col: col,
	            component: this,
	            left: this.colCoordCache.getLeftOffset(col),
	            right: this.colCoordCache.getRightOffset(col),
	            top: this.rowCoordCache.getTopOffset(row),
	            bottom: this.rowCoordCache.getBottomOffset(row)
	        };
	    };
	    DayGrid.prototype.getCellEl = function (row, col) {
	        return this.cellEls.eq(row * this.colCnt + col);
	    };
	    /* Event Rendering
	    ------------------------------------------------------------------------------------------------------------------*/
	    // Unrenders all events currently rendered on the grid
	    DayGrid.prototype.executeEventUnrender = function () {
	        this.removeSegPopover(); // removes the "more.." events popover
	        _super.prototype.executeEventUnrender.call(this);
	    };
	    // Retrieves all rendered segment objects currently rendered on the grid
	    DayGrid.prototype.getOwnEventSegs = function () {
	        // append the segments from the "more..." popover
	        return _super.prototype.getOwnEventSegs.call(this).concat(this.popoverSegs || []);
	    };
	    /* Event Drag Visualization
	    ------------------------------------------------------------------------------------------------------------------*/
	    // Renders a visual indication of an event or external element being dragged.
	    // `eventLocation` has zoned start and end (optional)
	    DayGrid.prototype.renderDrag = function (eventFootprints, seg, isTouch) {
	        var i;
	        for (i = 0; i < eventFootprints.length; i++) {
	            this.renderHighlight(eventFootprints[i].componentFootprint);
	        }
	        // render drags from OTHER components as helpers
	        if (eventFootprints.length && seg && seg.component !== this) {
	            this.helperRenderer.renderEventDraggingFootprints(eventFootprints, seg, isTouch);
	            return true; // signal helpers rendered
	        }
	    };
	    // Unrenders any visual indication of a hovering event
	    DayGrid.prototype.unrenderDrag = function () {
	        this.unrenderHighlight();
	        this.helperRenderer.unrender();
	    };
	    /* Event Resize Visualization
	    ------------------------------------------------------------------------------------------------------------------*/
	    // Renders a visual indication of an event being resized
	    DayGrid.prototype.renderEventResize = function (eventFootprints, seg, isTouch) {
	        var i;
	        for (i = 0; i < eventFootprints.length; i++) {
	            this.renderHighlight(eventFootprints[i].componentFootprint);
	        }
	        this.helperRenderer.renderEventResizingFootprints(eventFootprints, seg, isTouch);
	    };
	    // Unrenders a visual indication of an event being resized
	    DayGrid.prototype.unrenderEventResize = function () {
	        this.unrenderHighlight();
	        this.helperRenderer.unrender();
	    };
	    /* More+ Link Popover
	    ------------------------------------------------------------------------------------------------------------------*/
	    DayGrid.prototype.removeSegPopover = function () {
	        if (this.segPopover) {
	            this.segPopover.hide(); // in handler, will call segPopover's removeElement
	        }
	    };
	    // Limits the number of "levels" (vertically stacking layers of events) for each row of the grid.
	    // `levelLimit` can be false (don't limit), a number, or true (should be computed).
	    DayGrid.prototype.limitRows = function (levelLimit) {
	        var rowStructs = this.eventRenderer.rowStructs || [];
	        var row; // row #
	        var rowLevelLimit;
	        for (row = 0; row < rowStructs.length; row++) {
	            this.unlimitRow(row);
	            if (!levelLimit) {
	                rowLevelLimit = false;
	            }
	            else if (typeof levelLimit === 'number') {
	                rowLevelLimit = levelLimit;
	            }
	            else {
	                rowLevelLimit = this.computeRowLevelLimit(row);
	            }
	            if (rowLevelLimit !== false) {
	                this.limitRow(row, rowLevelLimit);
	            }
	        }
	    };
	    // Computes the number of levels a row will accomodate without going outside its bounds.
	    // Assumes the row is "rigid" (maintains a constant height regardless of what is inside).
	    // `row` is the row number.
	    DayGrid.prototype.computeRowLevelLimit = function (row) {
	        var rowEl = this.rowEls.eq(row); // the containing "fake" row div
	        var rowHeight = rowEl.height(); // TODO: cache somehow?
	        var trEls = this.eventRenderer.rowStructs[row].tbodyEl.children();
	        var i;
	        var trEl;
	        var trHeight;
	        function iterInnerHeights(i, childNode) {
	            trHeight = Math.max(trHeight, $(childNode).outerHeight());
	        }
	        // Reveal one level <tr> at a time and stop when we find one out of bounds
	        for (i = 0; i < trEls.length; i++) {
	            trEl = trEls.eq(i).removeClass('fc-limited'); // reset to original state (reveal)
	            // with rowspans>1 and IE8, trEl.outerHeight() would return the height of the largest cell,
	            // so instead, find the tallest inner content element.
	            trHeight = 0;
	            trEl.find('> td > :first-child').each(iterInnerHeights);
	            if (trEl.position().top + trHeight > rowHeight) {
	                return i;
	            }
	        }
	        return false; // should not limit at all
	    };
	    // Limits the given grid row to the maximum number of levels and injects "more" links if necessary.
	    // `row` is the row number.
	    // `levelLimit` is a number for the maximum (inclusive) number of levels allowed.
	    DayGrid.prototype.limitRow = function (row, levelLimit) {
	        var _this = this;
	        var rowStruct = this.eventRenderer.rowStructs[row];
	        var moreNodes = []; // array of "more" <a> links and <td> DOM nodes
	        var col = 0; // col #, left-to-right (not chronologically)
	        var levelSegs; // array of segment objects in the last allowable level, ordered left-to-right
	        var cellMatrix; // a matrix (by level, then column) of all <td> jQuery elements in the row
	        var limitedNodes; // array of temporarily hidden level <tr> and segment <td> DOM nodes
	        var i;
	        var seg;
	        var segsBelow; // array of segment objects below `seg` in the current `col`
	        var totalSegsBelow; // total number of segments below `seg` in any of the columns `seg` occupies
	        var colSegsBelow; // array of segment arrays, below seg, one for each column (offset from segs's first column)
	        var td;
	        var rowspan;
	        var segMoreNodes; // array of "more" <td> cells that will stand-in for the current seg's cell
	        var j;
	        var moreTd;
	        var moreWrap;
	        var moreLink;
	        // Iterates through empty level cells and places "more" links inside if need be
	        var emptyCellsUntil = function (endCol) {
	            while (col < endCol) {
	                segsBelow = _this.getCellSegs(row, col, levelLimit);
	                if (segsBelow.length) {
	                    td = cellMatrix[levelLimit - 1][col];
	                    moreLink = _this.renderMoreLink(row, col, segsBelow);
	                    moreWrap = $('<div>').append(moreLink);
	                    td.append(moreWrap);
	                    moreNodes.push(moreWrap[0]);
	                }
	                col++;
	            }
	        };
	        if (levelLimit && levelLimit < rowStruct.segLevels.length) { // is it actually over the limit?
	            levelSegs = rowStruct.segLevels[levelLimit - 1];
	            cellMatrix = rowStruct.cellMatrix;
	            limitedNodes = rowStruct.tbodyEl.children().slice(levelLimit) // get level <tr> elements past the limit
	                .addClass('fc-limited').get(); // hide elements and get a simple DOM-nodes array
	            // iterate though segments in the last allowable level
	            for (i = 0; i < levelSegs.length; i++) {
	                seg = levelSegs[i];
	                emptyCellsUntil(seg.leftCol); // process empty cells before the segment
	                // determine *all* segments below `seg` that occupy the same columns
	                colSegsBelow = [];
	                totalSegsBelow = 0;
	                while (col <= seg.rightCol) {
	                    segsBelow = this.getCellSegs(row, col, levelLimit);
	                    colSegsBelow.push(segsBelow);
	                    totalSegsBelow += segsBelow.length;
	                    col++;
	                }
	                if (totalSegsBelow) { // do we need to replace this segment with one or many "more" links?
	                    td = cellMatrix[levelLimit - 1][seg.leftCol]; // the segment's parent cell
	                    rowspan = td.attr('rowspan') || 1;
	                    segMoreNodes = [];
	                    // make a replacement <td> for each column the segment occupies. will be one for each colspan
	                    for (j = 0; j < colSegsBelow.length; j++) {
	                        moreTd = $('<td class="fc-more-cell">').attr('rowspan', rowspan);
	                        segsBelow = colSegsBelow[j];
	                        moreLink = this.renderMoreLink(row, seg.leftCol + j, [seg].concat(segsBelow) // count seg as hidden too
	                        );
	                        moreWrap = $('<div>').append(moreLink);
	                        moreTd.append(moreWrap);
	                        segMoreNodes.push(moreTd[0]);
	                        moreNodes.push(moreTd[0]);
	                    }
	                    td.addClass('fc-limited').after($(segMoreNodes)); // hide original <td> and inject replacements
	                    limitedNodes.push(td[0]);
	                }
	            }
	            emptyCellsUntil(this.colCnt); // finish off the level
	            rowStruct.moreEls = $(moreNodes); // for easy undoing later
	            rowStruct.limitedEls = $(limitedNodes); // for easy undoing later
	        }
	    };
	    // Reveals all levels and removes all "more"-related elements for a grid's row.
	    // `row` is a row number.
	    DayGrid.prototype.unlimitRow = function (row) {
	        var rowStruct = this.eventRenderer.rowStructs[row];
	        if (rowStruct.moreEls) {
	            rowStruct.moreEls.remove();
	            rowStruct.moreEls = null;
	        }
	        if (rowStruct.limitedEls) {
	            rowStruct.limitedEls.removeClass('fc-limited');
	            rowStruct.limitedEls = null;
	        }
	    };
	    // Renders an <a> element that represents hidden event element for a cell.
	    // Responsible for attaching click handler as well.
	    DayGrid.prototype.renderMoreLink = function (row, col, hiddenSegs) {
	        var _this = this;
	        var view = this.view;
	        return $('<a class="fc-more">')
	            .text(this.getMoreLinkText(hiddenSegs.length))
	            .on('click', function (ev) {
	            var clickOption = _this.opt('eventLimitClick');
	            var date = _this.getCellDate(row, col);
	            var moreEl = $(ev.currentTarget);
	            var dayEl = _this.getCellEl(row, col);
	            var allSegs = _this.getCellSegs(row, col);
	            // rescope the segments to be within the cell's date
	            var reslicedAllSegs = _this.resliceDaySegs(allSegs, date);
	            var reslicedHiddenSegs = _this.resliceDaySegs(hiddenSegs, date);
	            if (typeof clickOption === 'function') {
	                // the returned value can be an atomic option
	                clickOption = _this.publiclyTrigger('eventLimitClick', {
	                    context: view,
	                    args: [
	                        {
	                            date: date.clone(),
	                            dayEl: dayEl,
	                            moreEl: moreEl,
	                            segs: reslicedAllSegs,
	                            hiddenSegs: reslicedHiddenSegs
	                        },
	                        ev,
	                        view
	                    ]
	                });
	            }
	            if (clickOption === 'popover') {
	                _this.showSegPopover(row, col, moreEl, reslicedAllSegs);
	            }
	            else if (typeof clickOption === 'string') { // a view name
	                view.calendar.zoomTo(date, clickOption);
	            }
	        });
	    };
	    // Reveals the popover that displays all events within a cell
	    DayGrid.prototype.showSegPopover = function (row, col, moreLink, segs) {
	        var _this = this;
	        var view = this.view;
	        var moreWrap = moreLink.parent(); // the <div> wrapper around the <a>
	        var topEl; // the element we want to match the top coordinate of
	        var options;
	        if (this.rowCnt === 1) {
	            topEl = view.el; // will cause the popover to cover any sort of header
	        }
	        else {
	            topEl = this.rowEls.eq(row); // will align with top of row
	        }
	        options = {
	            className: 'fc-more-popover ' + view.calendar.theme.getClass('popover'),
	            content: this.renderSegPopoverContent(row, col, segs),
	            parentEl: view.el,
	            top: topEl.offset().top,
	            autoHide: true,
	            viewportConstrain: this.opt('popoverViewportConstrain'),
	            hide: function () {
	                // kill everything when the popover is hidden
	                // notify events to be removed
	                if (_this.popoverSegs) {
	                    _this.triggerBeforeEventSegsDestroyed(_this.popoverSegs);
	                }
	                _this.segPopover.removeElement();
	                _this.segPopover = null;
	                _this.popoverSegs = null;
	            }
	        };
	        // Determine horizontal coordinate.
	        // We use the moreWrap instead of the <td> to avoid border confusion.
	        if (this.isRTL) {
	            options.right = moreWrap.offset().left + moreWrap.outerWidth() + 1; // +1 to be over cell border
	        }
	        else {
	            options.left = moreWrap.offset().left - 1; // -1 to be over cell border
	        }
	        this.segPopover = new Popover_1.default(options);
	        this.segPopover.show();
	        // the popover doesn't live within the grid's container element, and thus won't get the event
	        // delegated-handlers for free. attach event-related handlers to the popover.
	        this.bindAllSegHandlersToEl(this.segPopover.el);
	        this.triggerAfterEventSegsRendered(segs);
	    };
	    // Builds the inner DOM contents of the segment popover
	    DayGrid.prototype.renderSegPopoverContent = function (row, col, segs) {
	        var view = this.view;
	        var theme = view.calendar.theme;
	        var title = this.getCellDate(row, col).format(this.opt('dayPopoverFormat'));
	        var content = $('<div class="fc-header ' + theme.getClass('popoverHeader') + '">' +
	            '<span class="fc-close ' + theme.getIconClass('close') + '"></span>' +
	            '<span class="fc-title">' +
	            util_1.htmlEscape(title) +
	            '</span>' +
	            '<div class="fc-clear"></div>' +
	            '</div>' +
	            '<div class="fc-body ' + theme.getClass('popoverContent') + '">' +
	            '<div class="fc-event-container"></div>' +
	            '</div>');
	        var segContainer = content.find('.fc-event-container');
	        var i;
	        // render each seg's `el` and only return the visible segs
	        segs = this.eventRenderer.renderFgSegEls(segs, true); // disableResizing=true
	        this.popoverSegs = segs;
	        for (i = 0; i < segs.length; i++) {
	            // because segments in the popover are not part of a grid coordinate system, provide a hint to any
	            // grids that want to do drag-n-drop about which cell it came from
	            this.hitsNeeded();
	            segs[i].hit = this.getCellHit(row, col);
	            this.hitsNotNeeded();
	            segContainer.append(segs[i].el);
	        }
	        return content;
	    };
	    // Given the events within an array of segment objects, reslice them to be in a single day
	    DayGrid.prototype.resliceDaySegs = function (segs, dayDate) {
	        var dayStart = dayDate.clone();
	        var dayEnd = dayStart.clone().add(1, 'days');
	        var dayRange = new UnzonedRange_1.default(dayStart, dayEnd);
	        var newSegs = [];
	        var i;
	        var seg;
	        var slicedRange;
	        for (i = 0; i < segs.length; i++) {
	            seg = segs[i];
	            slicedRange = seg.footprint.componentFootprint.unzonedRange.intersect(dayRange);
	            if (slicedRange) {
	                newSegs.push($.extend({}, seg, {
	                    footprint: new EventFootprint_1.default(new ComponentFootprint_1.default(slicedRange, seg.footprint.componentFootprint.isAllDay), seg.footprint.eventDef, seg.footprint.eventInstance),
	                    isStart: seg.isStart && slicedRange.isStart,
	                    isEnd: seg.isEnd && slicedRange.isEnd
	                }));
	            }
	        }
	        // force an order because eventsToSegs doesn't guarantee one
	        // TODO: research if still needed
	        this.eventRenderer.sortEventSegs(newSegs);
	        return newSegs;
	    };
	    // Generates the text that should be inside a "more" link, given the number of events it represents
	    DayGrid.prototype.getMoreLinkText = function (num) {
	        var opt = this.opt('eventLimitText');
	        if (typeof opt === 'function') {
	            return opt(num);
	        }
	        else {
	            return '+' + num + ' ' + opt;
	        }
	    };
	    // Returns segments within a given cell.
	    // If `startLevel` is specified, returns only events including and below that level. Otherwise returns all segs.
	    DayGrid.prototype.getCellSegs = function (row, col, startLevel) {
	        var segMatrix = this.eventRenderer.rowStructs[row].segMatrix;
	        var level = startLevel || 0;
	        var segs = [];
	        var seg;
	        while (level < segMatrix.length) {
	            seg = segMatrix[level][col];
	            if (seg) {
	                segs.push(seg);
	            }
	            level++;
	        }
	        return segs;
	    };
	    return DayGrid;
	}(InteractiveDateComponent_1.default));
	exports.default = DayGrid;
	DayGrid.prototype.eventRendererClass = DayGridEventRenderer_1.default;
	DayGrid.prototype.businessHourRendererClass = BusinessHourRenderer_1.default;
	DayGrid.prototype.helperRendererClass = DayGridHelperRenderer_1.default;
	DayGrid.prototype.fillRendererClass = DayGridFillRenderer_1.default;
	StandardInteractionsMixin_1.default.mixInto(DayGrid);
	DayTableMixin_1.default.mixInto(DayGrid);
	
	
	/***/ }),
	/* 67 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var $ = __webpack_require__(3);
	var util_1 = __webpack_require__(4);
	var Scroller_1 = __webpack_require__(41);
	var View_1 = __webpack_require__(43);
	var BasicViewDateProfileGenerator_1 = __webpack_require__(68);
	var DayGrid_1 = __webpack_require__(66);
	/* An abstract class for the "basic" views, as well as month view. Renders one or more rows of day cells.
	----------------------------------------------------------------------------------------------------------------------*/
	// It is a manager for a DayGrid subcomponent, which does most of the heavy lifting.
	// It is responsible for managing width/height.
	var BasicView = /** @class */ (function (_super) {
	    tslib_1.__extends(BasicView, _super);
	    function BasicView(calendar, viewSpec) {
	        var _this = _super.call(this, calendar, viewSpec) || this;
	        _this.dayGrid = _this.instantiateDayGrid();
	        _this.dayGrid.isRigid = _this.hasRigidRows();
	        if (_this.opt('weekNumbers')) {
	            if (_this.opt('weekNumbersWithinDays')) {
	                _this.dayGrid.cellWeekNumbersVisible = true;
	                _this.dayGrid.colWeekNumbersVisible = false;
	            }
	            else {
	                _this.dayGrid.cellWeekNumbersVisible = false;
	                _this.dayGrid.colWeekNumbersVisible = true;
	            }
	        }
	        _this.addChild(_this.dayGrid);
	        _this.scroller = new Scroller_1.default({
	            overflowX: 'hidden',
	            overflowY: 'auto'
	        });
	        return _this;
	    }
	    // Generates the DayGrid object this view needs. Draws from this.dayGridClass
	    BasicView.prototype.instantiateDayGrid = function () {
	        // generate a subclass on the fly with BasicView-specific behavior
	        // TODO: cache this subclass
	        var subclass = makeDayGridSubclass(this.dayGridClass);
	        return new subclass(this);
	    };
	    BasicView.prototype.executeDateRender = function (dateProfile) {
	        this.dayGrid.breakOnWeeks = /year|month|week/.test(dateProfile.currentRangeUnit);
	        _super.prototype.executeDateRender.call(this, dateProfile);
	    };
	    BasicView.prototype.renderSkeleton = function () {
	        var dayGridContainerEl;
	        var dayGridEl;
	        this.el.addClass('fc-basic-view').html(this.renderSkeletonHtml());
	        this.scroller.render();
	        dayGridContainerEl = this.scroller.el.addClass('fc-day-grid-container');
	        dayGridEl = $('<div class="fc-day-grid">').appendTo(dayGridContainerEl);
	        this.el.find('.fc-body > tr > td').append(dayGridContainerEl);
	        this.dayGrid.headContainerEl = this.el.find('.fc-head-container');
	        this.dayGrid.setElement(dayGridEl);
	    };
	    BasicView.prototype.unrenderSkeleton = function () {
	        this.dayGrid.removeElement();
	        this.scroller.destroy();
	    };
	    // Builds the HTML skeleton for the view.
	    // The day-grid component will render inside of a container defined by this HTML.
	    BasicView.prototype.renderSkeletonHtml = function () {
	        var theme = this.calendar.theme;
	        return '' +
	            '<table class="' + theme.getClass('tableGrid') + '">' +
	            (this.opt('columnHeader') ?
	                '<thead class="fc-head">' +
	                    '<tr>' +
	                    '<td class="fc-head-container ' + theme.getClass('widgetHeader') + '">&nbsp;</td>' +
	                    '</tr>' +
	                    '</thead>' :
	                '') +
	            '<tbody class="fc-body">' +
	            '<tr>' +
	            '<td class="' + theme.getClass('widgetContent') + '"></td>' +
	            '</tr>' +
	            '</tbody>' +
	            '</table>';
	    };
	    // Generates an HTML attribute string for setting the width of the week number column, if it is known
	    BasicView.prototype.weekNumberStyleAttr = function () {
	        if (this.weekNumberWidth != null) {
	            return 'style="width:' + this.weekNumberWidth + 'px"';
	        }
	        return '';
	    };
	    // Determines whether each row should have a constant height
	    BasicView.prototype.hasRigidRows = function () {
	        var eventLimit = this.opt('eventLimit');
	        return eventLimit && typeof eventLimit !== 'number';
	    };
	    /* Dimensions
	    ------------------------------------------------------------------------------------------------------------------*/
	    // Refreshes the horizontal dimensions of the view
	    BasicView.prototype.updateSize = function (totalHeight, isAuto, isResize) {
	        var eventLimit = this.opt('eventLimit');
	        var headRowEl = this.dayGrid.headContainerEl.find('.fc-row');
	        var scrollerHeight;
	        var scrollbarWidths;
	        // hack to give the view some height prior to dayGrid's columns being rendered
	        // TODO: separate setting height from scroller VS dayGrid.
	        if (!this.dayGrid.rowEls) {
	            if (!isAuto) {
	                scrollerHeight = this.computeScrollerHeight(totalHeight);
	                this.scroller.setHeight(scrollerHeight);
	            }
	            return;
	        }
	        _super.prototype.updateSize.call(this, totalHeight, isAuto, isResize);
	        if (this.dayGrid.colWeekNumbersVisible) {
	            // Make sure all week number cells running down the side have the same width.
	            // Record the width for cells created later.
	            this.weekNumberWidth = util_1.matchCellWidths(this.el.find('.fc-week-number'));
	        }
	        // reset all heights to be natural
	        this.scroller.clear();
	        util_1.uncompensateScroll(headRowEl);
	        this.dayGrid.removeSegPopover(); // kill the "more" popover if displayed
	        // is the event limit a constant level number?
	        if (eventLimit && typeof eventLimit === 'number') {
	            this.dayGrid.limitRows(eventLimit); // limit the levels first so the height can redistribute after
	        }
	        // distribute the height to the rows
	        // (totalHeight is a "recommended" value if isAuto)
	        scrollerHeight = this.computeScrollerHeight(totalHeight);
	        this.setGridHeight(scrollerHeight, isAuto);
	        // is the event limit dynamically calculated?
	        if (eventLimit && typeof eventLimit !== 'number') {
	            this.dayGrid.limitRows(eventLimit); // limit the levels after the grid's row heights have been set
	        }
	        if (!isAuto) { // should we force dimensions of the scroll container?
	            this.scroller.setHeight(scrollerHeight);
	            scrollbarWidths = this.scroller.getScrollbarWidths();
	            if (scrollbarWidths.left || scrollbarWidths.right) { // using scrollbars?
	                util_1.compensateScroll(headRowEl, scrollbarWidths);
	                // doing the scrollbar compensation might have created text overflow which created more height. redo
	                scrollerHeight = this.computeScrollerHeight(totalHeight);
	                this.scroller.setHeight(scrollerHeight);
	            }
	            // guarantees the same scrollbar widths
	            this.scroller.lockOverflow(scrollbarWidths);
	        }
	    };
	    // given a desired total height of the view, returns what the height of the scroller should be
	    BasicView.prototype.computeScrollerHeight = function (totalHeight) {
	        return totalHeight -
	            util_1.subtractInnerElHeight(this.el, this.scroller.el); // everything that's NOT the scroller
	    };
	    // Sets the height of just the DayGrid component in this view
	    BasicView.prototype.setGridHeight = function (height, isAuto) {
	        if (isAuto) {
	            util_1.undistributeHeight(this.dayGrid.rowEls); // let the rows be their natural height with no expanding
	        }
	        else {
	            util_1.distributeHeight(this.dayGrid.rowEls, height, true); // true = compensate for height-hogging rows
	        }
	    };
	    /* Scroll
	    ------------------------------------------------------------------------------------------------------------------*/
	    BasicView.prototype.computeInitialDateScroll = function () {
	        return { top: 0 };
	    };
	    BasicView.prototype.queryDateScroll = function () {
	        return { top: this.scroller.getScrollTop() };
	    };
	    BasicView.prototype.applyDateScroll = function (scroll) {
	        if (scroll.top !== undefined) {
	            this.scroller.setScrollTop(scroll.top);
	        }
	    };
	    return BasicView;
	}(View_1.default));
	exports.default = BasicView;
	BasicView.prototype.dateProfileGeneratorClass = BasicViewDateProfileGenerator_1.default;
	BasicView.prototype.dayGridClass = DayGrid_1.default;
	// customize the rendering behavior of BasicView's dayGrid
	function makeDayGridSubclass(SuperClass) {
	    return /** @class */ (function (_super) {
	        tslib_1.__extends(SubClass, _super);
	        function SubClass() {
	            var _this = _super !== null && _super.apply(this, arguments) || this;
	            _this.colWeekNumbersVisible = false; // display week numbers along the side?
	            return _this;
	        }
	        // Generates the HTML that will go before the day-of week header cells
	        SubClass.prototype.renderHeadIntroHtml = function () {
	            var view = this.view;
	            if (this.colWeekNumbersVisible) {
	                return '' +
	                    '<th class="fc-week-number ' + view.calendar.theme.getClass('widgetHeader') + '" ' + view.weekNumberStyleAttr() + '>' +
	                    '<span>' + // needed for matchCellWidths
	                    util_1.htmlEscape(this.opt('weekNumberTitle')) +
	                    '</span>' +
	                    '</th>';
	            }
	            return '';
	        };
	        // Generates the HTML that will go before content-skeleton cells that display the day/week numbers
	        SubClass.prototype.renderNumberIntroHtml = function (row) {
	            var view = this.view;
	            var weekStart = this.getCellDate(row, 0);
	            if (this.colWeekNumbersVisible) {
	                return '' +
	                    '<td class="fc-week-number" ' + view.weekNumberStyleAttr() + '>' +
	                    view.buildGotoAnchorHtml(// aside from link, important for matchCellWidths
	                    { date: weekStart, type: 'week', forceOff: this.colCnt === 1 }, weekStart.format('w') // inner HTML
	                    ) +
	                    '</td>';
	            }
	            return '';
	        };
	        // Generates the HTML that goes before the day bg cells for each day-row
	        SubClass.prototype.renderBgIntroHtml = function () {
	            var view = this.view;
	            if (this.colWeekNumbersVisible) {
	                return '<td class="fc-week-number ' + view.calendar.theme.getClass('widgetContent') + '" ' +
	                    view.weekNumberStyleAttr() + '></td>';
	            }
	            return '';
	        };
	        // Generates the HTML that goes before every other type of row generated by DayGrid.
	        // Affects helper-skeleton and highlight-skeleton rows.
	        SubClass.prototype.renderIntroHtml = function () {
	            var view = this.view;
	            if (this.colWeekNumbersVisible) {
	                return '<td class="fc-week-number" ' + view.weekNumberStyleAttr() + '></td>';
	            }
	            return '';
	        };
	        SubClass.prototype.getIsNumbersVisible = function () {
	            return DayGrid_1.default.prototype.getIsNumbersVisible.apply(this, arguments) || this.colWeekNumbersVisible;
	        };
	        return SubClass;
	    }(SuperClass));
	}
	
	
	/***/ }),
	/* 68 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var UnzonedRange_1 = __webpack_require__(5);
	var DateProfileGenerator_1 = __webpack_require__(55);
	var BasicViewDateProfileGenerator = /** @class */ (function (_super) {
	    tslib_1.__extends(BasicViewDateProfileGenerator, _super);
	    function BasicViewDateProfileGenerator() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    // Computes the date range that will be rendered.
	    BasicViewDateProfileGenerator.prototype.buildRenderRange = function (currentUnzonedRange, currentRangeUnit, isRangeAllDay) {
	        var renderUnzonedRange = _super.prototype.buildRenderRange.call(this, currentUnzonedRange, currentRangeUnit, isRangeAllDay); // an UnzonedRange
	        var start = this.msToUtcMoment(renderUnzonedRange.startMs, isRangeAllDay);
	        var end = this.msToUtcMoment(renderUnzonedRange.endMs, isRangeAllDay);
	        // year and month views should be aligned with weeks. this is already done for week
	        if (/^(year|month)$/.test(currentRangeUnit)) {
	            start.startOf('week');
	            // make end-of-week if not already
	            if (end.weekday()) {
	                end.add(1, 'week').startOf('week'); // exclusively move backwards
	            }
	        }
	        return new UnzonedRange_1.default(start, end);
	    };
	    return BasicViewDateProfileGenerator;
	}(DateProfileGenerator_1.default));
	exports.default = BasicViewDateProfileGenerator;
	
	
	/***/ }),
	/* 69 */,
	/* 70 */,
	/* 71 */,
	/* 72 */,
	/* 73 */,
	/* 74 */,
	/* 75 */,
	/* 76 */,
	/* 77 */,
	/* 78 */,
	/* 79 */,
	/* 80 */,
	/* 81 */,
	/* 82 */,
	/* 83 */,
	/* 84 */,
	/* 85 */,
	/* 86 */,
	/* 87 */,
	/* 88 */,
	/* 89 */,
	/* 90 */,
	/* 91 */,
	/* 92 */,
	/* 93 */,
	/* 94 */,
	/* 95 */,
	/* 96 */,
	/* 97 */,
	/* 98 */,
	/* 99 */,
	/* 100 */,
	/* 101 */,
	/* 102 */,
	/* 103 */,
	/* 104 */,
	/* 105 */,
	/* 106 */,
	/* 107 */,
	/* 108 */,
	/* 109 */,
	/* 110 */,
	/* 111 */,
	/* 112 */,
	/* 113 */,
	/* 114 */,
	/* 115 */,
	/* 116 */,
	/* 117 */,
	/* 118 */,
	/* 119 */,
	/* 120 */,
	/* 121 */,
	/* 122 */,
	/* 123 */,
	/* 124 */,
	/* 125 */,
	/* 126 */,
	/* 127 */,
	/* 128 */,
	/* 129 */,
	/* 130 */,
	/* 131 */,
	/* 132 */,
	/* 133 */,
	/* 134 */,
	/* 135 */,
	/* 136 */,
	/* 137 */,
	/* 138 */,
	/* 139 */,
	/* 140 */,
	/* 141 */,
	/* 142 */,
	/* 143 */,
	/* 144 */,
	/* 145 */,
	/* 146 */,
	/* 147 */,
	/* 148 */,
	/* 149 */,
	/* 150 */,
	/* 151 */,
	/* 152 */,
	/* 153 */,
	/* 154 */,
	/* 155 */,
	/* 156 */,
	/* 157 */,
	/* 158 */,
	/* 159 */,
	/* 160 */,
	/* 161 */,
	/* 162 */,
	/* 163 */,
	/* 164 */,
	/* 165 */,
	/* 166 */,
	/* 167 */,
	/* 168 */,
	/* 169 */,
	/* 170 */,
	/* 171 */,
	/* 172 */,
	/* 173 */,
	/* 174 */,
	/* 175 */,
	/* 176 */,
	/* 177 */,
	/* 178 */,
	/* 179 */,
	/* 180 */,
	/* 181 */,
	/* 182 */,
	/* 183 */,
	/* 184 */,
	/* 185 */,
	/* 186 */,
	/* 187 */,
	/* 188 */,
	/* 189 */,
	/* 190 */,
	/* 191 */,
	/* 192 */,
	/* 193 */,
	/* 194 */,
	/* 195 */,
	/* 196 */,
	/* 197 */,
	/* 198 */,
	/* 199 */,
	/* 200 */,
	/* 201 */,
	/* 202 */,
	/* 203 */,
	/* 204 */,
	/* 205 */,
	/* 206 */,
	/* 207 */,
	/* 208 */,
	/* 209 */,
	/* 210 */,
	/* 211 */,
	/* 212 */,
	/* 213 */,
	/* 214 */,
	/* 215 */,
	/* 216 */,
	/* 217 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var UnzonedRange_1 = __webpack_require__(5);
	var ComponentFootprint_1 = __webpack_require__(12);
	var EventDefParser_1 = __webpack_require__(36);
	var EventSource_1 = __webpack_require__(6);
	var util_1 = __webpack_require__(19);
	var Constraints = /** @class */ (function () {
	    function Constraints(eventManager, _calendar) {
	        this.eventManager = eventManager;
	        this._calendar = _calendar;
	    }
	    Constraints.prototype.opt = function (name) {
	        return this._calendar.opt(name);
	    };
	    /*
	    determines if eventInstanceGroup is allowed,
	    in relation to other EVENTS and business hours.
	    */
	    Constraints.prototype.isEventInstanceGroupAllowed = function (eventInstanceGroup) {
	        var eventDef = eventInstanceGroup.getEventDef();
	        var eventFootprints = this.eventRangesToEventFootprints(eventInstanceGroup.getAllEventRanges());
	        var i;
	        var peerEventInstances = this.getPeerEventInstances(eventDef);
	        var peerEventRanges = peerEventInstances.map(util_1.eventInstanceToEventRange);
	        var peerEventFootprints = this.eventRangesToEventFootprints(peerEventRanges);
	        var constraintVal = eventDef.getConstraint();
	        var overlapVal = eventDef.getOverlap();
	        var eventAllowFunc = this.opt('eventAllow');
	        for (i = 0; i < eventFootprints.length; i++) {
	            if (!this.isFootprintAllowed(eventFootprints[i].componentFootprint, peerEventFootprints, constraintVal, overlapVal, eventFootprints[i].eventInstance)) {
	                return false;
	            }
	        }
	        if (eventAllowFunc) {
	            for (i = 0; i < eventFootprints.length; i++) {
	                if (eventAllowFunc(eventFootprints[i].componentFootprint.toLegacy(this._calendar), eventFootprints[i].getEventLegacy()) === false) {
	                    return false;
	                }
	            }
	        }
	        return true;
	    };
	    Constraints.prototype.getPeerEventInstances = function (eventDef) {
	        return this.eventManager.getEventInstancesWithoutId(eventDef.id);
	    };
	    Constraints.prototype.isSelectionFootprintAllowed = function (componentFootprint) {
	        var peerEventInstances = this.eventManager.getEventInstances();
	        var peerEventRanges = peerEventInstances.map(util_1.eventInstanceToEventRange);
	        var peerEventFootprints = this.eventRangesToEventFootprints(peerEventRanges);
	        var selectAllowFunc;
	        if (this.isFootprintAllowed(componentFootprint, peerEventFootprints, this.opt('selectConstraint'), this.opt('selectOverlap'))) {
	            selectAllowFunc = this.opt('selectAllow');
	            if (selectAllowFunc) {
	                return selectAllowFunc(componentFootprint.toLegacy(this._calendar)) !== false;
	            }
	            else {
	                return true;
	            }
	        }
	        return false;
	    };
	    Constraints.prototype.isFootprintAllowed = function (componentFootprint, peerEventFootprints, constraintVal, overlapVal, subjectEventInstance // optional
	    ) {
	        var constraintFootprints; // ComponentFootprint[]
	        var overlapEventFootprints; // EventFootprint[]
	        if (constraintVal != null) {
	            constraintFootprints = this.constraintValToFootprints(constraintVal, componentFootprint.isAllDay);
	            if (!this.isFootprintWithinConstraints(componentFootprint, constraintFootprints)) {
	                return false;
	            }
	        }
	        overlapEventFootprints = this.collectOverlapEventFootprints(peerEventFootprints, componentFootprint);
	        if (overlapVal === false) {
	            if (overlapEventFootprints.length) {
	                return false;
	            }
	        }
	        else if (typeof overlapVal === 'function') {
	            if (!isOverlapsAllowedByFunc(overlapEventFootprints, overlapVal, subjectEventInstance)) {
	                return false;
	            }
	        }
	        if (subjectEventInstance) {
	            if (!isOverlapEventInstancesAllowed(overlapEventFootprints, subjectEventInstance)) {
	                return false;
	            }
	        }
	        return true;
	    };
	    // Constraint
	    // ------------------------------------------------------------------------------------------------
	    Constraints.prototype.isFootprintWithinConstraints = function (componentFootprint, constraintFootprints) {
	        var i;
	        for (i = 0; i < constraintFootprints.length; i++) {
	            if (this.footprintContainsFootprint(constraintFootprints[i], componentFootprint)) {
	                return true;
	            }
	        }
	        return false;
	    };
	    Constraints.prototype.constraintValToFootprints = function (constraintVal, isAllDay) {
	        var eventInstances;
	        if (constraintVal === 'businessHours') {
	            return this.buildCurrentBusinessFootprints(isAllDay);
	        }
	        else if (typeof constraintVal === 'object') {
	            eventInstances = this.parseEventDefToInstances(constraintVal); // handles recurring events
	            if (!eventInstances) { // invalid input. fallback to parsing footprint directly
	                return this.parseFootprints(constraintVal);
	            }
	            else {
	                return this.eventInstancesToFootprints(eventInstances);
	            }
	        }
	        else if (constraintVal != null) { // an ID
	            eventInstances = this.eventManager.getEventInstancesWithId(constraintVal);
	            return this.eventInstancesToFootprints(eventInstances);
	        }
	    };
	    // returns ComponentFootprint[]
	    // uses current view's range
	    Constraints.prototype.buildCurrentBusinessFootprints = function (isAllDay) {
	        var view = this._calendar.view;
	        var businessHourGenerator = view.get('businessHourGenerator');
	        var unzonedRange = view.dateProfile.activeUnzonedRange;
	        var eventInstanceGroup = businessHourGenerator.buildEventInstanceGroup(isAllDay, unzonedRange);
	        if (eventInstanceGroup) {
	            return this.eventInstancesToFootprints(eventInstanceGroup.eventInstances);
	        }
	        else {
	            return [];
	        }
	    };
	    // conversion util
	    Constraints.prototype.eventInstancesToFootprints = function (eventInstances) {
	        var eventRanges = eventInstances.map(util_1.eventInstanceToEventRange);
	        var eventFootprints = this.eventRangesToEventFootprints(eventRanges);
	        return eventFootprints.map(util_1.eventFootprintToComponentFootprint);
	    };
	    // Overlap
	    // ------------------------------------------------------------------------------------------------
	    Constraints.prototype.collectOverlapEventFootprints = function (peerEventFootprints, targetFootprint) {
	        var overlapEventFootprints = [];
	        var i;
	        for (i = 0; i < peerEventFootprints.length; i++) {
	            if (this.footprintsIntersect(targetFootprint, peerEventFootprints[i].componentFootprint)) {
	                overlapEventFootprints.push(peerEventFootprints[i]);
	            }
	        }
	        return overlapEventFootprints;
	    };
	    // Conversion: eventDefs -> eventInstances -> eventRanges -> eventFootprints -> componentFootprints
	    // ------------------------------------------------------------------------------------------------
	    // NOTE: this might seem like repetitive code with the Grid class, however, this code is related to
	    // constraints whereas the Grid code is related to rendering. Each approach might want to convert
	    // eventRanges -> eventFootprints in a different way. Regardless, there are opportunities to make
	    // this more DRY.
	    /*
	    Returns false on invalid input.
	    */
	    Constraints.prototype.parseEventDefToInstances = function (eventInput) {
	        var eventManager = this.eventManager;
	        var eventDef = EventDefParser_1.default.parse(eventInput, new EventSource_1.default(this._calendar));
	        if (!eventDef) { // invalid
	            return false;
	        }
	        return eventDef.buildInstances(eventManager.currentPeriod.unzonedRange);
	    };
	    Constraints.prototype.eventRangesToEventFootprints = function (eventRanges) {
	        var i;
	        var eventFootprints = [];
	        for (i = 0; i < eventRanges.length; i++) {
	            eventFootprints.push.apply(// footprints
	            eventFootprints, this.eventRangeToEventFootprints(eventRanges[i]));
	        }
	        return eventFootprints;
	    };
	    Constraints.prototype.eventRangeToEventFootprints = function (eventRange) {
	        return [util_1.eventRangeToEventFootprint(eventRange)];
	    };
	    /*
	    Parses footprints directly.
	    Very similar to EventDateProfile::parse :(
	    */
	    Constraints.prototype.parseFootprints = function (rawInput) {
	        var start;
	        var end;
	        if (rawInput.start) {
	            start = this._calendar.moment(rawInput.start);
	            if (!start.isValid()) {
	                start = null;
	            }
	        }
	        if (rawInput.end) {
	            end = this._calendar.moment(rawInput.end);
	            if (!end.isValid()) {
	                end = null;
	            }
	        }
	        return [
	            new ComponentFootprint_1.default(new UnzonedRange_1.default(start, end), (start && !start.hasTime()) || (end && !end.hasTime()) // isAllDay
	            )
	        ];
	    };
	    // Footprint Utils
	    // ----------------------------------------------------------------------------------------
	    Constraints.prototype.footprintContainsFootprint = function (outerFootprint, innerFootprint) {
	        return outerFootprint.unzonedRange.containsRange(innerFootprint.unzonedRange);
	    };
	    Constraints.prototype.footprintsIntersect = function (footprint0, footprint1) {
	        return footprint0.unzonedRange.intersectsWith(footprint1.unzonedRange);
	    };
	    return Constraints;
	}());
	exports.default = Constraints;
	// optional subjectEventInstance
	function isOverlapsAllowedByFunc(overlapEventFootprints, overlapFunc, subjectEventInstance) {
	    var i;
	    for (i = 0; i < overlapEventFootprints.length; i++) {
	        if (!overlapFunc(overlapEventFootprints[i].eventInstance.toLegacy(), subjectEventInstance ? subjectEventInstance.toLegacy() : null)) {
	            return false;
	        }
	    }
	    return true;
	}
	function isOverlapEventInstancesAllowed(overlapEventFootprints, subjectEventInstance) {
	    var subjectLegacyInstance = subjectEventInstance.toLegacy();
	    var i;
	    var overlapEventInstance;
	    var overlapEventDef;
	    var overlapVal;
	    for (i = 0; i < overlapEventFootprints.length; i++) {
	        overlapEventInstance = overlapEventFootprints[i].eventInstance;
	        overlapEventDef = overlapEventInstance.def;
	        // don't need to pass in calendar, because don't want to consider global eventOverlap property,
	        // because we already considered that earlier in the process.
	        overlapVal = overlapEventDef.getOverlap();
	        if (overlapVal === false) {
	            return false;
	        }
	        else if (typeof overlapVal === 'function') {
	            if (!overlapVal(overlapEventInstance.toLegacy(), subjectLegacyInstance)) {
	                return false;
	            }
	        }
	    }
	    return true;
	}
	
	
	/***/ }),
	/* 218 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var $ = __webpack_require__(3);
	var util_1 = __webpack_require__(19);
	var EventInstanceGroup_1 = __webpack_require__(20);
	var RecurringEventDef_1 = __webpack_require__(54);
	var EventSource_1 = __webpack_require__(6);
	var BUSINESS_HOUR_EVENT_DEFAULTS = {
	    start: '09:00',
	    end: '17:00',
	    dow: [1, 2, 3, 4, 5],
	    rendering: 'inverse-background'
	    // classNames are defined in businessHoursSegClasses
	};
	var BusinessHourGenerator = /** @class */ (function () {
	    function BusinessHourGenerator(rawComplexDef, calendar) {
	        this.rawComplexDef = rawComplexDef;
	        this.calendar = calendar;
	    }
	    BusinessHourGenerator.prototype.buildEventInstanceGroup = function (isAllDay, unzonedRange) {
	        var eventDefs = this.buildEventDefs(isAllDay);
	        var eventInstanceGroup;
	        if (eventDefs.length) {
	            eventInstanceGroup = new EventInstanceGroup_1.default(util_1.eventDefsToEventInstances(eventDefs, unzonedRange));
	            // so that inverse-background rendering can happen even when no eventRanges in view
	            eventInstanceGroup.explicitEventDef = eventDefs[0];
	            return eventInstanceGroup;
	        }
	    };
	    BusinessHourGenerator.prototype.buildEventDefs = function (isAllDay) {
	        var rawComplexDef = this.rawComplexDef;
	        var rawDefs = [];
	        var requireDow = false;
	        var i;
	        var defs = [];
	        if (rawComplexDef === true) {
	            rawDefs = [{}]; // will get BUSINESS_HOUR_EVENT_DEFAULTS verbatim
	        }
	        else if ($.isPlainObject(rawComplexDef)) {
	            rawDefs = [rawComplexDef];
	        }
	        else if ($.isArray(rawComplexDef)) {
	            rawDefs = rawComplexDef;
	            requireDow = true; // every sub-definition NEEDS a day-of-week
	        }
	        for (i = 0; i < rawDefs.length; i++) {
	            if (!requireDow || rawDefs[i].dow) {
	                defs.push(this.buildEventDef(isAllDay, rawDefs[i]));
	            }
	        }
	        return defs;
	    };
	    BusinessHourGenerator.prototype.buildEventDef = function (isAllDay, rawDef) {
	        var fullRawDef = $.extend({}, BUSINESS_HOUR_EVENT_DEFAULTS, rawDef);
	        if (isAllDay) {
	            fullRawDef.start = null;
	            fullRawDef.end = null;
	        }
	        return RecurringEventDef_1.default.parse(fullRawDef, new EventSource_1.default(this.calendar) // dummy source
	        );
	    };
	    return BusinessHourGenerator;
	}());
	exports.default = BusinessHourGenerator;
	
	
	/***/ }),
	/* 219 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var $ = __webpack_require__(3);
	var util_1 = __webpack_require__(4);
	var Promise_1 = __webpack_require__(21);
	var EmitterMixin_1 = __webpack_require__(13);
	var UnzonedRange_1 = __webpack_require__(5);
	var EventInstanceGroup_1 = __webpack_require__(20);
	var EventPeriod = /** @class */ (function () {
	    function EventPeriod(start, end, timezone) {
	        this.pendingCnt = 0;
	        this.freezeDepth = 0;
	        this.stuntedReleaseCnt = 0;
	        this.releaseCnt = 0;
	        this.start = start;
	        this.end = end;
	        this.timezone = timezone;
	        this.unzonedRange = new UnzonedRange_1.default(start.clone().stripZone(), end.clone().stripZone());
	        this.requestsByUid = {};
	        this.eventDefsByUid = {};
	        this.eventDefsById = {};
	        this.eventInstanceGroupsById = {};
	    }
	    EventPeriod.prototype.isWithinRange = function (start, end) {
	        // TODO: use a range util function?
	        return !start.isBefore(this.start) && !end.isAfter(this.end);
	    };
	    // Requesting and Purging
	    // -----------------------------------------------------------------------------------------------------------------
	    EventPeriod.prototype.requestSources = function (sources) {
	        this.freeze();
	        for (var i = 0; i < sources.length; i++) {
	            this.requestSource(sources[i]);
	        }
	        this.thaw();
	    };
	    EventPeriod.prototype.requestSource = function (source) {
	        var _this = this;
	        var request = { source: source, status: 'pending', eventDefs: null };
	        this.requestsByUid[source.uid] = request;
	        this.pendingCnt += 1;
	        source.fetch(this.start, this.end, this.timezone).then(function (eventDefs) {
	            if (request.status !== 'cancelled') {
	                request.status = 'completed';
	                request.eventDefs = eventDefs;
	                _this.addEventDefs(eventDefs);
	                _this.pendingCnt--;
	                _this.tryRelease();
	            }
	        }, function () {
	            if (request.status !== 'cancelled') {
	                request.status = 'failed';
	                _this.pendingCnt--;
	                _this.tryRelease();
	            }
	        });
	    };
	    EventPeriod.prototype.purgeSource = function (source) {
	        var request = this.requestsByUid[source.uid];
	        if (request) {
	            delete this.requestsByUid[source.uid];
	            if (request.status === 'pending') {
	                request.status = 'cancelled';
	                this.pendingCnt--;
	                this.tryRelease();
	            }
	            else if (request.status === 'completed') {
	                request.eventDefs.forEach(this.removeEventDef.bind(this));
	            }
	        }
	    };
	    EventPeriod.prototype.purgeAllSources = function () {
	        var requestsByUid = this.requestsByUid;
	        var uid;
	        var request;
	        var completedCnt = 0;
	        for (uid in requestsByUid) {
	            request = requestsByUid[uid];
	            if (request.status === 'pending') {
	                request.status = 'cancelled';
	            }
	            else if (request.status === 'completed') {
	                completedCnt++;
	            }
	        }
	        this.requestsByUid = {};
	        this.pendingCnt = 0;
	        if (completedCnt) {
	            this.removeAllEventDefs(); // might release
	        }
	    };
	    // Event Definitions
	    // -----------------------------------------------------------------------------------------------------------------
	    EventPeriod.prototype.getEventDefByUid = function (eventDefUid) {
	        return this.eventDefsByUid[eventDefUid];
	    };
	    EventPeriod.prototype.getEventDefsById = function (eventDefId) {
	        var a = this.eventDefsById[eventDefId];
	        if (a) {
	            return a.slice(); // clone
	        }
	        return [];
	    };
	    EventPeriod.prototype.addEventDefs = function (eventDefs) {
	        for (var i = 0; i < eventDefs.length; i++) {
	            this.addEventDef(eventDefs[i]);
	        }
	    };
	    EventPeriod.prototype.addEventDef = function (eventDef) {
	        var eventDefsById = this.eventDefsById;
	        var eventDefId = eventDef.id;
	        var eventDefs = eventDefsById[eventDefId] || (eventDefsById[eventDefId] = []);
	        var eventInstances = eventDef.buildInstances(this.unzonedRange);
	        var i;
	        eventDefs.push(eventDef);
	        this.eventDefsByUid[eventDef.uid] = eventDef;
	        for (i = 0; i < eventInstances.length; i++) {
	            this.addEventInstance(eventInstances[i], eventDefId);
	        }
	    };
	    EventPeriod.prototype.removeEventDefsById = function (eventDefId) {
	        var _this = this;
	        this.getEventDefsById(eventDefId).forEach(function (eventDef) {
	            _this.removeEventDef(eventDef);
	        });
	    };
	    EventPeriod.prototype.removeAllEventDefs = function () {
	        var isEmpty = $.isEmptyObject(this.eventDefsByUid);
	        this.eventDefsByUid = {};
	        this.eventDefsById = {};
	        this.eventInstanceGroupsById = {};
	        if (!isEmpty) {
	            this.tryRelease();
	        }
	    };
	    EventPeriod.prototype.removeEventDef = function (eventDef) {
	        var eventDefsById = this.eventDefsById;
	        var eventDefs = eventDefsById[eventDef.id];
	        delete this.eventDefsByUid[eventDef.uid];
	        if (eventDefs) {
	            util_1.removeExact(eventDefs, eventDef);
	            if (!eventDefs.length) {
	                delete eventDefsById[eventDef.id];
	            }
	            this.removeEventInstancesForDef(eventDef);
	        }
	    };
	    // Event Instances
	    // -----------------------------------------------------------------------------------------------------------------
	    EventPeriod.prototype.getEventInstances = function () {
	        var eventInstanceGroupsById = this.eventInstanceGroupsById;
	        var eventInstances = [];
	        var id;
	        for (id in eventInstanceGroupsById) {
	            eventInstances.push.apply(eventInstances, // append
	            eventInstanceGroupsById[id].eventInstances);
	        }
	        return eventInstances;
	    };
	    EventPeriod.prototype.getEventInstancesWithId = function (eventDefId) {
	        var eventInstanceGroup = this.eventInstanceGroupsById[eventDefId];
	        if (eventInstanceGroup) {
	            return eventInstanceGroup.eventInstances.slice(); // clone
	        }
	        return [];
	    };
	    EventPeriod.prototype.getEventInstancesWithoutId = function (eventDefId) {
	        var eventInstanceGroupsById = this.eventInstanceGroupsById;
	        var matchingInstances = [];
	        var id;
	        for (id in eventInstanceGroupsById) {
	            if (id !== eventDefId) {
	                matchingInstances.push.apply(matchingInstances, // append
	                eventInstanceGroupsById[id].eventInstances);
	            }
	        }
	        return matchingInstances;
	    };
	    EventPeriod.prototype.addEventInstance = function (eventInstance, eventDefId) {
	        var eventInstanceGroupsById = this.eventInstanceGroupsById;
	        var eventInstanceGroup = eventInstanceGroupsById[eventDefId] ||
	            (eventInstanceGroupsById[eventDefId] = new EventInstanceGroup_1.default());
	        eventInstanceGroup.eventInstances.push(eventInstance);
	        this.tryRelease();
	    };
	    EventPeriod.prototype.removeEventInstancesForDef = function (eventDef) {
	        var eventInstanceGroupsById = this.eventInstanceGroupsById;
	        var eventInstanceGroup = eventInstanceGroupsById[eventDef.id];
	        var removeCnt;
	        if (eventInstanceGroup) {
	            removeCnt = util_1.removeMatching(eventInstanceGroup.eventInstances, function (currentEventInstance) {
	                return currentEventInstance.def === eventDef;
	            });
	            if (!eventInstanceGroup.eventInstances.length) {
	                delete eventInstanceGroupsById[eventDef.id];
	            }
	            if (removeCnt) {
	                this.tryRelease();
	            }
	        }
	    };
	    // Releasing and Freezing
	    // -----------------------------------------------------------------------------------------------------------------
	    EventPeriod.prototype.tryRelease = function () {
	        if (!this.pendingCnt) {
	            if (!this.freezeDepth) {
	                this.release();
	            }
	            else {
	                this.stuntedReleaseCnt++;
	            }
	        }
	    };
	    EventPeriod.prototype.release = function () {
	        this.releaseCnt++;
	        this.trigger('release', this.eventInstanceGroupsById);
	    };
	    EventPeriod.prototype.whenReleased = function () {
	        var _this = this;
	        if (this.releaseCnt) {
	            return Promise_1.default.resolve(this.eventInstanceGroupsById);
	        }
	        else {
	            return Promise_1.default.construct(function (onResolve) {
	                _this.one('release', onResolve);
	            });
	        }
	    };
	    EventPeriod.prototype.freeze = function () {
	        if (!(this.freezeDepth++)) {
	            this.stuntedReleaseCnt = 0;
	        }
	    };
	    EventPeriod.prototype.thaw = function () {
	        if (!(--this.freezeDepth) && this.stuntedReleaseCnt && !this.pendingCnt) {
	            this.release();
	        }
	    };
	    return EventPeriod;
	}());
	exports.default = EventPeriod;
	EmitterMixin_1.default.mixInto(EventPeriod);
	
	
	/***/ }),
	/* 220 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var $ = __webpack_require__(3);
	var util_1 = __webpack_require__(4);
	var EventPeriod_1 = __webpack_require__(219);
	var ArrayEventSource_1 = __webpack_require__(56);
	var EventSource_1 = __webpack_require__(6);
	var EventSourceParser_1 = __webpack_require__(38);
	var SingleEventDef_1 = __webpack_require__(9);
	var EventInstanceGroup_1 = __webpack_require__(20);
	var EmitterMixin_1 = __webpack_require__(13);
	var ListenerMixin_1 = __webpack_require__(7);
	var EventManager = /** @class */ (function () {
	    function EventManager(calendar) {
	        this.calendar = calendar;
	        this.stickySource = new ArrayEventSource_1.default(calendar);
	        this.otherSources = [];
	    }
	    EventManager.prototype.requestEvents = function (start, end, timezone, force) {
	        if (force ||
	            !this.currentPeriod ||
	            !this.currentPeriod.isWithinRange(start, end) ||
	            timezone !== this.currentPeriod.timezone) {
	            this.setPeriod(// will change this.currentPeriod
	            new EventPeriod_1.default(start, end, timezone));
	        }
	        return this.currentPeriod.whenReleased();
	    };
	    // Source Adding/Removing
	    // -----------------------------------------------------------------------------------------------------------------
	    EventManager.prototype.addSource = function (eventSource) {
	        this.otherSources.push(eventSource);
	        if (this.currentPeriod) {
	            this.currentPeriod.requestSource(eventSource); // might release
	        }
	    };
	    EventManager.prototype.removeSource = function (doomedSource) {
	        util_1.removeExact(this.otherSources, doomedSource);
	        if (this.currentPeriod) {
	            this.currentPeriod.purgeSource(doomedSource); // might release
	        }
	    };
	    EventManager.prototype.removeAllSources = function () {
	        this.otherSources = [];
	        if (this.currentPeriod) {
	            this.currentPeriod.purgeAllSources(); // might release
	        }
	    };
	    // Source Refetching
	    // -----------------------------------------------------------------------------------------------------------------
	    EventManager.prototype.refetchSource = function (eventSource) {
	        var currentPeriod = this.currentPeriod;
	        if (currentPeriod) {
	            currentPeriod.freeze();
	            currentPeriod.purgeSource(eventSource);
	            currentPeriod.requestSource(eventSource);
	            currentPeriod.thaw();
	        }
	    };
	    EventManager.prototype.refetchAllSources = function () {
	        var currentPeriod = this.currentPeriod;
	        if (currentPeriod) {
	            currentPeriod.freeze();
	            currentPeriod.purgeAllSources();
	            currentPeriod.requestSources(this.getSources());
	            currentPeriod.thaw();
	        }
	    };
	    // Source Querying
	    // -----------------------------------------------------------------------------------------------------------------
	    EventManager.prototype.getSources = function () {
	        return [this.stickySource].concat(this.otherSources);
	    };
	    // like querySources, but accepts multple match criteria (like multiple IDs)
	    EventManager.prototype.multiQuerySources = function (matchInputs) {
	        // coerce into an array
	        if (!matchInputs) {
	            matchInputs = [];
	        }
	        else if (!$.isArray(matchInputs)) {
	            matchInputs = [matchInputs];
	        }
	        var matchingSources = [];
	        var i;
	        // resolve raw inputs to real event source objects
	        for (i = 0; i < matchInputs.length; i++) {
	            matchingSources.push.apply(// append
	            matchingSources, this.querySources(matchInputs[i]));
	        }
	        return matchingSources;
	    };
	    // matchInput can either by a real event source object, an ID, or the function/URL for the source.
	    // returns an array of matching source objects.
	    EventManager.prototype.querySources = function (matchInput) {
	        var sources = this.otherSources;
	        var i;
	        var source;
	        // given a proper event source object
	        for (i = 0; i < sources.length; i++) {
	            source = sources[i];
	            if (source === matchInput) {
	                return [source];
	            }
	        }
	        // an ID match
	        source = this.getSourceById(EventSource_1.default.normalizeId(matchInput));
	        if (source) {
	            return [source];
	        }
	        // parse as an event source
	        matchInput = EventSourceParser_1.default.parse(matchInput, this.calendar);
	        if (matchInput) {
	            return $.grep(sources, function (source) {
	                return isSourcesEquivalent(matchInput, source);
	            });
	        }
	    };
	    /*
	    ID assumed to already be normalized
	    */
	    EventManager.prototype.getSourceById = function (id) {
	        return $.grep(this.otherSources, function (source) {
	            return source.id && source.id === id;
	        })[0];
	    };
	    // Event-Period
	    // -----------------------------------------------------------------------------------------------------------------
	    EventManager.prototype.setPeriod = function (eventPeriod) {
	        if (this.currentPeriod) {
	            this.unbindPeriod(this.currentPeriod);
	            this.currentPeriod = null;
	        }
	        this.currentPeriod = eventPeriod;
	        this.bindPeriod(eventPeriod);
	        eventPeriod.requestSources(this.getSources());
	    };
	    EventManager.prototype.bindPeriod = function (eventPeriod) {
	        this.listenTo(eventPeriod, 'release', function (eventsPayload) {
	            this.trigger('release', eventsPayload);
	        });
	    };
	    EventManager.prototype.unbindPeriod = function (eventPeriod) {
	        this.stopListeningTo(eventPeriod);
	    };
	    // Event Getting/Adding/Removing
	    // -----------------------------------------------------------------------------------------------------------------
	    EventManager.prototype.getEventDefByUid = function (uid) {
	        if (this.currentPeriod) {
	            return this.currentPeriod.getEventDefByUid(uid);
	        }
	    };
	    EventManager.prototype.addEventDef = function (eventDef, isSticky) {
	        if (isSticky) {
	            this.stickySource.addEventDef(eventDef);
	        }
	        if (this.currentPeriod) {
	            this.currentPeriod.addEventDef(eventDef); // might release
	        }
	    };
	    EventManager.prototype.removeEventDefsById = function (eventId) {
	        this.getSources().forEach(function (eventSource) {
	            eventSource.removeEventDefsById(eventId);
	        });
	        if (this.currentPeriod) {
	            this.currentPeriod.removeEventDefsById(eventId); // might release
	        }
	    };
	    EventManager.prototype.removeAllEventDefs = function () {
	        this.getSources().forEach(function (eventSource) {
	            eventSource.removeAllEventDefs();
	        });
	        if (this.currentPeriod) {
	            this.currentPeriod.removeAllEventDefs();
	        }
	    };
	    // Event Mutating
	    // -----------------------------------------------------------------------------------------------------------------
	    /*
	    Returns an undo function.
	    */
	    EventManager.prototype.mutateEventsWithId = function (eventDefId, eventDefMutation) {
	        var currentPeriod = this.currentPeriod;
	        var eventDefs;
	        var undoFuncs = [];
	        if (currentPeriod) {
	            currentPeriod.freeze();
	            eventDefs = currentPeriod.getEventDefsById(eventDefId);
	            eventDefs.forEach(function (eventDef) {
	                // add/remove esp because id might change
	                currentPeriod.removeEventDef(eventDef);
	                undoFuncs.push(eventDefMutation.mutateSingle(eventDef));
	                currentPeriod.addEventDef(eventDef);
	            });
	            currentPeriod.thaw();
	            return function () {
	                currentPeriod.freeze();
	                for (var i = 0; i < eventDefs.length; i++) {
	                    currentPeriod.removeEventDef(eventDefs[i]);
	                    undoFuncs[i]();
	                    currentPeriod.addEventDef(eventDefs[i]);
	                }
	                currentPeriod.thaw();
	            };
	        }
	        return function () { };
	    };
	    /*
	    copies and then mutates
	    */
	    EventManager.prototype.buildMutatedEventInstanceGroup = function (eventDefId, eventDefMutation) {
	        var eventDefs = this.getEventDefsById(eventDefId);
	        var i;
	        var defCopy;
	        var allInstances = [];
	        for (i = 0; i < eventDefs.length; i++) {
	            defCopy = eventDefs[i].clone();
	            if (defCopy instanceof SingleEventDef_1.default) {
	                eventDefMutation.mutateSingle(defCopy);
	                allInstances.push.apply(allInstances, // append
	                defCopy.buildInstances());
	            }
	        }
	        return new EventInstanceGroup_1.default(allInstances);
	    };
	    // Freezing
	    // -----------------------------------------------------------------------------------------------------------------
	    EventManager.prototype.freeze = function () {
	        if (this.currentPeriod) {
	            this.currentPeriod.freeze();
	        }
	    };
	    EventManager.prototype.thaw = function () {
	        if (this.currentPeriod) {
	            this.currentPeriod.thaw();
	        }
	    };
	    // methods that simply forward to EventPeriod
	    EventManager.prototype.getEventDefsById = function (eventDefId) {
	        return this.currentPeriod.getEventDefsById(eventDefId);
	    };
	    EventManager.prototype.getEventInstances = function () {
	        return this.currentPeriod.getEventInstances();
	    };
	    EventManager.prototype.getEventInstancesWithId = function (eventDefId) {
	        return this.currentPeriod.getEventInstancesWithId(eventDefId);
	    };
	    EventManager.prototype.getEventInstancesWithoutId = function (eventDefId) {
	        return this.currentPeriod.getEventInstancesWithoutId(eventDefId);
	    };
	    return EventManager;
	}());
	exports.default = EventManager;
	EmitterMixin_1.default.mixInto(EventManager);
	ListenerMixin_1.default.mixInto(EventManager);
	function isSourcesEquivalent(source0, source1) {
	    return source0.getPrimitive() === source1.getPrimitive();
	}
	
	
	/***/ }),
	/* 221 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var Theme_1 = __webpack_require__(22);
	var StandardTheme = /** @class */ (function (_super) {
	    tslib_1.__extends(StandardTheme, _super);
	    function StandardTheme() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    return StandardTheme;
	}(Theme_1.default));
	exports.default = StandardTheme;
	StandardTheme.prototype.classes = {
	    widget: 'fc-unthemed',
	    widgetHeader: 'fc-widget-header',
	    widgetContent: 'fc-widget-content',
	    buttonGroup: 'fc-button-group',
	    button: 'fc-button',
	    cornerLeft: 'fc-corner-left',
	    cornerRight: 'fc-corner-right',
	    stateDefault: 'fc-state-default',
	    stateActive: 'fc-state-active',
	    stateDisabled: 'fc-state-disabled',
	    stateHover: 'fc-state-hover',
	    stateDown: 'fc-state-down',
	    popoverHeader: 'fc-widget-header',
	    popoverContent: 'fc-widget-content',
	    // day grid
	    headerRow: 'fc-widget-header',
	    dayRow: 'fc-widget-content',
	    // list view
	    listView: 'fc-widget-content'
	};
	StandardTheme.prototype.baseIconClass = 'fc-icon';
	StandardTheme.prototype.iconClasses = {
	    close: 'fc-icon-x',
	    prev: 'fc-icon-left-single-arrow',
	    next: 'fc-icon-right-single-arrow',
	    prevYear: 'fc-icon-left-double-arrow',
	    nextYear: 'fc-icon-right-double-arrow'
	};
	StandardTheme.prototype.iconOverrideOption = 'buttonIcons';
	StandardTheme.prototype.iconOverrideCustomButtonOption = 'icon';
	StandardTheme.prototype.iconOverridePrefix = 'fc-icon-';
	
	
	/***/ }),
	/* 222 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var Theme_1 = __webpack_require__(22);
	var JqueryUiTheme = /** @class */ (function (_super) {
	    tslib_1.__extends(JqueryUiTheme, _super);
	    function JqueryUiTheme() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    return JqueryUiTheme;
	}(Theme_1.default));
	exports.default = JqueryUiTheme;
	JqueryUiTheme.prototype.classes = {
	    widget: 'ui-widget',
	    widgetHeader: 'ui-widget-header',
	    widgetContent: 'ui-widget-content',
	    buttonGroup: 'fc-button-group',
	    button: 'ui-button',
	    cornerLeft: 'ui-corner-left',
	    cornerRight: 'ui-corner-right',
	    stateDefault: 'ui-state-default',
	    stateActive: 'ui-state-active',
	    stateDisabled: 'ui-state-disabled',
	    stateHover: 'ui-state-hover',
	    stateDown: 'ui-state-down',
	    today: 'ui-state-highlight',
	    popoverHeader: 'ui-widget-header',
	    popoverContent: 'ui-widget-content',
	    // day grid
	    headerRow: 'ui-widget-header',
	    dayRow: 'ui-widget-content',
	    // list view
	    listView: 'ui-widget-content'
	};
	JqueryUiTheme.prototype.baseIconClass = 'ui-icon';
	JqueryUiTheme.prototype.iconClasses = {
	    close: 'ui-icon-closethick',
	    prev: 'ui-icon-circle-triangle-w',
	    next: 'ui-icon-circle-triangle-e',
	    prevYear: 'ui-icon-seek-prev',
	    nextYear: 'ui-icon-seek-next'
	};
	JqueryUiTheme.prototype.iconOverrideOption = 'themeButtonIcons';
	JqueryUiTheme.prototype.iconOverrideCustomButtonOption = 'themeIcon';
	JqueryUiTheme.prototype.iconOverridePrefix = 'ui-icon-';
	
	
	/***/ }),
	/* 223 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var $ = __webpack_require__(3);
	var Promise_1 = __webpack_require__(21);
	var EventSource_1 = __webpack_require__(6);
	var FuncEventSource = /** @class */ (function (_super) {
	    tslib_1.__extends(FuncEventSource, _super);
	    function FuncEventSource() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    FuncEventSource.parse = function (rawInput, calendar) {
	        var rawProps;
	        // normalize raw input
	        if ($.isFunction(rawInput.events)) { // extended form
	            rawProps = rawInput;
	        }
	        else if ($.isFunction(rawInput)) { // short form
	            rawProps = { events: rawInput };
	        }
	        if (rawProps) {
	            return EventSource_1.default.parse.call(this, rawProps, calendar);
	        }
	        return false;
	    };
	    FuncEventSource.prototype.fetch = function (start, end, timezone) {
	        var _this = this;
	        this.calendar.pushLoading();
	        return Promise_1.default.construct(function (onResolve) {
	            _this.func.call(_this.calendar, start.clone(), end.clone(), timezone, function (rawEventDefs) {
	                _this.calendar.popLoading();
	                onResolve(_this.parseEventDefs(rawEventDefs));
	            });
	        });
	    };
	    FuncEventSource.prototype.getPrimitive = function () {
	        return this.func;
	    };
	    FuncEventSource.prototype.applyManualStandardProps = function (rawProps) {
	        var superSuccess = _super.prototype.applyManualStandardProps.call(this, rawProps);
	        this.func = rawProps.events;
	        return superSuccess;
	    };
	    return FuncEventSource;
	}(EventSource_1.default));
	exports.default = FuncEventSource;
	FuncEventSource.defineStandardProps({
	    events: false // don't automatically transfer
	});
	
	
	/***/ }),
	/* 224 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var $ = __webpack_require__(3);
	var util_1 = __webpack_require__(4);
	var Promise_1 = __webpack_require__(21);
	var EventSource_1 = __webpack_require__(6);
	var JsonFeedEventSource = /** @class */ (function (_super) {
	    tslib_1.__extends(JsonFeedEventSource, _super);
	    function JsonFeedEventSource() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    JsonFeedEventSource.parse = function (rawInput, calendar) {
	        var rawProps;
	        // normalize raw input
	        if (typeof rawInput.url === 'string') { // extended form
	            rawProps = rawInput;
	        }
	        else if (typeof rawInput === 'string') { // short form
	            rawProps = { url: rawInput };
	        }
	        if (rawProps) {
	            return EventSource_1.default.parse.call(this, rawProps, calendar);
	        }
	        return false;
	    };
	    JsonFeedEventSource.prototype.fetch = function (start, end, timezone) {
	        var _this = this;
	        var ajaxSettings = this.ajaxSettings;
	        var onSuccess = ajaxSettings.success;
	        var onError = ajaxSettings.error;
	        var requestParams = this.buildRequestParams(start, end, timezone);
	        // todo: eventually handle the promise's then,
	        // don't intercept success/error
	        // tho will be a breaking API change
	        this.calendar.pushLoading();
	        return Promise_1.default.construct(function (onResolve, onReject) {
	            $.ajax($.extend({}, // destination
	            JsonFeedEventSource.AJAX_DEFAULTS, ajaxSettings, {
	                url: _this.url,
	                data: requestParams,
	                success: function (rawEventDefs, status, xhr) {
	                    var callbackRes;
	                    _this.calendar.popLoading();
	                    if (rawEventDefs) {
	                        callbackRes = util_1.applyAll(onSuccess, _this, [rawEventDefs, status, xhr]); // redirect `this`
	                        if ($.isArray(callbackRes)) {
	                            rawEventDefs = callbackRes;
	                        }
	                        onResolve(_this.parseEventDefs(rawEventDefs));
	                    }
	                    else {
	                        onReject();
	                    }
	                },
	                error: function (xhr, statusText, errorThrown) {
	                    _this.calendar.popLoading();
	                    util_1.applyAll(onError, _this, [xhr, statusText, errorThrown]); // redirect `this`
	                    onReject();
	                }
	            }));
	        });
	    };
	    JsonFeedEventSource.prototype.buildRequestParams = function (start, end, timezone) {
	        var calendar = this.calendar;
	        var ajaxSettings = this.ajaxSettings;
	        var startParam;
	        var endParam;
	        var timezoneParam;
	        var customRequestParams;
	        var params = {};
	        startParam = this.startParam;
	        if (startParam == null) {
	            startParam = calendar.opt('startParam');
	        }
	        endParam = this.endParam;
	        if (endParam == null) {
	            endParam = calendar.opt('endParam');
	        }
	        timezoneParam = this.timezoneParam;
	        if (timezoneParam == null) {
	            timezoneParam = calendar.opt('timezoneParam');
	        }
	        // retrieve any outbound GET/POST $.ajax data from the options
	        if ($.isFunction(ajaxSettings.data)) {
	            // supplied as a function that returns a key/value object
	            customRequestParams = ajaxSettings.data();
	        }
	        else {
	            // probably supplied as a straight key/value object
	            customRequestParams = ajaxSettings.data || {};
	        }
	        $.extend(params, customRequestParams);
	        params[startParam] = start.format();
	        params[endParam] = end.format();
	        if (timezone && timezone !== 'local') {
	            params[timezoneParam] = timezone;
	        }
	        return params;
	    };
	    JsonFeedEventSource.prototype.getPrimitive = function () {
	        return this.url;
	    };
	    JsonFeedEventSource.prototype.applyMiscProps = function (rawProps) {
	        this.ajaxSettings = rawProps;
	    };
	    JsonFeedEventSource.AJAX_DEFAULTS = {
	        dataType: 'json',
	        cache: false
	    };
	    return JsonFeedEventSource;
	}(EventSource_1.default));
	exports.default = JsonFeedEventSource;
	JsonFeedEventSource.defineStandardProps({
	    // automatically transfer (true)...
	    url: true,
	    startParam: true,
	    endParam: true,
	    timezoneParam: true
	});
	
	
	/***/ }),
	/* 225 */
	/***/ (function(module, exports) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var Iterator = /** @class */ (function () {
	    function Iterator(items) {
	        this.items = items || [];
	    }
	    /* Calls a method on every item passing the arguments through */
	    Iterator.prototype.proxyCall = function (methodName) {
	        var args = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            args[_i - 1] = arguments[_i];
	        }
	        var results = [];
	        this.items.forEach(function (item) {
	            results.push(item[methodName].apply(item, args));
	        });
	        return results;
	    };
	    return Iterator;
	}());
	exports.default = Iterator;
	
	
	/***/ }),
	/* 226 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var $ = __webpack_require__(3);
	var util_1 = __webpack_require__(4);
	var ListenerMixin_1 = __webpack_require__(7);
	/* Creates a clone of an element and lets it track the mouse as it moves
	----------------------------------------------------------------------------------------------------------------------*/
	var MouseFollower = /** @class */ (function () {
	    function MouseFollower(sourceEl, options) {
	        this.isFollowing = false;
	        this.isHidden = false;
	        this.isAnimating = false; // doing the revert animation?
	        this.options = options = options || {};
	        this.sourceEl = sourceEl;
	        this.parentEl = options.parentEl ? $(options.parentEl) : sourceEl.parent(); // default to sourceEl's parent
	    }
	    // Causes the element to start following the mouse
	    MouseFollower.prototype.start = function (ev) {
	        if (!this.isFollowing) {
	            this.isFollowing = true;
	            this.y0 = util_1.getEvY(ev);
	            this.x0 = util_1.getEvX(ev);
	            this.topDelta = 0;
	            this.leftDelta = 0;
	            if (!this.isHidden) {
	                this.updatePosition();
	            }
	            if (util_1.getEvIsTouch(ev)) {
	                this.listenTo($(document), 'touchmove', this.handleMove);
	            }
	            else {
	                this.listenTo($(document), 'mousemove', this.handleMove);
	            }
	        }
	    };
	    // Causes the element to stop following the mouse. If shouldRevert is true, will animate back to original position.
	    // `callback` gets invoked when the animation is complete. If no animation, it is invoked immediately.
	    MouseFollower.prototype.stop = function (shouldRevert, callback) {
	        var _this = this;
	        var revertDuration = this.options.revertDuration;
	        var complete = function () {
	            _this.isAnimating = false;
	            _this.removeElement();
	            _this.top0 = _this.left0 = null; // reset state for future updatePosition calls
	            if (callback) {
	                callback();
	            }
	        };
	        if (this.isFollowing && !this.isAnimating) { // disallow more than one stop animation at a time
	            this.isFollowing = false;
	            this.stopListeningTo($(document));
	            if (shouldRevert && revertDuration && !this.isHidden) { // do a revert animation?
	                this.isAnimating = true;
	                this.el.animate({
	                    top: this.top0,
	                    left: this.left0
	                }, {
	                    duration: revertDuration,
	                    complete: complete
	                });
	            }
	            else {
	                complete();
	            }
	        }
	    };
	    // Gets the tracking element. Create it if necessary
	    MouseFollower.prototype.getEl = function () {
	        var el = this.el;
	        if (!el) {
	            el = this.el = this.sourceEl.clone()
	                .addClass(this.options.additionalClass || '')
	                .css({
	                position: 'absolute',
	                visibility: '',
	                display: this.isHidden ? 'none' : '',
	                margin: 0,
	                right: 'auto',
	                bottom: 'auto',
	                width: this.sourceEl.width(),
	                height: this.sourceEl.height(),
	                opacity: this.options.opacity || '',
	                zIndex: this.options.zIndex
	            });
	            // we don't want long taps or any mouse interaction causing selection/menus.
	            // would use preventSelection(), but that prevents selectstart, causing problems.
	            el.addClass('fc-unselectable');
	            el.appendTo(this.parentEl);
	        }
	        return el;
	    };
	    // Removes the tracking element if it has already been created
	    MouseFollower.prototype.removeElement = function () {
	        if (this.el) {
	            this.el.remove();
	            this.el = null;
	        }
	    };
	    // Update the CSS position of the tracking element
	    MouseFollower.prototype.updatePosition = function () {
	        var sourceOffset;
	        var origin;
	        this.getEl(); // ensure this.el
	        // make sure origin info was computed
	        if (this.top0 == null) {
	            sourceOffset = this.sourceEl.offset();
	            origin = this.el.offsetParent().offset();
	            this.top0 = sourceOffset.top - origin.top;
	            this.left0 = sourceOffset.left - origin.left;
	        }
	        this.el.css({
	            top: this.top0 + this.topDelta,
	            left: this.left0 + this.leftDelta
	        });
	    };
	    // Gets called when the user moves the mouse
	    MouseFollower.prototype.handleMove = function (ev) {
	        this.topDelta = util_1.getEvY(ev) - this.y0;
	        this.leftDelta = util_1.getEvX(ev) - this.x0;
	        if (!this.isHidden) {
	            this.updatePosition();
	        }
	    };
	    // Temporarily makes the tracking element invisible. Can be called before following starts
	    MouseFollower.prototype.hide = function () {
	        if (!this.isHidden) {
	            this.isHidden = true;
	            if (this.el) {
	                this.el.hide();
	            }
	        }
	    };
	    // Show the tracking element after it has been temporarily hidden
	    MouseFollower.prototype.show = function () {
	        if (this.isHidden) {
	            this.isHidden = false;
	            this.updatePosition();
	            this.getEl().show();
	        }
	    };
	    return MouseFollower;
	}());
	exports.default = MouseFollower;
	ListenerMixin_1.default.mixInto(MouseFollower);
	
	
	/***/ }),
	/* 227 */
	/***/ (function(module, exports, __webpack_require__) {
	
	/* A rectangular panel that is absolutely positioned over other content
	------------------------------------------------------------------------------------------------------------------------
	Options:
	  - className (string)
	  - content (HTML string or jQuery element set)
	  - parentEl
	  - top
	  - left
	  - right (the x coord of where the right edge should be. not a "CSS" right)
	  - autoHide (boolean)
	  - show (callback)
	  - hide (callback)
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	var $ = __webpack_require__(3);
	var util_1 = __webpack_require__(4);
	var ListenerMixin_1 = __webpack_require__(7);
	var Popover = /** @class */ (function () {
	    function Popover(options) {
	        this.isHidden = true;
	        this.margin = 10; // the space required between the popover and the edges of the scroll container
	        this.options = options || {};
	    }
	    // Shows the popover on the specified position. Renders it if not already
	    Popover.prototype.show = function () {
	        if (this.isHidden) {
	            if (!this.el) {
	                this.render();
	            }
	            this.el.show();
	            this.position();
	            this.isHidden = false;
	            this.trigger('show');
	        }
	    };
	    // Hides the popover, through CSS, but does not remove it from the DOM
	    Popover.prototype.hide = function () {
	        if (!this.isHidden) {
	            this.el.hide();
	            this.isHidden = true;
	            this.trigger('hide');
	        }
	    };
	    // Creates `this.el` and renders content inside of it
	    Popover.prototype.render = function () {
	        var _this = this;
	        var options = this.options;
	        this.el = $('<div class="fc-popover">')
	            .addClass(options.className || '')
	            .css({
	            // position initially to the top left to avoid creating scrollbars
	            top: 0,
	            left: 0
	        })
	            .append(options.content)
	            .appendTo(options.parentEl);
	        // when a click happens on anything inside with a 'fc-close' className, hide the popover
	        this.el.on('click', '.fc-close', function () {
	            _this.hide();
	        });
	        if (options.autoHide) {
	            this.listenTo($(document), 'mousedown', this.documentMousedown);
	        }
	    };
	    // Triggered when the user clicks *anywhere* in the document, for the autoHide feature
	    Popover.prototype.documentMousedown = function (ev) {
	        // only hide the popover if the click happened outside the popover
	        if (this.el && !$(ev.target).closest(this.el).length) {
	            this.hide();
	        }
	    };
	    // Hides and unregisters any handlers
	    Popover.prototype.removeElement = function () {
	        this.hide();
	        if (this.el) {
	            this.el.remove();
	            this.el = null;
	        }
	        this.stopListeningTo($(document), 'mousedown');
	    };
	    // Positions the popover optimally, using the top/left/right options
	    Popover.prototype.position = function () {
	        var options = this.options;
	        var origin = this.el.offsetParent().offset();
	        var width = this.el.outerWidth();
	        var height = this.el.outerHeight();
	        var windowEl = $(window);
	        var viewportEl = util_1.getScrollParent(this.el);
	        var viewportTop;
	        var viewportLeft;
	        var viewportOffset;
	        var top; // the "position" (not "offset") values for the popover
	        var left; //
	        // compute top and left
	        top = options.top || 0;
	        if (options.left !== undefined) {
	            left = options.left;
	        }
	        else if (options.right !== undefined) {
	            left = options.right - width; // derive the left value from the right value
	        }
	        else {
	            left = 0;
	        }
	        if (viewportEl.is(window) || viewportEl.is(document)) { // normalize getScrollParent's result
	            viewportEl = windowEl;
	            viewportTop = 0; // the window is always at the top left
	            viewportLeft = 0; // (and .offset() won't work if called here)
	        }
	        else {
	            viewportOffset = viewportEl.offset();
	            viewportTop = viewportOffset.top;
	            viewportLeft = viewportOffset.left;
	        }
	        // if the window is scrolled, it causes the visible area to be further down
	        viewportTop += windowEl.scrollTop();
	        viewportLeft += windowEl.scrollLeft();
	        // constrain to the view port. if constrained by two edges, give precedence to top/left
	        if (options.viewportConstrain !== false) {
	            top = Math.min(top, viewportTop + viewportEl.outerHeight() - height - this.margin);
	            top = Math.max(top, viewportTop + this.margin);
	            left = Math.min(left, viewportLeft + viewportEl.outerWidth() - width - this.margin);
	            left = Math.max(left, viewportLeft + this.margin);
	        }
	        this.el.css({
	            top: top - origin.top,
	            left: left - origin.left
	        });
	    };
	    // Triggers a callback. Calls a function in the option hash of the same name.
	    // Arguments beyond the first `name` are forwarded on.
	    // TODO: better code reuse for this. Repeat code
	    Popover.prototype.trigger = function (name) {
	        if (this.options[name]) {
	            this.options[name].apply(this, Array.prototype.slice.call(arguments, 1));
	        }
	    };
	    return Popover;
	}());
	exports.default = Popover;
	ListenerMixin_1.default.mixInto(Popover);
	
	
	/***/ }),
	/* 228 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var EmitterMixin_1 = __webpack_require__(13);
	var TaskQueue = /** @class */ (function () {
	    function TaskQueue() {
	        this.q = [];
	        this.isPaused = false;
	        this.isRunning = false;
	    }
	    TaskQueue.prototype.queue = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        this.q.push.apply(this.q, args); // append
	        this.tryStart();
	    };
	    TaskQueue.prototype.pause = function () {
	        this.isPaused = true;
	    };
	    TaskQueue.prototype.resume = function () {
	        this.isPaused = false;
	        this.tryStart();
	    };
	    TaskQueue.prototype.getIsIdle = function () {
	        return !this.isRunning && !this.isPaused;
	    };
	    TaskQueue.prototype.tryStart = function () {
	        if (!this.isRunning && this.canRunNext()) {
	            this.isRunning = true;
	            this.trigger('start');
	            this.runRemaining();
	        }
	    };
	    TaskQueue.prototype.canRunNext = function () {
	        return !this.isPaused && this.q.length;
	    };
	    TaskQueue.prototype.runRemaining = function () {
	        var _this = this;
	        var task;
	        var res;
	        do {
	            task = this.q.shift(); // always freshly reference q. might have been reassigned.
	            res = this.runTask(task);
	            if (res && res.then) {
	                res.then(function () {
	                    if (_this.canRunNext()) {
	                        _this.runRemaining();
	                    }
	                });
	                return; // prevent marking as stopped
	            }
	        } while (this.canRunNext());
	        this.trigger('stop'); // not really a 'stop' ... more of a 'drained'
	        this.isRunning = false;
	        // if 'stop' handler added more tasks.... TODO: write test for this
	        this.tryStart();
	    };
	    TaskQueue.prototype.runTask = function (task) {
	        return task(); // task *is* the function, but subclasses can change the format of a task
	    };
	    return TaskQueue;
	}());
	exports.default = TaskQueue;
	EmitterMixin_1.default.mixInto(TaskQueue);
	
	
	/***/ }),
	/* 229 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var TaskQueue_1 = __webpack_require__(228);
	var RenderQueue = /** @class */ (function (_super) {
	    tslib_1.__extends(RenderQueue, _super);
	    function RenderQueue(waitsByNamespace) {
	        var _this = _super.call(this) || this;
	        _this.waitsByNamespace = waitsByNamespace || {};
	        return _this;
	    }
	    RenderQueue.prototype.queue = function (taskFunc, namespace, type) {
	        var task = {
	            func: taskFunc,
	            namespace: namespace,
	            type: type
	        };
	        var waitMs;
	        if (namespace) {
	            waitMs = this.waitsByNamespace[namespace];
	        }
	        if (this.waitNamespace) {
	            if (namespace === this.waitNamespace && waitMs != null) {
	                this.delayWait(waitMs);
	            }
	            else {
	                this.clearWait();
	                this.tryStart();
	            }
	        }
	        if (this.compoundTask(task)) { // appended to queue?
	            if (!this.waitNamespace && waitMs != null) {
	                this.startWait(namespace, waitMs);
	            }
	            else {
	                this.tryStart();
	            }
	        }
	    };
	    RenderQueue.prototype.startWait = function (namespace, waitMs) {
	        this.waitNamespace = namespace;
	        this.spawnWait(waitMs);
	    };
	    RenderQueue.prototype.delayWait = function (waitMs) {
	        clearTimeout(this.waitId);
	        this.spawnWait(waitMs);
	    };
	    RenderQueue.prototype.spawnWait = function (waitMs) {
	        var _this = this;
	        this.waitId = setTimeout(function () {
	            _this.waitNamespace = null;
	            _this.tryStart();
	        }, waitMs);
	    };
	    RenderQueue.prototype.clearWait = function () {
	        if (this.waitNamespace) {
	            clearTimeout(this.waitId);
	            this.waitId = null;
	            this.waitNamespace = null;
	        }
	    };
	    RenderQueue.prototype.canRunNext = function () {
	        if (!_super.prototype.canRunNext.call(this)) {
	            return false;
	        }
	        // waiting for a certain namespace to stop receiving tasks?
	        if (this.waitNamespace) {
	            var q = this.q;
	            // if there was a different namespace task in the meantime,
	            // that forces all previously-waiting tasks to suddenly execute.
	            // TODO: find a way to do this in constant time.
	            for (var i = 0; i < q.length; i++) {
	                if (q[i].namespace !== this.waitNamespace) {
	                    return true; // allow execution
	                }
	            }
	            return false;
	        }
	        return true;
	    };
	    RenderQueue.prototype.runTask = function (task) {
	        task.func();
	    };
	    RenderQueue.prototype.compoundTask = function (newTask) {
	        var q = this.q;
	        var shouldAppend = true;
	        var i;
	        var task;
	        if (newTask.namespace && newTask.type === 'destroy') {
	            // remove all init/add/remove ops with same namespace, regardless of order
	            for (i = q.length - 1; i >= 0; i--) {
	                task = q[i];
	                if (task.namespace === newTask.namespace) {
	                    switch (task.type) {
	                        case 'init':
	                            shouldAppend = false;
	                        // the latest destroy is cancelled out by not doing the init
	                        /* falls through */
	                        case 'add':
	                        /* falls through */
	                        case 'remove':
	                            q.splice(i, 1); // remove task
	                    }
	                }
	            }
	        }
	        if (shouldAppend) {
	            q.push(newTask);
	        }
	        return shouldAppend;
	    };
	    return RenderQueue;
	}(TaskQueue_1.default));
	exports.default = RenderQueue;
	
	
	/***/ }),
	/* 230 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var Model_1 = __webpack_require__(51);
	var Component = /** @class */ (function (_super) {
	    tslib_1.__extends(Component, _super);
	    function Component() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    Component.prototype.setElement = function (el) {
	        this.el = el;
	        this.bindGlobalHandlers();
	        this.renderSkeleton();
	        this.set('isInDom', true);
	    };
	    Component.prototype.removeElement = function () {
	        this.unset('isInDom');
	        this.unrenderSkeleton();
	        this.unbindGlobalHandlers();
	        this.el.remove();
	        // NOTE: don't null-out this.el in case the View was destroyed within an API callback.
	        // We don't null-out the View's other jQuery element references upon destroy,
	        //  so we shouldn't kill this.el either.
	    };
	    Component.prototype.bindGlobalHandlers = function () {
	        // subclasses can override
	    };
	    Component.prototype.unbindGlobalHandlers = function () {
	        // subclasses can override
	    };
	    /*
	    NOTE: Can't have a `render` method. Read the deprecation notice in View::executeDateRender
	    */
	    // Renders the basic structure of the view before any content is rendered
	    Component.prototype.renderSkeleton = function () {
	        // subclasses should implement
	    };
	    // Unrenders the basic structure of the view
	    Component.prototype.unrenderSkeleton = function () {
	        // subclasses should implement
	    };
	    return Component;
	}(Model_1.default));
	exports.default = Component;
	
	
	/***/ }),
	/* 231 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var $ = __webpack_require__(3);
	var moment = __webpack_require__(0);
	var util_1 = __webpack_require__(4);
	var moment_ext_1 = __webpack_require__(11);
	var date_formatting_1 = __webpack_require__(49);
	var Component_1 = __webpack_require__(230);
	var util_2 = __webpack_require__(19);
	var DateComponent = /** @class */ (function (_super) {
	    tslib_1.__extends(DateComponent, _super);
	    function DateComponent(_view, _options) {
	        var _this = _super.call(this) || this;
	        _this.isRTL = false; // frequently accessed options
	        _this.hitsNeededDepth = 0; // necessary because multiple callers might need the same hits
	        _this.hasAllDayBusinessHours = false; // TODO: unify with largeUnit and isTimeScale?
	        _this.isDatesRendered = false;
	        // hack to set options prior to the this.opt calls
	        if (_view) {
	            _this['view'] = _view;
	        }
	        if (_options) {
	            _this['options'] = _options;
	        }
	        _this.uid = String(DateComponent.guid++);
	        _this.childrenByUid = {};
	        _this.nextDayThreshold = moment.duration(_this.opt('nextDayThreshold'));
	        _this.isRTL = _this.opt('isRTL');
	        if (_this.fillRendererClass) {
	            _this.fillRenderer = new _this.fillRendererClass(_this);
	        }
	        if (_this.eventRendererClass) { // fillRenderer is optional -----v
	            _this.eventRenderer = new _this.eventRendererClass(_this, _this.fillRenderer);
	        }
	        if (_this.helperRendererClass && _this.eventRenderer) {
	            _this.helperRenderer = new _this.helperRendererClass(_this, _this.eventRenderer);
	        }
	        if (_this.businessHourRendererClass && _this.fillRenderer) {
	            _this.businessHourRenderer = new _this.businessHourRendererClass(_this, _this.fillRenderer);
	        }
	        return _this;
	    }
	    DateComponent.prototype.addChild = function (child) {
	        if (!this.childrenByUid[child.uid]) {
	            this.childrenByUid[child.uid] = child;
	            return true;
	        }
	        return false;
	    };
	    DateComponent.prototype.removeChild = function (child) {
	        if (this.childrenByUid[child.uid]) {
	            delete this.childrenByUid[child.uid];
	            return true;
	        }
	        return false;
	    };
	    // TODO: only do if isInDom?
	    // TODO: make part of Component, along with children/batch-render system?
	    DateComponent.prototype.updateSize = function (totalHeight, isAuto, isResize) {
	        this.callChildren('updateSize', arguments);
	    };
	    // Options
	    // -----------------------------------------------------------------------------------------------------------------
	    DateComponent.prototype.opt = function (name) {
	        return this._getView().opt(name); // default implementation
	    };
	    DateComponent.prototype.publiclyTrigger = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        var calendar = this._getCalendar();
	        return calendar.publiclyTrigger.apply(calendar, args);
	    };
	    DateComponent.prototype.hasPublicHandlers = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        var calendar = this._getCalendar();
	        return calendar.hasPublicHandlers.apply(calendar, args);
	    };
	    // Date
	    // -----------------------------------------------------------------------------------------------------------------
	    DateComponent.prototype.executeDateRender = function (dateProfile) {
	        this.dateProfile = dateProfile; // for rendering
	        this.renderDates(dateProfile);
	        this.isDatesRendered = true;
	        this.callChildren('executeDateRender', arguments);
	    };
	    DateComponent.prototype.executeDateUnrender = function () {
	        this.callChildren('executeDateUnrender', arguments);
	        this.dateProfile = null;
	        this.unrenderDates();
	        this.isDatesRendered = false;
	    };
	    // date-cell content only
	    DateComponent.prototype.renderDates = function (dateProfile) {
	        // subclasses should implement
	    };
	    // date-cell content only
	    DateComponent.prototype.unrenderDates = function () {
	        // subclasses should override
	    };
	    // Now-Indicator
	    // -----------------------------------------------------------------------------------------------------------------
	    // Returns a string unit, like 'second' or 'minute' that defined how often the current time indicator
	    // should be refreshed. If something falsy is returned, no time indicator is rendered at all.
	    DateComponent.prototype.getNowIndicatorUnit = function () {
	        // subclasses should implement
	    };
	    // Renders a current time indicator at the given datetime
	    DateComponent.prototype.renderNowIndicator = function (date) {
	        this.callChildren('renderNowIndicator', arguments);
	    };
	    // Undoes the rendering actions from renderNowIndicator
	    DateComponent.prototype.unrenderNowIndicator = function () {
	        this.callChildren('unrenderNowIndicator', arguments);
	    };
	    // Business Hours
	    // ---------------------------------------------------------------------------------------------------------------
	    DateComponent.prototype.renderBusinessHours = function (businessHourGenerator) {
	        if (this.businessHourRenderer) {
	            this.businessHourRenderer.render(businessHourGenerator);
	        }
	        this.callChildren('renderBusinessHours', arguments);
	    };
	    // Unrenders previously-rendered business-hours
	    DateComponent.prototype.unrenderBusinessHours = function () {
	        this.callChildren('unrenderBusinessHours', arguments);
	        if (this.businessHourRenderer) {
	            this.businessHourRenderer.unrender();
	        }
	    };
	    // Event Displaying
	    // -----------------------------------------------------------------------------------------------------------------
	    DateComponent.prototype.executeEventRender = function (eventsPayload) {
	        if (this.eventRenderer) {
	            this.eventRenderer.rangeUpdated(); // poorly named now
	            this.eventRenderer.render(eventsPayload);
	        }
	        else if (this['renderEvents']) { // legacy
	            this['renderEvents'](convertEventsPayloadToLegacyArray(eventsPayload));
	        }
	        this.callChildren('executeEventRender', arguments);
	    };
	    DateComponent.prototype.executeEventUnrender = function () {
	        this.callChildren('executeEventUnrender', arguments);
	        if (this.eventRenderer) {
	            this.eventRenderer.unrender();
	        }
	        else if (this['destroyEvents']) { // legacy
	            this['destroyEvents']();
	        }
	    };
	    DateComponent.prototype.getBusinessHourSegs = function () {
	        var segs = this.getOwnBusinessHourSegs();
	        this.iterChildren(function (child) {
	            segs.push.apply(segs, child.getBusinessHourSegs());
	        });
	        return segs;
	    };
	    DateComponent.prototype.getOwnBusinessHourSegs = function () {
	        if (this.businessHourRenderer) {
	            return this.businessHourRenderer.getSegs();
	        }
	        return [];
	    };
	    DateComponent.prototype.getEventSegs = function () {
	        var segs = this.getOwnEventSegs();
	        this.iterChildren(function (child) {
	            segs.push.apply(segs, child.getEventSegs());
	        });
	        return segs;
	    };
	    DateComponent.prototype.getOwnEventSegs = function () {
	        if (this.eventRenderer) {
	            return this.eventRenderer.getSegs();
	        }
	        return [];
	    };
	    // Event Rendering Triggering
	    // -----------------------------------------------------------------------------------------------------------------
	    DateComponent.prototype.triggerAfterEventsRendered = function () {
	        this.triggerAfterEventSegsRendered(this.getEventSegs());
	        this.publiclyTrigger('eventAfterAllRender', {
	            context: this,
	            args: [this]
	        });
	    };
	    DateComponent.prototype.triggerAfterEventSegsRendered = function (segs) {
	        var _this = this;
	        // an optimization, because getEventLegacy is expensive
	        if (this.hasPublicHandlers('eventAfterRender')) {
	            segs.forEach(function (seg) {
	                var legacy;
	                if (seg.el) { // necessary?
	                    legacy = seg.footprint.getEventLegacy();
	                    _this.publiclyTrigger('eventAfterRender', {
	                        context: legacy,
	                        args: [legacy, seg.el, _this]
	                    });
	                }
	            });
	        }
	    };
	    DateComponent.prototype.triggerBeforeEventsDestroyed = function () {
	        this.triggerBeforeEventSegsDestroyed(this.getEventSegs());
	    };
	    DateComponent.prototype.triggerBeforeEventSegsDestroyed = function (segs) {
	        var _this = this;
	        if (this.hasPublicHandlers('eventDestroy')) {
	            segs.forEach(function (seg) {
	                var legacy;
	                if (seg.el) { // necessary?
	                    legacy = seg.footprint.getEventLegacy();
	                    _this.publiclyTrigger('eventDestroy', {
	                        context: legacy,
	                        args: [legacy, seg.el, _this]
	                    });
	                }
	            });
	        }
	    };
	    // Event Rendering Utils
	    // -----------------------------------------------------------------------------------------------------------------
	    // Hides all rendered event segments linked to the given event
	    // RECURSIVE with subcomponents
	    DateComponent.prototype.showEventsWithId = function (eventDefId) {
	        this.getEventSegs().forEach(function (seg) {
	            if (seg.footprint.eventDef.id === eventDefId &&
	                seg.el // necessary?
	            ) {
	                seg.el.css('visibility', '');
	            }
	        });
	        this.callChildren('showEventsWithId', arguments);
	    };
	    // Shows all rendered event segments linked to the given event
	    // RECURSIVE with subcomponents
	    DateComponent.prototype.hideEventsWithId = function (eventDefId) {
	        this.getEventSegs().forEach(function (seg) {
	            if (seg.footprint.eventDef.id === eventDefId &&
	                seg.el // necessary?
	            ) {
	                seg.el.css('visibility', 'hidden');
	            }
	        });
	        this.callChildren('hideEventsWithId', arguments);
	    };
	    // Drag-n-Drop Rendering (for both events and external elements)
	    // ---------------------------------------------------------------------------------------------------------------
	    // Renders a visual indication of a event or external-element drag over the given drop zone.
	    // If an external-element, seg will be `null`.
	    // Must return elements used for any mock events.
	    DateComponent.prototype.renderDrag = function (eventFootprints, seg, isTouch) {
	        var renderedHelper = false;
	        this.iterChildren(function (child) {
	            if (child.renderDrag(eventFootprints, seg, isTouch)) {
	                renderedHelper = true;
	            }
	        });
	        return renderedHelper;
	    };
	    // Unrenders a visual indication of an event or external-element being dragged.
	    DateComponent.prototype.unrenderDrag = function () {
	        this.callChildren('unrenderDrag', arguments);
	    };
	    // Event Resizing
	    // ---------------------------------------------------------------------------------------------------------------
	    // Renders a visual indication of an event being resized.
	    DateComponent.prototype.renderEventResize = function (eventFootprints, seg, isTouch) {
	        this.callChildren('renderEventResize', arguments);
	    };
	    // Unrenders a visual indication of an event being resized.
	    DateComponent.prototype.unrenderEventResize = function () {
	        this.callChildren('unrenderEventResize', arguments);
	    };
	    // Selection
	    // ---------------------------------------------------------------------------------------------------------------
	    // Renders a visual indication of the selection
	    // TODO: rename to `renderSelection` after legacy is gone
	    DateComponent.prototype.renderSelectionFootprint = function (componentFootprint) {
	        this.renderHighlight(componentFootprint);
	        this.callChildren('renderSelectionFootprint', arguments);
	    };
	    // Unrenders a visual indication of selection
	    DateComponent.prototype.unrenderSelection = function () {
	        this.unrenderHighlight();
	        this.callChildren('unrenderSelection', arguments);
	    };
	    // Highlight
	    // ---------------------------------------------------------------------------------------------------------------
	    // Renders an emphasis on the given date range. Given a span (unzoned start/end and other misc data)
	    DateComponent.prototype.renderHighlight = function (componentFootprint) {
	        if (this.fillRenderer) {
	            this.fillRenderer.renderFootprint('highlight', componentFootprint, {
	                getClasses: function () {
	                    return ['fc-highlight'];
	                }
	            });
	        }
	        this.callChildren('renderHighlight', arguments);
	    };
	    // Unrenders the emphasis on a date range
	    DateComponent.prototype.unrenderHighlight = function () {
	        if (this.fillRenderer) {
	            this.fillRenderer.unrender('highlight');
	        }
	        this.callChildren('unrenderHighlight', arguments);
	    };
	    // Hit Areas
	    // ---------------------------------------------------------------------------------------------------------------
	    // just because all DateComponents support this interface
	    // doesn't mean they need to have their own internal coord system. they can defer to sub-components.
	    DateComponent.prototype.hitsNeeded = function () {
	        if (!(this.hitsNeededDepth++)) {
	            this.prepareHits();
	        }
	        this.callChildren('hitsNeeded', arguments);
	    };
	    DateComponent.prototype.hitsNotNeeded = function () {
	        if (this.hitsNeededDepth && !(--this.hitsNeededDepth)) {
	            this.releaseHits();
	        }
	        this.callChildren('hitsNotNeeded', arguments);
	    };
	    DateComponent.prototype.prepareHits = function () {
	        // subclasses can implement
	    };
	    DateComponent.prototype.releaseHits = function () {
	        // subclasses can implement
	    };
	    // Given coordinates from the topleft of the document, return data about the date-related area underneath.
	    // Can return an object with arbitrary properties (although top/right/left/bottom are encouraged).
	    // Must have a `grid` property, a reference to this current grid. TODO: avoid this
	    // The returned object will be processed by getHitFootprint and getHitEl.
	    DateComponent.prototype.queryHit = function (leftOffset, topOffset) {
	        var childrenByUid = this.childrenByUid;
	        var uid;
	        var hit;
	        for (uid in childrenByUid) {
	            hit = childrenByUid[uid].queryHit(leftOffset, topOffset);
	            if (hit) {
	                break;
	            }
	        }
	        return hit;
	    };
	    DateComponent.prototype.getSafeHitFootprint = function (hit) {
	        var footprint = this.getHitFootprint(hit);
	        if (!this.dateProfile.activeUnzonedRange.containsRange(footprint.unzonedRange)) {
	            return null;
	        }
	        return footprint;
	    };
	    DateComponent.prototype.getHitFootprint = function (hit) {
	        // what about being abstract!?
	    };
	    // Given position-level information about a date-related area within the grid,
	    // should return a jQuery element that best represents it. passed to dayClick callback.
	    DateComponent.prototype.getHitEl = function (hit) {
	        // what about being abstract!?
	    };
	    /* Converting eventRange -> eventFootprint
	    ------------------------------------------------------------------------------------------------------------------*/
	    DateComponent.prototype.eventRangesToEventFootprints = function (eventRanges) {
	        var eventFootprints = [];
	        var i;
	        for (i = 0; i < eventRanges.length; i++) {
	            eventFootprints.push.apply(// append
	            eventFootprints, this.eventRangeToEventFootprints(eventRanges[i]));
	        }
	        return eventFootprints;
	    };
	    DateComponent.prototype.eventRangeToEventFootprints = function (eventRange) {
	        return [util_2.eventRangeToEventFootprint(eventRange)];
	    };
	    /* Converting componentFootprint/eventFootprint -> segs
	    ------------------------------------------------------------------------------------------------------------------*/
	    DateComponent.prototype.eventFootprintsToSegs = function (eventFootprints) {
	        var segs = [];
	        var i;
	        for (i = 0; i < eventFootprints.length; i++) {
	            segs.push.apply(segs, this.eventFootprintToSegs(eventFootprints[i]));
	        }
	        return segs;
	    };
	    // Given an event's span (unzoned start/end and other misc data), and the event itself,
	    // slices into segments and attaches event-derived properties to them.
	    // eventSpan - { start, end, isStart, isEnd, otherthings... }
	    DateComponent.prototype.eventFootprintToSegs = function (eventFootprint) {
	        var unzonedRange = eventFootprint.componentFootprint.unzonedRange;
	        var segs;
	        var i;
	        var seg;
	        segs = this.componentFootprintToSegs(eventFootprint.componentFootprint);
	        for (i = 0; i < segs.length; i++) {
	            seg = segs[i];
	            if (!unzonedRange.isStart) {
	                seg.isStart = false;
	            }
	            if (!unzonedRange.isEnd) {
	                seg.isEnd = false;
	            }
	            seg.footprint = eventFootprint;
	            // TODO: rename to seg.eventFootprint
	        }
	        return segs;
	    };
	    DateComponent.prototype.componentFootprintToSegs = function (componentFootprint) {
	        return [];
	    };
	    // Utils
	    // ---------------------------------------------------------------------------------------------------------------
	    DateComponent.prototype.callChildren = function (methodName, args) {
	        this.iterChildren(function (child) {
	            child[methodName].apply(child, args);
	        });
	    };
	    DateComponent.prototype.iterChildren = function (func) {
	        var childrenByUid = this.childrenByUid;
	        var uid;
	        for (uid in childrenByUid) {
	            func(childrenByUid[uid]);
	        }
	    };
	    DateComponent.prototype._getCalendar = function () {
	        var t = this;
	        return t.calendar || t.view.calendar;
	    };
	    DateComponent.prototype._getView = function () {
	        return this.view;
	    };
	    DateComponent.prototype._getDateProfile = function () {
	        return this._getView().get('dateProfile');
	    };
	    // Generates HTML for an anchor to another view into the calendar.
	    // Will either generate an <a> tag or a non-clickable <span> tag, depending on enabled settings.
	    // `gotoOptions` can either be a moment input, or an object with the form:
	    // { date, type, forceOff }
	    // `type` is a view-type like "day" or "week". default value is "day".
	    // `attrs` and `innerHtml` are use to generate the rest of the HTML tag.
	    DateComponent.prototype.buildGotoAnchorHtml = function (gotoOptions, attrs, innerHtml) {
	        var date;
	        var type;
	        var forceOff;
	        var finalOptions;
	        if ($.isPlainObject(gotoOptions)) {
	            date = gotoOptions.date;
	            type = gotoOptions.type;
	            forceOff = gotoOptions.forceOff;
	        }
	        else {
	            date = gotoOptions; // a single moment input
	        }
	        date = moment_ext_1.default(date); // if a string, parse it
	        finalOptions = {
	            date: date.format('YYYY-MM-DD'),
	            type: type || 'day'
	        };
	        if (typeof attrs === 'string') {
	            innerHtml = attrs;
	            attrs = null;
	        }
	        attrs = attrs ? ' ' + util_1.attrsToStr(attrs) : ''; // will have a leading space
	        innerHtml = innerHtml || '';
	        if (!forceOff && this.opt('navLinks')) {
	            return '<a' + attrs +
	                ' data-goto="' + util_1.htmlEscape(JSON.stringify(finalOptions)) + '">' +
	                innerHtml +
	                '</a>';
	        }
	        else {
	            return '<span' + attrs + '>' +
	                innerHtml +
	                '</span>';
	        }
	    };
	    DateComponent.prototype.getAllDayHtml = function () {
	        return this.opt('allDayHtml') || util_1.htmlEscape(this.opt('allDayText'));
	    };
	    // Computes HTML classNames for a single-day element
	    DateComponent.prototype.getDayClasses = function (date, noThemeHighlight) {
	        var view = this._getView();
	        var classes = [];
	        var today;
	        if (!this.dateProfile.activeUnzonedRange.containsDate(date)) {
	            classes.push('fc-disabled-day'); // TODO: jQuery UI theme?
	        }
	        else {
	            classes.push('fc-' + util_1.dayIDs[date.day()]);
	            if (view.isDateInOtherMonth(date, this.dateProfile)) { // TODO: use DateComponent subclass somehow
	                classes.push('fc-other-month');
	            }
	            today = view.calendar.getNow();
	            if (date.isSame(today, 'day')) {
	                classes.push('fc-today');
	                if (noThemeHighlight !== true) {
	                    classes.push(view.calendar.theme.getClass('today'));
	                }
	            }
	            else if (date < today) {
	                classes.push('fc-past');
	            }
	            else {
	                classes.push('fc-future');
	            }
	        }
	        return classes;
	    };
	    // Utility for formatting a range. Accepts a range object, formatting string, and optional separator.
	    // Displays all-day ranges naturally, with an inclusive end. Takes the current isRTL into account.
	    // The timezones of the dates within `range` will be respected.
	    DateComponent.prototype.formatRange = function (range, isAllDay, formatStr, separator) {
	        var end = range.end;
	        if (isAllDay) {
	            end = end.clone().subtract(1); // convert to inclusive. last ms of previous day
	        }
	        return date_formatting_1.formatRange(range.start, end, formatStr, separator, this.isRTL);
	    };
	    // Compute the number of the give units in the "current" range.
	    // Will return a floating-point number. Won't round.
	    DateComponent.prototype.currentRangeAs = function (unit) {
	        return this._getDateProfile().currentUnzonedRange.as(unit);
	    };
	    // Returns the date range of the full days the given range visually appears to occupy.
	    // Returns a plain object with start/end, NOT an UnzonedRange!
	    DateComponent.prototype.computeDayRange = function (unzonedRange) {
	        var calendar = this._getCalendar();
	        var startDay = calendar.msToUtcMoment(unzonedRange.startMs, true); // the beginning of the day the range starts
	        var end = calendar.msToUtcMoment(unzonedRange.endMs);
	        var endTimeMS = +end.time(); // # of milliseconds into `endDay`
	        var endDay = end.clone().stripTime(); // the beginning of the day the range exclusively ends
	        // If the end time is actually inclusively part of the next day and is equal to or
	        // beyond the next day threshold, adjust the end to be the exclusive end of `endDay`.
	        // Otherwise, leaving it as inclusive will cause it to exclude `endDay`.
	        if (endTimeMS && endTimeMS >= this.nextDayThreshold) {
	            endDay.add(1, 'days');
	        }
	        // If end is within `startDay` but not past nextDayThreshold, assign the default duration of one day.
	        if (endDay <= startDay) {
	            endDay = startDay.clone().add(1, 'days');
	        }
	        return { start: startDay, end: endDay };
	    };
	    // Does the given range visually appear to occupy more than one day?
	    DateComponent.prototype.isMultiDayRange = function (unzonedRange) {
	        var dayRange = this.computeDayRange(unzonedRange);
	        return dayRange.end.diff(dayRange.start, 'days') > 1;
	    };
	    DateComponent.guid = 0; // TODO: better system for this?
	    return DateComponent;
	}(Component_1.default));
	exports.default = DateComponent;
	// legacy
	function convertEventsPayloadToLegacyArray(eventsPayload) {
	    var eventDefId;
	    var eventInstances;
	    var legacyEvents = [];
	    var i;
	    for (eventDefId in eventsPayload) {
	        eventInstances = eventsPayload[eventDefId].eventInstances;
	        for (i = 0; i < eventInstances.length; i++) {
	            legacyEvents.push(eventInstances[i].toLegacy());
	        }
	    }
	    return legacyEvents;
	}
	
	
	/***/ }),
	/* 232 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var $ = __webpack_require__(3);
	var moment = __webpack_require__(0);
	var util_1 = __webpack_require__(4);
	var options_1 = __webpack_require__(33);
	var Iterator_1 = __webpack_require__(225);
	var GlobalEmitter_1 = __webpack_require__(23);
	var EmitterMixin_1 = __webpack_require__(13);
	var ListenerMixin_1 = __webpack_require__(7);
	var Toolbar_1 = __webpack_require__(257);
	var OptionsManager_1 = __webpack_require__(258);
	var ViewSpecManager_1 = __webpack_require__(259);
	var Constraints_1 = __webpack_require__(217);
	var locale_1 = __webpack_require__(32);
	var moment_ext_1 = __webpack_require__(11);
	var UnzonedRange_1 = __webpack_require__(5);
	var ComponentFootprint_1 = __webpack_require__(12);
	var EventDateProfile_1 = __webpack_require__(16);
	var EventManager_1 = __webpack_require__(220);
	var BusinessHourGenerator_1 = __webpack_require__(218);
	var EventSourceParser_1 = __webpack_require__(38);
	var EventDefParser_1 = __webpack_require__(36);
	var SingleEventDef_1 = __webpack_require__(9);
	var EventDefMutation_1 = __webpack_require__(39);
	var EventSource_1 = __webpack_require__(6);
	var ThemeRegistry_1 = __webpack_require__(57);
	var Calendar = /** @class */ (function () {
	    function Calendar(el, overrides) {
	        this.loadingLevel = 0; // number of simultaneous loading tasks
	        this.ignoreUpdateViewSize = 0;
	        this.freezeContentHeightDepth = 0;
	        // declare the current calendar instance relies on GlobalEmitter. needed for garbage collection.
	        // unneeded() is called in destroy.
	        GlobalEmitter_1.default.needed();
	        this.el = el;
	        this.viewsByType = {};
	        this.optionsManager = new OptionsManager_1.default(this, overrides);
	        this.viewSpecManager = new ViewSpecManager_1.default(this.optionsManager, this);
	        this.initMomentInternals(); // needs to happen after options hash initialized
	        this.initCurrentDate();
	        this.initEventManager();
	        this.constraints = new Constraints_1.default(this.eventManager, this);
	        this.constructed();
	    }
	    Calendar.prototype.constructed = function () {
	        // useful for monkeypatching. used?
	    };
	    Calendar.prototype.getView = function () {
	        return this.view;
	    };
	    Calendar.prototype.publiclyTrigger = function (name, triggerInfo) {
	        var optHandler = this.opt(name);
	        var context;
	        var args;
	        if ($.isPlainObject(triggerInfo)) {
	            context = triggerInfo.context;
	            args = triggerInfo.args;
	        }
	        else if ($.isArray(triggerInfo)) {
	            args = triggerInfo;
	        }
	        if (context == null) {
	            context = this.el[0]; // fallback context
	        }
	        if (!args) {
	            args = [];
	        }
	        this.triggerWith(name, context, args); // Emitter's method
	        if (optHandler) {
	            return optHandler.apply(context, args);
	        }
	    };
	    Calendar.prototype.hasPublicHandlers = function (name) {
	        return this.hasHandlers(name) ||
	            this.opt(name); // handler specified in options
	    };
	    // Options Public API
	    // -----------------------------------------------------------------------------------------------------------------
	    // public getter/setter
	    Calendar.prototype.option = function (name, value) {
	        var newOptionHash;
	        if (typeof name === 'string') {
	            if (value === undefined) { // getter
	                return this.optionsManager.get(name);
	            }
	            else { // setter for individual option
	                newOptionHash = {};
	                newOptionHash[name] = value;
	                this.optionsManager.add(newOptionHash);
	            }
	        }
	        else if (typeof name === 'object') { // compound setter with object input
	            this.optionsManager.add(name);
	        }
	    };
	    // private getter
	    Calendar.prototype.opt = function (name) {
	        return this.optionsManager.get(name);
	    };
	    // View
	    // -----------------------------------------------------------------------------------------------------------------
	    // Given a view name for a custom view or a standard view, creates a ready-to-go View object
	    Calendar.prototype.instantiateView = function (viewType) {
	        var spec = this.viewSpecManager.getViewSpec(viewType);
	        if (!spec) {
	            throw new Error("View type \"" + viewType + "\" is not valid");
	        }
	        return new spec['class'](this, spec);
	    };
	    // Returns a boolean about whether the view is okay to instantiate at some point
	    Calendar.prototype.isValidViewType = function (viewType) {
	        return Boolean(this.viewSpecManager.getViewSpec(viewType));
	    };
	    Calendar.prototype.changeView = function (viewName, dateOrRange) {
	        if (dateOrRange) {
	            if (dateOrRange.start && dateOrRange.end) { // a range
	                this.optionsManager.recordOverrides({
	                    visibleRange: dateOrRange
	                });
	            }
	            else { // a date
	                this.currentDate = this.moment(dateOrRange).stripZone(); // just like gotoDate
	            }
	        }
	        this.renderView(viewName);
	    };
	    // Forces navigation to a view for the given date.
	    // `viewType` can be a specific view name or a generic one like "week" or "day".
	    Calendar.prototype.zoomTo = function (newDate, viewType) {
	        var spec;
	        viewType = viewType || 'day'; // day is default zoom
	        spec = this.viewSpecManager.getViewSpec(viewType) ||
	            this.viewSpecManager.getUnitViewSpec(viewType);
	        this.currentDate = newDate.clone();
	        this.renderView(spec ? spec.type : null);
	    };
	    // Current Date
	    // -----------------------------------------------------------------------------------------------------------------
	    Calendar.prototype.initCurrentDate = function () {
	        var defaultDateInput = this.opt('defaultDate');
	        // compute the initial ambig-timezone date
	        if (defaultDateInput != null) {
	            this.currentDate = this.moment(defaultDateInput).stripZone();
	        }
	        else {
	            this.currentDate = this.getNow(); // getNow already returns unzoned
	        }
	    };
	    Calendar.prototype.prev = function () {
	        var view = this.view;
	        var prevInfo = view.dateProfileGenerator.buildPrev(view.get('dateProfile'));
	        if (prevInfo.isValid) {
	            this.currentDate = prevInfo.date;
	            this.renderView();
	        }
	    };
	    Calendar.prototype.next = function () {
	        var view = this.view;
	        var nextInfo = view.dateProfileGenerator.buildNext(view.get('dateProfile'));
	        if (nextInfo.isValid) {
	            this.currentDate = nextInfo.date;
	            this.renderView();
	        }
	    };
	    Calendar.prototype.prevYear = function () {
	        this.currentDate.add(-1, 'years');
	        this.renderView();
	    };
	    Calendar.prototype.nextYear = function () {
	        this.currentDate.add(1, 'years');
	        this.renderView();
	    };
	    Calendar.prototype.today = function () {
	        this.currentDate = this.getNow(); // should deny like prev/next?
	        this.renderView();
	    };
	    Calendar.prototype.gotoDate = function (zonedDateInput) {
	        this.currentDate = this.moment(zonedDateInput).stripZone();
	        this.renderView();
	    };
	    Calendar.prototype.incrementDate = function (delta) {
	        this.currentDate.add(moment.duration(delta));
	        this.renderView();
	    };
	    // for external API
	    Calendar.prototype.getDate = function () {
	        return this.applyTimezone(this.currentDate); // infuse the calendar's timezone
	    };
	    // Loading Triggering
	    // -----------------------------------------------------------------------------------------------------------------
	    // Should be called when any type of async data fetching begins
	    Calendar.prototype.pushLoading = function () {
	        if (!(this.loadingLevel++)) {
	            this.publiclyTrigger('loading', [true, this.view]);
	        }
	    };
	    // Should be called when any type of async data fetching completes
	    Calendar.prototype.popLoading = function () {
	        if (!(--this.loadingLevel)) {
	            this.publiclyTrigger('loading', [false, this.view]);
	        }
	    };
	    // High-level Rendering
	    // -----------------------------------------------------------------------------------
	    Calendar.prototype.render = function () {
	        if (!this.contentEl) {
	            this.initialRender();
	        }
	        else if (this.elementVisible()) {
	            // mainly for the public API
	            this.calcSize();
	            this.updateViewSize();
	        }
	    };
	    Calendar.prototype.initialRender = function () {
	        var _this = this;
	        var el = this.el;
	        el.addClass('fc');
	        // event delegation for nav links
	        el.on('click.fc', 'a[data-goto]', function (ev) {
	            var anchorEl = $(ev.currentTarget);
	            var gotoOptions = anchorEl.data('goto'); // will automatically parse JSON
	            var date = _this.moment(gotoOptions.date);
	            var viewType = gotoOptions.type;
	            // property like "navLinkDayClick". might be a string or a function
	            var customAction = _this.view.opt('navLink' + util_1.capitaliseFirstLetter(viewType) + 'Click');
	            if (typeof customAction === 'function') {
	                customAction(date, ev);
	            }
	            else {
	                if (typeof customAction === 'string') {
	                    viewType = customAction;
	                }
	                _this.zoomTo(date, viewType);
	            }
	        });
	        // called immediately, and upon option change
	        this.optionsManager.watch('settingTheme', ['?theme', '?themeSystem'], function (opts) {
	            var themeClass = ThemeRegistry_1.getThemeSystemClass(opts.themeSystem || opts.theme);
	            var theme = new themeClass(_this.optionsManager);
	            var widgetClass = theme.getClass('widget');
	            _this.theme = theme;
	            if (widgetClass) {
	                el.addClass(widgetClass);
	            }
	        }, function () {
	            var widgetClass = _this.theme.getClass('widget');
	            _this.theme = null;
	            if (widgetClass) {
	                el.removeClass(widgetClass);
	            }
	        });
	        this.optionsManager.watch('settingBusinessHourGenerator', ['?businessHours'], function (deps) {
	            _this.businessHourGenerator = new BusinessHourGenerator_1.default(deps.businessHours, _this);
	            if (_this.view) {
	                _this.view.set('businessHourGenerator', _this.businessHourGenerator);
	            }
	        }, function () {
	            _this.businessHourGenerator = null;
	        });
	        // called immediately, and upon option change.
	        // HACK: locale often affects isRTL, so we explicitly listen to that too.
	        this.optionsManager.watch('applyingDirClasses', ['?isRTL', '?locale'], function (opts) {
	            el.toggleClass('fc-ltr', !opts.isRTL);
	            el.toggleClass('fc-rtl', opts.isRTL);
	        });
	        this.contentEl = $("<div class='fc-view-container'>").prependTo(el);
	        this.initToolbars();
	        this.renderHeader();
	        this.renderFooter();
	        this.renderView(this.opt('defaultView'));
	        if (this.opt('handleWindowResize')) {
	            $(window).resize(this.windowResizeProxy = util_1.debounce(// prevents rapid calls
	            this.windowResize.bind(this), this.opt('windowResizeDelay')));
	        }
	    };
	    Calendar.prototype.destroy = function () {
	        if (this.view) {
	            this.clearView();
	        }
	        this.toolbarsManager.proxyCall('removeElement');
	        this.contentEl.remove();
	        this.el.removeClass('fc fc-ltr fc-rtl');
	        // removes theme-related root className
	        this.optionsManager.unwatch('settingTheme');
	        this.optionsManager.unwatch('settingBusinessHourGenerator');
	        this.el.off('.fc'); // unbind nav link handlers
	        if (this.windowResizeProxy) {
	            $(window).unbind('resize', this.windowResizeProxy);
	            this.windowResizeProxy = null;
	        }
	        GlobalEmitter_1.default.unneeded();
	    };
	    Calendar.prototype.elementVisible = function () {
	        return this.el.is(':visible');
	    };
	    // Render Queue
	    // -----------------------------------------------------------------------------------------------------------------
	    Calendar.prototype.bindViewHandlers = function (view) {
	        var _this = this;
	        view.watch('titleForCalendar', ['title'], function (deps) {
	            if (view === _this.view) { // hack
	                _this.setToolbarsTitle(deps.title);
	            }
	        });
	        view.watch('dateProfileForCalendar', ['dateProfile'], function (deps) {
	            if (view === _this.view) { // hack
	                _this.currentDate = deps.dateProfile.date; // might have been constrained by view dates
	                _this.updateToolbarButtons(deps.dateProfile);
	            }
	        });
	    };
	    Calendar.prototype.unbindViewHandlers = function (view) {
	        view.unwatch('titleForCalendar');
	        view.unwatch('dateProfileForCalendar');
	    };
	    // View Rendering
	    // -----------------------------------------------------------------------------------
	    // Renders a view because of a date change, view-type change, or for the first time.
	    // If not given a viewType, keep the current view but render different dates.
	    // Accepts an optional scroll state to restore to.
	    Calendar.prototype.renderView = function (viewType) {
	        var oldView = this.view;
	        var newView;
	        this.freezeContentHeight();
	        if (oldView && viewType && oldView.type !== viewType) {
	            this.clearView();
	        }
	        // if viewType changed, or the view was never created, create a fresh view
	        if (!this.view && viewType) {
	            newView = this.view =
	                this.viewsByType[viewType] ||
	                    (this.viewsByType[viewType] = this.instantiateView(viewType));
	            this.bindViewHandlers(newView);
	            newView.startBatchRender(); // so that setElement+setDate rendering are joined
	            newView.setElement($("<div class='fc-view fc-" + viewType + "-view'>").appendTo(this.contentEl));
	            this.toolbarsManager.proxyCall('activateButton', viewType);
	        }
	        if (this.view) {
	            // prevent unnecessary change firing
	            if (this.view.get('businessHourGenerator') !== this.businessHourGenerator) {
	                this.view.set('businessHourGenerator', this.businessHourGenerator);
	            }
	            this.view.setDate(this.currentDate);
	            if (newView) {
	                newView.stopBatchRender();
	            }
	        }
	        this.thawContentHeight();
	    };
	    // Unrenders the current view and reflects this change in the Header.
	    // Unregsiters the `view`, but does not remove from viewByType hash.
	    Calendar.prototype.clearView = function () {
	        var currentView = this.view;
	        this.toolbarsManager.proxyCall('deactivateButton', currentView.type);
	        this.unbindViewHandlers(currentView);
	        currentView.removeElement();
	        currentView.unsetDate(); // so bindViewHandlers doesn't fire with old values next time
	        this.view = null;
	    };
	    // Destroys the view, including the view object. Then, re-instantiates it and renders it.
	    // Maintains the same scroll state.
	    // TODO: maintain any other user-manipulated state.
	    Calendar.prototype.reinitView = function () {
	        var oldView = this.view;
	        var scroll = oldView.queryScroll(); // wouldn't be so complicated if Calendar owned the scroll
	        this.freezeContentHeight();
	        this.clearView();
	        this.calcSize();
	        this.renderView(oldView.type); // needs the type to freshly render
	        this.view.applyScroll(scroll);
	        this.thawContentHeight();
	    };
	    // Resizing
	    // -----------------------------------------------------------------------------------
	    Calendar.prototype.getSuggestedViewHeight = function () {
	        if (this.suggestedViewHeight == null) {
	            this.calcSize();
	        }
	        return this.suggestedViewHeight;
	    };
	    Calendar.prototype.isHeightAuto = function () {
	        return this.opt('contentHeight') === 'auto' || this.opt('height') === 'auto';
	    };
	    Calendar.prototype.updateViewSize = function (isResize) {
	        if (isResize === void 0) { isResize = false; }
	        var view = this.view;
	        var scroll;
	        if (!this.ignoreUpdateViewSize && view) {
	            if (isResize) {
	                this.calcSize();
	                scroll = view.queryScroll();
	            }
	            this.ignoreUpdateViewSize++;
	            view.updateSize(this.getSuggestedViewHeight(), this.isHeightAuto(), isResize);
	            this.ignoreUpdateViewSize--;
	            if (isResize) {
	                view.applyScroll(scroll);
	            }
	            return true; // signal success
	        }
	    };
	    Calendar.prototype.calcSize = function () {
	        if (this.elementVisible()) {
	            this._calcSize();
	        }
	    };
	    Calendar.prototype._calcSize = function () {
	        var contentHeightInput = this.opt('contentHeight');
	        var heightInput = this.opt('height');
	        if (typeof contentHeightInput === 'number') { // exists and not 'auto'
	            this.suggestedViewHeight = contentHeightInput;
	        }
	        else if (typeof contentHeightInput === 'function') { // exists and is a function
	            this.suggestedViewHeight = contentHeightInput();
	        }
	        else if (typeof heightInput === 'number') { // exists and not 'auto'
	            this.suggestedViewHeight = heightInput - this.queryToolbarsHeight();
	        }
	        else if (typeof heightInput === 'function') { // exists and is a function
	            this.suggestedViewHeight = heightInput() - this.queryToolbarsHeight();
	        }
	        else if (heightInput === 'parent') { // set to height of parent element
	            this.suggestedViewHeight = this.el.parent().height() - this.queryToolbarsHeight();
	        }
	        else {
	            this.suggestedViewHeight = Math.round(this.contentEl.width() /
	                Math.max(this.opt('aspectRatio'), .5));
	        }
	    };
	    Calendar.prototype.windowResize = function (ev) {
	        if (
	        // the purpose: so we don't process jqui "resize" events that have bubbled up
	        // cast to any because .target, which is Element, can't be compared to window for some reason.
	        ev.target === window &&
	            this.view &&
	            this.view.isDatesRendered) {
	            if (this.updateViewSize(true)) { // isResize=true, returns true on success
	                this.publiclyTrigger('windowResize', [this.view]);
	            }
	        }
	    };
	    /* Height "Freezing"
	    -----------------------------------------------------------------------------*/
	    Calendar.prototype.freezeContentHeight = function () {
	        if (!(this.freezeContentHeightDepth++)) {
	            this.forceFreezeContentHeight();
	        }
	    };
	    Calendar.prototype.forceFreezeContentHeight = function () {
	        this.contentEl.css({
	            width: '100%',
	            height: this.contentEl.height(),
	            overflow: 'hidden'
	        });
	    };
	    Calendar.prototype.thawContentHeight = function () {
	        this.freezeContentHeightDepth--;
	        // always bring back to natural height
	        this.contentEl.css({
	            width: '',
	            height: '',
	            overflow: ''
	        });
	        // but if there are future thaws, re-freeze
	        if (this.freezeContentHeightDepth) {
	            this.forceFreezeContentHeight();
	        }
	    };
	    // Toolbar
	    // -----------------------------------------------------------------------------------------------------------------
	    Calendar.prototype.initToolbars = function () {
	        this.header = new Toolbar_1.default(this, this.computeHeaderOptions());
	        this.footer = new Toolbar_1.default(this, this.computeFooterOptions());
	        this.toolbarsManager = new Iterator_1.default([this.header, this.footer]);
	    };
	    Calendar.prototype.computeHeaderOptions = function () {
	        return {
	            extraClasses: 'fc-header-toolbar',
	            layout: this.opt('header')
	        };
	    };
	    Calendar.prototype.computeFooterOptions = function () {
	        return {
	            extraClasses: 'fc-footer-toolbar',
	            layout: this.opt('footer')
	        };
	    };
	    // can be called repeatedly and Header will rerender
	    Calendar.prototype.renderHeader = function () {
	        var header = this.header;
	        header.setToolbarOptions(this.computeHeaderOptions());
	        header.render();
	        if (header.el) {
	            this.el.prepend(header.el);
	        }
	    };
	    // can be called repeatedly and Footer will rerender
	    Calendar.prototype.renderFooter = function () {
	        var footer = this.footer;
	        footer.setToolbarOptions(this.computeFooterOptions());
	        footer.render();
	        if (footer.el) {
	            this.el.append(footer.el);
	        }
	    };
	    Calendar.prototype.setToolbarsTitle = function (title) {
	        this.toolbarsManager.proxyCall('updateTitle', title);
	    };
	    Calendar.prototype.updateToolbarButtons = function (dateProfile) {
	        var now = this.getNow();
	        var view = this.view;
	        var todayInfo = view.dateProfileGenerator.build(now);
	        var prevInfo = view.dateProfileGenerator.buildPrev(view.get('dateProfile'));
	        var nextInfo = view.dateProfileGenerator.buildNext(view.get('dateProfile'));
	        this.toolbarsManager.proxyCall((todayInfo.isValid && !dateProfile.currentUnzonedRange.containsDate(now)) ?
	            'enableButton' :
	            'disableButton', 'today');
	        this.toolbarsManager.proxyCall(prevInfo.isValid ?
	            'enableButton' :
	            'disableButton', 'prev');
	        this.toolbarsManager.proxyCall(nextInfo.isValid ?
	            'enableButton' :
	            'disableButton', 'next');
	    };
	    Calendar.prototype.queryToolbarsHeight = function () {
	        return this.toolbarsManager.items.reduce(function (accumulator, toolbar) {
	            var toolbarHeight = toolbar.el ? toolbar.el.outerHeight(true) : 0; // includes margin
	            return accumulator + toolbarHeight;
	        }, 0);
	    };
	    // Selection
	    // -----------------------------------------------------------------------------------------------------------------
	    // this public method receives start/end dates in any format, with any timezone
	    Calendar.prototype.select = function (zonedStartInput, zonedEndInput) {
	        this.view.select(this.buildSelectFootprint.apply(this, arguments));
	    };
	    Calendar.prototype.unselect = function () {
	        if (this.view) {
	            this.view.unselect();
	        }
	    };
	    // Given arguments to the select method in the API, returns a span (unzoned start/end and other info)
	    Calendar.prototype.buildSelectFootprint = function (zonedStartInput, zonedEndInput) {
	        var start = this.moment(zonedStartInput).stripZone();
	        var end;
	        if (zonedEndInput) {
	            end = this.moment(zonedEndInput).stripZone();
	        }
	        else if (start.hasTime()) {
	            end = start.clone().add(this.defaultTimedEventDuration);
	        }
	        else {
	            end = start.clone().add(this.defaultAllDayEventDuration);
	        }
	        return new ComponentFootprint_1.default(new UnzonedRange_1.default(start, end), !start.hasTime());
	    };
	    // Date Utils
	    // -----------------------------------------------------------------------------------------------------------------
	    Calendar.prototype.initMomentInternals = function () {
	        var _this = this;
	        this.defaultAllDayEventDuration = moment.duration(this.opt('defaultAllDayEventDuration'));
	        this.defaultTimedEventDuration = moment.duration(this.opt('defaultTimedEventDuration'));
	        // Called immediately, and when any of the options change.
	        // Happens before any internal objects rebuild or rerender, because this is very core.
	        this.optionsManager.watch('buildingMomentLocale', [
	            '?locale', '?monthNames', '?monthNamesShort', '?dayNames', '?dayNamesShort',
	            '?firstDay', '?weekNumberCalculation'
	        ], function (opts) {
	            var weekNumberCalculation = opts.weekNumberCalculation;
	            var firstDay = opts.firstDay;
	            var _week;
	            // normalize
	            if (weekNumberCalculation === 'iso') {
	                weekNumberCalculation = 'ISO'; // normalize
	            }
	            var localeData = Object.create(// make a cheap copy
	            locale_1.getMomentLocaleData(opts.locale) // will fall back to en
	            );
	            if (opts.monthNames) {
	                localeData._months = opts.monthNames;
	            }
	            if (opts.monthNamesShort) {
	                localeData._monthsShort = opts.monthNamesShort;
	            }
	            if (opts.dayNames) {
	                localeData._weekdays = opts.dayNames;
	            }
	            if (opts.dayNamesShort) {
	                localeData._weekdaysShort = opts.dayNamesShort;
	            }
	            if (firstDay == null && weekNumberCalculation === 'ISO') {
	                firstDay = 1;
	            }
	            if (firstDay != null) {
	                _week = Object.create(localeData._week); // _week: { dow: # }
	                _week.dow = firstDay;
	                localeData._week = _week;
	            }
	            if ( // whitelist certain kinds of input
	            weekNumberCalculation === 'ISO' ||
	                weekNumberCalculation === 'local' ||
	                typeof weekNumberCalculation === 'function') {
	                localeData._fullCalendar_weekCalc = weekNumberCalculation; // moment-ext will know what to do with it
	            }
	            _this.localeData = localeData;
	            // If the internal current date object already exists, move to new locale.
	            // We do NOT need to do this technique for event dates, because this happens when converting to "segments".
	            if (_this.currentDate) {
	                _this.localizeMoment(_this.currentDate); // sets to localeData
	            }
	        });
	    };
	    // Builds a moment using the settings of the current calendar: timezone and locale.
	    // Accepts anything the vanilla moment() constructor accepts.
	    Calendar.prototype.moment = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        var mom;
	        if (this.opt('timezone') === 'local') {
	            mom = moment_ext_1.default.apply(null, args);
	            // Force the moment to be local, because momentExt doesn't guarantee it.
	            if (mom.hasTime()) { // don't give ambiguously-timed moments a local zone
	                mom.local();
	            }
	        }
	        else if (this.opt('timezone') === 'UTC') {
	            mom = moment_ext_1.default.utc.apply(null, args); // process as UTC
	        }
	        else {
	            mom = moment_ext_1.default.parseZone.apply(null, args); // let the input decide the zone
	        }
	        this.localizeMoment(mom); // TODO
	        return mom;
	    };
	    Calendar.prototype.msToMoment = function (ms, forceAllDay) {
	        var mom = moment_ext_1.default.utc(ms); // TODO: optimize by using Date.UTC
	        if (forceAllDay) {
	            mom.stripTime();
	        }
	        else {
	            mom = this.applyTimezone(mom); // may or may not apply locale
	        }
	        this.localizeMoment(mom);
	        return mom;
	    };
	    Calendar.prototype.msToUtcMoment = function (ms, forceAllDay) {
	        var mom = moment_ext_1.default.utc(ms); // TODO: optimize by using Date.UTC
	        if (forceAllDay) {
	            mom.stripTime();
	        }
	        this.localizeMoment(mom);
	        return mom;
	    };
	    // Updates the given moment's locale settings to the current calendar locale settings.
	    Calendar.prototype.localizeMoment = function (mom) {
	        mom._locale = this.localeData;
	    };
	    // Returns a boolean about whether or not the calendar knows how to calculate
	    // the timezone offset of arbitrary dates in the current timezone.
	    Calendar.prototype.getIsAmbigTimezone = function () {
	        return this.opt('timezone') !== 'local' && this.opt('timezone') !== 'UTC';
	    };
	    // Returns a copy of the given date in the current timezone. Has no effect on dates without times.
	    Calendar.prototype.applyTimezone = function (date) {
	        if (!date.hasTime()) {
	            return date.clone();
	        }
	        var zonedDate = this.moment(date.toArray());
	        var timeAdjust = date.time().asMilliseconds() - zonedDate.time().asMilliseconds();
	        var adjustedZonedDate;
	        // Safari sometimes has problems with this coersion when near DST. Adjust if necessary. (bug #2396)
	        if (timeAdjust) { // is the time result different than expected?
	            adjustedZonedDate = zonedDate.clone().add(timeAdjust); // add milliseconds
	            if (date.time().asMilliseconds() - adjustedZonedDate.time().asMilliseconds() === 0) { // does it match perfectly now?
	                zonedDate = adjustedZonedDate;
	            }
	        }
	        return zonedDate;
	    };
	    /*
	    Assumes the footprint is non-open-ended.
	    */
	    Calendar.prototype.footprintToDateProfile = function (componentFootprint, ignoreEnd) {
	        if (ignoreEnd === void 0) { ignoreEnd = false; }
	        var start = moment_ext_1.default.utc(componentFootprint.unzonedRange.startMs);
	        var end;
	        if (!ignoreEnd) {
	            end = moment_ext_1.default.utc(componentFootprint.unzonedRange.endMs);
	        }
	        if (componentFootprint.isAllDay) {
	            start.stripTime();
	            if (end) {
	                end.stripTime();
	            }
	        }
	        else {
	            start = this.applyTimezone(start);
	            if (end) {
	                end = this.applyTimezone(end);
	            }
	        }
	        this.localizeMoment(start);
	        if (end) {
	            this.localizeMoment(end);
	        }
	        return new EventDateProfile_1.default(start, end, this);
	    };
	    // Returns a moment for the current date, as defined by the client's computer or from the `now` option.
	    // Will return an moment with an ambiguous timezone.
	    Calendar.prototype.getNow = function () {
	        var now = this.opt('now');
	        if (typeof now === 'function') {
	            now = now();
	        }
	        return this.moment(now).stripZone();
	    };
	    // Produces a human-readable string for the given duration.
	    // Side-effect: changes the locale of the given duration.
	    Calendar.prototype.humanizeDuration = function (duration) {
	        return duration.locale(this.opt('locale')).humanize();
	    };
	    // will return `null` if invalid range
	    Calendar.prototype.parseUnzonedRange = function (rangeInput) {
	        var start = null;
	        var end = null;
	        if (rangeInput.start) {
	            start = this.moment(rangeInput.start).stripZone();
	        }
	        if (rangeInput.end) {
	            end = this.moment(rangeInput.end).stripZone();
	        }
	        if (!start && !end) {
	            return null;
	        }
	        if (start && end && end.isBefore(start)) {
	            return null;
	        }
	        return new UnzonedRange_1.default(start, end);
	    };
	    // Event-Date Utilities
	    // -----------------------------------------------------------------------------------------------------------------
	    Calendar.prototype.initEventManager = function () {
	        var _this = this;
	        var eventManager = new EventManager_1.default(this);
	        var rawSources = this.opt('eventSources') || [];
	        var singleRawSource = this.opt('events');
	        this.eventManager = eventManager;
	        if (singleRawSource) {
	            rawSources.unshift(singleRawSource);
	        }
	        eventManager.on('release', function (eventsPayload) {
	            _this.trigger('eventsReset', eventsPayload);
	        });
	        eventManager.freeze();
	        rawSources.forEach(function (rawSource) {
	            var source = EventSourceParser_1.default.parse(rawSource, _this);
	            if (source) {
	                eventManager.addSource(source);
	            }
	        });
	        eventManager.thaw();
	    };
	    Calendar.prototype.requestEvents = function (start, end) {
	        return this.eventManager.requestEvents(start, end, this.opt('timezone'), !this.opt('lazyFetching'));
	    };
	    // Get an event's normalized end date. If not present, calculate it from the defaults.
	    Calendar.prototype.getEventEnd = function (event) {
	        if (event.end) {
	            return event.end.clone();
	        }
	        else {
	            return this.getDefaultEventEnd(event.allDay, event.start);
	        }
	    };
	    // Given an event's allDay status and start date, return what its fallback end date should be.
	    // TODO: rename to computeDefaultEventEnd
	    Calendar.prototype.getDefaultEventEnd = function (allDay, zonedStart) {
	        var end = zonedStart.clone();
	        if (allDay) {
	            end.stripTime().add(this.defaultAllDayEventDuration);
	        }
	        else {
	            end.add(this.defaultTimedEventDuration);
	        }
	        if (this.getIsAmbigTimezone()) {
	            end.stripZone(); // we don't know what the tzo should be
	        }
	        return end;
	    };
	    // Public Events API
	    // -----------------------------------------------------------------------------------------------------------------
	    Calendar.prototype.rerenderEvents = function () {
	        this.view.flash('displayingEvents');
	    };
	    Calendar.prototype.refetchEvents = function () {
	        this.eventManager.refetchAllSources();
	    };
	    Calendar.prototype.renderEvents = function (eventInputs, isSticky) {
	        this.eventManager.freeze();
	        for (var i = 0; i < eventInputs.length; i++) {
	            this.renderEvent(eventInputs[i], isSticky);
	        }
	        this.eventManager.thaw();
	    };
	    Calendar.prototype.renderEvent = function (eventInput, isSticky) {
	        if (isSticky === void 0) { isSticky = false; }
	        var eventManager = this.eventManager;
	        var eventDef = EventDefParser_1.default.parse(eventInput, eventInput.source || eventManager.stickySource);
	        if (eventDef) {
	            eventManager.addEventDef(eventDef, isSticky);
	        }
	    };
	    // legacyQuery operates on legacy event instance objects
	    Calendar.prototype.removeEvents = function (legacyQuery) {
	        var eventManager = this.eventManager;
	        var legacyInstances = [];
	        var idMap = {};
	        var eventDef;
	        var i;
	        if (legacyQuery == null) { // shortcut for removing all
	            eventManager.removeAllEventDefs(); // persist=true
	        }
	        else {
	            eventManager.getEventInstances().forEach(function (eventInstance) {
	                legacyInstances.push(eventInstance.toLegacy());
	            });
	            legacyInstances = filterLegacyEventInstances(legacyInstances, legacyQuery);
	            // compute unique IDs
	            for (i = 0; i < legacyInstances.length; i++) {
	                eventDef = this.eventManager.getEventDefByUid(legacyInstances[i]._id);
	                idMap[eventDef.id] = true;
	            }
	            eventManager.freeze();
	            for (i in idMap) { // reuse `i` as an "id"
	                eventManager.removeEventDefsById(i); // persist=true
	            }
	            eventManager.thaw();
	        }
	    };
	    // legacyQuery operates on legacy event instance objects
	    Calendar.prototype.clientEvents = function (legacyQuery) {
	        var legacyEventInstances = [];
	        this.eventManager.getEventInstances().forEach(function (eventInstance) {
	            legacyEventInstances.push(eventInstance.toLegacy());
	        });
	        return filterLegacyEventInstances(legacyEventInstances, legacyQuery);
	    };
	    Calendar.prototype.updateEvents = function (eventPropsArray) {
	        this.eventManager.freeze();
	        for (var i = 0; i < eventPropsArray.length; i++) {
	            this.updateEvent(eventPropsArray[i]);
	        }
	        this.eventManager.thaw();
	    };
	    Calendar.prototype.updateEvent = function (eventProps) {
	        var eventDef = this.eventManager.getEventDefByUid(eventProps._id);
	        var eventInstance;
	        var eventDefMutation;
	        if (eventDef instanceof SingleEventDef_1.default) {
	            eventInstance = eventDef.buildInstance();
	            eventDefMutation = EventDefMutation_1.default.createFromRawProps(eventInstance, eventProps, // raw props
	            null // largeUnit -- who uses it?
	            );
	            this.eventManager.mutateEventsWithId(eventDef.id, eventDefMutation); // will release
	        }
	    };
	    // Public Event Sources API
	    // ------------------------------------------------------------------------------------
	    Calendar.prototype.getEventSources = function () {
	        return this.eventManager.otherSources.slice(); // clone
	    };
	    Calendar.prototype.getEventSourceById = function (id) {
	        return this.eventManager.getSourceById(EventSource_1.default.normalizeId(id));
	    };
	    Calendar.prototype.addEventSource = function (sourceInput) {
	        var source = EventSourceParser_1.default.parse(sourceInput, this);
	        if (source) {
	            this.eventManager.addSource(source);
	        }
	    };
	    Calendar.prototype.removeEventSources = function (sourceMultiQuery) {
	        var eventManager = this.eventManager;
	        var sources;
	        var i;
	        if (sourceMultiQuery == null) {
	            this.eventManager.removeAllSources();
	        }
	        else {
	            sources = eventManager.multiQuerySources(sourceMultiQuery);
	            eventManager.freeze();
	            for (i = 0; i < sources.length; i++) {
	                eventManager.removeSource(sources[i]);
	            }
	            eventManager.thaw();
	        }
	    };
	    Calendar.prototype.removeEventSource = function (sourceQuery) {
	        var eventManager = this.eventManager;
	        var sources = eventManager.querySources(sourceQuery);
	        var i;
	        eventManager.freeze();
	        for (i = 0; i < sources.length; i++) {
	            eventManager.removeSource(sources[i]);
	        }
	        eventManager.thaw();
	    };
	    Calendar.prototype.refetchEventSources = function (sourceMultiQuery) {
	        var eventManager = this.eventManager;
	        var sources = eventManager.multiQuerySources(sourceMultiQuery);
	        var i;
	        eventManager.freeze();
	        for (i = 0; i < sources.length; i++) {
	            eventManager.refetchSource(sources[i]);
	        }
	        eventManager.thaw();
	    };
	    // not for internal use. use options module directly instead.
	    Calendar.defaults = options_1.globalDefaults;
	    Calendar.englishDefaults = options_1.englishDefaults;
	    Calendar.rtlDefaults = options_1.rtlDefaults;
	    return Calendar;
	}());
	exports.default = Calendar;
	EmitterMixin_1.default.mixInto(Calendar);
	ListenerMixin_1.default.mixInto(Calendar);
	function filterLegacyEventInstances(legacyEventInstances, legacyQuery) {
	    if (legacyQuery == null) {
	        return legacyEventInstances;
	    }
	    else if ($.isFunction(legacyQuery)) {
	        return legacyEventInstances.filter(legacyQuery);
	    }
	    else { // an event ID
	        legacyQuery += ''; // normalize to string
	        return legacyEventInstances.filter(function (legacyEventInstance) {
	            // soft comparison because id not be normalized to string
	            // tslint:disable-next-line
	            return legacyEventInstance.id == legacyQuery ||
	                legacyEventInstance._id === legacyQuery; // can specify internal id, but must exactly match
	        });
	    }
	}
	
	
	/***/ }),
	/* 233 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var $ = __webpack_require__(3);
	var moment = __webpack_require__(0);
	var exportHooks = __webpack_require__(18);
	var util_1 = __webpack_require__(4);
	var moment_ext_1 = __webpack_require__(11);
	var ListenerMixin_1 = __webpack_require__(7);
	var HitDragListener_1 = __webpack_require__(17);
	var SingleEventDef_1 = __webpack_require__(9);
	var EventInstanceGroup_1 = __webpack_require__(20);
	var EventSource_1 = __webpack_require__(6);
	var Interaction_1 = __webpack_require__(14);
	var ExternalDropping = /** @class */ (function (_super) {
	    tslib_1.__extends(ExternalDropping, _super);
	    function ExternalDropping() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this.isDragging = false; // jqui-dragging an external element? boolean
	        return _this;
	    }
	    /*
	    component impements:
	      - eventRangesToEventFootprints
	      - isEventInstanceGroupAllowed
	      - isExternalInstanceGroupAllowed
	      - renderDrag
	      - unrenderDrag
	    */
	    ExternalDropping.prototype.end = function () {
	        if (this.dragListener) {
	            this.dragListener.endInteraction();
	        }
	    };
	    ExternalDropping.prototype.bindToDocument = function () {
	        this.listenTo($(document), {
	            dragstart: this.handleDragStart,
	            sortstart: this.handleDragStart // jqui
	        });
	    };
	    ExternalDropping.prototype.unbindFromDocument = function () {
	        this.stopListeningTo($(document));
	    };
	    // Called when a jQuery UI drag is initiated anywhere in the DOM
	    ExternalDropping.prototype.handleDragStart = function (ev, ui) {
	        var el;
	        var accept;
	        if (this.opt('droppable')) { // only listen if this setting is on
	            el = $((ui ? ui.item : null) || ev.target);
	            // Test that the dragged element passes the dropAccept selector or filter function.
	            // FYI, the default is "*" (matches all)
	            accept = this.opt('dropAccept');
	            if ($.isFunction(accept) ? accept.call(el[0], el) : el.is(accept)) {
	                if (!this.isDragging) { // prevent double-listening if fired twice
	                    this.listenToExternalDrag(el, ev, ui);
	                }
	            }
	        }
	    };
	    // Called when a jQuery UI drag starts and it needs to be monitored for dropping
	    ExternalDropping.prototype.listenToExternalDrag = function (el, ev, ui) {
	        var _this = this;
	        var component = this.component;
	        var view = this.view;
	        var meta = getDraggedElMeta(el); // extra data about event drop, including possible event to create
	        var singleEventDef; // a null value signals an unsuccessful drag
	        // listener that tracks mouse movement over date-associated pixel regions
	        var dragListener = this.dragListener = new HitDragListener_1.default(component, {
	            interactionStart: function () {
	                _this.isDragging = true;
	            },
	            hitOver: function (hit) {
	                var isAllowed = true;
	                var hitFootprint = hit.component.getSafeHitFootprint(hit); // hit might not belong to this grid
	                var mutatedEventInstanceGroup;
	                if (hitFootprint) {
	                    singleEventDef = _this.computeExternalDrop(hitFootprint, meta);
	                    if (singleEventDef) {
	                        mutatedEventInstanceGroup = new EventInstanceGroup_1.default(singleEventDef.buildInstances());
	                        isAllowed = meta.eventProps ? // isEvent?
	                            component.isEventInstanceGroupAllowed(mutatedEventInstanceGroup) :
	                            component.isExternalInstanceGroupAllowed(mutatedEventInstanceGroup);
	                    }
	                    else {
	                        isAllowed = false;
	                    }
	                }
	                else {
	                    isAllowed = false;
	                }
	                if (!isAllowed) {
	                    singleEventDef = null;
	                    util_1.disableCursor();
	                }
	                if (singleEventDef) {
	                    component.renderDrag(// called without a seg parameter
	                    component.eventRangesToEventFootprints(mutatedEventInstanceGroup.sliceRenderRanges(component.dateProfile.renderUnzonedRange, view.calendar)));
	                }
	            },
	            hitOut: function () {
	                singleEventDef = null; // signal unsuccessful
	            },
	            hitDone: function () {
	                util_1.enableCursor();
	                component.unrenderDrag();
	            },
	            interactionEnd: function (ev) {
	                if (singleEventDef) { // element was dropped on a valid hit
	                    view.reportExternalDrop(singleEventDef, Boolean(meta.eventProps), // isEvent
	                    Boolean(meta.stick), // isSticky
	                    el, ev, ui);
	                }
	                _this.isDragging = false;
	                _this.dragListener = null;
	            }
	        });
	        dragListener.startDrag(ev); // start listening immediately
	    };
	    // Given a hit to be dropped upon, and misc data associated with the jqui drag (guaranteed to be a plain object),
	    // returns the zoned start/end dates for the event that would result from the hypothetical drop. end might be null.
	    // Returning a null value signals an invalid drop hit.
	    // DOES NOT consider overlap/constraint.
	    // Assumes both footprints are non-open-ended.
	    ExternalDropping.prototype.computeExternalDrop = function (componentFootprint, meta) {
	        var calendar = this.view.calendar;
	        var start = moment_ext_1.default.utc(componentFootprint.unzonedRange.startMs).stripZone();
	        var end;
	        var eventDef;
	        if (componentFootprint.isAllDay) {
	            // if dropped on an all-day span, and element's metadata specified a time, set it
	            if (meta.startTime) {
	                start.time(meta.startTime);
	            }
	            else {
	                start.stripTime();
	            }
	        }
	        if (meta.duration) {
	            end = start.clone().add(meta.duration);
	        }
	        start = calendar.applyTimezone(start);
	        if (end) {
	            end = calendar.applyTimezone(end);
	        }
	        eventDef = SingleEventDef_1.default.parse($.extend({}, meta.eventProps, {
	            start: start,
	            end: end
	        }), new EventSource_1.default(calendar));
	        return eventDef;
	    };
	    return ExternalDropping;
	}(Interaction_1.default));
	exports.default = ExternalDropping;
	ListenerMixin_1.default.mixInto(ExternalDropping);
	/* External-Dragging-Element Data
	----------------------------------------------------------------------------------------------------------------------*/
	// Require all HTML5 data-* attributes used by FullCalendar to have this prefix.
	// A value of '' will query attributes like data-event. A value of 'fc' will query attributes like data-fc-event.
	exportHooks.dataAttrPrefix = '';
	// Given a jQuery element that might represent a dragged FullCalendar event, returns an intermediate data structure
	// to be used for Event Object creation.
	// A defined `.eventProps`, even when empty, indicates that an event should be created.
	function getDraggedElMeta(el) {
	    var prefix = exportHooks.dataAttrPrefix;
	    var eventProps; // properties for creating the event, not related to date/time
	    var startTime; // a Duration
	    var duration;
	    var stick;
	    if (prefix) {
	        prefix += '-';
	    }
	    eventProps = el.data(prefix + 'event') || null;
	    if (eventProps) {
	        if (typeof eventProps === 'object') {
	            eventProps = $.extend({}, eventProps); // make a copy
	        }
	        else { // something like 1 or true. still signal event creation
	            eventProps = {};
	        }
	        // pluck special-cased date/time properties
	        startTime = eventProps.start;
	        if (startTime == null) {
	            startTime = eventProps.time;
	        } // accept 'time' as well
	        duration = eventProps.duration;
	        stick = eventProps.stick;
	        delete eventProps.start;
	        delete eventProps.time;
	        delete eventProps.duration;
	        delete eventProps.stick;
	    }
	    // fallback to standalone attribute values for each of the date/time properties
	    if (startTime == null) {
	        startTime = el.data(prefix + 'start');
	    }
	    if (startTime == null) {
	        startTime = el.data(prefix + 'time');
	    } // accept 'time' as well
	    if (duration == null) {
	        duration = el.data(prefix + 'duration');
	    }
	    if (stick == null) {
	        stick = el.data(prefix + 'stick');
	    }
	    // massage into correct data types
	    startTime = startTime != null ? moment.duration(startTime) : null;
	    duration = duration != null ? moment.duration(duration) : null;
	    stick = Boolean(stick);
	    return { eventProps: eventProps, startTime: startTime, duration: duration, stick: stick };
	}
	
	
	/***/ }),
	/* 234 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var $ = __webpack_require__(3);
	var util_1 = __webpack_require__(4);
	var EventDefMutation_1 = __webpack_require__(39);
	var EventDefDateMutation_1 = __webpack_require__(40);
	var HitDragListener_1 = __webpack_require__(17);
	var Interaction_1 = __webpack_require__(14);
	var EventResizing = /** @class */ (function (_super) {
	    tslib_1.__extends(EventResizing, _super);
	    /*
	    component impements:
	      - bindSegHandlerToEl
	      - publiclyTrigger
	      - diffDates
	      - eventRangesToEventFootprints
	      - isEventInstanceGroupAllowed
	      - getSafeHitFootprint
	    */
	    function EventResizing(component, eventPointing) {
	        var _this = _super.call(this, component) || this;
	        _this.isResizing = false;
	        _this.eventPointing = eventPointing;
	        return _this;
	    }
	    EventResizing.prototype.end = function () {
	        if (this.dragListener) {
	            this.dragListener.endInteraction();
	        }
	    };
	    EventResizing.prototype.bindToEl = function (el) {
	        var component = this.component;
	        component.bindSegHandlerToEl(el, 'mousedown', this.handleMouseDown.bind(this));
	        component.bindSegHandlerToEl(el, 'touchstart', this.handleTouchStart.bind(this));
	    };
	    EventResizing.prototype.handleMouseDown = function (seg, ev) {
	        if (this.component.canStartResize(seg, ev)) {
	            this.buildDragListener(seg, $(ev.target).is('.fc-start-resizer'))
	                .startInteraction(ev, { distance: 5 });
	        }
	    };
	    EventResizing.prototype.handleTouchStart = function (seg, ev) {
	        if (this.component.canStartResize(seg, ev)) {
	            this.buildDragListener(seg, $(ev.target).is('.fc-start-resizer'))
	                .startInteraction(ev);
	        }
	    };
	    // Creates a listener that tracks the user as they resize an event segment.
	    // Generic enough to work with any type of Grid.
	    EventResizing.prototype.buildDragListener = function (seg, isStart) {
	        var _this = this;
	        var component = this.component;
	        var view = this.view;
	        var calendar = view.calendar;
	        var eventManager = calendar.eventManager;
	        var el = seg.el;
	        var eventDef = seg.footprint.eventDef;
	        var eventInstance = seg.footprint.eventInstance;
	        var isDragging;
	        var resizeMutation; // zoned event date properties. falsy if invalid resize
	        // Tracks mouse movement over the *grid's* coordinate map
	        var dragListener = this.dragListener = new HitDragListener_1.default(component, {
	            scroll: this.opt('dragScroll'),
	            subjectEl: el,
	            interactionStart: function () {
	                isDragging = false;
	            },
	            dragStart: function (ev) {
	                isDragging = true;
	                // ensure a mouseout on the manipulated event has been reported
	                _this.eventPointing.handleMouseout(seg, ev);
	                _this.segResizeStart(seg, ev);
	            },
	            hitOver: function (hit, isOrig, origHit) {
	                var isAllowed = true;
	                var origHitFootprint = component.getSafeHitFootprint(origHit);
	                var hitFootprint = component.getSafeHitFootprint(hit);
	                var mutatedEventInstanceGroup;
	                if (origHitFootprint && hitFootprint) {
	                    resizeMutation = isStart ?
	                        _this.computeEventStartResizeMutation(origHitFootprint, hitFootprint, seg.footprint) :
	                        _this.computeEventEndResizeMutation(origHitFootprint, hitFootprint, seg.footprint);
	                    if (resizeMutation) {
	                        mutatedEventInstanceGroup = eventManager.buildMutatedEventInstanceGroup(eventDef.id, resizeMutation);
	                        isAllowed = component.isEventInstanceGroupAllowed(mutatedEventInstanceGroup);
	                    }
	                    else {
	                        isAllowed = false;
	                    }
	                }
	                else {
	                    isAllowed = false;
	                }
	                if (!isAllowed) {
	                    resizeMutation = null;
	                    util_1.disableCursor();
	                }
	                else if (resizeMutation.isEmpty()) {
	                    // no change. (FYI, event dates might have zones)
	                    resizeMutation = null;
	                }
	                if (resizeMutation) {
	                    view.hideEventsWithId(seg.footprint.eventDef.id);
	                    view.renderEventResize(component.eventRangesToEventFootprints(mutatedEventInstanceGroup.sliceRenderRanges(component.dateProfile.renderUnzonedRange, calendar)), seg);
	                }
	            },
	            hitOut: function () {
	                resizeMutation = null;
	            },
	            hitDone: function () {
	                view.unrenderEventResize(seg);
	                view.showEventsWithId(seg.footprint.eventDef.id);
	                util_1.enableCursor();
	            },
	            interactionEnd: function (ev) {
	                if (isDragging) {
	                    _this.segResizeStop(seg, ev);
	                }
	                if (resizeMutation) { // valid date to resize to?
	                    // no need to re-show original, will rerender all anyways. esp important if eventRenderWait
	                    view.reportEventResize(eventInstance, resizeMutation, el, ev);
	                }
	                _this.dragListener = null;
	            }
	        });
	        return dragListener;
	    };
	    // Called before event segment resizing starts
	    EventResizing.prototype.segResizeStart = function (seg, ev) {
	        this.isResizing = true;
	        this.component.publiclyTrigger('eventResizeStart', {
	            context: seg.el[0],
	            args: [
	                seg.footprint.getEventLegacy(),
	                ev,
	                {},
	                this.view
	            ]
	        });
	    };
	    // Called after event segment resizing stops
	    EventResizing.prototype.segResizeStop = function (seg, ev) {
	        this.isResizing = false;
	        this.component.publiclyTrigger('eventResizeStop', {
	            context: seg.el[0],
	            args: [
	                seg.footprint.getEventLegacy(),
	                ev,
	                {},
	                this.view
	            ]
	        });
	    };
	    // Returns new date-information for an event segment being resized from its start
	    EventResizing.prototype.computeEventStartResizeMutation = function (startFootprint, endFootprint, origEventFootprint) {
	        var origRange = origEventFootprint.componentFootprint.unzonedRange;
	        var startDelta = this.component.diffDates(endFootprint.unzonedRange.getStart(), startFootprint.unzonedRange.getStart());
	        var dateMutation;
	        var eventDefMutation;
	        if (origRange.getStart().add(startDelta) < origRange.getEnd()) {
	            dateMutation = new EventDefDateMutation_1.default();
	            dateMutation.setStartDelta(startDelta);
	            eventDefMutation = new EventDefMutation_1.default();
	            eventDefMutation.setDateMutation(dateMutation);
	            return eventDefMutation;
	        }
	        return false;
	    };
	    // Returns new date-information for an event segment being resized from its end
	    EventResizing.prototype.computeEventEndResizeMutation = function (startFootprint, endFootprint, origEventFootprint) {
	        var origRange = origEventFootprint.componentFootprint.unzonedRange;
	        var endDelta = this.component.diffDates(endFootprint.unzonedRange.getEnd(), startFootprint.unzonedRange.getEnd());
	        var dateMutation;
	        var eventDefMutation;
	        if (origRange.getEnd().add(endDelta) > origRange.getStart()) {
	            dateMutation = new EventDefDateMutation_1.default();
	            dateMutation.setEndDelta(endDelta);
	            eventDefMutation = new EventDefMutation_1.default();
	            eventDefMutation.setDateMutation(dateMutation);
	            return eventDefMutation;
	        }
	        return false;
	    };
	    return EventResizing;
	}(Interaction_1.default));
	exports.default = EventResizing;
	
	
	/***/ }),
	/* 235 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var util_1 = __webpack_require__(4);
	var EventDefMutation_1 = __webpack_require__(39);
	var EventDefDateMutation_1 = __webpack_require__(40);
	var DragListener_1 = __webpack_require__(59);
	var HitDragListener_1 = __webpack_require__(17);
	var MouseFollower_1 = __webpack_require__(226);
	var Interaction_1 = __webpack_require__(14);
	var EventDragging = /** @class */ (function (_super) {
	    tslib_1.__extends(EventDragging, _super);
	    /*
	    component implements:
	      - bindSegHandlerToEl
	      - publiclyTrigger
	      - diffDates
	      - eventRangesToEventFootprints
	      - isEventInstanceGroupAllowed
	    */
	    function EventDragging(component, eventPointing) {
	        var _this = _super.call(this, component) || this;
	        _this.isDragging = false;
	        _this.eventPointing = eventPointing;
	        return _this;
	    }
	    EventDragging.prototype.end = function () {
	        if (this.dragListener) {
	            this.dragListener.endInteraction();
	        }
	    };
	    EventDragging.prototype.getSelectionDelay = function () {
	        var delay = this.opt('eventLongPressDelay');
	        if (delay == null) {
	            delay = this.opt('longPressDelay'); // fallback
	        }
	        return delay;
	    };
	    EventDragging.prototype.bindToEl = function (el) {
	        var component = this.component;
	        component.bindSegHandlerToEl(el, 'mousedown', this.handleMousedown.bind(this));
	        component.bindSegHandlerToEl(el, 'touchstart', this.handleTouchStart.bind(this));
	    };
	    EventDragging.prototype.handleMousedown = function (seg, ev) {
	        if (!this.component.shouldIgnoreMouse() &&
	            this.component.canStartDrag(seg, ev)) {
	            this.buildDragListener(seg).startInteraction(ev, { distance: 5 });
	        }
	    };
	    EventDragging.prototype.handleTouchStart = function (seg, ev) {
	        var component = this.component;
	        var settings = {
	            delay: this.view.isEventDefSelected(seg.footprint.eventDef) ? // already selected?
	                0 : this.getSelectionDelay()
	        };
	        if (component.canStartDrag(seg, ev)) {
	            this.buildDragListener(seg).startInteraction(ev, settings);
	        }
	        else if (component.canStartSelection(seg, ev)) {
	            this.buildSelectListener(seg).startInteraction(ev, settings);
	        }
	    };
	    // seg isn't draggable, but let's use a generic DragListener
	    // simply for the delay, so it can be selected.
	    // Has side effect of setting/unsetting `dragListener`
	    EventDragging.prototype.buildSelectListener = function (seg) {
	        var _this = this;
	        var view = this.view;
	        var eventDef = seg.footprint.eventDef;
	        var eventInstance = seg.footprint.eventInstance; // null for inverse-background events
	        if (this.dragListener) {
	            return this.dragListener;
	        }
	        var dragListener = this.dragListener = new DragListener_1.default({
	            dragStart: function (ev) {
	                if (dragListener.isTouch &&
	                    !view.isEventDefSelected(eventDef) &&
	                    eventInstance) {
	                    // if not previously selected, will fire after a delay. then, select the event
	                    view.selectEventInstance(eventInstance);
	                }
	            },
	            interactionEnd: function (ev) {
	                _this.dragListener = null;
	            }
	        });
	        return dragListener;
	    };
	    // Builds a listener that will track user-dragging on an event segment.
	    // Generic enough to work with any type of Grid.
	    // Has side effect of setting/unsetting `dragListener`
	    EventDragging.prototype.buildDragListener = function (seg) {
	        var _this = this;
	        var component = this.component;
	        var view = this.view;
	        var calendar = view.calendar;
	        var eventManager = calendar.eventManager;
	        var el = seg.el;
	        var eventDef = seg.footprint.eventDef;
	        var eventInstance = seg.footprint.eventInstance; // null for inverse-background events
	        var isDragging;
	        var mouseFollower; // A clone of the original element that will move with the mouse
	        var eventDefMutation;
	        if (this.dragListener) {
	            return this.dragListener;
	        }
	        // Tracks mouse movement over the *view's* coordinate map. Allows dragging and dropping between subcomponents
	        // of the view.
	        var dragListener = this.dragListener = new HitDragListener_1.default(view, {
	            scroll: this.opt('dragScroll'),
	            subjectEl: el,
	            subjectCenter: true,
	            interactionStart: function (ev) {
	                seg.component = component; // for renderDrag
	                isDragging = false;
	                mouseFollower = new MouseFollower_1.default(seg.el, {
	                    additionalClass: 'fc-dragging',
	                    parentEl: view.el,
	                    opacity: dragListener.isTouch ? null : _this.opt('dragOpacity'),
	                    revertDuration: _this.opt('dragRevertDuration'),
	                    zIndex: 2 // one above the .fc-view
	                });
	                mouseFollower.hide(); // don't show until we know this is a real drag
	                mouseFollower.start(ev);
	            },
	            dragStart: function (ev) {
	                if (dragListener.isTouch &&
	                    !view.isEventDefSelected(eventDef) &&
	                    eventInstance) {
	                    // if not previously selected, will fire after a delay. then, select the event
	                    view.selectEventInstance(eventInstance);
	                }
	                isDragging = true;
	                // ensure a mouseout on the manipulated event has been reported
	                _this.eventPointing.handleMouseout(seg, ev);
	                _this.segDragStart(seg, ev);
	                view.hideEventsWithId(seg.footprint.eventDef.id);
	            },
	            hitOver: function (hit, isOrig, origHit) {
	                var isAllowed = true;
	                var origFootprint;
	                var footprint;
	                var mutatedEventInstanceGroup;
	                // starting hit could be forced (DayGrid.limit)
	                if (seg.hit) {
	                    origHit = seg.hit;
	                }
	                // hit might not belong to this grid, so query origin grid
	                origFootprint = origHit.component.getSafeHitFootprint(origHit);
	                footprint = hit.component.getSafeHitFootprint(hit);
	                if (origFootprint && footprint) {
	                    eventDefMutation = _this.computeEventDropMutation(origFootprint, footprint, eventDef);
	                    if (eventDefMutation) {
	                        mutatedEventInstanceGroup = eventManager.buildMutatedEventInstanceGroup(eventDef.id, eventDefMutation);
	                        isAllowed = component.isEventInstanceGroupAllowed(mutatedEventInstanceGroup);
	                    }
	                    else {
	                        isAllowed = false;
	                    }
	                }
	                else {
	                    isAllowed = false;
	                }
	                if (!isAllowed) {
	                    eventDefMutation = null;
	                    util_1.disableCursor();
	                }
	                // if a valid drop location, have the subclass render a visual indication
	                if (eventDefMutation &&
	                    view.renderDrag(// truthy if rendered something
	                    component.eventRangesToEventFootprints(mutatedEventInstanceGroup.sliceRenderRanges(component.dateProfile.renderUnzonedRange, calendar)), seg, dragListener.isTouch)) {
	                    mouseFollower.hide(); // if the subclass is already using a mock event "helper", hide our own
	                }
	                else {
	                    mouseFollower.show(); // otherwise, have the helper follow the mouse (no snapping)
	                }
	                if (isOrig) {
	                    // needs to have moved hits to be a valid drop
	                    eventDefMutation = null;
	                }
	            },
	            hitOut: function () {
	                view.unrenderDrag(seg); // unrender whatever was done in renderDrag
	                mouseFollower.show(); // show in case we are moving out of all hits
	                eventDefMutation = null;
	            },
	            hitDone: function () {
	                util_1.enableCursor();
	            },
	            interactionEnd: function (ev) {
	                delete seg.component; // prevent side effects
	                // do revert animation if hasn't changed. calls a callback when finished (whether animation or not)
	                mouseFollower.stop(!eventDefMutation, function () {
	                    if (isDragging) {
	                        view.unrenderDrag(seg);
	                        _this.segDragStop(seg, ev);
	                    }
	                    view.showEventsWithId(seg.footprint.eventDef.id);
	                    if (eventDefMutation) {
	                        // no need to re-show original, will rerender all anyways. esp important if eventRenderWait
	                        view.reportEventDrop(eventInstance, eventDefMutation, el, ev);
	                    }
	                });
	                _this.dragListener = null;
	            }
	        });
	        return dragListener;
	    };
	    // Called before event segment dragging starts
	    EventDragging.prototype.segDragStart = function (seg, ev) {
	        this.isDragging = true;
	        this.component.publiclyTrigger('eventDragStart', {
	            context: seg.el[0],
	            args: [
	                seg.footprint.getEventLegacy(),
	                ev,
	                {},
	                this.view
	            ]
	        });
	    };
	    // Called after event segment dragging stops
	    EventDragging.prototype.segDragStop = function (seg, ev) {
	        this.isDragging = false;
	        this.component.publiclyTrigger('eventDragStop', {
	            context: seg.el[0],
	            args: [
	                seg.footprint.getEventLegacy(),
	                ev,
	                {},
	                this.view
	            ]
	        });
	    };
	    // DOES NOT consider overlap/constraint
	    EventDragging.prototype.computeEventDropMutation = function (startFootprint, endFootprint, eventDef) {
	        var eventDefMutation = new EventDefMutation_1.default();
	        eventDefMutation.setDateMutation(this.computeEventDateMutation(startFootprint, endFootprint));
	        return eventDefMutation;
	    };
	    EventDragging.prototype.computeEventDateMutation = function (startFootprint, endFootprint) {
	        var date0 = startFootprint.unzonedRange.getStart();
	        var date1 = endFootprint.unzonedRange.getStart();
	        var clearEnd = false;
	        var forceTimed = false;
	        var forceAllDay = false;
	        var dateDelta;
	        var dateMutation;
	        if (startFootprint.isAllDay !== endFootprint.isAllDay) {
	            clearEnd = true;
	            if (endFootprint.isAllDay) {
	                forceAllDay = true;
	                date0.stripTime();
	            }
	            else {
	                forceTimed = true;
	            }
	        }
	        dateDelta = this.component.diffDates(date1, date0);
	        dateMutation = new EventDefDateMutation_1.default();
	        dateMutation.clearEnd = clearEnd;
	        dateMutation.forceTimed = forceTimed;
	        dateMutation.forceAllDay = forceAllDay;
	        dateMutation.setDateDelta(dateDelta);
	        return dateMutation;
	    };
	    return EventDragging;
	}(Interaction_1.default));
	exports.default = EventDragging;
	
	
	/***/ }),
	/* 236 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var util_1 = __webpack_require__(4);
	var HitDragListener_1 = __webpack_require__(17);
	var ComponentFootprint_1 = __webpack_require__(12);
	var UnzonedRange_1 = __webpack_require__(5);
	var Interaction_1 = __webpack_require__(14);
	var DateSelecting = /** @class */ (function (_super) {
	    tslib_1.__extends(DateSelecting, _super);
	    /*
	    component must implement:
	      - bindDateHandlerToEl
	      - getSafeHitFootprint
	      - renderHighlight
	      - unrenderHighlight
	    */
	    function DateSelecting(component) {
	        var _this = _super.call(this, component) || this;
	        _this.dragListener = _this.buildDragListener();
	        return _this;
	    }
	    DateSelecting.prototype.end = function () {
	        this.dragListener.endInteraction();
	    };
	    DateSelecting.prototype.getDelay = function () {
	        var delay = this.opt('selectLongPressDelay');
	        if (delay == null) {
	            delay = this.opt('longPressDelay'); // fallback
	        }
	        return delay;
	    };
	    DateSelecting.prototype.bindToEl = function (el) {
	        var _this = this;
	        var component = this.component;
	        var dragListener = this.dragListener;
	        component.bindDateHandlerToEl(el, 'mousedown', function (ev) {
	            if (_this.opt('selectable') && !component.shouldIgnoreMouse()) {
	                dragListener.startInteraction(ev, {
	                    distance: _this.opt('selectMinDistance')
	                });
	            }
	        });
	        component.bindDateHandlerToEl(el, 'touchstart', function (ev) {
	            if (_this.opt('selectable') && !component.shouldIgnoreTouch()) {
	                dragListener.startInteraction(ev, {
	                    delay: _this.getDelay()
	                });
	            }
	        });
	        util_1.preventSelection(el);
	    };
	    // Creates a listener that tracks the user's drag across day elements, for day selecting.
	    DateSelecting.prototype.buildDragListener = function () {
	        var _this = this;
	        var component = this.component;
	        var selectionFootprint; // null if invalid selection
	        var dragListener = new HitDragListener_1.default(component, {
	            scroll: this.opt('dragScroll'),
	            interactionStart: function () {
	                selectionFootprint = null;
	            },
	            dragStart: function (ev) {
	                _this.view.unselect(ev); // since we could be rendering a new selection, we want to clear any old one
	            },
	            hitOver: function (hit, isOrig, origHit) {
	                var origHitFootprint;
	                var hitFootprint;
	                if (origHit) { // click needs to have started on a hit
	                    origHitFootprint = component.getSafeHitFootprint(origHit);
	                    hitFootprint = component.getSafeHitFootprint(hit);
	                    if (origHitFootprint && hitFootprint) {
	                        selectionFootprint = _this.computeSelection(origHitFootprint, hitFootprint);
	                    }
	                    else {
	                        selectionFootprint = null;
	                    }
	                    if (selectionFootprint) {
	                        component.renderSelectionFootprint(selectionFootprint);
	                    }
	                    else if (selectionFootprint === false) {
	                        util_1.disableCursor();
	                    }
	                }
	            },
	            hitOut: function () {
	                selectionFootprint = null;
	                component.unrenderSelection();
	            },
	            hitDone: function () {
	                util_1.enableCursor();
	            },
	            interactionEnd: function (ev, isCancelled) {
	                if (!isCancelled && selectionFootprint) {
	                    // the selection will already have been rendered. just report it
	                    _this.view.reportSelection(selectionFootprint, ev);
	                }
	            }
	        });
	        return dragListener;
	    };
	    // Given the first and last date-spans of a selection, returns another date-span object.
	    // Subclasses can override and provide additional data in the span object. Will be passed to renderSelectionFootprint().
	    // Will return false if the selection is invalid and this should be indicated to the user.
	    // Will return null/undefined if a selection invalid but no error should be reported.
	    DateSelecting.prototype.computeSelection = function (footprint0, footprint1) {
	        var wholeFootprint = this.computeSelectionFootprint(footprint0, footprint1);
	        if (wholeFootprint && !this.isSelectionFootprintAllowed(wholeFootprint)) {
	            return false;
	        }
	        return wholeFootprint;
	    };
	    // Given two spans, must return the combination of the two.
	    // TODO: do this separation of concerns (combining VS validation) for event dnd/resize too.
	    // Assumes both footprints are non-open-ended.
	    DateSelecting.prototype.computeSelectionFootprint = function (footprint0, footprint1) {
	        var ms = [
	            footprint0.unzonedRange.startMs,
	            footprint0.unzonedRange.endMs,
	            footprint1.unzonedRange.startMs,
	            footprint1.unzonedRange.endMs
	        ];
	        ms.sort(util_1.compareNumbers);
	        return new ComponentFootprint_1.default(new UnzonedRange_1.default(ms[0], ms[3]), footprint0.isAllDay);
	    };
	    DateSelecting.prototype.isSelectionFootprintAllowed = function (componentFootprint) {
	        return this.component.dateProfile.validUnzonedRange.containsRange(componentFootprint.unzonedRange) &&
	            this.view.calendar.constraints.isSelectionFootprintAllowed(componentFootprint);
	    };
	    return DateSelecting;
	}(Interaction_1.default));
	exports.default = DateSelecting;
	
	
	/***/ }),
	/* 237 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var HitDragListener_1 = __webpack_require__(17);
	var Interaction_1 = __webpack_require__(14);
	var DateClicking = /** @class */ (function (_super) {
	    tslib_1.__extends(DateClicking, _super);
	    /*
	    component must implement:
	      - bindDateHandlerToEl
	      - getSafeHitFootprint
	      - getHitEl
	    */
	    function DateClicking(component) {
	        var _this = _super.call(this, component) || this;
	        _this.dragListener = _this.buildDragListener();
	        return _this;
	    }
	    DateClicking.prototype.end = function () {
	        this.dragListener.endInteraction();
	    };
	    DateClicking.prototype.bindToEl = function (el) {
	        var component = this.component;
	        var dragListener = this.dragListener;
	        component.bindDateHandlerToEl(el, 'mousedown', function (ev) {
	            if (!component.shouldIgnoreMouse()) {
	                dragListener.startInteraction(ev);
	            }
	        });
	        component.bindDateHandlerToEl(el, 'touchstart', function (ev) {
	            if (!component.shouldIgnoreTouch()) {
	                dragListener.startInteraction(ev);
	            }
	        });
	    };
	    // Creates a listener that tracks the user's drag across day elements, for day clicking.
	    DateClicking.prototype.buildDragListener = function () {
	        var _this = this;
	        var component = this.component;
	        var dayClickHit; // null if invalid dayClick
	        var dragListener = new HitDragListener_1.default(component, {
	            scroll: this.opt('dragScroll'),
	            interactionStart: function () {
	                dayClickHit = dragListener.origHit;
	            },
	            hitOver: function (hit, isOrig, origHit) {
	                // if user dragged to another cell at any point, it can no longer be a dayClick
	                if (!isOrig) {
	                    dayClickHit = null;
	                }
	            },
	            hitOut: function () {
	                dayClickHit = null;
	            },
	            interactionEnd: function (ev, isCancelled) {
	                var componentFootprint;
	                if (!isCancelled && dayClickHit) {
	                    componentFootprint = component.getSafeHitFootprint(dayClickHit);
	                    if (componentFootprint) {
	                        _this.view.triggerDayClick(componentFootprint, component.getHitEl(dayClickHit), ev);
	                    }
	                }
	            }
	        });
	        // because dragListener won't be called with any time delay, "dragging" will begin immediately,
	        // which will kill any touchmoving/scrolling. Prevent this.
	        dragListener.shouldCancelTouchScroll = false;
	        dragListener.scrollAlwaysKills = true;
	        return dragListener;
	    };
	    return DateClicking;
	}(Interaction_1.default));
	exports.default = DateClicking;
	
	
	/***/ }),
	/* 238 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var moment = __webpack_require__(0);
	var $ = __webpack_require__(3);
	var util_1 = __webpack_require__(4);
	var Scroller_1 = __webpack_require__(41);
	var View_1 = __webpack_require__(43);
	var TimeGrid_1 = __webpack_require__(239);
	var DayGrid_1 = __webpack_require__(66);
	var AGENDA_ALL_DAY_EVENT_LIMIT = 5;
	var agendaTimeGridMethods;
	var agendaDayGridMethods;
	/* An abstract class for all agenda-related views. Displays one more columns with time slots running vertically.
	----------------------------------------------------------------------------------------------------------------------*/
	// Is a manager for the TimeGrid subcomponent and possibly the DayGrid subcomponent (if allDaySlot is on).
	// Responsible for managing width/height.
	var AgendaView = /** @class */ (function (_super) {
	    tslib_1.__extends(AgendaView, _super);
	    function AgendaView(calendar, viewSpec) {
	        var _this = _super.call(this, calendar, viewSpec) || this;
	        _this.usesMinMaxTime = true; // indicates that minTime/maxTime affects rendering
	        _this.timeGrid = _this.instantiateTimeGrid();
	        _this.addChild(_this.timeGrid);
	        if (_this.opt('allDaySlot')) { // should we display the "all-day" area?
	            _this.dayGrid = _this.instantiateDayGrid(); // the all-day subcomponent of this view
	            _this.addChild(_this.dayGrid);
	        }
	        _this.scroller = new Scroller_1.default({
	            overflowX: 'hidden',
	            overflowY: 'auto'
	        });
	        return _this;
	    }
	    // Instantiates the TimeGrid object this view needs. Draws from this.timeGridClass
	    AgendaView.prototype.instantiateTimeGrid = function () {
	        var timeGrid = new this.timeGridClass(this);
	        util_1.copyOwnProps(agendaTimeGridMethods, timeGrid);
	        return timeGrid;
	    };
	    // Instantiates the DayGrid object this view might need. Draws from this.dayGridClass
	    AgendaView.prototype.instantiateDayGrid = function () {
	        var dayGrid = new this.dayGridClass(this);
	        util_1.copyOwnProps(agendaDayGridMethods, dayGrid);
	        return dayGrid;
	    };
	    /* Rendering
	    ------------------------------------------------------------------------------------------------------------------*/
	    AgendaView.prototype.renderSkeleton = function () {
	        var timeGridWrapEl;
	        var timeGridEl;
	        this.el.addClass('fc-agenda-view').html(this.renderSkeletonHtml());
	        this.scroller.render();
	        timeGridWrapEl = this.scroller.el.addClass('fc-time-grid-container');
	        timeGridEl = $('<div class="fc-time-grid">').appendTo(timeGridWrapEl);
	        this.el.find('.fc-body > tr > td').append(timeGridWrapEl);
	        this.timeGrid.headContainerEl = this.el.find('.fc-head-container');
	        this.timeGrid.setElement(timeGridEl);
	        if (this.dayGrid) {
	            this.dayGrid.setElement(this.el.find('.fc-day-grid'));
	            // have the day-grid extend it's coordinate area over the <hr> dividing the two grids
	            this.dayGrid.bottomCoordPadding = this.dayGrid.el.next('hr').outerHeight();
	        }
	    };
	    AgendaView.prototype.unrenderSkeleton = function () {
	        this.timeGrid.removeElement();
	        if (this.dayGrid) {
	            this.dayGrid.removeElement();
	        }
	        this.scroller.destroy();
	    };
	    // Builds the HTML skeleton for the view.
	    // The day-grid and time-grid components will render inside containers defined by this HTML.
	    AgendaView.prototype.renderSkeletonHtml = function () {
	        var theme = this.calendar.theme;
	        return '' +
	            '<table class="' + theme.getClass('tableGrid') + '">' +
	            (this.opt('columnHeader') ?
	                '<thead class="fc-head">' +
	                    '<tr>' +
	                    '<td class="fc-head-container ' + theme.getClass('widgetHeader') + '">&nbsp;</td>' +
	                    '</tr>' +
	                    '</thead>' :
	                '') +
	            '<tbody class="fc-body">' +
	            '<tr>' +
	            '<td class="' + theme.getClass('widgetContent') + '">' +
	            (this.dayGrid ?
	                '<div class="fc-day-grid"></div>' +
	                    '<hr class="fc-divider ' + theme.getClass('widgetHeader') + '"></hr>' :
	                '') +
	            '</td>' +
	            '</tr>' +
	            '</tbody>' +
	            '</table>';
	    };
	    // Generates an HTML attribute string for setting the width of the axis, if it is known
	    AgendaView.prototype.axisStyleAttr = function () {
	        if (this.axisWidth != null) {
	            return 'style="width:' + this.axisWidth + 'px"';
	        }
	        return '';
	    };
	    /* Now Indicator
	    ------------------------------------------------------------------------------------------------------------------*/
	    AgendaView.prototype.getNowIndicatorUnit = function () {
	        return this.timeGrid.getNowIndicatorUnit();
	    };
	    /* Dimensions
	    ------------------------------------------------------------------------------------------------------------------*/
	    // Adjusts the vertical dimensions of the view to the specified values
	    AgendaView.prototype.updateSize = function (totalHeight, isAuto, isResize) {
	        var eventLimit;
	        var scrollerHeight;
	        var scrollbarWidths;
	        _super.prototype.updateSize.call(this, totalHeight, isAuto, isResize);
	        // make all axis cells line up, and record the width so newly created axis cells will have it
	        this.axisWidth = util_1.matchCellWidths(this.el.find('.fc-axis'));
	        // hack to give the view some height prior to timeGrid's columns being rendered
	        // TODO: separate setting height from scroller VS timeGrid.
	        if (!this.timeGrid.colEls) {
	            if (!isAuto) {
	                scrollerHeight = this.computeScrollerHeight(totalHeight);
	                this.scroller.setHeight(scrollerHeight);
	            }
	            return;
	        }
	        // set of fake row elements that must compensate when scroller has scrollbars
	        var noScrollRowEls = this.el.find('.fc-row:not(.fc-scroller *)');
	        // reset all dimensions back to the original state
	        this.timeGrid.bottomRuleEl.hide(); // .show() will be called later if this <hr> is necessary
	        this.scroller.clear(); // sets height to 'auto' and clears overflow
	        util_1.uncompensateScroll(noScrollRowEls);
	        // limit number of events in the all-day area
	        if (this.dayGrid) {
	            this.dayGrid.removeSegPopover(); // kill the "more" popover if displayed
	            eventLimit = this.opt('eventLimit');
	            if (eventLimit && typeof eventLimit !== 'number') {
	                eventLimit = AGENDA_ALL_DAY_EVENT_LIMIT; // make sure "auto" goes to a real number
	            }
	            if (eventLimit) {
	                this.dayGrid.limitRows(eventLimit);
	            }
	        }
	        if (!isAuto) { // should we force dimensions of the scroll container?
	            scrollerHeight = this.computeScrollerHeight(totalHeight);
	            this.scroller.setHeight(scrollerHeight);
	            scrollbarWidths = this.scroller.getScrollbarWidths();
	            if (scrollbarWidths.left || scrollbarWidths.right) { // using scrollbars?
	                // make the all-day and header rows lines up
	                util_1.compensateScroll(noScrollRowEls, scrollbarWidths);
	                // the scrollbar compensation might have changed text flow, which might affect height, so recalculate
	                // and reapply the desired height to the scroller.
	                scrollerHeight = this.computeScrollerHeight(totalHeight);
	                this.scroller.setHeight(scrollerHeight);
	            }
	            // guarantees the same scrollbar widths
	            this.scroller.lockOverflow(scrollbarWidths);
	            // if there's any space below the slats, show the horizontal rule.
	            // this won't cause any new overflow, because lockOverflow already called.
	            if (this.timeGrid.getTotalSlatHeight() < scrollerHeight) {
	                this.timeGrid.bottomRuleEl.show();
	            }
	        }
	    };
	    // given a desired total height of the view, returns what the height of the scroller should be
	    AgendaView.prototype.computeScrollerHeight = function (totalHeight) {
	        return totalHeight -
	            util_1.subtractInnerElHeight(this.el, this.scroller.el); // everything that's NOT the scroller
	    };
	    /* Scroll
	    ------------------------------------------------------------------------------------------------------------------*/
	    // Computes the initial pre-configured scroll state prior to allowing the user to change it
	    AgendaView.prototype.computeInitialDateScroll = function () {
	        var scrollTime = moment.duration(this.opt('scrollTime'));
	        var top = this.timeGrid.computeTimeTop(scrollTime);
	        // zoom can give weird floating-point values. rather scroll a little bit further
	        top = Math.ceil(top);
	        if (top) {
	            top++; // to overcome top border that slots beyond the first have. looks better
	        }
	        return { top: top };
	    };
	    AgendaView.prototype.queryDateScroll = function () {
	        return { top: this.scroller.getScrollTop() };
	    };
	    AgendaView.prototype.applyDateScroll = function (scroll) {
	        if (scroll.top !== undefined) {
	            this.scroller.setScrollTop(scroll.top);
	        }
	    };
	    /* Hit Areas
	    ------------------------------------------------------------------------------------------------------------------*/
	    // forward all hit-related method calls to the grids (dayGrid might not be defined)
	    AgendaView.prototype.getHitFootprint = function (hit) {
	        // TODO: hit.component is set as a hack to identify where the hit came from
	        return hit.component.getHitFootprint(hit);
	    };
	    AgendaView.prototype.getHitEl = function (hit) {
	        // TODO: hit.component is set as a hack to identify where the hit came from
	        return hit.component.getHitEl(hit);
	    };
	    /* Event Rendering
	    ------------------------------------------------------------------------------------------------------------------*/
	    AgendaView.prototype.executeEventRender = function (eventsPayload) {
	        var dayEventsPayload = {};
	        var timedEventsPayload = {};
	        var id;
	        var eventInstanceGroup;
	        // separate the events into all-day and timed
	        for (id in eventsPayload) {
	            eventInstanceGroup = eventsPayload[id];
	            if (eventInstanceGroup.getEventDef().isAllDay()) {
	                dayEventsPayload[id] = eventInstanceGroup;
	            }
	            else {
	                timedEventsPayload[id] = eventInstanceGroup;
	            }
	        }
	        this.timeGrid.executeEventRender(timedEventsPayload);
	        if (this.dayGrid) {
	            this.dayGrid.executeEventRender(dayEventsPayload);
	        }
	    };
	    /* Dragging/Resizing Routing
	    ------------------------------------------------------------------------------------------------------------------*/
	    // A returned value of `true` signals that a mock "helper" event has been rendered.
	    AgendaView.prototype.renderDrag = function (eventFootprints, seg, isTouch) {
	        var groups = groupEventFootprintsByAllDay(eventFootprints);
	        var renderedHelper = false;
	        renderedHelper = this.timeGrid.renderDrag(groups.timed, seg, isTouch);
	        if (this.dayGrid) {
	            renderedHelper = this.dayGrid.renderDrag(groups.allDay, seg, isTouch) || renderedHelper;
	        }
	        return renderedHelper;
	    };
	    AgendaView.prototype.renderEventResize = function (eventFootprints, seg, isTouch) {
	        var groups = groupEventFootprintsByAllDay(eventFootprints);
	        this.timeGrid.renderEventResize(groups.timed, seg, isTouch);
	        if (this.dayGrid) {
	            this.dayGrid.renderEventResize(groups.allDay, seg, isTouch);
	        }
	    };
	    /* Selection
	    ------------------------------------------------------------------------------------------------------------------*/
	    // Renders a visual indication of a selection
	    AgendaView.prototype.renderSelectionFootprint = function (componentFootprint) {
	        if (!componentFootprint.isAllDay) {
	            this.timeGrid.renderSelectionFootprint(componentFootprint);
	        }
	        else if (this.dayGrid) {
	            this.dayGrid.renderSelectionFootprint(componentFootprint);
	        }
	    };
	    return AgendaView;
	}(View_1.default));
	exports.default = AgendaView;
	AgendaView.prototype.timeGridClass = TimeGrid_1.default;
	AgendaView.prototype.dayGridClass = DayGrid_1.default;
	// Will customize the rendering behavior of the AgendaView's timeGrid
	agendaTimeGridMethods = {
	    // Generates the HTML that will go before the day-of week header cells
	    renderHeadIntroHtml: function () {
	        var view = this.view;
	        var calendar = view.calendar;
	        var weekStart = calendar.msToUtcMoment(this.dateProfile.renderUnzonedRange.startMs, true);
	        var weekText;
	        if (this.opt('weekNumbers')) {
	            weekText = weekStart.format(this.opt('smallWeekFormat'));
	            return '' +
	                '<th class="fc-axis fc-week-number ' + calendar.theme.getClass('widgetHeader') + '" ' + view.axisStyleAttr() + '>' +
	                view.buildGotoAnchorHtml(// aside from link, important for matchCellWidths
	                { date: weekStart, type: 'week', forceOff: this.colCnt > 1 }, util_1.htmlEscape(weekText) // inner HTML
	                ) +
	                '</th>';
	        }
	        else {
	            return '<th class="fc-axis ' + calendar.theme.getClass('widgetHeader') + '" ' + view.axisStyleAttr() + '></th>';
	        }
	    },
	    // Generates the HTML that goes before the bg of the TimeGrid slot area. Long vertical column.
	    renderBgIntroHtml: function () {
	        var view = this.view;
	        return '<td class="fc-axis ' + view.calendar.theme.getClass('widgetContent') + '" ' + view.axisStyleAttr() + '></td>';
	    },
	    // Generates the HTML that goes before all other types of cells.
	    // Affects content-skeleton, helper-skeleton, highlight-skeleton for both the time-grid and day-grid.
	    renderIntroHtml: function () {
	        var view = this.view;
	        return '<td class="fc-axis" ' + view.axisStyleAttr() + '></td>';
	    }
	};
	// Will customize the rendering behavior of the AgendaView's dayGrid
	agendaDayGridMethods = {
	    // Generates the HTML that goes before the all-day cells
	    renderBgIntroHtml: function () {
	        var view = this.view;
	        return '' +
	            '<td class="fc-axis ' + view.calendar.theme.getClass('widgetContent') + '" ' + view.axisStyleAttr() + '>' +
	            '<span>' + // needed for matchCellWidths
	            view.getAllDayHtml() +
	            '</span>' +
	            '</td>';
	    },
	    // Generates the HTML that goes before all other types of cells.
	    // Affects content-skeleton, helper-skeleton, highlight-skeleton for both the time-grid and day-grid.
	    renderIntroHtml: function () {
	        var view = this.view;
	        return '<td class="fc-axis" ' + view.axisStyleAttr() + '></td>';
	    }
	};
	function groupEventFootprintsByAllDay(eventFootprints) {
	    var allDay = [];
	    var timed = [];
	    var i;
	    for (i = 0; i < eventFootprints.length; i++) {
	        if (eventFootprints[i].componentFootprint.isAllDay) {
	            allDay.push(eventFootprints[i]);
	        }
	        else {
	            timed.push(eventFootprints[i]);
	        }
	    }
	    return { allDay: allDay, timed: timed };
	}
	
	
	/***/ }),
	/* 239 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var $ = __webpack_require__(3);
	var moment = __webpack_require__(0);
	var util_1 = __webpack_require__(4);
	var InteractiveDateComponent_1 = __webpack_require__(42);
	var BusinessHourRenderer_1 = __webpack_require__(61);
	var StandardInteractionsMixin_1 = __webpack_require__(65);
	var DayTableMixin_1 = __webpack_require__(60);
	var CoordCache_1 = __webpack_require__(58);
	var UnzonedRange_1 = __webpack_require__(5);
	var ComponentFootprint_1 = __webpack_require__(12);
	var TimeGridEventRenderer_1 = __webpack_require__(240);
	var TimeGridHelperRenderer_1 = __webpack_require__(241);
	var TimeGridFillRenderer_1 = __webpack_require__(242);
	/* A component that renders one or more columns of vertical time slots
	----------------------------------------------------------------------------------------------------------------------*/
	// We mixin DayTable, even though there is only a single row of days
	// potential nice values for the slot-duration and interval-duration
	// from largest to smallest
	var AGENDA_STOCK_SUB_DURATIONS = [
	    { hours: 1 },
	    { minutes: 30 },
	    { minutes: 15 },
	    { seconds: 30 },
	    { seconds: 15 }
	];
	var TimeGrid = /** @class */ (function (_super) {
	    tslib_1.__extends(TimeGrid, _super);
	    function TimeGrid(view) {
	        var _this = _super.call(this, view) || this;
	        _this.processOptions();
	        return _this;
	    }
	    // Slices up the given span (unzoned start/end with other misc data) into an array of segments
	    TimeGrid.prototype.componentFootprintToSegs = function (componentFootprint) {
	        var segs = this.sliceRangeByTimes(componentFootprint.unzonedRange);
	        var i;
	        for (i = 0; i < segs.length; i++) {
	            if (this.isRTL) {
	                segs[i].col = this.daysPerRow - 1 - segs[i].dayIndex;
	            }
	            else {
	                segs[i].col = segs[i].dayIndex;
	            }
	        }
	        return segs;
	    };
	    /* Date Handling
	    ------------------------------------------------------------------------------------------------------------------*/
	    TimeGrid.prototype.sliceRangeByTimes = function (unzonedRange) {
	        var segs = [];
	        var segRange;
	        var dayIndex;
	        for (dayIndex = 0; dayIndex < this.daysPerRow; dayIndex++) {
	            segRange = unzonedRange.intersect(this.dayRanges[dayIndex]);
	            if (segRange) {
	                segs.push({
	                    startMs: segRange.startMs,
	                    endMs: segRange.endMs,
	                    isStart: segRange.isStart,
	                    isEnd: segRange.isEnd,
	                    dayIndex: dayIndex
	                });
	            }
	        }
	        return segs;
	    };
	    /* Options
	    ------------------------------------------------------------------------------------------------------------------*/
	    // Parses various options into properties of this object
	    TimeGrid.prototype.processOptions = function () {
	        var slotDuration = this.opt('slotDuration');
	        var snapDuration = this.opt('snapDuration');
	        var input;
	        slotDuration = moment.duration(slotDuration);
	        snapDuration = snapDuration ? moment.duration(snapDuration) : slotDuration;
	        this.slotDuration = slotDuration;
	        this.snapDuration = snapDuration;
	        this.snapsPerSlot = slotDuration / snapDuration; // TODO: ensure an integer multiple?
	        // might be an array value (for TimelineView).
	        // if so, getting the most granular entry (the last one probably).
	        input = this.opt('slotLabelFormat');
	        if ($.isArray(input)) {
	            input = input[input.length - 1];
	        }
	        this.labelFormat = input ||
	            this.opt('smallTimeFormat'); // the computed default
	        input = this.opt('slotLabelInterval');
	        this.labelInterval = input ?
	            moment.duration(input) :
	            this.computeLabelInterval(slotDuration);
	    };
	    // Computes an automatic value for slotLabelInterval
	    TimeGrid.prototype.computeLabelInterval = function (slotDuration) {
	        var i;
	        var labelInterval;
	        var slotsPerLabel;
	        // find the smallest stock label interval that results in more than one slots-per-label
	        for (i = AGENDA_STOCK_SUB_DURATIONS.length - 1; i >= 0; i--) {
	            labelInterval = moment.duration(AGENDA_STOCK_SUB_DURATIONS[i]);
	            slotsPerLabel = util_1.divideDurationByDuration(labelInterval, slotDuration);
	            if (util_1.isInt(slotsPerLabel) && slotsPerLabel > 1) {
	                return labelInterval;
	            }
	        }
	        return moment.duration(slotDuration); // fall back. clone
	    };
	    /* Date Rendering
	    ------------------------------------------------------------------------------------------------------------------*/
	    TimeGrid.prototype.renderDates = function (dateProfile) {
	        this.dateProfile = dateProfile;
	        this.updateDayTable();
	        this.renderSlats();
	        this.renderColumns();
	    };
	    TimeGrid.prototype.unrenderDates = function () {
	        // this.unrenderSlats(); // don't need this because repeated .html() calls clear
	        this.unrenderColumns();
	    };
	    TimeGrid.prototype.renderSkeleton = function () {
	        var theme = this.view.calendar.theme;
	        this.el.html('<div class="fc-bg"></div>' +
	            '<div class="fc-slats"></div>' +
	            '<hr class="fc-divider ' + theme.getClass('widgetHeader') + '" style="display:none"></hr>');
	        this.bottomRuleEl = this.el.find('hr');
	    };
	    TimeGrid.prototype.renderSlats = function () {
	        var theme = this.view.calendar.theme;
	        this.slatContainerEl = this.el.find('> .fc-slats')
	            .html(// avoids needing ::unrenderSlats()
	        '<table class="' + theme.getClass('tableGrid') + '">' +
	            this.renderSlatRowHtml() +
	            '</table>');
	        this.slatEls = this.slatContainerEl.find('tr');
	        this.slatCoordCache = new CoordCache_1.default({
	            els: this.slatEls,
	            isVertical: true
	        });
	    };
	    // Generates the HTML for the horizontal "slats" that run width-wise. Has a time axis on a side. Depends on RTL.
	    TimeGrid.prototype.renderSlatRowHtml = function () {
	        var view = this.view;
	        var calendar = view.calendar;
	        var theme = calendar.theme;
	        var isRTL = this.isRTL;
	        var dateProfile = this.dateProfile;
	        var html = '';
	        var slotTime = moment.duration(+dateProfile.minTime); // wish there was .clone() for durations
	        var slotIterator = moment.duration(0);
	        var slotDate; // will be on the view's first day, but we only care about its time
	        var isLabeled;
	        var axisHtml;
	        // Calculate the time for each slot
	        while (slotTime < dateProfile.maxTime) {
	            slotDate = calendar.msToUtcMoment(dateProfile.renderUnzonedRange.startMs).time(slotTime);
	            isLabeled = util_1.isInt(util_1.divideDurationByDuration(slotIterator, this.labelInterval));
	            axisHtml =
	                '<td class="fc-axis fc-time ' + theme.getClass('widgetContent') + '" ' + view.axisStyleAttr() + '>' +
	                    (isLabeled ?
	                        '<span>' + // for matchCellWidths
	                            util_1.htmlEscape(slotDate.format(this.labelFormat)) +
	                            '</span>' :
	                        '') +
	                    '</td>';
	            html +=
	                '<tr data-time="' + slotDate.format('HH:mm:ss') + '"' +
	                    (isLabeled ? '' : ' class="fc-minor"') +
	                    '>' +
	                    (!isRTL ? axisHtml : '') +
	                    '<td class="' + theme.getClass('widgetContent') + '"></td>' +
	                    (isRTL ? axisHtml : '') +
	                    '</tr>';
	            slotTime.add(this.slotDuration);
	            slotIterator.add(this.slotDuration);
	        }
	        return html;
	    };
	    TimeGrid.prototype.renderColumns = function () {
	        var dateProfile = this.dateProfile;
	        var theme = this.view.calendar.theme;
	        this.dayRanges = this.dayDates.map(function (dayDate) {
	            return new UnzonedRange_1.default(dayDate.clone().add(dateProfile.minTime), dayDate.clone().add(dateProfile.maxTime));
	        });
	        if (this.headContainerEl) {
	            this.headContainerEl.html(this.renderHeadHtml());
	        }
	        this.el.find('> .fc-bg').html('<table class="' + theme.getClass('tableGrid') + '">' +
	            this.renderBgTrHtml(0) + // row=0
	            '</table>');
	        this.colEls = this.el.find('.fc-day, .fc-disabled-day');
	        this.colCoordCache = new CoordCache_1.default({
	            els: this.colEls,
	            isHorizontal: true
	        });
	        this.renderContentSkeleton();
	    };
	    TimeGrid.prototype.unrenderColumns = function () {
	        this.unrenderContentSkeleton();
	    };
	    /* Content Skeleton
	    ------------------------------------------------------------------------------------------------------------------*/
	    // Renders the DOM that the view's content will live in
	    TimeGrid.prototype.renderContentSkeleton = function () {
	        var cellHtml = '';
	        var i;
	        var skeletonEl;
	        for (i = 0; i < this.colCnt; i++) {
	            cellHtml +=
	                '<td>' +
	                    '<div class="fc-content-col">' +
	                    '<div class="fc-event-container fc-helper-container"></div>' +
	                    '<div class="fc-event-container"></div>' +
	                    '<div class="fc-highlight-container"></div>' +
	                    '<div class="fc-bgevent-container"></div>' +
	                    '<div class="fc-business-container"></div>' +
	                    '</div>' +
	                    '</td>';
	        }
	        skeletonEl = this.contentSkeletonEl = $('<div class="fc-content-skeleton">' +
	            '<table>' +
	            '<tr>' + cellHtml + '</tr>' +
	            '</table>' +
	            '</div>');
	        this.colContainerEls = skeletonEl.find('.fc-content-col');
	        this.helperContainerEls = skeletonEl.find('.fc-helper-container');
	        this.fgContainerEls = skeletonEl.find('.fc-event-container:not(.fc-helper-container)');
	        this.bgContainerEls = skeletonEl.find('.fc-bgevent-container');
	        this.highlightContainerEls = skeletonEl.find('.fc-highlight-container');
	        this.businessContainerEls = skeletonEl.find('.fc-business-container');
	        this.bookendCells(skeletonEl.find('tr')); // TODO: do this on string level
	        this.el.append(skeletonEl);
	    };
	    TimeGrid.prototype.unrenderContentSkeleton = function () {
	        if (this.contentSkeletonEl) { // defensive :(
	            this.contentSkeletonEl.remove();
	            this.contentSkeletonEl = null;
	            this.colContainerEls = null;
	            this.helperContainerEls = null;
	            this.fgContainerEls = null;
	            this.bgContainerEls = null;
	            this.highlightContainerEls = null;
	            this.businessContainerEls = null;
	        }
	    };
	    // Given a flat array of segments, return an array of sub-arrays, grouped by each segment's col
	    TimeGrid.prototype.groupSegsByCol = function (segs) {
	        var segsByCol = [];
	        var i;
	        for (i = 0; i < this.colCnt; i++) {
	            segsByCol.push([]);
	        }
	        for (i = 0; i < segs.length; i++) {
	            segsByCol[segs[i].col].push(segs[i]);
	        }
	        return segsByCol;
	    };
	    // Given segments grouped by column, insert the segments' elements into a parallel array of container
	    // elements, each living within a column.
	    TimeGrid.prototype.attachSegsByCol = function (segsByCol, containerEls) {
	        var col;
	        var segs;
	        var i;
	        for (col = 0; col < this.colCnt; col++) { // iterate each column grouping
	            segs = segsByCol[col];
	            for (i = 0; i < segs.length; i++) {
	                containerEls.eq(col).append(segs[i].el);
	            }
	        }
	    };
	    /* Now Indicator
	    ------------------------------------------------------------------------------------------------------------------*/
	    TimeGrid.prototype.getNowIndicatorUnit = function () {
	        return 'minute'; // will refresh on the minute
	    };
	    TimeGrid.prototype.renderNowIndicator = function (date) {
	        // HACK: if date columns not ready for some reason (scheduler)
	        if (!this.colContainerEls) {
	            return;
	        }
	        // seg system might be overkill, but it handles scenario where line needs to be rendered
	        //  more than once because of columns with the same date (resources columns for example)
	        var segs = this.componentFootprintToSegs(new ComponentFootprint_1.default(new UnzonedRange_1.default(date, date.valueOf() + 1), // protect against null range
	        false // all-day
	        ));
	        var top = this.computeDateTop(date, date);
	        var nodes = [];
	        var i;
	        // render lines within the columns
	        for (i = 0; i < segs.length; i++) {
	            nodes.push($('<div class="fc-now-indicator fc-now-indicator-line"></div>')
	                .css('top', top)
	                .appendTo(this.colContainerEls.eq(segs[i].col))[0]);
	        }
	        // render an arrow over the axis
	        if (segs.length > 0) { // is the current time in view?
	            nodes.push($('<div class="fc-now-indicator fc-now-indicator-arrow"></div>')
	                .css('top', top)
	                .appendTo(this.el.find('.fc-content-skeleton'))[0]);
	        }
	        this.nowIndicatorEls = $(nodes);
	    };
	    TimeGrid.prototype.unrenderNowIndicator = function () {
	        if (this.nowIndicatorEls) {
	            this.nowIndicatorEls.remove();
	            this.nowIndicatorEls = null;
	        }
	    };
	    /* Coordinates
	    ------------------------------------------------------------------------------------------------------------------*/
	    TimeGrid.prototype.updateSize = function (totalHeight, isAuto, isResize) {
	        _super.prototype.updateSize.call(this, totalHeight, isAuto, isResize);
	        this.slatCoordCache.build();
	        if (isResize) {
	            this.updateSegVerticals([].concat(this.eventRenderer.getSegs(), this.businessSegs || []));
	        }
	    };
	    TimeGrid.prototype.getTotalSlatHeight = function () {
	        return this.slatContainerEl.outerHeight();
	    };
	    // Computes the top coordinate, relative to the bounds of the grid, of the given date.
	    // `ms` can be a millisecond UTC time OR a UTC moment.
	    // A `startOfDayDate` must be given for avoiding ambiguity over how to treat midnight.
	    TimeGrid.prototype.computeDateTop = function (ms, startOfDayDate) {
	        return this.computeTimeTop(moment.duration(ms - startOfDayDate.clone().stripTime()));
	    };
	    // Computes the top coordinate, relative to the bounds of the grid, of the given time (a Duration).
	    TimeGrid.prototype.computeTimeTop = function (time) {
	        var len = this.slatEls.length;
	        var dateProfile = this.dateProfile;
	        var slatCoverage = (time - dateProfile.minTime) / this.slotDuration; // floating-point value of # of slots covered
	        var slatIndex;
	        var slatRemainder;
	        // compute a floating-point number for how many slats should be progressed through.
	        // from 0 to number of slats (inclusive)
	        // constrained because minTime/maxTime might be customized.
	        slatCoverage = Math.max(0, slatCoverage);
	        slatCoverage = Math.min(len, slatCoverage);
	        // an integer index of the furthest whole slat
	        // from 0 to number slats (*exclusive*, so len-1)
	        slatIndex = Math.floor(slatCoverage);
	        slatIndex = Math.min(slatIndex, len - 1);
	        // how much further through the slatIndex slat (from 0.0-1.0) must be covered in addition.
	        // could be 1.0 if slatCoverage is covering *all* the slots
	        slatRemainder = slatCoverage - slatIndex;
	        return this.slatCoordCache.getTopPosition(slatIndex) +
	            this.slatCoordCache.getHeight(slatIndex) * slatRemainder;
	    };
	    // Refreshes the CSS top/bottom coordinates for each segment element.
	    // Works when called after initial render, after a window resize/zoom for example.
	    TimeGrid.prototype.updateSegVerticals = function (segs) {
	        this.computeSegVerticals(segs);
	        this.assignSegVerticals(segs);
	    };
	    // For each segment in an array, computes and assigns its top and bottom properties
	    TimeGrid.prototype.computeSegVerticals = function (segs) {
	        var eventMinHeight = this.opt('agendaEventMinHeight');
	        var i;
	        var seg;
	        var dayDate;
	        for (i = 0; i < segs.length; i++) {
	            seg = segs[i];
	            dayDate = this.dayDates[seg.dayIndex];
	            seg.top = this.computeDateTop(seg.startMs, dayDate);
	            seg.bottom = Math.max(seg.top + eventMinHeight, this.computeDateTop(seg.endMs, dayDate));
	        }
	    };
	    // Given segments that already have their top/bottom properties computed, applies those values to
	    // the segments' elements.
	    TimeGrid.prototype.assignSegVerticals = function (segs) {
	        var i;
	        var seg;
	        for (i = 0; i < segs.length; i++) {
	            seg = segs[i];
	            seg.el.css(this.generateSegVerticalCss(seg));
	        }
	    };
	    // Generates an object with CSS properties for the top/bottom coordinates of a segment element
	    TimeGrid.prototype.generateSegVerticalCss = function (seg) {
	        return {
	            top: seg.top,
	            bottom: -seg.bottom // flipped because needs to be space beyond bottom edge of event container
	        };
	    };
	    /* Hit System
	    ------------------------------------------------------------------------------------------------------------------*/
	    TimeGrid.prototype.prepareHits = function () {
	        this.colCoordCache.build();
	        this.slatCoordCache.build();
	    };
	    TimeGrid.prototype.releaseHits = function () {
	        this.colCoordCache.clear();
	        // NOTE: don't clear slatCoordCache because we rely on it for computeTimeTop
	    };
	    TimeGrid.prototype.queryHit = function (leftOffset, topOffset) {
	        var snapsPerSlot = this.snapsPerSlot;
	        var colCoordCache = this.colCoordCache;
	        var slatCoordCache = this.slatCoordCache;
	        if (colCoordCache.isLeftInBounds(leftOffset) && slatCoordCache.isTopInBounds(topOffset)) {
	            var colIndex = colCoordCache.getHorizontalIndex(leftOffset);
	            var slatIndex = slatCoordCache.getVerticalIndex(topOffset);
	            if (colIndex != null && slatIndex != null) {
	                var slatTop = slatCoordCache.getTopOffset(slatIndex);
	                var slatHeight = slatCoordCache.getHeight(slatIndex);
	                var partial = (topOffset - slatTop) / slatHeight; // floating point number between 0 and 1
	                var localSnapIndex = Math.floor(partial * snapsPerSlot); // the snap # relative to start of slat
	                var snapIndex = slatIndex * snapsPerSlot + localSnapIndex;
	                var snapTop = slatTop + (localSnapIndex / snapsPerSlot) * slatHeight;
	                var snapBottom = slatTop + ((localSnapIndex + 1) / snapsPerSlot) * slatHeight;
	                return {
	                    col: colIndex,
	                    snap: snapIndex,
	                    component: this,
	                    left: colCoordCache.getLeftOffset(colIndex),
	                    right: colCoordCache.getRightOffset(colIndex),
	                    top: snapTop,
	                    bottom: snapBottom
	                };
	            }
	        }
	    };
	    TimeGrid.prototype.getHitFootprint = function (hit) {
	        var start = this.getCellDate(0, hit.col); // row=0
	        var time = this.computeSnapTime(hit.snap); // pass in the snap-index
	        var end;
	        start.time(time);
	        end = start.clone().add(this.snapDuration);
	        return new ComponentFootprint_1.default(new UnzonedRange_1.default(start, end), false // all-day?
	        );
	    };
	    // Given a row number of the grid, representing a "snap", returns a time (Duration) from its start-of-day
	    TimeGrid.prototype.computeSnapTime = function (snapIndex) {
	        return moment.duration(this.dateProfile.minTime + this.snapDuration * snapIndex);
	    };
	    TimeGrid.prototype.getHitEl = function (hit) {
	        return this.colEls.eq(hit.col);
	    };
	    /* Event Drag Visualization
	    ------------------------------------------------------------------------------------------------------------------*/
	    // Renders a visual indication of an event being dragged over the specified date(s).
	    // A returned value of `true` signals that a mock "helper" event has been rendered.
	    TimeGrid.prototype.renderDrag = function (eventFootprints, seg, isTouch) {
	        var i;
	        if (seg) { // if there is event information for this drag, render a helper event
	            if (eventFootprints.length) {
	                this.helperRenderer.renderEventDraggingFootprints(eventFootprints, seg, isTouch);
	                // signal that a helper has been rendered
	                return true;
	            }
	        }
	        else { // otherwise, just render a highlight
	            for (i = 0; i < eventFootprints.length; i++) {
	                this.renderHighlight(eventFootprints[i].componentFootprint);
	            }
	        }
	    };
	    // Unrenders any visual indication of an event being dragged
	    TimeGrid.prototype.unrenderDrag = function () {
	        this.unrenderHighlight();
	        this.helperRenderer.unrender();
	    };
	    /* Event Resize Visualization
	    ------------------------------------------------------------------------------------------------------------------*/
	    // Renders a visual indication of an event being resized
	    TimeGrid.prototype.renderEventResize = function (eventFootprints, seg, isTouch) {
	        this.helperRenderer.renderEventResizingFootprints(eventFootprints, seg, isTouch);
	    };
	    // Unrenders any visual indication of an event being resized
	    TimeGrid.prototype.unrenderEventResize = function () {
	        this.helperRenderer.unrender();
	    };
	    /* Selection
	    ------------------------------------------------------------------------------------------------------------------*/
	    // Renders a visual indication of a selection. Overrides the default, which was to simply render a highlight.
	    TimeGrid.prototype.renderSelectionFootprint = function (componentFootprint) {
	        if (this.opt('selectHelper')) { // this setting signals that a mock helper event should be rendered
	            this.helperRenderer.renderComponentFootprint(componentFootprint);
	        }
	        else {
	            this.renderHighlight(componentFootprint);
	        }
	    };
	    // Unrenders any visual indication of a selection
	    TimeGrid.prototype.unrenderSelection = function () {
	        this.helperRenderer.unrender();
	        this.unrenderHighlight();
	    };
	    return TimeGrid;
	}(InteractiveDateComponent_1.default));
	exports.default = TimeGrid;
	TimeGrid.prototype.eventRendererClass = TimeGridEventRenderer_1.default;
	TimeGrid.prototype.businessHourRendererClass = BusinessHourRenderer_1.default;
	TimeGrid.prototype.helperRendererClass = TimeGridHelperRenderer_1.default;
	TimeGrid.prototype.fillRendererClass = TimeGridFillRenderer_1.default;
	StandardInteractionsMixin_1.default.mixInto(TimeGrid);
	DayTableMixin_1.default.mixInto(TimeGrid);
	
	
	/***/ }),
	/* 240 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var util_1 = __webpack_require__(4);
	var EventRenderer_1 = __webpack_require__(44);
	/*
	Only handles foreground segs.
	Does not own rendering. Use for low-level util methods by TimeGrid.
	*/
	var TimeGridEventRenderer = /** @class */ (function (_super) {
	    tslib_1.__extends(TimeGridEventRenderer, _super);
	    function TimeGridEventRenderer(timeGrid, fillRenderer) {
	        var _this = _super.call(this, timeGrid, fillRenderer) || this;
	        _this.timeGrid = timeGrid;
	        return _this;
	    }
	    TimeGridEventRenderer.prototype.renderFgSegs = function (segs) {
	        this.renderFgSegsIntoContainers(segs, this.timeGrid.fgContainerEls);
	    };
	    // Given an array of foreground segments, render a DOM element for each, computes position,
	    // and attaches to the column inner-container elements.
	    TimeGridEventRenderer.prototype.renderFgSegsIntoContainers = function (segs, containerEls) {
	        var segsByCol;
	        var col;
	        segsByCol = this.timeGrid.groupSegsByCol(segs);
	        for (col = 0; col < this.timeGrid.colCnt; col++) {
	            this.updateFgSegCoords(segsByCol[col]);
	        }
	        this.timeGrid.attachSegsByCol(segsByCol, containerEls);
	    };
	    TimeGridEventRenderer.prototype.unrenderFgSegs = function () {
	        if (this.fgSegs) { // hack
	            this.fgSegs.forEach(function (seg) {
	                seg.el.remove();
	            });
	        }
	    };
	    // Computes a default event time formatting string if `timeFormat` is not explicitly defined
	    TimeGridEventRenderer.prototype.computeEventTimeFormat = function () {
	        return this.opt('noMeridiemTimeFormat'); // like "6:30" (no AM/PM)
	    };
	    // Computes a default `displayEventEnd` value if one is not expliclty defined
	    TimeGridEventRenderer.prototype.computeDisplayEventEnd = function () {
	        return true;
	    };
	    // Renders the HTML for a single event segment's default rendering
	    TimeGridEventRenderer.prototype.fgSegHtml = function (seg, disableResizing) {
	        var view = this.view;
	        var calendar = view.calendar;
	        var componentFootprint = seg.footprint.componentFootprint;
	        var isAllDay = componentFootprint.isAllDay;
	        var eventDef = seg.footprint.eventDef;
	        var isDraggable = view.isEventDefDraggable(eventDef);
	        var isResizableFromStart = !disableResizing && seg.isStart && view.isEventDefResizableFromStart(eventDef);
	        var isResizableFromEnd = !disableResizing && seg.isEnd && view.isEventDefResizableFromEnd(eventDef);
	        var classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd);
	        var skinCss = util_1.cssToStr(this.getSkinCss(eventDef));
	        var timeText;
	        var fullTimeText; // more verbose time text. for the print stylesheet
	        var startTimeText; // just the start time text
	        classes.unshift('fc-time-grid-event', 'fc-v-event');
	        // if the event appears to span more than one day...
	        if (view.isMultiDayRange(componentFootprint.unzonedRange)) {
	            // Don't display time text on segments that run entirely through a day.
	            // That would appear as midnight-midnight and would look dumb.
	            // Otherwise, display the time text for the *segment's* times (like 6pm-midnight or midnight-10am)
	            if (seg.isStart || seg.isEnd) {
	                var zonedStart = calendar.msToMoment(seg.startMs);
	                var zonedEnd = calendar.msToMoment(seg.endMs);
	                timeText = this._getTimeText(zonedStart, zonedEnd, isAllDay);
	                fullTimeText = this._getTimeText(zonedStart, zonedEnd, isAllDay, 'LT');
	                startTimeText = this._getTimeText(zonedStart, zonedEnd, isAllDay, null, false); // displayEnd=false
	            }
	        }
	        else {
	            // Display the normal time text for the *event's* times
	            timeText = this.getTimeText(seg.footprint);
	            fullTimeText = this.getTimeText(seg.footprint, 'LT');
	            startTimeText = this.getTimeText(seg.footprint, null, false); // displayEnd=false
	        }
	        return '<a class="' + classes.join(' ') + '"' +
	            (eventDef.url ?
	                ' href="' + util_1.htmlEscape(eventDef.url) + '"' :
	                '') +
	            (skinCss ?
	                ' style="' + skinCss + '"' :
	                '') +
	            '>' +
	            '<div class="fc-content">' +
	            (timeText ?
	                '<div class="fc-time"' +
	                    ' data-start="' + util_1.htmlEscape(startTimeText) + '"' +
	                    ' data-full="' + util_1.htmlEscape(fullTimeText) + '"' +
	                    '>' +
	                    '<span>' + util_1.htmlEscape(timeText) + '</span>' +
	                    '</div>' :
	                '') +
	            (eventDef.title ?
	                '<div class="fc-title">' +
	                    util_1.htmlEscape(eventDef.title) +
	                    '</div>' :
	                '') +
	            '</div>' +
	            '<div class="fc-bg"></div>' +
	            /* TODO: write CSS for this
	            (isResizableFromStart ?
	              '<div class="fc-resizer fc-start-resizer"></div>' :
	              ''
	              ) +
	            */
	            (isResizableFromEnd ?
	                '<div class="fc-resizer fc-end-resizer"></div>' :
	                '') +
	            '</a>';
	    };
	    // Given segments that are assumed to all live in the *same column*,
	    // compute their verical/horizontal coordinates and assign to their elements.
	    TimeGridEventRenderer.prototype.updateFgSegCoords = function (segs) {
	        this.timeGrid.computeSegVerticals(segs); // horizontals relies on this
	        this.computeFgSegHorizontals(segs); // compute horizontal coordinates, z-index's, and reorder the array
	        this.timeGrid.assignSegVerticals(segs);
	        this.assignFgSegHorizontals(segs);
	    };
	    // Given an array of segments that are all in the same column, sets the backwardCoord and forwardCoord on each.
	    // NOTE: Also reorders the given array by date!
	    TimeGridEventRenderer.prototype.computeFgSegHorizontals = function (segs) {
	        var levels;
	        var level0;
	        var i;
	        this.sortEventSegs(segs); // order by certain criteria
	        levels = buildSlotSegLevels(segs);
	        computeForwardSlotSegs(levels);
	        if ((level0 = levels[0])) {
	            for (i = 0; i < level0.length; i++) {
	                computeSlotSegPressures(level0[i]);
	            }
	            for (i = 0; i < level0.length; i++) {
	                this.computeFgSegForwardBack(level0[i], 0, 0);
	            }
	        }
	    };
	    // Calculate seg.forwardCoord and seg.backwardCoord for the segment, where both values range
	    // from 0 to 1. If the calendar is left-to-right, the seg.backwardCoord maps to "left" and
	    // seg.forwardCoord maps to "right" (via percentage). Vice-versa if the calendar is right-to-left.
	    //
	    // The segment might be part of a "series", which means consecutive segments with the same pressure
	    // who's width is unknown until an edge has been hit. `seriesBackwardPressure` is the number of
	    // segments behind this one in the current series, and `seriesBackwardCoord` is the starting
	    // coordinate of the first segment in the series.
	    TimeGridEventRenderer.prototype.computeFgSegForwardBack = function (seg, seriesBackwardPressure, seriesBackwardCoord) {
	        var forwardSegs = seg.forwardSegs;
	        var i;
	        if (seg.forwardCoord === undefined) { // not already computed
	            if (!forwardSegs.length) {
	                // if there are no forward segments, this segment should butt up against the edge
	                seg.forwardCoord = 1;
	            }
	            else {
	                // sort highest pressure first
	                this.sortForwardSegs(forwardSegs);
	                // this segment's forwardCoord will be calculated from the backwardCoord of the
	                // highest-pressure forward segment.
	                this.computeFgSegForwardBack(forwardSegs[0], seriesBackwardPressure + 1, seriesBackwardCoord);
	                seg.forwardCoord = forwardSegs[0].backwardCoord;
	            }
	            // calculate the backwardCoord from the forwardCoord. consider the series
	            seg.backwardCoord = seg.forwardCoord -
	                (seg.forwardCoord - seriesBackwardCoord) / // available width for series
	                    (seriesBackwardPressure + 1); // # of segments in the series
	            // use this segment's coordinates to computed the coordinates of the less-pressurized
	            // forward segments
	            for (i = 0; i < forwardSegs.length; i++) {
	                this.computeFgSegForwardBack(forwardSegs[i], 0, seg.forwardCoord);
	            }
	        }
	    };
	    TimeGridEventRenderer.prototype.sortForwardSegs = function (forwardSegs) {
	        forwardSegs.sort(util_1.proxy(this, 'compareForwardSegs'));
	    };
	    // A cmp function for determining which forward segment to rely on more when computing coordinates.
	    TimeGridEventRenderer.prototype.compareForwardSegs = function (seg1, seg2) {
	        // put higher-pressure first
	        return seg2.forwardPressure - seg1.forwardPressure ||
	            // put segments that are closer to initial edge first (and favor ones with no coords yet)
	            (seg1.backwardCoord || 0) - (seg2.backwardCoord || 0) ||
	            // do normal sorting...
	            this.compareEventSegs(seg1, seg2);
	    };
	    // Given foreground event segments that have already had their position coordinates computed,
	    // assigns position-related CSS values to their elements.
	    TimeGridEventRenderer.prototype.assignFgSegHorizontals = function (segs) {
	        var i;
	        var seg;
	        for (i = 0; i < segs.length; i++) {
	            seg = segs[i];
	            seg.el.css(this.generateFgSegHorizontalCss(seg));
	            // if the event is short that the title will be cut off,
	            // attach a className that condenses the title into the time area.
	            if (seg.footprint.eventDef.title && seg.bottom - seg.top < 30) {
	                seg.el.addClass('fc-short'); // TODO: "condensed" is a better name
	            }
	        }
	    };
	    // Generates an object with CSS properties/values that should be applied to an event segment element.
	    // Contains important positioning-related properties that should be applied to any event element, customized or not.
	    TimeGridEventRenderer.prototype.generateFgSegHorizontalCss = function (seg) {
	        var shouldOverlap = this.opt('slotEventOverlap');
	        var backwardCoord = seg.backwardCoord; // the left side if LTR. the right side if RTL. floating-point
	        var forwardCoord = seg.forwardCoord; // the right side if LTR. the left side if RTL. floating-point
	        var props = this.timeGrid.generateSegVerticalCss(seg); // get top/bottom first
	        var isRTL = this.timeGrid.isRTL;
	        var left; // amount of space from left edge, a fraction of the total width
	        var right; // amount of space from right edge, a fraction of the total width
	        if (shouldOverlap) {
	            // double the width, but don't go beyond the maximum forward coordinate (1.0)
	            forwardCoord = Math.min(1, backwardCoord + (forwardCoord - backwardCoord) * 2);
	        }
	        if (isRTL) {
	            left = 1 - forwardCoord;
	            right = backwardCoord;
	        }
	        else {
	            left = backwardCoord;
	            right = 1 - forwardCoord;
	        }
	        props.zIndex = seg.level + 1; // convert from 0-base to 1-based
	        props.left = left * 100 + '%';
	        props.right = right * 100 + '%';
	        if (shouldOverlap && seg.forwardPressure) {
	            // add padding to the edge so that forward stacked events don't cover the resizer's icon
	            props[isRTL ? 'marginLeft' : 'marginRight'] = 10 * 2; // 10 is a guesstimate of the icon's width
	        }
	        return props;
	    };
	    return TimeGridEventRenderer;
	}(EventRenderer_1.default));
	exports.default = TimeGridEventRenderer;
	// Builds an array of segments "levels". The first level will be the leftmost tier of segments if the calendar is
	// left-to-right, or the rightmost if the calendar is right-to-left. Assumes the segments are already ordered by date.
	function buildSlotSegLevels(segs) {
	    var levels = [];
	    var i;
	    var seg;
	    var j;
	    for (i = 0; i < segs.length; i++) {
	        seg = segs[i];
	        // go through all the levels and stop on the first level where there are no collisions
	        for (j = 0; j < levels.length; j++) {
	            if (!computeSlotSegCollisions(seg, levels[j]).length) {
	                break;
	            }
	        }
	        seg.level = j;
	        (levels[j] || (levels[j] = [])).push(seg);
	    }
	    return levels;
	}
	// For every segment, figure out the other segments that are in subsequent
	// levels that also occupy the same vertical space. Accumulate in seg.forwardSegs
	function computeForwardSlotSegs(levels) {
	    var i;
	    var level;
	    var j;
	    var seg;
	    var k;
	    for (i = 0; i < levels.length; i++) {
	        level = levels[i];
	        for (j = 0; j < level.length; j++) {
	            seg = level[j];
	            seg.forwardSegs = [];
	            for (k = i + 1; k < levels.length; k++) {
	                computeSlotSegCollisions(seg, levels[k], seg.forwardSegs);
	            }
	        }
	    }
	}
	// Figure out which path forward (via seg.forwardSegs) results in the longest path until
	// the furthest edge is reached. The number of segments in this path will be seg.forwardPressure
	function computeSlotSegPressures(seg) {
	    var forwardSegs = seg.forwardSegs;
	    var forwardPressure = 0;
	    var i;
	    var forwardSeg;
	    if (seg.forwardPressure === undefined) { // not already computed
	        for (i = 0; i < forwardSegs.length; i++) {
	            forwardSeg = forwardSegs[i];
	            // figure out the child's maximum forward path
	            computeSlotSegPressures(forwardSeg);
	            // either use the existing maximum, or use the child's forward pressure
	            // plus one (for the forwardSeg itself)
	            forwardPressure = Math.max(forwardPressure, 1 + forwardSeg.forwardPressure);
	        }
	        seg.forwardPressure = forwardPressure;
	    }
	}
	// Find all the segments in `otherSegs` that vertically collide with `seg`.
	// Append into an optionally-supplied `results` array and return.
	function computeSlotSegCollisions(seg, otherSegs, results) {
	    if (results === void 0) { results = []; }
	    for (var i = 0; i < otherSegs.length; i++) {
	        if (isSlotSegCollision(seg, otherSegs[i])) {
	            results.push(otherSegs[i]);
	        }
	    }
	    return results;
	}
	// Do these segments occupy the same vertical space?
	function isSlotSegCollision(seg1, seg2) {
	    return seg1.bottom > seg2.top && seg1.top < seg2.bottom;
	}
	
	
	/***/ }),
	/* 241 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var $ = __webpack_require__(3);
	var HelperRenderer_1 = __webpack_require__(63);
	var TimeGridHelperRenderer = /** @class */ (function (_super) {
	    tslib_1.__extends(TimeGridHelperRenderer, _super);
	    function TimeGridHelperRenderer() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    TimeGridHelperRenderer.prototype.renderSegs = function (segs, sourceSeg) {
	        var helperNodes = [];
	        var i;
	        var seg;
	        var sourceEl;
	        // TODO: not good to call eventRenderer this way
	        this.eventRenderer.renderFgSegsIntoContainers(segs, this.component.helperContainerEls);
	        // Try to make the segment that is in the same row as sourceSeg look the same
	        for (i = 0; i < segs.length; i++) {
	            seg = segs[i];
	            if (sourceSeg && sourceSeg.col === seg.col) {
	                sourceEl = sourceSeg.el;
	                seg.el.css({
	                    left: sourceEl.css('left'),
	                    right: sourceEl.css('right'),
	                    'margin-left': sourceEl.css('margin-left'),
	                    'margin-right': sourceEl.css('margin-right')
	                });
	            }
	            helperNodes.push(seg.el[0]);
	        }
	        return $(helperNodes); // must return the elements rendered
	    };
	    return TimeGridHelperRenderer;
	}(HelperRenderer_1.default));
	exports.default = TimeGridHelperRenderer;
	
	
	/***/ }),
	/* 242 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var FillRenderer_1 = __webpack_require__(62);
	var TimeGridFillRenderer = /** @class */ (function (_super) {
	    tslib_1.__extends(TimeGridFillRenderer, _super);
	    function TimeGridFillRenderer() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    TimeGridFillRenderer.prototype.attachSegEls = function (type, segs) {
	        var timeGrid = this.component;
	        var containerEls;
	        // TODO: more efficient lookup
	        if (type === 'bgEvent') {
	            containerEls = timeGrid.bgContainerEls;
	        }
	        else if (type === 'businessHours') {
	            containerEls = timeGrid.businessContainerEls;
	        }
	        else if (type === 'highlight') {
	            containerEls = timeGrid.highlightContainerEls;
	        }
	        timeGrid.updateSegVerticals(segs);
	        timeGrid.attachSegsByCol(timeGrid.groupSegsByCol(segs), containerEls);
	        return segs.map(function (seg) {
	            return seg.el[0];
	        });
	    };
	    return TimeGridFillRenderer;
	}(FillRenderer_1.default));
	exports.default = TimeGridFillRenderer;
	
	
	/***/ }),
	/* 243 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var $ = __webpack_require__(3);
	var util_1 = __webpack_require__(4);
	var EventRenderer_1 = __webpack_require__(44);
	/* Event-rendering methods for the DayGrid class
	----------------------------------------------------------------------------------------------------------------------*/
	var DayGridEventRenderer = /** @class */ (function (_super) {
	    tslib_1.__extends(DayGridEventRenderer, _super);
	    function DayGridEventRenderer(dayGrid, fillRenderer) {
	        var _this = _super.call(this, dayGrid, fillRenderer) || this;
	        _this.dayGrid = dayGrid;
	        return _this;
	    }
	    DayGridEventRenderer.prototype.renderBgRanges = function (eventRanges) {
	        // don't render timed background events
	        eventRanges = $.grep(eventRanges, function (eventRange) {
	            return eventRange.eventDef.isAllDay();
	        });
	        _super.prototype.renderBgRanges.call(this, eventRanges);
	    };
	    // Renders the given foreground event segments onto the grid
	    DayGridEventRenderer.prototype.renderFgSegs = function (segs) {
	        var rowStructs = this.rowStructs = this.renderSegRows(segs);
	        // append to each row's content skeleton
	        this.dayGrid.rowEls.each(function (i, rowNode) {
	            $(rowNode).find('.fc-content-skeleton > table').append(rowStructs[i].tbodyEl);
	        });
	    };
	    // Unrenders all currently rendered foreground event segments
	    DayGridEventRenderer.prototype.unrenderFgSegs = function () {
	        var rowStructs = this.rowStructs || [];
	        var rowStruct;
	        while ((rowStruct = rowStructs.pop())) {
	            rowStruct.tbodyEl.remove();
	        }
	        this.rowStructs = null;
	    };
	    // Uses the given events array to generate <tbody> elements that should be appended to each row's content skeleton.
	    // Returns an array of rowStruct objects (see the bottom of `renderSegRow`).
	    // PRECONDITION: each segment shoud already have a rendered and assigned `.el`
	    DayGridEventRenderer.prototype.renderSegRows = function (segs) {
	        var rowStructs = [];
	        var segRows;
	        var row;
	        segRows = this.groupSegRows(segs); // group into nested arrays
	        // iterate each row of segment groupings
	        for (row = 0; row < segRows.length; row++) {
	            rowStructs.push(this.renderSegRow(row, segRows[row]));
	        }
	        return rowStructs;
	    };
	    // Given a row # and an array of segments all in the same row, render a <tbody> element, a skeleton that contains
	    // the segments. Returns object with a bunch of internal data about how the render was calculated.
	    // NOTE: modifies rowSegs
	    DayGridEventRenderer.prototype.renderSegRow = function (row, rowSegs) {
	        var colCnt = this.dayGrid.colCnt;
	        var segLevels = this.buildSegLevels(rowSegs); // group into sub-arrays of levels
	        var levelCnt = Math.max(1, segLevels.length); // ensure at least one level
	        var tbody = $('<tbody>');
	        var segMatrix = []; // lookup for which segments are rendered into which level+col cells
	        var cellMatrix = []; // lookup for all <td> elements of the level+col matrix
	        var loneCellMatrix = []; // lookup for <td> elements that only take up a single column
	        var i;
	        var levelSegs;
	        var col;
	        var tr;
	        var j;
	        var seg;
	        var td;
	        // populates empty cells from the current column (`col`) to `endCol`
	        function emptyCellsUntil(endCol) {
	            while (col < endCol) {
	                // try to grab a cell from the level above and extend its rowspan. otherwise, create a fresh cell
	                td = (loneCellMatrix[i - 1] || [])[col];
	                if (td) {
	                    td.attr('rowspan', parseInt(td.attr('rowspan') || 1, 10) + 1);
	                }
	                else {
	                    td = $('<td>');
	                    tr.append(td);
	                }
	                cellMatrix[i][col] = td;
	                loneCellMatrix[i][col] = td;
	                col++;
	            }
	        }
	        for (i = 0; i < levelCnt; i++) { // iterate through all levels
	            levelSegs = segLevels[i];
	            col = 0;
	            tr = $('<tr>');
	            segMatrix.push([]);
	            cellMatrix.push([]);
	            loneCellMatrix.push([]);
	            // levelCnt might be 1 even though there are no actual levels. protect against this.
	            // this single empty row is useful for styling.
	            if (levelSegs) {
	                for (j = 0; j < levelSegs.length; j++) { // iterate through segments in level
	                    seg = levelSegs[j];
	                    emptyCellsUntil(seg.leftCol);
	                    // create a container that occupies or more columns. append the event element.
	                    td = $('<td class="fc-event-container">').append(seg.el);
	                    if (seg.leftCol !== seg.rightCol) {
	                        td.attr('colspan', seg.rightCol - seg.leftCol + 1);
	                    }
	                    else { // a single-column segment
	                        loneCellMatrix[i][col] = td;
	                    }
	                    while (col <= seg.rightCol) {
	                        cellMatrix[i][col] = td;
	                        segMatrix[i][col] = seg;
	                        col++;
	                    }
	                    tr.append(td);
	                }
	            }
	            emptyCellsUntil(colCnt); // finish off the row
	            this.dayGrid.bookendCells(tr);
	            tbody.append(tr);
	        }
	        return {
	            row: row,
	            tbodyEl: tbody,
	            cellMatrix: cellMatrix,
	            segMatrix: segMatrix,
	            segLevels: segLevels,
	            segs: rowSegs
	        };
	    };
	    // Stacks a flat array of segments, which are all assumed to be in the same row, into subarrays of vertical levels.
	    // NOTE: modifies segs
	    DayGridEventRenderer.prototype.buildSegLevels = function (segs) {
	        var levels = [];
	        var i;
	        var seg;
	        var j;
	        // Give preference to elements with certain criteria, so they have
	        // a chance to be closer to the top.
	        this.sortEventSegs(segs);
	        for (i = 0; i < segs.length; i++) {
	            seg = segs[i];
	            // loop through levels, starting with the topmost, until the segment doesn't collide with other segments
	            for (j = 0; j < levels.length; j++) {
	                if (!isDaySegCollision(seg, levels[j])) {
	                    break;
	                }
	            }
	            // `j` now holds the desired subrow index
	            seg.level = j;
	            // create new level array if needed and append segment
	            (levels[j] || (levels[j] = [])).push(seg);
	        }
	        // order segments left-to-right. very important if calendar is RTL
	        for (j = 0; j < levels.length; j++) {
	            levels[j].sort(compareDaySegCols);
	        }
	        return levels;
	    };
	    // Given a flat array of segments, return an array of sub-arrays, grouped by each segment's row
	    DayGridEventRenderer.prototype.groupSegRows = function (segs) {
	        var segRows = [];
	        var i;
	        for (i = 0; i < this.dayGrid.rowCnt; i++) {
	            segRows.push([]);
	        }
	        for (i = 0; i < segs.length; i++) {
	            segRows[segs[i].row].push(segs[i]);
	        }
	        return segRows;
	    };
	    // Computes a default event time formatting string if `timeFormat` is not explicitly defined
	    DayGridEventRenderer.prototype.computeEventTimeFormat = function () {
	        return this.opt('extraSmallTimeFormat'); // like "6p" or "6:30p"
	    };
	    // Computes a default `displayEventEnd` value if one is not expliclty defined
	    DayGridEventRenderer.prototype.computeDisplayEventEnd = function () {
	        return this.dayGrid.colCnt === 1; // we'll likely have space if there's only one day
	    };
	    // Builds the HTML to be used for the default element for an individual segment
	    DayGridEventRenderer.prototype.fgSegHtml = function (seg, disableResizing) {
	        var view = this.view;
	        var eventDef = seg.footprint.eventDef;
	        var isAllDay = seg.footprint.componentFootprint.isAllDay;
	        var isDraggable = view.isEventDefDraggable(eventDef);
	        var isResizableFromStart = !disableResizing && isAllDay &&
	            seg.isStart && view.isEventDefResizableFromStart(eventDef);
	        var isResizableFromEnd = !disableResizing && isAllDay &&
	            seg.isEnd && view.isEventDefResizableFromEnd(eventDef);
	        var classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd);
	        var skinCss = util_1.cssToStr(this.getSkinCss(eventDef));
	        var timeHtml = '';
	        var timeText;
	        var titleHtml;
	        classes.unshift('fc-day-grid-event', 'fc-h-event');
	        // Only display a timed events time if it is the starting segment
	        if (seg.isStart) {
	            timeText = this.getTimeText(seg.footprint);
	            if (timeText) {
	                timeHtml = '<span class="fc-time">' + util_1.htmlEscape(timeText) + '</span>';
	            }
	        }
	        titleHtml =
	            '<span class="fc-title">' +
	                (util_1.htmlEscape(eventDef.title || '') || '&nbsp;') + // we always want one line of height
	                '</span>';
	        return '<a class="' + classes.join(' ') + '"' +
	            (eventDef.url ?
	                ' href="' + util_1.htmlEscape(eventDef.url) + '"' :
	                '') +
	            (skinCss ?
	                ' style="' + skinCss + '"' :
	                '') +
	            '>' +
	            '<div class="fc-content">' +
	            (this.dayGrid.isRTL ?
	                titleHtml + ' ' + timeHtml : // put a natural space in between
	                timeHtml + ' ' + titleHtml //
	            ) +
	            '</div>' +
	            (isResizableFromStart ?
	                '<div class="fc-resizer fc-start-resizer"></div>' :
	                '') +
	            (isResizableFromEnd ?
	                '<div class="fc-resizer fc-end-resizer"></div>' :
	                '') +
	            '</a>';
	    };
	    return DayGridEventRenderer;
	}(EventRenderer_1.default));
	exports.default = DayGridEventRenderer;
	// Computes whether two segments' columns collide. They are assumed to be in the same row.
	function isDaySegCollision(seg, otherSegs) {
	    var i;
	    var otherSeg;
	    for (i = 0; i < otherSegs.length; i++) {
	        otherSeg = otherSegs[i];
	        if (otherSeg.leftCol <= seg.rightCol &&
	            otherSeg.rightCol >= seg.leftCol) {
	            return true;
	        }
	    }
	    return false;
	}
	// A cmp function for determining the leftmost event
	function compareDaySegCols(a, b) {
	    return a.leftCol - b.leftCol;
	}
	
	
	/***/ }),
	/* 244 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var $ = __webpack_require__(3);
	var HelperRenderer_1 = __webpack_require__(63);
	var DayGridHelperRenderer = /** @class */ (function (_super) {
	    tslib_1.__extends(DayGridHelperRenderer, _super);
	    function DayGridHelperRenderer() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    // Renders a mock "helper" event. `sourceSeg` is the associated internal segment object. It can be null.
	    DayGridHelperRenderer.prototype.renderSegs = function (segs, sourceSeg) {
	        var helperNodes = [];
	        var rowStructs;
	        // TODO: not good to call eventRenderer this way
	        rowStructs = this.eventRenderer.renderSegRows(segs);
	        // inject each new event skeleton into each associated row
	        this.component.rowEls.each(function (row, rowNode) {
	            var rowEl = $(rowNode); // the .fc-row
	            var skeletonEl = $('<div class="fc-helper-skeleton"><table></table></div>'); // will be absolutely positioned
	            var skeletonTopEl;
	            var skeletonTop;
	            // If there is an original segment, match the top position. Otherwise, put it at the row's top level
	            if (sourceSeg && sourceSeg.row === row) {
	                skeletonTop = sourceSeg.el.position().top;
	            }
	            else {
	                skeletonTopEl = rowEl.find('.fc-content-skeleton tbody');
	                if (!skeletonTopEl.length) { // when no events
	                    skeletonTopEl = rowEl.find('.fc-content-skeleton table');
	                }
	                skeletonTop = skeletonTopEl.position().top;
	            }
	            skeletonEl.css('top', skeletonTop)
	                .find('table')
	                .append(rowStructs[row].tbodyEl);
	            rowEl.append(skeletonEl);
	            helperNodes.push(skeletonEl[0]);
	        });
	        return $(helperNodes); // must return the elements rendered
	    };
	    return DayGridHelperRenderer;
	}(HelperRenderer_1.default));
	exports.default = DayGridHelperRenderer;
	
	
	/***/ }),
	/* 245 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var $ = __webpack_require__(3);
	var FillRenderer_1 = __webpack_require__(62);
	var DayGridFillRenderer = /** @class */ (function (_super) {
	    tslib_1.__extends(DayGridFillRenderer, _super);
	    function DayGridFillRenderer() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this.fillSegTag = 'td'; // override the default tag name
	        return _this;
	    }
	    DayGridFillRenderer.prototype.attachSegEls = function (type, segs) {
	        var nodes = [];
	        var i;
	        var seg;
	        var skeletonEl;
	        for (i = 0; i < segs.length; i++) {
	            seg = segs[i];
	            skeletonEl = this.renderFillRow(type, seg);
	            this.component.rowEls.eq(seg.row).append(skeletonEl);
	            nodes.push(skeletonEl[0]);
	        }
	        return nodes;
	    };
	    // Generates the HTML needed for one row of a fill. Requires the seg's el to be rendered.
	    DayGridFillRenderer.prototype.renderFillRow = function (type, seg) {
	        var colCnt = this.component.colCnt;
	        var startCol = seg.leftCol;
	        var endCol = seg.rightCol + 1;
	        var className;
	        var skeletonEl;
	        var trEl;
	        if (type === 'businessHours') {
	            className = 'bgevent';
	        }
	        else {
	            className = type.toLowerCase();
	        }
	        skeletonEl = $('<div class="fc-' + className + '-skeleton">' +
	            '<table><tr></tr></table>' +
	            '</div>');
	        trEl = skeletonEl.find('tr');
	        if (startCol > 0) {
	            trEl.append(
	            // will create (startCol + 1) td's
	            new Array(startCol + 1).join('<td></td>'));
	        }
	        trEl.append(seg.el.attr('colspan', endCol - startCol));
	        if (endCol < colCnt) {
	            trEl.append(
	            // will create (colCnt - endCol) td's
	            new Array(colCnt - endCol + 1).join('<td></td>'));
	        }
	        this.component.bookendCells(trEl);
	        return skeletonEl;
	    };
	    return DayGridFillRenderer;
	}(FillRenderer_1.default));
	exports.default = DayGridFillRenderer;
	
	
	/***/ }),
	/* 246 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var moment = __webpack_require__(0);
	var util_1 = __webpack_require__(4);
	var BasicView_1 = __webpack_require__(67);
	var MonthViewDateProfileGenerator_1 = __webpack_require__(247);
	/* A month view with day cells running in rows (one-per-week) and columns
	----------------------------------------------------------------------------------------------------------------------*/
	var MonthView = /** @class */ (function (_super) {
	    tslib_1.__extends(MonthView, _super);
	    function MonthView() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    // Overrides the default BasicView behavior to have special multi-week auto-height logic
	    MonthView.prototype.setGridHeight = function (height, isAuto) {
	        // if auto, make the height of each row the height that it would be if there were 6 weeks
	        if (isAuto) {
	            height *= this.dayGrid.rowCnt / 6;
	        }
	        util_1.distributeHeight(this.dayGrid.rowEls, height, !isAuto); // if auto, don't compensate for height-hogging rows
	    };
	    MonthView.prototype.isDateInOtherMonth = function (date, dateProfile) {
	        return date.month() !== moment.utc(dateProfile.currentUnzonedRange.startMs).month(); // TODO: optimize
	    };
	    return MonthView;
	}(BasicView_1.default));
	exports.default = MonthView;
	MonthView.prototype.dateProfileGeneratorClass = MonthViewDateProfileGenerator_1.default;
	
	
	/***/ }),
	/* 247 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var BasicViewDateProfileGenerator_1 = __webpack_require__(68);
	var UnzonedRange_1 = __webpack_require__(5);
	var MonthViewDateProfileGenerator = /** @class */ (function (_super) {
	    tslib_1.__extends(MonthViewDateProfileGenerator, _super);
	    function MonthViewDateProfileGenerator() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    // Computes the date range that will be rendered.
	    MonthViewDateProfileGenerator.prototype.buildRenderRange = function (currentUnzonedRange, currentRangeUnit, isRangeAllDay) {
	        var renderUnzonedRange = _super.prototype.buildRenderRange.call(this, currentUnzonedRange, currentRangeUnit, isRangeAllDay);
	        var start = this.msToUtcMoment(renderUnzonedRange.startMs, isRangeAllDay);
	        var end = this.msToUtcMoment(renderUnzonedRange.endMs, isRangeAllDay);
	        var rowCnt;
	        // ensure 6 weeks
	        if (this.opt('fixedWeekCount')) {
	            rowCnt = Math.ceil(// could be partial weeks due to hiddenDays
	            end.diff(start, 'weeks', true) // dontRound=true
	            );
	            end.add(6 - rowCnt, 'weeks');
	        }
	        return new UnzonedRange_1.default(start, end);
	    };
	    return MonthViewDateProfileGenerator;
	}(BasicViewDateProfileGenerator_1.default));
	exports.default = MonthViewDateProfileGenerator;
	
	
	/***/ }),
	/* 248 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var $ = __webpack_require__(3);
	var util_1 = __webpack_require__(4);
	var UnzonedRange_1 = __webpack_require__(5);
	var View_1 = __webpack_require__(43);
	var Scroller_1 = __webpack_require__(41);
	var ListEventRenderer_1 = __webpack_require__(249);
	var ListEventPointing_1 = __webpack_require__(250);
	/*
	Responsible for the scroller, and forwarding event-related actions into the "grid".
	*/
	var ListView = /** @class */ (function (_super) {
	    tslib_1.__extends(ListView, _super);
	    function ListView(calendar, viewSpec) {
	        var _this = _super.call(this, calendar, viewSpec) || this;
	        _this.segSelector = '.fc-list-item'; // which elements accept event actions
	        _this.scroller = new Scroller_1.default({
	            overflowX: 'hidden',
	            overflowY: 'auto'
	        });
	        return _this;
	    }
	    ListView.prototype.renderSkeleton = function () {
	        this.el.addClass('fc-list-view ' +
	            this.calendar.theme.getClass('listView'));
	        this.scroller.render();
	        this.scroller.el.appendTo(this.el);
	        this.contentEl = this.scroller.scrollEl; // shortcut
	    };
	    ListView.prototype.unrenderSkeleton = function () {
	        this.scroller.destroy(); // will remove the Grid too
	    };
	    ListView.prototype.updateSize = function (totalHeight, isAuto, isResize) {
	        _super.prototype.updateSize.call(this, totalHeight, isAuto, isResize);
	        this.scroller.clear(); // sets height to 'auto' and clears overflow
	        if (!isAuto) {
	            this.scroller.setHeight(this.computeScrollerHeight(totalHeight));
	        }
	    };
	    ListView.prototype.computeScrollerHeight = function (totalHeight) {
	        return totalHeight -
	            util_1.subtractInnerElHeight(this.el, this.scroller.el); // everything that's NOT the scroller
	    };
	    ListView.prototype.renderDates = function (dateProfile) {
	        var calendar = this.calendar;
	        var dayStart = calendar.msToUtcMoment(dateProfile.renderUnzonedRange.startMs, true);
	        var viewEnd = calendar.msToUtcMoment(dateProfile.renderUnzonedRange.endMs, true);
	        var dayDates = [];
	        var dayRanges = [];
	        while (dayStart < viewEnd) {
	            dayDates.push(dayStart.clone());
	            dayRanges.push(new UnzonedRange_1.default(dayStart, dayStart.clone().add(1, 'day')));
	            dayStart.add(1, 'day');
	        }
	        this.dayDates = dayDates;
	        this.dayRanges = dayRanges;
	        // all real rendering happens in EventRenderer
	    };
	    // slices by day
	    ListView.prototype.componentFootprintToSegs = function (footprint) {
	        var dayRanges = this.dayRanges;
	        var dayIndex;
	        var segRange;
	        var seg;
	        var segs = [];
	        for (dayIndex = 0; dayIndex < dayRanges.length; dayIndex++) {
	            segRange = footprint.unzonedRange.intersect(dayRanges[dayIndex]);
	            if (segRange) {
	                seg = {
	                    startMs: segRange.startMs,
	                    endMs: segRange.endMs,
	                    isStart: segRange.isStart,
	                    isEnd: segRange.isEnd,
	                    dayIndex: dayIndex
	                };
	                segs.push(seg);
	                // detect when footprint won't go fully into the next day,
	                // and mutate the latest seg to the be the end.
	                if (!seg.isEnd && !footprint.isAllDay &&
	                    dayIndex + 1 < dayRanges.length &&
	                    footprint.unzonedRange.endMs < dayRanges[dayIndex + 1].startMs + this.nextDayThreshold) {
	                    seg.endMs = footprint.unzonedRange.endMs;
	                    seg.isEnd = true;
	                    break;
	                }
	            }
	        }
	        return segs;
	    };
	    ListView.prototype.renderEmptyMessage = function () {
	        this.contentEl.html('<div class="fc-list-empty-wrap2">' + // TODO: try less wraps
	            '<div class="fc-list-empty-wrap1">' +
	            '<div class="fc-list-empty">' +
	            util_1.htmlEscape(this.opt('noEventsMessage')) +
	            '</div>' +
	            '</div>' +
	            '</div>');
	    };
	    // render the event segments in the view
	    ListView.prototype.renderSegList = function (allSegs) {
	        var segsByDay = this.groupSegsByDay(allSegs); // sparse array
	        var dayIndex;
	        var daySegs;
	        var i;
	        var tableEl = $('<table class="fc-list-table ' + this.calendar.theme.getClass('tableList') + '"><tbody></tbody></table>');
	        var tbodyEl = tableEl.find('tbody');
	        for (dayIndex = 0; dayIndex < segsByDay.length; dayIndex++) {
	            daySegs = segsByDay[dayIndex];
	            if (daySegs) { // sparse array, so might be undefined
	                // append a day header
	                tbodyEl.append(this.dayHeaderHtml(this.dayDates[dayIndex]));
	                this.eventRenderer.sortEventSegs(daySegs);
	                for (i = 0; i < daySegs.length; i++) {
	                    tbodyEl.append(daySegs[i].el); // append event row
	                }
	            }
	        }
	        this.contentEl.empty().append(tableEl);
	    };
	    // Returns a sparse array of arrays, segs grouped by their dayIndex
	    ListView.prototype.groupSegsByDay = function (segs) {
	        var segsByDay = []; // sparse array
	        var i;
	        var seg;
	        for (i = 0; i < segs.length; i++) {
	            seg = segs[i];
	            (segsByDay[seg.dayIndex] || (segsByDay[seg.dayIndex] = []))
	                .push(seg);
	        }
	        return segsByDay;
	    };
	    // generates the HTML for the day headers that live amongst the event rows
	    ListView.prototype.dayHeaderHtml = function (dayDate) {
	        var mainFormat = this.opt('listDayFormat');
	        var altFormat = this.opt('listDayAltFormat');
	        return '<tr class="fc-list-heading" data-date="' + dayDate.format('YYYY-MM-DD') + '">' +
	            '<td class="' + (this.calendar.theme.getClass('tableListHeading') ||
	            this.calendar.theme.getClass('widgetHeader')) + '" colspan="3">' +
	            (mainFormat ?
	                this.buildGotoAnchorHtml(dayDate, { 'class': 'fc-list-heading-main' }, util_1.htmlEscape(dayDate.format(mainFormat)) // inner HTML
	                ) :
	                '') +
	            (altFormat ?
	                this.buildGotoAnchorHtml(dayDate, { 'class': 'fc-list-heading-alt' }, util_1.htmlEscape(dayDate.format(altFormat)) // inner HTML
	                ) :
	                '') +
	            '</td>' +
	            '</tr>';
	    };
	    return ListView;
	}(View_1.default));
	exports.default = ListView;
	ListView.prototype.eventRendererClass = ListEventRenderer_1.default;
	ListView.prototype.eventPointingClass = ListEventPointing_1.default;
	
	
	/***/ }),
	/* 249 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var util_1 = __webpack_require__(4);
	var EventRenderer_1 = __webpack_require__(44);
	var ListEventRenderer = /** @class */ (function (_super) {
	    tslib_1.__extends(ListEventRenderer, _super);
	    function ListEventRenderer() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    ListEventRenderer.prototype.renderFgSegs = function (segs) {
	        if (!segs.length) {
	            this.component.renderEmptyMessage();
	        }
	        else {
	            this.component.renderSegList(segs);
	        }
	    };
	    // generates the HTML for a single event row
	    ListEventRenderer.prototype.fgSegHtml = function (seg) {
	        var view = this.view;
	        var calendar = view.calendar;
	        var theme = calendar.theme;
	        var eventFootprint = seg.footprint;
	        var eventDef = eventFootprint.eventDef;
	        var componentFootprint = eventFootprint.componentFootprint;
	        var url = eventDef.url;
	        var classes = ['fc-list-item'].concat(this.getClasses(eventDef));
	        var bgColor = this.getBgColor(eventDef);
	        var timeHtml;
	        if (componentFootprint.isAllDay) {
	            timeHtml = view.getAllDayHtml();
	        }
	        else if (view.isMultiDayRange(componentFootprint.unzonedRange)) {
	            if (seg.isStart || seg.isEnd) { // outer segment that probably lasts part of the day
	                timeHtml = util_1.htmlEscape(this._getTimeText(calendar.msToMoment(seg.startMs), calendar.msToMoment(seg.endMs), componentFootprint.isAllDay));
	            }
	            else { // inner segment that lasts the whole day
	                timeHtml = view.getAllDayHtml();
	            }
	        }
	        else {
	            // Display the normal time text for the *event's* times
	            timeHtml = util_1.htmlEscape(this.getTimeText(eventFootprint));
	        }
	        if (url) {
	            classes.push('fc-has-url');
	        }
	        return '<tr class="' + classes.join(' ') + '">' +
	            (this.displayEventTime ?
	                '<td class="fc-list-item-time ' + theme.getClass('widgetContent') + '">' +
	                    (timeHtml || '') +
	                    '</td>' :
	                '') +
	            '<td class="fc-list-item-marker ' + theme.getClass('widgetContent') + '">' +
	            '<span class="fc-event-dot"' +
	            (bgColor ?
	                ' style="background-color:' + bgColor + '"' :
	                '') +
	            '></span>' +
	            '</td>' +
	            '<td class="fc-list-item-title ' + theme.getClass('widgetContent') + '">' +
	            '<a' + (url ? ' href="' + util_1.htmlEscape(url) + '"' : '') + '>' +
	            util_1.htmlEscape(eventDef.title || '') +
	            '</a>' +
	            '</td>' +
	            '</tr>';
	    };
	    // like "4:00am"
	    ListEventRenderer.prototype.computeEventTimeFormat = function () {
	        return this.opt('mediumTimeFormat');
	    };
	    return ListEventRenderer;
	}(EventRenderer_1.default));
	exports.default = ListEventRenderer;
	
	
	/***/ }),
	/* 250 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var $ = __webpack_require__(3);
	var EventPointing_1 = __webpack_require__(64);
	var ListEventPointing = /** @class */ (function (_super) {
	    tslib_1.__extends(ListEventPointing, _super);
	    function ListEventPointing() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    // for events with a url, the whole <tr> should be clickable,
	    // but it's impossible to wrap with an <a> tag. simulate this.
	    ListEventPointing.prototype.handleClick = function (seg, ev) {
	        var url;
	        _super.prototype.handleClick.call(this, seg, ev); // might prevent the default action
	        // not clicking on or within an <a> with an href
	        if (!$(ev.target).closest('a[href]').length) {
	            url = seg.footprint.eventDef.url;
	            if (url && !ev.isDefaultPrevented()) { // jsEvent not cancelled in handler
	                window.location.href = url; // simulate link click
	            }
	        }
	    };
	    return ListEventPointing;
	}(EventPointing_1.default));
	exports.default = ListEventPointing;
	
	
	/***/ }),
	/* 251 */,
	/* 252 */,
	/* 253 */,
	/* 254 */,
	/* 255 */,
	/* 256 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var $ = __webpack_require__(3);
	var exportHooks = __webpack_require__(18);
	var util_1 = __webpack_require__(4);
	var Calendar_1 = __webpack_require__(232);
	// for intentional side-effects
	__webpack_require__(11);
	__webpack_require__(49);
	__webpack_require__(260);
	__webpack_require__(261);
	__webpack_require__(264);
	__webpack_require__(265);
	__webpack_require__(266);
	__webpack_require__(267);
	$.fullCalendar = exportHooks;
	$.fn.fullCalendar = function (options) {
	    var args = Array.prototype.slice.call(arguments, 1); // for a possible method call
	    var res = this; // what this function will return (this jQuery object by default)
	    this.each(function (i, _element) {
	        var element = $(_element);
	        var calendar = element.data('fullCalendar'); // get the existing calendar object (if any)
	        var singleRes; // the returned value of this single method call
	        // a method call
	        if (typeof options === 'string') {
	            if (options === 'getCalendar') {
	                if (!i) { // first element only
	                    res = calendar;
	                }
	            }
	            else if (options === 'destroy') { // don't warn if no calendar object
	                if (calendar) {
	                    calendar.destroy();
	                    element.removeData('fullCalendar');
	                }
	            }
	            else if (!calendar) {
	                util_1.warn('Attempting to call a FullCalendar method on an element with no calendar.');
	            }
	            else if ($.isFunction(calendar[options])) {
	                singleRes = calendar[options].apply(calendar, args);
	                if (!i) {
	                    res = singleRes; // record the first method call result
	                }
	                if (options === 'destroy') { // for the destroy method, must remove Calendar object data
	                    element.removeData('fullCalendar');
	                }
	            }
	            else {
	                util_1.warn("'" + options + "' is an unknown FullCalendar method.");
	            }
	        }
	        else if (!calendar) { // don't initialize twice
	            calendar = new Calendar_1.default(element, options);
	            element.data('fullCalendar', calendar);
	            calendar.render();
	        }
	    });
	    return res;
	};
	module.exports = exportHooks;
	
	
	/***/ }),
	/* 257 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var $ = __webpack_require__(3);
	var util_1 = __webpack_require__(4);
	/* Toolbar with buttons and title
	----------------------------------------------------------------------------------------------------------------------*/
	var Toolbar = /** @class */ (function () {
	    function Toolbar(calendar, toolbarOptions) {
	        this.el = null; // mirrors local `el`
	        this.viewsWithButtons = [];
	        this.calendar = calendar;
	        this.toolbarOptions = toolbarOptions;
	    }
	    // method to update toolbar-specific options, not calendar-wide options
	    Toolbar.prototype.setToolbarOptions = function (newToolbarOptions) {
	        this.toolbarOptions = newToolbarOptions;
	    };
	    // can be called repeatedly and will rerender
	    Toolbar.prototype.render = function () {
	        var sections = this.toolbarOptions.layout;
	        var el = this.el;
	        if (sections) {
	            if (!el) {
	                el = this.el = $("<div class='fc-toolbar " + this.toolbarOptions.extraClasses + "'>");
	            }
	            else {
	                el.empty();
	            }
	            el.append(this.renderSection('left'))
	                .append(this.renderSection('right'))
	                .append(this.renderSection('center'))
	                .append('<div class="fc-clear"></div>');
	        }
	        else {
	            this.removeElement();
	        }
	    };
	    Toolbar.prototype.removeElement = function () {
	        if (this.el) {
	            this.el.remove();
	            this.el = null;
	        }
	    };
	    Toolbar.prototype.renderSection = function (position) {
	        var _this = this;
	        var calendar = this.calendar;
	        var theme = calendar.theme;
	        var optionsManager = calendar.optionsManager;
	        var viewSpecManager = calendar.viewSpecManager;
	        var sectionEl = $('<div class="fc-' + position + '">');
	        var buttonStr = this.toolbarOptions.layout[position];
	        var calendarCustomButtons = optionsManager.get('customButtons') || {};
	        var calendarButtonTextOverrides = optionsManager.overrides.buttonText || {};
	        var calendarButtonText = optionsManager.get('buttonText') || {};
	        if (buttonStr) {
	            $.each(buttonStr.split(' '), function (i, buttonGroupStr) {
	                var groupChildren = $();
	                var isOnlyButtons = true;
	                var groupEl;
	                $.each(buttonGroupStr.split(','), function (j, buttonName) {
	                    var customButtonProps;
	                    var viewSpec;
	                    var buttonClick;
	                    var buttonIcon; // only one of these will be set
	                    var buttonText; // "
	                    var buttonInnerHtml;
	                    var buttonClasses;
	                    var buttonEl;
	                    var buttonAriaAttr;
	                    if (buttonName === 'title') {
	                        groupChildren = groupChildren.add($('<h2>&nbsp;</h2>')); // we always want it to take up height
	                        isOnlyButtons = false;
	                    }
	                    else {
	                        if ((customButtonProps = calendarCustomButtons[buttonName])) {
	                            buttonClick = function (ev) {
	                                if (customButtonProps.click) {
	                                    customButtonProps.click.call(buttonEl[0], ev);
	                                }
	                            };
	                            (buttonIcon = theme.getCustomButtonIconClass(customButtonProps)) ||
	                                (buttonIcon = theme.getIconClass(buttonName)) ||
	                                (buttonText = customButtonProps.text);
	                        }
	                        else if ((viewSpec = viewSpecManager.getViewSpec(buttonName))) {
	                            _this.viewsWithButtons.push(buttonName);
	                            buttonClick = function () {
	                                calendar.changeView(buttonName);
	                            };
	                            (buttonText = viewSpec.buttonTextOverride) ||
	                                (buttonIcon = theme.getIconClass(buttonName)) ||
	                                (buttonText = viewSpec.buttonTextDefault);
	                        }
	                        else if (calendar[buttonName]) { // a calendar method
	                            buttonClick = function () {
	                                calendar[buttonName]();
	                            };
	                            (buttonText = calendarButtonTextOverrides[buttonName]) ||
	                                (buttonIcon = theme.getIconClass(buttonName)) ||
	                                (buttonText = calendarButtonText[buttonName]);
	                            //            ^ everything else is considered default
	                        }
	                        if (buttonClick) {
	                            buttonClasses = [
	                                'fc-' + buttonName + '-button',
	                                theme.getClass('button'),
	                                theme.getClass('stateDefault')
	                            ];
	                            if (buttonText) {
	                                buttonInnerHtml = util_1.htmlEscape(buttonText);
	                                buttonAriaAttr = '';
	                            }
	                            else if (buttonIcon) {
	                                buttonInnerHtml = "<span class='" + buttonIcon + "'></span>";
	                                buttonAriaAttr = ' aria-label="' + buttonName + '"';
	                            }
	                            buttonEl = $(// type="button" so that it doesn't submit a form
	                            '<button type="button" class="' + buttonClasses.join(' ') + '"' +
	                                buttonAriaAttr +
	                                '>' + buttonInnerHtml + '</button>')
	                                .click(function (ev) {
	                                // don't process clicks for disabled buttons
	                                if (!buttonEl.hasClass(theme.getClass('stateDisabled'))) {
	                                    buttonClick(ev);
	                                    // after the click action, if the button becomes the "active" tab, or disabled,
	                                    // it should never have a hover class, so remove it now.
	                                    if (buttonEl.hasClass(theme.getClass('stateActive')) ||
	                                        buttonEl.hasClass(theme.getClass('stateDisabled'))) {
	                                        buttonEl.removeClass(theme.getClass('stateHover'));
	                                    }
	                                }
	                            })
	                                .mousedown(function () {
	                                // the *down* effect (mouse pressed in).
	                                // only on buttons that are not the "active" tab, or disabled
	                                buttonEl
	                                    .not('.' + theme.getClass('stateActive'))
	                                    .not('.' + theme.getClass('stateDisabled'))
	                                    .addClass(theme.getClass('stateDown'));
	                            })
	                                .mouseup(function () {
	                                // undo the *down* effect
	                                buttonEl.removeClass(theme.getClass('stateDown'));
	                            })
	                                .hover(function () {
	                                // the *hover* effect.
	                                // only on buttons that are not the "active" tab, or disabled
	                                buttonEl
	                                    .not('.' + theme.getClass('stateActive'))
	                                    .not('.' + theme.getClass('stateDisabled'))
	                                    .addClass(theme.getClass('stateHover'));
	                            }, function () {
	                                // undo the *hover* effect
	                                buttonEl
	                                    .removeClass(theme.getClass('stateHover'))
	                                    .removeClass(theme.getClass('stateDown')); // if mouseleave happens before mouseup
	                            });
	                            groupChildren = groupChildren.add(buttonEl);
	                        }
	                    }
	                });
	                if (isOnlyButtons) {
	                    groupChildren
	                        .first().addClass(theme.getClass('cornerLeft')).end()
	                        .last().addClass(theme.getClass('cornerRight')).end();
	                }
	                if (groupChildren.length > 1) {
	                    groupEl = $('<div>');
	                    if (isOnlyButtons) {
	                        groupEl.addClass(theme.getClass('buttonGroup'));
	                    }
	                    groupEl.append(groupChildren);
	                    sectionEl.append(groupEl);
	                }
	                else {
	                    sectionEl.append(groupChildren); // 1 or 0 children
	                }
	            });
	        }
	        return sectionEl;
	    };
	    Toolbar.prototype.updateTitle = function (text) {
	        if (this.el) {
	            this.el.find('h2').text(text);
	        }
	    };
	    Toolbar.prototype.activateButton = function (buttonName) {
	        if (this.el) {
	            this.el.find('.fc-' + buttonName + '-button')
	                .addClass(this.calendar.theme.getClass('stateActive'));
	        }
	    };
	    Toolbar.prototype.deactivateButton = function (buttonName) {
	        if (this.el) {
	            this.el.find('.fc-' + buttonName + '-button')
	                .removeClass(this.calendar.theme.getClass('stateActive'));
	        }
	    };
	    Toolbar.prototype.disableButton = function (buttonName) {
	        if (this.el) {
	            this.el.find('.fc-' + buttonName + '-button')
	                .prop('disabled', true)
	                .addClass(this.calendar.theme.getClass('stateDisabled'));
	        }
	    };
	    Toolbar.prototype.enableButton = function (buttonName) {
	        if (this.el) {
	            this.el.find('.fc-' + buttonName + '-button')
	                .prop('disabled', false)
	                .removeClass(this.calendar.theme.getClass('stateDisabled'));
	        }
	    };
	    Toolbar.prototype.getViewsWithButtons = function () {
	        return this.viewsWithButtons;
	    };
	    return Toolbar;
	}());
	exports.default = Toolbar;
	
	
	/***/ }),
	/* 258 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var $ = __webpack_require__(3);
	var util_1 = __webpack_require__(4);
	var options_1 = __webpack_require__(33);
	var locale_1 = __webpack_require__(32);
	var Model_1 = __webpack_require__(51);
	var OptionsManager = /** @class */ (function (_super) {
	    tslib_1.__extends(OptionsManager, _super);
	    function OptionsManager(_calendar, overrides) {
	        var _this = _super.call(this) || this;
	        _this._calendar = _calendar;
	        _this.overrides = $.extend({}, overrides); // make a copy
	        _this.dynamicOverrides = {};
	        _this.compute();
	        return _this;
	    }
	    OptionsManager.prototype.add = function (newOptionHash) {
	        var optionCnt = 0;
	        var optionName;
	        this.recordOverrides(newOptionHash); // will trigger this model's watchers
	        for (optionName in newOptionHash) {
	            optionCnt++;
	        }
	        // special-case handling of single option change.
	        // if only one option change, `optionName` will be its name.
	        if (optionCnt === 1) {
	            if (optionName === 'height' || optionName === 'contentHeight' || optionName === 'aspectRatio') {
	                this._calendar.updateViewSize(true); // isResize=true
	                return;
	            }
	            else if (optionName === 'defaultDate') {
	                return; // can't change date this way. use gotoDate instead
	            }
	            else if (optionName === 'businessHours') {
	                return; // this model already reacts to this
	            }
	            else if (/^(event|select)(Overlap|Constraint|Allow)$/.test(optionName)) {
	                return; // doesn't affect rendering. only interactions.
	            }
	            else if (optionName === 'timezone') {
	                this._calendar.view.flash('initialEvents');
	                return;
	            }
	        }
	        // catch-all. rerender the header and footer and rebuild/rerender the current view
	        this._calendar.renderHeader();
	        this._calendar.renderFooter();
	        // even non-current views will be affected by this option change. do before rerender
	        // TODO: detangle
	        this._calendar.viewsByType = {};
	        this._calendar.reinitView();
	    };
	    // Computes the flattened options hash for the calendar and assigns to `this.options`.
	    // Assumes this.overrides and this.dynamicOverrides have already been initialized.
	    OptionsManager.prototype.compute = function () {
	        var locale;
	        var localeDefaults;
	        var isRTL;
	        var dirDefaults;
	        var rawOptions;
	        locale = util_1.firstDefined(// explicit locale option given?
	        this.dynamicOverrides.locale, this.overrides.locale);
	        localeDefaults = locale_1.localeOptionHash[locale];
	        if (!localeDefaults) { // explicit locale option not given or invalid?
	            locale = options_1.globalDefaults.locale;
	            localeDefaults = locale_1.localeOptionHash[locale] || {};
	        }
	        isRTL = util_1.firstDefined(// based on options computed so far, is direction RTL?
	        this.dynamicOverrides.isRTL, this.overrides.isRTL, localeDefaults.isRTL, options_1.globalDefaults.isRTL);
	        dirDefaults = isRTL ? options_1.rtlDefaults : {};
	        this.dirDefaults = dirDefaults;
	        this.localeDefaults = localeDefaults;
	        rawOptions = options_1.mergeOptions([
	            options_1.globalDefaults,
	            dirDefaults,
	            localeDefaults,
	            this.overrides,
	            this.dynamicOverrides
	        ]);
	        locale_1.populateInstanceComputableOptions(rawOptions); // fill in gaps with computed options
	        this.reset(rawOptions);
	    };
	    // stores the new options internally, but does not rerender anything.
	    OptionsManager.prototype.recordOverrides = function (newOptionHash) {
	        var optionName;
	        for (optionName in newOptionHash) {
	            this.dynamicOverrides[optionName] = newOptionHash[optionName];
	        }
	        this._calendar.viewSpecManager.clearCache(); // the dynamic override invalidates the options in this cache, so just clear it
	        this.compute(); // this.options needs to be recomputed after the dynamic override
	    };
	    return OptionsManager;
	}(Model_1.default));
	exports.default = OptionsManager;
	
	
	/***/ }),
	/* 259 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var moment = __webpack_require__(0);
	var $ = __webpack_require__(3);
	var ViewRegistry_1 = __webpack_require__(24);
	var util_1 = __webpack_require__(4);
	var options_1 = __webpack_require__(33);
	var locale_1 = __webpack_require__(32);
	var ViewSpecManager = /** @class */ (function () {
	    function ViewSpecManager(optionsManager, _calendar) {
	        this.optionsManager = optionsManager;
	        this._calendar = _calendar;
	        this.clearCache();
	    }
	    ViewSpecManager.prototype.clearCache = function () {
	        this.viewSpecCache = {};
	    };
	    // Gets information about how to create a view. Will use a cache.
	    ViewSpecManager.prototype.getViewSpec = function (viewType) {
	        var cache = this.viewSpecCache;
	        return cache[viewType] || (cache[viewType] = this.buildViewSpec(viewType));
	    };
	    // Given a duration singular unit, like "week" or "day", finds a matching view spec.
	    // Preference is given to views that have corresponding buttons.
	    ViewSpecManager.prototype.getUnitViewSpec = function (unit) {
	        var viewTypes;
	        var i;
	        var spec;
	        if ($.inArray(unit, util_1.unitsDesc) !== -1) {
	            // put views that have buttons first. there will be duplicates, but oh well
	            viewTypes = this._calendar.header.getViewsWithButtons(); // TODO: include footer as well?
	            $.each(ViewRegistry_1.viewHash, function (viewType) {
	                viewTypes.push(viewType);
	            });
	            for (i = 0; i < viewTypes.length; i++) {
	                spec = this.getViewSpec(viewTypes[i]);
	                if (spec) {
	                    if (spec.singleUnit === unit) {
	                        return spec;
	                    }
	                }
	            }
	        }
	    };
	    // Builds an object with information on how to create a given view
	    ViewSpecManager.prototype.buildViewSpec = function (requestedViewType) {
	        var viewOverrides = this.optionsManager.overrides.views || {};
	        var specChain = []; // for the view. lowest to highest priority
	        var defaultsChain = []; // for the view. lowest to highest priority
	        var overridesChain = []; // for the view. lowest to highest priority
	        var viewType = requestedViewType;
	        var spec; // for the view
	        var overrides; // for the view
	        var durationInput;
	        var duration;
	        var unit;
	        // iterate from the specific view definition to a more general one until we hit an actual View class
	        while (viewType) {
	            spec = ViewRegistry_1.viewHash[viewType];
	            overrides = viewOverrides[viewType];
	            viewType = null; // clear. might repopulate for another iteration
	            if (typeof spec === 'function') { // TODO: deprecate
	                spec = { 'class': spec };
	            }
	            if (spec) {
	                specChain.unshift(spec);
	                defaultsChain.unshift(spec.defaults || {});
	                durationInput = durationInput || spec.duration;
	                viewType = viewType || spec.type;
	            }
	            if (overrides) {
	                overridesChain.unshift(overrides); // view-specific option hashes have options at zero-level
	                durationInput = durationInput || overrides.duration;
	                viewType = viewType || overrides.type;
	            }
	        }
	        spec = util_1.mergeProps(specChain);
	        spec.type = requestedViewType;
	        if (!spec['class']) {
	            return false;
	        }
	        // fall back to top-level `duration` option
	        durationInput = durationInput ||
	            this.optionsManager.dynamicOverrides.duration ||
	            this.optionsManager.overrides.duration;
	        if (durationInput) {
	            duration = moment.duration(durationInput);
	            if (duration.valueOf()) { // valid?
	                unit = util_1.computeDurationGreatestUnit(duration, durationInput);
	                spec.duration = duration;
	                spec.durationUnit = unit;
	                // view is a single-unit duration, like "week" or "day"
	                // incorporate options for this. lowest priority
	                if (duration.as(unit) === 1) {
	                    spec.singleUnit = unit;
	                    overridesChain.unshift(viewOverrides[unit] || {});
	                }
	            }
	        }
	        spec.defaults = options_1.mergeOptions(defaultsChain);
	        spec.overrides = options_1.mergeOptions(overridesChain);
	        this.buildViewSpecOptions(spec);
	        this.buildViewSpecButtonText(spec, requestedViewType);
	        return spec;
	    };
	    // Builds and assigns a view spec's options object from its already-assigned defaults and overrides
	    ViewSpecManager.prototype.buildViewSpecOptions = function (spec) {
	        var optionsManager = this.optionsManager;
	        spec.options = options_1.mergeOptions([
	            options_1.globalDefaults,
	            spec.defaults,
	            optionsManager.dirDefaults,
	            optionsManager.localeDefaults,
	            optionsManager.overrides,
	            spec.overrides,
	            optionsManager.dynamicOverrides // dynamically set via setter. highest precedence
	        ]);
	        locale_1.populateInstanceComputableOptions(spec.options);
	    };
	    // Computes and assigns a view spec's buttonText-related options
	    ViewSpecManager.prototype.buildViewSpecButtonText = function (spec, requestedViewType) {
	        var optionsManager = this.optionsManager;
	        // given an options object with a possible `buttonText` hash, lookup the buttonText for the
	        // requested view, falling back to a generic unit entry like "week" or "day"
	        function queryButtonText(options) {
	            var buttonText = options.buttonText || {};
	            return buttonText[requestedViewType] ||
	                // view can decide to look up a certain key
	                (spec.buttonTextKey ? buttonText[spec.buttonTextKey] : null) ||
	                // a key like "month"
	                (spec.singleUnit ? buttonText[spec.singleUnit] : null);
	        }
	        // highest to lowest priority
	        spec.buttonTextOverride =
	            queryButtonText(optionsManager.dynamicOverrides) ||
	                queryButtonText(optionsManager.overrides) || // constructor-specified buttonText lookup hash takes precedence
	                spec.overrides.buttonText; // `buttonText` for view-specific options is a string
	        // highest to lowest priority. mirrors buildViewSpecOptions
	        spec.buttonTextDefault =
	            queryButtonText(optionsManager.localeDefaults) ||
	                queryButtonText(optionsManager.dirDefaults) ||
	                spec.defaults.buttonText || // a single string. from ViewSubclass.defaults
	                queryButtonText(options_1.globalDefaults) ||
	                (spec.duration ? this._calendar.humanizeDuration(spec.duration) : null) || // like "3 days"
	                requestedViewType; // fall back to given view name
	    };
	    return ViewSpecManager;
	}());
	exports.default = ViewSpecManager;
	
	
	/***/ }),
	/* 260 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var EventSourceParser_1 = __webpack_require__(38);
	var ArrayEventSource_1 = __webpack_require__(56);
	var FuncEventSource_1 = __webpack_require__(223);
	var JsonFeedEventSource_1 = __webpack_require__(224);
	EventSourceParser_1.default.registerClass(ArrayEventSource_1.default);
	EventSourceParser_1.default.registerClass(FuncEventSource_1.default);
	EventSourceParser_1.default.registerClass(JsonFeedEventSource_1.default);
	
	
	/***/ }),
	/* 261 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var ThemeRegistry_1 = __webpack_require__(57);
	var StandardTheme_1 = __webpack_require__(221);
	var JqueryUiTheme_1 = __webpack_require__(222);
	var Bootstrap3Theme_1 = __webpack_require__(262);
	var Bootstrap4Theme_1 = __webpack_require__(263);
	ThemeRegistry_1.defineThemeSystem('standard', StandardTheme_1.default);
	ThemeRegistry_1.defineThemeSystem('jquery-ui', JqueryUiTheme_1.default);
	ThemeRegistry_1.defineThemeSystem('bootstrap3', Bootstrap3Theme_1.default);
	ThemeRegistry_1.defineThemeSystem('bootstrap4', Bootstrap4Theme_1.default);
	
	
	/***/ }),
	/* 262 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var Theme_1 = __webpack_require__(22);
	var Bootstrap3Theme = /** @class */ (function (_super) {
	    tslib_1.__extends(Bootstrap3Theme, _super);
	    function Bootstrap3Theme() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    return Bootstrap3Theme;
	}(Theme_1.default));
	exports.default = Bootstrap3Theme;
	Bootstrap3Theme.prototype.classes = {
	    widget: 'fc-bootstrap3',
	    tableGrid: 'table-bordered',
	    tableList: 'table',
	    tableListHeading: 'active',
	    buttonGroup: 'btn-group',
	    button: 'btn btn-default',
	    stateActive: 'active',
	    stateDisabled: 'disabled',
	    today: 'alert alert-info',
	    popover: 'panel panel-default',
	    popoverHeader: 'panel-heading',
	    popoverContent: 'panel-body',
	    // day grid
	    // for left/right border color when border is inset from edges (all-day in agenda view)
	    // avoid `panel` class b/c don't want margins/radius. only border color.
	    headerRow: 'panel-default',
	    dayRow: 'panel-default',
	    // list view
	    listView: 'panel panel-default'
	};
	Bootstrap3Theme.prototype.baseIconClass = 'glyphicon';
	Bootstrap3Theme.prototype.iconClasses = {
	    close: 'glyphicon-remove',
	    prev: 'glyphicon-chevron-left',
	    next: 'glyphicon-chevron-right',
	    prevYear: 'glyphicon-backward',
	    nextYear: 'glyphicon-forward'
	};
	Bootstrap3Theme.prototype.iconOverrideOption = 'bootstrapGlyphicons';
	Bootstrap3Theme.prototype.iconOverrideCustomButtonOption = 'bootstrapGlyphicon';
	Bootstrap3Theme.prototype.iconOverridePrefix = 'glyphicon-';
	
	
	/***/ }),
	/* 263 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(2);
	var Theme_1 = __webpack_require__(22);
	var Bootstrap4Theme = /** @class */ (function (_super) {
	    tslib_1.__extends(Bootstrap4Theme, _super);
	    function Bootstrap4Theme() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    return Bootstrap4Theme;
	}(Theme_1.default));
	exports.default = Bootstrap4Theme;
	Bootstrap4Theme.prototype.classes = {
	    widget: 'fc-bootstrap4',
	    tableGrid: 'table-bordered',
	    tableList: 'table',
	    tableListHeading: 'table-active',
	    buttonGroup: 'btn-group',
	    button: 'btn btn-primary',
	    stateActive: 'active',
	    stateDisabled: 'disabled',
	    today: 'alert alert-info',
	    popover: 'card card-primary',
	    popoverHeader: 'card-header',
	    popoverContent: 'card-body',
	    // day grid
	    // for left/right border color when border is inset from edges (all-day in agenda view)
	    // avoid `table` class b/c don't want margins/padding/structure. only border color.
	    headerRow: 'table-bordered',
	    dayRow: 'table-bordered',
	    // list view
	    listView: 'card card-primary'
	};
	Bootstrap4Theme.prototype.baseIconClass = 'fa';
	Bootstrap4Theme.prototype.iconClasses = {
	    close: 'fa-times',
	    prev: 'fa-chevron-left',
	    next: 'fa-chevron-right',
	    prevYear: 'fa-angle-double-left',
	    nextYear: 'fa-angle-double-right'
	};
	Bootstrap4Theme.prototype.iconOverrideOption = 'bootstrapFontAwesome';
	Bootstrap4Theme.prototype.iconOverrideCustomButtonOption = 'bootstrapFontAwesome';
	Bootstrap4Theme.prototype.iconOverridePrefix = 'fa-';
	
	
	/***/ }),
	/* 264 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var ViewRegistry_1 = __webpack_require__(24);
	var BasicView_1 = __webpack_require__(67);
	var MonthView_1 = __webpack_require__(246);
	ViewRegistry_1.defineView('basic', {
	    'class': BasicView_1.default
	});
	ViewRegistry_1.defineView('basicDay', {
	    type: 'basic',
	    duration: { days: 1 }
	});
	ViewRegistry_1.defineView('basicWeek', {
	    type: 'basic',
	    duration: { weeks: 1 }
	});
	ViewRegistry_1.defineView('month', {
	    'class': MonthView_1.default,
	    duration: { months: 1 },
	    defaults: {
	        fixedWeekCount: true
	    }
	});
	
	
	/***/ }),
	/* 265 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var ViewRegistry_1 = __webpack_require__(24);
	var AgendaView_1 = __webpack_require__(238);
	ViewRegistry_1.defineView('agenda', {
	    'class': AgendaView_1.default,
	    defaults: {
	        allDaySlot: true,
	        slotDuration: '00:30:00',
	        slotEventOverlap: true // a bad name. confused with overlap/constraint system
	    }
	});
	ViewRegistry_1.defineView('agendaDay', {
	    type: 'agenda',
	    duration: { days: 1 }
	});
	ViewRegistry_1.defineView('agendaWeek', {
	    type: 'agenda',
	    duration: { weeks: 1 }
	});
	
	
	/***/ }),
	/* 266 */
	/***/ (function(module, exports, __webpack_require__) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	var ViewRegistry_1 = __webpack_require__(24);
	var ListView_1 = __webpack_require__(248);
	ViewRegistry_1.defineView('list', {
	    'class': ListView_1.default,
	    buttonTextKey: 'list',
	    defaults: {
	        buttonText: 'list',
	        listDayFormat: 'LL',
	        noEventsMessage: 'No events to display'
	    }
	});
	ViewRegistry_1.defineView('listDay', {
	    type: 'list',
	    duration: { days: 1 },
	    defaults: {
	        listDayFormat: 'dddd' // day-of-week is all we need. full date is probably in header
	    }
	});
	ViewRegistry_1.defineView('listWeek', {
	    type: 'list',
	    duration: { weeks: 1 },
	    defaults: {
	        listDayFormat: 'dddd',
	        listDayAltFormat: 'LL'
	    }
	});
	ViewRegistry_1.defineView('listMonth', {
	    type: 'list',
	    duration: { month: 1 },
	    defaults: {
	        listDayAltFormat: 'dddd' // day-of-week is nice-to-have
	    }
	});
	ViewRegistry_1.defineView('listYear', {
	    type: 'list',
	    duration: { year: 1 },
	    defaults: {
	        listDayAltFormat: 'dddd' // day-of-week is nice-to-have
	    }
	});
	
	
	/***/ }),
	/* 267 */
	/***/ (function(module, exports) {
	
	Object.defineProperty(exports, "__esModule", { value: true });
	
	
	/***/ })
	/******/ ]);
	});

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//! moment-timezone.js
	//! version : 0.5.31
	//! Copyright (c) JS Foundation and other contributors
	//! license : MIT
	//! github.com/moment/moment-timezone
	
	(function (root, factory) {
		"use strict";
	
		/*global define*/
		if (typeof module === 'object' && module.exports) {
			module.exports = factory(__webpack_require__(42)); // Node
		} else if (true) {
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(42)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));                 // AMD
		} else {
			factory(root.moment);                        // Browser
		}
	}(this, function (moment) {
		"use strict";
	
		// Resolves es6 module loading issue
		if (moment.version === undefined && moment.default) {
			moment = moment.default;
		}
	
		// Do not load moment-timezone a second time.
		// if (moment.tz !== undefined) {
		// 	logError('Moment Timezone ' + moment.tz.version + ' was already loaded ' + (moment.tz.dataVersion ? 'with data from ' : 'without any data') + moment.tz.dataVersion);
		// 	return moment;
		// }
	
		var VERSION = "0.5.31",
			zones = {},
			links = {},
			countries = {},
			names = {},
			guesses = {},
			cachedGuess;
	
		if (!moment || typeof moment.version !== 'string') {
			logError('Moment Timezone requires Moment.js. See https://momentjs.com/timezone/docs/#/use-it/browser/');
		}
	
		var momentVersion = moment.version.split('.'),
			major = +momentVersion[0],
			minor = +momentVersion[1];
	
		// Moment.js version check
		if (major < 2 || (major === 2 && minor < 6)) {
			logError('Moment Timezone requires Moment.js >= 2.6.0. You are using Moment.js ' + moment.version + '. See momentjs.com');
		}
	
		/************************************
			Unpacking
		************************************/
	
		function charCodeToInt(charCode) {
			if (charCode > 96) {
				return charCode - 87;
			} else if (charCode > 64) {
				return charCode - 29;
			}
			return charCode - 48;
		}
	
		function unpackBase60(string) {
			var i = 0,
				parts = string.split('.'),
				whole = parts[0],
				fractional = parts[1] || '',
				multiplier = 1,
				num,
				out = 0,
				sign = 1;
	
			// handle negative numbers
			if (string.charCodeAt(0) === 45) {
				i = 1;
				sign = -1;
			}
	
			// handle digits before the decimal
			for (i; i < whole.length; i++) {
				num = charCodeToInt(whole.charCodeAt(i));
				out = 60 * out + num;
			}
	
			// handle digits after the decimal
			for (i = 0; i < fractional.length; i++) {
				multiplier = multiplier / 60;
				num = charCodeToInt(fractional.charCodeAt(i));
				out += num * multiplier;
			}
	
			return out * sign;
		}
	
		function arrayToInt (array) {
			for (var i = 0; i < array.length; i++) {
				array[i] = unpackBase60(array[i]);
			}
		}
	
		function intToUntil (array, length) {
			for (var i = 0; i < length; i++) {
				array[i] = Math.round((array[i - 1] || 0) + (array[i] * 60000)); // minutes to milliseconds
			}
	
			array[length - 1] = Infinity;
		}
	
		function mapIndices (source, indices) {
			var out = [], i;
	
			for (i = 0; i < indices.length; i++) {
				out[i] = source[indices[i]];
			}
	
			return out;
		}
	
		function unpack (string) {
			var data = string.split('|'),
				offsets = data[2].split(' '),
				indices = data[3].split(''),
				untils  = data[4].split(' ');
	
			arrayToInt(offsets);
			arrayToInt(indices);
			arrayToInt(untils);
	
			intToUntil(untils, indices.length);
	
			return {
				name       : data[0],
				abbrs      : mapIndices(data[1].split(' '), indices),
				offsets    : mapIndices(offsets, indices),
				untils     : untils,
				population : data[5] | 0
			};
		}
	
		/************************************
			Zone object
		************************************/
	
		function Zone (packedString) {
			if (packedString) {
				this._set(unpack(packedString));
			}
		}
	
		Zone.prototype = {
			_set : function (unpacked) {
				this.name       = unpacked.name;
				this.abbrs      = unpacked.abbrs;
				this.untils     = unpacked.untils;
				this.offsets    = unpacked.offsets;
				this.population = unpacked.population;
			},
	
			_index : function (timestamp) {
				var target = +timestamp,
					untils = this.untils,
					i;
	
				for (i = 0; i < untils.length; i++) {
					if (target < untils[i]) {
						return i;
					}
				}
			},
	
			countries : function () {
				var zone_name = this.name;
				return Object.keys(countries).filter(function (country_code) {
					return countries[country_code].zones.indexOf(zone_name) !== -1;
				});
			},
	
			parse : function (timestamp) {
				var target  = +timestamp,
					offsets = this.offsets,
					untils  = this.untils,
					max     = untils.length - 1,
					offset, offsetNext, offsetPrev, i;
	
				for (i = 0; i < max; i++) {
					offset     = offsets[i];
					offsetNext = offsets[i + 1];
					offsetPrev = offsets[i ? i - 1 : i];
	
					if (offset < offsetNext && tz.moveAmbiguousForward) {
						offset = offsetNext;
					} else if (offset > offsetPrev && tz.moveInvalidForward) {
						offset = offsetPrev;
					}
	
					if (target < untils[i] - (offset * 60000)) {
						return offsets[i];
					}
				}
	
				return offsets[max];
			},
	
			abbr : function (mom) {
				return this.abbrs[this._index(mom)];
			},
	
			offset : function (mom) {
				logError("zone.offset has been deprecated in favor of zone.utcOffset");
				return this.offsets[this._index(mom)];
			},
	
			utcOffset : function (mom) {
				return this.offsets[this._index(mom)];
			}
		};
	
		/************************************
			Country object
		************************************/
	
		function Country (country_name, zone_names) {
			this.name = country_name;
			this.zones = zone_names;
		}
	
		/************************************
			Current Timezone
		************************************/
	
		function OffsetAt(at) {
			var timeString = at.toTimeString();
			var abbr = timeString.match(/\([a-z ]+\)/i);
			if (abbr && abbr[0]) {
				// 17:56:31 GMT-0600 (CST)
				// 17:56:31 GMT-0600 (Central Standard Time)
				abbr = abbr[0].match(/[A-Z]/g);
				abbr = abbr ? abbr.join('') : undefined;
			} else {
				// 17:56:31 CST
				// 17:56:31 GMT+0800 (台北標準時間)
				abbr = timeString.match(/[A-Z]{3,5}/g);
				abbr = abbr ? abbr[0] : undefined;
			}
	
			if (abbr === 'GMT') {
				abbr = undefined;
			}
	
			this.at = +at;
			this.abbr = abbr;
			this.offset = at.getTimezoneOffset();
		}
	
		function ZoneScore(zone) {
			this.zone = zone;
			this.offsetScore = 0;
			this.abbrScore = 0;
		}
	
		ZoneScore.prototype.scoreOffsetAt = function (offsetAt) {
			this.offsetScore += Math.abs(this.zone.utcOffset(offsetAt.at) - offsetAt.offset);
			if (this.zone.abbr(offsetAt.at).replace(/[^A-Z]/g, '') !== offsetAt.abbr) {
				this.abbrScore++;
			}
		};
	
		function findChange(low, high) {
			var mid, diff;
	
			while ((diff = ((high.at - low.at) / 12e4 | 0) * 6e4)) {
				mid = new OffsetAt(new Date(low.at + diff));
				if (mid.offset === low.offset) {
					low = mid;
				} else {
					high = mid;
				}
			}
	
			return low;
		}
	
		function userOffsets() {
			var startYear = new Date().getFullYear() - 2,
				last = new OffsetAt(new Date(startYear, 0, 1)),
				offsets = [last],
				change, next, i;
	
			for (i = 1; i < 48; i++) {
				next = new OffsetAt(new Date(startYear, i, 1));
				if (next.offset !== last.offset) {
					change = findChange(last, next);
					offsets.push(change);
					offsets.push(new OffsetAt(new Date(change.at + 6e4)));
				}
				last = next;
			}
	
			for (i = 0; i < 4; i++) {
				offsets.push(new OffsetAt(new Date(startYear + i, 0, 1)));
				offsets.push(new OffsetAt(new Date(startYear + i, 6, 1)));
			}
	
			return offsets;
		}
	
		function sortZoneScores (a, b) {
			if (a.offsetScore !== b.offsetScore) {
				return a.offsetScore - b.offsetScore;
			}
			if (a.abbrScore !== b.abbrScore) {
				return a.abbrScore - b.abbrScore;
			}
			if (a.zone.population !== b.zone.population) {
				return b.zone.population - a.zone.population;
			}
			return b.zone.name.localeCompare(a.zone.name);
		}
	
		function addToGuesses (name, offsets) {
			var i, offset;
			arrayToInt(offsets);
			for (i = 0; i < offsets.length; i++) {
				offset = offsets[i];
				guesses[offset] = guesses[offset] || {};
				guesses[offset][name] = true;
			}
		}
	
		function guessesForUserOffsets (offsets) {
			var offsetsLength = offsets.length,
				filteredGuesses = {},
				out = [],
				i, j, guessesOffset;
	
			for (i = 0; i < offsetsLength; i++) {
				guessesOffset = guesses[offsets[i].offset] || {};
				for (j in guessesOffset) {
					if (guessesOffset.hasOwnProperty(j)) {
						filteredGuesses[j] = true;
					}
				}
			}
	
			for (i in filteredGuesses) {
				if (filteredGuesses.hasOwnProperty(i)) {
					out.push(names[i]);
				}
			}
	
			return out;
		}
	
		function rebuildGuess () {
	
			// use Intl API when available and returning valid time zone
			try {
				var intlName = Intl.DateTimeFormat().resolvedOptions().timeZone;
				if (intlName && intlName.length > 3) {
					var name = names[normalizeName(intlName)];
					if (name) {
						return name;
					}
					logError("Moment Timezone found " + intlName + " from the Intl api, but did not have that data loaded.");
				}
			} catch (e) {
				// Intl unavailable, fall back to manual guessing.
			}
	
			var offsets = userOffsets(),
				offsetsLength = offsets.length,
				guesses = guessesForUserOffsets(offsets),
				zoneScores = [],
				zoneScore, i, j;
	
			for (i = 0; i < guesses.length; i++) {
				zoneScore = new ZoneScore(getZone(guesses[i]), offsetsLength);
				for (j = 0; j < offsetsLength; j++) {
					zoneScore.scoreOffsetAt(offsets[j]);
				}
				zoneScores.push(zoneScore);
			}
	
			zoneScores.sort(sortZoneScores);
	
			return zoneScores.length > 0 ? zoneScores[0].zone.name : undefined;
		}
	
		function guess (ignoreCache) {
			if (!cachedGuess || ignoreCache) {
				cachedGuess = rebuildGuess();
			}
			return cachedGuess;
		}
	
		/************************************
			Global Methods
		************************************/
	
		function normalizeName (name) {
			return (name || '').toLowerCase().replace(/\//g, '_');
		}
	
		function addZone (packed) {
			var i, name, split, normalized;
	
			if (typeof packed === "string") {
				packed = [packed];
			}
	
			for (i = 0; i < packed.length; i++) {
				split = packed[i].split('|');
				name = split[0];
				normalized = normalizeName(name);
				zones[normalized] = packed[i];
				names[normalized] = name;
				addToGuesses(normalized, split[2].split(' '));
			}
		}
	
		function getZone (name, caller) {
	
			name = normalizeName(name);
	
			var zone = zones[name];
			var link;
	
			if (zone instanceof Zone) {
				return zone;
			}
	
			if (typeof zone === 'string') {
				zone = new Zone(zone);
				zones[name] = zone;
				return zone;
			}
	
			// Pass getZone to prevent recursion more than 1 level deep
			if (links[name] && caller !== getZone && (link = getZone(links[name], getZone))) {
				zone = zones[name] = new Zone();
				zone._set(link);
				zone.name = names[name];
				return zone;
			}
	
			return null;
		}
	
		function getNames () {
			var i, out = [];
	
			for (i in names) {
				if (names.hasOwnProperty(i) && (zones[i] || zones[links[i]]) && names[i]) {
					out.push(names[i]);
				}
			}
	
			return out.sort();
		}
	
		function getCountryNames () {
			return Object.keys(countries);
		}
	
		function addLink (aliases) {
			var i, alias, normal0, normal1;
	
			if (typeof aliases === "string") {
				aliases = [aliases];
			}
	
			for (i = 0; i < aliases.length; i++) {
				alias = aliases[i].split('|');
	
				normal0 = normalizeName(alias[0]);
				normal1 = normalizeName(alias[1]);
	
				links[normal0] = normal1;
				names[normal0] = alias[0];
	
				links[normal1] = normal0;
				names[normal1] = alias[1];
			}
		}
	
		function addCountries (data) {
			var i, country_code, country_zones, split;
			if (!data || !data.length) return;
			for (i = 0; i < data.length; i++) {
				split = data[i].split('|');
				country_code = split[0].toUpperCase();
				country_zones = split[1].split(' ');
				countries[country_code] = new Country(
					country_code,
					country_zones
				);
			}
		}
	
		function getCountry (name) {
			name = name.toUpperCase();
			return countries[name] || null;
		}
	
		function zonesForCountry(country, with_offset) {
			country = getCountry(country);
	
			if (!country) return null;
	
			var zones = country.zones.sort();
	
			if (with_offset) {
				return zones.map(function (zone_name) {
					var zone = getZone(zone_name);
					return {
						name: zone_name,
						offset: zone.utcOffset(new Date())
					};
				});
			}
	
			return zones;
		}
	
		function loadData (data) {
			addZone(data.zones);
			addLink(data.links);
			addCountries(data.countries);
			tz.dataVersion = data.version;
		}
	
		function zoneExists (name) {
			if (!zoneExists.didShowError) {
				zoneExists.didShowError = true;
					logError("moment.tz.zoneExists('" + name + "') has been deprecated in favor of !moment.tz.zone('" + name + "')");
			}
			return !!getZone(name);
		}
	
		function needsOffset (m) {
			var isUnixTimestamp = (m._f === 'X' || m._f === 'x');
			return !!(m._a && (m._tzm === undefined) && !isUnixTimestamp);
		}
	
		function logError (message) {
			if (typeof console !== 'undefined' && typeof console.error === 'function') {
				console.error(message);
			}
		}
	
		/************************************
			moment.tz namespace
		************************************/
	
		function tz (input) {
			var args = Array.prototype.slice.call(arguments, 0, -1),
				name = arguments[arguments.length - 1],
				zone = getZone(name),
				out  = moment.utc.apply(null, args);
	
			if (zone && !moment.isMoment(input) && needsOffset(out)) {
				out.add(zone.parse(out), 'minutes');
			}
	
			out.tz(name);
	
			return out;
		}
	
		tz.version      = VERSION;
		tz.dataVersion  = '';
		tz._zones       = zones;
		tz._links       = links;
		tz._names       = names;
		tz._countries	= countries;
		tz.add          = addZone;
		tz.link         = addLink;
		tz.load         = loadData;
		tz.zone         = getZone;
		tz.zoneExists   = zoneExists; // deprecated in 0.1.0
		tz.guess        = guess;
		tz.names        = getNames;
		tz.Zone         = Zone;
		tz.unpack       = unpack;
		tz.unpackBase60 = unpackBase60;
		tz.needsOffset  = needsOffset;
		tz.moveInvalidForward   = true;
		tz.moveAmbiguousForward = false;
		tz.countries    = getCountryNames;
		tz.zonesForCountry = zonesForCountry;
	
		/************************************
			Interface with Moment.js
		************************************/
	
		var fn = moment.fn;
	
		moment.tz = tz;
	
		moment.defaultZone = null;
	
		moment.updateOffset = function (mom, keepTime) {
			var zone = moment.defaultZone,
				offset;
	
			if (mom._z === undefined) {
				if (zone && needsOffset(mom) && !mom._isUTC) {
					mom._d = moment.utc(mom._a)._d;
					mom.utc().add(zone.parse(mom), 'minutes');
				}
				mom._z = zone;
			}
			if (mom._z) {
				offset = mom._z.utcOffset(mom);
				if (Math.abs(offset) < 16) {
					offset = offset / 60;
				}
				if (mom.utcOffset !== undefined) {
					var z = mom._z;
					mom.utcOffset(-offset, keepTime);
					mom._z = z;
				} else {
					mom.zone(offset, keepTime);
				}
			}
		};
	
		fn.tz = function (name, keepTime) {
			if (name) {
				if (typeof name !== 'string') {
					throw new Error('Time zone name must be a string, got ' + name + ' [' + typeof name + ']');
				}
				this._z = getZone(name);
				if (this._z) {
					moment.updateOffset(this, keepTime);
				} else {
					logError("Moment Timezone has no data for " + name + ". See http://momentjs.com/timezone/docs/#/data-loading/.");
				}
				return this;
			}
			if (this._z) { return this._z.name; }
		};
	
		function abbrWrap (old) {
			return function () {
				if (this._z) { return this._z.abbr(this); }
				return old.call(this);
			};
		}
	
		function resetZoneWrap (old) {
			return function () {
				this._z = null;
				return old.apply(this, arguments);
			};
		}
	
		function resetZoneWrap2 (old) {
			return function () {
				if (arguments.length > 0) this._z = null;
				return old.apply(this, arguments);
			};
		}
	
		fn.zoneName  = abbrWrap(fn.zoneName);
		fn.zoneAbbr  = abbrWrap(fn.zoneAbbr);
		fn.utc       = resetZoneWrap(fn.utc);
		fn.local     = resetZoneWrap(fn.local);
		fn.utcOffset = resetZoneWrap2(fn.utcOffset);
	
		moment.tz.setDefault = function(name) {
			if (major < 2 || (major === 2 && minor < 9)) {
				logError('Moment Timezone setDefault() requires Moment.js >= 2.9.0. You are using Moment.js ' + moment.version + '.');
			}
			moment.defaultZone = name ? getZone(name) : null;
			return moment;
		};
	
		// Cloning a moment should include the _z property.
		var momentProperties = moment.momentProperties;
		if (Object.prototype.toString.call(momentProperties) === '[object Array]') {
			// moment 2.8.1+
			momentProperties.push('_z');
			momentProperties.push('_a');
		} else if (momentProperties) {
			// moment 2.7.0
			momentProperties._z = null;
		}
	
		loadData({
			"version": "2020a",
			"zones": [
				"Africa/Abidjan|GMT|0|0||48e5",
				"Africa/Nairobi|EAT|-30|0||47e5",
				"Africa/Algiers|CET|-10|0||26e5",
				"Africa/Lagos|WAT|-10|0||17e6",
				"Africa/Maputo|CAT|-20|0||26e5",
				"Africa/Cairo|EET EEST|-20 -30|01010|1M2m0 gL0 e10 mn0|15e6",
				"Africa/Casablanca|+00 +01|0 -10|010101010101010101010101010101010101|1H3C0 wM0 co0 go0 1o00 s00 dA0 vc0 11A0 A00 e00 y00 11A0 uM0 e00 Dc0 11A0 s00 e00 IM0 WM0 mo0 gM0 LA0 WM0 jA0 e00 28M0 e00 2600 gM0 2600 e00 2600 gM0|32e5",
				"Europe/Paris|CET CEST|-10 -20|01010101010101010101010|1GNB0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|11e6",
				"Africa/Johannesburg|SAST|-20|0||84e5",
				"Africa/Khartoum|EAT CAT|-30 -20|01|1Usl0|51e5",
				"Africa/Sao_Tome|GMT WAT|0 -10|010|1UQN0 2q00|",
				"Africa/Tripoli|EET CET CEST|-20 -10 -20|0120|1IlA0 TA0 1o00|11e5",
				"Africa/Windhoek|CAT WAT|-20 -10|0101010101010|1GQo0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0|32e4",
				"America/Adak|HST HDT|a0 90|01010101010101010101010|1GIc0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0|326",
				"America/Anchorage|AKST AKDT|90 80|01010101010101010101010|1GIb0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0|30e4",
				"America/Santo_Domingo|AST|40|0||29e5",
				"America/Araguaina|-03 -02|30 20|010|1IdD0 Lz0|14e4",
				"America/Fortaleza|-03|30|0||34e5",
				"America/Asuncion|-03 -04|30 40|01010101010101010101010|1GTf0 1cN0 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0|28e5",
				"America/Panama|EST|50|0||15e5",
				"America/Mexico_City|CST CDT|60 50|01010101010101010101010|1GQw0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0|20e6",
				"America/Bahia|-02 -03|20 30|01|1GCq0|27e5",
				"America/Managua|CST|60|0||22e5",
				"America/La_Paz|-04|40|0||19e5",
				"America/Lima|-05|50|0||11e6",
				"America/Denver|MST MDT|70 60|01010101010101010101010|1GI90 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0|26e5",
				"America/Campo_Grande|-03 -04|30 40|0101010101010101|1GCr0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1HB0 FX0|77e4",
				"America/Cancun|CST CDT EST|60 50 50|01010102|1GQw0 1nX0 14p0 1lb0 14p0 1lb0 Dd0|63e4",
				"America/Caracas|-0430 -04|4u 40|01|1QMT0|29e5",
				"America/Chicago|CST CDT|60 50|01010101010101010101010|1GI80 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0|92e5",
				"America/Chihuahua|MST MDT|70 60|01010101010101010101010|1GQx0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0|81e4",
				"America/Phoenix|MST|70|0||42e5",
				"America/Whitehorse|PST PDT MST|80 70 70|010101010101010102|1GIa0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0|23e3",
				"America/New_York|EST EDT|50 40|01010101010101010101010|1GI70 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0|21e6",
				"America/Rio_Branco|-04 -05|40 50|01|1KLE0|31e4",
				"America/Los_Angeles|PST PDT|80 70|01010101010101010101010|1GIa0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0|15e6",
				"America/Fort_Nelson|PST PDT MST|80 70 70|01010102|1GIa0 1zb0 Op0 1zb0 Op0 1zb0 Op0|39e2",
				"America/Halifax|AST ADT|40 30|01010101010101010101010|1GI60 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0|39e4",
				"America/Godthab|-03 -02|30 20|01010101010101010101010|1GNB0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|17e3",
				"America/Grand_Turk|EST EDT AST|50 40 40|0101010121010101010|1GI70 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 5Ip0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0|37e2",
				"America/Havana|CST CDT|50 40|01010101010101010101010|1GQt0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0|21e5",
				"America/Metlakatla|PST AKST AKDT|80 90 80|01212120121212121|1PAa0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 uM0 jB0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0|14e2",
				"America/Miquelon|-03 -02|30 20|01010101010101010101010|1GI50 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0|61e2",
				"America/Montevideo|-02 -03|20 30|01010101|1GI40 1o10 11z0 1o10 11z0 1o10 11z0|17e5",
				"America/Noronha|-02|20|0||30e2",
				"America/Port-au-Prince|EST EDT|50 40|010101010101010101010|1GI70 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 3iN0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0|23e5",
				"Antarctica/Palmer|-03 -04|30 40|010101010|1H3D0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0|40",
				"America/Santiago|-03 -04|30 40|010101010101010101010|1H3D0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1zb0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0|62e5",
				"America/Sao_Paulo|-02 -03|20 30|0101010101010101|1GCq0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1HB0 FX0|20e6",
				"Atlantic/Azores|-01 +00|10 0|01010101010101010101010|1GNB0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|25e4",
				"America/St_Johns|NST NDT|3u 2u|01010101010101010101010|1GI5u 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0|11e4",
				"Antarctica/Casey|+11 +08|-b0 -80|0101|1GAF0 blz0 3m10|10",
				"Antarctica/Davis|+05 +07|-50 -70|01|1GAI0|70",
				"Pacific/Port_Moresby|+10|-a0|0||25e4",
				"Pacific/Guadalcanal|+11|-b0|0||11e4",
				"Asia/Tashkent|+05|-50|0||23e5",
				"Pacific/Auckland|NZDT NZST|-d0 -c0|01010101010101010101010|1GQe0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00|14e5",
				"Asia/Baghdad|+03|-30|0||66e5",
				"Antarctica/Troll|+00 +02|0 -20|01010101010101010101010|1GNB0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|40",
				"Asia/Dhaka|+06|-60|0||16e6",
				"Asia/Amman|EET EEST|-20 -30|010101010101010101010|1GPy0 4bX0 Dd0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00|25e5",
				"Asia/Kamchatka|+12|-c0|0||18e4",
				"Asia/Baku|+04 +05|-40 -50|010101010|1GNA0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00|27e5",
				"Asia/Bangkok|+07|-70|0||15e6",
				"Asia/Barnaul|+07 +06|-70 -60|010|1N7v0 3rd0|",
				"Asia/Beirut|EET EEST|-20 -30|01010101010101010101010|1GNy0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0|22e5",
				"Asia/Kuala_Lumpur|+08|-80|0||71e5",
				"Asia/Kolkata|IST|-5u|0||15e6",
				"Asia/Chita|+10 +08 +09|-a0 -80 -90|012|1N7s0 3re0|33e4",
				"Asia/Ulaanbaatar|+08 +09|-80 -90|01010|1O8G0 1cJ0 1cP0 1cJ0|12e5",
				"Asia/Shanghai|CST|-80|0||23e6",
				"Asia/Colombo|+0530|-5u|0||22e5",
				"Asia/Damascus|EET EEST|-20 -30|01010101010101010101010|1GPy0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0|26e5",
				"Asia/Dili|+09|-90|0||19e4",
				"Asia/Dubai|+04|-40|0||39e5",
				"Asia/Famagusta|EET EEST +03|-20 -30 -30|0101010101201010101010|1GNB0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 15U0 2Ks0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|",
				"Asia/Gaza|EET EEST|-20 -30|01010101010101010101010|1GPy0 1a00 1fA0 1cL0 1cN0 1nX0 1210 1nz0 1220 1qL0 WN0 1qL0 WN0 1qL0 11c0 1oo0 11c0 1rc0 Wo0 1rc0 Wo0 1rc0|18e5",
				"Asia/Hong_Kong|HKT|-80|0||73e5",
				"Asia/Hovd|+07 +08|-70 -80|01010|1O8H0 1cJ0 1cP0 1cJ0|81e3",
				"Asia/Irkutsk|+09 +08|-90 -80|01|1N7t0|60e4",
				"Europe/Istanbul|EET EEST +03|-20 -30 -30|01010101012|1GNB0 1qM0 11A0 1o00 1200 1nA0 11A0 1tA0 U00 15w0|13e6",
				"Asia/Jakarta|WIB|-70|0||31e6",
				"Asia/Jayapura|WIT|-90|0||26e4",
				"Asia/Jerusalem|IST IDT|-20 -30|01010101010101010101010|1GPA0 1aL0 1eN0 1oL0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0|81e4",
				"Asia/Kabul|+0430|-4u|0||46e5",
				"Asia/Karachi|PKT|-50|0||24e6",
				"Asia/Kathmandu|+0545|-5J|0||12e5",
				"Asia/Yakutsk|+10 +09|-a0 -90|01|1N7s0|28e4",
				"Asia/Krasnoyarsk|+08 +07|-80 -70|01|1N7u0|10e5",
				"Asia/Magadan|+12 +10 +11|-c0 -a0 -b0|012|1N7q0 3Cq0|95e3",
				"Asia/Makassar|WITA|-80|0||15e5",
				"Asia/Manila|PST|-80|0||24e6",
				"Europe/Athens|EET EEST|-20 -30|01010101010101010101010|1GNB0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|35e5",
				"Asia/Novosibirsk|+07 +06|-70 -60|010|1N7v0 4eN0|15e5",
				"Asia/Omsk|+07 +06|-70 -60|01|1N7v0|12e5",
				"Asia/Pyongyang|KST KST|-90 -8u|010|1P4D0 6BA0|29e5",
				"Asia/Qyzylorda|+06 +05|-60 -50|01|1Xei0|73e4",
				"Asia/Rangoon|+0630|-6u|0||48e5",
				"Asia/Sakhalin|+11 +10|-b0 -a0|010|1N7r0 3rd0|58e4",
				"Asia/Seoul|KST|-90|0||23e6",
				"Asia/Srednekolymsk|+12 +11|-c0 -b0|01|1N7q0|35e2",
				"Asia/Tehran|+0330 +0430|-3u -4u|01010101010101010101010|1GLUu 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0|14e6",
				"Asia/Tokyo|JST|-90|0||38e6",
				"Asia/Tomsk|+07 +06|-70 -60|010|1N7v0 3Qp0|10e5",
				"Asia/Vladivostok|+11 +10|-b0 -a0|01|1N7r0|60e4",
				"Asia/Yekaterinburg|+06 +05|-60 -50|01|1N7w0|14e5",
				"Europe/Lisbon|WET WEST|0 -10|01010101010101010101010|1GNB0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|27e5",
				"Atlantic/Cape_Verde|-01|10|0||50e4",
				"Australia/Sydney|AEDT AEST|-b0 -a0|01010101010101010101010|1GQg0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0|40e5",
				"Australia/Adelaide|ACDT ACST|-au -9u|01010101010101010101010|1GQgu 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0|11e5",
				"Australia/Brisbane|AEST|-a0|0||20e5",
				"Australia/Darwin|ACST|-9u|0||12e4",
				"Australia/Eucla|+0845|-8J|0||368",
				"Australia/Lord_Howe|+11 +1030|-b0 -au|01010101010101010101010|1GQf0 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu|347",
				"Australia/Perth|AWST|-80|0||18e5",
				"Pacific/Easter|-05 -06|50 60|010101010101010101010|1H3D0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1zb0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0|30e2",
				"Europe/Dublin|GMT IST|0 -10|01010101010101010101010|1GNB0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|12e5",
				"Etc/GMT-1|+01|-10|0||",
				"Pacific/Fakaofo|+13|-d0|0||483",
				"Pacific/Kiritimati|+14|-e0|0||51e2",
				"Etc/GMT-2|+02|-20|0||",
				"Pacific/Tahiti|-10|a0|0||18e4",
				"Pacific/Niue|-11|b0|0||12e2",
				"Etc/GMT+12|-12|c0|0||",
				"Pacific/Galapagos|-06|60|0||25e3",
				"Etc/GMT+7|-07|70|0||",
				"Pacific/Pitcairn|-08|80|0||56",
				"Pacific/Gambier|-09|90|0||125",
				"Etc/UTC|UTC|0|0||",
				"Europe/Ulyanovsk|+04 +03|-40 -30|010|1N7y0 3rd0|13e5",
				"Europe/London|GMT BST|0 -10|01010101010101010101010|1GNB0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|10e6",
				"Europe/Chisinau|EET EEST|-20 -30|01010101010101010101010|1GNA0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|67e4",
				"Europe/Kaliningrad|+03 EET|-30 -20|01|1N7z0|44e4",
				"Europe/Kirov|+04 +03|-40 -30|01|1N7y0|48e4",
				"Europe/Moscow|MSK MSK|-40 -30|01|1N7y0|16e6",
				"Europe/Saratov|+04 +03|-40 -30|010|1N7y0 5810|",
				"Europe/Simferopol|EET EEST MSK MSK|-20 -30 -40 -30|0101023|1GNB0 1qM0 11A0 1o00 11z0 1nW0|33e4",
				"Europe/Volgograd|+04 +03|-40 -30|010|1N7y0 9Jd0|10e5",
				"Pacific/Honolulu|HST|a0|0||37e4",
				"MET|MET MEST|-10 -20|01010101010101010101010|1GNB0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|",
				"Pacific/Chatham|+1345 +1245|-dJ -cJ|01010101010101010101010|1GQe0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00|600",
				"Pacific/Apia|+14 +13|-e0 -d0|01010101010101010101010|1GQe0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00|37e3",
				"Pacific/Bougainville|+10 +11|-a0 -b0|01|1NwE0|18e4",
				"Pacific/Fiji|+13 +12|-d0 -c0|01010101010101010101010|1Goe0 1Nc0 Ao0 1Q00 xz0 1SN0 uM0 1SM0 uM0 1VA0 s00 1VA0 s00 1VA0 s00 20o0 pc0 20o0 s00 20o0 pc0 20o0|88e4",
				"Pacific/Guam|ChST|-a0|0||17e4",
				"Pacific/Marquesas|-0930|9u|0||86e2",
				"Pacific/Pago_Pago|SST|b0|0||37e2",
				"Pacific/Norfolk|+1130 +11 +12|-bu -b0 -c0|012121212|1PoCu 9Jcu 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0|25e4",
				"Pacific/Tongatapu|+13 +14|-d0 -e0|010|1S4d0 s00|75e3"
			],
			"links": [
				"Africa/Abidjan|Africa/Accra",
				"Africa/Abidjan|Africa/Bamako",
				"Africa/Abidjan|Africa/Banjul",
				"Africa/Abidjan|Africa/Bissau",
				"Africa/Abidjan|Africa/Conakry",
				"Africa/Abidjan|Africa/Dakar",
				"Africa/Abidjan|Africa/Freetown",
				"Africa/Abidjan|Africa/Lome",
				"Africa/Abidjan|Africa/Monrovia",
				"Africa/Abidjan|Africa/Nouakchott",
				"Africa/Abidjan|Africa/Ouagadougou",
				"Africa/Abidjan|Africa/Timbuktu",
				"Africa/Abidjan|America/Danmarkshavn",
				"Africa/Abidjan|Atlantic/Reykjavik",
				"Africa/Abidjan|Atlantic/St_Helena",
				"Africa/Abidjan|Etc/GMT",
				"Africa/Abidjan|Etc/GMT+0",
				"Africa/Abidjan|Etc/GMT-0",
				"Africa/Abidjan|Etc/GMT0",
				"Africa/Abidjan|Etc/Greenwich",
				"Africa/Abidjan|GMT",
				"Africa/Abidjan|GMT+0",
				"Africa/Abidjan|GMT-0",
				"Africa/Abidjan|GMT0",
				"Africa/Abidjan|Greenwich",
				"Africa/Abidjan|Iceland",
				"Africa/Algiers|Africa/Tunis",
				"Africa/Cairo|Egypt",
				"Africa/Casablanca|Africa/El_Aaiun",
				"Africa/Johannesburg|Africa/Maseru",
				"Africa/Johannesburg|Africa/Mbabane",
				"Africa/Lagos|Africa/Bangui",
				"Africa/Lagos|Africa/Brazzaville",
				"Africa/Lagos|Africa/Douala",
				"Africa/Lagos|Africa/Kinshasa",
				"Africa/Lagos|Africa/Libreville",
				"Africa/Lagos|Africa/Luanda",
				"Africa/Lagos|Africa/Malabo",
				"Africa/Lagos|Africa/Ndjamena",
				"Africa/Lagos|Africa/Niamey",
				"Africa/Lagos|Africa/Porto-Novo",
				"Africa/Maputo|Africa/Blantyre",
				"Africa/Maputo|Africa/Bujumbura",
				"Africa/Maputo|Africa/Gaborone",
				"Africa/Maputo|Africa/Harare",
				"Africa/Maputo|Africa/Kigali",
				"Africa/Maputo|Africa/Lubumbashi",
				"Africa/Maputo|Africa/Lusaka",
				"Africa/Nairobi|Africa/Addis_Ababa",
				"Africa/Nairobi|Africa/Asmara",
				"Africa/Nairobi|Africa/Asmera",
				"Africa/Nairobi|Africa/Dar_es_Salaam",
				"Africa/Nairobi|Africa/Djibouti",
				"Africa/Nairobi|Africa/Juba",
				"Africa/Nairobi|Africa/Kampala",
				"Africa/Nairobi|Africa/Mogadishu",
				"Africa/Nairobi|Indian/Antananarivo",
				"Africa/Nairobi|Indian/Comoro",
				"Africa/Nairobi|Indian/Mayotte",
				"Africa/Tripoli|Libya",
				"America/Adak|America/Atka",
				"America/Adak|US/Aleutian",
				"America/Anchorage|America/Juneau",
				"America/Anchorage|America/Nome",
				"America/Anchorage|America/Sitka",
				"America/Anchorage|America/Yakutat",
				"America/Anchorage|US/Alaska",
				"America/Campo_Grande|America/Cuiaba",
				"America/Chicago|America/Indiana/Knox",
				"America/Chicago|America/Indiana/Tell_City",
				"America/Chicago|America/Knox_IN",
				"America/Chicago|America/Matamoros",
				"America/Chicago|America/Menominee",
				"America/Chicago|America/North_Dakota/Beulah",
				"America/Chicago|America/North_Dakota/Center",
				"America/Chicago|America/North_Dakota/New_Salem",
				"America/Chicago|America/Rainy_River",
				"America/Chicago|America/Rankin_Inlet",
				"America/Chicago|America/Resolute",
				"America/Chicago|America/Winnipeg",
				"America/Chicago|CST6CDT",
				"America/Chicago|Canada/Central",
				"America/Chicago|US/Central",
				"America/Chicago|US/Indiana-Starke",
				"America/Chihuahua|America/Mazatlan",
				"America/Chihuahua|Mexico/BajaSur",
				"America/Denver|America/Boise",
				"America/Denver|America/Cambridge_Bay",
				"America/Denver|America/Edmonton",
				"America/Denver|America/Inuvik",
				"America/Denver|America/Ojinaga",
				"America/Denver|America/Shiprock",
				"America/Denver|America/Yellowknife",
				"America/Denver|Canada/Mountain",
				"America/Denver|MST7MDT",
				"America/Denver|Navajo",
				"America/Denver|US/Mountain",
				"America/Fortaleza|America/Argentina/Buenos_Aires",
				"America/Fortaleza|America/Argentina/Catamarca",
				"America/Fortaleza|America/Argentina/ComodRivadavia",
				"America/Fortaleza|America/Argentina/Cordoba",
				"America/Fortaleza|America/Argentina/Jujuy",
				"America/Fortaleza|America/Argentina/La_Rioja",
				"America/Fortaleza|America/Argentina/Mendoza",
				"America/Fortaleza|America/Argentina/Rio_Gallegos",
				"America/Fortaleza|America/Argentina/Salta",
				"America/Fortaleza|America/Argentina/San_Juan",
				"America/Fortaleza|America/Argentina/San_Luis",
				"America/Fortaleza|America/Argentina/Tucuman",
				"America/Fortaleza|America/Argentina/Ushuaia",
				"America/Fortaleza|America/Belem",
				"America/Fortaleza|America/Buenos_Aires",
				"America/Fortaleza|America/Catamarca",
				"America/Fortaleza|America/Cayenne",
				"America/Fortaleza|America/Cordoba",
				"America/Fortaleza|America/Jujuy",
				"America/Fortaleza|America/Maceio",
				"America/Fortaleza|America/Mendoza",
				"America/Fortaleza|America/Paramaribo",
				"America/Fortaleza|America/Recife",
				"America/Fortaleza|America/Rosario",
				"America/Fortaleza|America/Santarem",
				"America/Fortaleza|Antarctica/Rothera",
				"America/Fortaleza|Atlantic/Stanley",
				"America/Fortaleza|Etc/GMT+3",
				"America/Godthab|America/Nuuk",
				"America/Halifax|America/Glace_Bay",
				"America/Halifax|America/Goose_Bay",
				"America/Halifax|America/Moncton",
				"America/Halifax|America/Thule",
				"America/Halifax|Atlantic/Bermuda",
				"America/Halifax|Canada/Atlantic",
				"America/Havana|Cuba",
				"America/La_Paz|America/Boa_Vista",
				"America/La_Paz|America/Guyana",
				"America/La_Paz|America/Manaus",
				"America/La_Paz|America/Porto_Velho",
				"America/La_Paz|Brazil/West",
				"America/La_Paz|Etc/GMT+4",
				"America/Lima|America/Bogota",
				"America/Lima|America/Guayaquil",
				"America/Lima|Etc/GMT+5",
				"America/Los_Angeles|America/Ensenada",
				"America/Los_Angeles|America/Santa_Isabel",
				"America/Los_Angeles|America/Tijuana",
				"America/Los_Angeles|America/Vancouver",
				"America/Los_Angeles|Canada/Pacific",
				"America/Los_Angeles|Mexico/BajaNorte",
				"America/Los_Angeles|PST8PDT",
				"America/Los_Angeles|US/Pacific",
				"America/Los_Angeles|US/Pacific-New",
				"America/Managua|America/Belize",
				"America/Managua|America/Costa_Rica",
				"America/Managua|America/El_Salvador",
				"America/Managua|America/Guatemala",
				"America/Managua|America/Regina",
				"America/Managua|America/Swift_Current",
				"America/Managua|America/Tegucigalpa",
				"America/Managua|Canada/Saskatchewan",
				"America/Mexico_City|America/Bahia_Banderas",
				"America/Mexico_City|America/Merida",
				"America/Mexico_City|America/Monterrey",
				"America/Mexico_City|Mexico/General",
				"America/New_York|America/Detroit",
				"America/New_York|America/Fort_Wayne",
				"America/New_York|America/Indiana/Indianapolis",
				"America/New_York|America/Indiana/Marengo",
				"America/New_York|America/Indiana/Petersburg",
				"America/New_York|America/Indiana/Vevay",
				"America/New_York|America/Indiana/Vincennes",
				"America/New_York|America/Indiana/Winamac",
				"America/New_York|America/Indianapolis",
				"America/New_York|America/Iqaluit",
				"America/New_York|America/Kentucky/Louisville",
				"America/New_York|America/Kentucky/Monticello",
				"America/New_York|America/Louisville",
				"America/New_York|America/Montreal",
				"America/New_York|America/Nassau",
				"America/New_York|America/Nipigon",
				"America/New_York|America/Pangnirtung",
				"America/New_York|America/Thunder_Bay",
				"America/New_York|America/Toronto",
				"America/New_York|Canada/Eastern",
				"America/New_York|EST5EDT",
				"America/New_York|US/East-Indiana",
				"America/New_York|US/Eastern",
				"America/New_York|US/Michigan",
				"America/Noronha|Atlantic/South_Georgia",
				"America/Noronha|Brazil/DeNoronha",
				"America/Noronha|Etc/GMT+2",
				"America/Panama|America/Atikokan",
				"America/Panama|America/Cayman",
				"America/Panama|America/Coral_Harbour",
				"America/Panama|America/Jamaica",
				"America/Panama|EST",
				"America/Panama|Jamaica",
				"America/Phoenix|America/Creston",
				"America/Phoenix|America/Dawson_Creek",
				"America/Phoenix|America/Hermosillo",
				"America/Phoenix|MST",
				"America/Phoenix|US/Arizona",
				"America/Rio_Branco|America/Eirunepe",
				"America/Rio_Branco|America/Porto_Acre",
				"America/Rio_Branco|Brazil/Acre",
				"America/Santiago|Chile/Continental",
				"America/Santo_Domingo|America/Anguilla",
				"America/Santo_Domingo|America/Antigua",
				"America/Santo_Domingo|America/Aruba",
				"America/Santo_Domingo|America/Barbados",
				"America/Santo_Domingo|America/Blanc-Sablon",
				"America/Santo_Domingo|America/Curacao",
				"America/Santo_Domingo|America/Dominica",
				"America/Santo_Domingo|America/Grenada",
				"America/Santo_Domingo|America/Guadeloupe",
				"America/Santo_Domingo|America/Kralendijk",
				"America/Santo_Domingo|America/Lower_Princes",
				"America/Santo_Domingo|America/Marigot",
				"America/Santo_Domingo|America/Martinique",
				"America/Santo_Domingo|America/Montserrat",
				"America/Santo_Domingo|America/Port_of_Spain",
				"America/Santo_Domingo|America/Puerto_Rico",
				"America/Santo_Domingo|America/St_Barthelemy",
				"America/Santo_Domingo|America/St_Kitts",
				"America/Santo_Domingo|America/St_Lucia",
				"America/Santo_Domingo|America/St_Thomas",
				"America/Santo_Domingo|America/St_Vincent",
				"America/Santo_Domingo|America/Tortola",
				"America/Santo_Domingo|America/Virgin",
				"America/Sao_Paulo|Brazil/East",
				"America/St_Johns|Canada/Newfoundland",
				"America/Whitehorse|America/Dawson",
				"America/Whitehorse|Canada/Yukon",
				"Antarctica/Palmer|America/Punta_Arenas",
				"Asia/Baghdad|Antarctica/Syowa",
				"Asia/Baghdad|Asia/Aden",
				"Asia/Baghdad|Asia/Bahrain",
				"Asia/Baghdad|Asia/Kuwait",
				"Asia/Baghdad|Asia/Qatar",
				"Asia/Baghdad|Asia/Riyadh",
				"Asia/Baghdad|Etc/GMT-3",
				"Asia/Baghdad|Europe/Minsk",
				"Asia/Bangkok|Asia/Ho_Chi_Minh",
				"Asia/Bangkok|Asia/Novokuznetsk",
				"Asia/Bangkok|Asia/Phnom_Penh",
				"Asia/Bangkok|Asia/Saigon",
				"Asia/Bangkok|Asia/Vientiane",
				"Asia/Bangkok|Etc/GMT-7",
				"Asia/Bangkok|Indian/Christmas",
				"Asia/Dhaka|Antarctica/Vostok",
				"Asia/Dhaka|Asia/Almaty",
				"Asia/Dhaka|Asia/Bishkek",
				"Asia/Dhaka|Asia/Dacca",
				"Asia/Dhaka|Asia/Kashgar",
				"Asia/Dhaka|Asia/Qostanay",
				"Asia/Dhaka|Asia/Thimbu",
				"Asia/Dhaka|Asia/Thimphu",
				"Asia/Dhaka|Asia/Urumqi",
				"Asia/Dhaka|Etc/GMT-6",
				"Asia/Dhaka|Indian/Chagos",
				"Asia/Dili|Etc/GMT-9",
				"Asia/Dili|Pacific/Palau",
				"Asia/Dubai|Asia/Muscat",
				"Asia/Dubai|Asia/Tbilisi",
				"Asia/Dubai|Asia/Yerevan",
				"Asia/Dubai|Etc/GMT-4",
				"Asia/Dubai|Europe/Samara",
				"Asia/Dubai|Indian/Mahe",
				"Asia/Dubai|Indian/Mauritius",
				"Asia/Dubai|Indian/Reunion",
				"Asia/Gaza|Asia/Hebron",
				"Asia/Hong_Kong|Hongkong",
				"Asia/Jakarta|Asia/Pontianak",
				"Asia/Jerusalem|Asia/Tel_Aviv",
				"Asia/Jerusalem|Israel",
				"Asia/Kamchatka|Asia/Anadyr",
				"Asia/Kamchatka|Etc/GMT-12",
				"Asia/Kamchatka|Kwajalein",
				"Asia/Kamchatka|Pacific/Funafuti",
				"Asia/Kamchatka|Pacific/Kwajalein",
				"Asia/Kamchatka|Pacific/Majuro",
				"Asia/Kamchatka|Pacific/Nauru",
				"Asia/Kamchatka|Pacific/Tarawa",
				"Asia/Kamchatka|Pacific/Wake",
				"Asia/Kamchatka|Pacific/Wallis",
				"Asia/Kathmandu|Asia/Katmandu",
				"Asia/Kolkata|Asia/Calcutta",
				"Asia/Kuala_Lumpur|Asia/Brunei",
				"Asia/Kuala_Lumpur|Asia/Kuching",
				"Asia/Kuala_Lumpur|Asia/Singapore",
				"Asia/Kuala_Lumpur|Etc/GMT-8",
				"Asia/Kuala_Lumpur|Singapore",
				"Asia/Makassar|Asia/Ujung_Pandang",
				"Asia/Rangoon|Asia/Yangon",
				"Asia/Rangoon|Indian/Cocos",
				"Asia/Seoul|ROK",
				"Asia/Shanghai|Asia/Chongqing",
				"Asia/Shanghai|Asia/Chungking",
				"Asia/Shanghai|Asia/Harbin",
				"Asia/Shanghai|Asia/Macao",
				"Asia/Shanghai|Asia/Macau",
				"Asia/Shanghai|Asia/Taipei",
				"Asia/Shanghai|PRC",
				"Asia/Shanghai|ROC",
				"Asia/Tashkent|Antarctica/Mawson",
				"Asia/Tashkent|Asia/Aqtau",
				"Asia/Tashkent|Asia/Aqtobe",
				"Asia/Tashkent|Asia/Ashgabat",
				"Asia/Tashkent|Asia/Ashkhabad",
				"Asia/Tashkent|Asia/Atyrau",
				"Asia/Tashkent|Asia/Dushanbe",
				"Asia/Tashkent|Asia/Oral",
				"Asia/Tashkent|Asia/Samarkand",
				"Asia/Tashkent|Etc/GMT-5",
				"Asia/Tashkent|Indian/Kerguelen",
				"Asia/Tashkent|Indian/Maldives",
				"Asia/Tehran|Iran",
				"Asia/Tokyo|Japan",
				"Asia/Ulaanbaatar|Asia/Choibalsan",
				"Asia/Ulaanbaatar|Asia/Ulan_Bator",
				"Asia/Vladivostok|Asia/Ust-Nera",
				"Asia/Yakutsk|Asia/Khandyga",
				"Atlantic/Azores|America/Scoresbysund",
				"Atlantic/Cape_Verde|Etc/GMT+1",
				"Australia/Adelaide|Australia/Broken_Hill",
				"Australia/Adelaide|Australia/South",
				"Australia/Adelaide|Australia/Yancowinna",
				"Australia/Brisbane|Australia/Lindeman",
				"Australia/Brisbane|Australia/Queensland",
				"Australia/Darwin|Australia/North",
				"Australia/Lord_Howe|Australia/LHI",
				"Australia/Perth|Australia/West",
				"Australia/Sydney|Australia/ACT",
				"Australia/Sydney|Australia/Canberra",
				"Australia/Sydney|Australia/Currie",
				"Australia/Sydney|Australia/Hobart",
				"Australia/Sydney|Australia/Melbourne",
				"Australia/Sydney|Australia/NSW",
				"Australia/Sydney|Australia/Tasmania",
				"Australia/Sydney|Australia/Victoria",
				"Etc/UTC|Etc/UCT",
				"Etc/UTC|Etc/Universal",
				"Etc/UTC|Etc/Zulu",
				"Etc/UTC|UCT",
				"Etc/UTC|UTC",
				"Etc/UTC|Universal",
				"Etc/UTC|Zulu",
				"Europe/Athens|Asia/Nicosia",
				"Europe/Athens|EET",
				"Europe/Athens|Europe/Bucharest",
				"Europe/Athens|Europe/Helsinki",
				"Europe/Athens|Europe/Kiev",
				"Europe/Athens|Europe/Mariehamn",
				"Europe/Athens|Europe/Nicosia",
				"Europe/Athens|Europe/Riga",
				"Europe/Athens|Europe/Sofia",
				"Europe/Athens|Europe/Tallinn",
				"Europe/Athens|Europe/Uzhgorod",
				"Europe/Athens|Europe/Vilnius",
				"Europe/Athens|Europe/Zaporozhye",
				"Europe/Chisinau|Europe/Tiraspol",
				"Europe/Dublin|Eire",
				"Europe/Istanbul|Asia/Istanbul",
				"Europe/Istanbul|Turkey",
				"Europe/Lisbon|Atlantic/Canary",
				"Europe/Lisbon|Atlantic/Faeroe",
				"Europe/Lisbon|Atlantic/Faroe",
				"Europe/Lisbon|Atlantic/Madeira",
				"Europe/Lisbon|Portugal",
				"Europe/Lisbon|WET",
				"Europe/London|Europe/Belfast",
				"Europe/London|Europe/Guernsey",
				"Europe/London|Europe/Isle_of_Man",
				"Europe/London|Europe/Jersey",
				"Europe/London|GB",
				"Europe/London|GB-Eire",
				"Europe/Moscow|W-SU",
				"Europe/Paris|Africa/Ceuta",
				"Europe/Paris|Arctic/Longyearbyen",
				"Europe/Paris|Atlantic/Jan_Mayen",
				"Europe/Paris|CET",
				"Europe/Paris|Europe/Amsterdam",
				"Europe/Paris|Europe/Andorra",
				"Europe/Paris|Europe/Belgrade",
				"Europe/Paris|Europe/Berlin",
				"Europe/Paris|Europe/Bratislava",
				"Europe/Paris|Europe/Brussels",
				"Europe/Paris|Europe/Budapest",
				"Europe/Paris|Europe/Busingen",
				"Europe/Paris|Europe/Copenhagen",
				"Europe/Paris|Europe/Gibraltar",
				"Europe/Paris|Europe/Ljubljana",
				"Europe/Paris|Europe/Luxembourg",
				"Europe/Paris|Europe/Madrid",
				"Europe/Paris|Europe/Malta",
				"Europe/Paris|Europe/Monaco",
				"Europe/Paris|Europe/Oslo",
				"Europe/Paris|Europe/Podgorica",
				"Europe/Paris|Europe/Prague",
				"Europe/Paris|Europe/Rome",
				"Europe/Paris|Europe/San_Marino",
				"Europe/Paris|Europe/Sarajevo",
				"Europe/Paris|Europe/Skopje",
				"Europe/Paris|Europe/Stockholm",
				"Europe/Paris|Europe/Tirane",
				"Europe/Paris|Europe/Vaduz",
				"Europe/Paris|Europe/Vatican",
				"Europe/Paris|Europe/Vienna",
				"Europe/Paris|Europe/Warsaw",
				"Europe/Paris|Europe/Zagreb",
				"Europe/Paris|Europe/Zurich",
				"Europe/Paris|Poland",
				"Europe/Ulyanovsk|Europe/Astrakhan",
				"Pacific/Auckland|Antarctica/McMurdo",
				"Pacific/Auckland|Antarctica/South_Pole",
				"Pacific/Auckland|NZ",
				"Pacific/Chatham|NZ-CHAT",
				"Pacific/Easter|Chile/EasterIsland",
				"Pacific/Fakaofo|Etc/GMT-13",
				"Pacific/Fakaofo|Pacific/Enderbury",
				"Pacific/Galapagos|Etc/GMT+6",
				"Pacific/Gambier|Etc/GMT+9",
				"Pacific/Guadalcanal|Antarctica/Macquarie",
				"Pacific/Guadalcanal|Etc/GMT-11",
				"Pacific/Guadalcanal|Pacific/Efate",
				"Pacific/Guadalcanal|Pacific/Kosrae",
				"Pacific/Guadalcanal|Pacific/Noumea",
				"Pacific/Guadalcanal|Pacific/Pohnpei",
				"Pacific/Guadalcanal|Pacific/Ponape",
				"Pacific/Guam|Pacific/Saipan",
				"Pacific/Honolulu|HST",
				"Pacific/Honolulu|Pacific/Johnston",
				"Pacific/Honolulu|US/Hawaii",
				"Pacific/Kiritimati|Etc/GMT-14",
				"Pacific/Niue|Etc/GMT+11",
				"Pacific/Pago_Pago|Pacific/Midway",
				"Pacific/Pago_Pago|Pacific/Samoa",
				"Pacific/Pago_Pago|US/Samoa",
				"Pacific/Pitcairn|Etc/GMT+8",
				"Pacific/Port_Moresby|Antarctica/DumontDUrville",
				"Pacific/Port_Moresby|Etc/GMT-10",
				"Pacific/Port_Moresby|Pacific/Chuuk",
				"Pacific/Port_Moresby|Pacific/Truk",
				"Pacific/Port_Moresby|Pacific/Yap",
				"Pacific/Tahiti|Etc/GMT+10",
				"Pacific/Tahiti|Pacific/Rarotonga"
			],
			"countries": [
				"AD|Europe/Andorra",
				"AE|Asia/Dubai",
				"AF|Asia/Kabul",
				"AG|America/Port_of_Spain America/Antigua",
				"AI|America/Port_of_Spain America/Anguilla",
				"AL|Europe/Tirane",
				"AM|Asia/Yerevan",
				"AO|Africa/Lagos Africa/Luanda",
				"AQ|Antarctica/Casey Antarctica/Davis Antarctica/DumontDUrville Antarctica/Mawson Antarctica/Palmer Antarctica/Rothera Antarctica/Syowa Antarctica/Troll Antarctica/Vostok Pacific/Auckland Antarctica/McMurdo",
				"AR|America/Argentina/Buenos_Aires America/Argentina/Cordoba America/Argentina/Salta America/Argentina/Jujuy America/Argentina/Tucuman America/Argentina/Catamarca America/Argentina/La_Rioja America/Argentina/San_Juan America/Argentina/Mendoza America/Argentina/San_Luis America/Argentina/Rio_Gallegos America/Argentina/Ushuaia",
				"AS|Pacific/Pago_Pago",
				"AT|Europe/Vienna",
				"AU|Australia/Lord_Howe Antarctica/Macquarie Australia/Hobart Australia/Currie Australia/Melbourne Australia/Sydney Australia/Broken_Hill Australia/Brisbane Australia/Lindeman Australia/Adelaide Australia/Darwin Australia/Perth Australia/Eucla",
				"AW|America/Curacao America/Aruba",
				"AX|Europe/Helsinki Europe/Mariehamn",
				"AZ|Asia/Baku",
				"BA|Europe/Belgrade Europe/Sarajevo",
				"BB|America/Barbados",
				"BD|Asia/Dhaka",
				"BE|Europe/Brussels",
				"BF|Africa/Abidjan Africa/Ouagadougou",
				"BG|Europe/Sofia",
				"BH|Asia/Qatar Asia/Bahrain",
				"BI|Africa/Maputo Africa/Bujumbura",
				"BJ|Africa/Lagos Africa/Porto-Novo",
				"BL|America/Port_of_Spain America/St_Barthelemy",
				"BM|Atlantic/Bermuda",
				"BN|Asia/Brunei",
				"BO|America/La_Paz",
				"BQ|America/Curacao America/Kralendijk",
				"BR|America/Noronha America/Belem America/Fortaleza America/Recife America/Araguaina America/Maceio America/Bahia America/Sao_Paulo America/Campo_Grande America/Cuiaba America/Santarem America/Porto_Velho America/Boa_Vista America/Manaus America/Eirunepe America/Rio_Branco",
				"BS|America/Nassau",
				"BT|Asia/Thimphu",
				"BW|Africa/Maputo Africa/Gaborone",
				"BY|Europe/Minsk",
				"BZ|America/Belize",
				"CA|America/St_Johns America/Halifax America/Glace_Bay America/Moncton America/Goose_Bay America/Blanc-Sablon America/Toronto America/Nipigon America/Thunder_Bay America/Iqaluit America/Pangnirtung America/Atikokan America/Winnipeg America/Rainy_River America/Resolute America/Rankin_Inlet America/Regina America/Swift_Current America/Edmonton America/Cambridge_Bay America/Yellowknife America/Inuvik America/Creston America/Dawson_Creek America/Fort_Nelson America/Vancouver America/Whitehorse America/Dawson",
				"CC|Indian/Cocos",
				"CD|Africa/Maputo Africa/Lagos Africa/Kinshasa Africa/Lubumbashi",
				"CF|Africa/Lagos Africa/Bangui",
				"CG|Africa/Lagos Africa/Brazzaville",
				"CH|Europe/Zurich",
				"CI|Africa/Abidjan",
				"CK|Pacific/Rarotonga",
				"CL|America/Santiago America/Punta_Arenas Pacific/Easter",
				"CM|Africa/Lagos Africa/Douala",
				"CN|Asia/Shanghai Asia/Urumqi",
				"CO|America/Bogota",
				"CR|America/Costa_Rica",
				"CU|America/Havana",
				"CV|Atlantic/Cape_Verde",
				"CW|America/Curacao",
				"CX|Indian/Christmas",
				"CY|Asia/Nicosia Asia/Famagusta",
				"CZ|Europe/Prague",
				"DE|Europe/Zurich Europe/Berlin Europe/Busingen",
				"DJ|Africa/Nairobi Africa/Djibouti",
				"DK|Europe/Copenhagen",
				"DM|America/Port_of_Spain America/Dominica",
				"DO|America/Santo_Domingo",
				"DZ|Africa/Algiers",
				"EC|America/Guayaquil Pacific/Galapagos",
				"EE|Europe/Tallinn",
				"EG|Africa/Cairo",
				"EH|Africa/El_Aaiun",
				"ER|Africa/Nairobi Africa/Asmara",
				"ES|Europe/Madrid Africa/Ceuta Atlantic/Canary",
				"ET|Africa/Nairobi Africa/Addis_Ababa",
				"FI|Europe/Helsinki",
				"FJ|Pacific/Fiji",
				"FK|Atlantic/Stanley",
				"FM|Pacific/Chuuk Pacific/Pohnpei Pacific/Kosrae",
				"FO|Atlantic/Faroe",
				"FR|Europe/Paris",
				"GA|Africa/Lagos Africa/Libreville",
				"GB|Europe/London",
				"GD|America/Port_of_Spain America/Grenada",
				"GE|Asia/Tbilisi",
				"GF|America/Cayenne",
				"GG|Europe/London Europe/Guernsey",
				"GH|Africa/Accra",
				"GI|Europe/Gibraltar",
				"GL|America/Godthab America/Danmarkshavn America/Scoresbysund America/Thule",
				"GM|Africa/Abidjan Africa/Banjul",
				"GN|Africa/Abidjan Africa/Conakry",
				"GP|America/Port_of_Spain America/Guadeloupe",
				"GQ|Africa/Lagos Africa/Malabo",
				"GR|Europe/Athens",
				"GS|Atlantic/South_Georgia",
				"GT|America/Guatemala",
				"GU|Pacific/Guam",
				"GW|Africa/Bissau",
				"GY|America/Guyana",
				"HK|Asia/Hong_Kong",
				"HN|America/Tegucigalpa",
				"HR|Europe/Belgrade Europe/Zagreb",
				"HT|America/Port-au-Prince",
				"HU|Europe/Budapest",
				"ID|Asia/Jakarta Asia/Pontianak Asia/Makassar Asia/Jayapura",
				"IE|Europe/Dublin",
				"IL|Asia/Jerusalem",
				"IM|Europe/London Europe/Isle_of_Man",
				"IN|Asia/Kolkata",
				"IO|Indian/Chagos",
				"IQ|Asia/Baghdad",
				"IR|Asia/Tehran",
				"IS|Atlantic/Reykjavik",
				"IT|Europe/Rome",
				"JE|Europe/London Europe/Jersey",
				"JM|America/Jamaica",
				"JO|Asia/Amman",
				"JP|Asia/Tokyo",
				"KE|Africa/Nairobi",
				"KG|Asia/Bishkek",
				"KH|Asia/Bangkok Asia/Phnom_Penh",
				"KI|Pacific/Tarawa Pacific/Enderbury Pacific/Kiritimati",
				"KM|Africa/Nairobi Indian/Comoro",
				"KN|America/Port_of_Spain America/St_Kitts",
				"KP|Asia/Pyongyang",
				"KR|Asia/Seoul",
				"KW|Asia/Riyadh Asia/Kuwait",
				"KY|America/Panama America/Cayman",
				"KZ|Asia/Almaty Asia/Qyzylorda Asia/Qostanay Asia/Aqtobe Asia/Aqtau Asia/Atyrau Asia/Oral",
				"LA|Asia/Bangkok Asia/Vientiane",
				"LB|Asia/Beirut",
				"LC|America/Port_of_Spain America/St_Lucia",
				"LI|Europe/Zurich Europe/Vaduz",
				"LK|Asia/Colombo",
				"LR|Africa/Monrovia",
				"LS|Africa/Johannesburg Africa/Maseru",
				"LT|Europe/Vilnius",
				"LU|Europe/Luxembourg",
				"LV|Europe/Riga",
				"LY|Africa/Tripoli",
				"MA|Africa/Casablanca",
				"MC|Europe/Monaco",
				"MD|Europe/Chisinau",
				"ME|Europe/Belgrade Europe/Podgorica",
				"MF|America/Port_of_Spain America/Marigot",
				"MG|Africa/Nairobi Indian/Antananarivo",
				"MH|Pacific/Majuro Pacific/Kwajalein",
				"MK|Europe/Belgrade Europe/Skopje",
				"ML|Africa/Abidjan Africa/Bamako",
				"MM|Asia/Yangon",
				"MN|Asia/Ulaanbaatar Asia/Hovd Asia/Choibalsan",
				"MO|Asia/Macau",
				"MP|Pacific/Guam Pacific/Saipan",
				"MQ|America/Martinique",
				"MR|Africa/Abidjan Africa/Nouakchott",
				"MS|America/Port_of_Spain America/Montserrat",
				"MT|Europe/Malta",
				"MU|Indian/Mauritius",
				"MV|Indian/Maldives",
				"MW|Africa/Maputo Africa/Blantyre",
				"MX|America/Mexico_City America/Cancun America/Merida America/Monterrey America/Matamoros America/Mazatlan America/Chihuahua America/Ojinaga America/Hermosillo America/Tijuana America/Bahia_Banderas",
				"MY|Asia/Kuala_Lumpur Asia/Kuching",
				"MZ|Africa/Maputo",
				"NA|Africa/Windhoek",
				"NC|Pacific/Noumea",
				"NE|Africa/Lagos Africa/Niamey",
				"NF|Pacific/Norfolk",
				"NG|Africa/Lagos",
				"NI|America/Managua",
				"NL|Europe/Amsterdam",
				"NO|Europe/Oslo",
				"NP|Asia/Kathmandu",
				"NR|Pacific/Nauru",
				"NU|Pacific/Niue",
				"NZ|Pacific/Auckland Pacific/Chatham",
				"OM|Asia/Dubai Asia/Muscat",
				"PA|America/Panama",
				"PE|America/Lima",
				"PF|Pacific/Tahiti Pacific/Marquesas Pacific/Gambier",
				"PG|Pacific/Port_Moresby Pacific/Bougainville",
				"PH|Asia/Manila",
				"PK|Asia/Karachi",
				"PL|Europe/Warsaw",
				"PM|America/Miquelon",
				"PN|Pacific/Pitcairn",
				"PR|America/Puerto_Rico",
				"PS|Asia/Gaza Asia/Hebron",
				"PT|Europe/Lisbon Atlantic/Madeira Atlantic/Azores",
				"PW|Pacific/Palau",
				"PY|America/Asuncion",
				"QA|Asia/Qatar",
				"RE|Indian/Reunion",
				"RO|Europe/Bucharest",
				"RS|Europe/Belgrade",
				"RU|Europe/Kaliningrad Europe/Moscow Europe/Simferopol Europe/Kirov Europe/Astrakhan Europe/Volgograd Europe/Saratov Europe/Ulyanovsk Europe/Samara Asia/Yekaterinburg Asia/Omsk Asia/Novosibirsk Asia/Barnaul Asia/Tomsk Asia/Novokuznetsk Asia/Krasnoyarsk Asia/Irkutsk Asia/Chita Asia/Yakutsk Asia/Khandyga Asia/Vladivostok Asia/Ust-Nera Asia/Magadan Asia/Sakhalin Asia/Srednekolymsk Asia/Kamchatka Asia/Anadyr",
				"RW|Africa/Maputo Africa/Kigali",
				"SA|Asia/Riyadh",
				"SB|Pacific/Guadalcanal",
				"SC|Indian/Mahe",
				"SD|Africa/Khartoum",
				"SE|Europe/Stockholm",
				"SG|Asia/Singapore",
				"SH|Africa/Abidjan Atlantic/St_Helena",
				"SI|Europe/Belgrade Europe/Ljubljana",
				"SJ|Europe/Oslo Arctic/Longyearbyen",
				"SK|Europe/Prague Europe/Bratislava",
				"SL|Africa/Abidjan Africa/Freetown",
				"SM|Europe/Rome Europe/San_Marino",
				"SN|Africa/Abidjan Africa/Dakar",
				"SO|Africa/Nairobi Africa/Mogadishu",
				"SR|America/Paramaribo",
				"SS|Africa/Juba",
				"ST|Africa/Sao_Tome",
				"SV|America/El_Salvador",
				"SX|America/Curacao America/Lower_Princes",
				"SY|Asia/Damascus",
				"SZ|Africa/Johannesburg Africa/Mbabane",
				"TC|America/Grand_Turk",
				"TD|Africa/Ndjamena",
				"TF|Indian/Reunion Indian/Kerguelen",
				"TG|Africa/Abidjan Africa/Lome",
				"TH|Asia/Bangkok",
				"TJ|Asia/Dushanbe",
				"TK|Pacific/Fakaofo",
				"TL|Asia/Dili",
				"TM|Asia/Ashgabat",
				"TN|Africa/Tunis",
				"TO|Pacific/Tongatapu",
				"TR|Europe/Istanbul",
				"TT|America/Port_of_Spain",
				"TV|Pacific/Funafuti",
				"TW|Asia/Taipei",
				"TZ|Africa/Nairobi Africa/Dar_es_Salaam",
				"UA|Europe/Simferopol Europe/Kiev Europe/Uzhgorod Europe/Zaporozhye",
				"UG|Africa/Nairobi Africa/Kampala",
				"UM|Pacific/Pago_Pago Pacific/Wake Pacific/Honolulu Pacific/Midway",
				"US|America/New_York America/Detroit America/Kentucky/Louisville America/Kentucky/Monticello America/Indiana/Indianapolis America/Indiana/Vincennes America/Indiana/Winamac America/Indiana/Marengo America/Indiana/Petersburg America/Indiana/Vevay America/Chicago America/Indiana/Tell_City America/Indiana/Knox America/Menominee America/North_Dakota/Center America/North_Dakota/New_Salem America/North_Dakota/Beulah America/Denver America/Boise America/Phoenix America/Los_Angeles America/Anchorage America/Juneau America/Sitka America/Metlakatla America/Yakutat America/Nome America/Adak Pacific/Honolulu",
				"UY|America/Montevideo",
				"UZ|Asia/Samarkand Asia/Tashkent",
				"VA|Europe/Rome Europe/Vatican",
				"VC|America/Port_of_Spain America/St_Vincent",
				"VE|America/Caracas",
				"VG|America/Port_of_Spain America/Tortola",
				"VI|America/Port_of_Spain America/St_Thomas",
				"VN|Asia/Bangkok Asia/Ho_Chi_Minh",
				"VU|Pacific/Efate",
				"WF|Pacific/Wallis",
				"WS|Pacific/Apia",
				"YE|Asia/Riyadh Asia/Aden",
				"YT|Africa/Nairobi Indian/Mayotte",
				"ZA|Africa/Johannesburg",
				"ZM|Africa/Maputo Africa/Lusaka",
				"ZW|Africa/Maputo Africa/Harare"
			]
		});
	
	
		return moment;
	}));


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(49);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(51)(content, {"singleton":true});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../../css-loader/index.js?minimize!../../autoprefixer-loader/index.js!./fullcalendar.css", function() {
				var newContent = require("!!../../css-loader/index.js?minimize!../../autoprefixer-loader/index.js!./fullcalendar.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(50)();
	// imports
	
	
	// module
	exports.push([module.id, "/*!\n * FullCalendar v3.10.2\n * Docs & License: https://fullcalendar.io/\n * (c) 2019 Adam Shaw\n */.fc{direction:ltr;text-align:left}.fc-rtl{text-align:right}body .fc{font-size:1em}.fc-highlight{background:#bce8f1;opacity:.3}.fc-bgevent{background:#8fdf82;opacity:.3}.fc-nonbusiness{background:#d7d7d7}.fc button{box-sizing:border-box;margin:0;height:2.1em;padding:0 .6em;font-size:1em;white-space:nowrap;cursor:pointer}.fc button::-moz-focus-inner{margin:0;padding:0}.fc-state-default{border:1px solid}.fc-state-default.fc-corner-left{border-top-left-radius:4px;border-bottom-left-radius:4px}.fc-state-default.fc-corner-right{border-top-right-radius:4px;border-bottom-right-radius:4px}.fc button .fc-icon{position:relative;top:-.05em;margin:0 .2em;vertical-align:middle}.fc-state-default{background-color:#f5f5f5;background-image:linear-gradient(180deg,#fff,#e6e6e6);background-repeat:repeat-x;border-color:#e6e6e6 #e6e6e6 #bfbfbf;border-color:rgba(0,0,0,.1) rgba(0,0,0,.1) rgba(0,0,0,.25);color:#333;text-shadow:0 1px 1px hsla(0,0%,100%,.75);box-shadow:inset 0 1px 0 hsla(0,0%,100%,.2),0 1px 2px rgba(0,0,0,.05)}.fc-state-active,.fc-state-disabled,.fc-state-down,.fc-state-hover{color:#333;background-color:#e6e6e6}.fc-state-hover{color:#333;text-decoration:none;background-position:0 -15px;transition:background-position .1s linear}.fc-state-active,.fc-state-down{background-color:#ccc;background-image:none;box-shadow:inset 0 2px 4px rgba(0,0,0,.15),0 1px 2px rgba(0,0,0,.05)}.fc-state-disabled{cursor:default;background-image:none;opacity:.65;box-shadow:none}.fc-button-group{display:inline-block}.fc .fc-button-group>*{float:left;margin:0 0 0 -1px}.fc .fc-button-group>:first-child{margin-left:0}.fc-popover{position:absolute;box-shadow:0 2px 6px rgba(0,0,0,.15)}.fc-popover .fc-header{padding:2px 4px}.fc-popover .fc-header .fc-title{margin:0 2px}.fc-popover .fc-header .fc-close{cursor:pointer}.fc-ltr .fc-popover .fc-header .fc-title,.fc-rtl .fc-popover .fc-header .fc-close{float:left}.fc-ltr .fc-popover .fc-header .fc-close,.fc-rtl .fc-popover .fc-header .fc-title{float:right}.fc-divider{border-style:solid;border-width:1px}hr.fc-divider{height:0;margin:0;padding:0 0 2px;border-width:1px 0}.fc-clear{clear:both}.fc-bg,.fc-bgevent-skeleton,.fc-helper-skeleton,.fc-highlight-skeleton{position:absolute;top:0;left:0;right:0}.fc-bg{bottom:0}.fc-bg table{height:100%}.fc table{width:100%;box-sizing:border-box;table-layout:fixed;border-collapse:collapse;border-spacing:0;font-size:1em}.fc th{text-align:center}.fc td,.fc th{border-style:solid;border-width:1px;padding:0;vertical-align:top}.fc td.fc-today{border-style:double}a[data-goto]{cursor:pointer}a[data-goto]:hover{text-decoration:underline}.fc .fc-row{border-style:solid;border-width:0}.fc-row table{border-left:0 hidden transparent;border-right:0 hidden transparent;border-bottom:0 hidden transparent}.fc-row:first-child table{border-top:0 hidden transparent}.fc-row{position:relative}.fc-row .fc-bg{z-index:1}.fc-row .fc-bgevent-skeleton,.fc-row .fc-highlight-skeleton{bottom:0}.fc-row .fc-bgevent-skeleton table,.fc-row .fc-highlight-skeleton table{height:100%}.fc-row .fc-bgevent-skeleton td,.fc-row .fc-highlight-skeleton td{border-color:transparent}.fc-row .fc-bgevent-skeleton{z-index:2}.fc-row .fc-highlight-skeleton{z-index:3}.fc-row .fc-content-skeleton{position:relative;z-index:4;padding-bottom:2px}.fc-row .fc-helper-skeleton{z-index:5}.fc .fc-row .fc-content-skeleton table,.fc .fc-row .fc-content-skeleton td,.fc .fc-row .fc-helper-skeleton td{background:none;border-color:transparent}.fc-row .fc-content-skeleton td,.fc-row .fc-helper-skeleton td{border-bottom:0}.fc-row .fc-content-skeleton tbody td,.fc-row .fc-helper-skeleton tbody td{border-top:0}.fc-scroller{-webkit-overflow-scrolling:touch}.fc-scroller>.fc-day-grid,.fc-scroller>.fc-time-grid{position:relative;width:100%}.fc-event{position:relative;display:block;font-size:.85em;line-height:1.3;border-radius:3px;border:1px solid #3a87ad}.fc-event,.fc-event-dot{background-color:#3a87ad}.fc-event,.fc-event:hover{color:#fff;text-decoration:none}.fc-event.fc-draggable,.fc-event[href]{cursor:pointer}.fc-not-allowed,.fc-not-allowed .fc-event{cursor:not-allowed}.fc-event .fc-bg{z-index:1;background:#fff;opacity:.25}.fc-event .fc-content{position:relative;z-index:2}.fc-event .fc-resizer{position:absolute;z-index:4;display:none}.fc-event.fc-allow-mouse-resize .fc-resizer,.fc-event.fc-selected .fc-resizer{display:block}.fc-event.fc-selected .fc-resizer:before{content:\"\";position:absolute;z-index:9999;top:50%;left:50%;width:40px;height:40px;margin-left:-20px;margin-top:-20px}.fc-event.fc-selected{z-index:9999!important;box-shadow:0 2px 5px rgba(0,0,0,.2)}.fc-event.fc-selected.fc-dragging{box-shadow:0 2px 7px rgba(0,0,0,.3)}.fc-h-event.fc-selected:before{content:\"\";position:absolute;z-index:3;top:-10px;bottom:-10px;left:0;right:0}.fc-ltr .fc-h-event.fc-not-start,.fc-rtl .fc-h-event.fc-not-end{margin-left:0;border-left-width:0;padding-left:1px;border-top-left-radius:0;border-bottom-left-radius:0}.fc-ltr .fc-h-event.fc-not-end,.fc-rtl .fc-h-event.fc-not-start{margin-right:0;border-right-width:0;padding-right:1px;border-top-right-radius:0;border-bottom-right-radius:0}.fc-ltr .fc-h-event .fc-start-resizer,.fc-rtl .fc-h-event .fc-end-resizer{cursor:w-resize;left:-1px}.fc-ltr .fc-h-event .fc-end-resizer,.fc-rtl .fc-h-event .fc-start-resizer{cursor:e-resize;right:-1px}.fc-h-event.fc-allow-mouse-resize .fc-resizer{width:7px;top:-1px;bottom:-1px}.fc-h-event.fc-selected .fc-resizer{border-radius:4px;border-width:1px;width:6px;height:6px;border-style:solid;border-color:inherit;background:#fff;top:50%;margin-top:-4px}.fc-ltr .fc-h-event.fc-selected .fc-start-resizer,.fc-rtl .fc-h-event.fc-selected .fc-end-resizer{margin-left:-4px}.fc-ltr .fc-h-event.fc-selected .fc-end-resizer,.fc-rtl .fc-h-event.fc-selected .fc-start-resizer{margin-right:-4px}.fc-day-grid-event{margin:1px 2px 0;padding:0 1px}tr:first-child>td>.fc-day-grid-event{margin-top:2px}.fc-day-grid-event.fc-selected:after{content:\"\";position:absolute;z-index:1;top:-1px;right:-1px;bottom:-1px;left:-1px;background:#000;opacity:.25}.fc-day-grid-event .fc-content{white-space:nowrap;overflow:hidden}.fc-day-grid-event .fc-time{font-weight:700}.fc-ltr .fc-day-grid-event.fc-allow-mouse-resize .fc-start-resizer,.fc-rtl .fc-day-grid-event.fc-allow-mouse-resize .fc-end-resizer{margin-left:-2px}.fc-ltr .fc-day-grid-event.fc-allow-mouse-resize .fc-end-resizer,.fc-rtl .fc-day-grid-event.fc-allow-mouse-resize .fc-start-resizer{margin-right:-2px}a.fc-more{margin:1px 3px;font-size:.85em;cursor:pointer;text-decoration:none}a.fc-more:hover{text-decoration:underline}.fc-limited{display:none}.fc-day-grid .fc-row{z-index:1}.fc-more-popover{z-index:2;width:220px}.fc-more-popover .fc-event-container{padding:10px}.fc-now-indicator{position:absolute;border:0 solid red}.fc-unselectable{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-touch-callout:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.fc-unthemed .fc-content,.fc-unthemed .fc-divider,.fc-unthemed .fc-list-heading td,.fc-unthemed .fc-list-view,.fc-unthemed .fc-popover,.fc-unthemed .fc-row,.fc-unthemed tbody,.fc-unthemed td,.fc-unthemed th,.fc-unthemed thead{border-color:#ddd}.fc-unthemed .fc-popover{background-color:#fff}.fc-unthemed .fc-divider,.fc-unthemed .fc-list-heading td,.fc-unthemed .fc-popover .fc-header{background:#eee}.fc-unthemed .fc-popover .fc-header .fc-close{color:#666}.fc-unthemed td.fc-today{background:#fcf8e3}.fc-unthemed .fc-disabled-day{background:#d7d7d7;opacity:.3}.fc-icon{display:inline-block;height:1em;line-height:1em;font-size:1em;text-align:center;overflow:hidden;font-family:Courier New,Courier,monospace;-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.fc-icon:after{position:relative}.fc-icon-left-single-arrow:after{content:\"\\2039\";font-weight:700;font-size:200%;top:-7%}.fc-icon-right-single-arrow:after{content:\"\\203A\";font-weight:700;font-size:200%;top:-7%}.fc-icon-left-double-arrow:after{content:\"\\AB\";font-size:160%;top:-7%}.fc-icon-right-double-arrow:after{content:\"\\BB\";font-size:160%;top:-7%}.fc-icon-left-triangle:after{content:\"\\25C4\";font-size:125%;top:3%}.fc-icon-right-triangle:after{content:\"\\25BA\";font-size:125%;top:3%}.fc-icon-down-triangle:after{content:\"\\25BC\";font-size:125%;top:2%}.fc-icon-x:after{content:\"\\D7\";font-size:200%;top:6%}.fc-unthemed .fc-popover{border-width:1px;border-style:solid}.fc-unthemed .fc-popover .fc-header .fc-close{font-size:.9em;margin-top:2px}.fc-unthemed .fc-list-item:hover td{background-color:#f5f5f5}.ui-widget .fc-disabled-day{background-image:none}.fc-popover>.ui-widget-header+.ui-widget-content{border-top:0}.ui-widget .fc-event{color:#fff;text-decoration:none;font-weight:400}.ui-widget td.fc-axis{font-weight:400}.fc-time-grid .fc-slats .ui-widget-content{background:none}.fc.fc-bootstrap3 a{text-decoration:none}.fc.fc-bootstrap3 a[data-goto]:hover{text-decoration:underline}.fc-bootstrap3 hr.fc-divider{border-color:inherit}.fc-bootstrap3 .fc-today.alert{border-radius:0}.fc-bootstrap3 .fc-popover .panel-body{padding:0}.fc-bootstrap3 .fc-time-grid .fc-slats table{background:none}.fc.fc-bootstrap4 a{text-decoration:none}.fc.fc-bootstrap4 a[data-goto]:hover{text-decoration:underline}.fc-bootstrap4 hr.fc-divider{border-color:inherit}.fc-bootstrap4 .fc-today.alert{border-radius:0}.fc-bootstrap4 a.fc-event:not([href]):not([tabindex]){color:#fff}.fc-bootstrap4 .fc-popover.card{position:absolute}.fc-bootstrap4 .fc-popover .card-body{padding:0}.fc-bootstrap4 .fc-time-grid .fc-slats table{background:none}.fc-toolbar{text-align:center}.fc-toolbar.fc-header-toolbar{margin-bottom:1em}.fc-toolbar.fc-footer-toolbar{margin-top:1em}.fc-toolbar .fc-left{float:left}.fc-toolbar .fc-right{float:right}.fc-toolbar .fc-center{display:inline-block}.fc .fc-toolbar>*>*{float:left;margin-left:.75em}.fc .fc-toolbar>*>:first-child{margin-left:0}.fc-toolbar h2{margin:0}.fc-toolbar button{position:relative}.fc-toolbar .fc-state-hover,.fc-toolbar .ui-state-hover{z-index:2}.fc-toolbar .fc-state-down{z-index:3}.fc-toolbar .fc-state-active,.fc-toolbar .ui-state-active{z-index:4}.fc-toolbar button:focus{z-index:5}.fc-view-container *,.fc-view-container :after,.fc-view-container :before{box-sizing:content-box}.fc-view,.fc-view>table{position:relative;z-index:1}.fc-basicDay-view .fc-content-skeleton,.fc-basicWeek-view .fc-content-skeleton{padding-bottom:1em}.fc-basic-view .fc-body .fc-row{min-height:4em}.fc-row.fc-rigid{overflow:hidden}.fc-row.fc-rigid .fc-content-skeleton{position:absolute;top:0;left:0;right:0}.fc-day-top.fc-other-month{opacity:.3}.fc-basic-view .fc-day-number,.fc-basic-view .fc-week-number{padding:2px}.fc-basic-view th.fc-day-number,.fc-basic-view th.fc-week-number{padding:0 2px}.fc-ltr .fc-basic-view .fc-day-top .fc-day-number{float:right}.fc-rtl .fc-basic-view .fc-day-top .fc-day-number{float:left}.fc-ltr .fc-basic-view .fc-day-top .fc-week-number{float:left;border-radius:0 0 3px 0}.fc-rtl .fc-basic-view .fc-day-top .fc-week-number{float:right;border-radius:0 0 0 3px}.fc-basic-view .fc-day-top .fc-week-number{min-width:1.5em;text-align:center;background-color:#f2f2f2;color:gray}.fc-basic-view td.fc-week-number{text-align:center}.fc-basic-view td.fc-week-number>*{display:inline-block;min-width:1.25em}.fc-agenda-view .fc-day-grid{position:relative;z-index:2}.fc-agenda-view .fc-day-grid .fc-row{min-height:3em}.fc-agenda-view .fc-day-grid .fc-row .fc-content-skeleton{padding-bottom:1em}.fc .fc-axis{vertical-align:middle;padding:0 4px;white-space:nowrap}.fc-ltr .fc-axis{text-align:right}.fc-rtl .fc-axis{text-align:left}.fc-time-grid,.fc-time-grid-container{position:relative;z-index:1}.fc-time-grid{min-height:100%}.fc-time-grid table{border:0 hidden transparent}.fc-time-grid>.fc-bg{z-index:1}.fc-time-grid .fc-slats,.fc-time-grid>hr{position:relative;z-index:2}.fc-time-grid .fc-content-col{position:relative}.fc-time-grid .fc-content-skeleton{position:absolute;z-index:3;top:0;left:0;right:0}.fc-time-grid .fc-business-container{position:relative;z-index:1}.fc-time-grid .fc-bgevent-container{position:relative;z-index:2}.fc-time-grid .fc-highlight-container{z-index:3}.fc-time-grid .fc-event-container{position:relative;z-index:4}.fc-time-grid .fc-now-indicator-line{z-index:5}.fc-time-grid .fc-helper-container{position:relative;z-index:6}.fc-time-grid .fc-slats td{height:1.5em;border-bottom:0}.fc-time-grid .fc-slats .fc-minor td{border-top-style:dotted}.fc-time-grid .fc-highlight-container{position:relative}.fc-time-grid .fc-highlight{position:absolute;left:0;right:0}.fc-ltr .fc-time-grid .fc-event-container{margin:0 2.5% 0 2px}.fc-rtl .fc-time-grid .fc-event-container{margin:0 2px 0 2.5%}.fc-time-grid .fc-bgevent,.fc-time-grid .fc-event{position:absolute;z-index:1}.fc-time-grid .fc-bgevent{left:0;right:0}.fc-v-event.fc-not-start{border-top-width:0;padding-top:1px;border-top-left-radius:0;border-top-right-radius:0}.fc-v-event.fc-not-end{border-bottom-width:0;padding-bottom:1px;border-bottom-left-radius:0;border-bottom-right-radius:0}.fc-time-grid-event{overflow:hidden}.fc-time-grid-event.fc-selected{overflow:visible}.fc-time-grid-event.fc-selected .fc-bg{display:none}.fc-time-grid-event .fc-content{overflow:hidden}.fc-time-grid-event .fc-time,.fc-time-grid-event .fc-title{padding:0 1px}.fc-time-grid-event .fc-time{font-size:.85em;white-space:nowrap}.fc-time-grid-event.fc-short .fc-content{white-space:nowrap}.fc-time-grid-event.fc-short .fc-time,.fc-time-grid-event.fc-short .fc-title{display:inline-block;vertical-align:top}.fc-time-grid-event.fc-short .fc-time span{display:none}.fc-time-grid-event.fc-short .fc-time:before{content:attr(data-start)}.fc-time-grid-event.fc-short .fc-time:after{content:\"\\A0-\\A0\"}.fc-time-grid-event.fc-short .fc-title{font-size:.85em;padding:0}.fc-time-grid-event.fc-allow-mouse-resize .fc-resizer{left:0;right:0;bottom:0;height:8px;overflow:hidden;line-height:8px;font-size:11px;font-family:monospace;text-align:center;cursor:s-resize}.fc-time-grid-event.fc-allow-mouse-resize .fc-resizer:after{content:\"=\"}.fc-time-grid-event.fc-selected .fc-resizer{border-radius:5px;border-width:1px;width:8px;height:8px;border-style:solid;border-color:inherit;background:#fff;left:50%;margin-left:-5px;bottom:-5px}.fc-time-grid .fc-now-indicator-line{border-top-width:1px;left:0;right:0}.fc-time-grid .fc-now-indicator-arrow{margin-top:-5px}.fc-ltr .fc-time-grid .fc-now-indicator-arrow{left:0;border-width:5px 0 5px 6px;border-top-color:transparent;border-bottom-color:transparent}.fc-rtl .fc-time-grid .fc-now-indicator-arrow{right:0;border-width:5px 6px 5px 0;border-top-color:transparent;border-bottom-color:transparent}.fc-event-dot{display:inline-block;width:10px;height:10px;border-radius:5px}.fc-rtl .fc-list-view{direction:rtl}.fc-list-view{border-width:1px;border-style:solid}.fc .fc-list-table{table-layout:auto}.fc-list-table td{border-width:1px 0 0;padding:8px 14px}.fc-list-table tr:first-child td{border-top-width:0}.fc-list-heading{border-bottom-width:1px}.fc-list-heading td{font-weight:700}.fc-ltr .fc-list-heading-main{float:left}.fc-ltr .fc-list-heading-alt,.fc-rtl .fc-list-heading-main{float:right}.fc-rtl .fc-list-heading-alt{float:left}.fc-list-item.fc-has-url{cursor:pointer}.fc-list-item-marker,.fc-list-item-time{white-space:nowrap;width:1px}.fc-ltr .fc-list-item-marker{padding-right:0}.fc-rtl .fc-list-item-marker{padding-left:0}.fc-list-item-title a{text-decoration:none;color:inherit}.fc-list-item-title a[href]:hover{text-decoration:underline}.fc-list-empty-wrap2{position:absolute;top:0;left:0;right:0;bottom:0}.fc-list-empty-wrap1{width:100%;height:100%;display:table}.fc-list-empty{display:table-cell;vertical-align:middle;text-align:center}.fc-unthemed .fc-list-empty{background-color:#eee}", ""]);
	
	// exports


/***/ }),
/* 50 */
/***/ (function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];
	
		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};
	
		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(self.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];
	
	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}
	
		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();
	
		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";
	
		var styles = listToStyles(list);
		addStylesToDom(styles, options);
	
		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}
	
	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}
	
	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}
	
	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}
	
	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}
	
	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}
	
	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}
	
	function addStyle(obj, options) {
		var styleElement, update, remove;
	
		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}
	
		update(obj);
	
		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}
	
	var replaceText = (function () {
		var textStore = [];
	
		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();
	
	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;
	
		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}
	
	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
	
		if(media) {
			styleElement.setAttribute("media", media)
		}
	
		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}
	
	function updateLink(linkElement, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;
	
		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}
	
		var blob = new Blob([css], { type: "text/css" });
	
		var oldSrc = linkElement.href;
	
		linkElement.href = URL.createObjectURL(blob);
	
		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(53);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(51)(content, {"singleton":true});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../../node_modules/css-loader/index.js?minimize!../../node_modules/autoprefixer-loader/index.js!../../node_modules/sass-loader/index.js!./fullcalendar.scss", function() {
				var newContent = require("!!../../node_modules/css-loader/index.js?minimize!../../node_modules/autoprefixer-loader/index.js!../../node_modules/sass-loader/index.js!./fullcalendar.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(50)();
	// imports
	exports.push([module.id, "@import url(https://fonts.googleapis.com/css?family=Open+Sans:400,600);", ""]);
	
	// module
	exports.push([module.id, ".fc-view-container{background-color:#fbfbfb;color:#333}.fc-row.fc-widget-header{border-bottom:1px solid #ececec}.fc-row.fc-widget-header .fc-day-header{font-size:12px;font-weight:600;color:#acacac}.fc-axis{color:#acacac;font-size:.9em}.fc-state-default{text-shadow:none;box-shadow:none;background-image:none;background-color:#fff;border-color:#fff}.fc-button{text-transform:uppercase;font-weight:600;font-size:1.1em;border:0;outline:none}.fc-button:active,.fc-button:focus,.fc-button:hover,.fc-button:visited{outline:none;border:0;background-color:transparent}.fc-content-skeleton{border-top:1px solid #ddd}.fc .fc-toolbar{padding:0;margin-bottom:0;border-bottom:1px solid #ececec;min-height:48px}.fc .fc-toolbar>*>button{padding:15px 17px;height:auto;outline:0;margin-left:0;transition:opacity .2s ease;opacity:.3}.fc .fc-toolbar>*>button:hover{opacity:1}.fc .fc-toolbar>*>button.fc-state-disabled{transition:opacity 0s;opacity:0}.fc .fc-toolbar>*>button.fc-prev-button{padding-right:8px}.fc .fc-toolbar>*>button.fc-next-button{padding-left:8px}.fc .fc-toolbar>*>button .fc-icon{font-size:1.1em}.fc .fc-toolbar>.fc-right>button.fc-today-button{padding:16px 5px}.fc .fc-toolbar>.fc-right h2{font-size:13px;padding:15px 0 15px 20px;color:#333;font-weight:600}.fc-unthemed td.fc-today{background:#fff}.fc-body>tr>.fc-widget-content,.fc-head>tr>.fc-widget-header{border:0!important}.fc th{border-color:#fff;padding:5px}.fc-unthemed .fc-divider,.fc-unthemed .fc-popover .fc-header{background-color:transparent}.empty-calendar .fc-event{opacity:0}.fc-event{transition:color .2s ease,border-color .2s ease,opacity .6s ease,box-shadow .2s ease;border:none;border-left:2px solid #939393;padding:3px;background-color:#fff;border-radius:3px;color:#333;margin:1px 0;box-shadow:0 1px 2px rgba(0,0,0,.07);cursor:pointer;margin-bottom:2px;opacity:1}.fc-event-clicked,.fc-event:hover{box-shadow:0 2px 4px rgba(0,0,0,.12);border-left:3px solid #2e5bec;color:#2e5bec;font-weight:600;padding-left:2px}.fc-event .fc-content{transform:translateX(0);transition:transform .2s ease}.fc-event:hover .fc-content{transform:translateX(2px)}.fc-event .fc-bg{opacity:0}.fc-day-grid-event{padding:13px 15px;margin:1px 0 3px}.fc-day-grid-event-clicked,.fc-day-grid-event:hover{padding-left:14px}.fc-day-grid-event .fc-time,.fc-day-grid-event .fc-title{font-size:12px;font-weight:500}.fc-day-grid-event .fc-title{padding:0 5px 5px}.fc-day-grid-event-clicked .fc-time,.fc-day-grid-event-clicked .fc-title,.fc-day-grid-event:hover .fc-time,.fc-day-grid-event:hover .fc-title{font-weight:600}.fc-time-grid .fc-slats .fc-minor td{border-top-style:none}.fc-time-grid .fc-slats td{border-top-color:#fbfbfb}.fc-time-grid .fc-slats td.fc-axis{border-top-color:#ececec}.fc-time-grid-event.fc-short .fc-content{font-size:.7em;line-height:.2em}.fc-time-grid-event.fc-short .fc-time:after{content:\"\"}.fc-time-grid-event .fc-time{font-size:1.1em;padding:5px}.fc-time-grid-event .fc-title{padding:0 5px 5px;font-weight:700}.fc-unthemed .fc-divider,.fc-unthemed .fc-popover,.fc-unthemed .fc-row,.fc-unthemed tbody,.fc-unthemed td,.fc-unthemed th,.fc-unthemed thead{border-color:#ececec}.fc-agendaMonthly-view .fc-event{color:#fff}.fc-now-indicator{border-color:rgba(255,0,0,.5)}.fc-unthemed .fc-basic-view .fc-scroller{padding:5px 15px}.fc-unthemed .fc-basic-view .fc-content-skeleton{border-top:0}.fc-unthemed .fc-list-view .fc-scroller{padding:0 15px}.fc-list-view{border-width:0}.fc-list-table{width:80%;max-width:400px;margin:0 auto 30px}.fc-unthemed .fc-list-heading td{background:transparent;border-color:transparent;font-size:1.3em;line-height:1em;padding:20px 19px 15px;font-weight:500;color:#2e5bec}.fc-unthemed .fc-list-heading td .fc-list-heading-alt{color:#acacac}.is-small .fc-unthemed .fc-list-heading td{font-size:1.1em}.fc-unthemed .fc-list-item:hover td{background-color:transparent}.fc-list-item{display:block;transition:color .2s ease,border-color .2s ease,opacity .6s ease,box-shadow .2s ease;border:none;border-left:2px solid #939393;background-color:#fff;border-radius:3px;color:#333;margin:1px 0;box-shadow:0 1px 2px rgba(0,0,0,.07);cursor:pointer;margin-bottom:3px;font-weight:500;font-size:12px}.fc-list-item:hover{box-shadow:0 2px 4px rgba(0,0,0,.12);border-left:3px solid #2e5bec;color:#2e5bec;font-weight:600;padding-left:2px}.fc-list-item td{background:transparent;border-color:transparent;transform:translateX(0);transition:transform .2s ease}.fc-list-item:hover td{background:transparent;transform:translateX(2px)}.fc-list-item .fc-list-item-marker{display:none}.fc-list-item .fc-list-item-time{padding-right:0;min-width:110px}.fc-list-item .fc-list-item-title a{font-weight:600}.fc-unthemed .fc-list-empty{background-color:transparent}", ""]);
	
	// exports


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(55);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(51)(content, {"singleton":true});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../../node_modules/css-loader/index.js?minimize!../../node_modules/autoprefixer-loader/index.js!../../node_modules/sass-loader/index.js!./utils.scss", function() {
				var newContent = require("!!../../node_modules/css-loader/index.js?minimize!../../node_modules/autoprefixer-loader/index.js!../../node_modules/sass-loader/index.js!./utils.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(50)();
	// imports
	
	
	// module
	exports.push([module.id, "@keyframes spin{to{transform:rotate(1turn)}}@keyframes shake{0%{transform:translateX(0)}25%{transform:translateX(5px)}50%{transform:translateX(-5px)}75%{transform:translateX(5px)}to{transform:translateX(0)}}", ""]);
	
	// exports


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(57);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(51)(content, {"singleton":true});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../../node_modules/css-loader/index.js?minimize!../../node_modules/autoprefixer-loader/index.js!../../node_modules/sass-loader/index.js!./main.scss", function() {
				var newContent = require("!!../../node_modules/css-loader/index.js?minimize!../../node_modules/autoprefixer-loader/index.js!../../node_modules/sass-loader/index.js!./main.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(50)();
	// imports
	exports.push([module.id, "@import url(https://fonts.googleapis.com/css?family=Open+Sans:400,600);", ""]);
	
	// module
	exports.push([module.id, "/*!\n * Booking.js\n * http://timekit.io\n * (c) 2015 Timekit Inc.\n */@keyframes spin{to{transform:rotate(1turn)}}@keyframes shake{0%{transform:translateX(0)}25%{transform:translateX(5px)}50%{transform:translateX(-5px)}75%{transform:translateX(5px)}to{transform:translateX(0)}}.bookingjs{position:relative;font-family:Open Sans,Helvetica,Tahoma,Arial,sans-serif;font-size:13px;border-radius:4px;background-color:#fff;box-shadow:0 3px 40px 0 rgba(0,0,0,.15);margin:20px auto;z-index:10;opacity:1;color:#333;border-top:1px solid #ececec;min-height:200px}.bookingjs.has-avatar{margin-top:60px}.bookingjs-calendar{border-bottom:1px solid #ececec}.is-small.has-avatar.has-displayname .bookingjs-calendar .fc-toolbar{padding-bottom:24px}.is-small.has-avatar .bookingjs-calendar .fc-toolbar .fc-right h2{display:none}.bookingjs-footer{position:relative;color:#aeaeae;text-align:left;padding:0 15px;background-color:#fbfbfb;min-height:30px;line-height:30px;z-index:40;border-radius:0 0 4px 4px;font-size:12px;overflow:hidden}.is-small .bookingjs-footer{padding:3px 15px;min-height:25px;line-height:25px}.bookingjs-footer-tz{float:left}.bookingjs-footer-tz-picker{display:inline-block}.bookingjs-footer-tz-picker-select:focus,.bookingjs-footer-tz-picker:hover .bookingjs-footer-tz-picker-select{color:#333;border-color:#d3d3d3}.bookingjs-footer-tz-picker:hover .bookingjs-footer-tz-picker-arrowdown{opacity:.6}.bookingjs-footer-tz-picker-select{-webkit-appearance:none;-moz-appearance:none;appearance:none;background:transparent;font-size:inherit;padding:1px 20px 1px 5px;transition:border .2s ease,color .2s ease;border-radius:3px;border:1px solid #ececec;color:#aeaeae;outline:none;max-width:220px}.bookingjs-footer-tz-picker-select::-ms-expand{display:none}.is-small .bookingjs-footer-tz-picker-select{max-width:180px}.bookingjs-footer-tz-picker-arrowdown{position:relative;display:inline-block;pointer-events:none;opacity:.3;left:-19px;top:-2px;transition:opacity .2s ease}.bookingjs-footer-tz-picker-arrowdown svg{width:8px;height:5px}.bookingjs-footer-tz .bookingjs-timezoneicon{height:10px;width:10px;margin-right:5px}.is-small .bookingjs-footer-tz .bookingjs-timezoneicon{display:none}.bookingjs-footer-by{float:right;transition:color .2s ease;color:#aeaeae;text-decoration:none;outline:none}.bookingjs-footer-by .bookingjs-timekitlogo{width:12px;height:12px;margin-left:5px;top:1px;position:relative}.bookingjs-footer-by .bookingjs-timekitlogo path{transition:fill .2s ease;fill:#aeaeae}.is-small .bookingjs-footer-by .bookingjs-timekitlogo{display:none}.bookingjs-footer-by:focus,.bookingjs-footer-by:hover{color:#333}.bookingjs-footer-by:focus .bookingjs-timekitlogo path,.bookingjs-footer-by:hover .bookingjs-timekitlogo path{fill:#333}.is-small .bookingjs-footer-by{float:left}.bookingjs-avatar{position:absolute;top:-50px;left:50%;transform:translateX(-50%);border-radius:150px;border:3px solid #fff;box-shadow:0 1px 3px 0 rgba(0,0,0,.13);overflow:hidden;z-index:40;background-color:#fff}.is-small .bookingjs-avatar{top:-40px}.bookingjs-avatar img{max-width:100%;vertical-align:middle;display:inline-block;width:80px;height:80px}.is-small .bookingjs-avatar img{width:70px;height:70px}.bookingjs-displayname{position:absolute;top:0;left:0;padding:15px 20px;color:#333;font-weight:600}.is-small.has-avatar .bookingjs-displayname{top:44px;padding:0 20px;text-align:center;left:0;right:0;box-sizing:border-box}.bookingjs-bookpage{position:absolute;height:100%;width:100%;top:0;left:0;background-color:#fbfbfb;z-index:30;opacity:0;transition:opacity .2s ease;border-radius:4px;text-align:center}.bookingjs-bookpage.show{opacity:1}.bookingjs-bookpage-close{position:absolute;top:0;right:0;padding:18px;transition:opacity .2s ease;opacity:.3}.bookingjs-bookpage-close:hover{opacity:1}.bookingjs-bookpage-header{margin-bottom:30px}.bookingjs-bookpage-date,.bookingjs-bookpage h2{text-align:center;font-size:34px;font-weight:400;margin-top:50px;margin-bottom:10px}.is-small .bookingjs-bookpage-date,.is-small .bookingjs-bookpage h2{font-size:27px}.bookingjs-bookpage-resource,.bookingjs-bookpage-time,.bookingjs-bookpage h3{text-align:center;font-size:17px;font-weight:400;margin-bottom:15px;margin-top:10px}.is-small .bookingjs-bookpage-resource,.is-small .bookingjs-bookpage-time,.is-small .bookingjs-bookpage h3{font-size:15px;margin-bottom:15px}.bookingjs-bookpage-resource-prefix{text-align:center;font-size:10px;font-weight:300;display:inline-block;position:relative}.bookingjs-bookpage-resource-prefix:before{left:-45px}.bookingjs-bookpage-resource-prefix:after,.bookingjs-bookpage-resource-prefix:before{content:\"\";display:block;width:40px;height:0;border-top:1px solid #ececec;position:absolute;top:7px}.bookingjs-bookpage-resource-prefix:after{right:-45px}.bookingjs-closeicon{height:15px;width:15px}.bookingjs-form{width:350px;position:relative;margin:0 auto;text-align:center}.is-small .bookingjs-form{width:90%}.bookingjs-form-box{position:relative;box-shadow:0 1px 3px 0 rgba(0,0,0,.1);overflow:hidden;background-color:#fff;line-height:0}.bookingjs-form-success-message{position:absolute;top:-999px;left:0;right:0;padding:30px;z-index:10;background-color:#fff;opacity:0;transition:opacity .3s ease;line-height:normal}.is-small .bookingjs-form-success-message{padding:22px 10px}.bookingjs-form-success-message .title{font-size:20px;display:block;margin-bottom:25px}.bookingjs-form-success-message-body{display:block;position:relative;transform:translateY(-50%);top:50%}.bookingjs-form-success-message-body .booked-email{color:#aeaeae}.bookingjs-form.success .bookingjs-form-success-message{opacity:1;top:0;bottom:0}.bookingjs-form-field{position:relative}.bookingjs-form-field--dirty .bookingjs-form-label{opacity:1;top:20px;font-size:11px;color:#2e5bec}.bookingjs-form-field--dirty .bookingjs-form-input{padding:25px 25px 5px}.bookingjs-form-field--dirty .bookingjs-form-input:invalid{box-shadow:inset 0 0 1px 1px #d83b46}.bookingjs-form-field--dirty .bookingjs-form-input--textarea{padding:30px 25px 10px}.bookingjs-form-label{position:absolute;top:30px;left:25px;color:#333;opacity:0;font-size:12px;transition:opacity .2s ease,font-size .2s ease,color .2s ease,top .2s ease}.bookingjs-form-input{transition:box-shadow .2s ease;width:100%;padding:15px 25px;margin:0;border:0 solid #ececec;font-size:1em;box-shadow:inset 0 0 1px 1px hsla(0,0%,100%,0);text-align:left;box-sizing:border-box;line-height:1.5em;font-family:Open Sans,Helvetica,Tahoma,Arial,sans-serif;color:#333;overflow:auto;border-bottom:1px solid #ececec}.bookingjs-form-input:focus{outline:0;box-shadow:inset 0 0 1px 1px #2e5bec}.bookingjs-form-input.hidden{display:none}.bookingjs-form-input:-moz-read-only{cursor:not-allowed;font-style:italic}.bookingjs-form-input:read-only{cursor:not-allowed;font-style:italic}.bookingjs-form-input:-moz-read-only:focus{box-shadow:inset 0 0 1px 1px #d8d8d8}.bookingjs-form-input:read-only:focus{box-shadow:inset 0 0 1px 1px #d8d8d8}.bookingjs-form-field--checkbox{text-align:left;position:relative}.bookingjs-form-label--checkbox{padding:25px 25px 25px 50px;display:block;font-family:Open Sans,Helvetica,Tahoma,Arial,sans-serif;color:#787878;font-size:1em;border-bottom:1px solid #ececec}.bookingjs-form-label--checkbox:disabled{cursor:not-allowed;font-style:italic}.bookingjs-form-label--checkbox:disabled:focus{box-shadow:inset 0 0 1px 1px #d8d8d8}.bookingjs-form-input--checkbox[type=checkbox]{position:absolute;top:19px;left:25px;width:auto;margin:0}.bookingjs-form-input--textarea{padding:15px 25px 25px;overflow:auto}.bookingjs-form-field--select{text-align:left}.bookingjs-form-label--select{opacity:1;top:20px;font-size:11px;color:#2e5bec}.bookingjs-form-input--select{transition:box-shadow .2s ease;width:100%;padding:15px 25px;margin:0;border:0 solid #ececec;font-size:1em;box-shadow:inset 0 0 1px 1px hsla(0,0%,100%,0);text-align:left;box-sizing:border-box;line-height:1.5em;font-family:Open Sans,Helvetica,Tahoma,Arial,sans-serif;color:#333;overflow:auto;border-bottom:1px solid #ececec;padding:25px 25px 5px;-webkit-appearance:none;-moz-appearance:none;appearance:none;border-radius:0;background:transparent;line-height:35px}.bookingjs-form-input--select:focus{outline:0;box-shadow:inset 0 0 1px 1px #2e5bec}.bookingjs-form-input--select.hidden{display:none}.bookingjs-form-input-arrow--select{position:absolute;top:31px;right:25px;width:12px;height:7.42px;opacity:.2;transition:opacity .2s ease;pointer-events:none}.bookingjs-form-field--select:hover .bookingjs-form-input-arrow--select{opacity:.5}.bookingjs-form-button{position:relative;transition:background-color .2s,max-width .3s;display:inline-block;padding:13px 25px;background-color:#2e5bec;text-transform:uppercase;box-shadow:0 1px 3px 0 rgba(0,0,0,.15);color:#fff;border:0;border-radius:3px;font-size:1.1em;font-weight:600;margin-top:30px;cursor:pointer;height:44px;outline:0;text-align:center;max-width:200px}.bookingjs-form-button .error-text,.bookingjs-form-button .loading-text,.bookingjs-form-button .success-text{transition:opacity .3s ease;position:absolute;top:13px;left:50%;transform:translateX(-50%);opacity:0}.bookingjs-form-button .inactive-text{white-space:nowrap;opacity:1}.bookingjs-form-button .loading-text svg{height:19px;width:19px;animation:spin .6s infinite linear}.bookingjs-form-button .error-text svg{height:15px;width:15px;margin-top:2px}.bookingjs-form-button .success-text svg{height:15px;margin-top:2px;transform:scale(0);transition:transform .6s ease}.bookingjs-form-button:focus,.bookingjs-form-button:hover{background-color:#1341d4}.bookingjs-form-button.button-shake{animation:shake .5s 1 ease}.bookingjs-form.loading .bookingjs-form-button,.bookingjs-form.loading .bookingjs-form-button:hover{max-width:80px;background-color:#b1b1b1;cursor:not-allowed}.bookingjs-form.loading .bookingjs-form-button .inactive-text,.bookingjs-form.loading .bookingjs-form-button:hover .inactive-text{opacity:0}.bookingjs-form.loading .bookingjs-form-button .loading-text,.bookingjs-form.loading .bookingjs-form-button:hover .loading-text{opacity:1}.bookingjs-form.error .bookingjs-form-button,.bookingjs-form.error .bookingjs-form-button:hover{max-width:80px;background-color:#d83b46;cursor:not-allowed}.bookingjs-form.error .bookingjs-form-button .inactive-text,.bookingjs-form.error .bookingjs-form-button:hover .inactive-text{opacity:0}.bookingjs-form.error .bookingjs-form-button .error-text,.bookingjs-form.error .bookingjs-form-button:hover .error-text{opacity:1}.bookingjs-form.success .bookingjs-form-button,.bookingjs-form.success .bookingjs-form-button:hover{max-width:80px;background-color:#46ce92;cursor:pointer}.bookingjs-form.success .bookingjs-form-button .inactive-text,.bookingjs-form.success .bookingjs-form-button:hover .inactive-text{opacity:0}.bookingjs-form.success .bookingjs-form-button .success-text,.bookingjs-form.success .bookingjs-form-button:hover .success-text{opacity:1}.bookingjs-form.success .bookingjs-form-button .success-text svg,.bookingjs-form.success .bookingjs-form-button:hover .success-text svg{transform:scale(1)}.bookingjs-loading{position:absolute;height:100%;width:100%;top:0;left:0;background-color:#fbfbfb;z-index:30;opacity:0;transition:opacity .5s ease;border-radius:4px}.bookingjs-loading.show{opacity:1}.bookingjs-loading-icon{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%)}.bookingjs-loading-icon svg{height:30px;width:30px;animation:spin .6s infinite linear}.bookingjs-loading-icon svg path{fill:#2e5bec}.bookingjs-error{position:absolute;height:100%;width:100%;top:0;left:0;background-color:#fbfbfb;z-index:31;opacity:0;transition:opacity .5s ease;border-radius:4px}.bookingjs-error.show{opacity:1}.bookingjs-error-inner{position:absolute;top:50%;transform:translateY(-50%);text-align:center;overflow:scroll;max-height:100%;padding:30px;box-sizing:border-box;width:100%}.bookingjs-error-icon svg{height:30px;width:30px}.bookingjs-error-icon svg g{fill:#d83b46}.bookingjs-error-heading{color:#d83b46;font-size:15px;margin:15px 0}.bookingjs-error-text{font-size:12px;color:#aeaeae;word-break:break-word;overflow:scroll}.bookingjs-error-text-context,.bookingjs-error-text-messag{display:block}", ""]);
	
	// exports


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(59);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(51)(content, {"singleton":true});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../../node_modules/css-loader/index.js?minimize!../../node_modules/autoprefixer-loader/index.js!../../node_modules/sass-loader/index.js!./testmoderibbon.scss", function() {
				var newContent = require("!!../../node_modules/css-loader/index.js?minimize!../../node_modules/autoprefixer-loader/index.js!../../node_modules/sass-loader/index.js!./testmoderibbon.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(50)();
	// imports
	exports.push([module.id, "@import url(https://fonts.googleapis.com/css?family=Open+Sans:400,600);", ""]);
	
	// module
	exports.push([module.id, ".bookingjs-ribbon-wrapper{height:140px;width:35px;bottom:-34px;right:19px;z-index:42;-webkit-backface-visibility:hidden}.bookingjs-ribbon-wrapper,.bookingjs-ribbon-wrapper .bookingjs-ribbon-container{background:transparent;position:absolute;transform:rotate(45deg);overflow:hidden}.bookingjs-ribbon-wrapper .bookingjs-ribbon-container{height:110px;width:110px;left:-54px;top:15px}.bookingjs-ribbon-wrapper .bookingjs-ribbon-container:before{content:\"\";display:block;position:absolute;right:94px;top:0;width:0;height:0;border-left:6px solid transparent;border-right:6px solid transparent;border-bottom:6px solid #ff8c22}.bookingjs-ribbon-wrapper .bookingjs-ribbon-container:after{content:\"\";display:block;position:absolute;right:0;top:92px;width:0;height:0;border-top:6px solid transparent;border-bottom:6px solid transparent;border-left:6px solid #ff8c22}.bookingjs-ribbon-wrapper .bookingjs-ribbon-container .bookingjs-ribbon{width:140px;height:21px;position:relative;top:32px;right:3px;z-index:1;overflow:hidden;transform:rotate(45deg);background:#ffb46e}.bookingjs-ribbon-wrapper .bookingjs-ribbon-container .bookingjs-ribbon>span{text-align:center;display:block;position:relative;bottom:-6px;transform:rotate(180deg);font-size:10px;color:#fbfbfb;text-transform:uppercase;font-weight:700;letter-spacing:1px;line-height:1}", ""]);
	
	// exports


/***/ }),
/* 60 */
/***/ (function(module, exports) {

	'use strict';
	
	module.exports = [
	  { key: 'Pacific/Midway', name: '(-11:00) Midway Island' },
	  { key: 'Pacific/Samoa', name: '(-11:00) Samoa' },
	  { key: 'Pacific/Honolulu', name: '(-10:00) Hawaii' },
	  { key: 'US/Alaska', name: '(-09:00) Alaska' },
	  { key: 'America/Los_Angeles', name: '(-08:00) Pacific Time (US & Canada)' },
	  { key: 'America/Tijuana', name: '(-08:00) Tijuana' },
	  { key: 'US/Arizona', name: '(-07:00) Arizona' },
	  { key: 'America/Chihuahua', name: '(-07:00) Chihuahua' },
	  { key: 'America/Chihuahua', name: '(-07:00) La Paz' },
	  { key: 'America/Mazatlan', name: '(-07:00) Mazatlan' },
	  { key: 'US/Mountain', name: '(-07:00) Mountain Time (US & Canada)' },
	  { key: 'America/Managua', name: '(-06:00) Central America' },
	  { key: 'US/Central', name: '(-06:00) Central Time (US & Canada)' },
	  { key: 'America/Mexico_City', name: '(-06:00) Guadalajara' },
	  { key: 'America/Mexico_City', name: '(-06:00) Mexico City' },
	  { key: 'America/Monterrey', name: '(-06:00) Monterrey' },
	  { key: 'Canada/Saskatchewan', name: '(-06:00) Saskatchewan' },
	  { key: 'America/Bogota', name: '(-05:00) Bogota' },
	  { key: 'US/Eastern', name: '(-05:00) Eastern Time (US & Canada)' },
	  { key: 'US/East-Indiana', name: '(-05:00) Indiana (East)' },
	  { key: 'America/Lima', name: '(-05:00) Lima' },
	  { key: 'America/Bogota', name: '(-05:00) Quito' },
	  { key: 'Canada/Atlantic', name: '(-04:00) Atlantic Time (Canada)' },
	  { key: 'America/Caracas', name: '(-04:30) Caracas' },
	  { key: 'America/La_Paz', name: '(-04:00) La Paz' },
	  { key: 'America/Santiago', name: '(-04:00) Santiago' },
	  { key: 'Canada/Newfoundland', name: '(-03:30) Newfoundland' },
	  { key: 'America/Sao_Paulo', name: '(-03:00) Brasilia' },
	  { key: 'America/Argentina/Buenos_Aires', name: '(-03:00) Buenos Aires' },
	  { key: 'America/Argentina/Buenos_Aires', name: '(-03:00) Georgetown' },
	  { key: 'America/Godthab', name: '(-03:00) Greenland' },
	  { key: 'America/Noronha', name: '(-02:00) Mid-Atlantic' },
	  { key: 'Atlantic/Azores', name: '(-01:00) Azores' },
	  { key: 'Atlantic/Cape_Verde', name: '(-01:00) Cape Verde Is.' },
	  { key: 'Africa/Casablanca', name: '(+00:00) Casablanca' },
	  { key: 'Europe/London', name: '(+00:00) Edinburgh' },
	  { key: 'Etc/Greenwich', name: '(+00:00) Dublin (Greenwich Mean Time)' },
	  { key: 'Europe/Lisbon', name: '(+00:00) Lisbon' },
	  { key: 'Europe/London', name: '(+00:00) London' },
	  { key: 'Africa/Monrovia', name: '(+00:00) Monrovia' },
	  { key: 'UTC', name: '(+00:00) UTC' },
	  { key: 'Europe/Amsterdam', name: '(+01:00) Amsterdam' },
	  { key: 'Europe/Belgrade', name: '(+01:00) Belgrade' },
	  { key: 'Europe/Berlin', name: '(+01:00) Berlin' },
	  { key: 'Europe/Berlin', name: '(+01:00) Bern' },
	  { key: 'Europe/Bratislava', name: '(+01:00) Bratislava' },
	  { key: 'Europe/Brussels', name: '(+01:00) Brussels' },
	  { key: 'Europe/Budapest', name: '(+01:00) Budapest' },
	  { key: 'Europe/Copenhagen', name: '(+01:00) Copenhagen' },
	  { key: 'Europe/Ljubljana', name: '(+01:00) Ljubljana' },
	  { key: 'Europe/Madrid', name: '(+01:00) Madrid' },
	  { key: 'Europe/Paris', name: '(+01:00) Paris' },
	  { key: 'Europe/Prague', name: '(+01:00) Prague' },
	  { key: 'Europe/Rome', name: '(+01:00) Rome' },
	  { key: 'Europe/Sarajevo', name: '(+01:00) Sarajevo' },
	  { key: 'Europe/Skopje', name: '(+01:00) Skopje' },
	  { key: 'Europe/Stockholm', name: '(+01:00) Stockholm' },
	  { key: 'Europe/Vienna', name: '(+01:00) Vienna' },
	  { key: 'Europe/Warsaw', name: '(+01:00) Warsaw' },
	  { key: 'Africa/Lagos', name: '(+01:00) West Central Africa' },
	  { key: 'Europe/Zagreb', name: '(+01:00) Zagreb' },
	  { key: 'Europe/Athens', name: '(+02:00) Athens' },
	  { key: 'Europe/Bucharest', name: '(+02:00) Bucharest' },
	  { key: 'Africa/Cairo', name: '(+02:00) Cairo' },
	  { key: 'Africa/Harare', name: '(+02:00) Harare' },
	  { key: 'Europe/Helsinki', name: '(+02:00) Helsinki' },
	  { key: 'Europe/Istanbul', name: '(+02:00) Istanbul' },
	  { key: 'Asia/Jerusalem', name: '(+02:00) Jerusalem' },
	  { key: 'Europe/Helsinki', name: '(+02:00) Kyiv' },
	  { key: 'Africa/Johannesburg', name: '(+02:00) Pretoria' },
	  { key: 'Europe/Riga', name: '(+02:00) Riga' },
	  { key: 'Europe/Sofia', name: '(+02:00) Sofia' },
	  { key: 'Europe/Tallinn', name: '(+02:00) Tallinn' },
	  { key: 'Europe/Vilnius', name: '(+02:00) Vilnius' },
	  { key: 'Asia/Baghdad', name: '(+03:00) Baghdad' },
	  { key: 'Asia/Kuwait', name: '(+03:00) Kuwait' },
	  { key: 'Europe/Minsk', name: '(+03:00) Minsk' },
	  { key: 'Africa/Nairobi', name: '(+03:00) Nairobi' },
	  { key: 'Asia/Riyadh', name: '(+03:00) Riyadh' },
	  { key: 'Europe/Volgograd', name: '(+03:00) Volgograd' },
	  { key: 'Asia/Tehran', name: '(+03:30) Tehran' },
	  { key: 'Asia/Muscat', name: '(+04:00) Abu Dhabi' },
	  { key: 'Asia/Baku', name: '(+04:00) Baku' },
	  { key: 'Europe/Moscow', name: '(+04:00) Moscow' },
	  { key: 'Asia/Muscat', name: '(+04:00) Muscat' },
	  { key: 'Europe/Moscow', name: '(+04:00) St. Petersburg' },
	  { key: 'Asia/Tbilisi', name: '(+04:00) Tbilisi' },
	  { key: 'Asia/Yerevan', name: '(+04:00) Yerevan' },
	  { key: 'Asia/Kabul', name: '(+04:30) Kabul' },
	  { key: 'Asia/Karachi', name: '(+05:00) Islamabad' },
	  { key: 'Asia/Karachi', name: '(+05:00) Karachi' },
	  { key: 'Asia/Tashkent', name: '(+05:00) Tashkent' },
	  { key: 'Asia/Calcutta', name: '(+05:30) Chennai' },
	  { key: 'Asia/Kolkata', name: '(+05:30) Kolkata' },
	  { key: 'Asia/Calcutta', name: '(+05:30) Mumbai' },
	  { key: 'Asia/Calcutta', name: '(+05:30) New Delhi' },
	  { key: 'Asia/Calcutta', name: '(+05:30) Sri Jayawardenepura' },
	  { key: 'Asia/Katmandu', name: '(+05:45) Kathmandu' },
	  { key: 'Asia/Almaty', name: '(+06:00) Almaty' },
	  { key: 'Asia/Dhaka', name: '(+06:00) Astana' },
	  { key: 'Asia/Dhaka', name: '(+06:00) Dhaka' },
	  { key: 'Asia/Yekaterinburg', name: '(+06:00) Ekaterinburg' },
	  { key: 'Asia/Rangoon', name: '(+06:30) Rangoon' },
	  { key: 'Asia/Bangkok', name: '(+07:00) Bangkok' },
	  { key: 'Asia/Bangkok', name: '(+07:00) Hanoi' },
	  { key: 'Asia/Jakarta', name: '(+07:00) Jakarta' },
	  { key: 'Asia/Novosibirsk', name: '(+07:00) Novosibirsk' },
	  { key: 'Asia/Hong_Kong', name: '(+08:00) Beijing' },
	  { key: 'Asia/Chongqing', name: '(+08:00) Chongqing' },
	  { key: 'Asia/Hong_Kong', name: '(+08:00) Hong Kong' },
	  { key: 'Asia/Krasnoyarsk', name: '(+08:00) Krasnoyarsk' },
	  { key: 'Asia/Kuala_Lumpur', name: '(+08:00) Kuala Lumpur' },
	  { key: 'Australia/Perth', name: '(+08:00) Perth' },
	  { key: 'Asia/Singapore', name: '(+08:00) Singapore' },
	  { key: 'Asia/Taipei', name: '(+08:00) Taipei' },
	  { key: 'Asia/Ulan_Bator', name: '(+08:00) Ulaan Bataar' },
	  { key: 'Asia/Urumqi', name: '(+08:00) Urumqi' },
	  { key: 'Asia/Irkutsk', name: '(+09:00) Irkutsk' },
	  { key: 'Asia/Tokyo', name: '(+09:00) Osaka' },
	  { key: 'Asia/Tokyo', name: '(+09:00) Sapporo' },
	  { key: 'Asia/Seoul', name: '(+09:00) Seoul' },
	  { key: 'Asia/Tokyo', name: '(+09:00) Tokyo' },
	  { key: 'Australia/Adelaide', name: '(+09:30) Adelaide' },
	  { key: 'Australia/Darwin', name: '(+09:30) Darwin' },
	  { key: 'Australia/Brisbane', name: '(+10:00) Brisbane' },
	  { key: 'Australia/Canberra', name: '(+10:00) Canberra' },
	  { key: 'Pacific/Guam', name: '(+10:00) Guam' },
	  { key: 'Australia/Hobart', name: '(+10:00) Hobart' },
	  { key: 'Australia/Melbourne', name: '(+10:00) Melbourne' },
	  { key: 'Pacific/Port_Moresby', name: '(+10:00) Port Moresby' },
	  { key: 'Australia/Sydney', name: '(+10:00) Sydney' },
	  { key: 'Asia/Yakutsk', name: '(+10:00) Yakutsk' },
	  { key: 'Asia/Vladivostok', name: '(+11:00) Vladivostok' },
	  { key: 'Pacific/Auckland', name: '(+12:00) Auckland' },
	  { key: 'Pacific/Fiji', name: '(+12:00) Fiji' },
	  { key: 'Pacific/Kwajalein', name: '(+12:00) International Date Line West' },
	  { key: 'Asia/Kamchatka', name: '(+12:00) Kamchatka' },
	  { key: 'Asia/Magadan', name: '(+12:00) Magadan' },
	  { key: 'Pacific/Fiji', name: '(+12:00) Marshall Is.' },
	  { key: 'Asia/Magadan', name: '(+12:00) New Caledonia' },
	  { key: 'Asia/Magadan', name: '(+12:00) Solomon Is.' },
	  { key: 'Pacific/Auckland', name: '(+12:00) Wellington' },
	  { key: 'Pacific/Tongatapu', name: '(+13:00) Nuku\'alofa' }
	];


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

	var H = __webpack_require__(62);
	module.exports = function() { var T = new H.Template({code: function (c,p,i) { var t=this;t.b(i=i||"");t.b("<div class=\"bookingjs-ribbon-wrapper\">");t.b("\n" + i);t.b("  <div class=\"bookingjs-ribbon-container\">");t.b("\n" + i);t.b("    <div class=\"bookingjs-ribbon\">");t.b("\n" + i);t.b("      <span>");t.b("\n" + i);t.b("        ");t.b(t.v(t.f("ribbonText",c,p,0)));t.b("\n" + i);t.b("      </span>");t.b("\n" + i);t.b("    </div>");t.b("\n" + i);t.b("  </div>");t.b("\n" + i);t.b("</div>");t.b("\n");return t.fl(); },partials: {}, subs: {  }}, "<div class=\"bookingjs-ribbon-wrapper\">\n  <div class=\"bookingjs-ribbon-container\">\n    <div class=\"bookingjs-ribbon\">\n      <span>\n        {{ ribbonText }}\n      </span>\n    </div>\n  </div>\n</div>\n", H);return T; }();

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

	/*
	 *  Copyright 2011 Twitter, Inc.
	 *  Licensed under the Apache License, Version 2.0 (the "License");
	 *  you may not use this file except in compliance with the License.
	 *  You may obtain a copy of the License at
	 *
	 *  http://www.apache.org/licenses/LICENSE-2.0
	 *
	 *  Unless required by applicable law or agreed to in writing, software
	 *  distributed under the License is distributed on an "AS IS" BASIS,
	 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *  See the License for the specific language governing permissions and
	 *  limitations under the License.
	 */
	
	// This file is for use with Node.js. See dist/ for browser files.
	
	var Hogan = __webpack_require__(63);
	Hogan.Template = __webpack_require__(64).Template;
	Hogan.template = Hogan.Template;
	module.exports = Hogan;


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

	/*
	 *  Copyright 2011 Twitter, Inc.
	 *  Licensed under the Apache License, Version 2.0 (the "License");
	 *  you may not use this file except in compliance with the License.
	 *  You may obtain a copy of the License at
	 *
	 *  http://www.apache.org/licenses/LICENSE-2.0
	 *
	 *  Unless required by applicable law or agreed to in writing, software
	 *  distributed under the License is distributed on an "AS IS" BASIS,
	 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *  See the License for the specific language governing permissions and
	 *  limitations under the License.
	 */
	
	(function (Hogan) {
	  // Setup regex  assignments
	  // remove whitespace according to Mustache spec
	  var rIsWhitespace = /\S/,
	      rQuot = /\"/g,
	      rNewline =  /\n/g,
	      rCr = /\r/g,
	      rSlash = /\\/g,
	      rLineSep = /\u2028/,
	      rParagraphSep = /\u2029/;
	
	  Hogan.tags = {
	    '#': 1, '^': 2, '<': 3, '$': 4,
	    '/': 5, '!': 6, '>': 7, '=': 8, '_v': 9,
	    '{': 10, '&': 11, '_t': 12
	  };
	
	  Hogan.scan = function scan(text, delimiters) {
	    var len = text.length,
	        IN_TEXT = 0,
	        IN_TAG_TYPE = 1,
	        IN_TAG = 2,
	        state = IN_TEXT,
	        tagType = null,
	        tag = null,
	        buf = '',
	        tokens = [],
	        seenTag = false,
	        i = 0,
	        lineStart = 0,
	        otag = '{{',
	        ctag = '}}';
	
	    function addBuf() {
	      if (buf.length > 0) {
	        tokens.push({tag: '_t', text: new String(buf)});
	        buf = '';
	      }
	    }
	
	    function lineIsWhitespace() {
	      var isAllWhitespace = true;
	      for (var j = lineStart; j < tokens.length; j++) {
	        isAllWhitespace =
	          (Hogan.tags[tokens[j].tag] < Hogan.tags['_v']) ||
	          (tokens[j].tag == '_t' && tokens[j].text.match(rIsWhitespace) === null);
	        if (!isAllWhitespace) {
	          return false;
	        }
	      }
	
	      return isAllWhitespace;
	    }
	
	    function filterLine(haveSeenTag, noNewLine) {
	      addBuf();
	
	      if (haveSeenTag && lineIsWhitespace()) {
	        for (var j = lineStart, next; j < tokens.length; j++) {
	          if (tokens[j].text) {
	            if ((next = tokens[j+1]) && next.tag == '>') {
	              // set indent to token value
	              next.indent = tokens[j].text.toString()
	            }
	            tokens.splice(j, 1);
	          }
	        }
	      } else if (!noNewLine) {
	        tokens.push({tag:'\n'});
	      }
	
	      seenTag = false;
	      lineStart = tokens.length;
	    }
	
	    function changeDelimiters(text, index) {
	      var close = '=' + ctag,
	          closeIndex = text.indexOf(close, index),
	          delimiters = trim(
	            text.substring(text.indexOf('=', index) + 1, closeIndex)
	          ).split(' ');
	
	      otag = delimiters[0];
	      ctag = delimiters[delimiters.length - 1];
	
	      return closeIndex + close.length - 1;
	    }
	
	    if (delimiters) {
	      delimiters = delimiters.split(' ');
	      otag = delimiters[0];
	      ctag = delimiters[1];
	    }
	
	    for (i = 0; i < len; i++) {
	      if (state == IN_TEXT) {
	        if (tagChange(otag, text, i)) {
	          --i;
	          addBuf();
	          state = IN_TAG_TYPE;
	        } else {
	          if (text.charAt(i) == '\n') {
	            filterLine(seenTag);
	          } else {
	            buf += text.charAt(i);
	          }
	        }
	      } else if (state == IN_TAG_TYPE) {
	        i += otag.length - 1;
	        tag = Hogan.tags[text.charAt(i + 1)];
	        tagType = tag ? text.charAt(i + 1) : '_v';
	        if (tagType == '=') {
	          i = changeDelimiters(text, i);
	          state = IN_TEXT;
	        } else {
	          if (tag) {
	            i++;
	          }
	          state = IN_TAG;
	        }
	        seenTag = i;
	      } else {
	        if (tagChange(ctag, text, i)) {
	          tokens.push({tag: tagType, n: trim(buf), otag: otag, ctag: ctag,
	                       i: (tagType == '/') ? seenTag - otag.length : i + ctag.length});
	          buf = '';
	          i += ctag.length - 1;
	          state = IN_TEXT;
	          if (tagType == '{') {
	            if (ctag == '}}') {
	              i++;
	            } else {
	              cleanTripleStache(tokens[tokens.length - 1]);
	            }
	          }
	        } else {
	          buf += text.charAt(i);
	        }
	      }
	    }
	
	    filterLine(seenTag, true);
	
	    return tokens;
	  }
	
	  function cleanTripleStache(token) {
	    if (token.n.substr(token.n.length - 1) === '}') {
	      token.n = token.n.substring(0, token.n.length - 1);
	    }
	  }
	
	  function trim(s) {
	    if (s.trim) {
	      return s.trim();
	    }
	
	    return s.replace(/^\s*|\s*$/g, '');
	  }
	
	  function tagChange(tag, text, index) {
	    if (text.charAt(index) != tag.charAt(0)) {
	      return false;
	    }
	
	    for (var i = 1, l = tag.length; i < l; i++) {
	      if (text.charAt(index + i) != tag.charAt(i)) {
	        return false;
	      }
	    }
	
	    return true;
	  }
	
	  // the tags allowed inside super templates
	  var allowedInSuper = {'_t': true, '\n': true, '$': true, '/': true};
	
	  function buildTree(tokens, kind, stack, customTags) {
	    var instructions = [],
	        opener = null,
	        tail = null,
	        token = null;
	
	    tail = stack[stack.length - 1];
	
	    while (tokens.length > 0) {
	      token = tokens.shift();
	
	      if (tail && tail.tag == '<' && !(token.tag in allowedInSuper)) {
	        throw new Error('Illegal content in < super tag.');
	      }
	
	      if (Hogan.tags[token.tag] <= Hogan.tags['$'] || isOpener(token, customTags)) {
	        stack.push(token);
	        token.nodes = buildTree(tokens, token.tag, stack, customTags);
	      } else if (token.tag == '/') {
	        if (stack.length === 0) {
	          throw new Error('Closing tag without opener: /' + token.n);
	        }
	        opener = stack.pop();
	        if (token.n != opener.n && !isCloser(token.n, opener.n, customTags)) {
	          throw new Error('Nesting error: ' + opener.n + ' vs. ' + token.n);
	        }
	        opener.end = token.i;
	        return instructions;
	      } else if (token.tag == '\n') {
	        token.last = (tokens.length == 0) || (tokens[0].tag == '\n');
	      }
	
	      instructions.push(token);
	    }
	
	    if (stack.length > 0) {
	      throw new Error('missing closing tag: ' + stack.pop().n);
	    }
	
	    return instructions;
	  }
	
	  function isOpener(token, tags) {
	    for (var i = 0, l = tags.length; i < l; i++) {
	      if (tags[i].o == token.n) {
	        token.tag = '#';
	        return true;
	      }
	    }
	  }
	
	  function isCloser(close, open, tags) {
	    for (var i = 0, l = tags.length; i < l; i++) {
	      if (tags[i].c == close && tags[i].o == open) {
	        return true;
	      }
	    }
	  }
	
	  function stringifySubstitutions(obj) {
	    var items = [];
	    for (var key in obj) {
	      items.push('"' + esc(key) + '": function(c,p,t,i) {' + obj[key] + '}');
	    }
	    return "{ " + items.join(",") + " }";
	  }
	
	  function stringifyPartials(codeObj) {
	    var partials = [];
	    for (var key in codeObj.partials) {
	      partials.push('"' + esc(key) + '":{name:"' + esc(codeObj.partials[key].name) + '", ' + stringifyPartials(codeObj.partials[key]) + "}");
	    }
	    return "partials: {" + partials.join(",") + "}, subs: " + stringifySubstitutions(codeObj.subs);
	  }
	
	  Hogan.stringify = function(codeObj, text, options) {
	    return "{code: function (c,p,i) { " + Hogan.wrapMain(codeObj.code) + " }," + stringifyPartials(codeObj) +  "}";
	  }
	
	  var serialNo = 0;
	  Hogan.generate = function(tree, text, options) {
	    serialNo = 0;
	    var context = { code: '', subs: {}, partials: {} };
	    Hogan.walk(tree, context);
	
	    if (options.asString) {
	      return this.stringify(context, text, options);
	    }
	
	    return this.makeTemplate(context, text, options);
	  }
	
	  Hogan.wrapMain = function(code) {
	    return 'var t=this;t.b(i=i||"");' + code + 'return t.fl();';
	  }
	
	  Hogan.template = Hogan.Template;
	
	  Hogan.makeTemplate = function(codeObj, text, options) {
	    var template = this.makePartials(codeObj);
	    template.code = new Function('c', 'p', 'i', this.wrapMain(codeObj.code));
	    return new this.template(template, text, this, options);
	  }
	
	  Hogan.makePartials = function(codeObj) {
	    var key, template = {subs: {}, partials: codeObj.partials, name: codeObj.name};
	    for (key in template.partials) {
	      template.partials[key] = this.makePartials(template.partials[key]);
	    }
	    for (key in codeObj.subs) {
	      template.subs[key] = new Function('c', 'p', 't', 'i', codeObj.subs[key]);
	    }
	    return template;
	  }
	
	  function esc(s) {
	    return s.replace(rSlash, '\\\\')
	            .replace(rQuot, '\\\"')
	            .replace(rNewline, '\\n')
	            .replace(rCr, '\\r')
	            .replace(rLineSep, '\\u2028')
	            .replace(rParagraphSep, '\\u2029');
	  }
	
	  function chooseMethod(s) {
	    return (~s.indexOf('.')) ? 'd' : 'f';
	  }
	
	  function createPartial(node, context) {
	    var prefix = "<" + (context.prefix || "");
	    var sym = prefix + node.n + serialNo++;
	    context.partials[sym] = {name: node.n, partials: {}};
	    context.code += 't.b(t.rp("' +  esc(sym) + '",c,p,"' + (node.indent || '') + '"));';
	    return sym;
	  }
	
	  Hogan.codegen = {
	    '#': function(node, context) {
	      context.code += 'if(t.s(t.' + chooseMethod(node.n) + '("' + esc(node.n) + '",c,p,1),' +
	                      'c,p,0,' + node.i + ',' + node.end + ',"' + node.otag + " " + node.ctag + '")){' +
	                      't.rs(c,p,' + 'function(c,p,t){';
	      Hogan.walk(node.nodes, context);
	      context.code += '});c.pop();}';
	    },
	
	    '^': function(node, context) {
	      context.code += 'if(!t.s(t.' + chooseMethod(node.n) + '("' + esc(node.n) + '",c,p,1),c,p,1,0,0,"")){';
	      Hogan.walk(node.nodes, context);
	      context.code += '};';
	    },
	
	    '>': createPartial,
	    '<': function(node, context) {
	      var ctx = {partials: {}, code: '', subs: {}, inPartial: true};
	      Hogan.walk(node.nodes, ctx);
	      var template = context.partials[createPartial(node, context)];
	      template.subs = ctx.subs;
	      template.partials = ctx.partials;
	    },
	
	    '$': function(node, context) {
	      var ctx = {subs: {}, code: '', partials: context.partials, prefix: node.n};
	      Hogan.walk(node.nodes, ctx);
	      context.subs[node.n] = ctx.code;
	      if (!context.inPartial) {
	        context.code += 't.sub("' + esc(node.n) + '",c,p,i);';
	      }
	    },
	
	    '\n': function(node, context) {
	      context.code += write('"\\n"' + (node.last ? '' : ' + i'));
	    },
	
	    '_v': function(node, context) {
	      context.code += 't.b(t.v(t.' + chooseMethod(node.n) + '("' + esc(node.n) + '",c,p,0)));';
	    },
	
	    '_t': function(node, context) {
	      context.code += write('"' + esc(node.text) + '"');
	    },
	
	    '{': tripleStache,
	
	    '&': tripleStache
	  }
	
	  function tripleStache(node, context) {
	    context.code += 't.b(t.t(t.' + chooseMethod(node.n) + '("' + esc(node.n) + '",c,p,0)));';
	  }
	
	  function write(s) {
	    return 't.b(' + s + ');';
	  }
	
	  Hogan.walk = function(nodelist, context) {
	    var func;
	    for (var i = 0, l = nodelist.length; i < l; i++) {
	      func = Hogan.codegen[nodelist[i].tag];
	      func && func(nodelist[i], context);
	    }
	    return context;
	  }
	
	  Hogan.parse = function(tokens, text, options) {
	    options = options || {};
	    return buildTree(tokens, '', [], options.sectionTags || []);
	  }
	
	  Hogan.cache = {};
	
	  Hogan.cacheKey = function(text, options) {
	    return [text, !!options.asString, !!options.disableLambda, options.delimiters, !!options.modelGet].join('||');
	  }
	
	  Hogan.compile = function(text, options) {
	    options = options || {};
	    var key = Hogan.cacheKey(text, options);
	    var template = this.cache[key];
	
	    if (template) {
	      var partials = template.partials;
	      for (var name in partials) {
	        delete partials[name].instance;
	      }
	      return template;
	    }
	
	    template = this.generate(this.parse(this.scan(text, options.delimiters), text, options), text, options);
	    return this.cache[key] = template;
	  }
	})( true ? exports : Hogan);


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

	/*
	 *  Copyright 2011 Twitter, Inc.
	 *  Licensed under the Apache License, Version 2.0 (the "License");
	 *  you may not use this file except in compliance with the License.
	 *  You may obtain a copy of the License at
	 *
	 *  http://www.apache.org/licenses/LICENSE-2.0
	 *
	 *  Unless required by applicable law or agreed to in writing, software
	 *  distributed under the License is distributed on an "AS IS" BASIS,
	 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *  See the License for the specific language governing permissions and
	 *  limitations under the License.
	 */
	
	var Hogan = {};
	
	(function (Hogan) {
	  Hogan.Template = function (codeObj, text, compiler, options) {
	    codeObj = codeObj || {};
	    this.r = codeObj.code || this.r;
	    this.c = compiler;
	    this.options = options || {};
	    this.text = text || '';
	    this.partials = codeObj.partials || {};
	    this.subs = codeObj.subs || {};
	    this.buf = '';
	  }
	
	  Hogan.Template.prototype = {
	    // render: replaced by generated code.
	    r: function (context, partials, indent) { return ''; },
	
	    // variable escaping
	    v: hoganEscape,
	
	    // triple stache
	    t: coerceToString,
	
	    render: function render(context, partials, indent) {
	      return this.ri([context], partials || {}, indent);
	    },
	
	    // render internal -- a hook for overrides that catches partials too
	    ri: function (context, partials, indent) {
	      return this.r(context, partials, indent);
	    },
	
	    // ensurePartial
	    ep: function(symbol, partials) {
	      var partial = this.partials[symbol];
	
	      // check to see that if we've instantiated this partial before
	      var template = partials[partial.name];
	      if (partial.instance && partial.base == template) {
	        return partial.instance;
	      }
	
	      if (typeof template == 'string') {
	        if (!this.c) {
	          throw new Error("No compiler available.");
	        }
	        template = this.c.compile(template, this.options);
	      }
	
	      if (!template) {
	        return null;
	      }
	
	      // We use this to check whether the partials dictionary has changed
	      this.partials[symbol].base = template;
	
	      if (partial.subs) {
	        // Make sure we consider parent template now
	        if (!partials.stackText) partials.stackText = {};
	        for (key in partial.subs) {
	          if (!partials.stackText[key]) {
	            partials.stackText[key] = (this.activeSub !== undefined && partials.stackText[this.activeSub]) ? partials.stackText[this.activeSub] : this.text;
	          }
	        }
	        template = createSpecializedPartial(template, partial.subs, partial.partials,
	          this.stackSubs, this.stackPartials, partials.stackText);
	      }
	      this.partials[symbol].instance = template;
	
	      return template;
	    },
	
	    // tries to find a partial in the current scope and render it
	    rp: function(symbol, context, partials, indent) {
	      var partial = this.ep(symbol, partials);
	      if (!partial) {
	        return '';
	      }
	
	      return partial.ri(context, partials, indent);
	    },
	
	    // render a section
	    rs: function(context, partials, section) {
	      var tail = context[context.length - 1];
	
	      if (!isArray(tail)) {
	        section(context, partials, this);
	        return;
	      }
	
	      for (var i = 0; i < tail.length; i++) {
	        context.push(tail[i]);
	        section(context, partials, this);
	        context.pop();
	      }
	    },
	
	    // maybe start a section
	    s: function(val, ctx, partials, inverted, start, end, tags) {
	      var pass;
	
	      if (isArray(val) && val.length === 0) {
	        return false;
	      }
	
	      if (typeof val == 'function') {
	        val = this.ms(val, ctx, partials, inverted, start, end, tags);
	      }
	
	      pass = !!val;
	
	      if (!inverted && pass && ctx) {
	        ctx.push((typeof val == 'object') ? val : ctx[ctx.length - 1]);
	      }
	
	      return pass;
	    },
	
	    // find values with dotted names
	    d: function(key, ctx, partials, returnFound) {
	      var found,
	          names = key.split('.'),
	          val = this.f(names[0], ctx, partials, returnFound),
	          doModelGet = this.options.modelGet,
	          cx = null;
	
	      if (key === '.' && isArray(ctx[ctx.length - 2])) {
	        val = ctx[ctx.length - 1];
	      } else {
	        for (var i = 1; i < names.length; i++) {
	          found = findInScope(names[i], val, doModelGet);
	          if (found !== undefined) {
	            cx = val;
	            val = found;
	          } else {
	            val = '';
	          }
	        }
	      }
	
	      if (returnFound && !val) {
	        return false;
	      }
	
	      if (!returnFound && typeof val == 'function') {
	        ctx.push(cx);
	        val = this.mv(val, ctx, partials);
	        ctx.pop();
	      }
	
	      return val;
	    },
	
	    // find values with normal names
	    f: function(key, ctx, partials, returnFound) {
	      var val = false,
	          v = null,
	          found = false,
	          doModelGet = this.options.modelGet;
	
	      for (var i = ctx.length - 1; i >= 0; i--) {
	        v = ctx[i];
	        val = findInScope(key, v, doModelGet);
	        if (val !== undefined) {
	          found = true;
	          break;
	        }
	      }
	
	      if (!found) {
	        return (returnFound) ? false : "";
	      }
	
	      if (!returnFound && typeof val == 'function') {
	        val = this.mv(val, ctx, partials);
	      }
	
	      return val;
	    },
	
	    // higher order templates
	    ls: function(func, cx, partials, text, tags) {
	      var oldTags = this.options.delimiters;
	
	      this.options.delimiters = tags;
	      this.b(this.ct(coerceToString(func.call(cx, text)), cx, partials));
	      this.options.delimiters = oldTags;
	
	      return false;
	    },
	
	    // compile text
	    ct: function(text, cx, partials) {
	      if (this.options.disableLambda) {
	        throw new Error('Lambda features disabled.');
	      }
	      return this.c.compile(text, this.options).render(cx, partials);
	    },
	
	    // template result buffering
	    b: function(s) { this.buf += s; },
	
	    fl: function() { var r = this.buf; this.buf = ''; return r; },
	
	    // method replace section
	    ms: function(func, ctx, partials, inverted, start, end, tags) {
	      var textSource,
	          cx = ctx[ctx.length - 1],
	          result = func.call(cx);
	
	      if (typeof result == 'function') {
	        if (inverted) {
	          return true;
	        } else {
	          textSource = (this.activeSub && this.subsText && this.subsText[this.activeSub]) ? this.subsText[this.activeSub] : this.text;
	          return this.ls(result, cx, partials, textSource.substring(start, end), tags);
	        }
	      }
	
	      return result;
	    },
	
	    // method replace variable
	    mv: function(func, ctx, partials) {
	      var cx = ctx[ctx.length - 1];
	      var result = func.call(cx);
	
	      if (typeof result == 'function') {
	        return this.ct(coerceToString(result.call(cx)), cx, partials);
	      }
	
	      return result;
	    },
	
	    sub: function(name, context, partials, indent) {
	      var f = this.subs[name];
	      if (f) {
	        this.activeSub = name;
	        f(context, partials, this, indent);
	        this.activeSub = false;
	      }
	    }
	
	  };
	
	  //Find a key in an object
	  function findInScope(key, scope, doModelGet) {
	    var val;
	
	    if (scope && typeof scope == 'object') {
	
	      if (scope[key] !== undefined) {
	        val = scope[key];
	
	      // try lookup with get for backbone or similar model data
	      } else if (doModelGet && scope.get && typeof scope.get == 'function') {
	        val = scope.get(key);
	      }
	    }
	
	    return val;
	  }
	
	  function createSpecializedPartial(instance, subs, partials, stackSubs, stackPartials, stackText) {
	    function PartialTemplate() {};
	    PartialTemplate.prototype = instance;
	    function Substitutions() {};
	    Substitutions.prototype = instance.subs;
	    var key;
	    var partial = new PartialTemplate();
	    partial.subs = new Substitutions();
	    partial.subsText = {};  //hehe. substext.
	    partial.buf = '';
	
	    stackSubs = stackSubs || {};
	    partial.stackSubs = stackSubs;
	    partial.subsText = stackText;
	    for (key in subs) {
	      if (!stackSubs[key]) stackSubs[key] = subs[key];
	    }
	    for (key in stackSubs) {
	      partial.subs[key] = stackSubs[key];
	    }
	
	    stackPartials = stackPartials || {};
	    partial.stackPartials = stackPartials;
	    for (key in partials) {
	      if (!stackPartials[key]) stackPartials[key] = partials[key];
	    }
	    for (key in stackPartials) {
	      partial.partials[key] = stackPartials[key];
	    }
	
	    return partial;
	  }
	
	  var rAmp = /&/g,
	      rLt = /</g,
	      rGt = />/g,
	      rApos = /\'/g,
	      rQuot = /\"/g,
	      hChars = /[&<>\"\']/;
	
	  function coerceToString(val) {
	    return String((val === null || val === undefined) ? '' : val);
	  }
	
	  function hoganEscape(str) {
	    str = coerceToString(str);
	    return hChars.test(str) ?
	      str
	        .replace(rAmp, '&amp;')
	        .replace(rLt, '&lt;')
	        .replace(rGt, '&gt;')
	        .replace(rApos, '&#39;')
	        .replace(rQuot, '&quot;') :
	      str;
	  }
	
	  var isArray = Array.isArray || function(a) {
	    return Object.prototype.toString.call(a) === '[object Array]';
	  };
	
	})( true ? exports : Hogan);


/***/ }),
/* 65 */
/***/ (function(module, exports) {

	module.exports = "<svg class=\"bookingjs-timezoneicon\" viewBox=\"0 0 98 98\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:sketch=\"http://www.bohemiancoding.com/sketch/ns\"><title>Shape</title><desc>Created with Sketch.</desc><defs></defs><g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" sketch:type=\"MSPage\"><g id=\"timezone-icon\" sketch:type=\"MSLayerGroup\" fill=\"#AEAEAE\"><path d=\"M37.656,1.387 L39.381,2.516 L46.176,3.475 L49.313,2.778 L55.186,3.495 L56.364,5.065 L52.274,4.52 L48.092,6.262 L49.293,9.385 L53.613,11.348 L54.189,7.395 L58.285,7.133 L64.121,12.707 L65.775,14.887 L66.56,16.28 L62.029,18.067 L55.185,21.169 L54.624,24.206 L50.095,28.476 L50.271,32.572 L48.9,32.559 L48.353,29.086 L45.757,28.238 L38.294,28.631 L35.286,34.137 L37.901,37.274 L42.221,34.917 L42.516,38.755 L44.172,40.062 L47.131,43.46 L46.985,47.751 L52.448,49.034 L56.454,46.159 L58.284,46.768 L65.003,49.45 L74.433,52.985 L76.396,57.698 L83.111,60.968 L84.644,66.732 L80.062,71.857 L74.66,77.519 L68.933,80.482 L63.04,84.408 L55.185,89.515 L50.835,93.941 L49.292,92.263 L52.782,83.419 L53.663,73.167 L46.15,66.34 L46.199,60.596 L48.164,58.239 L50.471,51.415 L45.809,48.811 L42.664,43.706 L37.75,41.817 L30.047,37.667 L26.904,29.024 L25.334,33.344 L22.977,26.276 L23.762,15.671 L27.69,12.136 L26.512,9.779 L29.26,5.459 L23.905,6.99 C9.611,15.545 0.01,31.135 0.01,49.006 C0.01,76.062 21.945,98 49.006,98 C76.062,98 98,76.062 98,49.006 C98,21.947 76.062,0.012 49.006,0.012 C45.092,0.012 41.305,0.52 37.656,1.387 Z\" id=\"Shape\" sketch:type=\"MSShapeGroup\"></path></g></g></svg>"

/***/ }),
/* 66 */
/***/ (function(module, exports) {

	module.exports = "<svg viewBox=\"0 0 92 57\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><title>Shape</title><desc>Created with Sketch.</desc><defs></defs><g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\"><g id=\"baseline-keyboard_arrow_down-24px\" fill=\"#000000\" fill-rule=\"nonzero\"><path d=\"M14.1475701,2.57246832 L44.5933923,32.6934216 C45.3726692,33.4643833 46.6273308,33.4643833 47.4066077,32.6934216 L77.8524299,2.57246832 C80.9719545,-0.513769666 85.9953329,-0.511030764 89.1114902,2.57860711 L89.2702623,2.73602808 C92.4077787,5.84684331 92.4294243,10.9121169 89.3186091,14.0496333 C89.3025624,14.0658177 89.2864467,14.0819334 89.2702623,14.09798 L47.4081573,55.6038265 C46.6285143,56.3768345 45.3714857,56.3768345 44.5918427,55.6038265 L2.72973768,14.09798 C-0.407778714,10.9871648 -0.429424284,5.92189121 2.68139094,2.78437482 C2.69743758,2.76819044 2.71355331,2.75207472 2.72973768,2.73602808 L2.88850984,2.57860711 C6.00466711,-0.511030764 11.0280455,-0.513769666 14.1475701,2.57246832 Z\" id=\"Shape\"></path></g></g></svg>"

/***/ }),
/* 67 */
/***/ (function(module, exports) {

	module.exports = "<svg class=\"bookingjs-timekitlogo\" viewBox=\"0 0 513 548\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><title>timekit-logo</title><desc>Created with Sketch.</desc><defs></defs><g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\"><g id=\"timekit-logo\" transform=\"translate(9.000000, 9.000000)\" fill=\"#AEAEAE\"><path d=\"M55.2163313,275.621588 L198.50357,163.134257 C227.693194,140.219007 274.527519,140.836287 303.106573,164.516436 L439.222777,277.300154 L294.687237,386.088734 C265.004826,408.430003 217.635083,407.547293 188.834846,384.15411 L55.2163313,275.621588 Z M29.1450782,296.088768 L22.5453033,301.269906 C-6.64628574,324.186699 -6.96035256,361.73094 21.8567615,385.137832 L188.814783,520.750588 C217.626101,544.152772 265.020127,545.031261 294.666324,522.71725 L471.933566,389.292269 C501.58244,366.976243 502.456142,329.694313 473.870647,306.008826 L465.168534,298.798395 L304.79022,419.511467 C268.948833,446.488455 213.042282,445.460488 178.242802,417.194379 L29.1450782,296.088768 Z\" id=\"Base-layer\"></path><path d=\"M303.106573,18.9036609 L473.870647,160.396052 C502.470886,184.093754 501.573077,221.370515 471.912654,243.695235 L294.687237,377.088734 C265.004826,399.430003 217.635083,398.547293 188.834846,375.15411 L21.8366979,239.50876 C-6.94564818,216.130109 -6.64628574,178.573924 22.5453033,155.657132 L198.50357,17.5214821 C227.708304,-5.40562963 274.527519,-4.77648801 303.106573,18.9036609 Z M292.387775,31.8399435 C269.89295,13.2010897 231.857075,12.6958644 208.877526,30.7359084 L32.9192595,168.871558 C12.2117199,185.127966 12.006219,209.880161 32.4287426,226.468491 L199.426891,362.113841 C222.242635,380.64608 261.076006,381.360119 284.584254,363.666001 L461.809671,230.272501 C482.810002,214.466035 483.387128,190.098964 463.151849,173.332334 L292.387775,31.8399435 Z\" id=\"Middle-layer\" stroke=\"#AEAEAE\" stroke-width=\"18\"></path></g></g></svg>"

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

	var H = __webpack_require__(62);
	module.exports = function() { var T = new H.Template({code: function (c,p,i) { var t=this;t.b(i=i||"");t.b("<div class=\"bookingjs-footer\">");t.b("\n" + i);if(t.s(t.f("showTimezoneHelper",c,p,1),c,p,0,58,501,"{{ }}")){t.rs(c,p,function(c,p,t){t.b("  <div class=\"bookingjs-footer-tz\">");t.b("\n" + i);t.b("    ");t.b(t.t(t.f("timezoneIcon",c,p,0)));t.b("\n" + i);t.b("    <span>Your timezone</span>");t.b("\n" + i);t.b("    <div class=\"bookingjs-footer-tz-picker\">");t.b("\n" + i);t.b("      <select class=\"bookingjs-footer-tz-picker-select\">");t.b("\n" + i);if(t.s(t.f("listTimezones",c,p,1),c,p,0,280,343,"{{ }}")){t.rs(c,p,function(c,p,t){t.b("        <option value=\"");t.b(t.v(t.f("key",c,p,0)));t.b("\">");t.b(t.v(t.f("name",c,p,0)));t.b("</option>");t.b("\n" + i);});c.pop();}t.b("      </select>");t.b("\n" + i);t.b("      <div class=\"bookingjs-footer-tz-picker-arrowdown\">");t.b("\n" + i);t.b("        ");t.b(t.t(t.f("arrowDownIcon",c,p,0)));t.b("\n" + i);t.b("      </div>");t.b("\n" + i);t.b("    </div>");t.b("\n" + i);t.b("  </div>");t.b("\n" + i);});c.pop();}if(t.s(t.f("showCredits",c,p,1),c,p,0,547,794,"{{ }}")){t.rs(c,p,function(c,p,t){t.b("  <a class=\"bookingjs-footer-by\" href=\"http://timekit.io?utm_medium=link&utm_source=");t.b(t.v(t.f("campaignSource",c,p,0)));t.b("&utm_campaign=");t.b(t.v(t.f("campaignName",c,p,0)));t.b("&utm_content=powered-by\" target=\"_blank\">");t.b("\n" + i);t.b("    <span>Powered by Timekit</span>");t.b("\n" + i);t.b("    ");t.b(t.t(t.f("timekitLogo",c,p,0)));t.b("\n" + i);t.b("  </a>");t.b("\n" + i);});c.pop();}t.b("</div>");return t.fl(); },partials: {}, subs: {  }}, "<div class=\"bookingjs-footer\">\n  {{# showTimezoneHelper }}\n  <div class=\"bookingjs-footer-tz\">\n    {{& timezoneIcon }}\n    <span>Your timezone</span>\n    <div class=\"bookingjs-footer-tz-picker\">\n      <select class=\"bookingjs-footer-tz-picker-select\">\n        {{# listTimezones }}\n        <option value=\"{{ key }}\">{{ name }}</option>\n        {{/ listTimezones }}\n      </select>\n      <div class=\"bookingjs-footer-tz-picker-arrowdown\">\n        {{& arrowDownIcon }}\n      </div>\n    </div>\n  </div>\n  {{/ showTimezoneHelper }}\n  {{# showCredits }}\n  <a class=\"bookingjs-footer-by\" href=\"http://timekit.io?utm_medium=link&utm_source={{ campaignSource }}&utm_campaign={{ campaignName }}&utm_content=powered-by\" target=\"_blank\">\n    <span>Powered by Timekit</span>\n    {{& timekitLogo }}\n  </a>\n  {{/ showCredits }}\n</div>", H);return T; }();

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

	var H = __webpack_require__(62);
	module.exports = function() { var T = new H.Template({code: function (c,p,i) { var t=this;t.b(i=i||"");t.b("<div class=\"bookingjs-avatar\">");t.b("\n" + i);t.b("  <img src=\"");t.b(t.t(t.f("image",c,p,0)));t.b("\" />");t.b("\n" + i);t.b("</div>");t.b("\n");return t.fl(); },partials: {}, subs: {  }}, "<div class=\"bookingjs-avatar\">\n  <img src=\"{{& image }}\" />\n</div>\n", H);return T; }();

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

	var H = __webpack_require__(62);
	module.exports = function() { var T = new H.Template({code: function (c,p,i) { var t=this;t.b(i=i||"");t.b("<div class=\"bookingjs-displayname\">");t.b("\n" + i);t.b("  <span>");t.b(t.v(t.f("name",c,p,0)));t.b("</span>");t.b("\n" + i);t.b("</div>");t.b("\n");return t.fl(); },partials: {}, subs: {  }}, "<div class=\"bookingjs-displayname\">\n  <span>{{ name }}</span>\n</div>\n", H);return T; }();

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

	var H = __webpack_require__(62);
	module.exports = function() { var T = new H.Template({code: function (c,p,i) { var t=this;t.b(i=i||"");t.b("<div class=\"bookingjs-loading show\">");t.b("\n" + i);t.b("  <div class=\"bookingjs-loading-icon\">");t.b("\n" + i);t.b("    ");t.b(t.t(t.f("loadingIcon",c,p,0)));t.b("\n" + i);t.b("  </div>");t.b("\n" + i);t.b("</div>");t.b("\n");return t.fl(); },partials: {}, subs: {  }}, "<div class=\"bookingjs-loading show\">\n  <div class=\"bookingjs-loading-icon\">\n    {{& loadingIcon }}\n  </div>\n</div>\n", H);return T; }();

/***/ }),
/* 72 */
/***/ (function(module, exports) {

	module.exports = "<svg version=\"1.1\" id=\"loader-1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 38 38\" xml:space=\"preserve\"><path fill=\"#fff\" d=\"M38,19 C38,8.50658975 29.4934102,0 19,0 C8.50658975,0 0,8.50658975 0,19 L5,19 C5,11.2680135 11.2680135,5 19,5 C26.7319865,5 33,11.2680135 33,19 L38,19 Z\" id=\"Oval-1\" sketch:type=\"MSShapeGroup\"></path></path></svg>"

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

	var H = __webpack_require__(62);
	module.exports = function() { var T = new H.Template({code: function (c,p,i) { var t=this;t.b(i=i||"");t.b("<div class=\"bookingjs-error show\">");t.b("\n" + i);t.b("  <div class=\"bookingjs-error-inner\">");t.b("\n" + i);t.b("    <div class=\"bookingjs-error-icon\">");t.b("\n" + i);t.b("      ");t.b(t.t(t.f("errorWarningIcon",c,p,0)));t.b("\n" + i);t.b("    </div>");t.b("\n" + i);t.b("    <div class=\"bookingjs-error-heading\">");t.b("\n" + i);t.b("      Ouch, we've encountered a problem");t.b("\n" + i);t.b("    </div>");t.b("\n" + i);t.b("    <div class=\"bookingjs-error-text\">");t.b("\n" + i);t.b("      <span class=\"bookingjs-error-text-message\">");t.b(t.t(t.f("message",c,p,0)));t.b("</span>");t.b("\n" + i);t.b("      <span class=\"bookingjs-error-text-context\">");t.b(t.t(t.f("context",c,p,0)));t.b("</span>");t.b("\n" + i);t.b("    </div>");t.b("\n" + i);t.b("  </div>");t.b("\n" + i);t.b("</div>");t.b("\n");return t.fl(); },partials: {}, subs: {  }}, "<div class=\"bookingjs-error show\">\n  <div class=\"bookingjs-error-inner\">\n    <div class=\"bookingjs-error-icon\">\n      {{& errorWarningIcon }}\n    </div>\n    <div class=\"bookingjs-error-heading\">\n      Ouch, we've encountered a problem\n    </div>\n    <div class=\"bookingjs-error-text\">\n      <span class=\"bookingjs-error-text-message\">{{& message }}</span>\n      <span class=\"bookingjs-error-text-context\">{{& context }}</span>\n    </div>\n  </div>\n</div>\n", H);return T; }();

/***/ }),
/* 74 */
/***/ (function(module, exports) {

	module.exports = "<svg viewBox=\"0 0 62 55\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><title>error-warning-icon</title><desc>Created with Sketch.</desc><defs></defs><g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\"><g id=\"error-warning-icon\" fill-rule=\"nonzero\" fill=\"#D83B46\"><path d=\"M60.2,41.5 L38.7,5.3 C37.1,2.5 34.2,0.9 31,0.9 C27.8,0.9 24.9,2.5 23.3,5.3 L1.8,41.5 C0.1,44.3 0.1,47.7 1.7,50.5 C3.3,53.3 6.2,55 9.5,55 L52.4,55 C55.7,55 58.6,53.3 60.2,50.5 C61.9,47.7 61.9,44.3 60.2,41.5 Z M55.1,47.6 C54.8,48.1 54.1,49.1 52.5,49.1 L9.5,49.1 C7.9,49.1 7.2,48 6.9,47.6 C6.6,47.1 6.1,45.9 6.9,44.6 L28.4,8.4 C29.2,7.1 30.5,6.9 31,6.9 C31.5,6.9 32.8,7 33.6,8.4 L55.1,44.6 C55.9,45.9 55.3,47.1 55.1,47.6 Z\" id=\"Shape\"></path><path d=\"M31,15.2 C29.3,15.2 28,16.5 28,18.2 L28,34.2 C28,35.9 29.3,37.2 31,37.2 C32.7,37.2 34,35.9 34,34.2 L34,18.2 C34,16.6 32.7,15.2 31,15.2 Z\" id=\"Shape\"></path><path d=\"M31,38.8 C29.3,38.8 28,40.1 28,41.8 L28,42.8 C28,44.5 29.3,45.8 31,45.8 C32.7,45.8 34,44.5 34,42.8 L34,41.8 C34,40.1 32.7,38.8 31,38.8 Z\" id=\"Shape\"></path></g></g></svg>"

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

	var H = __webpack_require__(62);
	module.exports = function() { var T = new H.Template({code: function (c,p,i) { var t=this;t.b(i=i||"");t.b("<div class=\"bookingjs-form-field ");if(t.s(t.f("prefilled",c,p,1),c,p,0,49,76,"{{ }}")){t.rs(c,p,function(c,p,t){t.b("bookingjs-form-field--dirty");});c.pop();}t.b("\">");t.b("\n" + i);t.b("  <label");t.b("\n" + i);t.b("    for=\"input-");t.b(t.v(t.f("key",c,p,0)));t.b("\"");t.b("\n" + i);t.b("    class=\"bookingjs-form-label label-");t.b(t.v(t.f("key",c,p,0)));t.b("\">");t.b("\n" + i);t.b("    ");t.b(t.v(t.f("title",c,p,0)));t.b("\n" + i);t.b("  </label>");t.b("\n" + i);t.b("  <input");t.b("\n" + i);t.b("    id=\"input-");t.b(t.v(t.f("key",c,p,0)));t.b("\"");t.b("\n" + i);t.b("    class=\"bookingjs-form-input input-");t.b(t.v(t.f("key",c,p,0)));t.b("\"");t.b("\n" + i);t.b("    type=\"");t.b(t.v(t.f("format",c,p,0)));t.b("\"");t.b("\n" + i);t.b("    name=\"");t.b(t.v(t.f("key",c,p,0)));t.b("\"");t.b("\n" + i);t.b("    placeholder=\"");t.b(t.v(t.f("title",c,p,0)));t.b("\"");t.b("\n" + i);t.b("    ");if(t.s(t.f("prefilled",c,p,1),c,p,0,385,410,"{{ }}")){t.rs(c,p,function(c,p,t){t.b(" value=\"");t.b(t.v(t.f("prefilled",c,p,0)));t.b("\" ");});c.pop();}t.b("\n" + i);t.b("    ");if(t.s(t.f("readonly",c,p,1),c,p,0,446,456,"{{ }}")){t.rs(c,p,function(c,p,t){t.b(" readonly ");});c.pop();}t.b("\n" + i);t.b("    ");if(t.s(t.f("required",c,p,1),c,p,0,491,501,"{{ }}")){t.rs(c,p,function(c,p,t){t.b(" required ");});c.pop();}t.b("\n" + i);t.b("  />");t.b("\n" + i);t.b("</div>");t.b("\n");return t.fl(); },partials: {}, subs: {  }}, "<div class=\"bookingjs-form-field {{# prefilled }}bookingjs-form-field--dirty{{/ prefilled }}\">\n  <label\n    for=\"input-{{ key }}\"\n    class=\"bookingjs-form-label label-{{ key }}\">\n    {{ title }}\n  </label>\n  <input\n    id=\"input-{{ key }}\"\n    class=\"bookingjs-form-input input-{{ key }}\"\n    type=\"{{ format }}\"\n    name=\"{{ key }}\"\n    placeholder=\"{{ title }}\"\n    {{# prefilled }} value=\"{{ prefilled }}\" {{/ prefilled }}\n    {{# readonly }} readonly {{/ readonly }}\n    {{# required }} required {{/ required }}\n  />\n</div>\n", H);return T; }();

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

	var H = __webpack_require__(62);
	module.exports = function() { var T = new H.Template({code: function (c,p,i) { var t=this;t.b(i=i||"");t.b("<div class=\"bookingjs-form-field ");if(t.s(t.f("prefilled",c,p,1),c,p,0,49,76,"{{ }}")){t.rs(c,p,function(c,p,t){t.b("bookingjs-form-field--dirty");});c.pop();}t.b("\">");t.b("\n" + i);t.b("  <label");t.b("\n" + i);t.b("    for=\"input-");t.b(t.v(t.f("key",c,p,0)));t.b("\"");t.b("\n" + i);t.b("    class=\"bookingjs-form-label label-");t.b(t.v(t.f("key",c,p,0)));t.b("\">");t.b("\n" + i);t.b("    ");t.b(t.v(t.f("title",c,p,0)));t.b("\n" + i);t.b("  </label>");t.b("\n" + i);t.b("  <textarea");t.b("\n" + i);t.b("    id=\"input-");t.b(t.v(t.f("key",c,p,0)));t.b("\"");t.b("\n" + i);t.b("    class=\"bookingjs-form-input bookingjs-form-input--textarea input-");t.b(t.v(t.f("key",c,p,0)));t.b("\"");t.b("\n" + i);t.b("    rows=\"3\"");t.b("\n" + i);t.b("    name=\"");t.b(t.v(t.f("key",c,p,0)));t.b("\"");t.b("\n" + i);t.b("    placeholder=\"");t.b(t.v(t.f("title",c,p,0)));t.b("\"");t.b("\n" + i);t.b("    ");if(t.s(t.f("readonly",c,p,1),c,p,0,407,417,"{{ }}")){t.rs(c,p,function(c,p,t){t.b(" readonly ");});c.pop();}t.b("\n" + i);t.b("    ");if(t.s(t.f("required",c,p,1),c,p,0,452,462,"{{ }}")){t.rs(c,p,function(c,p,t){t.b(" required ");});c.pop();}t.b(">");if(t.s(t.f("prefilled",c,p,1),c,p,0,494,509,"{{ }}")){t.rs(c,p,function(c,p,t){t.b(t.v(t.f("prefilled",c,p,0)));});c.pop();}t.b("</textarea>");t.b("\n" + i);t.b("</div>");t.b("\n");return t.fl(); },partials: {}, subs: {  }}, "<div class=\"bookingjs-form-field {{# prefilled }}bookingjs-form-field--dirty{{/ prefilled }}\">\n  <label\n    for=\"input-{{ key }}\"\n    class=\"bookingjs-form-label label-{{ key }}\">\n    {{ title }}\n  </label>\n  <textarea\n    id=\"input-{{ key }}\"\n    class=\"bookingjs-form-input bookingjs-form-input--textarea input-{{ key }}\"\n    rows=\"3\"\n    name=\"{{ key }}\"\n    placeholder=\"{{ title }}\"\n    {{# readonly }} readonly {{/ readonly }}\n    {{# required }} required {{/ required }}>{{# prefilled }}{{ prefilled }}{{/ prefilled }}</textarea>\n</div>\n", H);return T; }();

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

	var H = __webpack_require__(62);
	module.exports = function() { var T = new H.Template({code: function (c,p,i) { var t=this;t.b(i=i||"");t.b("<div class=\"bookingjs-form-field bookingjs-form-field--select\">");t.b("\n" + i);t.b("  <label");t.b("\n" + i);t.b("    for=\"input-");t.b(t.v(t.f("key",c,p,0)));t.b("\"");t.b("\n" + i);t.b("    class=\"bookingjs-form-label bookingjs-form-label--select label-");t.b(t.v(t.f("key",c,p,0)));t.b("\">");t.b("\n" + i);t.b("    ");t.b(t.v(t.f("title",c,p,0)));t.b("\n" + i);t.b("  </label>");t.b("\n" + i);t.b("  <select");t.b("\n" + i);t.b("    id=\"input-");t.b(t.v(t.f("key",c,p,0)));t.b("\"");t.b("\n" + i);t.b("    class=\"bookingjs-form-input--select input-");t.b(t.v(t.f("key",c,p,0)));t.b("\"");t.b("\n" + i);t.b("    name=\"");t.b(t.v(t.f("key",c,p,0)));t.b("\"");t.b("\n" + i);t.b("    ");if(t.s(t.f("readonly",c,p,1),c,p,0,337,346,"{{ }}")){t.rs(c,p,function(c,p,t){t.b(" disabed ");});c.pop();}t.b("\n" + i);t.b("    ");if(t.s(t.f("required",c,p,1),c,p,0,381,391,"{{ }}")){t.rs(c,p,function(c,p,t){t.b(" required ");});c.pop();}t.b("\n" + i);t.b("  >");t.b("\n" + i);if(t.s(t.f("enum",c,p,1),c,p,0,426,519,"{{ }}")){t.rs(c,p,function(c,p,t){t.b("    <option value=\"");t.b(t.v(t.d(".",c,p,0)));t.b("\" ");if(t.s(t.f("prefilled",c,p,1),c,p,0,471,481,"{{ }}")){t.rs(c,p,function(c,p,t){t.b(" selected ");});c.pop();}t.b(">");t.b(t.v(t.d(".",c,p,0)));t.b("</option>");t.b("\n" + i);});c.pop();}t.b("  </select>");t.b("\n" + i);t.b("  <div class=\"bookingjs-form-input-arrow--select\">");t.b("\n" + i);t.b("    ");t.b(t.t(t.f("arrowDownIcon",c,p,0)));t.b("\n" + i);t.b("  </div>");t.b("\n" + i);t.b("</div>");t.b("\n");return t.fl(); },partials: {}, subs: {  }}, "<div class=\"bookingjs-form-field bookingjs-form-field--select\">\n  <label\n    for=\"input-{{ key }}\"\n    class=\"bookingjs-form-label bookingjs-form-label--select label-{{ key }}\">\n    {{ title }}\n  </label>\n  <select\n    id=\"input-{{ key }}\"\n    class=\"bookingjs-form-input--select input-{{ key }}\"\n    name=\"{{ key }}\"\n    {{# readonly }} disabed {{/ readonly }}\n    {{# required }} required {{/ required }}\n  >\n    {{# enum }}\n    <option value=\"{{ . }}\" {{# prefilled }} selected {{/ prefilled }}>{{ . }}</option>\n    {{/ enum }}\n  </select>\n  <div class=\"bookingjs-form-input-arrow--select\">\n    {{& arrowDownIcon }}\n  </div>\n</div>\n", H);return T; }();

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

	var H = __webpack_require__(62);
	module.exports = function() { var T = new H.Template({code: function (c,p,i) { var t=this;t.b(i=i||"");t.b("<div class=\"bookingjs-form-field bookingjs-form-field--checkbox\">");t.b("\n" + i);t.b("  <input");t.b("\n" + i);t.b("    id=\"input-");t.b(t.v(t.f("key",c,p,0)));t.b("\"");t.b("\n" + i);t.b("    class=\"bookingjs-form-input--checkbox input-");t.b(t.v(t.f("key",c,p,0)));t.b("\"");t.b("\n" + i);t.b("    type=\"checkbox\"");t.b("\n" + i);t.b("    name=\"");t.b(t.v(t.f("key",c,p,0)));t.b("\"");t.b("\n" + i);t.b("    value=\"true\"");t.b("\n" + i);t.b("    ");if(t.s(t.f("prefilled",c,p,1),c,p,0,237,246,"{{ }}")){t.rs(c,p,function(c,p,t){t.b(" checked ");});c.pop();}t.b("\n" + i);t.b("    ");if(t.s(t.f("readonly",c,p,1),c,p,0,282,292,"{{ }}")){t.rs(c,p,function(c,p,t){t.b(" disabled ");});c.pop();}t.b("\n" + i);t.b("    ");if(t.s(t.f("required",c,p,1),c,p,0,327,337,"{{ }}")){t.rs(c,p,function(c,p,t){t.b(" required ");});c.pop();}t.b("\n" + i);t.b("  />");t.b("\n" + i);t.b("  <label");t.b("\n" + i);t.b("    for=\"input-");t.b(t.v(t.f("key",c,p,0)));t.b("\"");t.b("\n" + i);t.b("    class=\"bookingjs-form-label--checkbox label-");t.b(t.v(t.f("key",c,p,0)));t.b("\">");t.b("\n" + i);t.b("    ");t.b(t.v(t.f("title",c,p,0)));t.b("\n" + i);t.b("  </label>");t.b("\n" + i);t.b("</div>");t.b("\n");return t.fl(); },partials: {}, subs: {  }}, "<div class=\"bookingjs-form-field bookingjs-form-field--checkbox\">\n  <input\n    id=\"input-{{ key }}\"\n    class=\"bookingjs-form-input--checkbox input-{{ key }}\"\n    type=\"checkbox\"\n    name=\"{{ key }}\"\n    value=\"true\"\n    {{# prefilled }} checked {{/ prefilled }}\n    {{# readonly }} disabled {{/ readonly }}\n    {{# required }} required {{/ required }}\n  />\n  <label\n    for=\"input-{{ key }}\"\n    class=\"bookingjs-form-label--checkbox label-{{ key }}\">\n    {{ title }}\n  </label>\n</div>\n", H);return T; }();

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

	var H = __webpack_require__(62);
	module.exports = function() { var T = new H.Template({code: function (c,p,i) { var t=this;t.b(i=i||"");t.b("<div class=\"bookingjs-bookpage\">");t.b("\n" + i);t.b("  <a class=\"bookingjs-bookpage-close\" href=\"#\">");t.b(t.t(t.f("closeIcon",c,p,0)));t.b("</a>");t.b("\n" + i);t.b("  <div class=\"bookingjs-bookpage-header\">");t.b("\n" + i);t.b("    <h2 class=\"bookingjs-bookpage-date\">");t.b(t.v(t.f("chosenDate",c,p,0)));t.b("</h2>");t.b("\n" + i);t.b("    <h3 class=\"bookingjs-bookpage-time\">");t.b(t.v(t.f("chosenTime",c,p,0)));t.b("</h3>");t.b("\n" + i);if(t.s(t.f("allocatedResource",c,p,1),c,p,0,293,465,"{{ }}")){t.rs(c,p,function(c,p,t){t.b("      <span class=\"bookingjs-bookpage-resource-prefix\">");t.b(t.v(t.f("allocatedResourcePrefix",c,p,0)));t.b("</span>");t.b("\n" + i);t.b("      <h3 class=\"bookingjs-bookpage-resource\">");t.b(t.v(t.f("allocatedResource",c,p,0)));t.b("</h3>");t.b("\n" + i);});c.pop();}t.b("  </div>");t.b("\n" + i);t.b("  <form class=\"bookingjs-form\" action=\"#\">");t.b("\n" + i);t.b("    <div class=\"bookingjs-form-box\">");t.b("\n" + i);t.b("      <div class=\"bookingjs-form-success-message\">");t.b("\n" + i);t.b("        <div class=\"bookingjs-form-success-message-body\">");t.b(t.t(t.f("successMessage",c,p,0)));t.b("</div>");t.b("\n" + i);t.b("      </div>");t.b("\n" + i);t.b("      <div class=\"bookingjs-form-fields\">");t.b("\n" + i);t.b("      </div>");t.b("\n" + i);t.b("    </div>");t.b("\n" + i);t.b("    <button class=\"bookingjs-form-button\" type=\"submit\">");t.b("\n" + i);t.b("      <span class=\"inactive-text\">");t.b(t.v(t.f("submitText",c,p,0)));t.b("</span>");t.b("\n" + i);t.b("      <span class=\"loading-text\">");t.b(t.t(t.f("loadingIcon",c,p,0)));t.b("</span>");t.b("\n" + i);t.b("      <span class=\"error-text\">");t.b(t.t(t.f("errorIcon",c,p,0)));t.b("</span>");t.b("\n" + i);t.b("      <span class=\"success-text\">");t.b(t.t(t.f("checkmarkIcon",c,p,0)));t.b("</span>");t.b("\n" + i);t.b("    </button>");t.b("\n" + i);t.b("  </form>");t.b("\n" + i);t.b("</div>");t.b("\n");return t.fl(); },partials: {}, subs: {  }}, "<div class=\"bookingjs-bookpage\">\n  <a class=\"bookingjs-bookpage-close\" href=\"#\">{{& closeIcon }}</a>\n  <div class=\"bookingjs-bookpage-header\">\n    <h2 class=\"bookingjs-bookpage-date\">{{ chosenDate }}</h2>\n    <h3 class=\"bookingjs-bookpage-time\">{{ chosenTime }}</h3>\n    {{#allocatedResource}}\n      <span class=\"bookingjs-bookpage-resource-prefix\">{{ allocatedResourcePrefix }}</span>\n      <h3 class=\"bookingjs-bookpage-resource\">{{ allocatedResource }}</h3>\n    {{/allocatedResource}}\n  </div>\n  <form class=\"bookingjs-form\" action=\"#\">\n    <div class=\"bookingjs-form-box\">\n      <div class=\"bookingjs-form-success-message\">\n        <div class=\"bookingjs-form-success-message-body\">{{& successMessage }}</div>\n      </div>\n      <div class=\"bookingjs-form-fields\">\n      </div>\n    </div>\n    <button class=\"bookingjs-form-button\" type=\"submit\">\n      <span class=\"inactive-text\">{{ submitText }}</span>\n      <span class=\"loading-text\">{{& loadingIcon }}</span>\n      <span class=\"error-text\">{{& errorIcon }}</span>\n      <span class=\"success-text\">{{& checkmarkIcon }}</span>\n    </button>\n  </form>\n</div>\n", H);return T; }();

/***/ }),
/* 80 */
/***/ (function(module, exports) {

	module.exports = "<svg class=\"bookingjs-closeicon\" viewBox=\"0 0 90 90\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:sketch=\"http://www.bohemiancoding.com/sketch/ns\"><title>close-icon</title><desc>Created with Sketch.</desc><defs></defs><g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" sketch:type=\"MSPage\"><g id=\"close-icon\" sketch:type=\"MSLayerGroup\" fill=\"#000000\"><path d=\"M58,45 L87.2,15.8 C90.9,12.1 90.9,6.3 87.3,2.7 C83.7,-0.9 77.8,-0.8 74.2,2.8 L45,32 L15.8,2.8 C12.1,-0.9 6.3,-0.9 2.7,2.7 C-0.9,6.3 -0.8,12.2 2.8,15.8 L32,45 L2.8,74.2 C-0.9,77.9 -0.9,83.7 2.7,87.3 C6.3,90.9 12.2,90.8 15.8,87.2 L45,58 L74.2,87.2 C77.9,90.9 83.7,90.9 87.3,87.3 C90.9,83.7 90.8,77.8 87.2,74.2 L58,45 L58,45 Z\" id=\"Shape\" sketch:type=\"MSShapeGroup\"></path></g></g></svg>"

/***/ }),
/* 81 */
/***/ (function(module, exports) {

	module.exports = "<svg viewBox=\"0 0 38 26\" x=\"0px\" y=\"0px\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:sketch=\"http://www.bohemiancoding.com/sketch/ns\"><path fill=\"#fff\" d=\"M4.59255916,9.14153015 L4.59255916,9.14153015 L4.59255917,9.14153016 C3.61060488,8.15335155 2.0152224,8.15314806 1.03260582,9.1419932 L0.737322592,9.43914816 C-0.245558943,10.4282599 -0.245836003,12.0327396 0.736862454,13.0216671 L12.8967481,25.2586313 C13.4826504,25.8482474 14.3060779,26.1023412 15.1093609,25.9623831 L15.1946218,25.9520176 C15.7962843,25.9101633 16.3621851,25.6553951 16.7974015,25.21742 L37.2642739,4.6208133 C38.2456495,3.63321696 38.2453889,2.02851586 37.2626092,1.03950653 L36.967326,0.742351578 C35.9843771,-0.246827998 34.390543,-0.247513927 33.4085772,0.740676315 L15.4197831,18.8434968 L14.826599,19.4404409 L14.2334149,18.8434968 L4.59255916,9.14153015 Z\" id=\"Path\"></path></svg>"

/***/ }),
/* 82 */
/***/ (function(module, exports) {

	module.exports = "<svg class=\"bookingjs-closeicon\" viewBox=\"0 0 90 90\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:sketch=\"http://www.bohemiancoding.com/sketch/ns\"><title>error-icon</title><desc>Created with Sketch.</desc><defs></defs><g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" sketch:type=\"MSPage\"><g id=\"error-icon\" sketch:type=\"MSLayerGroup\" fill=\"#FFFFFF\"><path d=\"M58,45 L87.2,15.8 C90.9,12.1 90.9,6.3 87.3,2.7 C83.7,-0.9 77.8,-0.8 74.2,2.8 L45,32 L15.8,2.8 C12.1,-0.9 6.3,-0.9 2.7,2.7 C-0.9,6.3 -0.8,12.2 2.8,15.8 L32,45 L2.8,74.2 C-0.9,77.9 -0.9,83.7 2.7,87.3 C6.3,90.9 12.2,90.8 15.8,87.2 L45,58 L74.2,87.2 C77.9,90.9 83.7,90.9 87.3,87.3 C90.9,83.7 90.8,77.8 87.2,74.2 L58,45 L58,45 Z\" id=\"Shape\" sketch:type=\"MSShapeGroup\"></path></g></g></svg>"

/***/ })
/******/ ])
});
;
//# sourceMappingURL=booking.js.map