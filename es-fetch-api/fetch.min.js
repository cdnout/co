let globalFetch;"function"==typeof fetch&&(globalFetch=fetch);const use=e=>globalFetch=e,credentials={omit:"omit",include:"include",sameOrigin:"same-origin"},mode={cors:"cors",noCors:"no-cors",sameOrigin:"same-origin",navigate:"navigate"},methods={GET:"GET",POST:"POST",PUT:"PUT",DELETE:"DELETE",HEAD:"HEAD",CONNECT:"CONNECT",OPTIONS:"OPTIONS",TRACE:"TRACE",PATCH:"PATCH"},caches={default:"default",noStore:"no-store",reload:"reload",noCache:"no-cache",forceCache:"force-cache",onlyIfCached:"only-if-cached"},redirects={follow:"follow",error:"error",manual:"manual"},referrers={noReferrer:"",client:"about:client"},joinUrl=(e,...r)=>[e.replace(/\/$/,""),...r.map(e=>e.replaceAll(/^\/|\/$/g,"")).filter(e=>e)].join("/"),isURL=e=>{try{new URL(e)}catch(e){return!1}return!0};class WebApiContext{method=methods.GET;mode=mode.cors;credentials=credentials.include;redirect=redirects.follow;cache=caches.default;referrer=referrers.client;constructor(e,r){this.url=new URL(isURL(r)?r:joinUrl(e,r))}header(e,r){return void 0===r?{...this.headers}[e]:(this.headers={...this.headers,[e]:r},this)}async commit(){return this.response=await globalFetch(this.url,this),(this.response.context=this).response}}const getApi=c=>async(...e)=>{var r="string"==typeof e[0]?e.shift():void 0;const t=new WebApiContext(c,r),o=[...e].flat(),s=()=>{const e=o.shift();return e?e(t,s):t.commit()};return s()};export{use,credentials,mode,methods,caches,redirects,referrers,WebApiContext,getApi};